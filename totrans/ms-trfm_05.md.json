["```\n# Use an official Python runtime as a parent image\nFROM python:3.7-slim\n# Set the working directory in the container to /app\nWORKDIR /app\n# Copy the current directory contents into the container at /app\nCOPY . /app\n# Install any needed packages specified in requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n# Make port 80 available to the world outside this container\nEXPOSE 80\n# Run app.py when the container launches\nCMD \\[\"python\", \"app.py\"]\n```", "```\ndocker build -t your-image-name .\n```", "```\ndocker images\n```", "```\ndocker run -p 4000:80 your-image-name\n```", "```\ndocker ps\n```", "```\ndocker login\n```", "```\ndocker tag foo:1.0 markti/foo:1.0\n```", "```\ndocker push markti/foo:1.0\n```", "```\ndocker pull markti/foo:1.0\n```", "```\nkubectl run nginx --image=nginx\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n```", "```\nkubectl apply -f my-deployment.yaml\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: my-app\n        image: my-app:1.0\n        ports:\n        - containerPort: 8080\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: my-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-config\ndata:\n  my-value: \"Hello, Kubernetes!\"\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: my-app\n        image: my-app:1.0\n        env:\n        - name: MY_VALUE\n          valueFrom:\n            configMapKeyRef:\n              name: my-config\n              key: my-value\n```", "```\nprovider \"kubernetes\" {\n  host                   = var.cluster_endpoint\n  client_certificate     = file(var.client_cert_path)\n  client_key             = file(var.client_key_path)\n  cluster_ca_certificate = file(var.cluster_ca_cert_path)\n}\n```", "```\nprovider \"kubernetes\" {\n  load_config_file = true\n  config_path      = \"~/.kube/config\"\n  context          = \"foo\"\n}\n```", "```\nresource \"kubernetes_deployment\" \"my_app\" {\n  metadata {\n    name = \"my-app\"\n  }\n  spec {\n    replicas = 3\n    selector {\n      match_labels = {\n        app = \"my-app\"\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = \"my-app\"\n        }\n      }\n      spec {\n        container {\n          image = \"my-app:1.0\"\n          name  = \"my-app\"\n          port {\n            container_port = 8080\n          }\n        }\n      }\n    }\n  }\n}\n```", "```\napiVersion: v2\nname: my-webapp\nversion: 0.1.0\ndescription: A basic web application Helm chart\n```", "```\nreplicaCount: 1\nimage:\n  repository: nginx\n  tag: stable\n  pullPolicy: IfNotPresent\nservice:\n  type: ClusterIP\n  port: 80\ningress:\n  enabled: false\n  annotations: {}\n  path: /\n  hosts:\n    - my-webapp.local\n  tls: []\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ template \"my-webapp.fullname\" . }}\n  labels:\n    app: {{ template \"my-webapp.name\" . }}\nspec:\n  replicas: {{ .Values.replicaCount }}\n  selector:\n    matchLabels:\n      app: {{ template \"my-webapp.name\" . }}\n  template:\n    metadata:\n      labels:\n        app: {{ template \"my-webapp.name\" . }}\n    spec:\n      containers:\n        - name: {{ template \"my-webapp.name\" . }}\n          image: \"{{ .Values.image.repository }}:{{ .Values.image.tag }}\"\n          imagePullPolicy: {{ .Values.image.pullPolicy }}\n          ports:\n            - containerPort: 80\n```", "```\nkubectl apply -f <file>.yaml\n```", "```\nhelm install my-webapp ./my-webapp\n```", "```\nterraform {\n    required_providers {\n        helm = {\n            source = \"hashicorp/helm\"\n            version = \"~> 2.0.0\"\n        }\n    }\n}\n```", "```\nprovider \"helm\" {\n    kubernetes {\n        config_path = \"~/.kube/config\"\n    }\n}\n```", "```\nresource \"helm_release\" \"my_application\" {\n    name       = \"my-application\"\n    repository = https://kubernetes-charts.storage.googleapis.com/\n    chart      = \"my-application-chart\"\n    version    = \"1.0.0\"\n}\n```"]