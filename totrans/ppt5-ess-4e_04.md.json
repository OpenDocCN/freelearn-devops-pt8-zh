["```\nclass apache {\n  package { 'apache2':\n    ensure => present,\n  }\n  file { '/etc/apache2/apache2.conf':\n    ensure => 'file',\n    source =>\n    'puppet:///modules/apache/etc/apache2/apache2.conf', \n  } \n  service { 'apache2': \n    ensure    => running,\n    enable    => true, \n    subscribe => File['/etc/apache2/apache2.conf', \n  } \n} \n```", "```\ninclude apache \n```", "```\nnode 'webserver01' {\n  include apache\n}\n```", "```\ndefine virtual_host(\n  String $content,\n  String[3,3] $priority = '050'\n) {\n  file { \"/etc/apache2/sites-available/${name}\":\n    ensure  => 'file',\n    owner   => 'root',\n    group   => 'root',\n    mode    => '0644',\n    content => $content\n  }\n  file { \"/etc/apache2/sites-enabled/${priority}-${name}\": \n    ensure => 'link', \n    target => \"../sites-available/${name}\";\n  }\n} \n```", "```\nvirtual_host { 'example.net': \n  content => file('apache/vhosts/example.net') \n}\nvirtual_host{ 'fallback': \n  priority => '999', \n  content  => file('apache/vhosts/fallback') \n}   \n```", "```\nvirtual_host {\n  'example.net':\n    content  => 'foo';\n  'fallback':\n    priority => '999',\n    content  => ...,\n} \n```", "```\npackage { 'apache2': }\n```", "```\nvirtual_host { 'wordpress': \n  content  => file(...), \n  priority => '011', \n}\nvirtual_host { 'wordpress': \n  content  => '# Dummy vhost', \n  priority => '600', \n}\n```", "```\nclass monolithic_security { \n  package { [ 'iptables', 'rkhunter', 'postfix' ]:\n    ensure => 'installed';\n  } \n  cron { 'run-rkhunter': \n    ... \n  } \n  file { '/etc/init.d/iptables-firewall': \n    source => ... \n    mode => 755 \n  }\n  file { '/etc/postfix/main.cf': \n    ensure => 'file', \n    content => ... \n  } \n  service { [ 'postfix', 'iptables-firewall' ]: \n    ensure => 'running', \n    enable => true \n  } \n}\nclass divided_security {\n  include iptables_firewall\n  include rkhunter\n  include postfix\n}\n```", "```\npackage { 'netcat':  \n  ensure => 'installed'  \n}  \n```", "```\nclass netcat { \n  package { 'netcat':  \n    ensure => 'installed'  \n  }  \n}  \n```", "```\nclass scripts_directory {  \n  file { [ '/opt/company/', '/opt/company/bin' ]:  \n    ensure => 'directory',  \n    owner  => 'root',  \n    group  => 'root',  \n    mode   => '0755',  \n  }  \n} \n```", "```\ndefine module_file(String $module) {  \n  file { $title:  \n    source => \"puppet:///modules/${module}/${title}\" \n  }  \n} \n```", "```\nmodule_file { '/etc/ntpd.conf':  \n  module => 'ntp': \n}  \n```", "```\nfile { '/etc/ntpd.conf':  \n  source => 'puppet:///modules/ntp/etc/ntpd.conf': \n}  \n```", "```\ndefine module_file( \n  String $module, \n  Optional[String] $mode = undef \n) {  \n  if $mode != undef {  \n    File { mode => $mode }  \n  }  \n  file { $title:  \n    source => \"puppet:///modules/${module}/${title}\"  \n  }  \n} \n```", "```\nFile[$name] { mode => $mode }\n```", "```\ndefine user_with_key(\n  String $key, \n  Optional[String] $uid = undef, \n  String $group = 'users'\n) {\n  user { $title: \n    ensure     => present\n    gid        => $group, \n    uid        => $uid,\n    managehome => true, \n  }\n  ssh_authorized_key { \"key for ${title}\": \n    ensure => present, \n    user   => $title, \n    type   => 'rsa', \n    key    => $key, \n  } \n}\n```", "```\nfile { '/etc/example_app/conf.d.enabled/england': \n  ensure => 'link', \n  target => '../conf.d.available/england' \n}\nfile { '/etc/example_app/conf.d.enabled/ireland': \n  ensure => 'link', \n  target => '../conf.d.available/ireland' \n}\nfile { '/etc/example_app/conf.d.enabled/germany': \n  ensure => 'link', \n  target => '../conf.d.available/germany' \n  ... \n}\n```", "```\ndefine example_app_config { \n  file { \"/etc/example_app/conf.d.enabled/${title}\": \n    ensure => 'link', \n    target => \"../conf.d.available/${title}\", \n  } \n} \n```", "```\nexample_app_config {'england': }\nexample_app_config {'ireland': }\nexample_app_config {'germany': }\n... \n```", "```\nexample_app_config { [ 'england', 'ireland', 'germany', ... ]: \n}\n```", "```\ndefine example_app_config (\n  Array $regions = []\n) {\n  file { \"/etc/example_app/conf.d.enabled/${name}\":\n    ensure => link,\n    target => \"../conf.d.available/${name}\",\n  }\n  # to do: add functionality for $regions\n}\n```", "```\nexample_app_config { 'england':\n  regions => [ 'South East', 'London' ],\n}\nexample_app_config { 'ireland':\n  regions => [ 'Connacht', 'Ulster' ],\n}\nexample_app_config { 'germany':\n  regions => [ 'Berlin', 'Bayern', 'Hamburg' ],\n}\n... \n```", "```\nfile { $regions:\n  path   => \"/etc/example_app/conf.d.enabled/${title}/ \n    regions/${name}\",\n  ensure => 'link',\n  target => \"../../regions.available/${name}\";\n}\n```", "```\ndefine example_app_region(String $country) { \n  file { \"/etc/example_app/conf.d.enabled/${country}/regions/${title}\":\n    ensure => 'link', \n    target => \"../../regions.available/${title}\",\n  } \n}  \n```", "```\ndefine example_app_config(Array $regions = []) {\n  file { \"/etc/example_app/conf.d.enabled/${title}\": \n    ensure => 'link', \n    target => \"../conf.d.available/${title}\", \n  } \n  example_app_region { $regions: \n   country => $title,\n  } \n}\n```", "```\n[ 'england', 'ireland', 'germany' ].each |$country| { \n  file { \"/etc/example_app/conf.d.enabled/${country}\": \n    ensure => 'link', \n    target => \"../conf.d.available/${country}\",\n  } \n}   \n```", "```\n$region_data = { \n  'england' => [ 'South East', 'London' ], \n  'ireland' => [ 'Connacht', 'Ulster' ], \n  'germany' => [ 'Berlin', 'Bayern', 'Hamburg' ], \n}\n$region_data.each |$country, $region_array| {\n  $region_array.each |$region| {\n    file { \"/etc/example_app/conf.d.enabled/${country}/ \n      regions/${region}\":\n      ensure => link,\n      target => \"../../regions.available/${region}\",\n    }\n  }\n} \n```", "```\nfile { [ '/etc/example_app', '/etc/example_app/config.d.enabled' ]:\n  ensure => 'directory',\n} \n```", "```\ndefine example_app_config(Array $regions = []) {\n  include example_app_config_directories\n...\n} \n```", "```\nfile { '/var/lib/apache2/sample-module/data01.bin':\n  source => '...',\n  notify => Class['apache'],\n}\nservice { 'apache-logwatch': \n  enable    => true, \n  subscribe => Class['apache'], \n}  \n```", "```\n$active_countries = [ 'England', 'Ireland', 'Germany' ]\nservice { 'example-app': \n  enable    => true, \n  subscribe => Symlink[$active_countries], \n} \n```", "```\nsymlink { [ 'England', 'Ireland', 'Germany' ]: \n  notify => Service['example-app'], \n} \n```", "```\nfile { '/etc/example_app/main.conf':  \n  source => '...',  \n  notify => Protected_service['example-app'],  \n} \n```", "```\ninclude firewall \ninclude loadbalancing \nClass['firewall'] -> Class['loadbalancing'] \n```", "```\nclass apache {\n  include apache::service\n  include apache::package\n  include apache::config\n}\nfile { '/etc/apache2/conf.d/passwords.conf':\n  source  => '...', \n  require => Class['apache'], \n} \n```", "```\nfile { '/etc/apache2/conf.d/passwords.conf':  \n  source  => '...',  \n  require => Class['apache'],  \n  notify  => Class['apache'],  \n}  \n```", "```\nfile { '/etc/apache2/conf.d/passwords.conf': \n  source  => '...',  \n  require => Class['apache::package'],  \n  notify  => Class['apache::service'],  \n}  \n```", "```\nclass apache {  \n  virtual_host { 'example.net': ... } \n  ...  \n} \n```", "```\nclass example_app { \n  anchor { 'example_app::begin': \n    notify => Class['example_app_config'], \n  } \n  include example_app_config \n  anchor { 'example_app::end': \n   require => Class['example_app_config'],\n  } \n} \n```", "```\nclass apache {\n  contain apache::service\n  contain apache::package\n  contain apache::config\n}\n```", "```\nclass apache::config(Integer $max_clients=100) { \n  file { '/etc/apache2/conf.d/max_clients.conf':\n    content => \"MaxClients ${max_clients}\\n\",\n  }\n}\n```", "```\nclass { 'apache::config':  \n  max_clients => 120, \n}  \n```", "```\nclass { 'apache::config': } \ninclude apache::config \n```", "```\ninclude apache::config \nclass { 'apache::config': } \n```", "```\nclass apache {\n  class { 'apache::service': }\n  class { 'apache::package': }\n  class { 'apache::config': }\n}\n```"]