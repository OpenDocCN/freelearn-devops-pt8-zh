["```\n# /etc/puppet/environments/puppet_update/environment.conf\n# environment config file for special puppet_update environment\nparser = future\n```", "```\npuppet agent --test --environment=puppet_update --noop \n```", "```\npuppet cert list -all  \n```", "```\npuppet cert list --all\n+ \"puppetmaster.example.net\" (SHA256) 7D:11:33:00:94:B3:C4:48:D2:10:B3:C7:B0:38:71:28:C5:75:2C:61:3B:3E:63:C6:95:7C:C9:DF:59:F7:C5:BE (alt names: \"DNS:puppet\", \"DNS:puppet.example.net\", \"DNS:puppetmaster.example.net\")\n```", "```\ncurl -O http://apt.puppetlabs.com/puppetlabs-release-pc1-wheezy.deb\ndpkg -i puppetlabs-release-pc1-wheezy.deb\napt-get update\napt-get install puppetserver puppet-agent\n```", "```\nini_setting { 'puppet_ca_server':\n  path    => '/etc/puppet/puppet.conf',\n  section => 'agent',\n  setting => 'ca_server',\n  value   => 'puppet4.example.net'\n}\n```", "```\npuppet agent --test --noop --server puppet4.example.net --environment development\n```", "```\nclass ssh (\n  $server = true,\n){\n  if $server {\n    include ssh::server\n  }\n}\n```", "```\nclass { 'ssh': \n  server => 'false', \n} \n```", "```\nclass ssh (\n  $server = true,\n){\n  validate_bool($server)\n  if $server {\n    include ssh::server\n  }\n}\n```", "```\nclass ssh ( \n  Boolean $server = true, \n){ \n  if $server { \n    include ssh::server \n  } \n} \n```", "```\nclass { 'ssh': \n  server = 'false', \n} \n```", "```\nroot@puppetmaster# puppet apply ssh.pp\nError: Expected parameter 'server' of 'Class[Ssh]' to have type Boolean, got String at ssh.pp:2 on node puppetmaster.example.net\n```", "```\n$ssh_port = '22' \n$ssh_port_integer = 0 + $ssh_port \n```", "```\n$enable_real = $enable ? { \n  Boolean => $enable, \n  String  => str2bool($enable), \n  default => fail('Unsupported value for ensure. Expected either \n   bool or string.'), \n} \n```", "```\nclass ssh (\n  Boolean $server = true,\n  Enum['des','3des','blowfish'] $cipher = 'des',\n){\n  if $server {\n    include ssh::server\n  }\n}\n```", "```\nclass { 'ssh': \n  ciper => 'foo', \n} \n```", "```\npuppet apply ssh.pp\nError: Expected parameter 'ciper' of 'Class[Ssh]' to have type Enum['des','3des','blowfish'] got String at ssh.pp:2 on node puppetmaster.example.net \n```", "```\nclass ssh ( \n  Boolean $server = true, \n  Enum['des','3des','blowfish'] $cipher = 'des', \n  Optional[Array[String]] $allowed_users = undef, \n){ \n  if $server { \n    include ssh::server \n  } \n} \n```", "```\nclass { 'ssh': \n  allowed_users => 'foo', \n} \n```", "```\npuppet apply ssh.pp\nError: Expected parameter 'userlist' of 'Class[Ssh]' to have type Optional[Array[String]], got String at ssh.pp:2 on node puppetmaster.example.net\n```", "```\nclass ssh ( \n  Boolean $server = true, \n  Optional[Array[String]] $allowed_users = undef, \n  Integer[1,1023] $sshd_port, \n){ \n  if $server { \n    include ssh::server \n  } \n} \n```", "```\nclass { 'ssh': \n  sshd_port => 'ssh', \n} \n```", "```\npuppet apply ssh.pp\nError: Expected parameter 'sshd_port' of 'Class[Ssh]' to have type Integer[1, 1023], got String at ssh.pp:2 on node puppetmaster.example.net  \n```", "```\n$hash_map = { \n  'ben'     => { \n    'uid'   => 2203, \n    'home'  => '/home/ben', \n  }, \n  'jones'   => { \n    'uid'   => 2204, \n    'home'  => 'home/jones', \n  } \n} \n```", "```\nclass users ( \n  Hash $users \n){ \n  notify { 'Valid Hash': } \n} \nclass { 'users': \n  users => $hash_map, \n} \n```", "```\npuppet apply hash.pp\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.32 seconds\nNotice: Valid hash\nNotice: /Stage[main]/Users/Notify[Valid hash]/message: defined 'message' as 'Valid hash'\nNotice: Applied catalog in 0.03 seconds \n```", "```\nclass users ( \n  Hash[ \n    String, \n    Struct[ { 'uid' => Integer, \n              'home' => Pattern[ /^\\/.*/ ] } ] \n  ] $users \n){ \n  notify { 'Valid hash': } \n} \n```", "```\npuppet apply hash.pp\nError: Expected parameter 'users' of 'Class[Users]' to have type Hash[String, Struct[{'uid'=>Integer, 'home'=>Pattern[/^\\/.*/]}]], got Struct[{'ben'=>Struct[{'uid'=>Integer, 'home'=>String}], 'jones'=>Struct[{'uid'=>Integer, 'home'=>String}]}] at hash.pp:32 on node puppetmaster.example.net\n```", "```\ndefine users::user ( \n  Integer        $uid, \n  Pattern[/^\\/.*/] $home, \n){ \n  notify { \"User: ${title}, UID: ${uid}, HOME: ${home}\": } \n} \n```", "```\nclass users ( \n  Hash[String, Hash] $users \n){ \n  $keys = keys($users) \n  each($keys) |String $username| { \n    users::user{ $username: \n      uid  => $users[$username]['uid'], \n      home => $users[$username]['home'], \n    } \n  } \n} \n```", "```\npuppet apply hash.pp\nError: Expected parameter 'home' of 'Users::User[jones]' to have type Pattern[/^\\/.*/], got String at hash.pp:23 on node puppetmaster.example.net  \n```", "```\n$hash_map = { \n  'ben'    => { \n    'uid'  => 2203, \n    'home' => '/home/ben', \n  }, \n  'jones'  => { \n    'uid'  => 2204, \n    'home' => '/home/jones', \n  } \n} \n```", "```\npuppet apply hash.pp\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.33 seconds\nNotice: User: ben, UID: 2203, HOME: /home/ben\nNotice: /Stage[main]/Users/Users::User[ben]/Notify[User: ben, UID: 2203, HOME: /home/ben]/message: defined 'message' as 'User: ben, UID: 2203, HOME: /home/ben'\nNotice: User: jones, UID: 2204, HOME: /home/jones\nNotice: /Stage[main]/Users/Users::User[jones]/Notify[User: jones, UID: 2204, HOME: /home/jones]/message: defined 'message' as 'User: jones, UID: 2204, HOME: /home/jones'\nNotice: Applied catalog in 0.03 seconds\n```", "```\n# stlib/types/absolutepath.pp \ntype Stdlib::Absolutepath = Variant[Stdlib::Windowspath, Stdlib::Unixpath] \n```", "```\n#firewall/types/ipaddress.pp \ntype Firewall::Ipaddress = Variant[Firewall::Ipv4, Firewall::Ipv6] \n```", "```\n$packages = ['htop', 'less', 'vim']\neach($packages) |String $package| \n{\n      package { $package:\n        ensure => latest,\n  }\n}\n```", "```\nclass puppet_symlinks { \n  $symlinks = [ puppet', 'facter', 'hiera' ] \n  puppet_symlinks::symlinks { $symlinks: } \n} \n\ndefine puppet_symlinks::symlinks { \n  file { \"/usr/local/bin/${title}\": \n    ensure => link, \n    target => \"/opt/puppetlabs/bin/${title}\", \n  } \n} \n```", "```\nclass puppet_symlinks { \n  $symlinks = [ 'puppet', 'facter', 'hiera' ] \n  $symlinks.each | String $symlink | { \n    file { \"/usr/local/bin/${symlink}\": \n      ensure => link, \n      target => \"/opt/puppetlabs/bin/${symlink}\", \n    } \n  } \n} \n```", "```\nfunction($variable) \n```", "```\n$variable.function \n```", "```\n$array = [ '1', '2', '3', '4'] \n$array.slice(2) |$slice| { \n  notify { \"Slice: ${slice}\": } \n} \n```", "```\n    Notice: Slice: [1, 2]\n    Notice: Slice: [3, 4]\n```", "```\n$hash = { \n  'key 1' => {'value11' => '11', 'value12' => '12',}, \n  'key 2' => {'value21' => '21', 'value22' => '22',}, \n  'key 3' => {'value31' => '31', 'value32' => '32',}, \n  'key 4' => {'value41' => '41', 'value42' => '42',}, \n} \n\n$hash.slice(2) |$hslice| { \n  notify { \"HSlice: ${hslice}\": } \n} \n```", "```\n Notice: HSlice: [[key1, {value11 => 11, value12 => \n  12}], \n  [key2, {value21 => 21, value22 => 22}]]\n Notice: HSlice: [[key3, {value31 => 31, value32 => \n  32}], \n  [key4, {value41 => 41, value42 => 42}]]\n```", "```\n$pkg_array = [ 'libjson', 'libjson-devel', 'libfoo', 'libfoo-devel' ] \n$dev_packages = $pkg_array.filter |$element| { \n  $element =~ /devel/ \n} \nnotify { \"Packages to install: ${dev_packages}\": } \n```", "```\n Notice: Packages to install: [libjson-devel, libfoo-\n devel]\n```", "```\n$hash = { \n  'jones' => { \n    'gid' => 'admin', \n  }, \n  'james' => { \n    'gid' => 'devel', \n  }, \n  'john'  => { \n    'gid' => 'admin', \n  }, \n} \n\n$user_hash = $hash.filter |$key, $value| { \n  $value['gid'] =~ /admin/ \n} \n$user_list = keys($user_hash) \nnotify { \"Users to create: ${user_list}\": } \n```", "```\n    Notice: Users to create: [jones, john]\n```", "```\n# modules/utils/lib/puppet/functions/resolver.rb \nrequire 'socket' \nPuppet::Functions.create_function(:resolver) do \n  def resolver() \n    Socket.gethostname \n  end \nend \n```", "```\nrequire 'resolv' \nrequire 'socket' \nPuppet::Functions.create_function(:resolver) do \n  dispatch :ip_param do \n     param 'Pattern[/^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/]', :ip \n  end \n  dispatch :fqdn_param do \n     param 'Pattern[/^([a-z0-9\\.].*$/]', :fdqn \n  end \n  dispatch :no_param do \n  end \n\n  def no_param \n    Socket.gethostname \n  end \n  def ip_param(ip) \n    Resolv.getname(ip) \n  end \n  def fqdn_param(fqdn) \n    Resolv.getaddress(fqdn) \n  end \nend \n```", "```\nclass resolver { \n  $localname = resolver() \n  notify { \"Without argument resolver returns local \n  hostname: \n  ${localname}\": } \n\n  $remotename = resolver('puppetlabs.com') \n  notify { \"With argument puppetlabs.com: ${remotename}\": \n  } \n\n  $remoteip = resolver('8.8.8.8') \n  notify { \"With argument 8.8.8.8: ${remoteip}\": } \n  } \n```", "```\npuppet apply -e 'include resolver'\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.35 seconds\n...\nNotice: Without argument resolver returns local hostname: puppetmaster\nNotice: With argument puppetlabs.com: 52.10.10.141\nNotice: With argument 8.8.8.8: google-public-dns-a.google.com\nNotice: Applied catalog in 0.04 seconds\n```", "```\n# modules/utils/lib/puppet/functions/resolver/resolve.rb \nrequire 'resolv' \nrequire 'socket' \nPuppet::Functions.create_function(:'resolver::resolve') do \n  # the rest of the function is identical to the example given \n   # above \nend \n```", "```\nclass resolver { \n  $localname = resolver::resolve() \n  $remotename = resolver::resolve('puppetlabs.com') \n  $remoteip = resolver::resolve('8.8.8.8') \n} \n```", "```\n# motd file - managed by Puppet \nThis system is running on <%= $::operatingsystem %> \n```", "```\n<%- | String $local_variable, \n      Array  $local_array \n| -%> \n```", "```\nepp('template/test.epp', {'local_variable' => 'value', 'local_array' => ['value1', 'value2'] }) \n```", "```\n# ERB syntax \n<% @array.each do |element| -%> \n<%= element %> \n<% end -%> \n\n# EPP syntax \n<% $array.each |$element| { -%> \n<%= $element %> \n<% } -%> \n```", "```\nfile {'/etc/motd': \n  ensure  => file, \n  content => inline_epp(\"Welcome to <%= $::fqdn %>\\n\") \n} \n```", "```\n$motd_content = @(EOF) \n  This system is managed by Puppet \n  local changes will be overwritten by next Puppet run. \nEOF\n```", "```\n$motd_content = @(\"EOF\") \n  Welcome to ${::fqdn}. \n  This system is managed by Puppet version ${::puppetversion}. \n  Local changes will be overwritten by the next Puppet run \nEOF\n```", "```\n$modt_content = @(\"EOF\"/tn) \nWelcome to ${::fqdn}.\\n\\tThis system is managed by Puppet version ${::puppetversion}.\\n\\tLocal changes will be overwritten on next Puppet run. \nEOF\n```", "```\n$motd_content = @(\"EOF\")\n    Welcome to ${::fqdn}.\n    This system is managed by Puppet version ${::puppetversion}.\n    Local changes will be overwritten on next Puppet run.\n    | EOF\n```", "```\nclass my_motd (\n  Optional[String] $additional_content = undef\n){\n  $motd_content = @(EOF)\n    Welcome to <%= $::fqdn %>.\n    This system is managed by Puppet version \n    <%= $::puppetversion %>.\n    Local changes will be overwritten on next Puppet run.\n    <% if $additional_content != undef { -%>\n    <%= $additional_content %>\n    <% } -%>\n    | EOF\n  file { '/etc/motd':\n    ensure  => file,\n    content => inline_epp($motd_content, {  \n    additional_content => $additional_content } ),\n  }\n} \n```", "```\npuppet apply -e 'include my_motd'\nWelcome to puppetmaster.example.net.\nThis system is managed by Puppet version 4.2.1.\nLocal changes will be overwritten on next Puppet run.  \n```", "```\n# settings related to metrics\nmetrics: {\n  # a server id that will be used as part of the namespace \n  for metrics produced\n  # by this server\n  server-id: \"puppet.bi.example42.com\"\n  registries: {\n    puppetserver: {\n      # specify metrics to allow in addition to those in \n      the default list\n      #metrics-allowed: [\"compiler.compile.production\"]\n      # enable or disable JMX metrics reporter\n      jmx: {\n        enabled: true\n      }\n      # enable or disable Graphite metrics reporter\n      graphite: {\n        enabled: true\n      }\n    }\n  }\n  # this section is used to configure settings for \n  reporters that will send\n  # the metrics to various destinations for external \n  viewing\n  reporters: {\n    graphite: {\n      host: \"10.0.4.2\"\n      port: \"2003\"\n      update-interval-seconds: 5\n    }\n  }\n  metrics-webservice: {\n    jolokia: {\n      # Enable or disable the Jolokia-based metrics/v2 \n      endpoint.\n      # Default is true.\n      # enabled: false\n      # Configure any of the settings listed at:\n      # \n      https://jolokia.org/reference/html/agents.html#war-\n      agent-installation\n      servlet-init-params: {\n        # Specify a custom security policy:\n        # https://jolokia.org/reference/html/security.html\n        # policyLocation: \n        \"file:///etc/puppetlabs/puppetserver/jolokia-\n        access.xml\"\n      }\n    }\n  }\n}\n```", "```\nHocon_setting {\n  path   => \n  '/etc/puppetlabs/puppetserver/conf.d/metrics.conf',\n  notify => Service['puppetserver'],\n  }\n  hocon_setting {'server metrics server-id':\n    ensure  => present,\n    setting => 'metrics.server-id',\n    value   => 'localhost',\n  }\n  hocon_setting {'server metrics reporters graphite':\n    ensure  => present,\n    setting => \n 'metrics.registries.puppetserver.reporters.graphite.enabled',\n    value   => true,\n  }\n  hocon_setting {'server metrics graphite host':\n    ensure  => present,\n    setting => 'metrics.reporters.graphite.host',\n    value   => $graphite_server,\n  }\n  hocon_setting {'server metrics graphite port':\n    ensure  => present,\n    setting => 'metrics.reporters.graphite.port',\n    value   => 2003,\n  }\n  hocon_setting {'server metrics graphite update \n  interval':\n    ensure  => present,\n    setting => 'metrics.reporters.graphite.update-\n    interval-seconds',\n    value   => 5,\n  } \n```", "```\nnode 'graphite.example.com' {   include grafanadash::dev }\n```", "```\nnode basenode {\n  include security\n  include ldap\n  include base\n}\nnode 'www01.example.net' inherits 'basenode' {\n  class { 'apache': }\n  include apache::mod::php\n  include webapplication\n}\n```", "```\nclass profile::base { \n  include security \n  include ldap \n  include base \n} \nclass profile::webserver { \n  class { 'apache': } \n  include apache_mod_php \n} \n\nclass role::webapplication { \n  include profile::base \n  include profile::webserver \n  include profile::webapplication \n} \n\nnode 'www01.example.net' { \n  include role::webapplication \n} \n```", "```\nclass ssh ( \n  $server = true, \n){\n  if $server {...} \n} \n```", "```\ninclude ssh \nclass { 'ssh': server => 'yes', } \n```", "```\nclass { 'ssh': server => false, } \nclass { 'ssh': server => '', } \n```", "```\nclass ssh ( \n  $server = true, \n){ \n  if $server and $server != '' {...} \n} \n```", "```\nclass variables \n{ \n  $Local_var = 'capital variable' \n  notify { \"Local capital var: ${Local_var}\": } \n} \n```", "```\nroot@puppetmaster:/etc/puppetlabs/code/environments/production/modules# puppet apply -e 'include variables'\nError: Illegal variable name, The given name 'Local_var' does not conform to the naming rule /^((::)?[a-z]\\w*)*((::)?[a-z_]\\w*)$/ at /etc/puppetlabs/code/environments/production/modules/variables/manifests/init.pp:3:3 on node puppetmaster.example.net \n```", "```\nUser [Root] \nUser[Root]\n```", "```\nType['title']\n```", "```\nUser['root'] \n```", "```\nclass syslog-ng {...} \n\ninclude syslog-ng \n```", "```\nclass syslog_ng { \n  ... \n} \n\ninclude syslog_ng \n```", "```\n# in module \"mysql\" \nclass mysql { \n  ... \n} \n# in module \"application\" \nclass application::mysql { \n  include mysql \n} \n```", "```\nclass application::mysql { \n  include ::mysql \n} \n```", "```\ncase $::operatingsystemmajrelease { \n  '8': { \n    include base::debian::jessie \n  } \n} \n```", "```\nif $::operatingsystemmajrelease > 7 { \n  include base::debian::jessie \n} \n```", "```\nError: Evaluation Error: Comparison of: String > Integer, is not possible. Caused by 'A String is not comparable to a non String' \n```"]