- en: Role-Based Access Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Role-Based Access Control** (**RBAC**) policy framework enables both operators
    and users to grant access to resources for specific projects or tenants. Prior
    to RBAC, Neutron applied an all-or-nothing approach to the sharing of networks
    across projects. If a network was marked as shared, it was shared with all projects.
    Access control policies built using the Neutron RBAC API allow operators and users
    to share certain network resources with one or more projects using a more granular
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'As of the Pike release of OpenStack, access that can be granted using access
    control policies includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Regular port creation permissions on networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attaching router gateways to networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding **Quality of Service** (**QoS**) policy permissions to networks or ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on the concept and implementation of role-based
    access control in Neutron, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction to role-based access control for networking resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and managing access control policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstrating the use of access control policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QoS is an advanced networking topic that's not covered in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Working with access control policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The workflow for managing RBAC policies follows the standard Create, Read, Update,
    and Delete (CRUD) model that is used throughout the Neutron API. The OpenStack
    command-line interface can be used to manage access control policies. As of the
    Pike release of OpenStack, Horizon support for RBAC has not been implemented.
    However, resources shared via a policy can be utilized within the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Managing access control policies in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From within the openstack command-line client, a number of commands can be
    used to manage access control policies. The primary commands associated with access
    control policy management that will be discussed in this chapter are listed in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Role-Based Access Control Commands** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `network rbac create` | Creates the network RBAC policy |'
  prefs: []
  type: TYPE_TB
- en: '| `network rbac delete` | Deletes the network RBAC policy |'
  prefs: []
  type: TYPE_TB
- en: '| `network rbac list` | Lists network RBAC policies |'
  prefs: []
  type: TYPE_TB
- en: '| `network rbac set` | Sets network RBAC policy properties |'
  prefs: []
  type: TYPE_TB
- en: '| `network rbac show` | Displays network RBAC policy details |'
  prefs: []
  type: TYPE_TB
- en: Creating access control policies in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create an access control policy, use the `openstack network rbac create` command
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `--type` argument allows you to specify the type of object the policy affects.
    Possible options include `network` or `qos_policy`. Only network policies are
    described in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The `--action` argument allows you to specify the action for the access policy.
    Possible options include `access_as_external` or `access_as_shared`. The former
    allows a network to be used as an external network for routers for a subset of
    projects, while the latter allows a network to be used as a shared network for
    a subset of projects.
  prefs: []
  type: TYPE_NORMAL
- en: The `--target-project` argument specifies the project to which the access policy
    will be enforced.
  prefs: []
  type: TYPE_NORMAL
- en: The `--target-project-domain` argument is optional and allows you to specify
    the domain the target project belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: The `--project` argument is optional and allows you to specify the owner of
    the access policy.
  prefs: []
  type: TYPE_NORMAL
- en: The `--project-domain` argument is optional and allows you to specify the domain
    the owner project belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: The `rbac-object` argument specifies the name of the object that the policy
    applies to. This may be a network name or ID if the type is network, or a QOS
    policy ID if the type is qos_policy.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting access control policies in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete an access control policy, use the `openstack network rbac delete`
    command and specify the ID of the RBAC object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiple access policies can also be deleted simultaneously, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Neutron will successfully delete the access policy as long as another project
    is not utilizing a shared resource.
  prefs: []
  type: TYPE_NORMAL
- en: Listing access control policies in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To obtain a listing of access control policies, use the `openstack network
    rbac list` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The results can be filtered by type and action. The output returned includes
    the action, ID, shared object ID, and shared object type.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the details of an access control policy in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display the details of an access policy, use the `openstack network rbac
    show` command that''s shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Updating access control policies in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To update the attributes of an access policy, use the `openstack network rbac
    set` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command allows you to change the target project and domain of an existing
    access control policy.
  prefs: []
  type: TYPE_NORMAL
- en: Applying RBAC policies to projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before an RBAC policy can be created, you need to have a network or QoS policy
    that you wish to share among a subset of projects. In the following sections,
    we will create projects, roles, users, and networks, and I will demonstrate how
    an access control policy limits the visibility and use of shared resources between
    the projects versus the default behavior of the shared attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Creating projects and users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the openstack client, let''s create three projects named ProjectA, ProjectB,
    and ProjectC, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49a501fd-4116-4367-9984-0132db638d88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the openstack client, create a role named `rbacdemo`. Then, create a
    user in each project and apply the `rbacdemo` role to each user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb924879-4a76-4a30-994e-7124bc616e16.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a network to share
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the openstack client, create a network named `MySemiSharedNetwork` and
    a subnet named `MySemiSharedSubnet` as the admin user. This network will be shared
    among some of the newly created projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d732d3d-a08d-491a-9a69-bb8458d2a92e.png)'
  prefs: []
  type: TYPE_IMG
- en: In the network details, observe that the shared attribute of the network is
    set to `False`. In this state, the network can only be used by users associated
    with the owning project. In this case, this is the admin project. Setting it to
    `True` would make the network usable by all projects, which is something we'd
    like to avoid.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating an RBAC policy requires the following four details:'
  prefs: []
  type: TYPE_NORMAL
- en: Policy type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Action to perform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By default, the `MySemiSharedNetwork` network created in the last section is
    limited to the admin project that created it. Using the openstack client, create
    a new RBAC policy that shares the network with the `ProjectA` project by using
    the `access_as_shared` action, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68d58048-9bf8-4179-8459-45221fae4912.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The access control policy can be viewed with the `openstack network rbac list`
    and/or `show` commands that can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1978fd28-b54a-49aa-903a-c5afbec5ff3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing the policy in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As UserA in the ProjectA project, the `openstack network list` command can
    be used to confirm that the network is available for use, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14584662-3ca6-4e5a-9f9e-92898f304595.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Users in the `ProjectB` and `ProjectC` projects, however, cannot see the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cba89e36-8444-4492-bf7d-ca329111afcc.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the query as a user in the `ProjectB` and `ProjectC` projects returns
    no results, and the network will not be usable by those projects. For every project
    that a network object must be shared with, a separate policy must be created.
    The `openstack network rbac create` command can be used to create additional policies
    by specifying different projects but sharing the same network resource.
  prefs: []
  type: TYPE_NORMAL
- en: Creating policies for external networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: External networks are used to attach Neutron routers to the physical network
    and help provide routing in and out of a project via routes and floating IPs.
    When a network's external attribute is set to `True`, the network is shared among all
    projects. Access policies can be used to limit external networks to a subset of
    projects. The syntax for creating a policy for external networks is very similar
    to the policy demonstrated in the last section. The action, however, will change
    from `access_as_shared` to `access_as_external`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, an external network named `MySemiSharedExternalNetwork` using
    VLAN 31 has been created with the goal of sharing it with a subset of projects.
    Notice that the shared attribute is `False` and that the external attribute is
    internal, meaning that it can only be used for internal networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97059d3c-4255-4141-84c8-7c46ff8eead3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As a result, the network will not be listed when running `openstack network
    list --external`, and is ineligible for use as an external network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3389bb57-e50e-4a44-a1ef-91bf3918a0e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, the admin user has created an access policy that shares the
    network as an external network with the ProjectB project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38a998e9-74f1-45a9-9f6d-1bb8b78b134b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As `UserB` in the `ProjectB` project, we can see the external network using
    the `openstack network list --external` command. The network will reflect its
    external status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cd2535a-9a62-44ea-a04d-3f28ec2375eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Without a `shared_as_external` access policy in place, no other project will
    be able to see or use the network as an external network.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Access control policies created and managed by the role-based access control
    framework allow operators and users to provide access to certain network resources
    to individual projects rather than all projects. This ability opens up network
    design options that were not available in the past and provides a more secure
    approach to network resource sharing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore standalone Neutron routers and their involvement
    in providing self-service networking to projects. In addition, we'll take a look
    at the configuration and use of floating IPs to provide external connectivity
    to instances. The configuration of highly available and distributed virtual routers
    will be covered in later chapters.
  prefs: []
  type: TYPE_NORMAL
