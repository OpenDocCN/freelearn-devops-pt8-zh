- en: Troubleshooting and Profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, our Puppet infrastructure and code don't seem like they're cooperating
    with us. In this chapter, we'll focus on troubleshooting some common issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics that we''ll cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Puppet infrastructure component errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common catalog compilation errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although this is not always the most exciting topic, knowing how to work with
    these issues is the key to success with any system and language, including Puppet.
    Before we dive into our code, we'll make sure that our Puppet infrastructure is
    ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: Common component errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will be all about a healthy Puppet installation. We''ll primarily
    focus on the common issues that we see on agents, and what they may mean for your
    Puppet system. We''ll tackle this for the times that we most commonly see errors:
    while writing, testing, and deploying code to our servers. We will be troubleshooting
    primarily from the perspective of the Puppet agent, so you will see the most common
    issues that team members encounter while working on a Puppet deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: Puppet agents and Puppetserver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the nodes in a Puppet infrastructure contain a Puppet agent. In a split
    installation, each component checks in with a Puppetserver, just like any other
    node managed in the infrastructure. In a monolithic installation, the Puppet agent
    checks in with itself. Every other node managed by Puppet must use the agent to
    retrieve a configuration. Because the agent is everywhere, understanding some
    of the common errors with the agent will be universally useful for troubleshooting.
    Some of the common causes of a malfunctioning agent are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Certificate reuse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrong user context when connecting to the master
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS alternate name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Waiting on certificate signing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the simplest errors that you will see when running the agent for the
    first time is a message stating, `failed to retrieve certificate and waitforcert
    is disabled`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This particular message is easy to fix. Our agent is informing us that it has
    not received a signed certificate back from the master. We can solve this problem
    by simply logging in to the Puppet Master as the root user and signing our certificate.
    We can view any pending certificates on our Puppet Master with the command `puppet
    cert list`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we can see that our `wordpress` node hasn''t been signed,
    and we can simply approve this node for use with `puppet cert sign`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If we're not auto-signing our certificates through our `autosign.conf` or using
    an ENC that provides automatic signing for us, we'll always need to remember to
    sign certificates for new nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate reuse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, we spin up a new node by using a `cert` name previously known to
    the Puppet Master, especially in immutable infrastructures. Our Puppet infrastructure
    is designed with certificate security in mind, so having a new node with a name
    already known by the Puppet Master will present a message like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The simple fix for this error is to simply clean the certificate on our Puppet
    Master before running the agent again, and also signing the certificate again,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, Puppet will not let us rerun the agent until we delete the certificate
    that was recently generated. The message provided by the error provides the best
    command to remove the certificate, so it can be regenerated on our agents: `find
    /etc/puppetlabs/puppet/ssl -name <fqdn>.pem -delete`. On most agents, it is actually
    safer to delete the entire SSL directory, with `rm -rf /etc/puppetlabs/puppet/ssl`.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the SSL directory on the Puppet Master will delete the entire certificate
    chain, causing a need for a whole new set of certificates. This problem was more
    difficult to resolve in older versions of Puppet; we can now resolve it by following
    the directions at [https://puppet.com/docs/puppet/latest/ssl_regenerate_certificates.html](https://puppet.com/docs/puppet/latest/ssl_regenerate_certificates.html). Ensure
    that you don't accidentally delete the SSL certificates on the master, rather
    than the agent.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing this error is as simple as running `puppet cert clean <nodename>` on
    the Puppet Master, after decommissioning any node attached to the Puppet Master.
  prefs: []
  type: TYPE_NORMAL
- en: Wrong Puppet user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we're writing code, we often log in to a test machine to run our agent
    manually and get a sense of what's going on. We rarely log in directly as the
    root, and it's easy to forget to switch our user to root. This problem can be
    particularly frustrating, because it appears as a certificate error. Our individual
    user generates a new certificate, and cannot connect to the Master using the SSL
    error. The key difference that you'll notice in the error log is the recommendation
    to remove the local certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'This happens primarily when doing testing and running the agent as the wrong
    user on a Puppet agent. Take note of the generating new key, and the user context
    user in line 1, and in the certificate clean message:In the following example,
    notice a new SSL key being generated, and that I''m running this command as my
    own users instead of root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Network connectivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Network connectivity issues can be pretty noisy in Puppet. The agent in the
    following code sample does not have the ability to talk to the master, due to
    either a bad networking route or a firewall stopping traffic to our Puppet Master.
    In the following example, a firewall is blocking the agent from connecting to
    the master:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You may notice recurring themes in the preceding examples: `No route to host`
    and `Failed to open TCP Connection`. Each component of our catalog compilation
    will individually print a message back, alerting us to a connection failure. When
    we see no route to the host, we know that a firewall is between our agent and
    master, or that there is no network route to the host. This can also be caused
    by an improper DNS or `/etc/hosts` entry on the agent attempting to connect to
    the master.'
  prefs: []
  type: TYPE_NORMAL
- en: DNS alt name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS alt names are very convenient in larger Puppet infrastructures. They allow
    us to effectively nickname our servers individually, or as a group. A common DNS
    alt name might be `puppet`, so that you can use a load balancer to serve all of
    your individual Puppetservers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we''re trying to connect to our Puppetserver using
    the name `alt-name.puppet.net`, which was never baked in to the certificate on
    the original signing of our Puppet server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two possible fixes for this: either set your agent to call the master
    by a known DNS name, or rebuild the certificate on your Puppetserver with the
    new DNS alt name. This can be done by removing the SSL cert with `find /etc/puppetlabs/puppet/ssl
    -name <fqdn>.pem -delete` on the offending master, and running `puppet agent -t
    --dns-alt-names=<name1>,<name2>,<etc>` on the master, connecting to the master
    of masters, and building a new certificate. This certificate has to be signed
    via the command line on the CA (usually the Master of Masters), and cannot be
    signed in the PE console, due to the DNS alt names.'
  prefs: []
  type: TYPE_NORMAL
- en: Date and time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Time is an important factor in maintaining integrity between SSL connections. `puppetlabs/ntp`
    is usually the module most curated by Puppet, due to the fact that Puppet needs
    an accurate date and time on each node during a transaction. If you receive a
    message stating that the certificate revocation list (CRL) is not yet valid on
    your runs, ensure that NTP is properly configured across your nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: PE console service is down
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the Puppet Enterprise console is overloaded, it can trigger an `OutOfMemory`
    error and crash. I see this most often when spinning up small Puppet Enterprise
    installations on a virtual machine or container on my local laptop. When the console
    is down, Puppet Enterprise users will receive an error, letting them know that
    the node manager service isn''t running. Users should check the status of the
    PE console and the relevant logs if this message starts to come up in agent runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This section only applies to Puppet Enterprise users.
  prefs: []
  type: TYPE_NORMAL
- en: Catalog errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a catalog compilation error is triggered, the Puppet Parser is alerting
    us that it cannot build a catalog from the provided code. A puppet run will fail
    and the agent will not configure anything on a node that fails catalog compilation.
    These errors trigger when Puppet cannot read the code, or cannot determine how
    to apply the resources supplied in the catalog. In the next sections, we''ll cover
    the following common failures:'
  prefs: []
  type: TYPE_NORMAL
- en: Syntax errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicate resource declarations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autoload format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circular dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enterprise Users: The configuration tab in the classification group will not
    be able to read classes that contain syntax errors, missing classes, or classes
    not found in autoload format.'
  prefs: []
  type: TYPE_NORMAL
- en: Syntax errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Syntax errors are the most common errors that we see when we develop code.
    It''s easy to miss simple syntax when typing code, and to push failing code to
    a test environment. In the following example, the closing bracket to the class
    at the end of the file is missing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test for this failure long before it is deployed to our Puppet Master.
    The command `puppet parser validate` will give us the exact same message as the
    agent if we run it against the manifest. Users of the PDK will find that `pdk
    validate` runs this as one of the checks in the suite. The error from the agent
    run is replicated by Puppet parser validate in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This is one of the simplest examples of a good practice to put into your CI/CD
    pipelines. You can find more good examples of adding this simple check in [Chapter
    8](683ff898-d0ea-47e0-bbc7-b3458e300904.xhtml), *Extending Puppet with Tasks and
    Discovery*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax error checkers like Puppet parser validate scan through the code until
    they find a line that they cannot resolve. Often, these errors are on the line
    above the reported failure! Always check the line above the reported line. The
    following error was actually a missing comma on line 4 of the `example.pp`: `Error:
    Could not parse for environment production: Syntax error at ''source'' (file:
    /Users/rary/workspace/packt/manifests/example.pp, line: 5, column: 5)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate resource declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Puppet builds our catalogs based on every resource declared in our manifests.
    In good Puppet code design, we have classes that include or contain other classes.
    During development, it''s not uncommon to sometimes attempt to declare a resource
    that has been declared in a class that''s already applied on the system. By design,
    Puppet will fail on a duplicate resource declaration, and for a good reason: How
    can the catalog decide which resource is the right resource to apply? In the following
    example, a resource is declared in two separate classes being applied to my node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding case, I had my logging directory set in my baseline profile.
    I iterated and designed a whole profile around logging, and included my directory
    in the logging profile. To fix this error, I'll simply remove the custom logging
    directory resource from my baseline profile.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to declare a resource, and potentially use it in multiple manifests,
    you may want to use a virtual resource.. [Chapter 9](036a4b96-b91a-4c72-83dc-e5505efc26cd.xhtml),
    *Exported Resources* covers virtual resources, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Missing resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we attempt to use a resource that is not available to our Puppet Master
    or Puppet environment, we can trigger a missing resource error, causing the catalog
    compilation to fail. While these are commonly caused by misspelling a resource
    type, they can also be caused by missing modules in an environment. In the following
    example, I''m attempting to use the NTP module with `include ntp`. Remember, classes
    are resources, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m simply missing the NTP class in my environment. I could resolve this by
    hand with `puppet module install`, but, if you''re using r10k or Code Manager,
    enter the module entry and all of the dependencies into your environment Puppetfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the Puppet module `install` method does make a module available to all
    environments, but I can only recommend using it on temporary Puppet Masters that
    are used to test code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The Puppet module `install` grabs all of the dependencies for us, by default.
    R10k and Code Manager do not, so make sure that you include all of the dependencies
    in your Puppetfile.
  prefs: []
  type: TYPE_NORMAL
- en: Autoload format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If our manifests containing classes and defined types aren''t in the right
    directories, our master won''t be able to find them. In the following example,
    I''m attempting to use a new class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'I know that I wrote my `linux.pp` manifest, but the master can''t find it.
    If I run `tree` in the directory, I''ll see that `profile::baseline::linux` is
    actually in the autoload directory for `profile::linux`. Remember, directories
    are what provide us with extra layers in our namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'By simply moving my Linux baseline into the `baseline` folder, the master will
    be able to find this manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Circular dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Circular dependencies don''t happen often in Puppet development, but when they
    do, they can be a major pain to troubleshoot. Circular dependencies happen when
    we create dependency chains with arrow indicators (`->`) or ordering metaparameters.
    In the following example, my three notify statements require each other in a circular
    chain - `a -> b -> c -> a`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When this catalog is applied on the node, we''ll get a statement letting us
    know which resources are in a dependency chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the `--graph` flag that is indicated in the agent. If we run our agent
    again, with `puppet agent -t --graph`, we''ll get a dot file back that details
    our ordering, and we will be able to highlight our dependency cycles. This file
    is written out to `/opt/puppetlabs/puppet/cache/stage/graphs/cycles.dot`. I can
    open this file in GraphViz (open source) or OmniGraffle and view my chain in a
    graph. The following diagram shows this notification cycle represented in OmniGraffle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e89c9ec-916f-4dd6-b830-fa6f330e47ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Debug mode – catalog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, Puppet throws an error that isn''t immediately obvious. In the next
    example, I''m attempting to install `apache httpd`, but I have misspelled the
    name of the package. If you haven''t spent a lot of time working on a system that
    uses Yum, the error `Nothing to do` isn''t exactly a very clear error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'I may want to inspect exactly what Puppet is trying to get my system to do.
    I can use the `--debug` flag on the agent to inspect all of the actions that Puppet
    is taking underneath the system. I can see that Puppet uses `rpm -q` to check
    whether the package is already installed on the system. When it''s not found,
    it executes a specific Yum command: run Yum without an error log (`-e 0`) or debugging
    (`-d 0`), and assume yes (`-y`) to install `http`. Finally, because this resource
    has failed, any resources requiring it will fail to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The error `Nothing to do` wasn't actually solved. A quick search of your favorite
    forums will indicate some likely culprits, and in this case, `http` isn't a package
    in Yum. `httpd` , which is the Apache web server, is what I was looking to install.
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging is one of the most useful forms of troubleshooting, if actively monitored.
    We can often identify problems in our infrastructure before they become problems
    that users report. By understanding the logging available to Puppet, you will
    know where to look for indicators of system degradation. In this section, we'll
    explore the log files available to Puppet and its sub components, and we will
    configure the log level in the Puppetserver.
  prefs: []
  type: TYPE_NORMAL
- en: The logback.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each component that we'll be logging on, other than the Puppet agent, will use
    Logback. Although this isn't a book on `logback`, we'll look at a few existing
    sections of `logback.xml` and some common settings that we can alter.
  prefs: []
  type: TYPE_NORMAL
- en: Main configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main configuration includes the first and last line of the following XML
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `scan` setting tells `logback` to rescan the configuration for changes and
    reload the service if changes are detected. The `scanPeriod` setting lets the
    configuration know how often to scan. We use these settings so that our log configuration
    is updated dynamically with the file; no service restart is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Appender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The appender configuration section is what manages the log file. I''ve added
    comments to the appender for `puppetserver.log`, concerning what the individual
    lines are doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we're creating `puppetserver.log` with a rollover
    strategy. We'll keep up to 90 logs, but we'll rotate whenever a log reaches 200
    MB in size, and we will delete logs if we have more than 1 GB of logs. We'll append
    the date to logs that we roll over, and we will print the timestamp from the log.
  prefs: []
  type: TYPE_NORMAL
- en: You may see an appender to `STDOUT`. This actually prints to `System.out` and
    `System.error`, essentially appending to the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Loggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A logger in the `logback.xml` acts as a pointer for the logs produced by the
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This example connects to the `puppetlabs.pcp` log in the Puppetserver application,
    and collects the info-level logs. The `additivity=false` flag tells the log to
    replace the file, rather than append to it. Finally, the `appender-ref` tag tells
    the logger which appender to use for the logging configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Root logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is also a special type of logger, called the root logger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The root logger acts as a default, allowing you to select the logging level
    and provide a list of `appender-refs` to apply the default settings to. Think
    of it as a default group policy logger, rather than a single configuration being
    applied to a log. All other loggers override the root logger for each value.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Puppet agent is on every node, and the log for the Puppet agent is stored
    locally on that node. This is the only log file that we work with that does not
    use logback, but uses system messaging, instead. The Puppet agent logs to the
    `syslog` of the operating system it runs on. Each operating system uses a different
    location, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux: `/var/log/messages`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'macOS X: `/var/log/system.log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solaris: `/var/adm/messages`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows: Event Viewer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The information logged here is the same information that is output during a
    Puppet run. You can check on successful and failed resources being applied to
    the node in this log file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enterprise Users: You also have agent logging available to view in the Puppet
    Enterprise console, which can be provided with filters, to help narrow down problems
    or statuses. You can find this log in the reports section of each node page.'
  prefs: []
  type: TYPE_NORMAL
- en: PuppetDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PuppetDB logging is managed by the config file located at `/etc/puppetlabs/puppetdb/logback.xml`
    on the PuppetDB server. This `logback` file contains entries for the following
    logs, which are in `/var/log/puppetlabs/puppetdb/`, by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '`puppetdb.log`: Information on the PuppetDB application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`puppetdb-access.log`: Information on user and machine access to PuppetDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`puppetdb-status.log`: Current status of PuppetDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're looking for postgresql logs, they're contained in `/var/log/puppetlabs/postgresql`.
    This is standard postgresql logging.
  prefs: []
  type: TYPE_NORMAL
- en: Puppetserver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Puppetserver logging is managed by the config file located at `/etc/puppetlabs/puppetserver/logback.xml`
    on the PuppetDB server. This `logback` file contains entries for the following
    logs, which are in `/var/log/puppetlabs/puppetserver`, by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '`puppetserver.log`: Application activity with compilation errors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pcp-broker.log`: The log file for PCP broker activity on Puppet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pcp-broker-access.log`: The log file for users accessing PCP brokers on Puppet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`puppetserver-status.log`: Status indicator for Puppetserver'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet Enterprise console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Console logging is managed by the config file located at `/etc/puppetlabs/console-services/logback.xml`
    on the PuppetDB server. This `logback` file contains entries for the following
    logs, which are in `/var/log/puppetlabs/console-services`, by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '`console-services.log`: Logging for Puppet Enterprise console'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console-services-status.log`: Status indicator for the console'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section is only useful to Puppet Enterprise users.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed troubleshooting Puppet. We went over common errors
    seen in connections between the Puppetserver and Puppet agents. We looked at common
    catalog compilation failures, and how to debug them. We also covered `logback`
    and the log files on the master.
  prefs: []
  type: TYPE_NORMAL
