- en: Troubleshooting and Profiling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除与性能分析
- en: Sometimes, our Puppet infrastructure and code don't seem like they're cooperating
    with us. In this chapter, we'll focus on troubleshooting some common issues.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们的 Puppet 基础设施和代码似乎并没有与我们协同工作。在本章中，我们将专注于排查一些常见问题。
- en: 'The main topics that we''ll cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的主要主题如下：
- en: Puppet infrastructure component errors
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet 基础设施组件错误
- en: Common catalog compilation errors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的目录编译错误
- en: Logging
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录
- en: Although this is not always the most exciting topic, knowing how to work with
    these issues is the key to success with any system and language, including Puppet.
    Before we dive into our code, we'll make sure that our Puppet infrastructure is
    ready to go.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是一个总是很令人兴奋的话题，但知道如何处理这些问题是成功管理任何系统和语言（包括 Puppet）的关键。在我们深入到代码之前，我们会确保我们的
    Puppet 基础设施已经准备好。
- en: Common component errors
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见组件错误
- en: 'This section will be all about a healthy Puppet installation. We''ll primarily
    focus on the common issues that we see on agents, and what they may mean for your
    Puppet system. We''ll tackle this for the times that we most commonly see errors:
    while writing, testing, and deploying code to our servers. We will be troubleshooting
    primarily from the perspective of the Puppet agent, so you will see the most common
    issues that team members encounter while working on a Puppet deployment.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论健康的 Puppet 安装。我们将主要关注我们在代理节点上看到的常见问题，以及这些问题可能对您的 Puppet 系统意味着什么。我们将在编写、测试和部署代码到服务器时常见的错误情况进行排查。我们将主要从
    Puppet 代理的角度进行故障排除，因此您将看到团队成员在处理 Puppet 部署时最常遇到的问题。
- en: Puppet agents and Puppetserver
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet 代理和 Puppetserver
- en: 'All of the nodes in a Puppet infrastructure contain a Puppet agent. In a split
    installation, each component checks in with a Puppetserver, just like any other
    node managed in the infrastructure. In a monolithic installation, the Puppet agent
    checks in with itself. Every other node managed by Puppet must use the agent to
    retrieve a configuration. Because the agent is everywhere, understanding some
    of the common errors with the agent will be universally useful for troubleshooting.
    Some of the common causes of a malfunctioning agent are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 基础设施中的所有节点都包含一个 Puppet 代理。在分布式安装中，每个组件都与 Puppetserver 进行通信，就像基础设施中管理的其他节点一样。在单体安装中，Puppet
    代理与自身进行通信。Puppet 管理的每个节点都必须使用代理来检索配置。由于代理无处不在，了解一些常见的代理错误将对故障排除具有普遍的帮助。以下是一些常见的导致代理故障的原因：
- en: Certificate reuse
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书重用
- en: Wrong user context when connecting to the master
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到主节点时的错误用户上下文
- en: Network connectivity
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络连接
- en: DNS alternate name
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS 替代名称
- en: Waiting on certificate signing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等待证书签署
- en: 'One of the simplest errors that you will see when running the agent for the
    first time is a message stating, `failed to retrieve certificate and waitforcert
    is disabled`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代理第一次时，您会看到一个简单的错误信息，`failed to retrieve certificate and waitforcert is disabled`：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This particular message is easy to fix. Our agent is informing us that it has
    not received a signed certificate back from the master. We can solve this problem
    by simply logging in to the Puppet Master as the root user and signing our certificate.
    We can view any pending certificates on our Puppet Master with the command `puppet
    cert list`, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的消息很容易解决。我们的代理正在通知我们，它没有收到来自主节点的签名证书。我们可以通过简单地以 root 用户登录到 Puppet Master
    并签署我们的证书来解决这个问题。我们可以使用命令 `puppet cert list` 查看在 Puppet Master 上待处理的证书，如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding code, we can see that our `wordpress` node hasn''t been signed,
    and we can simply approve this node for use with `puppet cert sign`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们可以看到我们的 `wordpress` 节点尚未签名，我们只需要使用 `puppet cert sign` 来批准该节点：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we're not auto-signing our certificates through our `autosign.conf` or using
    an ENC that provides automatic signing for us, we'll always need to remember to
    sign certificates for new nodes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有通过 `autosign.conf` 自动签署证书，或者没有使用提供自动签署功能的 ENC，我们将始终需要记得为新节点签署证书。
- en: Certificate reuse
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证书重用
- en: 'Sometimes, we spin up a new node by using a `cert` name previously known to
    the Puppet Master, especially in immutable infrastructures. Our Puppet infrastructure
    is designed with certificate security in mind, so having a new node with a name
    already known by the Puppet Master will present a message like the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们通过使用之前已知的 `cert` 名称来启动一个新节点，尤其是在不可变基础设施中。我们的 Puppet 基础设施在设计时考虑了证书安全，因此拥有一个
    Puppet Master 已知名称的新节点时，会显示如下消息：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The simple fix for this error is to simply clean the certificate on our Puppet
    Master before running the agent again, and also signing the certificate again,
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此错误的简单方法是，在重新运行代理之前，先清理 Puppet Master 上的证书，并重新签署证书，如下所示：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Additionally, Puppet will not let us rerun the agent until we delete the certificate
    that was recently generated. The message provided by the error provides the best
    command to remove the certificate, so it can be regenerated on our agents: `find
    /etc/puppetlabs/puppet/ssl -name <fqdn>.pem -delete`. On most agents, it is actually
    safer to delete the entire SSL directory, with `rm -rf /etc/puppetlabs/puppet/ssl`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Puppet 不允许我们重新运行代理，直到我们删除最近生成的证书。错误消息提供了删除证书的最佳命令，这样可以在代理上重新生成证书：`find /etc/puppetlabs/puppet/ssl
    -name <fqdn>.pem -delete`。在大多数代理上，实际上删除整个 SSL 目录是更安全的，使用命令 `rm -rf /etc/puppetlabs/puppet/ssl`。
- en: Deleting the SSL directory on the Puppet Master will delete the entire certificate
    chain, causing a need for a whole new set of certificates. This problem was more
    difficult to resolve in older versions of Puppet; we can now resolve it by following
    the directions at [https://puppet.com/docs/puppet/latest/ssl_regenerate_certificates.html](https://puppet.com/docs/puppet/latest/ssl_regenerate_certificates.html). Ensure
    that you don't accidentally delete the SSL certificates on the master, rather
    than the agent.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 Puppet Master 上的 SSL 目录会删除整个证书链，导致需要一整套新的证书。在 Puppet 的旧版本中，这个问题更难解决；现在，我们可以通过遵循以下指南来解决它：[https://puppet.com/docs/puppet/latest/ssl_regenerate_certificates.html](https://puppet.com/docs/puppet/latest/ssl_regenerate_certificates.html)。确保不要不小心删除
    Master 上的 SSL 证书，而是删除代理的证书。
- en: Preventing this error is as simple as running `puppet cert clean <nodename>` on
    the Puppet Master, after decommissioning any node attached to the Puppet Master.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 防止此错误的方法很简单，只需在退役任何连接到 Puppet Master 的节点后，在 Puppet Master 上运行 `puppet cert clean
    <nodename>`。
- en: Wrong Puppet user
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误的 Puppet 用户
- en: When we're writing code, we often log in to a test machine to run our agent
    manually and get a sense of what's going on. We rarely log in directly as the
    root, and it's easy to forget to switch our user to root. This problem can be
    particularly frustrating, because it appears as a certificate error. Our individual
    user generates a new certificate, and cannot connect to the Master using the SSL
    error. The key difference that you'll notice in the error log is the recommendation
    to remove the local certificate.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写代码时，我们通常会登录到测试机器上手动运行代理，并了解发生了什么情况。我们很少直接以 root 身份登录，而很容易忘记将用户切换为 root。这个问题尤其让人沮丧，因为它表现为证书错误。我们的个人用户生成了一个新的证书，无法通过
    SSL 错误连接到 Master。你在错误日志中会注意到的关键区别是建议删除本地证书。
- en: 'This happens primarily when doing testing and running the agent as the wrong
    user on a Puppet agent. Take note of the generating new key, and the user context
    user in line 1, and in the certificate clean message:In the following example,
    notice a new SSL key being generated, and that I''m running this command as my
    own users instead of root:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况通常发生在测试时，将代理作为错误的用户身份运行。注意生成新密钥，以及第 1 行中的用户上下文和证书清理消息：在以下示例中，注意到一个新的 SSL
    密钥正在生成，并且我正在以自己的用户身份而非 root 身份运行此命令：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Network connectivity
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络连接问题
- en: 'Network connectivity issues can be pretty noisy in Puppet. The agent in the
    following code sample does not have the ability to talk to the master, due to
    either a bad networking route or a firewall stopping traffic to our Puppet Master.
    In the following example, a firewall is blocking the agent from connecting to
    the master:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Puppet 中，网络连接问题可能会非常嘈杂。以下代码示例中的代理无法与 Master 通信，原因可能是网络路由问题或防火墙阻止了与 Puppet
    Master 的流量。在以下示例中，防火墙阻止了代理与 Master 连接：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You may notice recurring themes in the preceding examples: `No route to host`
    and `Failed to open TCP Connection`. Each component of our catalog compilation
    will individually print a message back, alerting us to a connection failure. When
    we see no route to the host, we know that a firewall is between our agent and
    master, or that there is no network route to the host. This can also be caused
    by an improper DNS or `/etc/hosts` entry on the agent attempting to connect to
    the master.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到前面示例中的重复主题：`No route to host`（无法连接到主机）和`Failed to open TCP Connection`（无法打开TCP连接）。我们的目录编译的每个组件都会单独打印一条消息，提醒我们连接失败。当我们看到“无法连接到主机”时，说明在代理和主服务器之间有防火墙，或者没有通往主机的网络路径。这也可能是由于代理在尝试连接主服务器时，DNS或`/etc/hosts`条目配置不正确导致的。
- en: DNS alt name
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS备用名称
- en: DNS alt names are very convenient in larger Puppet infrastructures. They allow
    us to effectively nickname our servers individually, or as a group. A common DNS
    alt name might be `puppet`, so that you can use a load balancer to serve all of
    your individual Puppetservers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: DNS备用名称在大型Puppet基础架构中非常方便。它们可以有效地为我们的服务器单独命名，或者作为一个整体命名。常见的DNS备用名称可能是`puppet`，这样你就可以使用负载均衡器来服务所有单独的Puppetservers。
- en: 'In the following example, we''re trying to connect to our Puppetserver using
    the name `alt-name.puppet.net`, which was never baked in to the certificate on
    the original signing of our Puppet server:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们尝试使用名称`alt-name.puppet.net`连接到我们的Puppetserver，而这个名称在最初签署Puppet服务器时并没有包含在证书中：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are two possible fixes for this: either set your agent to call the master
    by a known DNS name, or rebuild the certificate on your Puppetserver with the
    new DNS alt name. This can be done by removing the SSL cert with `find /etc/puppetlabs/puppet/ssl
    -name <fqdn>.pem -delete` on the offending master, and running `puppet agent -t
    --dns-alt-names=<name1>,<name2>,<etc>` on the master, connecting to the master
    of masters, and building a new certificate. This certificate has to be signed
    via the command line on the CA (usually the Master of Masters), and cannot be
    signed in the PE console, due to the DNS alt names.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此问题有两种可能的方法：要么设置代理通过已知的DNS名称调用主服务器，要么在Puppetserver上使用新的DNS备用名称重建证书。可以通过在受影响的主服务器上使用`find
    /etc/puppetlabs/puppet/ssl -name <fqdn>.pem -delete`删除SSL证书，然后在主服务器上运行`puppet
    agent -t --dns-alt-names=<name1>,<name2>,<etc>`，连接到主服务器的主节点，并生成一个新的证书。这个证书必须通过命令行在CA（通常是主节点的主服务器）上签署，不能在PE控制台中签署，因为存在DNS备用名称的问题。
- en: Date and time
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期和时间
- en: 'Time is an important factor in maintaining integrity between SSL connections. `puppetlabs/ntp`
    is usually the module most curated by Puppet, due to the fact that Puppet needs
    an accurate date and time on each node during a transaction. If you receive a
    message stating that the certificate revocation list (CRL) is not yet valid on
    your runs, ensure that NTP is properly configured across your nodes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 时间是保持SSL连接完整性的重要因素。`puppetlabs/ntp`通常是Puppet最常使用的模块，因为Puppet在每个节点的事务中都需要准确的日期和时间。如果你收到消息称证书吊销列表（CRL）在你的运行中尚未生效，请确保NTP在你的节点上正确配置：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: PE console service is down
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PE控制台服务宕机
- en: 'If the Puppet Enterprise console is overloaded, it can trigger an `OutOfMemory`
    error and crash. I see this most often when spinning up small Puppet Enterprise
    installations on a virtual machine or container on my local laptop. When the console
    is down, Puppet Enterprise users will receive an error, letting them know that
    the node manager service isn''t running. Users should check the status of the
    PE console and the relevant logs if this message starts to come up in agent runs:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Puppet Enterprise控制台超载，可能会触发`OutOfMemory`错误并崩溃。我通常在虚拟机或容器中启动小规模的Puppet Enterprise安装时看到这个问题，尤其是在我的本地笔记本电脑上。当控制台出现故障时，Puppet
    Enterprise用户会收到错误信息，告知节点管理服务未运行。如果这个信息在代理运行中开始出现，用户应该检查PE控制台的状态和相关日志：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This section only applies to Puppet Enterprise users.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本节仅适用于Puppet Enterprise用户。
- en: Catalog errors
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录错误
- en: 'When a catalog compilation error is triggered, the Puppet Parser is alerting
    us that it cannot build a catalog from the provided code. A puppet run will fail
    and the agent will not configure anything on a node that fails catalog compilation.
    These errors trigger when Puppet cannot read the code, or cannot determine how
    to apply the resources supplied in the catalog. In the next sections, we''ll cover
    the following common failures:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当触发目录编译错误时，Puppet 解析器会提醒我们，它无法从提供的代码中构建目录。Puppet 运行将失败，并且代理不会在无法编译目录的节点上进行配置。当
    Puppet 无法读取代码，或者无法确定如何应用目录中提供的资源时，就会触发这些错误。在接下来的部分中，我们将涵盖以下常见的失败：
- en: Syntax errors
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法错误
- en: Duplicate resource declarations
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复资源声明
- en: Missing resources
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺失资源
- en: Autoload format
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动加载格式
- en: Circular dependencies
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环依赖
- en: 'Enterprise Users: The configuration tab in the classification group will not
    be able to read classes that contain syntax errors, missing classes, or classes
    not found in autoload format.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 企业用户：分类组中的配置选项卡无法读取包含语法错误、缺失类或未按自动加载格式找到的类。
- en: Syntax errors
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法错误
- en: 'Syntax errors are the most common errors that we see when we develop code.
    It''s easy to miss simple syntax when typing code, and to push failing code to
    a test environment. In the following example, the closing bracket to the class
    at the end of the file is missing:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 语法错误是我们在开发代码时最常见的错误。当输入代码时，很容易忽视简单的语法错误，并将错误代码推送到测试环境中。在以下示例中，文件末尾缺少了类的闭括号：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can test for this failure long before it is deployed to our Puppet Master.
    The command `puppet parser validate` will give us the exact same message as the
    agent if we run it against the manifest. Users of the PDK will find that `pdk
    validate` runs this as one of the checks in the suite. The error from the agent
    run is replicated by Puppet parser validate in the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在部署到 Puppet Master 之前很久就测试这个错误。命令 `puppet parser validate` 如果我们在清单上运行它，将给出与代理相同的错误信息。PDK
    的用户会发现，`pdk validate` 会在检查中运行这一项。以下代码演示了 Puppet 解析器验证的代理运行错误：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is one of the simplest examples of a good practice to put into your CI/CD
    pipelines. You can find more good examples of adding this simple check in [Chapter
    8](683ff898-d0ea-47e0-bbc7-b3458e300904.xhtml), *Extending Puppet with Tasks and
    Discovery*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将良好实践应用到 CI/CD 流水线中的最简单示例之一。你可以在[第 8 章](683ff898-d0ea-47e0-bbc7-b3458e300904.xhtml)中找到更多有关添加此简单检查的好示例，*通过任务和发现扩展
    Puppet*。
- en: 'Syntax error checkers like Puppet parser validate scan through the code until
    they find a line that they cannot resolve. Often, these errors are on the line
    above the reported failure! Always check the line above the reported line. The
    following error was actually a missing comma on line 4 of the `example.pp`: `Error:
    Could not parse for environment production: Syntax error at ''source'' (file:
    /Users/rary/workspace/packt/manifests/example.pp, line: 5, column: 5)`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '像 Puppet 解析器验证这样的语法错误检查器会扫描代码，直到它们找到无法解析的行。通常，这些错误出现在报告的错误行上方！请始终检查报告行上方的代码。以下错误实际上是
    `example.pp` 文件第 4 行缺少逗号：`Error: Could not parse for environment production: Syntax
    error at ''source'' (file: /Users/rary/workspace/packt/manifests/example.pp, line:
    5, column: 5)`。'
- en: Duplicate resource declaration
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复资源声明
- en: 'Puppet builds our catalogs based on every resource declared in our manifests.
    In good Puppet code design, we have classes that include or contain other classes.
    During development, it''s not uncommon to sometimes attempt to declare a resource
    that has been declared in a class that''s already applied on the system. By design,
    Puppet will fail on a duplicate resource declaration, and for a good reason: How
    can the catalog decide which resource is the right resource to apply? In the following
    example, a resource is declared in two separate classes being applied to my node:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 根据我们在清单中声明的每个资源构建目录。在良好的 Puppet 代码设计中，我们有包含或包含其他类的类。在开发过程中，有时我们会尝试声明一个已经在系统中应用的类中声明的资源，这是很常见的。按照设计，Puppet
    会在遇到重复的资源声明时失败，原因很简单：目录如何决定应用哪个资源是正确的呢？在以下示例中，一个资源在两个不同的类中声明，并且这些类都应用到我的节点上：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding case, I had my logging directory set in my baseline profile.
    I iterated and designed a whole profile around logging, and included my directory
    in the logging profile. To fix this error, I'll simply remove the custom logging
    directory resource from my baseline profile.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的案例中，我在我的基准配置文件中设置了日志目录。我迭代并围绕日志设计了整个配置文件，并将我的目录包含在日志配置文件中。为了解决这个错误，我只需从基准配置文件中移除自定义的日志目录资源。
- en: If you need to declare a resource, and potentially use it in multiple manifests,
    you may want to use a virtual resource.. [Chapter 9](036a4b96-b91a-4c72-83dc-e5505efc26cd.xhtml),
    *Exported Resources* covers virtual resources, as well.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要声明一个资源，并可能在多个清单中使用它，你可能想使用虚拟资源。[第9章](036a4b96-b91a-4c72-83dc-e5505efc26cd.xhtml)，*导出资源*也涵盖了虚拟资源的内容。
- en: Missing resources
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺失资源
- en: 'When we attempt to use a resource that is not available to our Puppet Master
    or Puppet environment, we can trigger a missing resource error, causing the catalog
    compilation to fail. While these are commonly caused by misspelling a resource
    type, they can also be caused by missing modules in an environment. In the following
    example, I''m attempting to use the NTP module with `include ntp`. Remember, classes
    are resources, too:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试使用 Puppet Master 或 Puppet 环境中不可用的资源时，可能会触发缺失资源错误，导致目录编译失败。虽然这些问题通常是由于拼写错误的资源类型引起的，但它们也可能是由于环境中缺失模块造成的。在以下示例中，我尝试使用
    `include ntp` 引入 NTP 模块。记住，类也是资源：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'I''m simply missing the NTP class in my environment. I could resolve this by
    hand with `puppet module install`, but, if you''re using r10k or Code Manager,
    enter the module entry and all of the dependencies into your environment Puppetfile:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我在环境中只是缺少了 NTP 类。我可以通过手动执行 `puppet module install` 来解决这个问题，但如果你使用的是 r10k 或 Code
    Manager，只需在环境的 Puppetfile 中添加模块条目及其所有依赖项：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using the Puppet module `install` method does make a module available to all
    environments, but I can only recommend using it on temporary Puppet Masters that
    are used to test code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Puppet 模块 `install` 方法确实能使模块对所有环境可用，但我只建议在用于测试代码的临时 Puppet Master 上使用它：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The Puppet module `install` grabs all of the dependencies for us, by default.
    R10k and Code Manager do not, so make sure that you include all of the dependencies
    in your Puppetfile.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 模块 `install` 默认会为我们获取所有的依赖项，而 R10k 和 Code Manager 不会，所以确保在 Puppetfile
    中包含所有依赖项。
- en: Autoload format
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动加载格式
- en: 'If our manifests containing classes and defined types aren''t in the right
    directories, our master won''t be able to find them. In the following example,
    I''m attempting to use a new class:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们包含类和定义类型的清单文件不在正确的目录中，主服务器将无法找到它们。在以下示例中，我尝试使用一个新的类：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'I know that I wrote my `linux.pp` manifest, but the master can''t find it.
    If I run `tree` in the directory, I''ll see that `profile::baseline::linux` is
    actually in the autoload directory for `profile::linux`. Remember, directories
    are what provide us with extra layers in our namespace:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道我已经编写了 `linux.pp` 清单文件，但主服务器找不到它。如果我在目录中运行 `tree` 命令，我会看到 `profile::baseline::linux`
    实际上位于 `profile::linux` 的自动加载目录中。记住，目录为我们的命名空间提供了额外的层次：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'By simply moving my Linux baseline into the `baseline` folder, the master will
    be able to find this manifest:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地将我的 Linux 基准清单移到 `baseline` 文件夹中，主服务器将能够找到这个清单：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Circular dependencies
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环依赖
- en: 'Circular dependencies don''t happen often in Puppet development, but when they
    do, they can be a major pain to troubleshoot. Circular dependencies happen when
    we create dependency chains with arrow indicators (`->`) or ordering metaparameters.
    In the following example, my three notify statements require each other in a circular
    chain - `a -> b -> c -> a`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 循环依赖在 Puppet 开发中并不常见，但一旦出现，排查起来可能非常棘手。循环依赖发生在我们创建了一个依赖链（使用箭头指示符 `->`）或排序元参数时。在以下示例中，我的三个通知语句相互依赖，形成了一个循环链
    —— `a -> b -> c -> a`：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When this catalog is applied on the node, we''ll get a statement letting us
    know which resources are in a dependency chain:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个目录应用到节点时，我们将收到一条信息，告诉我们哪些资源在依赖链中：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Notice the `--graph` flag that is indicated in the agent. If we run our agent
    again, with `puppet agent -t --graph`, we''ll get a dot file back that details
    our ordering, and we will be able to highlight our dependency cycles. This file
    is written out to `/opt/puppetlabs/puppet/cache/stage/graphs/cycles.dot`. I can
    open this file in GraphViz (open source) or OmniGraffle and view my chain in a
    graph. The following diagram shows this notification cycle represented in OmniGraffle:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意代理中指示的 `--graph` 标志。如果我们再次运行代理，使用 `puppet agent -t --graph`，我们将得到一个 dot 文件，其中详细列出了我们的排序，并且能够突出显示我们的依赖循环。这个文件会写入
    `/opt/puppetlabs/puppet/cache/stage/graphs/cycles.dot`。我可以在 GraphViz（开源软件）或 OmniGraffle
    中打开这个文件，并以图形形式查看我的依赖链。下图显示了 OmniGraffle 中表示的这个通知循环：
- en: '![](img/4e89c9ec-916f-4dd6-b830-fa6f330e47ff.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e89c9ec-916f-4dd6-b830-fa6f330e47ff.png)'
- en: Debug mode – catalog
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试模式 – 目录
- en: 'Sometimes, Puppet throws an error that isn''t immediately obvious. In the next
    example, I''m attempting to install `apache httpd`, but I have misspelled the
    name of the package. If you haven''t spent a lot of time working on a system that
    uses Yum, the error `Nothing to do` isn''t exactly a very clear error:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，Puppet 会抛出一个并不立刻明显的错误。在下一个示例中，我尝试安装 `apache httpd`，但我拼写错了包名。如果你没有花很多时间在使用
    Yum 的系统上工作，错误 `Nothing to do` 其实并不是一个非常清晰的错误：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'I may want to inspect exactly what Puppet is trying to get my system to do.
    I can use the `--debug` flag on the agent to inspect all of the actions that Puppet
    is taking underneath the system. I can see that Puppet uses `rpm -q` to check
    whether the package is already installed on the system. When it''s not found,
    it executes a specific Yum command: run Yum without an error log (`-e 0`) or debugging
    (`-d 0`), and assume yes (`-y`) to install `http`. Finally, because this resource
    has failed, any resources requiring it will fail to install:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能想检查一下 Puppet 尝试让我系统做什么。我可以在代理上使用 `--debug` 标志，检查 Puppet 在系统底层执行的所有操作。我可以看到
    Puppet 使用 `rpm -q` 检查软件包是否已安装在系统上。如果没有找到，它会执行特定的 Yum 命令：以不记录错误日志（`-e 0`）或调试（`-d
    0`）的方式运行 Yum，并假设默认选择（`-y`）安装 `http`。最后，由于该资源失败，任何依赖它的资源都会失败安装：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The error `Nothing to do` wasn't actually solved. A quick search of your favorite
    forums will indicate some likely culprits, and in this case, `http` isn't a package
    in Yum. `httpd` , which is the Apache web server, is what I was looking to install.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 错误 `Nothing to do` 实际上没有解决。通过快速搜索你最喜欢的论坛可以找到一些可能的罪魁祸首，在这种情况下，`http` 不是 Yum 中的一个包。`httpd`，即
    Apache Web 服务器，才是我想要安装的。
- en: Logging
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录
- en: Logging is one of the most useful forms of troubleshooting, if actively monitored.
    We can often identify problems in our infrastructure before they become problems
    that users report. By understanding the logging available to Puppet, you will
    know where to look for indicators of system degradation. In this section, we'll
    explore the log files available to Puppet and its sub components, and we will
    configure the log level in the Puppetserver.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录是最有用的故障排除形式之一，前提是要主动监控。我们通常可以在问题成为用户报告的故障之前，识别出我们基础设施中的问题。通过了解 Puppet 可用的日志记录，你将知道在哪里查看系统退化的指示。在本节中，我们将探讨
    Puppet 及其子组件可用的日志文件，并配置 Puppetserver 中的日志级别。
- en: The logback.xml file
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: logback.xml 文件
- en: Each component that we'll be logging on, other than the Puppet agent, will use
    Logback. Although this isn't a book on `logback`, we'll look at a few existing
    sections of `logback.xml` and some common settings that we can alter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Puppet agent 之外，我们将记录的每个组件都将使用 Logback。虽然这不是一本关于 `logback` 的书，但我们会查看一些现有的
    `logback.xml` 部分，以及我们可以修改的一些常见设置。
- en: Main configuration
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要配置
- en: 'The main configuration includes the first and last line of the following XML
    file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 主要配置包括以下 XML 文件的第一行和最后一行：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `scan` setting tells `logback` to rescan the configuration for changes and
    reload the service if changes are detected. The `scanPeriod` setting lets the
    configuration know how often to scan. We use these settings so that our log configuration
    is updated dynamically with the file; no service restart is needed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`scan` 设置告诉 `logback` 重新扫描配置文件是否有更改，并在检测到更改时重新加载服务。`scanPeriod` 设置让配置知道多长时间扫描一次。我们使用这些设置，以便我们的日志配置能够随着文件动态更新；无需重启服务。'
- en: Appender
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Appender
- en: 'The appender configuration section is what manages the log file. I''ve added
    comments to the appender for `puppetserver.log`, concerning what the individual
    lines are doing:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: appender 配置部分管理日志文件。我已在 `puppetserver.log` 的 appender 中添加了注释，说明各行的作用：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding example, we're creating `puppetserver.log` with a rollover
    strategy. We'll keep up to 90 logs, but we'll rotate whenever a log reaches 200
    MB in size, and we will delete logs if we have more than 1 GB of logs. We'll append
    the date to logs that we roll over, and we will print the timestamp from the log.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们正在创建具有滚动策略的 `puppetserver.log`。我们将保留最多 90 个日志，但每当日志达到 200 MB 大小时就进行轮换，如果日志总大小超过
    1 GB，则删除日志。我们将日期附加到我们滚动的日志中，并打印日志的时间戳。
- en: You may see an appender to `STDOUT`. This actually prints to `System.out` and
    `System.error`, essentially appending to the Terminal.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到一个指向 `STDOUT` 的 appender。这实际上是输出到 `System.out` 和 `System.error`，本质上是附加到终端。
- en: Loggers
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录器
- en: 'A logger in the `logback.xml` acts as a pointer for the logs produced by the
    application:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`logback.xml` 中的日志记录器充当应用程序生成的日志的指针：'
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This example connects to the `puppetlabs.pcp` log in the Puppetserver application,
    and collects the info-level logs. The `additivity=false` flag tells the log to
    replace the file, rather than append to it. Finally, the `appender-ref` tag tells
    the logger which appender to use for the logging configuration.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例连接到 Puppetserver 应用程序中的`puppetlabs.pcp`日志，并收集信息级别的日志。`additivity=false`标志告诉日志替换文件，而不是附加到文件末尾。最后，`appender-ref`标签告诉日志记录器使用哪个附加器来进行日志记录配置。
- en: Root logger
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根日志记录器
- en: 'There is also a special type of logger, called the root logger:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种特殊类型的日志记录器，称为根日志记录器：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The root logger acts as a default, allowing you to select the logging level
    and provide a list of `appender-refs` to apply the default settings to. Think
    of it as a default group policy logger, rather than a single configuration being
    applied to a log. All other loggers override the root logger for each value.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 根日志记录器充当默认值，允许你选择日志级别并提供 `appender-refs` 列表，以应用默认设置。可以把它看作是一个默认的组策略日志记录器，而不是应用于单个日志配置的设置。所有其他日志记录器会覆盖根日志记录器中的每个值。
- en: Puppet agent
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet 代理
- en: 'The Puppet agent is on every node, and the log for the Puppet agent is stored
    locally on that node. This is the only log file that we work with that does not
    use logback, but uses system messaging, instead. The Puppet agent logs to the
    `syslog` of the operating system it runs on. Each operating system uses a different
    location, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 代理在每个节点上，并且 Puppet 代理的日志存储在该节点的本地。 这是我们使用的唯一不使用 logback 的日志文件，而是使用系统消息进行日志记录。Puppet
    代理记录到它所运行的操作系统的`syslog`。每个操作系统使用不同的位置，如下所示：
- en: 'Linux: `/var/log/messages`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux: `/var/log/messages`'
- en: 'macOS X: `/var/log/system.log`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'macOS X: `/var/log/system.log`'
- en: 'Solaris: `/var/adm/messages`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Solaris: `/var/adm/messages`'
- en: 'Windows: Event Viewer'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows: 事件查看器'
- en: The information logged here is the same information that is output during a
    Puppet run. You can check on successful and failed resources being applied to
    the node in this log file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里记录的信息与 Puppet 运行期间输出的信息相同。你可以在此日志文件中检查成功和失败的资源应用到节点的情况。
- en: 'Enterprise Users: You also have agent logging available to view in the Puppet
    Enterprise console, which can be provided with filters, to help narrow down problems
    or statuses. You can find this log in the reports section of each node page.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 企业用户：你还可以在 Puppet Enterprise 控制台中查看代理日志，并可以使用过滤器来帮助缩小问题或状态的范围。你可以在每个节点页面的报告部分找到此日志。
- en: PuppetDB
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PuppetDB
- en: 'PuppetDB logging is managed by the config file located at `/etc/puppetlabs/puppetdb/logback.xml`
    on the PuppetDB server. This `logback` file contains entries for the following
    logs, which are in `/var/log/puppetlabs/puppetdb/`, by default:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: PuppetDB 的日志记录由位于 PuppetDB 服务器的配置文件`/etc/puppetlabs/puppetdb/logback.xml`管理。这个
    `logback` 文件包含以下日志的条目，这些日志默认位于 `/var/log/puppetlabs/puppetdb/`：
- en: '`puppetdb.log`: Information on the PuppetDB application'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppetdb.log`：有关 PuppetDB 应用程序的信息'
- en: '`puppetdb-access.log`: Information on user and machine access to PuppetDB'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppetdb-access.log`：有关用户和机器访问 PuppetDB 的信息'
- en: '`puppetdb-status.log`: Current status of PuppetDB'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppetdb-status.log`：PuppetDB 的当前状态'
- en: If you're looking for postgresql logs, they're contained in `/var/log/puppetlabs/postgresql`.
    This is standard postgresql logging.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在寻找 PostgreSQL 的日志，它们存储在`/var/log/puppetlabs/postgresql`中。这是标准的 PostgreSQL
    日志记录。
- en: Puppetserver
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppetserver
- en: 'Puppetserver logging is managed by the config file located at `/etc/puppetlabs/puppetserver/logback.xml`
    on the PuppetDB server. This `logback` file contains entries for the following
    logs, which are in `/var/log/puppetlabs/puppetserver`, by default:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Puppetserver 的日志记录由位于 PuppetDB 服务器的配置文件`/etc/puppetlabs/puppetserver/logback.xml`管理。这个
    `logback` 文件包含以下日志的条目，这些日志默认位于 `/var/log/puppetlabs/puppetserver`：
- en: '`puppetserver.log`: Application activity with compilation errors'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppetserver.log`：包含编译错误的应用程序活动日志'
- en: '`pcp-broker.log`: The log file for PCP broker activity on Puppet'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pcp-broker.log`：Puppet 上 PCP 经纪人活动的日志文件'
- en: '`pcp-broker-access.log`: The log file for users accessing PCP brokers on Puppet'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pcp-broker-access.log`：用户访问 Puppet 上 PCP 经纪人的日志文件'
- en: '`puppetserver-status.log`: Status indicator for Puppetserver'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppetserver-status.log`：Puppetserver 状态指示器'
- en: Puppet Enterprise console
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet Enterprise 控制台
- en: 'Console logging is managed by the config file located at `/etc/puppetlabs/console-services/logback.xml`
    on the PuppetDB server. This `logback` file contains entries for the following
    logs, which are in `/var/log/puppetlabs/console-services`, by default:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台日志记录由位于 PuppetDB 服务器的配置文件`/etc/puppetlabs/console-services/logback.xml`管理。这个
    `logback` 文件包含以下日志的条目，这些日志默认位于 `/var/log/puppetlabs/console-services`：
- en: '`console-services.log`: Logging for Puppet Enterprise console'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`console-services.log`：Puppet Enterprise 控制台的日志'
- en: '`console-services-status.log`: Status indicator for the console'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`console-services-status.log`：控制台的状态指示器'
- en: This section is only useful to Puppet Enterprise users.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容仅对 Puppet Enterprise 用户有用。
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed troubleshooting Puppet. We went over common errors
    seen in connections between the Puppetserver and Puppet agents. We looked at common
    catalog compilation failures, and how to debug them. We also covered `logback`
    and the log files on the master.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了故障排除 Puppet 的方法。我们回顾了 Puppetserver 和 Puppet 代理之间连接时常见的错误，分析了常见的清单编译失败以及如何调试它们。我们还介绍了
    `logback` 以及主机上的日志文件。
