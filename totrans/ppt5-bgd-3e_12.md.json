["```\ngit clone -b production https://github.com/bitfield/control-repo-3\n\n```", "```\n    git clone -b production https://github.com/bitfield/control-repo-3\n    cd control-repo-3\n\n    ```", "```\n    git remote rename origin upstream\n\n    ```", "```\n    git remote add origin YOUR_GIT_URL\n\n    ```", "```\n    git push origin production\n\n    ```", "```\ngit fetch upstream\ngit rebase upstream/production\n\n```", "```\nmodulepath = \"modules:site-modules:$basemodulepath\"\n```", "```\nforge \"http://forge.puppetlabs.com\"\n\n# Modules from the Puppet Forge\nmod 'puppetlabs/accounts', '1.1.0'\nmod 'puppetlabs/ntp', '6.2.0'\nmod 'puppetlabs/stdlib', '4.19.0'\nmod 'saz/sudo', '4.2.0'\nmod 'saz/timezone', '3.5.0'\nmod 'stm/debconf', '2.0.0'\n```", "```\ngenerate-puppetfile -p Puppetfile\n\n```", "```\ninclude(lookup('classes', Array[String], 'unique'))\n```", "```\n# Be the demo node\nclass role::demo {\n  include profile::common\n}\n```", "```\nclasses:\n- profile::ntp\n- profile::puppet\n- profile::ssh\n- profile::sudoers\n- profile::timezone\n- profile::users\n```", "```\nusers:\n  'john':\n    comment: 'John Arundel'\n    uid: '1010'\n    sshkeys:\n      - 'ssh-rsa AAAA ...'\n  'bridget':\n    comment: 'Bridget X. Zample'\n    uid: '1011'\n    sshkeys:\n      - 'ssh-rsa AAAA ...'\n```", "```\n# Set up users\nclass profile::users {\n  lookup('users', Hash, 'hash').each | String $username, Hash $attrs | {\n    accounts::user { $username:\n      * => $attrs,\n    }\n  }\n}\n```", "```\n<%- | Array[String] $allow_users | -%>\n# File is managed by Puppet\n\nAcceptEnv LANG LC_*\nChallengeResponseAuthentication no\nGSSAPIAuthentication no\nPermitRootLogin no\nPrintMotd no\nSubsystem sftp internal-sftp\nAllowUsers <%= join($allow_users, ' ') %>\nUseDNS no\nUsePAM yes\nX11Forwarding yes\n```", "```\nallow_users:\n  - 'john'\n  - 'bridget'\n  - 'ubuntu'\n```", "```\n# Manage sshd config\nclass profile::ssh {\n  ensure_packages(['openssh-server'])\n\n  file { '/etc/ssh/sshd_config':\n    content => epp('profile/ssh/sshd_config.epp', {\n      'allow_users' => lookup('allow_users', Array[String], \n        'unique'),\n    }),\n    notify  => Service['ssh'],\n  }\n\n  service { 'ssh':\n    ensure => running,\n    enable => true,\n  }\n}\n```", "```\nsudoers:\n  - 'john'\n  - 'bridget'\n  - 'ubuntu'\n```", "```\n# Manage user privileges\nclass profile::sudoers {\n  sudo::conf { 'secure_path':\n    content  => 'Defaults      secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/puppetlabs/puppet/bin:/opt/puppetlabs/bin\"',\n    priority => 0,\n  }\n  $sudoers = lookup('sudoers', Array[String], 'unique', [])\n  $sudoers.each | String $user | {\n    sudo::conf { $user:\n      content  => \"${user} ALL=(ALL) NOPASSWD: ALL\",\n      priority => 10,\n    }\n  }\n}\n```", "```\n  sudo::conf { 'secure_path':\n    content  => 'Defaults      secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/puppetlabs/puppet/bin:/opt/puppetlabs/bin\"',\n    priority => 0,\n  }\n```", "```\n# Set the time zone for all nodes\nclass profile::timezone {\n  class { 'timezone':\n    timezone => 'Etc/UTC',\n  }\n}\n```", "```\n# Synchronize with NTP\nclass profile::ntp {\n  include ::ntp\n}\n```", "```\n# Set up Puppet config and cron run\nclass profile::puppet {\n  service { ['puppet', 'mcollective', 'pxp-agent']:\n    ensure => stopped, # Puppet runs from cron\n    enable => false,\n  }\n\n  cron { 'run-puppet':\n    ensure  => present,\n    command => '/usr/local/bin/run-puppet',\n    minute  => '*/10',\n    hour    => '*',\n  }\n\n  file { '/usr/local/bin/run-puppet':\n    source => 'puppet:///modules/profile/puppet/run-puppet.sh',\n    mode   => '0755',\n  }\n\n  file { '/usr/local/bin/papply':\n    source => 'puppet:///modules/profile/puppet/papply.sh',\n    mode   => '0755',\n  }\n}\n```", "```\n  service { ['puppet', 'mcollective', 'pxp-agent']:\n    ensure => stopped, # Puppet runs from cron\n    enable => false,\n  }\n```", "```\n#!/bin/bash\ncd /etc/puppetlabs/code/environments/production && git pull\n/opt/puppetlabs/puppet/bin/r10k puppetfile install\n/opt/puppetlabs/bin/puppet apply --environment production manifests/\n```", "```\n  cron { 'run-puppet':\n    ensure  => present,\n    command => '/usr/local/bin/run-puppet',\n    minute  => '*/10',\n    hour    => '*',\n  }\n```", "```\n#!/bin/bash\nenvironment=${PUPPET_ENV:-production}\n/opt/puppetlabs/puppet/bin/r10k puppetfile install\n/opt/puppetlabs/bin/puppet apply --environment ${environment} --strict=warning /etc/puppetlabs/code/environments/${environment}/manifests/ $*\n```", "```\nPUPPET_ENV=staging papply\n\n```", "```\npapply --noop --show_diff\n\n```", "```\n#!/bin/bash\nPUPPET_REPO=$1\nHOSTNAME=$2\nBRANCH=$3\nif [ \"$#\" -ne 3 ]; then\n  echo \"Usage: $0 PUPPET_REPO HOSTNAME BRANCH\"\n  exit 1\nfi\nhostname ${HOSTNAME}\necho ${HOSTNAME} >/etc/hostname\nsource /etc/lsb-release\napt-key adv --fetch-keys http://apt.puppetlabs.com/DEB-GPG-KEY-puppet\nwget http://apt.puppetlabs.com/puppetlabs-release-${DISTRIB_CODENAME}.deb\ndpkg -i puppetlabs-release-${DISTRIB_CODENAME}.deb\napt-get update\napt-get -y install git puppet-agent\ncd /etc/puppetlabs/code/environments\nmv production production.orig\ngit clone ${PUPPET_REPO} production\ncd production\ngit checkout ${BRANCH}\n/opt/puppetlabs/puppet/bin/gem install r10k --no-rdoc --no-ri\n/opt/puppetlabs/puppet/bin/r10k puppetfile install --verbose\n/opt/puppetlabs/bin/puppet apply --environment=production /etc/puppetlabs/code/environments/production/manifests/\n```", "```\nhostname ${HOSTNAME}\necho ${HOSTNAME} >/etc/hostname\n```", "```\nsource /etc/lsb-release\napt-key adv --fetch-keys http://apt.puppetlabs.com/DEB-GPG-KEY-puppet\nwget http://apt.puppetlabs.com/puppetlabs-release-${DISTRIB_CODENAME}.deb\ndpkg -i puppetlabs-release-${DISTRIB_CODENAME}.deb\napt-get update && apt-get -y install git puppet-agent\n```", "```\ncd /etc/puppetlabs/code/environments\nmv production production.orig\ngit clone ${PUPPET_REPO} production\ncd production\ngit checkout ${BRANCH}\n```", "```\n/opt/puppetlabs/puppet/bin/gem install r10k --no-rdoc --no-ri\n/opt/puppetlabs/puppet/bin/r10k puppetfile install --verbose\n```", "```\n/opt/puppetlabs/bin/puppet apply --environment=production /etc/puppetlabs/code/environments/production/manifests/\n```", "```\n#!/bin/bash\nPUPPET_REPO=https://github.com/bitfield/control-repo-3.git\nIDENTITY=\"-i /Users/john/.ssh/pbg.pem\"\nif [ \"$#\" -lt 2 ]; then\n  cat <<USAGE\nUsage: $0 TARGET HOSTNAME [BRANCH]\nInstall Puppet on the node TARGET (IP address or DNS name) and run\nthe bootstrap process. Set the hostname to HOSTNAME, and optionally use\nthe control repo branch BRANCH.\nUSAGE\n  exit 1\nfi\nTARGET=$1\nHOSTNAME=${2}\nBRANCH=${3:-production}\nOPTIONS=\"-oStrictHostKeyChecking=no\"\necho -n \"Copying bootstrap script... \"\nscp ${IDENTITY} ${OPTIONS} $(dirname $0)/bootstrap.sh ubuntu@${TARGET}:/tmp\necho \"done.\"\necho -n \"Bootstrapping... \"\nssh ${IDENTITY} ${OPTIONS} ubuntu@${TARGET} \"sudo bash /tmp/bootstrap.sh ${PUPPET_REPO} ${HOSTNAME} ${BRANCH}\"\necho \"done.\"\n```", "```\nPUPPET_REPO=https://github.com/bitfield/control-repo-3.git\n```", "```\nIDENTITY=\"-i /Users/john/.ssh/pbg.pem\"\n```", "```\nscp ${IDENTITY} ${OPTIONS} $(dirname $0)/bootstrap.sh ubuntu@${TARGET}:/tmp\n```", "```\nssh ${IDENTITY} ${OPTIONS} ubuntu@${TARGET} \"sudo bash /tmp/bootstrap.sh ${PUPPET_REPO} ${HOSTNAME} ${BRANCH}\"\n```", "```\nusers:\n  'john':\n    comment: 'John Arundel'\n    uid: '1010'\n    sshkeys:\n      - 'ssh-rsa AAAA... john@susie'\n...\n```", "```\nscripts/start_vagrant.sh\n\n```", "```\nscripts/puppify TARGET_SERVER HOSTNAME\n\n```"]