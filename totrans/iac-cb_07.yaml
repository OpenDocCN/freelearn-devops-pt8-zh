- en: Chapter 7. Testing and Writing Better Infrastructure Code with Chef and Puppet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Linting Chef code with Foodcritic and Puppet code with puppet-lint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with ChefSpec and rspec-puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing infrastructure with Test Kitchen for Chef and Beaker for Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration testing with ServerSpec
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the development world, good practices of testing software are widespread,
    such as unit and integration tests. Linters are also used daily for most languages
    by software developers. These techniques are fortunately brought to the infrastructure
    world through the tools we use; now as infrastructure is basically code, it can
    be analyzed, tested, and reported! Combined with CI systems, writing infrastructure
    code that is thoroughly tested at different levels helps hugely to achieve a very
    high quality of sustainable code and prevents unexpected regressions that would
    have otherwise broken things later.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll discover various techniques to write cleaner code using
    linters and styling tools, so our code follows high standards. You'll learn how
    to unit test infrastructure code such as Chef resources and achieve the highest
    code coverage possible, so we're sure nothing is there by error or is being modified
    unintentionally. Then we'll configure the testing environment Test Kitchen, which
    leverages the use of VMs through Vagrant (or other systems) to apply test suites.
    This will be our base to then write integration tests so we can make sure we achieve
    what we intended to achieve with multiple cookbooks and sources of code, really
    reaching the target and doing the job on a real system.
  prefs: []
  type: TYPE_NORMAL
- en: These tools and techniques are absolutely key to write the best infrastructure
    code possible, and they are as fun to use as they are powerful!
  prefs: []
  type: TYPE_NORMAL
- en: All recipes are based on Chef. However, when possible, we'll try to show how
    things work similarly with Puppet, Chef's direct alternative.
  prefs: []
  type: TYPE_NORMAL
- en: Linting Chef code with Foodcritic and Puppet code with puppet-lint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we're mainly coding in Ruby, we can use common linters such as Rubocop
    in the Ruby world. However, Rubocop, is targeted at software development by default
    and is not really optimized for Chef cookbooks development. So, Chef adapted their
    own version of Rubocop, named Cookstyle. In the meantime, the Foodcritic tool
    used in conjunction with rules checks our code for a set of commonly accepted
    good practices by the community. We'll walk through those tools to end up with
    a much better and cleaner code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To step through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef code from [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing
    Servers with Chef and Puppet"), *Fundamentals of Managing Servers with Chef and
    Puppet*, or any custom Chef code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll study and follow suggestions of the two complimentary tools—Cookstyle
    and Foodcritic. Both give some precious and complementary advice on code quality
    and portability. Let's start with the quickest and easiest—Cookstyle.
  prefs: []
  type: TYPE_NORMAL
- en: Cookstyle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Navigate to a cookbook root directory and type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will output all the suggestions for a cleaner code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get more information about the suggestions, including a URL with more information,
    use the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re happy with the propositions and would like to automatically apply
    them all directly in the code, use the following switch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If we apply `cookstyle` to the [Chapter 6](ch06.html "Chapter 6. Fundamentals
    of Managing Servers with Chef and Puppet"), *Fundamentals of Managing Servers
    with Chef and Puppet*, Chef cookbooks we''ve written, we''ll end up with two good
    suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: Single quotes for strings when interpolation is not needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Newer Ruby 1.9 syntax for hashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As these are valuable and recommended changes, let's bump our cookbook versions
    in all concerned `metadata.rb` files, apply those suggestions, and upload the
    new minor revision to the Chef server.
  prefs: []
  type: TYPE_NORMAL
- en: Foodcritic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Foodcritic goes much further than Cookstyle and checks the Chef code for things
    such as incompatible, nonidempotent, repetitive, or deprecated code, and missing
    templates, files, dependencies, or variables. All the rules are described on the
    Foodcritic website at [http://www.foodcritic.io](http://www.foodcritic.io), along
    with examples and explanations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute `foodcritic` by navigating to the Chef repo and type in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, for testing our previous `mysite` cookbook (excluding the auto-generated
    `test` directory, as it''s not a cookbook in itself), we type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Interesting! Let's start with FC003 ([http://www.foodcritic.io/#FC003](http://www.foodcritic.io/#FC003)).
    Our code is indeed not usable with other Chef modes such as chef-solo, as we're
    using Chef Search directly in the code and chef-solo can't interact with a Chef
    server. Two options here are that either we don't care about chef-solo portability
    and you exclude that rule from the tests, or we care and modify the code accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To exclude the `FC003` rule, use the `-t` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if we care about chef-solo compatibility, let''s change the
    code as proposed by the FC003 rule. Bump the `mysite` cookbook in the `mysite/metadata.rb`
    file, and edit the `users` search in the `mysite/recipes/htaccess.rb` file to
    include an evaluation of whether we''re running chef-solo or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload the new version of the cookbook using Berkshelf:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Rerun `foodcritic` and the warning is gone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s continue our investigation of the suggestions. `FC033` ([http://www.foodcritic.io/#FC033](http://www.foodcritic.io/#FC033))
    is about missing templates. However, our templates are placed under `mysite/templates`
    by the `chef` workflow command. This is typically why it''s important to understand
    why suggestions are only that—suggestions. The Foodcritic team proposes to enforce
    in FC033 the presence of default templates in the `templates/default` directory.
    It is entirely up to you and your team to decide what to follow: the recommended
    behavior from Chef or from Foodcritic. Let''s decide to follow Chef and ignore
    this warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous two warnings (`FC064` and `FC065`) are only about cookbooks released
    on the Chef Supermarket, which is not our case. Let''s exclude globally all supermarket-related
    warnings using the `-t ~supermarket` switch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: No more warnings now; our cookbook is following the best advice on the planet
    from both Chef and the Foodcritic community!
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s highly recommended that you add those tests to your automated testing
    process. Let''s say we''re using a global `Makefile` to do that. Create it at
    the root of the Chef repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, you or some CI system can automatically check the code for quality or regression
    in quality.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Puppet, puppet-lint will help us to clean code. We need to install puppet-lint
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are already familiar with Puppet, you probably saw that the code we
    wrote in the previous chapter does not conform to standards. Let''s discover some
    issues with puppet-lint based on the latest recipe for our Apache module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see two error categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Puppet coding style warnings/errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's try to fix them!
  prefs: []
  type: TYPE_NORMAL
- en: Puppet coding style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For our concerns here, the basic rules are:'
  prefs: []
  type: TYPE_NORMAL
- en: Tabulation needs to be *two-space* characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No trailing whitespaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In string interpolation, variables should be enclosed in braces; for example,
    `"$docroot/.htaccess"` is wrong and must be `"${docroot}/.htaccess"`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Documentation should be done using Markdown. If you've never heard about it,
    Markdown is a language used to format a document in plain text mode, in order
    to export it in HTML. With Markdown, it becomes easy to add headers, links, bullets
    and font effects. A short and interactive tutorial can be found on [http://www.markdowntutorial.com](http://www.markdowntutorial.com).
  prefs: []
  type: TYPE_NORMAL
- en: A Markdown editor with a *live preview* mode is available at [https://stackedit.io](https://stackedit.io).
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a `README.md` file at the top-level directory of the module.
    This file should contain a short description, and some usage examples. For more
    readability, we will focus only on the installation and the definition of a virtual
    host. The complete documentation can be found in the code bundle. Here is an extract
    of `modules/apache/README.md`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: class {
  prefs: []
  type: TYPE_NORMAL
- en: '''apache'':;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'apache::vhost{''mysite'':'
  prefs: []
  type: TYPE_NORMAL
- en: website    => 'www.example.com',
  prefs: []
  type: TYPE_NORMAL
- en: docroot    => '/var/www/example',
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to document all statements and their parameters, using the `@param`
    tag inside comments at the top of each manifest. The new code following puppet-lint
    recommendations, is:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `modules/apache/manifests/init.pp`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `modules/apache/manifests/htpasswd.pp`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `modules/apache/manifests/htaccess.pp`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `modules/apache/manifests/vhost.pp`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The documentation can be automatically generated to a set of HTML pages. To
    do so, we need to install the `yard` and `puppet-strings` packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, from the top-level directory of our module, the documentation can be generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The documentation is in the `doc` directory. We can now read it by opening `index.html`
    in any browser.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Puppet Language Style:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cookstyle: [https://github.com/chef/cookstyle](https://github.com/chef/cookstyle)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Foodcritic: [http://www.foodcritic.io/](http://www.foodcritic.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with ChefSpec and rspec-puppet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ChefSpec is a Chef cookbook RSpec unit testing framework written by the great
    Seth Vargo (Opscode Chef, Hashicorp). ChefSpec helps to create a fast feedback
    loop, locally simulate Chef runs (solo or server) over the code, and issue a code
    coverage statement for every resource used. It integrates very well with Berkshelf,
    so cookbook dependencies are easily handled during the testing process.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create unit tests for the cookbooks created in [Chapter 6](ch06.html "Chapter 6. Fundamentals
    of Managing Servers with Chef and Puppet"), *Fundamentals of Managing Servers
    with Chef and Puppet,* that covers the most common tests, such as convergence
    issues, packages installation, services status check, file and template creation,
    access rights, recipe inclusion, stubbing data bag searches, or even intercepting
    expected errors. These tests are so generic, we'll be able to reuse them in all
    our future recipes and get started on more.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To step through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef code from Chapter 6, *Fundamentals of Managing Servers with Chef and
    Puppet*, or any custom Chef code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ChefSpec unit tests are found in the `spec/unit/recipes` folder of every Chef
    cookbook. Depending on how we created our cookbooks, this folder may already exist.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate, let's start from the `apache` cookbook from [Chapter 6](ch06.html
    "Chapter 6. Fundamentals of Managing Servers with Chef and Puppet"), *Fundamentals
    of Managing Servers with Chef and Puppet,* but any similar custom cookbook is
    equally good.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the `spec/unit/recipes` directory doesn''t exist, create it by executing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `recipes` directory in `spec/unit` are found the ChefSpec unit tests,
    typically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Each recipe gets its matching ChefSpec file. In this case, our simple cookbook
    contains two recipes, so we get two specs.
  prefs: []
  type: TYPE_NORMAL
- en: The Spec Helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s helpful to have a common set of requirements for all the concerned cookbook
    tests. The default is to have it named `spec_helper.rb` at the root of the `spec/unit`
    directory. We suggest to include at least three requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: ChefSpec itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Berkshelf plugin for dependencies management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Immediately start the code coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s our sample `spec_helper.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Testing a successful Chef run context
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll now unit test the default apache cookbook recipe. Our first step is
    to require the helper created earlier in the `default_spec.rb` file. It will be
    required in all of our future tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'All unit tests start with a descriptive block, as given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this block, we want to simulate the Chef run in a simulated CentOS 7.2
    environment, with the default attributes. This is the context, and we expect this
    Chef run to not raise any errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To find the exact past or future CentOS version we might need, we can go to
    the CentOS mirror site, [http://mirror.centos.org/centos/](http://mirror.centos.org/centos/),
    or read a full list of available simulated platforms at [https://github.com/customink/fauxhai/tree/master/lib/fauxhai/platforms](https://github.com/customink/fauxhai/tree/master/lib/fauxhai/platforms).
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute our first unit test using `chef exec rspec` (it''s using the bundled
    `rspec` from the Chef DK):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We see the simulated Chef run execution times, as well as a coverage report
    (0%, as we didn't test anything for now). ChefSpec even shows us what's not unit
    tested yet!
  prefs: []
  type: TYPE_NORMAL
- en: 'A nice option is the *documentation* RSpec formatter, so we have descriptions
    of what''s being tested. At the end of this section, we''ll have something like
    this, using this formatter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Testing a package installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our default recipe starts by installing the `httpd` package. Here''s how to
    test it using ChefSpec, inside the context we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Execute `rspec` again and see the touch coverage attain 50% as one of the two
    resources from the default recipe is now tested.
  prefs: []
  type: TYPE_NORMAL
- en: Testing services status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default recipe enables and starts the `httpd` service. Here''s how to test
    if both actions are handled by the code using ChefSpec, inside the context created
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Our test coverage is now 100% for the default recipe as we tested both declared
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: Testing another recipe from the same cookbook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we have two recipes in the apache cookbook, let''s create tests for our
    second recipe—`virtualhost_spec.rb`. Start it exactly like the first one, with
    a description, context, and an initial test for a valid Chef run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute RSpec and see the coverage fall from 100% to 40%. Three new resources
    are now untested, from the `apache::virtualhost` recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The good news is that ChefSpec still tells us which resources are not tested!
  prefs: []
  type: TYPE_NORMAL
- en: Testing directory creation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This particular `apache::virtualhost` recipe starts by creating a directory.
    Here''s how we can test for this directory existence, along with its ownership
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Code coverage is now 60%!
  prefs: []
  type: TYPE_NORMAL
- en: Testing file creation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The same recipe then creates an index file. This is how we test it''s created
    with the required ownership:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Code coverage is now 80%!
  prefs: []
  type: TYPE_NORMAL
- en: Testing templates creation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The recipe ends with the creation of Apache VirtualHost from a template. This
    is how to test it''s in place with the default attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: All in all, we've now covered 100% of our resources!
  prefs: []
  type: TYPE_NORMAL
- en: 'As the output says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Stubbing data bags for searches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `mysite` cookbook we created earlier contains a search in a data bag to
    later populate a file with content. The thing is, we''re unit testing, and no
    real Chef server is answering requests. So the tests are failing: the simulated
    Chef run doesn''t end well because a search can''t be executed. Fortunately, ChefSpec
    allows us to stub the data bag with real content. So here''s how it looks in `spec/unit/recipes/default_spec.rb`
    from the `mysite` cookbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now the simulated Chef run has a `webusers` data bag and some sample data to
    work with!
  prefs: []
  type: TYPE_NORMAL
- en: Testing recipes inclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s very common to include recipes inside another recipe. Typically, when
    using notifications for restarting a service from a file change, the concerned
    service must be included in the recipe where the file resource is located; otherwise,
    the code most probably works by chance because the required dependent cookbook
    is included elsewhere! Here''s how to test for a cookbook inclusion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We now ensure that dependencies are always included.
  prefs: []
  type: TYPE_NORMAL
- en: Intercepting errors in tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes we have to work with third-party cookbooks, that may somehow raise
    errors. It''s the case with the official MySQL cookbook, which depends on the
    SELinux cookbook for the RHEL/CentOS platform. This cookbook, for some reason,
    doesn''t work with ChefSpec, so when converged, it errors out the following string:
    `chefspec not supported!`. ChefSpec stops there, and say the Chef run is in error.
    As we don''t have any power on why is that, here''s a workaround to expect a very
    specific error from a Chef run, and this will be helpful many times later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We've seen a selection of the most common and reusable unit tests for Chef cookbooks!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Puppet, Puppet Labs is providing a repository containing several useful
    tools we will use in this chapter—the Puppet Labs Spec Helper. Let''s install
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'For unit testing, rspec-puppet is the counterpart of ChefSpec for Puppet, and
    has been installed as a dependency of `puppetlabs_spec_helper`. We will now add
    a unit test for each manifest in our Apache module. First of all, we need a `Rakefile`
    to create the required targets. Fortunately, the `puppetlabs_spec_helper` gem
    provides such targets. Let''s create a `Rakefile` in the top-level directory of
    our Apache module with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'All unit tests should remain in a `spec` directory. Before writing any test,
    we also need a helper script that will be common to all tests. Let''s create it
    in `spec/spec_helper.rb`. This file should contain the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now ready to write unit tests. We have four manifests in our module,
    and we are about to create a unit test for each of them. Here are the goals:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `apache/manifests/init.pp` manifest: The unit test needs to validate
    the manifest is compiling, the `apache2` package installation is done, and the
    `apache2` service is running and activated on boot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the `apache/manifests/vhost.pp` manifest: The unit test should ensure the
    virtual host is created in `/etc/apache2/sites-available` and activated in `/etc/apache2/sites-enabled`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the `apache/manifests/htpasswd.pp` manifest: The unit test should ensure
    a `htpasswd` file is generated correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the `apache/manifests/htaccess.pp` manifest: The unit test should ensure
    a `.htaccess` file is generated correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s try the first one! Since the manifest contains a class declaration,
    the unit test should be in `spec/classes`. The class name is `apache`; this will
    be the base name of the file containing the test. Each test file should be suffixed
    by `_spec.rb`, so let''s create `spec/classes/apache_spec.rb` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Unit tests are in descriptive blocks, with a list of assertions. Here, we have
    the three assertions we mentioned earlier when describing the goal of the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run the unit test using the `spec` rake target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: That's it! Our three assertions have been tested successfully!
  prefs: []
  type: TYPE_NORMAL
- en: 'The three other tests should be placed under `spec/defines`, this is because
    the corresponding manifests declare a `define` statement. Let''s create:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spec/defines/apache_vhost_spec.rb`, with the following content:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`spec/defines/apache_htpasswd_spec.rb`, with the following content:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`spec/defines/apache_htaccess_spec.rb,` with the following content:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we have all our unit tests, and each one validates the initial target we
    defined earlier. The total number of assertions is `13`, and we can now run the
    complete test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Rake targets provided also contain a `lint` target that can be used with
    `rake lint`. We can use this target directly instead of puppet-lint manually as
    we did earlier.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ChefSpec: [http://sethvargo.github.io/chefspec](http://sethvargo.github.io/chefspec)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A wide selection of quality examples is given on the ChefSpec GitHub repository:
    [https://github.com/se](https://github.com/se)[thvargo/chefspec/tree/m](http://thvargo/chefspec/tree/m)[aster/examples](http://aster/examples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Puppet RSpec: [http://rspec-puppet.com](http://rspec-puppet.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rspec: [http://rspec.info](http://rspec.info)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing infrastructure with Test Kitchen for Chef and Beaker for Puppet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test Kitchen is a central tool in the Chef ecosystem as it enables thorough
    testing of infrastructure code and plays very well with a lot of other tools we
    already use and know. It takes the strong testing culture from the development
    world and applies it to an infrastructure-as-code environment. Test Kitchen helps
    start an isolated system environment, apply Chef cookbooks to it, and then execute
    tests. Supported test frameworks include RSpec, ServerSpec, or Bats (and more),
    with a large choice of supported environments such as AWS, Vagrant, Digital Ocean,
    Docker, and OpenStack. Test Kitchen integrates very well with Berkshelf, so cookbook
    dependencies aren't an issue while testing complex infrastructures. The best part
    is, it's already included in the Chef DK, so we just have to use it.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll structure everything needed to properly test our Chef
    cookbooks code using Vagrant with CentOS 7.2
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Test Kitchen version in use in the Chef DK at the time of writing is 1.13.2.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To step through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Vagrant installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef code from [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing
    Servers with Chef and Puppet"), *Fundamentals of Managing Servers with Chef and
    Puppet,* or any custom Chef code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Test Kitchen is configured by a single `.kitchen.yml` file at the root of the
    cookbook. It contains a lot of information:'
  prefs: []
  type: TYPE_NORMAL
- en: How to test the system (Vagrant, by default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to provision the system (chef-solo, chef-zero, or other modes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which platforms to test (Ubuntu 16.04, CentOS 7.2, or other distributions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test suites (what to apply, where to find information, in what context,
    and similar information)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Test Kitchen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Irrespective of whether we already have a `.kitchen.yml` file or not, let''s
    open it and fill in the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: We want to run the tests with **Vagrant** to closely simulate a VM in production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to provision using **Chef Zero** (by simulating a Chef server locally)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to test only on **CentOS 7.2** (our code isn't currently designed to
    run on something else)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want a single suite of tests, with a run list of the `mysite::default` recipe,
    and a path to the **Data Bags**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how our `.kitchen.yml` file looks for the `mysite` cookbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Testing with Test Kitchen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To simply launch Test Kitchen with the specified configuration, execute the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'What happened here is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Test Kitchen read the `.kitchen.yml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Kitchen created the Vagrant VM with the specified image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Kitchen installed Chef, synchronized the cookbooks, solved dependencies
    with Berkshelf, and applied the `run_list` content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Kitchen launched tests (we don't have any for now)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Kitchen destroyed the VM as everything went smoothly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we execute the simple `kitchen test` command, we are in fact running through
    five steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kitchen create`: This creates the virtual testing environment (in our case,
    through Vagrant and an hypervisor), but does not provision it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kitchen converge`: This provisions the instance with the suite information
    from the `.kitchen.yml` we created. As we''re using Test Kitchen with Chef, it
    starts by installing Chef and then resolves cookbook dependencies for us. Then
    it applies `run_list` with the requested Chef mode (chef-zero in our case).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kitchen setup`: This installs any additional plugin we might need.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kitchen verify`: This first installs everything needed to run the tests—in
    our case, this will be ServerSpec.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kitchen destroy`: If all tests pass, this step destroys the testing environment.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We highly recommend that you use each command sequentially for debugging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For reference, as this will all be discussed in the next section, all tests
    are located in the `test/integration/<suite_name>/<plugin_name>` folder. In other
    words, the `test/integration/default/serverspec/virtualhost_spec.rb` file will
    match the Chef cookbook recipe named `virtualhost`, executed from the `default`
    Kitchen test suite, and tested with the `serverspec` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The counterpart for Puppet is Beaker. The development of Beaker is very active,
    and the current version (6.x) needs at least Ruby 2.2.5\. In order to use the
    Embedded Ruby provided by Puppet Collections, let''s stay on the 5.x branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A C/C++ compiler is needed to install Beaker, so install gcc/g++ or clang before
    trying to install `beaker-rspec`. The Zlib library is also needed (binaries and
    headers).
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need another gem containing helpers: `beaker-puppet_install_helper`.
    This gem is mainly used to install Puppet in boxes during tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We first need to define a list of supported platforms for running test acceptances.
    Each platform must be defined in a YAML file in `spec/acceptance/nodesets`. Since
    our code only works on Ubuntu, let''s define a single platform in `spec/acceptance/nodesets/default.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we will use Vagrant as hypervisor, with an Ubuntu Xenial box.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`type: foss` means that the open source edition of Puppet will be used.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can run Beaker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: No acceptance test has been defined yet, but we will see how to write one in
    the next pages.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bats testing framework: [https://github.com/sstephenson/bats](https://github.com/sstephenson/bats)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RSpec: [http://rspec.info/](http://rspec.info/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ServerSpec: [http://serverspec.org/](http://serverspec.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test Kitchen drivers: [https://rubygems.org/search?query=kitchen-](https://rubygems.org/search?query=kitchen-)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration testing with ServerSpec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Integration testing comes after unit testing: we''re now testing the actual
    functionality on a real black box system. We''re probably using many cookbooks
    that are doing a lot of things, each unit tested in an early stage, but how are
    they playing together for real? Everything assembled together, intentions might
    match, but reality can be very different. Overrides might overlap, a forgotten
    recipe can change behavior, a service might not start and then changes will happen,
    regression can be introduced, or newer systems or updates can break; there are
    countless reasons why things can go wrong at a certain point on a real system.
    That''s the reason we need integration testing; testing the outcome of the combination
    of all our cookbooks applied to a real test system, and now.'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Chef, we have a great tool to help us for this matter named Test
    Kitchen, which we previously installed and configured to run and execute tests.
    Let's now write these tests!
  prefs: []
  type: TYPE_NORMAL
- en: We'll write integrations tests for the `mysite` cookbook written in [Chapter
    6](ch06.html "Chapter 6. Fundamentals of Managing Servers with Chef and Puppet"),
    *Fundamentals of Managing Servers with Chef and Puppet,* for demonstration purposes,
    but those are completely generic and can be reused anywhere. We'll test for services,
    files, directories, yum repositories, packages, ports, and injected content. This
    way, we'll be certain that the code we're writing actually does what it's expected
    to do in the (simulated) real world!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We strongly suggest that you add those integrations tests to an automated CI
    system. So that after a change in the code, tests can be automatically launched
    and as time go by, complexity soars with many cases added, so you just don''t
    have to think about it: it''s all going to be tested, and if your change breaks
    something you missed, you''ll know it in seconds. Nobody wants to manually verify
    that nothing breaks on three versions of four operating systems at each change.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To step through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Vagrant installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef code from [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing
    Servers with Chef and Puppet"), *Fundamentals of Managing Servers with Chef and
    Puppet,* or any custom Chef code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Depending on how the cookbooks we test are created, a `test` folder can be
    created with some sample content under it. We don''t need it, so be sure to get
    rid of everything under the `test` folder to start fresh. We''ll use the `mysite`
    cookbook from [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing Servers
    with Chef and Puppet"), *Fundamentals of Managing Servers with Chef and Puppet,*
    as the base cookbook to build our ServerSpec tests on, but obviously those tests
    can be used anywhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Test Kitchen works with *test suites*, and consequently expects a folder hierarchy
    with the same name as the suite name, in an `integration` folder. The final folder
    hierarchy for a `default` test suite will then be `mysite/test/integration/default/serverspec`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Creating a ServerSpec helper script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ServerSpec needs a minimum of two lines of configuration that must be repeated
    on each test. Instead of repeating ourselves, let''s create a helper script in
    `test/integration/default/serverspec/spec_helper.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now all our tests will just need to include the following at the top of the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Testing a package installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our cookbooks are doing a lot of things, and among the most important things
    is package installation. These things were unit tested previously, but now we''re
    in integration. Are those packages really installed? Let''s find out by writing
    the test for the `httpd` package in `apache_spec.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: We can now fire up Test Kitchen and see if this specific package is really installed!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While writing integration tests, we strongly suggest that you use Test Kitchen
    to create/converge/set up/verify the sequence and not the simple `kitchen test`
    command that does everything at once—the manual way is much faster!
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, testing for the `php` packages in a `php_spec.rb` file will look
    exactly the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Testing for service status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ServerSpec allows us to test the actual process status. In the recipe to install
    the Apache HTTPD server, we requested it to be enabled and running. Let''s find
    out if it''s really the case by adding the following to the `apache_spec.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of our MySQL installation, the documentation from the official
    cookbook indicates the service is by default named `mysql-default` (and not the
    usual `mysqld`). In a `mysql_spec.rb` file, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Testing for listening ports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ServerSpec is a great tool to test listening ports. In our case, we expect
    Apache to listen on port `80` (HTTP) and we configured MySQL to listen to `3306`.
    Add the following to the `apache_spec.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, add the following for MySQL in the `mysql_spec.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Testing for files existence and content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We previously unit tested the intention to create all those files in our cookbooks,
    such as a VirtualHost with a custom name, impacting both filename and content
    (that''s what the `mysite` cookbook from [Chapter 6](ch06.html "Chapter 6. Fundamentals
    of Managing Servers with Chef and Puppet"), *Fundamentals of Managing Servers
    with Chef and Puppet,* does, override the defaults from the custom apache cookbook).
    Is it really working? Let''s find out by testing our virtual hosting configuration
    with `vhost_spec.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This actually proves the default attribute really got overridden by the `mysite`
    value, and the content of the virtual host configuration file also matches this
    value. The cookbook really works.
  prefs: []
  type: TYPE_NORMAL
- en: 'A directory can similarly be tested like this in the same `vhost_spec.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Another interesting test to be done is to check the content of the `htpasswd`
    file; in [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing Servers with
    Chef and Puppet"), *Fundamentals of Managing Servers with Chef and Puppet,* we
    wrote a recipe making a request to the Chef server for authorized users in a data
    bag. We unit tested the feature by stubbing the data bag, and then using Test
    Kitchen, we configured it to simulate the availability of those data bags. Is
    this Chef Server-specific code really working and adding the `john` user in the
    `htpasswd` file while restricting access to it? Let''s find out by adding the
    following to an `htaccess_spec.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Testing for repository existence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our `mysite` cookbook example from [Chapter 6](ch06.html "Chapter 6. Fundamentals
    of Managing Servers with Chef and Puppet"), *Fundamentals of Managing Servers
    with Chef and Puppet,* is using the official Chef cookbook to deploy MySQL, and
    that includes adding a yum repository. As it''s now an important part of the system,
    we''d better test for its existence and status! To test a yum repository, add
    the following to the `mysql_spec.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Many other parts of a system can be tested using ServerSpec, notably in networking
    (routing tables, gateways, and interfaces), Unix users and groups, real commands,
    cron jobs, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Puppet and Beaker, let's try to write acceptance tests for our Apache
    module. Acceptance tests needs to be placed in the `spec/acceptance` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to define a helper file that will be shared by all acceptance tests.
    Let''s create a `spec/spec_helper_acceptance.rb` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: This helper file will be used to install Puppet on the test box, and populate
    the module directory with our `apache` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first basic acceptance test for the main `apache` class, let''s create
    `spec/acceptances/classes/apache_spec.rb`, with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The goals of this test are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache using our class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying Puppet applies properly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Verifying that a second run of Puppet does not change anything: we want to
    prove the code is idempotent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's try the test!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: In this example, Beaker created the box, installed Puppet, uploaded our code,
    applied Puppet twice to validate our test, and destroyed the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have more logs regarding Puppet agent installation and execution, we can
    add a line `log_level: verbose` in the `nodeset` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s extend our test to use all code contained in the apache module.
    We want to update the manifest at the top of the file in order to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Install apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define a virtual host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the root directory of the virtual host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `htpasswd` file with a test user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `.htaccess` file in the root directory, using the previous `htpasswd`
    file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regarding tests, we want to:'
  prefs: []
  type: TYPE_NORMAL
- en: Verify Puppet applies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the code is idempotent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify apache is running and activated at boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify apache is listening
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the virtual host is deployed and activated with the correct `DocumentRoot`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the `htpasswd` file is deployed with a correct content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the `.htaccess` file is deployed with a correct content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The updated acceptance test code is now as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s try to run Beaker again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: We now have a complete acceptance test suite for our Apache module!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ServerSpec GitHub: [https://github.com/serverspec/](https://github.com/serverspec/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ServerSpec Homepage: [http://serverspec.org/](http://serverspec.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test Kitchen Homepage: [http://kitchen.ci/](http://kitchen.ci/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A sample skeleton for Puppet module with Beaker enabled: [https://gitlab.com/joshbeard/puppet-module-test](https://gitlab.com/joshbeard/puppet-module-test)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
