["```\ngit clone https://github.com/Azure-Samples/active-directory-b2c-dotnet-webapp-and-webapi.git\n```", "```\nWeb App \nID d92c671f-c576-45b1-9d53-0510f306bccc\nKey WdLrw#+DZ6L#vW7,3(ryS.uP\n\nWeb App API\nID 2f73f192-e9c5-4fa8-8429-9aa3fd13293e\n```", "```\n<!--<add key=\"api:TaskServiceUrl\" value=\"https://aadb2cplayground.azurewebsites.net/\" />-->\n```", "```\n<add key=\"api:TaskServiceUrl\" value=\"https://localhost:44332/\"/> \n```", "```\n<!--<add key=\"api:ApiIdentifier\" value=\"https://fabrikamb2c.onmicrosoft.com/api/\" />â€”>\n<add key=\"api:ApiIdentifier\" value=\"https://yourdomainb2c.onmicrosoft.com/myAPISample/\" />\n```", "```\n$credential = Get-Credential\n```", "```\n# Example: $vendorDirectory = New-AdfsLdapServerConnection -\nHostName leanads01.leano.ch -Port 636 -SslMode None -\nAuthenticationMethod basic -Credential $credential\n$vendorDirectory = New-AdfsLdapServerConnection -HostName \nyourhostname-Port 636 -SslMode None -AuthenticationMethod basic -\nCredential $credential\n$Name = New-AdfsLdapAttributeToClaimMapping -LdapAttribute \nsAMAccountName -ClaimType \"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\"\n$Mail = New-AdfsLdapAttributeToClaimMapping -LdapAttribute mail -ClaimType \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"\n# Example: $AdditionalAttribute = New-AdfsLdapAttributeToClaimMapping -LdapAttribute mail -ClaimType \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\" \n```", "```\n# Choose your preferred display name in the Forms-Based Authentication with the -Name parameter\n# Example: Add-AdfsLocalClaimsProviderTrust -Name \"Partners\" -Identifier \"urn:leano\" -Type Ldap -LdapServerConnection $vendorDirectory -UserObjectClass user -UserContainer \"DC=leano,DC=CH\" -LdapAuthenticationMethod basic -AnchorClaimLdapAttribute //userPrincipalName -AnchorClaimType \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn\" -LdapAttributeToClaimMapping @($Name, $Mail) -AcceptanceTransformRules \"c:[] => issue(claim=c);\" -Enabled $true\n\nAdd-AdfsLocalClaimsProviderTrust -Name \"External\" -Identifier \"urn:dev\" -Type Ldap -LdapServerConnection $vendorDirectory -UserObjectClass user -UserContainer \"DC=EXAMPLE,DC=COM\" -LdapAuthenticationMethod basic -AnchorClaimLdapAttribute userPrincipalName -AnchorClaimType \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn\" -LdapAttributeToClaimMapping @($Name, $Mail) -AcceptanceTransformRules \"c:[] => issue(claim=c);\" -Enabled $true \n```", "```\n# Build a .txt file with the specific Claim rules - in my case \nruleset.txt\n# Change the samAccountName - Domain Suffix to your needs\n@RuleName = \"Pass through UPN\"\nc:[Type == \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn\"]\n=> issue(claim = c);\n@RuleName = \"Pass through Mail\"\nc:[Type == \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"]\n=> issue(claim = c);\n@RuleName = \"Pass through sAMAccountName\"\nc:[Type == \"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\"]\n=> issue(Type = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\", Value = \"Partners\\\" + c.Value);\n```", "```\n# Be aware to use the same name as you have chosen under Add-AdfsLocalClaimsProviderTrust -Name \"Partners\" $ruleset = New-AdfsClaimRuleSet -ClaimRuleFile .\\ruleset.txt\nSet-AdfsLocalClaimsProviderTrust -TargetName \"Partners\" -AcceptanceTransformRules $ruleset.ClaimRulesString \n\nConfigure the HRD Cookie Lifetime to save the chosen IDP and to avoid further clicks for the user # In your case we would recommend a Lifetime of 1825 days = 5 years\nSet-AdfsWebConfig -HRDCookieLifetime 90 -HRDCookieEnabled:$true \n\nAdd the additional IDP to your Relying Party Trust configuration \n# TargetName = your RP you want to configure; and the ClaimsProviderName = Your defined name \n\nSet-AdfsRelyingPartyTrust -TargetName \"ClaimsXRay\" -ClaimsProviderName @(\"Active Directory\",\"Partners\") \n```", "```\n// Insert the following code to the end of your onload.js script and define your own display name // Update your custom theme with the provided Theme Customization Scripts \nif ( document.getElementById(\"hrdArea\") ) { \n var strADCPName = \"Partners\" ; \n //Create an array of all claim provider trust section in the page \n var listAllSpanForIdp = document.getElementsByClassName(\"idpDescription float\") ; \n var inc; \n for (inc = 0; inc < listAllSpanForIdp.length; inc++) { \n if ( listAllSpanForIdp[ inc ].innerHTML == \"<span class=\\\"largeTextNoWrap indentNonCollapsible\\\">Active Directory</span>\" ) { \n //Change the HTML content of the matching section to the value specified in the strADCPName variable \n listAllSpanForIdp[ inc ].innerHTML = \"<span class=\\\"largeTextNoWrap indentNonCollapsible\\\">\"+ strADCPName +\"</span>\" ; \n } \n } \n} \n```", "```\n# Sends all configured claim definitions from the local AD and the additional IDP (urn:example) \nClaim Issuance Rule 1 \nc:[Issuer =~ \"^(SELF AUTHORITY|LOCAL AUTHORITY|urn:dev)$\"]\n => issue(claim = c); \n# Removes the domain suffix in the NameID claim \nClaim Issuance Rule 2 \nc:[Type == \"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\"]\n => issue(Type = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\", Issuer = c.Issuer, OriginalIssuer = c.OriginalIssuer, Value = RegExReplace(c.Value, \".+?\\\\\", \"\"), ValueType = c.ValueType, Properties[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/format\"] = \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"); \n# Restart ADFS Service \nRestart-service ADFSsrv\n```", "```\nConnect-MsolService #Enter your global administrator credentials\nConvert-MsolDomainToFederated -DomainName inovit.ch -SupportMultipleDomain\n```", "```\n$certTS=Get-AdfsCertificate -CertificateType Token-Signing\n$certInf=$certTS[0].Certificate.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert)\n[System.IO.File]::WriteAllBytes(\"c:\\temp\\inovit-ts.cer\", $certBytes)\n```", "```\n$crt = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2(\"c:\\temp\\inovit-ts.cer \")\n$certData = [system.convert]::tobase64string($cert.rawdata)\n$customdomain=\"azureid.ch\"\n#customdomain=\"apac.inovitdemos.ch\"\n$url=\"https://login.inovitdemos.ch/adfs/ls/\"\n$uri=\"http://login.inovitdemos.ch /adfs/services/trust/\"\n$ura=\"https://login.inovitdemos.ch/adfs/services/trust/2005/usernamemixed\"\n$logouturl=\"https://login.inovitdemos.ch/adfs/ls/\"\n$metadata=\"https://login.inovitdemos.ch/adfs/services/trust/mex\"\n\nSet-MsolDomainAuthentication -DomainName $customdomain -Authentication Federated -ActiveLogOnUri $ura -PassiveLogOnUri $url -MetadataExchangeUri $metadata -SigningCertificate $certData -IssuerUri $uri -LogOffUri $logouturl -PreferredAuthenticationProtocol WsFed\n```"]