["```\npacker {\n  required_plugins {\n    googlecompute = {\n      source  = \"github.com/hashicorp/googlecompute\"\n      version = \"~> 1.1.2\"\n    }\n  }\n}\n```", "```\nsource \"googlecompute\" \"vm\" {\n  project_id   = var.gcp_project_id\n  source_image = \"ubuntu-pro-2204-jammy-v20220923\"\n  ssh_username = \"packer\"\n  zone         = var.gcp_primary_region\n  image_name   = \"${var.image_name}-${var.image_version}\"\n}\n```", "```\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 5.1.0\"\n    }\n    cloudinit = {\n      source  = \"hashicorp/cloudinit\"\n      version = \"~> 2.3.2\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~> 3.5.1\"\n    }\n  }\n  backend \"gcs\" {\n  }\n}\n```", "```\nprovider \"google\" {\n  project = var.gcp_project\n  region  = var.primary_region\n}\n```", "```\nterraform {\n  ...\n  backend \"gcs\" {\n  }\n}\n```", "```\nresource \"google_compute_network\" \"main\" {\n  ...\n  tags = {\n    application = var.application_name\n    environment = var.environment_name\n  }\n}\n```", "```\nresource \"google_compute_network\" \"main\" {\n  name                    = \"${var.application_name}-${var.environment_name}\"\n  auto_create_subnetworks = false\n}\n```", "```\nresource \"google_compute_subnetwork\" \"frontend\" {\n  name          = \"frontend\"\n  region        = var.primary_region\n  network       = google_compute_network.main.self_link\n  ip_cidr_range = cidrsubnet(var.network_cidr_block, 2, 1)\n}\n```", "```\nresource \"google_compute_global_forwarding_rule\" \"frontend\" { name = \"my-forwarding-rule\" ip_protocol = \"TCP\" port_range = \"80\" target = google_compute_target_http_proxy.http_proxy.self_link }\n```", "```\nresource \"google_compute_target_http_proxy\" \"http_proxy\" {\n  name    = \"my-http-proxy\"\n  url_map = google_compute_url_map.url_map.self_link\n}\n```", "```\nresource \"google_compute_url_map\" \"url_map\" {\n  name            = \"my-url-map\"\n  default_service = google_compute_backend_service.backend_service.self_link\n}\n```", "```\nresource \"google_compute_backend_service\" \"backend_service\" {\n  name        = \"my-backend-service\"\n  port_name   = \"http\"\n  protocol    = \"HTTP\"\n  timeout_sec = 10\n  dynamic \"backend\" {\n    for_each = google_compute_instance_group.frontend\n    content {\n      group = backend.value.self_link\n    }\n  }\n  health_checks = [google_compute_http_health_check.frontend.self_link]\n}\n```", "```\nresource \"google_compute_http_health_check\" \"frontend\" {\n  name = \"${var.application_name}-${var.environment_name}-hc\"\n  port         = 5000\n  request_path = \"/\"\n}\n```", "```\nresource \"google_compute_firewall\" \"default-hc-fw\" {\n  name    = \"${var.application_name}-${var.environment_name}-hc\"\n  network = google_compute_network.main.self_link\n  allow {\n    protocol = \"tcp\"\n    ports    = [5000]\n  }\n  source_ranges = [\"130.211.0.0/22\", \"35.191.0.0/16\"]\n  target_tags   = [\"allow-lb-service\"]\n}\n```", "```\nresource \"google_secret_manager_secret\" \"db_password\" {\n  secret_id = \"db-password-secret\"\n  replication {\n    automatic = true\n  }\n}\n```", "```\nresource \"google_secret_manager_secret_version\" \"db_password_version\" {\n  secret      = google_secret_manager_secret.db_password.id\n  secret_data = \"abc1234\"\n}\n```", "```\nresource \"google_secret_manager_secret_iam_member\" \"secret_iam\" {\n  secret_id = \"YOUR_SECRET_ID\"\n  role      = \"roles/secretmanager.secretAccessor\"\n  member = \"serviceAccount:YOUR_SERVICE_ACCOUNT_EMAIL\"\n}\n```", "```\ndata \"google_compute_image\" \"frontend\" {\n  name = var.frontend_image_name\n}\n```", "```\nresource \"google_compute_instance\" \"frontend\" {\n  count = var.frontend_instance_count\n  name         = \"vm${var.application_name}-${var.environment_name}-frontend-${count.index}\"\n  machine_type = var.frontend_machine_type\n  zone         = local.azs_random[count.index % 2]\n  boot_disk {\n    initialize_params {\n      image = data.google_compute_image.frontend.self_link\n    }\n  }\n  // Local SSD disk\n  scratch_disk {\n    interface = \"NVME\"\n  }\n  network_interface {\n    subnetwork = google_compute_subnetwork.frontend.self_link\n    access_config {\n      // Ephemeral public IP\n    }\n  }\n  service_account {\n    # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.\n    email  = google_service_account.main.email\n    scopes = [\"cloud-platform\"]\n  }\n  tags = [\"ssh-access\", \"allow-lb-service\"]\n}\n```", "```\nlocals {\n  zone_instances = { for z in local.azs_random : z =>\n    {\n      instances = flatten([\n        for i in google_compute_instance.frontend :\n        i.zone == z ? [i.self_link] : []\n      ])\n    }\n  }\n}\n```", "```\nresource \"google_compute_instance_group\" \"frontend\" {\n  count = var.az_count\n  named_port {\n    name = \"http\"\n    port = 5000\n  }\n  name      = \"frontend-${count.index}\"\n  zone      = local.azs_random[count.index]\n  instances = local.zone_instances[local.azs_random[count.index]].instances\n}\n```", "```\n- name: Create Secret File\n  env:\n    GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}\n  working-directory: ${{ env.WORKING_DIRECTORY }}\n  run: |\n    # Create a local file with the secret value\n    echo -n \"$GOOGLE_APPLICATION_CREDENTIALS\" > gcp.json\n```", "```\n- id: build\n  name: Packer Build\n  env:\n    GOOGLE_APPLICATION_CREDENTIALS: \"gcp.json\"\n    PKR_VAR_gcp_project_id: ${{ vars.GOOGLE_PROJECT }}\n    PKR_VAR_image_version: ${{ steps.image-version.outputs.version }}\n    PKR_VAR_agent_ipaddress: ${{ steps.agent-ipaddress.outputs.ipaddress }}\n  working-directory: ${{ env.WORKING_DIRECTORY }}\n  run: |\n    packer init ./\n    packer build -var-file=variables.pkrvars.hcl ./\n```", "```\n- name: Create Secret File for Terraform\n  env:\n    GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}\n  working-directory: ${{ env.WORKING_DIRECTORY }}\n  run: |\n    # Create a local file with the secret value\n    echo -n \"$GOOGLE_APPLICATION_CREDENTIALS\" > gcp-terraform.json\n```", "```\n- name: Create Secret File for Backend\n  env:\n    GOOGLE_BACKEND_CREDENTIALS: ${{ secrets.GOOGLE_BACKEND_CREDENTIALS }}\n  working-directory: ${{ env.WORKING_DIRECTORY }}\n  run: |\n    # Create a local file with the secret value\n    echo -n \"$GOOGLE_BACKEND_CREDENTIALS\" > gcp-backend.json\n```", "```\n- id: plan\n  name: Terraform Apply\n  env:\n    GOOGLE_BACKEND_CREDENTIALS: gcp-backend.json\n    GOOGLE_APPLICATION_CREDENTIALS: gcp-terraform.json\n    BACKEND_BUCKET_NAME: ${{ vars.BACKEND_BUCKET_NAME }}\n    TF_VAR_gcp_project: ${{ vars.GOOGLE_PROJECT }}\n  working-directory: ${{ env.WORKING_DIRECTORY }}\n  run: |\n    terraform init \\\n      -backend-config='bucket='$BACKEND_BUCKET_NAME \\\n      -backend-config=\"prefix=gcp-vm-sample\"\n    terraform apply -auto-approve\n```"]