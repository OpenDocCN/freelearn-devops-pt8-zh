- en: Appendix A. LXC Alternatives to Docker and OpenVZ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. LXC 替代方案：Docker 和 OpenVZ
- en: LXC is designed and ideally suited for running full system containers; this
    means that an LXC instance contains the filesystem of an entire operating system
    distribution, very similar to a virtual machine. Even though LXC can run a single
    process, or a replacement of the init system with a custom script, there are other
    container alternatives that are better suited for executing just a single, self-contained
    program. In this Appendix, we are going to look at two container implementation
    alternatives to LXC that can run side by side with LXC – Docker and OpenVZ.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: LXC 设计并且非常适合运行完整系统容器；这意味着 LXC 实例包含整个操作系统分发的文件系统，非常类似于虚拟机。尽管 LXC 可以运行单个进程，或者用自定义脚本替换
    init 系统，但有其他更适合仅执行单个自包含程序的容器替代方案。在本附录中，我们将查看两种与 LXC 并存的容器实现替代方案：Docker 和 OpenVZ。
- en: Building containers with OpenVZ
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenVZ 构建容器
- en: OpenVZ is one of the oldest operating-system-level virtualization technologies,
    dating back to 2005\. It is similar to LXC in the sense that it is geared toward
    running an entire operating system, rather than a single program such as Docker.
    Being a containerization technology, it shares the host OS kernel with no hypervisor
    layer. OpenVZ uses a patched version of the Red Hat kernel that is maintained
    separately from the Vanilla kernel.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVZ 是最古老的操作系统级虚拟化技术之一，始于 2005 年。它类似于 LXC，专注于运行整个操作系统，而不是像 Docker 那样只运行单个程序。作为容器化技术，它与主机操作系统内核共享，没有
    hypervisor 层。OpenVZ 使用的是经过补丁处理的 Red Hat 内核版本，与 Vanilla 内核分开维护。
- en: 'Let''s explore some of the OpenVZ features and see how they compare to LXC:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些 OpenVZ 的特性，并看看它们与 LXC 的比较：
- en: 'For this example deployment, we are going to use Debian Wheezy:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例部署，我们将使用 Debian Wheezy：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start by adding the OpenVZ repository and key, then update the package index:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先添加 OpenVZ 仓库和密钥，然后更新软件包索引：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, install the OpenVZ kernel:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装 OpenVZ 内核：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If using GRUB, update the boot menu with the OpenVZ kernel; in this example,
    the kernel is added as menu item 2:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 GRUB，使用 OpenVZ 内核更新启动菜单；在此示例中，内核被添加为菜单项 2：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We need to enable routing in the kernel and disable proxy ARP:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在内核中启用路由并禁用代理 ARP：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now it''s time to reboot the server, then check whether the OpenVZ is now loaded:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是重新启动服务器的时候了，然后检查 OpenVZ 是否已加载：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, install the userspace tools:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装用户空间工具：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'OpenVZ uses templates in a similar way to LXC. The templates are archived root
    filesystems and can be built with tools such as `debootstrap`. Let''s download
    an Ubuntu template in the directory where OpenVZ expects them by default:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVZ 使用与 LXC 类似的模板。这些模板是归档的根文件系统，可以使用 `debootstrap` 等工具构建。让我们在 OpenVZ 默认期望它们的目录中下载一个
    Ubuntu 模板：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the template archive in place, let''s create a container:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在放置模板归档文件的位置后，让我们创建一个容器：
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We specify `simfs` as the type of the underlying container store, which will
    create the root filesystem on the host OS, similar to LXC and the default directory
    type. OpenVZ provides alternatives, such as Ploop, which creates an image file
    containing the containers filesystem.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定 `simfs` 作为底层容器存储的类型，它将在主机操作系统上创建根文件系统，类似于 LXC 和默认目录类型。OpenVZ 还提供了其他选项，例如
    Ploop，它会创建包含容器文件系统的镜像文件。
- en: 'Next, create a Linux bridge:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 Linux 桥接器：
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To allow OpenVZ to connect its containers to the host bridge, create the following
    config file:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许 OpenVZ 将其容器连接到主机桥接器，创建以下配置文件：
- en: '[PRE10]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The file specifies an external script that will add the containers virtual interface
    to the bridge we created earlier.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件指定了一个外部脚本，该脚本将把容器的虚拟接口添加到我们之前创建的桥接器中。
- en: 'Let''s configure our container with a network interface, by specifying the
    name of the interfaces inside and outside the container, and the bridge they should
    be connected to:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定容器内外接口的名称和应连接到的桥接器，配置我们的容器网络接口：
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'List the available containers on the host by executing the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令列出主机上可用的容器：
- en: '[PRE12]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To start our container, run the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的容器，请运行以下命令：
- en: '[PRE13]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, to attach, or enter the container, execute the following commands:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要附加或进入容器，请执行以下命令：
- en: '[PRE14]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Manipulating the available container resources can be done on the fly, without
    the need for restarting the container, very much like with LXC. Let''s set the
    memory to 1 GB:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可以像 LXC 一样，在不重新启动容器的情况下实时操作可用的容器资源。让我们将内存设置为 1 GB：
- en: '[PRE15]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Every OpenVZ container has a config file, which is updated when passing the
    `--save` option to the `vzctl` tool. To examine it, run the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 OpenVZ 容器都有一个配置文件，当传递 `--save` 选项给 `vzctl` 工具时，它会被更新。要查看它，请运行以下命令：
- en: '[PRE16]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With the container running, ensure the virtual interface on the host is added
    to the bridge. Note that the bridge interface itself is in a `DOWN` state:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行时，确保主机上的虚拟接口已添加到桥接中。请注意，桥接接口本身处于 `DOWN` 状态：
- en: '[PRE17]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can execute commands inside the container without the need to attach to
    it. Let''s configure an IP address to the containers'' interface:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在容器内执行命令，无需附加到它。让我们为容器的接口配置一个 IP 地址：
- en: '[PRE18]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Bring the bridge interface on the host up and configure an IP address, so we
    can reach the container from the host:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 启动主机上的桥接接口并配置一个 IP 地址，以便我们可以从主机访问容器：
- en: '[PRE19]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s test connectivity:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试连通性：
- en: '[PRE20]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s enter the container and make sure the available memory is indeed 1 GB,
    as we set it up earlier:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入容器并确保可用内存确实为 1 GB，正如我们之前设置的那样：
- en: '[PRE21]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Notice how the OpenVZ container uses `init` to start all other processes, just
    like a virtual machine:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 OpenVZ 容器如何使用 `init` 启动所有其他进程，就像虚拟机一样：
- en: '[PRE22]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We now know that all container implementations use cgroups to control system
    resources and OpenVZ is no exception. Let''s see where the cgroup hierarchies
    are mounted:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道，所有容器实现都使用 cgroups 来控制系统资源，OpenVZ 也不例外。让我们看看 cgroup 层次结构是如何挂载的：
- en: '[PRE23]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The container we created earlier has an ID of `1` as we saw in the earlier
    example. We can grab the PIDs of all processes running inside the container by
    running the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建的容器的 ID 为 `1`，如前面的示例所示。我们可以通过运行以下命令获取容器内所有进程的 PID：
- en: '[PRE24]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can also obtain the number of CPUs assigned to the container:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以获取分配给容器的 CPU 数量：
- en: '[PRE25]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s assign two cores to the container with ID `1`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 ID 为 `1` 的容器分配两个核心：
- en: '[PRE26]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then ensure the change is visible in the same file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后确保更改在同一文件中可见：
- en: '[PRE27]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The container''s configuration file should also reflect the change:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的配置文件也应反映该更改：
- en: '[PRE28]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using the `ps` command or, by reading the preceding system file, we can get
    the PID of the `init` process inside the container, in this example, `3303`. Knowing
    that PID, we can get the ID of the container by running the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ps` 命令，或者通过读取前述系统文件，我们可以获取容器内 `init` 进程的 PID，在本示例中为 `3303`。知道了 PID 后，我们可以通过运行以下命令获取容器的
    ID：
- en: '[PRE29]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Since the root filesystem of the container is present on the host, migrating
    an OpenVZ instance is similar to LXC – we first stop the container, then archive
    the root filesystem, copy it to the new server, and extract it. We also need the
    config file for the container. Let''s see an example of migrating OpenVZ container
    to a new host:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于容器的根文件系统存在于主机上，迁移 OpenVZ 实例与 LXC 类似——我们首先停止容器，然后归档根文件系统，将其复制到新服务器，并提取它。我们还需要容器的配置文件。让我们来看一个将
    OpenVZ 容器迁移到新主机的示例：
- en: '[PRE30]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'On the second server, we extract the root filesystem:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二台服务器上，我们提取根文件系统：
- en: '[PRE31]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'With the config file and the filesystem in place, we can list the container
    by running the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件和文件系统准备好后，我们可以通过运行以下命令来列出容器：
- en: '[PRE32]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, to start the OpenVZ instance and ensure it''s running on the new host,
    execute the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要启动 OpenVZ 实例并确保它在新主机上运行，请执行以下命令：
- en: '[PRE33]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: OpenVZ does not have a centralized control daemon, which provides easier integration
    with init systems such as `upstart` or `systemd`. It's important to note that
    OpenVZ is the foundation for the Virtuozzo virtualization solution offered by
    the Virtuozzo company, and its latest iteration will be an ISO image of an entire
    operating system, instead of running a patched kernel with a separate toolset.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVZ 没有集中式控制守护进程，这使得与 `upstart` 或 `systemd` 等初始化系统的集成更加容易。需要注意的是，OpenVZ 是
    Virtuozzo 公司提供的 Virtuozzo 虚拟化解决方案的基础，其最新版本将是一个完整操作系统的 ISO 镜像，而不是运行带有单独工具集的修补内核。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the latest OpenVZ and Virtuozzo versions, visit [https://openvz.org](https://openvz.org).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解最新的 OpenVZ 和 Virtuozzo 版本，请访问 [https://openvz.org](https://openvz.org)。
- en: Building containers with Docker
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 构建容器
- en: The Docker project was released in 2013 and gained popularity quickly, surpassing
    that of OpenVZ and LXC. Large production deployments now run Docker, with various
    orchestration frameworks, such as Apache Mesos and Kubernetes, offering Docker
    integration.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 项目于 2013 年发布，并迅速获得了广泛的关注，超越了 OpenVZ 和 LXC。现在，大型生产部署都在运行 Docker，配合各种编排框架，如
    Apache Mesos 和 Kubernetes，提供 Docker 集成。
- en: Unlike LXC and OpenVZ, Docker is better suited for running single applications
    in a minimal container setup. It uses Docker Engine daemon, which controls the
    `containerd` process for managing the life cycle of the containers, thus making
    it harder to integrate with other init systems such as `systemd`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与 LXC 和 OpenVZ 不同，Docker 更适合在最小化容器设置中运行单个应用程序。它使用 Docker Engine 守护进程，该进程控制 `containerd`
    进程来管理容器的生命周期，从而使它更难与其他初始化系统（如 `systemd`）集成。
- en: Docker exposes a convenient API that various tools use, and makes it easy to
    provision containers from prebuilt images, hosted either on remote public or private
    repositories/registries.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了一个方便的 API，供各种工具使用，并使得从预构建的镜像中快速配置容器变得容易，这些镜像可以托管在远程的公共或私有仓库/注册表中。
- en: We can run LXC and Docker containers on the same host without any problems,
    as they have clear separation. In the next section, we are going to explore most
    of Docker's features, by examining the life cycle of a Docker container and seeing
    how it compares to LXC.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在同一主机上运行 LXC 和 Docker 容器而不会遇到任何问题，因为它们有清晰的隔离。在接下来的部分，我们将探索 Docker 的大部分功能，通过检查
    Docker 容器的生命周期并了解它与 LXC 的比较。
- en: 'Let''s start by updating our server and installing the repo and key:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先更新服务器并安装仓库和密钥：
- en: '[PRE34]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'List the currently available package versions and install the latest candidate:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 列出当前可用的软件包版本并安装最新的候选版本：
- en: '[PRE35]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Start the Docker services and ensure they are running:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Docker 服务并确保它们正在运行：
- en: '[PRE36]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'With the Docker daemon running, let''s list all available containers, of which
    we currently have none:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 守护进程运行后，让我们列出所有可用的容器，目前我们没有任何容器：
- en: '[PRE37]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let''s find an Ubuntu image from the upstream public registry, by executing
    the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过执行以下命令，从上游公共注册表中查找一个 Ubuntu 镜像：
- en: '[PRE38]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We pick the official Ubuntu image for our container; to create it, run the
    following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为容器选择官方的 Ubuntu 镜像；要创建它，运行以下命令：
- en: '[PRE39]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We should now have a cached Ubuntu image on our system:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该在系统中有一个缓存的 Ubuntu 镜像：
- en: '[PRE40]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Let''s list the available container on the host again:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次列出主机上可用的容器：
- en: '[PRE41]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Starting the Ubuntu Docker container is just as easy:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Ubuntu Docker 容器同样简单：
- en: '[PRE42]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'By examining the process list, notice how we now have a single bash process
    running as a child of the `dockerd` and `docker-containerd` processes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查进程列表，注意到我们现在有一个单一的 bash 进程作为 `dockerd` 和 `docker-containerd` 进程的子进程运行：
- en: '[PRE43]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'By attaching to the container, we can see that it is running a single bash
    process, unlike the full init system that LXC or OpenVZ use:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过附加到容器，我们可以看到它正在运行一个单独的 bash 进程，而不是像 LXC 或 OpenVZ 那样使用完整的初始化系统：
- en: '[PRE44]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Notice that after exiting the container, it is terminated:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在退出容器后，它会被终止：
- en: '[PRE45]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let''s start it back up again; we can either specify its name or ID, in the
    same manner as with OpenVZ, or libvirt LXC:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新启动它；我们可以像使用 OpenVZ 或 libvirt LXC 一样，指定其名称或 ID：
- en: '[PRE46]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To update the container''s memory, execute the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新容器的内存，执行以下命令：
- en: '[PRE47]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Inspect the memory settings of the container to make sure the memory was successfully
    updated:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 检查容器的内存设置，确保内存已成功更新：
- en: '[PRE48]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Just like LXC and OpenVZ, the corresponding cgroup hierarchy was updated. We
    should be able to see the same memory amount in the cgroup file for the container
    ID:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与 LXC 和 OpenVZ 一样，相应的 cgroup 层次结构已被更新。我们应该能够在容器 ID 的 cgroup 文件中看到相同的内存量：
- en: '[PRE49]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let''s update the CPU shares:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新 CPU 配额：
- en: '[PRE50]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then, examine the setting in the cgroup file, replacing the container ID with
    the one running on your host:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，检查 cgroup 文件中的设置，将容器 ID 替换为正在你主机上运行的 ID：
- en: '[PRE51]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Docker provides few ways of monitoring the container status and resource utilization,
    very much like LXC:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了很少的监控容器状态和资源利用率的方法，非常类似于 LXC：
- en: '[PRE52]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We can also run a command inside the containers'' namespace without attaching
    to it:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在不附加到容器的情况下，在容器的命名空间内运行命令：
- en: '[PRE53]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Copying a file from the host filesystem to that of the container is done with
    the following command; we saw similar examples with LXC and OpenVZ:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令将文件从主机文件系统复制到容器中；我们在 LXC 和 OpenVZ 中看过类似的例子：
- en: '[PRE54]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Moving the container between hosts is even easier with Docker; there''s no
    need to manually archive the root filesystem:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker在主机之间移动容器更加简单；无需手动归档根文件系统：
- en: '[PRE55]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'To delete local images, run the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除本地镜像，请运行以下命令：
- en: '[PRE56]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The Docker API exposes a way to define the software networks, similar to what
    we saw with libvirt LXC. Let''s install the Linux bridge and see what is present
    on the Docker host:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Docker API暴露了一种定义软件网络的方法，类似于我们在libvirt LXC中看到的内容。让我们安装Linux桥接并查看Docker主机上的内容：
- en: '[PRE57]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Notice the `docker0` bridge, created by the Docker service. Let''s list the
    networks that were automatically created:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意由Docker服务创建的`docker0`桥接。让我们列出自动创建的网络：
- en: '[PRE58]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'To inspect the `bridge` network, run the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查`bridge`网络，请运行以下命令：
- en: '[PRE59]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Finally, to stop and delete the Docker container, execute the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要停止并删除Docker容器，请执行以下命令：
- en: '[PRE60]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Running unprivileged LXC containers
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行非特权LXC容器
- en: Let's briefly touch on security with LXC. Starting with LXC version 1.0, support
    for unprivileged containers was introduced, allowing for unprivileged users to
    run containers. The main security concern running LXC containers as root is that
    UID 0 inside the container is the same as UID 0 on the host; thus, breaking out
    of a container will grant you root privileges on the server.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 简要讨论一下LXC的安全性。从LXC 1.0版本开始，引入了对非特权容器的支持，允许非特权用户运行容器。以root身份运行LXC容器的主要安全问题是，容器内的UID
    0与主机上的UID 0相同；因此，突破容器将使你在服务器上获得root权限。
- en: In [Chapter 1](ch01.html "Chapter 1. Introduction to Linux Containers"), *Introduction
    to Linux Containers*, we talked in detail about the user namespace and how it
    allows for a process inside the user namespace to have a different user and group
    ID than that of the default namespace. In the context of LXC, this allows for
    a process to run as root inside the container, while having the unprivileged ID
    on the host. To take advantage of this, we can create a mapping per container
    that will use a defined set of UIDs and GIDs between the host and the LXC container.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. Linux容器简介")，*Linux容器简介*中，我们详细讨论了用户命名空间以及它如何使得用户命名空间内的进程拥有与默认命名空间不同的用户和组ID。在LXC的上下文中，这使得进程可以在容器内以root身份运行，同时在主机上具有非特权ID。为了利用这一点，我们可以为每个容器创建一个映射，使用一组定义的UID和GID在主机和LXC容器之间进行映射。
- en: Let's look at an example of setting up and running a LXC container as an unprivileged
    user.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个设置并运行LXC容器作为非特权用户的示例。
- en: 'Start by updating your Ubuntu system and installing LXC:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，更新您的Ubuntu系统并安装LXC：
- en: '[PRE61]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next, create a new user and assign it a password:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个新用户并为其分配密码：
- en: '[PRE62]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Make a note of what the range of UIDs and GIDs on the system is for the new
    user we created:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 记下我们创建的新用户在系统中的UID和GID范围：
- en: '[PRE63]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Note the name of the Linux bridge that was created:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请记下创建的Linux桥接的名称：
- en: '[PRE64]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Specify how many virtual interfaces can be added to the bridge for a user,
    in this example, `50`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 指定为用户可以添加到桥接的虚拟接口数量，在此示例中为`50`：
- en: '[PRE65]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Next, as the `lxc_user`, create the directory structure and config files as
    follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，作为`lxc_user`，创建目录结构和配置文件，如下所示：
- en: '[PRE66]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The preceding `id_map` options will map the range of virtual IDs for the `lxc_user`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`id_map`选项将映射`lxc_user`的虚拟ID范围。
- en: 'We can now create the container as usual:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以像往常一样创建容器：
- en: '[PRE67]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The container is in the stopped state; to start it, run the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 容器处于停止状态；要启动它，请运行以下命令：
- en: '[PRE68]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Notice that the processes in the container are owned by the `lxc_user` instead
    of root:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，容器中的进程由`lxc_user`而不是root拥有：
- en: '[PRE69]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The root filesystem and config file location is different when running the
    container as a non root user:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当以非root用户运行容器时，根文件系统和配置文件的位置是不同的：
- en: '[PRE70]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw examples on how to deploy containers with alternative
    technologies to LXC such as OpenVZ and Docker.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用OpenVZ和Docker等替代技术部署容器的示例。
- en: OpenVZ is one of the oldest container solutions, and as of this writing it's
    being rebranded to Virtuozzo. The main difference between LXC and OpenVZ is the
    custom Linux kernel that OpenVZ runs on. It's based on the Red Hat kernels and
    soon will be shipped as a single installation ISO as compared to the packaged
    kernel and userspace tools we used in the earlier examples.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVZ 是最古老的容器解决方案之一，直到写作时，它正在重新命名为 Virtuozzo。LXC 和 OpenVZ 之间的主要区别在于 OpenVZ
    运行的自定义 Linux 内核。它基于 Red Hat 内核，并且很快将以单一安装 ISO 的形式发布，而不像我们在之前的示例中使用的那样，依赖于打包的内核和用户空间工具。
- en: Docker is the de-facto standard and an adoption leader in the containerized
    world. Being one of the newer containerization technologies, its ease of use,
    and available API makes it an ideal solution for running microservices in a mass
    scale. Docker does not need a patched kernel to work, and the availability of
    centralized registries to store container images makes it a great choice in many
    scenarios.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是容器化领域的事实标准，也是采纳的领导者。作为较新的容器化技术之一，它的易用性和可用的 API 使其成为大规模运行微服务的理想解决方案。Docker
    不需要修补内核即可工作，并且集中式注册表用于存储容器镜像，使其在许多场景中成为一个绝佳的选择。
- en: We ended the chapter by showing an example of how to run unprivileged LXC containers.
    This feature is relatively new, and it's a step in the right direction when it
    comes to container security.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过展示如何运行非特权的 LXC 容器的示例结束了这一章。这个功能相对较新，它在容器安全性方面迈出了正确的一步。
