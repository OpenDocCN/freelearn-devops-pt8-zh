- en: Chapter 6. Using MongoDB and Third-party Database Cartridges with OpenShift
    Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter presents a number of recipes that show you how to get started
    with the OpenShift MongoDB cartridge. We will also look at how you can use downloadable
    cartridges for MariaDB and **Remote Dictionary Server** (**Redis**). The specific
    recipes within this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a MongoDB cartridge to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a RockMongo cartridge to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a MongoDB cartridge from your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a MongoDB cartridge using Robomongo from your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling the MongoDB cartridge REST interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing scheduled MongoDB database backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using MongoLab MongoDB-as-a-Service with OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a MariaDB cartridge to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Redis cartridge to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is a popular and open source document-oriented NoSQL data store. It
    is designed for scalability and stores complex object graphs in a single document.
    It has support for dynamic queries, secondary indexes, fast atomic updates, aggregation,
    and inbuilt support for replication and sharding.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will use the PHP 5.4 application we created in [Chapter 3](part0041_split_000.html#page
    "Chapter 3. Creating and Managing Applications"), *Creating and Managing Applications*.
    If you do not have any OpenShift application running, then you can create a new
    OpenShift application by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding a MongoDB cartridge to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to add a MongoDB cartridge to your OpenShift
    application. MongoDB is a document-oriented, horizontally scalable, and NoSQL
    data store.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need the `rhc` command-line client installed
    on your machine. Refer to the *Installing the OpenShift rhc command-line client*
    recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting Started
    with OpenShift"), *Getting Started with OpenShift* for details. Also, we will
    use the application created in the *Creating an OpenShift application using the
    rhc command-line client* recipe in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications"), *Creating and Managing Applications*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the MongoDB cartridge to the `myapp` application, use the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new command-line terminal, then change the directory to the `myapp`
    directory location and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install a new instance of MongoDB on your application gear. The `-c`
    option is used to specify the cartridge name and the `--app` option is used to
    specify the application name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can view the cartridge details using the `rhc show-cartridge` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also stop the MongoDB server using the `stop` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can restart the MongoDB server using the `restart` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to remove the MongoDB server from your application, you can use
    the `remove` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you run the `rhc add-cartridge` command, `rhc` will make an HTTP POST request
    to the OpenShift server. The OpenShift server will receive the request and instantiate
    a new instance of the MongoDB database for your application. After provisioning
    the MongoDB database, the `rhc` client will show the database details on the command-line
    terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the MongoDB installation by performing an SSH into your application
    gear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the `ls` command to view the gear directory structure and you will
    see the `mongodb` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `mongodb` directory is your `mongodb` installation, and it is not shared
    with any other OpenShift application or user. It is only for your application,
    and only your application can access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also connect with your MongoDB database by using the `mongo` command-line
    client, as shown in the following command. The *Accessing a MongoDB cartridge
    from your local machine* recipe will cover how to connect with MongoDB from your
    local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can run commands against your MongoDB database. To view all the databases,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `myapp` database corresponds to your application database.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view all the MongoDB command-line utilities available on the gear by
    typing in `mongo` and hitting *Tab* twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also add a MongoDB database from the OpenShift web console. Go to [https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications),
    and click on the **myapp** application for details. On the `myapp` application's
    details web page, you will see an option to add a MongoDB database. Click on the
    **Add MongoDB 2.4** option to add a MongoDB 2.4 cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a RockMongo cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a RockMongo cartridge to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RockMongo ([http://rockmongo.com/](http://rockmongo.com/)) is a free, open source,
    and popular tool written in the PHP programming language to handle the administration
    of the MongoDB database via a web browser. As a web application, RockMongo makes
    it easy to administer the MongoDB server without any installation on your local
    machine. In this recipe, you will learn how to install a RockMongo cartridge on
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MongoDB cartridge.
    Refer to the *Adding a MongoDB cartridge to your application* recipe to learn
    how to install a MongoDB cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps needed to add the RockMongo cartridge are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the RockMongo cartridge on the `myapp` application, open a new command-line
    terminal, then change the directory to the `myapp` directory location and execute
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the username and password returned by the `rhc cartridge-add` command.
    You will need these to log in to RockMongo. The RockMongo credentials are the
    same as your MongoDB database credentials, and you can view them anytime by executing
    the `rhc show-app` or `rhc cartridge-show mongodb-2.4` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to RockMongo (`https://myapp-{domain-name}.rhcloud.com/rockmongo/`) using
    the credentials from step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you run the `rhc add-cartridge` command, the `rhc` client makes an HTTP
    POST request to the OpenShift server. The OpenShift server receives the request
    and installs the RockMongo cartridge on the application gear. The RockMongo cartridge
    works with all the supported application types (Java, Python, Node.js, Ruby, Perl,
    and PHP). You don't need to create PHP applications in order to use the RockMongo
    cartridge. OpenShift will start an Apache process to run the RockMongo application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can only add the RockMongo cartridge after you have added a MongoDB cartridge
    to your application. If you try to add RockMongo before adding a MongoDB cartridge,
    then you will receive the `Cartridge 'rockmongo-1.1' can not be added without
    mongodb` error.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also add a RockMongo cartridge from the OpenShift web console. Go to
    [https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications)
    and click on the `myapp` application. To install a RockMongo cartridge, click
    on the **Add RockMongo 1.1** web link.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Accessing a MongoDB cartridge from your local machine* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Connecting to a MongoDB cartridge using Robomongo from your local machine*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a MongoDB cartridge from your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Adding a MongoDB cartridge to your application* recipe, you learned
    how to access a MongoDB database by performing an SSH into the application gear.
    In this recipe, you will learn how to connect with the MongoDB database from your
    local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MongoDB cartridge.
    Refer to the *Adding a MongoDB cartridge to your application* recipe in this chapter
    to learn how to add a MongoDB cartridge. Also, you will need the `mongo` command-line
    client on your machine. You can download the MongoDB database from the official
    website at [http://www.mongodb.org/downloads/](http://www.mongodb.org/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to connect to a MongoDB cartridge from your local
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command-line terminal and change the directory to the `myapp` application
    directory. Execute the following command to forward remote ports to the local
    machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open another command-line terminal and connect to the MongoDB database from
    the `mongo` command-line client from your local machine using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Replace `<username>` and `<password>` with your MongoDB cartridge username and
    password. The host and port values can be found in the output of the `rhc port-forward`
    command. As you can see in step 1, the `MongoDB` database is available on the
    `127.0.0.1` host and `27017` port number. You can view the username and password
    by running the `rhc show-app` or `rhc cartridge-show mongodb-2.4` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once connected to the MongoDB database, you can run any legitimate command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you used the `rhc port-forward` command to forward all the remote
    ports to the local machine. The `rhc port-forward` command is a wrapper around
    the SSH port forwarding that makes a port on the remote machine available on your
    local machine. A port on the remote machine, which would otherwise be unavailable
    to you, can be used as if it's on your local machine. The command returns the
    list of ports that you can connect from your local machine, as shown in step 1.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the output, the `mongod` process is available on the `27017`
    port and `127.0.0.1` host.
  prefs: []
  type: TYPE_NORMAL
- en: In step 2, you connected to the MongoDB database from your local machine, passing
    in the username, password, host, and port of the database. After a successful
    connection, you ran a command in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: To terminate port forwarding, just press *Ctrl* + *C* on the command-line terminal
    where the `rhc port-forward` command is running.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Connecting to a MongoDB cartridge using Robomongo from your local machine*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a MongoDB cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a MongoDB cartridge using Robomongo from your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Accessing a MongoDB cartridge from your local machine* recipe, you learned
    how to connect to a MongoDB cartridge using the `mongo` command-line client from
    your local machine. In this recipe, you will learn how to connect to a MongoDB
    cartridge using RoboMongo from your local machine. RoboMongo ([http://robomongo.org/](http://robomongo.org/))
    is an open source, cross-platform MongoDB GUI management tool. We used RoboMongo
    because it is available across all the operating systems, and you can type in
    all the commands you type in the mongo shell in RoboMongo. It feels natural to
    developers who are used to the mongo shell.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MongoDB cartridge.
    Refer to the *Adding a MongoDB cartridge to your application* recipe in this chapter
    to learn how to add a MongoDB cartridge. Also, you will need the RoboMongo tool
    installed on your local machine. You can download the RoboMongo tool from its
    website at [http://robomongo.org/](http://robomongo.org/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to connect to RoboMongo with your MongoDB cartridge:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command-line terminal and change the directory to the `myapp` application
    directory. Execute the following command to forward remote ports to the local
    machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the RoboMongo application, and you will see the following screenshot.
    Click on the connect icon in the top-left corner:![How to do it…](img/00050.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on the connect icon, you will see a new window with options to
    create a new connection. Click on the **Create** link to create a new connection:![How
    to do it…](img/00051.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a new connection by entering the MongoDB database details. The host and
    port can be found in the output of the `rhc port-forward` command in step 1, as
    shown in the following screenshot:![How to do it…](img/00052.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Authentication** tab to enter the username and password required
    to connect with the MongoDB cartridge. You can view the MongoDB cartridge details
    using the `rhc show-app` or `rhc cartridge-show mongodb-2.4` command. The following
    screenshot shows the **Authentication** tab details:![How to do it…](img/00053.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button and you will see the new connection listed in the
    **MongoDB Connections** window:![How to do it…](img/00054.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Connect** button and you will be connected to the MongoDB cartridge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once connected to your MongoDB cartridge, you can click on any database and
    view all its collections. When you double-click on a collection, you can see the
    first 50 documents inside it. The following screenshot shows the documents inside
    the `msgs` collection:![How to do it…](img/00055.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you used the `rhc port-forward` command to forward all the remote
    ports to the local machine. This will make it possible to connect to the MongoDB
    database running inside your application gear. In steps 2 through 7, you created
    a new MongoDB connection and connected with the MongoDB cartridge from within
    RoboMongo. In step 8, you navigated to the **msgs** collection in the **test**
    database.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Accessing a MongoDB cartridge from your local machine* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling the MongoDB cartridge REST interface* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling the MongoDB cartridge REST interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB exposes a minimal REST interface that allows users to query collections.
    The interface does not expose operations to insert, update, or remove documents.
    In this recipe, you will learn how to enable the MongoDB cartridge REST interface.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MongoDB cartridge.
    Refer to the *Adding a MongoDB cartridge to your application* recipe in this chapter
    to learn how to add one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to enable the MongoDB REST interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new command-line terminal and SSH into the `myapp` application gear
    using the `ssh` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once inside the application gear, change the directory to `mongodb/conf` and
    edit the `mongodb.conf` file using Vim.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to update the `nohttpinterface` property value to `false` so that
    MongoDB enables the HTTP frontend on the `28017` port. To enable the REST interface,
    you have to add a new property, `rest`, and set its value equal to `true`, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Exit the SSH session and restart the MongoDB cartridge to allow the changes
    to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `rhc port-forward` command on your local machine to enable port
    forwarding. This will list all the applications that you can connect to from your
    local machine. The REST interface will be exposed at the `28017` port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `http://127.0.0.1:28017/` in a web browser. You have to authenticate using
    the MongoDB cartridge credentials. It uses the HTTP basic authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, to view all the documents in the `msgs` collection in the `test` document,
    you can go to `http://127.0.0.1:28017/test/msgs/`. This will list a JSON document
    that contains all the messages in the `msgs` collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, MongoDB disables the REST interface. To enable the REST interface,
    you have to update the `mongodb.conf` MongoDB configuration file. In step 3, you
    updated the `mongodb.conf` file to enable the REST API. Then, you restarted the
    MongoDB cartridge in step 4 to reload the configuration. To connect with the REST
    interface from your local machine, you enabled port forwarding in step 5\. The
    `rhc port-forward` command lists all the remote services that you can connect
    to from your local machine. The MongoDB REST interface is available on the `28017`
    port. In step 7, you viewed the details of the `msgs` collection in the `test`
    database by opening `http://127.0.0.1:28017/test/msgs/` in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using MongoLab MongoDB-as-a-Service with OpenShift* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Performing scheduled MongoDB database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing scheduled MongoDB database backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to perform a scheduled backup of your MongoDB
    database and upload the backup to Amazon S3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MongoDB cartridge.
    Refer to the *Adding a MongoDB cartridge to your application* recipe in this chapter
    to learn how to install one. Also, you need to have an Amazon AWS account. Go
    to [http://aws.amazon.com/](http://aws.amazon.com/) and sign up for a new account
    if you don't have one already.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to enable a daily scheduled backup of the MongoDB
    cartridge:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://console.aws.amazon.com/s3/home](https://console.aws.amazon.com/s3/home)
    and create a new bucket to store your database backups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `cron` cartridge to your application by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'SSH into the application gear and download the `s3-bash` utility in `$OPENSHIFT_DATA_DIR`.
    Extract it to the `s3-bash` directory using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file, `AWSSecretAccessKeyIdFile`, in the `$OPENSHIFT_DATA_DIR/s3-bash`
    directory and store your Amazon secret access key to it. This is required by `s3-bash`
    to communicate with Amazon S3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a script on your local machine in `.openshift/cron/minutely/database_backup.sh`
    and add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding script will run every day at 23:50 (11:50 p.m.) and also run the
    `mongodump` command to create the database backup file. The file is then transferred
    to Amazon S3 using the `s3-bash` API. Finally, after uploading the file, it deletes
    the database dump file from the application gear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we have to set the environment variables so that our script can talk with
    Amazon S3\. If you are not sure how to access your security credentials, then
    refer to the documentation at [http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html](http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html).
    We run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit the code and push it to the OpenShift gear. Every night, at 23:50 (11:50
    p.m.), database backup will be done and your backup will be uploaded to Amazon
    S3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you created a new Amazon S3 bucket to store your MongoDB database
    backups. Amazon S3 is widely used to store static files and is an ideal choice
    for this job. Next, you added the `cron` cartridge to the application. The `cron`
    cartridge will be used to perform daily backups at a particular time.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon S3 exposes its REST service that users can use to perform operations
    on S3 buckets. Amazon provides many programming languages wrapped around their
    REST API to make it easy for developers to integrate with their application. As
    we wanted to keep this recipe's language agnostic, we used the Amazon S3 bash
    wrapper. Amazon does not officially support this wrapper, but it works very well.
    In step 3, you downloaded the `s3-bash` utility using `wget`. The `tar.gz` file
    was stored in `$OPENSHIFT_DATA_DIR`. You then extracted the `tar.gz` file to the
    `s3-bash` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in step 4, you created a file called `AWSSecretAccessKeyIdFile` to store
    the Amazon access key secret. The `s3-bash` wrapper uses a file for the AWS secret
    access key ID so that it does not appear in the list of running processes with
    `ps`.
  prefs: []
  type: TYPE_NORMAL
- en: In step 5, you created a bash script that will be executed every night at 23:50
    (11:50 p.m.). The script first takes the database backup using the `mongodump`
    command and then uploads the file to Amazon S3\. The filename is the current timestamp.
    Finally, after uploading the backup to S3, the script deletes the backup to save
    disk space.
  prefs: []
  type: TYPE_NORMAL
- en: Step 6 creates two environment variables required by the backup script. Finally,
    in step 7, you push the code to the application gear.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using MongoLab MongoDB-as-a-Service with OpenShift* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using MongoLab MongoDB-as-a-Service with OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MongoLab ([https://mongolab.com](https://mongolab.com)) MongoDB-as-a-Service
    makes it easy for you to set up, operate, and scale a MongoDB database on top
    of various cloud providers. In addition to the standard MongoDB features, MongoLab
    also offers the following functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: Running MongoDB on all the major cloud providers, such as Amazon, Google, Rackspace,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highly available MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use the MongoLab MongoDB-as-a-Service
    with your OpenShift applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an OpenShift application. Also, you need
    to have a MongoLab account. Go to [https://mongolab.com/](https://mongolab.com/)
    and sign up for a new account if you don't have one already.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to connect with the MongoLab MongoDB server from
    the OpenShift application:'
  prefs: []
  type: TYPE_NORMAL
- en: After you have created a MongoLab account, you will be shown a screen to create
    your first database. Click on the **Create new** button:![How to do it…](img/00056.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the details of your MongoDB instance. In the following screenshot, the
    database name is `myapp` and Amazon EC2 is the cloud-hosting provider. We choose
    the US East coast data center, as this is where the OpenShift Online application
    instances are located. This helps to minimize the latency between the OpenShift
    application and the database instance:![How to do it…](img/00057.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the database is successfully provisioned, you will see it listed, as shown
    in the following screenshot:![How to do it…](img/00058.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **myapp** database and you will be shown details of the database:![How
    to do it…](img/00059.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before you can connect with the database, you need to create a database user.
    Click on the **Click here** link to create a new database user, as shown in the
    following screenshot:![How to do it…](img/00060.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open a pop up, as shown in the following screenshot, where you have
    to enter the username and password for the new database user:![How to do it…](img/00061.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creation, the database user will be shown on the database details page
    under the **Users** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To connect to the MongoLab MongoDB instance, you will need to have the `mongo`
    command-line client on the gear. Every OpenShift application gear already has
    the `mongo` command-line client installed, so you don''t have to do anything.
    Just SSH into the application gear using the `rhc ssh` command and then enter
    the following command. The username and password corresponds to the one you created
    during step 6\. The host, port, and database name correspond to the information
    found in step 4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once connected to the MongoLab MongoDB instance, you can run any valid MongoDB
    command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Step 1 through 4 helped you create a new instance of the MongoLab MongoDB database
    instance. You are required to provide details related to your database instance,
    and MongoLab will provision a MongoDB database instance based on the details you
    entered. From step 5 through step 7, you created a new database user that will
    allow you to connect to the MongoDB database instance from the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: In step 8, you used the database details to connect to the MongoDB instance
    from the OpenShift application gear using the `mongo` command-line client. Finally,
    you ran a few Mongo commands on the connected MongoLab MongoDB database instance.
    To learn how to connect to MongoLab with your PHP code, you can refer to the OpenShift
    official blog at [https://www.openshift.com/blogs/getting-started-with-mongodb-mongolab-php-and-openshift](https://www.openshift.com/blogs/getting-started-with-mongodb-mongolab-php-and-openshift).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MongoDB cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a MariaDB cartridge to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to add the MariaDB downloadable cartridge
    to your OpenShift application. MariaDB ([https://mariadb.org/](https://mariadb.org/))
    is a community fork of the MySQL database. It is intended to be a drop-in replacement
    for the MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need the `rhc` command-line client installed
    on your machine. Refer to the *Installing the OpenShift rhc command-line client*
    recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting Started
    with OpenShift"), *Getting Started with OpenShift* for details. Also, we will
    use the application created in the *Creating an OpenShift application using the
    rhc command-line client* recipe in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications"), *Creating and Managing Applications*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the MariaDB 5.5 downloadable cartridge on the `myapp` application,
    open a new command-line terminal, then change the directory to the `myapp` directory
    location and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will install a new instance of the MariaDB server on your
    application gear.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the cartridge details using the `rhc cartridge-s` `how` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also stop the MariaDB server using the `stop` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can restart the MariaDB server using the `restart` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to remove the MariaDB server from your application, you can use
    the `remove` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you run the `rhc cartridge-add` command, `rhc` will make an HTTP POST request
    to the OpenShift server. The OpenShift server will receive the request and instantiate
    a new instance of the MariaDB server for your application using the manifest file.
    After provisioning the MariaDB server, the `rhc` client will show the database
    details on the command-line terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the MariaDB installation by performing an SSH into your application
    gear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the `ls` command to view the gear directory structure and you will
    see the `mariadb` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `mariadb` directory is your `mariadb` installation, and it is not shared
    with any other OpenShift application or user. It is only for your application,
    and only your application can access it.
  prefs: []
  type: TYPE_NORMAL
- en: You can also connect with your MariaDB server using the `mysql` command-line
    client. We used the `mysql` client because it is already installed and compatible
    with MariaDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can run SQL commands against your MariaDB server. To view all the
    databases, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `myapp` database corresponds to your application database.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MongoDB cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Redis cartridge to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to add the Redis downloadable cartridge to
    your OpenShift application. Redis is an open source, advanced, NoSQL key value
    data store, written in the ANSI C programming language. It is an in-memory data
    store but also writes to the disk for durability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need the `rhc` command-line client installed
    on your machine. Refer to the *Installing the OpenShift rhc command-line client*
    recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting Started
    with OpenShift"), *Getting Started with OpenShift* for details. Also, we will
    use the application created in the *Creating an OpenShift application using the
    rhc command-line client* recipe in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications"), *Creating and Managing Applications*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the Redis downloadable cartridge to the `myapp` application, open
    a new command-line terminal, then change the directory to the `myapp` directory
    location, and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This will install a new instance of the Redis server on your application gear.
  prefs: []
  type: TYPE_NORMAL
- en: You can view the cartridge details using the `rhc cartridge-show` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also stop the Redis server using the `stop` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You can restart the Redis server using the `restart` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to remove the Redis server from your application, you can use the
    `remove` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you run the `rhc cartridge-add` command, `rhc` will make an HTTP POST
    request to the OpenShift server. The OpenShift server will receive the request
    and instantiate a new instance of the Redis server for your application using
    the manifest file. After provisioning the Redis server, the `rhc` client will
    show the database details on the command-line terminal, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view the Redis installation by performing an SSH into your application
    gear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the `ls` command to view the gear directory structure, and you will
    see the `redis` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `redis` directory is your `redis` installation, and it is not shared with
    any other OpenShift application or user. It is only for your application, and
    only your application can access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also connect with your Redis server using the `redis-cli` command-line
    client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can run commands against your Redis server. To view the details about
    your Redis installation, you can run the `INFO` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn how to use Redis with a Java application, you can read my blog at [https://www.openshift.com/blogs/build-cloud-enabled-java-redis-applications-with-spring-on-openshift](https://www.openshift.com/blogs/build-cloud-enabled-java-redis-applications-with-spring-on-openshift).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MariaDB cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
