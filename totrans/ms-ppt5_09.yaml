- en: Exported Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出资源
- en: Exported resources provide a way for a system to declare a resource, but not
    necessarily realize it. They are designed to allow nodes to publish information
    about themselves to a central database (PuppetDB), so that another node can collect
    the Puppet resource and realize it on the system. Exported resources primarily
    provide a way to create an infrastructure that is aware of other infrastructures
    in your environment. They provide the most value for an infrastructure that must
    eventually converge with information from an infrastructure that has been dynamically
    created by an automated process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 导出资源提供了一种让系统声明资源的方式，但不一定要实现它。它们的设计目的是让节点将有关自己信息发布到一个中央数据库（PuppetDB），这样另一个节点就可以收集Puppet资源并在系统上实现它。导出资源主要为创建一个能够感知环境中其他基础架构的基础架构提供了方法。它们对于必须最终与由自动化过程动态创建的基础架构中的信息进行合并的基础架构提供了最大的价值。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Virtual and exported resources
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟资源和导出资源
- en: Some use cases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些用例
- en: Virtual and exported resources
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟资源和导出资源
- en: To understand exported resources, it first helps to understand virtual resources.
    Virtual resources declare a state that could be made available, but will not be
    enforced until declared with the `realize` function. These resources are designed
    to allow you to prepublish a resource, but only enforce it if other conditions
    are met. Virtual resources help overcome the single declaration challenge that
    can emerge in Puppet code if you have multiple manifests that need to generate
    the same resource—you may need to include more than one of these manifests on
    a single node. If multiple modules need to manage the same file, consider virtualizing
    the resource, and making that resource available from multiple modules.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解导出资源，首先需要理解虚拟资源。虚拟资源声明了一种状态，该状态可能会被提供，但只有在使用`realize`函数声明时才会强制执行。这些资源的设计目的是让你提前发布资源，但只有在满足其他条件时才会强制执行。虚拟资源有助于克服Puppet代码中可能出现的单一声明挑战，特别是当你有多个清单需要生成相同资源时——你可能需要在单一节点上包括多个这样的清单。如果多个模块需要管理同一文件，可以考虑将资源虚拟化，并使该资源在多个模块中可用。
- en: Virtual resources
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟资源
- en: A common use example of virtual resources is the use of special access administrative
    users. With a robust security policy, you may not want any single user having
    administrative access to all systems in an infrastructure. You'd then want to
    declare the administrative user as a virtual resource and allow profiles to realize
    those users where appropriate. In the following example, I'll add myself to a
    Linux system as an administrative user, and then realize the resource in multiple
    manifests, not causing resource conflict but allowing me to  place myself surgically
    on the appropriate systems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟资源的一个常见使用示例是使用特定访问权限的管理员用户。通过健全的安全策略，你可能不希望任何单一用户拥有基础架构中所有系统的管理员访问权限。此时，你可能希望将管理员用户声明为虚拟资源，并允许在适当的情况下由配置文件实现这些用户。在以下示例中，我将把自己添加为Linux系统的管理员用户，然后在多个清单中实现该资源，既不会导致资源冲突，又能让我将自己精确地放置在适当的系统上。
- en: 'First, I need to declare myself and possibly other users as a virtual resource:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要将自己以及可能的其他用户声明为虚拟资源：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I want to use the `realize` function in multiple profiles to call the user
    object from the catalog, and ensure it is on the system. Notice the use of the
    capital letter in the reference: `User[''rrussellyates'']`. This object already
    exists in the catalog, so I''m calling an object that already exists. I''ll want
    to make sure that I include the manifest this is declared in so that the virtual
    user is already in the catalog and realized by the profile:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望在多个配置文件中使用`realize`函数从目录调用用户对象，并确保它已经存在于系统上。注意引用中的大写字母：`User['rrussellyates']`。这个对象已经在目录中存在，因此我调用的是一个已经存在的对象。我需要确保包含声明该虚拟用户的清单，以便该虚拟用户已经在目录中并由配置文件实现：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, my production-level application requires two manifests that call me as
    an administrative user. Because this is a virtual resource that has only been
    declared once, both manifests can call the user independently or together without
    conflict:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我的生产级应用程序需要两个清单来调用我作为管理员用户。由于这是一个只声明过一次的虚拟资源，因此这两个清单可以独立或一起调用该用户而不会发生冲突：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We''ll then apply this role to our node, using our `site.pp`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将把这个角色应用到我们的节点，使用我们的`site.pp`：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When we run this on our system, this administrative user will be realized with
    no duplicate resource declaration errors, even though the user is realized in
    both profiles. We can successfully call this user from multiple places, without
    resource conflicts:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在系统上运行这个时，管理员用户会被实现而不会出现重复的资源声明错误，即使该用户在两个个人资料中都被实现。我们可以在多个地方成功调用此用户，而不会发生资源冲突：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tags
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签
- en: Not all virtual resources are independent from each other. Sometimes, we want
    to generate a collection of resources that we can realize together as a group.
    Puppet provides a metaparameter called a tag that allows us to categorize resources
    together. Tags allow us to run a subset of Puppet code using `puppet agent -t
    --tags <tag>`. They provide a user-specific marking of a resource in order to
    build a collection of similar objects. Tags are an array, so you can apply more
    than one tag to a resource, but still call them separately. Virtual resources
    with tags can be called with a resource collector, sometimes called the *spaceship
    operator*. The simple format for calling resources by a tag is `Resource <| |>`.
    Inside of the two pipes, you can search the catalog for any parameter or metaparameter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有虚拟资源都是相互独立的。有时，我们希望生成一组可以一起实现的资源。Puppet 提供了一个叫做标签（tag）的元参数，使我们能够将资源分类在一起。标签允许我们使用
    `puppet agent -t --tags <tag>` 运行一部分 Puppet 代码。它们为资源提供了用户特定的标记，以便构建类似对象的集合。标签是一个数组，因此你可以为一个资源应用多个标签，但仍然分别调用它们。带有标签的虚拟资源可以通过资源收集器调用，这个收集器有时被称为
    *飞船操作符*。通过标签调用资源的简单格式是 `Resource <| |> `。在两个竖线之间，你可以在目录中搜索任何参数或元参数。
- en: 'By using tags, we could call that administrative user with `User <| tag ==
    ''monitoring_admin'' |>`. This allows us to bundle resources and call them as
    a group, rather than as an individual pocket. Let''s take the preceding example
    and expand it to use a tag-based system:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用标签，我们可以用 `User <| tag == 'monitoring_admin' |>` 调用这个管理员用户。这使我们能够将资源捆绑在一起并作为一个组调用，而不是作为一个独立的部分。让我们以之前的示例为基础，扩展成一个基于标签的系统：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we''ve tagged `chuck` as a member of monitoring support, Jason as a member
    of infrastructure administrators, and myself as a member of both teams. My manifest
    would then call users of a group, rather than the users individually:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将 `chuck` 标记为监控支持的成员，将 Jason 标记为基础设施管理员的成员，而我自己则同时是这两个团队的成员。我的清单将调用一个组的用户，而不是单独调用每个用户：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After we change our profile to use both tags, the two additional users will
    be added: `jsouthgate` and `chuck`. The administrative user `russellyates` was
    already on the system, so he was not created again:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们更改个人资料以使用这两个标签时，将会添加两个额外的用户：`jsouthgate` 和 `chuck`。管理员用户 `russellyates` 已经在系统中，因此没有重新创建他：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Exported resources
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出的资源
- en: Virtual resources allow us to stage resources to be used by the node they were
    created on. Expanding on this, exported resources allow a node to create a virtual
    resource and share it with other nodes in the infrastructure. Exported resources
    are a useful way to design automated systems that need information from other
    automated systems. In implementation, you can think of an exported resource as
    virtualized and announced. The resource is not realized on the system (although
    it could be), and it is instead shared with the rest of the infrastructure. This
    allows us to build systems that manage things based on knowing the states of other
    nodes in the infrastructure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟资源允许我们将资源分配到它们所创建的节点上。进一步来说，导出的资源允许一个节点创建虚拟资源并与基础设施中的其他节点共享。导出的资源是设计自动化系统的一种有用方式，尤其是当这些系统需要来自其他自动化系统的信息时。在实现中，你可以将导出的资源视为已虚拟化并宣布的。该资源并未在系统上实现（尽管它可能会），而是与基础设施的其他部分共享。这使我们能够构建基于了解其他节点状态的系统来管理事物。
- en: 'Declaring an exported resource is done in the same way as a virtual resource,
    except we use two `@` symbols instead of one:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 声明一个导出的资源与声明虚拟资源的方式相同，不同的是我们使用两个 `@` 符号而不是一个：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Although we wouldn''t want to use this particular example, we could realize
    this resource on the local system using file `<| |>` and receive just the local
    resource. By adding an additional set of brackets, `<<| |>>`, our infrastructure
    would take this file as described by every node in the infrastructure. The following
    example shows how to retrieve our resources from an exported catalog:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可能不希望使用这个特定的示例，但我们可以使用文件`<| |>`在本地系统上实现这个资源，并仅接收本地资源。通过添加一组额外的括号，`<<| |>>`，我们的基础设施会将此文件作为每个节点所描述的内容来接收。以下示例展示了如何从导出的目录中检索我们的资源：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We''ll add this profile to our `site.pp` outside of a node definition so that
    it is utilized by all nodes:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `site.pp` 中添加这个配置文件，而不放在节点定义内部，这样所有节点都能使用它：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When we run the agent, we will see a file being placed in `/tmp` for each node
    in the infrastructure.  For each node that checks into the master, all other nodes
    will also gain a new file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行代理时，我们会看到每个节点在基础设施中的 `/tmp` 目录下生成一个文件。对于每个检查到 master 的节点，其他所有节点也将获得一个新的文件：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Exported resources are collected out of the storage of catalogs last reported
    to PuppetDB. If a node has a change in the catalog, and the exported resource
    is no longer available in the last run, it will not be available for resource
    collection.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 导出的资源是从最后一次报告到 PuppetDB 的目录存储中收集的。如果一个节点在目录中发生了变化，而导出的资源在上次运行中不再可用，则该资源将无法用于资源收集。
- en: 'One thing to take note of with exported resources: Your node that realizes
    these resources will *eventually* converge to the intended state of the infrastructure.
    Until a node reports this resource to the Puppet Master, your node will be unaware
    of the existence of the node. Let''s use a scenario where you have a new node
    that you''ve classified with an external resource in the catalog. Until that node
    checks into the master for the first time, that resource will not populate into
    PuppetDB. Even after it checks into PuppetDB, the node realizing the resource
    must also run another `puppet agent run`. This means that, on a node that has
    just run Puppet with the default timer of 30 minutes, it may take 30 minutes to
    report its exported resource to the Puppet Master. Then, your node collecting
    these resources may take up to another 30 minutes to check in with the master
    and receive these changes. Exported resources are not immediate, but your infrastructure
    will eventually converge around the new information provided to PuppetDB.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，关于导出的资源：实现这些资源的节点将*最终*趋向于基础设施的预期状态。直到节点将该资源报告给 Puppet Master，它才会意识到该节点的存在。假设你有一个新节点，并且已将其与外部资源分类到目录中，直到该节点第一次检查到
    master，这个资源才会出现在 PuppetDB 中。即使它检查到 PuppetDB，执行该资源的节点也必须再次运行 `puppet agent run`。这意味着，对于刚刚运行了默认
    30 分钟计时器的节点，它可能需要 30 分钟才能将其导出资源报告给 Puppet Master。然后，你的节点收集这些资源可能需要再等待 30 分钟才能与
    master 检查并接收这些更改。导出的资源不是即时的，但你的基础设施最终会根据提供给 PuppetDB 的新信息进行收敛。
- en: The built-in default for a Puppet agent is a 30-minute timer to check in with
    the Puppet Master. If you have a simply configured machine that should find this
    information faster, such as a load balancer, consider having it check into the
    master more often. A load balancer that checks in every 5 minutes should report
    the node as online shortly after its initial configuration via Puppet.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 代理的内置默认设置是每 30 分钟与 Puppet Master 进行一次检查。如果你有一台简单配置的机器，像负载均衡器，应该更快地找到此信息，可以考虑让它更频繁地检查与
    master 的连接。每 5 分钟检查一次的负载均衡器，在通过 Puppet 完成初始配置后，应该很快就能将节点报告为在线。
- en: Use cases
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用案例
- en: 'Exported resources are best used delicately within an infrastructure. We''ll
    go over a few use cases, and talk about similar applications that may use this
    information as we go. We''ll use Forge modules where they make sense, but we''ll
    also build some custom exported resources so that a functional sample is available.
    In this section, we''ll be discussing a few examples of exported resources:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 导出的资源最好在基础设施中谨慎使用。我们将讨论一些使用案例，并在过程中介绍可能使用这些信息的类似应用程序。我们将使用 Forge 模块，在合理的地方使用，但也会构建一些自定义导出的资源，以便提供一个功能性示例。在这一部分，我们将讨论几个导出资源的示例：
- en: A dynamic `/etc/hosts` file
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态的 `/etc/hosts` 文件
- en: Adding a node to an `haproxy` load balancer
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个节点添加到 `haproxy` 负载均衡器
- en: Building an external database on a database server for an application server
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用服务器上为数据库服务器构建外部数据库
- en: Custom configuration files using the `concat` and `File_line` Puppet resources
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `concat` 和 `File_line` Puppet 资源的自定义配置文件
- en: Hosts file
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机文件
- en: This first sample is easy to understand and interpret, but definitely should
    not be used in place of a true **Domain Name Server** (**DNS**). A few years ago,
    I had a customer that was using a public cloud, but it had been acquired by a
    very large company, which had a team dedicated to managing corporate DNS. The
    turnaround for a DNS record was often 4 days, while many of the applications they
    launched had a lifetime of only a few days before being replaced with a new node.
    The solution had some issues for resolution if node networking information changed
    for a period of time, but it was an effective short-term solution until the policies
    around DNS were relaxed for the customer.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例易于理解和解释，但绝对不应替代真正的**域名服务器**(**DNS**)。几年前，我有一个客户正在使用公共云，但该云被一家非常大的公司收购，该公司有一个专门的团队来管理公司
    DNS。DNS 记录的处理时间通常为 4 天，而他们启动的许多应用程序的生命周期只有几天，然后就会被新节点替换。如果节点的网络信息在一段时间内发生变化，这种解决方案会遇到一些问题，但它在
    DNS 政策放宽之前为客户提供了有效的短期解决方案。
- en: 'In the following example, we''ll use a single profile that exports the FQDN
    and IP address of every system classified by `profile::etchosts`, which is to
    be consumed and actioned on by every node (including the originator) in the environment:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将使用一个单独的配置文件，导出每个由`profile::etchosts`分类的系统的 FQDN 和 IP 地址，这些信息将被环境中的每个节点（包括源节点）消费和处理：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If we wanted to ensure that we only collect host entries for hosts in the same
    Puppet environment, we can simply change our manifest to read `Host <<| tag ==
    'shoddy_dns'` and `environment == $environment |>>`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望确保仅收集处于相同 Puppet 环境中的主机条目，我们可以简单地将清单更改为读取`Host <<| tag == 'shoddy_dns'`和`environment
    == $environment |>>`。
- en: 'This manifest contains both the exported resource and the resource collection
    call. Any node we include this on will both report its host record and retrieve
    all host records (including its own). Because we want to apply this code to all
    nodes in our infrastructure, we will place it outside of any node definition in
    `site.pp`, causing it to apply to all nodes in the infrastructure:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个清单包含了导出的资源和资源收集调用。我们在其上包含此清单的任何节点将报告其主机记录并检索所有主机记录（包括它自身）。由于我们希望将此代码应用于基础设施中的所有节点，因此我们会将其放在`site.pp`中的任何节点定义之外，使其适用于基础设施中的所有节点：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When we run our agent, we retrieve each host entry individually and place it
    in `/etc/hosts`. In the following example, I run this catalog against my Puppet
    Master. The Puppet Master retrieves each host entry found in PuppetDB and places
    it in `/etc/hosts`. The nodes reported are `haproxy`, `appserver`, and `mysql`.
    These nodes will be used for the rest of the examples in this chapter:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行代理时，我们会单独检索每个主机条目并将其放入`/etc/hosts`。在下面的示例中，我将这个目录应用于我的 Puppet Master。Puppet
    Master 从 PuppetDB 中检索每个主机条目并将其放入`/etc/hosts`。报告的节点是`haproxy`、`appserver`和`mysql`。这些节点将在本章其余的示例中使用：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As noted previously, this should not be seen as a replacement for a true DNS.
    It is a simple and functional sample of how to build and use a Puppet exported
    resource.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这不应被视为真正的 DNS 的替代品。它是一个简单且实用的示例，展示了如何构建和使用 Puppet 导出的资源。
- en: Load balancing
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载均衡
- en: A load balancer is a common system that uses the exported resources pattern
    in Puppet. Load balancers are used to forward traffic across multiple nodes, providing
    both high availability through redundancy and performance via horizontal scaling.
    Load balancers like HAProxy also allow for the design of applications that forward
    a user to data centers more local to them for performance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器是一个常见的系统，它在 Puppet 中使用导出的资源模式。负载均衡器用于将流量转发到多个节点，提供通过冗余实现的高可用性，以及通过水平扩展提供的性能。像
    HAProxy 这样的负载均衡器还允许设计将用户引导到距离他们更近的数据中心的应用程序，以提高性能。
- en: The load balancer itself will receive a traditional configuration, while every
    member of the balancer will export a resource to be consumed by the load balancer.
    The load balancer then uses each entry from each exported resource to build a
    combined configuration file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器本身将接收传统配置，而负载均衡器的每个成员将导出一个资源供负载均衡器消费。负载均衡器随后使用每个导出资源中的每个条目来构建一个合并的配置文件。
- en: The following sample uses `puppetlabs-haproxy` (for more information visit [https://forge.puppet.com/puppetlabs/haproxy](https://forge.puppet.com/puppetlabs/haproxy)) from
    the Puppet Forge. HAProxy is a free and open source load balancer that can be
    used without a license at home. There are other modules available for a few other
    load balancers on the Forge, and users are free to create their own custom modules
    for solutions in the Enterprise.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用了Puppet Forge中的`puppetlabs-haproxy`模块（更多信息请访问[https://forge.puppet.com/puppetlabs/haproxy](https://forge.puppet.com/puppetlabs/haproxy)）。HAProxy是一个免费的开源负载均衡器，可以在家中无需许可证使用。Forge上还有其他负载均衡器的模块可用，用户可以根据企业需求创建自定义模块。
- en: 'We''ll need to create two profiles to support this use case: one for the load
    balancer and one for the balancer member. The balancer member profile is a simple
    exported resource that declares the listener service it will use, and reports
    its hostname, IP address, and available ports to the HAProxy. The `loadbalancer`
    profile will configure a very simple default `loadbalancer`, a listening service
    to provide forwarding on, and most importantly collect all configurations from
    exported resources:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建两个配置文件来支持这个用例：一个用于负载均衡器，一个用于负载均衡成员。负载均衡成员配置文件是一个简单的导出资源，声明它将使用的监听服务，并将其主机名、IP地址和可用端口报告给HAProxy。`loadbalancer`配置文件将配置一个非常简单的默认`loadbalancer`，提供一个监听服务用于转发流量，最重要的是收集所有从导出资源来的配置：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We''ll want then to place these profiles on two separate hosts. In the following
    example, I''m placing the `balancermember` profile on the `appserver`, and the
    `loadbalancer` profile on the `haproxy`. We''ll continue expanding on our `site.pp`
    from before, adding code as we go along:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将这些配置文件放置在两个不同的主机上。在以下示例中，我将`balancermember`配置文件放置在`appserver`上，而`loadbalancer`配置文件放置在`haproxy`上。我们将继续扩展之前的`site.pp`，并逐步添加代码：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the following sample, the load balancer had already been configured as a
    load balancer but had no balancer members to forward to. The `appserver` had also
    completed a run and reported its exported `haproxy` configuration to PuppetDB.
    Finally, the HAProxy server collects and realizes that resource and places it
    as a line in its configuration files, enabling the forwarding of traffic to the
    `appserver` from the `haproxy`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，负载均衡器已经配置为负载均衡器，但没有转发的负载均衡成员。`appserver`也已经完成了一次运行，并将其导出的`haproxy`配置报告到PuppetDB。最后，HAProxy服务器收集并实现这个资源，并将其作为一行放入配置文件中，使得`haproxy`能够将流量转发到`appserver`：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This module uses a `Concat` fragment to build an entire file. If a node does
    not report their `haproxy::balancermember` exported resource on a run, it will
    be removed from the `loadbalancer` realizing these resources on the next run.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块使用`Concat`片段来构建整个文件。如果一个节点在某次运行中没有报告其`haproxy::balancermember`导出资源，它将在下一次运行时从`loadbalancer`中移除，后者会实现这些资源。
- en: When a user requests port `80` (`http`) or port `443` (`https`) from the HAProxy
    server, it will automatically retrieve and forward traffic from our `appserver`.
    If we had multiple app servers, it would even split the load between the two,
    allowing for horizontal scaling.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户请求HAProxy服务器的端口`80`（`http`）或端口`443`（`https`）时，它将自动从我们的`appserver`获取并转发流量。如果我们有多个应用服务器，它甚至会在两个服务器之间分配负载，实现横向扩展。
- en: Database connections
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库连接
- en: 'Many applications require databases to store information between sessions.
    In many large organizations, it is common to centralize these databases and point
    applications to them externally. The following example will consist of two profiles:
    one for the database and one for the application seeking to use the database.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序需要数据库来存储会话间的信息。在许多大型组织中，通常将这些数据库集中化，并将应用程序指向它们。以下示例将包含两个配置文件：一个用于数据库，一个用于需要使用该数据库的应用程序。
- en: The following sample uses `puppetlabs-mysql` from the Puppet Forge. MySQL is
    a free and open source SQL database that can be used without a license at home.
    There are other modules available for other databases, such as SQL Server, OracleDB,
    Kafka, and MongoDB. These modules can be used in a familiar fashion to provide
    exported resources to an external database.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用了Puppet Forge中的`puppetlabs-mysql`模块。MySQL是一个免费的开源SQL数据库，可以在家中无需许可证使用。还有其他数据库的模块可用，如SQL
    Server、OracleDB、Kafka和MongoDB。这些模块可以以类似的方式使用，为外部数据库提供导出资源。
- en: 'In the following example, the `appserver::database` profile provides a very
    simple installation of MySQL. It also retrieves all `mysql::db` resources tagged
    `ourapp`, and realizes them on the central server. The `appserver` profile accepts
    a parameter for the password that could be supplied via `hiera` or encrypted using
    `eyaml`. Using this password, it will export a database resource to be collected
    and realized on the database server. Other configurations could be made to an
    application on this server to ensure it uses the database provided by this exported
    resource:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，`appserver::database`配置文件提供了一个非常简单的MySQL安装。它还获取所有标记为`ourapp`的`mysql::db`资源，并在中央服务器上实现它们。`appserver`配置文件接受一个密码参数，该密码可以通过`hiera`提供，或使用`eyaml`加密。使用此密码，它将导出一个数据库资源，并将在数据库服务器上进行收集和实现。还可以对该服务器上的应用程序进行其他配置，以确保它使用这个导出的资源提供的数据库：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We''ll go ahead and insert these profiles into the node definition for our
    `appserver` and a new node definition for `mysql`. This configuration will ensure
    that our `appserver` has a relevant database on the `mysql` server, and that its
    application is forwarded properly through the `haproxy`. Notice the passing of
    the password on the `appserver` node:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这些配置文件插入到`appserver`节点的定义中，并为`mysql`创建一个新的节点定义。此配置将确保我们的`appserver`在`mysql`服务器上有一个相关的数据库，并且它的应用程序能够通过`haproxy`正确地转发。注意在`appserver`节点上传递密码：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When applied to a previously configured database server, with a freshly exported
    resource from our `appserver`, a new database, database user, and set of permissions
    has been created on the DB Server:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用于一个已配置的数据库服务器时，使用从`appserver`新导出的资源，数据库服务器上会创建一个新的数据库、数据库用户和一组权限：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: One flaw with this system is the up to 30-minute gap between the `appserver`
    being launched and the database being realized on the system. In the next chapter,
    we'll also be discussing application orchestration, which helps solve this problem
    by linking nodes together and orchestrating the agent runs. If you have time to
    let the infrastructure converge, this exported resource can work for databases
    and applications alone.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统的一个缺陷是从启动`appserver`到数据库在系统上实现之间有长达30分钟的间隙。在下一章中，我们还将讨论应用程序编排，它通过将节点链接在一起并协调代理运行来帮助解决这个问题。如果你有时间让基础设施收敛，这个导出的资源可以仅用于数据库和应用程序。
- en: Concat, file lines, and you!
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Concat，文件行，以及你！
- en: The previous samples relied on existing resources such as the host, or existing
    forge modules such as `haproxy` and `mysql`. In some cases, we'll need to build
    custom configuration files on systems using exported resources. We'll go over
    samples using both `concat` and `file_line`. `concat` to declare the entire contents
    of a file, using a list of ordered strings. File line is part of `puppetlabs-stdlib`
    (for more information visit [https://forge.puppet.com/puppetlabs/stdlib](https://forge.puppet.com/puppetlabs/stdlib))
    and it places lines that are not present into an existing file, and can also be
    used to match an existing line using `regex`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例依赖于现有资源，例如主机，或现有的forge模块，如`haproxy`和`mysql`。在某些情况下，我们需要使用导出的资源在系统上构建自定义配置文件。我们将展示使用`concat`和`file_line`的示例。`concat`用来声明文件的全部内容，使用一个有序字符串列表。文件行是`puppetlabs-stdlib`的一部分（更多信息请访问[https://forge.puppet.com/puppetlabs/stdlib](https://forge.puppet.com/puppetlabs/stdlib)），它将缺失的行插入到现有文件中，也可以使用`regex`匹配现有行。
- en: Concat – the hammer
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Concat – 锤子
- en: We'll be building a file called `/tmp/hammer.conf` that is comprised of a header
    section and a variable number of sections provided by exported resources. This
    class was designed to be used on all machines in an infrastructure, but could
    easily be turned into a single server configuration file by splitting the exported
    resource into a separate profile from the `concat` resource and the header `concat::fragment`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个名为`/tmp/hammer.conf`的文件，该文件由一个头部部分和由导出的资源提供的可变数量的部分组成。这个类设计用来在基础设施中的所有机器上使用，但也可以通过将导出的资源与`concat`资源和头部`concat::fragment`分开，轻松转变为单个服务器配置文件。
- en: The following sample uses `puppetlabs-concat` from the Puppet Forge.(For more
    information visit [https://forge.puppet.com/puppetlabs/concat](https://forge.puppet.com/puppetlabs/concat)). The
    `concat` module allows us to declare a file, made from pieces or fragments, and
    order the creation of a single file on a system. This allows us to define one
    or more headers and footers, while leaving room for dynamic lines to be added
    into the file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用了Puppet Forge中的`puppetlabs-concat`。（更多信息请访问[https://forge.puppet.com/puppetlabs/concat](https://forge.puppet.com/puppetlabs/concat)）。`concat`模块允许我们声明一个由多个片段组成的文件，并按顺序在系统上创建该文件。这使得我们能够定义一个或多个头部和尾部，同时为动态行的添加留出空间。
- en: 'In the following example, we''re building a manifest that builds `hammer.conf`.
    The `concat` resource gives each fragment a location to build on. The hammer time
    `concat::fragment` is used to manage the header, as noted by order `01` in the
    parameters. Each machine will export a `concat` fragment detailing an FQDN, IP
    address, operating system, and version as a line in the file in order to simulate
    a global configuration file or inventory file. Finally, each machine will realize
    all of these exported fragments using the resource collector for `concat` fragments:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们正在构建一个清单来构建`hammer.conf`。`concat`资源为每个片段提供了构建的位置。`hammer time`的`concat::fragment`用于管理头部，如参数中的顺序`01`所示。每台机器将导出一个`concat`片段，详细描述FQDN、IP地址、操作系统和版本，并作为文件中的一行，以模拟一个全局配置文件或清单文件。最后，每台机器将使用`concat`片段的资源收集器实现所有这些导出的片段：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We''ll add `files::hammer` outside of any node definitions so that this inventory
    file is created on all of the machines in our infrastructure:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在任何节点定义之外添加`files::hammer`，这样这个清单文件将在我们基础设施中的所有机器上创建：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When this is run on our `mysql` node as the final node in the infrastructure,
    `/tmp/hammer.conf` is created and contains Facter facts provided by each node
    in the infrastructure:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当在我们基础设施中的`mysql`节点上运行时，作为基础设施中的最后一个节点，`/tmp/hammer.conf`文件将被创建，并包含每个节点提供的Facter
    facts：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Most configuration files should be built this way, and be holistically managed
    by Puppet. In a case where the entirety of a file is not managed, we can use `file_line`
    provided by `stdlib` in its place.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数配置文件应该以这种方式构建，并由Puppet整体管理。如果某个文件的全部内容未被管理，我们可以使用`stdlib`提供的`file_line`来代替。
- en: file_line – the scalpel
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: file_line – 手术刀
- en: In this exercise, we'll be using a Puppet file resource to build a file, but
    only if it's not already present in the system. Then, we'll use file lines to
    insert values we want into the file, which are collected from exported resources
    across all systems.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，我们将使用Puppet文件资源来构建文件，但仅在系统中尚未存在该文件时才会构建。然后，我们将使用文件行将我们想要的值插入到文件中，这些值是从所有系统的导出资源中收集的。
- en: The following sample uses `puppetlabs-stdlib` (for more information visit [https://forge.puppet.com/puppetlabs/stdlib](https://forge.puppet.com/puppetlabs/stdlib)) from
    the Puppet Forge. `stdlib` contains a large number of functions to use in manifests,
    as well as the resource `file_line`.  `file_line` allows a line to be individually
    managed inside of a file, and can also be used to provide regex matching when
    you want to use it as a find-and-replace to the unmanaged file. If targeting INI
    files, consider using `puppetlabs-inifile` instead.(For more information visit 
    [https://forge.puppet.com/puppetlabs/inifile](https://forge.puppet.com/puppetlabs/inifile)).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用了Puppet Forge中的`puppetlabs-stdlib`（更多信息请访问[https://forge.puppet.com/puppetlabs/stdlib](https://forge.puppet.com/puppetlabs/stdlib)）。`stdlib`包含了大量可以在清单中使用的函数，以及资源`file_line`。`file_line`允许单独管理文件中的一行，也可以作为查找和替换未管理文件时使用的正则表达式匹配。如果是针对INI文件，建议改用`puppetlabs-inifile`。（更多信息请访问[https://forge.puppet.com/puppetlabs/inifile](https://forge.puppet.com/puppetlabs/inifile)）。
- en: 'In this example, we will first build a file called `/tmp/scalpel.conf`. We''ll
    ensure that this file is present and has ownership by root. We will set the replace
    flag to alert Puppet not to replace the content of this file if it''s already
    present on the system, ensuring that any content already found in this file is
    not overwritten. A default will be provided by the content line if the file is
    not currently on the system. We''ll then build an exported `file_line` to simulate
    a line of configuration with a match statement to ensure that we replace misconfigured
    lines rather than create new ones. Finally, we''ll realize all of these resources
    on every node that this is classified on:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将首先创建一个名为`/tmp/scalpel.conf`的文件。我们会确保这个文件存在，并且其所有权属于root。我们将设置替换标志，告知Puppet如果该文件已经存在于系统中则不要替换其内容，从而确保文件中已有的内容不会被覆盖。如果文件当前不在系统中，内容行将提供默认值。接下来，我们将创建一个导出的`file_line`来模拟一个配置行，并使用匹配语句确保我们替换的是配置错误的行，而不是创建新行。最后，我们将在所有分类了此文件的节点上实现这些资源：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The scalpel configuration file is designed to be used on each machine in the
    infrastructure, so it is also placed outside of a node definition in the `site.pp`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: scalpel配置文件旨在在基础设施中的每台机器上使用，因此它也被放置在`site.pp`中的节点定义外：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, our node picks up the configuration change, and creates the file.
    Notice that the file is created, and then the file lines are inserted thanks to
    the require parameter we used in our exported `file_line` resource:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的节点捕捉到配置更改，并创建了文件。请注意，文件已被创建，然后通过我们在导出`file_line`资源中使用的`require`参数插入了文件行：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Unlike our `concat` example, this file remains editable outside of Puppet,
    except for the individual lines managed by the manifest. In the following sample,
    I''ve edited the file to have comments at the top and changed the `haproxy`''s
    virtual setting to false:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的`concat`示例不同，除由清单管理的单独行外，这个文件在Puppet之外仍然是可编辑的。在下面的示例中，我已将文件顶部添加了注释，并将`haproxy`的虚拟设置更改为false：
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'When the agent is run again, the `haproxy` line is corrected, but our comments
    stay at the top of the file. Users could even add their own configuration lines
    to this file, and as long as that configuration is not reported by Puppet exported
    resources, it would remain in the configuration file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理再次运行时，`haproxy`行会被修正，但我们的注释仍然保持在文件顶部。用户甚至可以向该文件添加自己的配置行，只要这些配置没有被Puppet导出的资源报告，它们就会保留在配置文件中：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This methodology does allow for a lot of configuration drift in an infrastructure.
    If your team is acting to provide controlled self-service resources, this is an
    effective way to allow your customers to modify configuration files, except for
    settings specifically managed by your infrastructure team.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法确实允许基础设施中存在大量的配置漂移。如果你的团队致力于提供受控的自服务资源，这是一个有效的方式，允许你的客户修改配置文件，前提是这些设置没有被你的基础设施团队专门管理。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we talked about virtual and exported resources. Virtual resources
    allow us to describe what a resource should be, and realize it under other conditions.
    Exported resources allow us to announce our virtual resources to other nodes in
    the infrastructure by using PuppetDB. We examined writing a virtual resource for
    administrative users and placed a file in `/tmp` for all other nodes in our infrastructure
    using exported resources. We then explored using exported resources to create
    an `/etc/hosts` file, a load balancer, a database, and an example of building
    a custom configuration file with `concat` and `file_line`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们讨论了虚拟资源和导出资源。虚拟资源允许我们描述一个资源应该是什么，并在其他条件下实现它。导出资源允许我们通过使用PuppetDB将我们的虚拟资源公布给基础设施中的其他节点。我们探讨了如何为管理用户编写虚拟资源，并为基础设施中的所有其他节点在`/tmp`目录中放置一个文件。接着我们使用导出资源创建了一个`/etc/hosts`文件，一个负载均衡器，一个数据库，以及使用`concat`和`file_line`构建自定义配置文件的示例。
- en: When we applied these exported resources across our systems, we noticed that
    the main limitation of these resources is timing. Our infrastructure will eventually
    converge, but it does not happen in an orchestrated and timely fashion. Our next
    chapter will be on application orchestration, which allows us to tie a multitier
    application together and orchestrate the order Puppet runs in on those nodes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将这些导出资源应用到我们的系统时，我们注意到这些资源的主要限制是时间。我们的基础设施最终会收敛，但它并不会以协调和及时的方式发生。我们的下一章将讨论应用程序编排，它允许我们将多层应用程序连接起来，并编排Puppet在这些节点上的运行顺序。
