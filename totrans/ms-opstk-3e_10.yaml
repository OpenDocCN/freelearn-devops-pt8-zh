- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack Hybrid Cloud – Design Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “In union there is strength.”
  prefs: []
  type: TYPE_NORMAL
- en: – Aesop
  prefs: []
  type: TYPE_NORMAL
- en: 'As organizations continue to leverage cloud technologies, there has been a
    remarkable shift in the way cloud services are consumed through different cloud
    models. Recent studies and experiences have shown an increase in the need to adopt
    a mixed approach to using managed services across multiple vendors at the same
    time. Following the **multi-cloud** track has become a top trend where enterprises
    seek the best options to accommodate their workloads in the most efficient and
    optimized ways. In the previous parts of the book, we have demonstrated the position
    of OpenStack in cloud parlance. However, for many organizations, running only
    a private cloud environment might not be sufficient to satisfy all business requirements.
    Similarly, public cloud providers offer a wider range of service layers including
    **Infrastructure as a Service** ( **IaaS** ), **Platform as a Service** ( **PaaS**
    ), and **Software as a Service** ( **SaaS** ). However, some companies may not
    consume all services publicly for specific reasons. OpenStack’s private cloud
    might be the answer to start a cloud journey but, for whatever reason, it might
    not be enough. The compromise found for several organizations is to adopt a hybrid
    approach where both public and private clouds are used. As we have a running private
    cloud based on OpenStack, this chapter will expand the OpenStack perimeter by
    going through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the hybrid cloud model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revisiting the public cloud model and multi-cloud strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a hybrid cloud strategy with OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterating through hybrid cloud design patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid cloud under scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud technologies have been immensely adopted for over a decade. When moving
    from the on-premises world, organizations seek different ways to increase agility
    by finding the best offerings based on IaaS, PaaS, and SaaS models. Besides the
    versatility of the service delivery models, the next terms that started emerging
    were the private and public clouds. Other emerging models have been adopted by
    several organizations when seeking the best cloud strategy. In IT parlance, we
    can find references to an organization being multi-cloud by using more than one
    cloud provider or by combining both public and private cloud services, which makes
    a **hybrid** **cloud environment** .
  prefs: []
  type: TYPE_NORMAL
- en: Defining the right cloud strategy depends on each organization’s needs, which
    vary based on geographic presence, security, and budget requirements. Ultimately,
    not every workload is permitted to move to the public cloud environment due to
    data compliance control, for example. In other cases, an organization will pick
    a public cloud provider to be present in more than one geographic location that
    has available resources on demand and start serving the business immediately.
    Before getting to grips with the hybrid cloud context, let’s look at the public
    cloud model.
  prefs: []
  type: TYPE_NORMAL
- en: Public cloud strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rise of cloud usage has been observed more in the public cloud world. As
    *public* means *available over the internet* , organizations just needed to access
    a self-service portal to provision infrastructure on demand and enjoy elasticity
    and infinite scalability. Major cloud providers such as **Amazon Web Services**
    ( **AWS** ), **Microsoft Azure** , and **Google Cloud Platform** ( **GCP** ) keep
    extending the number of managed services in regular cycles. Public cloud consumers
    benefit from each new managed service that reduces operational overheads and consumes
    services with less effort and even with less required expertise. A presence around
    the world is another important deal for many organizations that are active globally.
    Most of the big public cloud providers have built dozens of data centers across
    several regions worldwide, making them an attractive option to support businesses
    in different locations. Hence, developers can focus on the business logic of the
    application. They can also run experimentation at a lower cost without spending
    an immense budget upfront. The public cloud has also solved the *agility mystery*
    in which startups and medium enterprises have been struggling to afford an infrastructure
    that could provide agility. Although the term *DevOps* existed even before the
    public cloud revolution, the lack of tools and, hence, the infrastructure that
    can leverage the whole agile software life cycle has been a major barrier. Before
    the introduction of the public cloud realm, the **Infrastructure as Code** ( **IaC**
    ) concept was just a theory.
  prefs: []
  type: TYPE_NORMAL
- en: Operation teams will not spend the same time and effort on traditional administrative
    tasks but, rather, will seek better performance metrics such as latency and response
    time. Infrastructure resources available from public cloud providers are offered
    without limits to consumers. However, the underlying resources are, at some point,
    still limited. Public cloud providers regularly estimate the resource utilization
    per region, per availability zone, and even per server rack. With local teams
    actively monitoring and extending the resource pools on demand, cloud consumers
    do not need to worry about limits as they can still request more when needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, most of the public cloud vendors offer different service delivery models
    including IaaS, PaaS, and SaaS. As shown in the following figure, moving from
    left to right, more layers fall under the responsibility of the cloud provider.
    Most cloud providers aim to offer the three service delivery models that can be
    found in major hyperscale public cloud providers (IaaS, PaaS, and SaaS), but not
    all private providers cover all three. As shown in the next figure, each service
    model defines the perimeter of responsibility shared between a cloud provider
    and cloud consumers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – The responsibility boundaries of cloud service models](img/B21716_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – The responsibility boundaries of cloud service models
  prefs: []
  type: TYPE_NORMAL
- en: In a traditional on-premises environment, an organization is fully responsible
    for managing all different aspects of the workload running in its infrastructure.
    By moving to a cloud environment, the burden of management and operation is reduced
    when moving from an IaaS to a SaaS model.
  prefs: []
  type: TYPE_NORMAL
- en: We should also add the innovation aspect when choosing a cloud service provider.
    With the rise of each new trending technology, public cloud vendors rush to wrap
    a managed service and make it available for consumption. Taking the example of
    the booming **Artificial Intelligence** ( **AI** ) realm, at the time of writing
    this edition, we find that most of the big public cloud players have harnessed
    notable initiatives for AI. AWS has brought its **Bedrock** cloud service to life
    as a generative AI-specific PaaS in the cloud. Microsoft Azure has quickly run
    to partner with OpenAI, a private AI research organization, and ended up bringing
    it under the umbrella of the Azure AI Service suite. GCP built its own AI PaaS
    platform named **Vertex AI** .
  prefs: []
  type: TYPE_NORMAL
- en: 'AI-managed services in the public cloud can take different names and choosing
    a cloud provider can be a challenging decision. The answer can be simple: *it*
    *really depends!*'
  prefs: []
  type: TYPE_NORMAL
- en: That answers not only the given AI case but also, ultimately, each new similar-sounding
    service with each cloud provider. For that reason, organizations facing the *paradox
    of choices* should invest time and budget to learn about the new edge service,
    give it an experimental milestone, and conclude whether it fits with what they
    need or not.
  prefs: []
  type: TYPE_NORMAL
- en: A gazillion advantages can be noted from adopting a public cloud approach. On
    the other hand, after a few months and years of consuming public cloud services,
    organizations have started observing a few shortcomings. The adoption of the public
    cloud is based on a **pay-as-you-go** model; this is what has convinced enterprises
    that it is the right choice to reduce the costs of traditional infrastructure.
    However, if it is not carefully analyzed, it could be more expensive than planned.
    Whether a business is migrating to the cloud or is born in it, as reflected in
    the approaches to investment, building a business case and determining the **Return
    On Investment** ( **ROI** ) is a must-do practice that should be done at the start
    of the journey. A simple business case should look at the capital expenditure
    and cost when leveraging public cloud resources per workload. For example, an
    application can run on top of one or several virtual machines. A virtual machine
    that assumingly runs 100% of the time can keep a linear cost curve. If this is
    not carefully tagged and tracked from the cost point of view, operation teams
    can easily lose track of where the budget is spent. **Hyperscaler** providers
    offer transparent billing options and more granular cost breakdown views to help
    customers understand their usage. However, in most cases, optimizing workload
    spending would require some changes to its architecture and infrastructure components.
    The fear of such changes breaking things in production could discourage operators
    from taking that experimental cost optimization step. Cost in the public cloud
    world can be a major disadvantage if it is not estimated in advance. For that
    reason, a **Financial Operations** ( **FinOps** ) discipline has been created
    that aims to make financial accountability to the cloud a collective matter between
    IT, finance, and business teams. To read more about FinOps, you can check the
    official FinOps foundation website, which can be found at [https://www.finops.org/](https://www.finops.org/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: The next issue with public cloud usage is security and compliance concerns.
    When public cloud providers started exposing managed services, security teams
    brought forth questions about where and how the data was being transferred and
    stored. Although public providers have clarified their compliance certifications
    that prove their underlying infrastructure security, several organizations are
    still not comfortable spreading their data in locations other than their own data
    centers. We know that some compliance controls, such as **Sarbanes-Oxley** ( **SOX**
    ), **International Standards Organization** **(ISO** ), and so on, are well supported
    by public cloud providers. However, organizations that operate around the globe
    should have a hosting infrastructure compliant with each region that is running
    its business. Taking the example of the **General Data Protection Regulation**
    ( **GDPR** ) compliance standard within the **European Union** ( **EU** ), cloud
    providers such as AWS had to take rigorous measurements to protect data for transfer
    from the EU to non-EU countries and regions. Hence, any region other than the
    EU must also comply with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a security standpoint, cloud providers define security accountability
    as a shared model between the provider and the consumer. As highlighted in the
    following diagram, AWS defines the perimeter of security responsibilities *in*
    and *of* the cloud in its **shared** **responsibility model** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – The AWS shared responsibility model](img/B21716_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – The AWS shared responsibility model
  prefs: []
  type: TYPE_NORMAL
- en: The orange layer is where the provider defines its responsibility to secure
    the underlying infrastructure and make sure it is compliant with regional regulations.
    That covers not only security but also resiliency and service availability, which
    varies from one service to another. To read more about the *AWS Risk and Compliance*
    whitepaper, refer to the AWS Compliance web page at [https://aws.amazon.com/compliance/](https://aws.amazon.com/compliance/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: The next concerning point on the list is the lack of full control over the cloud
    infrastructure. At first glance, the preceding diagram might seem counterintuitive.
    The fact that organizations are looking for a public cloud offering is mainly
    due to running faster time to market without the need to get their hands into
    the hardware details or underlying networking devices. That can be a fair reason
    to adopt the public cloud, but what about when we need the customization of the
    underlying hardware? As that is managed only by the vendor, consumers will not
    have control over it. That might sound odd from the first reflection, but compared
    to traditional on-premises models, sometimes application teams ask for certain
    hardware combinations with granular specifications that cannot be found in the
    public cloud. Network teams, in some edge cases, could be asked to build a network
    map that is not convenient in the public cloud world. Coming from the on-premises
    world, cloud consumers might have some expectations of having a certain degree
    of control of the underlying infrastructure that is not feasible at the beginning.
    That can turn into accepting such limitations at the cost of architecting a complex
    network setup. On the other hand, some cloud providers have responded to many
    customers’ requests and provided certain ways of controlling how hardware can
    be provisioned to run specific workloads. For example, AWS offers a **dedicated
    instances** feature that allows for running a bunch of EC2 instances on hardware
    that is dedicated to a single AWS environment and isolates them from sharing the
    underlying physical machines with other instances belonging to other AWS environments.
    Although cloud providers are aware of such limits, which is the purpose of the
    **managed services model** , enterprises keep seeking the maximum number of ways
    of having control over the cloud to achieve the best results.
  prefs: []
  type: TYPE_NORMAL
- en: The last public cloud drawback point is the vendor lock-in dilemma. Protection
    from lock-in situations is a major requirement for most enterprises that seek
    to be *infrastructure-agnostic* before being *cloud-agnostic* . Moving freely
    between environments and platforms is a luxury driver for many businesses to stay
    economical with resource usage and respond to development requirements when needed.
    Lock-in can take different forms. For example, let’s say that an organization
    wishes to move its workload running on a virtual machine between different cloud
    providers or on-premises. That would require a longer time for planning and testing
    before doing such a move, such as building a private connection between the cloud
    source and the environment destination(s), building the application artifact,
    deploying it in the target environment, and testing it. The good news, thanks
    to some amazing open source initiatives, is that containerization technology has
    been a rockstar that has enabled standardized application deployment to a certain
    degree. Hence, moving between environments is a matter of connecting them with
    a shared container registry. The other vendor lock-in form is the way of managing
    the infrastructure itself. We have highlighted previously how the IaC concept
    started shining only when the public cloud went into action. As soon as more services
    and resources became overwhelming to manage, public cloud providers built the
    right managed service to codify the infrastructure. We can find, for example,
    **CloudFormation** in AWS, **Azure Deployment Manager** in Azure, and **Cloud
    Deployment Manager** in GCP. If you land in AWS and start writing code templates
    for your AWS resources, it won’t be a viable option if you later plan to use the
    same code abstract in GCP or Azure. Being cloud-agnostic when it comes to IaC
    is almost a religious matter for many enterprises. In many cases, those enterprises
    skip learning any of those resource management tools and stick to cloud-agnostic
    ones such as **Terraform** and **Pulumi** .
  prefs: []
  type: TYPE_NORMAL
- en: As this section summarizes why the public cloud matters and what can be feared
    from adopting it, the next section will show in the same way why the hybrid cloud
    model should be considered.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid cloud strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Based on several *state of the cloud* reports, numbers show the continued growth
    of public cloud services adoption. The *RightScale State of the Cloud Report*
    from *Flexera* (more recently known as *Flexera State of the Cloud Report* ) has
    been following the state of the art of cloud adoption. For more than 12 years,
    Flexera has been conducting surveys of corporate cloud users from small to large
    enterprises. A few interesting numbers are highlighted based on the survey report
    of 2019 ( [https://resources.flexera.com/web/media/documents/rightscale-2019-state-of-the-cloud-report-from-flexera.pdf](https://resources.flexera.com/web/media/documents/rightscale-2019-state-of-the-cloud-report-from-flexera.pdf)
    ), showing that organizations run more than 38% of their workloads in the public
    cloud. Meanwhile, more PaaS services are being adopted and keep skyrocketing with
    50% growth compared to the previous year. The same report shows that 38% of companies
    see the public cloud as a top priority for their IT infrastructure compared to
    the previous year’s 29%. Those numbers seem to be promoting public cloud adoption
    overall. However, we might be surprised by some findings in the same State of
    the Cloud report where enterprises expressed their will to combine public and
    private clouds for their IT usage. As per the report in 2018, 51% of companies
    were looking for a hybrid cloud strategy, which grew in the following year to
    reach 58%. This pattern might match with another *State of Cloud Adoption Report*
    conducted by Forbes in 2017 ( [https://www.forbes.com/sites/louiscolumbus/2017/04/23/2017-state-of-cloud-adoption-and-security/?sh=69d3eacd1848](https://www.forbes.com/sites/louiscolumbus/2017/04/23/2017-state-of-cloud-adoption-and-security/?sh=69d3eacd1848)
    ) showing that hybrid cloud adoption has been increasing by about three times
    compared to the previous years (increasing from 19% to 57%). The following figure
    illustrates the growth of hybrid model adoption between 2015 and 2016, taken from
    the Forbes 2017 report. We can clearly see that both public and private cloud
    adoption decreased in favor of a hybrid model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Types of cloud models used based on the Forbes State of Cloud
    Adoption Report 2017 report](img/B21716_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Types of cloud models used based on the Forbes State of Cloud
    Adoption Report 2017 report
  prefs: []
  type: TYPE_NORMAL
- en: 'Although those statistics are from seven years ago, the 2024 *Flexera State
    of the Cloud Report* ( [https://www.flexera.com/about-us/press-center/flexera-2024-state-of-the-cloud-managing-spending-top-challenge](https://www.flexera.com/about-us/press-center/flexera-2024-state-of-the-cloud-managing-spending-top-challenge)
    ) demonstrates that hybrid cloud adoption remains the most preferred option for
    several organizations. By gaining more cloud experience and with more cloud lessons,
    organizations have decided to move to a multi-cloud pattern (either with different
    public or private providers or by combining both). With each public cloud move,
    a company combines the public world with the private cloud. As shown in the latest
    report, about 73% of surveyed cloud decision-makers and cloud enthusiasts consider
    a hybrid cloud strategy for their IT infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – The results of a multi-cloud adoption survey based on the Flexera
    2024 State of the Cloud Report](img/B21716_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – The results of a multi-cloud adoption survey based on the Flexera
    2024 State of the Cloud Report
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various reasons that explain the expansion of hybrid cloud model
    usage. The best definition to get started with is how Gartner defines a hybrid
    cloud environment: *“Hybrid cloud computing refers to policy-based and coordinated
    service provisioning, use, and management across a mixture of internal and external
    cloud services”* ( [https://www.gartner.com/en/information-technology/glossary/hybrid-cloud-computing](https://www.gartner.com/en/information-technology/glossary/hybrid-cloud-computing)
    ). In a nutshell, the combination of more than one public and private cloud addresses
    the shortcomings of using only public or private clouds. We can see that hybrid
    models can satisfy what organizations could not find in the public or private
    model. Let’s iterate through some advantages brought by the adoption of the hybrid
    cloud model:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cost efficiency** : With a steady utilization of private cloud resources,
    occasional peaks can be outsourced to the public cloud, thus keeping the cost
    to a minimum. Proofs of concept and testing environments can turn out to be more
    expensive in a public cloud environment if not monitored properly. In some cases,
    developers can spawn large EC2 instances, and forgetting to terminate them after
    testing can be ultra expensive. Such scenarios are very common if cost control
    policies are not set properly. In this case, running in a private cloud can be
    less expensive and can easily be detected as resources are not infinite compared
    to resource pools in the public cloud. For workloads running on servers with periodic
    licensing renewal and maintenance efforts, the public cloud can be the right place
    to host those workloads and save maintenance costs and management overhead compared
    to the private cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Governance and compliance** : Data residency can be more flexible to meet
    regularity requirements for each workload. Not all data can be hosted in the public
    cloud, and hence, a private infrastructure environment can satisfy such restrictions
    without affecting the application’s business continuity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customizability and control** : Not having a hand in the underlying infrastructure
    can be a blocker for some workloads. Public clouds do not offer a direct way to
    dictate low-level configurations, including compute hardware and networking devices.
    Such customization can be adjusted by using private resources alongside public
    environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lock-in-free** : A multi-cloud strategy is becoming an important aspect for
    some organizations to stay flexible with the deployment of their workloads. Being
    vendor lock-in free in a hybrid model allows for moving workloads between private
    and public infrastructures without being fully committed to a specific vendor.
    Containerization has boosted the adoption of hybrid clouds due to the portability
    criteria allowing applications to run across multiple cloud providers and move
    between environments with the least amount of time and effort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Empowered resiliency** : Running workloads across dispersed infrastructures
    increases the level of redundancy. Some critical applications can run in both
    private and public environments. That would incorporate a stronger disaster recovery
    strategy if a private cloud availability zone were out of service; the public
    environment could come to the rescue by just pointing to its endpoint in a short
    period of time. Workload components can run in a *dispersed* mode in both public
    and private environments. Such a case requires a workload component, for example,
    to run in the private environment and interoperate with other components via a
    secured connection in the public cloud to leverage a managed service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increased scalability** : **Cloud bursting** is a key element of a hybrid
    architecture model. Having more options to deploy a workload with the combination
    of the private and public worlds increases agility. Organizations use cloud bursting
    to scale faster and respond to spikes when demand exceeds the private cloud capacity.
    Cloud bursting use cases will be explored in more detail later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recently, hyperscaler providers have been following the hybrid cloud adoption
    trend and offering hybrid cloud platforms as part of their managed cloud services.
    For example, AWS has launched the **AWS Outposts** service enabling cloud users
    to run AWS services locally within the organization’s perimeter. To read more
    about the AWS Outposts case, refer to the AWS official document at [https://docs.aws.amazon.com/outposts/latest/userguide/what-is-outposts.html](https://docs.aws.amazon.com/outposts/latest/userguide/what-is-outposts.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we can find the **Azure Stack** service in Azure and the **Google
    Anthos** service in GCP.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprises have realized from their public cloud experiences that a public
    cloud is not always the best bus to ride. The rise of private cloud capabilities
    such as OpenStack makes it possible to be present in both public and private clouds.
    Organizations adopting OpenStack as a private cloud solution find themselves in
    a great position to maximize the benefits of using both worlds. The modular architecture
    and its rich APIs make OpenStack a great fit to work in conjunction with the public
    cloud environment, which we will look at in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: OpenStack meeting the public world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Architecting for hybrid cloud models can be a great deal for several organizations
    seeking the aforementioned hybrid cloud benefits. If you are building a private
    cloud based on OpenStack either for internal usage or for potential customers,
    cloud operators can extend the infrastructure perimeter to combine with public
    cloud services to create valuable outcomes. In a hybrid model, it is a good method
    to create a centralized platform that manages both the private and public clouds
    acting as a single pane of glass. The platform does not need to add complexity
    to talk to different cloud providers’ APIs but simply an administration dashboard
    with proxying capabilities to route requests that span different environments.
    With an existing OpenStack environment, cloud operators can establish secured
    connections in high bandwidths between the OpenStack private cloud and each of
    the public cloud endpoints, as shown in the next diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – A generic hybrid cloud architecture](img/B21716_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – A generic hybrid cloud architecture
  prefs: []
  type: TYPE_NORMAL
- en: Combining both the OpenStack private cloud and public cloud vendors needs to
    satisfy certain conditions to make a complete hybrid cloud picture. In this case,
    a business workload should be designed to run in an OpenStack environment, in
    the public cloud, or both. The other important condition is the readiness for
    data mobility between private and public clouds. That would require a good understanding
    of when data is allowed to be stored in public or private infrastructure. Some
    other cases would require, for example, having short-lived data in the public
    cloud while keeping long-lived data in a private cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Another essential aspect to be considered when running workloads in a hybrid
    setup is the compatibility and variation between the different types of cloud.
    You might run a workload between two or more different clouds supporting multiple
    APIs of the same kind with the same technology stack. That can be less complex
    to run with easier implementation. The other variation is when different clouds
    do not support the same kind of APIs with different types of components, such
    as database engines or types of hypervisors. In this case, more tweaking is required
    to increase the degree of complexity. The good news is that OpenStack has been
    designed to leverage some of the public cloud capabilities. The secret sauce is
    its rich API exposure. As a private cloud software, OpenStack is considered a
    good choice that can power the network of private and public clouds. OpenStack
    is leveraged to manage resources for other public cloud providers such as AWS.
    For example, OpenStack supports a few drivers for AWS such as Nova for EC2, Neutron
    for VPC, and Cinder driver for EBS in AWS. Those drivers come under the **OpenStack-Omni**
    project, which can be found at [https://opendev.org/x/omni](https://opendev.org/x/omni)
    . Although this initiative is still moving at a slow pace, the OpenStack community
    is looking at integrating more capabilities to the OpenStack API to manage hybrid
    and multi-cloud environments such as GCP and Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideal cloud hybrid implementations leverage ways to centrally control different
    resources in public, private, and on-premises through a unified **Cloud Management
    Platform** ( **CMP** ). As shown in the next figure, providing an extra layer
    or tools for hybrid cloud management helps centralize the administration of workloads
    and data across any kind of infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – The capabilities of a CMP](img/B21716_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – The capabilities of a CMP
  prefs: []
  type: TYPE_NORMAL
- en: Today, more organizations are learning to develop their own CMPs for their own
    business needs or for public consumption. In the market landscape, Flexera, CloudBolt,
    OVHcloud, and Nutanix (to name a few) provide a unified platform to administer
    resources in both public and private clouds. A CMP for hybrid architectures is
    empowered by orchestration tools to operate across cloud environments. A hybrid
    management layer can be provided by a service catalog and reusable blueprints
    to provision infrastructure across all linked cloud endpoints with the maximum
    degree of automation.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud providers realize the different needs of cloud customers to design more
    services that facilitate a hybrid cloud deployment. Such services can be part
    of a CMP or run on their own to operate a workload across private and public clouds,
    as we will explore in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the hybrid cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Today, we can find a range of managed services by giant public providers that
    facilitate building hybrid architectures. AWS has been one step ahead by offering
    multiple cloud services to satisfy customers’ wishes with a hybrid model. For
    example, AWS Outposts leverages AWS resources by using the same AWS APIs and tools
    but provisioned and located at the organization’s premises. On top of Outposts,
    cloud users are offered the opportunity to run **Relational Database Service**
    ( **RDS** ) managed databases to take advantage of fully managed databases that
    scale for MySQL, Microsoft SQL Server, and PostgreSQL. To read more about RDS
    Outposts, refer to the following link: [https://aws.amazon.com/rds/outposts/](https://aws.amazon.com/rds/outposts/)'
  prefs: []
  type: TYPE_NORMAL
- en: Some amazing hybrid services have been unleashed for containers, including **Elastic
    Container Services Anywhere** ( **ECS Anywhere** ), which you can read about at
    [https://aws.amazon.com/blogs/containers/introducing-amazon-ecs-anywhere/](https://aws.amazon.com/blogs/containers/introducing-amazon-ecs-anywhere/)
    , and **Elastic Kubernetes Service Anywhere** ( **EKS Anywhere** ), which you
    can read about at [https://aws.amazon.com/eks/eks-anywhere/](https://aws.amazon.com/eks/eks-anywhere/)
    . Both hybrid container services enable cloud users to run containerized workloads
    on-premises by keeping the benefits of scalability and orchestration toolsets.
    Hybrid storage solutions have become necessary for several organizations to perform
    backup, restoration, and disaster recovery between on-premises and public environments.
    AWS provides the **AWS Storage Gateway** service for hybrid cloud storage solutions.
    More information about the AWS Storage Gateway service can be found at [https://aws.amazon.com/hybrid/services/](https://aws.amazon.com/hybrid/services/)
    . Other use cases would require an accelerated way to transfer data between private
    and public clouds. AWS has introduced the **AWS Datasync** service ( [https://aws.amazon.com/datasync/](https://aws.amazon.com/datasync/)
    ) as a hybrid storage solution.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud bursting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Choosing where to run workloads depends mainly on customer business and governance
    requirements. Some organizations might dictate in which region and cloud they
    wish to host their applications. Others might prefer to deploy their services
    on one cloud or the other, but data (including databases or big data) must reside
    in a private cloud environment or even on-premises bare metal. Anything else that
    does not include data can run on the public cloud. With this variety of requirements,
    cloud operators should find a hybrid model that can fit each workload’s needs.
    With the rich set of APIs of OpenStack, integration with the automation tools
    and external APIs of other vendors makes it easy to run as a hybrid with the least
    risk of vendor lock-in. By gaining such flexibility, growing the business application
    is no longer a concern to run in any public or private cloud environment. For
    example, let’s say that an organization develops a service that gets packed on
    a container image. The image is deployed in a private OpenStack cloud environment
    and, quickly, a global presence of the application becomes a business requirement
    with a larger audience. That is where bursting comes into play. The workload would
    burst into a public cloud by using its resources in the nearest requested region.
    With the right design, cloud architects should be able to make any application
    live in both worlds and take advantage of the hybrid model capabilities without
    being locked into one model. Cloud bursting is a very common use case of a hybrid
    cloud, and is even considered a hybrid feature in other literature. As shown in
    the following diagram, cloud bursting leverages the utilization of the hybrid
    cloud infrastructures to more rapidly process sudden increases in requests and
    spikes in traffic for an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Cloud bursting for the hybrid cloud use case](img/B21716_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Cloud bursting for the hybrid cloud use case
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, a company predicts its private cloud infrastructure utilization
    and responds to additional load by spreading it to public cloud resources. Cloud
    bursting is essentially a dynamic deployment of workloads to increase elasticity
    and scalability in peak times once the private cloud resource demand becomes overwhelming.
    The common pattern of cloud bursting is that companies rely primarily on their
    private cloud resources and enable bursting only during traffic spikes to accommodate
    the additional load. Once the sudden surge of the workload spike is over, public
    cloud resources are terminated and the application keeps running only in the private
    cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: Security in the hybrid cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security *in* and *of* the cloud are two aspects that do not differ between
    the private and public clouds. In a hybrid model, cloud operators would review
    what is offered from a security standpoint. To a certain extent, security in a
    hybrid model can be enforced more when leveraging the private part, but additional
    threats can be observed with insecure API endpoints, data leaks, or missing encryption
    at rest and in transit. In the OpenStack world, cloud operators should think of
    the security *of* the private cloud, whereas security *in* the cloud is the task
    of the user. Following a security discipline would not differ from pure private
    or public clouds when dealing with a hybrid cloud environment. Starting with the
    principle of **zero-trust** , cloud architects should take security as a core
    principle at the earliest stage when designing a hybrid environment, in the same
    way as building a private cloud. In a hybrid setup, more components are involved
    in the security configuration. Based on a zero-trust approach, any entity of the
    architecture is considered a threat by default, including user access, workloads,
    data, network devices, and traffic. If you have ensured that your private cloud
    based on OpenStack is following the same approach, you would just need to combine
    the security boundaries of the cloud provider and shared responsibilities. The
    good news is that most hyperscaler providers have defined a shared responsibility
    model. Boundary responsibilities should be clarified at the start of the hybrid
    cloud journey. For example, if a user is looking at a SaaS solution that is not
    supported by the private OpenStack cloud, the security responsibility is shifted
    to the target public cloud provider. Several entities are engaged when defining
    a shared responsibility based on a hybrid cloud setup, including hardware, storage,
    encryption, physical network, guest operating system, network and platform security,
    data location, user authentication, and authorization, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will take an iterative approach to demonstrate
    different entities involved in establishing security patterns around a workload
    running in a hybrid cloud environment. That includes the use case of scaling an
    application running on Kubernetes between an OpenStack environment and a public
    cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Governance first
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data protection is one of the major motivators that encourage organizations
    to adopt a hybrid environment setup. Businesses and decision-makers define the
    rules of data privacy requirements and cloud users are responsible for adhering
    to them. Cloud providers should comply with defined rules of data protection,
    which will vary from one region to another. Taking the example of GDPR rules,
    the hybrid cloud should provide the insurance of data protection within the EU,
    including data privacy, residency, and retention. In a hybrid world, a mix of
    a private cloud based on OpenStack and a public cloud should be aligned with the
    following shortened list of requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Transparently define an extended version of the shared responsibility model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document different aspects of security configuration within the hybrid environment.
    This includes how private and public clouds are connected and how data is transmitted
    and stored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide ways for users to access and leverage best practices using access policies,
    the least privilege principle, and encryption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define data life cycle standards and measurements of data classification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ultimately, workloads hosted in a hybrid cloud should not stick to a single
    compliance requirement but rather to several due to the mixed nature of such a
    public and private combination. Such a process can be error-prone if not all governance
    measures are checked before starting to receive workloads. For this matter, it
    is essential to spend a good time establishing a well-secured platform between
    both private and public clouds. A containerized application can be easier to deploy
    across private and public clouds. We have covered the maturity of the OpenStack
    ecosystem when dealing with containers in previous chapters. For example, spreading
    a containerized application across an OpenStack private cloud and a public cloud
    environment should prompt the following governance and compliance considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: How and where will my Kubernetes cluster be running in the short and long term?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will any data be stored in the private and public clouds?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the hybrid cloud control access to my Kubernetes cluster and hence
    the applications running on top of it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the hybrid cloud provide a single pane of glass for monitoring and logging
    my application?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there a standard incident management process to report security issues when
    data leakage or unauthorized access happens?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance and governance in the hybrid world can be more complex to establish
    as each workload would present different compliance requirements. Standardizing
    the rules defined for the cloud infrastructure can reduce such complexity but
    requires a deep understanding of analyzing the perimeter of responsibility of
    each public cloud provider. From a private cloud perspective running OpenStack,
    you should have already a greater view of all pieces of the security puzzle when
    designing the private cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Network security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Networking is usually the next discussed point for a cloud consumer to deploy
    a workload in the cloud of any type. The public cloud provides gazillions of ways
    to design networks for workloads and it is down to the cloud user to define the
    network perimeter. If the application is made to be publicly accessible, cloud
    users would leverage internet gateways or appliances to expose the application
    in its virtual network. Hybrid environments will be required to provide the maximum
    degree of flexibility for networking options. As we have seen in the OpenStack
    world, the underlying infrastructure includes not only the physical routers and
    switches but also an overlay network layer on top of the physical network infrastructure
    (software-defined networks). With both network layers (physical and overlay) being
    virtual, private cloud operators should consider ways of segmenting networks while
    keeping full control. The underlying network security layer that is not visible
    to cloud users must exist before hosting any workload. That can be achieved by
    leveraging firewalls or by putting web application firewalls in place to protect
    against DDoS threats. Similarly, public cloud providers ensure (based on the shared
    responsibility model) a certain level of network security, including hardware
    and traffic management. Traffic circulating within the public provider backbone
    is considered trusted, but it is down to the cloud users to define how the application
    will be isolated or made public. Either way, network services are provided to
    control the type of traffic within its network boundary or in wider exposure.
    If you are scaling an application between a private and public cloud, a variety
    of network security mechanisms must exist, which can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure traffic reaching any cloud-type endpoint that supports the **Transport
    Layer Security** ( **TLS** ) protocol (v2 and v3).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure application containers are deployed and encrypted at rest.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide secure mechanisms to protect applications publicly accessible via load
    balancers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce application security by leveraging **Web Application Firewall** ( **WAF**
    ) solutions that can protect applications across several cloud environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a layered network architecture by segmenting an application network
    to run in different subnets for each layer. Dispersed environments (public and
    private) can be configured to use a private address space (RFC 1918). That way,
    different parts of the application can still reach each other while being contained
    in isolated networks, reducing the risk of public exposure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build private connections between different cloud environments. This is an extension
    of the previous point whereby an application can reach any cloud in the hybrid
    environment through a private connection without traversing the internet. Taking
    the example of a Kubernetes cluster, pods in an OpenStack environment can reach
    other pods of the same cluster context in AWS via a private connection such as
    **DirectConnect** or a **VPN** . Cloud operators would need to define the different
    routes to reach each of the cloud endpoints so the application components’ interconnectivity
    stays private even across different cloud environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid clouds can be designed to use different types of connections and network
    implementations. Looking at the network security aspect requires solid preparation
    for securing endpoints for both private and public clouds. The private part would
    require more hardening as a cloud operator has a full hand on the network infrastructure.
    In our case, securing the API endpoints in each service in the OpenStack private
    cloud is a must. The OpenStack community provides an updated version of a security
    guide upon each new release that is worth visiting. The API endpoint security
    guide can be found at [https://docs.openstack.org/security-guide/api-endpoints/api-endpoint-configuration-recommendations.html](https://docs.openstack.org/security-guide/api-endpoints/api-endpoint-configuration-recommendations.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Hardening operation security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The nature of the dispersed architecture of an application across different
    cloud infrastructures can be a challenge when it comes to its operation. Taking
    advantage of cloud bursting in a hybrid setup comes with the price of the definition
    of operation security responsibilities. By inheriting the practices of the **DevSecOps**
    mantra, the operation complexity in a hybrid environment can be much more simplified.
    We have dedicated the second chapter in this edition to illustrating how DevSecOps
    is an essential style to automate security in the operation of an OpenStack infrastructure.
    We will just need to apply the same approach when dealing with workloads that
    are spread across several infrastructures. The use case of an application running
    in a Kubernetes cluster in a hybrid cloud setup would require the following additional
    checks to operate in the most secure way:'
  prefs: []
  type: TYPE_NORMAL
- en: Use CI/CD pipelines to automate image scans of vulnerabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dry run tests to detect and alert of any potential security gaps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a container image registry that is only accessible privately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the image registry available to public or private cloud endpoints only
    via private connections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Harden and automate the creation of container images in regular cycles and share
    only stable and well-tested versions with the rest of the cloud endpoints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy application container images from one single CI/CD pipeline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a logging pipeline to collect logs across different infrastructures.
    This can be achieved in a centralized way by pulling network flows, application
    logs, and firewall logs for potential issues analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure monitoring and metrics to report centrally on security issues for
    each cloud infrastructure endpoint.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security in a hybrid model can be a lot more complex since having data flowing
    in all different infrastructures requires additional controls. Data handling should
    be carefully performed as improper data movement can raise major data leakages
    that are not easy to recover. The other challenge of hybrid implementation is
    the complexity of access management. Users will need to be authenticated and authorized
    in a flexible way that grants access across multiple infrastructures. Using **Identity
    and Access Management** ( **IAM** ) coupled with single sign-on tools can help
    to remediate access complexity challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter exposed the hybrid cloud novelty. Beyond the OpenStack private
    cloud capacity, there is always an opportunity to reach public cloud environments
    and construct a hybrid environment, as we learned in this chapter. The latter
    model keeps expanding as a new cloud style as enterprises have felt the necessity
    to have combined cloud modes to enjoy each type of cloud’s benefits. We learned
    that recent cloud experiences have shown that a multi-cloud strategy is still
    not enough to fill cost gaps in addition to compliance concerns. The increase
    of the hybrid model dominance has been accompanied by more additional OpenStack
    private cloud implementations. Gaining skills to build and manage an OpenStack
    private cloud is one of the cornerstones to moving to a hybrid model, which is
    why we focused on this in this chapter. Furthermore, we learned that OpenStack
    provides various cloud capabilities and, thanks to its rich APIs, our private
    cloud can integrate well into a hybrid cloud model.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will demonstrate how building a private cloud environment
    based on OpenStack will ensure a successful hybrid cloud experience in which OpenStack
    keeps shining.
  prefs: []
  type: TYPE_NORMAL
