- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Discovery for Automatic Creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is going to be all about making sure that you as a Zabbix administrator
    are doing as little work as possible on host and item creation. We are going to
    learn how to perform (or perfect, maybe) automatic host, item trigger, and graph
    creation. Check out the recipes featured here to see just what we are going to
    discover.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will first learn how to set up Zabbix network discovery
    with Zabbix agent and **Simple Network Management Protocol** (**SNMP**). We will
    then set up active agent autoregistration. Later, we will also cover the automatic
    creation of Windows performance counters, **Java Management Extensions** (**JMX**),
    and SNMP items using **low-level** **discovery** (**LLD**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Zabbix agent host discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Zabbix SNMP network discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating host creation with active agent autoregistration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Windows performance counter discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering JMX objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Zabbix SNMP discovery the new way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating hosts with LLD and custom JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this chapter is all about host and item discovery, besides our Zabbix server,
    we will need one new Linux host and a Windows host. Both these hosts will need
    Zabbix agent 2 installed, but not configured just yet.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we are going to need our JMX host, as configured in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*, and a new host with SNMP set up. To learn more
    about setting up an SNMP-monitored host, check out the *Working with SNMP monitoring
    the old way* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up* *Zabbix Monitoring*.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Zabbix agent network discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of Zabbix administrators use Zabbix agent extensively and thus spend a
    lot of time creating Zabbix agent hosts by hand. Maybe they don’t know how to
    set up Zabbix agent discovery, maybe they didn’t have time to set it up yet, or
    maybe they just prefer it this way. If you are ready to get started with Zabbix
    agent discovery, in this recipe we will learn just how easy it is to set it up.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides our Zabbix server, in this chapter’s introduction, I mentioned that
    we will need two (empty) hosts with Zabbix agent 2 installed: one Windows host
    and one Linux host. If you don’t know how to install Zabbix agent 2, check out
    [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting Up Zabbix
    Monitoring*, or see the Zabbix documentation at [https://www.zabbix.com/documentation/current/en/manual/concepts/agent2](https://www.zabbix.com/documentation/current/en/manual/concepts/agent2).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s give the servers the following hostnames:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lar-book-disc-lnx**: For the Linux host (use Zabbix agent 2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lar-book-disc-win**: For the Windows host (use Zabbix agent 2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started by logging in to our **lar-book-disc-lnx** Linux host and
    editing the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, make sure your Zabbix agent 2 configuration file contains at least the
    following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For your Windows Zabbix agent, it’s important to do the same. Edit the following
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, change the hostname by editing the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next up, in our Zabbix frontend, navigate to **Data collection** | **Discovery**,
    and on this page, we click on **Create discovery rule** to create a rule with
    the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Discovery rules page for Zabbix agent hosts](img/B19803_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Discovery rules page for Zabbix agent hosts
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We are using an update interval of **5** minutes in this example. As this might
    take up a lot of resources on your server, make sure to adjust this value for
    your production environment. For example, one hour might be a better production
    value to make sure we put less load onto our Zabbix processes. Depending on the
    size of the IP range we are scanning and how fast you want to discover things,
    we can adjust this value.
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to move on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After setting up the discovery rule, we will also need to set up an action
    to actually create the host with the right template. Navigate to **Alerts** |
    **Actions** | **Discovery actions**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Alerts | Actions | Discovery actions](img/B19803_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Alerts | Actions | Discovery actions
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will click the **Create action** button in the top-right corner and
    fill out the next page with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – The discovery action creation page for Zabbix agent hosts](img/B19803_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – The discovery action creation page for Zabbix agent hosts
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When creating Zabbix actions, it’s important to keep the order of creation for
    **Conditions** in mind. The labels seen in the preceding screenshot will be added
    in order of creation. This means that it’s easier to keep track of your Zabbix
    actions if you keep the order of creation the same for all actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, click the **Operations** tab. This is where we will add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – The Operations page for Zabbix agent hosts](img/B19803_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – The Operations page for Zabbix agent hosts
  prefs: []
  type: TYPE_NORMAL
- en: That’s it for the Linux agent. Click the blue **Add** button, and let’s continue
    with our Windows discovery rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **Data collection** | **Host groups**. Create a host group for
    our Windows hosts by clicking **Create host group** in the top-right corner and
    filling out the group name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The Create host group page for Windows server hosts](img/B19803_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – The Create host group page for Windows server hosts
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button and navigate to **Alerts** | **Actions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Discovery actions** again and click **Create action**. We will fill
    out the same thing but for our Windows hosts this time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Discovery action creation page for Windows Zabbix agents](img/B19803_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Discovery action creation page for Windows Zabbix agents
  prefs: []
  type: TYPE_NORMAL
- en: 'Before clicking **Add**, let’s also fill out the **Operations** page with the
    operations shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – The Operations page for Windows Zabbix agents](img/B19803_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – The Operations page for Windows Zabbix agents
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can click the blue **Add** button, and our second discovery action is
    present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move on to **Monitoring** | **Discovery**. This is where we can see whether
    and when our hosts are discovered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – The Monitoring | Discovery page](img/B19803_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – The Monitoring | Discovery page
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Monitoring** | **Discovery** page to keep a close eye on the hosts
    you expect to show up in your Zabbix setup. It’s very useful to track new hosts
    coming in and see which Zabbix discovery rule was used to create the host.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Network discovery might not be very hard to set up initially, but there are
    loads of options to configure. For this example, we chose to use the `agent.hostname`
    key as our check. We create the Zabbix hostname based on what’s configured in
    the Zabbix agent configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens is that Zabbix network discovery finds our hosts and performs
    our check. In this case, the check is *What is the hostname used by Zabbix agent?*
    This information, plus our IP address, is then triggering the action. Our action
    then performs our configured checks:'
  prefs: []
  type: TYPE_NORMAL
- en: Does the hostname contain **lnx** or **win**?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the discovery status **UP**?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the service type **Zabbix Agent**?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If all of those checks are true, our action will then create our newly discovered
    host with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Our configured host group plus the default **Discovered hosts** host group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our template as configured in our action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will end up with two newly created hosts, with all the right settings:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.9 – The Data collection | Hosts page with our new hosts, Windows\
    \ and Linu\uFEFF\uFEFFx](img/B19803_07_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – The Data collection | Hosts page with our new hosts, Windows and
    Linux
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating the host by using the configuration file settings isn’t always the
    right way to go, but it’s a solid start to working with network discovery.
  prefs: []
  type: TYPE_NORMAL
- en: If you want a more flexible environment where you don’t have to even touch the
    Zabbix agent configuration file, then you might want to use different checks on
    the discovery rule. Check out which keys we can use to build different discovery
    rules in the Zabbix documentation at [https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent](https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent).
  prefs: []
  type: TYPE_NORMAL
- en: Working with Zabbix SNMP network discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you work with a lot of SNMP devices but don’t always want to set up monitoring
    manually, network discovery is the way to go. Zabbix network discovery uses the
    same functionality as Zabbix agent discovery but with a different configuration
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with network discovery, we are going to need a host that we can
    monitor with SNMP. If you don’t know how to set up a host such as this, check
    out the *Working with SNMP monitoring the old way* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*. We’ll also need our Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, log in to your new SNMP-monitored host and change the hostname to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, restart the SNMP daemon using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, navigate to **Data collection** | **Discovery** and click on **Create discovery
    rule** in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to create a new SNMP discovery rule, with an SNMP **object identifier**
    (**OID**) check type. Fill out the **Name** and **IP range** fields first, like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Data collection | Discovery, discovery rule creation page for
    SNMPv2](img/B19803_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Data collection | Discovery, discovery rule creation page for
    SNMPv2
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to fill out your own IP range in the **IP** **range** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we are going to create our SNMP check. Click on **Add** next to **Checks**,
    and you’ll see the following pop-up screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Data collection | Discovery, discovery check creation pop-up
    window](img/B19803_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Data collection | Discovery, discovery check creation pop-up window
  prefs: []
  type: TYPE_NORMAL
- en: 'We want **Check type** to be **SNMPv2 agent** and we want to fill it with our
    community and a useful OID, which in this case will be the OID for the system
    name. Fill it out like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Data collection | Discovery, discovery check creation pop-up
    window filled with an SNMPv2 check](img/B19803_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Data collection | Discovery, discovery check creation pop-up window
    filled with an SNMPv2 check
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Please note that our check type is *not* SNMP version independent. We have three
    SNMP versions and thus three different check types to choose from, unlike our
    new SNMP interface selection on the Zabbix 7 host screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking **Add** again, fill out the rest of the page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.13 – The Data collection | Discovery page for SNMPv2 agents](img/B19803_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – The Data collection | Discovery page for SNMPv2 agents
  prefs: []
  type: TYPE_NORMAL
- en: Last, but not least, click the **Add** button at the bottom of the page. This
    concludes creating our Zabbix discovery rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will also need an action for creating our hosts from the discovery rule.
    Navigate to **Alerts** | **Actions**, and after using the dropdown to select **Discovery
    actions**, click on **Create action**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will fill out the page with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Alerts | Actions, action creation page for SNMPv2 agents](img/B19803_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Alerts | Actions, action creation page for SNMPv2 agents
  prefs: []
  type: TYPE_NORMAL
- en: 'Before clicking **Add**, navigate to **Operations** and fill out this page
    with the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Alerts | Actions, the action creation Operations tab for SNMPv2
    agents](img/B19803_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Alerts | Actions, the action creation Operations tab for SNMPv2
    agents
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click **Add** and navigate to **Monitoring** | **Discovery** to see whether
    our host gets created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.16 – The Monitoring | Discovery page for SNMPv2 agen\uFEFF\uFEFF\
    ts](img/B19803_07_16.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – The Monitoring | Discovery page for SNMPv2 agents
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we’ve created another discovery rule, but this time for SNMP.
    As you’ve noticed, the principle remains the same, but the application is a bit
    different.
  prefs: []
  type: TYPE_NORMAL
- en: When we created this Zabbix discovery rule, we gave it two checks instead of
    the one check we did in the previous recipe. We created one check on the `.1.3.6.1.2.1.1.5.0`
    SNMP OID to retrieve the hostname of the device through SNMP. We then put the
    hostname retrieved from the system into Zabbix as the Zabbix hostname of the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also created a check on the `.1.3.6.1.2.1.25.1.4.0` SNMP OID. This check
    will retrieve the following string, if present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If the string is present, it means that the boot image is Linux on this host.
    This is a perfect example of how we can retrieve multiple OIDs to do multiple
    checks in our Zabbix discovery rules. If we’d been monitoring a networking device,
    for instance, we could have picked an OID to see whether it was a Cisco or a Juniper
    device. We would replace `.1.3.6.1.2.1.25.1.4.0` with any OID and poll it. Then,
    we would create our action based on what we received (Juniper or Cisco) and add
    our templates accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: General knowledge of SNMP structure is very important when creating Zabbix discovery
    rules. We want to make sure we use the right SNMP OIDs as checks. Make sure to
    do your research well, utilize SNMP walks, and plan out what OIDs you want to
    use to discover SNMP agents. This way, you’ll end up with a solid monitoring infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Automating host creation with active agent autoregistration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using discovery to set up your Zabbix agents is a very useful method to automate
    your host creation. But what if we want to be even more upfront with our environment
    and automate further? That’s when we use a Zabbix feature called **active** **agent
    autoregistration**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need a new Linux host. We will call this host `lar-book-lnx-agent-auto`.
    Make sure to install Zabbix agent 2 on this host. Besides this new host, we’ll
    also need our Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by logging in to our new **lar-book-lnx-agent-auto** host and changing
    the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will then edit the following line in the file. Make sure to enter your Zabbix
    server IP on this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also change the following line in the file if we want to set our hostname
    in the file manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is not a requirement though, as Zabbix agent will use the system hostname
    if it is not filled out.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next up, we will navigate to our Zabbix frontend, where we’ll go to **Alerts**
    | **Actions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the drop-down menu to go to **Autoregistration actions**, as in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.17 – The Alerts | Actions page drop-down menu](img/B19803_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – The Alerts | Actions page drop-down menu
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will click the blue **Create action** button in the top-right corner
    to create a new action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the **Name** field and then click on the **Add** text link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Alerts | Actions, create new action page](img/B19803_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – Alerts | Actions, create new action page
  prefs: []
  type: TYPE_NORMAL
- en: 'We can set up a condition here to only register hosts with a certain hostname.
    Let’s do this by filling out the window like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Create action | New condition for the lar-book-lnx host](img/B19803_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – Create action | New condition for the lar-book-lnx host
  prefs: []
  type: TYPE_NORMAL
- en: 'Your page should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20 – The Create action page, filled with our information for the
    lar-book-lnx host](img/B19803_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – The Create action page, filled with our information for the lar-book-lnx
    host
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: We can set up conditions for different types of hosts. For instance, if we want
    to add Windows hosts, we set up a new action with a different hostname filter.
    This way, it is easy to maintain the right groups and templates, even with autoregistration.
  prefs: []
  type: TYPE_NORMAL
- en: Before clicking the blue **Add** button, let’s go to the **Operations** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add** text link, and you will see the following window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.21 – The Send message operation for the lar-book-lnx host](img/B19803_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – The Send message operation for the lar-book-lnx host
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an action to add the host to the **Linux servers** host group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.22 – The Add to host group operation creatio\uFEFFn](img/B19803_07_22.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – The Add to host group operation creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an action to add the host to the **Linux by Zabbix agent** **active**
    template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.23 – The Link to template operation creation](img/B19803_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23 – The Link to template operation creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Your finalized **Operations** page should now look like this, and we can click
    the blue **Add** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.24 – The Operations page, filled with our information](img/B19803_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – The Operations page, filled with our information
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Data collection** | **Hosts**, and we can see our new active
    autoregistered host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.25 – The Data collection | Hosts page with host lar-book-lnx-age\uFEFF\
    \uFEFFnt-auto](img/B19803_07_25.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – The Data collection | Hosts page with host lar-book-lnx-agent-auto
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Active agent autoregistration is a solid method to let a host register itself.
    Once the `ServerActive=` line is set up with the Zabbix server or proxy IP, the
    host agent will start requesting configuration data from the Zabbix server or
    Proxy. The Zabbix server will receive these requests, and if there is an action
    set up in Zabbix (as we just did in this recipe), the host autoregisters to Zabbix:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.26 – Host autoregistration proces\uFEFFs](img/B19803_07_26.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.26 – Host autoregistration process
  prefs: []
  type: TYPE_NORMAL
- en: We can do a bunch of cool automation with this functionality. We could create
    a script to fill up our Zabbix agent configuration file with the right `ServerActive=`
    line on our hosts in a certain IP pool.
  prefs: []
  type: TYPE_NORMAL
- en: It would also be super easy to set up new hosts with Ansible. We can automate
    the Zabbix agent installation with Ansible and we can add the `ServerActive=`
    line in the `/etc/zabbix/zabbix_agent2.conf` file using Ansible as well. Our Zabbix
    server autoregistration action will take care of the rest from here.
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix agent autoregistration is a perfect way to get a zero-touch monitoring
    environment that’s always up to date with our latest new hosts.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not every company uses hostnames that reflect the machine’s OS or other attributes.
    This is when Zabbix `HostMetadata` can come in very useful. We can add this field
    to the active Zabbix agent configuration to reflect the attributes of the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Afterward, we can use `HostMetadata` in our Zabbix discovery action to do the
    same kind of filtering we did on the hostname.
  prefs: []
  type: TYPE_NORMAL
- en: We also have the `HostInterface` and `HostInterfaceItem` parameters in the Zabbix
    agent configuration file, which are used for autoregistration. The host will use
    the specified IP or DNS name as its Zabbix agent interface IP or DNS, as seen
    in the Zabbix frontend. We can also use this functionality to enable passive agent
    monitoring while using autoregistration to create the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out this link for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: "[https://www.zabbix.com/documentation/current/manual/discovery/auto_registration#using_host_metadata](https://www.zabbix.com/documentation/current/manual/discovery/auto_registration#using_hos\uFEFF\
    \uFEFFt_metadata)"
  prefs: []
  type: TYPE_NORMAL
- en: Using Windows performance counter discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Zabbix 7, it is possible to discover Windows performance counters. In this
    recipe, we will go over the process of discovering Windows performance counters
    to use in our environments.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering Windows performance counters might seem to be a little tricky at
    first, as it uses both Windows- and Zabbix-specific concepts. However, once we
    finish this recipe, you’ll know exactly how to set it up.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we added the `lar-book-disc-win` host to our setup, which is
    the host used in our Zabbix agent discovery process. We can reuse this host to
    discover Windows performance counters easily.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, we’ll also need our Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start by navigating to **Data collection** | **Templates** and creating
    a new template by clicking **Create template** in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.27 – The Windows performance by Zabbix agent template creatio\uFEFF\
    n](img/B19803_07_27.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.27 – The Windows performance by Zabbix agent template creation
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Add** button, which will bring you back to **Data collection**
    | **Templates**. Select the new template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, before continuing with our template, navigate to your Windows frontend
    and open **perfmon.exe**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.28 – Windows search bar – perfmon.exe](img/B19803_07_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.28 – Windows search bar – perfmon.exe
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing so will open the following window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.29 – Windows perfmon\uFEFF.exe](img/B19803_07_29.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.29 – Windows perfmon.exe
  prefs: []
  type: TYPE_NORMAL
- en: Let’s click on **Performance Monitor** and then on the green **+** icon. This
    will show you all the available Windows performance counters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s start by using the **Processor** counter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the **Data collection** | **Templates** page in Zabbix and edit our
    new **Windows performance by Zabbix** **agent** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are at the **Edit template** page, click on **Discovery rules** in
    the bar next to your template name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Create new discovery rule** in the top-right corner and add the
    following rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.30 – Create an LLD rule page – Discover counter Processor](img/B19803_07_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.30 – Create an LLD rule page – Discover counter Processor
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We are using an update interval of **1** minute in this example. As this might
    take up a lot of resources on your server, make sure to adjust this value to your
    production environment. For example, one hour is a much better production value.
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button at the bottom and click our new **Discover counter
    Processor** discovery rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Item prototypes**, and in the top-right corner click on **Create
    item prototype**. We will then create the following item prototype:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.31 – The CPU instance C1 time item prototype c\uFEFFreation](img/B19803_07_31.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.31 – The CPU instance C1 time item prototype creation
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, do not forget to add some new tags as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.32 – The Tags tab](img/B19803_07_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.32 – The Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Save the new **Item prototype**, go to **Data collection** | **Hosts**, and
    click on **lar-book-disc-win**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add our **Windows performance by Zabbix** **agent** template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.33 – Add Windows performance by Zabbix agent template to lar-book-disc-\uFEFF\
    win](img/B19803_07_33.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.33 – Add Windows performance by Zabbix agent template to lar-book-disc-win
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on the blue **Update** button, we can navigate to **Monitoring**
    | **Latest data**. Add the following filters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.34 – Latest data filter on host lar-book-disc-win](img/B19803_07_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.34 – Latest data filter on host lar-book-disc-win
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now see our three newly created items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.35 – The Monitoring | Latest data page for our host lar-book-\uFEFF\
    \uFEFFdisc-win](img/B19803_07_35.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.35 – The Monitoring | Latest data page for our host lar-book-disc-win
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows performance counters have been around for a long time and they are very
    important to anyone who wants to monitor Windows machines with Zabbix. Using LLD
    in combination with Windows performance counters makes it a lot easier and more
    flexible to build solid Windows monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we created a very simple but effective Windows performance
    counter discovery rule by adding the discovery rule with the `perf_instance.discovery[Processor]`
    item key. The `[Processor]` part of this item key directly correlates to the `perfmon.exe`
    window we saw. If we look at the following screenshot, we already see **Processor**
    listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.36 – perfmon.exe | Add Counters – Processor](img/B19803_07_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.36 – perfmon.exe | Add Counters – Processor
  prefs: []
  type: TYPE_NORMAL
- en: 'When our discovery rule polls this item key, Zabbix agent will return the following
    value for our host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This value means that Zabbix will fill the `{#INSTANCE}` macro with three values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**0**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**_Total**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can then use these three values by using the `{#INSTANCE}` macro in **Item
    prototype**, as we did here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.37 – Our created item prototype, CPU C1 time](img/B19803_07_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.37 – Our created item prototype, CPU C1 time
  prefs: []
  type: TYPE_NORMAL
- en: 'It will then create three items with our macro values, with the right keys
    to monitor the second part of our counter – `% C1 time`. If you expand the window
    in your `perfmon.exe` file, you can see all the different counters we could add
    to our item prototypes to monitor more Windows performance counters:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.38 – Perfmon.exe | Add Counters – Processor e\uFEFF\uFEFFxpanded](img/B19803_07_38.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.38 – Perfmon.exe | Add Counters – Processor expanded
  prefs: []
  type: TYPE_NORMAL
- en: Discovering JMX objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting Up Zabbix
    Monitoring*, we went over setting up JMX monitoring in the recipe titled *Setting
    up JMX monitoring*. What we didn’t cover yet though was discovering JMX objects.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will go over how to set up JMX objects with LLD, and after
    you’ve finished this recipe, you’ll know just how to set it up.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need the JMX host that you set up for the *Setting
    up JMX monitoring* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*. Make sure to finish that recipe before working
    on this one.
  prefs: []
  type: TYPE_NORMAL
- en: We will also need our Zabbix server with our Zabbix JMX host titled `lar-book-jmx`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start this recipe off by logging in to our Zabbix frontend and navigating
    to **Data collection** | **Templates**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new template by clicking on **Create template** in the top-right corner.
    Fill in the following fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.39 – The App Apache Tomcat JMX discovery template creation](img/B19803_07_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.39 – The App Apache Tomcat JMX discovery template creation
  prefs: []
  type: TYPE_NORMAL
- en: After clicking the blue **Add** button, you will be taken back to **Data collection**
    | **Templates**. Click on your new **App Apache Tomcat JMX** **discovery** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now add our JMX discovery rule. Click on **Discovery rules** next to
    our template name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click on **Create discovery rule** and fill in the following fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.40 – The Discover JMX object MemoryPool discovery rule creation](img/B19803_07_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.40 – The Discover JMX object MemoryPool discovery rule creation
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Add** button at the bottom of the page. Then, click on **Item
    prototypes** next to your newly created **Discover JMX object MemoryPool** discovery
    rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now click on the **Create item prototype** button in the top-right
    corner and create the following item prototype:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.41 – The Item prototype creation page – MemoryPool Memory type](img/B19803_07_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.41 – The Item prototype creation page – MemoryPool Memory type
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, make sure that on the **Tags** tab, you add a new tag with the name of
    **component** and a value of **memory pool**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.42 – The Tags tab – the MemoryPool Memory type](img/B19803_07_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.42 – The Tags tab – the MemoryPool Memory type
  prefs: []
  type: TYPE_NORMAL
- en: Let’s click on the blue **Add** button and move on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Data collection** | **Hosts** and click on **lar-book-jmx**. We will
    add our template to this host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Templates** and add the template, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.43 – Data collection | Host – add a template to the lar-book-jmx
    host](img/B19803_07_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.43 – Data collection | Host – add a template to the lar-book-jmx host
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we navigate to **Monitoring** | **Latest data** now, we will select **lar-book-jmx**
    for **Hosts** and **component** for **Tags** with **memory pool** as its value,
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.44 – The Monitoring | Latest data page filters – the lar-book-jmx
    host](img/B19803_07_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.44 – The Monitoring | Latest data page filters – the lar-book-jmx host
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then see the following results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.45 – The Monitoring | Latest data page for the lar-book-jmx host\
    \ with our re\uFEFF\uFEFFsults](img/B19803_07_45.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.45 – The Monitoring | Latest data page for the lar-book-jmx host with
    our results
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Monitoring JMX applications can be quite daunting at first, as there is a lot
    of work to figure out while building your own LLD rules. But now that you’ve built
    your first LLD rule for JMX, there is a clear structure in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, for our discovery rule, we’ve picked the item key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`MemoryPool` is what we call an **MBean** in Java. We poll this MBean object
    for several JMX objects and fill the macros accordingly.'
  prefs: []
  type: TYPE_NORMAL
- en: We picked the `name=*` object to fill the `{#JMXNAME}` macro in this discovery
    rule. Our macro is then used in our item prototype to create our items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our items are then created, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.46 – Items on our JMX-monitored host](img/B19803_07_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.46 – Items on our JMX-monitored host
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the keys of the items, we can see that we poll the `Type` JMX
    attribute on every `MemoryPool` with different names.
  prefs: []
  type: TYPE_NORMAL
- en: That’s how we create JMX LLD rules with ease.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are not familiar with MBeans, then make sure to check out the Java documentation.
    This will explain to you a lot about what MBeans are and how they can be used
    for monitoring JMX attributes: [https://docs.oracle.com/javase/tutorial/jmx/mbeans/index.html](https://docs.oracle.com/javase/tutorial/jmx/mbeans/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Before diving deeper into using JMX object discovery, dive deeper into the preceding
    JMX object documentation. There’s a lot of information in it and it will greatly
    improve your skills in creating these LLD rules.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Zabbix SNMP LLD the new way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zabbix 6.4 introduced an overhaul to using SNMP in our Zabbix environments.
    Although the old way is still available (and explained in this book) as an option,
    it might be better to use the new way to build your SNMP monitoring as it will
    actually use the `GetBulk` requests. This makes SNMP monitoring a lot more efficient
    and less strenuous on the SNMP device we are collecting data from.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before starting with the recipe, please make sure to read [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up SNMP Monitoring the New Way*, first. We will need the knowledge from
    that chapter to set up SNMP LLD discovery as well as we will use some hosts and
    items from that chapter. Make sure you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Your Zabbix environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **lar-book-snmp_bulk** host as set up in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up* *Zabbix Monitoring*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have already set up the SNMP server to start monitoring in [*Chapter
    3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting Up Zabbix Monitoring*,
    we can start immediately on the frontend. In [*Chapter 5*](B19803_05.xhtml#_idTextAnchor809),
    *Building your own Structured Templates*, we also learned about creating templates
    for all our monitoring, so let’s start by doing that. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Zabbix frontend, navigate to **Data collection** | **Templates** and
    click on **Create template** in the top-right corner. We will create a new template
    as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.47 – The BOOK Linux by SNMP template](img/B19803_07_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.47 – The BOOK Linux by SNMP template
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, make sure to switch to the **Tags** tab to add some tags according to
    the new tag policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.48 – Template BOOK Linux by SNMP Macros tab](img/B19803_07_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.48 – Template BOOK Linux by SNMP Macros tab
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the window, click on the big `lar-book-snmp_bulk` host we set
    up earlier. Let’s start by using the mass update functionally to copy the value
    mapping to our new template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your template in the list with the checkbox and click on the big **Mass
    update** button at the bottom of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.49 – Mass update](img/B19803_07_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.49 – Mass update
  prefs: []
  type: TYPE_NORMAL
- en: At **Mass update**, switch to the **Value mapping** tab, check the box, and
    click on the small dotted underlined **Add from** **host** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find your **lar-book-snmp_bulk** host and select **Interface Up/Down** from
    the list. It should look like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.50 – Mass update – add value mapping from the host](img/B19803_07_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.50 – Mass update – add value mapping from the host
  prefs: []
  type: TYPE_NORMAL
- en: You can now press the big **Update** button at the bottom of the window to add
    this value mapping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s copy over our existing items from the template. Go to **Data collection**
    | **Hosts** and go to **Items** for **lar-book-snmp_bulk**. Select the two items
    we created earlier and click on **Copy** at the bottom of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.51 – The lar-book-snmp_bulk items to copy](img/B19803_07_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.51 – The lar-book-snmp_bulk items to copy
  prefs: []
  type: TYPE_NORMAL
- en: Set **Target type** to **Templates** and type in **BOOK Linux by SNMP**. Select
    it and then press **Copy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.52 – The lar-book-snmp_bulk items copy window](img/B19803_07_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.52 – The lar-book-snmp_bulk items copy window
  prefs: []
  type: TYPE_NORMAL
- en: Now, go back to **Data collection** | **Templates** and click on **Discovery**
    for your **BOOK Linux by** **SNMP** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top-right corner, click on the **Create discovery rule** button. We will
    create the following LLD rule here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.53 – Discovery rule](img/B19803_07_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.53 – Discovery rule
  prefs: []
  type: TYPE_NORMAL
- en: We will make the LLD rule of the **Dependent item** type to make sure we use
    the data collected in bulk earlier on the **SNMP interfaces bulk** item. However,
    all LLD data has to be presented in the JSON data format, so let’s make sure to
    convert the data first.
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the **Preprocessing** tab and add the following.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.54 – Preprocessing](img/B19803_07_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.54 – Preprocessing
  prefs: []
  type: TYPE_NORMAL
- en: Now, press the big **Add** button at the bottom of the window to add the LLD
    rule. Then, go to **Item prototypes** to add our first item in an automated manner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-right corner, press **Create item prototype** and create the following
    item prototype:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.55 – Item prototype](img/B19803_07_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.55 – Item prototype
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t forget to add your tags at the **Tags** tab before adding the item prototype:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.56 – Item tags](img/B19803_07_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.56 – Item tags
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need a preprocessing step to extract the right information as well,
    so let’s add that too by going to the **Preprocessing** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.57 – Preprocessing](img/B19803_07_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.57 – Preprocessing
  prefs: []
  type: TYPE_NORMAL
- en: Now, press the big **Add** button at the bottom of the page to finish setting
    up this new item prototype.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We aren’t using the template on our host yet, so let’s navigate to **Data collection**
    | **Hosts** and click on our **lar-book-snmp_bulk** host. Then, add the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.58 – Adding the BOOK Linux by SNMP template to lar-book-snmp_bulk](img/B19803_07_58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.58 – Adding the BOOK Linux by SNMP template to lar-book-snmp_bulk
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Update** at the bottom of the window to add the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The LLD rule should now be added and executed. Let’s see whether the items are
    created by navigating to **Monitoring** | **Latest data** and filtering on the
    **lar-book-snmp_bulk** host. Please keep in mind it can take around one minute
    for the item to show up and another minute for it to collect data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.59 – lar-book-snmp_bulk – latest data after LLD rule](img/B19803_07_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.59 – lar-book-snmp_bulk – latest data after LLD rule
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, how does this new LLD discovery work? As you might have noticed, we are
    still using the same item as we used in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*. The values are for everything under OID `.1.3.6.1.2.1.2.2.1`
    are being collected in bulk still. As a remember of the bulk metric collection,
    let’s have another look at the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.60 – The lar-book-snmp_bulk raw bulk metrics](img/B19803_07_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.60 – The lar-book-snmp_bulk raw bulk metrics
  prefs: []
  type: TYPE_NORMAL
- en: We have all the data we need right there in the SNMP walk item. All of the items
    and discovery rules we then added afterward are using that data and parsing it
    internally using the Zabbix server (or proxy) preprocessing processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of LLD, we have to add the SNMP walk to JSON preprocessing step,
    as you can see in *Figure 7**.54*, which is what will convert the normal SNMP
    walk data to a JSON data format. It will look like this afterward:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.61 – The lar-book-snmp_bulk raw bulk metrics converted to JSON](img/B19803_07_61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.61 – The lar-book-snmp_bulk raw bulk metrics converted to JSON
  prefs: []
  type: TYPE_NORMAL
- en: It collects the values we want by finding the OID `.1.3.6.1.2.1.2.2.1.2` and
    adding its values to the `{#IFDESCR}` discovery macro. It also retains the SNMP
    index and it’s it to the `{#``SNMPINDEX}` macro.
  prefs: []
  type: TYPE_NORMAL
- en: Now, all that’s left to do is set up our item prototypes and use the same raw
    SNMP walk item to extract data with the preprocessing step SNMP walk value as
    we see in *Figure 7**.57*. We also have to make sure it’s unique for each item,
    so we add the `{#SNMPINDEX}` macro to find the correct value for every item that
    will be created.
  prefs: []
  type: TYPE_NORMAL
- en: Just like that, we did a single SNMP `GetBulk` call in the **SNMP interfaces
    bulk** item and used the power of Zabbix-dependent items and preprocessing to
    split it up further.
  prefs: []
  type: TYPE_NORMAL
- en: Creating hosts with LLD and custom JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating hosts from LLD works the same as creating anything else from LLD rules.
    We will simply feed our Zabbix installation with a compatible JSON formatted dataset
    and use that data to create new hosts. However, starting with Zabbix 6.2, something
    has changed. Hosts created by LLD are now customizable after creation, so, let’s
    have a look at how to do it and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need two things: any Zabbix 7 installation
    and a compatible JSON-formatted dataset containing hosts and their data. Some
    good default template examples to create hosts from LLD are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: VMware host and hypervisors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure and AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the example, however, we will be using a custom dataset, which you can
    find on GitHub here: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter07/lldhosts.json](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter07/lldhosts.json).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s also important to have a basic understanding of Zabbix sender, dependent
    items, and preprocessing. I recommend reading the following recipes from [*Chapter
    3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting Up Zabbix* *Monitoring*,
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating Zabbix simple checks and the* *Zabbix trapper*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with calculated and* *dependent items*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using Zabbix preprocessing to alter* *item values*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started on building this new LLD rule with a custom JSON dataset.
    To do that, we will first need to build a JSON file or get it from some of our
    own data sources. We have one prepared for you:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s have a look at the JSON file located here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://raw.githubusercontent.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/main/chapter07/lldhosts.json](https://raw.githubusercontent.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/main/chapter07/lldhosts.json)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next up, let’s log in to the Zabbix server CLI and make sure we have our Zabbix
    sender application installed. We are going to use this to send the file to our
    Zabbix environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s set up the **zabbix-sender** application to send this JSON file to our
    system every minute. We will use a CronJob to make things easy for now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following to the CronJob file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding is just the CronJob + Zabbix sender command built up as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let’s switch to our Zabbix frontend where we will add a host to receive
    the JSON file from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To add the host, navigate to **Data collection** | **Hosts** and click on the
    **Create host** button in the top-right corner. Add the following host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.62 – The Zabbix host creation window for the lar-lldhost-creation
    host](img/B19803_07_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.62 – The Zabbix host creation window for the lar-lldhost-creation host
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add** button at the bottom of the window to finish creating this
    host. You will be brought back to **Data collection** | **Hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On this page, click on **Items** next to the **lar-lldhost-creation** host
    we just created. In the top-right corner, click on **Create item** and create
    the following item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.63 – The Zabbix item creation page for the lar-lldhost-creation
    host](img/B19803_07_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.63 – The Zabbix item creation page for the lar-lldhost-creation host
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to also add a tag to the item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.64 – The Zabbix tag creation page for the lldhosts.raw item](img/B19803_07_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.64 – The Zabbix tag creation page for the lldhosts.raw item
  prefs: []
  type: TYPE_NORMAL
- en: Now, press the big **Add** button at the bottom of the page. After the Zabbix
    server reloads its configuration cache, we should see data coming into this item
    within a minute or two.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Meanwhile, we can start building the LLD rule. While still on the host edit
    page, navigate to **Discovery rules**. Click on **Create discovery rule** in the
    top-right corner. We will add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.65 – The Zabbix LLD rule creation page for hosts.from.json](img/B19803_07_65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.65 – The Zabbix LLD rule creation page for hosts.from.json
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on **LLD macros**, and let’s define some macros to use from the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are going to use JSONPath to convert the preceding blocks of data to the
    following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To do so, switch to the tab called **LLD macros** and define the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.66 – The Zabbix LLD macros tab for the hosts.from.json LLD rule](img/B19803_07_66.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.66 – The Zabbix LLD macros tab for the hosts.from.json LLD rule
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can click on the big **Add** button at the bottom of this page and the
    LLD rule is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do something with the LLD rule, however, we will have to create a new host
    prototype. To do so, click on **Host prototypes** and then **Create host prototype**
    in the top-right corner. We will add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.67 – The Zabbix LLD host prototype creation page](img/B19803_07_67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.67 – The Zabbix LLD host prototype creation page
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we use our macros to create the name of the **virtual machine**
    (**VM**) as well as make a unique host group.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also define an interface using our macro, by switching interface to
    **Custom**, pressing the small underlined **Add** button, and adding the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.68 – The Zabbix LLD host prototype creation page with a custom interface](img/B19803_07_68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.68 – The Zabbix LLD host prototype creation page with a custom interface
  prefs: []
  type: TYPE_NORMAL
- en: You can now press the big **Add** button at the bottom of the page. This will
    add the host prototype.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, navigate to **Data collection** | **Hosts** where, after waiting for a
    few minutes, we should see our new hosts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.69 – Zabbix hosts created from LLD](img/B19803_07_69.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.69 – Zabbix hosts created from LLD
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LLD is an extensive topic in the Zabbix world and, as such, it can become quite
    complicated. As we saw, we used a completely custom JSON file in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we dive deeper into what the results are, keep in mind that custom JSON
    can be created from anywhere. This could be a custom (Python, Perl, PowerShell)
    script, some API checks, or anything else. Also, sometimes, JSON is already provided
    by the Zabbix environment itself. As long as we follow the following format (with
    or without macros straight in the file), anything can be parsed to Zabbix LLD
    rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Check out the following link for more examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery](https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, what did we actually create with the preceding JSON file? Well, we used
    the `vmname`, `vmip`, and `vmlocation` JSON keys and their values to create some
    custom hosts, fully automated. To do that first, we have to use **JSONPath** to
    parse the JSON keys to the LLD macros every LLD rule needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.70 – JSONPath usage to convert keys to LLD macros](img/B19803_07_70.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.70 – JSONPath usage to convert keys to LLD macros
  prefs: []
  type: TYPE_NORMAL
- en: This converts `vmip` to `{#VMIP}`, `vmlocation` to `{#VMLOCATION}`, and `vmname`
    to `{#VMNAME}`. **JSONPath** is searching for the keys and Zabbix is converting
    them to macros for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then use these macros in the LLD host prototype to define what the values
    are going to be for each host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.71 – Our LLD macros in use](img/B19803_07_71.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.71 – Our LLD macros in use
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be that our hosts are created with the correct settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.72 – lar-lld-host4 created by our LLD rule](img/B19803_07_72.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.72 – lar-lld-host4 created by our LLD rule
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, our hostname is filled in, as is the custom host group. We also
    have an interface defined with the correct IP. We will now use that IP on the
    interface to start monitoring Zabbix agent on the host with the template that
    we hooked up to the host.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But wait – there’s more! Starting from Zabbix 6.2, host prototypes are actually
    practically useful, by introducing some major changes. It is now possible to fully
    customize the host settings such as macros, tags, and even templates.
  prefs: []
  type: TYPE_NORMAL
- en: This means that even though a host is created from a prototype, we can still
    customize our monitoring. For example, if you discover your VMs in VMware, we
    could customize the LLD rule to also automatically start monitoring with the Zabbix
    agent. If you then want to override some macros for the host, to change, let’s
    say, a trigger threshold, you actually can.
  prefs: []
  type: TYPE_NORMAL
- en: Do keep in mind, though, that if you remove the host or LLD rule that discovered
    the hosts, all the discovered hosts will also be removed. Be careful with removing
    things and always have backups at the ready!
  prefs: []
  type: TYPE_NORMAL
