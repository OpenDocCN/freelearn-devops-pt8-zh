- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Using Discovery for Automatic Creation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用发现自动创建
- en: This chapter is going to be all about making sure that you as a Zabbix administrator
    are doing as little work as possible on host and item creation. We are going to
    learn how to perform (or perfect, maybe) automatic host, item trigger, and graph
    creation. Check out the recipes featured here to see just what we are going to
    discover.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍如何确保作为 Zabbix 管理员，你在主机和项目创建上的工作最少。我们将学习如何进行（或者更精确地说，完善）自动化的主机、项目触发器和图形创建。查看这里的食谱，看看我们将要发现什么。
- en: In this chapter, we will first learn how to set up Zabbix network discovery
    with Zabbix agent and **Simple Network Management Protocol** (**SNMP**). We will
    then set up active agent autoregistration. Later, we will also cover the automatic
    creation of Windows performance counters, **Java Management Extensions** (**JMX**),
    and SNMP items using **low-level** **discovery** (**LLD**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先学习如何通过 Zabbix agent 和 **简单网络管理协议**（**SNMP**）设置 Zabbix 网络发现。接下来，我们将设置主动
    agent 自动注册。随后，我们还将讨论如何使用 **低级** **发现**（**LLD**）自动创建 Windows 性能计数器、**Java 管理扩展**（**JMX**）和
    SNMP 项目。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Setting up Zabbix agent host discovery
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Zabbix agent 主机发现
- en: Working with Zabbix SNMP network discovery
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zabbix SNMP 网络发现
- en: Automating host creation with active agent autoregistration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过主动 agent 自动注册实现主机创建自动化
- en: Using Windows performance counter discovery
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Windows 性能计数器发现
- en: Discovering JMX objects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现 JMX 对象
- en: Setting up Zabbix SNMP discovery the new way
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以新的方式设置 Zabbix SNMP 发现
- en: Creating hosts with LLD and custom JSON
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 LLD 和自定义 JSON 创建主机
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As this chapter is all about host and item discovery, besides our Zabbix server,
    we will need one new Linux host and a Windows host. Both these hosts will need
    Zabbix agent 2 installed, but not configured just yet.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章主要讲解主机和项目的发现，除了我们的 Zabbix 服务器，我们还需要一台新的 Linux 主机和一台 Windows 主机。这两台主机都需要安装
    Zabbix agent 2，但暂时不需要配置。
- en: Furthermore, we are going to need our JMX host, as configured in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*, and a new host with SNMP set up. To learn more
    about setting up an SNMP-monitored host, check out the *Working with SNMP monitoring
    the old way* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up* *Zabbix Monitoring*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要配置好的 JMX 主机，如 [*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)
    中所述，*Zabbix 监控设置*，以及一台已设置 SNMP 的新主机。要了解如何设置一个 SNMP 监控的主机，请查看 [*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)
    中的 *使用旧方式监控 SNMP* 食谱，*Zabbix 监控设置*。
- en: Setting up Zabbix agent network discovery
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Zabbix agent 网络发现
- en: A lot of Zabbix administrators use Zabbix agent extensively and thus spend a
    lot of time creating Zabbix agent hosts by hand. Maybe they don’t know how to
    set up Zabbix agent discovery, maybe they didn’t have time to set it up yet, or
    maybe they just prefer it this way. If you are ready to get started with Zabbix
    agent discovery, in this recipe we will learn just how easy it is to set it up.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 很多 Zabbix 管理员大量使用 Zabbix agent，因此花费很多时间手动创建 Zabbix agent 主机。也许他们不知道如何设置 Zabbix
    agent 发现，也许他们还没有时间设置，或者他们只是偏好这种方式。如果你已经准备好开始使用 Zabbix agent 发现，那么在这个食谱中我们将学习如何轻松设置它。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Besides our Zabbix server, in this chapter’s introduction, I mentioned that
    we will need two (empty) hosts with Zabbix agent 2 installed: one Windows host
    and one Linux host. If you don’t know how to install Zabbix agent 2, check out
    [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting Up Zabbix
    Monitoring*, or see the Zabbix documentation at [https://www.zabbix.com/documentation/current/en/manual/concepts/agent2](https://www.zabbix.com/documentation/current/en/manual/concepts/agent2).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们的 Zabbix 服务器，在本章的介绍中，我提到我们将需要两台（空的）主机，并且安装了 Zabbix agent 2：一台 Windows 主机和一台
    Linux 主机。如果你不知道如何安装 Zabbix agent 2，请参考 [*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)，*Zabbix
    监控设置*，或者查看 Zabbix 文档 [https://www.zabbix.com/documentation/current/en/manual/concepts/agent2](https://www.zabbix.com/documentation/current/en/manual/concepts/agent2)。
- en: 'Let’s give the servers the following hostnames:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给服务器分配以下主机名：
- en: '**lar-book-disc-lnx**: For the Linux host (use Zabbix agent 2)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lar-book-disc-lnx**：适用于 Linux 主机（使用 Zabbix agent 2）'
- en: '**lar-book-disc-win**: For the Windows host (use Zabbix agent 2)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lar-book-disc-win**：适用于 Windows 主机（使用 Zabbix agent 2）'
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Let’s get started by logging in to our **lar-book-disc-lnx** Linux host and
    editing the following file:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从登录到我们的**lar-book-disc-lnx** Linux 主机开始，编辑以下文件：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, make sure your Zabbix agent 2 configuration file contains at least the
    following line:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，确保你的 Zabbix agent 2 配置文件至少包含以下行：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For your Windows Zabbix agent, it’s important to do the same. Edit the following
    file:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于你的 Windows Zabbix agent，重要的是执行相同的操作。编辑以下文件：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, change the hostname by editing the following line:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过编辑以下行来更改主机名：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next up, in our Zabbix frontend, navigate to **Data collection** | **Discovery**,
    and on this page, we click on **Create discovery rule** to create a rule with
    the following settings:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在我们的 Zabbix 前端，导航至**数据采集** | **发现**，在此页面上，我们点击**创建发现规则**来创建一个具有以下设置的规则：
- en: '![Figure 7.1 – Discovery rules page for Zabbix agent hosts](img/B19803_07_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – Zabbix agent 主机的发现规则页面](img/B19803_07_01.jpg)'
- en: Figure 7.1 – Discovery rules page for Zabbix agent hosts
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – Zabbix agent 主机的发现规则页面
- en: Important note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We are using an update interval of **5** minutes in this example. As this might
    take up a lot of resources on your server, make sure to adjust this value for
    your production environment. For example, one hour might be a better production
    value to make sure we put less load onto our Zabbix processes. Depending on the
    size of the IP range we are scanning and how fast you want to discover things,
    we can adjust this value.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们使用的更新间隔为**5**分钟。由于这可能会占用你服务器的很多资源，因此请确保根据你的生产环境调整该值。例如，一小时可能是一个更合适的生产值，以确保我们对
    Zabbix 进程施加较少的负载。根据我们扫描的 IP 范围的大小和你希望多快发现设备，我们可以调整此值。
- en: Click the blue **Add** button to move on.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**添加**按钮继续。
- en: 'After setting up the discovery rule, we will also need to set up an action
    to actually create the host with the right template. Navigate to **Alerts** |
    **Actions** | **Discovery actions**:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置完发现规则后，我们还需要设置一个操作来实际创建带有正确模板的主机。导航至**警报** | **操作** | **发现操作**：
- en: '![Figure 7.2 – Alerts | Actions | Discovery actions](img/B19803_07_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 警报 | 操作 | 发现操作](img/B19803_07_02.jpg)'
- en: Figure 7.2 – Alerts | Actions | Discovery actions
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 警报 | 操作 | 发现操作
- en: 'Here, we will click the **Create action** button in the top-right corner and
    fill out the next page with the following information:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将点击右上角的**创建操作**按钮，并在下一页填写以下信息：
- en: '![Figure 7.3 – The discovery action creation page for Zabbix agent hosts](img/B19803_07_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – Zabbix agent 主机的发现操作创建页面](img/B19803_07_03.jpg)'
- en: Figure 7.3 – The discovery action creation page for Zabbix agent hosts
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – Zabbix agent 主机的发现操作创建页面
- en: Tip
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: When creating Zabbix actions, it’s important to keep the order of creation for
    **Conditions** in mind. The labels seen in the preceding screenshot will be added
    in order of creation. This means that it’s easier to keep track of your Zabbix
    actions if you keep the order of creation the same for all actions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Zabbix 操作时，重要的是记住**条件**的创建顺序。前面截图中看到的标签将按创建顺序添加。这意味着，如果你对所有操作保持相同的创建顺序，跟踪你的
    Zabbix 操作会更加容易。
- en: 'Next up, click the **Operations** tab. This is where we will add the following:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**操作**标签。在这里我们将添加以下内容：
- en: '![Figure 7.4 – The Operations page for Zabbix agent hosts](img/B19803_07_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – Zabbix agent 主机的操作页面](img/B19803_07_04.jpg)'
- en: Figure 7.4 – The Operations page for Zabbix agent hosts
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – Zabbix agent 主机的操作页面
- en: That’s it for the Linux agent. Click the blue **Add** button, and let’s continue
    with our Windows discovery rule.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是 Linux agent 的设置。点击蓝色的**添加**按钮，我们继续进行 Windows 发现规则的设置。
- en: 'Navigate to **Data collection** | **Host groups**. Create a host group for
    our Windows hosts by clicking **Create host group** in the top-right corner and
    filling out the group name:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至**数据采集** | **主机组**。通过点击右上角的**创建主机组**来为我们的 Windows 主机创建一个主机组，并填写组名：
- en: '![Figure 7.5 – The Create host group page for Windows server hosts](img/B19803_07_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – Windows 服务器主机的创建主机组页面](img/B19803_07_05.jpg)'
- en: Figure 7.5 – The Create host group page for Windows server hosts
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – Windows 服务器主机的创建主机组页面
- en: Click the blue **Add** button and navigate to **Alerts** | **Actions**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**添加**按钮并导航至**警报** | **操作**。
- en: 'Go to **Discovery actions** again and click **Create action**. We will fill
    out the same thing but for our Windows hosts this time:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次进入**发现操作**并点击**创建操作**。这次我们将填写相同的内容，但针对我们的 Windows 主机：
- en: '![Figure 7.6 – Discovery action creation page for Windows Zabbix agents](img/B19803_07_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6 – Windows Zabbix代理的发现操作创建页面](img/B19803_07_06.jpg)'
- en: Figure 7.6 – Discovery action creation page for Windows Zabbix agents
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – Windows Zabbix代理的发现操作创建页面
- en: 'Before clicking **Add**, let’s also fill out the **Operations** page with the
    operations shown in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击**添加**之前，我们还需要填写**操作**页面，内容如下截图所示：
- en: '![Figure 7.7 – The Operations page for Windows Zabbix agents](img/B19803_07_07.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7 – Windows Zabbix代理的操作页面](img/B19803_07_07.jpg)'
- en: Figure 7.7 – The Operations page for Windows Zabbix agents
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – Windows Zabbix代理的操作页面
- en: Now, we can click the blue **Add** button, and our second discovery action is
    present.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以点击蓝色的**添加**按钮，我们的第二个发现操作已经显示。
- en: 'Move on to **Monitoring** | **Discovery**. This is where we can see whether
    and when our hosts are discovered:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续到**监控** | **发现**。在这里我们可以看到我们的主机是否以及何时被发现：
- en: '![Figure 7.8 – The Monitoring | Discovery page](img/B19803_07_08.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8 – 监控 | 发现页面](img/B19803_07_08.jpg)'
- en: Figure 7.8 – The Monitoring | Discovery page
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 监控 | 发现页面
- en: Tip
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Use the **Monitoring** | **Discovery** page to keep a close eye on the hosts
    you expect to show up in your Zabbix setup. It’s very useful to track new hosts
    coming in and see which Zabbix discovery rule was used to create the host.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**监控** | **发现**页面密切关注您期望出现在Zabbix设置中的主机。它非常有用，可以跟踪新主机的加入，并查看用于创建主机的Zabbix发现规则。
- en: How it works…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Network discovery might not be very hard to set up initially, but there are
    loads of options to configure. For this example, we chose to use the `agent.hostname`
    key as our check. We create the Zabbix hostname based on what’s configured in
    the Zabbix agent configuration file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 网络发现最初可能并不难设置，但有很多选项需要配置。在这个示例中，我们选择使用`agent.hostname`键作为我们的检查。我们根据Zabbix代理配置文件中的配置创建Zabbix主机名。
- en: 'What happens is that Zabbix network discovery finds our hosts and performs
    our check. In this case, the check is *What is the hostname used by Zabbix agent?*
    This information, plus our IP address, is then triggering the action. Our action
    then performs our configured checks:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的情况是，Zabbix网络发现找到我们的主机并执行我们的检查。在这种情况下，检查是*Zabbix代理使用的主机名是什么？* 这些信息，加上我们的IP地址，然后触发操作。我们的操作接着执行我们配置的检查：
- en: Does the hostname contain **lnx** or **win**?
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名是否包含**lnx**或**win**？
- en: Is the discovery status **UP**?
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现状态是否为**UP**？
- en: Is the service type **Zabbix Agent**?
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务类型是否为**Zabbix Agent**？
- en: 'If all of those checks are true, our action will then create our newly discovered
    host with the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些检查都为真，我们的操作将创建我们新发现的主机，具体如下：
- en: Our configured host group plus the default **Discovered hosts** host group
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们配置的主机组和默认的**已发现的主机**主机组
- en: Our template as configured in our action
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在操作中配置的模板
- en: 'We will end up with two newly created hosts, with all the right settings:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将最终获得两个新创建的主机，所有设置都已正确配置：
- en: "![Figure 7.9 – The Data collection | Hosts page with our new hosts, Windows\
    \ and Linu\uFEFF\uFEFFx](img/B19803_07_09.jpg)"
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9 – 数据收集 | 主机页面，展示了我们的新主机，Windows和Linux](img/B19803_07_09.jpg)'
- en: Figure 7.9 – The Data collection | Hosts page with our new hosts, Windows and
    Linux
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 数据收集 | 主机页面，展示了我们的新主机，Windows和Linux
- en: There’s more…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Creating the host by using the configuration file settings isn’t always the
    right way to go, but it’s a solid start to working with network discovery.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过配置文件设置创建主机并不总是最合适的方式，但它是使用网络发现的一个坚实起点。
- en: If you want a more flexible environment where you don’t have to even touch the
    Zabbix agent configuration file, then you might want to use different checks on
    the discovery rule. Check out which keys we can use to build different discovery
    rules in the Zabbix documentation at [https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent](https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望拥有一个更灵活的环境，甚至不需要触及Zabbix代理配置文件，那么您可能希望在发现规则中使用不同的检查。可以查看Zabbix文档中哪些键可以用来构建不同的发现规则，网址：[https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent](https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent)。
- en: Working with Zabbix SNMP network discovery
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zabbix SNMP网络发现
- en: If you work with a lot of SNMP devices but don’t always want to set up monitoring
    manually, network discovery is the way to go. Zabbix network discovery uses the
    same functionality as Zabbix agent discovery but with a different configuration
    approach.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要处理大量的 SNMP 设备，但不总是想手动设置监控，网络发现就是你需要的方式。Zabbix 网络发现使用与 Zabbix 代理发现相同的功能，但配置方法不同。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To get started with network discovery, we are going to need a host that we can
    monitor with SNMP. If you don’t know how to set up a host such as this, check
    out the *Working with SNMP monitoring the old way* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*. We’ll also need our Zabbix server.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用网络发现，我们需要一个可以使用 SNMP 进行监控的主机。如果你不知道如何设置这样的主机，可以查看 [*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)
    中的*使用传统方式进行 SNMP 监控*食谱，*设置 Zabbix 监控*部分。我们还需要我们的 Zabbix 服务器。
- en: How to do it…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'First, log in to your new SNMP-monitored host and change the hostname to the
    following:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，登录到你新的 SNMP 监控主机并将主机名更改为以下内容：
- en: '[PRE4]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, restart the SNMP daemon using the following command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令重启 SNMP 守护进程：
- en: '[PRE5]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, navigate to **Data collection** | **Discovery** and click on **Create discovery
    rule** in the top-right corner.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航至**数据收集** | **发现**，并点击右上角的**创建发现规则**。
- en: 'We are going to create a new SNMP discovery rule, with an SNMP **object identifier**
    (**OID**) check type. Fill out the **Name** and **IP range** fields first, like
    this:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个新的 SNMP 发现规则，选择 SNMP **对象标识符**（**OID**）检查类型。首先填写**名称**和**IP 范围**字段，像这样：
- en: '![Figure 7.10 – Data collection | Discovery, discovery rule creation page for
    SNMPv2](img/B19803_07_10.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 数据收集 | 发现，SNMPv2 发现规则创建页面](img/B19803_07_10.jpg)'
- en: Figure 7.10 – Data collection | Discovery, discovery rule creation page for
    SNMPv2
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 数据收集 | 发现，SNMPv2 发现规则创建页面
- en: Make sure to fill out your own IP range in the **IP** **range** field.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**IP** **范围**字段中填写你自己的 IP 范围。
- en: 'Now, we are going to create our SNMP check. Click on **Add** next to **Checks**,
    and you’ll see the following pop-up screen:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们要创建我们的 SNMP 检查。点击**检查**旁边的**添加**，你将看到以下弹出窗口：
- en: '![Figure 7.11 – Data collection | Discovery, discovery check creation pop-up
    window](img/B19803_07_11.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – 数据收集 | 发现，发现检查创建弹出窗口](img/B19803_07_11.jpg)'
- en: Figure 7.11 – Data collection | Discovery, discovery check creation pop-up window
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 数据收集 | 发现，发现检查创建弹出窗口
- en: 'We want **Check type** to be **SNMPv2 agent** and we want to fill it with our
    community and a useful OID, which in this case will be the OID for the system
    name. Fill it out like this:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望**检查类型**为**SNMPv2 代理**，并希望填写我们的社区和一个有用的 OID，在本例中将是系统名称的 OID。填写如下：
- en: '![Figure 7.12 – Data collection | Discovery, discovery check creation pop-up
    window filled with an SNMPv2 check](img/B19803_07_12.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – 数据收集 | 发现，带有 SNMPv2 检查的发现检查创建弹出窗口](img/B19803_07_12.jpg)'
- en: Figure 7.12 – Data collection | Discovery, discovery check creation pop-up window
    filled with an SNMPv2 check
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 数据收集 | 发现，带有 SNMPv2 检查的发现检查创建弹出窗口
- en: Important note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Please note that our check type is *not* SNMP version independent. We have three
    SNMP versions and thus three different check types to choose from, unlike our
    new SNMP interface selection on the Zabbix 7 host screen.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的检查类型*不是*与 SNMP 版本无关的。我们有三种 SNMP 版本，因此有三种不同的检查类型可以选择，这与我们在 Zabbix 7 主机界面上选择
    SNMP 接口的方式不同。
- en: 'After clicking **Add** again, fill out the rest of the page, as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**添加**，然后填写页面的其余部分，如下所示：
- en: '![Figure 7.13 – The Data collection | Discovery page for SNMPv2 agents](img/B19803_07_13.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 数据收集 | SNMPv2 代理的发现页面](img/B19803_07_13.jpg)'
- en: Figure 7.13 – The Data collection | Discovery page for SNMPv2 agents
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 数据收集 | SNMPv2 代理的发现页面
- en: Last, but not least, click the **Add** button at the bottom of the page. This
    concludes creating our Zabbix discovery rule.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，点击页面底部的**添加**按钮。这就完成了我们 Zabbix 发现规则的创建。
- en: We will also need an action for creating our hosts from the discovery rule.
    Navigate to **Alerts** | **Actions**, and after using the dropdown to select **Discovery
    actions**, click on **Create action**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要一个操作来从发现规则中创建我们的主机。导航至**警报** | **操作**，然后使用下拉菜单选择**发现操作**，点击**创建操作**。
- en: 'We will fill out the page with the following information:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将填写以下信息：
- en: '![Figure 7.14 – Alerts | Actions, action creation page for SNMPv2 agents](img/B19803_07_14.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 警报 | 操作，SNMPv2 代理的操作创建页面](img/B19803_07_14.jpg)'
- en: Figure 7.14 – Alerts | Actions, action creation page for SNMPv2 agents
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 警报 | 操作，SNMPv2 代理的操作创建页面
- en: 'Before clicking **Add**, navigate to **Operations** and fill out this page
    with the following details:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击 **添加** 之前，导航到 **操作** 并填写此页面的以下详细信息：
- en: '![Figure 7.15 – Alerts | Actions, the action creation Operations tab for SNMPv2
    agents](img/B19803_07_15.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 警报 | 操作，SNMPv2 代理的操作创建操作选项卡](img/B19803_07_15.jpg)'
- en: Figure 7.15 – Alerts | Actions, the action creation Operations tab for SNMPv2
    agents
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 警报 | 操作，SNMPv2 代理的操作创建操作选项卡
- en: 'Now, click **Add** and navigate to **Monitoring** | **Discovery** to see whether
    our host gets created:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **添加**，并导航到 **监控** | **发现**，查看我们的主机是否被创建：
- en: "![Figure 7.16 – The Monitoring | Discovery page for SNMPv2 agen\uFEFF\uFEFF\
    ts](img/B19803_07_16.jpg)"
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – SNMPv2 代理的监控 | 发现页面](img/B19803_07_16.jpg)'
- en: Figure 7.16 – The Monitoring | Discovery page for SNMPv2 agents
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – SNMPv2 代理的监控 | 发现页面
- en: How it works…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we’ve created another discovery rule, but this time for SNMP.
    As you’ve noticed, the principle remains the same, but the application is a bit
    different.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们创建了另一个发现规则，但这次是针对 SNMP。正如你所注意到的，原则保持不变，但应用稍有不同。
- en: When we created this Zabbix discovery rule, we gave it two checks instead of
    the one check we did in the previous recipe. We created one check on the `.1.3.6.1.2.1.1.5.0`
    SNMP OID to retrieve the hostname of the device through SNMP. We then put the
    hostname retrieved from the system into Zabbix as the Zabbix hostname of the system.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建这个 Zabbix 发现规则时，我们给它添加了两个检查，而不是前一个配方中只做一个检查。我们在 `.1.3.6.1.2.1.1.5.0` SNMP
    OID 上创建了一个检查，通过 SNMP 检索设备的主机名。然后，我们将从系统中检索到的主机名放入 Zabbix，作为系统的 Zabbix 主机名。
- en: 'We also created a check on the `.1.3.6.1.2.1.25.1.4.0` SNMP OID. This check
    will retrieve the following string, if present:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在 `.1.3.6.1.2.1.25.1.4.0` SNMP OID 上创建了一个检查。此检查将检索以下字符串（如果存在）：
- en: '[PRE6]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the string is present, it means that the boot image is Linux on this host.
    This is a perfect example of how we can retrieve multiple OIDs to do multiple
    checks in our Zabbix discovery rules. If we’d been monitoring a networking device,
    for instance, we could have picked an OID to see whether it was a Cisco or a Juniper
    device. We would replace `.1.3.6.1.2.1.25.1.4.0` with any OID and poll it. Then,
    we would create our action based on what we received (Juniper or Cisco) and add
    our templates accordingly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符串存在，这意味着该主机的启动镜像是 Linux。这是我们如何通过检索多个 OID 在 Zabbix 发现规则中进行多个检查的一个完美示例。如果我们监控的是网络设备，比如，我们可以选择一个
    OID 来判断它是 Cisco 还是 Juniper 设备。我们可以用任何 OID 替换 `.1.3.6.1.2.1.25.1.4.0` 并进行轮询。然后，我们将根据收到的结果（Juniper
    或 Cisco）创建操作，并相应地添加我们的模板。
- en: Important note
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: General knowledge of SNMP structure is very important when creating Zabbix discovery
    rules. We want to make sure we use the right SNMP OIDs as checks. Make sure to
    do your research well, utilize SNMP walks, and plan out what OIDs you want to
    use to discover SNMP agents. This way, you’ll end up with a solid monitoring infrastructure.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Zabbix 发现规则时，对 SNMP 结构的一般知识非常重要。我们需要确保使用正确的 SNMP OID 作为检查。务必做好研究，使用 SNMP
    walk，并规划出要使用的 OID 以发现 SNMP 代理。这样，你就能构建出一个稳固的监控基础设施。
- en: Automating host creation with active agent autoregistration
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用主动代理自动注册自动化主机创建
- en: Using discovery to set up your Zabbix agents is a very useful method to automate
    your host creation. But what if we want to be even more upfront with our environment
    and automate further? That’s when we use a Zabbix feature called **active** **agent
    autoregistration**.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用发现功能来设置 Zabbix 代理是自动化主机创建的一个非常有用的方法。但如果我们想进一步直观地了解我们的环境，并进行更多的自动化呢？这时我们可以使用
    Zabbix 的一个功能叫做 **主动** **代理自动注册**。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: For this recipe, we will need a new Linux host. We will call this host `lar-book-lnx-agent-auto`.
    Make sure to install Zabbix agent 2 on this host. Besides this new host, we’ll
    also need our Zabbix server.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将需要一台新的 Linux 主机。我们将这台主机命名为 `lar-book-lnx-agent-auto`。确保在此主机上安装 Zabbix
    agent 2。除了这台新主机，我们还需要我们的 Zabbix 服务器。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s start by logging in to our new **lar-book-lnx-agent-auto** host and changing
    the following file:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从登录到新创建的 **lar-book-lnx-agent-auto** 主机并修改以下文件开始：
- en: '[PRE7]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will then edit the following line in the file. Make sure to enter your Zabbix
    server IP on this line:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将编辑文件中的以下行。确保在该行输入你的 Zabbix 服务器 IP：
- en: '[PRE8]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also change the following line in the file if we want to set our hostname
    in the file manually:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们希望手动在文件中设置主机名，我们还可以更改文件中的以下行：
- en: '[PRE9]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is not a requirement though, as Zabbix agent will use the system hostname
    if it is not filled out.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，这并不是强制要求，因为如果未填写，Zabbix 代理将使用系统主机名。
- en: Next up, we will navigate to our Zabbix frontend, where we’ll go to **Alerts**
    | **Actions**.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将导航到我们的 Zabbix 前端，进入**警报** | **操作**。
- en: 'Use the drop-down menu to go to **Autoregistration actions**, as in the following
    screenshot:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用下拉菜单进入**自动注册操作**，如下截图所示：
- en: '![Figure 7.17 – The Alerts | Actions page drop-down menu](img/B19803_07_17.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 警报 | 操作页面下拉菜单](img/B19803_07_17.jpg)'
- en: Figure 7.17 – The Alerts | Actions page drop-down menu
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 警报 | 操作页面下拉菜单
- en: Now, we will click the blue **Create action** button in the top-right corner
    to create a new action.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将点击右上角的蓝色**创建操作**按钮来创建一个新的操作。
- en: 'Fill out the **Name** field and then click on the **Add** text link:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写**名称**字段，然后点击**添加**文本链接：
- en: '![Figure 7.18 – Alerts | Actions, create new action page](img/B19803_07_18.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – 警报 | 操作，创建新操作页面](img/B19803_07_18.jpg)'
- en: Figure 7.18 – Alerts | Actions, create new action page
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – 警报 | 操作，创建新操作页面
- en: 'We can set up a condition here to only register hosts with a certain hostname.
    Let’s do this by filling out the window like this:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在这里设置条件，只注册具有特定主机名的主机。我们可以通过如下填写窗口来实现：
- en: '![Figure 7.19 – Create action | New condition for the lar-book-lnx host](img/B19803_07_19.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19 – 创建操作 | 新条件，针对 lar-book-lnx 主机](img/B19803_07_19.jpg)'
- en: Figure 7.19 – Create action | New condition for the lar-book-lnx host
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – 创建操作 | 新条件，针对 lar-book-lnx 主机
- en: 'Your page should now look like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您的页面现在应该如下所示：
- en: '![Figure 7.20 – The Create action page, filled with our information for the
    lar-book-lnx host](img/B19803_07_20.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20 – 创建操作页面，已填写我们为 lar-book-lnx 主机提供的信息](img/B19803_07_20.jpg)'
- en: Figure 7.20 – The Create action page, filled with our information for the lar-book-lnx
    host
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – 创建操作页面，已填写我们为 lar-book-lnx 主机提供的信息
- en: Tip
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: We can set up conditions for different types of hosts. For instance, if we want
    to add Windows hosts, we set up a new action with a different hostname filter.
    This way, it is easy to maintain the right groups and templates, even with autoregistration.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为不同类型的主机设置条件。例如，如果我们想添加 Windows 主机，我们可以设置一个带有不同主机名过滤器的新操作。这样，即使使用自动注册，也能轻松维护正确的组和模板。
- en: Before clicking the blue **Add** button, let’s go to the **Operations** tab.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击蓝色的**添加**按钮之前，我们先进入**操作**标签页。
- en: 'Click on the **Add** text link, and you will see the following window:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**文本链接，您将看到以下窗口：
- en: '![Figure 7.21 – The Send message operation for the lar-book-lnx host](img/B19803_07_21.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21 – 发送消息操作，针对 lar-book-lnx 主机](img/B19803_07_21.jpg)'
- en: Figure 7.21 – The Send message operation for the lar-book-lnx host
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21 – 发送消息操作，针对 lar-book-lnx 主机
- en: 'Create an action to add the host to the **Linux servers** host group:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个操作，将主机添加到**Linux 服务器**主机组：
- en: "![Figure 7.22 – The Add to host group operation creatio\uFEFFn](img/B19803_07_22.jpg)"
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.22 – 添加到主机组操作创建](img/B19803_07_22.jpg)'
- en: Figure 7.22 – The Add to host group operation creation
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22 – 添加到主机组操作创建
- en: 'Create an action to add the host to the **Linux by Zabbix agent** **active**
    template:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个操作，将主机添加到**Zabbix 代理**的**Linux 活跃**模板中：
- en: '![Figure 7.23 – The Link to template operation creation](img/B19803_07_23.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – 链接到模板操作创建](img/B19803_07_23.jpg)'
- en: Figure 7.23 – The Link to template operation creation
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – 链接到模板操作创建
- en: 'Your finalized **Operations** page should now look like this, and we can click
    the blue **Add** button:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您最终的**操作**页面应该如下所示，我们可以点击蓝色的**添加**按钮：
- en: '![Figure 7.24 – The Operations page, filled with our information](img/B19803_07_24.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.24 – 操作页面，已填写我们为 lar-book-lnx 主机提供的信息](img/B19803_07_24.jpg)'
- en: Figure 7.24 – The Operations page, filled with our information
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – 操作页面，已填写我们为 lar-book-lnx 主机提供的信息
- en: 'Navigate to **Data collection** | **Hosts**, and we can see our new active
    autoregistered host:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**数据收集** | **主机**，我们可以看到我们新的活跃自动注册主机：
- en: "![Figure 7.25 – The Data collection | Hosts page with host lar-book-lnx-age\uFEFF\
    \uFEFFnt-auto](img/B19803_07_25.jpg)"
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.25 – 数据收集 | 主机页面，显示主机 lar-book-lnx-agent-auto](img/B19803_07_25.jpg)'
- en: Figure 7.25 – The Data collection | Hosts page with host lar-book-lnx-agent-auto
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25 – 数据收集 | 主机页面，显示主机 lar-book-lnx-agent-auto
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Active agent autoregistration is a solid method to let a host register itself.
    Once the `ServerActive=` line is set up with the Zabbix server or proxy IP, the
    host agent will start requesting configuration data from the Zabbix server or
    Proxy. The Zabbix server will receive these requests, and if there is an action
    set up in Zabbix (as we just did in this recipe), the host autoregisters to Zabbix:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 主动代理自动注册是一种让主机自行注册的可靠方法。一旦在 Zabbix 服务器或代理的配置文件中设置了`ServerActive=`行，主机代理将开始向
    Zabbix 服务器或代理请求配置数据。Zabbix 服务器会收到这些请求，如果在 Zabbix 中设置了某个动作（就像我们在本教程中所做的），主机将自动注册到
    Zabbix。
- en: "![Figure 7.26 – Host autoregistration proces\uFEFFs](img/B19803_07_26.jpg)"
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.26 – 主机自动注册过程](img/B19803_07_26.jpg)'
- en: Figure 7.26 – Host autoregistration process
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26 – 主机自动注册过程
- en: We can do a bunch of cool automation with this functionality. We could create
    a script to fill up our Zabbix agent configuration file with the right `ServerActive=`
    line on our hosts in a certain IP pool.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个功能做一些非常酷的自动化工作。我们可以创建一个脚本，将正确的`ServerActive=`行填充到特定 IP 池中主机的 Zabbix
    代理配置文件里。
- en: It would also be super easy to set up new hosts with Ansible. We can automate
    the Zabbix agent installation with Ansible and we can add the `ServerActive=`
    line in the `/etc/zabbix/zabbix_agent2.conf` file using Ansible as well. Our Zabbix
    server autoregistration action will take care of the rest from here.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ansible 设置新主机也会变得非常简单。我们可以通过 Ansible 自动化 Zabbix 代理的安装，同时也可以使用 Ansible 在`/etc/zabbix/zabbix_agent2.conf`文件中添加`ServerActive=`行。从这里开始，我们的
    Zabbix 服务器自动注册动作将处理其余部分。
- en: Zabbix agent autoregistration is a perfect way to get a zero-touch monitoring
    environment that’s always up to date with our latest new hosts.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 代理自动注册是实现零接触监控环境的完美方式，这样我们就可以确保所有最新的主机始终保持最新状态。
- en: There’s more…
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: Not every company uses hostnames that reflect the machine’s OS or other attributes.
    This is when Zabbix `HostMetadata` can come in very useful. We can add this field
    to the active Zabbix agent configuration to reflect the attributes of the machine.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是每个公司使用的主机名都能反映机器的操作系统或其他属性。这时，Zabbix `HostMetadata` 就显得非常有用。我们可以将此字段添加到主动
    Zabbix 代理配置中，以反映机器的属性。
- en: Afterward, we can use `HostMetadata` in our Zabbix discovery action to do the
    same kind of filtering we did on the hostname.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以在 Zabbix 发现动作中使用`HostMetadata`，以执行与主机名相同类型的过滤。
- en: We also have the `HostInterface` and `HostInterfaceItem` parameters in the Zabbix
    agent configuration file, which are used for autoregistration. The host will use
    the specified IP or DNS name as its Zabbix agent interface IP or DNS, as seen
    in the Zabbix frontend. We can also use this functionality to enable passive agent
    monitoring while using autoregistration to create the host.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在 Zabbix 代理配置文件中找到`HostInterface`和`HostInterfaceItem`参数，它们用于自动注册。主机将使用指定的
    IP 或 DNS 名称作为其 Zabbix 代理接口的 IP 或 DNS，如在 Zabbix 前端所示。我们还可以使用此功能，在使用自动注册创建主机时启用被动代理监控。
- en: 'Check out this link for more information:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 查看此链接了解更多信息：
- en: "[https://www.zabbix.com/documentation/current/manual/discovery/auto_registration#using_host_metadata](https://www.zabbix.com/documentation/current/manual/discovery/auto_registration#using_hos\uFEFF\
    \uFEFFt_metadata)"
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: "[https://www.zabbix.com/documentation/current/manual/discovery/auto_registration#using_host_metadata](https://www.zabbix.com/documentation/current/manual/discovery/auto_registration#using_hos\uFEFF\
    \uFEFFt_metadata)"
- en: Using Windows performance counter discovery
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Windows 性能计数器发现
- en: In Zabbix 7, it is possible to discover Windows performance counters. In this
    recipe, we will go over the process of discovering Windows performance counters
    to use in our environments.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Zabbix 7 中，已经可以发现 Windows 性能计数器。在本教程中，我们将介绍如何发现 Windows 性能计数器并在我们的环境中使用它们。
- en: Discovering Windows performance counters might seem to be a little tricky at
    first, as it uses both Windows- and Zabbix-specific concepts. However, once we
    finish this recipe, you’ll know exactly how to set it up.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 发现 Windows 性能计数器最初看起来可能有点复杂，因为它同时使用了 Windows 和 Zabbix 特有的概念。然而，一旦完成这个教程，你将会完全了解如何设置它。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this chapter, we added the `lar-book-disc-win` host to our setup, which is
    the host used in our Zabbix agent discovery process. We can reuse this host to
    discover Windows performance counters easily.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将`lar-book-disc-win`主机添加到我们的设置中，这也是我们在 Zabbix 代理发现过程中使用的主机。我们可以重复使用此主机来轻松发现
    Windows 性能计数器。
- en: Of course, we’ll also need our Zabbix server.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还需要我们的 Zabbix 服务器。
- en: How to do it…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: Let’s start by navigating to **Data collection** | **Templates** and creating
    a new template by clicking **Create template** in the top-right corner.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导航到 **数据收集** | **模板**，并通过点击右上角的 **创建模板** 来创建一个新的模板。
- en: 'Create the following template:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下模板：
- en: "![Figure 7.27 – The Windows performance by Zabbix agent template creatio\uFEFF\
    n](img/B19803_07_27.jpg)"
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.27 – Windows 性能通过 Zabbix 代理模板创建](img/B19803_07_27.jpg)'
- en: Figure 7.27 – The Windows performance by Zabbix agent template creation
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27 – Windows 性能通过 Zabbix 代理模板创建
- en: Click on the blue **Add** button, which will bring you back to **Data collection**
    | **Templates**. Select the new template.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的 **添加** 按钮，这将带你回到 **数据收集** | **模板**。选择新模板。
- en: 'Now, before continuing with our template, navigate to your Windows frontend
    and open **perfmon.exe**:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在继续模板之前，导航到你的 Windows 前端并打开 **perfmon.exe**：
- en: '![Figure 7.28 – Windows search bar – perfmon.exe](img/B19803_07_28.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.28 – Windows 搜索栏 – perfmon.exe](img/B19803_07_28.jpg)'
- en: Figure 7.28 – Windows search bar – perfmon.exe
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.28 – Windows 搜索栏 – perfmon.exe
- en: 'Doing so will open the following window:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样做会打开以下窗口：
- en: "![Figure 7.29 – Windows perfmon\uFEFF.exe](img/B19803_07_29.jpg)"
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.29 – Windows perfmon.exe](img/B19803_07_29.jpg)'
- en: Figure 7.29 – Windows perfmon.exe
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29 – Windows perfmon.exe
- en: Let’s click on **Performance Monitor** and then on the green **+** icon. This
    will show you all the available Windows performance counters.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击 **性能监视器**，然后点击绿色的 **+** 图标。这将显示所有可用的 Windows 性能计数器。
- en: Let’s start by using the **Processor** counter.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用 **处理器** 计数器。
- en: Go back to the **Data collection** | **Templates** page in Zabbix and edit our
    new **Windows performance by Zabbix** **agent** template.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 Zabbix 中的 **数据收集** | **模板** 页面，编辑我们新的 **Windows 性能通过 Zabbix** **代理** 模板。
- en: When you are at the **Edit template** page, click on **Discovery rules** in
    the bar next to your template name.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你进入 **编辑模板** 页面时，点击模板名称旁边的 **发现规则**。
- en: 'Click on **Create new discovery rule** in the top-right corner and add the
    following rule:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的 **创建新发现规则**，并添加以下规则：
- en: '![Figure 7.30 – Create an LLD rule page – Discover counter Processor](img/B19803_07_30.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.30 – 创建 LLD 规则页面 – 发现计数器 处理器](img/B19803_07_30.jpg)'
- en: Figure 7.30 – Create an LLD rule page – Discover counter Processor
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30 – 创建 LLD 规则页面 – 发现计数器 处理器
- en: Important note
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We are using an update interval of **1** minute in this example. As this might
    take up a lot of resources on your server, make sure to adjust this value to your
    production environment. For example, one hour is a much better production value.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用 **1** 分钟的更新间隔。由于这可能会占用服务器大量资源，请确保根据你的生产环境调整此值。例如，一个小时是更适合生产环境的值。
- en: Click the blue **Add** button at the bottom and click our new **Discover counter
    Processor** discovery rule.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击底部的蓝色 **添加** 按钮，然后点击我们新的 **发现计数器 处理器** 发现规则。
- en: 'Click on **Item prototypes**, and in the top-right corner click on **Create
    item prototype**. We will then create the following item prototype:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **项原型**，然后在右上角点击 **创建项原型**。我们将创建以下项原型：
- en: "![Figure 7.31 – The CPU instance C1 time item prototype c\uFEFFreation](img/B19803_07_31.jpg)"
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.31 – CPU 实例 C1 时间项原型创建](img/B19803_07_31.jpg)'
- en: Figure 7.31 – The CPU instance C1 time item prototype creation
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31 – CPU 实例 C1 时间项原型创建
- en: 'On the **Tags** tab, do not forget to add some new tags as follows:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **标签** 选项卡中，别忘了添加以下一些新标签：
- en: '![Figure 7.32 – The Tags tab](img/B19803_07_32.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.32 – 标签选项卡](img/B19803_07_32.jpg)'
- en: Figure 7.32 – The Tags tab
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32 – 标签选项卡
- en: Save the new **Item prototype**, go to **Data collection** | **Hosts**, and
    click on **lar-book-disc-win**.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存新的 **项原型**，然后转到 **数据收集** | **主机**，并点击 **lar-book-disc-win**。
- en: 'Add our **Windows performance by Zabbix** **agent** template:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加我们的 **Windows 性能通过 Zabbix** **代理** 模板：
- en: "![Figure 7.33 – Add Windows performance by Zabbix agent template to lar-book-disc-\uFEFF\
    win](img/B19803_07_33.jpg)"
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.33 – 将 Windows 性能通过 Zabbix 代理模板添加到 lar-book-disc-win](img/B19803_07_33.jpg)'
- en: Figure 7.33 – Add Windows performance by Zabbix agent template to lar-book-disc-win
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33 – 将 Windows 性能通过 Zabbix 代理模板添加到 lar-book-disc-win
- en: 'After clicking on the blue **Update** button, we can navigate to **Monitoring**
    | **Latest data**. Add the following filters:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的 **更新** 按钮后，我们可以导航到 **监控** | **最新数据**。添加以下过滤条件：
- en: '![Figure 7.34 – Latest data filter on host lar-book-disc-win](img/B19803_07_34.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.34 – 主机 lar-book-disc-win 的最新数据过滤](img/B19803_07_34.jpg)'
- en: Figure 7.34 – Latest data filter on host lar-book-disc-win
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34 – 主机 lar-book-disc-win 的最新数据过滤
- en: 'We can now see our three newly created items:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们新创建的三个项目：
- en: "![Figure 7.35 – The Monitoring | Latest data page for our host lar-book-\uFEFF\
    \uFEFFdisc-win](img/B19803_07_35.jpg)"
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: "![图 7.35 – 我们的主机 lar-book-\uFEFF\uFEFFdisc-win 的监控 | 最新数据页面](img/B19803_07_35.jpg)"
- en: Figure 7.35 – The Monitoring | Latest data page for our host lar-book-disc-win
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.35 – 我们的主机 lar-book-disc-win 的监控 | 最新数据页面
- en: How it works…
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Windows performance counters have been around for a long time and they are very
    important to anyone who wants to monitor Windows machines with Zabbix. Using LLD
    in combination with Windows performance counters makes it a lot easier and more
    flexible to build solid Windows monitoring.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 性能计数器已经存在了很长时间，并且对于任何想要使用 Zabbix 监控 Windows 机器的人来说，它们都是非常重要的。将 LLD 与
    Windows 性能计数器结合使用，使构建坚固的 Windows 监控变得更加容易和灵活。
- en: 'In this recipe, we created a very simple but effective Windows performance
    counter discovery rule by adding the discovery rule with the `perf_instance.discovery[Processor]`
    item key. The `[Processor]` part of this item key directly correlates to the `perfmon.exe`
    window we saw. If we look at the following screenshot, we already see **Processor**
    listed:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们通过添加带有 `perf_instance.discovery[Processor]` 项键的发现规则，创建了一个非常简单但有效的 Windows
    性能计数器发现规则。此项键中的`[Processor]`部分与我们看到的`perfmon.exe`窗口直接相关。如果我们查看以下截图，已经可以看到**Processor**列出：
- en: '![Figure 7.36 – perfmon.exe | Add Counters – Processor](img/B19803_07_36.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.36 – perfmon.exe | 添加计数器 – 处理器](img/B19803_07_36.jpg)'
- en: Figure 7.36 – perfmon.exe | Add Counters – Processor
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.36 – perfmon.exe | 添加计数器 – 处理器
- en: 'When our discovery rule polls this item key, Zabbix agent will return the following
    value for our host:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的发现规则轮询此项键时，Zabbix 代理将返回以下值：
- en: '[PRE10]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This value means that Zabbix will fill the `{#INSTANCE}` macro with three values:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值意味着 Zabbix 会用三个值填充`{#INSTANCE}`宏：
- en: '**0**'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0**'
- en: '**1**'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**1**'
- en: '**_Total**'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**_总计**'
- en: 'We can then use these three values by using the `{#INSTANCE}` macro in **Item
    prototype**, as we did here:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过在**项目原型**中使用`{#INSTANCE}`宏来使用这三个值，正如我们在这里所做的那样：
- en: '![Figure 7.37 – Our created item prototype, CPU C1 time](img/B19803_07_37.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.37 – 我们创建的项目原型，CPU C1 时间](img/B19803_07_37.jpg)'
- en: Figure 7.37 – Our created item prototype, CPU C1 time
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.37 – 我们创建的项目原型，CPU C1 时间
- en: 'It will then create three items with our macro values, with the right keys
    to monitor the second part of our counter – `% C1 time`. If you expand the window
    in your `perfmon.exe` file, you can see all the different counters we could add
    to our item prototypes to monitor more Windows performance counters:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它会创建三个带有宏值的项目，使用正确的键来监控计数器的第二部分 – `% C1 时间`。如果你在 `perfmon.exe` 文件中展开窗口，你可以看到我们可以添加到项目原型中的所有不同计数器，从而监控更多
    Windows 性能计数器：
- en: "![Figure 7.38 – Perfmon.exe | Add Counters – Processor e\uFEFF\uFEFFxpanded](img/B19803_07_38.jpg)"
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.38 – Perfmon.exe | 添加计数器 – 处理器展开](img/B19803_07_38.jpg)'
- en: Figure 7.38 – Perfmon.exe | Add Counters – Processor expanded
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.38 – Perfmon.exe | 添加计数器 – 处理器（展开）
- en: Discovering JMX objects
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现 JMX 对象
- en: In [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting Up Zabbix
    Monitoring*, we went over setting up JMX monitoring in the recipe titled *Setting
    up JMX monitoring*. What we didn’t cover yet though was discovering JMX objects.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B19803_03_split_000.xhtml#_idTextAnchor306)，*设置 Zabbix 监控*中，我们已经讲解了如何在标题为*设置
    JMX 监控*的教程中设置 JMX 监控。不过，我们还没有讲到如何发现 JMX 对象。
- en: In this recipe, we will go over how to set up JMX objects with LLD, and after
    you’ve finished this recipe, you’ll know just how to set it up.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将讲解如何使用LLD设置JMX对象，并且完成本教程后，你将知道如何设置它。
- en: Getting ready
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need the JMX host that you set up for the *Setting
    up JMX monitoring* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*. Make sure to finish that recipe before working
    on this one.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们将需要你在[*第3章*](B19803_03_split_000.xhtml#_idTextAnchor306)，*设置 Zabbix
    监控*中设置的 JMX 主机。确保在进行本教程之前完成该教程。
- en: We will also need our Zabbix server with our Zabbix JMX host titled `lar-book-jmx`.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要我们的 Zabbix 服务器以及名为 `lar-book-jmx` 的 Zabbix JMX 主机。
- en: How to do it…
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Let’s start this recipe off by logging in to our Zabbix frontend and navigating
    to **Data collection** | **Templates**.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从登录到 Zabbix 前端并导航到**数据收集** | **模板**开始这个教程。
- en: 'Create a new template by clicking on **Create template** in the top-right corner.
    Fill in the following fields:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**创建模板**，创建一个新的模板。填写以下字段：
- en: '![Figure 7.39 – The App Apache Tomcat JMX discovery template creation](img/B19803_07_39.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.39 – App Apache Tomcat JMX 发现模板创建](img/B19803_07_39.jpg)'
- en: Figure 7.39 – The App Apache Tomcat JMX discovery template creation
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.39 – App Apache Tomcat JMX 发现模板创建
- en: After clicking the blue **Add** button, you will be taken back to **Data collection**
    | **Templates**. Click on your new **App Apache Tomcat JMX** **discovery** template.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**添加**按钮后，你将返回到**数据收集** | **模板**。点击你新创建的**App Apache Tomcat JMX** **发现**模板。
- en: We will now add our JMX discovery rule. Click on **Discovery rules** next to
    our template name.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将添加 JMX 发现规则。点击**发现规则**，位于模板名称旁边。
- en: 'Now, click on **Create discovery rule** and fill in the following fields:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**创建发现规则**并填写以下字段：
- en: '![Figure 7.40 – The Discover JMX object MemoryPool discovery rule creation](img/B19803_07_40.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.40 – 发现 JMX 对象 MemoryPool 发现规则创建](img/B19803_07_40.jpg)'
- en: Figure 7.40 – The Discover JMX object MemoryPool discovery rule creation
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.40 – 发现 JMX 对象 MemoryPool 发现规则创建
- en: Click on the blue **Add** button at the bottom of the page. Then, click on **Item
    prototypes** next to your newly created **Discover JMX object MemoryPool** discovery
    rule.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的蓝色**添加**按钮。然后，点击新创建的**发现 JMX 对象 MemoryPool** 发现规则旁边的**项目原型**。
- en: 'We will now click on the **Create item prototype** button in the top-right
    corner and create the following item prototype:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将在右上角点击**创建项目原型**按钮，并创建以下项目原型：
- en: '![Figure 7.41 – The Item prototype creation page – MemoryPool Memory type](img/B19803_07_41.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.41 – 项目原型创建页面 – MemoryPool 内存类型](img/B19803_07_41.jpg)'
- en: Figure 7.41 – The Item prototype creation page – MemoryPool Memory type
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.41 – 项目原型创建页面 – MemoryPool 内存类型
- en: 'Also, make sure that on the **Tags** tab, you add a new tag with the name of
    **component** and a value of **memory pool**:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，确保在**标签**选项卡中添加一个新标签，名称为**组件**，值为**memory pool**：
- en: '![Figure 7.42 – The Tags tab – the MemoryPool Memory type](img/B19803_07_42.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.42 – 标签选项卡 – MemoryPool 内存类型](img/B19803_07_42.jpg)'
- en: Figure 7.42 – The Tags tab – the MemoryPool Memory type
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.42 – 标签选项卡 – MemoryPool 内存类型
- en: Let’s click on the blue **Add** button and move on.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击蓝色的**添加**按钮，然后继续。
- en: Go to **Data collection** | **Hosts** and click on **lar-book-jmx**. We will
    add our template to this host.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**数据收集** | **主机**，点击**lar-book-jmx**。我们将向该主机添加模板。
- en: 'Click on **Templates** and add the template, like this:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**模板**并添加模板，如下所示：
- en: '![Figure 7.43 – Data collection | Host – add a template to the lar-book-jmx
    host](img/B19803_07_43.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.43 – 数据收集 | 主机 – 向 lar-book-jmx 主机添加模板](img/B19803_07_43.jpg)'
- en: Figure 7.43 – Data collection | Host – add a template to the lar-book-jmx host
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.43 – 数据收集 | 主机 – 向 lar-book-jmx 主机添加模板
- en: Click on the blue **Update** button.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**更新**按钮。
- en: 'When we navigate to **Monitoring** | **Latest data** now, we will select **lar-book-jmx**
    for **Hosts** and **component** for **Tags** with **memory pool** as its value,
    like this:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们现在导航到**监控** | **最新数据**时，我们将选择**lar-book-jmx**作为**主机**，并选择**组件**作为**标签**，其值为**memory
    pool**，如下所示：
- en: '![Figure 7.44 – The Monitoring | Latest data page filters – the lar-book-jmx
    host](img/B19803_07_44.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.44 – 监控 | 最新数据页面过滤器 – lar-book-jmx 主机](img/B19803_07_44.jpg)'
- en: Figure 7.44 – The Monitoring | Latest data page filters – the lar-book-jmx host
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.44 – 监控 | 最新数据页面过滤器 – lar-book-jmx 主机
- en: 'We will then see the following results:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接着会看到以下结果：
- en: "![Figure 7.45 – The Monitoring | Latest data page for the lar-book-jmx host\
    \ with our re\uFEFF\uFEFFsults](img/B19803_07_45.jpg)"
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.45 – 具有我们结果的 lar-book-jmx 主机的监控 | 最新数据页面](img/B19803_07_45.jpg)'
- en: Figure 7.45 – The Monitoring | Latest data page for the lar-book-jmx host with
    our results
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.45 – 具有我们结果的 lar-book-jmx 主机的监控 | 最新数据页面
- en: How it works…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Monitoring JMX applications can be quite daunting at first, as there is a lot
    of work to figure out while building your own LLD rules. But now that you’ve built
    your first LLD rule for JMX, there is a clear structure in it.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 初次监控 JMX 应用程序可能会让人感到相当艰巨，因为在构建自己的 LLD 规则时需要处理大量的工作。但现在，既然你已经为 JMX 构建了第一个 LLD
    规则，结构就变得清晰了。
- en: 'First, for our discovery rule, we’ve picked the item key:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对于我们的发现规则，我们选择了项目键：
- en: '[PRE11]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`MemoryPool` is what we call an **MBean** in Java. We poll this MBean object
    for several JMX objects and fill the macros accordingly.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`MemoryPool`是我们在 Java 中称之为**MBean**的东西。我们轮询这个 MBean 对象以获取多个 JMX 对象，并相应地填充宏。'
- en: We picked the `name=*` object to fill the `{#JMXNAME}` macro in this discovery
    rule. Our macro is then used in our item prototype to create our items.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了 `name=*` 对象来填充此发现规则中的 `{#JMXNAME}` 宏。然后，我们的宏被用在项目原型中来创建项目。
- en: 'Our items are then created, like this:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们的项目就像这样创建：
- en: '![Figure 7.46 – Items on our JMX-monitored host](img/B19803_07_46.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.46 – 我们的 JMX 监控主机上的项](img/B19803_07_46.jpg)'
- en: Figure 7.46 – Items on our JMX-monitored host
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.46 – 我们的 JMX 监控主机上的项
- en: If we look at the keys of the items, we can see that we poll the `Type` JMX
    attribute on every `MemoryPool` with different names.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看项目的键，可以看到我们在每个具有不同名称的 `MemoryPool` 上轮询 `Type` JMX 属性。
- en: That’s how we create JMX LLD rules with ease.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们轻松创建 JMX LLD 规则的方法。
- en: There’s more…
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If you are not familiar with MBeans, then make sure to check out the Java documentation.
    This will explain to you a lot about what MBeans are and how they can be used
    for monitoring JMX attributes: [https://docs.oracle.com/javase/tutorial/jmx/mbeans/index.html](https://docs.oracle.com/javase/tutorial/jmx/mbeans/index.html).'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉 MBeans，确保查阅 Java 文档。这将帮助你理解 MBeans 是什么，以及如何利用它们来监控 JMX 属性：[https://docs.oracle.com/javase/tutorial/jmx/mbeans/index.html](https://docs.oracle.com/javase/tutorial/jmx/mbeans/index.html)。
- en: Tip
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Before diving deeper into using JMX object discovery, dive deeper into the preceding
    JMX object documentation. There’s a lot of information in it and it will greatly
    improve your skills in creating these LLD rules.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入使用 JMX 对象发现之前，深入阅读前面的 JMX 对象文档。文档中有大量信息，它将大大提高你创建这些 LLD 规则的技能。
- en: Setting up Zabbix SNMP LLD the new way
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用新方法设置 Zabbix SNMP LLD
- en: Zabbix 6.4 introduced an overhaul to using SNMP in our Zabbix environments.
    Although the old way is still available (and explained in this book) as an option,
    it might be better to use the new way to build your SNMP monitoring as it will
    actually use the `GetBulk` requests. This makes SNMP monitoring a lot more efficient
    and less strenuous on the SNMP device we are collecting data from.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 6.4 对我们 Zabbix 环境中使用 SNMP 进行了彻底的更新。尽管旧的方式仍然可用（并在本书中有解释），但使用新的方法来构建 SNMP
    监控可能会更好，因为它将实际使用 `GetBulk` 请求。这使得 SNMP 监控更高效，并且对我们从中收集数据的 SNMP 设备负担更小。
- en: Getting ready
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before starting with the recipe, please make sure to read [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up SNMP Monitoring the New Way*, first. We will need the knowledge from
    that chapter to set up SNMP LLD discovery as well as we will use some hosts and
    items from that chapter. Make sure you have the following:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用本教程之前，请先阅读[*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)，*以新方式设置
    SNMP 监控*。我们将需要那一章的知识来设置 SNMP LLD 发现，同时我们也将使用那一章中的一些主机和项目。确保你已经具备以下内容：
- en: Your Zabbix environment
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的 Zabbix 环境
- en: The **lar-book-snmp_bulk** host as set up in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up* *Zabbix Monitoring*
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lar-book-snmp_bulk** 主机如在[*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)中设置，*设置
    Zabbix 监控*'
- en: How to do it…
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'As we have already set up the SNMP server to start monitoring in [*Chapter
    3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting Up Zabbix Monitoring*,
    we can start immediately on the frontend. In [*Chapter 5*](B19803_05.xhtml#_idTextAnchor809),
    *Building your own Structured Templates*, we also learned about creating templates
    for all our monitoring, so let’s start by doing that. Follow these steps:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)中设置了 SNMP 服务器以开始监控一样，*设置
    Zabbix 监控*，我们可以立即在前端开始。在[*第 5 章*](B19803_05.xhtml#_idTextAnchor809)，*构建你自己的结构化模板*，我们还学习了如何为所有监控创建模板，所以让我们从这里开始。按照以下步骤操作：
- en: In the Zabbix frontend, navigate to **Data collection** | **Templates** and
    click on **Create template** in the top-right corner. We will create a new template
    as follows.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Zabbix 前端，导航到 **数据收集** | **模板** 并点击右上角的 **创建模板**。我们将按如下方式创建一个新模板。
- en: '![Figure 7.47 – The BOOK Linux by SNMP template](img/B19803_07_47.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.47 – 通过 SNMP 模板的 BOOK Linux](img/B19803_07_47.jpg)'
- en: Figure 7.47 – The BOOK Linux by SNMP template
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.47 – 通过 SNMP 模板的 BOOK Linux
- en: 'Also, make sure to switch to the **Tags** tab to add some tags according to
    the new tag policy:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，确保切换到 **标签** 选项卡，根据新的标签策略添加一些标签：
- en: '![Figure 7.48 – Template BOOK Linux by SNMP Macros tab](img/B19803_07_48.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.48 – 模板 BOOK Linux by SNMP 宏选项卡](img/B19803_07_48.jpg)'
- en: Figure 7.48 – Template BOOK Linux by SNMP Macros tab
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.48 – 模板 BOOK Linux by SNMP 宏选项卡
- en: At the bottom of the window, click on the big `lar-book-snmp_bulk` host we set
    up earlier. Let’s start by using the mass update functionally to copy the value
    mapping to our new template.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口底部，点击我们之前设置的**lar-book-snmp_bulk**主机。让我们首先使用批量更新功能将值映射复制到我们的新模板中。
- en: Select your template in the list with the checkbox and click on the big **Mass
    update** button at the bottom of the window.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表中选择你的模板，勾选复选框，然后点击窗口底部的**批量更新**按钮。
- en: '![Figure 7.49 – Mass update](img/B19803_07_49.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.49 – 批量更新](img/B19803_07_49.jpg)'
- en: Figure 7.49 – Mass update
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.49 – 批量更新
- en: At **Mass update**, switch to the **Value mapping** tab, check the box, and
    click on the small dotted underlined **Add from** **host** button.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**批量更新**中，切换到**值映射**标签，勾选复选框，然后点击小的带点下划线的**从主机添加**按钮。
- en: Find your **lar-book-snmp_bulk** host and select **Interface Up/Down** from
    the list. It should look like this.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到你的**lar-book-snmp_bulk**主机，并从列表中选择**接口启用/禁用**。它应该是这样的。
- en: '![Figure 7.50 – Mass update – add value mapping from the host](img/B19803_07_50.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.50 – 批量更新 – 从主机添加值映射](img/B19803_07_50.jpg)'
- en: Figure 7.50 – Mass update – add value mapping from the host
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.50 – 批量更新 – 从主机添加值映射
- en: You can now press the big **Update** button at the bottom of the window to add
    this value mapping.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击窗口底部的**更新**按钮来添加此值映射。
- en: Now, let’s copy over our existing items from the template. Go to **Data collection**
    | **Hosts** and go to **Items** for **lar-book-snmp_bulk**. Select the two items
    we created earlier and click on **Copy** at the bottom of the window.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们来复制模板中的现有项目。进入**数据收集** | **主机**，然后进入**项目**，选择**lar-book-snmp_bulk**。勾选我们之前创建的两个项目，并点击窗口底部的**复制**按钮。
- en: '![Figure 7.51 – The lar-book-snmp_bulk items to copy](img/B19803_07_51.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.51 – 需要复制的 lar-book-snmp_bulk 项目](img/B19803_07_51.jpg)'
- en: Figure 7.51 – The lar-book-snmp_bulk items to copy
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.51 – 需要复制的 lar-book-snmp_bulk 项目
- en: Set **Target type** to **Templates** and type in **BOOK Linux by SNMP**. Select
    it and then press **Copy**.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**目标类型**设置为**模板**，并输入**BOOK Linux by SNMP**。选择它后点击**复制**。
- en: '![Figure 7.52 – The lar-book-snmp_bulk items copy window](img/B19803_07_52.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.52 – lar-book-snmp_bulk 项目复制窗口](img/B19803_07_52.jpg)'
- en: Figure 7.52 – The lar-book-snmp_bulk items copy window
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.52 – lar-book-snmp_bulk 项目复制窗口
- en: Now, go back to **Data collection** | **Templates** and click on **Discovery**
    for your **BOOK Linux by** **SNMP** template.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到**数据收集** | **模板**，并点击你的**BOOK Linux by SNMP**模板中的**发现**。
- en: In the top-right corner, click on the **Create discovery rule** button. We will
    create the following LLD rule here.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角，点击**创建发现规则**按钮。我们将在此创建以下LLD规则。
- en: '![Figure 7.53 – Discovery rule](img/B19803_07_53.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.53 – 发现规则](img/B19803_07_53.jpg)'
- en: Figure 7.53 – Discovery rule
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.53 – 发现规则
- en: We will make the LLD rule of the **Dependent item** type to make sure we use
    the data collected in bulk earlier on the **SNMP interfaces bulk** item. However,
    all LLD data has to be presented in the JSON data format, so let’s make sure to
    convert the data first.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建**依赖项**类型的LLD规则，以确保我们使用之前在**SNMP接口批量**项目上收集的数据。然而，所有LLD数据必须以JSON数据格式呈现，因此让我们确保首先转换数据。
- en: Switch to the **Preprocessing** tab and add the following.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**预处理**标签并添加以下内容。
- en: '![Figure 7.54 – Preprocessing](img/B19803_07_54.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.54 – 预处理](img/B19803_07_54.jpg)'
- en: Figure 7.54 – Preprocessing
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.54 – 预处理
- en: Now, press the big **Add** button at the bottom of the window to add the LLD
    rule. Then, go to **Item prototypes** to add our first item in an automated manner.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击窗口底部的**添加**按钮来添加LLD规则。然后，进入**项目原型**以自动方式添加我们的第一个项目。
- en: 'In the top-right corner, press **Create item prototype** and create the following
    item prototype:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角，点击**创建项目原型**，并创建以下项目原型：
- en: '![Figure 7.55 – Item prototype](img/B19803_07_55.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.55 – 项目原型](img/B19803_07_55.jpg)'
- en: Figure 7.55 – Item prototype
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.55 – 项目原型
- en: 'Don’t forget to add your tags at the **Tags** tab before adding the item prototype:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 别忘了在**标签**标签中添加你的标签，然后再添加项目原型：
- en: '![Figure 7.56 – Item tags](img/B19803_07_56.jpg)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.56 – 项目标签](img/B19803_07_56.jpg)'
- en: Figure 7.56 – Item tags
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.56 – 项目标签
- en: 'We will need a preprocessing step to extract the right information as well,
    so let’s add that too by going to the **Preprocessing** tab:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要一个预处理步骤来提取正确的信息，因此让我们通过进入**预处理**标签来添加这个步骤：
- en: '![Figure 7.57 – Preprocessing](img/B19803_07_57.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.57 – 预处理](img/B19803_07_57.jpg)'
- en: Figure 7.57 – Preprocessing
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.57 – 预处理
- en: Now, press the big **Add** button at the bottom of the page to finish setting
    up this new item prototype.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击页面底部的大**添加**按钮以完成设置此新项目原型。
- en: We aren’t using the template on our host yet, so let’s navigate to **Data collection**
    | **Hosts** and click on our **lar-book-snmp_bulk** host. Then, add the template.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还没有在主机上使用该模板，所以让我们导航到 **数据收集** | **主机** 并点击我们的 **lar-book-snmp_bulk** 主机。然后，添加模板。
- en: '![Figure 7.58 – Adding the BOOK Linux by SNMP template to lar-book-snmp_bulk](img/B19803_07_58.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.58 – 将 SNMP 模板 BOOK Linux 添加到 lar-book-snmp_bulk](img/B19803_07_58.jpg)'
- en: Figure 7.58 – Adding the BOOK Linux by SNMP template to lar-book-snmp_bulk
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.58 – 将 SNMP 模板 BOOK Linux 添加到 lar-book-snmp_bulk
- en: Click on **Update** at the bottom of the window to add the template.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击窗口底部的**更新**按钮以添加模板。
- en: The LLD rule should now be added and executed. Let’s see whether the items are
    created by navigating to **Monitoring** | **Latest data** and filtering on the
    **lar-book-snmp_bulk** host. Please keep in mind it can take around one minute
    for the item to show up and another minute for it to collect data.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LLD 规则现在应该已经添加并执行。让我们查看是否已创建项目，方法是导航到 **监控** | **最新数据** 并按 **lar-book-snmp_bulk**
    主机进行筛选。请记住，项目显示出来可能需要大约一分钟，收集数据可能需要另一分钟。
- en: '![Figure 7.59 – lar-book-snmp_bulk – latest data after LLD rule](img/B19803_07_59.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.59 – lar-book-snmp_bulk – LLD 规则后的最新数据](img/B19803_07_59.jpg)'
- en: Figure 7.59 – lar-book-snmp_bulk – latest data after LLD rule
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.59 – lar-book-snmp_bulk – LLD 规则后的最新数据
- en: How it works…
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'So, how does this new LLD discovery work? As you might have noticed, we are
    still using the same item as we used in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*. The values are for everything under OID `.1.3.6.1.2.1.2.2.1`
    are being collected in bulk still. As a remember of the bulk metric collection,
    let’s have another look at the data:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个新的 LLD 发现是如何工作的呢？正如你可能已经注意到的，我们仍然使用与 [*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)
    中相同的项目，*设置 Zabbix 监控*。OID `.1.3.6.1.2.1.2.2.1` 下的所有值仍然以批量方式进行收集。为了回顾大宗度量数据收集，我们再看一下这些数据：
- en: '![Figure 7.60 – The lar-book-snmp_bulk raw bulk metrics](img/B19803_07_60.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.60 – lar-book-snmp_bulk 原始大宗度量数据](img/B19803_07_60.jpg)'
- en: Figure 7.60 – The lar-book-snmp_bulk raw bulk metrics
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.60 – lar-book-snmp_bulk 原始大宗度量数据
- en: We have all the data we need right there in the SNMP walk item. All of the items
    and discovery rules we then added afterward are using that data and parsing it
    internally using the Zabbix server (or proxy) preprocessing processes.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 SNMP walk 项目中已经拥有所有所需的数据。我们之后添加的所有项目和发现规则都在使用这些数据，并通过 Zabbix 服务器（或代理）预处理过程对其进行解析。
- en: 'In the case of LLD, we have to add the SNMP walk to JSON preprocessing step,
    as you can see in *Figure 7**.54*, which is what will convert the normal SNMP
    walk data to a JSON data format. It will look like this afterward:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在 LLD 的情况下，我们需要添加 SNMP walk 到 JSON 预处理步骤，正如你在 *图 7**.54* 中所看到的，这将把正常的 SNMP walk
    数据转换为 JSON 数据格式。之后它看起来会像这样：
- en: '![Figure 7.61 – The lar-book-snmp_bulk raw bulk metrics converted to JSON](img/B19803_07_61.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.61 – 将 lar-book-snmp_bulk 原始大宗度量数据转换为 JSON](img/B19803_07_61.jpg)'
- en: Figure 7.61 – The lar-book-snmp_bulk raw bulk metrics converted to JSON
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.61 – 将 lar-book-snmp_bulk 原始大宗度量数据转换为 JSON
- en: It collects the values we want by finding the OID `.1.3.6.1.2.1.2.2.1.2` and
    adding its values to the `{#IFDESCR}` discovery macro. It also retains the SNMP
    index and it’s it to the `{#``SNMPINDEX}` macro.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过查找 OID `.1.3.6.1.2.1.2.2.1.2` 来收集我们想要的值，并将这些值添加到 `{#IFDESCR}` 发现宏中。它还保留了
    SNMP 索引，并将其与 `{#SNMPINDEX}` 宏一起使用。
- en: Now, all that’s left to do is set up our item prototypes and use the same raw
    SNMP walk item to extract data with the preprocessing step SNMP walk value as
    we see in *Figure 7**.57*. We also have to make sure it’s unique for each item,
    so we add the `{#SNMPINDEX}` macro to find the correct value for every item that
    will be created.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，剩下的就是设置我们的项目原型，并使用相同的原始 SNMP walk 项目，按照预处理步骤中的 SNMP walk 值来提取数据，正如我们在*图 7**.57*中所见。我们还需要确保每个项目都是唯一的，因此我们添加了
    `{#SNMPINDEX}` 宏来查找每个即将创建的项目的正确值。
- en: Just like that, we did a single SNMP `GetBulk` call in the **SNMP interfaces
    bulk** item and used the power of Zabbix-dependent items and preprocessing to
    split it up further.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们在 **SNMP 接口批量** 项目中执行了一个单一的 SNMP `GetBulk` 调用，并利用 Zabbix 依赖项和预处理功能将其进一步拆分。
- en: Creating hosts with LLD and custom JSON
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 LLD 和自定义 JSON 创建主机
- en: Creating hosts from LLD works the same as creating anything else from LLD rules.
    We will simply feed our Zabbix installation with a compatible JSON formatted dataset
    and use that data to create new hosts. However, starting with Zabbix 6.2, something
    has changed. Hosts created by LLD are now customizable after creation, so, let’s
    have a look at how to do it and how it works.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 从LLD创建主机与从LLD规则创建其他内容的方式相同。我们只需要向Zabbix安装传递一个兼容的JSON格式数据集，并使用该数据创建新主机。然而，从Zabbix
    6.2版本开始，发生了一些变化。通过LLD创建的主机现在可以在创建后进行自定义，所以，让我们来看看如何操作以及它是如何工作的。
- en: Getting ready
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we are going to need two things: any Zabbix 7 installation
    and a compatible JSON-formatted dataset containing hosts and their data. Some
    good default template examples to create hosts from LLD are as follows:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们需要两样东西：任何Zabbix 7安装和一个包含主机及其数据的兼容JSON格式数据集。以下是一些可以用来从LLD创建主机的优秀默认模板示例：
- en: VMware host and hypervisors
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware主机和虚拟化管理程序
- en: Kubernetes
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Azure and AWS
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure和AWS
- en: 'For the example, however, we will be using a custom dataset, which you can
    find on GitHub here: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter07/lldhosts.json](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter07/lldhosts.json).'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于本示例，我们将使用一个自定义数据集，你可以在GitHub上找到： [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter07/lldhosts.json](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter07/lldhosts.json)。
- en: 'It’s also important to have a basic understanding of Zabbix sender, dependent
    items, and preprocessing. I recommend reading the following recipes from [*Chapter
    3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting Up Zabbix* *Monitoring*,
    first:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Zabbix发送器、依赖项和预处理的基本概念也非常重要。我建议首先阅读[*第3章*](B19803_03_split_000.xhtml#_idTextAnchor306)，《设置Zabbix监控》中的以下内容：
- en: '*Creating Zabbix simple checks and the* *Zabbix trapper*'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建Zabbix简单检查和* *Zabbix trapper*'
- en: '*Working with calculated and* *dependent items*'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*处理计算和* *依赖项*'
- en: '*Using Zabbix preprocessing to alter* *item values*'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Zabbix预处理来修改* *项值*'
- en: How to do it…
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s get started on building this new LLD rule with a custom JSON dataset.
    To do that, we will first need to build a JSON file or get it from some of our
    own data sources. We have one prepared for you:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建这个新的LLD规则，使用自定义JSON数据集。为此，我们首先需要构建一个JSON文件，或者从我们的一些数据源中获取。我们已经为你准备好了一个：
- en: 'First, let’s have a look at the JSON file located here:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们查看位于此处的JSON文件：
- en: '[https://raw.githubusercontent.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/main/chapter07/lldhosts.json](https://raw.githubusercontent.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/main/chapter07/lldhosts.json)'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://raw.githubusercontent.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/main/chapter07/lldhosts.json](https://raw.githubusercontent.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/main/chapter07/lldhosts.json)'
- en: 'Next up, let’s log in to the Zabbix server CLI and make sure we have our Zabbix
    sender application installed. We are going to use this to send the file to our
    Zabbix environment:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们登录到Zabbix服务器CLI，确保我们已经安装了Zabbix发送器应用程序。我们将使用它将文件发送到Zabbix环境：
- en: 'For RHEL-based systems, use the following:'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于RHEL的系统，请使用以下内容：
- en: '[PRE12]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For Ubuntu systems, use the following:'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Ubuntu系统，请使用以下内容：
- en: '[PRE13]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s set up the **zabbix-sender** application to send this JSON file to our
    system every minute. We will use a CronJob to make things easy for now:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置**zabbix-sender**应用程序，每分钟将此JSON文件发送到我们的系统。为了简化操作，我们将暂时使用CronJob：
- en: '[PRE14]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following to the CronJob file:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到CronJob文件：
- en: '[PRE15]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding is just the CronJob + Zabbix sender command built up as follows:'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述内容只是CronJob + Zabbix发送器命令的组合，构建方式如下：
- en: '[PRE16]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, let’s switch to our Zabbix frontend where we will add a host to receive
    the JSON file from.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们切换到Zabbix前端，在这里我们将添加一个主机来接收来自JSON文件的数据。
- en: 'To add the host, navigate to **Data collection** | **Hosts** and click on the
    **Create host** button in the top-right corner. Add the following host:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加主机，请导航到**数据采集** | **主机**，然后点击右上角的**创建主机**按钮。添加以下主机：
- en: '![Figure 7.62 – The Zabbix host creation window for the lar-lldhost-creation
    host](img/B19803_07_62.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.62 – Zabbix主机创建窗口，展示lar-lldhost-creation主机](img/B19803_07_62.jpg)'
- en: Figure 7.62 – The Zabbix host creation window for the lar-lldhost-creation host
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.62 – Zabbix主机创建窗口，展示lar-lldhost-creation主机
- en: Click on the **Add** button at the bottom of the window to finish creating this
    host. You will be brought back to **Data collection** | **Hosts**.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击窗口底部的 **添加** 按钮，完成此主机的创建。然后你将被带回 **数据收集** | **主机**。
- en: 'On this page, click on **Items** next to the **lar-lldhost-creation** host
    we just created. In the top-right corner, click on **Create item** and create
    the following item:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页面上，点击我们刚创建的 **lar-lldhost-creation** 主机旁边的 **项目**。在右上角，点击 **创建项目**，然后创建以下项目：
- en: '![Figure 7.63 – The Zabbix item creation page for the lar-lldhost-creation
    host](img/B19803_07_63.jpg)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.63 – lar-lldhost-creation 主机的 Zabbix 项目创建页面](img/B19803_07_63.jpg)'
- en: Figure 7.63 – The Zabbix item creation page for the lar-lldhost-creation host
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.63 – lar-lldhost-creation 主机的 Zabbix 项目创建页面
- en: 'Make sure to also add a tag to the item:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保还要为项目添加标签：
- en: '![Figure 7.64 – The Zabbix tag creation page for the lldhosts.raw item](img/B19803_07_64.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.64 – lldhosts.raw 项目的 Zabbix 标签创建页面](img/B19803_07_64.jpg)'
- en: Figure 7.64 – The Zabbix tag creation page for the lldhosts.raw item
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.64 – lldhosts.raw 项目的 Zabbix 标签创建页面
- en: Now, press the big **Add** button at the bottom of the page. After the Zabbix
    server reloads its configuration cache, we should see data coming into this item
    within a minute or two.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按下页面底部的大 **添加** 按钮。经过 Zabbix 服务器重新加载配置缓存后，我们应该在一两分钟内看到该项目的数据开始流入。
- en: 'Meanwhile, we can start building the LLD rule. While still on the host edit
    page, navigate to **Discovery rules**. Click on **Create discovery rule** in the
    top-right corner. We will add the following:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，我们可以开始构建 LLD 规则。仍在主机编辑页面时，导航至 **发现规则**。点击右上角的 **创建发现规则**。我们将添加以下内容：
- en: '![Figure 7.65 – The Zabbix LLD rule creation page for hosts.from.json](img/B19803_07_65.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.65 – 来自 hosts.from.json 的 Zabbix LLD 规则创建页面](img/B19803_07_65.jpg)'
- en: Figure 7.65 – The Zabbix LLD rule creation page for hosts.from.json
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.65 – 来自 hosts.from.json 的 Zabbix LLD 规则创建页面
- en: 'Next, click on **LLD macros**, and let’s define some macros to use from the
    file:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 **LLD 宏**，让我们定义一些从文件中使用的宏：
- en: '[PRE17]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We are going to use JSONPath to convert the preceding blocks of data to the
    following:'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用 JSONPath 将前面的数据块转换为以下内容：
- en: '[PRE18]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To do so, switch to the tab called **LLD macros** and define the following:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，切换到名为 **LLD 宏** 的标签页，并定义以下内容：
- en: '![Figure 7.66 – The Zabbix LLD macros tab for the hosts.from.json LLD rule](img/B19803_07_66.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.66 – 来自 hosts.from.json 的 Zabbix LLD 宏标签页](img/B19803_07_66.jpg)'
- en: Figure 7.66 – The Zabbix LLD macros tab for the hosts.from.json LLD rule
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.66 – 来自 hosts.from.json 的 Zabbix LLD 宏标签页
- en: Now, we can click on the big **Add** button at the bottom of this page and the
    LLD rule is created.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以点击此页面底部的大 **添加** 按钮，LLD 规则就创建好了。
- en: 'To do something with the LLD rule, however, we will have to create a new host
    prototype. To do so, click on **Host prototypes** and then **Create host prototype**
    in the top-right corner. We will add the following:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，要对 LLD 规则进行操作，我们必须创建一个新的主机原型。为此，点击 **主机原型**，然后点击右上角的 **创建主机原型**。我们将添加以下内容：
- en: '![Figure 7.67 – The Zabbix LLD host prototype creation page](img/B19803_07_67.jpg)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.67 – Zabbix LLD 主机原型创建页面](img/B19803_07_67.jpg)'
- en: Figure 7.67 – The Zabbix LLD host prototype creation page
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.67 – Zabbix LLD 主机原型创建页面
- en: As you can see, we use our macros to create the name of the **virtual machine**
    (**VM**) as well as make a unique host group.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用宏来创建 **虚拟机**（**VM**）的名称，并创建一个唯一的主机组。
- en: 'We will also define an interface using our macro, by switching interface to
    **Custom**, pressing the small underlined **Add** button, and adding the following:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将通过切换接口至 **自定义**，按下小的带下划线的 **添加** 按钮，并添加以下内容，来使用宏定义接口：
- en: '![Figure 7.68 – The Zabbix LLD host prototype creation page with a custom interface](img/B19803_07_68.jpg)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.68 – 带有自定义接口的 Zabbix LLD 主机原型创建页面](img/B19803_07_68.jpg)'
- en: Figure 7.68 – The Zabbix LLD host prototype creation page with a custom interface
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.68 – 带有自定义接口的 Zabbix LLD 主机原型创建页面
- en: You can now press the big **Add** button at the bottom of the page. This will
    add the host prototype.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击页面底部的大 **添加** 按钮。这将添加主机原型。
- en: 'Now, navigate to **Data collection** | **Hosts** where, after waiting for a
    few minutes, we should see our new hosts:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到 **数据收集** | **主机**，在等待几分钟后，我们应该能看到新创建的主机：
- en: '![Figure 7.69 – Zabbix hosts created from LLD](img/B19803_07_69.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.69 – 通过 LLD 创建的 Zabbix 主机](img/B19803_07_69.jpg)'
- en: Figure 7.69 – Zabbix hosts created from LLD
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.69 – 通过 LLD 创建的 Zabbix 主机
- en: How it works…
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: LLD is an extensive topic in the Zabbix world and, as such, it can become quite
    complicated. As we saw, we used a completely custom JSON file in this recipe.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: LLD是Zabbix世界中的一个广泛主题，因此，它可能变得相当复杂。正如我们所看到的，我们在这个示例中使用了一个完全自定义的JSON文件。
- en: 'Before we dive deeper into what the results are, keep in mind that custom JSON
    can be created from anywhere. This could be a custom (Python, Perl, PowerShell)
    script, some API checks, or anything else. Also, sometimes, JSON is already provided
    by the Zabbix environment itself. As long as we follow the following format (with
    or without macros straight in the file), anything can be parsed to Zabbix LLD
    rules:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解结果之前，请记住，定制的JSON可以从任何地方创建。这可以是一个自定义的（Python、Perl、PowerShell）脚本，一些API检查，或其他任何东西。另外，有时候JSON是由Zabbix环境本身提供的。只要我们遵循以下格式（无论文件中是否直接包含宏），任何内容都可以解析为Zabbix
    LLD规则：
- en: '[PRE19]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Check out the following link for more examples:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接，获取更多示例：
- en: '[https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery](https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery)'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery](https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery)'
- en: 'Now, what did we actually create with the preceding JSON file? Well, we used
    the `vmname`, `vmip`, and `vmlocation` JSON keys and their values to create some
    custom hosts, fully automated. To do that first, we have to use **JSONPath** to
    parse the JSON keys to the LLD macros every LLD rule needs:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们到底通过前面的JSON文件创建了什么呢？嗯，我们使用了`vmname`、`vmip`和`vmlocation`这几个JSON键及其值来创建一些完全自动化的定制主机。为了做到这一点，首先，我们必须使用**JSONPath**将JSON键解析为每个LLD规则所需的LLD宏：
- en: '![Figure 7.70 – JSONPath usage to convert keys to LLD macros](img/B19803_07_70.jpg)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.70 – 使用JSONPath将键转换为LLD宏](img/B19803_07_70.jpg)'
- en: Figure 7.70 – JSONPath usage to convert keys to LLD macros
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.70 – 使用JSONPath将键转换为LLD宏
- en: This converts `vmip` to `{#VMIP}`, `vmlocation` to `{#VMLOCATION}`, and `vmname`
    to `{#VMNAME}`. **JSONPath** is searching for the keys and Zabbix is converting
    them to macros for us.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`vmip`转换为`{#VMIP}`，`vmlocation`转换为`{#VMLOCATION}`，`vmname`转换为`{#VMNAME}`。**JSONPath**正在搜索这些键，而Zabbix则为我们将它们转换为宏。
- en: 'We then use these macros in the LLD host prototype to define what the values
    are going to be for each host:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在LLD主机原型中使用这些宏来定义每个主机的值：
- en: '![Figure 7.71 – Our LLD macros in use](img/B19803_07_71.jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.71 – 我们的LLD宏在使用中](img/B19803_07_71.jpg)'
- en: Figure 7.71 – Our LLD macros in use
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.71 – 我们的LLD宏在使用中
- en: 'The result will be that our hosts are created with the correct settings:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是我们的主机被创建，并且设置正确：
- en: '![Figure 7.72 – lar-lld-host4 created by our LLD rule](img/B19803_07_72.jpg)'
  id: totrans-435
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.72 – 我们的LLD规则创建的lar-lld-host4](img/B19803_07_72.jpg)'
- en: Figure 7.72 – lar-lld-host4 created by our LLD rule
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.72 – 我们的LLD规则创建的lar-lld-host4
- en: As you can see, our hostname is filled in, as is the custom host group. We also
    have an interface defined with the correct IP. We will now use that IP on the
    interface to start monitoring Zabbix agent on the host with the template that
    we hooked up to the host.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的主机名已填写，定制的主机组也已设置。我们还定义了一个具有正确IP的接口。我们现在将在该接口上使用该IP，使用我们连接到主机的模板开始监控Zabbix代理。
- en: There’s more…
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: But wait – there’s more! Starting from Zabbix 6.2, host prototypes are actually
    practically useful, by introducing some major changes. It is now possible to fully
    customize the host settings such as macros, tags, and even templates.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 等等 – 还有更多！从Zabbix 6.2开始，主机原型实际上变得非常有用，引入了一些重大变化。现在，可以完全自定义主机设置，例如宏、标签，甚至模板。
- en: This means that even though a host is created from a prototype, we can still
    customize our monitoring. For example, if you discover your VMs in VMware, we
    could customize the LLD rule to also automatically start monitoring with the Zabbix
    agent. If you then want to override some macros for the host, to change, let’s
    say, a trigger threshold, you actually can.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着即使主机是从原型创建的，我们仍然可以自定义监控。例如，如果你在VMware中发现了你的虚拟机，我们可以自定义LLD规则，使其也能自动开始使用Zabbix代理进行监控。如果你之后想要覆盖某些宏来更改触发器阈值，假设改变某个触发器的阈值，实际上你是可以做到的。
- en: Do keep in mind, though, that if you remove the host or LLD rule that discovered
    the hosts, all the discovered hosts will also be removed. Be careful with removing
    things and always have backups at the ready!
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住，如果你删除了发现主机的主机或LLD规则，所有已发现的主机也会被删除。在删除任何内容时要小心，并且随时准备好备份！
