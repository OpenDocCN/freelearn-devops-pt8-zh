- en: Introducing Elastic Beanstalk and Elastic File System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Elastic Beanstalk 和 Elastic File System
- en: 'In the previous chapter, we started off by learning a lot about an awesome
    managed service called Systems Manager, which can perform virtually any and all
    tasks related to your EC2 instances, such as automating script executions, patching
    your instances, maintaining state and compliance, and much more. In this chapter,
    we will take things up a notch by introducing two really awesome services: Elastic
    Beanstalk, a service that can help you develop and deploy rich web applications
    in just a few clicks, and Elastic File System, a service that provides a massively
    scalable shared filesystem for your EC2 instances! So, keeping this in mind, let''s
    have a quick look at the various topics that we will be covering in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们首先了解了一个很棒的托管服务——Systems Manager，它几乎可以执行与 EC2 实例相关的所有任务，比如自动化脚本执行、修补实例、维护状态和合规性等等。在本章中，我们将进一步提升难度，介绍两个非常强大的服务：Elastic
    Beanstalk，一个可以帮助您通过几次点击就能开发和部署丰富 Web 应用程序的服务，以及 Elastic File System，一个为 EC2 实例提供大规模共享文件系统的服务！因此，考虑到这一点，让我们快速回顾一下本章将涉及的各个主题：
- en: Introducing Elastic Beanstalk and how it works
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Elastic Beanstalk 及其工作原理
- en: How to manage applications, environments, and configurations with ease using
    Elastic Beanstalk
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过 Elastic Beanstalk 轻松管理应用程序、环境和配置
- en: Pushing your applications to AWS using the Elastic Beanstalk CLI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Elastic Beanstalk CLI 将应用程序推送到 AWS
- en: Getting started with Elastic File System and its various use cases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 Elastic File System 及其各种用例
- en: Hosting a highly scalable and available WordPress site using Elastic Beanstalk
    and Elastic File System
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Elastic Beanstalk 和 Elastic File System 托管一个高可扩展且高可用的 WordPress 网站
- en: So much to do, so let's get started right away!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多事情要做，快点开始吧！
- en: Introducing Amazon Elastic Beanstalk
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Amazon Elastic Beanstalk
- en: One of the key features of a cloud is to provide its users and developers with
    a seamless and easy to use platform for developing and deploying their applications.
    That's exactly where Elastic Beanstalk comes in. Elastic Beanstalk was first launched
    in the year 2011, and has continuously evolved to become a full-fledged PaaS offering
    from AWS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算的一个关键特点是为用户和开发人员提供一个无缝且易于使用的平台，用于开发和部署他们的应用程序。这正是 Elastic Beanstalk 的作用所在。Elastic
    Beanstalk 于 2011 年首次推出，并不断发展，成为 AWS 提供的一个成熟的 PaaS 服务。
- en: Elastic Beanstalk is your one-stop shop for quickly deploying and managing your
    web applications in AWS. All you need to do is upload your code to Beanstalk,
    and voila! Elastic Beanstalk takes care of the entire application's deployment
    process, from EC2 capacity provisioning to auto-scaling the instances and even
    load balancing using an ELB! Elastic Beanstalk does it all so that you can concentrate
    on more important tasks, such as developing your applications and not getting
    bogged down with complex operational nuances.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 是您在 AWS 上快速部署和管理 Web 应用程序的一站式解决方案。您只需将代码上传到 Beanstalk，完成！Elastic
    Beanstalk 会处理整个应用程序的部署过程，从 EC2 容量的配置到自动扩展实例，甚至通过 ELB 进行负载均衡！Elastic Beanstalk
    负责一切，您可以专注于更重要的任务，如开发您的应用程序，而不必被复杂的操作细节困扰。
- en: 'But for me, Beanstalk is much more than just the deployment and management
    of your applications. Let''s look at some of the key benefits of leveraging Elastic
    Beanstalk for your web applications:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，Beanstalk 不仅仅是部署和管理应用程序的工具。让我们来看一下利用 Elastic Beanstalk 来支持 Web 应用程序的一些关键好处：
- en: '**Deployment ****support**: Today, Beanstalk supports standard EC2 instances
    and Docker containers as the basis for your application''s deployment. This enables
    you to host your web applications and your microservices-based apps on AWS with
    relative ease.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署支持**：今天，Beanstalk 支持标准 EC2 实例和 Docker 容器作为应用程序部署的基础。这使得您可以相对轻松地在 AWS 上托管
    Web 应用程序和基于微服务的应用。'
- en: '**Platform support**: Beanstalk provides a rich set of platforms for developers
    to deploy their apps on. Today, the list includes Java, PHP, Python, .NET, Node.js,
    and Ruby, with more languages and platforms to be added in the future.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台支持**：Beanstalk 为开发人员提供了一套丰富的平台，用于在上面部署他们的应用程序。目前，支持的平台包括 Java、PHP、Python、.NET、Node.js
    和 Ruby，未来将会增加更多语言和平台。'
- en: '**Developer friendly**: It is extremely easy to build and deploy your applications
    over to AWS using Beanstalk. You can leverage a wide variety of options, including
    the AWS Management Console or its CLI, a code repository such as Git, or even
    an IDE such as Eclipse or Visual Studio to upload your application, and the rest
    is all taken care of by Beanstalk itself.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者友好**：使用 Beanstalk，将应用程序构建并部署到 AWS 是极其简单的。你可以利用多种选项，包括 AWS 管理控制台或其命令行工具、代码库（如
    Git），甚至是像 Eclipse 或 Visual Studio 这样的集成开发环境（IDE）来上传你的应用程序，剩下的由 Beanstalk 自动处理。'
- en: '**Control**: With Beanstalk, you get complete control over your underlying
    AWS resources as well as the environments on which your application runs. You
    can change the instance types, scale the resources, add more application environments,
    configure ELBs, and much more!'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制**：使用 Beanstalk，你可以完全控制基础 AWS 资源以及托管应用程序的环境。你可以更改实例类型、扩展资源、添加更多应用环境、配置
    ELB 等等！'
- en: '**Costs**: One of the best things about Beanstalk is that it''s absolutely
    free! Yes, you heard it right! Free! You only pay for the AWS resources that are
    spun up based on the configurations that you provide and nothing more. Amazing
    isn''t it?'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**费用**：Beanstalk 最棒的地方之一就是它完全免费！没错，你没有听错！免费！你只需为根据你提供的配置启动的 AWS 资源付费，其他一切都不收费。是不是很惊人？'
- en: With these pointers in mind, let's look at some of the essential concepts and
    terminologies that you ought to know before getting started with Elastic Beanstalk.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些要点，让我们来看一下在开始使用 Elastic Beanstalk 之前，你需要了解的一些基本概念和术语。
- en: Concepts and terminologies
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概念和术语
- en: 'Here''s a look at some of the common concepts and terminologies that you will
    often come across while working with Elastic Beanstalk:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常见的概念和术语，您在使用 Elastic Beanstalk 时经常会遇到：
- en: '**Applications**: An application in Elastic Beanstalk is basically a collection
    of Beanstalk''s internal components, and includes environments, versions, events,
    and various other things. Think of an Elastic Beanstalk application as a high-level
    container which contains different aspects of your application.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序**：Elastic Beanstalk 中的一个应用程序基本上是 Beanstalk 内部组件的集合，包括环境、版本、事件以及其他各种元素。可以将
    Elastic Beanstalk 应用程序看作是一个高级容器，包含了应用程序的不同方面。'
- en: '**Application versions**: Application versions are nothing more than different
    versions of an application''s code. Each version of your application''s code is
    stored in an S3 Bucket that is auto-created and managed by Beanstalk itself. You
    can create multiple versions of your application code and use this for deployment
    to one or more environments for testing and comparison.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序版本**：应用程序版本不过是应用程序代码的不同版本。每个应用程序代码版本都会存储在由 Beanstalk 自动创建和管理的 S3 存储桶中。你可以创建多个应用程序代码版本，并将其用于部署到一个或多个环境中进行测试和比较。'
- en: '**Environments**: An Elastic Beanstalk environment is yet another logical container
    that hosts one application version at a time on a specified set of instances,
    load balancers, auto scaling groups, and so on. Typically, you would have an environment
    for development, one for acceptance testing, and another one for production hosting,
    however, there are no hard and fast rules on this.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境**：Elastic Beanstalk 环境是另一个逻辑容器，它一次只托管一个应用程序版本，并在指定的一组实例、负载均衡器、自动扩展组等上运行。通常，你会为开发、验收测试和生产托管设置不同的环境，但这并没有硬性规定。'
- en: 'An environment comes in two flavors, and you can choose between the two during
    your initial environment setup phase. The first is called a **web server environment**,
    and is basically created for applications that support HTTP requests, such as
    web applications and so on. The second is called a **worker environment**, where
    the application pulls tasks from an Amazon SQS Queue. Here''s a look at each of
    these flavors in a bit more detail:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 环境有两种类型，在初始环境设置阶段你可以选择其中一种。第一种称为 **Web 服务器环境**，通常用于支持 HTTP 请求的应用程序，比如 Web 应用程序等。第二种是
    **工作环境**，应用程序从 Amazon SQS 队列中拉取任务。以下是这两种类型的详细介绍：
- en: '**Web server environment**: As mentioned earlier, this particular environment
    is well suited to hosting and managing web frontend applications, such as websites,
    mobile applications, and so on. As part of this environment, Beanstalk provisions
    an internet-facing Elastic Load Balancer, an autoscaling group with some minimalistic
    configuration settings, and a small number of EC2 instances that contain your
    application code along with a pre-installed agent called **Host Manager**. The
    Host Manager agent is a key component in the entire setup process, as it is responsible
    for deploying and monitoring the application as well as periodically patching
    the instance and rotating the logs.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web 服务器环境**：如前所述，这种环境非常适合托管和管理 Web 前端应用程序，如网站、移动应用程序等。作为该环境的一部分，Beanstalk
    提供了一个面向互联网的弹性负载均衡器（Elastic Load Balancer），一个具有一些最小化配置设置的自动扩展组，以及少量 EC2 实例，这些实例包含您的应用程序代码以及一个预安装的名为
    **Host Manager** 的代理。Host Manager 代理是整个设置过程中的关键组件，它负责部署和监控应用程序，并定期修补实例和轮换日志。'
- en: 'Here''s a representational diagram depicting a simple application being scaled
    using a web server environment. Note the RDS instance in the diagram as well.
    You can also choose to set up an RDS instance for your application using Elastic
    Beanstalk, or add it to the application stack manually later:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示意图，展示了如何使用 Web 服务器环境对简单应用程序进行扩展。请注意图中的 RDS 实例。您还可以选择使用 Elastic Beanstalk
    为您的应用程序设置 RDS 实例，或者稍后手动将其添加到应用栈中：
- en: '![](img/2c7b9f03-683b-401a-9bf6-ec0826cf74e5.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c7b9f03-683b-401a-9bf6-ec0826cf74e5.png)'
- en: An additional point worth mentioning here is that every environment has a unique
    CNAME, for example `mywordpress`. The CNAME maps to a URL which is in the form
    of `mywordpress.us-east-1.elasticbeanstalk.com`. This URL is aliased in Amazon's
    DNS service Route53 to an Elastic Load Balancing URL, something like `abcdef-123456.us-east-1.elb.amazonaws.com`,
    by using a CNAME record.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另外值得一提的是，每个环境都有一个唯一的 CNAME，例如 `mywordpress`。该 CNAME 映射到一个 URL，形式为 `mywordpress.us-east-1.elasticbeanstalk.com`。此
    URL 通过使用 CNAME 记录在 Amazon 的 DNS 服务 Route53 中别名为 Elastic Load Balancing 的 URL，如
    `abcdef-123456.us-east-1.elb.amazonaws.com`。
- en: '**Worker environment**: The worker environment works in a very different way to
    the web server environment. In this case, Elastic Beanstalk starts up an SQS Queue
    in your environment and installs a small daemon into each of the worker instances.
    The daemon is responsible for regularly polling the queue for newer messages,
    and if a message is present, the daemon pulls it into the worker instance for
    consumption, as depicted in the following diagram:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Worker 环境**：Worker 环境与 Web 服务器环境的工作方式非常不同。在这种情况下，Elastic Beanstalk 会在您的环境中启动一个
    SQS 队列，并在每个 Worker 实例中安装一个小型守护进程。守护进程负责定期轮询队列以获取新的消息，如果队列中有消息，守护进程将其拉入 Worker
    实例进行处理，如下图所示：'
- en: '![](img/820391c4-f959-4ae1-a120-91b671be5466.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/820391c4-f959-4ae1-a120-91b671be5466.png)'
- en: Ideally, you can use a combination of web and worker environments to host your
    applications, so that there is a clear decoupling of your web frontend resources
    and your backend processing worker instances. Keep in mind that there are a lot
    more design considerations that you also ought to think about while setting up
    your environments, such as how the scalability is going to be handled and storage
    options for data depending on the type of data, for example S3 for logs and RDS
    for application-centric data, security, fault tolerance, and much more.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，您可以使用 Web 和 Worker 环境的组合来托管应用程序，从而清晰地将 Web 前端资源和后端处理 Worker 实例解耦。请记住，在设置环境时，您还需要考虑许多其他设计要素，例如可扩展性如何处理、根据数据类型选择存储选项（例如，使用
    S3 存储日志、使用 RDS 存储应用数据）、安全性、容错能力等。
- en: With this section completed, let's move on to the fun part and see how to get
    started with using Elastic Beanstalk!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一部分后，让我们进入更有趣的部分，看看如何开始使用 Elastic Beanstalk！
- en: Getting started with Elastic Beanstalk
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Elastic Beanstalk
- en: 'In this section, we will be performing a deep dive into how to set up a fully-functional
    Dev and Prod environment for our simple WordPress application using Elastic Beanstalk.
    Before we get started, here is a list of some prerequisite items that you need
    to have in place before we can proceed:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨如何使用 Elastic Beanstalk 为我们的简单 WordPress 应用程序设置一个完全功能的开发和生产环境。在开始之前，这里有一份在继续之前需要准备的前提条件清单：
- en: A valid AWS account and user credentials with the required set of privileges
    to run the AWS CLI and the Elastic Beanstalk CLI.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的 AWS 账户和用户凭证，并具有运行 AWS CLI 和 Elastic Beanstalk CLI 所需的权限集。
- en: A sandbox/Dev instance to download the WordPress installation and later use
    it to push the application code over to the respective Beanstalk environment.
    Note that you can also use other resources, such as a Git URL or an IDE, but for
    now we will be focusing on this approach.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个沙盒/开发实例，用于下载 WordPress 安装包，并随后将应用代码推送到相应的 Beanstalk 环境。请注意，您也可以使用其他资源，例如 Git
    URL 或 IDE，但目前我们将专注于这种方法。
- en: Creating the Dev environment
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建开发环境
- en: 'Let''s first start off by creating a simple and straightforward development
    environment for our WordPress site. To do so, execute the following steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过创建一个简单明了的开发环境来为我们的 WordPress 站点奠定基础。为此，执行以下步骤：
- en: Sign in to the AWS Console and select the Elastic Beanstalk option from the
    Services filter, or alternatively, launch the Elastic Beanstalk console by launching
    the URL [https://console.aws.amazon.com/elasticbeanstalk](https://console.aws.amazon.com/elasticbeanstalk)
    in a browser of your choice.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 AWS 控制台，并从服务筛选器中选择 Elastic Beanstalk 选项，或者通过在浏览器中启动 URL [https://console.aws.amazon.com/elasticbeanstalk](https://console.aws.amazon.com/elasticbeanstalk)
    来启动 Elastic Beanstalk 控制台。
- en: Next, select the Create New Application option to get started. Remember, an
    application is the highest level of container for our application code, which
    can contain one or more environments as required.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择“创建新应用”选项以开始。请记住，应用是我们应用代码的最高级别容器，它可以根据需要包含一个或多个环境。
- en: In the Create New Application dialog box, provide a suitable Application Name and
    an optional Description to get started with. Click on Create once completed.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“创建新应用”对话框中，提供合适的应用名称和一个可选的描述来开始。完成后，点击“创建”。
- en: With the basic application container created, you can now go ahead and create
    the development environment. To do so, from the Actions drop-down list, select
    the Create New Application option.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建了基础应用容器后，您现在可以继续创建开发环境。为此，在操作下拉列表中，选择“创建新应用”选项。
- en: 'Here, you will be provided with an option to either opt for the Web server environment
    or the Worker environment configuration. Remember, an environment type can be
    selected only once here, so make sure that you select the correct tier based on
    your application''s requirements. In this case, I''ve opted to select the Web
    server environment, as shown in the following screenshot:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您将有一个选项，可以选择 Web 服务器环境或 Worker 环境配置。请记住，环境类型只能在此处选择一次，因此请确保根据您的应用需求选择正确的级别。在这种情况下，我选择了
    Web 服务器环境，如下图所示：
- en: '![](img/3048af0c-7cab-474f-a3d2-ff32e9f2e829.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3048af0c-7cab-474f-a3d2-ff32e9f2e829.png)'
- en: 'On the Create a new environment wizard page, provide a suitable Environment
    name for your WordPress site. Since this is a development environment, I''ve gone
    ahead and named it `YoyoWordpress-dev`. Next, in the Domain field, provide a unique
    name for your website''s domain URL. The URL will be suffixed by the region-specific
    Elastic Beanstalk URL, as shown in the following screenshot:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“创建新环境”向导页面中，为您的 WordPress 站点提供一个合适的环境名称。由于这是一个开发环境，我将其命名为 `YoyoWordpress-dev`。接下来，在“域名”字段中，为您网站的域名
    URL 提供一个唯一名称。该 URL 将以区域特定的 Elastic Beanstalk URL 作为后缀，如下图所示：
- en: '![](img/ee8f500d-40f5-47ec-b10e-9fd7ae128fc3.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee8f500d-40f5-47ec-b10e-9fd7ae128fc3.png)'
- en: 'Next, type in a suitable Description for your new environment, and move on
    toward the Base configuration section. Here, from the Platform dropdown, select
    the Preconfigured platform option and opt for the PHP platform, as depicted in
    the following screenshot. PHP is our default option as WordPress is built on PHP
    5.6\. Today, Beanstalk supports packer builder, Docker containers, Go, Java SE,
    Java with Tomcat, .NET on Windows Server with IIS, Node.js, PHP, Python, and Ruby,
    with more platform support coming shortly:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为您的新环境输入一个合适的描述，并继续进入基础配置部分。在这里，从平台下拉菜单中选择“预配置平台”选项，并选择 PHP 平台，如下图所示。PHP
    是我们的默认选项，因为 WordPress 是基于 PHP 5.6 构建的。今天，Beanstalk 支持打包构建器、Docker 容器、Go、Java SE、带
    Tomcat 的 Java、在 Windows Server 上运行 IIS 的 .NET、Node.js、PHP、Python 和 Ruby，更多平台支持也将在不久的将来推出：
- en: '![](img/eb1d6af6-e923-491e-bdb2-a7a91bd407dc.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb1d6af6-e923-491e-bdb2-a7a91bd407dc.png)'
- en: Now, here's the part where you need to keep your calm! Leave the rest of the
    options as their default values and select Configure more options, not the Create
    environment option! Yes, we will be configuring a few additional items first and
    will create our development environment later!
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，到了需要保持冷静的部分！将其余选项保持为默认值，选择“配置更多选项”，而不是“创建环境”选项！是的，我们首先将配置一些附加项，然后再创建我们的开发环境！
- en: 'On the Configure Environment page, you can opt to select one of the three preconfigured
    Configuration presets options, based on your application''s requirements. The
    presets are briefly explained here:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置环境页面中，您可以根据应用程序的要求选择三个预配置的配置预设选项之一。预设选项在这里简要说明：
- en: '**Low cost (Free tier eligible)**: This particular configuration will launch
    a single (**t2.micro**) instance with no load balancing or autoscaling group configured.
    This is ideal if you just want to get started with an application using the basics
    or wish to set up a minimalistic Dev environment, as in this case.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低成本（符合免费层资格）**：此配置将启动一个单一的（**t2.micro**）实例，并未配置负载均衡或自动扩展组。如果您只是想使用基础功能开始一个应用程序，或希望设置一个简约的开发环境，那么这个配置非常理想，正如本例中所示。'
- en: '**High availability**: Unlike the low-cost preset, the high-availability configuration
    comes pre-equipped with an autoscaling group that can scale up to a default of
    four instances or more, and an Elastic Load Balancer that has cross-zone load
    balancing and connection draining enabled by default. Besides this, you also get
    a host of CloudWatch alarms created for monitoring, as well as security groups
    for your instance and Load Balancer.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**：与低成本预设不同，高可用性配置预先配备了一个自动扩展组，可以扩展到默认的四个实例或更多实例，并且具有跨区域负载均衡和连接排空功能的弹性负载均衡器。此外，您还将获得一系列用于监控的
    CloudWatch 警报，以及为您的实例和负载均衡器创建的安全组。'
- en: '**Custom configuration**: You can additionally opt to configure your environment
    based on other parameters. You can select this preset, and modify each and every
    component present within your environment as you see fit.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义配置**：您还可以选择根据其他参数配置您的环境。您可以选择此预设，并根据需要修改环境中的每个组件。'
- en: 'With the Configuration preset set to Low cost (Free tier), the next item that
    we can modify is the Platform configuration. Elastic Beanstalk supports the following
    PHP platform configurations:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置预设设置为低成本（免费层）后，我们可以修改的下一个项目是平台配置。Elastic Beanstalk 支持以下 PHP 平台配置：
- en: '| **PHP Language** | **Amazon Linux AMI** | **PHP version** |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **PHP 语言** | **Amazon Linux AMI** | **PHP 版本** |'
- en: '| PHP 7.1 | 2017.03.1 | PHP 7.1.7 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| PHP 7.1 | 2017.03.1 | PHP 7.1.7 |'
- en: '| PHP 7.0 | 2017.03.1 | PHP 7.0.21 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| PHP 7.0 | 2017.03.1 | PHP 7.0.21 |'
- en: '| PHP 5.6 | 2017.03.1 | PHP 5.6.31 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| PHP 5.6 | 2017.03.1 | PHP 5.6.31 |'
- en: '| PHP 5.5 | 2017.03.1 | PHP 5.5.38 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| PHP 5.5 | 2017.03.1 | PHP 5.5.38 |'
- en: '| PHP 5.4 | 2017.03.1 | PHP 5.4.45 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| PHP 5.4 | 2017.03.1 | PHP 5.4.45 |'
- en: Since we are using a WordPress application, we need to modify the platform as
    well, to accommodate for the correct PHP version.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们正在使用 WordPress 应用程序，因此我们还需要修改平台，以适应正确的 PHP 版本。
- en: 'To do so, select the Change platform configuration option. This will bring
    up the Choose a platform version dialog, as shown here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请选择更改平台配置选项。这将弹出选择平台版本的对话框，如下所示：
- en: '![](img/ea4f2776-8f2f-4d79-9c05-06fba04f69b4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea4f2776-8f2f-4d79-9c05-06fba04f69b4.png)'
- en: Here, from the drop-down list, search and select the 64bit Amazon Linux 2017.03
    v2.5.0 running PHP 5.6 option, as WordPress execution is stable with PHP 5.6\.
    Once done, click on Save to complete the process.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此，从下拉列表中搜索并选择运行 PHP 5.6 的 64 位 Amazon Linux 2017.03 v2.5.0 选项，因为 WordPress
    执行在 PHP 5.6 上非常稳定。完成后，点击保存以完成此过程。
- en: With the Platform configuration changed as per our requirements, we can now
    move on to configuring the add-on services such as **security**, **notifications**,
    **network**, **database**, and much more! For example, let's quickly configure
    the networking for our WordPress Dev environment by selecting the Modify option
    in the Network pane.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根据我们的需求更改了平台配置后，我们现在可以继续配置附加服务，如**安全**、**通知**、**网络**、**数据库**等！例如，我们可以通过在网络面板中选择“修改”选项，快速配置我们的
    WordPress 开发环境的网络。
- en: 'In the Network pane, you can opt to launch your environment in a custom VPC,
    as well as other instance-specific settings such as enabling Public IP address,
    selecting the Instance subnets based on your VPC design, and finally assigning
    Instance security groups for your Dev instances. In this case, I already have
    a custom VPC created specifically for the development environment that contains
    one public subnet and one private subnet, with a default security group as well.
    Here is an overview of the network configuration setup for my environment. You
    can tweak this to match your requirements:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络面板中，你可以选择在自定义 VPC 中启动你的环境，以及其他特定实例的设置，如启用公共 IP 地址、根据 VPC 设计选择实例子网，最后为你的开发实例分配实例安全组。在此情况下，我已经为开发环境专门创建了一个包含一个公共子网和一个私有子网的自定义
    VPC，并且还有一个默认的安全组。以下是我的环境网络配置设置概览，你可以根据需求进行调整：
- en: '![](img/cbf45a6c-5e91-42fc-84a7-194508a48473.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbf45a6c-5e91-42fc-84a7-194508a48473.png)'
- en: Once the settings are made, click on Save to complete the networking changes.
    You can perform other configurational changes as you see fit, however, since this
    is only a development environment, I've opted to leave the rest of the options
    as default for now. Once completed, select the Create environment option to finish
    the environment creation process.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置完成后，点击保存以完成网络更改。你可以根据需要进行其他配置更改，但由于这是一个开发环境，我选择暂时保持其余选项为默认设置。完成后，选择创建环境选项以结束环境创建过程。
- en: 'Once the environment creation process is initiated, it will take a couple of
    minutes to complete its execution, as depicted in the following screenshot. Here,
    you will see Elastic Beanstalk create a new security group as well as an Elastic
    IP address for your EC2 dev instance. During this stage, the environment also
    transitions from a Pending to an Ok state, and you can view the environment, your
    application''s logs, and the status:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦环境创建过程开始，它将需要几分钟才能完成执行，如下图所示。在此阶段，你将看到 Elastic Beanstalk 创建一个新的安全组以及一个 Elastic
    IP 地址用于你的 EC2 开发实例。在这一阶段，环境也将从 Pending 状态过渡到 Ok 状态，你可以查看环境、应用程序的日志以及状态：
- en: '![](img/d38f8d35-f991-4d0e-9527-2695cf484e3c.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d38f8d35-f991-4d0e-9527-2695cf484e3c.png)'
- en: With your environment up and running, you can also verify it using the URL provided
    as an output of your environment's creation by using the environment dashboard.
    Upon selecting the URL, you will be redirected to a new application landing page
    in your web browser which basically verifies that your environment is configured
    to work with PHP 5.6.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在环境启动并运行后，你也可以通过使用环境仪表板提供的 URL 来验证它。选择该 URL 后，你将被重定向到一个新的应用程序登陆页面，这基本上验证了你的环境已配置为可以使用
    PHP 5.6。
- en: But where is our WordPress application? That's exactly what we will be deploying
    next using a really simple and easy-to-use Elastic Beanstalk CLI.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们的 WordPress 应用程序在哪里呢？这正是我们接下来将要通过一个非常简单且易于使用的 Elastic Beanstalk CLI 部署的内容。
- en: Working with the Elastic Beanstalk CLI
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Elastic Beanstalk CLI
- en: With your environment deployed using the AWS Management Console, we now shift
    our focus to leveraging the Elastic Beanstalk CLI, or EB CLI, to push the application
    code over to the newly created environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过 AWS 管理控制台部署环境后，我们将重点转向使用 Elastic Beanstalk CLI，或 EB CLI，将应用程序代码推送到新创建的环境。
- en: The EB CLI is a powerful utility that can be used to operate and manage your
    entire Elastic Beanstalk environment using a few simple CLI commands. It is also
    designed to work with AWS development services such as CodeBuild and CodeCommit,
    as well as other third-party code repository services such as Git.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: EB CLI 是一个强大的工具，可以使用几个简单的 CLI 命令操作和管理整个 Elastic Beanstalk 环境。它还与 AWS 开发服务（如
    CodeBuild 和 CodeCommit）以及其他第三方代码仓库服务（如 Git）配合使用。
- en: 'In this section, we will first be looking at a few simple steps for installing
    the EB CLI on a simple Linux instance, later followed by configuring and pushing
    our WordPress application to its respective development environment:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先介绍在简单 Linux 实例上安装 EB CLI 的几个简单步骤，然后将继续配置并将我们的 WordPress 应用程序推送到相应的开发环境中：
- en: To do so, we first need to ensure that the instance is updated with the latest
    set of packages. In my case, I'm performing the steps on a simple Ubuntu 14.04
    LTS instance, however, you can alternatively use your own on-premises virtual
    machines.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我们首先需要确保实例已更新到最新的包。在我的案例中，我是在一个简单的 Ubuntu 14.04 LTS 实例上执行这些步骤，然而，您也可以使用您自己的本地虚拟机。
- en: 'Run the following command to update your OS. The command will vary based on
    your operating system variant:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以更新您的操作系统。命令将根据您的操作系统版本有所不同：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we need to ensure that the instance has the required Python packages
    installed in it. Note that if you are using the Amazon Linux AMI, then by default
    it will already have the necessary Python packages installed in it:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要确保实例中已安装所需的 Python 包。请注意，如果您使用的是 Amazon Linux AMI，那么默认情况下它将已经安装必要的 Python
    包：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: AWS CLI and the EB CLI require Python 2 version 2.6.5+ or Python 3 version 3.3+.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI 和 EB CLI 需要 Python 2 版本 2.6.5+ 或 Python 3 版本 3.3+。
- en: 'With the Python packages installed, we now move forward and set up the AWS
    CLI using the following commands:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完 Python 包后，我们接着使用以下命令设置 AWS CLI：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first command installs the CLI, while the other runs you through a simple
    wizard to set up the AWS CLI for your instance. To learn more about how to configure
    the AWS CLI, you can check out this URL: [http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令安装 CLI，而另一个命令将引导您通过一个简单的向导来为您的实例设置 AWS CLI。要了解更多关于如何配置 AWS CLI 的信息，您可以查看此网址：[http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html)。
- en: 'Finally, we go ahead and install the EB CLI. The installation is pretty straightforward
    and simple:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们继续安装 EB CLI。安装过程非常简单明了：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'That''s all there is to it! You now have a functioning Elastic Beanstalk CLI
    installed and ready for use. So let''s now go ahead and download the required
    WordPress code ZIP file locally and use the EB CLI to push it into the development
    environment:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样！现在您已经安装了一个功能齐全的 Elastic Beanstalk CLI 并准备好使用。接下来，让我们下载所需的 WordPress 代码
    ZIP 文件并使用 EB CLI 将其推送到开发环境中：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Extract the contents of your WordPress ZIP file into a new folder, and run
    the following command from within the WordPress directory:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的 WordPress ZIP 文件的内容提取到一个新文件夹中，然后在 WordPress 目录中运行以下命令：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `eb init` command is used to initialize and sync the EB CLI with your newly
    created development environment. Follow the on-screen instructions to configure
    the EB CLI''s settings, such as Selecting a default region to operate from, Selecting
    an application to use, and so on. Remember, the default region has to match your
    current development environment''s region as well, which in my case is **us-east-1**:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`eb init` 命令用于初始化并将 EB CLI 与您新创建的开发环境同步。请按照屏幕上的指示配置 EB CLI 的设置，例如选择一个默认的操作区域，选择要使用的应用程序等。请记住，默认区域必须与您当前开发环境的区域相匹配，在我的案例中是
    **us-east-1**：'
- en: 'With the EB CLI set up, the only step left now is to deploy the WordPress application
    to the development environment using yet another EB CLI command called simply
    `eb deploy`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置好 EB CLI 后，现在唯一剩下的步骤就是使用另一个名为 `eb deploy` 的 EB CLI 命令将 WordPress 应用部署到开发环境：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'During the deployment process, the CLI creates an application version archive
    in a new S3 bucket within your environment. Each application deployment will result
    in subsequent version creations within S3 itself. After this, you will see your
    application code get uploaded to your development environment, as depicted in
    the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署过程中，CLI 会在您的环境中新建一个 S3 存储桶，并创建一个应用版本档案。每次应用部署都会导致 S3 中后续版本的创建。之后，您将看到您的应用代码被上传到开发环境，如下图所示：
- en: '![](img/0b08942c-e927-4566-9360-da5428949a4f.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b08942c-e927-4566-9360-da5428949a4f.png)'
- en: The environment simultaneously changes its state from Ok to Pending as the application
    is uploaded and set up in your development instance. Once the application becomes
    available, the health state of the environment will yet again transition from
    Pending to OK to Info.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序上传并在您的开发实例中设置后，环境的状态同时从 Ok 变为 Pending。一旦应用程序可用，环境的健康状态将再次从 Pending 转为 OK，再到
    Info。
- en: 'You can verify whether your application has uploaded or not by refreshing the
    application URL (`yoyoclouds.us-east-1.elasticbeanstalk.com`) on your environment''s
    dashboard. You should see the WordPress welcome screen, as shown in the following
    screenshot:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过刷新环境仪表板上的应用程序URL（`yoyoclouds.us-east-1.elasticbeanstalk.com`）来验证应用程序是否已上传。你应该能看到WordPress的欢迎屏幕，如下图所示：
- en: '![](img/4bd63dfb-53d5-41b6-a6ee-ebbeec4fb99f.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4bd63dfb-53d5-41b6-a6ee-ebbeec4fb99f.png)'
- en: Note, however, that this setup still requires a MySQL database, so don't forget
    to go to the RDS Management Console and create a minimalistic MySQL database,
    or even better, an Aurora DB instance, for your development environment. Remember
    to note down the database username, password, and the DB host and database name
    itself; you will need these during your WordPress configuration!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但需要注意的是，这个设置仍然需要一个MySQL数据库，因此不要忘记前往RDS管理控制台，创建一个简化的MySQL数据库，或者更好的是，为你的开发环境创建一个Aurora
    DB实例。记得记下数据库的用户名、密码、数据库主机和数据库名称；在配置WordPress时你将需要这些信息！
- en: With this step completed, let's take a few minutes to understand the various
    options for configuring and monitoring your newly deployed application using the
    environment dashboard!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，让我们花几分钟时间了解如何使用环境仪表板配置和监控你新部署的应用程序的各种选项！
- en: Understanding the environment dashboard
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解环境仪表板
- en: The environment dashboard is your one-stop shop for managing and monitoring
    your newly deployed applications, as well as the inherited instances. In this
    section, we will quickly look at each of the sections present in the environment
    dashboard and how you can leverage them for your applications.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 环境仪表板是你管理和监控新部署应用程序以及继承实例的集中平台。在本节中，我们将快速浏览环境仪表板中每个部分，并了解如何利用它们来管理你的应用程序。
- en: To start off with, the Dashboard view itself provides you with some high-level
    information and event logs depicting the current status of your environment. To
    learn more about the recent batch of events, you can opt to select the Show All option
    in the Recent Events section, or alternatively select the Events option from the
    navigation pane.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，仪表板视图本身为你提供了一些高层次的信息和事件日志，展示了当前环境的状态。要了解最近一批事件的更多信息，你可以选择在“最近事件”部分选择“显示全部”选项，或者从导航窗格中选择“事件”选项。
- en: The Dashboard also allows you to upload a newer version of your application
    by selecting the Upload and Deploy option, as shown in following screenshot. Here,
    you can see a Running Version of your WordPress application as well. This is the
    same application that we just deployed using the EB CLI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板还允许你通过选择“上传并部署”选项上传应用程序的新版，如下图所示。在这里，你还可以看到正在运行的WordPress应用版本。这就是我们刚刚使用EB
    CLI部署的应用。
- en: 'You can also control various aspects of your environment, such as Save Configuration,
    Clone Environment, and Terminate Environment, as well using the Actions tab provided
    in the right-hand corner of the environment dashboard:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过环境仪表板右上角的“操作”标签来控制环境的各个方面，如保存配置、克隆环境和终止环境：
- en: '![](img/e811d6fc-8068-4afb-b0c2-ed91704d1298.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e811d6fc-8068-4afb-b0c2-ed91704d1298.png)'
- en: 'Moving on from the Dashboard, the next tab in the navigation pane that is worth
    checking out is the Configuration section. Let''s look at each of the configuration
    options in a bit more detail, starting off with the Scaling tile:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从仪表板移动到下一个值得查看的导航窗格标签，即“配置”部分。让我们更详细地查看每个配置选项，从扩展选项开始：
- en: '**Scaling**: Here, you can opt to change your Environment Type from a Single
    instance deployment to a Load balancing, auto scaling enabled environment simply
    by selecting the correct option from the Environment Type drop-down list. You
    can even enable Time-based scaling for your instances by opting for the Add scheduled
    action option.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展**：在这里，你可以选择将你的环境类型从单实例部署更改为负载均衡、启用自动扩展的环境，只需从环境类型下拉列表中选择正确的选项。你甚至可以通过选择“添加计划操作”选项来启用基于时间的扩展。'
- en: '**Instances**: In the next tile, you can configure your instance-specific details
    for your environment, such as the Instance type, the EC2 key pair to be used for
    enabling SSH to your instances, the Instance profile, and other options as well,
    such as the root volume type and its desired size.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例**：在下一个选项卡中，你可以为你的环境配置特定实例的详细信息，例如实例类型、用于启用SSH连接到实例的EC2密钥对、实例配置文件以及其他选项，例如根卷类型及其所需大小。'
- en: '**Notifications**: Here, you can specify a particular Email address, using
    which, notifications pertaining to your environment—such as its events—are sent
    using the Amazon SNS.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**：在这里，你可以指定一个特定的电子邮件地址，使用该地址，与你的环境相关的通知——例如其事件——将通过Amazon SNS发送。'
- en: '**Software configuration**: This section allows you to configure some key parameters
    for your application, such as the application''s Document root, the Memory limit for
    running your PHP environment, and the logging options. But the thing that I really
    love about the software configuration is the Environment properties section. With
    this, you can pass secrets, endpoints, debug settings, and other information to
    your application without even having to SSH into your instances, which is simply
    amazing! We will be learning a bit about environment properties and how you can
    create simple environment variables and pass them to your WordPress application
    a bit later in this chapter.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件配置**：此部分允许你为应用程序配置一些关键参数，例如应用程序的文档根目录、运行PHP环境的内存限制以及日志选项。但是我真正喜欢软件配置的一点是环境属性部分。有了这个，你可以将密钥、端点、调试设置和其他信息传递给你的应用程序，而无需通过SSH登录到实例中，简直太棒了！稍后我们将在本章中了解环境属性以及如何创建简单的环境变量并将其传递给你的WordPress应用程序。'
- en: '**Health**: One of the most important configuration items in your environment,
    the Health section allows you to configure the Health Check URL for your application,
    as well as to enable detailed health reporting for your environment using a special
    agent installed on your systems. This agent monitors the vitals of your EC2 instance,
    captures application-level health metrics, and sends them directly to Beanstalk
    for further analysis. This, in conjunction with the Application Logs, helps you
    to drill down into issues and mitigate them all using the Elastic Beanstalk Console
    itself.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康**：在你的环境中，最重要的配置项之一就是健康部分，它允许你为应用程序配置健康检查URL，并使用安装在系统上的特殊代理启用详细的健康报告。这个代理监控你的EC2实例的健康状况，捕获应用程序级别的健康指标，并将其直接发送到Beanstalk进行进一步分析。这与应用程序日志结合，帮助你深入排查问题并使用Elastic
    Beanstalk控制台解决所有问题。'
- en: '**NOTE**: You can find the agent''s logs in your instance''s `/var/log/healthd/daemon.log` file.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注意**：你可以在实例的`/var/log/healthd/daemon.log`文件中找到代理的日志。'
- en: 'Apart from the Configuration tab, Elastic Beanstalk also provides you with
    a Logs option, where you can request either the complete set of logs or the last
    100 lines. You can download each instance''s log files using this particular section
    as well:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了配置选项卡外，Elastic Beanstalk还为你提供了日志选项，在这里你可以请求完整的日志集或最后100行日志。你也可以通过这个部分下载每个实例的日志文件：
- en: '![](img/226ddc8a-a6b4-41c3-9abf-bac3a7656abf.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/226ddc8a-a6b4-41c3-9abf-bac3a7656abf.png)'
- en: 'And last but not least, you can also leverage the Monitoring and Alarms sections
    to view the overall Environment Health, as well as other important metrics, such
    as CPU Utilization, Max Network In, and Max Network Out. To configure the alarms
    for individual graphs, all you need to do is select the alarm icon adjoining each
    of the graphs present in the Monitoring dashboard, as shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，你还可以利用监控和警报部分查看整体环境健康状态，以及其他重要指标，如CPU利用率、最大网络流入和最大网络流出。要为单个图表配置警报，你只需选择每个图表旁边的警报图标，如下图所示：
- en: '![](img/18a5bd4d-8131-440d-b8b1-22e25e9e9786.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18a5bd4d-8131-440d-b8b1-22e25e9e9786.png)'
- en: A corresponding Add Alarm widget will pop up, using which you can configure
    the alarm's essentials, such as its Name, the Period, and Threshold settings,
    as well as the required Notification settings.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 会弹出一个相应的添加警报小部件，使用它你可以配置警报的基本信息，如名称、周期和阈值设置，以及所需的通知设置。
- en: In this way, you can use the environment dashboard and the EB CLI together to
    perform daily application administration and monitoring tasks. In the next section,
    we will be leveraging this environment dashboard to clone and create a new production
    environment from the existing development environment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，你可以结合使用环境仪表板和EB CLI来执行日常的应用程序管理和监控任务。在下一节中，我们将利用这个环境仪表板，从现有的开发环境克隆并创建一个新的生产环境。
- en: Cloning environments
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克隆环境
- en: 'With the development environment all set and working, it is now time to go
    ahead and create a production environment. Now, technically, you could repeat
    all the processes that we followed earlier for the development environment creation,
    and that would work out well indeed, but Elastic Beanstalk offers a really simple
    and minimalistic approach to creating new environments while using an existing
    one as a template. The process is call cloning, and it can be performed in a few
    simple clicks, using the environment dashboard itself:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发环境已设置并正常运行后，接下来就是创建生产环境的时间了。从技术上讲，你可以重复我们之前为创建开发环境所遵循的所有步骤，这样也能顺利工作，但Elastic
    Beanstalk提供了一种非常简单和简洁的方法来使用现有环境作为模板创建新环境。这个过程叫做克隆，可以通过环境仪表板本身进行简单的几次点击完成：
- en: 'To get started, simply select the Actions tab from the environment dashboard
    page and select the option Clone Environment. This will bring up the New Environment page,
    as shown here:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，只需从环境仪表板页面选择“操作”选项卡，然后选择“克隆环境”选项。这将打开“新环境”页面，如下所示：
- en: '![](img/d47e7b6e-ef3c-4f6f-859d-66c3e59fc31a.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d47e7b6e-ef3c-4f6f-859d-66c3e59fc31a.png)'
- en: Here, start off by providing an Environment name for the new environment, followed
    by a unique prefix for the Environment URL. Remember, this is a clone from the
    earlier development environment that we created, so, by default, it will contain
    the same Amazon Linux instance with the WordPress application that we pushed in
    during the Dev stages. This is not a concern as we can always use the EB CLI to
    push the production version of the application as well. But for now, fill in the
    rest of the details and select the Clone option.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，首先为新环境提供一个环境名称，然后为环境URL添加一个独特的前缀。记住，这实际上是我们之前创建的开发环境的克隆，因此，默认情况下，它将包含相同的Amazon
    Linux实例和我们在开发阶段推送的WordPress应用程序。这不成问题，因为我们始终可以使用EB CLI将生产版本的应用程序推送到环境中。不过现在，请填写其余的详细信息并选择“克隆”选项。
- en: The new environment undergoes the same initialization and creation process as
    it did earlier, creating separate security groups, assigning a new Elastic IP,
    and launching a new EC2 instance with the same application version that was pushed
    in the development environment.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 新环境经历了与之前相同的初始化和创建过程，创建了独立的安全组，分配了一个新的弹性IP，并启动了一个新的EC2实例，该实例与开发环境中推送的应用程序版本相同。
- en: Once completed, you should now have two very similar environments up and running
    side by side, but isn't a production environment supposed to be more than just
    one instance? Well, that's precisely what we will be configuring in the next section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，你现在应该有两个非常相似的环境并排运行，但生产环境难道不应该不仅仅是一个实例吗？嗯，这正是我们将在下一部分配置的内容。
- en: Configuring the production environment
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置生产环境
- en: 'Now that we have had a good tour of the environment dashboard, it should be
    relatively easy to configure the production environment as per our requirements.
    Let''s start off by increasing the instance count for our production environment:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对环境仪表板有了全面了解，现在根据我们的需求配置生产环境应该相对容易。让我们从增加生产环境的实例数量开始：
- en: Select the Scaling configuration tile from the newly created production environment's
    configuration dashboard and change the Environment type from Single instance to
    Load balancing, auto scaling. The instance count settings as well as the auto
    scaling features, will only be available once the new changes are reflected in
    the environment. Click Apply once done.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从新创建的生产环境的配置仪表板中选择“扩展配置”选项卡，将环境类型从“单实例”更改为“负载均衡，自动扩展”。实例数量设置以及自动扩展功能，只有在新更改反映到环境中后才会生效。完成后，点击“应用”。
- en: To verify that the changes have indeed been propagated, you can copy the newly
    created Elastic Load Balancer DNS name into a web browser and verify that you
    can access the WordPress getting started wizard.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证更改是否已传播，你可以将新创建的弹性负载均衡器DNS名称复制到网页浏览器中，验证是否能够访问WordPress入门向导。
- en: Next, you can also change the default instance type from t1.micro to something
    a bit more powerful, such as t2.medium or t2.large, using the Instances configuration
    section.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你还可以通过实例配置部分将默认实例类型从t1.micro更改为更强大的类型，如t2.medium或t2.large。
- en: Once your major settings are done, you will also require a new RDS backed MySQL
    database for your production instances. So go ahead and create a new MySQL DB
    instance using the RDS Management Console at [https://console.aws.amazon.com/rds/](https://console.aws.amazon.com/rds/).
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦主要设置完成，你还需要为你的生产实例创建一个新的RDS支持的MySQL数据库。所以，去[https://console.aws.amazon.com/rds/](https://console.aws.amazon.com/rds/)使用RDS管理控制台创建一个新的MySQL数据库实例吧。
- en: For handling production-grade workloads, I would strongly recommend enabling
    multi-AZ deployment for your MySQL database.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理生产级负载，我强烈建议为你的MySQL数据库启用多可用区（multi-AZ）部署。
- en: Remember to make a note of the database name, the database endpoint, as well
    as the username and password, before moving on to the next steps!
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续执行下一步之前，记得记录下数据库名称、数据库终端节点、用户名和密码！
- en: 'Next, using the production environment URL, launch your WordPress site and
    fill in the required database configuration details, as depicted in the following
    screenshot:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用生产环境的URL，启动你的WordPress网站，并填写所需的数据库配置详细信息，如下图所示：
- en: '![](img/97d1e186-b5c7-43ba-b773-439d1925c161.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97d1e186-b5c7-43ba-b773-439d1925c161.png)'
- en: This method of configuring database settings is not ideal, especially when it
    comes to a production environment. Alternatively, Elastic Beanstalk provides you
    with the concept of environment properties that enable you to pass key-value pairs
    of configurations directly to your application.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置数据库设置的方法并不理想，特别是在生产环境中。作为替代方案，Elastic Beanstalk为你提供了环境属性的概念，使你能够将配置的键值对直接传递给应用程序。
- en: To do so, you need to select the Configuration section from your Production
    dashboard, and within that, opt to modify the Software configuration.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，你需要从生产仪表盘中选择配置部分，并在其中选择修改软件配置。
- en: 'Here, under the Environment Properties section, fill out the required production
    database variables, as depicted in the following screenshot:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此，在“环境属性”部分，填写所需的生产数据库变量，如下图所示：
- en: '![](img/e4088fed-0063-4733-9558-195b8706306f.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4088fed-0063-4733-9558-195b8706306f.png)'
- en: But where do these variables actually end up getting configured? That's where
    we leverage the WordPress configuration file called `wp-config.php` and configure
    all these variables into it. Upon loading, PHP will read the values of each of
    these properties from the environment property that we just set in Elastic Beanstalk.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这些变量最终会被配置到哪里呢？这就是我们利用名为`wp-config.php`的WordPress配置文件，将所有这些变量配置到文件中的地方。加载时，PHP将从我们刚刚在Elastic
    Beanstalk中设置的环境属性中读取这些属性的值。
- en: 'Open your `wp-config.php` file using your favorite text editor, and change
    the database section, as shown in the following snippet:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的文本编辑器打开`wp-config.php`文件，并更改数据库部分，如下代码片段所示：
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the file and push the newly modified code into the production environment
    using the `eb deploy` command. Simple isn't it?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并使用`eb deploy`命令将修改后的代码推送到生产环境。简单吧？
- en: 'Here''s what the new environment should look like after the deployments:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，新的环境应该是这样的：
- en: '![](img/12aff08a-84b9-414c-8f64-084f14d5bf7f.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12aff08a-84b9-414c-8f64-084f14d5bf7f.png)'
- en: Looking good so far, right? With this done, your WordPress setup should be able
    to scale in and out efficiently without you having to worry about the load balancing
    needs or even about the MySQL instances. Additionally, now that we have configured
    the instances to fetch the database information from Elastic Beanstalk itself,
    we no longer have to worry about what will happen to our site if the underlying
    WordPress instances restart or terminate. This is exactly what we set out to do
    in the first place, but there's still a small catch. What about the content files
    that you will eventually upload on your WordPress website, such as images and
    videos? These uploads will end up getting stored on your instance's local disks,
    and that's a potential issue as you may end up losing all of your data if that
    instance gets terminated by the auto-scaling policies. Luckily for us, AWS has
    a solution to this problem, and that's exactly what we are going to learn about
    next.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止看起来不错，对吧？完成这些设置后，你的 WordPress 配置应该能够高效地进行伸缩扩展，你不再需要担心负载均衡需求，甚至不用担心 MySQL
    实例。此外，既然我们已经配置了实例从 Elastic Beanstalk 本身获取数据库信息，那么当底层的 WordPress 实例重启或终止时，我们也不必再担心网站会发生什么。这正是我们最初要做的事情，但还是有一个小问题。那就是，你最终会在
    WordPress 网站上上传的内容文件，比如图片和视频呢？这些上传的文件最终会被存储在实例的本地磁盘上，这可能会成为一个问题，因为如果该实例被自动扩展策略终止，你可能会丢失所有数据。幸运的是，AWS
    提供了一个解决方案来应对这个问题，这也是我们接下来要学习的内容。
- en: Introducing Amazon Elastic File System
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Amazon 弹性文件系统
- en: AWS, for one, has really put in a lot of innovation and effort to come up with
    some really awesome services, and one such service that I personally feel has
    tremendous potential is the Elastic File System. Why is it so important? Well,
    to answer this question, we need to take a small step back and understand what
    type of storage services AWS offers at the moment.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 确实投入了大量创新和努力，推出了一些非常棒的服务，而我个人认为具有巨大潜力的一项服务就是弹性文件系统。为什么它如此重要呢？为了回答这个问题，我们需要稍微回顾一下，了解
    AWS 目前提供的存储服务类型。
- en: First up, we have the object stores in the form of Amazon S3 and Amazon Glacier.
    Although virtually infinite in scaling capacity, both these services are known
    to be a tad slower performance-wise compared to the EC2 instance storage and the
    EBS. This is bound to happen, as the likes of EBS is specially designed to provide
    fast and durable block storage, but, as a trade-off, you cannot extend an EBS
    volume across multiple Availability Zones. Elastic File System or EFS, on the
    other hand, provides a mix of both worlds by giving you the performance of an
    EBS volume combined with the availability of the same volume across multiple AZs,
    and that is really awesome! To summarize, EFS is a massively scalable file storage
    system that allows you to mount multiple EC2 instances to it simultaneously across
    AZs, without having to worry about the durability, availability, or performance
    of the system.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有两种对象存储服务，分别是 Amazon S3 和 Amazon Glacier。虽然这两项服务在扩展能力上几乎是无限的，但与 EC2 实例存储和
    EBS 相比，这些服务的性能稍显逊色。这是不可避免的，因为像 EBS 这样的服务是专门设计来提供快速且持久的块存储，但作为权衡，你不能跨多个可用区扩展 EBS
    卷。另一方面，弹性文件系统（EFS）通过结合 EBS 卷的性能和跨多个 AZ 提供相同卷的可用性，提供了两者的优点，这真是太棒了！总结来说，EFS 是一个大规模可扩展的文件存储系统，它允许你同时将多个
    EC2 实例挂载到它上面，跨 AZ 使用，而无需担心系统的耐用性、可用性或性能。
- en: How does EFS actually work, you ask? Well, that's exactly what we will learn
    about in the next section.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你问 EFS 是如何工作的？嗯，这正是我们将在下一节中学习的内容。
- en: How does it work?
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: EFS works in a very simple and minimalistic way, so as to reduce the amount
    of configurations that you need to perform and manage as an end user. To start
    off, EFS provides you with the ability to create one or more filesystems. Each
    filesystem can be mounted to an instance or instances, and data can be read as
    well as written to them. Mounting the filesystem requires your instances to have
    support for the Network File System version 4.0 and 4.1 (NFSv4) protocol. Most
    Linux operating systems come with the necessary support, however, you may have
    to install the NFS client on these machines if it is not there to connect to an
    EFS. So, how is this useful for our WordPress application? Well, for starters,
    once you have an Amazon Elastic File System in place, you can have multiple EC2
    instances connect to it simultaneously and use it as a scalable shared drive that
    can extend even to petabytes if the need arises. Also, the Amazon Elastic File
    System does not have any downtime or repercussions if your EC2 instances reboot
    or even terminate; the data will persist on the filesystem until you manually
    delete it or terminate the filesystem itself. There are some rules and limitations,
    however, when it comes to using the Elastic File System, which you ought to keep
    in mind.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: EFS的工作方式非常简单和极简，以减少作为最终用户需要执行和管理的配置量。首先，EFS提供了创建一个或多个文件系统的功能。每个文件系统可以挂载到一个或多个实例，数据可以读取和写入到这些实例中。挂载文件系统要求您的实例支持网络文件系统版本4.0和4.1（NFSv4）协议。大多数Linux操作系统都提供必要的支持，然而，如果这些机器上没有安装NFS客户端，您可能需要安装它才能连接到EFS。那么，这对我们的WordPress应用有什么用呢？首先，一旦您有了Amazon弹性文件系统，您可以让多个EC2实例同时连接到它，并将其用作一个可扩展的共享驱动器，如果需要，它甚至可以扩展到PB级别。此外，Amazon弹性文件系统在EC2实例重启甚至终止时不会出现任何停机或后果；数据将保存在文件系统中，直到您手动删除它或终止文件系统本身。然而，在使用弹性文件系统时，有一些规则和限制需要注意。
- en: You can mount an Amazon EFS on instances in only one VPC at a time, and both
    the filesystem and the VPC must be in the same AWS region.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您一次只能将Amazon EFS挂载到一个VPC中的实例，并且文件系统和VPC必须位于同一AWS区域内。
- en: 'Once the filesystem is created, you will be provided with a DNS name for identifying
    it within your region. Additionally, you will also be required to create one or
    more supporting mount targets within your VPC, which basically acts as a connectivity
    medium between your instances present within a subnet and the filesystem. Here
    is a representational diagram of how an Elastic File System interacts with EC2
    instances using mount targets:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统创建后，系统将为您提供一个DNS名称，用于在您的区域内标识它。此外，您还需要在VPC内创建一个或多个支持挂载目标，这基本上充当了位于子网内的实例与文件系统之间的连接介质。以下是一个表示弹性文件系统如何通过挂载目标与EC2实例交互的示意图：
- en: '![](img/6682c593-3ea9-46d8-8416-31728d059ece.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6682c593-3ea9-46d8-8416-31728d059ece.png)'
- en: As an administrator, you can create one mount target in each Availability Zone
    present in a given region. You can also create a mount target in each of the subnets
    presents within a particular VPC, so that all EC2 instances in that VPC share
    that mount target. In the next section, we will be exploring a few simple steps
    required for setting up your own Elastic File System.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员，您可以在给定区域内的每个可用区创建一个挂载目标。您还可以在特定VPC中的每个子网中创建挂载目标，以便该VPC中的所有EC2实例共享该挂载目标。在接下来的部分，我们将介绍设置您自己的弹性文件系统所需的一些简单步骤。
- en: Creating an Elastic File System
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建弹性文件系统
- en: 'Setting up your own Elastic File System is as easy as it gets! You can start
    off by launching the Elastic File System dashboard from the AWS Management Console,
    or alternatively, by visiting the URL [https://console.aws.amazon.com/efs/](https://console.aws.amazon.com/efs/):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 设置您自己的弹性文件系统非常简单！您可以通过从AWS管理控制台启动弹性文件系统仪表板开始，或者访问以下URL [https://console.aws.amazon.com/efs/](https://console.aws.amazon.com/efs/)：
- en: On the EFS landing page, select the option Create file system to get started.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在EFS登录页面上，选择“创建文件系统”选项以开始。
- en: 'In the Configure file system access page, you can start off by first selecting
    the VPC you want to associate the filesystem with. Remember, you can have multiple
    filesystems per VPC, however, they cannot be extended across regions:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“配置文件系统访问”页面中，您可以首先选择要与文件系统关联的VPC。请记住，您可以为每个VPC配置多个文件系统，但它们不能跨区域扩展：
- en: '![](img/0662b214-a314-49d2-8558-f52844d7ce72.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0662b214-a314-49d2-8558-f52844d7ce72.png)'
- en: With the VPC selected, the associated subnets will automatically populate themselves
    based on the Availability Zones that they are a part of in the Create mount targets section.
    Here, you can select the appropriate subset that you wish to associate with the
    Elastic File System, along with its corresponding security group. In my case,
    I've selected the individual public subnets from my VPC, as the WordPress application
    instances will be deployed here, and these instances will require access to the
    filesystem for storing the images and other content.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择了 VPC 后，关联的子网将自动根据它们所在的可用区，在“创建挂载目标”部分填充。在这里，您可以选择要与 Elastic File System
    关联的适当子集及其对应的安全组。在我的案例中，我选择了 VPC 中的单个公共子网，因为 WordPress 应用程序实例将在这里部署，这些实例需要访问文件系统来存储图像和其他内容。
- en: With the fields populated, select the Next Step option to proceed.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写完字段后，选择“下一步”选项继续。
- en: 'The next step is all about Configuring optional settings for your Elastic File
    System. Here, you can Add tags to describe your filesystem and select the appropriate
    Performance mode for the filesystem, based on your requirements. Today, EFS provides
    two modes: the General Purpose, which is ideal for running the majority of workloads,
    and a Max I/O mode, which is specifically designed for when your environment needs
    to scale to tens of thousands of EC2 instances, all connecting to this single
    filesystem itself. Max I/O mode provides much better performances compared to
    General Purpose, however, there is the chance of a slightly higher latency when
    handling file operations here.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是配置您 Elastic File System 的可选设置。在这里，您可以为文件系统添加标签以描述文件系统，并根据您的需求选择适当的性能模式。今天，EFS
    提供了两种模式：通用目的模式，适用于大多数工作负载，以及最大 I/O 模式，专为环境需要扩展到成千上万的 EC2 实例并都连接到这个单一文件系统的情况设计。与通用目的模式相比，最大
    I/O 模式提供了更好的性能，但在处理文件操作时，可能会出现略微更高的延迟。
- en: 'The final option left is Enable encryption, which, if checked, will leverage
    a KMS key from your existing AWS account and encrypt all the data stored in the
    filesystem at rest:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的选项是启用加密，选中后，将利用您现有 AWS 账户中的 KMS 密钥对存储在文件系统中的所有数据进行加密：
- en: '![](img/eb96f5a2-6aa0-41ae-b364-2f9b3c97e7f0.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb96f5a2-6aa0-41ae-b364-2f9b3c97e7f0.png)'
- en: Complete the EFS setup process by reviewing the configuration changes on the
    Review and create page, and finally, click on Create to enable the filesystem.
    This process takes a couple of minutes, but once completed, you will be shown
    the DNS name of your newly created filesystem. Make a note of this name as you
    will be required to reference it in our Elastic Beanstalk environment as well.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“审查并创建”页面上查看配置更改以完成 EFS 设置过程，最后点击“创建”以启用文件系统。此过程需要几分钟，一旦完成，您将看到新创建文件系统的 DNS
    名称。请记下此名称，因为在我们的 Elastic Beanstalk 环境中也需要引用它。
- en: So far, so good! We have our production environment up and running on Elastic
    Beanstalk, and now we have created a simple yet powerful Elastic File System.
    In the next section, we will look at how you can integrate the two services for
    use by WordPress using Elastic Beanstalk's configuration files concept.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利！我们已经在 Elastic Beanstalk 上启动并运行了我们的生产环境，现在我们创建了一个简单但功能强大的 Elastic
    File System。在下一部分，我们将探讨如何通过 Elastic Beanstalk 的配置文件概念，将这两个服务集成到 WordPress 中。
- en: Extending EFS to Elastic Beanstalk
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 EFS 到 Elastic Beanstalk
- en: Although Elastic Beanstalk takes complete care of your environment's provisioning
    and configuration, there are still methods which you can used to control the advanced
    configuration of your environment, such as integrating your application with the
    likes of other AWS services, such as ElastiCache, or even EFS for that matter.
    This can be performed using a variety of services provided by Beanstalk itself;
    for example, by leveraging Beanstalk's Saved configurations, or even using Environment
    Manifest (YML) files. But in this particular section, we will be concentrating
    on integrating the EFS service with our WordPress application using specialized
    Configuration Files called `.ebextensions`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Elastic Beanstalk 完全负责您的环境的配置和管理，但您仍然可以通过一些方法控制环境的高级配置，例如将应用程序集成到其他 AWS 服务（如
    ElastiCache，甚至 EFS）。这可以通过 Beanstalk 本身提供的各种服务来实现；例如，通过利用 Beanstalk 的已保存配置，或使用环境清单（YML）文件。但在本节中，我们将重点介绍如何使用专门的配置文件
    `.ebextensions`，将 EFS 服务与我们的 WordPress 应用程序集成。
- en: These `.ebextensions` are simple YAML formatted documents ending with a `.config` file
    extension. Once the `.ebextensions` file is created, you need to place this in
    the root folder of your application's source code, within a special directory
    named `.ebextensions`, and finally, deploy your application over to Beanstalk.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`.ebextensions`是简单的YAML格式文档，文件扩展名以`.config`结尾。一旦创建了`.ebextensions`文件，你需要将其放置在应用程序源代码的根文件夹中，在一个名为`.ebextensions`的特殊目录内，最后，将你的应用程序部署到Beanstalk。
- en: 'These configuration files are so powerful that you don''t even have to connect
    to your instances through SSH to issue configuration commands. You can configure
    your environment entirely from your project source by using `.ebextensions`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置文件非常强大，以至于你甚至不需要通过SSH连接到实例来发出配置命令。你可以通过使用`.ebextensions`，完全从项目源中配置你的环境：
- en: 'To start using `.ebextensions` for your WordPress setup, first we need to create
    a folder named `.ebextensions` within the root of your WordPress application.
    Type the following command from your Dev instance:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始在WordPress设置中使用`.ebextensions`，首先我们需要在WordPress应用程序的根目录中创建一个名为`.ebextensions`的文件夹。在你的开发实例中输入以下命令：
- en: '[PRE8]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new file with an extension of `.config`, and paste the following contents
    into it:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个扩展名为`.config`的新文件，并将以下内容粘贴到其中：
- en: '[PRE9]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can find the complete copy of the previous code at [https://github.com/yoyoclouds/Administering-AWS-Volume2](https://github.com/yoyoclouds/Administering-AWS-Volume2).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/yoyoclouds/Administering-AWS-Volume2](https://github.com/yoyoclouds/Administering-AWS-Volume2)找到之前代码的完整副本。
- en: 'This file causes Elastic Beanstalk to mount the newly created EFS volume on
    the instance''s `/mnt/efs` directory, and also removes the `wp-content/uploads`,
    directory if it exists, and symlinks it to `/mnt/efs/uploads` so that it persists
    and is shared between instances:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件会使Elastic Beanstalk将新创建的EFS卷挂载到实例的`/mnt/efs`目录，并且如果存在，会删除`wp-content/uploads`目录，并将其符号链接到`/mnt/efs/uploads`，以便在实例之间共享并持久化：
- en: Once the file is created, use the `eb deploy` command once again to push the
    application directory and the newly added `.ebextensions` directory to your production
    environment.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件创建完成后，再次使用`eb deploy`命令将应用程序目录和新添加的`.ebextensions`目录推送到生产环境中。
- en: 'Last but not least, sign in to your production environment and select the Configuration option
    from the *environment* dashboard. Here, select the Software configuration tile
    and add the following key-value pair into the Environment Properties section,
    as shown:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，登录到你的生产环境，选择*环境*仪表板中的配置选项。在这里，选择软件配置图块，并在环境属性部分添加以下键值对，如下所示：
- en: '![](img/b26864ef-9b47-4a11-ba5f-a7ccb380794b.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b26864ef-9b47-4a11-ba5f-a7ccb380794b.png)'
- en: Here, the EFS_NAME has to have the newly created EFS filesystem's DNS name as
    its value. This is the same DNS name that we copied a while back once the EFS
    was created.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，EFS_NAME的值必须是新创建的EFS文件系统的DNS名称。这与我们创建EFS时复制的DNS名称相同。
- en: Once the deployment changes states and is made available, select the environment
    URL and verify whether the WordPress configurations are all working as intended
    or not. If you have made it this far, then you should have a really awesome, highly
    available, scalable, WordPress site up and running! Awesome, isn't it?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署状态发生变化并且可以使用，选择环境URL并验证WordPress的配置是否按照预期工作。如果你已经做到这一点，那么你应该已经拥有一个非常棒的、高可用、可扩展的WordPress站点并正在运行！棒极了，不是吗？
- en: Planning your next steps
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划你接下来的步骤
- en: Well, we have covered a lot of new features and services in this chapter, however,
    there are still a few things that I would recommend you try out on your own. First
    up is Elastic Beanstalk's advanced configurations.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，本章我们已经介绍了许多新功能和服务，但我仍然有几件事推荐你自己尝试。首先是Elastic Beanstalk的高级配置。
- en: As mentioned earlier, Beanstalk provides a lot of different ways for you to
    customize and extend your application with other AWS services using a variety
    of built-in services such as `.ebextensions`, which we covered in the previous
    section. One similar service that can be used to configure a Beanstalk environment's
    configuration is called the **environment manifest** file. This is a simple YAML
    file containing your environment's manifest configurations, such as the environment
    name, solution stack, and environment links to use when creating your environment.
    The file is placed in your application's root directory and is generally named
    `env.yaml`. One of the key uses of this file is to provide support for environment
    links that enable you to connect two application environments using simple names
    as references.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Beanstalk为您提供了多种方式，可以通过各种内建服务（如`.ebextensions`，我们在前一节中已介绍过）来自定义和扩展您的应用并与其他AWS服务进行集成。另一个可以用来配置Beanstalk环境的服务是被称为**环境清单**（environment
    manifest）文件的配置。这是一个简单的YAML文件，包含了您的环境清单配置，例如环境名称、解决方案栈和在创建环境时使用的环境链接。该文件位于应用程序的根目录下，通常命名为`env.yaml`。此文件的一个关键用途是提供对环境链接的支持，允许您使用简单的名称作为引用连接两个应用环境。
- en: For example, if you have a website as a front-ending application that accepts
    certain inputs from the users, and another application that processes these inputs,
    you can create a link between the worker and the frontend application using this
    `env.yml` file. On invocation, the link between these two environments is set
    up and managed automatically by Beanstalk.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有一个网站作为前端应用，接受用户的某些输入，另一个应用处理这些输入，您可以通过这个`env.yml`文件在工作者和前端应用之间创建一个链接。在调用时，这两个环境之间的链接将由Beanstalk自动设置和管理。
- en: 'Here''s a small snippet of the `env.yml` file''s contents:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`env.yml`文件内容的一个小片段：
- en: '[PRE10]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can learn more about *Environment Manifest (env.yaml)* at [https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过[https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html)了解更多关于*环境清单（env.yaml）*的信息。
- en: Alternatively, Beanstalk also provides you with an easier configuration saving
    mechanism, which you can invoke using either the environment dashboard or the
    EB CLI. This is called a Saved Configuration and can be enabled by selecting the
    Save configuration option under the Actions tab in your environment dashboard.
    Once applied, the environment configurations accept any custom configurations
    that are stored in an S3 bucket as an object. You can even download this configuration
    object and create clones of your environment using the EB CLI. To learn more about
    saved configurations, check out this URL: [http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-configuration-savedconfig.html](http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-configuration-savedconfig.html).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，Beanstalk还为您提供了一个更简便的配置保存机制，您可以通过环境仪表板或EB CLI来调用它。这被称为保存的配置，可以通过在环境仪表板的操作（Actions）选项卡中选择“保存配置”（Save
    configuration）来启用。一旦应用，这些环境配置将接受任何存储在S3存储桶中的自定义配置作为对象。您甚至可以下载这个配置对象，并使用EB CLI创建环境的克隆。要了解更多关于保存配置的信息，请查看这个链接：[http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-configuration-savedconfig.html](http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-configuration-savedconfig.html)。
- en: Another very interesting thing worth exploring is the support for Docker containers
    provided in Elastic Beanstalk! As you may already be aware, Docker containers
    are the next big thing when it comes to creating microservices-backed applications
    that can be deployed and scaled at tremendous scale. The Docker platform for Elastic
    Beanstalk has two generic configurations, a single container and multi-container
    option, and also provides several preconfigured container images to choose from.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得探索的非常有趣的功能是Elastic Beanstalk提供的对Docker容器的支持！如您所知，Docker容器是创建微服务支持的应用程序的下一代重要技术，可以在巨大的规模上进行部署和扩展。Elastic
    Beanstalk的Docker平台有两种通用配置，单容器和多容器选项，并且提供了几个预配置的容器镜像供您选择。
- en: From an Elastic File System perspective, one key aspect that is worth reading
    and exploring is the filesystem's overall performance considerations. This documentation
    especially highlights the different performance levels and use cases compared
    to EBS-provisioned IOPS volumes. The document also provides some keen insights
    and considerations for how to maximize the filesystem's performance. You can check
    out the documentation at [http://docs.aws.amazon.com/efs/latest/ug/performance.html](http://docs.aws.amazon.com/efs/latest/ug/performance.html).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 从弹性文件系统的角度来看，一个值得阅读和探索的关键方面是文件系统的整体性能考虑。本文件特别突出了与EBS提供的IOPS卷相比，不同的性能级别和使用案例。文档还提供了一些深入的见解和建议，帮助最大化文件系统的性能。你可以查看文档：[http://docs.aws.amazon.com/efs/latest/ug/performance.html](http://docs.aws.amazon.com/efs/latest/ug/performance.html)。
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So, here we are. Yet another chapter comes to an end! But, before we move on
    to the next chapter, here's a quick round up of the things we have learned so
    far.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们到了这里。又一章结束了！不过，在我们进入下一章之前，先快速回顾一下我们到目前为止学到的内容。
- en: We started off with a quick introduction to Amazon Elastic Beanstalk, followed
    by a dive into its concepts and terminologies. Then we created a simple development
    environment for our WordPress application using the Elastic Beanstalk management
    console and the EB CLI. Along the way, we also learnt how to deploy the application
    to a specific environment using the EB CLI, and finally, learned how to quickly
    clone an environment and configure it for handling production workloads. Last
    but not least, we explored and learned how to leverage Elastic File System to
    create a durable and scalable file sharing system to be used by our WordPress
    setup, and concluded the chapter with some key insights and next steps.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从简要介绍亚马逊Elastic Beanstalk开始，然后深入了解了它的概念和术语。接着，我们使用Elastic Beanstalk管理控制台和EB
    CLI为我们的WordPress应用创建了一个简单的开发环境。在这个过程中，我们还学会了如何使用EB CLI将应用部署到特定环境中，最后学会了如何快速克隆一个环境并配置它以处理生产工作负载。最后但同样重要的是，我们探索并学会了如何利用弹性文件系统创建一个持久且可扩展的文件共享系统，用于我们的WordPress设置，并以一些关键见解和下一步的计划结束了这一章。
- en: In the next chapter, we will be starting off by exploring some security services
    in the form of WAF and Shield. So, stay tuned—we still have a lot to learn!
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探索一些安全服务，例如WAF和Shield。敬请期待——我们还有很多东西要学习！
