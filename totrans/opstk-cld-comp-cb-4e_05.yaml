- en: Chapter 5. Nova – OpenStack Compute
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：Nova – OpenStack计算
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to OpenStack Compute
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack计算简介
- en: Adding a compute host using OpenStack-Ansible
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OpenStack-Ansible添加计算主机
- en: Suspending a host for maintenance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停主机进行维护
- en: Configuring Nova Scheduler to use host aggregates
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Nova调度器以使用主机聚合
- en: Creating a host aggregate
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建主机聚合
- en: Adding a compute host to a host aggregate
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向主机聚合添加计算主机
- en: Removing a compute host from a host aggregate
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从主机聚合中移除计算主机
- en: Adding metadata to a host aggregate
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向主机聚合添加元数据
- en: Deleting a host aggregate
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除主机聚合
- en: Creating an Availability Zone
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可用区
- en: Booting an instance into an Availability Zone
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将实例启动到可用区
- en: Removing an Availability Zone
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除可用区
- en: Creating a flavor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建flavor
- en: Deleting a flavor
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除flavor
- en: Setting CPU limits for a flavor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为flavor设置CPU限制
- en: Setting IOPS limits for a flavor
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为flavor设置IOPS限制
- en: Booting an instance
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动实例
- en: Stopping an instance
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止实例
- en: Deleting an instance
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除实例
- en: Live migration
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时迁移
- en: Snapshotting an instance
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照实例
- en: Booting an instance from a snapshot
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从快照启动实例
- en: Rescuing an instance
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 救援实例
- en: Shelving an instance
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搁置实例
- en: Reviewing the console logs
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看控制台日志
- en: Introduction to OpenStack Compute
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStack计算简介
- en: Compute services in OpenStack are provided by a project that goes by the name
    Nova. Nova is an API-driven system that manages physical and virtual compute resources
    in an OpenStack cloud, providing **Infrastructure as a Service** (**IaaS**). OpenStack
    operators, administrators, and users can leverage the Nova API to manage the life
    cycle of compute resources.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack中的计算服务由名为Nova的项目提供。Nova是一个基于API的系统，管理OpenStack云中的物理和虚拟计算资源，提供**基础设施即服务**（**IaaS**）。OpenStack的操作员、管理员和用户可以利用Nova
    API来管理计算资源的生命周期。
- en: 'Nova is primarily responsible for managing two resource types: **instances**,
    which are the running virtual machines, application containers, or even full bare-metal
    machines a user has requested, and **hosts**, that provide the hardware resources
    required by instances. In most circumstances, instances are synonymous to virtual
    machines.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Nova主要负责管理两种资源类型：**实例**，即用户请求的正在运行的虚拟机、应用程序容器，甚至是裸金属机器；和**主机**，即提供实例所需硬件资源的主机。在大多数情况下，实例就是虚拟机的同义词。
- en: 'It is important to make a distinction between two main features of Nova: the
    Nova API service (and associated services such as the `nova-scheduler`, `nova-conductor`,
    and `nova-placement`), which runs on our cluster of three controller nodes, and
    the `nova-compute` service, which runs on each compute host in our environment.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Nova的两个主要功能非常重要：Nova API服务（以及相关服务，如`nova-scheduler`、`nova-conductor`和`nova-placement`）运行在我们三个控制节点的集群上，而`nova-compute`服务则运行在我们环境中的每个计算主机上。
- en: In this chapter, we will first cover the administration of the physical host
    and Nova services, then the remainder of the chapter will take a task-centric
    approach to working with Nova. This means that the depth and detail on Nova features
    and functionality are beyond the scope of this book.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先介绍物理主机和Nova服务的管理，接下来，本章的其余部分将采用以任务为中心的方法来处理Nova。这意味着，关于Nova功能和特性的深度与细节超出了本书的范围。
- en: Adding a compute host using OpenStack-Ansible
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenStack-Ansible添加计算主机
- en: In order to run instances, OpenStack Compute needs to be aware of the physical
    resources on which to run the instances. As OpenStack has grown and matured over
    time, the process for adding a host has also grown with it. OpenStack-Ansible
    provides a very convenient and consistent method for adding new compute hosts
    which allows you to scale your environment as your needs grow. A compute host
    runs the `nova-compute` service and the hypervisor that spawns the appropriate
    instance type requested.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行实例，OpenStack计算需要知道在哪些物理资源上运行实例。随着OpenStack的成长和成熟，添加主机的过程也随之发展。OpenStack-Ansible提供了一种非常便捷且一致的方法来添加新的计算主机，这使得你可以在需求增长时扩展你的环境。计算主机运行`nova-compute`服务和启动适当实例类型的虚拟化程序。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In order to add a compute host to an OpenStack cluster using `openstack-ansible`,
    you will need the following information:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用`openstack-ansible`将计算主机添加到OpenStack集群中，您需要以下信息：
- en: The IP address of the host
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机的IP地址
- en: SSH access to the host
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问主机的SSH
- en: The SSH key from your deployment host
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署主机的SSH密钥
- en: Access to the deployment host
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问部署主机
- en: 'The values used in our example are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中使用的值如下：
- en: 'Compute host: `172.29.236.15`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算主机：`172.29.236.15`
- en: 'Deployment host: `controller-01.cook.book`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署主机：`controller-01.cook.book`
- en: We assume that your environment was already installed using OpenStack-Ansible
    as described in [Chapter 1](part0014_split_000.html#DB7S2-189e69df43a248268db97cde1b1a8e47
    "Chapter 1. Installing OpenStack with Ansible"), *Installing OpenStack with Ansible*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您的环境已经使用 OpenStack-Ansible 安装，如 [第1章](part0014_split_000.html#DB7S2-189e69df43a248268db97cde1b1a8e47
    "Chapter 1. Installing OpenStack with Ansible") 中所述，*使用 Ansible 安装 OpenStack*。
- en: How to do it…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'To install and configure an additional compute host using `openstack-ansible`,
    carry out the following steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `openstack-ansible` 安装和配置额外的计算主机，请执行以下步骤：
- en: 'From the *deployment host*, add the additional compute host to the `/etc/openstack_deploy/openstack_user_config.yml`
    file, as shown in the following example:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 *部署主机*，按以下示例将附加计算主机添加到 `/etc/openstack_deploy/openstack_user_config.yml` 文件中：
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run `setup-hosts.yml`, limiting the tasks to just `compute-03`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `setup-hosts.yml`，将任务限制为仅限 `compute-03`：
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Have Ansible gather facts about the new host:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让 Ansible 收集有关新主机的信息：
- en: '[PRE2]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Simply run `os-nova-install.yml` to install and configure `nova-compute` on
    our new compute host:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需运行 `os-nova-install.yml` 在我们的新计算主机上安装和配置 `nova-compute`：
- en: '[PRE3]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Should the `openstack-ansible` command fail, the `-v` flag can be used to increase
    verbosity to assist in troubleshooting. Adding `-v` multiple times will provide
    additional levels of detail.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 `openstack-ansible` 命令失败，可以使用 `-v` 标志增加详细信息以帮助进行故障排除。多次添加 `-v` 将提供额外的详细级别。
- en: 'Confirm the new hypervisor by running the following commands on any of the
    controller servers (as they run the utility container):'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何控制器服务器上运行以下命令以确认新的虚拟化主机（因为它们运行实用程序容器）：
- en: '[PRE4]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This should bring back output like the following:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回如下输出：
- en: '![How to do it…](img/00060.jpeg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00060.jpeg)'
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `/etc/openstack_deploy/openstack_user_config` file provides mappings of
    roles to hosts in our environment. Adding the IP address for `compute-03.cook.book`
    to the `compute_hosts` stanza, informs the `openstack-ansible` command to apply
    the packages, settings, and so forth to the new host. It also adds any required
    configuration to the remainder of your environment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/openstack_deploy/openstack_user_config` 文件提供了在我们的环境中将角色映射到主机的映射。向 `compute_hosts`
    部分添加 `compute-03.cook.book` 的 IP 地址，告知 `openstack-ansible` 命令将包、设置等应用到新主机。它还向您的其余环境添加任何所需的配置。'
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'A full discussion of the Openstack-Ansible playbooks is beyond the scope of
    this book. For additional information on the playbooks and how they operate, you
    can review their documentation here: [https://docs.openstack.org/project-deploy-guide/openstack-ansible/pike/](https://docs.openstack.org/project-deploy-guide/openstack-ansible/pike/)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不涵盖 Openstack-Ansible playbooks 的详细讨论范围。有关 playbooks 及其操作方式的更多信息，请参阅此处的文档：[https://docs.openstack.org/project-deploy-guide/openstack-ansible/pike/](https://docs.openstack.org/project-deploy-guide/openstack-ansible/pike/)
- en: Suspending a host for maintenance
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂停维护主机
- en: Often times a host needs to be taken offline to have memory replaced, an operating
    system upgraded, or other routine maintenance done. In order to ensure that running
    instances are not adversely affected, we use the `openstack compute service set`
    command.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 经常需要将主机脱机以更换内存、升级操作系统或执行其他常规维护任务。为了确保运行中的实例不受不利影响，我们使用 `openstack compute service
    set` 命令。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In order to place a host into maintenance mode, you will need the following
    information:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将主机置于维护模式，您将需要以下信息：
- en: The `openstack` command-line utility
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack` 命令行实用程序'
- en: The `nova` command-line utility
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nova` 命令行实用程序'
- en: An `openrc` file with admin credentials
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有管理员凭据的 `openrc` 文件
- en: The *name* of the host
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机的 *名称*
- en: 'The host we will put into maintenance mode is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将置于维护模式的主机如下：
- en: 'Compute host: `compute-03`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算主机：`compute-03`
- en: How to do it…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'To remove a hypervisor for maintenance, carry out the following steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除维护的虚拟化主机，请执行以下步骤：
- en: 'First, we will list the available hosts:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将列出可用的主机：
- en: '[PRE5]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will bring back an output like the following:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回如下输出：
- en: '![How to do it…](img/00061.jpeg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00061.jpeg)'
- en: 'Next, we will disable the service called `nova-compute` for the compute host,
    so we will specify:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将禁用称为 `nova-compute` 的服务以进行计算主机的操作，因此我们将指定：
- en: '[PRE6]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This command produces no output when successful.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当成功时，此命令不会产生任何输出。
- en: 'Verify that the host is disabled with the following command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令验证主机是否已禁用：
- en: '[PRE7]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This produces an output like the following:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成如下所示的输出：
- en: '![How to do it…](img/00062.jpeg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00062.jpeg)'
- en: 'Once the compute host has been disabled (meaning that it will no longer accept
    requests to run new instances), we can then migrate the running instances off
    this disabled compute host, onto other running compute hosts in our environment:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦计算主机被禁用（意味着它将不再接受请求运行新实例），我们就可以将正在运行的实例从这个禁用的计算主机迁移到我们环境中的其他计算主机上：
- en: '[PRE8]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This produces an output like the following:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成如下所示的输出：
- en: '![How to do it…](img/00063.jpeg)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00063.jpeg)'
- en: How it works…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In order to take a host offline for maintenance, Nova must first be told to
    no longer place new instances onto the host. This is done by disabling the `nova-compute`
    service on the compute host with the `openstack service set --disable [host] [service]`
    command. Once the host is marked disabled, and before powering it down for maintenance,
    the running instances need to be migrated off the host. The `nova host-evacuate-live
    [host]` command attempts to live-migrate all running instances on the specified
    host. It does this by asking Nova to reschedule the instances onto hosts with
    availability.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将主机下线进行维护，Nova 必须首先停止在该主机上放置新实例。可以通过使用 `openstack service set --disable [host]
    [service]` 命令禁用计算主机上的 `nova-compute` 服务来完成此操作。一旦主机被标记为禁用，在将其关闭进行维护之前，运行中的实例需要迁移到其他主机。`nova
    host-evacuate-live [host]` 命令尝试将所有正在运行的实例实时迁移到指定主机上。它通过要求 Nova 将实例重新调度到具有可用性的主机来实现这一点。
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In cases where instances are not using shared storage, the `--block-migrate`
    flag can be used to attempt to migrate the storage as well.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实例没有使用共享存储，可以使用 `--block-migrate` 标志尝试迁移存储。
- en: Configuring Nova Scheduler to use host aggregates
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Nova Scheduler 以使用主机聚合
- en: OpenStack Compute provides the ability to create logical groupings of hypervisors
    called **host aggregates**, which allow users and administrators to control what
    physical compute hosts can run the requested workload. Often times, host aggregates
    are used to organize hosts with similar attributes, such as SSD, performance,
    or hosts, that have passed a security audit such as HITRUST or PCI. A host can
    be assigned to multiple aggregates. That is, a host can be part of the PCI and
    SSD grouping. To enable host aggregate scheduling in Nova Scheduler, you must
    first enable host aggregate filtering in `nova.conf`. In `openstack-ansible`,
    Ansible manages this file, and we will use it to push the appropriate changes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 计算提供了创建名为 **主机聚合** 的逻辑分组的能力，这些分组允许用户和管理员控制哪些物理计算主机可以运行请求的工作负载。通常，主机聚合用于组织具有相似属性的主机，例如
    SSD、性能或已通过 HITRUST 或 PCI 安全审计的主机。一个主机可以被分配到多个聚合中。也就是说，一个主机可以同时属于 PCI 和 SSD 分组。为了在
    Nova Scheduler 中启用主机聚合调度，必须首先在 `nova.conf` 中启用主机聚合过滤。在 `openstack-ansible` 中，Ansible
    管理此文件，我们将使用它来推送适当的更改。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you are `root` on the deployment host. In most cases, this is the
    first infrastructure controller node, `infra01`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在部署主机上拥有 `root` 权限。在大多数情况下，这是第一个基础设施控制节点 `infra01`。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To enable scheduling for host aggregates, the following steps can be used:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用主机聚合的调度，可以使用以下步骤：
- en: 'On the deployment host, add the following line to the `/etc/openstack_deploy/user_variables.yml`
    file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署主机上，将以下行添加到 `/etc/openstack_deploy/user_variables.yml` 文件中：
- en: '[PRE9]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can then use Ansible to deploy the changes with the following commands:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以使用 Ansible 来部署以下命令进行更改：
- en: '[PRE10]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Log in to the `nova-scheduler` container and verify the change:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 `nova-scheduler` 容器并验证更改：
- en: '[PRE11]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The containers have unique UUIDs in their names. Look at the name of your containers
    with the following command:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 容器的名称中有唯一的 UUID。使用以下命令查看容器的名称：
- en: '[PRE12]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will bring back an output like the following if the word `Aggregate` was
    found, which shows that the change was successful:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果找到了 `Aggregate` 这个词，以下输出将被返回，表明更改已成功：
- en: '[PRE13]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Adding `AggregateInstanceExtraSpecsFilter` to `enabled_filters`, tells `nova-scheduler`
    to match the instance *flavor metadata* to that of the *host-aggregate metadata*.
    The `openstack-ansible` command is then used to propagate this change to the `/etc/nova/nova.conf`
    files within the OpenStack cloud environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 将`AggregateInstanceExtraSpecsFilter`添加到`enabled_filters`中，告知`nova-scheduler`将实例的*flavor元数据*与*主机聚合元数据*匹配。然后使用`openstack-ansible`命令将此更改传播到OpenStack云环境中的`/etc/nova/nova.conf`文件。
- en: Once enabled, and when a new instance is requested, the Nova Scheduler examines
    the metadata of the flavor associated with the request and attempts to match it
    with the metadata of host aggregates.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用，当请求新的实例时，Nova调度器会检查与请求相关的flavor元数据，并尝试将其与主机聚合的元数据匹配。
- en: Creating a host aggregate
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主机聚合
- en: After we have enabled OpenStack to allow host aggregate filtering, we can then
    proceed to create our host aggregates. This recipe will show you how to create
    a host aggregate.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 启用OpenStack以允许主机聚合过滤后，我们可以继续创建主机聚合。本食谱将向您展示如何创建主机聚合。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To create a host aggregate, you will need the following information:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建主机聚合，您将需要以下信息：
- en: The `openstack` command-line client
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭据的`openrc`文件
- en: A *name* for the aggregate
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合的*名称*
- en: For our example, the host aggregate will be named `cookbook-ssd-hosts`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，主机聚合将命名为`cookbook-ssd-hosts`。
- en: How to do it…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create a host aggregate, carry out the following steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建主机聚合，请执行以下步骤：
- en: 'First, we will list the current host aggregates:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将列出当前的主机聚合：
- en: '[PRE14]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This gives an output like the following:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生如下所示的输出：
- en: '![How to do it…](img/00064.jpeg)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00064.jpeg)'
- en: 'Next, we will create the aggregate:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建聚合：
- en: '[PRE15]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will bring back an output like the following:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回如下所示的输出：
- en: '![How to do it…](img/00065.jpeg)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00065.jpeg)'
- en: 'List the host aggregates:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出主机聚合：
- en: '[PRE16]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This gives an output like the following:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生如下所示的输出：
- en: '![How to do it…](img/00066.jpeg)'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00066.jpeg)'
- en: How it works…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In Nova, a **host aggregate** provides OpenStack administrators and operators
    a mechanism to group hosts based on arbitrary attributes that are later used for
    controlling what compute hosts service a user's request. Creating a host aggregate
    is done with the `openstack aggregate create name` command.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nova中，**主机聚合**为OpenStack管理员和操作员提供了一种机制，可以根据任意属性将主机分组，稍后用于控制哪些计算主机处理用户的请求。创建主机聚合是通过`openstack
    aggregate create name`命令完成的。
- en: Adding a compute host to a host aggregate
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将计算主机添加到主机聚合
- en: Before a host aggregate can be used by OpenStack Compute, you must first add
    hosts to the aggregate groups created.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenStack计算节点可以使用主机聚合之前，必须首先将主机添加到创建的聚合组中。
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To add a host to an aggregate, you will need the following information:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要将主机添加到聚合中，您将需要以下信息：
- en: The `openstack` command-line client
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭据的`openrc`文件
- en: The *name* or *ID* of the aggregate
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合的*名称*或*ID*
- en: The *name* or *ID* of the host
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机的*名称*或*ID*
- en: 'For the following example, the required values are as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下示例，所需的值如下：
- en: 'Host aggregate: `cookbook-ssd-hosts`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机聚合：`cookbook-ssd-hosts`
- en: 'Compute host: `compute-01`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算主机：`compute-01`
- en: How to do it…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following process is used to add a host to a host aggregate:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下过程用于将主机添加到主机聚合中：
- en: 'List hosts that are already in the aggregate:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出已经在聚合中的主机：
- en: '[PRE17]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will bring back an output like the following:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回如下所示的输出：
- en: '![How to do it…](img/00067.jpeg)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00067.jpeg)'
- en: 'Now add the specified compute host to this aggregate as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在按如下方式将指定的计算主机添加到该聚合中：
- en: '[PRE18]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will bring back an output like the following:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回如下所示的输出：
- en: '![How to do it…](img/00068.jpeg)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00068.jpeg)'
- en: How it works…
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `openstack aggregate host add` command associates a host with a host aggregate
    in the Nova database. This information is then used by the Nova Scheduler to make
    decisions about where to place an instance. If the metadata of the host aggregate
    matches that of the flavor or a particular project a user is in, an instance can
    be scheduled to a host within the aggregate.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`openstack aggregate host add`命令将主机与Nova数据库中的主机聚合关联。然后，Nova调度器将根据此信息做出决策，决定将实例放置在哪个主机上。如果主机聚合的元数据与flavor或用户所在项目的元数据匹配，则实例可以调度到该聚合内的主机上。'
- en: Removing a compute host from a host aggregate
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从主机聚合中移除计算主机
- en: If the properties of a host change, or the needs of an aggregate change, hosts
    can be removed from a host aggregate.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主机的属性发生变化，或者聚合的需求发生变化，主机可以从主机聚合中移除。
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To remove a host from a host aggregate, you will need the following information:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要从主机聚合中移除主机，你需要以下信息：
- en: The `openstack` command-line client
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭证的`openrc`文件
- en: The *name* or *ID* of the aggregate
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合的*名称*或*ID*
- en: The *name* or *ID* of the host
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机的*名称*或*ID*
- en: How to do it…
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'List hosts already in the aggregate with the following command:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令列出已在聚合中的主机：
- en: '[PRE19]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will bring back an output like the following. Note that the `hosts` field
    shows the compute hosts that are currently associated with the host aggregate:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回如下输出。请注意，`hosts`字段显示的是当前与主机聚合相关联的计算主机：
- en: '![How to do it…](img/00069.jpeg)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00069.jpeg)'
- en: 'To remove the compute host from this host aggregate, issue the following command:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从此主机聚合中移除计算主机，请发出以下命令：
- en: '[PRE20]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will bring back the following. Note that in the `hosts` field, `compute-01`
    is now missing:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回以下内容。请注意，在`hosts`字段中，`compute-01`现在已缺失：
- en: '![How to do it…](img/00070.jpeg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00070.jpeg)'
- en: How it works…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Removing a host from a host aggregate tells OpenStack Compute that the additional
    metadata filters no longer apply and the host can be scheduled as normal.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从主机聚合中移除主机会告知 OpenStack Compute，该额外的元数据过滤器不再适用，且该主机可以正常调度。
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Currently, running instances are unaffected by this operation. Operations on
    host aggregates affect new instance requests only.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，正在运行的实例不受此操作影响。主机聚合的操作仅影响新的实例请求。
- en: Adding metadata to a host aggregate
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向主机聚合添加元数据
- en: The power of host aggregates comes from the ability to use them to logically
    group hosts based on their properties. This can be used, for example, to enable
    load balancing, enforce physical separation, or keep instances that are insecure
    from being scheduled into a secured environment. We will show this by matching
    the **metadata** of a host aggregate with that of an instance flavor.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 主机聚合的强大之处在于能够基于主机的属性将其逻辑分组。这可以用于，例如，启用负载均衡、强制物理隔离，或者防止不安全的实例被调度到受保护的环境中。我们将通过将主机聚合的**元数据**与实例规格相匹配来展示这一点。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To add metadata to a host aggregate, you will need the following information:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要向主机聚合添加元数据，你需要以下信息：
- en: The `openstack` command-line client
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭证的`openrc`文件
- en: The *name* or *ID* of the aggregate
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合的*名称*或*ID*
- en: The *metadata* property to add
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要添加的*元数据*属性
- en: 'In our example, these values will be the following:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，这些值将如下所示：
- en: 'Host aggregate: `cookbook-ssd-hosts`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机聚合：`cookbook-ssd-hosts`
- en: 'Metadata: `ssd=true`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据：`ssd=true`
- en: How to do it…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To add metadata to host aggregate, use the following process:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要向主机聚合添加元数据，请按照以下过程操作：
- en: 'Show the existing metadata associated with an aggregate:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示与聚合相关联的现有元数据：
- en: '[PRE21]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will bring back an output like the following. Note that the `properties`
    field is blank if no metadata is associated yet:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回如下输出。请注意，如果尚未关联任何元数据，`properties`字段将是空白的：
- en: '![How to do it…](img/00071.jpeg)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00071.jpeg)'
- en: 'Add the metadata with the following command:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令添加元数据：
- en: '[PRE22]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This command displays no output when successful.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个命令在成功时不会显示任何输出。
- en: 'Now confirm the addition of the metadata with the following command again:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次使用以下命令确认元数据的添加：
- en: '[PRE23]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You will see that the `properties` field has been updated with this information:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到`properties`字段已更新，包含以下信息：
- en: '![How to do it…](img/00072.jpeg)'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00072.jpeg)'
- en: 'Now that we have set the metadata of our host aggregate, we can now associate
    this with a flavor so that when that flavor is specified by a user during the
    boot process, Nova will match the property to only the hosts within that host
    aggregate group. For example, we may have a flavor that is called `cookbook.ssd`
    that sets the expectation, which when a user select, the host will have SSDs available.
    This is the power of host aggregates. In the example here, `compute-02` has SSDs
    available as we have specified this in the host aggregate named `cookbook-ssd-hosts`.
    To take advantage of this, let''s create a new flavor called `cookbook.ssd` with
    the `ssd=true` property:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置了主机聚合的元数据，我们可以将其与配置关联，这样当用户在启动过程中指定该配置时，Nova将根据该属性仅匹配主机聚合组中的主机。例如，我们可能有一个名为`cookbook.ssd`的配置，它设定了预期，当用户选择时，该主机将提供SSD。这就是主机聚合的强大之处。在此示例中，`compute-02`主机提供SSD，因为我们在名为`cookbook-ssd-hosts`的主机聚合中指定了这一点。为了利用这一点，让我们创建一个新的配置，名为`cookbook.ssd`，并设置`ssd=true`属性：
- en: '[PRE24]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Creating flavors is described in more detail in the *Creating a flavor* recipe.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建配置的详细说明请参见*创建配置*示例。
- en: 'We now need to set the flavor **extra specs**, so that on choosing the flavor
    it is associated with the relevant host aggregate. For this, we use the `nova`
    command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要设置配置的**额外规格**，以便在选择配置时它与相关的主机聚合关联。为此，我们使用`nova`命令：
- en: '[PRE25]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You may need to use the UUID of the flavor instead of the name. If so, list
    the flavors with the following command and not the UUID of the `cookbook.ssd`
    flavor:'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可能需要使用配置的UUID，而不是名称。如果是这样，请使用以下命令列出配置，并使用`cookbook.ssd`配置的UUID：
- en: '[PRE26]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now when a user selects the `cookbook.ssd` flavor, unknown to them, the instance
    will be restricted to the hosts within the host aggregate group that has this
    key/value pair set.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当用户选择`cookbook.ssd`配置时，他们可能并不知道，该实例将仅限于具有此键值对的主机聚合组中的主机。
- en: How it works…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Metadata is specified as a key/value pairing, which is then associated with
    a host aggregate in the Nova database. These key/value pairs are arbitrary and
    can be defined to match a given environment. A host aggregate can have any number
    of key/value pairs stored; however, this may adversely affect instance scheduling
    because of potentially conflicting or confusing key/value pairs.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据以键/值对的形式指定，然后与Nova数据库中的主机聚合关联。这些键/值对是任意的，可以定义以适应特定环境。一个主机聚合可以存储任意数量的键/值对；然而，这可能会对实例调度产生不利影响，因为可能存在冲突或混淆的键/值对。
- en: Deleting a host aggregate
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除主机聚合
- en: When a host aggregate no longer applies in a given environment, it can be deleted.
    A host aggregate must have all hosts removed before it can be removed.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当主机聚合在给定环境中不再适用时，可以删除它。删除主机聚合之前，必须先移除所有主机。
- en: Getting ready
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To delete a host aggregate, you will need the following information:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除主机聚合，您需要以下信息：
- en: The `openstack` command-line client
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭证的`openrc`文件
- en: The *name* or *ID* of the aggregate
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合的*名称*或*ID*
- en: For the following example, we will delete the `cookbook-threadripper-hosts`
    aggregate.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将删除`cookbook-threadripper-hosts`聚合。
- en: How to do it…
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following commands are used to delete a host aggregate:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令用于删除主机聚合：
- en: 'First, list the existing aggregates:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，列出现有的聚合：
- en: '[PRE27]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This will bring back the following output:'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回以下输出：
- en: '![How to do it…](img/00073.jpeg)'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00073.jpeg)'
- en: 'Confirm that the aggregate has no hosts (Refer to the *Removing a compute host
    from a host aggregate* recipe if necessary):'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认聚合中没有主机（如有必要，请参考*从主机聚合中移除计算主机*的示例）：
- en: '[PRE28]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will bring back the following output:'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回以下输出：
- en: '![How to do it…](img/00074.jpeg)'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00074.jpeg)'
- en: 'Now we can delete the aggregate with the following command:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用以下命令删除聚合：
- en: '[PRE29]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This command produces no output when successful.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令在成功时不会产生输出。
- en: 'Confirm the change with the following command:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令确认更改：
- en: '[PRE30]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will bring back the following output, where the host aggregate has now
    been removed:'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回以下输出，其中主机聚合已被删除：
- en: '![How to do it…](img/00075.jpeg)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00075.jpeg)'
- en: How it works…
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Deleting a host aggregate removes it and all of its metadata from the Nova database,
    and it can no longer be used for instance scheduling.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 删除主机聚合会将其及其所有元数据从Nova数据库中移除，并且它将不再用于实例调度。
- en: Creating an Availability Zone
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可用区
- en: '**Availability Zones** (**AZs**) are a special case of host aggregates. Here,
    host aggregates are used by Nova to make scheduling decisions; they are generally
    only visible to operators and administrators of the OpenStack Cloud. AZs are the
    end-user visible component. An AZ can be configured, like host aggregates, to
    represent features of the hardware.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**可用区**（**AZ**）是主机聚合的特殊情况。在这里，主机聚合由Nova用于进行调度决策；通常它们只对OpenStack云的操作员和管理员可见。AZ则是终端用户可见的组件。AZ可以像主机聚合一样进行配置，以代表硬件的特性。'
- en: AZs are typically used to define failure domains, such as a cabinet or data
    center, or even geography. When configuring AZs, it is important to note that
    a host can only be a member of one AZ at a time.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: AZ通常用于定义故障域，例如机柜、数据中心，甚至地理位置。在配置AZ时，需要注意的是，每个主机一次只能属于一个AZ。
- en: Note
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As AZs are a special use-case of host aggregates, a lot of operations, such
    as adding and removing hosts are the same. Thus, they are not repeated here.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 由于AZ是主机聚合的特殊用例，很多操作（如添加和删除主机）与聚合相同。因此，这些操作不再重复说明。
- en: Creating an AZ is a two-step process. First, we create an aggregate with the
    `--zone` parameter, or add it to an existing aggregate. Second, a host needs to
    be added to the aggregate before instances can be scheduled into the zone.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 创建AZ是一个两步过程。首先，我们使用`--zone`参数创建一个聚合，或者将其添加到现有的聚合中。其次，在实例可以调度到该区之前，必须将主机添加到聚合中。
- en: Getting ready
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To create an AZ, you will need the following information:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 创建AZ时，您需要以下信息：
- en: The `openstack` command-line client
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭证的`openrc`文件
- en: The *name* or *ID* of the aggregate
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合的*名称*或*ID*
- en: The desired *name* of the AZ
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AZ的期望*名称*
- en: The *host* or *hosts* to add to the AZ
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '要添加到AZ的*主机*或*主机* '
- en: 'For our example, these values are as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，以下是这些值：
- en: 'Aggregate name: `cookbook-az`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合名称：`cookbook-az`
- en: 'Availability zone name: `cookbook-az`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用区名称：`cookbook-az`
- en: 'Compute host: `compute-01`'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算主机：`compute-01`
- en: How to do it…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'The following steps are to be used when creating an AZ:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 创建AZ时需要执行以下步骤：
- en: 'First, we will list the current AZs with the following command:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用以下命令列出当前的AZ：
- en: '[PRE31]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will bring back an output like the following:'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回如下输出：
- en: '![How to do it…](img/00076.jpeg)'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00076.jpeg)'
- en: 'Create a new aggregate with the `--zone` parameter:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`--zone`参数创建新的聚合：
- en: '[PRE32]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This will bring back an output like the following:'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回如下输出：
- en: '![How to do it…](img/00077.jpeg)'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00077.jpeg)'
- en: 'Now add a host to the aggregate with the following command:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用以下命令将主机添加到聚合中：
- en: '[PRE33]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This will bring back an output like the following when successful:'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 成功时，返回如下输出：
- en: '![How to do it…](img/00078.jpeg)'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00078.jpeg)'
- en: 'Now list the AZs we have available:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在列出我们可用的AZ：
- en: '[PRE34]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will show the following:'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示以下内容：
- en: '![How to do it…](img/00079.jpeg)'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00079.jpeg)'
- en: Tip
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Listing AZs will show all AZs available, irrespective of whether hosts exist
    in them or not. To verify that the hosts that are within an AZ, issue the following
    command:'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列出所有可用的可用区（AZ），不论其中是否存在主机。要验证某个AZ中的主机，可以执行以下命令：
- en: '[PRE35]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will bring back the output as shown in step 3.
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回如步骤3所示的输出。
- en: How it works…
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The first command, `openstack availability zone list`, lists all AZs. Next,
    when creating the new aggregate, the special `--zone cookbook-az` parameter is
    passed, telling OpenStack Nova that this aggregate is also an AZ, specifying its
    name. Finally, a host is added to the AZ much the same as a host is added to an
    aggregate.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令`openstack availability zone list`列出了所有AZ。接下来，在创建新聚合时，传递特殊的`--zone cookbook-az`参数，告诉OpenStack
    Nova这个聚合也是一个AZ，并指定其名称。最后，像将主机添加到聚合一样将主机添加到AZ。
- en: Booting an instance into an Availability Zone
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动实例到可用区
- en: Instances can be created into a given AZ by passing the `--availability-zone`
    parameter as part of the creation process. Additionally, AZ can be selected in
    OpenStack Horizon as part of the instance creation wizard.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在创建过程中传递`--availability-zone`参数，将实例创建到指定的AZ。此外，AZ也可以在OpenStack Horizon中的实例创建向导中选择。
- en: Getting ready
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The following information is required to boot an instance into an AZ:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 启动实例到AZ时需要以下信息：
- en: The `openstack` command-line client
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭证的`openrc`文件
- en: The *name* or *ID* of the AZ
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AZ的*名称*或*ID* '
- en: Additional information required to start an instance
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动实例所需的附加信息
- en: Tip
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Creating instances is covered in detail in the *Booting an instance* recipe.
    As such, this example skips some of the detail, instead it focuses on how to create
    an instance in a specific AZ.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建实例的详细步骤在*启动实例*的示例中有详细说明。因此，这个示例跳过了一些细节，专注于如何在特定的AZ中创建实例。
- en: How to do it…
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To boot an instance into a specific AZ, the `--availability-zone` parameter
    is specified when running the `openstack server create` command:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 要将实例引导到特定的AZ，需在运行`openstack server create`命令时指定`--availability-zone`参数：
- en: '[PRE36]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This will bring back an output like the following, showing the AZ (the `OS-EXT-AZ:availability-zone`
    field) where the instance was scheduled to:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带回如下输出，显示实例所在的AZ（`OS-EXT-AZ:availability-zone`字段）：
- en: '![How to do it…](img/00080.jpeg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤…](img/00080.jpeg)'
- en: How it works…
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: When specified, the `--availability-zone` parameter causes the Nova Scheduler
    to examine the specified AZ to see if the request can be satisfied.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了`--availability-zone`参数，Nova调度程序会检查指定的AZ，看看是否可以满足请求。
- en: Removing an Availability Zone
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除可用性区域
- en: Removing an AZ is a multistep process, and has some caveats. To remove an AZ,
    you must first remove the hosts from the host aggregate.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 移除AZ是一个多步骤的过程，并且有一些注意事项。要移除AZ，必须先从主机聚合中移除主机。
- en: Getting ready
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following information is required to remove an AZ:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 删除AZ所需的以下信息：
- en: The `openstack` command line client
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭据的`openrc`文件
- en: The *name* or *ID* of the AZ
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AZ的*名称*或*ID*
- en: How to do it…
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following steps can be used to remove an AZ:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤可用于移除一个AZ：
- en: 'First, list the AZs available with the following command:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令列出可用的AZ：
- en: '[PRE37]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This will bring back an output like the following:'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将带回如下输出：
- en: '![How to do it…](img/00081.jpeg)'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤…](img/00081.jpeg)'
- en: 'Now list the hosts within the AZ that we want to delete:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在列出我们要删除的AZ中的主机：
- en: '[PRE38]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This will bring back an output like the following:'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将带回如下输出：
- en: '![How to do it…](img/00082.jpeg)'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤…](img/00082.jpeg)'
- en: 'Now remove the hosts with following command (repeat as necessary for each host
    in the aggregate):'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用以下命令移除主机（根据需要重复每个主机的操作）：
- en: '[PRE39]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This will bring back the following output:'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将带回以下输出：
- en: '![How to do it…](img/00083.jpeg)'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤…](img/00083.jpeg)'
- en: 'Remove the AZ using the `aggregate delete` command:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`aggregate delete`命令移除AZ：
- en: '[PRE40]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tip
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This command produces no output if successful.
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果成功，该命令将不产生任何输出。
- en: 'Confirm the removal of the AZ with the following command:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令确认AZ的移除：
- en: '[PRE41]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This will bring back an output like the following, showing that our AZ has
    been removed:'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将带回如下输出，显示我们的AZ已被移除：
- en: '![How to do it…](img/00084.jpeg)'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤…](img/00084.jpeg)'
- en: How it works…
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In order to remove an AZ, it must first have no active hosts. Because AZs are
    a special case of host aggregates, the commands for identifying and removing hosts
    from an AZ are the same. Once you have removed the hosts, the `openstack aggregate
    delete [name]` command is used to complete the removal of the AZ.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 要移除AZ，首先必须确保没有活动主机。因为AZ是主机聚合的特例，用于识别和移除主机的命令相同。一旦移除了主机，使用`openstack aggregate
    delete [name]`命令完成AZ的移除。
- en: Creating a flavor
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个flavor
- en: Before Nova can start instances, it first needs to know what resources should
    be assigned to those instances. The way Nova handles resource assignments is to
    define **flavors**. A flavor specifies the number of vCPUs, RAM, and the disk
    to assign to an instance.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nova可以启动实例之前，首先需要知道应分配给这些实例的资源。Nova处理资源分配的方式是定义**flavors**。一个flavor指定了分配给实例的vCPU数、RAM和磁盘大小。
- en: Getting ready
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To create a new flavor, you will need the following:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的flavor，您需要以下内容：
- en: The `openstack` command-line client
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭据的`openrc`文件
- en: The *name*, *vCPU*, *RAM*, and *disk* values for the new flavor
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新flavor的*名称*、*vCPU*、*RAM*和*磁盘*值
- en: 'The flavor we will create in this example will have the following attributes:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中我们将创建的flavor将具有以下属性：
- en: 'Flavor name: `openstack.cookbook`'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flavor名称：`openstack.cookbook`
- en: 'vCPU: 1'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: vCPU：1
- en: 'Ram: 512 MB'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RAM：512 MB
- en: 'Disk: 5 GB'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘：5 GB
- en: 'Visibility: Public'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可见性：公共
- en: How to do it…
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following commands are used to create a new flavor:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令用于创建新的flavor：
- en: 'First, list the available flavors already configured in our environment with
    the following command:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This will bring back an output like the following:'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00085.jpeg)'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create the flavor with our given attributes:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This will bring back an output like the following:'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00086.jpeg)'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'List the flavors again to see the new flavor:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This gives an output like the following:'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00087.jpeg)'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `openstack flavor create --vcpus [vcpu_count] --ram [ram_MB] --disk [disk_GB]
    --public [name]` command is used to define flavors. The `--public` option is used
    to specify if the flavor should be available to all users of the OpenStack environment,
    or if it should remain limited in scope and visibility to the project in which
    the user belongs to.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a flavor
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often times, requirements change; there is a demand for more performance, or
    business needs change. Whatever be the reason, your existing flavors may not meet
    the needs of those consuming cloud resources. When a given flavor is no longer
    suitable, it will need to be deleted.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A flavor that is associated with a running instance cannot be deleted.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To change attributes of a flavor for Nova, you will need the following:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the flavor to delete
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following commands are used to delete a flavor:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the flavors available:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This will bring back a list of flavors like the following:'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00088.jpeg)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To delete the flavor, execute the following command:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Tip
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command shows no output when successful.
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List the flavors again to view updated attributes:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Once again, this lists the flavors that are now available:'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00089.jpeg)'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To delete a flavor the `openstack flavor delete [name]` command is used. Should
    you need to delete multiple flavors, you can specify multiple names or IDs, separating
    each with a space.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Setting CPU limits for a flavor
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to defining the number of vCPUs assigned to an instance, limits
    on the use of these CPU cycles can be further imposed. Nova relies on the underlying
    hypervisor for the specific implementation of the CPU limits, and thus the values
    available may vary. Our example is based on QEMU/KVM.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: CPU limits are a special case of flavor attributes that you may encounter.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a CPU limit to a flavor, you will need the following:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the flavor to change
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The values you would like to set the CPU limit to (share of time the allotted
    CPU is allowed to consume in milliseconds per cycle)
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These values in our example are as follows:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '`cpu_quota` = 5000 ms'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cpu_period` = 2500 ms'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following commands are used to add CPU limits to a flavor.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CPU limits are not applied live. Rather, they are applied on instance launch.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: At the time of this writing, the `openstack` command-line client is the only
    way to view and change this setting. It is also not shown by default when viewing
    instance attributes.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`openstack` 命令行客户端是查看和更改此设置的唯一方式。默认情况下，查看实例属性时也不会显示此设置。
- en: 'First, view the current attributes of the flavor that we are changing, noting
    that we have no `properties` set:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，查看我们正在更改的 flavor 的当前属性，注意我们没有设置 `properties`：
- en: '[PRE48]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This gives the following output:'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将给出如下输出：
- en: '![How to do it…](img/00090.jpeg)'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![How to do it…](img/00090.jpeg)'
- en: 'Add the CPU limit:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 CPU 限制：
- en: '[PRE49]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Tip
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This command shows no output when successful
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令成功时不会显示任何输出
- en: 'View the CPU limit by interrogating the flavor again, noting the `properties`
    field:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过再次查询 flavor 来查看 CPU 限制，注意 `properties` 字段：
- en: '[PRE50]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This gives an output like the following:'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将给出类似以下的输出：
- en: '![How to do it…](img/00091.jpeg)'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![How to do it…](img/00091.jpeg)'
- en: How it works…
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In order to help mitigate the *noisy neighbor* issue, or to provide further
    definition of service levels, OpenStack supports CPU limits. In OpenStack, this
    is called the **Instance Resource Quota**. CPU limits are part of the flavor definition.
    Meaning, all instances of a given flavor will have the same CPU limits.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助缓解 *吵闹邻居* 问题，或者进一步定义服务等级，OpenStack 支持 CPU 限制。在 OpenStack 中，这被称为 **实例资源配额**。CPU
    限制是 flavor 定义的一部分。也就是说，给定 flavor 的所有实例都会有相同的 CPU 限制。
- en: 'Imposing CPU limits are hypervisor specific. For KVM/libvirt environments,
    CPU limits are enforced using cgroups, using a combination of the following three
    values:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 强加 CPU 限制是特定于虚拟化管理程序的。对于 KVM/libvirt 环境，CPU 限制是通过 cgroups 强制实施的，结合使用以下三个值：
- en: '`cpu_shares`'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cpu_shares`'
- en: '`cpu_quota`'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cpu_quota`'
- en: '`cpu_period`'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cpu_period`'
- en: 'A full discussion of what these values are and how they interact is beyond
    the scope of this book. However, you can find a detailed explanation of them on
    the OpenStack wiki at the following:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些值及其交互的完整讨论超出了本书的范围。不过，你可以在 OpenStack wiki 上找到详细的解释，网址如下：
- en: '[https://wiki.openstack.org/wiki/InstanceResourceQuota](https://wiki.openstack.org/wiki/InstanceResourceQuota)'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.openstack.org/wiki/InstanceResourceQuota](https://wiki.openstack.org/wiki/InstanceResourceQuota)'
- en: Setting IOPS limits for a flavor
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 flavor 设置 IOPS 限制
- en: As with CPU limits, IOPS limits can also be imposed to prevent an instance type
    from hogging all of the available IO on a system. IOPS here refers to the storage
    and network IO. Also, as with CPU limits, IOPS limits are a special case of flavor
    attributes that you may encounter frequently.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 与 CPU 限制一样，IOPS 限制也可以被施加，以防止某个实例类型占用系统上所有可用的 IO。此处的 IOPS 指的是存储和网络 IO。同时，像 CPU
    限制一样，IOPS 限制是 flavor 属性的一个特殊案例，你可能会经常遇到。
- en: Tip
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: At the time of this writing, the `openstack` command-line client is the only
    way to view and change this setting. It is also not shown by default when viewing
    instance attributes.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`openstack` 命令行客户端是查看和更改此设置的唯一方式。默认情况下，查看实例属性时也不会显示此设置。
- en: Getting ready
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To add an IOPS limit to a flavor, you will need the following:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 要向 flavor 添加 IOPS 限制，你需要以下内容：
- en: The `openstack` command-line client
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack` 命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭据的 `openrc` 文件
- en: The *name* of the flavor to change
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改的 flavor 的 *名称*
- en: The value you would like to set the IOPS limit to.
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望设置的 IOPS 限制值。
- en: 'In our example, these values are as follows:'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的示例中，这些值如下：
- en: '`disk_read_iops` = 100 IOPS'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disk_read_iops` = 100 IOPS'
- en: '`disk_write_iops` = 100 IOPS'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disk_write_iops` = 100 IOPS'
- en: How to do it…
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following commands are used to add IOPS limits to a flavor:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令用于向 flavor 添加 IOPS 限制：
- en: Tip
  id: totrans-444
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As with changing flavor attributes, IOPS limits are not applied to running instances.
    Rather, they are applied on instance launch.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 与更改 flavor 属性一样，IOPS 限制不会应用于正在运行的实例。相反，它们是在实例启动时应用的。
- en: 'First, view the attributes of the flavor that is changing, noting that the
    `properties` field is blank:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，查看正在更改的 flavor 的属性，注意 `properties` 字段为空：
- en: '[PRE51]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This gives an output like the following:'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将给出类似以下的输出：
- en: '![How to do it…](img/00092.jpeg)'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![How to do it…](img/00092.jpeg)'
- en: 'Now we can add the IOPS limit with the following command:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用以下命令添加 IOPS 限制：
- en: '[PRE52]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Tip
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This command shows no output when successful.
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令成功时不会显示任何输出。
- en: 'We can verify the IOPS limits by viewing the flavor properties:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过查看 flavor 属性来验证 IOPS 限制：
- en: '[PRE53]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This will bring back an output like the following, noting that we have now
    set the properties to reflect the IOPS imposed:'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回类似以下的输出，注意我们现在已经设置属性以反映施加的 IOPS：
- en: '![How to do it…](img/00093.jpeg)'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00093.jpeg)'
- en: How it works…
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: As with CPU limits, IO limits are defined at a flavor level. However, unlike
    CPU limits, IO limits can be applied by the hypervisor, the storage layer, or
    a combination of the two.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 与CPU限制一样，IO限制也在flavor级别定义。然而，与CPU限制不同，IO限制可以由虚拟机监控程序、存储层或两者的组合来应用。
- en: 'To set the IOPS limit values for a given flavor, the following `openstack`
    command is used:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 要为给定的flavor设置IOPS限制值，请使用以下`openstack`命令：
- en: '[PRE54]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: While both read and write IOPS are shown for completeness, you need not specify
    both.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然为了完整性显示了读写IOPS，但你不需要同时指定两者。
- en: Booting an instance
  id: totrans-463
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动实例
- en: The most fundamental tasks that can be performed with instances are life cycle
    tasks. In this recipe, we will show you how to start or boot an instance.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 使用实例可以执行的最基本任务是生命周期任务。在本示例中，我们将向你展示如何启动或引导实例。
- en: Getting ready
  id: totrans-465
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To start an instance, you will need the following:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个实例，你将需要以下内容：
- en: The `openstack` command-line client
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openstack`命令行客户端'
- en: The `openrc` file containing appropriate credentials
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当凭据的`openrc`文件
- en: The *name* of the instance
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例的*名称*
- en: The *image* to use for the instance
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于实例的*镜像*
- en: The name of the *flavor* to create the instance with
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于创建实例的*flavor*名称
- en: The name of the *network* or networks to attach the instance to
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将实例附加到的*网络*的名称
- en: The *keypair* name to allow access to an instance
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于允许访问实例的*密钥对*名称
- en: The name of any *security groups* to associate with the instance
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与实例关联的任何*安全组*名称
- en: How to do it…
  id: totrans-475
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'The instance we will boot will have the following attributes:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将启动的实例将具有以下属性：
- en: 'Instance name: `cookbook.test`'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例名称：`cookbook.test`
- en: 'Flavor type: `openstack.cookbook`'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flavor类型：`openstack.cookbook`
- en: 'Image name: `Ubuntu 16.04 amd64` (UUID)'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像名称：`Ubuntu 16.04 amd64` (UUID)
- en: 'Network: `public` (UUID)'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络：`public` (UUID)
- en: 'Keypair name: `cookbook_key`'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥对名称：`cookbook_key`
- en: 'Security groups: `ssh`'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组：`ssh`
- en: 'To start an instance, use the following steps:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个实例，使用以下步骤：
- en: 'To list the instances that are currently running, we issue the following command:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出当前正在运行的实例，我们执行以下命令：
- en: '[PRE55]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Tip
  id: totrans-486
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This command will produce no output if there are no instances.
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有实例，这个命令将不会产生任何输出。
- en: 'List the available images:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出可用的镜像：
- en: '[PRE56]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This will bring back a list of images available:'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回一个可用镜像的列表：
- en: '![How to do it…](img/00094.jpeg)'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00094.jpeg)'
- en: 'List the available networks:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出可用的网络：
- en: '[PRE57]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This will list the networks that we can attach an instance to:'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将列出我们可以将实例附加到的网络：
- en: '![How to do it…](img/00095.jpeg)'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00095.jpeg)'
- en: 'Create a keypair (if you do not have one already created and available for
    use):'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个密钥对（如果你还没有创建并可供使用）：
- en: '[PRE58]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Also, upload this with the following command:'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还可以使用以下命令上传：
- en: '[PRE59]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This will bring back an output showing the fingerprint of your key:'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回一个输出，显示您的密钥指纹：
- en: '![How to do it…](img/00096.jpeg)'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00096.jpeg)'
- en: 'Now we can boot the instance with the following command:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用以下命令启动实例：
- en: '[PRE60]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This produces a table of output showing that the instance is booting (not shown
    here for brevity).
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生一个输出表，显示实例正在引导（为了简洁起见，此处不显示）。
- en: 'To view more information about the booted instance, issue the following command:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看已启动实例的更多信息，请执行以下命令：
- en: '[PRE61]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'This gives an output like the following:'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将输出如下内容：
- en: '![How to do it…](img/00097.jpeg)'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/00097.jpeg)'
- en: How it works…
  id: totrans-509
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: After noting a number of required values we will be supplying as input, such
    as the UUID of the image that we want to boot and the UUID of the network we want
    to attach the instance to, we then called a tool from OpenStack Client to launch
    our instance. Part of that command line refers to the keypair to use. We then
    connect to the instance using the private key as part of that keypair generated.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在记录下需要输入的一些必需值后，例如我们要启动的镜像的UUID和要将实例附加到的网络的UUID，我们然后调用了OpenStack客户端中的一个工具来启动我们的实例。该命令行的一部分指向要使用的密钥对。然后我们通过生成的密钥对中的私钥连接到实例。
- en: How does the cloud instance know what key to use? As part of the boot scripts
    for this image, it makes a call back to the metaserver, which is a function of
    the `nova-api` and `nova-api-metadata` services. The metaserver provides a go-between
    that bridges our instance and the real world, which the cloud-init boot process
    can call and in this case, it downloads a script to inject our private key into
    the Ubuntu user's `.ssh/authorized_keys` file.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: When a cloud instance is launched, it generates a number of useful metrics and
    details about that instance. This is presented by the `openstack server list`
    and `openstack server show` commands. The `openstack server list` command shows
    a convenient short version listing the ID, name, status, and IP addresses of our
    instance.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: Stopping an instance
  id: totrans-513
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, an instance will need to be stopped for a number of reasons, for
    example, maintenance and offline migration, yet as an OpenStack administrator,
    you may not want to completely destroy the instance and data associated with it.
    Thus, you will want to stop the instance instead.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-515
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To stop an instance, you will need the following:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-520
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will be stopping the `cookbook.test` instance created in
    the *Booting an instance* recipe. To stop the instance, use the following steps:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we list the running instances:'
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This will bring back a list of the running instances. Consider this example:'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00098.jpeg)'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To stop the instance, simply issue the following command:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Tip
  id: totrans-528
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command takes a few moments to complete and will not display the output
    if successful.
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now list instances to confirm the status of the instances. Here we''re looking
    for the states of `SHUTOFF` for our `cookbook.test` instance:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'This gives the following output:'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00099.jpeg)'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  id: totrans-534
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To stop an instance we use the `openstack` client''s `server stop` command:
    `openstack server stop [Name or ID]`. This tells Nova to power off the instance.
    This is synonymous to holding the power button on your laptop, or unplugging a
    server.'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an instance
  id: totrans-536
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete the life cycle of an instance, you will need to delete it. Nova
    provides a facility for this, using the `openstack` command-line tool.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-538
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete an instance, you will need the following:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-543
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will be deleting the `cookbook.test` instance created in
    the *Booting an instance* recipe used for booting. To delete the instance, use
    the following steps:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the running instances:'
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '![How to do it…](img/00100.jpeg)'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To delete the instance named `cookbook.test`, issue the following command:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Tip
  id: totrans-550
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command produces no output when successful.
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now list the instances again to confirm the deletion:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This will bring back an output, where the instance we have deleted is now not
    present:'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00101.jpeg)'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  id: totrans-556
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `openstack server delete` command, unlike suspending or shelving an instance,
    deletes the instance and all data within it.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: Live migration
  id: totrans-558
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the key tenets of cloud is being abstracted away from hardware. However,
    hardware does require maintenance from time to time, or a host will need a software
    upgrade. Whatever the reason, a host may need to be taken offline for maintenance,
    ideally with little to no downtime for the instances running on the host. To accommodate
    this, Nova provides two methods for live migrating instances: block migration,
    when shared storage is not available in the environment, and the live migration
    flag, when instances are booted from the shared storage (where every compute host
    can see the same storage used by each instance for its boot volume).'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-560
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To live migrate an instance, you will need the following information:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate administrator credentials
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the destination hypervisor
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-566
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your environment is configured so that instances boot from the shared storage,
    such as RBD provided by Ceph, then live migrations are almost instantaneous (depending
    on how busy the instance is). A feature called **block migration** is much slower.
    Block migration is used in environments where shared storage is not used for instances.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: Migrations can only be performed by a user with admin role privileges.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-569
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we list the available hypervisors. We are noting where we can migrate
    our running instances to:'
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This will bring back an output like the following:'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00102.jpeg)'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Next, view the instance properties to identify the source host:'
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'This will bring back the fields (also known as column names, as denoted by
    the `-c` flag) that we are interested in. Note, in this example, the instance
    called `cookbook.test` is running from the hypervisor called `compute-01.cook.book`:'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00103.jpeg)'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To live migrate the instance *where no shared storage is available* issue the
    following:'
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Tip
  id: totrans-580
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We do not specify a target compute host using the `--block-migration` method,
    instead, we let the Nova Scheduler decide on the next available hypervisor.
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This command shows no output when successful.
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To live migrate the instance, *with shared storage such as Ceph*, issue the
    following:'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Tip
  id: totrans-585
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We specify the target hypervisor with the `--live` flag.
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This command shows no output when successful.
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check the status of migration:'
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'As block migrations generally take longer, you may see the state as `resize_migrating`,
    indicating that the task of migrating is still in process:'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00104.jpeg)'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Verify the migration with the following command, ensuring that the instance
    is now running from a different hypervisor:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'This will bring back an output like the following:'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00105.jpeg)'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  id: totrans-596
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Migrations of any kind are generally best performed when the instance is not
    under heavy utilization.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-598
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Live migrations are an essential feature that enables OpenStack operators and
    administrators to perform maintenance of the underlying cloud infrastructure without
    affecting the consumers of said cloud. Additionally, the OpenStack administrator
    can use telemetry data from resource monitoring services (such as Ceilometer)
    and make live migration decisions to balance workloads across the OpenStack Cloud.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: Live migration in OpenStack is handled by the libvirt drivers. Specifically,
    when you issue the `openstack server migrate` command, OpenStack Compute creates
    a connection from libvirtd on one compute host to the same process on the remote
    host. Once this connection is established, depending on the parameters you specified,
    the memory state of the instance is synchronized and the control is transferred.
    In the preceding example, we first specified the additional `--block-migrate`
    parameter, which handles the movement of the instance's disk files in the absence
    of shared storage, and then we showed how the `--live` flag can be used when instances
    are booted from shared storage.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-601
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Remember**: Migrations can only be performed by users with the `admin` role.'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: Snapshotting an instance
  id: totrans-603
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snapshotting an instance will create a Glance image of the instance at the point
    in time the snapshot was taken. This image can then be used to deploy additional
    instances of a given application, or as a bootable backup of the instance.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-605
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create a snapshot of an instance, you require the following information:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following commands are used to create an instance snapshot:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we list the existing images with the following command:'
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'This will bring back a list of images like the following:'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00106.jpeg)'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now list the running instances with the following command:'
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'This gives an output like the following:'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00107.jpeg)'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To create the snapshot, issue the following command (note the optional shell
    expansion command we''re using to timestamp the name of the snapshot):'
  id: totrans-620
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'This brings an output like the following:'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00108.jpeg)'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We can verify that the snapshot was created with the following command. Note
    that we limited the screenshot to just show our snapshotted image:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'This gives an output that will show our snapshotted image:'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00109.jpeg)'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  id: totrans-628
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instance snapshots create a Glance image of the running instance. The snapshot
    can be used for backup, redistribution, or part of a continuous deployment pipeline
    as a build artifact. The images created with `openstack server image create --name
    [snapshot_name] [instance]` are bootable. You have a large degree of flexibility
    in how they are used.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-630
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instance snapshots are rather powerful. While a full exploration of the possibilities
    are beyond the scope of this book, the following example shows you what can be
    achieved using this feature: an easy way to back up all running instances.'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: 'To snapshot every instance, use the following command:'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Tip
  id: totrans-634
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warning**: Snapshotting every instance is not recommended for larger environments.
    In addition to being time consuming, it can also consume a rather large amount
    of storage used by Glance, as snapshots are not sparsely created like those of
    the original QCOW2 image you may have used'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: Booting an instance from a snapshot
  id: totrans-636
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created an instance snapshot, imagine that we need to go back
    and recover files, or revert the application to the state it was at the time the
    snapshot was taken. As the snapshot is stored as an OpenStack image, you can boot
    directly from the snapshot, and as such all the details required to boot an instance
    applies to booting a snapshot.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-638
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start an instance from a snapshot, you will need the following:'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  id: totrans-641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *snapshot* to use for the instance
  id: totrans-643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the *flavor* to create the instance with (this must be of equal
    or greater size of flavor compared with the one used in the original instance)
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the *network* or networks to attach the instance to
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *keypair* name to allow access to an instance
  id: totrans-646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of any *security groups* to associate with the instance
  id: totrans-647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-648
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The instance we will boot will have the following attributes:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `cookbook.test_snapshot-2017-09-08T163619`'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instance name: `cookbook.test_restore`'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flavor type: `openstack.cookbook`'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network: `public` (UUID)'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keypair name: `cookbook_key`'
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security groups: `ssh`'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To boot from an instance snapshot, we use the same process as used when booting
    an instance. The commands are repeated here:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can list the existing running instances with the following command:'
  id: totrans-657
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'This will bring back a list of `ACTIVE` running instances:'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00110.jpeg)'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We can then boot the instance snapshot using the following command:'
  id: totrans-661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: This will bring back the familiar booting an instance output that has been omitted
    here.
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now list the running instances again to show our `cookbook.test_restore`
    instance is `ACTIVE`:'
  id: totrans-664
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'This shows our instance is now running:'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00111.jpeg)'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  id: totrans-668
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As instance snapshots are stored as OpenStack images, booting from a snapshot
    is an identical process to booting from an existing image. There are some caveats
    however. As snapshots are created while an image is running, booting from them
    is similar to booting a server after a power failure. You must also ensure that
    you are using a flavor that is of equal or greater size to the original instance—for
    example, if an instance was originally created as an m1.large, the snapshot must
    be booted with an m1.large or greater flavor. Additionally, if the instance is
    a Windows image attached to an Active Directory domain, it may cause issues having
    two of the same instances running at the same time. To mitigate this, consider
    booting the instance onto a separate recovery network.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-670
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are tools available to quiesce the filesystem inside an instance and provide
    a more consistent image that are beyond the scope of this book. However, as guidance,
    ensuring that a filesystem sync (to flush any disk writes) inside the running
    instance is recommended before a snapshot is taken.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: Rescuing an instance
  id: totrans-672
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack Compute provides a handy troubleshooting tool with rescue mode. Should
    a user lose an SSH key, or otherwise not be able to boot and access an instance,
    say, bad iptables settings or failed network configuration, rescue mode will start
    a minimal instance and attach the disk from the failed instance to aid in recovery.
    This applies to both Windows and Linux instances as this process essentially allows
    the mounting of the boot volume of your failed instance as a secondary disk to
    the rescue instance.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-674
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To put an instance into rescue mode, you will need the following information:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the instance
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The instance we will use in this example is `cookbook.test`.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-680
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To put an instance into rescue mode, use the following steps:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will put the instance into rescue mode as follows:'
  id: totrans-682
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'This will present us with a temporary password we can then use to access the
    rescue instance:'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00112.jpeg)'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To verify that an instance is in rescue mode, use the following command:'
  id: totrans-686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'This will present the `status` value as `RESCUE`:'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00113.jpeg)'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At this point, we can then access this instance, using the `root` username,
    and the temporary password we were given to perform operating system rescue commands
    on the mounted filesystem (the filesystem that is the boot volume of our original,
    broke instance).
  id: totrans-690
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-691
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When in rescue mode, the disk of the instance in rescue mode is attached as
    a secondary. In order to access the data on the disk, you will need to mount it.
    As filesystems differ between OS and deployment, showing the mount process is
    beyond the scope of this book.
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To exit rescue mode, use the following command:'
  id: totrans-693
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Tip
  id: totrans-695
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command will produce no output if successful.
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-697
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `openstack server rescue` command provides a rescue environment with the
    disk of your instance attached. First, it powers off the named instance, then
    it boots the rescue environment attaching the disks of the original instance.
    Finally, it provides you with the login credentials for the rescue instance.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the rescue instance is done via SSH. Once logged in to the rescue
    instance, you can mount the disk using mount `<path to disk> /mnt`.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed your troubleshooting or recovery, the `unrescue` command
    reverses this process; first, stopping the rescue environment and detaching the
    disk, then booting the instance as it originally was.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: Shelving an instance
  id: totrans-701
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Somewhat unique to OpenStack Nova is the ability to *shelve* an instance. Instance
    shelving allows you to stop an instance without having it consume resources. A
    shelved instance will be retained as a bootable instance, as well as its resources
    assigned such as IP address, for a configurable amount of time, then deleted.
    This is useful as part of an instance life cycle process or to conserve resources.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-703
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Stopping versus shelving?**'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: Stopping an instance does not free up the amount of resources still available
    as part of your quota as the assumption is that you will be starting that instance
    back up again after a short period of time. You would not be able to start a stopped
    instance if you didn't have any free CPUs or GBs of RAM left of your assigned
    quota. A stopped instance's resources are still considered *used resources* to
    the OpenStack Compute scheduler.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: Shelving, however, frees up these resources, but still allows you, at a later
    date, to access the shelved instance. Quota rules and restrictions still apply
    when unshelving an instance, but shelving an instance will allow you to work within
    your allotted resource quotas while preserving your instance data.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-707
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To shelve an instance, the following information is required:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the instance
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-712
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To shelve an instance, the following commands are used:'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we check the status of the instance:'
  id: totrans-714
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Ensure that your instance has `status` of `ACTIVE`:'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00114.jpeg)'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To shelve the instance, issue the following command:'
  id: totrans-718
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Tip
  id: totrans-720
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command produces no output when successful. Shelving an instance may take
    a few moments depending on your environment.
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To check the status of the instance, issue the following command, noting the
    new status:'
  id: totrans-722
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The `status` value has changed to `SHELVED_OFFLOADED`:'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00115.jpeg)'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  id: totrans-726
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A shelved instance will retain the addresses it has been assigned.
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To unshelve the instance and return it back to an `ACTIVE` state, simply issue
    the following command:'
  id: totrans-728
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Tip
  id: totrans-730
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command produces no output when successful. As with shelving, the instance
    may take a few moments to become active, depending on your environment.
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can verify the state by checking the status:'
  id: totrans-732
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The `status` value has returned to `ACTIVE`:'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00116.jpeg)'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  id: totrans-736
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When told to shelve an instance, OpenStack Compute will first stop the instance.
    It then creates an instance snapshot to retain the state of the instance. The
    runtime details, such as number of vCPUs, memory, and IP addresses, are retained
    so that the instance can be unshelved and rescheduled at a later time.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: This differs from shutting down an instance, in that the resources of a shutdown
    instance are still reserved on the host on which it resided, so that it can be
    powered back on quickly. A shelved instance however, will still show in `openstack
    server list`, while the resources that were assigned will remain available. Additionally,
    as the shelved instance will need to be restored from an image, OpenStack Compute
    will perform placement as if the instance were new, and starting it will take
    some time.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the console logs
  id: totrans-739
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Console logs are critical for troubleshooting the startup process of an instance.
    These logs are produced at boot time, before the console becomes available. Typically,
    when working with cloud hosted instances, accessing these can be difficult. OpenStack
    Compute provides a mechanism for accessing the console logs.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-741
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access the console logs of an instance, the following information is required:'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the instance
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this example, we will view the last five lines of the `cookbook.test` instance.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-747
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To show the console logs of an instance, use the following command:'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'This connects to the serial console output of an instance, mimicking the information
    as if a monitor was directly attached to a physical server:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: How it works…
  id: totrans-752
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `openstack console log show` command collects the console logs, as if you
    were connected to the server via a serial port or sitting behind the keyboard
    and monitor at boot time. The command will, by default, return all of the logs
    generated to that point. To limit the amount of output, the `--lines` parameter
    can be used to return a specific number of lines from the end of the log.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
