- en: Chapter 5. Nova – OpenStack Compute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to OpenStack Compute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a compute host using OpenStack-Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suspending a host for maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Nova Scheduler to use host aggregates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a host aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a compute host to a host aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a compute host from a host aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding metadata to a host aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a host aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Availability Zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Booting an instance into an Availability Zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing an Availability Zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a flavor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a flavor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting CPU limits for a flavor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting IOPS limits for a flavor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Booting an instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping an instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Live migration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snapshotting an instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Booting an instance from a snapshot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rescuing an instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shelving an instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the console logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to OpenStack Compute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compute services in OpenStack are provided by a project that goes by the name
    Nova. Nova is an API-driven system that manages physical and virtual compute resources
    in an OpenStack cloud, providing **Infrastructure as a Service** (**IaaS**). OpenStack
    operators, administrators, and users can leverage the Nova API to manage the life
    cycle of compute resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nova is primarily responsible for managing two resource types: **instances**,
    which are the running virtual machines, application containers, or even full bare-metal
    machines a user has requested, and **hosts**, that provide the hardware resources
    required by instances. In most circumstances, instances are synonymous to virtual
    machines.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to make a distinction between two main features of Nova: the
    Nova API service (and associated services such as the `nova-scheduler`, `nova-conductor`,
    and `nova-placement`), which runs on our cluster of three controller nodes, and
    the `nova-compute` service, which runs on each compute host in our environment.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will first cover the administration of the physical host
    and Nova services, then the remainder of the chapter will take a task-centric
    approach to working with Nova. This means that the depth and detail on Nova features
    and functionality are beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a compute host using OpenStack-Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to run instances, OpenStack Compute needs to be aware of the physical
    resources on which to run the instances. As OpenStack has grown and matured over
    time, the process for adding a host has also grown with it. OpenStack-Ansible
    provides a very convenient and consistent method for adding new compute hosts
    which allows you to scale your environment as your needs grow. A compute host
    runs the `nova-compute` service and the hypervisor that spawns the appropriate
    instance type requested.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to add a compute host to an OpenStack cluster using `openstack-ansible`,
    you will need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The IP address of the host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH access to the host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SSH key from your deployment host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the deployment host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The values used in our example are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compute host: `172.29.236.15`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deployment host: `controller-01.cook.book`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We assume that your environment was already installed using OpenStack-Ansible
    as described in [Chapter 1](part0014_split_000.html#DB7S2-189e69df43a248268db97cde1b1a8e47
    "Chapter 1. Installing OpenStack with Ansible"), *Installing OpenStack with Ansible*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install and configure an additional compute host using `openstack-ansible`,
    carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the *deployment host*, add the additional compute host to the `/etc/openstack_deploy/openstack_user_config.yml`
    file, as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `setup-hosts.yml`, limiting the tasks to just `compute-03`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Have Ansible gather facts about the new host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Simply run `os-nova-install.yml` to install and configure `nova-compute` on
    our new compute host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Should the `openstack-ansible` command fail, the `-v` flag can be used to increase
    verbosity to assist in troubleshooting. Adding `-v` multiple times will provide
    additional levels of detail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Confirm the new hypervisor by running the following commands on any of the
    controller servers (as they run the utility container):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should bring back output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00060.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/etc/openstack_deploy/openstack_user_config` file provides mappings of
    roles to hosts in our environment. Adding the IP address for `compute-03.cook.book`
    to the `compute_hosts` stanza, informs the `openstack-ansible` command to apply
    the packages, settings, and so forth to the new host. It also adds any required
    configuration to the remainder of your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A full discussion of the Openstack-Ansible playbooks is beyond the scope of
    this book. For additional information on the playbooks and how they operate, you
    can review their documentation here: [https://docs.openstack.org/project-deploy-guide/openstack-ansible/pike/](https://docs.openstack.org/project-deploy-guide/openstack-ansible/pike/)'
  prefs: []
  type: TYPE_NORMAL
- en: Suspending a host for maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often times a host needs to be taken offline to have memory replaced, an operating
    system upgraded, or other routine maintenance done. In order to ensure that running
    instances are not adversely affected, we use the `openstack compute service set`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to place a host into maintenance mode, you will need the following
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `nova` command-line utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `openrc` file with admin credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The host we will put into maintenance mode is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compute host: `compute-03`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove a hypervisor for maintenance, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will list the available hosts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00061.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Next, we will disable the service called `nova-compute` for the compute host,
    so we will specify:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command produces no output when successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the host is disabled with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This produces an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00062.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Once the compute host has been disabled (meaning that it will no longer accept
    requests to run new instances), we can then migrate the running instances off
    this disabled compute host, onto other running compute hosts in our environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This produces an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00063.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to take a host offline for maintenance, Nova must first be told to
    no longer place new instances onto the host. This is done by disabling the `nova-compute`
    service on the compute host with the `openstack service set --disable [host] [service]`
    command. Once the host is marked disabled, and before powering it down for maintenance,
    the running instances need to be migrated off the host. The `nova host-evacuate-live
    [host]` command attempts to live-migrate all running instances on the specified
    host. It does this by asking Nova to reschedule the instances onto hosts with
    availability.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In cases where instances are not using shared storage, the `--block-migrate`
    flag can be used to attempt to migrate the storage as well.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Nova Scheduler to use host aggregates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack Compute provides the ability to create logical groupings of hypervisors
    called **host aggregates**, which allow users and administrators to control what
    physical compute hosts can run the requested workload. Often times, host aggregates
    are used to organize hosts with similar attributes, such as SSD, performance,
    or hosts, that have passed a security audit such as HITRUST or PCI. A host can
    be assigned to multiple aggregates. That is, a host can be part of the PCI and
    SSD grouping. To enable host aggregate scheduling in Nova Scheduler, you must
    first enable host aggregate filtering in `nova.conf`. In `openstack-ansible`,
    Ansible manages this file, and we will use it to push the appropriate changes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are `root` on the deployment host. In most cases, this is the
    first infrastructure controller node, `infra01`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable scheduling for host aggregates, the following steps can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the deployment host, add the following line to the `/etc/openstack_deploy/user_variables.yml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then use Ansible to deploy the changes with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to the `nova-scheduler` container and verify the change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The containers have unique UUIDs in their names. Look at the name of your containers
    with the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following if the word `Aggregate` was
    found, which shows that the change was successful:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding `AggregateInstanceExtraSpecsFilter` to `enabled_filters`, tells `nova-scheduler`
    to match the instance *flavor metadata* to that of the *host-aggregate metadata*.
    The `openstack-ansible` command is then used to propagate this change to the `/etc/nova/nova.conf`
    files within the OpenStack cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: Once enabled, and when a new instance is requested, the Nova Scheduler examines
    the metadata of the flavor associated with the request and attempts to match it
    with the metadata of host aggregates.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a host aggregate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we have enabled OpenStack to allow host aggregate filtering, we can then
    proceed to create our host aggregates. This recipe will show you how to create
    a host aggregate.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a host aggregate, you will need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *name* for the aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our example, the host aggregate will be named `cookbook-ssd-hosts`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a host aggregate, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will list the current host aggregates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00064.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Next, we will create the aggregate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00065.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'List the host aggregates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00066.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Nova, a **host aggregate** provides OpenStack administrators and operators
    a mechanism to group hosts based on arbitrary attributes that are later used for
    controlling what compute hosts service a user's request. Creating a host aggregate
    is done with the `openstack aggregate create name` command.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a compute host to a host aggregate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before a host aggregate can be used by OpenStack Compute, you must first add
    hosts to the aggregate groups created.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a host to an aggregate, you will need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the following example, the required values are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Host aggregate: `cookbook-ssd-hosts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compute host: `compute-01`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following process is used to add a host to a host aggregate:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List hosts that are already in the aggregate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00067.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now add the specified compute host to this aggregate as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00068.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `openstack aggregate host add` command associates a host with a host aggregate
    in the Nova database. This information is then used by the Nova Scheduler to make
    decisions about where to place an instance. If the metadata of the host aggregate
    matches that of the flavor or a particular project a user is in, an instance can
    be scheduled to a host within the aggregate.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a compute host from a host aggregate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the properties of a host change, or the needs of an aggregate change, hosts
    can be removed from a host aggregate.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove a host from a host aggregate, you will need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'List hosts already in the aggregate with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following. Note that the `hosts` field
    shows the compute hosts that are currently associated with the host aggregate:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00069.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To remove the compute host from this host aggregate, issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back the following. Note that in the `hosts` field, `compute-01`
    is now missing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00070.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Removing a host from a host aggregate tells OpenStack Compute that the additional
    metadata filters no longer apply and the host can be scheduled as normal.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Currently, running instances are unaffected by this operation. Operations on
    host aggregates affect new instance requests only.
  prefs: []
  type: TYPE_NORMAL
- en: Adding metadata to a host aggregate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The power of host aggregates comes from the ability to use them to logically
    group hosts based on their properties. This can be used, for example, to enable
    load balancing, enforce physical separation, or keep instances that are insecure
    from being scheduled into a secured environment. We will show this by matching
    the **metadata** of a host aggregate with that of an instance flavor.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add metadata to a host aggregate, you will need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *metadata* property to add
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example, these values will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Host aggregate: `cookbook-ssd-hosts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Metadata: `ssd=true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add metadata to host aggregate, use the following process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Show the existing metadata associated with an aggregate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following. Note that the `properties`
    field is blank if no metadata is associated yet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00071.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Add the metadata with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command displays no output when successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now confirm the addition of the metadata with the following command again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that the `properties` field has been updated with this information:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00072.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now that we have set the metadata of our host aggregate, we can now associate
    this with a flavor so that when that flavor is specified by a user during the
    boot process, Nova will match the property to only the hosts within that host
    aggregate group. For example, we may have a flavor that is called `cookbook.ssd`
    that sets the expectation, which when a user select, the host will have SSDs available.
    This is the power of host aggregates. In the example here, `compute-02` has SSDs
    available as we have specified this in the host aggregate named `cookbook-ssd-hosts`.
    To take advantage of this, let''s create a new flavor called `cookbook.ssd` with
    the `ssd=true` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating flavors is described in more detail in the *Creating a flavor* recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We now need to set the flavor **extra specs**, so that on choosing the flavor
    it is associated with the relevant host aggregate. For this, we use the `nova`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may need to use the UUID of the flavor instead of the name. If so, list
    the flavors with the following command and not the UUID of the `cookbook.ssd`
    flavor:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now when a user selects the `cookbook.ssd` flavor, unknown to them, the instance
    will be restricted to the hosts within the host aggregate group that has this
    key/value pair set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metadata is specified as a key/value pairing, which is then associated with
    a host aggregate in the Nova database. These key/value pairs are arbitrary and
    can be defined to match a given environment. A host aggregate can have any number
    of key/value pairs stored; however, this may adversely affect instance scheduling
    because of potentially conflicting or confusing key/value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a host aggregate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a host aggregate no longer applies in a given environment, it can be deleted.
    A host aggregate must have all hosts removed before it can be removed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete a host aggregate, you will need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the following example, we will delete the `cookbook-threadripper-hosts`
    aggregate.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following commands are used to delete a host aggregate:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the existing aggregates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00073.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Confirm that the aggregate has no hosts (Refer to the *Removing a compute host
    from a host aggregate* recipe if necessary):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00074.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now we can delete the aggregate with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command produces no output when successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Confirm the change with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back the following output, where the host aggregate has now
    been removed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00075.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deleting a host aggregate removes it and all of its metadata from the Nova database,
    and it can no longer be used for instance scheduling.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Availability Zone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Availability Zones** (**AZs**) are a special case of host aggregates. Here,
    host aggregates are used by Nova to make scheduling decisions; they are generally
    only visible to operators and administrators of the OpenStack Cloud. AZs are the
    end-user visible component. An AZ can be configured, like host aggregates, to
    represent features of the hardware.'
  prefs: []
  type: TYPE_NORMAL
- en: AZs are typically used to define failure domains, such as a cabinet or data
    center, or even geography. When configuring AZs, it is important to note that
    a host can only be a member of one AZ at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As AZs are a special use-case of host aggregates, a lot of operations, such
    as adding and removing hosts are the same. Thus, they are not repeated here.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AZ is a two-step process. First, we create an aggregate with the
    `--zone` parameter, or add it to an existing aggregate. Second, a host needs to
    be added to the aggregate before instances can be scheduled into the zone.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an AZ, you will need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the aggregate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The desired *name* of the AZ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *host* or *hosts* to add to the AZ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our example, these values are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Aggregate name: `cookbook-az`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Availability zone name: `cookbook-az`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compute host: `compute-01`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are to be used when creating an AZ:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will list the current AZs with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00076.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create a new aggregate with the `--zone` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00077.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now add a host to the aggregate with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following when successful:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00078.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now list the AZs we have available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will show the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00079.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Listing AZs will show all AZs available, irrespective of whether hosts exist
    in them or not. To verify that the hosts that are within an AZ, issue the following
    command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will bring back the output as shown in step 3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first command, `openstack availability zone list`, lists all AZs. Next,
    when creating the new aggregate, the special `--zone cookbook-az` parameter is
    passed, telling OpenStack Nova that this aggregate is also an AZ, specifying its
    name. Finally, a host is added to the AZ much the same as a host is added to an
    aggregate.
  prefs: []
  type: TYPE_NORMAL
- en: Booting an instance into an Availability Zone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instances can be created into a given AZ by passing the `--availability-zone`
    parameter as part of the creation process. Additionally, AZ can be selected in
    OpenStack Horizon as part of the instance creation wizard.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following information is required to boot an instance into an AZ:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the AZ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional information required to start an instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating instances is covered in detail in the *Booting an instance* recipe.
    As such, this example skips some of the detail, instead it focuses on how to create
    an instance in a specific AZ.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To boot an instance into a specific AZ, the `--availability-zone` parameter
    is specified when running the `openstack server create` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This will bring back an output like the following, showing the AZ (the `OS-EXT-AZ:availability-zone`
    field) where the instance was scheduled to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When specified, the `--availability-zone` parameter causes the Nova Scheduler
    to examine the specified AZ to see if the request can be satisfied.
  prefs: []
  type: TYPE_NORMAL
- en: Removing an Availability Zone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Removing an AZ is a multistep process, and has some caveats. To remove an AZ,
    you must first remove the hosts from the host aggregate.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following information is required to remove an AZ:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the AZ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps can be used to remove an AZ:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the AZs available with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00081.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now list the hosts within the AZ that we want to delete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00082.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now remove the hosts with following command (repeat as necessary for each host
    in the aggregate):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00083.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Remove the AZ using the `aggregate delete` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command produces no output if successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Confirm the removal of the AZ with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following, showing that our AZ has
    been removed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00084.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to remove an AZ, it must first have no active hosts. Because AZs are
    a special case of host aggregates, the commands for identifying and removing hosts
    from an AZ are the same. Once you have removed the hosts, the `openstack aggregate
    delete [name]` command is used to complete the removal of the AZ.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a flavor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before Nova can start instances, it first needs to know what resources should
    be assigned to those instances. The way Nova handles resource assignments is to
    define **flavors**. A flavor specifies the number of vCPUs, RAM, and the disk
    to assign to an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new flavor, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name*, *vCPU*, *RAM*, and *disk* values for the new flavor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The flavor we will create in this example will have the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Flavor name: `openstack.cookbook`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'vCPU: 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ram: 512 MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Disk: 5 GB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visibility: Public'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following commands are used to create a new flavor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the available flavors already configured in our environment with
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00085.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create the flavor with our given attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00086.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'List the flavors again to see the new flavor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00087.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `openstack flavor create --vcpus [vcpu_count] --ram [ram_MB] --disk [disk_GB]
    --public [name]` command is used to define flavors. The `--public` option is used
    to specify if the flavor should be available to all users of the OpenStack environment,
    or if it should remain limited in scope and visibility to the project in which
    the user belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a flavor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often times, requirements change; there is a demand for more performance, or
    business needs change. Whatever be the reason, your existing flavors may not meet
    the needs of those consuming cloud resources. When a given flavor is no longer
    suitable, it will need to be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A flavor that is associated with a running instance cannot be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To change attributes of a flavor for Nova, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the flavor to delete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following commands are used to delete a flavor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the flavors available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back a list of flavors like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00088.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To delete the flavor, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command shows no output when successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List the flavors again to view updated attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once again, this lists the flavors that are now available:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00089.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To delete a flavor the `openstack flavor delete [name]` command is used. Should
    you need to delete multiple flavors, you can specify multiple names or IDs, separating
    each with a space.
  prefs: []
  type: TYPE_NORMAL
- en: Setting CPU limits for a flavor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to defining the number of vCPUs assigned to an instance, limits
    on the use of these CPU cycles can be further imposed. Nova relies on the underlying
    hypervisor for the specific implementation of the CPU limits, and thus the values
    available may vary. Our example is based on QEMU/KVM.
  prefs: []
  type: TYPE_NORMAL
- en: CPU limits are a special case of flavor attributes that you may encounter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a CPU limit to a flavor, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the flavor to change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The values you would like to set the CPU limit to (share of time the allotted
    CPU is allowed to consume in milliseconds per cycle)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These values in our example are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cpu_quota` = 5000 ms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cpu_period` = 2500 ms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following commands are used to add CPU limits to a flavor.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CPU limits are not applied live. Rather, they are applied on instance launch.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of this writing, the `openstack` command-line client is the only
    way to view and change this setting. It is also not shown by default when viewing
    instance attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, view the current attributes of the flavor that we are changing, noting
    that we have no `properties` set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00090.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Add the CPU limit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command shows no output when successful
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'View the CPU limit by interrogating the flavor again, noting the `properties`
    field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00091.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to help mitigate the *noisy neighbor* issue, or to provide further
    definition of service levels, OpenStack supports CPU limits. In OpenStack, this
    is called the **Instance Resource Quota**. CPU limits are part of the flavor definition.
    Meaning, all instances of a given flavor will have the same CPU limits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imposing CPU limits are hypervisor specific. For KVM/libvirt environments,
    CPU limits are enforced using cgroups, using a combination of the following three
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cpu_shares`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cpu_quota`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cpu_period`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A full discussion of what these values are and how they interact is beyond
    the scope of this book. However, you can find a detailed explanation of them on
    the OpenStack wiki at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.openstack.org/wiki/InstanceResourceQuota](https://wiki.openstack.org/wiki/InstanceResourceQuota)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting IOPS limits for a flavor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with CPU limits, IOPS limits can also be imposed to prevent an instance type
    from hogging all of the available IO on a system. IOPS here refers to the storage
    and network IO. Also, as with CPU limits, IOPS limits are a special case of flavor
    attributes that you may encounter frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of this writing, the `openstack` command-line client is the only
    way to view and change this setting. It is also not shown by default when viewing
    instance attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add an IOPS limit to a flavor, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the flavor to change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value you would like to set the IOPS limit to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example, these values are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disk_read_iops` = 100 IOPS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disk_write_iops` = 100 IOPS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following commands are used to add IOPS limits to a flavor:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with changing flavor attributes, IOPS limits are not applied to running instances.
    Rather, they are applied on instance launch.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, view the attributes of the flavor that is changing, noting that the
    `properties` field is blank:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00092.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now we can add the IOPS limit with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command shows no output when successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can verify the IOPS limits by viewing the flavor properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following, noting that we have now
    set the properties to reflect the IOPS imposed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00093.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with CPU limits, IO limits are defined at a flavor level. However, unlike
    CPU limits, IO limits can be applied by the hypervisor, the storage layer, or
    a combination of the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the IOPS limit values for a given flavor, the following `openstack`
    command is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: While both read and write IOPS are shown for completeness, you need not specify
    both.
  prefs: []
  type: TYPE_NORMAL
- en: Booting an instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most fundamental tasks that can be performed with instances are life cycle
    tasks. In this recipe, we will show you how to start or boot an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start an instance, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *image* to use for the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the *flavor* to create the instance with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the *network* or networks to attach the instance to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *keypair* name to allow access to an instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of any *security groups* to associate with the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The instance we will boot will have the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instance name: `cookbook.test`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flavor type: `openstack.cookbook`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image name: `Ubuntu 16.04 amd64` (UUID)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network: `public` (UUID)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keypair name: `cookbook_key`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security groups: `ssh`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To start an instance, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To list the instances that are currently running, we issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command will produce no output if there are no instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List the available images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back a list of images available:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00094.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'List the available networks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will list the networks that we can attach an instance to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00095.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create a keypair (if you do not have one already created and available for
    use):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, upload this with the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output showing the fingerprint of your key:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00096.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now we can boot the instance with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This produces a table of output showing that the instance is booting (not shown
    here for brevity).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To view more information about the booted instance, issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00097.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After noting a number of required values we will be supplying as input, such
    as the UUID of the image that we want to boot and the UUID of the network we want
    to attach the instance to, we then called a tool from OpenStack Client to launch
    our instance. Part of that command line refers to the keypair to use. We then
    connect to the instance using the private key as part of that keypair generated.
  prefs: []
  type: TYPE_NORMAL
- en: How does the cloud instance know what key to use? As part of the boot scripts
    for this image, it makes a call back to the metaserver, which is a function of
    the `nova-api` and `nova-api-metadata` services. The metaserver provides a go-between
    that bridges our instance and the real world, which the cloud-init boot process
    can call and in this case, it downloads a script to inject our private key into
    the Ubuntu user's `.ssh/authorized_keys` file.
  prefs: []
  type: TYPE_NORMAL
- en: When a cloud instance is launched, it generates a number of useful metrics and
    details about that instance. This is presented by the `openstack server list`
    and `openstack server show` commands. The `openstack server list` command shows
    a convenient short version listing the ID, name, status, and IP addresses of our
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping an instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, an instance will need to be stopped for a number of reasons, for
    example, maintenance and offline migration, yet as an OpenStack administrator,
    you may not want to completely destroy the instance and data associated with it.
    Thus, you will want to stop the instance instead.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To stop an instance, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will be stopping the `cookbook.test` instance created in
    the *Booting an instance* recipe. To stop the instance, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we list the running instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back a list of the running instances. Consider this example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00098.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To stop the instance, simply issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command takes a few moments to complete and will not display the output
    if successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now list instances to confirm the status of the instances. Here we''re looking
    for the states of `SHUTOFF` for our `cookbook.test` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00099.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To stop an instance we use the `openstack` client''s `server stop` command:
    `openstack server stop [Name or ID]`. This tells Nova to power off the instance.
    This is synonymous to holding the power button on your laptop, or unplugging a
    server.'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete the life cycle of an instance, you will need to delete it. Nova
    provides a facility for this, using the `openstack` command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete an instance, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will be deleting the `cookbook.test` instance created in
    the *Booting an instance* recipe used for booting. To delete the instance, use
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the running instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00100.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To delete the instance named `cookbook.test`, issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command produces no output when successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now list the instances again to confirm the deletion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output, where the instance we have deleted is now not
    present:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00101.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `openstack server delete` command, unlike suspending or shelving an instance,
    deletes the instance and all data within it.
  prefs: []
  type: TYPE_NORMAL
- en: Live migration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the key tenets of cloud is being abstracted away from hardware. However,
    hardware does require maintenance from time to time, or a host will need a software
    upgrade. Whatever the reason, a host may need to be taken offline for maintenance,
    ideally with little to no downtime for the instances running on the host. To accommodate
    this, Nova provides two methods for live migrating instances: block migration,
    when shared storage is not available in the environment, and the live migration
    flag, when instances are booted from the shared storage (where every compute host
    can see the same storage used by each instance for its boot volume).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To live migrate an instance, you will need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate administrator credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the destination hypervisor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your environment is configured so that instances boot from the shared storage,
    such as RBD provided by Ceph, then live migrations are almost instantaneous (depending
    on how busy the instance is). A feature called **block migration** is much slower.
    Block migration is used in environments where shared storage is not used for instances.
  prefs: []
  type: TYPE_NORMAL
- en: Migrations can only be performed by a user with admin role privileges.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we list the available hypervisors. We are noting where we can migrate
    our running instances to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00102.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Next, view the instance properties to identify the source host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back the fields (also known as column names, as denoted by
    the `-c` flag) that we are interested in. Note, in this example, the instance
    called `cookbook.test` is running from the hypervisor called `compute-01.cook.book`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00103.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To live migrate the instance *where no shared storage is available* issue the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We do not specify a target compute host using the `--block-migration` method,
    instead, we let the Nova Scheduler decide on the next available hypervisor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This command shows no output when successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To live migrate the instance, *with shared storage such as Ceph*, issue the
    following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We specify the target hypervisor with the `--live` flag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This command shows no output when successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check the status of migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As block migrations generally take longer, you may see the state as `resize_migrating`,
    indicating that the task of migrating is still in process:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00104.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Verify the migration with the following command, ensuring that the instance
    is now running from a different hypervisor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00105.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Migrations of any kind are generally best performed when the instance is not
    under heavy utilization.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Live migrations are an essential feature that enables OpenStack operators and
    administrators to perform maintenance of the underlying cloud infrastructure without
    affecting the consumers of said cloud. Additionally, the OpenStack administrator
    can use telemetry data from resource monitoring services (such as Ceilometer)
    and make live migration decisions to balance workloads across the OpenStack Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Live migration in OpenStack is handled by the libvirt drivers. Specifically,
    when you issue the `openstack server migrate` command, OpenStack Compute creates
    a connection from libvirtd on one compute host to the same process on the remote
    host. Once this connection is established, depending on the parameters you specified,
    the memory state of the instance is synchronized and the control is transferred.
    In the preceding example, we first specified the additional `--block-migrate`
    parameter, which handles the movement of the instance's disk files in the absence
    of shared storage, and then we showed how the `--live` flag can be used when instances
    are booted from shared storage.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Remember**: Migrations can only be performed by users with the `admin` role.'
  prefs: []
  type: TYPE_NORMAL
- en: Snapshotting an instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snapshotting an instance will create a Glance image of the instance at the point
    in time the snapshot was taken. This image can then be used to deploy additional
    instances of a given application, or as a bootable backup of the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create a snapshot of an instance, you require the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following commands are used to create an instance snapshot:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we list the existing images with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back a list of images like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00106.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now list the running instances with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00107.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To create the snapshot, issue the following command (note the optional shell
    expansion command we''re using to timestamp the name of the snapshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This brings an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00108.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We can verify that the snapshot was created with the following command. Note
    that we limited the screenshot to just show our snapshotted image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives an output that will show our snapshotted image:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00109.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instance snapshots create a Glance image of the running instance. The snapshot
    can be used for backup, redistribution, or part of a continuous deployment pipeline
    as a build artifact. The images created with `openstack server image create --name
    [snapshot_name] [instance]` are bootable. You have a large degree of flexibility
    in how they are used.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instance snapshots are rather powerful. While a full exploration of the possibilities
    are beyond the scope of this book, the following example shows you what can be
    achieved using this feature: an easy way to back up all running instances.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To snapshot every instance, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warning**: Snapshotting every instance is not recommended for larger environments.
    In addition to being time consuming, it can also consume a rather large amount
    of storage used by Glance, as snapshots are not sparsely created like those of
    the original QCOW2 image you may have used'
  prefs: []
  type: TYPE_NORMAL
- en: Booting an instance from a snapshot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created an instance snapshot, imagine that we need to go back
    and recover files, or revert the application to the state it was at the time the
    snapshot was taken. As the snapshot is stored as an OpenStack image, you can boot
    directly from the snapshot, and as such all the details required to boot an instance
    applies to booting a snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start an instance from a snapshot, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *snapshot* to use for the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the *flavor* to create the instance with (this must be of equal
    or greater size of flavor compared with the one used in the original instance)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the *network* or networks to attach the instance to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *keypair* name to allow access to an instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of any *security groups* to associate with the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The instance we will boot will have the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `cookbook.test_snapshot-2017-09-08T163619`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instance name: `cookbook.test_restore`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flavor type: `openstack.cookbook`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network: `public` (UUID)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keypair name: `cookbook_key`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security groups: `ssh`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To boot from an instance snapshot, we use the same process as used when booting
    an instance. The commands are repeated here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can list the existing running instances with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back a list of `ACTIVE` running instances:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00110.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We can then boot the instance snapshot using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will bring back the familiar booting an instance output that has been omitted
    here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now list the running instances again to show our `cookbook.test_restore`
    instance is `ACTIVE`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This shows our instance is now running:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00111.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As instance snapshots are stored as OpenStack images, booting from a snapshot
    is an identical process to booting from an existing image. There are some caveats
    however. As snapshots are created while an image is running, booting from them
    is similar to booting a server after a power failure. You must also ensure that
    you are using a flavor that is of equal or greater size to the original instance—for
    example, if an instance was originally created as an m1.large, the snapshot must
    be booted with an m1.large or greater flavor. Additionally, if the instance is
    a Windows image attached to an Active Directory domain, it may cause issues having
    two of the same instances running at the same time. To mitigate this, consider
    booting the instance onto a separate recovery network.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are tools available to quiesce the filesystem inside an instance and provide
    a more consistent image that are beyond the scope of this book. However, as guidance,
    ensuring that a filesystem sync (to flush any disk writes) inside the running
    instance is recommended before a snapshot is taken.
  prefs: []
  type: TYPE_NORMAL
- en: Rescuing an instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack Compute provides a handy troubleshooting tool with rescue mode. Should
    a user lose an SSH key, or otherwise not be able to boot and access an instance,
    say, bad iptables settings or failed network configuration, rescue mode will start
    a minimal instance and attach the disk from the failed instance to aid in recovery.
    This applies to both Windows and Linux instances as this process essentially allows
    the mounting of the boot volume of your failed instance as a secondary disk to
    the rescue instance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To put an instance into rescue mode, you will need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The instance we will use in this example is `cookbook.test`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To put an instance into rescue mode, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will put the instance into rescue mode as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will present us with a temporary password we can then use to access the
    rescue instance:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00112.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To verify that an instance is in rescue mode, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will present the `status` value as `RESCUE`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00113.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At this point, we can then access this instance, using the `root` username,
    and the temporary password we were given to perform operating system rescue commands
    on the mounted filesystem (the filesystem that is the boot volume of our original,
    broke instance).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When in rescue mode, the disk of the instance in rescue mode is attached as
    a secondary. In order to access the data on the disk, you will need to mount it.
    As filesystems differ between OS and deployment, showing the mount process is
    beyond the scope of this book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To exit rescue mode, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command will produce no output if successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `openstack server rescue` command provides a rescue environment with the
    disk of your instance attached. First, it powers off the named instance, then
    it boots the rescue environment attaching the disks of the original instance.
    Finally, it provides you with the login credentials for the rescue instance.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the rescue instance is done via SSH. Once logged in to the rescue
    instance, you can mount the disk using mount `<path to disk> /mnt`.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed your troubleshooting or recovery, the `unrescue` command
    reverses this process; first, stopping the rescue environment and detaching the
    disk, then booting the instance as it originally was.
  prefs: []
  type: TYPE_NORMAL
- en: Shelving an instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Somewhat unique to OpenStack Nova is the ability to *shelve* an instance. Instance
    shelving allows you to stop an instance without having it consume resources. A
    shelved instance will be retained as a bootable instance, as well as its resources
    assigned such as IP address, for a configurable amount of time, then deleted.
    This is useful as part of an instance life cycle process or to conserve resources.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Stopping versus shelving?**'
  prefs: []
  type: TYPE_NORMAL
- en: Stopping an instance does not free up the amount of resources still available
    as part of your quota as the assumption is that you will be starting that instance
    back up again after a short period of time. You would not be able to start a stopped
    instance if you didn't have any free CPUs or GBs of RAM left of your assigned
    quota. A stopped instance's resources are still considered *used resources* to
    the OpenStack Compute scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: Shelving, however, frees up these resources, but still allows you, at a later
    date, to access the shelved instance. Quota rules and restrictions still apply
    when unshelving an instance, but shelving an instance will allow you to work within
    your allotted resource quotas while preserving your instance data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To shelve an instance, the following information is required:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To shelve an instance, the following commands are used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we check the status of the instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that your instance has `status` of `ACTIVE`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00114.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To shelve the instance, issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command produces no output when successful. Shelving an instance may take
    a few moments depending on your environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To check the status of the instance, issue the following command, noting the
    new status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `status` value has changed to `SHELVED_OFFLOADED`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00115.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A shelved instance will retain the addresses it has been assigned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To unshelve the instance and return it back to an `ACTIVE` state, simply issue
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command produces no output when successful. As with shelving, the instance
    may take a few moments to become active, depending on your environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can verify the state by checking the status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `status` value has returned to `ACTIVE`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00116.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When told to shelve an instance, OpenStack Compute will first stop the instance.
    It then creates an instance snapshot to retain the state of the instance. The
    runtime details, such as number of vCPUs, memory, and IP addresses, are retained
    so that the instance can be unshelved and rescheduled at a later time.
  prefs: []
  type: TYPE_NORMAL
- en: This differs from shutting down an instance, in that the resources of a shutdown
    instance are still reserved on the host on which it resided, so that it can be
    powered back on quickly. A shelved instance however, will still show in `openstack
    server list`, while the resources that were assigned will remain available. Additionally,
    as the shelved instance will need to be restored from an image, OpenStack Compute
    will perform placement as if the instance were new, and starting it will take
    some time.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the console logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Console logs are critical for troubleshooting the startup process of an instance.
    These logs are produced at boot time, before the console becomes available. Typically,
    when working with cloud hosted instances, accessing these can be difficult. OpenStack
    Compute provides a mechanism for accessing the console logs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access the console logs of an instance, the following information is required:'
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `openrc` file containing appropriate credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *name* or *ID* of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this example, we will view the last five lines of the `cookbook.test` instance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To show the console logs of an instance, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'This connects to the serial console output of an instance, mimicking the information
    as if a monitor was directly attached to a physical server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `openstack console log show` command collects the console logs, as if you
    were connected to the server via a serial port or sitting behind the keyboard
    and monitor at boot time. The command will, by default, return all of the logs
    generated to that point. To limit the amount of output, the `--lines` parameter
    can be used to return a specific number of lines from the end of the log.
  prefs: []
  type: TYPE_NORMAL
