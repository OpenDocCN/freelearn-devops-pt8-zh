- en: Chapter 2. Creating your first manifests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 创建你的第一个清单
- en: '|   | *Beginnings are such delicate times.* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *开始是如此脆弱的时刻。* |   |'
- en: '|   | --*Frank Herbert, ''Dune''* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*弗兰克·赫伯特，《沙丘》* |   |'
- en: In this chapter, you'll learn how to write your first manifest with Puppet,
    and how to put Puppet to work configuring a server. You'll also understand how
    Puppet compiles and applies a manifest. You'll see how to use Puppet to manage
    the contents of files, how to install packages, and how to control services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何用Puppet编写第一个清单，并如何利用Puppet配置服务器。你还将了解Puppet如何编译和应用清单。你将看到如何使用Puppet管理文件内容，如何安装软件包，以及如何控制服务。
- en: '![Creating your first manifests](img/B08880_02_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![创建你的第一个清单](img/B08880_02_01.jpg)'
- en: Hello, Puppet – your first Puppet manifest
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，Puppet——你的第一个Puppet清单
- en: The first example program in any programming language, by tradition, prints
    `hello, world`. Although we can do that easily in Puppet, let's do something a
    little more ambitious, and have Puppet create a file on the server containing
    that text.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 任何编程语言中的第一个示例程序，按照传统，都会打印`hello, world`。虽然我们在Puppet中可以轻松做到这一点，但让我们做一些更有挑战性的事情，让Puppet在服务器上创建一个包含该文本的文件。
- en: 'On your Vagrant box, run the following command:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Vagrant盒子中，运行以下命令：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can ignore the output from Puppet for the moment, but if all has gone well,
    we should be able to run the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以暂时忽略Puppet的输出，但如果一切顺利，我们应该能够运行以下命令：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Understanding the code
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解代码
- en: 'Let''s look at the example code to see what''s going on (run `cat /example/file_hello.pp`,
    or open the file in a text editor):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下示例代码，看看发生了什么（运行`cat /example/file_hello.pp`，或者在文本编辑器中打开文件）：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The code term `file` begins a **resource declaration** for a `file` resource.
    A **resource** is some bit of configuration that you want Puppet to manage: for
    example, a file, user account, or package. A resource declaration follows this
    pattern:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 代码术语`file`开始了一个**资源声明**，声明了一个`file`资源。**资源**是你希望Puppet管理的一部分配置：例如，文件、用户账户或软件包。资源声明遵循以下模式：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Resource declarations will make up almost all of your Puppet manifests, so
    it''s important to understand exactly how they work:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 资源声明将构成你几乎所有的Puppet清单，因此理解它们是如何工作的非常重要：
- en: '`RESOURCE_TYPE` indicates the type of resource you''re declaring; in this case,
    it''s a `file`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESOURCE_TYPE`表示你声明的资源类型；在本例中，它是`file`。'
- en: '`TITLE` is the name that Puppet uses to identify the resource internally. Every
    resource must have a unique title. With `file` resources, it''s usual for this
    to be the full path to the file: in this case, `/tmp/hello`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TITLE`是Puppet用来在内部标识资源的名称。每个资源必须具有唯一的标题。对于`file`资源，通常这个标题是文件的完整路径：在这个例子中，是`/tmp/hello`。'
- en: The remainder of this block of code is a list of attributes that describe how
    the resource should be configured. The attributes available depend on the type
    of the resource. For a file, you can set attributes such as `content`, `owner`,
    `group`, and `mode`, but one attribute that every resource supports is `ensure`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的其余部分是描述如何配置资源的属性列表。可用的属性取决于资源的类型。对于文件，你可以设置`content`、`owner`、`group`和`mode`等属性，但每个资源都支持的一个属性是`ensure`。
- en: 'Again, the possible values for `ensure` are specific to the type of resource.
    In this case, we use `file` to indicate that we want a regular file, as opposed
    to a directory or symlink:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，`ensure`的可能值是特定于资源类型的。在这种情况下，我们使用`file`来表示我们想要一个常规文件，而不是目录或符号链接：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, to put some text in the file, we specify the `content` attribute:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了在文件中添加一些文本，我们指定`content`属性：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `content` attribute sets the contents of a file to a string value you provide.
    Here, the contents of the file are declared to be `hello, world`, followed by
    a newline character (in Puppet strings, we write the newline character as `\n`).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`content`属性将文件的内容设置为你提供的字符串值。在这里，文件的内容被声明为`hello, world`，后跟一个换行符（在Puppet字符串中，我们用`\n`表示换行符）。'
- en: Note that `content` specifies the entire content of the file; the string you
    provide will replace anything already in the file, rather than be appended to
    it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`content`指定了文件的全部内容；你提供的字符串将替换文件中已有的内容，而不是将其附加到文件中。
- en: Modifying existing files
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改现有文件
- en: What happens if the file already exists when Puppet runs and it contains something
    else? Will Puppet change it?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Puppet运行时文件已经存在且包含其他内容，会发生什么？Puppet会修改它吗？
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The answer is yes. If any attribute of the file, including its contents, doesn't
    match the manifest, Puppet will change it so that it does.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是肯定的。如果文件的任何属性，包括其内容，与清单不匹配，Puppet 将更改它，以使其一致。
- en: This can lead to some surprising results if you manually edit a file managed
    by Puppet. If you make changes to a file without also changing the Puppet manifest
    to match, Puppet will overwrite the file the next time it runs, and your changes
    will be lost.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你手动编辑 Puppet 管理的文件，这可能会导致一些意外的结果。如果你在不更改 Puppet 清单的情况下修改文件，Puppet 在下次运行时会覆盖该文件，你的更改将丢失。
- en: 'So it''s a good idea to add a comment to files that Puppet is managing: something
    like the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最好在 Puppet 管理的文件中添加注释，内容可以类似于以下示例：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Add this to Puppet's copy of the file when you first deploy it, and it will
    remind you and others not to make manual changes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在你首次部署文件时，将此内容添加到 Puppet 的文件副本中，它将提醒你和其他人不要手动更改文件。
- en: Dry-running Puppet
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟运行 Puppet
- en: 'Because you can''t necessarily tell in advance what applying a Puppet manifest
    will change on the system, it''s a good idea to do a dry run first. Adding the
    `--noop` flag to `puppet apply` will show you what Puppet would have done, without
    actually changing anything:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你不能事先确定应用 Puppet 清单会对系统做出哪些更改，所以最好先进行模拟运行。将 `--noop` 标志添加到 `puppet apply`
    中，可以在不做任何实际更改的情况下，展示 Puppet 会执行的操作：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Puppet decides whether or not a `file` resource needs updating, based on its
    MD5 hash sum. In the previous example, Puppet reports that the current value of
    the hash sum for `/tmp/hello.txt` is `7678...`, whereas according to the manifest,
    it should be `22c3...`. Accordingly, the file will be changed on the next Puppet
    run.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 会根据文件的 MD5 哈希值决定是否需要更新 `file` 资源。在上一个例子中，Puppet 报告 `/tmp/hello.txt` 当前的哈希值是
    `7678...`，而根据清单，它应该是 `22c3...`。因此，下一次 Puppet 运行时，该文件将被更改。
- en: 'If you want to see what change Puppet would actually make to the file, you
    can use the `--show_diff` option:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看 Puppet 实际上会对文件做出什么更改，可以使用 `--show_diff` 选项：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These options are very useful when you want to make sure that your Puppet manifest
    will affect only the things you're expecting it to—or, sometimes, when you want
    to check if something has been changed outside Puppet without actually undoing
    the change.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想确保你的 Puppet 清单只会影响你预期的内容时，这些选项非常有用——有时，它们也能帮助你检查某些内容是否在 Puppet 外部发生了变化，而无需实际撤销更改。
- en: How Puppet applies the manifest
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet 如何应用清单
- en: Here's how your manifest is processed. First, Puppet reads the manifest and
    the list of resources it contains (in this case, there's just one resource), and
    compiles these into a catalog (an internal representation of the desired state
    of the node).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是清单的处理过程。首先，Puppet 读取清单及其中包含的资源列表（在这个例子中，只有一个资源），并将其编译成目录（节点所需状态的内部表示）。
- en: 'Puppet then works through the catalog, applying each resource in turn:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Puppet 按顺序应用目录中的每个资源：
- en: First, it checks if the resource exists on the server. If not, Puppet creates
    it. In the example, we've declared that the file `/tmp/hello.txt` should exist.
    The first time you run `sudo puppet apply`, this won't be the case, so Puppet
    will create the file for you.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，它检查资源是否存在于服务器上。如果不存在，Puppet 将创建它。在这个例子中，我们声明了文件 `/tmp/hello.txt` 应该存在。第一次运行
    `sudo puppet apply` 时，文件不存在，因此 Puppet 将为你创建该文件。
- en: 'Then, for each resource, it checks the value of each attribute in the catalog
    against what actually exists on the server. In our example, there''s just one
    attribute: `content`. We''ve specified that the content of the file should be
    `hello, world\n`. If the file is empty or contains something else, Puppet will
    overwrite the file with what the catalog says it should contain.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，对于每个资源，它检查目录中每个属性的值与服务器上实际存在的内容是否匹配。在我们的例子中，只有一个属性：`content`。我们指定了文件的内容应该是
    `hello, world\n`。如果文件为空或包含其他内容，Puppet 将用目录中指定的内容覆盖该文件。
- en: In this case, the file will be empty the first time you apply the catalog, so
    Puppet will write the string `hello, world\n` into it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，第一次应用目录时，文件将为空，因此 Puppet 会将字符串 `hello, world\n` 写入文件中。
- en: We'll go on to examine the `file` resource in much more detail in later chapters.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，我们将更详细地探讨 `file` 资源。
- en: Creating a file of your own
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你自己的文件
- en: Create your own manifest file (you can name it anything you like, so long as
    the file extension is `.pp`). Use a `file` resource to create a file on the server
    with any contents you like. Apply the manifest with Puppet and check that the
    file is created and contains the text you specified.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建你自己的清单文件（你可以随意命名，只要文件扩展名是`.pp`）。使用`file`资源在服务器上创建一个文件，并设置你喜欢的内容。应用清单并使用Puppet检查文件是否已创建并包含你指定的文本。
- en: Edit the file directly and change the contents, then re-apply Puppet and check
    that it changes the file back to what the manifest says it should contain.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 直接编辑文件并更改内容，然后重新应用Puppet，检查它是否将文件更改回清单中指定的内容。
- en: Managing packages
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理包
- en: Another key resource type in Puppet is the **package**. A major part of configuring
    servers by hand involves installing packages, so we will also be using packages
    a lot in Puppet manifests. Although every operating system has its own package
    format, and different formats vary quite a lot in their capabilities, Puppet represents
    all these possibilities with a single `package` type. If you specify in your Puppet
    manifest that a given package should be installed, Puppet will use the appropriate
    package manager commands to install it on whatever platform it's running on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet中的另一个关键资源类型是**package**。手动配置服务器的一个重要部分就是安装包，因此我们在Puppet清单中也会经常使用包。尽管每个操作系统都有自己的包格式，而且不同的格式在功能上差异较大，但Puppet通过一个单一的`package`类型来表示所有这些可能性。如果你在Puppet清单中指定一个给定的包应该被安装，Puppet会使用适当的包管理器命令，在其运行的任何平台上安装它。
- en: 'As you''ve seen, all resource declarations in Puppet follow this form:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Puppet中所有资源声明都遵循这种格式：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`package` resources are no different. The `RESOURCE_TYPE` is `package`, and
    the only attribute you usually need to specify is `ensure`, and the only value
    it usually needs to take is `installed`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`package`资源没有什么不同。`RESOURCE_TYPE`是`package`，你通常需要指定的唯一属性是`ensure`，而它通常需要的唯一值是`installed`：'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Try this example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这个示例：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s see whether `cowsay` is installed:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`cowsay`是否已安装：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that's a useful package!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这可真是个有用的包！
- en: How Puppet applies the manifest
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet如何应用清单
- en: The title of the `package` resource is `cowsay`, so Puppet knows that we're
    talking about a package named `cowsay`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`package`资源的标题是`cowsay`，因此Puppet知道我们在谈论一个名为`cowsay`的包。'
- en: 'The `ensure` attribute governs the installation state of packages: unsurprisingly,
    `installed` tells Puppet that the package should be installed.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`ensure`属性决定了包的安装状态：不出所料，`installed`告诉Puppet该包应该被安装。'
- en: As we saw in the earlier example, Puppet processes this manifest by examining
    each resource in turn and checking its attributes on the server against those
    specified in the manifest. In this case, Puppet will look for the `cowsay` package
    to see whether it's installed. It is not, but the manifest says it should be,
    so Puppet carries out all the necessary actions to make reality match the manifest,
    which here means installing the package.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的示例中看到的，Puppet通过逐个检查每个资源并检查它在服务器上的属性与清单中指定的属性是否匹配来处理这个清单。在这种情况下，Puppet会查找`cowsay`包，看看它是否已安装。它没有，但清单中说应该安装它，因此Puppet执行所有必要的操作，以使现实与清单一致，这里意味着安装该包。
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's still early on in the book, but you can already do a great deal with Puppet!
    If you can install packages and manage the contents of files, you can get a very
    long way towards setting up any kind of server configuration you might need. If
    you were to stop reading right here (which would be a shame, but we're all busy
    people), you would still be able to use Puppet to automate a large part of the
    configuration work you will encounter. But Puppet can do much more.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本书仍处于早期阶段，但你已经可以使用Puppet做很多事情了！如果你能安装包并管理文件内容，那么你就能在很大程度上完成你可能需要的任何服务器配置。如果你现在就停止阅读（这会有点可惜，但我们都很忙），你仍然可以使用Puppet来自动化你将遇到的很多配置工作。但Puppet的功能远不止如此。
- en: Exercise
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'Create a manifest that uses the `package` resource to install any software
    you find useful for managing servers. Here are some suggestions: `tmux`, `sysdig`,
    `atop`, `htop`, and `dstat`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个清单，使用`package`资源安装你认为在服务器管理中有用的任何软件。以下是一些建议：`tmux`、`sysdig`、`atop`、`htop`和`dstat`。
- en: Querying resources with the puppet resource
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用puppet资源查询资源
- en: 'If you want to see what version of a package Puppet thinks you have installed,
    you can use the `puppet resource` tool:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看Puppet认为你已安装的包的版本，可以使用`puppet resource`工具：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`puppet resource TYPE TITLE` will output a Puppet manifest representing the
    current state of the named resource on the system. If you leave out `TITLE`, you''ll
    get a manifest for all the resources of the type `TYPE`. For example, if you run
    `puppet resource package`, you''ll see the Puppet code for all the packages installed
    on the system.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`puppet resource TYPE TITLE` 将输出一个表示系统中指定资源当前状态的 Puppet 清单。如果你省略 `TITLE`，则会得到
    `TYPE` 类型的所有资源的清单。例如，如果你运行 `puppet resource package`，你将看到系统上所有已安装包的 Puppet 代码。'
- en: Tip
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`puppet resource` even has an interactive configuration feature. To use it,
    run the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`puppet resource` 甚至有一个交互式配置功能。要使用它，请运行以下命令：'
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you run this, Puppet will generate a manifest for the current state of the
    resource, and open it in an editor. If you now make changes and save it, Puppet
    will apply that manifest to make changes to the system. This is a fun little feature,
    but it would be rather time-consuming to do your entire configuration this way.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行此命令，Puppet 将生成资源的当前状态清单，并在编辑器中打开它。如果你现在进行更改并保存，Puppet 将应用该清单并对系统进行更改。这是一个有趣的小功能，但如果用这种方式进行整个配置，会相当耗时。
- en: Services
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: 'The third most important Puppet resource type is the **service**: a long-running
    process that either does some continuous kind of work, or waits for requests and
    then acts on them. For example, on most systems, the `sshd` process runs all the
    time and listens for SSH login attempts.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种最重要的 Puppet 资源类型是**服务**：一个长期运行的进程，或者做一些持续性的工作，或者等待请求并对其做出响应。例如，在大多数系统上，`sshd`
    进程会一直运行，并监听 SSH 登录请求。
- en: 'Puppet models services with the `service` resource type. The `service` resources
    look like the following example (you can find this in `service.pp` in the `/examples/`
    directory. From now on, I''ll just give the filename of each example, as they
    are all in the same directory):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 用 `service` 资源类型来建模服务。`service` 资源看起来像下面这个例子（你可以在 `/examples/` 目录下的 `service.pp`
    中找到这个例子。从现在起，我将只提供每个例子的文件名，因为它们都在同一个目录下）：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `ensure` parameter governs whether the service should be running or not.
    If its value is `running`, then as you might expect, Puppet will start the service
    if it is not running. If you set `ensure` to `stopped`, Puppet will stop the service
    if it is running.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`ensure` 参数控制服务是否应运行。如果它的值是 `running`，那么如你所料，Puppet 将启动服务，如果它没有运行的话。如果你将 `ensure`
    设置为 `stopped`，Puppet 将停止服务，如果它正在运行的话。'
- en: Services may also be set to start when the system boots, using the `enable`
    parameter. If `enable` is set to `true`, the service will start at boot. If, on
    the other hand, `enable` is set to `false`, it will not. Generally speaking, unless
    there's a good reason not to, all services should be set to start at boot.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 服务也可以设置为在系统启动时启动，使用 `enable` 参数。如果 `enable` 设置为 `true`，服务将在启动时启动。如果 `enable`
    设置为 `false`，则不会启动。一般来说，除非有充分的理由，否则所有服务都应该设置为在启动时启动。
- en: Getting help on resources with puppet describe
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `puppet describe` 获取资源帮助
- en: 'If you''re struggling to remember all the different attributes of all the different
    resources, Puppet has a built-in help feature that will remind you. Run the following
    command, for example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记不住所有不同资源的各种属性，Puppet 有一个内置的帮助功能可以提醒你。例如，运行以下命令：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will give a description of the `service` resource, along with a complete
    list of attributes and allowed values. This works for all built-in resource types
    as well as many provided by third-party modules. To see a list of all the available
    resource types, run the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提供 `service` 资源的描述，并列出所有属性和允许的值。这适用于所有内置资源类型以及许多第三方模块提供的资源类型。要查看所有可用资源类型的列表，可以运行以下命令：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The package-file-service pattern
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包文件服务模式
- en: 'It''s very common for a given piece of software to require these three Puppet
    resource types: the `package` resource installs the software, the `file` resource
    deploys one or more configuration files required for the software, and the `service`
    resource runs the software itself.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的软件通常需要这三种 Puppet 资源类型：`package` 资源安装软件，`file` 资源部署软件所需的一个或多个配置文件，`service`
    资源运行软件本身。
- en: 'Here''s an example using the MySQL database server (`package_file_service.pp`):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 MySQL 数据库服务器的例子（`package_file_service.pp`）：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `package` resource makes sure the `mysql-server` package is installed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`package` 资源确保 `mysql-server` 包被安装。'
- en: The config file for MySQL is `/etc/mysql/mysql.cnf`, and we use a `file` resource
    to copy this file from the Puppet repo so that we can control MySQL settings.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的配置文件是`/etc/mysql/mysql.cnf`，我们使用`file`资源从Puppet仓库复制该文件，以便我们可以控制MySQL设置。
- en: Finally, the `service` resource ensures that the `mysql` service is running.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`service`资源确保`mysql`服务正在运行。
- en: Notifying a linked resource
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通知链接资源
- en: 'You might have noticed a new attribute, called `notify`, in the `file` resource
    in the previous example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到在前面的示例中，`file`资源中新增了一个属性，叫做`notify`：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What does this do? Imagine you've made a change to the `mysql.cnf` file and
    applied this change with Puppet. The updated file will be written to a disk, but
    because the `mysql` service is already running, it has no way of knowing that
    its config file has changed. Therefore, your changes will not actually take effect
    until the service is restarted. However, Puppet can do this for you if you specify
    the `notify` attribute on the `file` resource. The value of `notify` is the resource
    to notify about the change, and what that involves depends on the type of resource
    that's being notified. When it's a service, the default action is to restart the
    service. (We'll find out about the other options in [Chapter 4](ch04.html "Chapter 4. Understanding
    Puppet resources"), *Understanding Puppet resources*.)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是什么意思呢？假设你对`mysql.cnf`文件进行了修改，并使用Puppet应用了这个修改。更新后的文件将被写入磁盘，但因为`mysql`服务已经在运行，它无法知道配置文件已经更改。因此，直到重新启动服务，修改才会生效。不过，如果你在`file`资源上指定了`notify`属性，Puppet会为你处理这个问题。`notify`的值是通知的资源，具体操作取决于被通知资源的类型。当它是一个服务时，默认操作是重新启动该服务。（我们将在[第4章](ch04.html
    "Chapter 4. Understanding Puppet resources")，*理解Puppet资源*中了解其他选项。）
- en: Usually, with the package-file-service pattern, the file notifies the service,
    so whenever Puppet changes the contents of the file, it will restart the notified
    service to pick up the new configuration. If there are several files that affect
    the service, they should all notify the service, and Puppet is smart enough to
    only restart the service once, however many dependent resources are changed.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在包-文件-服务模式中，文件会通知服务，因此每当Puppet更改文件内容时，它会重新启动已通知的服务以应用新配置。如果有多个文件影响该服务，它们应该都通知服务，而Puppet足够智能，只会在有多个依赖资源更改时重新启动一次服务。
- en: 'The name of the resource to notify is specified as the resource type, capitalized,
    followed by the resource title, which is quoted and within square brackets: `Service[''mysql'']`.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要通知的资源名称以资源类型（大写）为前缀，后跟资源标题，标题被引号括起来并放在方括号内：`Service['mysql']`。
- en: Resource ordering with require
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`require`进行资源顺序排列
- en: 'In the package-file-service example, we declared three resources: the `mysql-server`
    package, the `/etc/mysql/mysql.cnf` file, and the `mysql` service. If you think
    about it, they need to be applied in that order. Without the `mysql-server` package
    installed, there will be no `/etc/mysql/` directory to put the `mysql.cnf` file
    in. Without the package or the config file, the `mysql` service won''t be able
    to run.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在包-文件-服务示例中，我们声明了三个资源：`mysql-server`包、`/etc/mysql/mysql.cnf`文件和`mysql`服务。如果你考虑一下，它们需要按这个顺序应用。没有安装`mysql-server`包，就不会有`/etc/mysql/`目录来放置`mysql.cnf`文件。没有包或配置文件，`mysql`服务将无法运行。
- en: A perfectly reasonable question to ask is, "Does Puppet apply resources in the
    same order in which they're declared in the manifest?" The answer is usually yes,
    unless you explicitly specify a different order, using the `require` attribute.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完全合理的问题是，“Puppet是否按照清单中声明的顺序应用资源？”答案通常是“是”，除非你明确使用`require`属性指定了不同的顺序。
- en: 'All resources support the `require` attribute, and its value is the name of
    another resource declared somewhere in the manifest, specified in the same way
    as when using `notify`. Here''s the package-file-service example again, this time
    with the resource ordering specified explicitly using `require` (`package_file_service_require.pp`):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 所有资源都支持`require`属性，且其值是清单中声明的另一个资源的名称，指定方式与使用`notify`时相同。下面是再次给出的包-文件-服务示例，这次使用`require`明确指定了资源顺序（`package_file_service_require.pp`）：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can see that the `mysql.cnf` resource requires the `mysql-server` package.
    The `mysql` service requires both the other resources, listed as an array within
    square brackets.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，`mysql.cnf`资源需要`mysql-server`包。`mysql`服务则依赖于其他资源，这些资源以方括号中的数组形式列出。
- en: When resources are already in the right order, you don't need to use `require`,
    as Puppet will apply the resources in the order you declare them. However, it
    can be useful to specify an ordering explicitly, for the benefit of those reading
    the code, especially when there are lots of resources in a manifest file.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当资源已经按正确的顺序排列时，您无需使用`require`，因为 Puppet 会按您声明的顺序应用资源。然而，显式指定顺序仍然可能是有用的，尤其是在清单文件中有大量资源时，这样做有助于代码阅读者理解。
- en: In older versions of Puppet, resources were applied in a more or less arbitrary
    order, so it was much more important to express dependencies using `require`.
    Nowadays, you won't need to use it very much, and you'll mostly come across it
    in legacy code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Puppet 的早期版本中，资源是按较为任意的顺序应用的，因此使用`require`来表达依赖关系非常重要。而现在，您不需要经常使用它，通常只会在旧版代码中遇到。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've seen how a manifest is made up of Puppet resources. You've
    learned how to use Puppet's `file` resource to create and modify files, how to
    install packages using the `package` resource, and how to manage services with
    the `service` resource. We've looked at the common package-file-service pattern
    and seen how to use the `notify` attribute on a resource to send a message to
    another resource indicating that its configuration has been updated. We've covered
    the use of the `require` attribute to make dependencies between resources explicit,
    when necessary.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了清单是如何由 Puppet 资源构成的。您学习了如何使用 Puppet 的`file`资源来创建和修改文件，如何使用`package`资源安装软件包，以及如何用`service`资源管理服务。我们还了解了常见的包-文件-服务模式，并学习了如何使用资源的`notify`属性向另一个资源发送消息，指示其配置已被更新。我们还讨论了在必要时使用`require`属性来明确资源之间的依赖关系。
- en: You've also learned to use `puppet resource` to inspect the current state of
    the system according to Puppet, and `puppet describe` to get command-line help
    on all Puppet resources. To check what Puppet would change on the system without
    actually changing it, we've introduced the `--noop` and `--show_diff` options
    to `puppet apply`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学会了如何使用`puppet resource`检查系统的当前状态，并使用`puppet describe`获得有关所有 Puppet 资源的命令行帮助。为了检查
    Puppet 会对系统进行哪些更改，而不实际进行更改，我们介绍了`--noop`和`--show_diff`选项，用于`puppet apply`命令。
- en: In the next chapter, we'll see how to use the version control tool Git to keep
    track of your manifests, we'll get an introduction to fundamental Git concepts,
    such as the repo and the commit, and you'll learn how to distribute your code
    to each of the servers you're going to manage with Puppet.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何使用版本控制工具 Git 来跟踪您的清单文件，我们将介绍 Git 的基本概念，例如仓库（repo）和提交（commit），并学习如何将代码分发到您将用
    Puppet 管理的每一台服务器。
