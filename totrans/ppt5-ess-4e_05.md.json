["```\nfile { ‘/etc/ntp.conf’: \n  source => ‘puppet:///modules/ntp/ntp.conf’, \n}  \n```", "```\ninclude ntp \n```", "```\npuppet:///modules/ntp/ntp.conf \npuppet:///modules/my_app/opt/scripts/find_my_app.sh \n```", "```\n.../modules/ntp/files/ntp.conf \n.../modules/my_app/files/opt/scripts/find_my_app.sh \n```", "```\n/opt/puppetlabs/code/environments/production/modules/my_app\n    |- templates/ # templates are covered in the next chapter\n    |- files/\n    | |- subdir1/ # puppet:///modules/my_app/subdir1/<filename>\n    | |- subdir2/ # puppet:///modules/my_app/subdir2/<filename>\n    | | \\- subsubdir/ # puppet:///modules/my_app/subdir2/subsubdir/...\n    |- manifests/\n    | |- init.pp # class my_app is defined here\n    | |- params.pp # class my_app::params is defined here\n    | |- config/\n    | | |- detail.pp # my_app::config::detail is defined here\n    | | \\- basics.pp # my_app::config::basics is defined here\n    \\- lib/\n        |- facter/ # contains .rb files with custom facts\n        \\- puppet/\n           |- functions # contains .rb files with Puppet 4 functions\n           |- parser/\n           | \\- functions # contains .rb files with parser functions\n           |- type/ # contains .rb files with custom types\n           \\- provider/ # contains .rb files with custom providers\n```", "```\n# Class: my_app::firewall\n#\n# @summary This class adds firewall rules to allow access to my_app.\n#\n# @example Declaring the class\n# include my_app::firewall\n#\n# @param Parameters: none\nclass my_app::firewall {\n  # class code here\n}\n```", "```\npuppet help strings \n```", "```\n/opt/puppetlabs/code/environments/\n    \\- production/\n         |- environment.conf\n         |- manifests/\n         | |- site.pp\n         | \\- nodes.pp\n         \\- modules/\n             |- my_app/\n             \\- ntp/\n```", "```\n#/opt/puppetlabs/code/environments/production/environment.conf \nmanifest = puppet_manifests\n```", "```\n#/opt/puppetlabs/code/environments/production/environment.conf \nmodulepath = modules:site-modules \n```", "```\n/opt/puppetlabs/code/environments/\n     \\- production/\n         |- manifests/\n         |- modules/\n         | \\- ntp/\n         \\- site-modules/\n             \\- my_app/\n```", "```\n[main]\nenvironmentpath = /etc/local/puppet/environments\n```", "```\nroot@puppetmaster# puppet module install puppetlabs-stdlib\n```", "```\nimport '/etc/puppet/manifests/custom/*.pp' \n```", "```\ninclude ntp::server::component::watchdog \n```", "```\nroot@agent# puppet agent --test --noop --environment testing\n```", "```\nroot@puppetmaster# mkdir -p /opt/puppetlabs/code/environments/testing/packt_cacti/{manifests,files}  \n```", "```\ninclude packt_cacti \n```", "```\n# .../modules/packt_cacti/manifests/init.pp \nclass packt_cacti { \n  package { 'cacti': \n    ensure => installed, \n  } \n} \n```", "```\nnode 'agent' { \n  include packt_cacti \n} \n```", "```\nroot@agent# puppet agent --test --environment testing  \n```", "```\n# Do not edit this file - it is managed by Puppet! \nRedirectMatch permanent ^/$ /cacti/ \n```", "```\n# .../modules/packt_cacti/manifests/redirect.pp\nclass packt_cacti::redirect {\n  file { '/etc/apache2/conf.d/cacti-redirect.conf':\n    ensure => file,\n    source => 'puppet:///modules/packt_cacti/etc/apache2/conf.d/cacti-redirect.conf',\n    require => Package['cacti'];\n  }\n}\n```", "```\n$puppet_warning = '# Do not edit - managed by Puppet!'\n$line = 'RedirectMatch permanent ^/$ /cacti/'\nfile { '/etc/apache2/conf.d/cacti-redirect.conf':\n  ensure  => file,\n  content => \"${puppet_warning}\\n${line}\\n\",\n}\n```", "```\nclass packt_cacti( \n  $redirect = true,) \n{ \n  if $redirect { \n    contain packt_cacti::redirect \n  } \n  package { 'cacti': \n    ensure => installed, \n  } \n} \n```", "```\nclass { 'packt_cacti': \n  redirect => false,\n} \n```", "```\nclass packt_cacti( \n  $redirect = true, \n) { \n  contain packt_cacti::install \n  if $redirect { \n    contain packt_cacti::redirect \n  } \n} \n```", "```\n# .../modules/packt_cacti/manifests/install.pp \nclass packt_cacti::install { \n  package { 'cacti': \n    ensure => 'installed', \n  } \n} \n```", "```\n# .../modules/packt_cacti/manifests/config.pp \nclass packt_cacti::config {  \n  file { '/etc/apache2/conf.d/cacti.conf':  \n    mode   => '0644',  \n    source => '/usr/share/doc/cacti/cacti.apache.conf',  \n  }  \n}  \n```", "```\n# .../modules/packt_cacti/manifests/device.pp \ndefine packt_cacti::device ( \n  $ip, \n) { \n  $cli = '/usr/share/cacti/cli' \n  $options = \"--description='${title}' --ip='${ip}'\" \n  exec { \"add-cacti-device-${title}\": \n    command => \"${cli}/add_device.php ${options}\", \n    require => Class['cacti'], \n} \n```", "```\n$search = \"sed 1d | cut -f4- | grep -q '^${title}\\$'\" \nexec { \"add-cacti-device-${title}\": \n  command => \"${cli}/add_device.php ${options}\", \n  path    => '/bin:/usr/bin', \n  unless  => \"${cli}/add_graphs.php --list-hosts |  \n              ${search}\", \n  require => Class[cacti], \n} \n```", "```\n# in manifests/nodes.pp \nnode 'agent' { \n  include packt_cacti \n  packt_cacti::device { 'Puppet test agent (Debian 7)':  \n    ip => $::ipaddress, \n  }  \n} \n```", "```\ndefine packt_cacti::device(\n  $ip,\n  $ping_method='icmp'\n){\n  $cli = '/usr/share/cacti/cli'\n  $base_opt = \"--description='${title}' --ip='${ip}'\"\n  $ping_opt = \"--ping_method=${ping_method}\"\n  $options = \"${base_opt} ${ping_opt}\"\n  $search = \"sed 1d | cut -f4- | grep -q '^${title}\\$'\"\n  exec { \"add-cacti-device-${title}\":\n    command => \"${cli}/add_device.php ${options}\",\n    path    => '/bin:/usr/bin',\n    unless  => \"${cli}/add_graphs.php --list-hosts | ${search}\",\n    require => Class[cacti],\n  }\n}\n```", "```\nfile { '/usr/share/cacti/cli/remove_device.php': \n  ensure  => file, \n  mode    => '0755', \n  source  => \n       'puppet:///modules/packt_cacti/usr/share/cacti/cli/\n     remove_device.php', \n  require => Package['cacti'], \n} \n```", "```\ndefine packt_cacti::device( \n  $ensure='present', \n  $ip, \n  $ping_method='icmp', \n{ \n  $cli = '/usr/share/cacti/cli' \n  $search = \"sed 1d | cut -f4- | grep -q '^${title}\\$'\" \n  case $ensure { \n  'present': { \n    # existing cacti::device code goes here \n  } \n  'absent': { \n    $remove = \"${cli}/remove_device.php\" \n    $get_id = \"${remove} --list-devices | awk -F'\\\\t' \n       '\\$4==\\\"${title}\\\" { print \\$1 }'\" \n    exec { \"remove-cacti-device-${name}\": \n        command => \"${remove} --device-id=\\$( ${get_id} \n      )\", \n        path    => '/bin:/usr/bin', \n        onlyif  => \"${cli}/add_graphs.php --list-hosts | \n           ${search}\", \n        require => Class[cacti], \n      } \n    } \n  } \n} \n```", "```\n#!/bin/bash \nDEVICE_DESCR=$1 \nGRAPH_DESCR=$2 \nDEVICE_ID=` #scriptlet to retrieve numeric device ID` \nGRAPH_ID=`  #scriptlet to retrieve numeric graph ID` \nGRAPH_TYPE=`#scriptlet to determine the graph type` \n/usr/share/cacti/cli/add_graphs.php \\ \n  --graph-type=$GRAPH_TYPE \\ \n  --graph-template-id=$GRAPH_ID \\ \n  --host-id=$DEVICE_ID\n```", "```\ndefine packt_cacti::graph( \n  $device, \n  $graph=$title \n) { \n  $add = '/usr/local/bin/cacti-add-graph' \n  $find = '/usr/local/bin/cacti-find-graph' \n  exec { \"add-graph-${title}-to-${device}\": \n    command => \"${add} '${device}' '${graph}'\", \n    path    => '/bin:/usr/bin', \n    unless  => \"${find} '${device}' '${graph}'\", \n  } \n} \n```", "```\nNotice: /Stage[main]/Main/Node[agent]/Packt_cacti::Device[Agent_VM_Debian_7]/Exec[add-cacti-device-Agent_VM_Debian_7]/returns: executed successfully  \n```", "```\nNotice: /Stage[main]/Main/File[/usr/local/bin/cacti-search-graph]/ensure: created  \n```", "```\nPuppet::Type.newtype(:cacti_device) do \n  @doc = <<-EOD \n    Manages Cacti devices. \n    EOD \nend \n```", "```\nensurable \n```", "```\nrequire 'ipaddr' \nnewparam(:ip) do \n  desc \"The IP address of the device.\" \n  isrequired \n  validate do |value| \n    begin \n      IPAddr.new(value) \n    rescue ArgumentError \n      fail \"'#{value}' is not a valid IP address\" \n    end \n  end \n  munge do |value| \n    value.downcase \n  end \nend\n```", "```\nnewparam(:ping_method) do \n  desc \"How the device's reachability is determined. \n    One of `tcp` (default), `udp` or `icmp`.\" \n  validate do |value| \n    [ :tcp, :udp, :icmp ].include?(value.downcase.to_sym) \n  end \n  munge do |value| \n    value.downcase.to_sym \n  end \n  defaultto :tcp \nend \n```", "```\nexec { '/bin/true': } \n# same effect: \nexec { 'some custom name': command => '/bin/true' } \n```", "```\nnewparam(:name) do \n  desc \"The name of the device.\" \n  #isnamevar # → commented because automatically assumed \nend \n```", "```\ncacti_device { 'eth0': \n  ensure      => present, \n  ip          => $::ipaddress, \n  ping_method => 'icmp', \n} \n```", "```\nPuppet::Type.type(:cacti_device).provide( \n  :cli, \n  :parent => Puppet::Provider \n  ) do \nend \n```", "```\ncommands :php => ‘php’\ncommands :add_device => ‘/usr/share/cacti/cli/add_device.php’\ncommands :add_graphs => ‘/usr/share/cacti/cli/add_graphs.php’\ncommands :rm_device => ‘/usr/share/cacti/cli/remove_device.php’\n```", "```\ndef create \n  args = [] \n  args << \"--description=#{resource[:name]}\" \n  args << \"--ip=#{resource[:ip]}\" \n  args << \"--ping_method=#{resource[:ping_method]}\" \n  add_device(*args) \nend \n```", "```\nargs << \"--description='#{resource[:name]}'\" \n```", "```\ndef destroy \n  rm_device(\"--device-id=#{@property_hash[:id]}\") \nend \n```", "```\ndef exists? \n  self.class.instances.find do |provider| \n    provider.name == resource[:name] \n  end \nend \n```", "```\ndef self.instances\n  return @instances ||= add_graphs(“--list-hosts”).\n    split(“\\n”).\n    drop(1).\n    collect do |line|\n      fields = line.split(/\\t/, 4)\n      Puppet.debug “prefetching cacti_device #{fields[3]} \n      “ +\n                   “with ID #{fields[0]}”\n      new(:ensure => :present,\n            :name => fields[3],\n              :id => fields[0])\n    end\nend\n```", "```\ndef self.prefetch(resources)\n  instances.each do |provider|\n    if res = resources[provider.name]\n      res.provider = provider\n    end\n  end\nend \n```", "```\nnode \"agent\" {\n  include cacti\n  cacti_device { ‘Puppet test agent (Debian 7)\":\n    ensure => present,\n    ip     => $::ipaddress,\n  }\n}\n```", "```\nautorequire :package do \n  catalog.resource(:package, 'cacti') \nend \n```", "```\nFacter.add(:cacti_graph_templates) do\n  setcode do\n    cmd = ‘/usr/share/cacti/cli/add_graphs.php’\n    Facter::Core::Execution.exec(“#{cmd} --list-graph-\n    templates”).\n      split(“\\n”).\n      drop(1).\n      collect do |line|\n        line.split(/\\t/)[1]\n      end\n  end\nend\n```", "```\nmodule Puppet::Parser::Functions\n  require ‘ipaddr’\n  newfunction(:cacti_canonical_ip, :type => :rvalue) do |args|\n    ip = args[0]\n    begin\n      IPAddr.new(ip)\n    rescue ArgumentError\n      raise “#{@resource.ref}: invalid IP address ‘#{ip}’”\n    end\n    ip.downcase\n  end\nend\n```", "```\ndefine packt_cacti::device($ip) {\n  $cli = ‘/usr/share/cacti/cli’\n  $c_ip = cacti_canonical_ip(${ip})\n  $options = “--description=‘${name}’ --ip=‘${c_ip}’”\n  exec { “add-cacti-device-${name}”:\n    command => “${cli}/add_device.php ${options}”,\n    require => Class[cacti],\n  }\n}\n```", "```\nip => '912.168.12.13' \n```", "```\n# …/packt_cacti/manifests/params.pp\nclass packt_cacti::params {\n  case $osfamily {\n    ‘Debian’: {\n      $cli_path = ‘/usr/share/cacti/cli’\n    }\n    ‘RedHat’: {\n      $cli_path = ‘/var/lib/cacti/cli’\n    }\n    default: {\n      fail “the cacti module does not yet support the \n      ${osfamily} \n        platform”\n    }\n  }\n}\n```", "```\nclass packt_cacti::install {\n  include pack_cacti::params\n  file { ‘remove_device.php’:\n    ensure => file,\n    path   => \n     “${packt_cacti::params::cli_path}/remove_device.php’,\n    source => \n    ‘puppet:///modules/packt_cacti/cli/remove_device.php’,\n    mode   => ‘0755’,\n  }\n}\n```", "```\nclass packt_cacti(\n  $redirect = ${packt_cacti::params::redirect}\n)inherits packt_cacti::params{\n  # ...\n}\n```"]