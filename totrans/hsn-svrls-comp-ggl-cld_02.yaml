- en: Introducing App Engine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍App Engine
- en: In this first chapter, we will discuss the main properties of **Google App Engine**
    (**GAE**) and its **Platform-as-a-Service** (**PaaS**) approach. Available since
    2008, GAE provides a serverless environment in which to deploy HTTP/web-based
    applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一部分，我们将讨论**Google App Engine**（**GAE**）的主要特性及其**平台即服务**（**PaaS**）方法。自2008年起，GAE提供了一个无服务器环境，用于部署基于HTTP/网页的应用程序。
- en: Throughout this chapter, we will explore GAE's framework and structure to see
    how highly scalable applications are made possible on this platform. As part of
    this, we will consider how to integrate standard web primitives such as traffic
    splitting and API management on GAE. By the end of this chapter, you should have
    a solid foundation to help you build web-based applications using GAE quickly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索GAE的框架和结构，了解如何在此平台上实现高可扩展的应用程序。作为其中的一部分，我们将考虑如何在GAE上集成标准的网页基本功能，如流量分配和API管理。到本章结束时，你应该已经掌握了使用GAE快速构建基于网页的应用程序的坚实基础。
- en: 'In a nutshell, we will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，本章将涵盖以下主题：
- en: Introducing GAE
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍GAE
- en: Understanding the GAE framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解GAE框架
- en: Defining App Engine components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义App Engine组件
- en: Understanding GAE's features
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解GAE的功能
- en: Introducing GAE
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍GAE
- en: When it comes to software engineering innovation, it is clear that Google has
    a rich history. This innovation has been evident across many successful projects,
    including several billion-user products brought to market, such as Google Search,
    Android, and YouTube. Google Cloud and its vibrant ecosystem of services provide
    tools built to serve these critical projects, and now you can host your application
    on the same platform.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程创新方面，显然Google拥有丰富的历史。这一创新贯穿于多个成功的项目，包括多个拥有数十亿用户的产品，如Google搜索、Android和YouTube。Google
    Cloud及其充满活力的服务生态系统提供了为这些关键项目打造的工具，现在你也可以将你的应用托管在同一个平台上。
- en: GAE is designed to host web-based applications and elegantly handle request/response
    communications. Understanding how to achieve this on Google Cloud will be central
    to building consistent and efficient applications that can delight end users with
    their responsiveness.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: GAE旨在托管基于网页的应用程序，并优雅地处理请求/响应通信。了解如何在Google Cloud上实现这一点，对于构建一致且高效的应用程序至关重要，这样可以通过其响应性让最终用户感到满意。
- en: Before delving into the details of GAE, let's spend some time discussing the
    rationale behind the application platform. For the following paragraphs, we will
    outline the main elements of GAE, which will provide us with sufficient knowledge
    to make intelligent decisions around what types of application would benefit from
    being run on GAE and, conversely, what applications would not.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨GAE的细节之前，我们将花一些时间讨论应用平台背后的基本原理。在接下来的段落中，我们将概述GAE的主要元素，为我们提供足够的知识，以便做出明智的决策，了解哪些类型的应用程序适合在GAE上运行，哪些则不适合。
- en: 'To begin our journey, let''s commence by answering the following questions
    to build a shared understanding of what the GAE application platform provides:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始我们的旅程，我们将通过回答以下问题来建立对GAE应用平台提供的共享理解：
- en: Why go serverless with App Engine?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择App Engine的无服务器架构？
- en: What is the underlying App Engine framework?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: App Engine的底层框架是什么？
- en: How does App Engine handle auto-scaling?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: App Engine如何处理自动扩展？
- en: Who is the target audience?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标受众是谁？
- en: Why go serverless with App Engine?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择App Engine的无服务器架构？
- en: Making a service available on the internet requires a lot of thought to minimize
    the potential for system compromise and associated security risks. All application
    traffic to App Engine is propagated via the **Google Front End** (**GFE**) serviceto
    mitigate access protocol compromise.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上提供服务需要仔细考虑，以最大限度减少系统被攻击的潜在风险和相关的安全隐患。所有指向App Engine的应用程序流量都通过**Google Front
    End**（**GFE**）服务进行传递，以减少访问协议遭到破坏的风险。
- en: GFE provides a **Transport Layer Security** (**TLS**) termination for all GAE-registered
    routed web traffic. Acting as a protection layer, GFE is capable of performing
    several essential security services for a Google Cloud project. From a security
    perspective, it provides the public IP hosting of a public DNS name and **Denial
    of Service** (**DoS**) protection. Besides, GFE can also be used by internal services
    as a scalable reverse proxy.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: GFE 为所有 GAE 注册的路由 Web 流量提供 **传输层安全**（**TLS**）终止。作为保护层，GFE 能够为 Google Cloud 项目执行多个基本的安全服务。从安全角度来看，它提供了公共
    DNS 名称的公共 IP 托管和 **拒绝服务**（**DoS**）保护。此外，GFE 还可以作为可扩展的反向代理供内部服务使用。
- en: When working on Google Cloud, a term commonly mentioned is **security in depth**.
    An approach such as this provides multiple concurrent safeguards for your environment
    that work against bad actors wishing to misuse your service. Many of these security
    safeguards are built into the platform, so no additional effort is required on
    the part of the developer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Cloud 中，常提到的一个术语是 **深度安全**。这种方法提供了多个并行的保障措施，以应对那些试图滥用你服务的恶意行为者。这些安全措施中的许多已经内置于平台中，因此开发者无需额外努力。
- en: GAE provides a fully managed application platform that enables developers to
    only concern themselves with building their application. Concerns regarding the
    management of lower-level infrastructures, such as compute and storage, are automatically
    managed by the service. In this respect, serverless solutions such as GAE offer
    the ability to devote focus to the development process and leave operational matters
    to the provider of the service.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: GAE 提供了一个完全托管的应用平台，使开发人员只需专注于构建他们的应用程序。对于计算和存储等低层次基础设施的管理问题，服务会自动处理。在这一点上，像
    GAE 这样的无服务器解决方案提供了将焦点集中在开发过程上的能力，并将运营事务交给服务提供商处理。
- en: GAE enables developers to take advantage of a simplified serverless environment
    that addresses hosting the web application and API services on Google Cloud. By
    providing a significantly simplified environment, the intent is to increase the
    adoption of the cloud platform by bringing more developers to the cloud. In most
    instances, when a developer uses such a system, they can immediately see the vast
    potential for efficiency to be gained by working within an environment such as
    this.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: GAE 使开发人员能够利用一个简化的无服务器环境，在 Google Cloud 上托管 Web 应用程序和 API 服务。通过提供一个显著简化的环境，目的是通过吸引更多开发人员进入云端来增加云平台的采用率。在大多数情况下，当开发人员使用这样的系统时，他们可以立即看到在这样的环境中工作所能带来的高效潜力。
- en: 'In the following diagram, we outline a logical view of the typical workflow
    of an environment based on GAE. From the illustration, we can see that all external
    communication is performed using the HTTP(S) protocol and is routed via **Cloud
    Load Balancer** (provided by GFE). In this scenario, the frontend device exposes
    a single service name that encapsulates the application resource deployed. The
    service enables GAE to direct traffic received to multiple backend resource components
    dynamically. GAE maintains responsibility for establishing which role these components
    performed and ensures that each of them remains distinct for the purposes of identification:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示意图中，我们概述了基于 GAE 的环境的典型工作流程的逻辑视图。从图示中我们可以看到，所有外部通信都使用 HTTP(S) 协议进行，并通过 **Cloud
    Load Balancer**（由 GFE 提供）进行路由。在这种场景下，前端设备暴露一个单一的服务名称，封装了部署的应用资源。该服务使得 GAE 可以动态地将接收到的流量引导到多个后端资源组件。GAE
    负责确定这些组件执行的角色，并确保每个组件在标识上保持独立：
- en: '![](img/62472f4f-4ed1-4e78-9ddf-577df7beaedd.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62472f4f-4ed1-4e78-9ddf-577df7beaedd.png)'
- en: Backend service communication use the HTTP/HTTPS protocol, which means that
    GAE assumes an internet-based environment (that is, it assumes that you have access
    to a public-facing internet connection). Application request processing is performed
    by the default instance that's deployed, and this instance is subject to autoscaling
    based on system workload thresholds.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 后端服务通信使用 HTTP/HTTPS 协议，这意味着 GAE 假设一个基于互联网的环境（即，假设你可以访问一个面向公众的互联网连接）。应用请求处理由部署的默认实例执行，该实例会根据系统工作负载阈值进行自动扩展。
- en: Taking the described approach enables workloads to be seamlessly load balanced
    across application instances, again without any additional configuration needed
    from the developer. Standard workload operational activities such as TLS termination
    and DNS resolution require no further user configuration. The addition of these
    activities provides a significant benefit to the developer. Application workloads
    being subject to isolated instances means the application is also capable of massive
    scale without any substantive work.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 采取上述方法能够使工作负载在应用实例之间无缝地进行负载均衡，同样无需开发人员进行任何额外的配置。标准的工作负载操作活动，如TLS终止和DNS解析，也无需进一步的用户配置。这些活动的加入为开发者提供了显著的好处。由于应用工作负载受到独立实例的约束，意味着应用也能够实现巨大的规模，而无需任何实质性的工作。
- en: In addition to standard protection, the addition of GFE also provides seamless
    compatibility with secure delivery protocols such as gRPC ([https://grpc.io/blog/principles/](https://grpc.io/blog/principles/)).
    The gRPC protocol uses the RPC framework to provide layer isolation when forwarding
    requests for the service. Also, communication remains encrypted by default to
    avoid the nuisance of communication eavesdropping or device compromise when performing
    inter-service communication.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准保护外，GFE的加入还提供了与安全交付协议（如gRPC）无缝兼容的功能（[https://grpc.io/blog/principles/](https://grpc.io/blog/principles/)）。gRPC协议使用RPC框架在转发服务请求时提供层隔离。此外，通信默认保持加密，以避免在进行服务间通信时被窃听或设备被攻击。
- en: The more recent adoption by the industry has seen broader adoption of gRPC developing
    more extensive compatibility across a range of services. The RPC security protocol
    is used extensively at Google, for example, to secure API access. When working
    with communication protocols across the internet, many standards exist. Having
    all service-related traffic routed through GFE means an incredibly flexible and
    scalable frontend is available without any additional work.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，行业的采用使得gRPC得到了更广泛的应用，且在多个服务间的兼容性得到了更广泛的拓展。例如，RPC安全协议在Google被广泛使用，用于保护API访问。在跨互联网使用通信协议时，有许多标准存在。通过将所有与服务相关的流量路由通过GFE，意味着可以提供一个极其灵活和可扩展的前端，而无需额外的工作。
- en: 'There are two versions of the App Engine available:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: App Engine有两个版本：
- en: App Engine Standard
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: App Engine Standard
- en: App Engine Flex
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: App Engine Flex
- en: 'Both versions share many commonalities, and the majority of what''s outlined
    in this chapter will apply to both equally. However, there are some key attributes
    to call out when thinking about the two environments, highlighted in the following
    diagram:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 两个版本有许多共同点，本章中大多数内容都适用于这两个版本。然而，在考虑这两种环境时，有一些关键属性需要特别指出，以下图表中将重点展示：
- en: '![](img/051341f0-b1c1-417c-aa79-4a6a5eabcef8.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/051341f0-b1c1-417c-aa79-4a6a5eabcef8.png)'
- en: One of the main things to call out in the preceding diagram is that App Engine
    Standard scales down to zero. However, an App Engine Flex environment scales down
    to a minimum of one instance. Therefore, if your primary consideration is cost,
    use App Engine Standard. Being able to scale down to zero provides a real advantage
    over the App Engine Flex environment, which will always have a cost associated
    with it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述图表中需要特别指出的一点是，App Engine Standard可以缩放至零。然而，App Engine Flex环境的最小缩放值为一个实例。因此，如果您的主要考虑是成本，使用App
    Engine Standard。能够缩放至零相较于App Engine Flex环境提供了真正的优势，后者始终会有一定的成本。
- en: The ability of GAE Standard to scale to zero is due to the use of a sandbox
    environment. Using a dedicated sandbox provides quicker responses, that is, quicker
    start-up times and auto-scaling responses. Having deployment time measured in
    seconds may also be an advantage that appeals when considering the level of flexibility
    that may be required by different application growth patterns.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: GAE Standard能够缩放至零是由于使用了沙箱环境。使用专用沙箱提供了更快的响应速度，即更快的启动时间和自动扩展响应。以秒为单位测量部署时间，也可能是考虑到不同应用增长模式所需的灵活性时的一个优势。
- en: Unlike the standard environment, GAE Flex uses **Google Compute Engine** (**GCE**),
    more specifically **Managed Instance Groups** (**MIGs**), to enable auto-scaling.
    An overhead of one compute instance is always present for GAE Flex when working
    within this environment. Resultant costs also need to factor in how many compute
    resources GAE Flex requires. Maintaining an application in this environment will
    also mean a slower initialization time (that is, cold boot) due to the requirement
    to spin up a GCE instance plus a container environment for any flexible-based
    deployed application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准环境不同，GAE Flex 使用 **Google Compute Engine** (**GCE**)，更具体地说是 **托管实例组** (**MIGs**)，来实现自动扩展。在这个环境中，GAE
    Flex 始终有一个计算实例的开销。由此产生的费用还需要考虑 GAE Flex 所需的计算资源。维持在此环境中的应用程序也意味着初始化时间更长（即冷启动），因为需要启动一个
    GCE 实例以及为任何基于灵活部署的应用程序提供容器环境。
- en: There are further differences evident in the application environments. However,
    the preceding characteristics are the ones that commonly impact decision making
    when starting to build an application on GAE.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用环境中还存在其他差异。然而，前述特性是当开始在 GAE 上构建应用时，通常影响决策的因素。
- en: Who is the target audience?
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标受众是谁？
- en: Working on the GAE fully managed serverless application platform removes many
    of the historical constraints associated with building internet-scale applications.
    Using this new paradigm, developers can focus on building sophisticated web applications
    and APIs without needing to learn about backend services and low-level networking
    or infrastructure.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GAE 完全托管的无服务器应用平台上工作，消除了与构建互联网规模应用相关的许多历史性限制。使用这种新范式，开发人员可以专注于构建复杂的 Web 应用和
    API，而无需了解后端服务和低级别的网络或基础设施。
- en: 'Building serverless applications means that agile code is quickly deployed
    to the cloud. Web apps (for examples, see the following list) are most definitely
    the sweet spot for this type of solution:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 构建无服务器应用程序意味着敏捷的代码可以快速部署到云端。Web 应用（例如，参见以下列表）无疑是这种解决方案的最佳应用领域：
- en: Web applications
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用
- en: Mobile backends
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动后端
- en: HTTP APIs
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP API
- en: '**Line of Business Applications** (**LOB**) applications'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务应用程序** (**LOB**) 应用'
- en: If that sounds like an area that your workload would benefit from, then you
    are the target audience. Working in an environment where it is not necessary to
    concern yourself with creating or maintaining infrastructure is highly desirable
    to most developers. GAE is built on this premise and provides an excellent experience
    for developers to develop and deploy without reference to underlying technologies.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来是你的工作负载可以从中受益的领域，那么你就是目标受众。在一个无需关心创建或维护基础设施的环境中工作，对于大多数开发人员来说是非常理想的。GAE
    正是基于这一前提构建的，并为开发人员提供了出色的开发和部署体验，无需关注底层技术。
- en: Having outlined the differences in the environments provided for App Engine,
    we can start to explore what makes this such a fascinating product.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在概述了为 App Engine 提供的不同环境后，我们可以开始探索是什么让这个产品如此迷人。
- en: Understanding the App Engine framework
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 App Engine 框架
- en: Exploring the general architecture of App Engine brings to light how much of
    the underlying framework has been put in place to deliver integrated workflows
    for web application development.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 App Engine 的一般架构揭示了其底层框架已经实现了多少，旨在为 Web 应用开发提供集成的工作流。
- en: Google has bundled many internal services to minimize the effort needed by developers
    to make their applications cloud-native. Added to that is the innate ability of
    the GAE service to automatically scale without any additional actions required
    on the part of the service creator.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Google 将许多内部服务捆绑在一起，以最大限度地减少开发人员将其应用程序转为云原生应用所需的努力。再加上 GAE 服务固有的自动扩展能力，服务创建者无需采取额外措施即可实现这一点。
- en: 'Creating a web application on this platform can be as simple as deploying your
    code to the App Engine environment. However, behind the scenes, there are several
    activities taking place to ensure that the application is deployed successfully,
    the infrastructure is provisioned, and the whole thing is ultimately able to scale
    intelligently. So, what is happening in the underlying App Engine framework is
    illustrated in the following diagram, in which we introduce the optional components
    supporting App Engine:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上创建一个 Web 应用程序可以像将代码部署到 App Engine 环境一样简单。然而，在幕后，实际发生了许多活动，以确保应用程序能够成功部署、基础设施得到配置，并且整个系统最终能够智能地扩展。接下来，我们通过下面的图示，展示了
    App Engine 框架中的底层工作原理，并介绍了支持 App Engine 的可选组件：
- en: '![](img/8178a4b2-baa4-4d46-b868-896662e807b2.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8178a4b2-baa4-4d46-b868-896662e807b2.png)'
- en: Examining GAE from a broader perspective shows that there are many high-level
    components used to establish the fully managed application platform. Of course,
    being a serverless environment, there is no real need for you to understand what
    is happening behind the scenes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从更广泛的视角审视 GAE，可以看出有许多高级组件被用来构建完全托管的应用平台。当然，作为一个无服务器环境，你实际上不需要了解幕后发生了什么。
- en: Having a conceptual understanding of what is occurring on any platform is useful
    during the development process. No matter how much a service tries to abstract
    information from you, it is immeasurably easier to resolve technical issues when
    you have some understanding of how the various components integrate.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对任何平台的概念性理解在开发过程中是非常有用的。无论服务如何试图将信息从你那里抽象出来，若你理解各种组件如何集成，解决技术问题就会变得无比容易。
- en: In addition to the standard environment, GAE Flex supports custom container
    runtime environments. Custom containers are deployed on GCE and enable the developer
    to build their environments. In doing this, a higher level of customization was
    suddenly available and significantly broadened the appeal of GAE to a broader
    audience. The ubiquity of containers has made the introduction of the GAE Flex
    environment a compelling option where greater control is required.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准环境外，GAE Flex 还支持自定义容器运行时环境。自定义容器部署在 GCE 上，使开发者能够构建自己的环境。通过这样做，突然间可以获得更高水平的定制化，极大地拓宽了
    GAE 吸引更广泛受众的能力。容器的普及使得引入 GAE Flex 环境成为一个具有吸引力的选项，特别是在需要更多控制时。
- en: There are, however, some performance and cost implications to using GAE Flex
    over the standard environment. Understanding these constraints is crucial for
    the application developer and they are clearly outlined in the specification for
    GAE. Having clarity regarding the various advantages and disadvantages of design
    considerations will help address any concerns and make the selection of the most
    appropriate environment easier. For more details on the differences, refer to
    the *Runtime languages supported* section of this chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，相比标准环境，使用 GAE Flex 也有一些性能和成本的影响。理解这些限制对于应用开发者至关重要，这些内容在 GAE 的规范中有明确说明。清楚了解设计考量中的各种优缺点，将帮助解决任何疑虑，并使选择最合适的环境变得更容易。有关详细的差异，请参阅本章的
    *支持的运行时语言* 部分。
- en: In addition to the GAE environment outlined previously, some other essential
    constituent components are working in the background. A service layer adds to
    the compute function of GAE and provides the ability to store, queue, cache, and
    perform authenticated communication with the Google Cloud API.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的 GAE 环境之外，还有一些其他重要的组成组件在后台工作。服务层增强了 GAE 的计算功能，并提供了存储、队列、缓存以及与 Google
    Cloud API 进行身份验证的通信能力。
- en: App Engine components
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: App Engine 组件
- en: Over the next couple of sub-sections, we will explore the main points related
    to these service layer components.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个小节中，我们将探讨与这些服务层组件相关的主要内容。
- en: Task queues
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务队列
- en: Systems remain responsive through the use of additional decoupling algorithms
    that manage the flow of information. GAE uses message queues to maintain a sub-second
    response rate for web traffic. Long-lived processing is handed off to the task
    queue system to free up the request/response cycle.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用额外的解耦算法来管理信息流，系统保持响应性。GAE 使用消息队列来保持 Web 流量的亚秒级响应率。长时间处理的任务会被移交给任务队列系统，以释放请求/响应周期。
- en: 'At a more granular level, task queues use two approaches to manage the asynchronous
    processing of information associated with a web request/response cycle:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在更细粒度的层面上，任务队列采用两种方法来管理与网页请求/响应周期相关的异步信息处理：
- en: '| **Service dispatch** | **Description** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **服务调度** | **描述** |'
- en: '| Push Queue (HTTP request) | Dispatch requests.Guaranteed task execution.Use
    case: En-queue a short-lived task that can be fulfilled over time or in a situation
    that involves a time-specific action, similar to a diarized event task execution.
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 推送队列（HTTP 请求） | 调度请求。保证任务执行。用例：将短期任务排队，这些任务可以在一段时间内完成，或在涉及特定时间动作的情况下执行，类似于定时事件任务执行。
    |'
- en: '| Pull Queue (Request handler) | Lease mechanism.Provides additional flexibility
    beyond dispatch requests.Provides a lifecycle for tasks.Use case: Batch processing
    that can be used to achieve an outcome at once, without needing to process information
    one item at a time. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 拉取队列（请求处理器） | 租赁机制。提供比调度请求更多的灵活性。为任务提供生命周期。用例：批处理，可以一次性完成，而无需逐项处理信息。 |'
- en: Task queues provide a dispatch mechanism that is isolated from the web traffic
    transaction. In this service, we segregate the processing element of information
    related to the web request to minimize the time to complete between request and
    response. Adding a task queue provides the HTTP request/response cycle with the
    ability to maintain a high level of efficiency.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 任务队列提供了一种与网页流量事务隔离的调度机制。在此服务中，我们将与网页请求相关的信息处理部分隔离，以最小化请求与响应之间的完成时间。添加任务队列使 HTTP
    请求/响应周期能够保持高效。
- en: Memcache
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Memcache
- en: A vital feature of the GAE environment is the inclusion of memcache. Memcache
    is abstracted from persistent storage to provide a buffer for fast data access.
    Adding a low-latency data tier for applications establishes a consistent mechanism
    for repeatable access requests. Memcache provides a convenient data access tier
    based on the memory-resident (in-memory) temporary storage of transient data.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: GAE 环境的一个重要特性是包含了 memcache。Memcache 被抽象为持久化存储的外部缓冲区，以提供快速的数据访问。为应用添加一个低延迟的数据层，为重复的访问请求建立一致的机制。Memcache
    提供了一个基于内存驻留（in-memory）的临时数据存储的便捷数据访问层。
- en: 'There are two levels of the memcache service defined for the service layer:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为服务层定义了两个级别的 memcache 服务：
- en: '**A shared memcache**: This is the default setting for GAE. Shared memcache
    provides a default access mode. In most situations, there is no requirement to
    change the cache level applied to your application as the default will suffice
    for the majority of work to be performed.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享 memcache**：这是 GAE 的默认设置。共享 memcache 提供了默认的访问模式。在大多数情况下，无需更改应用使用的缓存级别，因为默认设置已经足够满足大多数工作需求。'
- en: '**A dedicated memcache**: This is an advanced setting used to reserve a dedicated
    application memory pool.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专用 memcache**：这是一个高级设置，用于保留专用的应用内存池。'
- en: A dedicated memcache service provides additional scope for getting greater efficiency
    in an application. As a cache represents a quick data retrieval mechanism to access
    temporary data, if data access is central to an application, it may well be useful
    to investigate this option.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 专用 memcache 服务为应用提供了更大的效率范围。作为一种快速数据检索机制，缓存用于访问临时数据，如果数据访问是应用的核心，那么探索此选项可能会非常有用。
- en: Be aware that this latter option is a paid offering, unlike the default cache
    setting. However, this option guarantees the reservation of a larger memory footprint
    for applications that might require high-frequency data access.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，后一种选项是付费服务，不同于默认的缓存设置。然而，这个选项可以保证为可能需要高频数据访问的应用保留更大的内存空间。
- en: When working with an application primarily used in read mode, on the data to
    be consumed, it is beneficial to keep both memcache and the data storage in sync.
    Read mode is perhaps the most common use case that most GAE developers will encounter
    and, for this type of scenario, GAE is more than capable of meeting most of the
    application demands faced.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理一个主要以读取模式为主的应用时，对于待消费的数据，保持 memcache 和数据存储同步是有益的。读取模式可能是大多数 GAE 开发者遇到的最常见用例，对于这种场景，GAE
    完全能够满足大多数应用需求。
- en: More sophisticated use cases exist, such as database modes requiring both read
    and write synchronization. Between the cache layer and backend database, there
    needs to be consideration of how to manage the cache layer and Datastore integration.
    For situations where interaction with the Datastore is a priority, Cloud NDB caching
    provides a configuration for more advanced requirements. An element of the investigation
    will be beneficial in this use case to optimize the data management and refreshing
    of data. In this situation, the underlying system will only be able to provide
    limited optimizations, and further efficiencies will need additional design as
    part of the iterative application development life cycle.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 存在更复杂的使用场景，例如需要同时进行读写同步的数据库模式。在缓存层和后端数据库之间，需要考虑如何管理缓存层和 Datastore 的集成。在与 Datastore
    交互为优先事项的情况下，Cloud NDB 缓存提供了一种适用于更高级需求的配置。在这种使用场景中，进行一定的调查以优化数据管理和数据刷新将是有益的。在这种情况下，底层系统只能提供有限的优化，进一步提高效率将需要在迭代应用开发生命周期中进行额外的设计。
- en: Data storage
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据存储
- en: GAE has multiple options for data storage, including schemaless and relational
    database storage. Backend data storage, such as Datastore/Firestore or Cloud SQL,
    enables developers to deliver consistent access across a wide range of use cases
    that integrate seamlessly with GAE.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: GAE 提供了多种数据存储选项，包括无模式和关系型数据库存储。后端数据存储（如 Datastore/Firestore 或 Cloud SQL）使开发者能够在广泛的用例中提供一致的访问，并与
    GAE 无缝集成。
- en: 'The following table provides a high-level overview of the mapping between schemaless
    and relational databases:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了无模式和关系型数据库之间映射的高层次概述：
- en: '| **Cloud SQL (relational)** | **Cloud Datastore (schemaless)** |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **Cloud SQL（关系型）** | **Cloud Datastore（无模式）** |'
- en: '| Table | Kind |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 种类 |'
- en: '| Row | Entity |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 行 | 实体 |'
- en: '| Column | Property |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 列 | 属性 |'
- en: '| Primary key | Key |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 主键 | 键 |'
- en: App Engine provides multiple options to give developers the ability to work
    with backend storage that suits the purpose of the application. In most instances,
    it is also essential to consider how to store information within the Datastore
    selected. As with any development, it is also crucial to understand the underlying
    data and how it will be accessed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: App Engine 提供多种选项，赋予开发者根据应用程序的需求使用后端存储的能力。在大多数情况下，考虑如何在选定的 Datastore 中存储信息也是至关重要的。与任何开发一样，理解底层数据及其访问方式也非常关键。
- en: Cloud Datastore
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cloud Datastore
- en: Cloud Datastore will be a standard component for any GAE development performed.
    As per the rest of the application platform, very little understanding of database
    management is required upfront. Datastore, as a managed schemaless (NoSQL) document
    database, will be sufficient in most instances.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Datastore 将是任何 GAE 开发的标准组件。与其他应用平台类似，开发初期几乎不需要理解数据库管理。作为一种托管的无模式（NoSQL）文档数据库，Datastore
    在大多数情况下已经足够使用。
- en: 'The following high-level points are most pertinent to using Datastore with
    GAE:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下高层次要点最为关键，适用于将 Datastore 与 GAE 一起使用：
- en: Datastore is a NoSQL schemaless database.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Datastore 是一个 NoSQL 无模式数据库。
- en: App Engine API access.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: App Engine API 访问。
- en: Designed to auto-scale to massive datasets (that is, low-latency reads/writes).
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计用于自动扩展到大规模数据集（即低延迟的读取/写入）。
- en: Stores information concerning the handling of requests.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储有关请求处理的信息。
- en: All queries are served by previous build indexes.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有查询均由先前构建的索引提供服务。
- en: As a core component of App Engine, Cloud Datastore caters to high performance,
    application development, and automatic scaling. Once the Datastore has initialized,
    it is ready for data. Working with data persisted in Cloud Datastore is very easy
    as no upfront work is required to attach the data to the backend. However, this
    may be potentially off-putting if you are from a relational database background.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 App Engine 的核心组件，Cloud Datastore 适用于高性能、应用开发和自动扩展。一旦 Datastore 初始化完成，就可以开始使用数据。处理存储在
    Cloud Datastore 中的数据非常简单，因为不需要提前将数据附加到后端。如果你来自关系型数据库背景，这种方式可能会令人不适应。
- en: When creating a database, it is worth considering how to index information to
    ensure that access remains performant regardless of the use. There are many good
    references on building suitable mechanisms for accessing data, for example, how
    to create fundamental indexes and composite indexes. Becoming familiar with this
    will provide ongoing benefits should issues arise, for example, performance latency
    with an application hosted on GAE.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建数据库时，值得考虑如何为信息建立索引，以确保无论使用情况如何，访问性能始终保持良好。有许多很好的参考资料可以帮助建立适合访问数据的机制，例如如何创建基本索引和复合索引。熟悉这些内容将为你提供持续的帮助，特别是在出现问题时，例如在
    GAE 上托管的应用出现性能延迟时。
- en: It is essential to consider how the information within Datastore will be stored.
    In the instance where your Datastore is not central to your application, the data
    management question will not be relevant when creating a data-centric application.
    Datastore performance degradation resulting from an inefficient data layout requires
    consideration of how the data representation may save the significant effort of
    refactoring at a later stage.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 必须考虑如何存储 Datastore 中的信息。如果你的 Datastore 不是应用程序的核心，创建以数据为中心的应用时，数据管理问题将不再相关。由于数据布局效率低下导致的
    Datastore 性能下降，需要考虑如何设计数据表示，以便在后期节省大量重构工作。
- en: At this point, knowing that schemaless databases are a good match for most App
    Engine requirements and that Cloud Datastore is a document database, provide a
    massive clue to their use cases. Going beyond the initial conditions of storing
    document data (for example, entities and kinds) is where putting some thought
    into the proper access methods will yield benefits as the application increases
    in complexity.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，了解无模式数据库非常适合大多数 App Engine 的需求，并且 Cloud Datastore 是一种文档数据库，这为它们的使用场景提供了极大的线索。超越存储文档数据的初步条件（例如，实体和种类）时，仔细考虑合适的访问方法，将随着应用复杂性的增加而带来更多的好处。
- en: Cloud SQL
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cloud SQL
- en: When working with Cloud SQL, there are two products currently available on Google
    Cloud, that is, MySQL and Postgres. Both options provide managed relational databases
    used in conjunction with GAE. To clarify, *managed* in this context means the
    service provider is responsible for the maintenance of backups and updates without
    requiring user interaction.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Cloud SQL 时，Google Cloud 当前提供两种产品，即 MySQL 和 Postgres。这两种选项都提供了与 GAE 配合使用的托管关系型数据库。需要澄清的是，*托管*在此语境下意味着服务提供商负责备份和更新的维护，而无需用户的干预。
- en: Cloud SQL provides a relational model that supports transactions. If you have
    a relational requirement for your application deployed to App Engine, then consider
    using Cloud SQL. Working with multiple database types can be confusing, so, before
    development activities begin, aim to be clear as to how the Datastore selected
    is to be used. A key priority is to ensure that the design is representative of
    how the application uses information.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud SQL 提供了支持事务的关系模型。如果你的应用部署在 App Engine 上，且需要关系型数据库，那么可以考虑使用 Cloud SQL。处理多个数据库类型可能会令人困惑，因此，在开始开发活动之前，务必清楚选定的
    Datastore 应该如何使用。一个关键优先事项是确保设计能够代表应用如何使用信息。
- en: Attempting to make Datastore into an **Online Transactional Processing** (**OLTP**)
    backend is an unnecessary task. Similarly, trying to utilize schemaless data in
    a Cloud SQL database without a relevant schema or normalization will not result
    in optimal performance.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将 Datastore 用作 **在线事务处理** (**OLTP**) 后端是一个不必要的任务。同样，尝试在没有相关模式或规范化的情况下使用无模式数据存储在
    Cloud SQL 数据库中，也无法获得最佳性能。
- en: While it is vital to invest time to define the correct normalization for the
    schema to be applied, this requirement may change over time. Working with data
    is never as simple as uploading content and then forgetting about it, so pay particular
    attention to this part of your application development life cycle to generate
    the most benefit.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然花时间定义要应用的模式规范化是至关重要的，但这一要求可能会随着时间的推移而发生变化。处理数据从来不是简单地上传内容然后忘记它，因此在应用开发生命周期中，特别要关注这一部分，以便获得最大的效益。
- en: Handling auto-scaling on App Engine
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 App Engine 上的自动扩展
- en: In this section, we look at how App Engine handles autoscaling. In most instances,
    GAE will handle any workload using its distributed architecture. Of course, if
    you have more advanced requirements, then it is worth the effort to understand
    how GAE performs instance auto-scaling.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论App Engine如何处理自动扩展。在大多数情况下，GAE会通过其分布式架构处理任何工作负载。当然，如果你有更高级的需求，那么了解GAE如何执行实例自动扩展是值得的。
- en: 'Within GAE, instance scaling definitions are within the configuration files.
    Two configuration items are specifically relevant and outlined here (that is,
    scaling type and instance class):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在GAE中，实例扩展的定义包含在配置文件中。以下两个配置项尤其相关，并在此进行了概述（即扩展类型和实例类别）：
- en: '| **Scaling type** | **Instance class** | **Description** |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| **扩展类型** | **实例类别** | **描述** |'
- en: '| Manual | Resident | Several upfront instances are available. Amending the
    number of instances would require manual intervention by the system administrator.
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 手动 | 固定 | 提供多个预配置的实例。修改实例数量需要系统管理员的手动干预。 |'
- en: '| Auto-scaling | Dynamic | In response to telemetry data (for example, response
    latency, and request rate) gathered from the system, autoscaling decides whether
    it should increase/decrease the number of instances. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 自动扩展 | 动态 | 根据从系统收集的遥测数据（例如响应延迟和请求率），自动扩展决定是否增加/减少实例数量。 |'
- en: 'When thinking about auto-scaling a service, it is imperative to consider how
    to design your application to take advantage of the constituent components. Here
    are some considerations concerning building a scalable solution:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑自动扩展服务时，必须考虑如何设计应用程序以充分利用各组成部分。以下是构建可扩展解决方案时需要考虑的一些因素：
- en: Load testing is essential to establish the best performance design for your
    application. In most instances, working with real-world traffic provides the best
    scenario for testing system bottlenecks.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载测试对于建立应用程序的最佳性能设计至关重要。在大多数情况下，使用真实世界的流量进行测试提供了检测系统瓶颈的最佳场景。
- en: Google Cloud imposes quota limits on all projects, so be mindful of this when
    creating an application. Quota limits apply to API calls as well as compute-based
    resources.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud对所有项目实施配额限制，因此在创建应用程序时要注意这一点。配额限制适用于API调用和计算资源。
- en: In most instances, a single task queue will be sufficient. However, GAE does
    provide the ability to shard task queues when long-lived tasks require higher
    processing throughput.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数情况下，一个任务队列就足够了。然而，GAE确实提供了在长时间运行的任务需要更高处理吞吐量时对任务队列进行分片的功能。
- en: In the next section, we move away from the general architecture of App Engine
    to discuss the specifics of implementation. As part of this discussion, there
    will be an overview of the languages supported.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将从App Engine的整体架构转向讨论实现的具体细节。在这部分讨论中，将概述支持的语言。
- en: Defining App Engine components
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义App Engine组件
- en: The objective of this section is to describe the details of GAE. The nature
    of the GAE application platform is to provide a serverless application environment
    that is capable of supporting multiple language runtimes. Runtime support requires
    that there are two versions of App Engine in existence. A critical difference
    between these environments relates to the language runtimes supported.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目的是描述GAE的详细信息。GAE应用平台的性质是提供一个无服务器的应用环境，能够支持多种语言的运行时。运行时支持要求存在两个版本的App Engine。两个环境之间的关键区别与所支持的语言运行时相关。
- en: Runtime languages supported
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持的运行时语言
- en: 'Historically, the GAE runtime only supported a limited number of languages,
    but this has expanded over time to provide a broader range. A limitation on runtime
    languages was one of the most common criticisms of the original version of GAE
    when it was released over a decade ago. This situation has improved significantly
    in the intervening years, and today an expanded range of runtimes are now supported,
    including the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，GAE运行时仅支持有限数量的语言，但随着时间的推移，已扩展到提供更广泛的语言支持。语言限制曾是GAE初版发布时最常见的批评之一。这一情况在过去几年中有了显著改善，现在支持更多的运行时环境，包括以下内容：
- en: Python 2.7/3.7
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.7/3.7
- en: Java, Node.js 8/10
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java, Node.js 8/10
- en: PHP 5.5/7.2
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 5.5/7.2
- en: Go 1.9/1.11/1.12
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 1.9/1.11/1.12
- en: App Engine – Standard
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: App Engine – 标准
- en: In this environment, a sandbox wrapper provides application isolation and constrains
    access to specific external resources. Depending on the runtime selected, security
    measures enforce the sandbox environment, for example, the application of access
    control lists, and the replacement of language libraries.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在此环境中，沙盒包装提供了应用程序隔离并限制对特定外部资源的访问。根据选择的运行时，安全措施强制执行沙盒环境，例如应用访问控制列表，以及替换语言库。
- en: 'In the following diagram, GAE Standard uses a sandbox environment, supporting
    0-N instances within a single availability zone:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，GAE Standard 使用沙盒环境，支持在单一可用区内运行 0-N 实例：
- en: '![](img/114bc77d-1b57-46fd-98fa-e8a4acc2c26f.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/114bc77d-1b57-46fd-98fa-e8a4acc2c26f.png)'
- en: When working with applications that require a runtime language such as Python,
    Java, Node.js, or Go, GAE Standard is the optimal choice. GAE Standard works within
    a sandbox environment and ensures instances can scale down to zero. Scaling to
    zero means a meager cost is incurred with this type of situation.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用需要运行时语言的应用程序时，如 Python、Java、Node.js 或 Go，GAE Standard 是最佳选择。GAE Standard
    在沙盒环境中运行，确保实例可以缩减至零。缩减到零意味着在这种情况下的成本非常低。
- en: App Engine – Flexible
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: App Engine – 灵活环境
- en: In the GAE Flex environment, a container resides on a GCE instance. While in
    certain respects, this provides the same service access as GAE Standard, there
    are some disadvantages associated with moving from the sandbox to GCE, specifically
    instance warm-up speed and cost.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GAE Flex 环境中，容器驻留在 GCE 实例上。虽然在某些方面，这与 GAE Standard 提供了相同的服务访问，但从沙盒迁移到 GCE
    存在一些缺点，特别是实例的预热速度和成本。
- en: 'In the following diagram, GAE Flex uses a container environment for the creation
    of resources to support 1-N instances within a regional MIG:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，GAE Flex 使用容器环境来创建资源，支持在区域 MIG 中运行 1-N 实例：
- en: '![](img/12d4e5df-e5dd-4bcb-9d77-753a22f2c6c4.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12d4e5df-e5dd-4bcb-9d77-753a22f2c6c4.png)'
- en: The container residing on GCE is based on a Docker image and provides an alternative
    to the sandbox environment mentioned earlier. Using GAE Flex requires some compromise
    on both speed and cost. The speed sacrifice is attributed to initiating the container
    through the Cloud Build process necessary to deploy the code into the GAE environment.
    As at least one instance needs to be active at any point in time, this means this
    type of situation will always incur some degree of cost.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 居住在 GCE 上的容器基于 Docker 镜像，提供了一种替代前述沙盒环境的方式。使用 GAE Flex 需要在速度和成本上做出一定的妥协。速度的牺牲源于需要通过
    Cloud Build 过程启动容器以将代码部署到 GAE 环境中。由于至少需要保持一个实例处于活动状态，这意味着这种情况下始终会产生一定的成本。
- en: Although GAE hides the build process from you, the associated lead time for
    building a custom runtime versus the sandbox approach is not insignificant. On
    completion of the build process, the image is posted to Google Cloud Build and
    is ready for deployment within the application. So, what are the main characteristics
    of GAE? The following sections will cover the main attributes of GAE.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 GAE 隐藏了构建过程，但与沙盒方法相比，构建自定义运行时所需的时间并不容忽视。完成构建过程后，镜像会被发布到 Google Cloud Build，并准备在应用程序内部署。那么，GAE
    的主要特点是什么呢？接下来的章节将介绍 GAE 的主要属性。
- en: Understanding App Engine features
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 App Engine 特性
- en: Throughout the next few sub-sections, we will describe some of the critical
    facets of GAE, starting with application versioning.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个小节中，我们将描述 GAE 的一些关键方面，从应用程序版本管理开始。
- en: Application versioning
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序版本管理
- en: GAE uses a configuration file to manage application versions to deploy. The
    configuration file for the runtime selected, for example, `app.yaml` for Python
    deployments, contains the version ID associated with your application. In addition
    to the version, an application default denotes the primary instance to the system.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: GAE 使用配置文件来管理要部署的应用程序版本。例如，针对 Python 部署的运行时，`app.yaml` 配置文件包含与应用程序相关联的版本 ID。除了版本之外，应用程序默认还指定了系统的主实例。
- en: Each application version deployed will maintain its distinct URL so that the
    developer can view multiple versions at the same time. Similarly, releases can
    be upgraded or rolled back depending on the deployment scheme selected. As new
    code deploys, a unique index is applied to the configuration code to ensure that
    each application revision can successfully distinguish between the old and new
    version deployed.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 每个部署的应用版本将保持其独特的 URL，开发者可以同时查看多个版本。同样，发布版本可以根据所选的部署方案进行升级或回滚。当新的代码部署时，会为配置代码应用一个独特的索引，以确保每个应用修订版能够成功区分已部署的旧版本和新版本。
- en: 'In the following diagram, three versions of the application have deployed on
    GAE. However, traffic will only be routed to the default version, unless otherwise
    stated by the application administrator:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，三个版本的应用程序已经在 GAE 上部署。然而，除非应用管理员另有说明，否则流量只会路由到默认版本：
- en: '![](img/abc0772f-ae13-4e04-abb0-1f53625c95d7.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/abc0772f-ae13-4e04-abb0-1f53625c95d7.png)'
- en: The approach taken by GAE means that deployments are straightforward to manage
    as the administrator of the system can make updates at the touch of a button.
    Similarly, they can also perform more complex deployments via the console without
    losing access to previous revisions of the application.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: GAE 采用的方式意味着部署管理非常简便，系统管理员可以一键更新。类似地，他们也可以通过控制台执行更复杂的部署，而不失去对应用程序先前修订版的访问。
- en: In addition to the built-in tools, App Engine supports source version control.
    Working with code stored in version control happens in much the same way as using
    local files. Deciding where system code access resolves is up to the developer;
    for example, they may choose to have code deployed using Cloud Source Repositories.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置工具外，App Engine 还支持源代码版本控制。使用版本控制中存储的代码与使用本地文件的方式非常相似。系统代码访问的决策由开发者决定；例如，他们可能选择使用
    Cloud Source Repositories 来部署代码。
- en: If you are unfamiliar with Google Cloud Source Repositories, it is essentially
    a Git repository directly associated with the project environment. If you are
    familiar with Git, then you will be able to get up and running using Google Source
    Repositories quickly. From here, it is entirely possible to mirror code from external
    sources such as Bitbucket, GitLab, or GitHub.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉 Google Cloud Source Repositories，它本质上是与项目环境直接关联的 Git 仓库。如果你熟悉 Git，那么你将能够迅速使用
    Google Source Repositories 启动工作。从这里开始，你完全可以从外部源（如 Bitbucket、GitLab 或 GitHub）镜像代码。
- en: For more uncomplicated use cases, deploying from a local file may be satisfactory
    for most instances. However, moving to a more consistent approach can help with
    the management of code across a project. Once the application successfully deploys,
    a decision on how to manage the traffic flow to this new deployment is the next
    step in the process.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更简单的使用场景，从本地文件部署可能足以满足大多数实例的需求。然而，采用更一致的方法有助于管理项目中的代码。一旦应用成功部署，接下来的步骤是决定如何管理流量流向这个新部署的应用。
- en: Traffic splitting
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流量分配
- en: Traffic splitting provides a useful way to move between versions. GAE offers
    several options to make this process easier. Also, you don't need to keep track
    of the application version that is currently deployed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 流量分配提供了一种有效的方式来在版本之间切换。GAE 提供了几种选项来简化这一过程。此外，你不需要跟踪当前已部署的应用版本。
- en: 'The options available for GAE traffic splitting are these:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: GAE 流量分配可用的选项如下：
- en: '**IP traffic**: Using the source IP to determine which instance to serve responses
    from'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP 流量**：使用源 IP 来确定从哪个实例提供响应'
- en: '**Cookie splitting**: Applying session affinity to the web transaction based
    on a cookie named `GOOGAPPUID` with a value between 0-999'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cookie 分配**：根据名为 `GOOGAPPUID` 且值在 0-999 之间的 Cookie 来应用会话亲和性'
- en: '**Random**: Using a randomization algorithm to serve content found with the
    preceding options'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随机**：使用随机算法根据前述选项来提供内容'
- en: 'In the following diagram, traffic routed to GAE is split between two instances.
    In this case, a 50% split is evident based on IP addresses:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，流量路由到 GAE 后会被分配到两个实例。在这种情况下，基于 IP 地址可以明显看出 50% 的流量分配：
- en: '![](img/fa602bf0-8014-40f4-9a0f-0a4a17a9f3a1.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa602bf0-8014-40f4-9a0f-0a4a17a9f3a1.png)'
- en: The command to deploy ensures that a simple process is available that enables
    moving from one version to another. As a fully managed application platform, the
    onus is on App Engine to simplify how the application will be deployed based on
    defined traffic splitting preferences observed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 部署命令确保了一个简单的过程，使得从一个版本切换到另一个版本成为可能。作为一个完全托管的应用平台，App Engine 的责任是简化如何根据定义的流量拆分偏好来部署应用。
- en: In an instance where a new deployment takes place, it is possible to tell App
    Engine how much of the traffic should be sent to the updated application deployment.
    A technique such as this is useful, for example, to perform A/B testing against
    two different deployed versions. Using this capability enables many different
    deployment and testing approaches to become available when looking to deploy a
    new release. Should there be an issue with the code that is implemented, there
    are numerous tools available to assist with this investigation. One such tool
    is Stackdriver, and we will be looking at the product more closely in the next
    section.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行新部署的情况下，可以告诉 App Engine 应该将多少流量发送到更新后的应用部署。例如，这种技术在进行 A/B 测试时非常有用，可以对比两个不同版本的部署。使用此功能可以在部署新版本时，开启许多不同的部署和测试方法。如果实现的代码出现问题，有许多工具可用来帮助调查。一个这样的工具是
    Stackdriver，我们将在下一节更详细地了解这个产品。
- en: Monitoring, logging, and diagnostics
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控、日志记录和诊断
- en: 'Stackdriver is the default monitoring solution for Google Cloud. When observing
    information relating to GAE, in Stackdriver, the resource type `gae_app` can be
    used to filter information specifically associated with the environment data.
    In the following diagram, we see traffic to the project is managed by GCE, and
    it is this that is responsible for connectivity to other services such as **Task
    Queues**, **Memcache**, and **Stackdriver**:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Stackdriver 是 Google Cloud 的默认监控解决方案。在观察与 GAE 相关的信息时，可以使用 Stackdriver 中的资源类型
    `gae_app` 来过滤专门与环境数据相关的信息。在下面的图示中，我们可以看到项目的流量由 GCE 管理，GCE 负责与其他服务的连接，例如 **任务队列**、**Memcache**
    和 **Stackdriver**：
- en: '![](img/b70aa098-ad19-44df-b4ed-6b505fbb4cb3.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b70aa098-ad19-44df-b4ed-6b505fbb4cb3.png)'
- en: 'Stackdriver logging is available as standard for any GAE environment, providing
    the ability to see what operations are being performed in your application in
    real time. Logs generated via the application are available to interrogate as
    required. This logging process does not require any additional configuration and
    is available for all the application-related logs that are made available. For
    reference, when using records with GAE, it is essential to note the following
    data sources available in Stackdriver:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Stackdriver 日志记录作为标准功能适用于任何 GAE 环境，提供了实时查看应用程序中正在执行的操作的能力。通过应用程序生成的日志可以根据需要进行查询。这个日志记录过程不需要额外的配置，并且适用于所有可用的与应用程序相关的日志。供参考，当使用
    GAE 中的记录时，必须注意 Stackdriver 中可用的以下数据源：
- en: '**Request logs**: These provide the default information associated with requests
    made to the application. The resource for this log is named `request_log`. You
    can observe this in the Stackdriver Logs Viewer under the `appengine.googleapis.com/request_log`
    filter.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求日志**：这些提供了与对应用程序发出的请求相关的默认信息。此日志的资源名为 `request_log`。你可以在 Stackdriver 日志查看器中的
    `appengine.googleapis.com/request_log` 过滤器下查看。'
- en: '**App logs**: These provide additional application information supplemental
    to the request log.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用日志**：这些提供了补充请求日志的额外应用信息。'
- en: '**Third-party logs**: These are application-specific and in addition to the
    preceding logs. There may be package-specific information sent to the system logs.
    Where present, there will be an entry available via the API accessible via the
    Logs Viewer.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三方日志**：这些是特定于应用的，除此之外还有前述的日志。可能会有特定包的信息被发送到系统日志。如果存在此类信息，可以通过 API 在日志查看器中访问相应的条目。'
- en: Stackdriver Trace also doesn't require any additional instrumentation to work
    with App Engine. Working with this solution is automatically enabled to allow
    the monitoring of application trace data. The data is incorporated into the default
    GAE settings and will be accessible within the Stackdriver environment.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Stackdriver Trace 同样不需要额外的工具来与 App Engine 一起工作。使用这个解决方案时，自动启用应用程序跟踪数据的监控。数据会被集成到默认的
    GAE 设置中，并可以在 Stackdriver 环境中访问。
- en: When working with App Engine Flex environments, logs use either Google Cloud
    Client Libraries or `stdout`/`stderr` to capture application-related information
    and push it to the centralized Stackdriver logging system.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 App Engine Flex 环境时，日志通过 Google Cloud 客户端库或 `stdout`/`stderr` 捕获与应用程序相关的信息，并推送到集中式
    Stackdriver 日志系统。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered a high-level introduction into the fully managed
    application platform App Engine. Working in this environment illustrates many
    of the usual infrastructure tasks related to development are performed automatically
    without recourse to the developer.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了完全托管的应用平台 App Engine 的高层次概况。在这个环境中，许多与开发相关的基础设施任务会自动执行，开发人员无需过多干预。
- en: In general, GAE deployment is a fully managed activity that requires very little
    interaction to build, host, or execute code. The environment typically consists
    of a load balancer, a compute tier, and a services layer, all working in tandem
    to provide an integrated application platform. GAE provides a low-effort development
    environment built to do much of the heavy lifting for developers.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，GAE 部署是一个完全托管的活动，构建、托管或执行代码时几乎不需要任何交互。该环境通常由负载均衡器、计算层和服务层组成，这三者协同工作，为开发人员提供集成的应用平台。GAE
    提供了一个低投入的开发环境，旨在为开发人员完成大部分繁重的工作。
- en: Now we have a general understanding of the App Engine environment. The next
    chapter will focus on introducing code samples to flesh out our experience and
    skill level.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 App Engine 环境有了大致了解，下一章将通过代码示例进一步完善我们的经验和技能。
- en: Questions
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What type of service dispatch is supported by task queues?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务队列支持哪种类型的服务调度？
- en: What are the two levels of service supported by memcache?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Memcache 支持的两个服务级别是什么？
- en: What type of database is Cloud Datastore?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cloud Datastore 是什么类型的数据库？
- en: Name a runtime language supported by GAE.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举 GAE 支持的运行时语言之一。
- en: What forms of traffic-splitting algorithms are supported on GAE?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GAE 支持哪些形式的流量分割算法？
- en: What is the purpose of GFE in relation to GAE?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GFE 与 GAE 的关系是什么？
- en: Name the three types of scaling supported by GAE.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举 GAE 支持的三种扩展方式。
- en: What mechanism is used to isolate long-lived workloads for efficiency purposes
    from the HTTP request/response life cycle?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为提高效率，使用了哪种机制将长期运行的工作负载与 HTTP 请求/响应生命周期隔离？
- en: Further reading
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**Choosing an App Engine environment**: [https://cloud.google.com/appengine/docs/the-appengine-environments](https://cloud.google.com/appengine/docs/the-appengine-environments)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择应用引擎环境**：[https://cloud.google.com/appengine/docs/the-appengine-environments](https://cloud.google.com/appengine/docs/the-appengine-environments)'
- en: '**gRPC**: [https://grpc.io/blog/principles/](https://grpc.io/blog/principles/)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gRPC**：[https://grpc.io/blog/principles/](https://grpc.io/blog/principles/)'
- en: '**NDB Caching**: [https://cloud.google.com/appengine/docs/standard/python/ndb/cache](https://cloud.google.com/appengine/docs/standard/python/ndb/cache)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NDB 缓存**：[https://cloud.google.com/appengine/docs/standard/python/ndb/cache](https://cloud.google.com/appengine/docs/standard/python/ndb/cache)'
- en: '**Datastore and Firestore modes**: [https://cloud.google.com/datastore/docs/firestore-or-datastore](https://cloud.google.com/datastore/docs/firestore-or-datastore)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Datastore 和 Firestore 模式**：[https://cloud.google.com/datastore/docs/firestore-or-datastore](https://cloud.google.com/datastore/docs/firestore-or-datastore)'
- en: '**Cloud Source Repositories and App Engine**: [https://cloud.google.com/source-repositories/docs/quickstart-deploying-from-source-repositories-to-app-engine](https://cloud.google.com/source-repositories/docs/quickstart-deploying-from-source-repositories-to-app-engine)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cloud Source Repositories 和 App Engine**：[https://cloud.google.com/source-repositories/docs/quickstart-deploying-from-source-repositories-to-app-engine](https://cloud.google.com/source-repositories/docs/quickstart-deploying-from-source-repositories-to-app-engine)'
