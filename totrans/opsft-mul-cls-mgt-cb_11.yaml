- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenShift Multi-Cluster GitOps and Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first chapter of this book, we discussed the main challenges most organizations
    face in scaling their Kubernetes infrastructure in a multi- or hybrid-cloud world.
    New challenges arise when you deploy multiple clusters on different providers,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inconsistent security policies**: Clusters with different configurations
    regarding access rules and user profiles, allowed/blocked network flows, certificates,
    and other security aspects make an organization more vulnerable to data breaches
    and other security events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High operational effort to manage all clusters**: Managing configurations,
    components, compliance, and policies for several clusters is overwhelming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploying and managing applications**: The deployment process becomes much
    more complicated when you need to do it over several clusters. Monitoring and
    managing them are also really complex and require a lot of human effort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will introduce a great tool to help you address these challenges
    and alleviate the amount of work you and/or your team may need to deal with when
    managing several clusters: Red Hat **Advanced Cluster Management** (**ACM**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, you will find the following topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Red Hat ACM?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat ACM installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing clusters using Red Hat ACM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing applications using Red Hat ACM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Governance using Red Hat ACM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-cluster observability with Red Hat ACM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The source code used in this chapter is available at [https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter11](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: What is Red Hat ACM?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Red Hat ACM is a complete solution for Kubernetes multi-cluster management
    from a single pane that includes some other great features, making complex and
    time-consuming tasks a lot easier. Red Hat ACM provides a few main features, listed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kubernetes multi-cluster management**: Create, update, and delete Kubernetes
    clusters on-premises and in the cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-cluster observability**: ACM can also provide observability for all
    clusters from a single point of view, enabling administrators to read, aggregate,
    and receive alerts on the clusters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Governance using policies**: Through Red Hat ACM, you can audit and enforce
    policies to apply anything you want in the clusters, from security to infrastructure
    and application-related stuff. This includes roles and access control, operators
    that must be installed, and security compliance rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application management**: Deploy applications from Git repositories or Helm
    into multiple clusters simultaneously and also view them from a single pane.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the great aspects of ACM is its multi-cluster architecture – it is designed
    to manage several clusters from a single standpoint, as you can see in the following
    figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – ACM hub and managed clusters ](img/B18015_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – ACM hub and managed clusters
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, it uses the concept of hub and managed clusters, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hub cluster**: An OpenShift cluster that runs the central controller of ACM,
    which contains the web console, APIs, and other components that make up the product’s
    features. In this chapter, we will use the term hub cluster several times to refer
    to the OpenShift cluster that hosts ACM. OpenShift is the only supported option
    for the hub cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managed cluster**: A cluster that is managed by ACM. ACM can manage OpenShift
    as well as other Kubernetes-based distributions. Check the *Further reading* section
    at the end of this chapter to find a complete list of Kubernetes distributions
    supported by ACM (Supportability Matrix).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will dig into all these features in the following sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat ACM installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will guide you through the installation and configuration
    of ACM.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: It is important to consider that ACM uses the compute, memory, and storage resources
    of the hub cluster, thus it is recommended to have a dedicated cluster to be the
    hub for ACM, avoiding concurrent workloads and resource usage. This is recommended
    but not required; you can run ACM in any OpenShift cluster with enough capacity.
  prefs: []
  type: TYPE_NORMAL
- en: The installation process is simple, similar to what we followed in the last
    chapters with OpenShift Pipelines and GitOps, as you can see in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Access to an OpenShift cluster with cluster-admin permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow this process to install Red Hat Advanced Cluster Management:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the OpenShift web console using a cluster-admin user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Operators** | **OperatorHub** menu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – OperatorHub ](img/B18015_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – OperatorHub
  prefs: []
  type: TYPE_NORMAL
- en: Search for `Advanced Cluster Management for Kubernetes` using the **Filter by
    keyword…** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Advanced Cluster Management for Kubernetes on OperatorHub ](img/B18015_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Advanced Cluster Management for Kubernetes on OperatorHub
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Advanced Cluster Management for Kubernetes** tile and then on
    the **Install** button to see the **Install Operator** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Installing Advanced Cluster Management for Kubernetes ](img/B18015_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Installing Advanced Cluster Management for Kubernetes
  prefs: []
  type: TYPE_NORMAL
- en: Don’t change the default namespace (`open-cluster-management`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Automatic** or **Manual** for **Update approval**. If you select **Automatic**,
    upgrades will be performed automatically by **Operator Lifecycle Manager** (**OLM**)
    as soon as they are released by Red Hat, while with **Manual**, you need to approve
    it before being applied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the correct update channel. The stable channel is recommended as it contains
    the latest stable and *supported* version of the operator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Installing the operator ](img/B18015_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Installing the operator
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait up to 5 minutes until you see the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Operator installed ](img/B18015_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Operator installed
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the operator installed, we can go ahead and deploy a new **MultiClusterHub**
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Create MultiClusterHub** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Usually, no changes are needed; leave the default values and click on the **Create**
    button. Check out the link in the *Further reading* section of this chapter for
    product documentation for more information if you need to configure some advanced
    settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Create MultiClusterHub ](img/B18015_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Create MultiClusterHub
  prefs: []
  type: TYPE_NORMAL
- en: You will see the status `Phase:Installing` during the installation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Installing MultiClusterHub ](img/B18015_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Installing MultiClusterHub
  prefs: []
  type: TYPE_NORMAL
- en: Wait a bit until you see the `Phase:Running` status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9 – MultiClusterHub running ](img/B18015_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – MultiClusterHub running
  prefs: []
  type: TYPE_NORMAL
- en: Click on the *combo box* at the top left of the screen and then click on **Advanced
    Cluster Management**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Advanced Cluster Management option ](img/B18015_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Advanced Cluster Management option
  prefs: []
  type: TYPE_NORMAL
- en: You should see the ACM login screen. Use the same admin credentials you use
    to log in to OpenShift.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Red Hat ACM login ](img/B18015_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Red Hat ACM login
  prefs: []
  type: TYPE_NORMAL
- en: You have now Red Hat ACM installed and ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Red Hat ACM initial page ](img/B18015_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Red Hat ACM initial page
  prefs: []
  type: TYPE_NORMAL
- en: Continue to the next section to learn more about the ACM cluster management
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Managing clusters using Red Hat ACM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned previously, one of the features ACM provides is cluster management.
    The following is a list of some of the operations you can perform with ACM:'
  prefs: []
  type: TYPE_NORMAL
- en: Cluster provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import of existing clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destroying a cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading a cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling cluster nodes in or out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the *Further reading* section of this chapter to see a link to a complete
    list of supported operations.
  prefs: []
  type: TYPE_NORMAL
- en: We will not cover how to do all the operations you can perform with ACM in this
    book, but we will guide you through the process of provisioning a new OpenShift
    cluster on AWS using ACM, to give you an idea of how easy it is to use the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster provisioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, in version 2.5, ACM can deploy clusters on AWS, Azure, Google Cloud,
    VMware vSphere, bare metal, Red Hat OpenStack, and Red Hat Virtualization. To
    do so, you need to first input the provider credentials to be used by ACM during
    the provisioning process. The following steps show how to add AWS credentials
    that will be used with our sample:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the **Credentials** menu and click on the **Add credential** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Adding provider credentials ](img/B18015_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Adding provider credentials
  prefs: []
  type: TYPE_NORMAL
- en: Click on the AWS credential.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Selecting the credential type ](img/B18015_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Selecting the credential type
  prefs: []
  type: TYPE_NORMAL
- en: On the next page, input a name and select a namespace where the credentials
    will be stored and the base DNS domain that will be used to deploy clusters. Click
    on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.15 – Basic credentials information ](img/B18015_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – Basic credentials information
  prefs: []
  type: TYPE_NORMAL
- en: Recommended Practice
  prefs: []
  type: TYPE_NORMAL
- en: The provider credentials are stored in secrets in the namespace provided. As
    such, it is highly recommended you create a specific namespace for that and keep
    the access for it restricted.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the AWS access and secret keys. Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.16 – AWS access and secret keys ](img/B18015_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – AWS access and secret keys
  prefs: []
  type: TYPE_NORMAL
- en: If you use a proxy, input the proxy configuration and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.17 – Proxy configuration ](img/B18015_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.17 – Proxy configuration
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the [console.redhat.com](http://console.redhat.com) portal using your
    Red Hat credentials and go to the **OpenShift** | **Downloads** menu option. Scroll
    down in the **Tokens** section and click on the **Copy** button next to **Pull
    Secret**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.18 – Getting a pull secret ](img/B18015_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.18 – Getting a pull secret
  prefs: []
  type: TYPE_NORMAL
- en: Go back to ACM and paste the pull secret in the required field. Use an existing
    or create a new SSH key and paste it into the **SSH private key** and **SSH public
    key** fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Inputting the pull secret and SSH keys ](img/B18015_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.19 – Inputting the pull secret and SSH keys
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following command in a Linux workstation to generate a new
    SSH key if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ssh-keygen -t ed25519 -N '''' -f new-ssh-key`'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click on the **Add** button and see your new credential.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.20 – Credential added ](img/B18015_11_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.20 – Credential added
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s go ahead and deploy a new cluster using this credential. Follow
    this process to deploy the cluster using ACM:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the **Infrastructure** | **Clusters** menu and click on the **Create
    cluster** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.21 – Creating a cluster ](img/B18015_11_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.21 – Creating a cluster
  prefs: []
  type: TYPE_NORMAL
- en: Select AWS, choose the credential that we just created, and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.22 – Selecting the installation type ](img/B18015_11_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.22 – Selecting the installation type
  prefs: []
  type: TYPE_NORMAL
- en: Fill out the form with the requested fields and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.23 – Filling out the cluster details ](img/B18015_11_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.23 – Filling out the cluster details
  prefs: []
  type: TYPE_NORMAL
- en: Input the AWS region and the machine number and size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.24 – Node pools ](img/B18015_11_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.24 – Node pools
  prefs: []
  type: TYPE_NORMAL
- en: If you want to customize the cluster network configurations, you can do so on
    this screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.25 – Network configurations ](img/B18015_11_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.25 – Network configurations
  prefs: []
  type: TYPE_NORMAL
- en: Input the proxy configurations, if needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.26 – Proxy configuration ](img/B18015_11_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.26 – Proxy configuration
  prefs: []
  type: TYPE_NORMAL
- en: You can also use Ansible to run playbooks and automate infrastructure requirements
    you may have as part of your deployment process. We will not dig into the Ansible
    integration in this book, but you can find good references to it in the *Further
    reading* of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.27 – Ansible automation hooks ](img/B18015_11_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.27 – Ansible automation hooks
  prefs: []
  type: TYPE_NORMAL
- en: Review the information provided and click on the **Create** button if everything
    is correct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.28 – Reviewing a cluster ](img/B18015_11_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.28 – Reviewing a cluster
  prefs: []
  type: TYPE_NORMAL
- en: You will be redirected to the overview page, where you can inspect the installation
    process. The deployment process usually takes between 30 and 60 minutes depending
    on the provider and region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.29 – Cluster overview ](img/B18015_11_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.29 – Cluster overview
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you add labels in your clusters according to some organizational
    structure to be used later with `env=dev` label in this cluster and use it in
    the next section when we deploy an application into a remote cluster using ACM.
    To do so, click on the pencil icon next to the **Labels** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.30 – Adding new labels ](img/B18015_11_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.30 – Adding new labels
  prefs: []
  type: TYPE_NORMAL
- en: Then, add the new label, `env=dev.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.31 – Adding a label in a cluster ](img/B18015_11_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.31 – Adding a label in a cluster
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the OpenShift cluster deployment process is straightforward!
    In the next section, you will see how ACM can also help you to deploy an application
    into multiple clusters using its embedded deployment mechanism or also using it
    integrated with OpenShift GitOps (Argo CD).
  prefs: []
  type: TYPE_NORMAL
- en: Managing applications using Red Hat ACM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the greatest benefits of ACM is providing a single and simple way to
    view applications that are deployed among different clusters. You can also deploy
    an application into multiple clusters using two different approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the embedded Application Subscription deployment model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenShift GitOps (Argo CD) and **ApplicationSets**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will walk through the process of each approach in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Application Subscription model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This model is embedded in ACM and doesn’t depend on anything other than ACM
    itself. In the Application Subscription model, you will define an **Application**
    object that subscribes (**Subscription**) to one or more Kubernetes resources
    (**Channel**) that contain the manifests that describe how the application is
    deployed. The application will be deployed in the clusters defined in the placement
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a diagram that explains how this model works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.32 – ACM Application Subscription model ](img/B18015_11_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.32 – ACM Application Subscription model
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get back to the sample application we used in the previous chapter and
    create the ACM objects to check what the application deployment model looks like.
  prefs: []
  type: TYPE_NORMAL
- en: Channels (what to deploy)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Define the source repositories used to deploy an application. It can be a Git
    repository, Helm release, or object storage repository. We are going to use the
    following YAML manifest to point out to our Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**#[1]** highlights the URL to the Git repository that contains the application
    deployment manifests.'
  prefs: []
  type: TYPE_NORMAL
- en: After the `Channel` object, we need to create the `PlacementRule` object, which
    will be used with the application deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Placement rules (where to deploy)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Placement rules define the target clusters where the application will be deployed.
    They are also used with policies. Remember that we added the `env=dev` label to
    the cluster we provisioned earlier. We are going to use it now to define our `PlacementRule`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`env=dev` label.'
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to create the `Subscription` object.
  prefs: []
  type: TYPE_NORMAL
- en: Subscriptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Subscriptions are used to subscribe clusters to a source repository and also
    define where the application will be deployed. They work like a glue between the
    deployment manifests (`Channel`) and the target clusters (`PlacementRule`). The
    following shows what our `Subscription` object looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have highlighted some parts with numbers. Let’s take
    a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '**#[1]**: Path for deployment manifests on Git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Application` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[3]**: Channel that contains the Git repository, Helm, or object storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PlacementRule`, which describes where the application will be deployed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we can now create the ACM `Application` object.
  prefs: []
  type: TYPE_NORMAL
- en: Applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Applications are objects used to describe a group of ACM resources that are
    needed to deploy an application. The following is the `Application` object of
    our sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`app=cloud-api` label will be used.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the objects involved in application deployment, let’s
    create them on ACM.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Deploying the objects is as simple as running an `oc apply` command from the
    hub cluster. Run the following commands from the hub cluster to deploy the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the application status by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can alternatively deploy the application using the ACM web console. To
    do so, perform the following process:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the **Applications** | **Create application** | **Subscription** menu
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.33 – Deploying an application using ACM ](img/B18015_11_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.33 – Deploying an application using ACM
  prefs: []
  type: TYPE_NORMAL
- en: Fill out the form with the application data, including **Name** and **Namespace**,
    choose the **Git** repository, and then click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.34 – Filling out the application data ](img/B18015_11_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.34 – Filling out the application data
  prefs: []
  type: TYPE_NORMAL
- en: Input the placement configuration as follows and click on the Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.35 – Placement configuration details ](img/B18015_11_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.35 – Placement configuration details
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Topology** tab to see an overview of the application deployed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.36 – Application topology ](img/B18015_11_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.36 – Application topology
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to deploy an application using the embedded ACM subscription,
    let’s see how we would do the same using OpenShift GitOps (Argo CD).
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift GitOps (Argo CD) and ApplicationSets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As already mentioned, you can alternatively deploy applications using ACM integrated
    with OpenShift GitOps (Argo CD) through an object called an `argocd` command-line
    option to add managed clusters to Argo CD. You don’t need to do that when you
    use ACM, as ACM manages the external clusters and can add them to Argo CD for
    you. Instead, with ACM you will need to define the following objects in the hub
    cluster, in order to instruct ACM to configure Argo CD and add the managed clusters
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ManagedClusterSet`: Group of clusters that share some common configurations,
    such as user access control and multi-cluster networking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ManagedClusterSetBinding`: Binds `ManagedClusterSet` to a namespace. In this
    particular case, we need to bind `ManagedClusterSet` to the `openshift-gitops`
    namespace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Placement`: Resource that defines predicates to select `ManagedCluster` from
    `ManagedClusterSets` to bind to `GitOpsCluster`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GitOpsCluster`: Register to OpenShift GitOps a group of managed clusters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have sample YAML for all the previously listed objects in the `chapter11/argocd`
    folder of our GitHub repository. Go ahead and use the following commands to apply
    those objects in your hub cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, access your ACM and go to **Clusters** | **Cluster sets** (tab) | **all-clusters**
    | **Managed clusters** (tab), and then click on the **Manage resource assignments**
    button. On this page, select all your clusters and click on the **Review** button
    and then **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.37 – Adding clusters to a cluster set ](img/B18015_11_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.37 – Adding clusters to a cluster set
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can go ahead and create an ApplicationSet that uses a `Placement`
    object to deploy the application in all clusters that have the `env=dev` label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After a couple of minutes, you should see the application deployed from the
    application **Overview**/**Topology** view.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.38 – ApplicationSet topology ](img/B18015_11_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.38 – ApplicationSet topology
  prefs: []
  type: TYPE_NORMAL
- en: The **Topology** view allows you to see your application deployed into multiple
    clusters from a single pane. This feature is really helpful for applications that
    are deployed over several clusters, as you can easily see how the application
    is behaving in all the clusters from a single and simple view.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our overview of the application life cycle management feature
    of Red Hat ACM. In this section, you have seen how ACM can help you deploy applications
    into multiple managed clusters by using either the Application Subscription model
    or OpenShift GitOps (Argo CD). Next, you are going to see how to use policies
    on ACM to keep your clusters compliant according to your organization’s business
    and security needs.
  prefs: []
  type: TYPE_NORMAL
- en: Governance using Red Hat ACM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been discussing the challenges that large enterprises face in keeping
    different environments consistent a lot in this book. The ACM governance feature
    can play a crucial role in your strategy to maintain secure and consistent environments,
    no matter where they are running. The ACM governance feature allows you to define
    policies for a set of clusters and inform or enforce when clusters become non-compliant.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define policies in ACM, you need to create three objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Policy**: Define the policy and remediation action that will be performed
    (inform or enforce).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PlacementBinding**: Bind a policy into a PlacementRule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PlacementRule**: Rules that define which clusters the policy will be applied
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see an example of a policy to check etcd encryption in all managed
    clusters on our GitHub. The following diagram shows what the interaction between
    the ACM policy objects looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.39 – ACM policy model ](img/B18015_11_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.39 – ACM policy model
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to create the policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, access the **Governance** feature on the ACM web console to check the policy
    we just put in place.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.40 – ACM governance console ](img/B18015_11_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.40 – ACM governance console
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Policies** and access **policy-etcdencryption** to see the details.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.41 – ACM governance – violation details ](img/B18015_11_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.41 – ACM governance – violation details
  prefs: []
  type: TYPE_NORMAL
- en: In the *Further reading* section of this chapter, you will find a link to a
    repository that contains several reusable policies that you can use as is or as
    samples to create your own policies.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, the ACM governance feature is simple to understand and use.
    Now think about the policies that you would like to have monitored or enforced
    in your clusters and start deploying your own policies!
  prefs: []
  type: TYPE_NORMAL
- en: Multi-cluster observability with Red Hat ACM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Multicluster observability** is an ACM feature that is intended to be a central
    hub for metrics, alerting, and monitoring systems for all clusters, whether hub
    clusters or managed clusters.'
  prefs: []
  type: TYPE_NORMAL
- en: As this tool handles a large amount of data, it is recommended to provide fast
    disks as its storage backend. Red Hat has tested and fully supports the solution
    if adopted in conjunction with Red Hat OpenShift Data Foundation.
  prefs: []
  type: TYPE_NORMAL
- en: Although Red Hat recommends doing so, the prerequisite is a storage solution
    that provides **object**/**S3-type storage**, such as those commonly found in
    most cloud providers (such as Amazon S3).
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since observability is a feature of an ACM operator, there aren’t many prerequisites.
    The following are the requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable the observability feature on a connected Red Hat OpenShift cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure an object store from a storage provider. Some of the supported object
    storage types are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat Container Storage
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS S3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat Ceph (S3-compatible API)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Storage
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Storage
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat on IBM Cloud
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: It is important to configure encryption when you have sensitive data persisted.
    The Thanos documentation has a definition of supported object stores. Check the
    link in the *Further reading* section at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the observability service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since observability runs on top of ACM, its creation depends on a **Custom Resource**
    (**CR**) that will trigger the creation of the **Multicluster Observability**
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram demonstrates a high-level architecture of the objects
    involved in the observability solution. It serves as a reference for which objects
    are created when enabling the observability service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.42 – Creating MultiClusterHub ](img/B18015_11_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.42 – Creating MultiClusterHub
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to enable multicluster observability:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we used an OpenShift hub cluster deployed on top of Microsoft
    Azure, so you must to set some variables in a terminal that will help you configure
    Azure dynamic storage to be used as the storage solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s take a look at what the highlighted numbers mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '**#[1]**: Hub cluster zone for Microsoft Azure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[2]**: Resource group name for Microsoft Azure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[3]**: Cluster name for the hub cluster'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[4]**: Storage account name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[5]**: Command to create the storage on Microsoft Azure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[6]**: Attribute storage role for OpenShift to handle storage operations
    for observability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[7]**: This command creates a container inside the storage blob account,
    that will be used to store the data for ACM observability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[8]**: Azure CLI instruction to get the connection string for storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a namespace in the hub cluster for observability. We will create the
    namespace in the terminal; otherwise, you can also create it in the OpenShift
    web console UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, it is time to create a secret with the connection string we got in the
    previous step (instruction **#[8]**). The complete YAML files are available in
    our GitHub repository for your reference and use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s take a look at what the highlighted numbers mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '**#[1]**: Environment variable for current Docker pull secret.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dockerconfigjson` file into the secret for `multiclusterhub`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[3]**: Data from previous commands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration file available at [https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter11/acm-observability/thanos-object-storage.yaml](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter11/acm-observability/thanos-object-storage.yaml).
  prefs: []
  type: TYPE_NORMAL
- en: Now you have the required storage to be used with observability, so it’s time
    to create a `MulticlusterObservability` object. Go back to the **Advanced Cluster
    Management for Kubernetes** operator, which we installed at the beginning of this
    chapter, access the **MultiClusterObservability** tab, and click on the **Create
    MultiClusterObservability** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.43 – MultiClusterObservability creation ](img/B18015_11_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.43 – MultiClusterObservability creation
  prefs: []
  type: TYPE_NORMAL
- en: Keep the CR as default and then click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.44 – MultiClusterObservability ](img/B18015_11_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.44 – MultiClusterObservability
  prefs: []
  type: TYPE_NORMAL
- en: Wait until the observability instance status is **Ready**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.45 – Configuring an instance for MultiClusterObservability ](img/B18015_11_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.45 – Configuring an instance for MultiClusterObservability
  prefs: []
  type: TYPE_NORMAL
- en: Now you can see, upon navigating to **Main Menu** | **Overview**, a route for
    Grafana’s observability dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.46 – Configuring an instance for MultiClusterObservability ](img/B18015_11_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.46 – Configuring an instance for MultiClusterObservability
  prefs: []
  type: TYPE_NORMAL
- en: '**#[1]**: Notice that Observability option is now available in Grafana link.'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Grafana** to see some great dashboards that aggregate metrics that
    come from multiple clusters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.47 – MultiClusterObservability dashboard view sample ](img/B18015_11_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.47 – MultiClusterObservability dashboard view sample
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can count on this amazing ACM feature to help you and your organization
    monitor all your Kubernetes managed clusters from a central pane, independent
    of the infrastructure or cloud provider they are running over. In the next subsection,
    we will show you an option that gives you even more control over your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring AlertManager to send alerts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have seen so far, observability can be a great ally for monitoring all
    your clusters from a central view, but now we will go even further and show you
    the *icing on the cake*, that will be one thing more to help you to manage your
    clusters.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 11.42*, **AlertManager** is a resource that is part of the
    observability architecture. We will show a sample now that you can use to enable
    this feature and get alerts from all managed clusters.
  prefs: []
  type: TYPE_NORMAL
- en: AlertManager is a tool that can send alerts to a set of other systems, such
    as email, PagerDuty, Opsgenie, WeChat, Telegram, Slack, and also your custom webhooks.
    For this example, we will use Slack, a short-messaging tool, as a receiver for
    all of our alerts.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, you will need the Slack app to set up alerts, and then point to [https://api.slack.com/messaging/webhooks](https://api.slack.com/messaging/webhooks)
    and follow the instructions to create and configure a channel. When you finish
    configuring the Slack app, you will get a webhook endpoint similar to the following:
    `https://hooks.slack.com/services/T03ECLDORAS04/B03DVP1Q91D/R4Oabcioek`. Save
    the webhook address in a safe place as it will be used in the next steps.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring AlertManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To configure AlertManager, you will need to create a new file named `alertmanager.yaml`.
    This file will have the webhook that you saved previously. The complete YAML files
    are available in our GitHub repository for your reference and use (github repository
    at [https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter11/acm-observability/alertmanager.yaml](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter11/acm-observability/alertmanager.yaml)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have highlighted some parts with numbers. Let’s take
    a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '**#[1]**: Webhook Slack API URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[2]**: Name of the receiver for alerts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[3]**: Filter critical or warning alerts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#[4]**: Slack channel inside the workspace'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step is to apply the new `alertmanager.yaml` file to the ACM observability
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `alertmanager.yaml` file must be in the same execution directory. Wait
    until the new AlertManager pods are created and you will receive new `[Firing]`
    or `[Resolved]` alerts on the configured channel. See an example in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.48 – AlertManager multicluster alerts](img/Image91965.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.48 – AlertManager multicluster alerts
  prefs: []
  type: TYPE_NORMAL
- en: Here we go; we have our AlertManager set and sending alerts to a Slack channel!
    Therefore, in this section, you have seen the observability feature, from the
    installation to configuration and use. This should help you in your multi-cluster
    journey to monitor all your clusters, no matter which provider they are running
    in.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have been introduced to Red Hat ACM and have seen an overview
    of its features and how it can help you manage several clusters. Now you understand
    that Red Hat ACM provides features to manage multiple clusters, keep them compliant
    with the policies you define for them, deploy workloads into many of them at once,
    and also monitor all of them from a central pane.
  prefs: []
  type: TYPE_NORMAL
- en: We also walked through the ACM installation process, provisioned a new cluster
    on AWS using ACM, saw how to deploy an application by using either the embedded
    ACM Application Subscription model or integrated with Argo CD, had a brief overview
    of the ACM governance feature, and, finally, enabled the observability feature
    to monitor multiple clusters and aggregate metrics on ACM.
  prefs: []
  type: TYPE_NORMAL
- en: In today’s world, handling multiple clusters over multiple providers, either
    on-premises or in the cloud, is a reality in most companies; therefore, a multi-cluster
    management tool is a must-have. Red Hat ACM can provide you with the features
    you need to manage all clusters from a centralized place. We encourage you to
    explore and start using ACM now to reap all the benefits of this great tool.
  prefs: []
  type: TYPE_NORMAL
- en: Continue to the next chapter to learn how Red Hat Advanced Cluster Security
    can help you to keep your Kubernetes and OpenShift clusters secure.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking for more information? Check out the following references to get more
    information about Red Hat ACM:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Red Hat Advanced Cluster Management documentation*: [https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5](https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Red Hat ACM supportability matrix*: [https://access.redhat.com/articles/6663461](https://access.redhat.com/articles/6663461)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Red Hat Advanced Cluster Management observability prerequisites:* [https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.3/html-single/observability/index#prerequisites-observability](https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.3/html-single/observability/index#prerequisites-observability)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Supported object stores for Thanos*: [https://thanos.io/tip/thanos/storage.md/#supported-clients](https://thanos.io/tip/thanos/storage.md/#supported-clients)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Red Hat ACM policy collection:* [https://github.com/open-cluster-management/policy-collection](https://github.com/open-cluster-management/policy-collection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Integrating Red Hat ACM with Ansible for cluster deployment and upgrade:*
    [https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/clusters/managing-your-clusters#ansible-config-cluster](https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/clusters/managing-your-clusters#ansible-config-cluster)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Integrating Red Hat ACM with Ansible for application management:* [https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/applications/managing-applications#setting-up-ansible](https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/applications/managing-applications#setting-up-ansible)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating policy violation automation using Ansible:* [https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/governance/governance#configuring-governance-ansible](https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/governance/governance#configuring-governance-ansible)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 4 – A Taste of Multi-Cluster Implementation and Security Compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will take a dive into some great tools used to manage multiple
    clusters and to enable an organization to scale its implementation into the hybrid
    cloud world.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part of the book comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18015_12.xhtml#_idTextAnchor251), *OpenShift Multi-Cluster
    Security*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B18015_13.xhtml#_idTextAnchor275), *OpenShift Plus – a Multi-Cluster
    Enterprise-Ready Solution*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B18015_14.xhtml#_idTextAnchor290), *Building a Cloud-Native
    Use Case on a Hybrid Cloud Environment*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
