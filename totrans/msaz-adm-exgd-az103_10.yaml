- en: Creating and Configuring VMs for Windows and Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered Azure file shares and how to sync your on-premises file
    shares with Azure using the Azure File Sync service. You also learned how to back
    up and restore file shares in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the *Deploying and Managing Virtual Machines* objective. In
    this chapter, we are going to cover **V****irtual Machines** (**VMs**) in Azure,
    and the different VM sizes that are available for both Azure and Linux. You will
    learn how you can create and configure VMs for Windows and Linux. We will also
    cover high availability and what actions you can take to configure your VMs for
    high availability. You will also learn how to deploy your VMs using templates
    by using **Azure Resource Manager** (**ARM**) templates, and how to automate your
    deployment using scale sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Windows and Linux VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring high availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and configuring scale sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying and deploying ARM templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter uses the following tools for our examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure PowerShell: [https://docs.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-1.8.0](https://docs.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-1.8.0)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code: [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code for this chapter can be downloaded from [https://github.com/PacktPublishing/Microsoft-Azure-Administrator-Exam-Guide-AZ-103/tree/master/Chapter07](https://github.com/PacktPublishing/Microsoft-Azure-Administrator-Exam-Guide-AZ-103/tree/master/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: VMs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can run both Windows VMs as well as Linux VMs in Azure. VMs come in all sorts
    of sizes and a variety of prices, ranging from VMs with a small amount of memory
    and processing power for general purposes to large VMs that can be used for **Graphics
    Processing Unit** (**GPU**)-intensive and high-performance computing workloads.
  prefs: []
  type: TYPE_NORMAL
- en: To create a VM, you can choose from a number of predefined images. There are images available
    for operating systems such as Windows Server or Linux, as well as predefined applications,
    such as SQL Server images and complete farms, which consist of multiple VMs that
    can be deployed at once. An example of a farm is a three-tier SharePoint farm.
  prefs: []
  type: TYPE_NORMAL
- en: VMs can be created and managed either from the Azure portal, PowerShell, or
    CLI, and they come in the following series and sizes.
  prefs: []
  type: TYPE_NORMAL
- en: VM series and sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of writing this book, the following VM series and sizes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Series** | **Type ** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| B, Dsv3, Dv3, DSv2, Dv2, Av2, DC | General purpose | These VMs have a balanced
    CPU-to-memory ratio and are ideal for testing and development scenarios. They
    are also suitable for small and medium databases, and web servers with low-to-medium traffic.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Fsv2, Fs, F | Compute optimized | These VMs have a high CPU-to-memory ratio and
    are suitable for web servers with medium traffic, application servers, and network
    appliances for nodes in batch processing. |'
  prefs: []
  type: TYPE_TB
- en: '| Esv3, Ev3, M, GS, G, DSv2, Dv2 | Memory optimized | These VMs have a high
    memory-to-CPU ratio and are suitable for relational database servers, medium-to-large caches,
    and in-memory analytics. |'
  prefs: []
  type: TYPE_TB
- en: '| Lsv2, Ls | Storage optimized | These VMs have high disk throughput and IO
    and are suitable for big data, SQL, and NoSQL databases. |'
  prefs: []
  type: TYPE_TB
- en: '| NV, NVv2, NC, NCv2, NCv3, ND, NDv2 (Preview) | GPU | These VMs are targeted
    for heavy graphic rendering and video editing, deep learning applications, and machine
    learning model training. These VMs are available with single or multiple GPUs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| H | High-performance compute | These are the fastest VMs available. They
    offer the most powerful CPU with optional high-throughput network interfaces (**R****emote
    Direct Memory Access** (**RDMA**)). |'
  prefs: []
  type: TYPE_TB
- en: 'VM series are updated constantly. New series, types, and sizes are added and
    removed frequently. To stay up to date with these changes, you can refer to the
    following site for Windows VM sizes: [https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes).
    For Linux VM sizes, you can refer to [https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes?toc=%2fazure%2fvirtualmachines%2flinux%2ftoc.json](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).'
  prefs: []
  type: TYPE_NORMAL
- en: Managed disks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure managed disks are the default disks selected when you create a VM in the
    Azure portal. They handle storage for your VMs completely. Previously, you would
    have had to manually create storage accounts to store VM hard disks, and when
    your VM needed to scale up, you had to add additional storage accounts to make
    sure you didn't exceed the limit of 20,000 **Input/Output Operations Per Second**
    (**IOPS**) per account.
  prefs: []
  type: TYPE_NORMAL
- en: With managed disks, this burden is now handled for you by Azure. You can now
    create 10,000 VM disks inside a subscription, which can result in thousands of
    VMs inside a subscription, without the need to copy disks between storage accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Availability sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a reliable infrastructure, adding your VMs to an availability set
    is key. There are several scenarios that can have an impact on the availability
    of your Azure VMs. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unplanned hardware maintenance event**: When hardware is about to fail, Azure fires
    an unplanned hardware maintenance event. Live migration technology is used, which
    predicts the failure and then moves the VM, the network connections, memory, and
    storage to different physical machines, without disconnecting the client. When
    your VM is moved, the performance is reduced for a short time because the VM is
    paused for 30 seconds. Network connections, memory, and open files are still preserved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unexpected downtime**: The VM is down when this event occurs because Azure
    needs to heal your VM inside the same data center. A hardware or physical infrastructure
    failure often causes this event to happen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Planned hardware maintenance event**: This type of event is a periodic update from
    Microsoft in Azure to improve the platform. Most of these updates don''t have
    a significant impact on the uptime of VMs, but some of them may require a reboot or
    restart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To provide redundancy during these types of events, you can group two or more
    VMs in an availability set. By leveraging availability sets, VMs are distributed
    across multiple isolated hardware nodes in a cluster. This way, Azure can ensure
    that during an event or failure, only a subset of your VMs is impacted and your
    overall solution will remain operational and available. This way, the 99.95% Azure
    **Service Level Agreement** (**SLA**) can still be met during outages and other
    failures.
  prefs: []
  type: TYPE_NORMAL
- en: VMs can only be assigned to an availability set during initial deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Fault domains and update domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you place your VMs in an availability set, Azure guarantees to spread them
    across fault and update domains. By default, Azure will assign three fault domains
    and five update domains (which can be increased to a maximum of 20) to the availability
    set.
  prefs: []
  type: TYPE_NORMAL
- en: 'When spreading your VMs over fault domains, your VMs sit over three different
    racks in the Azure Datacenter. So, in the case of an event or failure of the underlying
    platform, only one rack gets affected and the other VMs remain accessible as depicted
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9b3494f-cf22-4657-986f-cba1aeec22ef.png)'
  prefs: []
  type: TYPE_IMG
- en: VMs spread over three fault domains
  prefs: []
  type: TYPE_NORMAL
- en: 'Update domains are useful in the case of an OS or host update. When you spread
    your VMs across multiple update domains, one domain will be updated and rebooted
    while the others remain accessible as depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e91df8b7-c4c4-4f85-b78d-a005e98279df.png)'
  prefs: []
  type: TYPE_IMG
- en: VMs spread over five update domains and three fault domains
  prefs: []
  type: TYPE_NORMAL
- en: In the next demonstration, we are going to create a new Windows VM in the Azure
    portal.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Windows and Linux VMs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the upcoming demonstrations, we are going to deploy a Windows Server VM from
    both the Azure portal and PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Linux machines is quite similar to deploying Windows machines. We
    are not going to cover how to deploy Linux machines. For more information about
    how to deploy Linux machines in Azure, you can refer to the *Further reading* section
    at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Windows VM from the Azure portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this demonstration, we are going to deploy a Windows VM from the Azure portal.
    We are going to set up networking and storage, and select a VM size for this VM.
    We are also going to configure high availability for this VM, by placing it in
    an *availability set*. To do so, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure portal by opening [https://portal.azure.com](https://portal.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the left menu, click Virtual machines, and then, in the top menu, click +
    Add as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4902b806-2c0a-4e80-bfd9-77b2c9bbc0d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new VM
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to create a Windows VM, so in the Basics blade, add the following
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Subscription**: Choose a subscription.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource group**: `PacktVMGroup`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual machine name**: `PacktWindowsVM`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Region**: Choose a region.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability options**: Here, select **Availability set**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability set**: Create new, and call it `PacktWindowsAS`. Keep the default
    fault domains and update the domains for this VM.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image**: Windows Server Datacenter 2016.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size**: Here, you can choose between the different sizes. Click Change size,
    and select Standard DS1 v2.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Administrator account**: Provide a username and a password.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inbound port rules**: Select **Allow selected ports** and enable **Remote
    Desktop**** Protocol** (**RDP**)**.** You will need this to log in to the server
    after creation.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save money**: If you already have a valid Windows Server Datacenter license,
    you get a discount on this VM.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click **Next: Disks**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, you can select the disk type. Keep the default as follows, which is Premium
    SSD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/029e2366-cd9e-49eb-b197-5df6ddcfda7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Select disk type
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Next: Networking**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Networking blade, you can configure the virtual network. You can keep
    the default values for this machine as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e610ae0d-6521-44c2-989d-490e95404f31.png)'
  prefs: []
  type: TYPE_IMG
- en: Set networking for VM
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Next: Management**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Management blade, you can configure monitoring, and create and select
    a storage account for monitoring. You can also assign a system-assigned managed
    identity, which can be used to authenticate to various Azure resources, such as
    Azure Key Vault, without storing any credentials in code. You can also enable
    auto shutdown in here as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93e1efd4-147b-42c0-a193-1bd21d7f24f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Set management features
  prefs: []
  type: TYPE_NORMAL
- en: We can now create the VM. Click **Review + create** and the settings will be
    validated. After that, click **Create** to actually deploy the VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The steps for deploying Linux VMs are similar to creating Windows VMs, so we
    are going to skip this in this demonstration. For more information on how to deploy
    Linux VMs from the Azure portal, you can refer to, [https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal).
  prefs: []
  type: TYPE_NORMAL
- en: We have now deployed a Windows VM, placed it in an Availability Set, and looked
    at the networking, storage, and monitoring features, and capabilities for this
    VM. In the next section, we are going to deploy a Windows Server VM from PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Windows VM from PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next demonstration, we are going to create two Windows Server VMs from
    PowerShell and place them in an Availability Set. To do so you have to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to log in to the Azure account as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If necessary, select the right subscription as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a resource group for the Availability Set as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can create an availability set for the VMs as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to set the administrator credentials for the VMs as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create the two VMs inside the Availability Set as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the last two demonstrations, we created VMs inside an Availability Set from
    the Azure portal and PowerShell. In the next section, we are going to cover scale
    sets.
  prefs: []
  type: TYPE_NORMAL
- en: VM scale sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VM scale sets are used for deploying multiple VMs at once without the need for
    manual actions or using scripts. You can then manage them all at once from a single
    place. VM scale sets are typically used to build large-scale infrastructures,
    where keeping all of your VMs in sync is key. The maintenance of VMs, including
    keeping them in sync, is handled by Azure. VM scale sets use Availability Sets
    under the hood. VMs inside a scale set are automatically spread over the fault
    and update domains by the underlying platform. VM scale sets use Azure Autoscale
    by default. You can, however, add or remove instances yourself instead of using
    Autoscale.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a scale set, a couple of artefacts are created for you automatically.
    As well as the number of VMs you have specified are added to the set, an Azure
    Load Balancer and Azure Autoscale are added, along with a virtual network and
    a public IP address, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41dc19f5-9f21-45dd-b62c-d053b44c3112.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure VM scale set
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to deploy and configure scale sets.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and configuring scale sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a VM scale set from the Azure portal, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure portal by opening [https://portal.azure.com](https://portal.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create a resource and type in `Scale Set` in the search bar. Select
    **Virtual machine scale se**t.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the next screen, click on Create and add the following settings for creating
    the scale set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Virtual machine scale set name**: `PacktScaleSet`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating system disk image**: Windows Server 2016 Datacenter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription**: Select a subscription'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource group**: `PacktVMGroup`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: East US'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability zone**: None'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Username**: `SCPacktUser`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: Fill in a password'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instance count**: `2`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instance size**: Standard DS1 v2'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use managed disks**: Yes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable scaling beyond 100 instances**: No:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/90ad840b-6871-4002-a0f7-5a986c20eeaf.png)'
  prefs: []
  type: TYPE_IMG
- en: Scale set
  prefs: []
  type: TYPE_NORMAL
- en: 'If you scroll down, you can configure the autoscale settings, you can choose
    between the different load balancing settings, and you can configure networking
    and monitoring capabilities as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d0a868e-c416-4856-99b1-a97628064058.png)'
  prefs: []
  type: TYPE_IMG
- en: Scale set configuration settings
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create**. The scale set with the number of provided VMs in it is now
    deployed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next and last sections of this chapter, we are going to cover how to
    automate the deployment of VMs using ARM templates.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying and deploying ARM templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ARM templates define the infrastructure and configuration of your Azure solution.
    Azure is managed by an API, which is called the Resource Manager or ARM API. You
    can use this API to deploy infrastructure as code and configure your Azure environment.
    This API can be called from various tooling and resources; you can do it using
    the Azure portal, PowerShell, CLI, by calling the API directly, and by creating
    ARM templates.
  prefs: []
  type: TYPE_NORMAL
- en: You can create an ARM template in JSON format and use this to repeatedly deploy
    your solution across your Azure environment in a consistent state. The template
    is processed by Resource Manager like any other request, and it will parse the
    template and convert the syntax into REST API operations for the appropriate resource
    providers. The REST API uses the resources section inside the template to call
    the resource-specific APIs. An example of a resource provider is `Microsoft.Storage/storageAccounts`.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft offers various predefined ARM templates that can be downloaded and
    deployed. You can download the quick start templates from GitHub, and deploy them
    directly from GitHub, or download them and make the necessary adjustments: [https://github.com/Azure/azure-quickstart-templates](https://github.com/Azure/azure-quickstart-templates).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to modify an ARM template in the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying an ARM template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the demonstration, we are going to create an ARM template of a storage account
    it in the Azure portal. We are going to modify this template, so that it will
    generate a storage account name automatically. We will then deploy this template
    again and use it to create a new storage account from the Azure portal. Therefore,
    you have to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure portal by opening [https://portal.azure.com](https://portal.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left menu, select + **Create a resource**, then **Storage** and then
    **Storage account**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Subscription**: Pick a subscription'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource group**: Create a new one and call it `PacktARMResourceGroup`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage account name**: `packtarm`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: (US) East US'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: Standard'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account kind**: StorageV2 (general purpose v2)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Replication**: Read-access geo-redundant storage (RA-GRS)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access tier****:** Hot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1d206643-8489-4d9c-b0b4-f2984d192f76.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new storage account
  prefs: []
  type: TYPE_NORMAL
- en: Click **Review + create**. Do not select **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the next step, but select Download a template for automation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/719a4de5-c47c-4a13-89c9-934689f6d2cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Download template for automation
  prefs: []
  type: TYPE_NORMAL
- en: 'The editor will be opened and the generated template will be displayed. The
    main pane shows the template. It has six top-level elements: `schema`, `contentVersion`, `parameters`, `variables`, `resources`,
    and `output`. There are also six parameters. The `storageAccountName` is highlighted
    in the following screenshot. In the template, one Azure resource is defined. The
    type is `Microsoft.Storage/storageAccounts`. Select **Download** from the top
    menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bd350a22-e162-4765-a1d7-543e6e1314cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Main ARM template
  prefs: []
  type: TYPE_NORMAL
- en: Open the downloaded ZIP file, and then save `template.json` to your computer.
    In the next section, you use a template deployment tool to edit the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Parameters** in the top menu, and look at the values. We will need
    this later during the deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37ea20fd-a538-417b-9f1b-529f0a3862e9.png)'
  prefs: []
  type: TYPE_IMG
- en: ARM template parameters
  prefs: []
  type: TYPE_NORMAL
- en: The Azure portal can be used for basic editing of ARM templates. More complex
    ARM templates can be edited using Visual Studio Code, for instance. We are going
    to use the Azure portal for this demonstration. Therefore, select **+ Create a
    resource**, then in the search box type `Template Deployment`. Then select **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the next blade, you have different options for loading templates. For this
    demonstration, select **Build your own template in the editor**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f5665cd-6324-4f59-a328-8a85657983b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Template options
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Load file**, and then follow the instructions to load the `template.json`
    that we have downloaded in the last section. Make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `storageAccountName` parameter.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new variable:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `"name": "[parameters(''storageAccountName'')]"`, with `"name": "[variables(''storageAccountName'')]"`:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27437052-e8c4-4e32-a3cd-4112961c803f.png)'
  prefs: []
  type: TYPE_IMG
- en: Make changes to the highlighted sections
  prefs: []
  type: TYPE_NORMAL
- en: 'The code of the template will look as follows:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `schema` and `parameters` sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And the `variable` and `resources` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then select **Save.**
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the next screen, fill in the values for creating the storage account. You
    will see that the parameter for filling in the storage account name is removed.
    This will be generated automatically. Fill in the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Resource group**: Select the resource group name you created in the previous
    section.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: Central US'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account type**: Standard_LRS'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kind**: StorageV2'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access Tier:** Hot'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Https Traffic Only Enabled**: true'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**I agree to the terms and conditions stated above**: Select this option:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e53cbef3-a6cd-4f40-bb76-3a50b35a95f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Fill in values
  prefs: []
  type: TYPE_NORMAL
- en: Select **Purchase**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The ARM template will now be deployed. After deployment, go to the Overview
    blade of the resource group. You will see that the storage account name is automatically
    generated for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6913afbc-83f7-4e9e-9ec8-09ee52ca0da3.png)'
  prefs: []
  type: TYPE_IMG
- en: Storage account name
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the syntax and structure of ARM templates, you can
    refer to the following website: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-authoring-templates](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-authoring-templates).
  prefs: []
  type: TYPE_NORMAL
- en: We have now modified an ARM template in the Azure portal and created a new storage
    account using the modified ARM templates. In the next demonstration, we are going
    to save a deployment as an ARM template.
  prefs: []
  type: TYPE_NORMAL
- en: Save a deployment as an ARM template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this demonstration, we are going to save a deployment as an ARM template from
    the Azure portal. We are going to export the template of the two VMs that we created
    in an Availability Set using PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded, you can then make changes to it, and redeploy it in Azure
    using PowerShell or code. The generated ARM template consists of a large amount
    of code, which makes it very difficult to make changes to it. For saving a deployment
    as an ARM template, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure portal by opening [https://portal.azure.com](https://portal.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the resource group that we created in the previous demonstration and under Settings,
    select the Export template as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca711df4-48f3-4651-bd3a-431d18f90f2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Export template
  prefs: []
  type: TYPE_NORMAL
- en: 'The template is generated for you based on the settings that we made during
    the creation of the different resources. You can download the template and redeploy
    it from here. You can also download the scripts for CLI, PowerShell, .NET, and
    Ruby, and create the different resources using these programming languages. Select **Download**
    from the top menu as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3505ba7f-8dd3-4191-82a3-a60d06f1091e.png)'
  prefs: []
  type: TYPE_IMG
- en: Download template
  prefs: []
  type: TYPE_NORMAL
- en: The template is downloaded as a ZIP file to your local filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: You can now extract the template files from the ZIP file and open them in Visual
    Studio Code. If you don't have this installed, you can use the download link provided
    at the beginning of this chapter or use Notepad, or some other text editing tool.
    The ZIP file contains three different deployment files, created in different languages.
    There is one each for PowerShell, CLI, and Ruby. It also consists of a `DeploymentHelper.cs`
    file, a `parameters.json` file, and a `template.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, you can make all the modifications to the parameters
    and template file that are needed. If you then want to deploy the template again
    to Azure, use one of the deployment files inside the container. In the case of
    PowerShell, right-click on `deploy.ps1` and select **Run with PowerShell**. Fill
    in the subscription ID, provide the resource group name and deployment name, and
    log in using your Azure credentials. This will start the deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating ARM templates can be part of the exam questions, so I strongly advise
    you to take the time to familiarize yourself with the syntax and the code blocks
    that are part of the templates.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the first part of the *Deploying and Managing Virtual
    Machines* objective by covering how to create and configure VMs for Windows and
    Linux. You learned about the various aspects and parts that are created when you
    deploy a VM in Azure. We also covered how to automate the deployment of VMs using
    scale sets and ARM templates.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue with the second part of the *Deploying
    and Managing Virtual Machines* objective by covering how to manage Azure VMs and
    VM backups.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of the information in
    this chapter. You can find the answers in the *Assessments* section at the end
    of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Can you use VM scale sets to automate the deployment of multiple VMs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you use availability sets for spreading VMs across update and fault domains?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have to define resource providers in your ARM templates to deploy the
    various resources in Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following links for more information about the topics
    that were covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Linux Virtual Machines*: [https://docs.microsoft.com/en-us/azure/virtual-machines/linux/](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quickstart: Create a Linux virtual machine in the Azure portal*: [https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Virtual Machine Scale Sets Documentation*: [https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Manage the availability of Windows virtual machines in Azure*: [https://docs.microsoft.com/en-us/azure/virtual-machines/windows/manage-availability](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/manage-availability)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Resource Manager overview*: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-overview](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understand the structure and syntax of Azure Resource Manager templates*: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-authoring-templates](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-authoring-templates)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quickstart: Create and deploy Azure Resource Manager templates by using the
    Azure portal*: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-quickstart-create-templates-use-the-portal?toc=%2Fazure%2Ftemplates%2Ftoc.json&bc=%2Fazure%2Ftemplates%2Fbreadcrumb%2Ftoc.json](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-quickstart-create-templates-use-the-portal?toc=%2Fazure%2Ftemplates%2Ftoc.json&bc=%2Fazure%2Ftemplates%2Fbreadcrumb%2Ftoc.json)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Deploy resources with Resource Manager templates and Azure PowerShell*: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-deploy](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-deploy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Quickstart Templates*: [https://azure.microsoft.com/en-us/resources/templates/](https://azure.microsoft.com/en-us/resources/templates/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Define resources in Azure Resource Manager templates*: [https://docs.microsoft.com/en-us/azure/templates/](https://docs.microsoft.com/en-us/azure/templates/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
