["```\nusing System.Text;\nusing System.Threading.Tasks;\nusing Microsoft.Azure.ServiceBus;\n\nnamespace HandsOnAzure.ServiceBus\n{\n    internal class Program\n    {\n        private static void Main()\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            var client = new QueueClient(\"<connection-string>\", \"<queue-name>\");\n            var message = \"This is my message!\";\n\n            await client.SendAsync(new Message(Encoding.UTF8.GetBytes(message)));\n        }\n    }\n}\n```", "```\nvar client = new TopicClient(\"<connection-string>\", \"<topic-name>\");\n```", "```\nusing System;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Microsoft.Azure.ServiceBus.Core;\n\nnamespace HandsOnAzure.ServiceBus.Reader\n{\n    internal class Program\n    {\n        private static void Main()\n        {\n            MainAsync().GetAwaiter().GetResult();\n\n            Console.ReadLine();\n        }\n\n        private static async Task MainAsync()\n        {\n            var receiver =\n                new MessageReceiver(\n                    \"<connection-string>\",\n                    \"<queue-name>\");\n\n            while (true)\n            {\n                var message = await receiver.PeekAsync();\n                if(message == null) continue;\n\n                Console.WriteLine($\"New message: [{message.ScheduledEnqueueTimeUtc}] {Encoding.UTF8.GetString(message.Body)}\");\n                await Task.Delay(100);\n            }\n        }\n    }\n}\n```", "```\nvar message = await receiver.ReceiveAsync();\n```", "```\nvar tokenProvider = TokenProvider.CreateManagedServiceIdentityTokenProvider();\nvar sendClient = new QueueClient($\"sb://{namespace}.servicebus.windows.net/\", {queue-name}, tokenProvider);\nawait sendClient.SendAsync(new Message(Encoding.UTF8.GetBytes(messageInfo.MessageToSend)));\nawait sendClient.CloseAsync();\n```", "```\nawait receiver.DeadLetterAsync(\"<lock-token>\", \"<reason>\");\n```", "```\nwhile (true)\n{\n  var message = await receiver.ReceiveAsync();\n  if(message == null) continue;\n\n  Console.WriteLine($\"New message: [{message.ScheduledEnqueueTimeUtc}] {Encoding.UTF8.GetString(message.Body)}\");\n\n  await receiver.DeadLetterAsync(message.SystemProperties.LockToken, \"HandsOnAzure - test\");\n  await Task.Delay(100);\n}\n```", "```\nvar deadLetterQueueName = EntityNameHelper.FormatDeadLetterPath(\"<entity-path>\");\n```", "```\nvar client = new ServiceBusManagementClient(creds) { SubscriptionId = subscriptionId };\n\nvar namespace2 = \n  await client.Namespaces.CreateOrUpdateAsync(\n  \"<resource-group-name>\", \n  \"<secondary-namespace>\", \n  new SBNamespace { ... params ... });\n\nArmDisasterRecovery drStatus = \n  await client.DisasterRecoveryConfigs.CreateOrUpdateAsync(\n            \"<resource-group-name>\",\n      \"<primary-namespace>\",\n      \"<alias>\",\n      new ArmDisasterRecovery { PartnerNamespace = namespace2.Id })\n```", "```\nclient.DisasterRecoveryConfigs.FailOver(\"<resource-group-name>\", \"<secondary-namespace>\", \"<alias>\");\n```", "```\nawait client.SendAsync(new Message(Encoding.UTF8.GetBytes(message)) { SessionId = Guid.Empty.ToString()});\n```", "```\nvar client = new QueueClient(\"<connection-string>\", \"<queue-name>\");\nclient.RegisterSessionHandler((session, message, ct) => Task.FromResult(new SessionHandler()), args => Task.CompletedTask);\n```", "```\nvar message = receiver.Receive();\nusing (scope = new TransactionScope())\n{\n   var newMessage = // transfer\n\n   sender.Send(newMessage);\n   message.Complete();\n\n   scope.Complete();\n}\n```", "```\nvar subscription = new SubscriptionDescription(sourceTopic, subscriptionName);\nsubscription.ForwardTo = destinationTopic;\nnamespaceManager.CreateSubscription(subscription);\n```", "```\nprivate async Task SendMessage(BrokeredMessage message1, int maxSendRetries = 10)\n{\n  do\n  {\n    var message2 = message1.Clone();\n    try\n    {\n      await _activeQueueClient.SendAsync(message1);\n      return;\n    }\n    catch\n    {\n      if (--maxSendRetries <= 0)\n      {\n        throw;\n      }\n\n      lock (_swapMutex)\n      {\n        var client = _activeQueueClient;\n        _activeQueueClient = _backupQueueClient;\n        _backupQueueClient = client;\n      }\n\n      message1 = message2.Clone();\n    }\n  }\n  while (true);\n}\n```", "```\nvar task1 = primaryQueueClient.SendAsync(m1);\nvar task2 = secondaryQueueClient.SendAsync(m2);\n\ntry\n{\n  await task1;\n}\ncatch (Exception e)\n{\n  exceptionCount++;\n}\n\ntry\n{\n  await task2;\n}\ncatch (Exception e)\n{\n  exceptionCount++;\n}\n\nif (exceptionCount > 1)\n{\n  throw new Exception(\"Send Failure\");\n}\n```", "```\nvar ns = NamespaceManager.CreateFromConnectionString(myConnectionString);\nvar td = new TopicDescription(TopicName);\ntd.EnablePartitioning = true;\nns.CreateTopic(td);\n```"]