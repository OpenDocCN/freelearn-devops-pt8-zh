- en: Chapter 2. Installing and Running LXC on Linux Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LXC takes advantage of the kernel namespaces and cgroups to create process isolation
    we call containers, as we saw in the previous chapter. As such, LXC is not a separate
    software component in the Linux kernel, but rather a set of userspace tools, the
    `liblxc` library, and various language bindings.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing LXC on Ubuntu and CentOS using distribution packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling and installing LXC from source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and starting containers using the provided templates and configuration
    files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually building the root filesystem and configuration files using tools such
    as `debootstrap` and `yum`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing LXC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of writing this book, there are two long-term support versions
    of LXC: 1.0 and 2.0\. The userspace tools that they provide have some minor differences
    in command-line flags and deprecations, which I''ll be pointing out as we use
    them.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing LXC on Ubuntu with apt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by installing LXC 1.0 on Ubuntu 14.04.5 (Trusty Tahr):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the main LXC package, tooling, and dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The package version that Trusty Tahr provides at this time is 1.0.8:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install LXC 2.0, we''ll need the Backports repository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two lines in the `apt` sources file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Resynchronize the package index files from their sources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the main LXC package, tooling, and dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure the package versions are on the 2.x branch, in this case 2.0.3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing LXC on Ubuntu from source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the latest version of LXC, you can download the source code from the
    upstream GitHub repository and compile it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s install `git` and clone the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s install the build tools and various dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, generate the `configure` shell script, which will attempt to guess correct
    values for different system-dependent variables used during compilation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `configure` script provides options that can be enabled or disabled based
    on what features you would like to be compiled. To learn what options are available
    and for a short description of each, run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Its time now to run `configure`. In this example, I''ll enable Linux capabilities
    and `cgmanager`, which will manage the cgroups for each container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the preceding abbreviated output we can see what options are going to be
    available after compilation. Notice that we are not enabling any of the security
    features for now, such as `Apparmor`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, compile with `make`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, install the binaries, libraries, and templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As of this writing, the LXC binaries look for their libraries in a different
    path than where they were installed. To fix this just copy them to the correct
    location:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check the version that was compiled and installed, execute the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing LXC on CentOS with yum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CentOS 7 currently provides LXC version 1.0.8 in their upstream repositories.
    The following instructions should work on RHEL 7 and CentOS 7:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the main package and distribution templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the installed package versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing LXC on CentOS from source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the latest version of LXC, we need to download it from GitHub and
    compile it, similar to what we did on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the build utilities, `git`, and various dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, clone the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate the config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Prepare the software for compilation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and install the binaries, libraries, and distribution templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the libraries to where the binaries are expecting them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, to check the version that was compiled and installed, execute the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'CentOS 7 ships with `systemd` as its init system. To start the LXC service,
    run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To ensure LXC was configured correctly during installation, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: LXC directory installation layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table shows the directory layout of LXC that is created after
    package and source installation. The directories vary depending on the distribution
    and installation method:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Ubuntu package** | **CentOS package** | **Source installation** | **Description**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/usr/share/lxc` | `/usr/share/` `lxc` | `/usr/local/share/` `lxc` | LXC
    base directory |'
  prefs: []
  type: TYPE_TB
- en: '| `/usr/share/lxc/` `config` | `/usr/share/lxc/` `config` | `/usr/local/share/lxc/`
    `config` | Collection of distribution-based LXC configuration files |'
  prefs: []
  type: TYPE_TB
- en: '| `/usr/share/lxc/` `templates` | `/usr/share/lxc/` `templates` | `/usr/local/share/lxc/`
    `template`s | Collection of container template scripts |'
  prefs: []
  type: TYPE_TB
- en: '| `/usr/bin` | `/usr/bin` | `/usr/local/bin` | Location for most LXC binaries
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/usr/lib/x86_64-linux-gnu` | `/usr/lib64` | `/usr/local/lib` | Location
    of `liblxc` libraries |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/lxc` | `/etc/lxc` | `/usr/local/etc/` `lxc` | Location of default LXC
    config files |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/lib/` `lxc/` | `/var/lib/` `lxc/` | `/usr/local/var/` `lib/lxc/` |
    Location of the root filesystem and config for created containers |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/lxc` | `/var/log/lxc` | `/usr/local/var/` `log/lxc` | LXC log files
    |'
  prefs: []
  type: TYPE_TB
- en: We will explore most of the directories while building, starting, and terminating
    LXC containers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can change the default installation path when building LXC from source by
    passing arguments to the configuration script such as `configure --prefix`.
  prefs: []
  type: TYPE_NORMAL
- en: Building and manipulating LXC containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Managing the container life cycle with the provided userspace tools is quite
    convenient compared to manually creating namespaces and applying resource limits
    with cgroups. In essence, this is exactly what the LXC tools do: creation and
    manipulation of the namespaces and cgroups we saw in [Chapter 1](ch02.html "Chapter 2. Installing
    and Running LXC on Linux Systems"), *Introduction to Linux Containers*. The LXC
    tooling implements functions defined in the `liblxc` API, as we''ll see in [Chapter
    4](ch04.html "Chapter 4. LXC Code Integration with Python"), *LXC Code Integration
    with Python*.'
  prefs: []
  type: TYPE_NORMAL
- en: LXC comes packaged with various templates for building root filesystems for
    different Linux distributions. We can use them to create a variety of container
    flavors. For example, running a Debian container on a CentOS host. We also have
    the option of building our own root filesystem with tools such as `debootstrap`
    and `yum`, which we will explore shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Building our first container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create our first container using a template. The `lxc-download` file,
    like the rest of the templates in the `templates` directory, is a script written
    in bash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If you examine the scripts closely, you'll notice that most of them create the
    `chroot` environments, where packages and various configuration files are then
    installed to create the root filesystem for the selected distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by building a container using the `lxc-download` template, which
    will ask for the distribution, release, and architecture, then use the appropriate
    template to create the filesystem and configuration for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s list all containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on the version of LXC, some of the command options might be different.
    Read the manual page for each of the tools if you encounter errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our container is currently not running; let''s start it in the background and
    increase the log level to `DEBUG`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On some distributions, LXC does not create the host bridge when building the
    first container, which results in an error. If this happens, you can create it
    by running the `brctl addbr virbr0` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to list all containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To obtain more information about the container run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The new container is now connected to the host bridge `lxcbr0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the download template and not specifying any network settings, the container
    obtains its IP address from a `dnsmasq` server that runs on a private network,
    `10.0.3.0/24` in this case. The host allows the container to connect to the rest
    of the network and the Internet using NAT rules in `iptables`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Other containers connected to the bridge will have access to each other and
    to the host, as long as they are all connected to the same bridge and are not
    tagged with different VLAN IDs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what the process tree looks like after starting the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Notice the new `init` child process that was cloned from the lxc-start command.
    This is PID `1` in the actual container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s run `attach` with the container, list all processes, and network
    interfaces, and check connectivity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On some distributions such as CentOS, or if installed from source, the `dnsmasq`
    server is not configured and started by default. You can either install it and
    configure it manually, or configure the container with an IP address and a default
    gateway instead, as I'll demonstrate later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the hostname changed on the terminal once we attached to the container.
    This is an example of how LXC uses the UTS namespaces, as we saw in [Chapter 1](ch01.html
    "Chapter 1. Introduction to Linux Containers"), *Introduction to Linux Containers*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the directory that was created after building the `c1` container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `rootfs` directory looks like a regular Linux filesystem. You can manipulate
    the container directly by making changes to the files there, or using `chroot`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, let''s change the root password of the `c1` container
    not by attaching to it, but by *chrooting* to its `rootfs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the path changed on the console when we used `chroot` and after exiting
    the jailed environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the root password, let''s install **Secure Shell** (**SSH**) server
    in the container by first attaching to it and then using `ssh` to connect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We were able to `ssh` to the container and use the root password that was manually
    set earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Making custom containers with debootstrap on Ubuntu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the provided distribution template scripts and config files is the fastest
    way to provision LXC. However, having full control of how the root filesystem
    is laid out - what packages, block devices, and network settings should be present
    - requires a more manual approach.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we can use the `debootstrap` utility to create the `rootfs` of the
    container, and then manually create the config file that will describe the properties
    of the containers. This works on Ubuntu and RHEL/CentOS distributions and it provides
    a way to run Debian and Ubuntu containers on both RHEL/CentOS and Debian/Ubuntu
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by installing `debootstrap`, if not already installed. On Ubuntu,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, on CentOS, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a filesystem for the stable Debian release, we can provide the following
    arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We specified the architecture, what packages to be installed, the release of
    the OS, and the location where the `rootfs` will be created, in this example,
    in `~/container`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll need a `config` file for the container. There are many available
    options for specifying various LXC attributes. Let''s start with a somewhat simple
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding configuration was tested on LXC 2.0 and might be incompatible
    with versions on the 1.0 branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table provides a brief summary of the most important options
    we are using:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.devttydir` | The console devices location in `/dev/` |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.tty` | The number of TTY to make available to the container |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.cgroup.devices.allow` | The list of devices to allow in the container
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.mount` | The devices to be mounted |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.arch` | The architecture of the container |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.rootfs` | The location of the root filesystem |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.rootfs.backend` | The type of the backend store |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.utsname` | The hostname of the container |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.network.type` | The type of network virtualization |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.network.link` | The name of the host bridge the container will connect
    to |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.network.flags` | To bring the network interface up |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.network.hwaddr` | The MAC address of the network interface |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.network.ipv4` | The IP address of the network interface if not using
    DHCP |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.network.ipv4.gateway` | The default gateway inside the container |'
  prefs: []
  type: TYPE_TB
- en: '| `lxc.cgroup` | Set cgroup parameters, such as `memory`, `cpu`, and `blkio`
    |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about all of the available configuration options refer
    to the `lxc.container.conf` man page.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the configuration set, let''s create the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we did not specify the template this time and provided the `rootfs`
    that was created previously with `debootstrap`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start the container by setting the log to `DEBUG` and redirect it to
    a file in case we need to troubleshoot errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'To test, let''s run `attach` with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Making custom containers with yum on CentOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On CentOS 7, we can use the `debootstrap` utility to create Debian-based and
    Ubuntu-based root filesystems and build containers in the same way as described
    in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, to build RHEL, Fedora, or CentOS containers, we''ll need to use tools
    such as `rpm`, `yumdownloader`, and `yum`. Let''s look at a slightly more complicated
    example that builds a CentOS `rootfs` that the new container will use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create the directory that will contain the root filesystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After making the `container` directory, we need to create and initialize the
    `rpm` package database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the database is initialized, we can download the release files for
    the CentOS distribution. If you''d rather build a Fedora container, you can replace
    the `centos-release` with `fedora-release` on the command line. The release files
    contain the `yum` repositories and other important files that `yum` and `rpm`
    use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, install the release files from the `rpm` package in the `root` directory
    of the `container:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the preceding output, we can see that the `container` filesystem is starting
    to shape up. It currently contains all the necessary files to use the package
    manager and install the rest of the system files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, it''s time to install a minimal CentOS distribution in `rootfs`; this
    is similar to what `debootstrap` does for Debian and Ubuntu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now the `~/container` directory contains the complete root filesystem for CentOS
    7 distribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you'd like to install more packages or make changes before the container
    is built, you can `chroot` to `~/containers` and perform the work as usual.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, make the bridge, if it does not already exist, and write the container
    configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With `rootfs` and `config` in place, let''s create and start the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run `attach` with it, as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LXC provides a toolset that makes it quite easy and convenient to build, start,
    and manipulate containers. Using the included templates and configuration files
    further simplifies this process. In this chapter, we saw practical examples on
    how to install, configure, and start LXC on Ubuntu and CentOS distributions. You
    learned how to create container root filesystems and how to write simple configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll have a look at how to configure system resources
    in LXC and explore alternative ways of working with LXC, by utilizing the `libvrit`
    toolkit and libraries.
  prefs: []
  type: TYPE_NORMAL
