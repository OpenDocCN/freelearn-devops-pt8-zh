- en: Chapter 2. Installing and Running LXC on Linux Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：在Linux系统上安装和运行LXC
- en: LXC takes advantage of the kernel namespaces and cgroups to create process isolation
    we call containers, as we saw in the previous chapter. As such, LXC is not a separate
    software component in the Linux kernel, but rather a set of userspace tools, the
    `liblxc` library, and various language bindings.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: LXC利用内核命名空间和cgroups创建我们称之为容器的进程隔离，正如我们在前一章中看到的那样。因此，LXC不是Linux内核中的一个独立软件组件，而是一组用户空间工具、`liblxc`库和各种语言绑定。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Installing LXC on Ubuntu and CentOS using distribution packages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用发行版包在Ubuntu和CentOS上安装LXC
- en: Compiling and installing LXC from source code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码编译和安装LXC
- en: Building and starting containers using the provided templates and configuration
    files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用提供的模板和配置文件构建和启动容器
- en: Manually building the root filesystem and configuration files using tools such
    as `debootstrap` and `yum`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`debootstrap`和`yum`等工具手动构建根文件系统和配置文件
- en: Installing LXC
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装LXC
- en: 'At the time of writing this book, there are two long-term support versions
    of LXC: 1.0 and 2.0\. The userspace tools that they provide have some minor differences
    in command-line flags and deprecations, which I''ll be pointing out as we use
    them.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在写本书时，LXC有两个长期支持版本：1.0和2.0。它们提供的用户空间工具在命令行标志和弃用功能上有一些小差异，我会在使用时指出这些差异。
- en: Installing LXC on Ubuntu with apt
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用apt在Ubuntu上安装LXC
- en: 'Let''s start by installing LXC 1.0 on Ubuntu 14.04.5 (Trusty Tahr):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先在Ubuntu 14.04.5（Trusty Tahr）上安装LXC 1.0：
- en: 'Install the main LXC package, tooling, and dependencies:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装主要的LXC包、工具和依赖项：
- en: '[PRE0]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The package version that Trusty Tahr provides at this time is 1.0.8:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Trusty Tahr当前提供的包版本是1.0.8：
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To install LXC 2.0, we''ll need the Backports repository:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装LXC 2.0，我们需要使用Backports仓库：
- en: 'Add the following two lines in the `apt` sources file:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`apt`源文件中添加以下两行：
- en: '[PRE2]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Resynchronize the package index files from their sources:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源站点重新同步软件包索引文件：
- en: '[PRE3]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Install the main LXC package, tooling, and dependencies:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装主要的LXC包、工具和依赖项：
- en: '[PRE4]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Ensure the package versions are on the 2.x branch, in this case 2.0.3:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保软件包版本在2.x分支上，本例中为2.0.3：
- en: '[PRE5]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing LXC on Ubuntu from source
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码在Ubuntu上安装LXC
- en: 'To use the latest version of LXC, you can download the source code from the
    upstream GitHub repository and compile it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用最新版的LXC，您可以从上游的GitHub仓库下载源代码并进行编译：
- en: 'First, let''s install `git` and clone the repository:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，安装`git`并克隆仓库：
- en: '[PRE6]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, let''s install the build tools and various dependencies:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们安装构建工具和各种依赖项：
- en: '[PRE7]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, generate the `configure` shell script, which will attempt to guess correct
    values for different system-dependent variables used during compilation:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，生成`configure`脚本，该脚本将尝试为编译过程中使用的不同系统相关变量猜测正确的值：
- en: '[PRE8]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `configure` script provides options that can be enabled or disabled based
    on what features you would like to be compiled. To learn what options are available
    and for a short description of each, run the following:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`configure`脚本提供了可以启用或禁用的选项，具体取决于您希望编译哪些功能。要了解可用的选项，并查看每个选项的简短描述，请运行以下命令：'
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Its time now to run `configure`. In this example, I''ll enable Linux capabilities
    and `cgmanager`, which will manage the cgroups for each container:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是运行`configure`的时间了。在这个例子中，我将启用Linux能力和`cgmanager`，它将管理每个容器的cgroup：
- en: '[PRE10]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: From the preceding abbreviated output we can see what options are going to be
    available after compilation. Notice that we are not enabling any of the security
    features for now, such as `Apparmor`.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的简短输出中，我们可以看到编译后将会有哪些选项可用。请注意，我们现在没有启用任何安全功能，比如`Apparmor`。
- en: 'Next, compile with `make`:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`make`进行编译：
- en: '[PRE11]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, install the binaries, libraries, and templates:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，安装二进制文件、库和模板：
- en: '[PRE12]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As of this writing, the LXC binaries look for their libraries in a different
    path than where they were installed. To fix this just copy them to the correct
    location:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至本文写作时，LXC的二进制文件将其库文件搜索路径与安装路径不同。要修复此问题，只需将其复制到正确的位置：
- en: '[PRE13]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To check the version that was compiled and installed, execute the following
    code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查已编译并安装的版本，请执行以下代码：
- en: '[PRE14]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Installing LXC on CentOS with yum
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用yum在CentOS上安装LXC
- en: 'CentOS 7 currently provides LXC version 1.0.8 in their upstream repositories.
    The following instructions should work on RHEL 7 and CentOS 7:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CentOS 7当前在其上游仓库中提供LXC 1.0.8版本。以下说明应该适用于RHEL 7和CentOS 7：
- en: 'Install the main package and distribution templates:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装主包和发行版模板：
- en: '[PRE15]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Check the installed package versions:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查已安装的包版本：
- en: '[PRE16]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Installing LXC on CentOS from source
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码在 CentOS 上安装 LXC
- en: 'To install the latest version of LXC, we need to download it from GitHub and
    compile it, similar to what we did on Ubuntu:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装最新版本的 LXC，我们需要从 GitHub 下载并编译它，类似于我们在 Ubuntu 上所做的：
- en: 'Install the build utilities, `git`, and various dependencies:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装构建工具、`git` 和各种依赖项：
- en: '[PRE17]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, clone the repository:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，克隆仓库：
- en: '[PRE18]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Generate the config file:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成配置文件：
- en: '[PRE19]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Prepare the software for compilation:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备软件进行编译：
- en: '[PRE20]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Compile and install the binaries, libraries, and distribution templates:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并安装二进制文件、库文件和发行版模板：
- en: '[PRE21]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Copy the libraries to where the binaries are expecting them:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将库文件复制到二进制文件预期的位置：
- en: '[PRE22]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, to check the version that was compiled and installed, execute the
    following code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，要检查已编译和安装的版本，请执行以下代码：
- en: '[PRE23]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'CentOS 7 ships with `systemd` as its init system. To start the LXC service,
    run the following:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CentOS 7 使用 `systemd` 作为其初始化系统。要启动 LXC 服务，请运行以下命令：
- en: '[PRE24]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To ensure LXC was configured correctly during installation, run the following:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了确保 LXC 在安装过程中配置正确，请运行以下命令：
- en: '[PRE25]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: LXC directory installation layout
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LXC 目录安装布局
- en: 'The following table shows the directory layout of LXC that is created after
    package and source installation. The directories vary depending on the distribution
    and installation method:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了在包和源代码安装后创建的 LXC 目录布局。目录的设置因发行版和安装方法而异：
- en: '| **Ubuntu package** | **CentOS package** | **Source installation** | **Description**
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **Ubuntu 包** | **CentOS 包** | **源代码安装** | **描述** |'
- en: '| `/usr/share/lxc` | `/usr/share/` `lxc` | `/usr/local/share/` `lxc` | LXC
    base directory |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `/usr/share/lxc` | `/usr/share/` `lxc` | `/usr/local/share/` `lxc` | LXC
    基础目录 |'
- en: '| `/usr/share/lxc/` `config` | `/usr/share/lxc/` `config` | `/usr/local/share/lxc/`
    `config` | Collection of distribution-based LXC configuration files |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `/usr/share/lxc/` `config` | `/usr/share/lxc/` `config` | `/usr/local/share/lxc/`
    `config` | 基于发行版的 LXC 配置文件集合 |'
- en: '| `/usr/share/lxc/` `templates` | `/usr/share/lxc/` `templates` | `/usr/local/share/lxc/`
    `template`s | Collection of container template scripts |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `/usr/share/lxc/` `templates` | `/usr/share/lxc/` `templates` | `/usr/local/share/lxc/`
    `template`s | 容器模板脚本集合 |'
- en: '| `/usr/bin` | `/usr/bin` | `/usr/local/bin` | Location for most LXC binaries
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `/usr/bin` | `/usr/bin` | `/usr/local/bin` | 大多数 LXC 二进制文件的位置 |'
- en: '| `/usr/lib/x86_64-linux-gnu` | `/usr/lib64` | `/usr/local/lib` | Location
    of `liblxc` libraries |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `/usr/lib/x86_64-linux-gnu` | `/usr/lib64` | `/usr/local/lib` | `liblxc`
    库的位置 |'
- en: '| `/etc/lxc` | `/etc/lxc` | `/usr/local/etc/` `lxc` | Location of default LXC
    config files |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `/etc/lxc` | `/etc/lxc` | `/usr/local/etc/` `lxc` | 默认 LXC 配置文件的位置 |'
- en: '| `/var/lib/` `lxc/` | `/var/lib/` `lxc/` | `/usr/local/var/` `lib/lxc/` |
    Location of the root filesystem and config for created containers |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `/var/lib/` `lxc/` | `/var/lib/` `lxc/` | `/usr/local/var/` `lib/lxc/` |
    创建的容器的根文件系统和配置位置 |'
- en: '| `/var/log/lxc` | `/var/log/lxc` | `/usr/local/var/` `log/lxc` | LXC log files
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `/var/log/lxc` | `/var/log/lxc` | `/usr/local/var/` `log/lxc` | LXC 日志文件
    |'
- en: We will explore most of the directories while building, starting, and terminating
    LXC containers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建、启动和终止 LXC 容器时，我们将探索大多数目录。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can change the default installation path when building LXC from source by
    passing arguments to the configuration script such as `configure --prefix`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在从源代码构建 LXC 时，您可以通过传递参数给配置脚本（例如 `configure --prefix`）来更改默认的安装路径。
- en: Building and manipulating LXC containers
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和操作 LXC 容器
- en: 'Managing the container life cycle with the provided userspace tools is quite
    convenient compared to manually creating namespaces and applying resource limits
    with cgroups. In essence, this is exactly what the LXC tools do: creation and
    manipulation of the namespaces and cgroups we saw in [Chapter 1](ch02.html "Chapter 2. Installing
    and Running LXC on Linux Systems"), *Introduction to Linux Containers*. The LXC
    tooling implements functions defined in the `liblxc` API, as we''ll see in [Chapter
    4](ch04.html "Chapter 4. LXC Code Integration with Python"), *LXC Code Integration
    with Python*.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与手动创建命名空间并通过 cgroups 应用资源限制相比，使用提供的用户空间工具来管理容器生命周期非常方便。本质上，这正是 LXC 工具所做的：创建和操作我们在[第
    1 章](ch02.html "第 2 章：在 Linux 系统上安装和运行 LXC")，*Linux 容器简介* 中看到的命名空间和 cgroups。LXC
    工具实现了在[第 4 章](ch04.html "第 4 章：LXC 与 Python 的代码集成")，*LXC 与 Python 的代码集成* 中将要看到的
    `liblxc` API 中定义的功能。
- en: LXC comes packaged with various templates for building root filesystems for
    different Linux distributions. We can use them to create a variety of container
    flavors. For example, running a Debian container on a CentOS host. We also have
    the option of building our own root filesystem with tools such as `debootstrap`
    and `yum`, which we will explore shortly.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: LXC附带了多种模板，用于为不同的Linux发行版构建根文件系统。我们可以使用这些模板来创建各种类型的容器。例如，在CentOS主机上运行Debian容器。我们也可以选择使用`debootstrap`和`yum`等工具来构建自己的根文件系统，稍后我们将探讨这一点。
- en: Building our first container
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建我们的第一个容器
- en: 'We can create our first container using a template. The `lxc-download` file,
    like the rest of the templates in the `templates` directory, is a script written
    in bash:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用模板创建我们的第一个容器。`lxc-download`文件像`templates`目录中的其他模板一样，是一个用bash编写的脚本：
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you examine the scripts closely, you'll notice that most of them create the
    `chroot` environments, where packages and various configuration files are then
    installed to create the root filesystem for the selected distribution.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细检查这些脚本，你会注意到它们大多数是创建`chroot`环境，在这些环境中会安装包和各种配置文件，以便为选定的发行版创建根文件系统。
- en: 'Let''s start by building a container using the `lxc-download` template, which
    will ask for the distribution, release, and architecture, then use the appropriate
    template to create the filesystem and configuration for us:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使用`lxc-download`模板来构建一个容器，这会要求提供发行版、版本和架构，然后使用适当的模板为我们创建文件系统和配置：
- en: '[PRE27]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s list all containers:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出所有容器：
- en: '[PRE28]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Depending on the version of LXC, some of the command options might be different.
    Read the manual page for each of the tools if you encounter errors.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 根据LXC的版本，一些命令选项可能会有所不同。如果遇到错误，请阅读每个工具的手册页面。
- en: 'Our container is currently not running; let''s start it in the background and
    increase the log level to `DEBUG`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的容器目前没有运行，让我们在后台启动它并将日志级别提高到`DEBUG`：
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: On some distributions, LXC does not create the host bridge when building the
    first container, which results in an error. If this happens, you can create it
    by running the `brctl addbr virbr0` command.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些发行版中，LXC在构建第一个容器时不会创建宿主桥接，这会导致错误。如果发生这种情况，可以通过运行`brctl addbr virbr0`命令来创建它。
- en: 'Execute the following command to list all containers:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令列出所有容器：
- en: '[PRE30]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To obtain more information about the container run the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关容器的更多信息，请运行以下命令：
- en: '[PRE31]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The new container is now connected to the host bridge `lxcbr0`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 新的容器现在已连接到宿主机的桥接`lxcbr0`：
- en: '[PRE32]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Using the download template and not specifying any network settings, the container
    obtains its IP address from a `dnsmasq` server that runs on a private network,
    `10.0.3.0/24` in this case. The host allows the container to connect to the rest
    of the network and the Internet using NAT rules in `iptables`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下载模板并未指定任何网络设置时，容器会从`dnsmasq`服务器获取IP地址，这个服务器在私有网络`10.0.3.0/24`上运行。宿主机通过`iptables`中的NAT规则允许容器连接到其他网络和互联网：
- en: '[PRE33]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Other containers connected to the bridge will have access to each other and
    to the host, as long as they are all connected to the same bridge and are not
    tagged with different VLAN IDs.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到桥接的其他容器可以相互访问并访问宿主机，只要它们都连接到同一个桥接且未标记为不同的VLAN ID。
- en: 'Let''s see what the process tree looks like after starting the container:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看容器启动后进程树的样子：
- en: '[PRE34]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Notice the new `init` child process that was cloned from the lxc-start command.
    This is PID `1` in the actual container.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意新生成的`init`子进程，它是从`lxc-start`命令克隆出来的。它在实际容器中的PID是`1`。
- en: 'Next, let''s run `attach` with the container, list all processes, and network
    interfaces, and check connectivity:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们运行`attach`命令与容器交互，列出所有进程和网络接口，并检查连接性：
- en: '[PRE35]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: On some distributions such as CentOS, or if installed from source, the `dnsmasq`
    server is not configured and started by default. You can either install it and
    configure it manually, or configure the container with an IP address and a default
    gateway instead, as I'll demonstrate later in this chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些发行版中，如CentOS，或者如果是从源代码安装的，`dnsmasq`服务器默认未配置和启动。你可以手动安装并配置它，或者按我在本章后面展示的那样，给容器配置IP地址和默认网关。
- en: Notice how the hostname changed on the terminal once we attached to the container.
    This is an example of how LXC uses the UTS namespaces, as we saw in [Chapter 1](ch01.html
    "Chapter 1. Introduction to Linux Containers"), *Introduction to Linux Containers*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一旦我们连接到容器，终端的主机名就发生了变化。这是 LXC 如何使用 UTS 命名空间的一个例子，正如我们在[第1章](ch01.html "第1章：Linux容器简介")，*Linux容器简介*中看到的。
- en: 'Let''s examine the directory that was created after building the `c1` container:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下构建 `c1` 容器后创建的目录：
- en: '[PRE36]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `rootfs` directory looks like a regular Linux filesystem. You can manipulate
    the container directly by making changes to the files there, or using `chroot`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`rootfs` 目录看起来像一个普通的 Linux 文件系统。您可以通过直接修改那里文件或使用 `chroot` 来操作容器。'
- en: 'To demonstrate this, let''s change the root password of the `c1` container
    not by attaching to it, but by *chrooting* to its `rootfs`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，让我们通过 *chroot* 到其 `rootfs` 来更改 `c1` 容器的根密码，而不是通过连接到容器来实现：
- en: '[PRE37]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Notice how the path changed on the console when we used `chroot` and after exiting
    the jailed environment.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们使用 `chroot` 并在退出受限环境后，控制台上的路径发生了变化。
- en: 'To test the root password, let''s install **Secure Shell** (**SSH**) server
    in the container by first attaching to it and then using `ssh` to connect:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试根密码，我们首先连接到容器，然后使用 `ssh` 连接并安装 **安全外壳** (**SSH**) 服务器：
- en: '[PRE38]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We were able to `ssh` to the container and use the root password that was manually
    set earlier.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地通过 `ssh` 连接到容器，并使用之前手动设置的根密码。
- en: Making custom containers with debootstrap on Ubuntu
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上使用 debootstrap 创建自定义容器
- en: Using the provided distribution template scripts and config files is the fastest
    way to provision LXC. However, having full control of how the root filesystem
    is laid out - what packages, block devices, and network settings should be present
    - requires a more manual approach.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提供的发行版模板脚本和配置文件是最迅速的 LXC 配置方法。然而，要完全控制根文件系统的布局——应该包含哪些软件包、块设备和网络设置——则需要更为手动的方法。
- en: For this, we can use the `debootstrap` utility to create the `rootfs` of the
    container, and then manually create the config file that will describe the properties
    of the containers. This works on Ubuntu and RHEL/CentOS distributions and it provides
    a way to run Debian and Ubuntu containers on both RHEL/CentOS and Debian/Ubuntu
    systems.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以使用 `debootstrap` 工具来创建容器的 `rootfs`，然后手动创建描述容器属性的配置文件。这在 Ubuntu 和 RHEL/CentOS
    发行版上有效，并且提供了一种在 RHEL/CentOS 和 Debian/Ubuntu 系统上运行 Debian 和 Ubuntu 容器的方式。
- en: 'Let''s start by installing `debootstrap`, if not already installed. On Ubuntu,
    run the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先安装`debootstrap`，如果尚未安装。在 Ubuntu 上，运行以下命令：
- en: '[PRE39]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Similarly, on CentOS, run the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在 CentOS 上，运行以下命令：
- en: '[PRE40]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To create a filesystem for the stable Debian release, we can provide the following
    arguments:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建稳定的 Debian 发行版文件系统，我们可以提供以下参数：
- en: '[PRE41]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We specified the architecture, what packages to be installed, the release of
    the OS, and the location where the `rootfs` will be created, in this example,
    in `~/container`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了架构、要安装的软件包、操作系统的发行版以及 `rootfs` 将创建的位置，在本例中是 `~/container`。
- en: 'Next, we''ll need a `config` file for the container. There are many available
    options for specifying various LXC attributes. Let''s start with a somewhat simple
    configuration:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为容器准备一个 `config` 文件。指定各种 LXC 属性有许多可选项。让我们从一个相对简单的配置开始：
- en: '[PRE42]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding configuration was tested on LXC 2.0 and might be incompatible
    with versions on the 1.0 branch.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置是在 LXC 2.0 上测试的，可能与 1.0 版本分支上的版本不兼容。
- en: 'The following table provides a brief summary of the most important options
    we are using:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格简要总结了我们正在使用的最重要的选项：
- en: '| **Option** | **Description** |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| **Option** | **Description** |'
- en: '| `lxc.devttydir` | The console devices location in `/dev/` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.devttydir` | 控制台设备在 `/dev/` 中的位置 |'
- en: '| `lxc.tty` | The number of TTY to make available to the container |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.tty` | 为容器提供的 TTY 数量 |'
- en: '| `lxc.cgroup.devices.allow` | The list of devices to allow in the container
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.cgroup.devices.allow` | 容器中允许的设备列表 |'
- en: '| `lxc.mount` | The devices to be mounted |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.mount` | 要挂载的设备 |'
- en: '| `lxc.arch` | The architecture of the container |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.arch` | 容器的架构 |'
- en: '| `lxc.rootfs` | The location of the root filesystem |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.rootfs` | 根文件系统的位置 |'
- en: '| `lxc.rootfs.backend` | The type of the backend store |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.rootfs.backend` | 后端存储的类型 |'
- en: '| `lxc.utsname` | The hostname of the container |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.utsname` | 容器的主机名 |'
- en: '| `lxc.network.type` | The type of network virtualization |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.network.type` | 网络虚拟化的类型 |'
- en: '| `lxc.network.link` | The name of the host bridge the container will connect
    to |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.network.link` | 容器将连接的主机桥接器的名称 |'
- en: '| `lxc.network.flags` | To bring the network interface up |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.network.flags` | 启动网络接口 |'
- en: '| `lxc.network.hwaddr` | The MAC address of the network interface |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.network.hwaddr` | 网络接口的MAC地址 |'
- en: '| `lxc.network.ipv4` | The IP address of the network interface if not using
    DHCP |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.network.ipv4` | 如果不使用DHCP，网络接口的IP地址 |'
- en: '| `lxc.network.ipv4.gateway` | The default gateway inside the container |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.network.ipv4.gateway` | 容器内的默认网关 |'
- en: '| `lxc.cgroup` | Set cgroup parameters, such as `memory`, `cpu`, and `blkio`
    |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `lxc.cgroup` | 设置cgroup参数，如`memory`、`cpu`和`blkio` |'
- en: Tip
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For more information about all of the available configuration options refer
    to the `lxc.container.conf` man page.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解所有可用的配置选项，请参阅`lxc.container.conf`手册页。
- en: 'With the configuration set, let''s create the container:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，让我们创建容器：
- en: '[PRE43]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Notice that we did not specify the template this time and provided the `rootfs`
    that was created previously with `debootstrap`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这次我们没有指定模板，而是提供了之前用`debootstrap`创建的`rootfs`。
- en: 'Let''s start the container by setting the log to `DEBUG` and redirect it to
    a file in case we need to troubleshoot errors:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将日志设置为`DEBUG`并将其重定向到一个文件来启动容器，以防我们需要排查错误：
- en: '[PRE44]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To test, let''s run `attach` with it:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试，我们可以像往常一样运行`attach`：
- en: '[PRE45]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Making custom containers with yum on CentOS
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用yum在CentOS上制作自定义容器
- en: On CentOS 7, we can use the `debootstrap` utility to create Debian-based and
    Ubuntu-based root filesystems and build containers in the same way as described
    in the previous section.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS 7上，我们可以使用`debootstrap`工具创建基于Debian和Ubuntu的根文件系统，并像前一节中描述的那样构建容器。
- en: 'However, to build RHEL, Fedora, or CentOS containers, we''ll need to use tools
    such as `rpm`, `yumdownloader`, and `yum`. Let''s look at a slightly more complicated
    example that builds a CentOS `rootfs` that the new container will use:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，要构建RHEL、Fedora或CentOS容器，我们需要使用像`rpm`、`yumdownloader`和`yum`这样的工具。让我们看一个稍微复杂一点的例子，构建一个新的CentOS
    `rootfs`，容器将使用它：
- en: 'First, create the directory that will contain the root filesystem:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个将包含根文件系统的目录：
- en: '[PRE46]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'After making the `container` directory, we need to create and initialize the
    `rpm` package database:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`container`目录后，我们需要创建并初始化`rpm`软件包数据库：
- en: '[PRE47]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now that the database is initialized, we can download the release files for
    the CentOS distribution. If you''d rather build a Fedora container, you can replace
    the `centos-release` with `fedora-release` on the command line. The release files
    contain the `yum` repositories and other important files that `yum` and `rpm`
    use:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库初始化完成后，我们可以下载CentOS发行版的发布文件。如果你更倾向于构建一个Fedora容器，可以在命令行中将`centos-release`替换为`fedora-release`。发布文件包含`yum`仓库和`yum`及`rpm`使用的其他重要文件：
- en: '[PRE48]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Next, install the release files from the `rpm` package in the `root` directory
    of the `container:`
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，安装`container`中`root`目录下的`rpm`软件包的发布文件：
- en: '[PRE49]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: From the preceding output, we can see that the `container` filesystem is starting
    to shape up. It currently contains all the necessary files to use the package
    manager and install the rest of the system files.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的输出可以看出，`container`文件系统开始成形。它目前包含了使用包管理器和安装其余系统文件所需的所有文件。
- en: 'Now, it''s time to install a minimal CentOS distribution in `rootfs`; this
    is similar to what `debootstrap` does for Debian and Ubuntu:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，到了在`rootfs`中安装最小化的CentOS发行版的时刻；这与`debootstrap`在Debian和Ubuntu中所做的类似：
- en: '[PRE50]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now the `~/container` directory contains the complete root filesystem for CentOS
    7 distribution:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`~/container`目录包含了完整的CentOS 7发行版的根文件系统：
- en: '[PRE51]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: If you'd like to install more packages or make changes before the container
    is built, you can `chroot` to `~/containers` and perform the work as usual.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你希望在容器构建之前安装更多的包或进行更改，可以通过`chroot`进入`~/containers`并像往常一样进行操作。
- en: 'Next, make the bridge, if it does not already exist, and write the container
    configuration file:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，如果桥接器尚未存在，创建它，并编写容器配置文件：
- en: '[PRE52]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'With `rootfs` and `config` in place, let''s create and start the container:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好`rootfs`和`config`后，让我们创建并启动容器：
- en: '[PRE53]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Finally, we can run `attach` with it, as usual:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以像往常一样运行`attach`：
- en: '[PRE54]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: LXC provides a toolset that makes it quite easy and convenient to build, start,
    and manipulate containers. Using the included templates and configuration files
    further simplifies this process. In this chapter, we saw practical examples on
    how to install, configure, and start LXC on Ubuntu and CentOS distributions. You
    learned how to create container root filesystems and how to write simple configuration
    files.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: LXC提供了一套工具，使得构建、启动和操作容器变得非常简单和方便。使用包含的模板和配置文件可以进一步简化这一过程。在本章中，我们展示了如何在Ubuntu和CentOS发行版上安装、配置和启动LXC的实际示例。你学习了如何创建容器根文件系统，以及如何编写简单的配置文件。
- en: In the next chapter, we'll have a look at how to configure system resources
    in LXC and explore alternative ways of working with LXC, by utilizing the `libvrit`
    toolkit and libraries.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将了解如何在LXC中配置系统资源，并通过使用`libvirt`工具包和库，探索与LXC协同工作的替代方法。
