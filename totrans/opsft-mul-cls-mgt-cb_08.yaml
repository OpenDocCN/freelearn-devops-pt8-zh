- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenShift Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, you have been able to follow some important aspects that
    involve processes, people, and all the technology involved to maintain a powerful,
    resilient, and fault-tolerant platform. A product of this magnitude with a vast
    structure, from its creation to customizations that will keep it fully functional,
    also requires a great division of responsibilities and skills for each step taken.
  prefs: []
  type: TYPE_NORMAL
- en: Security has always been and will always be a top concern in any enterprise,
    even more so now with the advent of things such as ransomware, malicious crypto-mining,
    malware, and other types of attacks. According to a *Gartner* study, by 2025,
    90% of organizations that don’t control public cloud usage properly will inadvertently
    share sensitive data. When it comes to Kubernetes security, we also have seen
    a number of vulnerabilities and attacks recently. In the *Further reading* section
    of this chapter, you can check out some vulnerabilities and security incidents
    related to Kubernetes that happened in the last few years.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, we decided to dedicate an entire chapter to security-related
    aspects involving OpenShift. The main focus of this chapter is not to be a complete
    security guide, though, but rather a minimal collection of topics you should consider
    and review to have a secure container strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will find the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Container security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AuthN and AuthZ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificates in OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: etcd encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container isolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network isolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat Container Catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Container security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Container adoption grows exponentially, and with that also the number of vulnerabilities
    and potential attacks against all the container ecosystem. That being said, security
    is an important aspect you need to consider in your container strategy. Red Hat
    is well known for the high level of security of its products, which is one of
    the characteristics that has always been a differentiator for them in the industry,
    since the robust **Red Hat Enterprise Linux** (**RHEL**), which was (and still
    is!) the foundation of the company up to emerging technologies, such as Red Hat
    OpenShift. They have been named leaders in the container security space due to
    a number of security features that Red Hat defined as default (and required) with
    OpenShift that are optional in many other Kubernetes-based platforms, which also
    makes OpenShift more secure than other options. One example of it is **Security-Enhanced
    Linux** (**SELinux**), which is always enabled in any OpenShift worker nodes and
    prevents a number of vulnerabilities and exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Did you know?
  prefs: []
  type: TYPE_NORMAL
- en: 'Did you know that there are now probably somewhere about 380,000 Kubernetes
    **application programming interfaces** (**APIs**) open on the internet for some
    form of access that are probably exposed to some sort of attack or data leak?
    That is what *The Shadowserver Foundation* found in this research: [https://www.shadowserver.org/news/over-380-000-open-kubernetes-api-servers/](https://www.shadowserver.org/news/over-380-000-open-kubernetes-api-servers/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interested in seeing more? In this *Container Security* report, you will find
    some great research related to security on Kubernetes: [https://www.kuppingercole.com/reprints/b1e948f62d5394353f996e43a89cde4a#heading8.1](https://www.kuppingercole.com/reprints/b1e948f62d5394353f996e43a89cde4a#heading8.1).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can view the *State of Kubernetes security report*: [https://www.redhat.com/en/resources/kubernetes-adoption-security-market-trends-overview](https://www.redhat.com/en/resources/kubernetes-adoption-security-market-trends-overview).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also consult the *Is the Cloud Secure?* *Gartner* study at the following
    link: [https://www.gartner.com/smarterwithgartner/is-the-cloud-secure](https://www.gartner.com/smarterwithgartner/is-the-cloud-secure).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The key to having a secure environment and applications resides in the ability
    that a company has to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Control**: Secure the **application life cycle management** (**ALM**) to
    detect and fix vulnerabilities before it goes live'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protect**: Ability to assess and protect the platform and infrastructure
    to avoid vulnerabilities being exploited'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detect and respond**: Detect and mitigate vulnerabilities by limiting their
    impact on systems and environments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following diagram, you will see some aspects of these three factors
    we mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Container security strategy ](img/B18015_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Container security strategy
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will walk through some important things to consider about
    each of these factors.
  prefs: []
  type: TYPE_NORMAL
- en: Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To secure the container software supply chain, a few common steps can be performed,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vulnerability analysis**: Scan the container images to find known vulnerabilities.
    This topic will be covered in detail in [*Chapter 12*](B18015_12.xhtml#_idTextAnchor251),
    *OpenShift Multi-Cluster Security*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trusted images and contents**: Do you know everything that is running inside
    your containers and applications? Every application these days uses many dependencies
    from different projects, many of them open source. It is crucial to use trusted
    sources to avoid running compromised base packages and images. Red Hat provides
    the Red Hat **Universal Base Image** (**UBI**), which is the robust, secure, and
    stable version of RHEL that you can use as a base for your container images. Red
    Hat also provides a comprehensive list of certified container images through its
    Red Hat Container Catalog that are safe to use and maintains a Container Health
    Index that helps to assess the security risk of a container image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ALM and continuous integration/continuous deployment (CI/CD) pipeline**:
    Security should be an integral part of your development workflow. A modern development
    life cycle requires that security be a shared responsibility among all teams,
    from end to end. **Development-security-operations** (**DevSecOps**) is the new
    norm, and that means automating security gates to integrate security into the
    **development-operations** (**DevOps**) processes. Things such as **integrated
    development environment** (**IDE**) plugins and CI/CD pipeline security tasks
    are must-haves to achieve this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, these are only a few items among a much bigger set. It is not the
    main focus of this book to cover a comprehensive list of security-related aspects,
    but we will highlight what we consider are some important factors you should take
    care of with your container strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Protect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To protect your platform and infrastructure, it is important to have policies
    in place for authentication and authorization, deployment, certificate management,
    compliance assessment, and policy enforcement. Later in this chapter, we will
    cover in depth the authentication and authorization aspects of an OpenShift cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Detect and respond
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even with all actions taken to control and protect the infrastructure, you need
    to be able to detect and mitigate security risks. It is important, then, to have
    monitoring practices in place, but also other policies that may limit the impact
    of any vulnerabilities or breaches such as container and network isolation. In
    this chapter, you will also see some more information about container and network
    isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by looking at authentication and authorization in more detail. Continue
    reading to learn more about them.
  prefs: []
  type: TYPE_NORMAL
- en: AuthN and AuthZ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**AuthN** and **AuthZ** are related concepts but with different goals. **AuthN**
    is an abbreviation of **a**uthe**n**tication and is related to the process to
    confirm who a user is and validate their credentials to grant access to the platform.
    In this process, we deal with **identity providers** (**IdPs**) on OpenShift to
    configure the authentication provider that will check the user credentials, which
    we will cover shortly.'
  prefs: []
  type: TYPE_NORMAL
- en: In turn, **AuthZ** stands for **a**uthori**z**ation and is directly linked to
    giving the user only what they really should have access to, after the authentication
    process.
  prefs: []
  type: TYPE_NORMAL
- en: These two concepts are seen as confusing or similar from the point of view of
    just logging in to OpenShift. To clarify the concepts, we will now discuss the
    different objects and processes related to authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenShift works with the following set of objects as part of the authentication
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18015_08_Table_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These are the objects used in OpenShift that, combined, authenticate a user
    in the platform. In order to understand how authentication works, you need to
    define IdPs on OpenShift—see more information about them next.
  prefs: []
  type: TYPE_NORMAL
- en: IdPs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IdPs are entities that integrate OpenShift with authentication providers, with
    the purpose of creating a chain of custody over who can log on to the platform.
    To avoid the privilege of one product over another when it comes to managing users,
    OpenShift creates a very flexible option that allows multiple IdPs to integrate
    with OpenShift at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table contains a list of supported IdPs allowed for OpenShift
    integration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18015_08_Table_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the OpenShift documentation, you will find detailed information about how
    to configure each of these providers: [https://docs.openshift.com/container-platform/latest/authentication/index.html](https://docs.openshift.com/container-platform/latest/authentication/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift uses a **role-based access control** (**RBAC**) model to perform the
    authorization process and give a user the appropriate set of permissions they
    should have, as you will see now.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization – RBAC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In an RBAC system, you will have a set of permissions represented as a *role*
    that users and groups will use to have those permissions granted. On OpenShift,
    we have the following objects to configure RBAC permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18015_08_Table_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A role can be either cluster- or local-scoped, which means that it can be applied
    for all projects or only for a specific project. In the following example, you
    can see a command to create a *local* role that will allow a user to get and update
    a pod in the namespace test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the role created by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to create a *cluster* role, you need to use the `oc create role`
    command, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a role binding to add this role to a user or group, the following
    commands can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also remove a role from a user or group using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Continue reading for hints to troubleshoot issues you may have related to the
    access-control feature.
  prefs: []
  type: TYPE_NORMAL
- en: Access-control troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important you notice that after you change the cluster OAuth custom resource,
    the authentication operator will apply the change; due to that, you may observe
    temporary unavailability of the OpenShift authentication. Allow some minutes for
    the operator to finish applying the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if you face issues with OpenShift authentication, we recommend you check
    out this helpful article: [https://access.redhat.com/articles/5900841](https://access.redhat.com/articles/5900841).'
  prefs: []
  type: TYPE_NORMAL
- en: Certificates in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenShift uses several different certificates to make the platform secure.
    In this section, we will walk through the main certificate chains OpenShift uses.
    These are presented here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://api. <cluster-name>.<domain>:6443/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*.apps.<cluster-name>.<domain>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node certificates**: Managed automatically by the cluster and don’t require
    any user intervention. Automatically rotated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**etcd certificates**: Used to encrypt communication between etcd cluster members.
    Automatically managed and rotated by the cluster itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenShift creates self-signed certificates with the platform installation.
    Most enterprises require those certificates to be replaced by custom certificates.
    To do so, refer to the OpenShift documentation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To replace the ingress certificate: [https://docs.openshift.com/container-platform/latest/security/certificates/replacing-default-ingress-certificate.html](https://docs.openshift.com/container-platform/latest/security/certificates/replacing-default-ingress-certificate.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To replace the API server: [https://docs.openshift.com/container-platform/4.10/security/certificates/api-server.html](https://docs.openshift.com/container-platform/4.10/security/certificates/api-server.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you replace the certificates, you may also need to add a trusted **certificate
    authority** (**CA**), if you use a private CA. The next section describes how
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Trusted CA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may need to add a custom CA that you use within your organization, to make
    API calls possible between OpenShift components and other external systems. To
    do so, you need to create a config map with the certificate chain on the `openshift-config`
    namespace, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, update the cluster-wide proxy to use the config map just created, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: One important piece of any Kubernetes cluster is the etcd database. You may
    decide to encrypt it to keep secrets and other objects encrypted in the database.
    Check out next how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: etcd encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The etcd database, by default, is not encrypted. However, you can easily enable
    etcd encryption to have an extra layer of data security in your cluster. When
    etcd encryption is enabled, things such as secrets and config maps are stored
    encrypted, which makes your cluster even more secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable etcd encryption, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `apiserver` object, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `encryption` field, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file to apply the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that it may take up to 15 minutes or so to enable the encryption after
    you have applied the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Container isolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already discussed aspects such as user authentication and permissions, as
    well as certificates, but how do you make sure your containers can only do what
    they are supposed to do and nothing more, and as such, cannot escalate privileges
    on the host?
  prefs: []
  type: TYPE_NORMAL
- en: We are going to discuss in this section some of the concepts implemented as
    part of the **operating system** (**OS**) to securely run containers and also
    some aspects implemented on OpenShift related to this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following table, you see some concepts related to containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18015_08_Table_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following diagram, you can see a graphical representation of these concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Container isolation](img/B18015_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Container isolation
  prefs: []
  type: TYPE_NORMAL
- en: While it is important to understand these concepts, you don’t really need to
    work directly with any of them, as OpenShift abstracts those configurations for
    you. Instead, you need to understand what **security context constraints** (**SCCs**)
    are—these are the objects you will need to use to give broader permissions to
    containers when needed. Read on to find out what SCCs are and how to configure
    them.
  prefs: []
  type: TYPE_NORMAL
- en: SCCs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SCCs are OpenShift objects that control the actions that a pod or container
    can do with the host resources. By default, any pod uses the **restricted** SCC,
    which is the most restricted permission that prevents it from running as root
    and escalating privileges on the host. Besides the restricted SCC, the most usual
    ones are noted here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`anyuid`: This has the same permissions as the restricted SCC, allowing a container
    to run as any `0` UID—the root user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hostaccess`: Gives permissions for a container to access all host namespaces.
    It should be used only with trusted sources as it gives very broad permissions
    within a worker node—use only if really necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hostnetwork`: Allows a container to access the worker node underlying the
    network directly. Use with caution to decrease the risk of a network breach.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`privileged`: Most relaxed SCC and gives all privileges to the host. Should
    be avoided at all costs and used only if really necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Besides all the security-related features we already covered so far, we cannot
    miss a very important topic: network policies. A network policy is a great feature
    to make sure your pods and projects can only communicate with what they are supposed
    to. In the following section, you will see what you can do with network policies
    and why they are so important when it comes to network security.'
  prefs: []
  type: TYPE_NORMAL
- en: Network isolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firewalls are well known and have been used for a long time in any kind of infrastructure.
    When it comes to OpenShift, we need to have in mind that we are now working with
    a software-defined platform and, as such, we have software features to implement
    some of the same concepts we have had for a long time in a data center—it is no
    different with a firewall. As we have seen in the previous chapter, Network Policies
    are nothing more than rules you define to allow or block network communication
    between pods and projects on OpenShift, similar to what a firewall provides in
    a physical network.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, all pods in a project are accessible from other pods and network
    endpoints from any project. To isolate pods and projects, you need to create network
    policies, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous network policy denies all traffic for pods in a project. In order
    for a project to be accessed from outside the cluster using the OpenShift ingress,
    you will need to allow connections from the ingress project, as you can see in
    the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also create custom network policies using labels for specific pods.
    For instance, the following YAML Ain’t Markup Language (YAML) could be used to
    limit pods with an `app=web` label to be accessed on the accessed on the HTTPS
    port (`443`) onlyport only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a world of possibilities for using network policies to set your projects
    and pods with proper network access. A common and recommended practice is to create
    a set of standard network policies and configure the OpenShift template so that
    those network policies will be automatically applied to any new projects created.
    You can find out how to customize the OpenShift template to add those network
    policies in the OpenShift documentation: [https://docs.openshift.com/container-platform/latest/networking/network_policy/default-network-policy.html](https://docs.openshift.com/container-platform/latest/networking/network_policy/default-network-policy.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Another important thing you may consider in your security strategy is about
    using safe container base images. The following section covers what the Red Hat
    Container Catalog is and how it can help you with this important topic.
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat Container Catalog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most enterprises, at some point, need to use containers from different sources,
    either as off-the-shelf products or only as dependencies for workloads. Red Hat
    has an interesting tool that aims to help you to make sure you use secure containers.
    The Red Hat Container Catalog is a repository of container images that have been
    tested and certified by Red Hat and partners, and therefore are trusted images.
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of the Container Catalog, Red Hat provides the Container Health Index.
    The Container Health Index is a rating system for container images available in
    the Red Hat Container Catalog, which goes from Grade A to F, in which Grade A
    is the most up-to-date image in terms of critical errata. You can find all the
    grades available and how they are defined at this link: [https://access.redhat.com/articles/2803031](https://access.redhat.com/articles/2803031).
    This feature helps a lot to assess the security risk you are associated with when
    using a certain image version.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Red Hat Container Catalog, you can find the Red Hat UBI, which may comprise
    an important aspect of your container strategy. You'll find out more about this
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat UBI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Defining a base image for your containers is an important step that you need
    to consider to have a portable and secure container delivery process. Depending
    on the decision you make, you may see yourself locked in some specific Linux versions
    and distributions that the container base image supports. The base image is also
    critical to keep your workloads secure—many vulnerabilities are found every week
    on Linux, but they are usually fixed really fast, using a mature and robust base
    image such as RHEL which is fundamental in keeping your workloads more secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Red Hat UBI is based on RHEL, available at no additional cost, and has a minimal
    footprint (something between 10 **megabytes** (**MB**) and 100 MB, depending on
    the image type). There are four image types you can choose from, depending on
    your needs, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18015_08_Table_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Besides the options mentioned, Red Hat also provides some UBIs with language
    runtimes included, such as Node.js, .NET, and Java. All the base images are available
    for download from the Red Hat Container Catalog.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a list of trusted sources that contain secure container images,
    we recommend you limit OpenShift to only running images from these trusted sources.
    You'll see next how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting image registry sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can easily block or allow image registries that OpenShift can use with
    the following procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to edit the `image.config.openshift.io/cluster` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the object’s YAML, set the `allowedRegistriesForImport` and `registrySources`
    fields with the desired image registries. `AllowedRegistriesForImport` defines
    the image registries to which a user can import images using image streams (the
    `oc import-image` command). In the `registrySources` block, you can define allowed
    registries (`allowedRegistries`) or blocked registries (`blockedRegistries`),
    but not both. Have a look at the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This concludes the main security aspects that we believe any company needs to
    think about. We encourage you to carefully review the topics we covered in this
    chapter and define/implement policies to keep all your clusters secure.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen in this chapter some of the things you may consider to have secure
    OpenShift clusters. While OpenShift is considered a secure platform based on Kubernetes,
    how you manage it, of course, matters a lot. Consider establishing policies for
    access control, certificates, container and network isolation, development, and
    CI/CD pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: A secure platform starts with proper planning to define and implement efficient
    policies to control what is being developed and deployed into the platform, protect
    it against unnecessary risks, and—finally—isolate workloads and networks as much
    as possible to mitigate the impacts that a breach could have on the environment.
    In [*Chapter 11*](B18015_11.xhtml#_idTextAnchor229), *OpenShift Multi-Cluster
    GitOps and Management*, you will see how to use Advanced Cluster Management to
    apply policies at scale to several clusters and make sure that all of them are
    compliant and safe, no matter where they are running.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how to work with Kubernetes native pipelines
    on OpenShift using the Tekton project, which you can use to not only have a cloud-native
    CI/CD process to build and deploy your application but also add an extra layer
    of security in your application supply chain.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want more information related to the concepts we covered in this chapter,
    check out the following references:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Is the Cloud Secure?*—*Gartner* study: [https://www.gartner.com/smarterwithgartner/is-the-cloud-secure](https://www.gartner.com/smarterwithgartner/is-the-cloud-secure)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kubernetes vulnerabilities and attacks reported*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://thenewstack.io/unfixable-kubernetes-security-hole-means-potential-man-in-the-middle-attacks/](https://thenewstack.io/unfixable-kubernetes-security-hole-means-potential-man-in-the-middle-attacks/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://threatpost.com/kubernetes-cyberattacks-argo-workflows/167997/](https://threatpost.com/kubernetes-cyberattacks-argo-workflows/167997/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Most Common Kubernetes Security Issues and Concerns to Address* (blog post):
    [https://cloud.redhat.com/blog/most-common-kubernetes-security-issues-and-concerns-to-address](https://cloud.redhat.com/blog/most-common-kubernetes-security-issues-and-concerns-to-address)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Container Security* report: [https://www.kuppingercole.com/reprints/b1e948f62d5394353f996e43a89cde4a#heading8.1](https://www.kuppingercole.com/reprints/b1e948f62d5394353f996e43a89cde4a#heading8.1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*State of Kubernetes security report*: [https://www.redhat.com/en/resources/kubernetes-adoption-security-market-trends-overview](https://www.redhat.com/en/resources/kubernetes-adoption-security-market-trends-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OpenShift authentication guide*: [https://docs.openshift.com/container-platform/latest/authentication/index.html](https://docs.openshift.com/container-platform/latest/authentication/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Troubleshooting OpenShift authentication*:[https://access.redhat.com/articles/5900841](https://access.redhat.com/articles/5900841)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Defining default network policies*: [https://docs.openshift.com/container-platform/4.10/networking/network_policy/default-network-policy.html](https://docs.openshift.com/container-platform/4.10/networking/network_policy/default-network-policy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Red Hat Universal Base Images*: [https://developers.redhat.com/products/rhel/ubi](https://developers.redhat.com/products/rhel/ubi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Container Health Index grades*: [https://access.redhat.com/articles/2803031](https://access.redhat.com/articles/2803031
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Detailed information about* `htpasswd` (Apache project): [https://httpd.apache.org/docs/2.4/programs/htpasswd.html](https://httpd.apache.org/docs/2.4/programs/htpasswd.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OpenID Connect*:[https://developers.google.com/identity/protocols/oauth2/openid-connect](https://developers.google.com/identity/protocols/oauth2/openid-connect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Container isolation*: [https://www.nginx.com/blog/what-are-namespaces-cgroups-how-do-they-work/](https://www.nginx.com/blog/what-are-namespaces-cgroups-how-do-they-work/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 3 – Multi-Cluster CI/CD on OpenShift Using GitOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will be introduced to new concepts and technologies related
    to CI/CD and GitOps. You will learn how to build CI/CD pipelines that are resilient
    to your enterprise strategy and designed to easily be maintained using Tekton
    and ArgoCD. You will also see how to deploy an application into multiple clusters
    at the same time as using Argo CD and Advanced Cluster Management.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part of the book comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18015_09.xhtml#_idTextAnchor176), *OpenShift Pipelines – Tekton*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18015_10.xhtml#_idTextAnchor204), *OpenShift GitOps – Argo
    CD*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18015_11.xhtml#_idTextAnchor229), *OpenShift Multi-Cluster
    GitOps and Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
