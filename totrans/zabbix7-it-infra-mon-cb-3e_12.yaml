- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced Zabbix Database Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you’ve been using Zabbix for a while or you are looking toward setting
    up your first production instance, database management is important right from
    the start. A lot of the time, people set up their Zabbix database and don’t know
    yet that it will be a big database. The Zabbix housekeeper just can’t keep up
    when your database grows beyond a certain size, and that’s when we need to look
    for different options.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll look into keeping our Zabbix database from using up 100%
    disk space when the Zabbix housekeeper is not keeping up. For MySQL users, we’ll
    look into using database partitioning to keep our database in check. For PostgreSQL
    users, we’ll look toward the TimescaleDB support. Last but not least, we’ll also
    check out how to secure our connection between the Zabbix server and the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll do all this in the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MySQL partitioning for your Zabbix database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the PostgreSQL TimescaleDB functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your Zabbix MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without further ado, let’s get started on these recipes and learn all about
    managing our database.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to need some new servers for these recipes. One Linux server needs
    to run Zabbix server 7 with MySQL (MariaDB) set up; we’ll call this host `lar-book-mysql-
    mgmt`. We will also need a Linux server running Zabbix server 7 with PostgreSQL,
    which we’ll call `lar-book-postgresql-mgmt`.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also need two servers for creating a secure Zabbix database setup. One
    server will be running the MySQL (MariaDB) database; let’s call this server `lar-book-secure-db`.
    Then, connecting externally to a Zabbix database, we’ll have our Zabbix server,
    which we’ll call `lar-book-secure-zbx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files can also be accessed in the GitHub repository here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter12](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter12)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MySQL partitioning for your Zabbix database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with a MySQL database, the biggest issue we face is how MySQL stores
    its data by default. There is no real order to the data that we can use if we
    want to drop large chunks of data. MySQL partitioning solves this issue; let’s
    see how we can configure it to use for our Zabbix database.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'Here at Opensource ICT Solutions, we have fixed the script to work with MySQL
    8\. The script should work for *any* MySQL setup once more. Check out the link
    for more information: [https://github.com/OpensourceICTSolutions/zabbix-mysql-partitioning-perl](https://github.com/OpensourceICTSolutions/zabbix-mysql-partitioning-perl).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we are going to need a running Zabbix server with a MySQL database.
    I’ll be using MariaDB in my example, but any MySQL flavor should be about the
    same. The Linux host I’ll be using is called `lar-book-mysql-mgmt`, which already
    meets the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: If you are running these steps in a production environment, make sure to create
    your database backups first as things can always go wrong.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First things first, let’s log in to our Linux CLI to execute our commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s a good idea to use TMUX because partitioning can take several days for
    big databases. TMUX will keep the sessions open in the background, even if we
    lose the SSH connection. If TMUX is not installed, install it first before proceeding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The RHEL-based command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Ubuntu command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a new **tmux** session by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It’s not required to run partitioning in a **tmux** window, but it’s definitely
    smart. Partitioning a big database can take a long time. You could move your database
    to another machine with ample resources (CPU, memory, and disk speed) to partition,
    or if that’s not a possibility stop the Zabbix server process for the duration
    of the partitioning process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s log in to the MySQL application as the root user with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, move to use the Zabbix database with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are going to need to partition some tables here, but to do this, we need
    to know the UNIX timestamp on our tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will receive an output like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.1 – MySQL returning a timestamp on the table history](img/B19803_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – MySQL returning a timestamp on the table history
  prefs: []
  type: TYPE_NORMAL
- en: 'This timestamp should be about the same for every single table we are going
    to partition. Verify this by running the same query for the remaining history
    tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A table might return a different value or even no value at all. We need to
    take this into account when creating our partitions. A table showing **NULL**
    has no data, but an earlier date means we need an earlier partition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.2 – MySQL returning a timestamp on the history_log table](img/B19803_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – MySQL returning a timestamp on the history_log table
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the **history** table. We are going to partition this table
    by day, and we are going to do this up until the date it is today; for me, it
    is **18-06-2023**. Let’s prepare the following MySQL query (for example, in a
    notepad):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If we only have 7 days of history data, creating this list by hand is not that
    hard. If we want to do it on a big existing database, it can be a big list to
    edit by hand. It’s easy to create a big list using software such as Excel or by
    creating a small script.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the oldest partition here matches the timestamp we collected
    in *step 9*. In my case, the oldest data was from June 11, 2023, so this is my
    oldest partition. Also, make sure that your newest partition matches the date
    you are partitioning on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy and paste the prepared MySQL query from *step 9* and press *Enter*. This
    might take a while, as your table might be quite large. After you’re done, you
    will see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – MySQL returning a successful query result for the history table](img/B19803_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – MySQL returning a successful query result for the history table
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the same partitioning for the remaining history tables; make sure to use
    the other UNIX timestamps for the earliest partition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**history_uint**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**history_str**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**history_text**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**history_log**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**history_bin**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you’ve partitioned all the history tables, let’s partition the **trends**
    tables. We have two of these called **trends** and **trends_uint**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to check the timestamps again with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For these tables, it’s important to focus on what the earliest month is. For
    my tables, this is month 06 of the year 2023.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s prepare and execute the partitioning for this table. Let’s do two
    extra partitions starting from the earliest date seen in the timestamp in *step
    14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Again, we partition from the earliest collected UNIX timestamp, up until the
    current month. But there’s no harm in creating some new partitions for future
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.4 – MySQL returning a successful query result for the trends table](img/B19803_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – MySQL returning a successful query result for the trends table
  prefs: []
  type: TYPE_NORMAL
- en: Do the same thing for the **trends_uint** table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That concludes the actual partitioning of the database. Let’s make sure our
    partitions remain managed. On your Zabbix database Linux host, download the partitioning
    script with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you can’t use **wget**, simply download the script from the following link:
    [https://github.com/OpensourceICTSolutions/zabbix-mysql-partitioning-perl/blob/main/mysql_zbx_part.pl](https://github.com/OpensourceICTSolutions/zabbix-mysql-partitioning-perl/blob/main/mysql_zbx_part.pl).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, you can download the partitioning script using the Packt GitHub
    here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter12/mysql_zbx_part.pl](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter12/mysql_zbx_part.pl)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, create the directory and move the script to the **/usr/lib/zabbix/** folder
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are going to customize some details in the script. Edit the script with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to edit some text in the following part:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.5 – MySQL Zabbix partitioning script user parameters](img/B19803_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – MySQL Zabbix partitioning script user parameters
  prefs: []
  type: TYPE_NORMAL
- en: Edit **$db_schema** to match your Zabbix database name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit **$db_user_name** to match your Zabbix database username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit **$db_password** to match your Zabbix database password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, at the **$tables** variable, we are going to add some of the most important
    details. This is where we’ll add how many days of history data we want to keep
    and how many months of trends data. Add your values; the default settings keep
    30 days of history data and 12 months of trends data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, make sure to edit the **my $curr_tz = Etc/UTC;** line to match your own
    time zone. I will use Europe/Amsterdam, for example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a version of Zabbix before 2.2 or a MySQL version before 5.6
    or if you are running MySQL 8, then there are some extra lines of configuration
    that need to be commented and uncommented in the script. If this applies to you,
    read the comments in the **mysql_zbx_part.pl** script file and edit it. Additionally,
    check out the GitHub repo mentioned in the introduction of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Before executing the script, we are going to need to install some Perl dependencies.
    On RHEL-based systems, we need additional repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The RHEL8-based commands are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install the dependencies with the following commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The RHEL-based commands are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Ubuntu commands are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the script executable with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, this is the moment where we should be ready to execute the script to
    see whether it is working. Let’s execute it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once your script has finished running, let’s see whether it was successful
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see an output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.6 – MySQL Zabbix partitioning script results](img/B19803_12_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – MySQL Zabbix partitioning script results
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To automate the execution of the script, add the following line to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The last thing we are going to need to do is to go to the Zabbix frontend. Navigate
    to **Administration** | **Housekeeping**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As the script will take over database history and trend deletion, the housekeeping
    for the **History** and **Trends** tables must be disabled. It will look like
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 12.7 – Zabbix Administration | General | Housekeeping disabled for\
    \ History an\uFEFFd Trends](img/B19803_12_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – Zabbix Administration | General | Housekeeping disabled for History
    and Trends
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our Zabbix database partitioning setup.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Database partitioning seems like a daring task at first, but once you break
    it down into chunks, it is not that hard to do. It is simply the process of breaking
    down our most important Zabbix database tables into time-based partitions. Once
    these partitions are set up, we simply need to manage these tables with a script
    and we’re ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following figure, and let’s say today is **19-06-2023**. We have
    a lot of partitions managed by the script. All of our **history** data today is
    going to be written to the partition for this day and all of our **trends** data
    is going to be written into the partition for this month:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Zabbix partitioning illustration](img/B19803_12_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – Zabbix partitioning illustration
  prefs: []
  type: TYPE_NORMAL
- en: The actual script does only two things. It creates new partitions and it deletes
    old partitions.
  prefs: []
  type: TYPE_NORMAL
- en: For deleting partitions, once a partition reaches an age older than specified
    in the `$tables` variable, it drops the entire partition.
  prefs: []
  type: TYPE_NORMAL
- en: For creating partitions, every time the script is run, it creates 10 partitions
    in the future starting from today, except, of course, when a partition already
    exists.
  prefs: []
  type: TYPE_NORMAL
- en: This is better than using the housekeeper for one clear reason. It’s simply
    faster! The Zabbix housekeeper goes through our database data line by line to
    check the UNIX timestamp and then it deletes that line when it reaches data older
    than specified. This takes time and resources. Dropping a partition, though, is
    almost instant.
  prefs: []
  type: TYPE_NORMAL
- en: One downside of partitioning a Zabbix database, though, is that we can no longer
    use the frontend item history and trend configuration. This means we can’t specify
    different history and trends for different items; it’s all global now.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When I first started using Zabbix, I did not have a book like this one. Instead,
    I relied heavily on the resources available online and my own skillset. There
    are loads of great guides for partitioning and other stuff available on the internet.
    If something isn’t mentioned in this book, make sure to Google it and see if there’s
    something available online. You might also want to check out some amazing books
    written by our Zabbix peers and, of course, if you’ve figured out something by
    yourself, sharing is caring!
  prefs: []
  type: TYPE_NORMAL
- en: Using the PostgreSQL TimescaleDB functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TimescaleDB is an open source relational PostgreSQL database extension for time-based
    series data. Using PostgreSQL TimescaleDB is a solid way to work around using
    the Zabbix housekeeper to manage your PostgreSQL database. In this recipe, we
    will go over the installation of PostgreSQL TimescaleDB on a new server and how
    to set it up with Zabbix.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need an empty Linux server. I’ll be using my server called `lar-book-
    postgresql-mgmt`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have a bit of a different process for RHEL-based and Ubuntu systems, which
    is why we have split this *How to do it…* section in two. We will start with Ubuntu
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s log in to our Linux CLI and add the PostgreSQL repo with the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the TimescaleDB repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, install TimescaleDB with the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start and enable PostgreSQL 12:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, continue with the *TimescaleDB configuration* section of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RHEL-based installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start by logging in to our Linux CLI. We will need PostgreSQL version
    11 or higher. Let’s install version 12; first, disable AppStream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the correct repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, install PostgreSQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to initialize the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the repo information to the file and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install TimescaleDB with the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, continue with the *TimescaleDB configuration* section of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TimescaleDB configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we’ll go over how to set up TimescaleDB after finishing the
    installation process. There’s a lot more to configure, so let’s check it out:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sometimes this does not work, and you want to specify the PostgreSQL location
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go through the steps and answer the questions with **yes** or **no** accordingly.
    For a first-time setup, **yes** for everything is good.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, restart PostgreSQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you haven’t already, download and install Zabbix with the following.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The RHEL-based commands are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Ubuntu commands are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the initial database with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the database schema for PostgreSQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the database password to the Zabbix configuration file by editing it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines, where **password** is your password as set in *step
    6* and **DBHost** is empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, enable the TimescaleDB extension with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Unpack the **timescale.sql** script located in your Zabbix share folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s run **timescale.sql**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to do one more thing before moving to the frontend. We need to edit
    the **pg_hba.conf** file to allow our Zabbix frontend to connect. Edit the following
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure the following lines match in your file; they need to end with **md5**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, start Zabbix and finish the frontend setup using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On Ubuntu systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once we navigate to the frontend and we’ve logged in to our setup, navigate
    to **Administration** | **Housekeeping**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now edit the following parameters to match our preferences, and TimescaleDB
    will take care of maintaining the data retention period:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 12.9 – Zabbix Administration | Housekeeping, \uFEFF\uFEFFTimescaleDB-specific\
    \ op\uFEFFtions](img/B19803_12_10.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – Zabbix Administration | Housekeeping, TimescaleDB-specific options
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the TimescaleDB functionality with your Zabbix setup is a solid integration
    with your PostgreSQL database. The extension is supported by Zabbix, and you can
    expect it to only get better in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, how TimescaleDB works is by dividing up your PostgreSQL hypertable into
    time-based chunks. If we look at the following figure, we can see how that looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10 – TimescaleDB hypertable chunks diagram](img/B19803_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – TimescaleDB hypertable chunks diagram
  prefs: []
  type: TYPE_NORMAL
- en: These time-based chunks are a lot faster to drop from the database than using
    the Zabbix housekeeper. The Zabbix housekeeper goes through our database data
    line by line to check the UNIX timestamp, and then it drops the line when it reaches
    data that is older than specified. This takes time and resources. Dropping a chunk,
    though, is almost instantaneous.
  prefs: []
  type: TYPE_NORMAL
- en: Another great thing about using TimescaleDB with a Zabbix database is that we
    can still use the frontend item history and trend configuration. On top of that,
    TimescaleDB can compress our data, to keep databases smaller.
  prefs: []
  type: TYPE_NORMAL
- en: The downside is that we can’t specify different history and trends for different
    items; it’s all global now.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe details the installation of PostgreSQL TimescaleDB. As this process
    is constantly changing, you might need to include some new information from the
    official TimescaleDB documentation. Check out their documentation here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.timescale.com/latest/getting-started/installation/rhel-centos/installation-yum](https://docs.timescale.com/latest/getting-started/installation/rhel-centos/installation-yum)'
  prefs: []
  type: TYPE_NORMAL
- en: Securing your Zabbix MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another great added feature for the Zabbix server is the ability to encrypt
    data between the database and Zabbix components. This is particularly useful when
    you are running a split database and the Zabbix server over the network. A **Man-in-the-Middle**
    (**MITM**) attack or other attacks can be executed on the network to gain access
    to your monitoring data.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll set up MySQL encryption between Zabbix components and
    the database to add another layer of security.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need a Zabbix setup that uses an external database. I’ll be
    using the Linux `lar-book-secure-db` and `lar-book-secure-zbx` hosts.
  prefs: []
  type: TYPE_NORMAL
- en: The new server called `lar-book-secure-zbx` will be used to connect externally
    to the `lar-book-secure-db` database server. The database servers won’t run our
    Zabbix server; this process will run on `lar-book-secure-zbx`.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that MariaDB is already installed on the `lar-book-secure-db` host
    and that you are running a recent supported version that is able to use encryption.
    If you don’t know how to upgrade your database, check out the recipe named *Upgrading
    Zabbix database from older MariaDB versions to MariaDB 10.5* in [*Chapter 11*](B19803_11.xhtml#_idTextAnchor2025),
    *Maintaining Your Zabbix Setup*, or check the documentation online.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure your host files on both hosts from the *Getting ready* section contain
    the hostname and IP for your Linux hosts and edit the file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, fill in the file with your hostnames and IPs. It will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the **lar-book-secure-db** MySQL server, if you haven’t already, create
    the Zabbix database by logging in to MySQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, issue the following command to create the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, make sure to create a user that will be able to access the database securely.
    Make sure the IP matches the IP from the Zabbix server (and one for the Zabbix
    frontend if they are separate):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Quit MySQL and then make sure to run the secure **mysql** script with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to **lar-book-secure-zbx** and install the Zabbix server repo with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s add the MariaDB repository on our server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, install the Zabbix server and its required components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following RHEL-based command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following Ubuntu command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the Zabbix server, connect to the remote database server and import the
    database schema and default data with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we are going to open the file called **openssl.cnf** and edit it by issuing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this file, we need to edit the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It will look like this filled out completely:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 12.11 – OpenSSL config file \uFEFFwith our personal defaults](img/B19803_12_12.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – OpenSSL config file with our personal defaults
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This means the default directory is **/etc/pki/CA**; if yours is different,
    act accordingly. Close the file by saving, and continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a new folder for our private certificates using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s create our key pair in the new folder. Issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will be prompted for a password now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 12.12 – Certificate generation respons\uFEFFe asking for a password](img/B19803_12_13.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – Certificate generation response asking for a password
  prefs: []
  type: TYPE_NORMAL
- en: You might also be prompted to enter some information about your company. It
    will use the default we filled in earlier, so you can just press *Enter* up until
    **Common Name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in **Root CA** for **Common Name** and add your email address like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Certificate generation response asking for information, Root
    CA](img/B19803_12_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – Certificate generation response asking for information, Root
    CA
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up is creating the actual signed certificates that our Zabbix server will
    use. Let’s make sure that OpenSSL has the right files to keep track of signed
    certificates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the folders to keep our certificates in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s create our certificate signing request for the **lar-book-secure-zbx**
    Zabbix server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will be prompted to add a password and your company information again.
    Use the default up until **Common Name**. We will fill out our **Common Name**,
    which will be the server hostname, and we’ll add our email address like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Certificate generation response asking for information, lar-book-secure-zbx](img/B19803_12_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – Certificate generation response asking for information, lar-book-secure-zbx
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s do the same for our **lar-book-secure-db** server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The response will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.15 – Certificate generation response asking for information, lar-book-secure-db](img/Image96555.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – Certificate generation response asking for information, lar-book-secure-db
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Our certificates need to be created without a password; otherwise, our MariaDB
    and Zabbix applications won’t be able to use them. Make sure to specify the **-****nodes**
    option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, sign the certificate for **lar-book-secure-zbx** with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will be prompted with the question **Sign the certificate? [y/n]**. Answer
    this and all the following questions with **Y**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s do the same thing for the **lar-book-secure-db** certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s log in to the **lar-book-secure-db** MySQL server and create a directory
    for our newly created certificates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the right permissions to the folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, back on the new **lar-book-secure-zbx** Zabbix server, copy over the files
    to the database server with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, back on the **lar-book-secure-db** MySQL server, add the right permissions
    to the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the MariaDB configuration file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the configuration file under the **[****mysqld]**
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to MySQL with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure our Zabbix MySQL user requires SSL encryption with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure the IP matches the IP from the Zabbix server (and one for the Zabbix
    frontend, if they are separated), just like we did in *step 2*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Quit out of the MariaDB CLI and then restart MariaDB with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, back on the **lar-book-secure-zbx** Zabbix server, create a new folder
    for our certificates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the certificates over to this folder with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the Zabbix server configuration file to use these certificates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure the following lines match our **lar-book-secure-db** database server’s
    setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, make sure our SSL-related configuration matches our new files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, make sure to add the right permissions to the SSL-related files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start and enable the Zabbix server with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'RHEL-based systems:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**systemctl restart zabbix-server zabbix-agent2** **httpd php-fpm**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**systemctl enable zabbix-server zabbix-agent2** **httpd php-fpm**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ubuntu systems:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**systemctl restart zabbix-server zabbix-agent2** **apache2 php-fpm**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**systemctl enable zabbix-server zabbix-agent2** **apache2 php-fpm**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, navigate to the Zabbix frontend and fill in the right information, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 12.16 – Zabbix frontend c\uFEFFonfiguration, database step](img/B19803_12_16.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – Zabbix frontend configuration, database step
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click **Next step**, we need to fill out some more information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.17 – Zabbix frontend configuration, server details step](img/B19803_12_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – Zabbix frontend configuration, server details step
  prefs: []
  type: TYPE_NORMAL
- en: Then, after clicking **Next step**, **Next step**, and **Finish**, the frontend
    should now be configured and working.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This was quite a long recipe, so let’s break it down quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: In *steps 1* through *9*, we prepared our servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In *steps 10* through *37*, we executed everything needed to create our certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In *steps 38* through *47*, we set up our Zabbix frontend for encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Going through all these steps, setting up your Zabbix database securely can
    seem like quite a daunting task, and it can be. Certificates, login procedures,
    loads of settings, and more can all add up to become very complicated, which is
    why I’d always recommend diving deeper into encryption methods before trying to
    set this up yourself.
  prefs: []
  type: TYPE_NORMAL
- en: If your setup requires encryption, though, this recipe is a solid starting point
    for your first-time setup. It works very well in an internal setting, as we are
    using private certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to renew your SSL certificates, as they are only valid for however
    long we defined. In this case, it’s 365 days, so we will renew them every year.
    It’s also a good plan to monitor the expiry date of the certificate and create
    an alert in Zabbix for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'All Zabbix components, except for communication between the Zabbix server and
    Zabbix frontend, can be encrypted, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.18 – Zabbix encryption scheme possibilities](img/B19803_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – Zabbix encryption scheme possibilities
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve set up encryption between the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Zabbix server and MariaDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Zabbix frontend and MariaDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This means that when our Zabbix server or frontend requests or writes data
    to our database, it will be encrypted. Because our Zabbix applications are running
    on a different server than our Zabbix database, this might be important. For example,
    our setup might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 12.19 – Zabbix setup with an externa\uFEFFl network diagram](img/B19803_12_19.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 12.19 – Zabbix setup with an external network diagram
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say the cloud is called **Some company** in a network that isn’t managed
    by us. There are several switches and routers in this network that are used for
    numerous clients with their own VLANs. If one of these devices gets compromised
    somehow, all of our Zabbix data could be seen by others.
  prefs: []
  type: TYPE_NORMAL
- en: Even if the network equipment is ours, there might still be a compromised device
    in the network and our data can be seen. This is why you might want to add encryption,
    to add that extra layer of security. Whether it’s breaches in other companies
    and their network that you want to secure against or whether it’s against your
    own breaches, securing your database as we did in this recipe might just save
    you from leaking all that data.
  prefs: []
  type: TYPE_NORMAL
