["```\n$ sudo yum install NetworkManager libvirt –y\n```", "```\n    $ ./crc setup\n    ```", "```\n    $ ./crc config set cpus 4\n    $ ./crc config set memory 20480\n    ```", "```\n    $ ./crc start\n    ```", "```\n    $ tar -xvzf tkn-linux-amd64-0.17.2.tar.gz\n    $ sudo cp tkn /usr/local/bin\n    ```", "```\n    $ tkn version\n    Client version: 0.17.2\n    Pipeline version: unknown, pipeline controller may be installed in another namespace please use tkn version -n {namespace}\n    ```", "```\n# You need to login at the cluster first using \"oc login\"\n$ oc login -u <user> https://<ocp-api-url>:6443\n$ tkn clustertasks ls\n```", "```\n$ oc login -u kubeadmin https://api.crc.testing:6443\n(.. omitted ..)\n$ tkn clustertasks ls\nNAME               DESCRIPTION              AGE\nbuildah            Buildah task builds...   2 days ago\nbuildah-1-5-0      Buildah task builds...   2 days ago\ngit-cli            This task can be us...   2 days ago\ngit-clone          These Tasks are Git...   2 days ago\n(.. omitted ..)\n```", "```\napiVersion: tekton.dev/v1beta1 \nkind: Task #[1]\nmetadata:\n  name: apply-manifests #[2]\nspec:\n  workspaces: #[3]\n  - name: source\n  params: #[4]\n  - name: manifest_dir\n    description: The directory in the source that contains yaml manifests\n    type: string\n    default: \"k8s\"\n  steps: #[5]\n    - name: apply\n      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest #[6]\n      workingDir: /workspace/source\n#[7]\n      command: [\"/bin/bash\", \"-c\"]\n      args:\n        - |-\n          echo Applying manifests in $(inputs.params.manifest_dir) directory\n          oc apply -f $(inputs.params.manifest_dir)\n          echo -----------------------------------\n```", "```\n    $ oc new-project pipelines-sample\n    ```", "```\n    $ oc get serviceaccount pipeline \n    NAME       SECRETS   AGE\n    pipeline   2         33s\n    ```", "```\n    $ oc apply -f  https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/Tasks/apply-manifests.yaml\n    task.tekton.dev/apply-manifests created\n    ```", "```\n    $ tkn tasks ls\n    NAME              DESCRIPTION   AGE\n    apply-manifests                 17 seconds ago\n    ```", "```\n    $ oc apply -f  https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/Tasks/update-image-version.yaml\n    $ oc apply -f  https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/Tasks/check-route-health.yaml\n    $ tkn tasks ls\n    NAME              DESCRIPTION   AGE\n    apply-manifests                 17 seconds ago\n    heck-app-health                     10 seconds ago\n    update-deployment                 8 seconds ago\n    ```", "```\n$ oc apply -f https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/PipelineRun/pvc.yaml\n```", "```\napiVersion: tekton.dev/v1beta1 \nkind: TaskRun \nmetadata: \n  name: git-clone #[1]\nspec: \n  taskRef: \n    name: git-clone #[2]\n    kind: ClusterTask #[3]\n  params: #[4]\n  - name: url \n    value: \"https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook\"\n  - name: subdirectory \n    value: \"\" \n  - name: deleteExisting \n    value: \"true\" \n  - name: revision \n    value: \"main\" \n  workspaces: #[5]\n  - name: output \n    persistentVolumeClaim: \n      claimName: source-pvc  \n```", "```\n$ oc apply -f https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/Tasks/git-clone-taskrun.yaml\n```", "```\n$ tkn taskrun logs git-clone -f\n[clone] + '[' false = true ']'\n[clone] + '[' false = true ']'\n[clone] + CHECKOUT_DIR=/workspace/output/\n[clone] + '[' true = true ']'\n[clone] + cleandir\n[clone] + '[' -d /workspace/output/ ']'\n(.. ommited ..)\n```", "```\n$ oc apply -f https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/Tasks/apply-manifests-taskrun.yaml\n```", "```\n$ tkn taskrun logs run-apply-manifests -f\n[apply] Applying manifests in ./sample-go-app/articles-api/k8s directory\n[apply] deployment.apps/clouds-api created\n[apply] service/clouds-api created\n[apply] route/clouds-api created\n```", "```\napiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: build-and-deploy\n```", "```\n    spec:\n      workspaces:\n      - name: shared-workspace\n    ```", "```\n      params:\n      - name: deployment-name\n        type: string\n        description: name of the deployment to be patched\n      - name: git-url\n        type: string\n        description: url of the git repo for the code of deployment\n      - name: git-revision\n        type: string\n        description: revision to be used from repo of the code for deployment\n        default: \"master\"\n      - name: IMAGE\n        type: string\n        description: image to be built from the code\n    ```", "```\n    - name: apply-manifests\n      taskRef:\n        name: apply-manifests\n      workspaces:\n      - name: source\n        workspace: shared-workspace\n      runAfter:\n      - build-image\n    ```", "```\n    - name: fetch-repository\n      taskRef:\n        name: git-clone\n        kind: ClusterTask\n      workspaces:\n      - name: output\n        workspace: shared-workspace\n      params:\n      - name: url\n        value: $(params.git-url)\n      - name: subdirectory\n        value: \"\"\n      - name: deleteExisting\n        value: \"true\"\n      - name: revision\n        value: $(params.git-revision)\n    ```", "```\n$ oc apply -f https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/Pipeline/build-deploy.yaml\n$ tkn pipelines ls\nNAME               AGE            LAST RUN   STARTED   DURATION   STATUS\nbuild-and-deploy   1 minute ago   ---        ---   \n```", "```\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: build-deploy-api-pipelinerun #[1]\nspec:\n  pipelineRef:\n    name: build-and-deploy #[2]\n  params: #[3]\n  - name: deployment-name\n    value: clouds-api\n  - name: git-url\n    value: https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook.git\n  - name: IMAGE\n    value:  image-registry.openshift-image-registry.svc:5000/pipelines-sample/clouds-api\n  workspaces: #[4]\n  - name: shared-workspace\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 500Mi\n```", "```\n$ oc apply -f https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/PipelineRun/clouds-api-build-deploy.yaml\n$ tkn pipelinerun logs build-deploy-api-pipelinerun -f\n[fetch-repository : clone] + '[' false = true ']'\n[fetch-repository : clone] + '[' false = true ']'\n[fetch-repository : clone] + CHECKOUT_DIR=/workspace/output/\n(.. omitted ..)\n[check-app-health : apply] Waiting for application articles-api to be ready.\n[check-app-health : apply] Checking if application is available at the route endpoint\n[check-app-health : apply] Application is available at http://articles-api-pipelines-sample.apps.cluster-gf.gf.sandbox1171.opentlc.com/cloud\n[check-app-health : apply] ----------------------------------\n```", "```\napiVersion: triggers.tekton.dev/v1beta1\nkind: TriggerBinding\nmetadata:\n  name: clouds-api-tb #[1]\nspec:\n  params: #[2]\n  - name: git-repo-url\n    value: $(body.repository.url)\n  - name: git-repo-name\n    value: $(body.repository.name)\n  - name: git-revision\n    value: $(body.head_commit.id)\n```", "```\n$ oc apply -f https://raw.githubusercontent.com/\n```", "```\napiVersion: triggers.tekton.dev/v1beta1\nkind: TriggerTemplate\nmetadata:\n  name: clouds-api-tt #[1]\nspec: \n  params: #[2]\n  - name: git-repo-url\n    description: The git repository url\n  - name: git-revision\n    description: The git revision\n    default: master\n  - name: git-repo-name\n    description: The name of the deployment to be created / patched\n  resourcetemplates: #[3]\n  - apiVersion: tekton.dev/v1beta1\n    kind: PipelineRun\n    metadata:\n      generateName: build-deploy-\n    spec:\n      serviceAccountName: pipeline\n      pipelineRef:\n        name: build-and-deploy\n      params:\n      - name: deployment-name\n        value: clouds-api\n      - name: git-url\n        value: $(tt.params.git-repo-url)\n      - name: git-revision\n        value: $(tt.params.git-revision)\n      - name: IMAGE\n        value: image-registry.openshift-image-registry.svc:5000/pipelines-sample/clouds-api\n      workspaces:\n      - name: shared-workspace\n        volumeClaimTemplate:\n          spec:\n            accessModes:\n              - ReadWriteOnce\n            resources:\n              requests:\n                storage: 500Mi\n```", "```\n$ oc apply -f https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/Trigger/clouds-api-tt.yaml\n```", "```\napiVersion: triggers.tekton.dev/v1beta1\nkind: Trigger\nmetadata:\n  name: clouds-api-trigger #[1]\nspec:\n  serviceAccountName: pipeline\n  interceptors: #[2]\n    - ref:\n        name: \"github\" #[3]\n      params:\n        - name: \"secretRef\" #[4]\n          value:\n            secretName: github-secret\n            secretKey: secretToken\n        - name: \"eventTypes\"\n          value: [\"push\"] #[5]\n  bindings:\n    - ref: clouds-api-tb #[6]\n  template:\n    ref: clouds-api-tt #[7]\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-secret\ntype: Opaque\nstringData:\n  secretToken: \"tekton\"\n```", "```\n$ oc apply -f https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/Trigger/clouds-api-trigger.yaml\n```", "```\napiVersion: triggers.tekton.dev/v1beta1\nkind: EventListener\nmetadata:\n  name: clouds-api-el #[1]\nspec:\n  serviceAccountName: pipeline\n  triggers:\n    - triggerRef: vote-trigger #[2]\n```", "```\n$ oc apply -f https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/blob/main/chapter09/Trigger/clouds-api-el.yaml\n```", "```\n$ oc expose svc el-clouds-api-el\n```", "```\n    $ echo \"$(oc  get route el-clouds-api-el --template='http://{{.spec.host}}')\"\n    ```", "```\n$ git commit -m \"empty-commit\" --allow-empty && git push origin main\n```", "```\n    ---\n    resources:\n      - deployment.yaml #add two spaces at the begging of the line\n      - service.yaml #add two spaces at the begging of the line\n      - route.yaml #add two spaces at the begging of the line\n    ```", "```\n    $ git add *\n    $ git commit -m \"fixed yaml files\"\n    $ git push\n    ```"]