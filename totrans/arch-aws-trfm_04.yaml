- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Discovering Best Practices for Terraform IaC Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you begin to work with Terraform, it’s important to understand the best practices
    for **Infrastructure As Code** (**IaC**) projects. In this chapter, we’ll explore
    some key best practices for Terraform, including how to maintain, execute, and
    secure your IaC projects. We’ll also look at ways to implement Terraform within
    your DevOps or cloud teams. By following these best practices, you’ll be able
    to create efficient and reliable infrastructure deployments with Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at these main topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to maintain IaC projects with Terraform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to execute IaC projects with Terraform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to secure IaC projects with Terraform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Terraform in DevOps or cloud teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to maintain IaC projects with Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maintaining IaC projects with Terraform is crucial to ensure their longevity,
    accuracy, and security. This involves managing the state, updates, changes, and
    versions of infrastructure configurations, among other tasks. In this chapter,
    we will discuss best practices for maintaining IaC projects with Terraform, covering
    topics such as managing state, employing version control, testing, and more. By
    embracing a well-defined standard module structure, you lay the foundation for
    streamlined development, enhanced collaboration, and the mastery of resource orchestration
    at scale.
  prefs: []
  type: TYPE_NORMAL
- en: Follow a standard module structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modules in Terraform offer a way of packaging and reusing resource configurations.
    They are essentially containers that group multiple resources that are used together.
    Modules consist of a collection of `.tf` and/or `.tfvars` files kept together
    in a directory. Elevate your deployment game by following these best practices,
    each a stepping stone toward resourceful and harmonious provisioning:'
  prefs: []
  type: TYPE_NORMAL
- en: Start each module with a `main.tf` file, which contains the resources by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include a `README.md` file in Markdown format in every module. This file should
    contain basic documentation about the module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an `examples/` folder in each module with a separate subdirectory for
    each example. For each example, include a detailed `README.md` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use descriptive names for resource files, such as `network.tf`, `instances.tf`,
    or `loadbalancer.tf`, to create logical groupings of resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid creating a separate file for each resource. Instead, group resources by
    their shared purpose. For example, combine `google_dns_managed_zone` and `google_dns_record_set`
    in `dns.tf`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The module’s root directory should only contain Terraform (`.tf`) and repository
    metadata files (such as `README.md` and `CHANGELOG.md`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place additional documentation in a `docs/` subdirectory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopt a naming convention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Naming conventions in IaC are very important for sustainability and setting
    a common practice for naming resources in teams:'
  prefs: []
  type: TYPE_NORMAL
- en: Use nouns for resource names. For example, you could name them `aws_instance`
    or `google_storage_bucket`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make resource names singular; for example, use `aws_instance` instead of `aws_instances`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use meaningful names for resources of the same type to differentiate between
    them; for example, you might name two load balancers `primary` and `secondary`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use nouns for data source names – for example, `aws_availability_zones` and
    `google_project`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some cases, data sources can return a list and can be plural. For example,
    `aws_availability_zones` returns a list of Availability Zones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name the resource `main` to simplify references to a resource that is the only
    one of its type in the module. An example is `aws_security_group_rule.main`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It takes extra mental work to remember `aws_resource.my_special_resource.id`
    versus `aws_resource.main.id`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Attribute names in Terraform configuration blocks should use all lowercase letters
    and underscores to separate words.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistency is important, so all configuration objects, including resource types
    and data source types, should also use underscores to delimit multiple words.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is not recommended:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is recommended:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the resource name, don’t repeat the resource type. For example, the following
    is not recommended:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'However, this is recommended:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use variables carefully
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Discover how to wield the might of variables judiciously, shaping dynamic environments
    and empowering your deployments with adaptability and efficiency:'
  prefs: []
  type: TYPE_NORMAL
- en: All variables should be declared in the `variables.tf` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose meaningful names for variables that accurately describe their purpose
    or use within the Terraform configuration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have inputs, local variables, or outputs that represent numeric values,
    such as disk sizes or RAM size, make sure to include the appropriate units in
    their names, e.g., `ram_size_gb`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean variables should be named with positive and meaningful names to simplify
    the conditional logic. For instance, a variable indicating whether external access
    is enabled can be named `enable_external_access`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Include descriptions for variables to provide additional context for new developers
    that descriptive names may not convey. Descriptions are automatically included
    in a published module’s auto-generated documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide data types for defined variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If appropriate, provide default values for variables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide default values for variables that have environment-independent values,
    such as disk size.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For variables that have values specific to a particular environment (e.g., `project_id`),
    it is recommended not to provide default values. This ensures that the calling
    module provides the necessary values and avoids unintentional misconfiguration.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use empty defaults for variables (such as empty strings or lists) only when
    leaving the variable empty is a valid preference that the underlying APIs don’t
    reject. Always use them in the same order as in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use variables only for values that need to be different for each instance or
    environment. Before exposing a variable, make sure that there is a specific need
    to change that variable. If the possibility of a variable being used is minimal,
    it’s best to not expose it at all.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use a plural name when defining a variable of a type map or list, as
    many values will potentially be read in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expose outputs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Exposing outputs in Terraform can help other modules reference useful values
    and reduce the amount of redundant code in your project. Here are some tips for
    exposing your outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: Organize all outputs in an `outputs.tf` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use meaningful descriptions for all outputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document output descriptions in the `README.md` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize tools such as `terraform-docs` to auto-generate output descriptions
    on commit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output all useful values that root modules might need to refer to or share
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For open source or heavily used modules, expose all outputs that have the potential
    for consumption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid passing outputs directly through input variables, as this prevents them
    from being properly added to the dependency graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To ensure that implicit dependencies are created, make sure that outputs reference
    attributes from resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of referencing an input variable for an instance directly, pass the
    attribute through, as shown in the example provided next.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is recommended:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is not recommended:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can find more details on the best practices for using Terraform at [https://cloud.google.com/docs/terraform/best-practices-for-terraform](https://cloud.google.com/docs/terraform/best-practices-for-terraform).
  prefs: []
  type: TYPE_NORMAL
- en: Use data sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data sources enable Terraform to use data defined externally, such as in another
    Terraform configuration, a separate tool, or a function. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Place data sources next to the resources that reference them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider moving a large number of data sources to a dedicated `data.tf` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use variable or resource interpolation to fetch data relative to the current
    environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leverage tfvars files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For anything that’s not a secret, use `tfvars` files as much as possible for
    all your inputs and add them to your source control. That way, you can keep track
    of values and revert to a previous commit if you make a mistake, and you can see
    what’s deployed at a glance. This should also be where most of your deployment
    changes happen.
  prefs: []
  type: TYPE_NORMAL
- en: Separate variables and inputs based on their functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your `variables.tf` file and `terraform.tfvars`, use comments to separate
    them based on their function. This makes your code more readable and easy to change
    when working with it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – An example tfvars](img/B18198_04_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – An example tfvars
  prefs: []
  type: TYPE_NORMAL
- en: Limit the use of custom scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Limit the use of scripts in your Terraform configuration to only when it is
    necessary. Keep in mind that the state of resources created through scripts is
    not managed by Terraform and can cause issues in the future. It is recommended
    to use Terraform’s built-in resource types and providers whenever possible. Here
    are some key steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to avoid using custom scripts as much as possible. Instead, rely on Terraform
    resources to define the desired behavior for your infrastructure. However, if
    there are cases where Terraform resources don’t provide the functionality you
    need, use custom scripts sparingly. Keep in mind that resources created through
    scripts are not accounted for or managed by Terraform, so they may introduce complexities
    in managing your infrastructure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearly document the reason for any custom scripts used and have a deprecation
    plan, if possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioners in Terraform can be used to call custom scripts, including the
    `local-exec` provisioner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organize custom scripts that Terraform will call using provisioners in a `scripts/`
    directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include helper scripts in a separate directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Organizing helper scripts in a separate directory is a good practice for maintaining
    Terraform IaC projects. To form a good foundation for your IaC project, consider
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep helper scripts that are not called by Terraform in a directory named `helpers/`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document all helper scripts in the `README.md` file by providing a description
    and example invocations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For helper scripts that accept arguments, provide argument-checking and `--help`
    output to ensure that the script is being used correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put static files in a separate directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Amplify your AWS infrastructure orchestration prowess by embracing the power
    of organization. Learn how strategically separating static files into dedicated
    directories empowers efficient resource management and elevates the clarity of
    your Terraform-powered deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `files/` directory for static files that Terraform references but doesn’t
    execute, such as startup scripts loaded onto Compute Engine instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place lengthy HereDocs in external files, separate from their HCL code, and
    reference them with the `file()` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `.tftpl` file extension for files that are read in by using the Terraform
    `templatefile()` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place templates in a `templates/` directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protect stateful resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore essential strategies to protect the core of your infrastructure, ensuring
    resilience, compliance, and seamless continuity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to enable deletion protection for stateful resources such as databases.
    This is an example of enabling deletion protection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Use built-in formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to maintain consistency and readability in Terraform code. To
    ensure this, use the Terraform `fmt` command to automatically format all Terraform
    files according to the official Terraform style guide. This helps maintain consistency
    and makes it easier for others to read and understand your code.
  prefs: []
  type: TYPE_NORMAL
- en: Limit the complexity of expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Avoid overly complex interpolated expressions; if an expression requires multiple
    functions, consider splitting it into smaller, more readable expressions using
    local values.
  prefs: []
  type: TYPE_NORMAL
- en: Use only one ternary operation per line, and use multiple local values instead
    of building up complex logic in a single line.
  prefs: []
  type: TYPE_NORMAL
- en: Use count for conditional values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the count meta-argument to conditionally instantiate a resource. This is
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This Terraform code snippet declares a variable named `readers` with a list
    type and an empty default value. The description of the variable is not included
    in the code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The code also defines a resource of type `resource_type` with the `reference_name`
    reference name. The count meta-argument is used to conditionally create the resource
    based on the length of the `readers` list variable. If the length of the `readers`
    list is `0`, the resource will not be created (count = `0`). Otherwise, if the
    length is greater than `0`, the resource will be created (count = `1`).
  prefs: []
  type: TYPE_NORMAL
- en: Use for_each for iterated resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `for_each` meta-argument when creating multiple copies of a resource
    based on an input resource.
  prefs: []
  type: TYPE_NORMAL
- en: Publish modules to a registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Publish reusable modules to a module registry to increase reusability and make
    it easier for your team to use.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will explore how to secure IaC projects with Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: How to execute IaC projects with Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every team always starts their Terraform journey by running Terraform from their
    development environments or local computers.
  prefs: []
  type: TYPE_NORMAL
- en: As the team starts to adopt more Terraform and IaC, you will need more automation
    to ensure consistency between runs and to provide other important features such
    as integration with version control, code reviews, environment management, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Terraform automation can be achieved in diverse forms and to different extents.
    Some teams might persist in running Terraform locally, using customized wrapper
    scripts to ensure a uniform working directory for Terraform’s operation. Meanwhile,
    other teams fully operate Terraform within orchestration tools such as Jenkins,
    GitHub Actions, Terraform Cloud, or Terraform Enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are steps to create automated execution pipelines for Terraform:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a version control system such as GitHub, Git, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store all your templates/files in version control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select an automation pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decide where to store your state (e.g., AWS S3, Terraform Cloud, etc.).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the automation pipeline script, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the Terraform **command-line interface** (**CLI**) exists in the
    automation pipeline.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify connectivity to your state location and cloud provider.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize the Terraform working directory.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Produce a plan for changing resources to match the current configuration.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a human operator review that plan to ensure it is acceptable.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the changes described in the plan.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having established the foundational aspects of executing IaC projects with
    Terraform, let’s now shift our focus toward a critical facet: securing these projects.
    By seamlessly integrating robust security practices into your Terraform workflows,
    you not only safeguard your infrastructure but also fortify your development pipeline,
    ensuring the holistic success of your AWS environment.'
  prefs: []
  type: TYPE_NORMAL
- en: How to secure IaC projects with Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using IaC or Terraform to deploy and manage resources makes the process faster
    and easier, eliminating the need for one-time scripts or manual steps. With Terraform,
    infrastructure can be managed in a similar way as applications and services, including
    servers, databases, networks, Kubernetes clusters, and entire application stacks.
  prefs: []
  type: TYPE_NORMAL
- en: While IaC may not present an immediate risk or attack surface, it’s still important
    to consider security. However, because IaC is often managed by engineering and
    DevOps teams, security measures may be overlooked in favor of monitoring cloud
    resources already in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'Managing infrastructure at scale can be complex, and security and DevOps teams
    may not have the necessary expertise, access, or tools to properly address security
    concerns. This can lead to misconfigured cloud resources, such as engineers and
    developers missing important security measures. Here are some common mistakes:'
  prefs: []
  type: TYPE_NORMAL
- en: Default configurations that haven’t been optimized for security are used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging is not enabled, making it difficult to troubleshoot or assemble an audit
    trail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unencrypted databases are used, leaving data vulnerable to corruption and exfiltration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure protocols (e.g., not using HTTPS) are deployed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foundational governance and prevention systems for security or misconfiguration
    are lacking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IaC involves defining and managing configurations using code, which means that
    all security configurations must also be defined in code. Here are some tips for
    securing your Terraform projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that your state location is secure and not publicly accessible and provide
    appropriate access to your team for operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep private modules in private module registries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not hardcode sensitive information such as secrets, credentials, keys, or
    certificates in Terraform files or variables. Instead, retrieve them from secure
    locations at runtime.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a tool such as Checkov to scan your Terraform templates and directories
    for misconfigurations related to encryption, network, backup, IAM, and other security
    and compliance policies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate IaC scanning in your **continuous integration/continuous deployment**
    (**CI/CD**) pipeline for consistency and provide automated feedback as part of
    the CI run to prevent misconfigured code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a version control system, lock your main deployment branch, and always run
    automated checks and get peer reviews and approval before deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carefully review the `terraform plan` results to avoid any unexpected resource
    destruction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having fortified your IaC projects with Terraform’s security measures, the next
    significant stride is seamlessly integrating Terraform into your DevOps or cloud
    teams. Discover the pivotal steps to harmoniously weave Terraform into your team’s
    practices, enhancing collaboration, efficiency, and the realization of a cohesive
    and empowered AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Terraform in DevOps or cloud teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Implementing Terraform in DevOps or cloud teams involves more than just adopting
    the tool. It also requires understanding the process, the team’s capabilities,
    and the organization’s culture. Here are some steps you can follow to successfully
    implement Terraform in your DevOps or cloud teams:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Start with a pilot project**: Begin with a small project that can demonstrate
    the value of Terraform to the team. It could be a simple infrastructure deployment,
    such as a VPC, or a more complex application stack.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identify the team’s knowledge gaps**: Terraform requires knowledge of cloud
    infrastructure, coding, and best practices. Identify any gaps in the team’s knowledge
    and create a plan to address them.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Encourage collaboration and knowledge sharing**: Terraform is a collaborative
    tool that requires contributions from multiple teams. Encourage your teams to
    share their knowledge, experiences, and best practices.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Implement a version control system (VCS)**: Terraform code is code and should
    be treated like any other code. Implement a **VCS** to manage changes to the infrastructure
    code.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Implement a CI/CD pipeline**: Automate the testing, building, and deployment
    of Terraform code using a CI/CD pipeline. This ensures that infrastructure changes
    are thoroughly tested before deployment.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Implement IaC best practices**: Use best practices for IaC development, such
    as modularization, code reviews, and testing. This ensures that your infrastructure
    code is maintainable, scalable, and secure.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Monitor and optimize**: Implement monitoring and alerting to identify and
    address issues as they arise. Optimize your infrastructure by reviewing logs and
    metrics and identifying areas for improvement.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By following these steps, you can successfully implement Terraform in your DevOps
    or cloud teams and reap the benefits of IaC.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the best practices for Terraform IaC projects, including
    organizing files, defining variables, using data sources, and managing state.
    We also discussed how to maintain IaC projects with Terraform, including managing
    resources, deploying changes, and employing version control. Additionally, we
    explored how to execute IaC projects with Terraform, including using modules,
    providers, and Terraform Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we addressed how to secure IaC projects with Terraform, including securing
    state, avoiding hardcoded secrets, and using tools such as Checkov. By following
    these best practices, DevOps and cloud teams can effectively use Terraform to
    manage infrastructure at scale while maintaining security and compliance.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll delve into the fundamentals of planning Terraform
    infrastructure projects. We’ll kick off with guidance on crafting your initial
    Terraform template in AWS. Next, we’ll deepen your comprehension of AWS providers
    and Terraform modules, essential elements for any Terraform project.
  prefs: []
  type: TYPE_NORMAL
- en: Part 2:Become an Expert in Terraform with AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we dive deeper into the intricacies of Terraform on AWS, guiding
    you through the process of becoming an expert in deploying and managing cloud
    infrastructure. We start by discussing the importance of planning and designing
    infrastructure projects in AWS, ensuring a solid foundation for your Terraform
    deployments. You’ll learn how to make informed decisions for your AWS Terraform
    projects, considering factors such as resource selection, configuration, and deployment
    strategies. We then move on to the practical implementation of Terraform in various
    projects, including deploying serverless applications and containers in AWS. By
    the end of this part, you’ll have a comprehensive understanding of how to expertly
    use Terraform to deploy and manage complex infrastructure on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18198_05.xhtml#_idTextAnchor079)*, Planning and Designing Infrastructure
    Projects in AWS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18198_06.xhtml#_idTextAnchor126)*, Making Decisions for Terraform
    Projects with AWS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18198_07.xhtml#_idTextAnchor141)*, Implementing Terraform in
    Projects*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18198_08.xhtml#_idTextAnchor156)*, Deploying Serverless Projects
    with Terraform*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18198_09.xhtml#_idTextAnchor169)*, Deploying Containers in AWS
    with Terraform*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
