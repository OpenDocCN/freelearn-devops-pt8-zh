- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Discovering Best Practices for Terraform IaC Projects
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Terraform IaC项目的最佳实践
- en: As you begin to work with Terraform, it’s important to understand the best practices
    for **Infrastructure As Code** (**IaC**) projects. In this chapter, we’ll explore
    some key best practices for Terraform, including how to maintain, execute, and
    secure your IaC projects. We’ll also look at ways to implement Terraform within
    your DevOps or cloud teams. By following these best practices, you’ll be able
    to create efficient and reliable infrastructure deployments with Terraform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用Terraform时，理解**基础设施即代码**（**IaC**）项目的最佳实践非常重要。在本章中，我们将探讨一些Terraform的关键最佳实践，包括如何维护、执行和保护你的IaC项目。我们还将探讨如何在DevOps或云团队中实施Terraform。通过遵循这些最佳实践，你将能够使用Terraform创建高效且可靠的基础设施部署。
- en: 'We will look at these main topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主要主题：
- en: How to maintain IaC projects with Terraform
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Terraform维护IaC项目
- en: How to execute IaC projects with Terraform
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Terraform执行IaC项目
- en: How to secure IaC projects with Terraform
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Terraform保护IaC项目
- en: Implementing Terraform in DevOps or cloud teams
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DevOps或云团队中实施Terraform
- en: How to maintain IaC projects with Terraform
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用Terraform维护IaC项目
- en: Maintaining IaC projects with Terraform is crucial to ensure their longevity,
    accuracy, and security. This involves managing the state, updates, changes, and
    versions of infrastructure configurations, among other tasks. In this chapter,
    we will discuss best practices for maintaining IaC projects with Terraform, covering
    topics such as managing state, employing version control, testing, and more. By
    embracing a well-defined standard module structure, you lay the foundation for
    streamlined development, enhanced collaboration, and the mastery of resource orchestration
    at scale.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Terraform维护IaC项目至关重要，能够确保其长期有效性、准确性和安全性。这包括管理状态、更新、变更和基础设施配置的版本等任务。在本章中，我们将讨论使用Terraform维护IaC项目的最佳实践，涵盖管理状态、使用版本控制、测试等主题。通过采纳明确定义的标准模块结构，你为简化开发、提升协作以及在大规模中掌握资源编排奠定了基础。
- en: Follow a standard module structure
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遵循标准模块结构
- en: 'Modules in Terraform offer a way of packaging and reusing resource configurations.
    They are essentially containers that group multiple resources that are used together.
    Modules consist of a collection of `.tf` and/or `.tfvars` files kept together
    in a directory. Elevate your deployment game by following these best practices,
    each a stepping stone toward resourceful and harmonious provisioning:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform中的模块提供了一种打包和重用资源配置的方法。它们本质上是将多个一起使用的资源组合在一起的容器。模块由一组`.tf`和/或`.tfvars`文件组成，并保存在一个目录中。通过遵循这些最佳实践，提升你的部署能力，每一个步骤都是实现高效且和谐资源配置的垫脚石：
- en: Start each module with a `main.tf` file, which contains the resources by default.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个模块应以`main.tf`文件开始，默认包含资源。
- en: Include a `README.md` file in Markdown format in every module. This file should
    contain basic documentation about the module.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个模块中包含一个Markdown格式的`README.md`文件。该文件应包含关于模块的基本文档。
- en: Create an `examples/` folder in each module with a separate subdirectory for
    each example. For each example, include a detailed `README.md` file.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个模块中创建一个`examples/`文件夹，并为每个示例设置一个单独的子目录。每个示例都应包含一个详细的`README.md`文件。
- en: Use descriptive names for resource files, such as `network.tf`, `instances.tf`,
    or `loadbalancer.tf`, to create logical groupings of resources.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用描述性的资源文件名称，例如`network.tf`、`instances.tf`或`loadbalancer.tf`，以创建资源的逻辑分组。
- en: Avoid creating a separate file for each resource. Instead, group resources by
    their shared purpose. For example, combine `google_dns_managed_zone` and `google_dns_record_set`
    in `dns.tf`.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免为每个资源创建单独的文件。相反，应根据资源的共同目的进行分组。例如，将`google_dns_managed_zone`和`google_dns_record_set`合并到`dns.tf`中。
- en: The module’s root directory should only contain Terraform (`.tf`) and repository
    metadata files (such as `README.md` and `CHANGELOG.md`).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的根目录应仅包含Terraform（`.tf`）文件和仓库元数据文件（如`README.md`和`CHANGELOG.md`）。
- en: Place additional documentation in a `docs/` subdirectory.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将额外的文档放在`docs/`子目录中。
- en: Adopt a naming convention
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采用命名规范
- en: 'Naming conventions in IaC are very important for sustainability and setting
    a common practice for naming resources in teams:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在IaC中，命名规范对于可持续性和为团队设定统一的命名实践非常重要：
- en: Use nouns for resource names. For example, you could name them `aws_instance`
    or `google_storage_bucket`.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用名词作为资源名称。例如，你可以将它们命名为`aws_instance`或`google_storage_bucket`。
- en: Make resource names singular; for example, use `aws_instance` instead of `aws_instances`.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源名称应使用单数形式；例如，使用`aws_instance`而不是`aws_instances`。
- en: Use meaningful names for resources of the same type to differentiate between
    them; for example, you might name two load balancers `primary` and `secondary`.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用有意义的名称区分相同类型的资源；例如，你可以将两个负载均衡器命名为`primary`和`secondary`。
- en: Use nouns for data source names – for example, `aws_availability_zones` and
    `google_project`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据源名称应使用名词——例如`aws_availability_zones`和`google_project`。
- en: In some cases, data sources can return a list and can be plural. For example,
    `aws_availability_zones` returns a list of Availability Zones.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些情况下，数据源可以返回列表并且可以使用复数形式。例如，`aws_availability_zones`返回可用区列表。
- en: Name the resource `main` to simplify references to a resource that is the only
    one of its type in the module. An example is `aws_security_group_rule.main`.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将资源命名为`main`以简化对模块中唯一资源类型的引用。例如，`aws_security_group_rule.main`。
- en: It takes extra mental work to remember `aws_resource.my_special_resource.id`
    versus `aws_resource.main.id`.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住`aws_resource.my_special_resource.id`与`aws_resource.main.id`之间的区别需要额外的脑力。
- en: Attribute names in Terraform configuration blocks should use all lowercase letters
    and underscores to separate words.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform 配置块中的属性名称应使用全小写字母，并用下划线分隔单词。
- en: Consistency is important, so all configuration objects, including resource types
    and data source types, should also use underscores to delimit multiple words.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致性非常重要，因此所有配置对象，包括资源类型和数据源类型，也应使用下划线分隔多个单词。
- en: 'This is not recommended:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这不是推荐的做法：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is recommended:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是推荐的做法：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the resource name, don’t repeat the resource type. For example, the following
    is not recommended:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在资源名称中，不要重复资源类型。例如，以下做法不推荐：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, this is recommended:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，推荐的做法是：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Use variables carefully
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小心使用变量
- en: 'Discover how to wield the might of variables judiciously, shaping dynamic environments
    and empowering your deployments with adaptability and efficiency:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 发现如何明智地使用变量的强大功能，塑造动态环境，并赋予部署适应性和效率：
- en: All variables should be declared in the `variables.tf` file.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有变量应在`variables.tf`文件中声明。
- en: 'Choose meaningful names for variables that accurately describe their purpose
    or use within the Terraform configuration:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为变量选择有意义的名称，准确描述它们在 Terraform 配置中的目的或用途：
- en: If you have inputs, local variables, or outputs that represent numeric values,
    such as disk sizes or RAM size, make sure to include the appropriate units in
    their names, e.g., `ram_size_gb`.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有输入、局部变量或输出代表数字值，例如磁盘大小或内存大小，请确保在它们的名称中包括适当的单位，例如`ram_size_gb`。
- en: Boolean variables should be named with positive and meaningful names to simplify
    the conditional logic. For instance, a variable indicating whether external access
    is enabled can be named `enable_external_access`.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔变量应使用正面且有意义的名称，以简化条件逻辑。例如，一个表示是否启用外部访问的变量可以命名为`enable_external_access`。
- en: Include descriptions for variables to provide additional context for new developers
    that descriptive names may not convey. Descriptions are automatically included
    in a published module’s auto-generated documentation.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为变量包含描述，以为新开发者提供更多的上下文，而这些上下文是描述性名称可能无法传达的。描述会自动包含在发布模块的自动生成文档中。
- en: Provide data types for defined variables.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为定义的变量提供数据类型。
- en: 'If appropriate, provide default values for variables:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果合适，提供变量的默认值：
- en: Provide default values for variables that have environment-independent values,
    such as disk size.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为具有环境无关值的变量提供默认值，例如磁盘大小。
- en: For variables that have values specific to a particular environment (e.g., `project_id`),
    it is recommended not to provide default values. This ensures that the calling
    module provides the necessary values and avoids unintentional misconfiguration.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于具有特定环境值的变量（例如`project_id`），建议不要提供默认值。这确保调用模块提供必要的值，避免无意的配置错误。
- en: 'Use empty defaults for variables (such as empty strings or lists) only when
    leaving the variable empty is a valid preference that the underlying APIs don’t
    reject. Always use them in the same order as in the following example:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅当留空变量是一个有效的选择且底层 API 不会拒绝时，才使用空的默认值（例如空字符串或列表）。总是按照以下示例的顺序使用它们：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use variables only for values that need to be different for each instance or
    environment. Before exposing a variable, make sure that there is a specific need
    to change that variable. If the possibility of a variable being used is minimal,
    it’s best to not expose it at all.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use a plural name when defining a variable of a type map or list, as
    many values will potentially be read in.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expose outputs
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Exposing outputs in Terraform can help other modules reference useful values
    and reduce the amount of redundant code in your project. Here are some tips for
    exposing your outputs:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Organize all outputs in an `outputs.tf` file
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use meaningful descriptions for all outputs
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document output descriptions in the `README.md` file
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize tools such as `terraform-docs` to auto-generate output descriptions
    on commit
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output all useful values that root modules might need to refer to or share
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For open source or heavily used modules, expose all outputs that have the potential
    for consumption
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid passing outputs directly through input variables, as this prevents them
    from being properly added to the dependency graph
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To ensure that implicit dependencies are created, make sure that outputs reference
    attributes from resources
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of referencing an input variable for an instance directly, pass the
    attribute through, as shown in the example provided next.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is recommended:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is not recommended:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: You can find more details on the best practices for using Terraform at [https://cloud.google.com/docs/terraform/best-practices-for-terraform](https://cloud.google.com/docs/terraform/best-practices-for-terraform).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Use data sources
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data sources enable Terraform to use data defined externally, such as in another
    Terraform configuration, a separate tool, or a function. Here are some examples:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Place data sources next to the resources that reference them
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider moving a large number of data sources to a dedicated `data.tf` file
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use variable or resource interpolation to fetch data relative to the current
    environment
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leverage tfvars files
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For anything that’s not a secret, use `tfvars` files as much as possible for
    all your inputs and add them to your source control. That way, you can keep track
    of values and revert to a previous commit if you make a mistake, and you can see
    what’s deployed at a glance. This should also be where most of your deployment
    changes happen.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Separate variables and inputs based on their functionality
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your `variables.tf` file and `terraform.tfvars`, use comments to separate
    them based on their function. This makes your code more readable and easy to change
    when working with it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – An example tfvars](img/B18198_04_1.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – An example tfvars
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Limit the use of custom scripts
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Limit the use of scripts in your Terraform configuration to only when it is
    necessary. Keep in mind that the state of resources created through scripts is
    not managed by Terraform and can cause issues in the future. It is recommended
    to use Terraform’s built-in resource types and providers whenever possible. Here
    are some key steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 限制在 Terraform 配置中使用脚本，仅在必要时使用。请记住，通过脚本创建的资源状态不由 Terraform 管理，可能会导致未来出现问题。建议尽可能使用
    Terraform 内置的资源类型和提供者。以下是一些关键步骤：
- en: Try to avoid using custom scripts as much as possible. Instead, rely on Terraform
    resources to define the desired behavior for your infrastructure. However, if
    there are cases where Terraform resources don’t provide the functionality you
    need, use custom scripts sparingly. Keep in mind that resources created through
    scripts are not accounted for or managed by Terraform, so they may introduce complexities
    in managing your infrastructure.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量避免使用自定义脚本。相反，依赖 Terraform 资源来定义基础设施的预期行为。然而，如果 Terraform 资源无法提供所需的功能，可以适度使用自定义脚本。请记住，通过脚本创建的资源不会被
    Terraform 记录或管理，因此可能会增加管理基础设施的复杂性。
- en: Clearly document the reason for any custom scripts used and have a deprecation
    plan, if possible.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确记录任何自定义脚本的使用原因，并尽可能制定弃用计划。
- en: Provisioners in Terraform can be used to call custom scripts, including the
    `local-exec` provisioner.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform 中的 provisioners 可用于调用自定义脚本，包括 `local-exec` provisioner。
- en: Organize custom scripts that Terraform will call using provisioners in a `scripts/`
    directory.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Terraform 调用的自定义脚本组织在 `scripts/` 目录中。
- en: Include helper scripts in a separate directory
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将辅助脚本包含在单独的目录中。
- en: 'Organizing helper scripts in a separate directory is a good practice for maintaining
    Terraform IaC projects. To form a good foundation for your IaC project, consider
    the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 将辅助脚本组织在单独的目录中是维护 Terraform IaC 项目的良好实践。为了为你的 IaC 项目奠定良好的基础，考虑以下几点：
- en: Keep helper scripts that are not called by Terraform in a directory named `helpers/`
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将不被 Terraform 调用的辅助脚本保存在名为 `helpers/` 的目录中。
- en: Document all helper scripts in the `README.md` file by providing a description
    and example invocations
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `README.md` 文件中记录所有辅助脚本，提供描述和示例调用。
- en: For helper scripts that accept arguments, provide argument-checking and `--help`
    output to ensure that the script is being used correctly
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于接受参数的辅助脚本，提供参数检查和 `--help` 输出，以确保脚本的正确使用。
- en: Put static files in a separate directory
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将静态文件放在单独的目录中。
- en: 'Amplify your AWS infrastructure orchestration prowess by embracing the power
    of organization. Learn how strategically separating static files into dedicated
    directories empowers efficient resource management and elevates the clarity of
    your Terraform-powered deployments:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用组织的力量，增强你的 AWS 基础设施编排能力。了解如何通过战略性地将静态文件分离到专用目录中，提高资源管理效率，并提升你的 Terraform
    驱动的部署清晰度：
- en: Create a `files/` directory for static files that Terraform references but doesn’t
    execute, such as startup scripts loaded onto Compute Engine instances
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 `files/` 目录，用于存放 Terraform 引用但不执行的静态文件，例如加载到计算引擎实例上的启动脚本。
- en: Place lengthy HereDocs in external files, separate from their HCL code, and
    reference them with the `file()` function
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将较长的 HereDocs 放在外部文件中，分离它们的 HCL 代码，并通过 `file()` 函数引用。
- en: Use the `.tftpl` file extension for files that are read in by using the Terraform
    `templatefile()` function
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `.tftpl` 文件扩展名，用于通过 Terraform 的 `templatefile()` 函数读取的文件。
- en: Place templates in a `templates/` directory
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模板放在 `templates/` 目录中。
- en: Protect stateful resources
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护有状态资源。
- en: Explore essential strategies to protect the core of your infrastructure, ensuring
    resilience, compliance, and seamless continuity.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 探索保护基础设施核心的关键策略，确保其韧性、合规性和无缝持续性。
- en: 'Make sure to enable deletion protection for stateful resources such as databases.
    This is an example of enabling deletion protection:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 确保为如数据库等有状态资源启用删除保护。以下是启用删除保护的示例：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Use built-in formatting
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内置格式化功能。
- en: It is important to maintain consistency and readability in Terraform code. To
    ensure this, use the Terraform `fmt` command to automatically format all Terraform
    files according to the official Terraform style guide. This helps maintain consistency
    and makes it easier for others to read and understand your code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Terraform 代码中保持一致性和可读性非常重要。为了确保这一点，使用 Terraform 的 `fmt` 命令自动格式化所有 Terraform
    文件，遵循官方的 Terraform 风格指南。这有助于保持一致性，并使其他人更容易阅读和理解你的代码。
- en: Limit the complexity of expressions
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制表达式的复杂度
- en: Avoid overly complex interpolated expressions; if an expression requires multiple
    functions, consider splitting it into smaller, more readable expressions using
    local values.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 避免过于复杂的插值表达式；如果一个表达式需要多个函数，考虑将其拆分成更小、更易读的表达式，使用本地值。
- en: Use only one ternary operation per line, and use multiple local values instead
    of building up complex logic in a single line.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每行只使用一个三元运算符，并使用多个本地值，而不是在单一行内构建复杂的逻辑。
- en: Use count for conditional values
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`count`进行条件值
- en: 'Use the count meta-argument to conditionally instantiate a resource. This is
    an example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`count`元参数有条件地实例化资源。以下是一个示例：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This Terraform code snippet declares a variable named `readers` with a list
    type and an empty default value. The description of the variable is not included
    in the code snippet:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该Terraform代码片段声明了一个名为`readers`的变量，其类型为列表，并且默认值为空。该代码片段中未包含该变量的描述：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The code also defines a resource of type `resource_type` with the `reference_name`
    reference name. The count meta-argument is used to conditionally create the resource
    based on the length of the `readers` list variable. If the length of the `readers`
    list is `0`, the resource will not be created (count = `0`). Otherwise, if the
    length is greater than `0`, the resource will be created (count = `1`).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码还定义了一个类型为`resource_type`的资源，并使用`reference_name`作为引用名称。`count`元参数用于根据`readers`列表变量的长度有条件地创建该资源。如果`readers`列表的长度为`0`，则该资源不会被创建（count
    = `0`）。否则，如果长度大于`0`，则该资源会被创建（count = `1`）。
- en: Use for_each for iterated resources
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`for_each`来处理迭代资源
- en: Use the `for_each` meta-argument when creating multiple copies of a resource
    based on an input resource.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在根据输入资源创建多个副本时，使用`for_each`元参数。
- en: Publish modules to a registry
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将模块发布到注册中心
- en: Publish reusable modules to a module registry to increase reusability and make
    it easier for your team to use.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将可重用模块发布到模块注册中心，以提高重用性，并使团队更容易使用。
- en: Next, we will explore how to secure IaC projects with Terraform.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探索如何使用Terraform确保IaC项目的安全性。
- en: How to execute IaC projects with Terraform
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用Terraform执行IaC项目
- en: Every team always starts their Terraform journey by running Terraform from their
    development environments or local computers.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队总是从在他们的开发环境或本地计算机上运行Terraform开始他们的Terraform之旅。
- en: As the team starts to adopt more Terraform and IaC, you will need more automation
    to ensure consistency between runs and to provide other important features such
    as integration with version control, code reviews, environment management, etc.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 随着团队开始采用更多的Terraform和IaC，你将需要更多的自动化来确保每次运行的一致性，并提供其他重要功能，如与版本控制的集成、代码审查、环境管理等。
- en: Terraform automation can be achieved in diverse forms and to different extents.
    Some teams might persist in running Terraform locally, using customized wrapper
    scripts to ensure a uniform working directory for Terraform’s operation. Meanwhile,
    other teams fully operate Terraform within orchestration tools such as Jenkins,
    GitHub Actions, Terraform Cloud, or Terraform Enterprise.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform自动化可以以不同的形式和程度实现。一些团队可能坚持在本地运行Terraform，使用自定义的包装脚本确保Terraform操作时的工作目录一致。而其他团队则完全在像Jenkins、GitHub
    Actions、Terraform Cloud或Terraform Enterprise等编排工具内运行Terraform。
- en: 'The following are steps to create automated execution pipelines for Terraform:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建Terraform自动化执行流水线的步骤：
- en: Select a version control system such as GitHub, Git, and so on.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个版本控制系统，如GitHub、Git等。
- en: Store all your templates/files in version control.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有模板/文件存储在版本控制中。
- en: Select an automation pipeline.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个自动化流水线。
- en: Decide where to store your state (e.g., AWS S3, Terraform Cloud, etc.).
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定将状态存储在哪里（例如，AWS S3、Terraform Cloud等）。
- en: 'In the automation pipeline script, do the following:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自动化流水线脚本中，执行以下操作：
- en: Verify that the Terraform **command-line interface** (**CLI**) exists in the
    automation pipeline.
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Terraform **命令行接口** (**CLI**) 是否存在于自动化流水线中。
- en: Verify connectivity to your state location and cloud provider.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证与状态位置和云提供商的连接。
- en: Initialize the Terraform working directory.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化Terraform工作目录。
- en: Produce a plan for changing resources to match the current configuration.
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个计划，改变资源以匹配当前配置。
- en: Have a human operator review that plan to ensure it is acceptable.
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让人工操作员审核该计划，以确保其可接受。
- en: Apply the changes described in the plan.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用计划中描述的更改。
- en: 'Having established the foundational aspects of executing IaC projects with
    Terraform, let’s now shift our focus toward a critical facet: securing these projects.
    By seamlessly integrating robust security practices into your Terraform workflows,
    you not only safeguard your infrastructure but also fortify your development pipeline,
    ensuring the holistic success of your AWS environment.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立了执行Terraform IaC项目的基础方面之后，现在让我们将重点转向一个至关重要的方面：确保这些项目的安全性。通过将强大的安全实践无缝地集成到Terraform工作流中，你不仅能够保护你的基础设施，还能加强你的开发管道，确保你的AWS环境的全面成功。
- en: How to secure IaC projects with Terraform
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用Terraform确保IaC项目的安全
- en: Using IaC or Terraform to deploy and manage resources makes the process faster
    and easier, eliminating the need for one-time scripts or manual steps. With Terraform,
    infrastructure can be managed in a similar way as applications and services, including
    servers, databases, networks, Kubernetes clusters, and entire application stacks.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IaC或Terraform来部署和管理资源使得过程更加快捷和简便，避免了单次脚本或手动步骤的需求。通过Terraform，可以像管理应用程序和服务一样管理基础设施，包括服务器、数据库、网络、Kubernetes集群和整个应用堆栈。
- en: While IaC may not present an immediate risk or attack surface, it’s still important
    to consider security. However, because IaC is often managed by engineering and
    DevOps teams, security measures may be overlooked in favor of monitoring cloud
    resources already in production.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管IaC可能不会立即带来风险或攻击面，但考虑到安全性仍然很重要。然而，由于IaC通常由工程和DevOps团队管理，因此可能会忽视安全措施，而优先关注已投入生产的云资源的监控。
- en: 'Managing infrastructure at scale can be complex, and security and DevOps teams
    may not have the necessary expertise, access, or tools to properly address security
    concerns. This can lead to misconfigured cloud resources, such as engineers and
    developers missing important security measures. Here are some common mistakes:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 管理大规模基础设施可能会很复杂，而安全和DevOps团队可能没有必要的专业知识、访问权限或工具来妥善解决安全问题。这可能导致云资源配置错误，例如工程师和开发人员错过重要的安全措施。以下是一些常见的错误：
- en: Default configurations that haven’t been optimized for security are used
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用了未针对安全性优化的默认配置。
- en: Logging is not enabled, making it difficult to troubleshoot or assemble an audit
    trail
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有启用日志记录，导致故障排除或审计跟踪变得困难。
- en: Unencrypted databases are used, leaving data vulnerable to corruption and exfiltration
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用未加密的数据库，导致数据易于受到损坏和泄露的风险。
- en: Insecure protocols (e.g., not using HTTPS) are deployed
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署了不安全的协议（例如，没有使用HTTPS）
- en: Foundational governance and prevention systems for security or misconfiguration
    are lacking
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏基础的治理和预防系统来应对安全问题或配置错误。
- en: 'IaC involves defining and managing configurations using code, which means that
    all security configurations must also be defined in code. Here are some tips for
    securing your Terraform projects:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施即代码（IaC）涉及使用代码定义和管理配置，这意味着所有的安全配置也必须在代码中定义。以下是一些确保Terraform项目安全的建议：
- en: Ensure that your state location is secure and not publicly accessible and provide
    appropriate access to your team for operations.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的状态文件存储位置是安全的，并且不公开可访问，同时为团队的操作提供适当的访问权限。
- en: Keep private modules in private module registries.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将私有模块保存在私有模块注册中心。
- en: Do not hardcode sensitive information such as secrets, credentials, keys, or
    certificates in Terraform files or variables. Instead, retrieve them from secure
    locations at runtime.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在Terraform文件或变量中硬编码敏感信息，如密钥、凭证、密钥或证书。相反，应该在运行时从安全位置获取这些信息。
- en: Use a tool such as Checkov to scan your Terraform templates and directories
    for misconfigurations related to encryption, network, backup, IAM, and other security
    and compliance policies.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Checkov等工具扫描你的Terraform模板和目录，检查与加密、网络、备份、IAM以及其他安全和合规政策相关的配置错误。
- en: Automate IaC scanning in your **continuous integration/continuous deployment**
    (**CI/CD**) pipeline for consistency and provide automated feedback as part of
    the CI run to prevent misconfigured code.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的**持续集成/持续部署**（**CI/CD**）管道中自动化IaC扫描，以确保一致性，并在CI运行过程中提供自动反馈，以防止配置错误的代码。
- en: Use a version control system, lock your main deployment branch, and always run
    automated checks and get peer reviews and approval before deployment.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用版本控制系统，锁定你的主部署分支，并在部署前始终进行自动化检查并获取同行评审和批准。
- en: Carefully review the `terraform plan` results to avoid any unexpected resource
    destruction.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细审查`terraform plan`的结果，以避免任何意外的资源销毁。
- en: Having fortified your IaC projects with Terraform’s security measures, the next
    significant stride is seamlessly integrating Terraform into your DevOps or cloud
    teams. Discover the pivotal steps to harmoniously weave Terraform into your team’s
    practices, enhancing collaboration, efficiency, and the realization of a cohesive
    and empowered AWS environment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在为您的 IaC 项目加固了 Terraform 的安全措施之后，下一个重要的步骤是将 Terraform 无缝地整合到您的 DevOps 或云团队中。发现将
    Terraform 纳入团队实践的关键步骤，增强协作、效率，并实现一个统一而强大的 AWS 环境。
- en: Implementing Terraform in DevOps or cloud teams
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 DevOps 或云团队中实施 Terraform
- en: 'Implementing Terraform in DevOps or cloud teams involves more than just adopting
    the tool. It also requires understanding the process, the team’s capabilities,
    and the organization’s culture. Here are some steps you can follow to successfully
    implement Terraform in your DevOps or cloud teams:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 或云团队中实施 Terraform 不仅仅是采用工具。还需要了解流程、团队能力和组织文化。以下是您可以遵循的一些步骤，成功地在您的 DevOps
    或云团队中实施 Terraform：
- en: '**Start with a pilot project**: Begin with a small project that can demonstrate
    the value of Terraform to the team. It could be a simple infrastructure deployment,
    such as a VPC, or a more complex application stack.'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从试点项目开始**：从一个可以向团队展示 Terraform 价值的小项目开始。可以是一个简单的基础设施部署，如 VPC，或一个更复杂的应用堆栈。'
- en: '**Identify the team’s knowledge gaps**: Terraform requires knowledge of cloud
    infrastructure, coding, and best practices. Identify any gaps in the team’s knowledge
    and create a plan to address them.'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别团队的知识空白**：Terraform 需要对云基础设施、编码和最佳实践有所了解。识别团队知识中的任何空白，并制定计划加以解决。'
- en: '**Encourage collaboration and knowledge sharing**: Terraform is a collaborative
    tool that requires contributions from multiple teams. Encourage your teams to
    share their knowledge, experiences, and best practices.'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**鼓励协作和知识共享**：Terraform 是一个需要多个团队贡献的协作工具。鼓励您的团队分享他们的知识、经验和最佳实践。'
- en: '**Implement a version control system (VCS)**: Terraform code is code and should
    be treated like any other code. Implement a **VCS** to manage changes to the infrastructure
    code.'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施版本控制系统（VCS）**：Terraform 代码是代码，应像任何其他代码一样对待。实施一个 **VCS** 来管理基础设施代码的更改。'
- en: '**Implement a CI/CD pipeline**: Automate the testing, building, and deployment
    of Terraform code using a CI/CD pipeline. This ensures that infrastructure changes
    are thoroughly tested before deployment.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施 CI/CD 管道**：使用 CI/CD 管道自动化测试、构建和部署 Terraform 代码。这确保基础设施更改在部署之前经过彻底测试。'
- en: '**Implement IaC best practices**: Use best practices for IaC development, such
    as modularization, code reviews, and testing. This ensures that your infrastructure
    code is maintainable, scalable, and secure.'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施 IaC 最佳实践**：使用 IaC 开发的最佳实践，如模块化、代码审查和测试。这确保您的基础设施代码可维护、可扩展和安全。'
- en: '**Monitor and optimize**: Implement monitoring and alerting to identify and
    address issues as they arise. Optimize your infrastructure by reviewing logs and
    metrics and identifying areas for improvement.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控和优化**：实施监控和警报以识别和解决问题。通过审查日志和指标并确定改进的领域来优化您的基础设施。'
- en: By following these steps, you can successfully implement Terraform in your DevOps
    or cloud teams and reap the benefits of IaC.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，您可以成功地在您的 DevOps 或云团队中实施 Terraform，并获得 IaC 的好处。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the best practices for Terraform IaC projects, including
    organizing files, defining variables, using data sources, and managing state.
    We also discussed how to maintain IaC projects with Terraform, including managing
    resources, deploying changes, and employing version control. Additionally, we
    explored how to execute IaC projects with Terraform, including using modules,
    providers, and Terraform Cloud.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Terraform IaC 项目的最佳实践，包括组织文件、定义变量、使用数据源和管理状态。我们还讨论了如何使用 Terraform
    维护 IaC 项目，包括管理资源、部署更改和使用版本控制。此外，我们探讨了如何使用模块、提供程序和 Terraform Cloud 执行 IaC 项目。
- en: Finally, we addressed how to secure IaC projects with Terraform, including securing
    state, avoiding hardcoded secrets, and using tools such as Checkov. By following
    these best practices, DevOps and cloud teams can effectively use Terraform to
    manage infrastructure at scale while maintaining security and compliance.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了如何使用Terraform确保IaC项目的安全，包括保护状态、避免硬编码的秘密，以及使用如Checkov等工具。通过遵循这些最佳实践，DevOps和云团队可以有效地利用Terraform来管理大规模基础设施，同时保持安全性和合规性。
- en: In the next chapter, we’ll delve into the fundamentals of planning Terraform
    infrastructure projects. We’ll kick off with guidance on crafting your initial
    Terraform template in AWS. Next, we’ll deepen your comprehension of AWS providers
    and Terraform modules, essential elements for any Terraform project.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨规划Terraform基础设施项目的基本原则。我们将从在AWS中创建初始Terraform模板的指导开始。接着，我们将加深你对AWS提供者和Terraform模块的理解，这些都是任何Terraform项目的核心元素。
- en: Part 2:Become an Expert in Terraform with AWS
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：成为AWS中Terraform的专家
- en: In this section, we dive deeper into the intricacies of Terraform on AWS, guiding
    you through the process of becoming an expert in deploying and managing cloud
    infrastructure. We start by discussing the importance of planning and designing
    infrastructure projects in AWS, ensuring a solid foundation for your Terraform
    deployments. You’ll learn how to make informed decisions for your AWS Terraform
    projects, considering factors such as resource selection, configuration, and deployment
    strategies. We then move on to the practical implementation of Terraform in various
    projects, including deploying serverless applications and containers in AWS. By
    the end of this part, you’ll have a comprehensive understanding of how to expertly
    use Terraform to deploy and manage complex infrastructure on AWS.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将更深入地探讨在AWS上使用Terraform的复杂性，引导你通过部署和管理云基础设施的过程，成为专家。我们首先讨论在AWS中规划和设计基础设施项目的重要性，确保你的Terraform部署有坚实的基础。你将学会如何为你的AWS
    Terraform项目做出明智决策，考虑资源选择、配置和部署策略等因素。接下来，我们将转向Terraform在各种项目中的实际应用，包括在AWS中部署无服务器应用程序和容器。到本部分结束时，你将全面理解如何熟练地使用Terraform在AWS上部署和管理复杂的基础设施。
- en: 'This part contains the following chapters:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 5*](B18198_05.xhtml#_idTextAnchor079)*, Planning and Designing Infrastructure
    Projects in AWS*'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第五章*](B18198_05.xhtml#_idTextAnchor079)*，在AWS中规划和设计基础设施项目*'
- en: '[*Chapter 6*](B18198_06.xhtml#_idTextAnchor126)*, Making Decisions for Terraform
    Projects with AWS*'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第六章*](B18198_06.xhtml#_idTextAnchor126)*，在AWS中为Terraform项目做决策*'
- en: '[*Chapter 7*](B18198_07.xhtml#_idTextAnchor141)*, Implementing Terraform in
    Projects*'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第七章*](B18198_07.xhtml#_idTextAnchor141)*，在项目中实现Terraform*'
- en: '[*Chapter 8*](B18198_08.xhtml#_idTextAnchor156)*, Deploying Serverless Projects
    with Terraform*'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第八章*](B18198_08.xhtml#_idTextAnchor156)*，使用Terraform部署无服务器项目*'
- en: '[*Chapter 9*](B18198_09.xhtml#_idTextAnchor169)*, Deploying Containers in AWS
    with Terraform*'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第九章*](B18198_09.xhtml#_idTextAnchor169)*，在AWS中使用Terraform部署容器*'
