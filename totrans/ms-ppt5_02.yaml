- en: Roles and Profiles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 角色与配置文件
- en: The *roles and profiles pattern* became common knowledge in the Puppet community
    following Craig Dunn's seminal blog post ([https://www.craigdunn.org/2012/05/239/](https://www.craigdunn.org/2012/05/239/)),
    and has been rapidly taken up by the rest of the community. It's now a widely
    adopted pattern or best practice. It's a reliable way to build reusable, configurable,
    and refactorable site-wide configuration code, and it's an approach to dealing
    with the interfaces of your infrastructure—using the software development paradigms
    of *encapsulation* and *abstraction*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*角色和配置文件模式*在 Puppet 社区中成为了常识，起初是由 Craig Dunn 的开创性博客文章（[https://www.craigdunn.org/2012/05/239/](https://www.craigdunn.org/2012/05/239/)）普及的，并且迅速被社区的其他成员采纳。它现在已经成为一个广泛采用的模式或最佳实践。这是一种可靠的方法，用于构建可重用、可配置和可重构的全站配置代码，同时它也是处理基础设施接口的一种方式——使用*封装*和*抽象*的
    软件开发范式。'
- en: 'Before the pattern developed, the Puppet language itself provided just two
    levels of abstraction, as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在模式发展之前，Puppet 语言本身只提供了两个抽象层级，如下所示：
- en: The component module ([https://puppet.com/docs/puppet/5.3/modules_fundamentals.html](https://puppet.com/docs/puppet/5.3/modules_fundamentals.html))
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件模块（[https://puppet.com/docs/puppet/5.3/modules_fundamentals.html](https://puppet.com/docs/puppet/5.3/modules_fundamentals.html)）
- en: The node definition ([https://puppet.com/docs/puppet/5.3/lang_node_definitions.html](https://puppet.com/docs/puppet/5.3/lang_node_definitions.html))
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点定义（[https://puppet.com/docs/puppet/5.3/lang_node_definitions.html](https://puppet.com/docs/puppet/5.3/lang_node_definitions.html)）
- en: But it soon became clear that further intermediate abstraction was needed to
    break up, restructure, and clarify these two.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但很快就清楚了，需要进一步的中间抽象来拆解、重构并澄清这两者。
- en: 'Let''s consider the overarching task: we want to assign classes (and their
    corresponding business data) to nodes, and we want to do this in a way that encapsulates
    and hides complexity away at each stage of this abstraction process: moving from
    looking at the node in its context within the whole infrastructure, as a software
    stack, and drilling down into the technology components and their configuration,
    which comprise elements of that software stack.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下整体任务：我们希望将类（及其对应的业务数据）分配给节点，并且我们希望以一种方式来实现，在这个抽象过程的每个阶段都能够封装并隐藏复杂性：从在整个基础设施中的上下文中查看节点，作为一个软件栈，并深入了解其中包含的技术组件及其配置，这些组件构成了该软件栈的一部分。
- en: I've seen nodes being defined in the very long-hand way, using only these two
    levels of abstraction. I've also seen other approaches, such as using a Hiera-based
    micro **external node classifier** (**ENC**). I've helped to transition companies
    to using the roles and profiles pattern, and I've used both the Puppet Enterprise
    console and Foreman as ENC. I've defined nodes in Puppet code, using Hiera in
    many ways to assist node classification, and I've even used the PE console API
    for node classification, so I hope I've picked up a few best practices along the
    way that I can now pass along to you.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我见过节点仅使用这两层抽象的非常详细的定义方式。我也见过其他方法，例如使用基于 Hiera 的微型**外部节点分类器**（**ENC**）。我曾帮助公司过渡到使用角色和配置文件模式，并且我曾使用
    Puppet Enterprise 控制台和 Foreman 作为 ENC。我在 Puppet 代码中定义节点，使用 Hiera 的多种方式来辅助节点分类，甚至使用
    PE 控制台 API 进行节点分类，因此我希望我在这个过程中能积累一些最佳实践，现在能够传授给你。
- en: In this chapter, let's look together at the roles and profiles pattern, and
    how this can help you to manage your infrastructure professionally and achieve
    our next milestone in *Mastering Puppet 5*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，让我们一起看看角色和配置文件模式，以及它是如何帮助你专业地管理基础设施并实现我们在*Mastering Puppet 5*中的下一个里程碑的。
- en: Summary of the pattern
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式总结
- en: 'The roles and profiles pattern adds two additional layers of abstraction between
    your *node classification* at the highest level and *component modules* at the
    lowest, thus providing three levels of abstraction in your Puppet modules. The
    following descriptions go from the most complex to the least:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 角色和配置文件模式在你的*节点分类*（在最高层）和*组件模块*（在最低层）之间增加了两个额外的抽象层，从而在你的 Puppet 模块中提供了三个抽象层。以下描述从最复杂到最简单：
- en: '**Component modules**: These are modules for the management of software for
    your business. There will no doubt be a bunch of these that you''ve downloaded
    from the Forge (for example, puppetlabs/apache, puppetlabs/mysql, hunner/wordpress,
    and so on), and no doubt also some that you have developed for your own business-specific
    purposes.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件模块**：这些是用于管理您业务的软件的模块。毫无疑问，您从 Forge 下载了一些（例如，puppetlabs/apache、puppetlabs/mysql、hunner/wordpress
    等），也可能有一些是您为自己特定业务目的开发的模块。'
- en: 'We''ve discussed these already at length in [Chapter 1](e7bbbeb3-e406-46ea-aad3-20f4af34d014.xhtml),
    *Authoring Modules*, so here''s the rub:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第1章](e7bbbeb3-e406-46ea-aad3-20f4af34d014.xhtml)中详细讨论过这些内容，*编写模块*，所以问题是：
- en: '**Profiles**: A set of encapsulated *technology-specific* classes that use
    one or more component modules and corresponding business data to configure part
    of a solution stack'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置文件**：一组封装的*技术特定*类，这些类使用一个或多个组件模块和相应的业务数据来配置解决方案堆栈的一部分。'
- en: '**Roles**: A set of encapsulated *business-specific* classes that comprise
    profiles to build a complete system configuration'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角色**：一组封装的*业务特定*类，这些类包含配置文件，用于构建完整的系统配置。'
- en: These two additional layers of abstraction and improved interfaces make hierarchical
    business data easier to integrate, system configurations easier to read for both
    business people and technologists, and they make refactoring easier.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这两层额外的抽象和改进的接口使得层次化的业务数据更容易集成，使系统配置更容易被业务人员和技术人员阅读，并且使得重构变得更加容易。
- en: 'The following UML diagram shows the relationship between the elements in the
    pattern more clearly:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 UML 图展示了模式中各元素之间的关系，更加清晰：
- en: '![](img/059198e1-6146-474c-ad76-035d3c44cca2.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/059198e1-6146-474c-ad76-035d3c44cca2.png)'
- en: 'From the preceding diagram, we can see the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图中，我们可以看到以下内容：
- en: A Node has *exactly* one Role
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个节点*恰好*包含一个角色。
- en: A Role comprises *one or more* Profiles
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个角色包含*一个或多个*配置文件。
- en: Profile comprise *one or more* Component Modules and corresponding Hierarchical
    Business Data
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件由*一个或多个*组件模块和相应的层次化业务数据组成。
- en: Component Modules comprise *many* Resources
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件模块由*许多*资源组成。
- en: Puppet resources should already be very familiar to you, and we've already covered
    component modules in [Chapter 1](e7bbbeb3-e406-46ea-aad3-20f4af34d014.xhtml), *Authoring
    Modules*, so in the following two sections, let's take a deep dive into the *profile*
    and *role* part of the pattern.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 资源应该已经对您非常熟悉，我们已经在[第1章](e7bbbeb3-e406-46ea-aad3-20f4af34d014.xhtml)中讨论过组件模块，*编写模块*，所以在接下来的两个部分，我们将深入探讨*配置文件*和*角色*部分的模式。
- en: Profiles
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: First, let's take a step back and consider what we want to achieve with profiles.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们后退一步，考虑一下我们想通过配置文件实现什么目标。
- en: The overarching exercise is to produce usable chunks of technology that can
    be fitted together, in a building-brick fashion, to compose what we call in the
    industry these days *technology stacks* or *solution stacks*. The most well-known
    example of a stack would be the LAMP stack (Linux, Apache, MySQL, PHP), and more
    recently, Ruby or Python have sometimes superseded PHP as the primary scripting
    language. Node.js is being rapidly adopted across the industry, too.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 总体任务是产生可用的技术块，这些技术块可以像拼装积木一样组合在一起，形成我们今天业界所称的*技术堆栈*或*解决方案堆栈*。最著名的堆栈示例是 LAMP
    堆栈（Linux、Apache、MySQL、PHP），最近，Ruby 或 Python 有时取代了 PHP 成为主要的脚本语言。Node.js 在业界也被迅速采用。
- en: 'Considering the LAMP stack, what we want to do is create chunks of technology
    for the Apache, MySQL, and PHP components. Profiles are, therefore, these smaller
    chunks of technology that will eventually comprise these full solution stacks.
    Profiles are the three *building bricks* that we piece together, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 LAMP 堆栈，我们希望做的是为 Apache、MySQL 和 PHP 组件创建技术块。因此，配置文件是这些较小的技术块，它们最终将组成这些完整的解决方案堆栈。配置文件是我们拼接在一起的三个*构建砖块*，如下所示：
- en: '![](img/8ad5d347-e50d-4b04-9573-0061a2121aa1.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ad5d347-e50d-4b04-9573-0061a2121aa1.png)'
- en: 'Let''s look at this LAMP stack with some fully functional Puppet **domain specific
    language** (**DSL**) code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个 LAMP 堆栈，使用一些完全功能的 Puppet **领域特定语言**（**DSL**）代码：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, in these classes, we are producing an *abstraction* for the
    remaining, AMP section of the LAMP stack and *encapsulating* the functionality
    of the underlying component modules. Linux is already installed, of course!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在这些类中，我们为 LAMP 堆栈中剩余的 AMP 部分创建了一个*抽象*，并*封装*了底层组件模块的功能。当然，Linux 已经安装好了！
- en: Profiles best practices summary
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件最佳实践总结
- en: 'Here are the best practices you should note in the development of your own
    profiles, referring to the preceding LAMP stack as an example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你在开发自己配置文件时应注意的最佳实践，以下LAMP栈为例：
- en: Design for use of the `include` keyword
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计时使用 `include` 关键字
- en: Use subdirectories for sensible, readable profile class groups
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用子目录来组织合理且易读的配置文件类组
- en: Hide complexity with parameters, defaults, and abstraction
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过参数、默认值和抽象来隐藏复杂性
- en: Decide how to set the parameters for component classes
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定如何设置组件类的参数
- en: Decide to use either automatic class parameter lookup or the `lookup` function
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定使用自动类参数查找或 `lookup` 函数
- en: Let's examine each of these best practices now in turn.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来逐一讨论这些最佳实践。
- en: Designing for use of the include keyword
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计时使用 `include` 关键字
- en: 'The single interface of your profiles should be their adoption in the corresponding
    roles part of the pattern using the Puppet `include` keyword. Bear this in mind
    when writing your profiles. We would simply write the following in any role that
    requires PHP to be installed on that node:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件的单一接口应该是它们在使用Puppet `include` 关键字的相应角色部分中的应用。写配置文件时请记住这一点。我们只需在任何需要安装PHP的角色中写入如下内容：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With regard to the Puppet `include` keyword:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Puppet的 `include` 关键字：
- en: Multiple declarations are OK
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个声明是可以的
- en: It relies on external data for parameters
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它依赖于外部数据来获取参数
- en: 'Syntax: Accepts a single class name (for example, `include apache`), or class
    reference (for example, `include Class[''apache'']`)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：接受单个类名（例如，`include apache`）或类引用（例如，`include Class['apache']`）
- en: Using subdirectories for sensible, readable profile class groups
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用子目录来组织合理且易读的配置文件类组
- en: We are using the component modules puppetlabs/apache, puppetlabs/mysql, and
    mayflower/php, and encapsulating these into the profile `classes web::apache database::mysql`
    and `programming::php`, respectively. You can see that I have used some sensible
    subdirectories and class names to reflect their contribution to the stack, namely
    `web`, `db`, and `programming` subdirectory locations for the Apache, MySQL, and
    programming profiles, respectively.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用组件模块 puppetlabs/apache、puppetlabs/mysql 和 mayflower/php，并将它们分别封装为配置文件
    `classes web::apache database::mysql` 和 `programming::php`。你可以看到，我使用了一些合理的子目录和类名来反映它们对栈的贡献，即
    `web`、`db` 和 `programming` 子目录位置分别对应Apache、MySQL和编程配置文件。
- en: Hiding complexity with parameters, defaults, and abstraction
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过参数、默认值和抽象来隐藏复杂性
- en: You can see that, in the Apache profile, we have hidden the complexity of the
    vhost-defined type quite considerably, so that you just need to provide the name
    of the vhost as a string. Additionally, you can overwrite the value of the root
    `internet` directory. I believe it's the same location on all Linux operating
    systems. This reduction in the size of the interface really reduces complexity,
    and provides a simple, neat abstraction, which is fine if you don't need multiple
    Apache vhosts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在Apache配置文件中，我们已经相当大程度地隐藏了vhost定义类型的复杂性，因此你只需要提供vhost的名称作为字符串。此外，你可以覆盖根`internet`目录的值。我相信这个位置在所有Linux操作系统中都是相同的。接口大小的减少确实降低了复杂性，并提供了一个简单、整洁的抽象，如果你不需要多个Apache
    vhost，这完全没问题。
- en: Deciding how to set the parameters for component classes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定如何设置组件类的参数
- en: As the Puppet documentation on roles and profiles states ([https://puppet.com/docs/pe/2017.3/managing_nodes/roles_and_profiles_example.html#the-rules-for-profile-classes](https://puppet.com/docs/pe/2017.3/managing_nodes/roles_and_profiles_example.html)),
    there is a trade-off regarding how to set the parameters provided to component
    modules, and we should base our decision on *how readable the code is* versus *how
    flexible the business data needs to be*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Puppet文档中关于角色和配置文件的说明所说（[https://puppet.com/docs/pe/2017.3/managing_nodes/roles_and_profiles_example.html#the-rules-for-profile-classes](https://puppet.com/docs/pe/2017.3/managing_nodes/roles_and_profiles_example.html)），在如何设置提供给组件模块的参数时，存在一定的权衡，我们应该根据*代码的可读性*与*业务数据的灵活性需求*来做出决策。
- en: That is, if we always use the same value for a certain parameter, we can *hardcode
    it* (highly readable), we can compute the value for a parameter based on, for
    example, facts (quite readable and somewhat flexible), or we can look up the value
    of a parameter in our business data hierarchy (highly flexible).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，如果我们始终为某个参数使用相同的值，我们可以将其*硬编码*（高度可读），我们可以根据例如事实来计算参数的值（相当可读且具有一定灵活性），或者我们可以在业务数据层次结构中查找参数的值（高度灵活）。
- en: Deciding to use either automatic class parameter lookup or the lookup function
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定使用自动类参数查找还是使用`lookup`函数
- en: 'For the third consideration in the previous best practice, there''s another
    decision to make around how data arrives into the profile class from your business
    data hierarchy:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面最佳实践中的第三个考虑点，还有另一个关于如何将数据从业务数据层次结构传入`profile`类的决策：
- en: In these profiles, we have used the automatic class parameter lookup ([https://puppet.com/docs/puppet/5.3/hiera_automatic.html](https://puppet.com/docs/puppet/5.3/hiera_automatic.html))
    to request data from our business data hierarchy. Using the interface of the profile's
    parameters is a reliable and well-known way to look for the profile's configuration
    settings, and allows better integration with external tools, such as Puppet Strings
    ([https://github.com/puppetlabs/puppet-strings](https://github.com/puppetlabs/puppet-strings)),
    the YARD-based ([https://yardoc.org](https://yardoc.org)) documentation extraction
    and presentation tool.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这些`profile`中，我们使用了自动类参数查找（[https://puppet.com/docs/puppet/5.3/hiera_automatic.html](https://puppet.com/docs/puppet/5.3/hiera_automatic.html)）从我们的业务数据层次结构中请求数据。使用`profile`的参数接口是一种可靠且广为人知的方式来查找`profile`的配置设置，并且允许更好地与外部工具集成，比如Puppet
    Strings（[https://github.com/puppetlabs/puppet-strings](https://github.com/puppetlabs/puppet-strings)），这是一个基于YARD的（[https://yardoc.org](https://yardoc.org)）文档提取和展示工具。
- en: 'When we wrote the code for the `profile` class, we also could have omitted
    all the parameters and instead used the `lookup` function:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们为`profile`类编写代码时，我们本来也可以省略所有参数，改用`lookup`函数：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This approach is an alternative if you aren''t comfortable with the automagic
    nature of an automatic class parameter lookup. I have certainly found it more
    comfortable to make an explicit data lookup, and then deal with the returned value
    there and then in the more robust Puppet DSL. I found earlier versions of Hiera
    notoriously cryptic when trying to track down bugs ([https://puppet.com/blog/debugging-hiera](https://puppet.com/blog/debugging-hiera)),
    and this approach really helps. You can check data types and make further validations
    directly. By having the full lookup key written out in the profile, we can globally
    `grep` for it across our entire Puppet DSL codebase, and thus make a definitive
    link between Puppet manifests and the business data servicing them:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不习惯自动类参数查找的自动化特性，这种方法是一个替代选择。我个人发现，做一个显式的数据查找，并在更强大的Puppet DSL中直接处理返回值，更让我感到舒适。早期版本的Hiera在追踪错误时经常令人困惑（[https://puppet.com/blog/debugging-hiera](https://puppet.com/blog/debugging-hiera)），而这种方法确实有所帮助。你可以直接检查数据类型并进行进一步的验证。通过在`profile`中完整地写出查找键，我们可以在整个Puppet
    DSL代码库中全局`grep`它，从而在Puppet清单和为其提供服务的业务数据之间建立明确的联系：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can then use the new `Puppet lookup` ([https://puppet.com/docs/puppet/5.3/man/lookup.html](https://puppet.com/docs/puppet/5.3/man/lookup.html))
    command (previously, the `hiera` command line invocation). Since it''s the CLI
    equivalent of the `lookup` function, you can be sure during debugging that you
    are getting *exactly* the business data value you require:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用新的`Puppet lookup`（[https://puppet.com/docs/puppet/5.3/man/lookup.html](https://puppet.com/docs/puppet/5.3/man/lookup.html)）命令（之前是`hiera`命令行调用）。由于它是`lookup`函数的命令行等效物，你可以在调试时确信你得到了*完全*符合要求的业务数据值：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Actually, I also have certain issues with YAML as a language itself (see, for
    example, [https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html](https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html)),
    and being able to rely on the robustness of the more explicit Puppet DSL compensates
    for what I feel are YAML's native weaknesses during debugging.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我对YAML作为一种语言本身也有一些问题（例如，参见 [https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html](https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html)），而能够依赖于更明确的Puppet
    DSL的鲁棒性弥补了我在调试过程中认为YAML本身存在的弱点。
- en: Take a close look at this blog post: [https://puppet.com/blog/debugging-hiera-redux](https://puppet.com/blog/debugging-hiera-redux),
    which is an update to debugging Hiera with the latest commands, and of course
    ensure you are at the very least using a YAML parser.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细阅读这篇博客文章：[https://puppet.com/blog/debugging-hiera-redux](https://puppet.com/blog/debugging-hiera-redux)，它更新了使用最新命令来调试Hiera的方法，当然也确保你至少在使用一个YAML解析器。
- en: Also, bear in mind that Hiera really does have its limitations, especially for
    larger and more diverse infrastructures ([https://www.craigdunn.org/2015/09/solving-real-world-problems-with-jerakia](https://www.craigdunn.org/2015/09/solving-real-world-problems-with-jerakia)).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，请记住，Hiera确实有它的局限性，特别是在大型且多样化的基础架构中（[https://www.craigdunn.org/2015/09/solving-real-world-problems-with-jerakia](https://www.craigdunn.org/2015/09/solving-real-world-problems-with-jerakia)）。
- en: 'So, moving on, let''s now look at the higher level of abstraction in the pattern:
    *roles*.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看模式中的更高层次抽象：*角色*。
- en: Roles
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 角色
- en: 'Let''s take another step back and consider what we want to achieve with the
    roles part of the pattern. The overarching task is to piece together these *building-brick-like* profile
    classes into full tech stacks, which we call *roles*, and are now the second part
    of our full pattern:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再退一步，考虑一下我们希望通过角色部分的模式实现什么。总的任务是将这些*像积木一样的*配置文件类组合成完整的技术堆栈，这些我们称之为*角色*，它们现在是我们完整模式的第二部分：
- en: '![](img/4d3448fc-c27c-4e1f-b40c-d1d927a6a65d.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d3448fc-c27c-4e1f-b40c-d1d927a6a65d.png)'
- en: 'Here you can see that we have taken the composite profiles from our previous
    example, and stacked them one on top of the other, to produce a full tech stack.
    We are also utilizing two additional shared profiles:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到我们已经将之前示例中的组合配置文件堆叠起来，生成了完整的技术堆栈。我们还使用了两个额外的共享配置文件：
- en: '`profile::base` is included in all machines, including workstations. It manages
    security baselines and so on, using conditional logic for OS-specific profiles;
    for example, `profile:: base::ubuntu`, `profile::base::redhat`, and so on, as
    needed.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile::base`被包含在所有机器中，包括工作站。它管理安全基准等，并使用条件逻辑处理特定操作系统的配置文件；例如，`profile::base::ubuntu`、`profile::base::redhat`等，按需使用。'
- en: '`profile::server` is included in all machines that provide a service over the
    network, and configures services such as NTP, firewalls, monitoring, logging,
    and so on.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile::server`被包含在所有提供网络服务的机器中，并配置诸如NTP、防火墙、监控、日志记录等服务。'
- en: 'Let''s look again at the fully functional LAMP stack as an example in Puppet
    DSL:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一遍Puppet DSL中完整功能的LAMP堆栈作为例子：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Roles best practices summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 角色最佳实践总结
- en: 'Here are the best practices you should note in the development of your own
    roles, referring to the preceding LAMP stack as an example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发你自己角色时，以下是你应该注意的最佳实践，以之前提到的LAMP堆栈为例：
- en: Construct roles only with the `include` keyword
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅使用`include`关键字构建角色
- en: Name roles in your business's conversational name
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用你业务的通用命名来命名角色
- en: Decide on the granularity of roles for your nodes
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定节点角色的粒度
- en: Let's examine each of these best practices now in turn.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们逐一检查这些最佳实践。
- en: Constructing roles only with the include keyword
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅使用`include`关键字构建角色
- en: As the Puppet documentation states regarding roles, in rules  ([https://puppet.com/docs/pe/2017.2/r_n_p_full_example.html#the-rules-for-role-classes](https://puppet.com/docs/pe/2017.2/r_n_p_full_example.html#the-rules-for-role-classes)),
    the only thing roles should do is declare profile classes with the puppet `include`
    keyword. That is, they don't themselves have any class parameters. Roles also
    shouldn't declare any component classes or resources—that's the purpose of profiles.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如同Puppet文档中关于角色的说明，规则（[https://puppet.com/docs/pe/2017.2/r_n_p_full_example.html#the-rules-for-role-classes](https://puppet.com/docs/pe/2017.2/r_n_p_full_example.html#the-rules-for-role-classes)）中指出，角色应该做的唯一事情就是使用Puppet的`include`关键字声明配置文件类。也就是说，角色本身不应该拥有任何类参数。角色也不应该声明任何组件类或资源——这正是配置文件的目的。
- en: Naming roles in your business's conversational name
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用你业务的通用命名来命名角色
- en: The name of a role should be based on your business's conversational name for
    the type of node it manages. So, if you generally call the machine a *web server*,
    you should prefer a name such as `role::web`, as opposed to naming it according
    to any underlying profile technology such as `web::apache` or `web::nginx`. This
    adds a layer of abstraction and hides the complexity of the profile code, again
    utilizing good programming practices.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 角色的名称应该基于你业务中用于管理该类型节点的通用名称。因此，如果你通常称机器为*Web服务器*，你应该使用诸如`role::web`这样的名称，而不是根据任何底层的配置文件技术命名，如`web::apache`或`web::nginx`。这样可以增加抽象层次，隐藏配置文件代码的复杂性，符合良好的编程实践。
- en: 'Another advantage to this best practice is the benefit of communication within
    your organization: testers, project managers, and even business people can understand
    the simple language of roles, yet Puppet developers communicate more readily at
    the deeper *profile* level of abstraction.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这种最佳实践的另一个优势是它能促进组织内部的沟通：测试人员、项目经理甚至业务人员可以理解角色的简单语言，而Puppet开发人员则更容易在更深层次的*配置文件*抽象级别进行沟通。
- en: Profiles expose an appropriate interface to roles. Roles, correspondingly, also
    expose a neat interface to your ENC, and this allows even fewer technical company
    personnel to be responsible for node classification.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件向角色暴露了适当的接口。相应地，角色也向你的ENC暴露了整洁的接口，这使得即使是技术背景较少的公司人员也能负责节点分类。
- en: Deciding on the granularity of roles for your nodes
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定节点角色的粒度
- en: You should start with roles that are entirely fine-grained, with every role
    being just a simple list of the profiles it contains.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该从完全细粒度的角色开始，每个角色只是包含它所包含的简单配置文件列表。
- en: If you have a lot of only slightly different nodes, you could begin to introduce
    more complex roles that just contain one profile per line, for example, conditional
    logic or even nested roles.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有很多只略有不同的节点，可以开始引入更复杂的角色，每行仅包含一个配置文件，例如条件逻辑甚至嵌套角色。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have broadened our skills in writing Puppet modules to encompass
    the roles and profiles pattern, with reference to two special cases which provide
    a reliable way to build reusable, configurable, and refactorable site-wide configuration
    code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们拓宽了编写Puppet模块的技能，涵盖了角色和配置文件模式，并参考了两个特殊案例，这些案例提供了一种可靠的方式来构建可重用、可配置和可重构的全站配置代码。
- en: Next, we stay in the development frame of mind, but look at how we can cover
    some of those possible edge cases where we may need to extend Puppet beyond its
    regular usage scenarios.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们保持开发的思维方式，但看看如何处理那些可能需要扩展Puppet超出常规使用场景的边缘情况。
