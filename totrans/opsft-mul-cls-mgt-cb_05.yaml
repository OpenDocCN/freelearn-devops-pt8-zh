- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenShift Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will navigate through a deployment process for Red Hat OpenShift.
    A successful implementation case will be only possible when you understand the
    needs of the architecture, understand the branding technology applied to the underlying
    infrastructure, and understand the workloads you are supposed to have on top of
    OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen in [*Chapter 1*](B18015_01.xhtml#_idTextAnchor016), *Hybrid
    Cloud Journey and Strategies*, there are a lot of options in this multi-cluster
    universe. So, what are the best options for you? How can you choose? It can be
    very confusing if you start to prepare the requisites of the deployment without
    properly preparing yourself for it. That said, we must stress the importance of
    being aligned with the architecture chosen to ensure the expected deployment will
    succeed. Runtime changes and unplanned gaps can have unexpected results and create
    a platform full of flaws, causing the platform to malfunction. Making a comparison
    with the real world, it is like a ship that cannot be smoothly loaded with containers
    because it is always being repaired and, as such, is not ready to perform long
    trips or even depart.
  prefs: []
  type: TYPE_NORMAL
- en: Considering the explanation in the first part of this book, there are now several
    options for deploying OpenShift clusters. Next, we'll start with a checklist of
    questions that will help you make the right decision for your needs. Keep in mind,
    there are no right or wrong answers, but it will help you decide which is the
    best for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift installation prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for the installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's next?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started then!
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a practical chapter in which you will deploy an OpenShift cluster using
    what we consider to be the most complex deployment procedure: the **User-Provisioned
    Installer** (**UPI**)/agnostic installation.'
  prefs: []
  type: TYPE_NORMAL
- en: The source code used in this chapter is available at [https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter05](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: As we already covered in this book, there are many different types of installations
    and supported providers, and it is almost impossible to cover every combination
    of them – neither is it our intention, as there is plenty of documentation, tutorials,
    and great references on the internet that will guide you through all types of
    installations.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, we understand that the most-added-value deployment procedure we
    can bring to you is the UPI/agnostic one; when you make it, you will be able to
    understand and easily execute the other types of installations. The reason for
    this is simple: with the UPI/agnostic installation, you are responsible for providing
    all the prerequisites that an OpenShift deployment requires, while with the **Installer-Provisioned
    Infrastructure** (**IPI**) deployment, the installer itself will provide the prerequisites
    for you automatically within the underlying provider.'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift checklist opt-in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have you seen the checklist we gave to you in [*Chapter 2*](B18015_02.xhtml#_idTextAnchor028),
    *Architecture Overview and Definitions*, and [*Chapter 3*](B18015_03.xhtml#_idTextAnchor066),
    *Multi-Tenant Considerations*. If you are reading this chapter to implement an
    OpenShift cluster in an enterprise and you haven't read those chapters yet, we
    strongly recommend you go back and read them, as they contain important aspects
    you need to think about and consider first, before deploying a cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Lab requisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To follow the labs in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A hypervisor or cloud provider in which you can spin up the instances. You can
    also use bare metal servers if you have them available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the minimum requirement for the VMs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One temporary server for the Bootstrap node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Three servers for master nodes, with 2 vCPU, 8 GB RAM, and 50 GB of disk (minimum)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two servers for worker nodes, with 2 vCPU, 8 GB RAM, and 50 GB of disk (minimum)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One server for the bastion node, with 2 vCPU, 4 GB RAM, and 20 GB of disk (minimum)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't have enough resources available in your environment, you can also
    use a three-node cluster, in which masters and workers are co-located in the same
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The requirements listed are valid only for a lab. Refer to [*Chapter 2*](B18015_02.xhtml#_idTextAnchor028),
    *Architecture Overview and Definitions*, to get a reliable sizing for an enterprise
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift installation prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting your journey through OpenShift deployment, you must observe
    several prerequisites. First, we will explore the options according to the decision
    that you previously made in the opt-in form.
  prefs: []
  type: TYPE_NORMAL
- en: 'As explained in [*Chapter 1*](B18015_01.xhtml#_idTextAnchor016), *Hybrid Cloud
    Journey and Strategies*, OpenShift has three installation modes: **Installer-Provisioned
    Infrastructure** (**IPI**), **User-Provisioned Infrastructure** (**UPI**), and
    **agnostic** (that is, a bare metal installer). It is very important to remember
    that no option will work well for every case, although the best option is the
    one that best fits into the architecture designed for you previously.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is very focused on deployment and all things related to spawning
    up a cluster by yourself, so keep that in mind when making your own lab and enjoy
    the tips and materials on our GitHub repository, which will be a real Swiss Army
    knife for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows you which installation methods you have available,
    according to the provider chosen (at the time this book was written):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18015_Table_5.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Regarding the terms in the previous table, we classified some of the available
    options for each infrastructure provider to give you an overview of the current
    possibilities (at the time of writing this book). When we say **Recommended**,
    we are not only giving our perspective, but we are trying to say this is a *common
    and best choice* for that scenario. **Possible** indicates a valid option, but
    you will have some penalties, such as losing some great automation features the
    product brings out of the box. For that reason, we classified them as **Possible**,
    but not as the best choice. **Not Available** is self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the prerequisites will be different according to the installation method,
    we prepared a matrix that helps you start the preparation of the underlying infrastructure
    to begin the cluster deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18015_Table_5.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: UPI/agnostic installer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any OpenShift installation must have a valid Red Hat subscription, the OpenShift
    installer binaries, a **pull secret** file, a public **Secure Shell** (**SSH**)
    **key**, and the resources available according to each provider.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will guide you through a feasible and reliable cluster installation,
    whatever provider you have chosen. We will also set up the prerequisites needed
    using practical examples – feel free to use those configurations as many times
    as you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the files used in this chapter are also available in our GitHub repository:
    [https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter05](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter05)'
  prefs: []
  type: TYPE_NORMAL
- en: So, let's start with the prerequisite systems that are not part of OpenShift
    itself, but are indispensable to ensure that everything will work fine during
    the deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: DNS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will discuss the **Domain Name System** (**DNS**) requirements
    to provision an OpenShift cluster. For demonstrations purposes, we will give the
    minimum configuration to make everything work; for in-depth settings, check the
    references we have provided in the last chapter of this book.
  prefs: []
  type: TYPE_NORMAL
- en: For our lab, we will use the **BIND** tool running in a Red Hat Enterprise Linux
    8 VM; however, you can use any other DNS server on top of Windows or your preferred
    Linux distribution. We will refer to this Linux VM from now on by the name **bastion**,
    which is a kind of convention with Red Hat architectures. If you want to strictly
    follow the instructions in this chapter, we recommend you use a fresh installation
    of Red Hat Enterprise Linux 8, using the minimum install.
  prefs: []
  type: TYPE_NORMAL
- en: An OpenShift cluster requires a dedicated subdomain. To facilitate your understanding,
    we will use a hypothetical *hybrid cloud company* that uses `hybridmycloud.com`
    as its main public domain. The complete subdomain for the OpenShift cluster will
    be `ocp.hybridmycloud.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install BIND, run the following commands on your bastion VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to configure the DNS server to be used with the OpenShift
    installation and applications. Perform the following steps to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a subdomain zone by adding the following code in your `named.conf` file.
    You can alternatively download a file ready to be used in our GitHub repository
    at `chapter05/named.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a forward zone file at `/var/named/ocp.hybridmycloud.com.db`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s look at this code in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[1]**: Common DNS zone header.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[2]**: The nameserver will be its own Bastion server.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[3]**: The IP address from the nameserver (Bastion IP).'
  prefs: []
  type: TYPE_NORMAL
- en: '**[4]**: These records are mandatory and need to point to the VIP that will
    be used for the OpenShift API functions. In our case, we are using the bastion
    server as the VIP (suitable only for lab environments).'
  prefs: []
  type: TYPE_NORMAL
- en: '**[5]**: Wildcard VIP record used for the applications that run on OpenShift.
    In our case, we are using the bastion server as the VIP (suitable only for lab
    environments).'
  prefs: []
  type: TYPE_NORMAL
- en: '**[6]**: Bootstrap node IP record, used only for the cluster installation and
    can be removed after it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[7]**: Master node IP records, where the control plane objects will be hosted.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[8]**: Worker node IP records, where the workloads will run. If you go for
    a three-node cluster, disregard the worker hosts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a reverse zone file at `/var/named/1.168.192.in-addr.arpa`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Notes
  prefs: []
  type: TYPE_NORMAL
- en: Do *not* create a reverse zone record for the application's wildcard VIP, as
    that will lead to the wrong DNS resolution.
  prefs: []
  type: TYPE_NORMAL
- en: If you created it for a three-node cluster, disregard the worker A and PTR records.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart the `named` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the DNS to ensure that all DNS records are set up appropriately using
    the following `dig` commands (replace `192.168.1.200` with your bastion IP):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Validate the OpenShift API using the following:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the BIND samples we described in this section, the output *must* be as
    follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the application''s wildcard using the following:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All results *must* point to the ingress application''s wildcard VIP, as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the nodes, as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The answer must be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s validate the reverse records, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The results look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Well done! If your DNS server is properly resolving names, you took a big step
    in preparing the prerequisites. Now, let''s move on to another important piece
    of an OpenShift installation using the UPI method: the **Dynamic Host Configuration
    Protocol** (**DHCP**).'
  prefs: []
  type: TYPE_NORMAL
- en: DHCP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DHCP is used to provide IP addresses to the OpenShift nodes. In UPI or agnostic
    installation nodes, the IP address needs to be set using static configuration
    on DHCP (the `fixed-address` parameter).
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that the IP address and hostname for the nodes in the DNS and DHCP
    match – each IP address and hostname in the DNS and DHCP need to be the same.
    In this subsection of prerequisites, we are focusing on creating a simple DHCP
    setup for later study and laboratory use. As previously stated, DHCP will be configured
    to provide static IP addresses, under the `192.168.1.x` subnet, so, this configuration
    uses the **media access control** (**MAC**) address of each node''s Ethernet interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install DHCP on your bastion VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the `dhcpd.conf` file according to the hostnames and IP addresses
    used with the DNS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s look at this code in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[1]**: Common settings to define DHCP as authoritative in that subnet and
    times of IP lease.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[2]**: Scope subnet definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '`#` character at the beginning of the line).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[3]**: A group with all nodes to lease IP addresses. If you go for a three-node
    cluster, disregard the worker hosts.'
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: After you create the VMs in your hypervisor, update `dhcpd.conf` accordingly
    with the MAC addresses you get from the network interfaces; otherwise, no IP address
    will be given to this subnet.
  prefs: []
  type: TYPE_NORMAL
- en: Web servers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A web server is used to serve the OS image to install nodes, and also to provide
    the Ignition files (Ignition files are manifest files encoded on `base64`). In
    our scenario, we will install and configure an Apache web server, which is a very
    simple way to provide all the necessary tools for the cluster installation to
    run adequately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow this short list of steps to accomplish this task:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install an **httpd** server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure `/etc/httpd/conf/httpd.conf` to change the **Listen directive**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply `httpd` port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a rule on `81`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a directory for OS image and Ignition files, and a file to test the
    connectivity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set permission and owner to the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start and enable the Apache web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test connectivity using the `curl` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you can see the file downloaded to your current folder, it means you have
    the Apache web server properly configured to serve the OpenShift installation.
  prefs: []
  type: TYPE_NORMAL
- en: Load balancer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A load balancer is another important element in an OpenShift cluster architecture.
    It is responsible for balancing the connection to the pool member in a set of
    nodes. For performance and resilience reasons, it is recommended that you use
    dedicated load balancing appliance hardware for production environments.
  prefs: []
  type: TYPE_NORMAL
- en: For our lab, we will be using HAProxy in our bastion VM to perform the load
    balancing function, which is a powerful, lightweight, and easy-to-use software
    load balancer.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, before we start to configure it, it is important that you understand
    the basics of load balancing methods and the best practices that fit with the
    OpenShift platform.
  prefs: []
  type: TYPE_NORMAL
- en: I suppose the load balancer is like drops of water evenly distributed between
    a few cups, and each drop must fall into one glass, then the next drop must land
    in the next glass, and so on. Nonetheless, the cups are periodically dumped to
    avoid waste or overload.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, there are some ways to perform the task; these ways are known as **balancing
    methods**. The following table explains the scenarios that OpenShift will make
    use of:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18015_Table_5.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A typical load balancer configuration is composed of four pairs of frontend
    and backend configurations that will balance the different types of requests and
    give a reliable fault tolerance to the platform.
  prefs: []
  type: TYPE_NORMAL
- en: The first pool members are the master nodes; these are a group of three members
    and should work with the Least Connection method with a sourced address setup.
    This setting ensures that, during internal API calls to the load balancer, the
    request will be handled from the same node that started the call requisition and,
    as such, gives the proper callback and asynchronous functioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the HAProxy frontend and backend configurations in the sample
    here: (frontend `openshift-api-server` and backend `openshift-api-server`).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Master node load balancer ](img/B18015_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Master node load balancer
  prefs: []
  type: TYPE_NORMAL
- en: The second group of load balancer configurations is also used with the master
    nodes for the OpenShift `machine-config-server` API. See the HAProxy configuration
    for the `machine-config-server` API in the frontend `machine-config-server` and
    backend `machine-config-server`.
  prefs: []
  type: TYPE_NORMAL
- en: The third and fourth groups of load balancers should be a pool of at least two
    nodes (worker nodes) that will be responsible for the traffic routing from the
    outside to the application distributed on the worker nodes of the cluster (one
    for HTTP and another for HTTPS).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Ingress load balancer ](img/B18015_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Ingress load balancer
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift often recommends the least connections with source addresses running
    on the transport layer (Layer 4,) which gives good performance to routing applications.
    However, when using certificates signed by a public **Certificate Authority**
    (**CA**) in the load balancer, instead of the OpenShift Ingress Controller, you
    must eventually set up this pool to work on the application layer (Layer 7).
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: We strongly recommend disabling the SSL inspection on the load balancer/firewall
    layers to avoid digital certificate issues and the malfunctioning of the OpenShift
    cluster. This occurs because the enterprise load balancer/firewall solution, when
    used with SSL inspection mode enabled, decrypts every TCP payload and re-encapsulates
    them with a new SSL header. OpenShift interprets it as a certificate error, causing
    incorrect source/destiny TCP packets, and hanging up to TLS termination.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, the complete `haproxy.cfg` will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at this code in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[1]**: If you go for a three-node cluster, you should also point to the master
    nodes here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, apply the HAProxy configuration by starting and enabling the service,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: After it starts, your load balancer can receive incoming connections and give
    the redirect to one member of the pool.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As soon as the installation of the OpenShift control plane is finished, you
    will receive a message saying that it is safe to remove Bootstrap from load balancing;
    then, you can open the `haproxy.cfg` file and comment, or remove the lines that
    are referencing the Bootstrap server and restart the HAProxy server to apply the
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the cluster has a lot of components involved, it is important to think about
    the security between Red Hat OpenShift and all other systems it integrates with.
    Unless you are working with a disconnected environment (refer to the *Further
    reading* section of this chapter for more details), you will need to grant access
    to ports `80` and `443` from certain URLs. These URLs are needed to download the
    required container images and others. Therefore, whitelist the following URLs
    in your network firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18015_Table_5.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Reference
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to this link for the latest set of URLs: [https://docs.openshift.com/container-platform/4.9/installing/install_config/configuring-firewall.html](B18015_05.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: PXE server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A PXE server is a component that easily allows the boot process to look for
    installation files. During PXE configuration, you can create a simple **Grand
    Unified Bootloader** (**GRUB**) menu that works exactly like an OS installer,
    with all the kernel parameters you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will deploy some packages to install the PXE server, create directories
    to store the configuration files, and develop a simple and useful bootstart menu.
    Now, SSH to your bastion server and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install these `syslinux` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the required PXE server files, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the Red Hat CoreOS image files, as shown here (files are available for
    download at this link: [https://console.redhat.com/openshift/install/platform-agnostic/user-provisioned](https://console.redhat.com/openshift/install/platform-agnostic/user-provisioned)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create the bootloader menu to assist you in the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have all the prerequisite components correctly set, we can start
    the installation using the UPI or agnostic installation method! So, go ahead and
    start your engines!
  prefs: []
  type: TYPE_NORMAL
- en: IPI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though we tried to give you a smooth demonstration of how to create all
    the prerequisite systems and servers, it might still look like an exhausting process.
    It is important to emphasize that it can be tiring when preparing on your own,
    but, in large enterprises, those infrastructures are often already working and
    need only some small setting tweaks to reach the necessary state.
  prefs: []
  type: TYPE_NORMAL
- en: You must be worn out after going through all the previous steps for the UPI
    installer. The good news is that the IPI installer is much easier to follow! You
    probably compared all the things needed on the table `install-config.yaml` file,
    and run the OpenShift install binary to spawn your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'This process is simple due to the high level of automation that OpenShift has
    under the hood, which uses cloud APIs to create all the prerequisites for you,
    according to the parameters you set in `install-config.yaml`. Obviously, there
    are some changes from cloud to cloud. In the following code, we show two excerpts
    that change in `install-config.yaml` when preparing your file for AWS, Azure,
    and GCP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an AWS `install-config` sample file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s look at a sample Azure `install-config` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have a GCP `install-config` sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Well done! Now you have the correct `install-config.yaml` files to use with
    your cloud provider. Continue with the installation to start OpenShift using your
    preferred installation method.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for the installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen in the previous sections, the prerequisites are very important,
    and any mistake could be an *Achilles' heel* for the OpenShift cluster installation
    and functioning. Failure to prepare the prerequisites correctly will cause errors
    during the cluster deployment that are not always easy to troubleshoot to find
    the root cause. That said, we would like to stress the importance of preparing
    and validating the pre-requisites correctly before starting the cluster deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the installation using the UPI method, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An SSH key pair
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pull secret for the cluster, which you can generate by accessing [https://console.redhat.com/openshift/install](B18015_05.xhtml),
    with a valid user subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift installer binary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift command-line tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation configuration file (`install-config.yaml`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will detail all of those steps.
  prefs: []
  type: TYPE_NORMAL
- en: An SSH key pair
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starting from OpenShift version 4, Red Hat begins to use Red Hat CoreOS as the
    main OS due to the container and immutable nature. Red Hat CoreOS needs some Ignition
    files to provision the OS based on that configuration. This process leads to a
    secure and reliable way of provisioning OpenShift nodes, allowing a standard **zero-touch
    provisioning** (**ZTP**) process.
  prefs: []
  type: TYPE_NORMAL
- en: SSH is used to access the nodes directly and only through a pair of keys assigned
    to the username `coreos` (it is not possible to access the nodes using a simple
    username/password combination). It is vital to keep a copy of the SSH key pair
    used during the cluster deployment in case of a problem with your cluster, as
    this is the only way to directly access the nodes to collect logs and try to troubleshoot
    them. Also, the SSH key pair will become part of the Ignition files and the public
    key pair is distributed across all nodes of the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use our bastion VM to create an SSH key pair, by using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We will use a public key in the next steps, for example, `clusterOCP_key.pub`.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Never expose or share the SSH private key; any malicious person with the private
    key could get root access to the nodes and, with some knowledge, escalate privileges
    as an OpenShift `cluster-admin` user.
  prefs: []
  type: TYPE_NORMAL
- en: Pull secret
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A pull secret is a file that contains a collection of usernames and passwords
    encoded in `Base64` used for authentication in image registries, such as `quay.io`
    and `registry.redhat.io`. You need to have a valid username at `console.redhat.com`
    to download or copy the pull secret.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, complete the following two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Access https://console.redhat.com/openshift/create and access **Downloads**
    in the side menu, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Pull secret, Downloads menu ](img/B18015_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Pull secret, Downloads menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down to the **Tokens** section and click on the **Copy** or **Download**
    buttons to get the pull secret, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Download or copy the pull secret ](img/B18015_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Download or copy the pull secret
  prefs: []
  type: TYPE_NORMAL
- en: On this page, you will also find the command line, developer tools, and the
    installer binaries to download.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift installer binary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the cluster, you should download the installer binary, which can
    be downloaded from the Red Hat Hybrid Cloud Console, as shown in *Figure 5.3*,
    or you can browse the public repository found here: [https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/](B18015_05.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift command-line tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like the installer binary, you can download the command-line tools under the
    same public repository mentioned previously, or through the Red Hat Hybrid Cloud
    Console from where you downloaded the pull secret.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift command-line tools consist of the `oc` and `kubectl` CLIs, which you
    will use to manage and run commands on the cluster as soon as it has been spawned.
  prefs: []
  type: TYPE_NORMAL
- en: Installation configuration file (install-config.yaml)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last step before starting the installation is to create a manifest file
    called `install-config.yaml`. Essentially, this file consists of the control plane,
    workers, and network definitions, along with some metadata, such as the pull secret
    and the public SSH key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on our previous configuration, the following is a sample of the `install-config`
    file that can be used with the installation. You can find this file in our GitHub
    repository at `chapter05/none-install-config.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at this code in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[1]**: The base domain for your cluster. Needs to match with the one you
    configured in your DNS in the previous section.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[2]**: The initial number of worker nodes you will be deploying with the
    cluster. If you go for a three-node cluster, this value must be zero.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[3]**: The initial number of master nodes you will be deploying with the
    cluster. For a highly available cluster, always use three replicas.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[4]**: The cluster name. This also needs to match with what you specified
    in your DNS.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[5]**: A block of IP addresses that will be used internally for pods within
    OpenShift SDN. We explored this concept in [*Chapter 2*](B18015_02.xhtml#_idTextAnchor028),
    *Architecture Overview and Definitions*.'
  prefs: []
  type: TYPE_NORMAL
- en: '`OpenShiftSDN` or `OVNKubernetes`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[7]**: A block of IP addresses that will be used internally for network services
    within OpenShift SDN. We explored this concept in [*Chapter 2*](B18015_02.xhtml#_idTextAnchor028),
    *Architecture Overview and Definitions*.'
  prefs: []
  type: TYPE_NORMAL
- en: '`none`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use also the `openshift-installer` binary to generate a sample `install-config.yaml`
    file for the provider you are going to work with. Use the following command for
    that: `./openshift-install create install-config`.'
  prefs: []
  type: TYPE_NORMAL
- en: After this file is created, you can proceed to the installation steps in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, some further steps should be performed before deploying the cluster. The
    first step in the installation is to create the manifest files. We strongly recommend
    you create a backup of the `install-config.yaml` file before running the following
    command, as this command removes the original file and you will need to create
    it again from scratch if you need to retry the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Open the `~/ocp/manifests/cluster-scheduler-02-config.yml` file in your preferred
    editor. Change the `mastersSchedulable` parameter to `false` if you go for a regular
    cluster, or `true` if you decided to provision a three-node cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now generate the Ignition files by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'After the previous command, you should have three new Ignition files: `bootstrap.ign`,
    `master.ign`, and `worker.ign`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy these three files to the HTTP server you prepared in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you can proceed with provisioning the nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 1 – Provisioning servers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you need to provision the servers. This will vary depending on the underlying
    infrastructure but, in general, the process for virtualized environments (for
    example, VMware, vSphere, and RHV) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the Red Hat CoreOS template to the hypervisor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone it and configure the VM parameters according to the provider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the other hand, the process for bare metal or agnostic installation is performed
    either by booting using the Red Hat CoreOS ISO or using a PXE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our lab, we are going to boot using the Red Hat CoreOS ISO. Follow these
    steps to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the ISO file from `console.redhat.com`, as mentioned previously, or
    directly through this link: [https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/latest/rhcos-live.x86_64.iso](https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/latest/rhcos-live.x86_64.iso).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the bastion VM, run the following command to get the `SHA512` digest of
    the Ignition files (this will be used after booting from the ISO to validate the
    authenticity of the file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An example of the output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Boot using the ISO image, but don't specify any options until you see a shell
    prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following `coreos-installer` command to start the ignition process
    and, consequently, the OS provisioning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Repeat the same process for each server, always respecting the following format
    for the `coreos-intaller` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where `<node_type>` will be `bootstrap.ign`, `master.ign`, or `worker.ign`,
    `<device>` is the disk to be used to install the OS (such as `/dev/sda`), and
    `<digest>` is the result of the `sha512sum` command mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: After booting the bootstrap and master nodes using this procedure, you can go
    to the next step to monitor the progress of the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 2 – Bootstrap and control plane
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this phase, Bootstrap will download the container images to provision the
    control plane components. As soon as the containers in each master node are running,
    the control plane components will start configuring themselves until the **etcd**
    cluster, API, and controllers from OpenShift are synchronized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the Bastion VM to monitor the progress of the
    Bootstrap and control plane deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Immediately after the command is triggered, you will see some log messages
    on the console, similar to this sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: After that, you must remove Bootstrap from the load balancer and restart the
    `haproxy` service.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the Bootstrap server is a one-shot use only; therefore, you can destroy
    the Bootstrap server completely from the infrastructure provider because it will
    not be used anymore, even if something goes wrong during the cluster installation.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 3 – Check for certificates to sign – For UPI and agnostic installations
    only
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Bootstrap finishes its process, the Red Hat OpenShift Container Platform
    creates a series of **certificate signing requests** (**CSRs**) for each of the
    nodes. During our planning, we attempted to provision two worker nodes, so we
    must accept the certificates to join the worker nodes to the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to use the `oc` client to approve the certificates. To do so, run the
    following command to export the `kubeadmin` credentials and get access to the
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'A simple command can list the pending certificates and approve them until no
    pending certificates are showing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to approve the certificates, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To confirm that everything worked fine, run the following commands until all
    nodes remain `Ready`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Phase 4 – Finishing the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are almost at the end of our UPI/agnostic installation! Now, we must check
    the cluster operators to ensure that all of them are available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the following command, you will be able to monitor the cluster operators''
    deployment progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: When it finishes, you will receive the `kubeadmin` password to finally get access
    to your OpenShift cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: '`kubeadmin` is a temporary user with the `cluster-admin` privileges. It is
    highly recommended that you remove the `kubeadmin` user as soon as you set up
    a new identity provider, and give proper `cluster-admin` privileges to the cluster
    administrators.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can access the OpenShift Console GUI using your preferred browser.
    To do so, browse to [https://console-openshift-console.apps.ocp.hybridmycloud.com](B18015_05.xhtml)
    and insert the `kubeadmin` credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Accessing the Console UI ](img/B18015_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Accessing the Console UI
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, sit back and enjoy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – The Console UI ](img/B18015_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – The Console UI
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You successfully deployed an OpenShift cluster! Celebrate your
    great success, but remember that your journey is just starting!
  prefs: []
  type: TYPE_NORMAL
- en: What's next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, OpenShift is minimally functional, meaning that you have a control plane
    that can schedule pods, handle API calls and controllers, and an etcd cluster,
    which offers key/value storage for objects in the cluster. You also have some
    worker nodes fully functional that can already host some workloads.
  prefs: []
  type: TYPE_NORMAL
- en: But that's not all! Now, the activities that demand configuration begin (also
    known as Day 2, or post-installation activities). In the next few chapters, we
    will look at Ingress configurations, networks, registry configurations, views
    for local volumes, and persistent volumes.
  prefs: []
  type: TYPE_NORMAL
- en: We will also talk about taints and tolerations, security, and best practices
    – everything it takes for you to go from zero to hero and start acting on more
    complex implementations.
  prefs: []
  type: TYPE_NORMAL
- en: FAQs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While in the deployment phase, whatever kind of installation you do, it is common
    for things to not work as expected. We will look at some error cases you could
    face during deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '*Why did the* `openshift-install` *execution stick waiting for the API*?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following message will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, the `INFO` message can be big trouble. At this point, you do not
    have much output to investigate, even if you increase the debug level of the messages.
    In this case, you should look at some of these options:'
  prefs: []
  type: TYPE_NORMAL
- en: Look up the API URL and check the DNS resolution; the query must result in the
    API IP in `install-config.yaml`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to ping all three master nodes individually to assure it is already up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UPI installation: Check on the hypervisor VM terminal if all masters are up
    and running and at the login prompt screen. Master nodes on the bootloader menu
    or whatever different situation of the login prompt screen could result in an
    API waiting message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IPI installation: Check the cloud credentials and permissions related to prerequisites.
    Your credentials might not have all the necessary permissions to create objects
    in general. Don''t give admin permission to the role attributed by the cluster
    service user because installation searches for a specific permission name. You
    can check roles and permission tables at [https://docs.openshift.com/container-platform/4.9/installing/installing_vsphere/installing-vsphere-installer-provisioned.html](B18015_05.xhtml),
    according to the cloud provider (for example, VMware vCenter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Timeout installation waiting for Bootstrap to complete*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following message will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `openshift-install` binary freezes while waiting for a Bootstrap process
    to complete, it means that it is waiting for some cluster operators to become
    available. In this case, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether you have enough worker nodes (at least two) to make the Ingress
    operator available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH to a worker node and check that the `crictl` process is still creating pods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH to a worker node and search for errors related to `kube-apiserver`, `kubelet`,
    `podman`, or `crictl` using the `journalctl` daemon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*X509 messages during cluster deployment*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following message will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'When creating Ignition files, OpenShift automatically creates a self-signed
    certificate that will be verified with every API call within the cluster. However,
    even if you have done all the prerequisite processes properly, sometimes you may
    get similar `x509` messages that will result in the installation process failing
    and not achieving the expected result. Try checking the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VSphere IPI installation**: Make sure you have imported the VMware CA certificate
    from the cluster that will extend OpenShift to the machine and will start the
    cluster installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`master.ign` does not have the same CA certificate configured on the load balancer
    that must respond in `api-int`. Also, verify that the external load balancer has
    been configured to use Layer 4/TCP/Passthrough.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificates created by `openshift-install` residing in `master.ign` have an
    expiration date of 24 hours and cannot be updated. If you tried to install the
    day before, and it was not successful, delete the installation directory and start
    creating manifests and Ignition files again.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have examined some options to install and configure your
    OpenShift Container Platform solution. From public clouds to on-premises, we have
    navigated through UPI, IPI, and agnostic implementation methods.
  prefs: []
  type: TYPE_NORMAL
- en: You now know about the public clouds offering fully supported implementations
    and documentation to start your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: You are invited to look deeper into making your OpenShift cluster stronger,
    more reliable, and as secure as possible. We encourage you to continue to the
    next chapter and learn even more with us.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to look at more information related to the concepts we covered
    in this chapter, check the following references:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The installation process for disconnected installations:* [https://docs.openshift.com/container-platform/latest/installing/installing-mirroring-installation-images.html](B18015_05.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OpenShift Container Platform 4.x:* Tested integrations by Red Hat and partners:
    [https://access.redhat.com/articles/4128421](B18015_05.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OpenShift Container Platform IPI: x509 certificate signed by an unknown authority:*
    [https://access.redhat.com/solutions/5203431](B18015_05.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OpenShift Container Platform bare metal:* x509 certificate signed by an unknown
    authority: [https://access.redhat.com/solutions/4271572](B18015_05.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
