["```\n# Windows Azure Virtual Network\n\n# This configuration template applies to Microsoft RRAS running on Windows Server 2012 R2.\n# It configures an IPSec VPN tunnel connecting your on-premise VPN device with the Azure gateway.\n\n# !!! Please notice that we have the following restrictions in our support for RRAS:\n# !!! 1\\. Only IKEv2 is currently supported\n# !!! 2\\. Only route-based VPN configuration is supported.\n# !!! 3\\. Admin privileges are required in order to run this script\n\nFunction Invoke-WindowsApi( \n    [string] $dllName, \n    [Type] $returnType, \n    [string] $methodName, \n    [Type[]] $parameterTypes, \n    [Object[]] $parameters \n    )\n```", "```\n{\n  ## Begin to build the dynamic assembly \n  $domain = [AppDomain]::CurrentDomain \n  $name = New-Object Reflection.AssemblyName 'PInvokeAssembly' \n  $assembly = $domain.DefineDynamicAssembly($name, 'Run') \n  $module = $assembly.DefineDynamicModule('PInvokeModule') \n  $type = $module.DefineType('PInvokeType', \"Public,BeforeFieldInit\") \n\n  $inputParameters = @() \n\n  for($counter = 1; $counter -le $parameterTypes.Length; $counter++) \n  { \n     $inputParameters += $parameters[$counter - 1] \n  } \n\n  $method = $type.DefineMethod($methodName, 'Public,HideBySig,Static,PinvokeImpl',$returnType, $parameterTypes)\n```", "```\n ## Apply the P/Invoke constructor \n  $ctor = [Runtime.InteropServices.DllImportAttribute].GetConstructor([string]) \n  $attr = New-Object Reflection.Emit.CustomAttributeBuilder $ctor, $dllName \n  $method.SetCustomAttribute($attr) \n\n  ## Create the temporary type, and invoke the method. \n  $realType = $type.CreateType() \n\n  $ret = $realType.InvokeMember($methodName, 'Public,Static,InvokeMethod', $null, $null, $inputParameters) \n\n  return $ret\n}\n```", "```\nFunction Set-PrivateProfileString( \n    $file, \n    $category, \n    $key, \n    $value) \n{\n  ## Prepare the parameter types and parameter values for the Invoke-WindowsApi script \n  $parameterTypes = [string], [string], [string], [string] \n  $parameters = [string] $category, [string] $key, [string] $value, [string] $file \n\n  ## Invoke the API \n  [void] (Invoke-WindowsApi \"kernel32.dll\" ([UInt32]) \"WritePrivateProfileString\" $parameterTypes $parameters)\n}\n```", "```\n# Install RRAS role\nImport-Module ServerManager\nInstall-WindowsFeature RemoteAccess -IncludeManagementTools\nAdd-WindowsFeature -name Routing -IncludeManagementTools\n\n# !!! NOTE: A reboot of the machine might be required here after which the script can be executed again.\n```", "```\n# Install S2S VPN\nImport-Module RemoteAccess\nif ((Get-RemoteAccess).VpnS2SStatus -ne \"Installed\")\n{\n  Install-RemoteAccess -VpnType VpnS2S\n}\n```", "```\n# Add and configure S2S VPN interface\n\nAdd-VpnS2SInterface `\n -Protocol IKEv2 `\n -AuthenticationMethod PSKOnly `\n -NumberOfTries 3 `\n -ResponderAuthenticationMethod PSKOnly `\n -Name <IP address of your Azure gateway> `\n -Destination <IP address of your Azure gateway> `\n -IPv4Subnet @(\"<IP range of your subnet in Azure>:100\") `\n -SharedSecret <shared key>\n\nSet-VpnServerIPsecConfiguration `\n -EncryptionType MaximumEncryption\n\nSet-VpnS2Sinterface `\n -Name <IP address of your Azure gateway> ` \n -InitiateConfigPayload $false ` \n -Force\n```", "```\n# Set S2S VPN connection to be persistent by editing the router.pbk file (required admin privileges)\nSet-PrivateProfileString $env:windir\\System32\\RRAS\\router.pbk \"<IP address of your Azure gateway>\" \"IdleDisconnectSeconds\" \"0\"\nSet-PrivateProfileString $env:windir\\System32\\RRAS\\router.pbk \"<IP address of your Azure gateway>\" \"RedialOnLinkFailure\" \"1\"\n\n# Restart the RRAS service\nRestart-Service RemoteAccess\n\n# Dial-in to Azure gateway\nConnect-VpnS2SInterface ` \n -Name <IP address of your Azure gateway>\n```"]