- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Deploying Containers in AWS with Terraform
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Terraform 在 AWS 中部署容器
- en: In recent years, containerization has become an increasingly popular method
    for deploying and managing applications in the cloud. **Amazon Web Services**
    (**AWS**) offers a range of containerization services, including Amazon **Elastic
    Container Registry** (**ECR**), Amazon **Elastic Container Service** (**ECS**),
    and Amazon **Elastic Kubernetes Service** (**EKS**). In this chapter, you will
    learn how to use Terraform to deploy containers in AWS, from selecting and designing
    the appropriate infrastructure to developing and deploying your container infrastructure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，容器化已经成为在云中部署和管理应用程序的越来越流行的方法。**亚马逊网络服务**（**AWS**）提供了一系列容器化服务，包括 Amazon **弹性容器注册表**（**ECR**）、Amazon
    **弹性容器服务**（**ECS**）和 Amazon **弹性 Kubernetes 服务**（**EKS**）。在本章中，您将学习如何使用 Terraform
    在 AWS 中部署容器，从选择和设计适当的基础设施，到开发和部署您的容器基础设施。
- en: 'Get ready to dive into the world of containerization and learn how to deploy
    containers in AWS using Terraform with the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好深入容器化的世界，并通过以下主题学习如何使用 Terraform 在 AWS 中部署容器：
- en: What are containers?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是容器？
- en: AWS containers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 容器
- en: How to utilize Terraform for containers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何利用 Terraform 管理容器
- en: How to use Terraform for AWS container resources
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Terraform 管理 AWS 容器资源
- en: What are containers?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是容器？
- en: Containers are a type of virtualization technology that allows developers to
    package up an application and its dependencies into a single container, which
    can be easily moved between different environments. Containers provide a consistent
    environment for the application to run in, regardless of the underlying infrastructure.
    They are lightweight and efficient, as they share the host operating system kernel
    and do not require a full **virtual machine** (**VM**). Popular containerization
    platforms include Docker and Kubernetes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一种虚拟化技术，允许开发者将应用程序及其依赖项打包成一个容器，这个容器可以在不同环境间轻松移动。容器为应用程序提供一致的运行环境，无论底层基础设施如何。容器是轻量级且高效的，因为它们共享主机操作系统内核，并且不需要完整的
    **虚拟机**（**VM**）。流行的容器化平台包括 Docker 和 Kubernetes。
- en: Containers offer a more lightweight and efficient alternative to VMs. In essence,
    a container is a self-contained, portable, and executable package that contains
    all the necessary components to run specific software, such as the code, runtime,
    libraries, environment variables, and configuration files. Because containers
    provide a consistent environment for the application to run in, they are well
    suited for use in various environments, including development, testing, and production.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 容器提供了一种比虚拟机更轻量级和高效的替代方案。本质上，容器是一个自包含的、可移植的、可执行的包，包含运行特定软件所需的所有组件，如代码、运行时、库、环境变量和配置文件。由于容器为应用程序提供一致的运行环境，因此它们非常适合用于各种环境，包括开发、测试和生产。
- en: Containers are built on top of a container engine, such as Docker or **Linux
    Containers** (**LXC**). These engines provide an abstraction layer on top of the
    host operating system and manage the container’s resources, such as CPU, memory,
    and storage. Containers can be run on a single host or can be orchestrated across
    multiple hosts using container orchestration platforms such as Kubernetes, Amazon
    EKS, Amazon ECS, or Docker Swarm.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 容器建立在容器引擎之上，例如 Docker 或 **Linux 容器**（**LXC**）。这些引擎在主机操作系统上提供了一个抽象层，并管理容器的资源，如
    CPU、内存和存储。容器可以在单个主机上运行，或者可以通过容器编排平台，如 Kubernetes、Amazon EKS、Amazon ECS 或 Docker
    Swarm，跨多个主机进行编排。
- en: Containers are also highly portable, so they can be easily moved between different
    environments, such as from a developer’s laptop to a test environment and then
    to production. This makes it easier to manage the entire application life cycle
    and ensures consistency across different stages of development.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 容器也具有高度的可移植性，因此可以轻松地在不同环境之间迁移，例如从开发者的笔记本电脑到测试环境，再到生产环境。这使得管理整个应用生命周期更加便捷，并确保在不同开发阶段之间的一致性。
- en: In summary, containers are a way to package software in a format that can run
    consistently across different environments. They are lightweight, efficient, and
    easy to manage, making them a popular choice for modern application development
    and deployment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，容器是一种将软件打包成可以在不同环境中一致运行的格式的方式。它们轻量、高效且易于管理，成为现代应用程序开发和部署的热门选择。
- en: Containers in AWS
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS 中的容器
- en: In AWS, containers refer to a way of packaging and deploying applications as
    container images. These container images can be run on AWS services such as Amazon
    ECS and Amazon EKS.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中，容器指的是一种将应用程序打包和部署为容器镜像的方式。这些容器镜像可以在 AWS 服务（如 Amazon ECS 和 Amazon EKS）上运行。
- en: Amazon ECS is a fully managed container orchestration service that makes it
    easy to run, scale, and secure containerized applications. With ECS, you can run
    containers on a cluster of Amazon **Elastic Compute Cloud** (**EC2**) instances,
    and it automatically handles tasks such as scaling, load balancing, and health
    monitoring. ECS also integrates with other AWS services such as **Elastic Load
    Balancing** (**ELB**), Amazon **Relational Database Service** (**RDS**), and Amazon
    **Simple Storage** **Service** (**S3**).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ECS 是一项完全托管的容器编排服务，简化了容器化应用程序的运行、扩展和安全性管理。使用 ECS，你可以在一组 Amazon **弹性计算云**（**EC2**）实例上运行容器，且它会自动处理扩展、负载均衡和健康监控等任务。ECS
    还与其他 AWS 服务集成，如 **弹性负载均衡**（**ELB**）、Amazon **关系数据库服务**（**RDS**）和 Amazon **简单存储服务**（**S3**）。
- en: Amazon EKS is a managed service that makes it easy to deploy, scale, and operate
    containerized applications using Kubernetes. EKS automates the provisioning and
    management of the Kubernetes control plane and worker nodes, so you can focus
    on building and running your applications. EKS also integrates with other AWS
    services, such as ELB and Amazon RDS, to provide a fully managed Kubernetes experience
    on AWS.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon EKS 是一项托管服务，简化了使用 Kubernetes 部署、扩展和操作容器化应用程序的过程。EKS 自动化了 Kubernetes 控制平面和工作节点的配置与管理，因此你可以专注于构建和运行应用程序。EKS
    还与其他 AWS 服务集成，如 ELB 和 Amazon RDS，提供全面托管的 Kubernetes 体验。
- en: AWS also offers other services that can be used in conjunction with containers,
    such as Amazon ECR for storing and managing container images, and AWS Fargate
    for running containers without the need to manage the underlying infrastructure.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 还提供了其他与容器一起使用的服务，如 Amazon ECR 用于存储和管理容器镜像，AWS Fargate 用于无需管理底层基础设施即可运行容器。
- en: In summary, in AWS, containers refer to containerized applications that can
    be run and managed on AWS services such as ECS and EKS, and other related services
    such as ECR and Fargate that provide a fully managed container orchestration service,
    allowing developers to focus on building and running their applications without
    worrying about the underlying infrastructure.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在 AWS 中，容器指的是可以在 AWS 服务（如 ECS 和 EKS）以及其他相关服务（如 ECR 和 Fargate）上运行和管理的容器化应用程序，这些服务提供了完全托管的容器编排服务，允许开发者专注于构建和运行应用程序，而无需担心底层基础设施。
- en: The reasons for using containers
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用容器的原因：
- en: 'There are several reasons why developers and organizations use containers:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者和组织使用容器的原因有多个：
- en: '**Portability**: Containers provide a consistent environment for an application
    to run in, regardless of the underlying infrastructure. This makes them highly
    portable, so they can be easily moved between different environments such as development,
    testing, and production.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**：容器为应用程序提供了一致的运行环境，无论底层基础设施如何。这使得容器高度可移植，可以轻松地在不同环境（如开发、测试和生产）之间迁移。'
- en: '**Isolation**: Containers provide isolation between different applications
    running on the same host, which helps to prevent conflicts and ensures that each
    application has the resources it needs.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离性**：容器为同一主机上运行的不同应用程序提供隔离，有助于防止冲突并确保每个应用程序获得所需的资源。'
- en: '**Scalability**: Containers can be easily scaled up or down to meet changing
    demands, allowing for more efficient use of resources.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：容器可以轻松地根据需求进行扩展或缩减，从而更高效地利用资源。'
- en: '**Cost-effective**: Containers are lightweight and share the host operating
    system kernel, so they are more efficient than full VMs. This means that you can
    run more containers on a single host, which can help to reduce costs.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：容器轻量级并共享宿主操作系统内核，因此它们比完整虚拟机更高效。这意味着你可以在单个主机上运行更多容器，从而帮助降低成本。'
- en: '**Automation**: Containers can be easily automated and orchestrated using tools
    such as Kubernetes and Docker, making it easier to manage the entire application
    life cycle.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：容器可以通过 Kubernetes 和 Docker 等工具轻松实现自动化和编排，从而简化整个应用程序生命周期的管理。'
- en: '**Efficiency**: Containers can be built and deployed faster, leading to faster
    development cycles and faster **time-to-market** (**TTM**).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：容器可以更快地构建和部署，从而缩短开发周期并加快**市场发布速度**（**TTM**）。'
- en: '**Security**: Containers provide an additional layer of security by isolating
    the application from the host operating system and other applications running
    on the same host.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：容器通过将应用程序与宿主操作系统及同一宿主上运行的其他应用程序隔离，提供额外的安全层。'
- en: '**Microservices**: Containers can be used to deploy microservices-based architectures,
    which can make it easier to build and maintain complex applications.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**：容器可以用于部署基于微服务的架构，这有助于构建和维护复杂的应用程序。'
- en: '**Flexibility**: Containers can be used with a variety of platforms and technologies,
    such as Linux, Windows, and cloud providers, making them a flexible choice for
    different types of applications and environments.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：容器可与多种平台和技术兼容，如 Linux、Windows 以及云服务提供商，使其成为不同类型应用和环境的灵活选择。'
- en: '**Versioning**: Containers can be versioned, making it easy to roll back to
    a previous version of an application if necessary.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本管理**：容器可以进行版本管理，便于在需要时回滚到应用的先前版本。'
- en: '**Testability**: Containers make it easy to test applications in different
    environments, as the entire application and its dependencies are packaged together
    in a container.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可测试性**：容器使得在不同环境中测试应用程序变得更加容易，因为整个应用及其依赖项都被打包在同一个容器中。'
- en: '**Continuous integration and deployment**: Containers can be integrated with
    **Continuous Integration and Continuous Deployment** (**CI/CD**) pipelines, allowing
    for automated building, testing, and deployment of applications.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成与部署**：容器可以与**持续集成和持续部署**（**CI/CD**）流水线集成，实现自动化的构建、测试和应用部署。'
- en: '**Hybrid and multi-cloud**: Containers can be used to deploy and run applications
    across multiple cloud providers, allowing for greater flexibility and choice when
    it comes to cloud infrastructure.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合云与多云**：容器可以用于跨多个云服务提供商部署和运行应用程序，从而在云基础设施方面提供更大的灵活性和选择。'
- en: '**Serverless**: Containers can be used in conjunction with serverless platforms
    such as AWS Lambda, Azure Functions, and Google Cloud Functions, to create highly
    scalable, event-driven applications.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无服务器架构**：容器可以与无服务器平台（如 AWS Lambda、Azure Functions 和 Google Cloud Functions）结合使用，创建高度可扩展、事件驱动的应用程序。'
- en: In summary, containers provide a consistent and isolated environment, helping
    to ensure that an application will run the same way across different environments
    and making it easy to move the application between different environments. They
    are lightweight, easy to automate and scale, cost-effective, efficient, and provide
    additional security. They are also a good fit for microservices-based architectures.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，容器提供了一致且隔离的环境，有助于确保应用程序在不同环境中以相同方式运行，并且便于在不同环境之间迁移应用程序。它们轻量级、易于自动化和扩展，具有成本效益，效率高，并且提供额外的安全性。同时，容器也非常适合基于微服务的架构。
- en: How to containerize applications
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将应用程序容器化
- en: 'There are several steps involved in containerizing an application:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化应用程序涉及以下几个步骤：
- en: '**Package the application and its dependencies**: The first step is to package
    the application and its dependencies into a single container. This typically involves
    creating a container image, which includes the application code, runtime, libraries,
    environment variables, and config files.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**打包应用及其依赖项**：第一步是将应用程序及其依赖项打包成一个容器。这通常涉及创建一个容器镜像，镜像中包括应用程序代码、运行时、库、环境变量和配置文件。'
- en: '**Define the container’s environment**: The next step is to define the container’s
    environment, including the operating system and runtime that the application will
    run on. This is done by creating a Dockerfile, which specifies the base image
    to use, any additional software to install, and any configuration settings.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义容器环境**：接下来的步骤是定义容器的环境，包括应用程序运行的操作系统和运行时。这可以通过创建一个 Dockerfile 来完成，该文件指定使用的基础镜像、需要安装的附加软件以及任何配置设置。'
- en: '**Build the container image**: Once the Dockerfile is defined, the container
    image can be built using a tool such as Docker. This creates a lightweight, standalone,
    executable package that includes everything needed to run the application.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建容器镜像**：定义完 Dockerfile 后，可以使用如 Docker 等工具构建容器镜像。这将创建一个轻量级、独立的可执行包，包含运行应用所需的一切。'
- en: '**Push the container image to a registry**: After the container image is built,
    it can be pushed to a container registry, such as Docker Hub or Amazon ECR, where
    it can be easily shared and distributed to different environments.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将容器镜像推送到注册表**：在构建容器镜像后，可以将其推送到容器注册表，例如 Docker Hub 或 Amazon ECR，在那里可以轻松地共享和分发到不同的环境中。'
- en: '**Deploy the container**: The final step is to deploy the container to a container
    orchestration platform, such as Kubernetes or Amazon ECS, where it can be easily
    scaled and managed.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**部署容器**：最后一步是将容器部署到容器编排平台，例如 Kubernetes 或 Amazon ECS，在这里可以轻松地扩展和管理容器。'
- en: '**Test the containerized application**: Before deploying the containerized
    application to production, it’s important to test it in a non-production environment
    to make sure it works as expected. This can be done by running the container image
    on a test cluster or on a developer’s local machine. This step can help identify
    and fix any issues before the application is deployed to production.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试容器化应用程序**：在将容器化应用程序部署到生产环境之前，重要的是在非生产环境中进行测试，确保它按预期工作。可以通过在测试集群或开发人员的本地机器上运行容器镜像来实现。此步骤有助于在将应用程序部署到生产环境之前识别并修复任何问题。'
- en: '**Optimize the container image**: It’s important to optimize the container
    image to minimize the size and reduce the number of layers. This can be done by
    using multi-stage builds, removing unnecessary files and packages, and using smaller
    base images.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**优化容器镜像**：优化容器镜像非常重要，目的是最小化镜像大小并减少层数。这可以通过使用多阶段构建、删除不必要的文件和包以及使用更小的基础镜像来实现。'
- en: '**Monitor and update the containerized application**: Once the containerized
    application is deployed, it’s important to monitor it to ensure it’s running smoothly
    and to identify any potential issues. Regular updates and security patches should
    be applied to the containerized application and its dependencies.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控和更新容器化应用程序**：一旦容器化应用程序部署完成，重要的是要监控它，确保它平稳运行，并识别任何潜在问题。应定期更新和应用安全补丁到容器化应用程序及其依赖项。'
- en: '**Consider security best practices**: Security should always be considered
    when containerizing an application. Best practices include running containers
    with the least privilege, using a container registry with built-in security features,
    and regularly updating the container images and the host system.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**考虑安全最佳实践**：容器化应用程序时应始终考虑安全性。最佳实践包括以最小权限运行容器，使用具有内置安全功能的容器注册表，以及定期更新容器镜像和主机系统。'
- en: In summary, containerizing an application is a multi-step process that involves
    packaging the application and its dependencies into a container image, defining
    the container’s environment, building the image, pushing it to a registry, deploying
    it to a container orchestration platform, testing it, optimizing the image, monitoring
    and updating the application, and considering security best practices.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，容器化应用程序是一个多步骤的过程，涉及将应用程序及其依赖项打包成容器镜像，定义容器的环境，构建镜像，将其推送到注册表，将其部署到容器编排平台，进行测试，优化镜像，监控并更新应用程序，并考虑安全最佳实践。
- en: AWS containers
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 容器
- en: In AWS, containers refer to a way of packaging and deploying applications as
    container images. These container images can be run on AWS services such as Amazon
    ECS and Amazon EKS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中，容器是指将应用程序打包并作为容器镜像部署的一种方式。这些容器镜像可以在 AWS 服务上运行，例如 Amazon ECS 和 Amazon
    EKS。
- en: Amazon ECS and Amazon EKS are explained in the *Containers in AWS* section,
    so we won’t repeat them here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ECS 和 Amazon EKS 在 *AWS 中的容器* 部分进行了说明，因此我们在这里不再赘述。
- en: AWS Fargate is a serverless compute engine for containers that allows you to
    run containers without having to provision and manage the underlying infrastructure.
    With Fargate, you only pay for the resources that your containers use, and there
    is no need to manage the underlying EC2 instances.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate 是一种无服务器容器计算引擎，允许您运行容器而无需配置和管理底层基础设施。使用 Fargate，您只需为容器使用的资源付费，无需管理底层的
    EC2 实例。
- en: Amazon ECR is a fully managed container registry service that makes it easy
    to store, manage, and deploy container images. ECR is integrated with other AWS
    services such as ECS and EKS, making it easy to store and retrieve container images
    for use in those services.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ECR 是一种完全托管的容器注册表服务，使存储、管理和部署容器镜像变得更加容易。ECR 与其他 AWS 服务（如 ECS 和 EKS）集成，使得在这些服务中存储和检索容器镜像变得简便。
- en: AWS App Runner is a fully managed service that makes it easy to build, test,
    and deploy containerized applications quickly. It automates the building, testing,
    and deployment of containerized applications, allowing developers to focus on
    writing code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: AWS App Runner 是一项完全托管的服务，可以快速构建、测试和部署容器化应用程序。它自动化了容器化应用程序的构建、测试和部署，使得开发者可以专注于编写代码。
- en: AWS Elastic Beanstalk is a fully managed service that makes it easy to deploy,
    run, and scale web applications and services. Elastic Beanstalk supports multiple
    platforms, including Java, .NET, PHP, Node.js, Python, Ruby, and Go, and it also
    supports deploying applications as Docker containers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk 是一项完全托管的服务，使得部署、运行和扩展 Web 应用程序和服务变得更加简单。Elastic Beanstalk
    支持多种平台，包括 Java、.NET、PHP、Node.js、Python、Ruby 和 Go，并且还支持将应用程序部署为 Docker 容器。
- en: AWS Lambda is a serverless compute service that allows you to run code without
    provisioning or managing servers. It automatically scales your applications in
    response to incoming requests, and you only pay for the compute time that you
    consume. AWS Lambda with container support allows developers to package their
    application code and dependencies together in a container and deploy it as a function.
    This enables developers to take advantage of the benefits of containers such as
    consistent runtime environments and the ability to run their applications in different
    environments.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 是一个无服务器计算服务，它允许你在不配置或管理服务器的情况下运行代码。它会根据传入的请求自动扩展你的应用程序，你只需要为实际使用的计算时间付费。AWS
    Lambda 支持容器功能，允许开发者将应用代码和依赖一起打包成容器，并作为函数部署。这使得开发者能够利用容器的优势，如一致的运行时环境和在不同环境中运行应用程序的能力。
- en: In summary, AWS offers a range of services that can be used to deploy and manage
    containerized applications, including Amazon ECS, Amazon EKS, AWS Fargate, Amazon
    ECR, and AWS App Runner. These services provide an easy way to deploy, run, and
    manage containerized applications, integrate with other AWS services, and automate
    various aspects of the application life cycle management.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，AWS 提供了一系列可用于部署和管理容器化应用程序的服务，包括 Amazon ECS、Amazon EKS、AWS Fargate、Amazon
    ECR 和 AWS App Runner。这些服务提供了一种简便的方法来部署、运行和管理容器化应用程序，能够与其他 AWS 服务集成，并自动化应用生命周期管理的各个方面。
- en: How to choose the best containerization platform in AWS
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 AWS 中选择最佳的容器化平台
- en: 'Choosing the best containerization platform in AWS will depend on the specific
    requirements of your application and use case. Here are some factors to consider
    when making your decision:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 AWS 中最佳的容器化平台将取决于你的应用程序和用例的具体需求。以下是做出决策时需要考虑的一些因素：
- en: '**Microservices versus monolithic**: If your application is built using a microservices-based
    architecture, then ECS or EKS would be a good choice, as they are designed to
    handle the scaling and orchestration of multiple services. If your application
    is a monolithic application, then Fargate or App Runner may be a better fit.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务与单体应用**：如果你的应用程序采用微服务架构，那么 ECS 或 EKS 会是一个不错的选择，因为它们专为处理多个服务的扩展和编排而设计。如果你的应用程序是单体应用，Fargate
    或 App Runner 可能更合适。'
- en: '**Scale**: Consider the scale of your application and the resources it requires.
    ECS and EKS are both highly scalable and can handle large numbers of containers
    and services. Fargate is also scalable, but it is more suited for running small
    to medium-sized applications.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规模**：考虑你的应用程序的规模及其所需的资源。ECS 和 EKS 都具有高度可扩展性，能够处理大量容器和服务。Fargate 也具有可扩展性，但它更适合运行小型到中型应用程序。'
- en: '**Existing infrastructure**: If you already have an existing infrastructure
    in place, it may be more cost-effective to use ECS or EKS, as they can integrate
    with your existing resources.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**现有基础设施**：如果你已经有现有的基础设施，使用 ECS 或 EKS 可能更具成本效益，因为它们可以与现有资源进行集成。'
- en: '**Cost**: Consider the cost of running your application on each platform. ECS
    and EKS may be more expensive than Fargate, as they require the provisioning and
    management of underlying infrastructure.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本**：考虑在每个平台上运行应用程序的成本。ECS 和 EKS 可能比 Fargate 更昂贵，因为它们需要配置和管理基础设施。'
- en: '**Functionality**: Consider the functionality that you need for your application.
    ECS and EKS provide more advanced features for deploying, scaling, and managing
    containerized applications, while Fargate is more suited for running individual
    containers.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能性**：考虑你应用程序所需的功能。ECS 和 EKS 提供了更多用于部署、扩展和管理容器化应用程序的高级功能，而 Fargate 更适合运行单个容器。'
- en: '**Team experience**: Consider the experience of your team with the different
    platforms. If your team has experience with Kubernetes, EKS might be a better
    fit; if it has experience with AWS native services, ECS or Fargate might be more
    appropriate.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队经验**：考虑你团队在不同平台上的经验。如果你的团队熟悉 Kubernetes，EKS 可能是更好的选择；如果你的团队有 AWS 原生服务的经验，ECS
    或 Fargate 可能更合适。'
- en: Each platform has its own set of features and capabilities, and the choice of
    which platform to use will depend on the specific requirements of your application
    and use case. ECS and EKS are more suited for microservices-based architectures,
    while Fargate and App Runner are more suited for running individual containers.
    AWS Lambda is more suited for running function-based workloads, and Elastic Beanstalk
    is more suited for deploying web applications and services.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都有自己的一套功能和能力，选择使用哪个平台取决于你应用程序和用例的具体需求。ECS 和 EKS 更适合基于微服务的架构，而 Fargate 和
    App Runner 更适合运行单个容器。AWS Lambda 更适合运行基于函数的工作负载，Elastic Beanstalk 更适合部署 Web 应用程序和服务。
- en: Ultimately, the best containerization platform for your application will depend
    on the specific requirements of your use case. It is important to evaluate each
    platform based on the factors that are most important to your application, such
    as scalability, cost, and functionality. It may also be beneficial to test different
    platforms in a non-production environment to determine which one works best for
    your application before making a final decision.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，最适合你应用程序的容器化平台将取决于你用例的具体需求。重要的是根据对应用程序最重要的因素（如可扩展性、成本和功能）评估每个平台。也可以在非生产环境中测试不同的平台，以便在做出最终决定之前确定哪个平台最适合你的应用程序。
- en: Additionally, it’s worth considering the level of flexibility and control you
    want over the infrastructure and the level of automation you want to achieve.
    ECS and EKS provide more control and flexibility over the infrastructure, while
    Fargate and App Runner provide more automation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还需要考虑你对基础设施的灵活性和控制要求，以及你希望实现的自动化程度。ECS 和 EKS 提供更多的基础设施控制和灵活性，而 Fargate 和
    App Runner 提供更多的自动化。
- en: In general, it’s recommended to start with the simplest option that meets your
    needs and gradually add complexity as needed. AWS Lambda, for instance, is a good
    starting point for function-based workloads, Elastic Beanstalk for web-based applications,
    Fargate for small to medium-sized applications, and ECS or EKS for complex microservices-based
    architectures.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通常建议从最简单的选项开始，根据需要逐步增加复杂度。例如，AWS Lambda 是处理基于函数的工作负载的良好起点，Elastic Beanstalk
    适合基于 Web 的应用程序，Fargate 适合中小型应用程序，而 ECS 或 EKS 适合复杂的微服务架构。
- en: It’s also important to note that AWS provides a variety of services that can
    be used in conjunction with the containerization platform, such as ECR for storing
    and managing container images, and AWS App Mesh for service mesh management.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，AWS 提供了多种可以与容器化平台配合使用的服务，例如用于存储和管理容器镜像的 ECR，以及用于服务网格管理的 AWS App Mesh。
- en: How to utilize Terraform for containers
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何利用 Terraform 管理容器
- en: Terraform provides a powerful platform for managing and deploying container
    infrastructure on AWS. With Terraform, you can easily create and manage resources
    such as ECR, ECS, and EKS. This section will cover the basics of how to utilize
    Terraform for containers, including selecting and designing container infrastructure
    with Terraform, and how to develop and deploy container infrastructure using Terraform.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 提供了一个强大的平台，用于在 AWS 上管理和部署容器基础设施。使用 Terraform，你可以轻松创建和管理如 ECR、ECS 和
    EKS 等资源。本节将涵盖如何使用 Terraform 管理容器的基础知识，包括选择和设计容器基础设施、以及如何使用 Terraform 开发和部署容器基础设施。
- en: Deploying containers with Terraform
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Terraform 部署容器
- en: Terraform is a tool that allows you to define, provision, and manage infrastructure
    as code. To design a container using Terraform, you can use the `docker_container`
    resource to create, configure, and manage a container.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是一个允许你将基础设施定义、配置和管理为代码的工具。要使用 Terraform 设计容器，你可以使用 `docker_container`
    资源来创建、配置和管理容器。
- en: 'Here is an example of how to use Terraform to create a container:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用 Terraform 创建容器的示例：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This example creates a container named `"example-container"` using the latest
    version of the `nginx` image, maps port `80` inside the container to port `8080`
    on the host, and sets an environment variable named `EXAMPLE_VAR` with a value
    of `"example value"`. The container also creates a volume that maps the `/var/www/html`
    path inside the container to the `./data` path on the host, with read-only access.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用最新版本的`nginx`镜像，创建了一个名为`"example-container"`的容器，将容器内的`80`端口映射到主机上的`8080`端口，并设置了一个名为`EXAMPLE_VAR`、值为`"example
    value"`的环境变量。容器还创建了一个卷，将容器内的`/var/www/html`路径映射到主机上的`./data`路径，并设置为只读访问。
- en: You can also use the `docker_image` resource to create, manage, and configure
    a container image, and the `docker_network` resource to create, manage, and configure
    container networks.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`docker_image`资源来创建、管理和配置容器镜像，使用`docker_network`资源来创建、管理和配置容器网络。
- en: 'Here is an example of how to use Terraform to create a container image:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用Terraform创建容器镜像的示例：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example creates a container image named `"example-image"` using the Dockerfile
    in the `"./``example-image"` directory.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用位于`"./example-image"`目录下的Dockerfile，创建了一个名为`"example-image"`的容器镜像。
- en: 'Here is an example of how to use Terraform to create a container network:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用Terraform创建容器网络的示例：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This example creates a container network named `"example-network"` with a `bridge`
    driver.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例创建了一个名为`"example-network"`的容器网络，使用了`bridge`驱动程序。
- en: By using the `docker_container`, `docker_image`, and `docker_network` resources,
    you can use Terraform to create, manage, and configure containers, container images,
    and container networks in a repeatable and automated way.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`docker_container`、`docker_image`和`docker_network`资源，你可以使用Terraform以可重复和自动化的方式创建、管理和配置容器、容器镜像和容器网络。
- en: Terraform also supports other providers besides Docker, such as AWS ECS, ECR,
    and EKS, **Azure Container Instance** (**ACI**), and Google Container Engine,
    which provides more specific resources and data sources that are tailored to those
    specific providers.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform还支持除了Docker以外的其他提供者，例如AWS ECS、ECR和EKS，**Azure容器实例**（**ACI**）和Google容器引擎，它们提供了更多特定于这些提供者的资源和数据源。
- en: How to use Terraform for AWS container resources
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用Terraform管理AWS容器资源。
- en: 'There are several ways to deploy containers in AWS, depending on your specific
    requirements and use case. Here are the general steps to deploy a container in
    AWS:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中有多种方式部署容器，具体取决于你的需求和用例。以下是部署容器到AWS的一般步骤：
- en: Build and push your container image to a container registry such as Amazon ECR
    or any other public or private registry
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器镜像构建并推送到容器注册中心，例如Amazon ECR或任何其他公共或私有注册中心。
- en: Choose a container orchestration platform such as Amazon ECS, Amazon EKS, AWS
    Fargate, AWS Lambda, AWS Elastic Beanstalk, or AWS App Runner
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个容器编排平台，例如Amazon ECS、Amazon EKS、AWS Fargate、AWS Lambda、AWS Elastic Beanstalk或AWS
    App Runner。
- en: Create a task definition or Pod definition that describes the container image
    and its configurations, such as environment variables, ports, and volumes
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个任务定义或Pod定义，描述容器镜像及其配置，例如环境变量、端口和卷。
- en: Create a service or deployment that uses the task definition or Pod definition
    to launch one or more instances of the container
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个服务或部署，使用任务定义或Pod定义启动一个或多个容器实例。
- en: Optionally, configure scaling, load balancing, and monitoring for your containerized
    application
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，为你的容器化应用配置扩展、负载均衡和监控。
- en: Optionally, you can use services such as Terraform or AWS CloudFormation to
    automate the deployment and management of your container infrastructure
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，你可以使用Terraform或AWS CloudFormation等服务来自动化部署和管理你的容器基础设施。
- en: Test your application and monitor its performance to make sure it’s working
    as expected
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试你的应用程序并监控其性能，以确保它按预期工作。
- en: It’s worth noting that each of the container orchestration platforms that AWS
    provides has its own set of management consoles, APIs, and CLIs that you can use
    to deploy, manage, and scale your containerized applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，AWS提供的每个容器编排平台都有自己的一套管理控制台、API和CLI，你可以使用这些工具来部署、管理和扩展你的容器化应用。
- en: After building container images to push container images to ECR, we can utilize
    Terraform to create ECR repositories.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建容器镜像并推送到ECR之后，我们可以利用Terraform来创建ECR仓库。
- en: How to deploy AWS ECR with Terraform
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用Terraform部署AWS ECR。
- en: 'Amazon ECR is a fully managed container registry service that makes it easy
    to store, manage, and deploy container images. To use Terraform to manage ECR
    resources and to deploy an Amazon ECR repository, you can use the AWS provider
    for Terraform, which provides a set of resources and data sources specific to
    ECR. Here are the general steps to deploy an ECR repository using Terraform:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊ECR是一个完全托管的容器注册服务，使存储、管理和部署容器镜像变得简单。要使用Terraform管理ECR资源并部署亚马逊ECR仓库，可以使用Terraform的AWS提供程序，该提供程序提供了一组特定于ECR的资源和数据源。以下是使用Terraform部署ECR仓库的一般步骤：
- en: Install and configure the AWS provider for Terraform in your local environment
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地环境中安装并配置AWS提供程序，以便使用Terraform
- en: Create a new Terraform configuration file and specify the AWS provider and the
    `aws_ecr_repository` resource
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Terraform配置文件，并指定AWS提供程序和`aws_ecr_repository`资源
- en: Define the properties of the ECR repository, such as the repository name, in
    the resource configuration
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源配置中定义ECR仓库的属性，如仓库名称
- en: Run `terraform init` to initialize the Terraform environment and download the
    necessary provider plugins
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`terraform init`来初始化Terraform环境并下载必要的提供程序插件
- en: Run `terraform plan` to preview the changes that will be made to your infrastructure
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`terraform plan`以预览将对基础设施所做的更改
- en: Run `terraform apply` to create an ECR repository in your AWS account
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`terraform apply`来在你的AWS账户中创建ECR仓库
- en: 'Here is an example of how to use Terraform to create an ECR repository:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个如何使用Terraform创建ECR仓库的示例：
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This example creates an ECR repository named `"example-repository"` in the `"``us-west-2"`
    region.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例在`"us-west-2"`区域创建了一个名为`"example-repository"`的ECR仓库。
- en: You can also use the `aws_ecr_lifecycle_policy` resource to manage the life
    cycle policies for an ECR repository and the `aws_ecr_image` resource to manage
    the images stored in an ECR repository using Terraform.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`aws_ecr_lifecycle_policy`资源来管理ECR仓库的生命周期策略，并使用`aws_ecr_image`资源管理存储在ECR仓库中的镜像。
- en: 'Here is an example of how to use Terraform to create a life cycle policy for
    an ECR repository:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个如何使用Terraform为ECR仓库创建生命周期策略的示例：
- en: '[PRE4]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This example creates a life cycle policy for the ECR repository specified by
    the `aws_ecr_repository.example.name` reference. This policy expires images that
    are older than 30 days and have no tag associated with them.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例为通过`aws_ecr_repository.example.name`引用指定的ECR仓库创建了生命周期策略。该策略会过期30天以上且没有关联标签的镜像。
- en: It’s important to note that this is a simple example of a life cycle policy.
    You can use the full set of options that an AWS ECR life cycle policy provides
    to create more complex policies, such as image tagging rules, image scanning rules,
    and so on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这是一个简单的生命周期策略示例。你可以使用AWS ECR生命周期策略提供的完整选项来创建更复杂的策略，例如镜像标签规则、镜像扫描规则等。
- en: You can also use the `terraform plan` and `terraform apply` commands to preview
    and apply the changes made to the repository policy.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`terraform plan`和`terraform apply`命令来预览和应用对仓库策略所做的更改。
- en: 'Here is an example of how to use Terraform to create an image in an ECR repository:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个如何使用Terraform在ECR仓库中创建镜像的示例：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example creates an image in an ECR repository specified by the `aws_ecr_repository.example.name`
    reference. The image is tagged with `"latest"` and the digest of the image is
    obtained from the `aws_ecr_image` data source.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例在通过`aws_ecr_repository.example.name`引用的ECR仓库中创建了一个镜像。该镜像标记为`"latest"`，并且镜像的摘要是从`aws_ecr_image`数据源获取的。
- en: You can use the `aws_ecr_image` resource to push and pull images to and from
    an ECR repository, as well as to manage images stored in an ECR repository.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`aws_ecr_image`资源将镜像推送到ECR仓库或从ECR仓库拉取镜像，并管理存储在ECR仓库中的镜像。
- en: The `aws_ecr_image` resource also allows you to specify image details such as
    the image tag, image digest, image manifest, and image scanned status.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`aws_ecr_image`资源还允许你指定镜像的详细信息，如镜像标签、镜像摘要、镜像清单和镜像扫描状态。'
- en: It’s important to note that the preceding example is a simple example of creating
    an image in an ECR repository. You can use the full set of options that the `aws_ecr_image`
    resource provides to create and manage images in your ECR repository.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，前面的示例是创建ECR仓库中的一个镜像的简单示例。你可以使用`aws_ecr_image`资源提供的完整选项来创建和管理你在ECR仓库中的镜像。
- en: Deploying container images to AWS container platforms with Terraform
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Terraform将容器镜像部署到AWS容器平台
- en: In this section, we will explore how to deploy container images to AWS container
    platforms using Terraform. By utilizing Terraform, we can simplify the process
    of managing container infrastructure and automate the deployment of containerized
    applications on AWS. We will discuss the use of AWS container services such as
    ECR, ECS, and EKS and how to deploy container images to these services using Terraform.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用Terraform将容器镜像部署到AWS容器平台。通过利用Terraform，我们可以简化容器基础设施的管理过程，并自动化将容器化应用程序部署到AWS的过程。我们将讨论如何使用AWS容器服务，如ECR、ECS和EKS，以及如何使用Terraform将容器镜像部署到这些服务。
- en: Deploying to AWS ECS
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署到AWS ECS
- en: 'To deploy container images to Amazon ECS using Terraform, you can use the AWS
    provider for Terraform, which provides a set of resources and data sources specific
    to ECS. Here are the general steps to deploy an ECS container using Terraform:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Terraform将容器镜像部署到Amazon ECS，您可以使用AWS的Terraform提供程序，它提供了一组特定于ECS的资源和数据源。以下是使用Terraform部署ECS容器的基本步骤：
- en: Install and configure the AWS provider for Terraform in your local environment.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地环境中安装并配置AWS的Terraform提供程序。
- en: Create a new Terraform configuration file and specify the AWS provider and the
    necessary ECS resources such as `aws_ecs_task_definition`, `aws_ecs_service`,
    and `aws_ecs_cluster`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Terraform配置文件，指定AWS提供程序和必要的ECS资源，如`aws_ecs_task_definition`、`aws_ecs_service`和`aws_ecs_cluster`。
- en: Define the properties of the container, such as the container image, container
    name, port mappings, and environment variables, in the task definition resource.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任务定义资源中定义容器的属性，如容器镜像、容器名称、端口映射和环境变量。
- en: Create a service resource that references the task definition, and configure
    the desired number of task replicas and the load balancer settings if applicable.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个服务资源，引用任务定义，并根据需要配置任务副本的数量和负载均衡器设置（如果适用）。
- en: Create a cluster resource if it doesn’t exist, and reference it in the task
    definition and service resources.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果集群不存在，请创建集群资源，并在任务定义和服务资源中引用它。
- en: Run `terraform init` to initialize the Terraform environment and download the
    necessary provider plugins.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`terraform init`以初始化Terraform环境并下载所需的提供程序插件。
- en: Run `terraform plan` to preview the changes that will be made to your infrastructure.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`terraform plan`以预览将对基础设施进行的更改。
- en: Run `terraform apply` to create the ECS service and deploy the container to
    your cluster in your AWS account.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`terraform apply`以创建ECS服务并将容器部署到AWS账户中的集群。
- en: 'Here is an example of how to use Terraform to deploy a container to ECS:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用Terraform将容器部署到ECS的示例：
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This example creates an ECS task definition, service, and cluster using Terraform.
    The task definition defines the container image, container name, port mappings,
    and memory and CPU requirements. The service references the task definition and
    creates two replicas of the container in the specified ECS cluster.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例使用Terraform创建了ECS任务定义、服务和集群。任务定义定义了容器镜像、容器名称、端口映射以及内存和CPU需求。服务引用任务定义，并在指定的ECS集群中创建两个容器副本。
- en: You can also use the `aws_elbv2_listener` and `aws_elbv2_target_group` resources
    to configure a load balancer and register the ECS service as a target group.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`aws_elbv2_listener`和`aws_elbv2_target_group`资源来配置负载均衡器，并将ECS服务注册为目标组。
- en: It’s worth noting that this is a simple example of deploying an ECS container
    using Terraform. You can use the full set of options that the ECS resources provide
    to create and manage more complex ECS environments, such as auto scaling, rolling
    updates, and integration with other AWS services such as CloudWatch, CloudTrail,
    and more.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这是使用Terraform部署ECS容器的简单示例。您可以使用ECS资源提供的完整选项集来创建和管理更复杂的ECS环境，例如自动扩展、滚动更新以及与其他AWS服务如CloudWatch、CloudTrail的集成等。
- en: You can also use the `terraform plan` and `terraform apply` commands to preview
    and apply the changes made to the ECS environment.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`terraform plan`和`terraform apply`命令来预览和应用对ECS环境所做的更改。
- en: Deploying to AWS EKS
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署到AWS EKS
- en: There are two steps for deploying applications to AWS EKS, as detailed next.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序到AWS EKS有两个步骤，接下来将详细介绍。
- en: Creating an AWS EKS cluster with Terraform
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Terraform创建AWS EKS集群
- en: 'To create an Amazon EKS cluster using Terraform, you can use the AWS provider
    for Terraform, which provides a set of resources and data sources specific to
    EKS. Here are the general steps to create an EKS cluster using Terraform:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Terraform 创建 Amazon EKS 集群，你可以使用 Terraform 的 AWS 提供程序，该提供程序提供一组特定于 EKS 的资源和数据源。以下是使用
    Terraform 创建 EKS 集群的一般步骤：
- en: Install and configure the AWS provider for Terraform in your local environment.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地环境中安装并配置 Terraform 的 AWS 提供程序。
- en: Create a new Terraform configuration file and specify the AWS provider and the
    `aws_eks_cluster` resource.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Terraform 配置文件，并指定 AWS 提供程序及 `aws_eks_cluster` 资源。
- en: Define the properties of the EKS cluster, such as the cluster name, Kubernetes
    version, and VPC settings, in the resource configuration.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源配置中定义 EKS 集群的属性，如集群名称、Kubernetes 版本和 VPC 设置。
- en: Optionally, create an `aws_eks_cluster` resource.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，创建一个 `aws_eks_cluster` 资源。
- en: Optionally, create a configuration file for `kubeconfig` to use the cluster.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，为 `kubeconfig` 创建一个配置文件以使用该集群。
- en: Run `terraform init` to initialize the Terraform environment and download the
    necessary provider plugins.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `terraform init` 来初始化 Terraform 环境并下载必要的提供程序插件。
- en: Run `terraform plan` to preview the changes that will be made to your infrastructure.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `terraform plan` 以预览将对基础设施所做的更改。
- en: Run `terraform apply` to create the EKS cluster in your AWS account.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `terraform apply` 来在你的 AWS 账户中创建 EKS 集群。
- en: 'Here is an example of how to use Terraform to create an EKS cluster:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 Terraform 创建 EKS 集群的示例：
- en: '[PRE7]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This example creates an EKS cluster with the specified name and Kubernetes version
    and associates it with the specified IAM role and security group.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例创建了一个指定名称和 Kubernetes 版本的 EKS 集群，并将其与指定的 IAM 角色和安全组关联。
- en: It also creates two subnets in the specified Availability Zone for worker nodes
    to launch into.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会在指定的可用区中创建两个子网，以便工作节点启动。
- en: It’s worth noting that this is a simple example of creating an EKS cluster using
    Terraform. You can use the full set of options that the EKS resources provide
    to create and manage more complex EKS environments, such as scaling, monitoring,
    and integration with other AWS services such as CloudWatch, CloudTrail, and more.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这是一个使用 Terraform 创建 EKS 集群的简单示例。你可以使用 EKS 资源提供的完整选项来创建和管理更复杂的 EKS 环境，例如扩展、监控，以及与其他
    AWS 服务（如 CloudWatch、CloudTrail 等）的集成。
- en: You can also use the `terraform plan` and `terraform apply` commands to preview
    and apply the changes made to the EKS environment.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `terraform plan` 和 `terraform apply` 命令预览并应用对 EKS 环境所做的更改。
- en: Deploying an application to an AWS EKS cluster with Terraform
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Terraform 将应用程序部署到 AWS EKS 集群
- en: 'To deploy container images to Amazon EKS using Terraform, you can use the Kubernetes
    provider for Terraform, which provides a set of resources and data sources specific
    to EKS. Here are the general steps to deploy a Kubernetes Pod using Terraform:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Terraform 将容器镜像部署到 Amazon EKS，你可以使用 Terraform 的 Kubernetes 提供程序，该提供程序提供一组特定于
    EKS 的资源和数据源。以下是使用 Terraform 部署 Kubernetes Pod 的一般步骤：
- en: Install and configure the Kubernetes provider for Terraform in your local environment.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地环境中安装并配置 Kubernetes 提供程序。
- en: Create a new Terraform configuration file and specify the Kubernetes provider
    and the necessary resources such as `kubernetes_namespace`, `kubernetes_deployment`,
    and `kubernetes_service`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Terraform 配置文件，并指定 Kubernetes 提供程序及必要的资源，例如 `kubernetes_namespace`、`kubernetes_deployment`
    和 `kubernetes_service`。
- en: Define the properties of the Pod, such as the container image, container name,
    container ports, and environment variables, in the deployment resource.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署资源中定义 Pod 的属性，例如容器镜像、容器名称、容器端口和环境变量。
- en: Create a service resource that references the deployment, and configure the
    load balancer settings if applicable.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个引用部署的服务资源，并在适用的情况下配置负载均衡器设置。
- en: Create a namespace resource if it doesn’t exist, and reference it in the deployment
    and service resources.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果命名空间资源不存在，请创建一个命名空间资源，并在部署和服务资源中引用它。
- en: Run `terraform init` to initialize the Terraform environment and download the
    necessary provider plugins.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `terraform init` 来初始化 Terraform 环境并下载必要的提供程序插件。
- en: Run `terraform plan` to preview the changes that will be made to your infrastructure.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `terraform plan` 以预览将对基础设施所做的更改。
- en: Run `terraform apply` to create the Kubernetes deployment and service, and deploy
    the Pod to your EKS cluster.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `terraform apply` 来创建 Kubernetes 部署和服务，并将 Pod 部署到你的 EKS 集群中。
- en: 'Here is an example of how to use Terraform to deploy a Pod to EKS:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用Terraform将Pod部署到EKS的示例：
- en: '[PRE8]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This example creates a Kubernetes namespace, deployment, and service using Terraform.
    The deployment defines the container image, container name, container ports, and
    the number of replicas for the Pod. The service references the deployment and
    creates a load balancer that directs traffic to the Pods.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用Terraform创建了一个Kubernetes命名空间、部署和服务。部署定义了容器镜像、容器名称、容器端口和Pod的副本数量。服务引用了部署并创建了一个负载均衡器，将流量引导到Pods。
- en: You can also use the `kubernetes_config_map` and `kubernetes_secret` resources
    to manage configuration data and secrets for the Pod.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`kubernetes_config_map`和`kubernetes_secret`资源来管理Pod的配置数据和秘密。
- en: It’s worth noting that this is a simple example of deploying a Pod to EKS using
    Terraform. You can use the full set of options that the Kubernetes resources provide
    to create and manage more complex EKS environments, such as auto scaling, rolling
    updates, and integration with other AWS services such as CloudWatch, CloudTrail,
    and more.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这是一个使用Terraform将Pod部署到EKS的简单示例。你可以使用Kubernetes资源提供的完整选项集来创建和管理更复杂的EKS环境，如自动扩展、滚动更新，以及与AWS的其他服务（如CloudWatch、CloudTrail等）的集成。
- en: You can also use the `terraform plan` and `terraform apply` commands to preview
    and apply the changes made to the EKS environment.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`terraform plan`和`terraform apply`命令来预览并应用对EKS环境所做的更改。
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In conclusion, containers are a powerful tool for packaging and deploying applications
    in a consistent and portable way. AWS offers a variety of container services and
    platforms, each with its own set of features and capabilities. Terraform is an
    **infrastructure-as-code** (**IaC**) tool that can be used to manage and provision
    resources in AWS, including containers. By using Terraform to deploy containers
    to AWS, you can automate the process of creating and managing containerized applications,
    and ensure that your infrastructure is consistent, repeatable, and versionable.
    This can greatly simplify the process of deploying and scaling applications, and
    allows you to focus on the business logic of your application rather than managing
    the underlying infrastructure.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，容器是以一致和可移植的方式打包和部署应用程序的强大工具。AWS提供了多种容器服务和平台，每种服务都有其独特的功能和能力。Terraform是一个**基础设施即代码**（**IaC**）工具，可以用来管理和配置AWS中的资源，包括容器。通过使用Terraform将容器部署到AWS，你可以自动化创建和管理容器化应用程序的过程，确保基础设施的一致性、可重复性和可版本化。这将大大简化应用程序的部署和扩展过程，并使你能够将注意力集中在应用程序的业务逻辑上，而不是管理底层基础设施。
- en: In the next chapter, we’ll take a closer look at how Terraform can be leveraged
    for enterprise-level AWS projects. You’ll learn about the unique challenges and
    considerations that come with managing large-scale infrastructure, and how to
    navigate the decision-making process when it comes to implementing AWS and Terraform
    at the enterprise level. We’ll cover topics such as project planning, design considerations,
    and best practices for successful enterprise deployments. Stay tuned for a deep
    dive into the world of enterprise AWS and Terraform.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地探讨如何利用Terraform来支持企业级AWS项目。你将了解管理大规模基础设施所面临的独特挑战和考虑因素，以及在企业级实施AWS和Terraform时如何进行决策。我们将讨论诸如项目规划、设计考虑因素以及成功实施企业级部署的最佳实践等话题。敬请期待深入了解企业级AWS和Terraform的世界。
- en: Part 3:How to Structure and Advance Terraform in Enterprises
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：如何在企业中构建和推进Terraform
- en: In this section, we explore how to use Terraform in enterprise-level projects,
    focusing on structuring and advancing Terraform implementations to meet the demands
    of large-scale organizations. We discuss how to integrate Terraform into enterprises,
    including building Git workflows for IaC and Terraform projects to enable version
    control, collaboration, and automated deployment. You’ll learn how to automate
    the deployment of Terraform projects, streamlining the provisioning and management
    of cloud resources. We also delve into governance and security, exploring how
    to use Terraform to govern AWS resources and build a secure infrastructure on
    AWS. Finally, we discuss how to achieve a perfect AWS infrastructure with Terraform,
    optimizing performance, reliability, and cost-effectiveness. By the end of this
    part, you’ll be equipped to structure and advance Terraform implementations in
    enterprises, ensuring scalable, secure, and efficient cloud infrastructure.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何在企业级项目中使用 Terraform，重点是如何构建和推进 Terraform 实施，以满足大规模组织的需求。我们将讨论如何将
    Terraform 集成到企业中，包括为 IaC 和 Terraform 项目构建 Git 工作流，以实现版本控制、协作和自动化部署。您将学习如何自动化 Terraform
    项目的部署，简化云资源的配置和管理。我们还将深入探讨治理和安全，探讨如何使用 Terraform 来管理 AWS 资源并构建安全的 AWS 基础设施。最后，我们将讨论如何通过
    Terraform 实现完美的 AWS 基础设施，优化性能、可靠性和成本效益。通过本部分的学习，您将掌握在企业中构建和推进 Terraform 实施的能力，确保可扩展、安全且高效的云基础设施。
- en: 'This part contains the following chapters:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 10*](B18198_10.xhtml#_idTextAnchor186)*, Leveraging Terraform for
    the Enterprise*'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 10 章*](B18198_10.xhtml#_idTextAnchor186)*，为企业利用 Terraform*'
- en: '[*Chapter 11*](B18198_11.xhtml#_idTextAnchor196)*, Building Git Workflows for
    IaC and Terraform Projects*'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 11 章*](B18198_11.xhtml#_idTextAnchor196)*，为 IaC 和 Terraform 项目构建 Git 工作流*'
- en: '[*Chapter 12*](B18198_12.xhtml#_idTextAnchor204)*, Automating the Deployment
    of Terraform Projects*'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 12 章*](B18198_12.xhtml#_idTextAnchor204)*，自动化 Terraform 项目的部署*'
- en: '[*Chapter 13*](B18198_13.xhtml#_idTextAnchor213)*, Governing AWS with Terraform*'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 13 章*](B18198_13.xhtml#_idTextAnchor213)*，使用 Terraform 管理 AWS*'
- en: '[*Chapter 14*](B18198_14.xhtml#_idTextAnchor227)*, Building a Secure Infrastructure
    with AWS Terraform*'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 14 章*](B18198_14.xhtml#_idTextAnchor227)*，使用 AWS Terraform 构建安全基础设施*'
- en: '[*Chapter 15*](B18198_15.xhtml#_idTextAnchor258)*, Perfecting AWS Infrastructure
    with Terraform*'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 15 章*](B18198_15.xhtml#_idTextAnchor258)*，使用 Terraform 完善 AWS 基础设施*'
