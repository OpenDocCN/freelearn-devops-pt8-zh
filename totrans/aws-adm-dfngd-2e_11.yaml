- en: Connecting the World with AWS IoT and AWS Greengrass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's been quite a long journey so far and yet here we are; at the last chapter
    of this book! If you made it to here, then you definitely need to take a moment
    and give yourself a well-deserved pat on the back!
  prefs: []
  type: TYPE_NORMAL
- en: So far in this book, we have covered a plethora of services, such as Amazon
    EFS, AWS Beanstalk, AWS Code Suite, AWS Shield, and AWS Data Pipeline, just to
    name a few. In this final chapter, we will be exploring the IoT suite of services
    provided by AWS, with more emphasis on two core products, namely, AWS IoT and
    AWS Greengrass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a quick look at the various topics that we will be covering in
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief look at the building blocks required for IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to the AWS IoT suite of services followed by a deep dive into
    AWS IoT, its concepts and terminologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to AWS IoT using a Raspberry Pi Zero device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the AWS IoT Device SDK, using a few simple code examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating AWS IoT with other AWS services, using IoT rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to AWS Greengrass, along with a simple getting started example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effectively monitoring IoT devices, as well as the IoT services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So without any further ado, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: IoT – what is it?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Well, to the uninitiated, **IoT** or **Internet of Things** is all about connecting
    everyday *objects* or *things* together, using a common medium of communication
    (in this case, the internet) for exchange of data. I know it doesn''t sound much,
    but today, IoT is practically being implemented everywhere around us; from wearable
    devices, smartphones, home appliances, such as refrigerators, air conditioners,
    to vehicles and heavy machinery, and much more! Gartner predicts that by the year
    2020, there will be an estimated 26 billion devices connected using IoT, and this
    number is set to grow even further, as IoT adoption becomes mainstream. But what
    exactly is IoT and how do you build it? Here''s a quick look at some of the basic
    building blocks required in order to get started with IoT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e46e079-ca97-461d-8770-befa37c53f0c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Things**: To begin with, any form of IoT comprises end user devices that
    we use or leverage to perform some of our day-to-day tasks. These devices, or
    things, can be anything and everything, including simple electronic devices, such
    as smartphones, wearables, alarm clocks, light bulbs, to washing machines, garage
    doors, vehicles, ships, and the list just goes on!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sensors**: Sensors are devices that can be incorporated within things that
    are used to capture or supply our data. Some of the most commonly used sensors
    are IR sensors, moisture sensors, gas and pressure sensors, and so on. Sensors
    are not designed to process data on their own. They simply collect and push the
    data out to one or more processors. For example, a light sensor monitoring whether
    a light bulb is switched on or off, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Processors**: Processors are the brains of the IoT system. Their main function
    is to process the data that is captured by the sensors. This processing can be
    based on certain triggers or can be performed close to real time, as well. A single
    processor can be used to connect and process data from multiple sensors, as well.
    The most commonly used type of processors include microcontrollers, embedded controllers,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gateways**: Gateways are special devices that are responsible for collecting
    and routing data, processed by one or more processors, to IoT applications for
    further analysis. A gateway can collect, aggregate, and send data over the internet,
    either as streams or in batches, depending on its configuration and connectivity
    options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application**: Once data from various gateways is collected, it needs to
    be further analyzed to form meaningful insights, so that appropriate actions on
    the respective operation can be performed. This can be achieved by leveraging
    one or more applications, such as an industrial control hub, or even a home automation
    system. For example, an application can be used to remotely trigger a light bulb
    to switch on, once the ambient light in the room starts to fade, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this essential information in mind, let's look at a few key AWS services
    you can use to get started with your very own IoT on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the AWS IoT suite of services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS has vastly enhanced its IoT suite of services, ever since its first inception
    towards the end of 2015\. Here is a brief explanation of what it offers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS IoT Core**: The AWS IoT Core is a managed service that allows you to
    securely connect and interact with billions of IoT devices, without having to
    bother about setting up or managing any underlying infrastructure. You can use
    the IoT Core service to build IoT applications, using a combination of various
    AWS services as well, such as AWS Lambda, Amazon Elasticsearch, Amazon machine
    learning, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS IoT Device Management**: The AWS IoT Device Management service allows
    you to register, organize, and manage a large number of IoT devices, easily. You
    can use this service to on-board devices in bulk and then manage them all, using
    a single pane of glass view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Greengrass**: AWS Greengrass is a software service designed to execute
    Lambda functions locally, on your IoT devices. In addition to this, you can also
    use Greengrass to sync data between the device and the IoT Core, using data caching
    along with other functionalities, such as ML inference, messaging, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS IoT Analytics**: Connecting and managing billions of IoT devices is one
    task, and querying the large IoT data set is quite another. AWS IoT Analytics
    is a completely managed service that allows you to run analytics on extremely
    large volumes of IoT data, without having to configure or manage an underlying
    analytics platform. Using this service, you obtain better insights on your devices,
    as well as build resilient IoT applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS IoT Button**: The AWS IoT Button is a Wi-Fi enabled, programmable button
    which enables you to write and integrate an IoT application, without having to
    know about any device-specific code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS IoT Device Defender**: With so many devices to manage and maintain, it
    is equally important to safeguard the devices against malicious attacks. AWS IoT
    Device Defender is a managed service that allows you to secure, manage, and audit
    remote devices against a set of security rules and policies. If any deviations
    are found, IoT Device Defender triggers appropriate notifications for them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon FreeRTOS**: Amazon FreeRTOS is a custom operating system built specifically
    for small, low-powered edge devices or microcontrollers. The operating system
    is based on the FreeRTOS kernel and helps to easily connect and manage devices
    with the AWS IoT service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this, we come to the end of this section. In the next section, we will
    learn a bit about the AWS IoT Core service in detail, along with a simple and
    easy-to-follow getting started guide.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with AWS IoT Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With a brief understanding of the AWS IoT suite of services covered, we can
    now dive deep into the world of the AWS IoT Core! However, before we get started
    with some actual hands-on projects, here is a quick look at some important AWS
    IoT Core concepts and terminologies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The AWS IoT Core service provides bidirectional communication between devices
    and the AWS cloud, using a set of components described in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Device gateway**: This provides a secure mechanism for the IoT device to
    communicate with the AWS IoT service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device shadow**: A device shadow is a persistent representation of your IoT
    device on the cloud. A JSON-based document stores the current state of your device,
    which you can use to sync with the cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message broker**: The message broker provides a secure and reliable channel,
    using which the IoT device can communicate with the cloud. The broker is based
    on a publisher–subscriber model and can be used to leverage either the standard
    MQTT protocol, or the advanced MQTT over WebSockets for communication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry**: Registry is a service that is used to securely register your
    IoT device with the cloud. You can use the registry to associate certificates
    and MQTT client IDs with your devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Groups**: Groups are logical containers used to group together similar devices
    in order to effectively manage them. You can use groups to propagate permissions
    and perform bulk actions on your connected devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rules**: The rules engine service in AWS IoT Core provides a mechanism which
    enables you to process IoT data using simple SQL queries. You can additionally
    write rules that can integrate AWS IoT Core with other AWS services, such as AWS
    Lambda, Amazon S3, Amazon Kinesis, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is how it all fits together! You start off by preparing a device for connection
    with the AWS IoT Core. This involves creating a set of certificates that essentially
    authenticates the device when it connects to the AWS IoT Core. Once connected,
    the device starts publishing its current state in a JSON format using the standard
    MQTT protocol. These messages are sent to the message broker, which essentially
    routes them to their respective subscribing clients, based on the message's topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even create one or more rules to define a set of actions based on the
    data contained within the messages. When a particular data matches the configured
    expression, the rules engine invokes that particular action, which can be anything
    from sending the data to a file in Amazon S3 to processing the data using AWS
    Lambda or Amazon Kinesis. The following is a representation of these components
    put together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00620897-efd3-4b69-90de-8845a161d9f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Keeping this in mind, let's look at how you can connect your IoT device with
    the AWS IoT Core!
  prefs: []
  type: TYPE_NORMAL
- en: Connecting a device to AWS IoT Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS IoT supports a wide variety of specialized IoT-embedded devices and microcontrollers
    that you can connect to. However, for simplicity, you can also simulate an IoT
    device using either a locally set up virtual machine or an EC2 instance, as well.
    For this section, we will be using a simple Ubuntu-based virtual machine, hosted
    using VirtualBox. The virtual machine has the basic operating system packages
    installed in it and runs off a 512 MB RAM and 1 CPU core allocation with a 10
    GB disk. Ensure that your virtual machine has an open internet connectivity and
    a valid hostname set, before you proceed with any further steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list demonstrates the simulated IoT device''s configuration for
    your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CPU**: 1 CPU'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAM**: 512 MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating System**: Ubuntu Server 16.04.2 LTS (Xenial) x86_64 architecture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packages**: Core server packages along with `vim`, `node`, `npm`, `git`,
    `wget`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the device or virtual machine is prepped, we are good to connect with
    the AWS IoT Core:'
  prefs: []
  type: TYPE_NORMAL
- en: From the AWS Management Console, filter and select the AWS IoT service using
    the Filter provided. Alternatively, select this URL, [https://console.aws.amazon.com/iot/home](https://console.aws.amazon.com/iot/home)
    to launch the AWS IoT console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Get started option to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged into the console, select the Onboard option from the navigation
    pane on the left-hand side of the console. Here, you can opt to get started with
    configuring your first device with the IoT service as well as other options, such
    as configuring the AWS IoT Button or getting started with the AWS IoT Starter
    Kit. For this section, select the Get started option under the Configure a device section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Get started option is a simple three-step process that involves first registering
    your device, followed by downloading a set of credentials and SDKs for the device
    to communicate with the IoT Core, and finally testing to check whether the device
    is successfully connected or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Linux/OSX from the Choose a platform option followed by Node.js from
    the Choose a AWS IoT Device SDK, as shown in the following screenshot. Note here,
    you can alternatively select the Java or Python SDKs as well; however, the rest
    of this particular use case will be based only upon Node.js:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/493f49f8-101a-4741-87f7-45fbf07a9b18.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the appropriate platform and IoT SDK are selected, click on Next to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step involves the registration of a *thing* or in our case, the IoT
    device itself. Start off by providing a suitable Name for your thing and then
    select the Show optional configuration option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Apply a type to this thing section, select the Create type option. A Thing
    Type simplifies managing IoT devices by providing a consistent registry data for
    things that share a particular type. Provide a suitable Name and an optional Description for
    your Thing Type and select Create thing type when done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s what the final configuration should look like. In my case, I''ve created
    a Thing Type called dummyIoTDevice for logically classifying all virtual machine-based
    IoT devices together. Select the Create Thing option once completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7c818630-e6ae-49d7-9284-172aaf633f5e.png)'
  prefs: []
  type: TYPE_IMG
- en: With the thing successfully created, we now need to establish the connection
    between the thing and AWS IoT Core. To do so, select the newly created thing tile
    from the Things console to view the thing's various configurations. Among the
    important options is the Security option. Go ahead and select the Security option
    from the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, you can create and associate the necessary certificates, as well as policies
    that will be required for Thing to communicate with the IoT Core. Select the Create
    certificate option to begin with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The necessary certificates are created automatically by AWS Core. Download
    these files and save them in a safe place. Certificates can be retrieved at any
    time, but the private and public keys *cannot be retrieved* after you close this
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A certificate for this thing**: `xyz.cert.pem`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A public key**: `xyz.public.key`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A private key**: `xyz.private.key`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, you will need to download the *root CA* for AWS IoT from Symantec.
    You can do that by selecting the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem](https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember to select the Activate option to successfully activate the keys. Once
    done, select the Attach a policy option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8098dee5-61d5-4d1e-89d9-43fde4e26c44.png)'
  prefs: []
  type: TYPE_IMG
- en: Since this is our first time working with the IoT Core, we will be required
    to create a new policy from scratch. The policy will be used to authorize the
    certificates we created in the previous step. Select the Create new policy option
    to get started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Create a Policy page, start by providing a suitable Name for your new
    policy. Once completed, you can use either the *basic* or *advanced* mode to create
    your IoT policy. For simplicity, select the Advanced mode option and paste the
    following policy snippet as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The following policy grants all devices permission to connect, publish, and
    subscribe to the AWS IoT message broker. You can alternatively tweak this policy
    as per your requirements, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, select the Create option to complete the policy creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this step completed, we are but a few steps away from establishing the
    connection between our IoT device and the AWS IoT Core.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the necessary policy created and the certificates downloaded, we now need
    to copy these to our IoT device, in this case the Ubuntu virtual machine. You
    can use any SCP tool to perform this activity, such as WinSCP, as well. Here is
    a screenshot of the files on my Ubuntu virtual machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ac44f49-056f-4701-94b6-b235a3b9470e.png)'
  prefs: []
  type: TYPE_IMG
- en: For this scenario, I've called the downloaded Symantec Root CA file  `root-CA.crt`.
  prefs: []
  type: TYPE_NORMAL
- en: Once the files are copied over to a destination folder in your IoT device, you
    are now ready to test the connectivity, but in order to do that, we will first
    need to install and configure the AWS IoT Device SDK on our IoT device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with AWS IoT Device SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWS IoT Device SDK is a quick and easy way to connect your IoT devices with
    AWS IoT Core. To date, AWS provides IoT Device SDKs for Node.js, Java, Python,
    and Embedded C. For this particular section, we will be connecting our dummy IoT
    device with AWS IoT, using the Node.js SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get things started, ensure that you have the latest versions of node
    and NPM installed and running on your device. Since we are simulating an IoT device
    using an Ubuntu virtual machine, you can use the following commands to install
    and verify node and NPM versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the required packages are installed, we now need to install the AWS IoT
    Device SDK itself. Type in the following command as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With the SDK installed, we can now begin testing the connectivity with a simple
    Node.js program. Copy and paste the following code snippet in a new `.js` file
    on your IoT device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'What does the code do? Well for starters, the first section of the code is
    simply where you pass the required private key and certificates downloaded from
    the earlier steps, along with a few other configuration items, such as the `clientId`,
    the AWS `region` where the IoT Core is set up and finally, the `host,` which is
    basically a unique REST API endpoint for your device. You can find this endpoint
    by selecting your newly created IoT device from the AWS IoT dashboard and selecting
    the Interact tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b80713b-4516-4f4f-9b91-582c38712d6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second part of the code is where we use the configured parameters to actually
    connect to the AWS IoT Core. If the connection is successful, it will print a
    simple message as shown. To run the code, simply type in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/de4561d2-d354-4989-8a55-eafc1acbc8e7.png)'
  prefs: []
  type: TYPE_IMG
- en: With the device now successfully connecting with the AWS IoT Core, let's look
    at a few other examples that you can use to interact with the message broker service.
    To start off, let's see how we can use the AWS IoT Device SDK to subscribe to
    a topic and print back any message that gets published to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy and paste the following code snippet below the connection parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The following code subscribes the device to a topic named `Topic0`. Once the
    subscription is completed, the code will display any message that is published
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the code in place, save the file and run the program using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let us look at how we can publish a message to the newly created topic:'
  prefs: []
  type: TYPE_NORMAL
- en: To publish a message to the following topic, we will use the MQTT client provided
    by AWS IoT Core itself. To do so, from the AWS IoT Core dashboard, select the
    Test option from the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the MQTT client, you can subscribe, as well as publish, to a topic. Click
    on the Publish to topic option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Publish section, provide the topic name (in this case, `Topic0`) where
    you want to publish the message and click on Publish to topic, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/150d1d2b-2bec-4a4d-8c76-0fe48da70bea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the device Terminal for the corresponding message. You should see the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d153c3ef-657d-440b-ab92-12637f86dbd4.png)'
  prefs: []
  type: TYPE_IMG
- en: With the device now able to subscribe to a topic, you can also get the device
    to publish a message to a topic as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, create a new file and copy-paste the following code snippet below
    the connection parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the following code, we have simply added a `publish()` method
    that will publish a custom message to a pre-defined topic, in this case, `Topic0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the code and run the program using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output from the device Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc6e92e4-6c9a-443e-9a96-fa94a3cd52b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Simple, isn't it! You can use the same concepts on a real IoT device as well,
    with only a few minor changes here and there. Here is an example code snippet
    that you can use to generate dummy data and publish the data to an MQTT topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file and paste the following code snippet below the connection
    parameters, as done throughout this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet leverages the `node-uuid` module to randomly generate
    long strings of UUIDs. With each UUID record generated, a corresponding random
    value of either `0` or `1` is printed which denotes the *state* of the UUID. You
    can control the number of records generated by adjusting the value of the array
    object. By default, the following code will publish 10 records in a proper JSON
    to the MQTT topic, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the code is in place, simply execute it using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/de32a382-a745-4989-83d4-d00d2a5d06e4.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, we come to the end of this particular section. In the next section,
    we will be looking at how we can integrate the AWS IoT Core with other AWS Services,
    using simple IoT rules.
  prefs: []
  type: TYPE_NORMAL
- en: Working with IoT rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most fascinating features recently provided with the AWS IoT Core
    is IoT rules. With IoT rules, you can basically provide your connected devices
    with the ability to interact with other AWS services. IoT rules provide a predefined
    set of rules that allow you to perform a variety of tasks, such as those listed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: Write data received from a device to an Amazon DynamoDB table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send a push notification to all users using Amazon SNS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish data to an Amazon SQS queue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoke a Lambda function to perform some data transformation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process data from devices using Amazon Kinesis, and much more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An IoT rule also provides you with an added functionality which enables you
    to query and filter device data, as well use simple SQL commands. Based on the
    SQL statement execution, you can then either invoke a success or an error action:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started with IoT rules, select the Act option from the AWS IoT Core console.
    Since this is our first time, click on Create a rule to proceed with the next
    steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Create a rule page, start off by providing a suitable Name and a Description for
    your rule. In this scenario, we will be creating an IoT rule that will write all
    device data to a DynamoDB table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the Using SQL version drop-down list, select an appropriate SQL version
    for this rule. By default, the 2016-03-23 will be selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we form the Rule query statement. This is used to filter out particular
    messages from a large set of device data. In this case, we want all the data from
    our demo device to be written to a DynamoDB table, so in the Attribute field,
    type in an `*` which indicates all fields followed by a valid topic name in the
    Topic filter option. You can also set an optional Condition to match your query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s what the final query should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63f3f87e-88f1-4ed3-816f-e76cfc550c63.png)'
  prefs: []
  type: TYPE_IMG
- en: With the query in place, the next step is to associate one or more actions with
    your IoT rule. From the Set one or more actions section, select the Add action option
    to get started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Select an action page, you can browse and select one of the predefined
    action templates. In this case, we will be selecting the Insert a message into
    a DynamoDB table action, which allows you to write all, or part of, an MQTT message
    to a DynamoDB table. Once selected, click on the Configure action to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will take you to the Configure action page where you can either select
    an existing DynamoDB table, or alternatively create one as well. For this use
    case, we will be relying on the *UUID and state* code that we last executed on
    our sample device. In order to split and write the message data to their individual
    columns, ensure that the DynamoDB table that you create matches the following
    settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Partition key: `uuid`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sort key: `state`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Read capacity units: `5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Write capacity units: `5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/df1c12e8-f5ad-410b-91b4-80c00849599f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the table is created, select it from the Table name drop-down list. Next,
    fill in the corresponding expressions in the Hash key value and Range key value fields,
    as depicted in the following screenshot. These expressions will write the message
    values into their corresponding DynamoDB table columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3593bb60-4ad4-4e7d-b7b0-bc1ca8994b65.png)'
  prefs: []
  type: TYPE_IMG
- en: Ensure that you also create and assign an IAM Role that will grant write AWS
    IoT access to the DynamoDB table. With the table and IAM Role assigned, click
    on Add action to complete configuring the action. You can correspondingly use
    the same process to add multiple actions to a single IoT rule. For example, write
    the device messages to a DynamoDB table as well as to an SQS queue, and so on.
    With the rule ready, click on Create rule to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, to test the rule. Run the `uuid-state` code that we ran in the earlier
    section. Ensure that the topic names in both the code as well as in the IoT rule
    match, otherwise the code will simply not write anything to the DynamoDB table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With the code executing, check the DynamoDB table for the data. You should
    see a similar output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62549949-1b1c-4591-96cc-b19768e3c2e7.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, we come to the end of AWS IoT Core. Make sure you clean up and delete
    the DynamoDB table once the testing completes, to avoid any unnecessary costs.
    In the next section, we will be exploring yet another powerful AWS IoT service
    called AWS Greengrass.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing AWS Greengrass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Greengrass is a form of edge computing service that extends the cloud's
    functionality to your IoT devices by allowing data collection and analysis closer
    to its point of origin. This is accomplished by executing AWS Lambda functions
    locally on the IoT device itself, while still leveraging the cloud for management
    and analytics purposes.
  prefs: []
  type: TYPE_NORMAL
- en: How does this help a business? Well to start with, using AWS Greengrass you
    are now able to respond to locally generated events in near real time! With Greengrass,
    you can program your IoT devices to locally process and filter data and only transmit
    the important chunks back to AWS for analysis. This also has a direct impact on
    the costs as well as the amount of data transmitted back to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a brief look at a few of the necessary components that go into the
    workings of AWS Greengrass:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Greengrass Core** (**GGC**) **software**: The Greengrass Core software is
    a packaged module that consists of a runtime to allow executions of Lambda functions,
    locally. It also contains an internal message broker and a deployment agent that
    periodically notifies the AWS Greengrass service about the device''s configuration,
    state, available updates, and so on. The software also ensures that the connection
    between the device and the IoT service is secure with the help of keys and certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Greengrass groups**: A Greengrass group is a collection of Greengrass Core
    settings and definitions that are used to manage one or more Greengrass-backed
    IoT devices. The groups internally comprise a few other components, namely:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Greengrass group definition:** A collection of information about your Greengrass
    group'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device definition:** A collection of IoT devices that are a part of a Greengrass
    group'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Greengrass group settings:** Contains connection as well as configuration
    information along with the necessary IAM Roles required for interacting with other
    AWS services'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Greengrass Core:** The IoT device itself'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lambda functions:** A list of Lambda functions that can be deployed to the
    Greengrass Core.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscriptions:** A collection of a message source, a message target and an
    MQTT topic to transmit the messages. The source or targets can be either the IoT
    service, a Lambda function or even the IoT device itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Greengrass Core SDK:** Greengrass also provides an SDK which you can use
    to write and run Lambda functions on Greengrass Core devices. The SDK currently
    supports Java 8, Python 2.7, and Node.js 6.10.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this key information in mind, let's go ahead and deploy our very own Greengrass
    Core on an IoT device.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting a device to Greengrass Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps required to connect an IoT device with AWS Greengrass are very similar
    to those we performed during the setup of the AWS IoT Core. In this section, we
    are going to extend our dummy IoT device (Ubuntu Server on a virtual machine)
    with Greengrass using the AWS Management Console:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started, from the AWS IoT console, select the Greengrass option from
    the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up Greengrass involves a three-step process starting with creating and
    configuring a **Greengrass group**, followed by adding a **Greengrass Core** to
    the group and finally, by adding the IoT device to the group. To get going, click
    on the Get Started option under the Define a Greengrass Group tile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Set up your Greengrass Group page, select the Use easy creation option.
    This process will automatically provision a Core in the registry, use default
    settings to generate a new group, and provide your core with a new certificate
    and a key pair.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in a suitable group Name for the Greengrass group and click on Next to
    proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can optionally choose to apply a type to this group by selecting the Thing
    Type from the drop-down box, as shown in the following screenshot. In this case,
    we already have a Thing Type defined from our previous exercises so we are going
    to use this. Click on Next to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5be984cf-247c-42d3-b4e8-cc49b3baf917.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we are using the *easy creation* method, AWS runs a scripted action that
    basically performs the following set of tasks for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Greengrass group in the cloud
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Provision a new core in the IoT registry and add to the group
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate a public and private key set for your core
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate a new security certificate for the core using the keys
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attach a default security policy to the certificate
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Create Group and Core to proceed with the scripted install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, on the Connect your Core device page, download the core-specific certificates
    and config file as a TAR resource by selecting the Download these resources as
    a tar.gz option. You will also need to download an appropriate version of the
    Greengrass Core software to run on your IoT device. Since we are performing all
    of these activities on a Ubuntu-based virtual machine, select the x86_64_Ubuntu option
    from the Greengrass Core software drop-down list and download it. Once done, click
    Finish to exit the setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With both the Greengrass Core software and the necessary Greengrass certificates
    downloaded, we now have to transfer them to our IoT device using any SCP tool.
    Once transferred, run the following set of commands to set up and start the Greengrass
    Core:'
  prefs: []
  type: TYPE_NORMAL
- en: First up, untar the Greengrass Core software using the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the following command to untar and place the security files and certificates
    in the `greengrass` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the contents of both the TAR files are extracted, run the following command
    to download the Root CA certificate from Symantec:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the final folder structure for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b51bc73-45d4-46e4-a547-c541857f8957.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once completed, run the following set of commands to create a dedicated user
    and group for Greengrass Core software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the host operating system and install a `sqlite3` package on it
    using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'With all the pieces of the puzzle in place, we are now ready to finally start
    the Greengrass Core service on our IoT device. Type in the following command as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output on your Terminal, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d290971e-91cf-459e-a792-ff1cf65e2ae5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In case of errors in connecting, you can also check the Greengrass runtime
    log file at the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/greengrass/ggc/var/log/system/runtime.log.`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple, isn''t it! With two out of three steps completed, the final step left
    in completing the Greengrass connectivity is adding a device to the Greengrass
    group that we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: To do so, from the AWS IoT console, select the Groups option provided under
    the Greengrass section from the navigation pane. You should see your newly created
    Greengrass group present here. Select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Devices and click on the Add your first Device option to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here in the Add a Device page, you can opt to either Create a new Device or
    optionally Use an existing IoT Thing as an Device. Since we already have the IoT
    device registered from our earlier IoT setup, select the Select an IoT Thing option
    to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the name of the added IoT device and click on Finish to complete the
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There you have it! You have successfully installed and connected your IoT device
    with AWS Greengrass! In the next section, we will test this deployment by running
    a simple Lambda function on it.
  prefs: []
  type: TYPE_NORMAL
- en: Running Lambda functions on AWS Greengrass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the Greengrass Core software up and running on your IoT device, we can
    now go ahead and run a simple Lambda function on it! For this particular section,
    we will be leveraging an AWS Lambda blueprint that prints a simple Hello World
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started, first we will need to create our Lambda function. From the AWS
    Management Console, filter out the Lambda service using the Filter option or alternatively,
    select this URL: [https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the Lambda function is launched from the same region as that of
    the AWS Greengrass. In this case, we are using the US-East-1 (N. Virginia) region.
  prefs: []
  type: TYPE_NORMAL
- en: On the AWS Lambda console landing page, select the Create function option to
    get started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we are going to be leveraging an existing function blueprint for this
    use case, select the Blueprints option provided on the Create function page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the filter to find a blueprint with the name `greengrass-hello-world`. There
    are two templates present to date that match this name, one function is based
    on Python while the other is based on Node.js. For this particular section, select
    the `greengrass-hello-world` Python function and click on Configure to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the required details for the new function, such as a Name followed
    by a valid Role. For this section, go ahead and select the Create new role from
    template option. Provide a suitable Role name and finally, from the Policy templates drop-down
    list, select the AWS IoT Button Permissions role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once completed, click on Create function to complete the function's creation
    process. But before you move on to associating this function with your AWS Greengrass,
    you will also need to create a new *version* out of this function. Select the
    Publish new version option from the Actions tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a suitable Version description text and click on Publish once done.
    Your function is now ready for AWS Greengrass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, head back to the AWS IoT dashboard and select the newly deployed Greengrass
    group from the Groups option present on the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Greengrass group page, select the Lambdas option from the navigation
    pane followed by the Add Lambda option, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/05554d66-7f2d-49a3-9b1b-4fa5b0c3bdb7.png)'
  prefs: []
  type: TYPE_IMG
- en: On the Add a Lambda to your Greengrass group, you can choose to either Create
    a new Lambda function or Use an existing Lambda function as well. Since we have
    already created our function, select the Use existing function option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next page, select your Greengrass Lambda function and click Next to proceed.
    Finally, select the version of the deployed function and click on Finish once
    done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To finish things, we will need to create a new subscription between the Lambda
    function (source) and the AWS IoT service (destination). Select the Subscriptions option
    from the same Greengrass group page, as shown. Click on Add Subscription to proceed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a52542d-c655-419f-afcc-f22c9ec0c5f1.png)'
  prefs: []
  type: TYPE_IMG
- en: On the Select your source and target page, select the newly deployed Lambda
    function as the source, followed by the IoT cloud as the target. Click on Next once
    done. You can provide an Optional topic filter as well, to filter messages published
    on the messaging queue. In this case, we have provided a simple `hello/world` as
    the filter for this scenario. Click on Finish once done to complete the subscription
    configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With all the pieces in place, it''s now time to deploy our Lambda function
    over to the Greengrass Core. To do so, select the Deployments option and from
    the Actions drop-down list, select the Deploy option, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d50c8838-32bd-4bcb-989b-82e0f4683e11.png)'
  prefs: []
  type: TYPE_IMG
- en: The deployment takes a few seconds to complete. Once done, verify the status
    of the deployment by viewing the Status column. The Status should show Successfully
    completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the function now deployed, test the setup by using the MQTT client provided
    by AWS IoT, as done before. Remember to enter the same `hello/world` topic name
    in the subscription topic field and click on Publish to topic once done. If all
    goes well, you should receive a custom Hello World message from the Greengrass
    Core as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ab447e0-68da-4702-b57a-8df3b5ead891.png)'
  prefs: []
  type: TYPE_IMG
- en: This was just a high level view of what you can achieve with Greengrass and
    Lambda. You can leverage Lambda for performing all kinds of preprocessing on data
    on your IoT device itself, thus saving a tremendous amount of time, as well as
    costs.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we come to the end of this section. In the next section, we will
    be looking at a few simple ways of effectively monitoring your IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring AWS IoT devices and services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS offers a variety of methods for monitoring both your IoT devices, as well
    as the IoT service and its calls. To get things started, let''s first look at
    the simple device monitoring functionality provided by the AWS IoT dashboard itself.
    On the AWS IoT console page, select the Monitor option. Here, you can view a variety
    of graphs and data, such as the *number of successful connections* made to the
    AWS IoT service over the past hour, day, or week. You can even check the number
    of *messages* that were transmitted using either the MQTT or the HTTP protocol,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87c8620b-fc18-467f-9ab3-3e93e44f7d24.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also use the Monitor page to view the number of *messages published*,
    *rules executed*, and *shadow updates* performed.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, you also have an option to enable logging for your AWS
    IoT service. To do so, select the Settings option from the navigation pane of
    the AWS IoT console. By default, logging of AWS IoT is *disabled*, however you
    can easily switch it on by selecting the Edit option provided under the Logs section.
    As messages from your IoT devices pass through the message broker and the rules
    engine, you can use the AWS IoT logs to process events and in turn, troubleshoot
    issues, both at the device as well as at the service's end.
  prefs: []
  type: TYPE_NORMAL
- en: You can choose between Debug (most verbose), Info, Warning, and Errors (least
    verbose) levels of verbosity, depending on your logging requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, like all good journeys, this book too has come to its end! I just wanted
    to take this time to say that it has really been a wonderful journey and experience
    writing this book! Although the book may seem a lot to read and grasp, trust me,
    this is all just a drop in the ocean! AWS continuously strives to evolve its services
    by adding more and more features to it, so much so, that today you have ready-to-use
    services for almost anything, including game development, AI, customer engagement,
    business productivity, just to name a few!
  prefs: []
  type: TYPE_NORMAL
- en: 'To quickly summarize all that we have learned so far: we started our journey
    with some interesting hands-on with the EC2 Systems Manager, shortly followed
    by two of my favorite services, the Elastic Beanstalk and the Elastic File System.
    We also covered a lot on security in the form of AWS WAF, AWS Shield, AWS CloudTrail,
    and AWS Config! Towards the end, we started exploring a few developer-based services
    in the form of AWS CodeDeploy, AWS CodeCommit, and AWS CodePipeline, to name a
    few. Finally, we ended the last few chapters on a high note by looking at the
    IoT and Analytics services in Amazon Redshift, Amazon EMR, AWS Data Pipeline and
    last, but not the least, AWS IoT!'
  prefs: []
  type: TYPE_NORMAL
- en: Till next time, cheers!
  prefs: []
  type: TYPE_NORMAL
