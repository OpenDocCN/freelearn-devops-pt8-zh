- en: Chapter 2. The OpenStack Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction – using OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the OpenStack clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring your Linux or macOS environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring your Windows environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common OpenStack networking tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common OpenStack server (instances) tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common OpenStack image tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common OpenStack identity tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common OpenStack storage tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common OpenStack orchestration tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction – using OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack can be interacted with in a number of ways – from using the Horizon
    (the OpenStack control panel) web interface to, the power of the command line
    to using third -party software, all of which are transparently integrated with
    OpenStack. In this chapter, we will introduce the OpenStack **Command-Line Interface**
    (**CLI**) and see how to configure it for use with your installation of OpenStack.
    The OpenStack command-line tools, like the vast majority of OpenStack, are written
    in Python. This means that there is a direct dependency on Python being available
    on the computer that will be running the clients.
  prefs: []
  type: TYPE_NORMAL
- en: When we interact with OpenStack, we are technically making REST API calls to
    the services that run the Service **APIs** (**Application Programming Interfaces**).
    A REST API defines a set of functions that developers can perform requests and
    receive responses via HTTP protocol such as GET and POST. The OpenStack command-line
    clients translate your intuitive commands into these HTTP calls. In a typical
    deployment of OpenStack, and one that has been described in [Chapter 1](part0014_split_000.html#DB7S2-189e69df43a248268db97cde1b1a8e47
    "Chapter 1. Installing OpenStack with Ansible"), *Installing OpenStack with Ansible*,
    using Ansible, our OpenStack API services have been deployed across three Controller
    nodes. To allow us to interact with any one of the three Controller nodes so that
    each of them can respond independently, we place these services behind a load
    balancer. It is the load balancer **VIP** (**Virtual IP**), the IP address we
    have associated for use with each of the configured pools, that as a user of OpenStack
    that we are interested in.
  prefs: []
  type: TYPE_NORMAL
- en: There is one particular service that a user is interested in when configuring
    their environment for use with OpenStack and that is the `Keystone` service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Keystone` service (OpenStack Identity service) essentially performs two
    functions in OpenStack. It authorizes users to allow them to perform the actions
    they have requested, as well as provides a catalog of services back to the user.
    This catalog is a mapping of the OpenStack service address endpoints. For this
    reason, we do not need to configure our client to know where to find each and
    every OpenStack service. When a user configures their environment to use OpenStack
    from the command line, the only information they need to be aware of is the IP
    address and port that `Keystone` has been installed on. See the following diagram
    for how this conceptually looks to a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction – using OpenStack](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter is intended as a quick reference guide for commands that are explained
    in more detail throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to be able to install the required OpenStack client tools under Windows,
    we must first prepare our Windows desktop machine with Python. The following applies
    to Windows 10.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ensure that you are logged into your desktop and have the following installed:'
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python 2.7 from here: [https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Visual C++ Build Tools with feature Windows 10 SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring your Windows environment can be achieved from **Properties** of
    your PC. Follow these instructions to ensure that Python is available in your
    system path, as well as set the appropriate environment variables under PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **This PC** icon on your desktop and choose **Properties**,
    as shown here:![How to do it…](img/00007.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose **Advanced system settings** from the menu on the left:![How to
    do it…](img/00008.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select **Environment Variables** from the **Advanced** tab of the **System
    Properties** window, as shown here:![How to do it…](img/00009.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To set the path for Python, double-click on the **Path** entry as shown here:![How
    to do it…](img/00010.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now add a **New** line to the path as shown as follows. We assume that you did
    a default installation of Python 2.7 and it is installed at `C:\Python27`:![How
    to do it…](img/00011.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on **OK**. When you load up a PowerShell session, you should now be
    able to test that Python is working as expected, as shown here:![How to do it…](img/00012.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be able to install the OpenStack clients as described in the
    next recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuring your Windows environment is a little more involved than it is for
    Unix/Linux environments. We first have to ensure that Python is set up properly,
    and available for use in a shell. We then to have a mechanism for loading environment
    variables into our shell, which isn't a native feature of Windows. We do this
    using a PowerShell script. However, because PowerShell is quite powerful, we have
    to remove a restriction to allow this to work. Once we have this all set up correctly,
    we are able to use the OpenStack environment from our Windows desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the OpenStack clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of OpenStack clients available that are used to interact
    with OpenStack from the command line. Historically, each service in OpenStack
    has its own client. For example, the OpenStack Compute project, Nova, has its
    own `nova` client. Similarly, the OpenStack networking project, Neutron, also
    has its own client called `neutron` client. And so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Officially, there is a convergence to using one client: the OpenStack client.
    However, not all commands and features are available under this one tool. Moreover,
    the OpenStack client still requires each individual project command-line tool
    installed to function; however, it provides a more consistent interface without
    the need to remember each individual project name.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we are preparing your desktop for interacting with OpenStack from the command
    line, you will appreciate that there are a variety of choices you can make for
    your desktop OS of choice. This section will describe the installation of OpenStack
    clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we will be installing the OpenStack clients using `pip`, ensure that this
    is installed by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, load up a Terminal and become the *root* user with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll be using `pip` to install the clients. If `pip` is not installed, carry
    out the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On macOS or variants use this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On popular Linux systems, use your package manager to install the packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ubuntu**: Ensure that `python-dev` and `python-pip` are installed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Red Hat**: Ensure that `python-devel` and `python-pip` are installed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Windows**: Be sure that you have Python installed and available in **PATH**
    and Microsoft Visual C++ Build Tools installed.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With `pip` installed on our system, we are able to install the clients using
    the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the OpenStack client, carry out the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install the individual clients, carry out the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each of the projects have their own client, so the syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Alternative – use a preconfigured OpenStack client virtual machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes the clients are in development at a different pace to the projects
    installed in your, environment which can make for version incompatibilities. To
    overcome this, either use `virtualenv` ([https://pypi.python.org/pypi/virtualenv](https://pypi.python.org/pypi/virtualenv))
    or use a virtual machine, under VirtualBox, that has been preconfigured for accessing
    your OpenStack environments. To use a prebuilt virtual environment, carry out
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the client VirtualBox Vagrant environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Launch the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the virtual machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing the OpenStack clients is made very simple using the `pip` command-line
    tool, which is used to install Python packages. The main tool for using OpenStack
    on the command line is called the **OpenStack client**. This tool is used to control
    all aspects of OpenStack. However, there are some commands and options that have
    yet to make it into the main OpenStack clients. To overcome this, the older legacy
    project tools can still be used. Ensure that these are also installed using the
    following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Replace *PROJECT* with the specific name of the OpenStack project, such as *glance*
    or *neutron*.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, create these tools in small virtual machine so that the tools
    are always available. A Vagrant OpenStack client environment is available from
    [https://github.com/OpenStackCookbook/ope](https://github.com/OpenStackCookbook/ope).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your Linux or macOS environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenStack tools are configured by setting environment variables in your
    shell or desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have the OpenStack clients installed as described in the first
    recipe, *Introduction – using OpenStack*, in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration of your command-line environment is achieved by setting environment
    variables; however, it is easier and more convenient to place these variables
    in a file that we can later load into our environment. During the installation,
    OpenStack-Ansible creates a plain text file called `openrc` and places this in
    the `/root` directory of all the containers created. This file is a great starting
    point for configuring the environment as it has all the required elements needed
    to operate your CLI environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your own client, for example, Linux or Mac-based, choose a working directory,
    such as `$HOME/openstack`, and create a file called `openrc` (or a meaningful
    name of your choice) with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you use this file in your shell by sourcing it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Bash, you can use this syntax too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This file includes authentication details into your cloud environment. Keep
    it safe and ensure the permissions don''t allow any other users to read this file.
    If in doubt, just set the permissions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will set the file to be read/write for you (user) only.
  prefs: []
  type: TYPE_NORMAL
- en: You can now use the command-line tools. If anything has gone wrong when executing
    the commands in the book, check your credentials in the file – ensure that you've
    set the correct tenant/project, username, and password, as well as ensure you're
    specifying the correct OpenStack authentication URL endpoint. Once you make any
    changes to this file, remember to source them back into your shell.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Essentially, we're just setting some environment variables in our shell, which
    our client tools use to authenticate into our OpenStack environment. To make it
    easier though, we store these environment variables in a file. This makes access
    to our environment easy as we just run one command to set all the required credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your Windows environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configuring your Windows environment for use with OpenStack requires a little
    more effort – but the basic premise remains: we''re configuring our desktop so
    that it has access to environment variables, as well as ensuring that our tools,
    written in Python, are able to execute properly.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following applies to Windows 10\. Ensure that you have followed the steps
    to install Python.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following to load the required environment variables into your
    Windows session:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to source in the required OpenStack environment functions as we
    do on a Unix/Linux platform, we can achieve a similar outcome using some PowerShell.
    In the PowerShell Terminal, go and grab the following PowerShell script and download
    it into your working client directory (for example `C:\Users\Username\OpenStack`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the same OpenStack credentials as described in the *Configuring your
    Linux or macOS environment* recipe, ensure that it is named `openrc` to match
    the following example and execute the following in PowerShell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warning**: You may get an error executing the PowerShell script. Most Windows
    10 desktops appear to have a default policy of restricted, which excludes the
    running of PowerShell scripts that aren''t signed – even the ones you have created
    yourself. To remove this for this session, execute the following and acknowledge
    the warning:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should now be able to use your OpenStack clients under your Windows desktop
    PowerShell Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuring your Windows environment is a little more involved than it is for
    Unix/Linux environments. We have to have a mechanism for loading environment variables
    into our shell that isn't a native feature of Windows. We do this using a PowerShell
    script. However, we have to remove a restriction to allow this to work. Once we
    have this all set up correctly, we are able to use the OpenStack environment from
    our Windows desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Common OpenStack networking tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section outlines common OpenStack networking tasks for quick reference
    only. For more details on using Neutron and how Neutron works – including details
    of when and where to use features such as Floating IPs and Routers, refer to [Chapter
    4](part0048_split_000.html#1DOR01-189e69df43a248268db97cde1b1a8e47 "Chapter 4. Neutron
    – OpenStack Networking"), *Neutron – OpenStack Networking*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have the OpenStack clients installed, as described in the first
    recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create and modify networks in OpenStack:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are usually two steps to create a network: creating the equivalent of
    an L2 network, followed by assigning a subnet (and details to it).'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create the network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create the subnet on this network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a provider network (for use with Floating IPs)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create a floating IP provider network, carry out the following commands.
    This command assumes that our provider interface, as seen from OpenStack (and
    configured in Neutron), is using the "flat" interface. Typical deployments in
    a datacenter would likely use "vlan" as the provider type and device, so adjust
    to suit your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create the network (in this example, we''re specifying a provider type
    of `flat`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we specify some options of the subnet that make sense for this network
    to be accessed from outside of OpenStack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a new security group
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Creating a new security group, for example, `webserver` in the project `development`,
    is achieved as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Adding a rule to a security group
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To add a rule to a security group called `webserver` created in the previous
    step, such as allowing inbound access from anywhere to port `80`, carry out the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Creating a router
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To create a router called `myRouter` in our project, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Adding a subnet to a router
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To add a private tenant subnet, called `private-subnet`, to our router called
    `myRouter`, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Setting a gateway on the router
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To add a gateway to our router, we first must ensure that the gateway network
    has been created with the `--external` flag as described in the *Creating a provider
    network* section in this chapter (for use with Floating IPs). We will then execute
    the following command to set the external gateway network to be that of `GATEWAY_NET`
    on our router called `myRouter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Common OpenStack server (instances) tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section outlines a number of common commands that can be run when operating
    with instances (for example, virtual machines). For more detailed information
    and explanation of each task, refer to [Chapter 5](part0062_split_000.html#1R42S1-189e69df43a248268db97cde1b1a8e47
    "Chapter 5. Nova – OpenStack Compute"), *Nova – OpenStack Compute*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have the OpenStack clients installed as described in the first
    recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following to launch and manipulate running instances:'
  prefs: []
  type: TYPE_NORMAL
- en: Launching an instance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To launch in an instance from the command line, you need the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: An image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A flavor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional security group (default is used otherwise)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional key (if you intend to access the instance)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Carry out the following steps to launch an instance from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the images available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we list the networks available (it will be the UUID of the Network we will
    use):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need a flavor, if you need reminding of them, list them with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you require specific security groups, list them with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you need to get the name of the key pair to use, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you can boot the instance with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Listing OpenStack Instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To list the OpenStack instances launched, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Create instance snapshot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a snapshot of a running instance, carry out the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Resizing an instance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To alter the flavor of a running instance and respawn with the new settings,
    carry out the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first specify the new flavor size with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, list the running instances to confirm the state. The status should be
    `VERIFY_RESIZE`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This shows output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Resizing an instance](img/00013.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Then we confirm the action with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a flavor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a flavor, called `m1.tiny`, which is made up of 512 MB RAM, 1 vCPU,
    and no fixed size disk, carry out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Common OpenStack image tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section outlines a number of steps, intended as a quick overview only,
    when operating against the OpenStack Image service (known as Glance). For more
    detailed information and explanation of each task, refer to [Chapter 6](part0087_split_000.html#2IV0U1-189e69df43a248268db97cde1b1a8e47
    "Chapter 6. Glance – OpenStack Image Service"), *Glance – OpenStack Image Service*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have the OpenStack clients installed, as described in the first
    recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create and modify images in OpenStack:'
  prefs: []
  type: TYPE_NORMAL
- en: Uploading an image to Glance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Uploading an image to OpenStack is achieved with the following. To upload,
    a QCOW2 image such as one provided by CirrOS for testing, carry out the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Downloading an image or snapshot from Glance as a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To download an image from Glance, perhaps for copying to another environment
    or to store as an offsite backup, carry out the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Sharing images between projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In most situations, an image is either public (available to all projects),
    or private (only available to the project that the image was uploaded onto). However,
    you are able to share a private image to isolated projects of your choosing. To
    do this, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The image UUID of the image you will be sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The UUID of the project that you will be sharing the image with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Carry out the following steps to share an image with another project. In the
    following example, we will share the `cirros-image`, currently only available
    in `admin` project with the `anotherProject` project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, query the project list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Sharing images between projects](img/00014.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We will set the image to be shared:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will then tell OpenStack which project we want this sharing using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back output like the following – we will use the **image_id**
    in the next step:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Sharing images between projects](img/00015.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Important: as a user in the **receiving** (**anotherProject**) project, execute
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, as that same user, you can confirm that you can see this shared image
    by executing an image listing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring back output like the following, showing the available image:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Sharing images between projects](img/00016.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Common OpenStack identity tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section outlines a number of common steps to take for a number of common
    actions using the OpenStack Identity service. This is intended as a quick reference
    guide only. For more detailed information and explanation of each task, refer
    to [Chapter 3](part0035_split_000.html#11C3M1-189e69df43a248268db97cde1b1a8e47
    "Chapter 3. Keystone – OpenStack Identity Service"), *Keystone – OpenStack Identity
    Service*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have the OpenStack clients installed, as described in the first
    recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create and modify users and projects in OpenStack:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating a new user in a project is achieved with the following command. For
    example, to create the project called `development`, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Creating a user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a user called `developer`, with a password of `password123`, carry
    out the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Adding a user to a project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add a user with the `_member_` role (regular user) to the `development`
    project, carry out the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Changing a user's password as an administrator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As an administrator, you have the ability to alter someone''s password. To
    do this for the `developer` user, carry out the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Changing your own password
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To change your own password to something else, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Common OpenStack storage tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section outlines a number of common tasks using the OpenStack Block and
    Object Storage service. For more information on storage, refer to [Chapter 7](part0094_split_000.html#2PKKS1-189e69df43a248268db97cde1b1a8e47
    "Chapter 7. Cinder – OpenStack Block Storage"), *Cinder – OpenStack Block Storage*
    and [Chapter 8](part0105_split_000.html#344B21-189e69df43a248268db97cde1b1a8e47
    "Chapter 8. Swift – OpenStack Object Storage"), *Swift – OpenStack Object Storage*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have the OpenStack clients installed, as described in the first
    recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create and modify users and projects in OpenStack:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Cinder volume
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a new Cinder block storage volume, carry out the following command.
    The size is in gigabytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Attaching a volume
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To attach a volume to a running instance, carry out the following command.
    The running **instance UUID** is used and can be found by listing the running
    instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Detaching a volume
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To detach a volume, first unmount it from the running instance as you would
    normally, then carry out the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Creating a volume snapshot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make a snapshot of a volume, carry out the following steps. First, you must
    detach the volume from the running instance to ensure data consistency. The action
    is described in the previous task.
  prefs: []
  type: TYPE_NORMAL
- en: Now once detached, issue the following
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Listing Object Storage statistics
  prefs: []
  type: TYPE_NORMAL
- en: 'To display information about Object Storage containers, carry out the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Listing Object Storage containers and contents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To list contents of an object store, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Creating and uploading files to the Object Storage service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create an Object Storage container, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'To upload files to an Object Storage container, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Downloading from Object Storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To download files from an Object Storage container, use this command
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: To download all files from an Object Storage container, issue the following
    command
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Common OpenStack orchestration tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section outlines a number of common tasks using the OpenStack Orchestration
    (Heat) service to launch *stacks* (orchestrated environments using Heat). For
    more information on Heat and orchestration, refer to [Chapter 9](part0113_split_000.html#3BOFI1-189e69df43a248268db97cde1b1a8e47
    "Chapter 9. OpenStack Orchestration Using Heat and Ansible"), *OpenStack Orchestration
    Using Heat and Ansible*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have the OpenStack clients installed, as described in the first
    recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create and use Heat templates in OpenStack
    to create orchestrated environments:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch a stack from a template and environment file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To launch a stack from a heat orchestration template (hot), issue the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Listing stacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To list the running stacks, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a running stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To destroy a running stack named `myStack`, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Listing resources in a stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To list the resources in a running stack, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the details of a specific resource, for example, named `myResource`,
    issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Viewing the outputs of a running Stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To view the outputs produced by the Stack, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the details of the specific output, carry out the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
