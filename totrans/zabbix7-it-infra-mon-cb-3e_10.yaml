- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Extending Zabbix Functionality with Custom Scripts and the Zabbix API
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义脚本和 Zabbix API 扩展 Zabbix 功能
- en: Zabbix offers a lot of functionality out of the box. But where Zabbix really
    shines is customization, not only through the default frontend but especially
    with scripts and the Zabbix API.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 提供了很多开箱即用的功能。但 Zabbix 真正出色的地方在于其可定制性，不仅仅是通过默认的前端，尤其是通过脚本和 Zabbix API
    来进行扩展。
- en: In this chapter, I will go over the basics of using the Zabbix API. We will
    then see how a Python script can utilize the API to build something cool, such
    as a jumphost. After that, we’ll use some scripts written by *Brian van Baekel*
    to enable and disable hosts with limited permissions from a Zabbix map.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我将讲解如何使用 Zabbix API 的基础知识。接着，我们将看到如何通过 Python 脚本利用 API 构建一些有趣的功能，例如跳板主机。之后，我们将使用
    *Brian van Baekel* 编写的脚本，通过 Zabbix 地图启用和禁用具有有限权限的主机。
- en: After following these recipes, you’ll be more than ready to tackle the Zabbix
    API and you’ll know how to use scripts to extend Zabbix functionality. This chapter
    will expand your possibilities with Zabbix to almost endless proportions and you’ll
    be ready to become a professional Zabbix user yourself.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随这些食谱，你将完全准备好应对 Zabbix API，并且能够使用脚本扩展 Zabbix 功能。本章将扩展你在 Zabbix 中的可能性，几乎是无限的，你将准备好成为一名专业的
    Zabbix 用户。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Setting up and managing API tokens
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和管理 API 令牌
- en: Using the Zabbix API for extending functionality
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zabbix API 扩展功能
- en: Building a jumphost using the Zabbix API and Python
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zabbix API 和 Python 构建跳板主机
- en: Enabling and disabling a host from Zabbix maps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用和禁用 Zabbix 地图中的主机
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We are going to need a Zabbix server as well as some new Linux hosts. We will
    also need to have general knowledge of scripting and programming. We are going
    to use Python to extend some functionality of Zabbix, which we’ll provide scripts
    for.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一个 Zabbix 服务器和一些新的 Linux 主机。我们还需要具备一些基本的脚本和编程知识。我们将使用 Python 来扩展 Zabbix
    的一些功能，并为此提供相应的脚本。
- en: 'The code required for the chapter can be found at the following link:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所需的代码可以在以下链接找到：
- en: '[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10)'
- en: Make sure to keep all of this ready and you’ll be sure to nail these recipes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 确保一切准备就绪，你就一定能掌握这些食谱。
- en: Setting up and managing API tokens
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和管理 API 令牌
- en: Let’s start off our chapter by doing some configuration for working with APIs
    in Zabbix. If you’ve worked with the Zabbix API before, you might know it can
    be quite a hassle to use API calls to authenticate and get an API token for using
    it in your scripts. This is no longer the case, as we can generate API tokens
    using the Zabbix frontend.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始时，我们将进行一些 Zabbix API 配置。如果你之前使用过 Zabbix API，可能会知道通过 API 调用来认证并获取 API 令牌以在脚本中使用是非常麻烦的。但现在情况不同了，我们可以通过
    Zabbix 前端生成 API 令牌。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, all we’ll need is the Zabbix setup running. We’ll be using
    the frontend to generate the API token. From here, we can use the API token in
    any of our integrations further on in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们只需要 Zabbix 设置正在运行。我们将使用前端生成 API 令牌。从这里，我们可以在本章后续的集成中使用 API 令牌。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: First, let’s log in to the Zabbix frontend as a Super admin user.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们以超级管理员用户身份登录到 Zabbix 前端。
- en: Navigate to **Users** | **User groups** and click the blue **Create user group**
    button in the top-right corner.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **用户** | **用户组**，然后点击右上角的蓝色 **创建用户组** 按钮。
- en: Here, we’ll create a new user group. Fill in the **Group name** field as **API
    Users**.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个新用户组。在 **组名** 字段中填写 **API 用户**。
- en: Switch to the **Host Permissions** tab and give your API user group permission
    to every host by clicking the **Select** button and selecting every host group.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 **主机权限** 标签，点击 **选择** 按钮并选择所有主机组，授予你的 API 用户组对每个主机的权限。
- en: '![Figure 10.1 – Zabbix Users | User groups, creating user group host permissions,
    API Users](img/B19803_10_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – Zabbix 用户 | 用户组，创建用户组主机权限，API 用户](img/B19803_10_01.jpg)'
- en: Figure 10.1 – Zabbix Users | User groups, creating user group host permissions,
    API Users
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – Zabbix 用户 | 用户组，创建用户组主机权限，API 用户
- en: Move on to the **Template permissions** tab and do the same thing here.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到**模板权限**选项卡，并在这里做同样的操作。
- en: '![Figure 10.2 – Zabbix Users | User groups, creating user group template permissions,
    API Users](img/B19803_10_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – Zabbix 用户 | 用户组，创建用户组模板权限，API 用户](img/B19803_10_02.jpg)'
- en: Figure 10.2 – Zabbix Users | User groups, creating user group template permissions,
    API Users
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – Zabbix 用户 | 用户组，创建用户组模板权限，API 用户
- en: 'Click the blue **Select** button at the bottom of this popup and click on **Read-write**
    followed by the small dotted **Add** button. It should now look like this:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击弹出窗口底部的蓝色**选择**按钮，然后点击**读写**，接着点击小圆点的**添加**按钮。现在应该看起来像这样：
- en: '![Figure 10.3 – Zabbix Users | User groups, user group permissions page, API
    Users](img/B19803_10_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 – Zabbix 用户 | 用户组，用户组权限页面，API 用户](img/B19803_10_03.jpg)'
- en: Figure 10.3 – Zabbix Users | User groups, user group permissions page, API Users
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – Zabbix 用户 | 用户组，用户组权限页面，API 用户
- en: Tip
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Instead of creating the API user as Super admin, we can also limit the permissions
    by limiting the host and template group access on the **API Users** user group.
    This could be preferred in production environments, as you might want to limit
    API access. Use whatever fits your preference.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择不以超级管理员身份创建 API 用户，而是通过限制**API 用户**用户组中的主机和模板组访问权限来限制权限。这在生产环境中可能更受欢迎，因为你可能希望限制
    API 访问。使用适合你需求的方式。
- en: Click the blue **Add** button at the bottom of the page to add this new user
    group.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的蓝色**添加**按钮，添加此新的用户组。
- en: Now, let’s go to **Users** | **Users** and click the blue **Create user** button
    in the top-right corner.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们转到**用户** | **用户**并点击右上角的蓝色**创建用户**按钮。
- en: 'Here we will create a new user called the **API** user. Create the user as
    follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个新的用户，称为**API** 用户。创建用户如下：
- en: '![Figure 10.4 – Zabbix Users | Users, user creation page, API user](img/B19803_10_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4 – Zabbix 用户 | 用户，用户创建页面，API 用户](img/B19803_10_04.jpg)'
- en: Figure 10.4 – Zabbix Users | Users, user creation page, API user
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – Zabbix 用户 | 用户，用户创建页面，API 用户
- en: Before adding the user, switch to the **Permissions** tab and add **Super**
    **admin role**.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加用户之前，切换到**权限**选项卡并添加**超级管理员角色**。
- en: '![Figure 10.5 – Zabbix Users | Users, user permissions page, API user](img/B19803_10_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – Zabbix 用户 | 用户，用户权限页面，API 用户](img/B19803_10_05.jpg)'
- en: Figure 10.5 – Zabbix Users | Users, user permissions page, API user
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – Zabbix 用户 | 用户，用户权限页面，API 用户
- en: We can now add the user by clicking the blue **Add** button at the bottom of
    the page.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过点击页面底部的蓝色**添加**按钮来添加用户。
- en: Next up, we need to create some API tokens for this user. Navigate to **Users**
    | **API tokens**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为这个用户创建一些 API 令牌。进入**用户** | **API 令牌**。
- en: 'Let’s click the blue **Create API token** button in the top-right corner and
    fill in the **User** field as **API** and the **Name** field as **API book key**.
    Set **Expires at** to somewhere far in the future or disable expiration entirely
    – whatever you think might be secure. It will look like this:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击右上角的蓝色**创建 API 令牌**按钮，并将**用户**字段填写为**API**，**名称**字段填写为**API 图书密钥**。将**过期时间**设置为未来某个较远的时间，或者完全禁用过期——选择你认为最安全的方式。它应该看起来像这样：
- en: '![Figure 10.6 – Administration | General | API token, API token creation page](img/B19803_10_06.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 管理 | 一般 | API 令牌，API 令牌创建页面](img/B19803_10_06.jpg)'
- en: Figure 10.6 – Administration | General | API token, API token creation page
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 管理 | 一般 | API 令牌，API 令牌创建页面
- en: 'Click the blue **Add** button at the bottom of the page to generate the new
    API token. This will bring us to the next page:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的蓝色**添加**按钮，生成新的 API 令牌。这将带我们到下一个页面：
- en: '![Figure 10.7 – Zabbix API user API token generated page](img/B19803_10_07.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – Zabbix API 用户 API 令牌生成页面](img/B19803_10_07.jpg)'
- en: Figure 10.7 – Zabbix API user API token generated page
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – Zabbix API 用户 API 令牌生成页面
- en: Make sure to save the **Auth token** value to a secure location, such as a password
    vault. It will be important later in the labs.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将**认证令牌**的值保存到一个安全位置，例如密码保险库。稍后在实验中它会很重要。
- en: We can click the **Close** button at the bottom of this page now. This will
    bring us back to the **API tokens** page where we can manage all of our created
    API tokens.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以点击页面底部的**关闭**按钮。这将带我们返回到**API 令牌**页面，在那里我们可以管理所有已创建的 API 令牌。
- en: "![Figure 10.8 – Zabbix API user API tokens p\uFEFF\uFEFFage](img/B19803_10_08.jpg)"
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – Zabbix API 用户 API 令牌页面](img/B19803_10_08.jpg)'
- en: Figure 10.8 – Zabbix API user API tokens page
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – Zabbix API 用户 API 令牌页面
- en: How it works…
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Because Zabbix now comes with built-in API token management, it has become a
    lot easier to work with the Zabbix API. Using a dedicated API user, we can manage
    all of our tokens in a single location or we can set up private API tokens under
    our own user account.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Zabbix 现在自带内置的 API 令牌管理功能，因此使用 Zabbix API 变得更加容易。通过使用专用的 API 用户，我们可以在一个位置管理所有令牌，或者我们可以在自己的用户账户下设置私有的
    API 令牌。
- en: In this case, we created a new API Users group. This is important because our
    API tokens are still part of a user account meaning they will respect that user
    its permissions. If we create an API user under any other user type than Super
    admin, we can restrict our API access using the **API** **Users** group.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们创建了一个新的 API 用户组。这很重要，因为我们的 API 令牌仍然属于一个用户账户，这意味着它们将遵循该用户的权限。如果我们在除超级管理员以外的其他用户类型下创建
    API 用户，我们可以通过 **API** **Users** 组来限制我们的 API 访问。
- en: Make sure that you apply the role to the user and the permissions to the user
    group as you see fit in your environment. Also, make sure to set a reasonable
    expiration date for your API tokens so we can regenerate them from time to time.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保将角色应用于用户并将权限赋予用户组，根据您的环境需求进行调整。同时，请确保为您的 API 令牌设置合理的过期日期，以便我们能够定期重新生成它们。
- en: There’s not much else to say about setting up and managing your API tokens,
    but let’s see how we can apply what we have learned in this recipe in the next
    recipes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 关于设置和管理 API 令牌，没什么太多需要说明的了，但让我们看看如何在接下来的教程中应用我们在本教程中学到的内容。
- en: Using the Zabbix API for extending functionality
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Zabbix API 扩展功能
- en: 'An API is your gateway to getting started with extending the functionality
    of any piece of software. Luckily, Zabbix offers a solid working API that we can
    use to extend our functionality with ease. Zabbix has also released `zabbix-utils`
    for Python, making building scripts a lot easier for everyone. It’s an amazing
    addition, but as it’s not allowed in every environment and we want to keep the
    dependencies to a minimum, we won’t utilize it in our test here. Nevertheless,
    check out the library here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: API 是你开始扩展任何软件功能的入口。幸运的是，Zabbix 提供了一个功能强大的 API，我们可以轻松地利用它来扩展功能。Zabbix 还为 Python
    发布了 `zabbix-utils`，使得构建脚本变得更加容易。虽然这是一个很棒的附加功能，但由于并非每个环境都允许使用它，而且我们希望尽量减少依赖项，所以在本次测试中我们不会使用它。尽管如此，您可以在这里查看该库：
- en: '[https://github.com/zabbix/python-zabbix-utils](https://github.com/zabbix/python-zabbix-utils)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/zabbix/python-zabbix-utils](https://github.com/zabbix/python-zabbix-utils)'
- en: In this recipe, we’ll explore the use of the Zabbix API to do some tasks, creating
    a good basis to start working with the Zabbix API in your actual production environments.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将探索如何使用 Zabbix API 来执行一些任务，为在实际生产环境中使用 Zabbix API 打下良好的基础。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to need a Zabbix server with some hosts. I’ll be using our `lar-book-centos`
    host from the previous chapters, but feel free to use any Zabbix server. I will
    also use another Linux host to do the API calls from, but this can be done from
    any Linux host.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一个包含一些主机的 Zabbix 服务器。我将使用前几章中的 `lar-book-centos` 主机，但您可以自由使用任何 Zabbix 服务器。我还将使用另一台
    Linux 主机来发起 API 调用，但这可以在任何 Linux 主机上完成。
- en: We will need to install Python 3 on the Linux host, though, as we’ll be using
    this to create our API calls.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 Linux 主机上安装 Python 3，因为我们将使用它来创建 API 调用。
- en: Also, make sure you have an API user with an API token. It is recommended to
    use the one we created in the first recipe.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，确保你有一个 API 用户和 API 令牌。建议使用我们在第一章创建的令牌。
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'First, on our Linux CLI, let’s move to a new directory:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在我们的 Linux CLI 中，让我们切换到一个新目录：
- en: '[PRE0]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Install Python 3 on the host with the following command.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在主机上安装 Python 3。
- en: 'For RHEL-based systems, use this command:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于 RHEL 的系统，请使用以下命令：
- en: '[PRE1]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Python **pip** should’ve been installed with this package by default as well.
    If not, issue the following command.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python **pip** 应该已经随着该软件包默认安装。如果没有，请执行以下命令。
- en: 'For RHEL-based systems, use this command:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于 RHEL 的系统，请使用以下命令：
- en: '[PRE2]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For Ubuntu systems, use this command:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Ubuntu 系统，请使用以下命令：
- en: '[PRE3]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: It is possible to have an older version of Python(3) shipped with your Linux
    distribution. If you run into any errors with the scripts later in the chapter,
    make sure to check for any error messages indicating that your Python version
    might not support certain functionality.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 Linux 发行版可能附带较旧版本的 Python(3)。如果在本章后续脚本中遇到任何错误，请确保检查错误信息，确认您的 Python 版本是否支持某些功能。
- en: 'Now. let’s install our dependencies using Python **pip**. We’ll need these
    dependencies as they’ll be used in the script:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Python **pip** 安装所需的依赖项。我们将需要这些依赖项，因为它们将在脚本中使用：
- en: '[PRE4]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Download the start of our script from the Packt GitHub repo of this book by
    issuing the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本书的 Packt GitHub 仓库下载我们脚本的开头，通过执行以下命令：
- en: '[PRE5]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you can’t use **wget** from your host, you can download the script at the
    following URL: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/api_test.py](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/api_test.py).'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你无法从主机上使用 **wget**，可以通过以下网址下载脚本：[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/api_test.py](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/api_test.py)。
- en: 'Next up, we are going to edit our newly downloaded script by executing the
    following command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将通过执行以下命令来编辑我们新下载的脚本：
- en: '[PRE6]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'First, let’s change the IP address, **10.16.16.152**, in the **url** variable
    to the IP or DNS of your Zabbix server. Then, make sure to edit the **api_token**
    variable by replacing **PUT_YOUR_TOKEN_HERE** with the API token we generated
    in the first recipe of this chapter:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们将 **url** 变量中的 IP 地址 **10.16.16.152** 更改为你 Zabbix 服务器的 IP 或 DNS。然后，确保通过将
    **PUT_YOUR_TOKEN_HERE** 替换为我们在本章第一部分生成的 API 令牌，来编辑 **api_token** 变量：
- en: '[PRE7]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will also add some lines of code to our script to retrieve our host ID,
    hostname, and the interfaces of all our Zabbix hosts. Make sure to add your new
    code between the comments shown in the following screenshot:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还会在脚本中添加一些行代码，以便检索我们的主机 ID、主机名和所有 Zabbix 主机的接口。确保在以下截图中显示的注释之间添加新的代码：
- en: "![Figure 10.9 – Comments showing where to put c\uFEFFode](img/B19803_10_09.jpg)"
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9 – 注释显示代码放置位置](img/B19803_10_09.jpg)'
- en: Figure 10.9 – Comments showing where to put code
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – 注释显示代码放置位置
- en: 'Now, add the following lines of code:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加以下几行代码：
- en: '[PRE8]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we’ll also add lines to write the requested information to a file so
    we can see what happens after execution:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们还会添加几行代码，将请求的信息写入文件，以便我们查看执行后发生了什么：
- en: '[PRE9]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should be able to execute this now by executing the following:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你应该能够通过执行以下命令来运行它：
- en: '[PRE10]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This should run but it won’t give you any output. If this doesn’t work, make
    sure to retrace your steps.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个应该能运行，但不会给你任何输出。如果这不起作用，请确保重新检查你的步骤。
- en: 'Let’s check out the file to see what happened by executing the following:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查一下文件，看看通过执行以下命令发生了什么：
- en: '[PRE11]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the preceding command should look something like this:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述命令的输出应该像这样：
- en: '![Figure 10.10 – The cat command with our results showing in the file](img/B19803_10_10.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10 – 使用 cat 命令，显示我们结果的文件](img/B19803_10_10.jpg)'
- en: Figure 10.10 – The cat command with our results showing in the file
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – 使用 cat 命令，显示我们结果的文件
- en: We’ve now written a short script in Python to use the Zabbix API.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经编写了一个简短的 Python 脚本，用来使用 Zabbix API。
- en: How it works…
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Coding with the Zabbix API can be done with Python, but it’s definitely not
    our only option. We can use a wide variety of coding languages, including Perl,
    Go, C#, and Java.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Zabbix API 进行编程可以通过 Python 实现，但这绝对不是我们唯一的选择。我们可以使用多种编程语言，包括 Perl、Go、C# 和
    Java。
- en: 'In our example, though, we’ve used Python, so let’s see what we do here. If
    we look at the script, we have two main functions:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的示例中，我们使用的是 Python，所以让我们看看我们在这里做了什么。如果我们查看脚本，我们有两个主要功能：
- en: '**get_hosts**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**get_hosts**'
- en: '**generate_host_file**'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**generate_host_file**'
- en: 'First, we filled in our `api_token` and `url` variables, which are used to
    authenticate against the Zabbix API. We then used these to call on the `get_hosts`
    function to retrieve information from the Zabbix API:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们填写了 `api_token` 和 `url` 变量，这些变量用于通过 Zabbix API 进行身份验证。然后我们使用这些变量调用 `get_hosts`
    函数，从 Zabbix API 获取信息：
- en: '![Figure 10.11 – Python function Zabbix API payload](img/B19803_10_11.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11 – Python 函数 Zabbix API 负载](img/B19803_10_11.jpg)'
- en: Figure 10.11 – Python function Zabbix API payload
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – Python 函数 Zabbix API 负载
- en: Looking at the code, we used a JSON payload to request information such as `host`
    for the hostname, `hostid` for the host ID, and `ip` for the interface’s IP address.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 查看代码时，我们使用了 JSON 负载来请求信息，如 `host` 获取主机名、`hostid` 获取主机 ID、`ip` 获取接口的 IP 地址。
- en: Now, if we look at our last function, `generate_host_file`, we can see that
    we write the host with an interface IP to the `/home/results` file. This way,
    we have a solid script for writing host information to a file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们查看最后一个函数`generate_host_file`，我们可以看到，我们将带有接口IP的主机信息写入`/home/results`文件。这样，我们就有了一个可靠的脚本，可以将主机信息写入文件。
- en: 'If you’re not familiar with Python or coding in general, working with the Zabbix
    API might be a big step to take. Let’s take a look at how the API actually works:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉Python或编程，一开始使用Zabbix API可能是一个大挑战。让我们来看看API实际是如何工作的：
- en: '![Figure 10.12 – Python script Zabbix API functionality diagram](img/B19803_10_12.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.12 – Python脚本 Zabbix API功能图](img/B19803_10_12.jpg)'
- en: Figure 10.12 – Python script Zabbix API functionality diagram
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12 – Python脚本 Zabbix API功能图
- en: In *step 1*, we make an API call, using our target URL and API token as specified
    in our variables for authentication. Next, in *step 2*, we receive the data as
    requested in our Python function from Zabbix to further use in our Python script.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们发起一个API调用，使用我们目标URL和API令牌（如变量中所指定）进行身份验证。接下来，在*步骤2*中，我们从Zabbix接收所请求的数据，并在我们的Python脚本中进一步使用这些数据。
- en: '*Step 3* is our data processing step. We can do anything we want with the data
    received from the Zabbix API, but in our case, we format the data and write it
    to a file. That’s how we use the Zabbix API for extending functionality. This
    is the step where our file gets filled with hostnames and IP information.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤3*是我们的数据处理步骤。我们可以对从Zabbix API接收到的数据做任何我们想做的事情，但在我们的案例中，我们将数据格式化并写入文件。这就是我们如何使用Zabbix
    API扩展功能的方式。正是在这一阶段，我们的文件被填充了主机名和IP信息。'
- en: See also
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: If you are interested in learning more about the Zabbix API and its available
    functionality, check out the Zabbix documentation at [https://www.zabbix.com/documentation/current/en/manual/api](https://www.zabbix.com/documentation/current/en/manual/api).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Zabbix API及其可用功能感兴趣，可以查看Zabbix文档：[https://www.zabbix.com/documentation/current/en/manual/api](https://www.zabbix.com/documentation/current/en/manual/api)。
- en: Building a jumphost using the Zabbix API and Python
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zabbix API和Python构建跳板主机
- en: A lot of organizations have a jumphost (sometimes referred to as a bastion host)
    to access servers, switches, and their other equipment from a host. A jumphost
    generally has all the firewall rules needed to access everything important. Now,
    if we keep our monitoring up to date, we should have every single host in there
    as well.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 很多组织都有一个跳板主机（有时也称为堡垒主机），用来通过这台主机访问服务器、交换机和其他设备。跳板主机通常具有访问所有重要设备所需的防火墙规则。现在，如果我们保持监控系统的最新状态，那么我们也应该将每一台主机添加到监控系统中。
- en: My friend, ex-colleague, and fellow Zabbix geek, *Yadvir Singh*, had the amazing
    idea to create a Python script to export all Zabbix hosts with their IPs to the
    `/etc/hosts` file on another Linux host. Let’s see how we can build a jumphost
    just like his.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我的朋友、前同事以及Zabbix爱好者*Yadvir Singh*，有一个很棒的想法，创建一个Python脚本，将所有Zabbix主机及其IP导出到另一台Linux主机上的`/etc/hosts`文件中。让我们看看如何构建一个类似的跳板主机。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to need a new host for this recipe with Linux installed and ready.
    We’ll call this host `lar-book-jump`. We will also need our Zabbix server, for
    which I’ll use `lar-book-centos`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一台安装并准备好的Linux主机来进行这个实验。我们将这台主机命名为`lar-book-jump`。此外，我们还需要Zabbix服务器，我将使用`lar-book-centos`。
- en: 'Also, it is important to navigate to *Yadvir’s* GitHub account, drop him a
    follow, and star his repository if you think this is a cool script: [https://github.com/cheatas/zabbix_scripts](https://github.com/cheatas/zabbix_scripts).'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，重要的是要访问*Yadvir*的GitHub账户，关注他并给他的仓库加星，如果你认为这是一个很酷的脚本：[https://github.com/cheatas/zabbix_scripts](https://github.com/cheatas/zabbix_scripts)。
- en: Important note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Setting up this script will override your **/etc/hosts** file every time the
    script is executed. Only use this script when you understand what it’s doing,
    make sure you use an empty host for this lab, and check the default **/****etc/hosts**
    settings.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 设置此脚本将覆盖你**/etc/hosts**文件的内容，每次脚本执行时都会如此。仅在你理解脚本功能的前提下使用它，确保你使用一个空的主机用于此实验，并检查默认的**/etc/hosts**设置。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: If you haven’t already created an API user with an API token, make sure to check
    out the first recipe of this chapter first.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有创建API用户和API令牌，请确保首先查看本章的第一个配方。
- en: Install Python 3 on the host CLI with the following command.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在主机CLI上安装Python 3。
- en: 'For RHEL-based systems, use this command:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于RHEL的系统，使用以下命令：
- en: '[PRE12]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Python **pip** should’ve been installed with this package by default as well.
    If not, issue the following command
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python的**pip**应该已经默认与此包一起安装。如果没有，请执行以下命令：
- en: 'For RHEL-based systems, use this command:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于RHEL的系统，使用以下命令：
- en: '[PRE13]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For Ubuntu systems, use this command:'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Ubuntu系统，使用以下命令：
- en: '[PRE14]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let’s install our dependencies using Python **pip**. We’ll need these
    dependencies as they’ll be used in the script:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用Python的**pip**安装依赖项。我们将需要这些依赖项，因为它们将在脚本中使用：
- en: '[PRE15]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'First things first, log in to our new Linux host, **lar-book-jump**, and download
    Yadvir’s script to your Linux host with the following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，登录到我们的新Linux主机**lar-book-jump**，并使用以下命令将Yadvir的脚本下载到Linux主机上：
- en: '[PRE16]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you can’t use **wget** from your host, you can download the script at the
    following URL: [https://github.com/cheatas/zabbix_scripts/blob/main/host_pull_zabbix.py](https://github.com/cheatas/zabbix_scripts/blob/main/host_pull_zabbix.py).'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你无法从主机使用**wget**，可以通过以下网址下载脚本：[https://github.com/cheatas/zabbix_scripts/blob/main/host_pull_zabbix.py](https://github.com/cheatas/zabbix_scripts/blob/main/host_pull_zabbix.py)。
- en: As a backup, we also provide this script in the Packt repository. You may download
    this version at [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/host_pull_zabbix.py](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/host_pull_zabbix.py).
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为备份，我们还在Packt仓库中提供了此脚本。你可以通过以下网址下载此版本：[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/host_pull_zabbix.py](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/host_pull_zabbix.py)。
- en: 'Now, let’s edit the script by executing the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过执行以下命令来编辑脚本：
- en: '[PRE17]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'First, let’s edit the **zabbix_url** variable by replacing [https://myzabbix.com/api_jsonrpc.php](https://myzabbix.com/api_jsonrpc.php)
    with the IP address or DNS name of our Zabbix frontend:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们通过替换[https://myzabbix.com/api_jsonrpc.php](https://myzabbix.com/api_jsonrpc.php)为我们Zabbix前端的IP地址或DNS名称，来编辑**zabbix_url**变量：
- en: '[PRE18]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We do not need to fill out our username and password as that was only required
    on older Zabbix versions. Instead, we will need an API token, as generated in
    the first recipe in this chapter. Fill in the **api_token** variable in the script
    as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不需要填写用户名和密码，因为这仅在旧版本的Zabbix中需要。相反，我们将需要一个API令牌，正如在本章的第一个食谱中生成的那样。按照以下方式在脚本中填写**api_token**变量：
- en: '[PRE19]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can find this variable at the bottom of the file.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在文件的底部找到此变量。
- en: 'We also need to uncomment the following lines:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要取消注释以下几行：
- en: '[PRE20]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The end of the script should now look like this:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本的结尾现在应该如下所示：
- en: '![Figure 10.13 – End of the script after receiving the API token and with commenting
    removed](img/B19803_10_13.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图10.13 – 在接收到API令牌并取消注释后，脚本的结尾](img/B19803_10_13.jpg)'
- en: Figure 10.13 – End of the script after receiving the API token and with commenting
    removed
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13 – 在接收到API令牌并取消注释后，脚本的结尾
- en: Last but not least, make sure to comment and uncomment the right lines for your
    Linux distro. It will look like the following figures.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，确保为你的Linux发行版注释和取消注释正确的行。它将如下所示：
- en: 'For Ubuntu, it will look like this:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Ubuntu，命令应该如下所示：
- en: '![Figure 10.14 – Print to file for Ubuntu systems](img/B19803_10_14.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图10.14 – Ubuntu系统的文件打印](img/B19803_10_14.jpg)'
- en: Figure 10.14 – Print to file for Ubuntu systems
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14 – Ubuntu系统的文件打印
- en: 'For RHEL-based systems, it will look like this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于RHEL的系统，命令应该如下所示：
- en: "![Figure 10.15 – Print to fi\uFEFFle f\uFEFFor RHE\uFEFFL-base\uFEFFd systems](img/B19803_10_15.jpg)"
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图10.15 – 基于RHEL的系统的文件打印](img/B19803_10_15.jpg)'
- en: Figure 10.15 – Print to file for RHEL-based systems
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15 – 基于RHEL的系统的文件打印
- en: 'That’s all there is to do, so we can now execute the script again and start
    using it. Let’s execute the script as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是要做的所有事情，所以现在我们可以再次执行脚本并开始使用它。让我们按照以下方式执行脚本：
- en: '[PRE21]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Test whether it worked by looking at the host file with the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用以下命令查看主机文件，测试它是否有效：
- en: '[PRE22]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This should give us an output like that shown in the following screenshot:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会给我们一个像以下截图所示的输出：
- en: '![Figure 10.16 – /etc/hosts filled with our script information](img/B19803_10_16.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图10.16 – /etc/hosts文件已填充脚本信息](img/B19803_10_16.jpg)'
- en: Figure 10.16 – /etc/hosts filled with our script information
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16 – /etc/hosts文件已填充脚本信息
- en: 'We can now try to SSH directly to the name of a host, instead of having to
    use the IP, by issuing the following command:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以直接通过主机名尝试SSH连接，而不需要使用IP地址，执行以下命令：
- en: '[PRE23]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can also use it to find hosts from the file with the following command:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以使用以下命令从文件中查找主机：
- en: '[PRE24]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let’s do one more thing. We want this script to be as up to date as possible.
    So, let’s add a cronjob. Issue the following command to add a cronjob:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再做一件事。我们希望这个脚本尽可能保持最新。所以，让我们添加一个定时任务。执行以下命令来添加一个定时任务：
- en: '[PRE25]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then add the following line, making sure to fill in the right script location
    for your setup:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加以下行，确保为你的设置填写正确的脚本位置：
- en: '[PRE26]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: That’s it – we will now have an up-to-date `/etc/hosts` file all the time with
    our new Python script and Zabbix.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样——现在我们通过新的 Python 脚本和 Zabbix，`/etc/hosts` 文件将始终保持最新。
- en: How it works…
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: If your organization uses Zabbix as the main monitoring system, you now have
    the skills and knowledge to create an organized, reliably up-to-date, and easy-to-use
    jumphost.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的组织将 Zabbix 作为主要监控系统，那么你现在已经具备了创建一个组织良好、始终可靠更新且易于使用的跳板主机的技能和知识。
- en: Jumphosts are super useful when set up correctly, but it’s important to keep
    them clean so that they are easy to update.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当跳板主机正确设置时，它们非常有用，但重要的是要保持它们的清洁，这样它们才容易更新。
- en: By using this script, we only add Python 3 and a simple script as a requirement
    to the server, but the end result is a jumphost that knows about all hosts in
    the environment.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这个脚本，我们只需在服务器上添加 Python 3 和一个简单的脚本作为要求，但最终的结果是一个能够了解所有环境中主机的跳板主机。
- en: 'If you’ve followed along with the previous *Using the Zabbix API for extending
    functionality* recipe, then you might notice that it works in roughly the same
    way. We can see in the following diagram how we utilize the script:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经跟随了之前的 *使用 Zabbix API 扩展功能* 的教程，那么你可能会注意到它的工作方式大致相同。我们可以通过下图来看我们如何利用这个脚本：
- en: '![Figure 10.17 – Jumphost using script functionality diagram](img/B19803_10_17.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.17 – 使用脚本功能的跳板主机图](img/B19803_10_17.jpg)'
- en: Figure 10.17 – Jumphost using script functionality diagram
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.17 – 使用脚本功能的跳板主机图
- en: After editing, our script will start at *step 1* of the diagram to request data
    with an API call, where we use the API token to authenticate. We receive this
    data in *step 2*. In the script, we add our default values and then write all
    the hostnames and IP addresses to the `/``etc/hosts` file.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑后，我们的脚本将从图中的 *第 1 步* 开始，通过 API 调用请求数据，我们使用 API 令牌进行身份验证。在 *第 2 步* 中，我们接收这些数据。在脚本中，我们添加默认值，然后将所有主机名和
    IP 地址写入 `/etc/hosts` 文件。
- en: Now, because a Linux host uses the `/etc/hosts` file for hostname-to-IP translation,
    we can use the real names of servers in Zabbix to SSH to the hosts. This makes
    it easier for us to use the jumphost, as we can use the same name as the hostname
    we know from the Zabbix frontend.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，因为 Linux 主机使用 `/etc/hosts` 文件进行主机名到 IP 地址的转换，我们可以在 Zabbix 中使用服务器的真实名称通过 SSH
    连接到主机。这使得我们使用跳板主机变得更加方便，因为我们可以使用与 Zabbix 前端中已知的主机名相同的名称。
- en: See also
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Yadvir* will keep updating the script after writing this recipe (we’ve been
    using version 1.0 so far). Make sure to follow his GitHub account and star his
    repository to get the updates. Also, if you have some cool ideas for additions,
    you can always open a pull request.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '*Yadvir* 会在写完这个脚本后继续更新它（到目前为止，我们一直在使用 1.0 版本）。确保关注他的 GitHub 账号并为他的仓库加星，以获取更新。如果你有一些很棒的功能建议，随时可以提交拉取请求。'
- en: 'The Zabbix community is all about sharing cool ideas and useful scripts like
    this one. As *Yadvir* has shown, we can get very valuable stuff from each other.
    Be like *Yadvir* – use the Zabbix community GitHub and support other Zabbix users
    by adding to their GitHub repositories. You can find the Zabbix community GitHub
    using the link here:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 社区鼓励分享像这样的酷点子和有用的脚本。正如 *Yadvir* 所展示的那样，我们可以互相分享非常有价值的资源。像 *Yadvir* 一样——使用
    Zabbix 社区 GitHub，并通过向其他 Zabbix 用户的 GitHub 仓库贡献来支持他们。你可以通过以下链接访问 Zabbix 社区 GitHub：
- en: '[https://github.com/zabbix/community-templates](https://github.com/zabbix/community-templates)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/zabbix/community-templates](https://github.com/zabbix/community-templates)'
- en: Enabling and disabling a host from Zabbix maps
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Zabbix 地图启用和禁用主机
- en: We’ve noticed that it is not possible to enable and disable hosts as a Zabbix
    user. For some companies, this may be a requirement, so we’ve created an extension
    for it. In this recipe, I will show you just how to work with this Python script
    and execute it from a map.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到，作为 Zabbix 用户无法启用或禁用主机。对于一些公司来说，这可能是一个需求，所以我们为此创建了一个扩展。在本教程中，我将向你展示如何使用这个
    Python 脚本并从地图上执行它。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, all we are going to need is our Zabbix server, some knowledge
    of Python, and some knowledge of the Zabbix API.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们所需要的只是 Zabbix 服务器、一些 Python 知识以及 Zabbix API 的一些知识。
- en: How to do it…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'First, let’s log in to our Zabbix server CLI and create a new directory:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们登录到 Zabbix 服务器的 CLI 并创建一个新目录：
- en: '[PRE27]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Change to the new directory:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到新目录：
- en: '[PRE28]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, download the public script from the *Opensource ICT* *Solutions* GitHub:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从*开源 ICT* *解决方案*的 GitHub 下载公共脚本：
- en: '[PRE29]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you can’t use **wget** from your host, you can check out the script here:
    [https://github.com/OpensourceICTSolutions/zabbix-toggle-hosts-from-frontend/releases/tag/v2.0](https://github.com/OpensourceICTSolutions/zabbix-toggle-hosts-from-frontend/releases/tag/v2.0).'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你无法从主机使用**wget**，可以在这里查看脚本：[https://github.com/OpensourceICTSolutions/zabbix-toggle-hosts-from-frontend/releases/tag/v2.0](https://github.com/OpensourceICTSolutions/zabbix-toggle-hosts-from-frontend/releases/tag/v2.0)。
- en: 'Unzip the file with the following command:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令解压文件：
- en: '[PRE30]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Remove the **tar** file using the following command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令删除**tar**文件：
- en: '[PRE31]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Move the script over from the newly created folder with the following command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将脚本从新创建的文件夹移动过来：
- en: '[PRE32]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We are going to need Python to use this script, so let’s install it as follows.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将需要 Python 来使用这个脚本，因此让我们按如下方式安装它。
- en: 'For RHEL-based systems, use this command:'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于 RHEL 的系统，使用以下命令：
- en: '[PRE33]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For Ubuntu systems, use this command:'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Ubuntu 系统，使用以下命令：
- en: '[PRE34]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We will also need the **requests** module from **pip**. Install it as follows:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要从**pip**安装**requests**模块。按如下方式安装：
- en: '[PRE35]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, let’s edit the script with the following command:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令编辑脚本：
- en: '[PRE36]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In this file, we will change the **url** and **token** variables. Change the
    **url** variable to match your own Zabbix frontend IP or DNS name. Then, replace
    **PUT_YOUR_TOKEN_HERE** with your Zabbix API token. I will fill in the following,
    but be sure to enter your own information:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将修改**url**和**token**变量。将**url**变量更改为你的 Zabbix 前端 IP 或 DNS 名称。然后，将**PUT_YOUR_TOKEN_HERE**替换为你的
    Zabbix API token。我将填写以下内容，但请确保输入你自己的信息：
- en: '[PRE37]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now, we can move on to our Zabbix frontend to add a frontend script. Navigate
    to **Alerts** | **Scripts**, then click the blue **Create script** button at the
    top right.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以继续到 Zabbix 前端，添加前端脚本。导航到**警报** | **脚本**，然后点击右上角的蓝色**创建脚本**按钮。
- en: 'Add the following script:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下脚本：
- en: "![Figure 10.18 – Zabbix Alerts\uFEFF | \uFEFFScripts, the Create script page,\
    \ Enable](img/B19803_10_18.jpg)"
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.18 – Zabbix 警报 | 脚本，创建脚本页面，启用](img/B19803_10_18.jpg)'
- en: Figure 10.18 – Zabbix Alerts | Scripts, the Create script page, Enable
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.18 – Zabbix 警报 | 脚本，创建脚本页面，启用
- en: Click on the blue **Add** button and then, on the next page, click the blue
    **Create script** button in the top-right corner again.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**添加**按钮，然后，在下一页中，再次点击右上角的蓝色**创建脚本**按钮。
- en: 'Now, add the second and final script as follows:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加第二个也是最后一个脚本，如下所示：
- en: "![Figure 10.19 – Zabbix Alerts\uFEFF | Scrip\uFEFFts, the Create script page,\
    \ Disable](img/B19803_10_19.jpg)"
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.19 – Zabbix 警报 | 脚本，创建脚本页面，禁用](img/B19803_10_19.jpg)'
- en: Figure 10.19 – Zabbix Alerts | Scripts, the Create script page, Disable
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.19 – Zabbix 警报 | 脚本，创建脚本页面，禁用
- en: Now, navigate to **Monitoring** | **Maps**, and you should see a map called
    **Local network** here, as it’s included with Zabbix by default. Click this map
    (or any other map with hosts in it).
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到**监控** | **地图**，你应该能看到一个名为**本地网络**的地图，因为它是 Zabbix 默认包含的。点击这个地图（或任何包含主机的其他地图）。
- en: 'Now, if you click on a host on the map, you will see a drop-down menu like
    this:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你在地图上点击某个主机，你将看到一个下拉菜单，像这样：
- en: "![Figure 10.20 – Zabbix Monitoring | M\uFEFFaps, \uFEFFthe Local network map\
    \ drop-down menu](img/B19803_10_20.jpg)"
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.20 – Zabbix 监控 | 地图，本地网络地图下拉菜单](img/B19803_10_20.jpg)'
- en: Figure 10.20 – Zabbix Monitoring | Maps, the Local network map drop-down menu
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.20 – Zabbix 监控 | 地图，本地网络地图下拉菜单
- en: 'If we click on **Disable** here, we will get a pop-up message as follows:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们点击这里的**禁用**，我们会得到一个弹出消息，内容如下：
- en: '![Figure 10.21 – Zabbix script confirmation window](img/B19803_10_21.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.21 – Zabbix 脚本确认窗口](img/B19803_10_21.jpg)'
- en: Figure 10.21 – Zabbix script confirmation window
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.21 – Zabbix 脚本确认窗口
- en: Click on the blue **Execute** button and this host will be disabled. Navigate
    to **Monitoring** | **Hosts** to confirm whether this worked. You should see that
    the host is set to **Disabled**.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**执行**按钮，这个主机将被禁用。然后，导航到**监控** | **主机**以确认是否成功。你应该能看到主机被设置为**禁用**。
- en: Back at **Monitoring** | **Maps**, you can enable the host again with the same
    drop-down menu. This time, select **Enable**.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回**监控** | **地图**，你可以通过相同的下拉菜单再次启用主机。这次选择**启用**。
- en: How it works…
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The script we just used was built in Python utilizing the Zabbix API. With this
    script, we can now enable and disable hosts from the Zabbix frontend as a Zabbix
    user.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用的脚本是用Python构建的，利用Zabbix API。通过这个脚本，我们现在可以作为Zabbix用户从Zabbix前端启用和禁用主机。
- en: 'This works because the **Monitoring** | **Maps** option is available even to
    Zabbix users. This script uses the API user for execution, though. Since our Zabbix
    API user has more user permissions, it can execute the script that gets host information
    from a Zabbix database and creates a maintenance period using the information.
    As we can see in the following diagram, our script follows roughly the same steps
    as the other Zabbix API utilities:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以这样有效，是因为**监控** | **地图**选项即使对于Zabbix用户也可用。不过，这个脚本是使用API用户来执行的。由于我们的Zabbix
    API用户拥有更多的用户权限，它可以执行该脚本，从Zabbix数据库中获取主机信息，并使用这些信息创建维护期。正如下图所示，我们的脚本大致遵循与其他Zabbix
    API工具相同的步骤：
- en: '![Figure 10.22 – Python script maintenance.py execution diagram](img/B19803_10_22.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.22 – Python 脚本 maintenance.py 执行图](img/B19803_10_22.jpg)'
- en: Figure 10.22 – Python script maintenance.py execution diagram
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.22 – Python 脚本 maintenance.py 执行图
- en: Because the Zabbix API is very flexible, we can pull data and write data to
    do almost anything we could do from the frontend.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Zabbix API非常灵活，我们可以拉取数据并写入数据，几乎可以做任何我们在前端做的事情。
- en: We can now use this cool function from anywhere in the Zabbix frontend where
    we see a dotted line with the hostname, even from **Monitoring** | **Hosts**.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在Zabbix前端的任何地方使用这个很酷的功能，只要我们看到带有主机名的虚线，即使是从**监控** | **主机**中也可以。
- en: There’s more…
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'In Zabbix 7, it is possible to provide input from the frontend onto your scripts.
    If you’d like to test this, we can edit the script slightly:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在Zabbix 7中，可以通过前端向脚本提供输入。如果你想测试这个功能，我们可以稍微编辑一下脚本：
- en: Go to **Alerts** | **Scripts** and edit the **Host/Enable** and **Host/Disable**
    scripts.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**警报** | **脚本**并编辑**主机/启用**和**主机/禁用**脚本。
- en: In the **Commands** field, replace **{HOST.HOST}** with **{MANUALINPUT}** to
    make this script accept dynamic input.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**命令**字段中，将**{HOST.HOST}**替换为**{MANUALINPUT}**，使得此脚本接受动态输入。
- en: 'Then open up **Advanced configuration** and fill in the **Input prompt**, **Default
    input string**, and **Input validation rule** fields. It should now look like
    the following figure:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后打开**高级配置**，填写**输入提示**、**默认输入字符串**和**输入验证规则**字段。现在应该看起来像下图所示：
- en: '![](img/B19803_10_23.jpg)![](img/B19803_10_24.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19803_10_23.jpg)![](img/B19803_10_24.jpg)'
- en: Figure 10.23 – Manual script input
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.23 – 手动脚本输入
- en: Now, when we execute the script, it will ask us for input. Fill in a hostname
    here and the host that we wrote in the field will be enabled or disabled.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当我们执行脚本时，它会要求我们输入。在此处填写主机名，输入的主机将在该字段中启用或禁用。
- en: '![Figure 10.24 – Manual script input execution](img/B19803_10_25.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.24 – 手动脚本输入执行](img/B19803_10_25.jpg)'
- en: Figure 10.24 – Manual script input execution
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.24 – 手动脚本输入执行
- en: As you can see, with this new script input method, it is now possible to make
    the whole execution process a lot more flexible. We can execute scripts like this
    in a non-static way, allowing us to provide user input data before execution.
    Neat!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用这种新的脚本输入方式，现在可以使整个执行过程更加灵活。我们可以像这样以非静态方式执行脚本，从而在执行之前提供用户输入数据。真棒！
- en: See also
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Brian van Baekel* created this script for a customer at *Opensource ICT Solutions*
    and then open sourced it. Because Zabbix has a very cool community that continues
    to extend the possibilities of Zabbix even further, we too upload some of our
    scripts. Sharing is caring, so check out the other open source scripts at https://github.com/OpensourceICTSolutions.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '*Brian van Baekel* 为*Opensource ICT Solutions*的客户创建了这个脚本，并将其开源。由于Zabbix拥有一个非常酷的社区，继续扩展Zabbix的可能性，我们也上传了一些自己的脚本。分享即关怀，所以请访问
    https://github.com/OpensourceICTSolutions 查看其他开源脚本。'
