- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extending Zabbix Functionality with Custom Scripts and the Zabbix API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zabbix offers a lot of functionality out of the box. But where Zabbix really
    shines is customization, not only through the default frontend but especially
    with scripts and the Zabbix API.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will go over the basics of using the Zabbix API. We will
    then see how a Python script can utilize the API to build something cool, such
    as a jumphost. After that, we’ll use some scripts written by *Brian van Baekel*
    to enable and disable hosts with limited permissions from a Zabbix map.
  prefs: []
  type: TYPE_NORMAL
- en: After following these recipes, you’ll be more than ready to tackle the Zabbix
    API and you’ll know how to use scripts to extend Zabbix functionality. This chapter
    will expand your possibilities with Zabbix to almost endless proportions and you’ll
    be ready to become a professional Zabbix user yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and managing API tokens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Zabbix API for extending functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a jumphost using the Zabbix API and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling and disabling a host from Zabbix maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to need a Zabbix server as well as some new Linux hosts. We will
    also need to have general knowledge of scripting and programming. We are going
    to use Python to extend some functionality of Zabbix, which we’ll provide scripts
    for.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code required for the chapter can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10)'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to keep all of this ready and you’ll be sure to nail these recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and managing API tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start off our chapter by doing some configuration for working with APIs
    in Zabbix. If you’ve worked with the Zabbix API before, you might know it can
    be quite a hassle to use API calls to authenticate and get an API token for using
    it in your scripts. This is no longer the case, as we can generate API tokens
    using the Zabbix frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, all we’ll need is the Zabbix setup running. We’ll be using
    the frontend to generate the API token. From here, we can use the API token in
    any of our integrations further on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let’s log in to the Zabbix frontend as a Super admin user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Users** | **User groups** and click the blue **Create user group**
    button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, we’ll create a new user group. Fill in the **Group name** field as **API
    Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the **Host Permissions** tab and give your API user group permission
    to every host by clicking the **Select** button and selecting every host group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Zabbix Users | User groups, creating user group host permissions,
    API Users](img/B19803_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Zabbix Users | User groups, creating user group host permissions,
    API Users
  prefs: []
  type: TYPE_NORMAL
- en: Move on to the **Template permissions** tab and do the same thing here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Zabbix Users | User groups, creating user group template permissions,
    API Users](img/B19803_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Zabbix Users | User groups, creating user group template permissions,
    API Users
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the blue **Select** button at the bottom of this popup and click on **Read-write**
    followed by the small dotted **Add** button. It should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Zabbix Users | User groups, user group permissions page, API
    Users](img/B19803_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Zabbix Users | User groups, user group permissions page, API Users
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Instead of creating the API user as Super admin, we can also limit the permissions
    by limiting the host and template group access on the **API Users** user group.
    This could be preferred in production environments, as you might want to limit
    API access. Use whatever fits your preference.
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button at the bottom of the page to add this new user
    group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s go to **Users** | **Users** and click the blue **Create user** button
    in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here we will create a new user called the **API** user. Create the user as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Zabbix Users | Users, user creation page, API user](img/B19803_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Zabbix Users | Users, user creation page, API user
  prefs: []
  type: TYPE_NORMAL
- en: Before adding the user, switch to the **Permissions** tab and add **Super**
    **admin role**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Zabbix Users | Users, user permissions page, API user](img/B19803_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Zabbix Users | Users, user permissions page, API user
  prefs: []
  type: TYPE_NORMAL
- en: We can now add the user by clicking the blue **Add** button at the bottom of
    the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next up, we need to create some API tokens for this user. Navigate to **Users**
    | **API tokens**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s click the blue **Create API token** button in the top-right corner and
    fill in the **User** field as **API** and the **Name** field as **API book key**.
    Set **Expires at** to somewhere far in the future or disable expiration entirely
    – whatever you think might be secure. It will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Administration | General | API token, API token creation page](img/B19803_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Administration | General | API token, API token creation page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the blue **Add** button at the bottom of the page to generate the new
    API token. This will bring us to the next page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Zabbix API user API token generated page](img/B19803_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Zabbix API user API token generated page
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to save the **Auth token** value to a secure location, such as a password
    vault. It will be important later in the labs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can click the **Close** button at the bottom of this page now. This will
    bring us back to the **API tokens** page where we can manage all of our created
    API tokens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.8 – Zabbix API user API tokens p\uFEFF\uFEFFage](img/B19803_10_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Zabbix API user API tokens page
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because Zabbix now comes with built-in API token management, it has become a
    lot easier to work with the Zabbix API. Using a dedicated API user, we can manage
    all of our tokens in a single location or we can set up private API tokens under
    our own user account.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we created a new API Users group. This is important because our
    API tokens are still part of a user account meaning they will respect that user
    its permissions. If we create an API user under any other user type than Super
    admin, we can restrict our API access using the **API** **Users** group.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you apply the role to the user and the permissions to the user
    group as you see fit in your environment. Also, make sure to set a reasonable
    expiration date for your API tokens so we can regenerate them from time to time.
  prefs: []
  type: TYPE_NORMAL
- en: There’s not much else to say about setting up and managing your API tokens,
    but let’s see how we can apply what we have learned in this recipe in the next
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Zabbix API for extending functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An API is your gateway to getting started with extending the functionality
    of any piece of software. Luckily, Zabbix offers a solid working API that we can
    use to extend our functionality with ease. Zabbix has also released `zabbix-utils`
    for Python, making building scripts a lot easier for everyone. It’s an amazing
    addition, but as it’s not allowed in every environment and we want to keep the
    dependencies to a minimum, we won’t utilize it in our test here. Nevertheless,
    check out the library here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/zabbix/python-zabbix-utils](https://github.com/zabbix/python-zabbix-utils)'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll explore the use of the Zabbix API to do some tasks, creating
    a good basis to start working with the Zabbix API in your actual production environments.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need a Zabbix server with some hosts. I’ll be using our `lar-book-centos`
    host from the previous chapters, but feel free to use any Zabbix server. I will
    also use another Linux host to do the API calls from, but this can be done from
    any Linux host.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to install Python 3 on the Linux host, though, as we’ll be using
    this to create our API calls.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure you have an API user with an API token. It is recommended to
    use the one we created in the first recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, on our Linux CLI, let’s move to a new directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install Python 3 on the host with the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Python **pip** should’ve been installed with this package by default as well.
    If not, issue the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to have an older version of Python(3) shipped with your Linux
    distribution. If you run into any errors with the scripts later in the chapter,
    make sure to check for any error messages indicating that your Python version
    might not support certain functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now. let’s install our dependencies using Python **pip**. We’ll need these
    dependencies as they’ll be used in the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the start of our script from the Packt GitHub repo of this book by
    issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you can’t use **wget** from your host, you can download the script at the
    following URL: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/api_test.py](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/api_test.py).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next up, we are going to edit our newly downloaded script by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, let’s change the IP address, **10.16.16.152**, in the **url** variable
    to the IP or DNS of your Zabbix server. Then, make sure to edit the **api_token**
    variable by replacing **PUT_YOUR_TOKEN_HERE** with the API token we generated
    in the first recipe of this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also add some lines of code to our script to retrieve our host ID,
    hostname, and the interfaces of all our Zabbix hosts. Make sure to add your new
    code between the comments shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.9 – Comments showing where to put c\uFEFFode](img/B19803_10_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Comments showing where to put code
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we’ll also add lines to write the requested information to a file so
    we can see what happens after execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should be able to execute this now by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should run but it won’t give you any output. If this doesn’t work, make
    sure to retrace your steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s check out the file to see what happened by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding command should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.10 – The cat command with our results showing in the file](img/B19803_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – The cat command with our results showing in the file
  prefs: []
  type: TYPE_NORMAL
- en: We’ve now written a short script in Python to use the Zabbix API.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Coding with the Zabbix API can be done with Python, but it’s definitely not
    our only option. We can use a wide variety of coding languages, including Perl,
    Go, C#, and Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, though, we’ve used Python, so let’s see what we do here. If
    we look at the script, we have two main functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**get_hosts**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**generate_host_file**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, we filled in our `api_token` and `url` variables, which are used to
    authenticate against the Zabbix API. We then used these to call on the `get_hosts`
    function to retrieve information from the Zabbix API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Python function Zabbix API payload](img/B19803_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – Python function Zabbix API payload
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the code, we used a JSON payload to request information such as `host`
    for the hostname, `hostid` for the host ID, and `ip` for the interface’s IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we look at our last function, `generate_host_file`, we can see that
    we write the host with an interface IP to the `/home/results` file. This way,
    we have a solid script for writing host information to a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re not familiar with Python or coding in general, working with the Zabbix
    API might be a big step to take. Let’s take a look at how the API actually works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Python script Zabbix API functionality diagram](img/B19803_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – Python script Zabbix API functionality diagram
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we make an API call, using our target URL and API token as specified
    in our variables for authentication. Next, in *step 2*, we receive the data as
    requested in our Python function from Zabbix to further use in our Python script.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 3* is our data processing step. We can do anything we want with the data
    received from the Zabbix API, but in our case, we format the data and write it
    to a file. That’s how we use the Zabbix API for extending functionality. This
    is the step where our file gets filled with hostnames and IP information.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are interested in learning more about the Zabbix API and its available
    functionality, check out the Zabbix documentation at [https://www.zabbix.com/documentation/current/en/manual/api](https://www.zabbix.com/documentation/current/en/manual/api).
  prefs: []
  type: TYPE_NORMAL
- en: Building a jumphost using the Zabbix API and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of organizations have a jumphost (sometimes referred to as a bastion host)
    to access servers, switches, and their other equipment from a host. A jumphost
    generally has all the firewall rules needed to access everything important. Now,
    if we keep our monitoring up to date, we should have every single host in there
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: My friend, ex-colleague, and fellow Zabbix geek, *Yadvir Singh*, had the amazing
    idea to create a Python script to export all Zabbix hosts with their IPs to the
    `/etc/hosts` file on another Linux host. Let’s see how we can build a jumphost
    just like his.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need a new host for this recipe with Linux installed and ready.
    We’ll call this host `lar-book-jump`. We will also need our Zabbix server, for
    which I’ll use `lar-book-centos`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, it is important to navigate to *Yadvir’s* GitHub account, drop him a
    follow, and star his repository if you think this is a cool script: [https://github.com/cheatas/zabbix_scripts](https://github.com/cheatas/zabbix_scripts).'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Setting up this script will override your **/etc/hosts** file every time the
    script is executed. Only use this script when you understand what it’s doing,
    make sure you use an empty host for this lab, and check the default **/****etc/hosts**
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you haven’t already created an API user with an API token, make sure to check
    out the first recipe of this chapter first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Python 3 on the host CLI with the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Python **pip** should’ve been installed with this package by default as well.
    If not, issue the following command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s install our dependencies using Python **pip**. We’ll need these
    dependencies as they’ll be used in the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First things first, log in to our new Linux host, **lar-book-jump**, and download
    Yadvir’s script to your Linux host with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you can’t use **wget** from your host, you can download the script at the
    following URL: [https://github.com/cheatas/zabbix_scripts/blob/main/host_pull_zabbix.py](https://github.com/cheatas/zabbix_scripts/blob/main/host_pull_zabbix.py).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a backup, we also provide this script in the Packt repository. You may download
    this version at [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/host_pull_zabbix.py](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter10/host_pull_zabbix.py).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let’s edit the script by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, let’s edit the **zabbix_url** variable by replacing [https://myzabbix.com/api_jsonrpc.php](https://myzabbix.com/api_jsonrpc.php)
    with the IP address or DNS name of our Zabbix frontend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We do not need to fill out our username and password as that was only required
    on older Zabbix versions. Instead, we will need an API token, as generated in
    the first recipe in this chapter. Fill in the **api_token** variable in the script
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can find this variable at the bottom of the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also need to uncomment the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The end of the script should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.13 – End of the script after receiving the API token and with commenting
    removed](img/B19803_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – End of the script after receiving the API token and with commenting
    removed
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, make sure to comment and uncomment the right lines for your
    Linux distro. It will look like the following figures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Ubuntu, it will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Print to file for Ubuntu systems](img/B19803_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – Print to file for Ubuntu systems
  prefs: []
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 10.15 – Print to fi\uFEFFle f\uFEFFor RHE\uFEFFL-base\uFEFFd systems](img/B19803_10_15.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – Print to file for RHEL-based systems
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s all there is to do, so we can now execute the script again and start
    using it. Let’s execute the script as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test whether it worked by looking at the host file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should give us an output like that shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.16 – /etc/hosts filled with our script information](img/B19803_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – /etc/hosts filled with our script information
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now try to SSH directly to the name of a host, instead of having to
    use the IP, by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also use it to find hosts from the file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s do one more thing. We want this script to be as up to date as possible.
    So, let’s add a cronjob. Issue the following command to add a cronjob:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add the following line, making sure to fill in the right script location
    for your setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That’s it – we will now have an up-to-date `/etc/hosts` file all the time with
    our new Python script and Zabbix.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your organization uses Zabbix as the main monitoring system, you now have
    the skills and knowledge to create an organized, reliably up-to-date, and easy-to-use
    jumphost.
  prefs: []
  type: TYPE_NORMAL
- en: Jumphosts are super useful when set up correctly, but it’s important to keep
    them clean so that they are easy to update.
  prefs: []
  type: TYPE_NORMAL
- en: By using this script, we only add Python 3 and a simple script as a requirement
    to the server, but the end result is a jumphost that knows about all hosts in
    the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve followed along with the previous *Using the Zabbix API for extending
    functionality* recipe, then you might notice that it works in roughly the same
    way. We can see in the following diagram how we utilize the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.17 – Jumphost using script functionality diagram](img/B19803_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.17 – Jumphost using script functionality diagram
  prefs: []
  type: TYPE_NORMAL
- en: After editing, our script will start at *step 1* of the diagram to request data
    with an API call, where we use the API token to authenticate. We receive this
    data in *step 2*. In the script, we add our default values and then write all
    the hostnames and IP addresses to the `/``etc/hosts` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, because a Linux host uses the `/etc/hosts` file for hostname-to-IP translation,
    we can use the real names of servers in Zabbix to SSH to the hosts. This makes
    it easier for us to use the jumphost, as we can use the same name as the hostname
    we know from the Zabbix frontend.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Yadvir* will keep updating the script after writing this recipe (we’ve been
    using version 1.0 so far). Make sure to follow his GitHub account and star his
    repository to get the updates. Also, if you have some cool ideas for additions,
    you can always open a pull request.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Zabbix community is all about sharing cool ideas and useful scripts like
    this one. As *Yadvir* has shown, we can get very valuable stuff from each other.
    Be like *Yadvir* – use the Zabbix community GitHub and support other Zabbix users
    by adding to their GitHub repositories. You can find the Zabbix community GitHub
    using the link here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/zabbix/community-templates](https://github.com/zabbix/community-templates)'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling and disabling a host from Zabbix maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve noticed that it is not possible to enable and disable hosts as a Zabbix
    user. For some companies, this may be a requirement, so we’ve created an extension
    for it. In this recipe, I will show you just how to work with this Python script
    and execute it from a map.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, all we are going to need is our Zabbix server, some knowledge
    of Python, and some knowledge of the Zabbix API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let’s log in to our Zabbix server CLI and create a new directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change to the new directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, download the public script from the *Opensource ICT* *Solutions* GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you can’t use **wget** from your host, you can check out the script here:
    [https://github.com/OpensourceICTSolutions/zabbix-toggle-hosts-from-frontend/releases/tag/v2.0](https://github.com/OpensourceICTSolutions/zabbix-toggle-hosts-from-frontend/releases/tag/v2.0).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unzip the file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the **tar** file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move the script over from the newly created folder with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are going to need Python to use this script, so let’s install it as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also need the **requests** module from **pip**. Install it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s edit the script with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this file, we will change the **url** and **token** variables. Change the
    **url** variable to match your own Zabbix frontend IP or DNS name. Then, replace
    **PUT_YOUR_TOKEN_HERE** with your Zabbix API token. I will fill in the following,
    but be sure to enter your own information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can move on to our Zabbix frontend to add a frontend script. Navigate
    to **Alerts** | **Scripts**, then click the blue **Create script** button at the
    top right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.18 – Zabbix Alerts\uFEFF | \uFEFFScripts, the Create script page,\
    \ Enable](img/B19803_10_18.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.18 – Zabbix Alerts | Scripts, the Create script page, Enable
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Add** button and then, on the next page, click the blue
    **Create script** button in the top-right corner again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, add the second and final script as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.19 – Zabbix Alerts\uFEFF | Scrip\uFEFFts, the Create script page,\
    \ Disable](img/B19803_10_19.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.19 – Zabbix Alerts | Scripts, the Create script page, Disable
  prefs: []
  type: TYPE_NORMAL
- en: Now, navigate to **Monitoring** | **Maps**, and you should see a map called
    **Local network** here, as it’s included with Zabbix by default. Click this map
    (or any other map with hosts in it).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, if you click on a host on the map, you will see a drop-down menu like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.20 – Zabbix Monitoring | M\uFEFFaps, \uFEFFthe Local network map\
    \ drop-down menu](img/B19803_10_20.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.20 – Zabbix Monitoring | Maps, the Local network map drop-down menu
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on **Disable** here, we will get a pop-up message as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.21 – Zabbix script confirmation window](img/B19803_10_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.21 – Zabbix script confirmation window
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Execute** button and this host will be disabled. Navigate
    to **Monitoring** | **Hosts** to confirm whether this worked. You should see that
    the host is set to **Disabled**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back at **Monitoring** | **Maps**, you can enable the host again with the same
    drop-down menu. This time, select **Enable**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The script we just used was built in Python utilizing the Zabbix API. With this
    script, we can now enable and disable hosts from the Zabbix frontend as a Zabbix
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 'This works because the **Monitoring** | **Maps** option is available even to
    Zabbix users. This script uses the API user for execution, though. Since our Zabbix
    API user has more user permissions, it can execute the script that gets host information
    from a Zabbix database and creates a maintenance period using the information.
    As we can see in the following diagram, our script follows roughly the same steps
    as the other Zabbix API utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.22 – Python script maintenance.py execution diagram](img/B19803_10_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.22 – Python script maintenance.py execution diagram
  prefs: []
  type: TYPE_NORMAL
- en: Because the Zabbix API is very flexible, we can pull data and write data to
    do almost anything we could do from the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: We can now use this cool function from anywhere in the Zabbix frontend where
    we see a dotted line with the hostname, even from **Monitoring** | **Hosts**.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Zabbix 7, it is possible to provide input from the frontend onto your scripts.
    If you’d like to test this, we can edit the script slightly:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Alerts** | **Scripts** and edit the **Host/Enable** and **Host/Disable**
    scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Commands** field, replace **{HOST.HOST}** with **{MANUALINPUT}** to
    make this script accept dynamic input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then open up **Advanced configuration** and fill in the **Input prompt**, **Default
    input string**, and **Input validation rule** fields. It should now look like
    the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19803_10_23.jpg)![](img/B19803_10_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.23 – Manual script input
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we execute the script, it will ask us for input. Fill in a hostname
    here and the host that we wrote in the field will be enabled or disabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.24 – Manual script input execution](img/B19803_10_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.24 – Manual script input execution
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, with this new script input method, it is now possible to make
    the whole execution process a lot more flexible. We can execute scripts like this
    in a non-static way, allowing us to provide user input data before execution.
    Neat!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Brian van Baekel* created this script for a customer at *Opensource ICT Solutions*
    and then open sourced it. Because Zabbix has a very cool community that continues
    to extend the possibilities of Zabbix even further, we too upload some of our
    scripts. Sharing is caring, so check out the other open source scripts at https://github.com/OpensourceICTSolutions.'
  prefs: []
  type: TYPE_NORMAL
