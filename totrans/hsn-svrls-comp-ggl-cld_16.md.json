["```\ngcloud iam service-accounts list --filter=\"Compute Engine default service account\" --format='value(EMAIL)'\n```", "```\n gcloud pubsub topics create new-lab-report\n```", "```\n npm install express\n npm install body-parser\n npm install @google-cloud/pubsub\n npm install googleapis\n```", "```\n \"scripts\": {\n  \"start\": \"node index.js\",\n   \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n },\n```", "```\nconst sheet = require('./common/sheet.js');\nconst {PubSub} = require('@google-cloud/pubsub');\nconst pubsub = new PubSub();\nconst express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\nconst port = process.env.PORT || 8080;\n\napp.listen(port, () => {\n  console.log('Listening on port', port);\n});\n```", "```\napp.post('/', async (req, res) => {\n  try {\n    await sheet.reset();\n    const labReport = req.body;\n    await publishPubSubMessage(labReport);\n    res.status(204).send();\n  }\n  catch (ex) {\n    console.log(ex);\n    res.status(500).send(ex);\n  }\n})\n```", "```\nasync function publishPubSubMessage(labReport) {\n  const buffer = Buffer.from(JSON.stringify(labReport));\n  await pubsub.topic('new-lab-report').publish(buffer);\n}\n```", "```\n cp -R ../pet-theory/lab05/common/ .\n```", "```\n FROM node:12\n WORKDIR /usr/src/app\n COPY package.json package*.json ./\n RUN npm install --only=production\n COPY . .\n CMD [ \"npm\", \"start\" ]\n```", "```\nconst sheet = require('./common/sheet.js');\nconst util = require('./common/util.js');\nconst express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\n\nconst port = process.env.PORT || 8080;\n  app.listen(port, () => {\n  console.log('Listening on port', port);\n});\n```", "```\napp.post('/', async (req, res) => {\n  const labReport = util.decodeBase64Json(req.body.message.data);\n  try {\n    await sheet.update('email', labReport.id, 'Trying');\n    const status = await util.attemptFlakeyOperation();\n    await sheet.update('email', labReport.id, status);\n    res.status(204).send();\n  }\n  catch (ex) {\n    await sheet.update('email', labReport.id, ex);\n    res.status(500).send();\n  }\n})\n```", "```\ncp -R ../pet-theory/lab05/common/ .\n```", "```\nconst sheet = require('./common/sheet.js');\nconst util = require('./common/util.js');\nconst express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\n\nconst port = process.env.PORT || 8080;\n  app.listen(port, () => {\n  console.log('Listening on port', port);\n});\n```", "```\napp.post('/', async (req, res) => {\n  const labReport = util.decodeBase64Json(req.body.message.data);\n  try {\n    await sheet.update('sms', labReport.id, 'Trying');\n    const status = await util.attemptFlakeyOperation();\n    await sheet.update('sms', labReport.id, status);\n    res.status(204).send();\n  }\n  catch (ex) {\n    await sheet.update('sms', labReport.id, ex);\n    res.status(500).send();\n  }\n})\n```", "```\ncp -R ../pet-theory/lab05/common/ .\n```", "```\nsteps:\n# Build the container image\n- name: 'gcr.io/cloud-builders/docker'\nargs: ['build', '-t', 'gcr.io/$PROJECT_ID/lab-service', 'lab-service/.']\n# Push the container image to Container Registry\n- name: 'gcr.io/cloud-builders/docker'\nargs: ['push', 'gcr.io/$PROJECT_ID/lab-service']\n# Deploy the image to Cloud Run\n- name: 'gcr.io/cloud-builders/gcloud'\nargs: ['beta', 'run', 'deploy', 'lab-service', '--image', 'gcr.io/$PROJECT_ID/lab-service', '--region', 'us-central1', '--platform', 'managed', '--no-allow\n-unauthenticated']\nimages:\n- 'gcr.io/$PROJECT_ID/lab-service'\ntimeout: \"600s\"\n```", "```\n gcloud source repos create pet-theory-test\n```", "```\n gcloud source repos clone pet-theory-test --project=[PROJECT_ID]\n```", "```\n.\n├── common\n│ ├── sheet.js\n│ └── util.js\n├── email-service\n│ ├── index.js\n│ ├── node_modules\n│ ├── package.json\n│ └── package-lock.json\n├── lab-service\n│ ├── cloudbuild.yaml\n│ ├── Dockerfile\n│ ├── index.js\n│ └── package.json\n│ └── package-lock.json\n└── sms-service\n├── index.js\n├── node_modules\n├── package.json\n└── package-lock.json\n```", "```\n git status\n```", "```\n git add .\n```", "```\n git config --global user.email \"EMAIL\"\n```", "```\n git config --global user name \"MY NAME\"\n```", "```\n git commit -m \"Initial commit - Pet Theory CH12\"\n```", "```\n git push origin master\n```", "```\nsteps:\n# comment\n# Build the container image\n- name: 'gcr.io/cloud-builders/docker'\nargs: ['build', '-t', 'gcr.io/$PROJECT_ID/lab-service', 'lab-service/.']\n# Push the container image to Container Registry\n- name: 'gcr.io/cloud-builders/docker'\nargs: ['push', 'gcr.io/$PROJECT_ID/lab-service']\n# Deploy the image to Cloud Run\n- name: 'gcr.io/cloud-builders/gcloud'\nargs: ['beta', 'run', 'deploy', 'lab-service', '--image', 'gcr.io/$PROJECT_ID/lab-service', '--region', 'us-central1', '--platform', 'managed', '--no-allow\n-unauthenticated']\nimages:\n- 'gcr.io/$PROJECT_ID/lab-service'\ntimeout: \"600s\"\n```", "```\n git add cloudbuild.yaml\n```", "```\n git commit -m \"Add updated cloudbuild.yaml\"\n```", "```\n git push origin lab/fix-1\n```", "```\nsteps:\n# Build the container image\n- name: 'gcr.io/cloud-builders/docker'\nargs: ['build', '-t', 'gcr.io/$PROJECT_ID/email-service', 'email-service/.']\n# Push the container image to Container Registry\n- name: 'gcr.io/cloud-builders/docker'\nargs: ['push', 'gcr.io/$PROJECT_ID/email-service']\n# Deploy the image to Cloud Run\n- name: 'gcr.io/cloud-builders/gcloud'\nargs: ['beta', 'run', 'deploy', 'email-service', '--image', 'gcr.io/$PROJECT_ID/email-service', '--region', 'us-central1', '--platform', 'managed', '--no-allow-unauthenticated']\nimages:\n- 'gcr.io/$PROJECT_ID/email-service'\ntimeout: \"600s\"\n```", "```\n steps:\n # Build the container image\n - name: 'gcr.io/cloud-builders/docker'\n args: ['build', '-t', 'gcr.io/$PROJECT_ID/sms-service', 'sms-service/.']\n # Push the container image to Container Registry\n - name: 'gcr.io/cloud-builders/docker'\n args: ['push', 'gcr.io/$PROJECT_ID/sms-service']\n # Deploy the image to Cloud Run\n - name: 'gcr.io/cloud-builders/gcloud'\n args: ['beta', 'run', 'deploy', 'sms-service', '--image', 'gcr.io/$PROJECT_ID/sms-service', '--region', 'us-central1', '--platform', 'managed', '--no-allow-unauthenticated']\n images:\n - 'gcr.io/$PROJECT_ID/sms-service'\n timeout: \"600s\"\n```", "```\n gcloud iam service-accounts list\n```", "```\ngcloud iam service-accounts create pubsub-cloud-run-invoker --display-name \"PubSub Cloud Run Invoker\"\n```", "```\ngcloud beta run services add-iam-policy-binding email-service --member=serviceAccount:pubsub-cloud-run-invoker@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com --role=roles/run.invoker --region us-central1 --platform managed\n```", "```\nPROJECT_NUMBER=$(gcloud projects list --format=\"value(projectNumber)\" --filter=\"projectId=$GOOGLE_CLOUD_PROJECT\")\n```", "```\ngcloud projects add-iam-policy-binding $GOOGLE_CLOUD_PROJECT --member=serviceAccount:service-$PROJECT_NUMBER@gcp-sa-pubsub.iam.gserviceaccount.com --role=roles/iam.serviceAccountTokenCreator\n```", "```\n EMAIL_URL=$(gcloud beta run services describe email-service --platform managed --region us-central1 --format \"value(status.address.url)\")\n```", "```\n gcloud pubsub subscriptions create email-service-sub --topic new-lab-report --push-endpoint=$EMAIL_URL --push-auth-service-account=pubsub-cloud-run-invoker@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com\n```", "```\ngcloud beta run services add-iam-policy-binding sms-service --member=serviceAccount:pubsub-cloud-run-invoker@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com --role=roles/run.invoker --region us-central1 --platform managed\n```", "```\nSMS_URL=$(gcloud beta run services describe sms-service --platform managed --region us-central1 --format \"value(status.address.url)\")\n```", "```\ngcloud pubsub subscriptions create sms-service-sub --topic new-lab-report --push-endpoint=$SMS_URL --push-auth-service-account=pubsub-cloud-run-invoker@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com\n```", "```\n LAB_URL=$(gcloud beta run services describe lab-service --platform managed --region us-central1 --format \"value(status.address.url)\")\n```", "```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d \"{\\\"id\\\": 12}\" \\\n$LAB_URL &\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d \"{\\\"id\\\": 34}\" \\\n$LAB_URL &\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d \"{\\\"id\\\": 56}\" \\\n$LAB_URL &\n```", "```\nAdd an error in the app.post function\n...\napp.post('/', async (req, res) => {\noops\nconst labReport = util.decodeBase64Json(req.body.message.data);\n...\n```"]