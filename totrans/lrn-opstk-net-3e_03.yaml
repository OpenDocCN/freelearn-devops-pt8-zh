- en: Installing Neutron
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Neutron
- en: OpenStack Networking, also known as Neutron, provides a network infrastructure-as-a-service
    platform to users of the cloud. In the last chapter, we installed some of the
    base services of OpenStack, including the Identity, Image, and Compute services.
    In this chapter, I will guide you through the installation of Neutron networking
    services on top of the OpenStack environment that we installed in the previous
    chapter
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack Networking，也称为Neutron，为云用户提供网络基础设施即服务平台。在上一章中，我们安装了一些OpenStack的基础服务，包括身份验证、镜像和计算服务。在本章中，我将指导你在上一章安装的OpenStack环境上安装Neutron网络服务。
- en: 'The components to be installed include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 需要安装的组件包括以下内容：
- en: Neutron API server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neutron API服务器
- en: Modular Layer 2 (ML2) plugin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化第2层（ML2）插件
- en: DHCP agent
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP代理
- en: Metadata agent
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据代理
- en: By the end of this chapter, you will have a basic understanding of the function
    and operation of various Neutron plugins and agents, as well as a foundation on
    top of which a virtual switching infrastructure can be built.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将对各种Neutron插件和代理的功能及操作有基本的了解，并且能够在此基础上构建虚拟交换基础设施。
- en: Basic networking elements in Neutron
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Neutron中的基本网络元素
- en: Neutron constructs the virtual network using elements that are familiar to most
    system and network administrators, including networks, subnets, ports, routers,
    load balancers, and more.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron使用对大多数系统和网络管理员来说都很熟悉的元素来构建虚拟网络，包括网络、子网、端口、路由器、负载均衡器等。
- en: 'Using version 2.0 of the core Neutron API, users can build a network foundation
    composed of the following entities:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Neutron核心API的2.0版本，用户可以构建一个由以下实体组成的网络基础：
- en: '**Network**: A network is an isolated Layer 2 broadcast domain. Typically,
    networks are reserved for the projects that created them, but they can be shared
    among projects if configured accordingly. The network is the core entity of the
    Neutron API. Subnets and ports must always be associated with a network.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：网络是一个隔离的第2层广播域。通常，网络保留给创建它们的项目，但如果进行相应配置，也可以在项目之间共享。网络是Neutron API的核心实体。子网和端口必须始终与网络关联。'
- en: '**Subnet**: A subnet is an IPv4 or IPv6 address block from which IP addresses
    can be assigned to virtual machine instances. Each subnet must have a CIDR and
    must be associated with a network. Multiple subnets can be associated with a single
    network and can be non-contiguous. A DHCP allocation range can be set for a subnet
    that limits the addresses provided to instances.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子网**：子网是一个IPv4或IPv6地址块，可以为虚拟机实例分配IP地址。每个子网必须有一个CIDR，并且必须与一个网络相关联。多个子网可以与一个网络关联，并且可以是非连续的。可以为子网设置DHCP分配范围，以限制提供给实例的地址。'
- en: '**Port**: A port in Neutron is a logical representation of a virtual switch
    port. Virtual machine interfaces are mapped to Neutron ports, and these ports
    define both the MAC address and the IP address that is to be assigned to the interfaces
    plugged into them. Neutron port definitions are stored in the Neutron database,
    which is then used by the respective plugin agent to build and connect the virtual
    switching infrastructure.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口**：Neutron中的端口是虚拟交换机端口的逻辑表示。虚拟机接口与Neutron端口相映射，这些端口定义了分配给接口的MAC地址和IP地址。Neutron端口定义存储在Neutron数据库中，然后由相应的插件代理使用，以构建和连接虚拟交换基础设施。'
- en: Cloud operators and users alike can configure network topologies by creating
    and configuring networks and subnets, and then instruct services like Nova to
    attach virtual devices to ports on these networks. Users can create multiple networks,
    subnets, and ports, but are limited to thresholds defined by per-project quotas
    set by the cloud administrator.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 云运营商和用户都可以通过创建和配置网络和子网来配置网络拓扑，然后指示Nova等服务将虚拟设备连接到这些网络上的端口。用户可以创建多个网络、子网和端口，但受到云管理员设置的每个项目配额定义的限制。
- en: Extending functionality with plugins
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过插件扩展功能
- en: The OpenStack Networking project provides reference plugins and drivers that
    are developed and supported by the OpenStack community, and also supports third-party
    plugins and drivers that extend network functionality and implementation of the
    Neutron API. Plugins and drivers can be created that use a variety of software
    and hardware-based technologies to implement the network built by operators and
    users.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack Networking 项目提供了由 OpenStack 社区开发和支持的参考插件和驱动程序，同时也支持第三方插件和驱动程序，这些插件和驱动程序扩展了网络功能，并实现了
    Neutron API。可以创建使用各种软件和硬件技术的插件和驱动程序，以实现由操作员和用户构建的网络。
- en: 'There are two major plugin types within the Neutron architecture:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 架构中有两种主要的插件类型：
- en: Core plugin
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心插件
- en: Service plugin
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务插件
- en: A **core plugin** implements the core Neutron API, and is responsible for adapting
    the logical network described by networks, ports, and subnets into something that
    can be implemented by the L2 agent and IP address management system running on
    the host.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心插件**实现了核心的 Neutron API，负责将由网络、端口和子网描述的逻辑网络转换为可以由主机上运行的 L2 代理和 IP 地址管理系统实施的内容。'
- en: A **service plugin** provides additional network services such as routing, load
    balancing, firewalling, and more.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务插件**提供额外的网络服务，如路由、负载均衡、防火墙等。'
- en: 'In this book, the following core plugin will be discussed:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将讨论以下核心插件：
- en: Modular Layer 2 Plugin
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化第2层插件
- en: 'The following service plugins will be covered in later chapters:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下服务插件将在后续章节中介绍：
- en: Router
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器
- en: Load balancer
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: Trunk
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主干
- en: The Neutron API provides a consistent experience to the user despite the chosen
    networking plugin. For more information on interacting with the Neutron API, please
    visit the following URL: [https://developer.openstack.org/api-ref/network/v2/index.html](https://developer.openstack.org/api-ref/network/v2/index.html).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron API 为用户提供一致的体验，尽管选择了不同的网络插件。有关与 Neutron API 交互的更多信息，请访问以下网址：[https://developer.openstack.org/api-ref/network/v2/index.html](https://developer.openstack.org/api-ref/network/v2/index.html)。
- en: Modular Layer 2 plugin
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化第2层插件
- en: 'Prior to the inclusion of the **Modular Layer 2 (ML2)** plugin in the Havana
    release of OpenStack, Neutron was limited to using a single core plugin. This
    design resulted in homogenous network architectures that were not extensible.
    Operators were forced to make long-term decisions about the network stack that
    could not easily be changed in the future. The ML2 plugin, on the other hand,
    is extensible by design and supports heterogeneous network architectures that
    can leverage multiple technologies simultaneously. The ML2 plugin replaced two
    monolithic plugins in its reference implementation: the Linux bridge core plugin
    and the Open vSwitch core plugin.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 的 Havana 版本中引入 **模块化第2层（ML2）** 插件之前，Neutron 仅能使用单一的核心插件。这种设计导致了同质化的网络架构，无法扩展。操作员被迫对网络堆栈做出长期决策，这些决策在未来很难改变。另一方面，ML2
    插件在设计上是可扩展的，支持异构的网络架构，可以同时利用多种技术。ML2 插件替换了其参考实现中的两个单体插件：Linux 桥接核心插件和 Open vSwitch
    核心插件。
- en: Drivers
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动程序
- en: The ML2 plugin introduced the concept of TypeDrivers and Mechanism drivers to
    separate the types of networks being *implemented* and the mechanisms for *implementing*
    networks of those types.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ML2 插件引入了 TypeDrivers 和 Mechanism 驱动程序的概念，以将网络类型的*实现*与这些类型的网络的*实现机制*分离。
- en: TypeDrivers
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeDrivers
- en: 'An ML2 **TypeDriver** maintains a type-specific network state, validates provider
    network attributes, and describes network segments using provider attributes.
    Provider attributes include network interface labels, segmentation IDs, and network
    types. Supported network types include `local`, `flat`, `vlan`, `gre`, `vxlan`,
    and `geneve`. The following table describes the differences between those network
    types:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 ML2 **TypeDriver** 维护特定类型的网络状态，验证提供者网络属性，并使用提供者属性描述网络段。提供者属性包括网络接口标签、分段 ID
    和网络类型。支持的网络类型包括`local`、`flat`、`vlan`、`gre`、`vxlan` 和 `geneve`。下表描述了这些网络类型之间的差异：
- en: '| **Type** | **Description** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **描述** |'
- en: '| Local | A **local network** is one that is isolated from other networks and
    nodes. Instances connected to a local network may communicate with other instances
    in the same network on the same `compute` node, but are unable to communicate
    with instances on another host. Because of this design limitation, local networks
    are recommended for testing purposes only. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 本地 | **本地网络**是指与其他网络和节点隔离的网络。连接到本地网络的实例可以与同一`compute`节点上的其他实例通信，但无法与其他主机上的实例通信。由于这种设计限制，本地网络仅推荐用于测试目的。|'
- en: '| Flat | In a **flat network**, no 802.1q VLAN tagging or other network segregation
    takes place. In many environments, a flat network corresponds to an *access* VLAN
    or *native* VLAN on a trunk. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 平面 | 在**平面网络**中，不进行802.1q VLAN标记或其他网络隔离。在许多环境中，平面网络对应于*接入*VLAN或*本地*VLAN上的干道。|'
- en: '| VLAN | **VLAN networks** are networks that utilize 802.1q tagging to segregate
    network traffic. Instances in the same VLAN are considered part of the same network
    and are in the same Layer 2 broadcast domain. Inter-VLAN routing, or routing between
    VLANs, is only possible through the use of a physical or virtual router. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| VLAN | **VLAN网络**是利用802.1q标记来隔离网络流量的网络。处于同一VLAN中的实例被认为是同一网络的一部分，并且处于相同的第二层广播域内。VLAN间路由或VLAN之间的路由只能通过物理或虚拟路由器来实现。|'
- en: '| GRE | **GRE networks** use the **generic routing encapsulation** tunneling
    protocol (IP protocol 47) to encapsulate packets and send them over point-to-point
    networks between nodes. The `KEY` field in the GRE header is used to segregate
    networks. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| GRE | **GRE网络**使用**通用路由封装**隧道协议（IP协议47）来封装数据包并通过点对点网络在节点之间传输。在GRE头部的`KEY`字段用于隔离网络。|'
- en: '| VXLAN | A **VXLAN network** uses a unique segmentation ID, called a VXLAN
    Network Identifier (VNI), to differentiate traffic from other VXLAN networks.
    Traffic from one instance to another is encapsulated by the host using the VNI
    and sent over an existing Layer 3 network using UDP, where it is decapsulated
    and forwarded to the instance. The use of VXLAN to encapsulate packets over an
    existing network is meant to solve limitations of VLANs and physical switching
    infrastructure. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| VXLAN | **VXLAN网络**使用一个独特的分段ID，称为VXLAN网络标识符（VNI），来区分来自其他VXLAN网络的流量。来自一个实例到另一个实例的流量通过主机使用VNI进行封装，并通过现有的第三层网络使用UDP传输，在该网络中解封装并转发到目标实例。使用VXLAN封装数据包并通过现有网络传输，旨在解决VLAN和物理交换基础设施的局限性。|'
- en: '| GENEVE | A **GENEVE network** resembles a VXLAN network, in that it uses
    a unique segmentation ID, called a virtual network interface (**VNI**), to differentiate
    traffic from other GENEVE networks. Packets are encapsulated with a unique header
    and UDP is used as the transport mechanism. GENEVE leverages the benefits of multiple
    overlay technologies such as VXLAN, NVGRE, and STT and is primarily used by OVN
    at this time. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| GENEVE | **GENEVE网络**类似于VXLAN网络，它使用一个独特的分段ID，称为虚拟网络接口（**VNI**），来区分来自其他GENEVE网络的流量。数据包被封装在一个独特的头部中，并使用UDP作为传输机制。GENEVE利用了多个覆盖技术的优势，如VXLAN、NVGRE和STT，当前主要由OVN使用。|'
- en: Mechanism drivers
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机制驱动程序
- en: 'An ML2 **Mechanism driver** is responsible for taking information established
    by the type driver and ensuring that it is properly implemented. Multiple Mechanism
    drivers can be configured to operate simultaneously, and can be described using
    three types of models:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ML2 **机制驱动程序**负责获取由类型驱动程序建立的信息，并确保其正确实现。可以配置多个机制驱动程序同时运行，并可以通过三种类型的模型进行描述：
- en: '**Agent-based:** Includes Linux bridge, Open vSwitch, SR-IOV, and others'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于代理的：** 包括Linux bridge、Open vSwitch、SR-IOV等'
- en: '**Controller-based:** Includes Juniper Contrail, Tungsten Fabric, OVN, Cisco
    ACI, VMWare NSX, and others'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于控制器的：** 包括Juniper Contrail、Tungsten Fabric、OVN、Cisco ACI、VMWare NSX等'
- en: '**Top-of-Rack**: Includes Cisco Nexus, Arista, Mellanox, and others'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机架顶端**：包括Cisco Nexus、Arista、Mellanox等'
- en: 'Mechanism drivers to be discussed in this book include the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中将讨论的机制驱动程序包括以下内容：
- en: Linux bridge
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux桥接
- en: Open vSwitch
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Open vSwitch
- en: L2 population
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: L2人口
- en: The Linux bridge and Open vSwitch ML2 Mechanism drivers are used to configure
    their respective virtual switching technologies within nodes that host instances
    and network services. The Linux bridge driver supports `local`, `flat`, `vlan`,
    and `vxlan` network types, while the Open vSwitch driver supports all of those
    as well as the `gre` network type. Support for other type drivers, such as `geneve`,
    will vary based on the implemented Mechanism driver.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 桥接和 Open vSwitch ML2 Mechanism 驱动程序用于配置在承载实例和网络服务的节点内的虚拟交换技术。Linux 桥接驱动程序支持
    `local`、`flat`、`vlan` 和 `vxlan` 网络类型，而 Open vSwitch 驱动程序支持这些网络类型以及 `gre` 网络类型。对于其他类型的驱动程序（如
    `geneve`）的支持将根据实现的 Mechanism 驱动程序而有所不同。
- en: The L2 population driver is used to limit the amount of broadcast traffic that
    is forwarded across the overlay network fabric when VXLAN networks are used. Under
    normal circumstances, unknown unicast, multicast, and broadcast traffic may be
    flooded out from all tunnels to other `compute` nodes. This behavior can have
    a negative impact on the overlay network fabric, especially as the number of hosts
    in the cloud scales out.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: L2 population 驱动程序用于限制在使用 VXLAN 网络时转发到覆盖网络中的广播流量数量。在正常情况下，未知的单播、多播和广播流量可能会从所有隧道泛洪到其他
    `compute` 节点。这种行为可能对覆盖网络结构产生负面影响，特别是当云中主机数量增加时。
- en: As an authority on what instances and other network resources exist in the cloud,
    Neutron can pre-populate forwarding databases on all hosts to avoid a costly learning
    operation. ARP proxy, a feature of the L2 population driver, enables Neutron to
    pre-populate the ARP table on all hosts in a similar manner to avoid ARP traffic
    from being broadcast across the overlay fabric.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作为云中实例和其他网络资源的权威，Neutron 可以在所有主机上预填充转发数据库，以避免代价高昂的学习操作。ARP 代理是 L2 population
    驱动程序的一个特性，允许 Neutron 以类似的方式在所有主机上预填充 ARP 表，以避免 ARP 流量在覆盖网络中广播。
- en: ML2 architecture
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ML2 架构
- en: 'The following diagram demonstrates how the Neutron API service interacts with
    the various plugins and agents responsible for constructing the virtual and physical
    network at a high level:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了 Neutron API 服务如何与负责构建虚拟和物理网络的各种插件和代理进行交互：
- en: '![](img/74a84179-b5ae-470a-8ae5-e0b84965baf7.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74a84179-b5ae-470a-8ae5-e0b84965baf7.png)'
- en: Figure 3.1
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1
- en: The preceding diagram demonstrates the interaction between the Neutron API,
    Neutron plugins and drivers, and services such as the L2 and L3 agents. For more
    information on the Neutron ML2 plugin architecture, please refer to the following
    URL: [https://docs.openstack.org/neutron/pike/admin/config-ml2.html](https://docs.openstack.org/neutron/pike/admin/config-ml2.html)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上图展示了 Neutron API、Neutron 插件和驱动程序与 L2 和 L3 代理等服务之间的交互。有关 Neutron ML2 插件架构的更多信息，请参考以下网址：[https://docs.openstack.org/neutron/pike/admin/config-ml2.html](https://docs.openstack.org/neutron/pike/admin/config-ml2.html)
- en: Network namespaces
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络命名空间
- en: OpenStack was designed with multi-tenancy in mind, and provides users with the
    ability to create and manage their own compute and network resources. Neutron
    supports each tenant having multiple private networks, routers, firewalls, load
    balancers, and other networking resources, and is able to isolate many of these
    objects through the use of network namespaces.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 设计时考虑到了多租户的需求，并为用户提供了创建和管理自己的计算和网络资源的能力。Neutron 支持每个租户拥有多个私有网络、路由器、防火墙、负载均衡器和其他网络资源，并能够通过使用网络命名空间将这些对象隔离开来。
- en: A **network namespace** is defined as a logical copy of the network stack with
    its own routes, firewall rules, and network interfaces. When using the open source
    reference plugins and drivers, every DHCP server, router, and load balancer that
    is created by a user is implemented in a network namespace. By using network namespaces,
    Neutron is able to provide isolated DHCP and routing services to each network,
    allowing users to create overlapping networks with other users in other projects
    and even other networks in the same project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络命名空间** 被定义为网络堆栈的逻辑副本，具有自己的路由、Firewall 规则和网络接口。在使用开源参考插件和驱动程序时，由用户创建的每个
    DHCP 服务器、路由器和负载均衡器都会在网络命名空间中实现。通过使用网络命名空间，Neutron 能够为每个网络提供隔离的 DHCP 和路由服务，使用户能够在其他项目的用户甚至同一项目的其他网络中创建重叠的网络。'
- en: 'The following naming convention for network namespaces should be observed:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命名规则应适用于网络命名空间：
- en: '**DHCP Namespace: **`qdhcp-<network UUID>`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DHCP 命名空间：**`qdhcp-<网络 UUID>`'
- en: '**Router Namespace: **`qrouter-<router UUID>`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由器命名空间：**`qrouter-<路由器 UUID>`'
- en: '**Load Balancer Namespace: **`qlbaas-<load balancer UUID>`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡器命名空间：**`qlbaas-<负载均衡器UUID>`'
- en: A `qdhcp` namespace contains a DHCP service that provides IP addresses to instances
    using the DHCP protocol. In a reference implementation, `dnsmasq` is the process
    that services DHCP requests. The `qdhcp` namespace has an interface plugged into
    the virtual switch and is able to communicate with instances and other devices
    in the same network. A `qdhcp` namespace is created for every network where the
    associated subnet(s) have DHCP enabled.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`qdhcp`命名空间包含一个DHCP服务，用于通过DHCP协议为实例提供IP地址。在参考实现中，`dnsmasq`是处理DHCP请求的进程。`qdhcp`命名空间有一个接口连接到虚拟交换机，并能够与相同网络中的实例和其他设备进行通信。对于启用了DHCP的相关子网，每个网络都会创建一个`qdhcp`命名空间。
- en: A `qrouter` namespace represents a virtual router, and is responsible for routing
    traffic to and from instances in subnets it is connected to. Like the `qdhcp`
    namespace, the `qrouter` namespace is connected to one or more virtual switches
    depending on the configuration. In some cases, multiple namespaces may be used
    to plumb the virtual router infrastructure. These additional namespaces, known
    as `fip` and `snat`, are used for distributed virtual routers (DVR) and will be
    discussed later in this book.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`qrouter`命名空间代表一个虚拟路由器，负责将流量路由到连接的子网中的实例，或从实例路由出去。像`qdhcp`命名空间一样，`qrouter`命名空间根据配置连接到一个或多个虚拟交换机。在某些情况下，可能会使用多个命名空间来建立虚拟路由器基础设施。这些额外的命名空间，称为`fip`和`snat`，用于分布式虚拟路由器（DVR），将在本书后面讨论。
- en: A `qlbaas` namespace represents a virtual load balancer, and contains a service
    such as HAProxy that load balances traffic to instances. The `qlbaas` namespace
    is connected to a virtual switch and can communicate with instances and other
    devices in the same network.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`qlbaas`命名空间代表一个虚拟负载均衡器，并包含一个服务，如HAProxy，用于将流量负载均衡到实例。`qlbaas`命名空间连接到虚拟交换机，并可以与相同网络中的实例和其他设备进行通信。
- en: 'Fun fact: The leading `q` in the name of the network namespaces stands for
    Quantum, the original name for the OpenStack Networking service.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实：网络命名空间名称中的前导`q`代表Quantum，这是OpenStack Networking服务的原始名称。
- en: 'Network namespaces of the aforementioned types will only be seen on nodes running
    the Neutron DHCP, L3, or LBaaS agents, respectively. These services are typically
    only configured on controllers or dedicated network nodes. When distributed virtual
    routers are configured, you may find router-related namespaces on `compute` nodes
    as well. The `ip netns list` command can be used to list available namespaces,
    and commands can be executed within the namespace using the following syntax:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在运行Neutron DHCP、L3或LBaaS代理的节点上，才能看到上述类型的网络命名空间。这些服务通常仅在控制器或专用网络节点上配置。当配置分布式虚拟路由器时，您可能还会在`compute`节点上找到与路由器相关的命名空间。可以使用`ip
    netns list`命令列出可用的命名空间，并使用以下语法在命名空间内执行命令：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Commands that can be executed in the namespace include `ip`, `route`, `iptables`,
    and more. The output of these commands corresponds to data that's specific to
    the namespace they are executed in. Tools such as `tcpdump` can also be executed
    in a network namespace to assist in troubleshooting the virtual network infrastructure.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在命名空间中执行的命令包括`ip`、`route`、`iptables`等。这些命令的输出对应于在它们执行的命名空间中专用的数据。像`tcpdump`这样的工具也可以在网络命名空间中执行，以帮助排查虚拟网络基础设施的问题。
- en: For more information on network namespaces, see the man page for `ip netns`
    at the following URL: [http://man7.org/linux/man-pages/man8/ip-netns.8.html](http://man7.org/linux/man-pages/man8/ip-netns.8.html).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有关网络命名空间的更多信息，请参阅`ip netns`的手册页，网址为：[http://man7.org/linux/man-pages/man8/ip-netns.8.html](http://man7.org/linux/man-pages/man8/ip-netns.8.html)。
- en: Installing and configuring Neutron services
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Neutron服务
- en: In this installation, the various services that make up OpenStack Networking
    will be installed on the `controller` node rather than a dedicated networking
    node. The `compute` nodes will run L2 agents that interface with the `controller`
    node and provide virtual switch connections to instances.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在此安装过程中，构成OpenStack Networking的各种服务将安装在`controller`节点上，而不是专用的网络节点。`compute`节点将运行L2代理，与`controller`节点进行接口，并为实例提供虚拟交换机连接。
- en: Remember, the configuration settings recommended here and online at [docs.openstack.org](http://docs.openstack.org) may
    not be appropriate for production environments.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这里推荐的配置设置以及在[docs.openstack.org](http://docs.openstack.org)上的在线设置，可能不适合生产环境。
- en: Creating the Neutron database
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Neutron数据库
- en: 'Using the `mysql` client on the `controller` node, create the Neutron database
    and associated user:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `controller` 节点上使用 `mysql` 客户端创建 Neutron 数据库和相关用户：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Enter the following SQL statements at the `MariaDB [(none)] >` prompt:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MariaDB [(none)] >` 提示符下输入以下 SQL 语句：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Configuring the Neutron user, role, and endpoint in Keystone
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Keystone 中配置 Neutron 用户、角色和端点
- en: 'To function properly, Neutron requires that a user, role, and endpoint be created
    in Keystone. When executed from the `controller` node, the following commands
    will create a user called `neutron` in Keystone, associate the `admin` role with
    the `neutron` user, and add the `neutron` user to the `service` project:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正常运行，Neutron 需要在 Keystone 中创建一个用户、角色和端点。当从 `controller` 节点执行时，以下命令将在 Keystone
    中创建一个名为 `neutron` 的用户，将 `admin` 角色与 `neutron` 用户关联，并将 `neutron` 用户添加到 `service`
    项目中：
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a service in Keystone that describes the OpenStack Networking service
    by executing the following command on the `controller` node:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `controller` 节点上执行以下命令，在 Keystone 中创建一个描述 OpenStack 网络服务的服务：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To create the endpoints, use the following `openstack endpoint create` commands:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建端点，请使用以下 `openstack endpoint create` 命令：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing Neutron packages
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Neutron 包
- en: 'To install the Neutron API server, the DHCP and metadata agents, and the ML2
    plugin on the controller, issue the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要在控制节点上安装 Neutron API 服务器、DHCP 和元数据代理以及 ML2 插件，请执行以下命令：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Neutron DHCP and metadata agents may not be required by all Mechanism drivers
    but are used when implementing the `openvswitch` and `linuxbridge` drivers.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 的 DHCP 和元数据代理可能并非所有机制驱动程序都需要，但在实现 `openvswitch` 和 `linuxbridge` 驱动程序时会使用它们。
- en: 'On all other hosts, only the ML2 plugin is required at this time:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有其他主机上，此时仅需要 ML2 插件：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'On all nodes, update the `[database]` section of the Neutron configuration
    file at `/etc/neutron/neutron.conf` to use the proper MySQL database connection
    string based on the preceding values rather than the default value:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有节点上，更新 `/etc/neutron/neutron.conf` 中 Neutron 配置文件的 `[database]` 部分，使用基于前面值的正确
    MySQL 数据库连接字符串，而不是默认值：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Configuring Neutron to use Keystone
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Neutron 使用 Keystone
- en: The Neutron configuration file found at `/etc/neutron/neutron.conf` has dozens
    of settings that can be modified to meet the needs of the OpenStack cloud administrator.
    A handful of these settings must be changed from their defaults as part of this
    installation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 配置文件位于 `/etc/neutron/neutron.conf`，其中有数十个可以修改的设置，以满足 OpenStack 云管理员的需求。部分设置必须在此安装过程中从默认值更改。
- en: 'To specify Keystone as the authentication method for Neutron, update the `[DEFAULT]`
    section of the Neutron configuration file on all hosts with the following setting:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定 Keystone 作为 Neutron 的身份验证方法，请在所有主机上更新 Neutron 配置文件的 `[DEFAULT]` 部分，使用以下设置：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Neutron must also be configured with the appropriate Keystone authentication
    settings. The username and password for the `neutron` user in Keystone were set
    earlier in this chapter. Update the `[keystone_authtoken]` section of the Neutron
    configuration file on all hosts with the following settings:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 还必须配置适当的 Keystone 身份验证设置。`neutron` 用户在 Keystone 中的用户名和密码在本章前面已经设置。在所有主机上更新
    Neutron 配置文件的 `[keystone_authtoken]` 部分，使用以下设置：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Configuring Neutron to use a messaging service
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Neutron 使用消息服务
- en: 'Neutron communicates with various OpenStack services on the AMQP messaging
    bus. Update the `[DEFAULT]` section of the Neutron configuration file on all hosts
    to specify RabbitMQ as the messaging broker:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 与各种 OpenStack 服务通过 AMQP 消息总线进行通信。更新所有主机上 Neutron 配置文件的 `[DEFAULT]` 部分，以指定
    RabbitMQ 作为消息代理：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Configuring Nova to utilize Neutron networking
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Nova 使用 Neutron 网络
- en: Before Neutron can be utilized as the network manager for OpenStack Compute
    services, the appropriate configuration options must be set in the Nova configuration
    file located at `/etc/nova/nova.conf` on certain hosts.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Neutron 作为 OpenStack 计算服务的网络管理器之前，必须在某些主机上设置 Nova 配置文件 `/etc/nova/nova.conf`
    中的适当配置选项。
- en: 'On the controller and `compute` nodes, update the `[neutron]` section with
    the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制节点和 `compute` 节点上，使用以下内容更新 `[neutron]` 部分：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Nova may require additional configuration once a Mechanism driver has been determined.
    The Linux bridge and Open vSwitch Mechanism drivers and their respective agents
    and Nova configuration changes will be discussed in further detail in upcoming
    chapters.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了机制驱动程序，Nova 可能需要额外的配置。Linux bridge 和 Open vSwitch 机制驱动程序及其各自的代理和 Nova 配置更改将在后续章节中详细讨论。
- en: Configuring Neutron to notify Nova
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Neutron以通知Nova
- en: 'Neutron must be configured to notify Nova of network topology changes. On the
    `controller` node, update the `[nova]` section of the Neutron configuration file
    located at `/etc/neutron/neutron.conf` with the following settings:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron必须配置为通知Nova网络拓扑的变化。在`controller`节点上，更新位于`/etc/neutron/neutron.conf`的Neutron配置文件中的`[nova]`部分，设置如下：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Configuring Neutron services
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Neutron服务
- en: 'The `neutron-server` service exposes the Neutron API to users and passes all
    calls to the configured Neutron plugins for processing. By default, Neutron is
    configured to listen for API calls on all configured addresses, as seen by the
    default `bind_hosts` option in the Neutron configuration file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`neutron-server`服务将Neutron API暴露给用户，并将所有调用传递给配置的Neutron插件进行处理。默认情况下，Neutron配置为监听所有配置的地址上的API调用，如Neutron配置文件中的默认`bind_hosts`选项所示：'
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As an additional security measure, it is possible to expose the API on the management
    or API network. To change the default value, update the `bind_host` value in the
    `[DEFAULT]` section of the Neutron configuration located at `/etc/neutron/neutron.conf`
    with the management address of the `controller` node. The deployment explained
    in this book will retain the default value.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的安全措施，可以将API暴露在管理或API网络上。要更改默认值，请更新位于`/etc/neutron/neutron.conf`的Neutron配置文件中`[DEFAULT]`部分的`bind_host`值，并指定`controller`节点的管理地址。本书中解释的部署将保持默认值。
- en: 'Other configuration options that may require tweaking include the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要调整的其他配置选项包括：
- en: '`core_plugin`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core_plugin`'
- en: '`service_plugins`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service_plugins`'
- en: '`dhcp_lease_duration`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dhcp_lease_duration`'
- en: '`dns_domain`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dns_domain`'
- en: Some of these settings apply to all nodes, while others only apply to the `network`
    or `controller` node. The `core_plugin` configuration option instructs Neutron
    to use the specified networking plugin. Beginning with the Icehouse release, the
    ML2 plugin supersedes both the Linux bridge and Open vSwitch monolithic plugins.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些设置适用于所有节点，而另一些仅适用于`network`或`controller`节点。`core_plugin`配置选项指示Neutron使用指定的网络插件。从Icehouse版本开始，ML2插件取代了Linux
    bridge和Open vSwitch单体插件。
- en: 'On all nodes, update the `core_plugin` value in the `[DEFAULT]` section of
    the Neutron configuration file located at `/etc/neutron/neutron.conf` and specify
    the ML2 plugin:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有节点上，更新位于`/etc/neutron/neutron.conf`的Neutron配置文件中`[DEFAULT]`部分的`core_plugin`值，并指定ML2插件：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `service_plugins` configuration option is used to define plugins that are
    loaded by Neutron for additional functionality. Examples of plugins include `router`, `firewall`, `lbaas`, `vpnaas`
    and `metering`. This option should only be configured on the `controller` node
    or any other node running the `neutron-server` service. Service plugins will be
    defined in later chapters.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`service_plugins`配置选项用于定义Neutron加载的插件以实现额外功能。插件的示例包括`router`、`firewall`、`lbaas`、`vpnaas`和`metering`。此选项应仅在`controller`节点或运行`neutron-server`服务的其他节点上配置。服务插件将在后续章节中定义。'
- en: The `dhcp_lease_duration` configuration option specifies the duration of an
    IP address lease by an instance. The default value is 86,400 seconds, or 24 hours.
    If the value is set too low, the network may be flooded with traffic due to short
    leases and frequent renewal attempts. The DHCP client on the instance itself is
    responsible for renewing the lease, and the frequency of this operation varies
    between operating systems. It is not uncommon for instances to attempt to renew
    their lease well before exceeding the lease duration. The value set for `dhcp_lease_duration`
    does not dictate how long an IP address stays associated with an instance, however.
    Once an IP address has been allocated to a port by Neutron, it remains associated
    with the port until the port or related instance is deleted.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`dhcp_lease_duration`配置选项指定实例的IP地址租期持续时间。默认值为86,400秒，即24小时。如果设置的值过低，网络可能会因为短期租期和频繁的续租尝试而遭到流量淹没。实例本身的DHCP客户端负责续租，且这一操作的频率因操作系统而异。实例尝试在租期到期前很久就进行续租并不少见。然而，`dhcp_lease_duration`的设置并不会决定IP地址与实例关联的时间长度。一旦Neutron为端口分配了IP地址，直到端口或相关实例被删除，该IP地址将保持与端口关联。'
- en: 'The `dns_domain` configuration option specifies the DNS search domain that
    is provided to instances via DHCP when they obtain a lease. The default value
    is `openstacklocal`. This can be changed to whatever fits your organization. For
    the purpose of this installation, change the value from `openstacklocal` to `learningneutron.com.`
    On the `controller` node, update the `dns_domain` option in the Neutron configuration
    file located at `/etc/neutron/neutron.conf` to `learningneutron.com`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`dns_domain`配置选项指定通过DHCP向实例提供的DNS搜索域，当它们获取租约时。默认值为`openstacklocal`。可以更改为适合您组织的任何值。对于本次安装，将值从`openstacklocal`更改为`learningneutron.com.`
    在`controller`节点上，更新位于`/etc/neutron/neutron.conf`的Neutron配置文件中的`dns_domain`选项为`learningneutron.com`：'
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When instances obtain their address from the DHCP server, the domain is appended
    to the hostname, resulting in a fully-qualified domain name. Neutron does not
    support multiple domain names by default, instead relying on the project known
    as Designate to extend support for this functionality. More information on Designate
    can be found at the following URL: [https://docs.openstack.org/designate/latest/](https://docs.openstack.org/designate/latest/).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例从DHCP服务器获取地址时，域名会附加到主机名，形成完全合格的域名。Neutron默认不支持多个域名，而是依赖于名为Designate的项目来扩展对该功能的支持。有关Designate的更多信息，请访问以下URL：[https://docs.openstack.org/designate/latest/](https://docs.openstack.org/designate/latest/)。
- en: Starting neutron-server
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动neutron-server
- en: 'Before the `neutron-server` service can be started, the Neutron database must
    be updated based on the options we configured earlier in this chapter. Use the
    `neutron-db-manage` command on the `controller` node to update the database accordingly:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动`neutron-server`服务之前，必须根据本章之前配置的选项更新Neutron数据库。在`controller`节点上使用`neutron-db-manage`命令相应地更新数据库：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Restart the Nova compute services on the `controller` node:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 重启`controller`节点上的Nova计算服务：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Restart the Nova compute service on the `compute` nodes:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 重启`compute`节点上的Nova计算服务：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Lastly, restart the `neutron-server` service on the `controller` node:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，重启`controller`节点上的`neutron-server`服务：
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Configuring the Neutron DHCP agent
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Neutron DHCP代理
- en: Neutron utilizes `dnsmasq`, a free and lightweight DNS forwarder and DHCP server,
    to provide DHCP services to networks. The `neutron-dhcp-agent` service is responsible
    for spawning and configuring `dnsmasq` and metadata processes for each network
    that leverages DHCP.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron利用`dnsmasq`，一个免费的轻量级DNS转发器和DHCP服务器，为网络提供DHCP服务。`neutron-dhcp-agent`服务负责为每个使用DHCP的网络启动和配置`dnsmasq`以及元数据进程。
- en: The DHCP driver is specified in the `/etc/neutron/dhcp_agent.ini` configuration
    file. The DHCP agent can be configured to use other drivers, but `dnsmasq` support
    is built-in and requires no additional setup. The default `dhcp_driver` value
    is `neutron.agent.linux.dhcp.Dnsmasq` and can be left unmodified.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP驱动程序在`/etc/neutron/dhcp_agent.ini`配置文件中指定。可以配置DHCP代理使用其他驱动程序，但内置了对`dnsmasq`的支持，并且无需额外设置。默认的`dhcp_driver`值为`neutron.agent.linux.dhcp.Dnsmasq`，可以保持不变。
- en: 'Other notable configuration options found in the `dhcp_agent.ini` configuration
    file include the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dhcp_agent.ini`配置文件中，还可以找到其他一些显著的配置选项：
- en: '`interface_driver`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`interface_driver`'
- en: '`enable_isolated_metadata`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable_isolated_metadata`'
- en: 'The `interface_driver` configuration option should be configured appropriately
    based on the Layer 2 agent chosen for your environment:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`interface_driver`配置选项应根据您环境中选择的二层代理进行适当配置：'
- en: '**Linux bridge**:   `neutron.agent.linux.interface.BridgeInterfaceDriver`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux桥接**: `neutron.agent.linux.interface.BridgeInterfaceDriver`'
- en: '**Open vSwitch**: `neutron.agent.linux.interface.OVSInterfaceDriver`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Open vSwitch**: `neutron.agent.linux.interface.OVSInterfaceDriver`'
- en: Both the Linux bridge and Open vSwitch drivers will be discussed in further
    detail in upcoming chapters. For now, the default value of `<none>` will suffice.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Linux桥接和Open vSwitch驱动程序将在接下来的章节中进一步讨论。目前，默认值`<none>`已足够。
- en: Only one interface driver can be configured at a time per agent.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 每个代理每次只能配置一个接口驱动程序。
- en: 'The `enable_isolated_metadata` configuration option is useful in cases where
    a physical network device such as a firewall or router serves as the default gateway
    for instances, but Neutron is still required to provide metadata services to those
    instances. When the L3 agent is used, an instance reaches the metadata service
    through the Neutron router that serves as its default gateway. An isolated network
    is assumed to be one in which a Neutron router is not serving as the gateway,
    but Neutron still handles DHCP requests for the instances. This is often the case
    when instances are leveraging flat or VLAN networks with physical gateway devices.
    The default value for `enable_isolated_metadata` is `False`. When set to `True`,
    Neutron can provide instances with a static route to the metadata service via
    DHCP in certain cases. More information on the use of metadata and this configuration
    can be found in *[Chapter 7](dcaa0beb-6648-4d55-9ea7-f4789315539f.xhtml)*, *Attaching
    Instances to Networks*. On the `controller` node, update the `enable_isolated_metadata`
    option in the DHCP agent configuration file located at `/etc/neutron/dhcp_agent.ini`
    to `True`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`enable_isolated_metadata`配置选项在物理网络设备（如防火墙或路由器）作为实例的默认网关，但仍需要Neutron为这些实例提供元数据服务的情况下非常有用。当使用L3代理时，实例通过作为其默认网关的Neutron路由器访问元数据服务。孤立网络假定为Neutron路由器不作为网关的网络，但Neutron仍处理实例的DHCP请求的情况。当实例利用带有物理网关设备的扁平或VLAN网络时，通常出现这种情况。`enable_isolated_metadata`的默认值为`False`。当设置为`True`时，Neutron可以通过DHCP在某些情况下为实例提供到元数据服务的静态路由。有关元数据的使用和此配置的更多信息，请参阅*[第7章](dcaa0beb-6648-4d55-9ea7-f4789315539f.xhtml)*，*将实例附加到网络*。在`controller`节点上，更新位于`/etc/neutron/dhcp_agent.ini`的DHCP代理配置文件中的`enable_isolated_metadata`选项为`True`：'
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Configuration options not mentioned here have sufficient default values and
    should not be changed unless your environment requires it.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此处未提及的配置选项具有充分的默认值，除非您的环境需要，否则不应更改。
- en: Restarting the Neutron DHCP agent
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新启动 Neutron DHCP 代理
- en: 'Use the following commands to restart the `neutron-dhcp-agent` service on the
    `controller` node and check its status:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在`controller`节点上重新启动`neutron-dhcp-agent`服务并检查其状态：
- en: '[PRE23]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output should resemble the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![](img/f7befff5-2ea0-46bb-9bb3-c772d28b3334.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7befff5-2ea0-46bb-9bb3-c772d28b3334.png)'
- en: 'The agent should be in an `active (running)` status. Use the `openstack network
    agent list` command to verify that the service has checked in:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 代理应处于`active (running)`状态。使用`openstack network agent list`命令验证服务是否已注册：
- en: '![](img/a9aea419-11a2-4f30-a2d4-37228ee90a70.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9aea419-11a2-4f30-a2d4-37228ee90a70.png)'
- en: A smiley face under the `Alive` column means that the agent is properly communicating
    with the `neutron-server` service.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Alive`列下的笑脸表示代理与`neutron-server`服务正常通信。
- en: Configuring the Neutron metadata agent
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Neutron 元数据代理
- en: OpenStack Compute provides a metadata service that enables users to retrieve
    information about their instances that can be used to configure or manage the
    running instance. **Metadata** includes information such as the hostname, fixed
    and floating IPs, public keys, and more. In addition to metadata, users can access
    **userdata** such as scripts and other bootstrapping configurations that can be
    executed during the boot process or once the instance is active. OpenStack Networking
    implements a proxy that forwards metadata requests from instances to the metadata
    service provided by OpenStack Compute.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack Compute提供了一个元数据服务，允许用户检索有关其实例的信息，这些信息可用于配置或管理运行中的实例。**元数据**包括主机名、固定和浮动IP、公钥等信息。除元数据外，用户还可以访问**用户数据**，如脚本和其他引导配置，这些配置可以在引导过程中或实例激活后执行。OpenStack
    Networking实现了一个代理，将实例的元数据请求转发到由OpenStack Compute提供的元数据服务。
- en: Instances typically access the metadata service over HTTP at `http://169.254.169.254`
    during the boot process. This mechanism is provided by `cloud-init`, a utility
    found on most cloud-ready images and available at the following URL: [https://launchpad.net/cloud-init](https://launchpad.net/cloud-init).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 实例通常在引导过程中通过 HTTP 访问元数据服务，地址为`http://169.254.169.254`。此机制由`cloud-init`提供，在大多数云准备的映像中可用，网址为：[https://launchpad.net/cloud-init](https://launchpad.net/cloud-init)。
- en: 'The following diagram provides a high-level overview of the retrieval of metadata
    from an instance when the `controller` node hosts networking services:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 下图概述了当`controller`节点托管网络服务时，从实例检索元数据的高级概述：
- en: '![](img/6851a731-a7a9-44ae-81c5-ac8cc919fed7.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6851a731-a7a9-44ae-81c5-ac8cc919fed7.png)'
- en: 'In the preceding diagram, the following actions take place when an instance
    makes a request to the metadata service:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示意图中，当实例向元数据服务发出请求时，会发生以下操作：
- en: An instance sends a request for metadata to `169.254.269.254` via HTTP
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例通过 HTTP 向 `169.254.269.254` 发送元数据请求
- en: The metadata request hits either the router or DHCP namespace depending on the
    route in the instance
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据请求根据实例中的路由，访问路由器或 DHCP 命名空间
- en: The metadata proxy service in the namespace sends the request to the Neutron
    metadata agent service via a Unix socket
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间中的元数据代理服务通过 Unix 套接字将请求发送给 Neutron 元数据代理服务
- en: The Neutron metadata agent service forwards the request to the Nova metadata
    API service
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neutron 元数据代理服务将请求转发给 Nova 元数据 API 服务
- en: The Nova metadata API service responds to the request and forwards the response
    to the Neutron metadata agent service
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nova 元数据 API 服务响应请求并将响应转发给 Neutron 元数据代理服务
- en: The Neutron metadata agent service sends the response back to the metadata proxy
    service in the namespace
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neutron 元数据代理服务将响应发送回命名空间中的元数据代理服务
- en: The metadata proxy service forwards the HTTP response to the instance
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据代理服务将 HTTP 响应转发给实例
- en: The instance receives the metadata and/or the user data and continues the boot
    process
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例接收元数据和/或用户数据，并继续启动过程
- en: 'For proper operation of metadata services, both Neutron and Nova must be configured
    to communicate together with a shared secret. Neutron uses this secret to sign
    the `Instance-ID` header of the metadata request to prevent spoofing. On the `controller`
    node, update the following metadata options in the `[neutron]` section of the
    Nova configuration file located at `/etc/nova/nova.conf`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保元数据服务的正常运行，Neutron 和 Nova 必须配置为使用共享密钥进行通信。Neutron 使用此密钥对元数据请求的 `Instance-ID`
    标头进行签名，以防止欺骗。在 `controller` 节点上，更新位于 `/etc/nova/nova.conf` 的 Nova 配置文件中的 `[neutron]`
    部分，以添加以下元数据选项：
- en: '[PRE24]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, update the `[DEFAULT]` section of the metadata agent configuration file
    located at `/etc/neutron/metadata_agent.ini` with the Neutron authentication details
    and the metadata proxy shared secret:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新位于 `/etc/neutron/metadata_agent.ini` 的元数据代理配置文件中的 `[DEFAULT]` 部分，添加 Neutron
    身份验证详细信息和元数据代理共享密钥：
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Configuration options not mentioned here have sufficient default values and
    should not be changed unless your environment requires it.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此处未提及的配置选项具有足够的默认值，除非您的环境需要，否则不应更改。
- en: Restarting the Neutron metadata agent
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重启 Neutron 元数据代理
- en: 'Use the following command to restart the `neutron-metadata-agent` and `nova-api`
    services on the `controller` node and to check the services'' status:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令重新启动 `controller` 节点上的 `neutron-metadata-agent` 和 `nova-api` 服务，并检查服务的状态：
- en: '[PRE26]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output should resemble the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '![](img/1c5649e2-d2d1-451c-bf78-f570601b3cde.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c5649e2-d2d1-451c-bf78-f570601b3cde.png)'
- en: 'The agent should be in an `active (running)` status. Use the `openstack network
    agent list` command to verify that the service has checked in:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 代理应处于 `active (running)` 状态。使用 `openstack network agent list` 命令验证服务是否已检查：
- en: '![](img/a2248299-e4a2-4223-8230-ebdbe09bde0e.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2248299-e4a2-4223-8230-ebdbe09bde0e.png)'
- en: A smiley face under the `Alive` column means that the agent is properly communicating
    with the `neutron-server` service.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Alive` 列下的笑脸符号表示代理正在与 `neutron-server` 服务正常通信。
- en: If the services do not appear or have `XXX` under the `Alive` column, check
    the respective log files located at `/var/log/neutron` for assistance in troubleshooting.
    More information on the use of metadata can be found in *[Chapter 7](dcaa0beb-6648-4d55-9ea7-f4789315539f.xhtml)*,
    *Attaching Instances to Networks*, and later chapters.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务未显示或在 `Alive` 列下显示 `XXX`，请检查位于 `/var/log/neutron` 的相关日志文件，以帮助故障排除。有关元数据使用的更多信息，请参阅
    *[第 7 章](dcaa0beb-6648-4d55-9ea7-f4789315539f.xhtml)*、*将实例连接到网络* 以及后续章节。
- en: Interfacing with OpenStack Networking
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 OpenStack 网络接口
- en: The OpenStack Networking APIs can be accessed in a variety of ways, including
    via the Horizon dashboard, the `openstack` and `neutron` clients, the Python SDK,
    HTTP, and other methods. The following few sections will highlight the most common
    ways of interfacing with OpenStack Networking.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多种方式访问 OpenStack 网络 API，包括通过 Horizon 控制面板、`openstack` 和 `neutron` 客户端、Python
    SDK、HTTP 以及其他方法。接下来的几个部分将重点介绍与 OpenStack 网络接口的最常见方式。
- en: Using the OpenStack command-line interface
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenStack 命令行接口
- en: Prior to the `openstack` command-line client coming on the scene, each project
    was responsible for maintaining its own client. Each client often used its own
    syntax for managing objects and the lack of consistency between clients made life
    for users and operators difficult. The `openstack` client provides a consistent
    naming structure for commands and arguments, along with a consistent output format
    with optional parsable formats such as csv, json, and others. Not all APIs and
    services are supported by the `openstack` client, however, which may mean that
    a project-specific client is required for certain actions.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `openstack` 命令行客户端问世之前，每个项目负责维护自己的客户端。每个客户端通常使用自己独特的语法来管理对象，并且不同客户端之间缺乏一致性，给用户和运维人员带来了很多困难。`openstack`
    客户端为命令和参数提供了一致的命名结构，以及一个一致的输出格式，支持如 csv、json 等可选的可解析格式。然而，并非所有 API 和服务都由 `openstack`
    客户端支持，这可能意味着某些操作需要项目特定的客户端。
- en: 'To invoke the `openstack` client, issue the `openstack` command at the Linux
    command line:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用 `openstack` 客户端，请在 Linux 命令行中输入 `openstack` 命令：
- en: '![](img/1bf6ed78-d603-4915-9ff0-7a17577e9ea6.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1bf6ed78-d603-4915-9ff0-7a17577e9ea6.png)'
- en: The `openstack` shell provides commands that can be used to create, read, update,
    and delete the networking configuration within the OpenStack cloud. By typing
    a question mark or `help` within the `openstack` shell, a list of commands can
    be found. Additionally, running `openstack help` from the Linux command line provides
    a brief description of each command's functionality.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`openstack` shell 提供了可以用来创建、读取、更新和删除 OpenStack 云中网络配置的命令。通过在 `openstack` shell
    中输入问号或 `help`，可以找到命令列表。此外，从 Linux 命令行运行 `openstack help` 也会提供每个命令功能的简要描述。'
- en: Using the Neutron command-line interface
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Neutron 命令行界面
- en: 'Neutron provides a command-line client for interfacing with its API. Neutron
    commands can be run directly from the Linux command line, or the Neutron shell
    can be invoked by issuing the `neutron` command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 提供了一个命令行客户端，用于与其 API 进行交互。Neutron 命令可以直接在 Linux 命令行中运行，或者可以通过输入 `neutron`
    命令来启动 Neutron shell：
- en: '![](img/a551687e-ada2-47b4-905f-bb1d10a63d8a.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a551687e-ada2-47b4-905f-bb1d10a63d8a.png)'
- en: You must source the credentials file prior to invoking the `openstack` and `neutron`
    clients or an error will occur.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `openstack` 和 `neutron` 客户端之前，必须先加载凭证文件，否则会发生错误。
- en: The `neutron` shell provides commands that can be used to create, read, update,
    and delete the networking configuration within the OpenStack cloud. By typing
    a question mark or `help` within the Neutron shell, a list of commands can be
    found. Additionally, running `neutron help` from the Linux command line provides
    a brief description of each command's functionality.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`neutron` shell 提供了可以用来创建、读取、更新和删除 OpenStack 云中网络配置的命令。通过在 Neutron shell 中输入问号或
    `help`，可以找到命令列表。此外，从 Linux 命令行运行 `neutron help` 也会提供每个命令功能的简要描述。'
- en: The `neutron` client has been deprecated in favor of the `openstack` command-line
    client. However, certain functions, including LBaaS-related commands, are not
    yet available within the `openstack` client and must be managed using the `neutron`
    client. In future releases of OpenStack, the `neutron` client will no longer be
    available.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`neutron` 客户端已被弃用，推荐使用 `openstack` 命令行客户端。然而，某些功能，包括与 LBaaS 相关的命令，在 `openstack`
    客户端中尚不可用，必须使用 `neutron` 客户端进行管理。在未来版本的 OpenStack 中，`neutron` 客户端将不再可用。'
- en: Many of the commands listed within the client's `help` listing will be covered
    in subsequent chapters of this book.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端 `help` 列表中列出的许多命令将在本书的后续章节中介绍。
- en: Using the OpenStack Python SDK
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenStack Python SDK
- en: 'The OpenStack Python SDK is available on PyPI and can be installed with the
    following command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack Python SDK 可以在 PyPI 上找到，并可以通过以下命令进行安装：
- en: '[PRE27]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Documentation for the SDK is available at the following URL: [https://developer.openstack.org/sdks/python/openstacksdk/users/index.html](https://developer.openstack.org/sdks/python/openstacksdk/users/index.html).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: SDK 的文档可以通过以下网址访问：[https://developer.openstack.org/sdks/python/openstacksdk/users/index.html](https://developer.openstack.org/sdks/python/openstacksdk/users/index.html)。
- en: Using the cURL utility
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 cURL 工具
- en: 'The OpenStack Networking API is REST-based and can be manipulated directly
    using HTTP. To make API calls using HTTP, you will need a token. Source the OpenStack
    credentials file and use the `openstack token issue` command shown here to retrieve
    a token:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 网络 API 是基于 REST 的，可以通过 HTTP 直接进行操作。要使用 HTTP 调用 API，你需要一个令牌。加载 OpenStack
    凭证文件，并使用下面显示的 `openstack token issue` 命令来获取令牌：
- en: '![](img/79cf5e5e-67d9-4d4a-a92f-e6f8d7bdab77.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79cf5e5e-67d9-4d4a-a92f-e6f8d7bdab77.png)'
- en: The `--fit-width` argument is not necessary in normal operations, but helps
    make the token ID manageable for demonstration purposes.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`--fit-width` 参数在正常操作中不是必需的，但为了演示的方便，它有助于使令牌 ID 更易于管理。'
- en: 'To get a list of networks, the command should resemble the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取网络列表，命令应类似于以下内容：
- en: '[PRE28]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output will resemble the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![](img/31aba40b-482e-4d7a-bd35-62fa9adcdcbc.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31aba40b-482e-4d7a-bd35-62fa9adcdcbc.png)'
- en: In this example, the Neutron API returned a 200 OK response in json format.
    No networks currently exist, so an empty list was returned. Neutron returns HTTP
    status codes that can be used to determine if the command was successful.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，Neutron API 返回了一个 200 OK 的响应，格式为 json。目前没有网络，因此返回了一个空列表。Neutron 返回的 HTTP
    状态码可以用来判断命令是否成功。
- en: The OpenStack Networking API is documented at the following URL: [https://developer.openstack.org/api-ref/network/v2/](https://developer.openstack.org/api-ref/network/v2/).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 网络 API 文档可以通过以下网址查看：[https://developer.openstack.org/api-ref/network/v2/](https://developer.openstack.org/api-ref/network/v2/)。
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: OpenStack Networking provides an extensible plugin architecture that makes implementing
    new network features possible. Neutron maintains the logical network architecture
    in its database, and network plugins and agents on each node are responsible for
    configuring virtual and physical network devices accordingly. Using the Modular
    Layer 2 (ML2) plugin, developers can spend less time implementing core Neutron
    API functionality and more time developing value-added features.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 网络提供了一个可扩展的插件架构，使得实现新的网络功能成为可能。Neutron 在其数据库中维护逻辑网络架构，而每个节点上的网络插件和代理负责相应地配置虚拟和物理网络设备。通过使用模块化第二层（ML2）插件，开发人员可以减少实现核心
    Neutron API 功能的时间，更多地专注于开发增值功能。
- en: Now that OpenStack Networking services have been installed across all nodes
    in the environment, configuration of the Mechanism driver is all that remains
    before instances can be created. In the following two chapters, you will be guided
    through the configuration of the ML2 plugin and both the Linux bridge and Open
    vSwitch drivers and agents. We will also explore the differences between Linux
    bridge and Open vSwitch agents in terms of how they function and provide connectivity
    to instances.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，OpenStack 网络服务已在环境中的所有节点上安装完毕，配置机制驱动程序是创建实例之前唯一需要完成的工作。在接下来的两章中，您将学习如何配置
    ML2 插件以及 Linux bridge 和 Open vSwitch 驱动程序及代理。我们还将探讨 Linux bridge 和 Open vSwitch
    代理在功能和为实例提供连接方面的差异。
