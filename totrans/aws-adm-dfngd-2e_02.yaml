- en: Managing EC2 with Systems Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: EC2 instances have long been a core service provided by AWS and EC2 still continues
    to evolve with newer sets of features and instance types added every year. One
    such really awesome service added during AWS re:Invent 2016 was the EC2 Systems
    Manager!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be learning a lot about the EC2 Systems Manager and
    its associated sub-services; namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run Command**: Service that allows you to execute commands directly on an
    EC2 Systems Manager enabled EC2 instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**State Manager**: Allows you to specify a desired state for an EC2 Systems
    Manager enabled EC2 instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Patch management**: Provides administrators with the ability to manage the
    deployment of patches over EC2 instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automations**: Allows administrators to automate the deployment of certain
    tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inventory**: Service that collects and manages a list of software inventory
    from your managed EC2 instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sound exciting? Then what are we waiting for? Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing EC2 Systems Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, EC2 Systems Manager is a management service that provides
    administrators and end users with the ability to perform a rich set of tasks on
    their EC2 instance fleet such as periodically patching the instances with a predefined
    set of baseline patches, tracking the instances' configurational state, and ensuring
    that the instance stays compliant with a state template, runs scripts and commands
    over your instance fleet with a single utility, and much, much more! The EC2 Systems
    Manager is also specifically designed to help administrators manage hybrid computing
    environments, all from the comfort and ease of the EC2 Systems Manager dashboard.
    This makes it super efficient and cost effective as it doesn't require a specialized
    set of software or third-party services, which cost a fortune, to manage your
    hybrid environments!
  prefs: []
  type: TYPE_NORMAL
- en: But how does AWS achieve all of this in the first place? Well, it all begins
    with the concept of managed instances. A managed instance is a special EC2 instance
    that is governed and managed by the EC2 Systems Manager service. Each managed
    instance contains a **Systems Manager** (**SSM**) agent that is responsible for
    communicating and configuring the instance state back to the Systems Manager utility.
    Windows Server 2003–2012 R2 AMIs, Windows Server 2003–2012 R2 AMIs will automatically
    have the SSM agent installed. For Linux instances, however, the SSM agent is not
    installed by default. Let's quickly look at how to install this agent and set
    up our first Dev instance in AWS as a managed instance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the SSM agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to install and configure an SSM agent on a new
    Linux instance, which we shall call as a Dev instance, and then verify it's working
    by streaming the agent's log files to Amazon CloudWatch Logs. So let's get busy!
  prefs: []
  type: TYPE_NORMAL
- en: Configuring IAM Roles and policies for SSM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we need to create and configure IAM Roles for our EC2 Systems Manager
    to process and execute commands over our EC2 instances. You can either use the
    Systems Manager's managed policies or alternatively create your own custom roles
    with specific permissions. For this part, we will be creating a custom role and
    policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we first create a custom IAM policy for Systems Manager managed
    instances:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your AWS account and select the IAM option from the main dashboard,
    or alternatively, open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the navigation pane, select Policies. This will bring up a list of
    existing policies currently provided and supported by AWS out of the box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `SSM` in the Policy Filter to view the list of policies currently provided
    for SSM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the AmazonEC2RoleforSSM policy and copy its contents to form a new policy
    document. Here is a snippet of the policy document for your reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the policy is copied, go back to the Policies dashboard and click on the Create
    policy option. In the Create policy wizard, select the Create Your Own Policy option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a suitable Policy Name and paste the copied contents of the AmazonEC2RoleforSSM policy
    into the Policy Document section. You can now tweak the policy as per your requirements,
    but once completed, remember to select the Validate Policy option to ensure the
    policy is semantically correct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once completed, select Create Policy to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this step completed, you now have a custom IAM policy for System Manager
    managed instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next important policy that we need to create is the custom IAM user policy
    for our Systems Manager. This policy will essentially scope out which particular
    user can view the System Manager documents as well as perform actions on the selected
    managed instances using the System Manager''s APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: Once again, log in to your AWS IAM dashboard and select the Policies option
    as performed in the earlier steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `SSM` again in the Policy Filter and select the AmazonSSMFullAccess policy.
    Copy its contents and create a custom SSM access policy by pasting the following
    snippet in the new policy''s Policy Document section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember to *validate* the policy before completing the creation process. You
    should now have two custom policies, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8702759c-645f-4e77-ac15-978e6db0705c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the policies created, we now simply create a new instance profile role,
    attach the full access policy to the new role, and finally verify the trust relationship
    between Systems Manager and the newly created role:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new role, from the IAM management dashboard, select the Roles option
    from the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Create Role wizard, select the EC2 option from the AWS service role
    type, as shown in the following screenshot. Next, select the EC2 option as the
    *use case* for this activity and click on the Next: Permissions button to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/032e292e-dc33-46f4-8685-c5c172b2858c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Attach permissions policy page, filter and select the ssm-managedInstances policy
    that we created at the beginning of this exercise. Click on Review once done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, provide a suitable Role name in the Review page and click on Create
    role to complete the procedure!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the role in place, we now need to verify that the IAM policy for your
    instance profile role includes `ssm.amazonaws.com` as a trusted entity:'
  prefs: []
  type: TYPE_NORMAL
- en: To verify this, select the newly created role from the IAM Roles page and click
    on the Trust relationships tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, choose the Edit Trust Relationship option and paste the following snippet
    in the policy editor, as shown. Remember to add both *EC2 and SSM* as the trusted
    services and not just one of them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With the new trust policy in place, click on Update Trust Policy to complete
    the process. Congratulations!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are almost done with configuring the Systems Manager! A final step remains,
    where we need to attach the second policy that we created (SSM full access) to
    one of our IAM users. In this case, I've attached the policy to one of my existing
    users in my AWS environment, however, you can always create a completely new user
    dedicated to the Systems Manager and assign it the SSM access policy as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the policies out of the way, we can now proceed with the installation and
    configuration of the SSM agent on our simple Dev instance.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the SSM agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed at the beginning of the chapter, the Systems Manager or the SSM
    agent is a vital piece of software that needs to be installed and configured on
    your EC2 instances in order for Systems Manager to manage it. At the time of writing,
    SSM agent is supported on the following sets of operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2003 (including R2)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2008 (including R2)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2012 (including R2)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2016
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux** (64-bit and 32-bit):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Linux 2014.09, 2014.03 or later
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu Server 16.04 LTS, 14.04 LTS, or 12.04 LTS
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat Enterprise Linux (RHEL) 6.5 or later
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CentOS 6.3 or later
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux** (64-bit only):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Linux 2015.09, 2015.03 or later
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat Enterprise Linux 7.x or later
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CentOS 7.1 or later
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SUSE Linux Enterprise Server 12 or higher
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install the agent on a brand new instance, such as the one we will create
    shortly, you simply need to ensure that the instance is provided with the necessary
    SSM IAM role that we created in the previous section, as well as to provide the
    following code snippet in the User data section of your instance''s configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The user data script varies from OS to OS. In my case, the script is intended
    to run on an Ubuntu Server 14.04 LTS (HVM) instance. You can check your SSM agent
    install script at [http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-ssm-agent.html#sysman-install-startup-linux](http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-ssm-agent.html#sysman-install-startup-linux).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the instance is up and running, SSH into the instance and verify whether
    your SSM agent is up and running or not using the following command. Remember,
    the following command will also vary based on the operating system that you select
    at launch time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the agent running, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5695ebbb-2bb0-4863-8985-3e426062dc1e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can, optionally, even install the agent on an existing running EC2 instance
    by completing the following set of commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'For an instance running on the Ubuntu 16.04 LTS operating system, we first
    create a temporary directory to house the SSM agent installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, download the operating-specific SSM agent installer using the `wget` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, execute the installer using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can additionally verify the agent''s execution by tailing either of these
    log files as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the SSM agent to stream logs to CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a particularly useful option provided by the SSM agent, especially when
    you don't want to log in to each and every instance and troubleshoot issues. Integrating
    the SSM agent's logs with CloudWatch enables you to have all your logs captured
    and analyzed at one central location, which undoubtedly ends up saving a lot of
    time, but it also brings additional benefits such as the ability to configure
    alarms, view the various metrics using CloudWatch dashboard, and retain the logs
    for a much longer duration.
  prefs: []
  type: TYPE_NORMAL
- en: 'But before we get to configuring the agent, we first need to create a separate
    log group within CloudWatch that will stream the agent logs from individual instances
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: To do so, from the AWS Management Console, select the CloudWatch option, or
    alternatively, click on the following link to open your CloudWatch dashboard from
    [https://console.aws.amazon.com/cloudwatch/](https://console.aws.amazon.com/cloudwatch/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, select the Logs option from the navigation pane. Here, click on Create
    log group and provide a suitable name for your log group, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/18b6d43f-6531-4631-b3c5-b3055ad2b118.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once completed, SSH back into your Dev instance and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, using your favorite editor, open the newly copied file and paste the
    following content in it. Remember to swap out the `<CLOUDWATCH_LOG_GROUP_NAME>`
    field with the name of your own log group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With the changes made, save and exit the editor. Now have a look at your newly
    created log group using the CloudWatch dashboard; you should see your SSM agent's
    error logs, if any, displayed there for easy troubleshooting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this step completed, we have now successfully installed and configured
    our EC2 instance as a Managed Instance in Systems Manager. To verify whether your
    instance has indeed been added, select the Managed Instance option provided under
    the Systems Manager Shared Resources section from the navigation pane of your
    EC2 dashboard; you should see your instance listed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1c5c597-e96b-4903-bfec-b37f661e9d47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next section, we will deep dive into the various features provided as
    a part of the Systems Manager, starting off with one of the most widely used:
    Run Command!'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Run Command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Run Command is an awesome feature of Systems Manager, which basically allows
    you to execute remote commands over your managed fleet of EC2 instances. You can
    perform a vast variety of automated administrative tasks, such as installing software
    or patching your operating systems, executing shell commands, managing local groups
    and users, and much more! But that's not all! The best part of using this feature
    is that it allows you to have a seamless experience when executing scripts, even
    over your on-premises Windows and Linux operating systems, whether they be running
    on VMware ESXi, Microsoft Hyper-V, or any other platforms. And the cost of all
    this? Well, it's absolutely free! You only pay for the EC2 instances and other
    AWS resources that you create and nothing more!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a brief list of a few commonly predefined commands provided by Run
    Command along with a short description:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AWS-RunShellScript`: Executes shell scripts on remote Linux instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS-UpdateSSMAgent`: Used to update the Amazon SSM agent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS-JoinDirectoryServiceDomain`: Used to join an instance to an AWS Directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS-RunPowerShellScript`: Executes PowerShell commands or scripts on Windows
    instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS-UpdateEC2Config`: Runs an update to the EC2Config service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS-ConfigureWindowsUpdate`: Used to configure Windows Update settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS-InstallApplication`: Used to install, repair, or uninstall software on
    a Windows instance using an MSI package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS-ConfigureCloudWatch`: Configures Amazon CloudWatch Logs to monitor applications
    and systems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we proceed with the actual execution of the Run Commands, it is important
    to remember that the Run Command requires both the SSM agent as well as the right
    set of permissions and roles to work with. So if you haven't performed the SSM
    agent's installation or the setup of the IAM polices and roles, then now would
    be a good time to revisit this!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, let''s look at a simple way of executing a simple set of commands
    for our newly added managed instance:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, first log in to the AWS Management Console and select the EC2
    service from the main dashboard. Alternatively, you can even launch the EC2 dashboard
    via [https://console.aws.amazon.com/ec2/](https://console.aws.amazon.com/ec2/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the navigation pane, select the Run Command option from the Systems
    Manager Services section. You will be taken to the Run Command dashboard where
    you will need to select the Run a command option to get started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Run a command page, the first thing we need to do is select a Command
    document that we can work with. A command document is basically a statement or
    set of information about the command you want to run on your managed instances.
    For this scenario, we will select the `AWS-RunShellScript` command document to
    start with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next Select Targets by section, you can optionally choose whether you
    wish to execute your command document manually by selecting individual instances
    or specify a particular group of instances identified by their *tag* name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Execute on criteria provides you with the option to select either the Targets or
    Percent of instances you wish to execute the command document on. Selecting Targets allows
    you to specify the exact number of instances that should be allowed to execute
    the command document. The execution occurs on each instance one at a time. Alternatively,
    if you select the Percent option, then you can provide a percentage value of the
    instances that should be allowed to run the command at a single time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can optionally set the Stop after x errors to halt the execution of your
    command document in case an instance encounters an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, you can paste your execution code or shell script in the Commands section
    as shown in the following screenshot. In this case, we are running a simple script
    that will install and configure a Zabbix monitoring agent on our Dev instance
    for easy monitoring of our EC2 resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5246724-04a4-4584-8afd-49c127f8e9e7.png)'
  prefs: []
  type: TYPE_IMG
- en: You can learn more about Zabbix and its features at [https://www.zabbix.com/product](https://www.zabbix.com/product).
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy and paste the following code snippet or, alternatively, tweak it according
    to the EC2 instance operating system that you may have selected for this exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the options provide other configurational items such as setting
    up an optional *working directory* where the commands get executed on the remote
    managed instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Additionally, you can even choose to Enable SNS notifications as well as write
    your command output logs to S3 using the Advanced Options sections, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d89394cd-20bf-4ca9-a585-6acabdcd41cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the configuration items are filled in, simply select the Run option to
    start the execution of your command document. During this time, Systems Manager
    will invoke the execution of your supplied commands over the list of managed instances
    that you provided. If there is an error during the execution, Systems Manager
    will halt the execution and display the Status of your output as either Success or
    Failed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Simple isn't it? You can use this same mechanism to manage and execute commands
    remotely over your fleet of EC2 instances with ease and consistency and even leverage
    the AWS CLI to perform the same set of actions we have explored in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, we will be learning a bit about yet another really useful
    feature provided by Systems Manager: State Manager.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with State Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**State Manager** is a powerful tool that helps to govern and manage the configuration
    of a managed system. For example, by using State Manager you can enforce a particular
    firewall rule for your fleet of managed instances and set that as the required
    State that needs to be enforced at all times. If the rules change outside of State
    Manager, it will automatically revert to match the required state''s configuration,
    thus maintaining compliance and enforcing standardization over your environment.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with State Manager is quite simple and straightforward. You start off
    by selecting a state document (JSON based) that specifies the settings you need
    to configure or maintain your EC2 instances. These documents come predefined and
    you can create customized versions of them. With the document created, you can
    then select the individual managed instances, which can be either EC2 instances
    or even on-premises virtual machines, as well as specify a schedule for when and
    how often you wish to apply these states. It's that simple!
  prefs: []
  type: TYPE_NORMAL
- en: But before we go ahead with the invocation of our State Manager, let's first
    understand the concept of state documents a bit better as these documents are
    the foundation on which your Systems Manager works.
  prefs: []
  type: TYPE_NORMAL
- en: 'State documents are nothing more than simple JSON-based steps and parameters
    that define certain actions to be performed by Systems Manager. AWS provides dozens
    of such documents out of the box, which can be used to perform a variety of tasks
    such as patching your instances, configuring certain packages, configuring the
    CloudWatch Log agents, and much more! Additionally, you can even create your own
    custom document as well! There are three types of documents that are supported
    by Systems Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Command**: Command documents are leveraged by the Run Command to execute
    commands over your managed instances. Alternatively, State Manager uses the command
    documents to apply certain policies as well. These actions can be run on one or
    more targets at any point during the life cycle of an instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Policy**: Used by the State Manager, policy documents are used to enforce
    a policy on your managed instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: These documents are more often used by the automation service
    within Systems Manager to perform common maintenance and deployment tasks. We
    will be learning more about automation documents a bit later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To view System Manager''s predefined documents, from the EC2 dashboard navigation
    pane, select the Documents option under the Systems Manager Shared Resources section.
    Here you can use any of the predefined documents as per your requirements for
    State Manager, however let''s quickly create a very simple custom document based
    on the aws:configurePackage definition:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create your own document, select the Create Document option from the Documents dashboard
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cec7da8e-5c35-45ff-9503-5e36501d5c67.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Create Document wizard, start off by providing a suitable Name for your
    document. In this case, I've provided the name `yoyodev-ssm-configure-packages`.
    Do note that the name cannot contain any spaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, from the Document Type dropdown, select Command as the option type and
    paste the following JSON code in the Content section as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With the document pasted, you can now click on Create Document to complete the
    document creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The document comprises two primary sections: a `parameters` section, which
    contains a list of actions to be performed by the document, followed by a `mainSteps` section
    that specifies the action, which in this case is the `aws:configurePackage` to
    be performed by the document. In this case, the document when invoked will ask
    the user to select either `apache2`, `mysql-server`, or `php` from the dropdown
    list followed by an optional version number of the software you select. You can
    then select whether you wish to install or uninstall this particular package from
    your fleet of managed EC2 instances and simply execute the document when done!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that your custom document is created, let''s quickly configure the State
    Manager to invoke it:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Systems Manager Services section in the EC2 navigation pane, select
    the State Manager. In the State Manager dashboard, select the Create Association option
    to get started with configuring State Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a suitable Association Name for your association. Note that this is
    an optional field and you can skip it if you want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the Select Document section, filter and select the custom document
    that we created in our earlier step. On selection, you will notice the subfields
    change according to what we provided as parameters in the document. Let's quickly
    configure this and create our association.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Targets section, select your Dev instance or any of your managed instances
    which you wish to associate with this State Manager. Finally, go ahead and configure
    the Schedule that will trigger the association based on either a CRON or a rate
    schedule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Last but not the least, configure the Action and select the appropriate package
    Name from the Parameters section as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34bde6ea-fa5a-40ac-9f33-de2f940a6ee7.png)'
  prefs: []
  type: TYPE_IMG
- en: You can optionally enable the Write to S3 checkbox to log the State Manager's
    execution in your own custom S3 bucket. For this scenario, I have not selected
    this option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, complete the State Manager's association process by selecting the Create
    Association option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now view and modify your associations using the State Manager dashboard.
    Alternatively, you can even choose to enable your association immediately by selecting
    the Apply Association Now option as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will be looking at yet another simple and easy-to-use
    feature provided by Systems Manager that helps automate simple instance and deployment
    tasks, called System Manager Automation!
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying instance maintenance using System Manager Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System Manager Automation is a managed service that provides a single, centralized
    interface for executing and monitoring commonly occurring instance management
    tasks such as patching, performing backups, executing scripts, and much more.
    Let's first get started by understanding a few necessary prerequisites that are
    required to be configured in order for automation to work in your environments.
  prefs: []
  type: TYPE_NORMAL
- en: Working with automation documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed briefly during the introduction to the State Manager service,
    automation documents are simple JSON-based documents that are designed to help
    you get started with the automation service quickly and efficiently. You can leverage
    the predefined automation documents or, alternatively, create your own set. In
    this section, we will look at how to leverage an existing automation document
    to patch your Dev EC2 instance and create a new AMI from it:'
  prefs: []
  type: TYPE_NORMAL
- en: From the EC2 Management Console, select the Documents option from the Systems
    Manager Shared Resources section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Documents dashboard, you can filter and view only the documents that
    have Automation set as the Document Type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select AWS-UpdateLinuxAmi and click on the Content tab to view the automation
    document as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1d2b27c-c047-4b57-a505-0bdd9ce72e45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The AWS-UpdateLinuxAmi document comprises five distinctive steps, each explained
    briefly here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**launchInstance:** This step basically launches a new EC2 instance using your
    Systems Manager IAM instance profile as well as with a user data script that will
    install the latest copy of the SSM agent on this instance. The SSM agent is vital
    as it will enable the next steps to be executed using the Run Command as well
    as State Manger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**updateOSSoftware:** With the instance launched and the SSM agent installed,
    the next step is responsible for updating the packages in your Linux instance.
    This is done by executing an update script that methodologically updates the packages
    and any other software that may be marked for upgrades. You also get the capability
    to include or exclude a particular set of packages from this step using the `IncludePackages` and
    `ExcludePackages` parameters respectively. If no packages are included, the program
    updates all available packages on the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stopInstance:** Once the instance is updated with the latest set of packages,
    the next action simply powers off the instance so that it can be prepped for the
    image creation process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**createImage:** This step creates a new AMI from your updated Linux instance.
    The image contains a descriptive name that links it to the source ID and creation
    time of the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**terminateInstance**: The final step in the automation document, this step
    essentially cleans up the execution by terminating the running Linux instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at few simple steps using which we can invoke this particular automation
    document manually using the automation dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Patching instances using automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will be manually invoking the AWS-UpdateLinuxAmi automation
    document for patching our Linux instance and later creating a new AMI out of it:'
  prefs: []
  type: TYPE_NORMAL
- en: To do this, first select the Automations option present under the Systems Manager
    Services section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Automations dashboard, select the Run automation document option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Document name field, select the AWS-UpdateLinuxAmi document and populate
    the required fields in the Input parameters section as described here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SourceAmiId`: Provide the source Amazon Machine Image ID from which the new
    instance will be deployed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InstanceIamRole`: Provide the IAM role name that enables Systems Manager to
    manage the instance. We created this role earlier during the start of this chapter
    as a part of SSM''s prerequisites.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AutomationAssumeRole`: Provide the ARN of the IAM role that allows automation
    to perform the actions on your behalf.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TargetAmiName`: This will be the name of the new AMI created as a part of
    this automation document. The default is a system-generated string including the
    source AMI ID and the creation time and date.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InstanceType`: Specify the instance type of instance to launch for the AMI
    creation process. By default, the *t2.micro* instance type is selected.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PreUpdateScript`: You can additionally provide the URL of a script to run
    before any updates are applied. This is an optional field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PostUpdateScript`: Provide an optional post update script URL of a script
    to run after package updates are applied.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IncludePackages`: Include specific packages to be updated. By default, all
    available updates are applied.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExcludePackages`: Provide names of specific packages that you wish to exclude
    from the updates list.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the fields populated, simply select the Run automation option as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4819c1f5-bde9-4057-a149-a11fefa7f420.png)'
  prefs: []
  type: TYPE_IMG
- en: The automation document takes a couple of minutes to completely execute. You
    can verify the output of the execution using the Automations dashboard as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Simply select your automation job Execution ID to view the progress of each
    individual step as shown in the following screenshot. Optionally, you can verify
    the output of each step by selecting the adjoining View Outputs link as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5314ef7f-ddf0-417f-b9ad-377db09075b1.png)'
  prefs: []
  type: TYPE_IMG
- en: With this completed, you can now run similar automation tasks by creating your
    own automation documents and executing them using the steps mentioned herein.
    But what if you wanted to trigger these steps based on some events or schedules?
    Well, that's exactly what we will look into in the next section, *Triggering automation
    using CloudWatch schedules and events*.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering automation using CloudWatch schedules and events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although you can trigger automation documents manually, it's far better to either
    schedule or automate the execution of automation jobs using CloudWatch schedules
    and events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first understand how you can leverage CloudWatch events to trigger simple
    notifications of Systems Manager Automation events. These events can be used to
    notify you of whether your automation task succeeded, failed, or simply timed
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: First, log in to the CloudWatch dashboard. Alternatively, you can open CloudWatch
    via [https://console.aws.amazon.com/cloudwatch/](https://console.aws.amazon.com/cloudwatch/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the navigation pane, select the Events option to bring up the Create
    rule page. Here, select Event Pattern from the Event Source section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this done, we now need to build our event source. To do so, from the Service
    Name drop-down list, search and select the option EC2 Simple Systems Manager (SSM),
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9a11327e-80a5-4ce8-a0eb-867f00653dbb.png)'
  prefs: []
  type: TYPE_IMG
- en: With the service selected, you can now opt to select a corresponding SSM Event
    Type as well, for example in this case I wish to be notified when a particular
    Automation task fails. So in the Event Type drop-down list, I've selected the
    Automation option. You can alternatively select other SSM services as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the detail type section, I've opted to go for the EC2 Automation Execution
    Status-change Notification option. Correspondingly, I've also selected Failed as
    the Specific status(es) for my event. This means that if and when a failed status
    event is generated as a result of an automation job, it will trigger a corresponding
    action which can be as simple as sending a notification using an SNS service or
    even triggering a corresponding Lambda function to perform some form of remediation
    action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your Event Pattern Preview should resemble something similar to the snippet
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, you can even configure a CRON expression or fixed rate of execution
    of your automation jobs by selecting the Schedule option in the Event Source section:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide a suitable Cron expression depending on your requirements, for example,
    I wish to run the AWS-UpdateLinuxAmi automation document every Sunday at 10 P.M.
    UTC. In this case, the CRON expression will become `0,18,?,*,SUN,*`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the schedule configured, move on to the Targets section and select the
    SSM Automation option from the Targets drop-down list as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/423dd317-ec1f-422a-b722-0665683cf405.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, configure the AWS-UpdateLinuxAmi parameters as we discussed earlier, and
    once the desired fields are populated, click on Add target* to complete the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this step completed, you can now instantaneously trigger your automation
    jobs based on events as well as schedules, all powered by CloudWatch! Amazing
    isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final section, we will be learning a bit about yet another simple
    and easy to use SSM service that enables you to manage and patch your instances
    with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Managing instance patches using patch baseline and compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regularly patching your instances with the right set of security patches is
    an important activity that can take up a lot of time and effort if performed manually
    on each individual instance. Luckily, AWS provides a really efficient and easy
    way of automating the patching of your managed instances using the concept of
    Patch Manager services, provided as an out-of-the-box capability with SSM.
  prefs: []
  type: TYPE_NORMAL
- en: As an administrator, all you need to do is scan your instances for missing patches
    and leverage Patch Manager to automatically remediate the issues by installing
    the required set of patches. You can, alternatively, even schedule the patching
    of your managed instance or group of instances with the help of SSM's maintenance
    window tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore a quick and easy way of creating a unique patch
    baseline for our Dev instances and later create and associate a maintenance window
    for this, all using the EC2 Management dashboard. So let's get started with this
    right away!
  prefs: []
  type: TYPE_NORMAL
- en: 'First up, you will need to ensure that your instance has the required set of
    IAM Roles as well as the SSM agent installed and functioning as described at the
    beginning of this chapter. With these basics out of the way, we first need to
    configure the patch baseline with our set of required patches:'
  prefs: []
  type: TYPE_NORMAL
- en: To do so, launch your EC2 dashboard and select the Patch Baselines option from
    the Systems Manager Services section. Patch Manager includes a default patch baseline
    for each operating system supported by Patch Manager. This includes Windows Server
    2003 to 2016, Ubuntu, RHEL, CentOS, SUSE, and even Amazon Linux as well. You can
    use these default patch baselines or alternatively you can create one based on
    your requirements. Here, let's quickly create a custom baseline for our Dev instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Create Patch Baseline option to bring up the Create Patch Baseline dashboard.
    Here, provide a suitable Name for your custom baseline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Operating System, select Ubuntu as the OS choice. You will notice the
    patching rules change accordingly based on the OS type you select.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in the Approval Rules section, create suitable patch baseline rules depending
    on your requirements. For example, I wish to set the Python packages to an Important priority
    and with a High compliance level as well. Similarly, you can add up to 10 such
    rules for one baseline, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b67929e-a4f1-47cc-bf45-075528e2e889.png)'
  prefs: []
  type: TYPE_IMG
- en: In the final section, Patch Exceptions, you can optionally mention the Approved
    Packages, Rejected Packages, and the Compliance Level for these patches collectively.
    In this case, I've left these values as their defaults and selected the Create
    Patch Baseline option to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your new patch baseline created, you now have the option to promote the
    same as the Default Baseline by selecting the new baseline from the Patch Baselines dashboard
    and clicking on the Set Default Patch Baseline option from the Actions tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on to the next part of this walkthrough, we will now go ahead and set
    up the maintenance window for our newly created patch baseline:'
  prefs: []
  type: TYPE_NORMAL
- en: To do so, select the Maintenance Windows option from the Systems Manager Shared
    Resources section. Click on Create maintenance window to get started with the
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Create maintenance window page, provide a suitable Name for your window
    as well as an optional Description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in the Specify schedule section, you can opt to either use a *CRON scheduler* or
    a *rate expression* to define the schedule for your maintenance window. For this
    scenario, I''ve opted for the Cron schedule builder option and provided a window
    that starts every Sunday at 12:00 UTC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81b5a47d-f1d1-4fb1-98dd-c782ef4c53a3.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Duration as well as the Stop initiating tasks field, specify the timeline
    in hours that the maintenance window has to last for, as well as the number of
    hours before you want the system to stop initiating new tasks. Once all the required
    fields are populated, click on Create maintenance window to complete the creation
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the maintenance window created, we next need to add some targets for execution.
    Targets are individual EC2 instances or a group of EC2 instances that are identified
    by tags. To configure targets, select your newly created maintenance window then
    from the Actions tab and select the option Register targets:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Register targets page, provide a Target Name for your maintenance window's
    target with an optional Description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, select the target EC2 instances you wish to associate with this target
    by either opting to Specify Tags or even by Manually Selecting Instances as shown
    in the following screenshot. For this scenario, I''ve already provided the tag
    *OS:Linux* to my Dev instances; alternatively, you can manually select your instances
    as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c7037cbf-c4e7-498a-ba2f-a310a72dfbc9.png)'
  prefs: []
  type: TYPE_IMG
- en: Once completed, select the Register targets option to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the target instances registered with our maintenance window, the final
    step left to take is associate the maintenance window with our patch baseline:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, we need to select the newly created *maintenance window*;
    from the Actions tab, select the option Register run command task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, in the Register run command task page, fill in the required details such
    as a *name* for your new Run Command followed by an optional Description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the Command document section, select the AWS-RunPatchBaseline document.
    You will also see the targeted instance associated with this Run Command already,
    as we configured it in our earlier steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in the Parameters section, select the appropriate IAM Role, provide
    a suitable count for the *Run Command to stop after* receiving a certain amount
    of errors, and last but not least, don't forget to select whether you wish to
    Install or simply Scan the target instances for the required set of patches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With all the fields completed, click on Register task to complete this configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Awesome isn't it? With just a few simple clicks you have now set up an effective
    patch management solution for your Dev instances, and without the need for any
    specialized software or expertise! But before we wind up this chapter, let's look
    at one last simple and really useful service provided by Systems Manager, which
    helps collect and inventorize metadata about your AWS as well as on-premises instances.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Inventory Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inventory Management or just Inventory is yet another managed service provided
    by Systems Manager that is responsible for collecting operating system, application,
    and instance metadata from your AWS instances as well as those present and managed
    by Systems Manager in your on-premises environments. You can use this service
    to query the inventory metadata for mapping, understanding, and remediating EC2
    instances based on certain software or regulatory compliances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a very simple example of enabling the inventory service for
    our Dev instance using the AWS Management dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, you will require both the SSM agent as well as the required IAM
    Roles configured on your managed instance. Once this is completed, select the
    Managed Instances option from the Systems Manager Shared Resources section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, select your Dev instance and click on the Setup Inventory option as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d292fb3a-4e42-499f-b72b-fae080576b08.png)'
  prefs: []
  type: TYPE_IMG
- en: On the Setup Inventory page, most of the options will be quite familiar to you
    by now, such as the Targets and Schedule sections, so I'm not going to dwell on
    them here again. The more important section here is the Parameters section, using
    which you can choose to either Enable or Disable different types of inventory
    collections. For example, since we are working with Linux instances, I've chosen
    to disable the *Windows updates* parameters while keeping the rest enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final field Write execution history to S3 basically allows you to write
    and store the inventory data centrally in an S3 bucket. This comes in really handy
    when you wish to collate your inventory data from multiple instances at a central
    location and then query this data either using services such as Amazon Athena
    or QuickInsights. Once completed, click on Setup Inventory to complete the inventory
    setup process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now view the collected metadata of your EC2 instance by selecting it
    from the Managed Instances page and clicking on the Inventory tab. Here, choose
    between the various Inventory Types drop-down lists to view your instance specific
    metadata. You can toggle between AWS:Application, AWS:AWSComponent, AWS:Network,
    and AWS:InstanceDetailedInformation, just to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we come towards the end of this chapter, but before we move on to
    the next chapter, here are a few key takeaways and points that you ought to try
    out!
  prefs: []
  type: TYPE_NORMAL
- en: Planning your next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, we have covered a lot of new features and services in this chapter, however,
    there are still a few things that I would recommend you try out on your own. First
    up is the Parameter Store!
  prefs: []
  type: TYPE_NORMAL
- en: The Parameter Store is yet another managed service provided by Systems Manager
    and is designed to store your instance's configuration data such as passwords,
    database strings, license codes, and so on, securely. You have the added option
    of storing the data either as plain text, or even in encrypted form, and later
    reference it in your automation documents or policy documents as variables rather
    than complete plain text. But that's not even the best part of it! Using Parameter
    Store, you can also reference your data across other AWS services such as EC2
    Container Service and AWS Lambda, thus making this a centralized store for storing
    all your configurational and secure data.
  prefs: []
  type: TYPE_NORMAL
- en: Another important feature that I would recommend using in your environments
    is Resource Data Sync. Resource Data Sync enables you to store your instance's
    metadata collected from different Systems Manager services in a centralized location.
    You can configure it to collect metadata from instance operating systems, applications,
    Microsoft Windows updates, network configurations, and much more! This comes in
    really handy in production environments where you want to analyze the software
    and patch compliances of your instances.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, it has certainly been a long chapter, but we got to learn a lot and I
    hope that it helps you in your quest towards mastering AWS! Let's quickly recap
    what we have learned so far.
  prefs: []
  type: TYPE_NORMAL
- en: We started off with a quick introduction to Systems Manager, followed by an
    in-depth look at how to install, configure and verify the SSM agents on your managed
    EC2 instances. We then gained an understanding of how to leverage the Run Command
    to perform certain types of executions on your managed instances, followed by
    a rundown of maintaining an instance's state configuration using State Manager.
    We also looked at working with automation documents and how you can effectively
    patch your instances using them. Towards the end of the chapter, we learned about
    patching your instances using Patch Manager and also learned how you can effectively
    inventorize your instance metadata using inventory manager.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be introducing two new services, which will help
    us to deploy our simple WordPress application to the cloud. So, stay tuned!
  prefs: []
  type: TYPE_NORMAL
