- en: Chapter 8. Swift – OpenStack Object Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction – OpenStack Object Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating object containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting object containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading large objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container ACLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction – OpenStack Object Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack Object Storage, also known as **Swift**, is the service that allows
    for massively scalable and highly redundant storage on commodity hardware. This
    service is implemented by Rackspace as Cloud Files, and it is also analogous to
    Amazon's S3 storage service and managed in a similar way under OpenStack. With
    OpenStack Object Storage, we can store many objects of virtually unlimited size—restricted
    only by the available hardware—and grow our environment as needed, to accommodate
    our storage. The highly redundant nature of OpenStack Object Storage is ideal
    for archiving data (such as logs and backup archives) as well as for providing
    a storage system that OpenStack Compute can use for virtual machine instance images.
  prefs: []
  type: TYPE_NORMAL
- en: The architecture of OpenStack Object Storage is straightforward. There is the
    API service that runs on the controller nodes. Then there are Swift proxy services
    that can either be deployed onto the controller nodes, or separated onto their
    own dedicated servers—depending on your requirements, followed by the actual storage
    nodes that store the data. The storage nodes are the servers that are designed
    to scale out as your requirements for storage grows.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scaling the characteristics and design of Swift is beyond the scope of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical, simplified view of the architecture is show here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction – OpenStack Object Storage](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Essentially, requests (for example, to upload or download an object) are sent
    to the API through the load balance pool, and then the data is sent through to
    the physical storage nodes by the `Swift-Proxy` service. The `Swift-Proxy` service
    would fetch and store the data back to and from the end user.
  prefs: []
  type: TYPE_NORMAL
- en: As the name states, OpenStack Object Storage operates on what is known as objects.
    Objects can be anything from a file, to an object named as a complete folder and
    filename – to OpenStack Object Storage, anything it sees, regardless of the filename,
    is still one single object. Objects are stored in **Containers**. A great analogy
    is a bucket. In a bucket, you can store anything that would fit in it, from grains
    of sand to tools you have laying in your shed!
  prefs: []
  type: TYPE_NORMAL
- en: Creating object containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started using OpenStack Object Storage, we must first create a **container**.
    A container in this case is quite similar to a folder on Windows or Linux file
    directory. However, containers cannot be nested, though deep structures can be
    created in a fashion similar to the nested folder structure using both container
    and object names (pseudo folders) when we come to uploading the objects that are
    stored in these containers. Names we assigned containers and objects are analogous
    to labels that allow us to interpret as folder structures through the use of a
    `/` character in these labels.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client as
    described in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, and can access the
    OpenStack environment as a user with the `swiftoperator` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, with the `cookbook4`
    password; we have also granted this user with the `swiftoperator` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a Swift `container` on our environment, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a container, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the container is created, you will see the following output:![How to do
    it…](img/00152.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To view all the available containers, type this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00153.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Once the container is created, we can set additional details or **metadata**
    on it by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To view container details, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00154.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'As described in the introduction, names that we assigned to containers and
    objects are very much like labels; so, to create a pseudo-folder in the container,
    use `/` delimiter in the container name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00155.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To view details of the pseudo-folder, execute the `container show` command
    by including the full pseudo-folder name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give the information like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00156.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In OpenStack Object Storage, users with the `admin` or `swiftoperator` privileges
    can utilize the Object Storage service. To do so, we first must create **containers**,
    where the objects will be stored. Containers may not be nested, though we may
    create pseudo-folders using the `/` delimiter in the container name. To create
    a container, follow this command-line syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To list available containers, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also set metadata on each container. Use the following command for setting
    additional info on a container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Multiple pairs of metadata may be set on each container.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view container details, execute this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Deleting object containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deleting OpenStack Object Storage containers is quite simple. Any container
    can be deleted, for as long as they are empty.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this case, the OpenStack CLI has different behavior from the Swift CLI tool.
    The Swift CLI will *delete container with all of its* contents, while the OpenStack
    CLI will not. In this example, we are using the OpenStack CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client* with the `cookbook4`
    password. We have also granted this user the `swiftoperator` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete a Swift container in our environment, execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the available containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00153.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'View container details to make sure that it is empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will show an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00157.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now delete the container using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no output from this command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In OpenStack Object Storage, empty containers can be deleted by a user that
    created them. First, we must make sure that the container is empty by viewing
    its details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, delete the container with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that container is gone by listing available containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Uploading objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have created one or more containers, we can start uploading objects
    to them. While OpenStack Object Storage does not support nested containers, we
    can simulate folders or file directories with object names. This presents similar
    structure to the pseudo-folders we used in container names and both achieve similar
    end goals to a user expecting a tree-like structure to their object storage use.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, with the `cookbook4`
    password; we have also granted this user `swiftoperator` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To upload objects to an OpenStack Object Storage container, follow the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will upload the `intro.txt` file into the `books` container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00158.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'List objects in a container by providing the container name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00159.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Here `chapter1` is the *pseudo-folder* we created in the *Creating object containers*
    recipe and it shows as an object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can upload an object into the pseudo-folder called `books/chapter1` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give an output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00160.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To list objects in a container, issue the following against the container name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will list the objects available under this container:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00161.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To list all objects in the pseudo-folder container name, use a `prefix` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00162.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use `--prefix` to list any object that begins with the prefixed letters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To list all top-level objects in a container, use a **delimiter** flag. In
    this example, the delimiter is `/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00159.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To show information about an object, issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give information about that object:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00163.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to store files in OpenStack Object Storage, **objects** have to be
    uploaded to a **container**. Containers cannot be nested; however, pseudo-folders
    or pseudo-directories can be created using the `/` delimiter. Once a container
    is created, you can upload files by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Multiple objects can be uploaded with one command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list objects that were uploaded to a container, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When listing objects in a container, enable filtering using the `--prefix` and
    `--delimiter` flags.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, a maximum of 10,000 objects will be listed. Use pagination or the
    `--all` flag to view more than the default number of objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view details of individual object, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Regular object size is limited in Swift. By default, only objects 5 GB or smaller
    can be uploaded with the `openstack object create` command. Refer to the *Uploading
    large objects* recipe on how to upload large objects.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading large objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every OpenStack Object Storage cluster has a limit on how large the uploaded
    objects can be. Usually that limit is set to 5 GB, though each cluster can have
    its own limit. However, this doesn''t mean that you are limited to uploading only
    5 GB or smaller objects to OpenStack Object Storage. Swift provides large object
    support via already configured and deployed middleware by splitting up large objects
    into smaller parts. There are two types of large object support: dynamic and static.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client* with the `cookbook4`
    password. We also granted this user with the `swiftoperator` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the OpenStack CLI does not provide all the functionality required through
    the individual OpenStack project client, we will need to use the Swift CLI for
    this recipe. Ensure that you have the Swift command-line client installed. If
    you do not, install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How to do it..
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To upload large objects to OpenStack Object Storage container, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can list available containers with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give a list of the containers we have:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To upload a large file, we will specify the *segment size* of the objects in
    *bytes* with the `–S` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will show the object being split into **segments** in the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, the segment size is 25000 bytes, and our 128 K `nova.txt` file
    was split into 6 segments before being uploaded to the Swift cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the file has been uploaded by listing the available objects in
    the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This shows our `nova.txt` file available:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Even though the file was split into 6 parts for uploading, it appears as one
    file in Swift's `books` container. The segments are listed separately in a new
    container.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To view the available containers, issue this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives us our containers with a new one automatically created:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will notice that a new `books_segments` container has been created automatically.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List objects in the `books_segments` container to view individual objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This shows our segmented file objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not modify or delete these objects individually.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'View the details of the uploaded object in the `books` container using the
    `stat` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives a number of details about our `nova.txt` file in the `books` container:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Take a look at the `manifest` field in the information provided. The `manifest`
    field will include the `container` details that was created for individual segments,
    the original file size, and segment size.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since the OpenStack CLI does not provide large file upload support at the time
    of this recipe''s writing, we will use the Swift command-line client. In order
    to store large files in OpenStack Object Storage, objects have to be split up
    or segmented before uploading to a container. This segmentation is done for us
    by specifying the `-S` flag in the `swift upload` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: When uploading large files, Swift automatically creates a new container and
    pseudo-folders for individual segments of the uploaded object. Individual segments
    may be listed the same way as regular objects; however, do not manipulate them
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once objects have been uploaded to a container, one may also want to download
    them. In this recipe, we will show you how to download objects to your local disk.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client* with the `cookbook4`
    password. We have also granted this user the `swiftoperator` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use the OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To download objects from a Swift cluster, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List the available objects in a container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give a list of objects in our `books` container:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00164.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To download the desired file, for example, `intro.txt`, issue the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no output to this command. The file will be saved to the current directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also download a file and specify the destination file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to download files from the OpenStack Object Storage, issue the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `--file` flag is optional. If not specified, the object will be saved to
    the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Large objects do not require special treatment when downloading; the same command
    will work on large and small objects.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deleting objects from OpenStack Object Storage is fairly trivial, whether for
    small or large files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, with the `cookbook4`
    password. We have also granted this user the `swiftoperator` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use the OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete objects from our Swift cluster, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List available objects in a container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give a list of objects in our `books` container:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00164.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Delete the object from a container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There will be no output from this command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List objects in the `books` container after deletion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The container listing will show that `intro.txt` is no longer present:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00165.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To delete *all objects* from a container and *then delete container*, issue
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no output to this command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to delete files from the OpenStack Object Storage cluster, specify
    the container and object that should be deleted with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Use the `-r` flag for deleting container and all its contents.
  prefs: []
  type: TYPE_NORMAL
- en: Container ACLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack Object Storage containers are usually owned by the user that created
    them. However, through Swift's **ACLs** (**Access Control Lists**), containers
    can be made accessible to different OpenStack users or made completely public.
    The owner of the container can set specific read and write rules. The read and
    write rules must be set separately and have to be enabled explicitly on each container.
    The owner of the container can make the container completely public or set rules
    based on the project, user, or rule set.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges
    and an `admin` user. We will use the `developer` user created in the *Common OpenStack
    identity tasks* recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, with the `cookbook4`
    password. We have also granted this user the `swiftoperator` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the OpenStack CLI does not provide all the functionality available through
    the individual OpenStack project client, we will need to use Swift CLI for this
    recipe. Ensure that you have the Swift command-line client installed. If you do
    not, install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To view and modify ACLs on containers, follow the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, view existing ACLs on a container, if any:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives the information about our container called `books`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In our example, there are no read or write ACLs set yet. Let''s set a `read`
    ACL to make the `books` container *public*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no output from this command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To make the `books` container *writable* by everybody, issue the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no output from this command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now check the details on the books container again with the stat command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can see that the `Read ACL` and `Write ACL` fields have been populated:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since operating *world-writable* and *readable* containers are not very good
    security practice, we can remove the ACLs from the container. To remove the *read*
    ACL, issue this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To remove the *write* ACL, use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you need to share your container with another user in your OpenStack environment,
    you can set permissions based on the *project* and *user*. In our example, we
    will set the `books` container''s access to be readable by everyone in the `admin`
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The asterisk (`*`) after `:` indicates that all users in the `admin` project
    will have access to the `books` container.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now check the details of the `books` container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will produce output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the `URL` of the container in the details. Anybody wishing to access
    this container will need to pass the `URL` field as a parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As an `admin` user, test the access to the `books` container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give objects from our shared container at the specified URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In our example, the `admin` user is part of the `admin` project and therefore
    is able to access the `books` container via the `--os-storage-url` flag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Containers can be shared with other users by setting *read* and *write* **ACLs**
    on them. Currently, the ACLs functionality is not available in the OpenStack client,
    so we are using the Swift CLI in our examples.
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of ACLs that can be set on a container, *read* and *write*,
    and they have to be set individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set read ACL with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Set write ACL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Here both the project and user can be substituted with a wild card (`*`).
  prefs: []
  type: TYPE_NORMAL
- en: 'To make a container completely public, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: With the `.r:*` and `.rlistings` elements set, the `books` container is publicly
    accessible. The `.r*` element allows access to the objects in a container, and
    `.rlistings` allows listing of the container's content.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With write ACL set to `"*:*"`, the container can be updated by anybody, so use
    it with care.
  prefs: []
  type: TYPE_NORMAL
- en: The `-r` and `--read-acl` commands as well as `-w` and `--write-acl` are the
    short and long forms of the same flag. That is, `-r` and `--read-acl` are interchangeable
    as well as `-w` and `--write-acl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once access to containers is enabled for other users, find the URL of a container
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'To access another user''s container once access been enabled, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are always accessing the same storage URL, it can be set as the `OS_STORAGE_URL`
    environment variable.
  prefs: []
  type: TYPE_NORMAL
