- en: Using Application Insights to Monitor Your Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure is not only about developing an application. Once we have our solution
    deployed to the cloud, we have to somehow monitor and diagnose it. The Azure Application
    Insights service offers a complete toolset for maintaining your applications,
    with SDKs available for multiple languages and platforms, alerts, query language,
    and integration with many native Azure services. It simplifies logging in to applications
    and gets rid of multiple sources of truth when it comes to analyzing an issue
    using data from several places.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Azure Application Insights service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring different platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Analytics module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating Azure Application Insights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform the exercises in this chapter, you will need:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio with the following workloads installed—ASP.NET,web development,
    and Azure development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Application Insights service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most important features when developing applications (especially
    hosted in the cloud) is the ability to easily monitor them and detect at an early
    stage any possible issues and flaws. To do so, you need a whole architecture of
    loggers, storage, and report tools, which you have to integrate, configure, and
    maintain daily. This requires an additional set of skills in your team and, of
    course, takes time—the bigger your application is, the more is required. With Azure
    Application Insights, all those operations are much simpler: you have a single
    service and endpoint for logging all required information, and the rest is done
    for you automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: Logging data in the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume you have the following architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/889d8c58-aeb8-4601-ab16-225b3e43f116.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It contains many different web apps, different storage capabilities (such as
    a SQL database or Azure Storage), and also Azure Functions. If we want to be able
    to monitor all those services, we will need the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: A tool for saving logs (which is able to use different outputs such as storage
    or a file, possibly multiplatform)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage able to store gigabytes of log data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some kind of dashboard, which will get data from the storage and display it
    using different filters and parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you take all those into account, you may find the following caveats:'
  prefs: []
  type: TYPE_NORMAL
- en: Storing raw data is not enough as you will need some kind of projections view,
    which can be quickly fetched and does not require extra transformations or processing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have to find a way to store data that allows users to query at will with
    different vectors—appending logs may seem great for checking recent records, but
    for creating an index of dynamic parameters it is not so good.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have to implement some kind of data retention—most logs have no use after
    a fixed time period.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance for both applications and the reporting solution should be repeatable
    and should not change in time (for example, with the increased amount of data
    stored).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a dedicated team for issue tracking may not be the best allocation of
    resources—people with reporting and data analyzing skills are much more valuable
    when they work on actual business data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ideal solution for the preceding problems would be a single component capable
    of doing everything we mentioned earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f34f9a5-a936-4bcc-bef7-a6f89cf27f64.png)'
  prefs: []
  type: TYPE_IMG
- en: In Azure, such a component is Azure Application Insights, which we will cover
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Application Insights fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Connecting to the Azure Application Insights service can differ depending on
    your circumstances. In general, you have multiple possibilities when integrating
    the service:'
  prefs: []
  type: TYPE_NORMAL
- en: Seamless integration within the portal—no additional steps required, you just
    enable and configure a feature—the rest is already implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an appropriate SDK depending on the platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending telemetry events directly to the service endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Depending on the concept you use, a different configuration will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: For the portal, you need no extra steps as you are already authenticated, and
    a resource can be selected for example from a drop-down menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For SDK, you need an instrumentation key, which can be found in the portal—we
    will cover this topic later in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using REST APIs, there are different options available, such as App ID, key,
    or OAuth2 flow .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that, depending on the method of logging used, different features and capabilities
    may be available. This is especially true for sending custom events or custom
    logging logic—such actions often will require using a dedicated SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides some obvious features (such as the ability to log and store information
    about a request or an exception), Azure Application Insights has many different
    capabilities implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requests telemetry**: You can automatically gather information regarding
    the request count, average latency, and failure rates. If using this service,
    for example, with Azure App Services, you are given full insights into your web
    application by just implementing the SDK.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies**: Besides general telemetry, in Azure Application Insights you
    can find information about how your dependencies (such as Azure Table Storage
    and Azure SQL) perform. This is especially true if you have multiple services
    integrated and you want to know which one affects the latency the most.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exceptions**: Having information about failed requests or dependencies is
    one thing, but a detailed dashboard displaying aggregated data about errors is
    a much more useful thing. In Azure Application Insights, you can easily check
    which type of error is connected to some specific subset of requests. This gives
    you a much better understanding of what is going on under the hood in your application
    and where to start fixing it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User telemetry**: Do you want to know exactly how many users you have? Are
    you interested in what the flow is when they use your application? In Azure Application
    Insights, there are additional features that give you information about user and
    session counts, their behavior, and overall activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, I have not listed all the available features—there are even more,
    such as gathering information regarding AJAX calls, page view, and web performance;
    performance counters (for VMs), and host diagnostics from Docker. In fact, the
    availability of a feature also depends on the service you have chosen—a different
    telemetry is gathered for Azure Functions and for Azure App Services.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, you can achieve the same level of granularity of your logswith similar
    charts and diagnostics available in most services. What changes is the level of
    effort required—the less integration a service has with Azure Application Insights,
    the more you have to do on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Azure Application Insights in the portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create an instance of Azure Application Insights, you have to search for
    the service in the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will have to fill in the following simple form to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a3ab130-9ec6-4139-9426-4f77c8d26d83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In fact, it contains one field that you probably have not met yet:'
  prefs: []
  type: TYPE_NORMAL
- en: Application Type: Depending on your choice (ASP.NET web application, Java, App
    Center, Node.js, or General), a different set of charts will be selected. This
    option does not affect the available features of a service. Rather, it ensures
    that, for a specific instance, you will see only the information you are most
    interested in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of what your instance is capable of depends solely on the services
    integrated with it and the amount of data sent to it.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike most Azure services, in Azure Application Insights there is no requirement
    to have a unique service name for all instances globally—here you just cannot
    use the same name for multiple services within a service. This is because it does
    not use a DNS name to work and connect with other applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click Create**,** it should not take long to provision a new instance
    of a service, which should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1af48625-1557-4280-a56e-462aa672d77c.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there is the Essentials section, hidden by default—it contains
    some common metadata and, what is more important, an instrumentation key— and
    an identifier, which uniquely identifies your instance of your service. We will
    use it to actually connect to Azure Application Insights—the rest of the feature
    will be described later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring different platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The strength of Azure Application Insights is its ability to monitor simultaneously
    from different platforms. You can choose from ASP.NET pages, Java, Node.JS, or
    even Python or Ruby (however, there are some languages and frameworks officially
    supported by Application Insights teams and some are supported by the community).
    The point is, it is platform-agnostic. When you, in fact, need the implementation
    of the communication channel, with an instrumentation key you can easily send
    data to an instance of a service without additional keys and an extended configuration.
    In this section, we will focus on sending information from different platforms,
    so you will be able to start integration in your projects easily on your own.
  prefs: []
  type: TYPE_NORMAL
- en: .NET
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In .NET applications, the only thing you have to do to get started is to install
    the latest `Microsoft.ApplicationInsights `package. The easiest way is to use
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code does two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the current configuration by providing an instrumentation key. It is all
    that is needed to connect to a service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializes an instance of `TelemetryClient`—this class is a proxy to a service,
    which enables you to communicate with it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then you can use different methods to log some data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, there are more methods available—you can find them in the *Further
    reading*section. In the first snippet, we used the `TelemetryConfiguration `type—in
    fact, the data stored in the configuration it provides is initially fetched from
    the `ApplicationInsights.config`file—it can look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If the file is not present (or it does not contain all values), the configuration
    will not be correct; in such a scenario, you have to provide it manually.
  prefs: []
  type: TYPE_NORMAL
- en: Please note, those above instructions are applicable only if you are using .NET
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worth mentioning here that the setup differs between platforms. We have
    discussed the most basic (console app) one, but we can use other application types,
    like Windows desktop applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Or we can use web apps that have a seamless integration with Azure Application
    Insights.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start working with Azure Application Insights in Node.js, you will need
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It will install an NPM package of Application Insights, which allows working
    with this service. Here is a full example of the interface of this package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Try to run the example and check the insights—you will see that first requests
    are logged:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d346db0-dd94-4012-8d3c-939208208375.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure Application Insights also offers seamless integration with another Azure
    service, Azure Functions. There are two ways of enabling integration: either turn
    it on while creating a service, or manually by providing an instrumentation key
    in the settings.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a form where this feature can be enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fa34861-fbb9-48ae-bff8-1bf852923c6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is, however, one caveat to such a setup: you cannot select an instance
    of a service if you already have one. To do so, you have to enable integration
    manually by providing `APPINSIGHTS_INSTRUMENTATIONKEY`in the settings of the Function
    App.'
  prefs: []
  type: TYPE_NORMAL
- en: There is one more option. Instead of providing a key manually, you can click
    on the Monitor tab of any function and then Configure. This option will be available
    if the classic view is not yet enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'With integration enabled, you will be able to analyze the executions of all
    your queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3913790d-2070-4135-8ce7-6457e424da51.png)'
  prefs: []
  type: TYPE_IMG
- en: Analytics module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multiple ways to integrate Azure Application Insights with different services
    (as well as a custom application) is not the only big feature of this service.
    Another important and crucial thing is the analytics language available in the
    Analytics module. It is an interactive query language, which enables you to explore
    logged data easily, using a simple and intuitive syntax. Another great thing about
    it is that you do not need any additional tools to get started—once you store
    traces, exceptions, or requests, it is available out-of-the-box—the only thing
    you need to do is write a query. In this section, we will cover both the query
    language and the module, so you can start writing your own queries and discover
    many different dimensions available in stored logs.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Analytics module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting started with the Analytics module is really easy. Go to the Overview blade
    of your instance of Azure Application Analytics and click on the Analytics button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5350591d-7431-4e17-993b-be6af122ced9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will display another window showing new options, such as the ability to
    enter a query, use a pre-defined one, or simply explore the different dimensions
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e54cc2a-2789-49dc-a2a0-5b1360ec75ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The most important thing here is the query window. It is an interactive feature
    which enables you to write a query and offers you additional capabilities, such
    as a syntax validator and suggestions. Let''s start with a simple query which
    displays request counts over the last few days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it has three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`requests`: The dimension you are querying'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`summarize`: A function which defines what you want to get from the dimension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`render`: An optional function that draws a chart based on the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Of course, queries can have different structures; you can find one that is
    a bit more complicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding example, there will be no chart—instead, it will display
    a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f8a53a4-5a56-4976-b8c6-626142a51c8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The important thing is the date range for a query as inside it you can just
    filter data. You have to select which dates you are interested in. To do so, click
    on the Time rangebutton, next to the Run button, and choose the right option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7098bce1-86dc-4e9d-9ba0-73d57eb22870.png)'
  prefs: []
  type: TYPE_IMG
- en: The query language in Azure Application Analytics is very rich as it defines
    many different functions for different data types and actions (you can use many
    different window functions, for example, `next()`). The relevant reference can
    be found in the *Further reading*section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, when a query is actioned, you can select an additional filter
    for it (based on the result), so you can choose specific records:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c454505-b435-4dc9-9bff-7bba553dd856.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also one other helpful feature of the Analytics module—smart analytics.
    It is a set of additional functions which extend the analytic capabilities by
    introducing elements of machine learning in data analysis. Currently, the following
    functions are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Autocluster**:A function which automatically divides data into clusters to
    make it easier to understand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basket**: This one automatically finds interesting data inside the results
    of a query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Diffpatterns**: This feature operates on a column that stores true/false
    data and tries to find patterns corresponding to the differences between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timer series**: This function (`make-series`) will convert data into a single
    row making it possible to analyze the root cause of a problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linear regression**: With this function, you will easily find data trends
    based on the results (whether, for example, the number of exceptions grows or
    not).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outlier value detection**: This one finds how a value is anomalous in comparison
    with others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these advanced functions, you can greatly improve the analysis of your
    data. They incorporate many helpful features, making the whole service much more
    flexible. What is more, you do not have to be a data scientist to actually work
    on data, find trends, and anomalies.
  prefs: []
  type: TYPE_NORMAL
- en: Application Insights automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Monitoring is not something you like to spend time on on a daily basis. In
    fact, the more automated the service is, the better results you can get. It is
    always easier to let the machine look at different dimensions and find problems
    based on some preset rules; it will do it quicker and more carefully. In Azure
    Application Insights, you have many options when it comes to automation: ARM templates,
    alerts in the portal, or integrating external services (such as Microsoft Flow).
    In the last section of this chapter, you will learn how to get started with automation
    and make sure you focus on development, instead of log analysis and service maintenance.'
  prefs: []
  type: TYPE_NORMAL
- en: Alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An alert is a feature which enables you to be notified when an anomaly occurs.
    There are plenty of different possibilities when it comes to setting up an alert,
    starting with an ARM template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'While initially such an ARM template may be a little bit overwhelming, in fact
    it contains a fixed set of parameters which can be easily found using Resource
    Explorer (you can find a link to it in the *Further reading*section). Here you
    can find out how existing alert rules can be discovered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86bcb024-11ce-454c-b7e6-c78fa358ce7c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, I displayed the available alert rules inside an
    Azure Application Insights instance, which I created inside a particular resource
    group. When you click on it, you will see a full description of the resource inside
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Resource Explorer is a great tool when you work with ARM templates and search
    for a reference to a particular resource. It displays all parameters describing
    a service from the ARM point of view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can find the default alert, created when a service is deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To make things a little bit easier to understand, let''s check how to set an
    alert inside a portal. You can access the Alerts blade in the Configure section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be476561-b19c-472c-8cf5-3684a9b53fb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get started you need to click on the + New alert rule button. What you will
    see is a detailed wizard, providing a quick way to set up an alert. The most important
    thing here is the conditions—they define how an alert is triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc3c8254-1ee9-41f4-9e15-76977b44f798.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, an alert can have more than only one trigger as it all depends on
    its characteristics. What is more, the conditions can be quite complex; they can
    refer to multiple resources and introduce the concept of composite alert rules.
    The next thing defined here is the alert details—you have to provide some metadata
    which describes them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ef39d55-4334-4029-8568-022298e5b1da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The important thing is the severity of an alert: the higher it is, the more
    crucial an alert will be. The last part of the wizard is the actual action, and
    you have multiple options available:'
  prefs: []
  type: TYPE_NORMAL
- en: Email/SMS/Push/Voice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LogicApp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webhook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ITSM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation runbook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of them require you to already have a service which will handle an alert—you
    have to select the option that suits your needs the most. When you create an alert,
    it will be active and visible in the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75c9967d-c310-4fa7-9e0d-1d455d561acf.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned about a monitoring solution available for Azure:
    Azure Application Insights. We covered things such as provisioning a resource,
    creating an alert, and integrating with other services. This Azure component offers
    many additional features besides those mentioned in the chapter—there are things
    such as smart detection, continuous export of data, or detailed usage logs. I
    strongly encourage you to explore it further on your own, as it greatly simplifies
    monitoring activities and resolving issues. In the next chapter, we will cover
    the last Azure service within the scope of this book: Azure SQL, which is a PaaS
    service, being an Azure version of the well-known database engine.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is needed to identify an Azure Application Insights instance and connect
    to it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to use Azure Application Insights inside a Node.js application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the Smart Analytics module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you query logs stored inside Azure Application Insights?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you automate creating alerts in the service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to use SMS as an action for a triggered alert?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TelemetryClient reference: [https://docs.microsoft.com/pl-pl/dotnet/api/microsoft.applicationinsights.telemetryclient?view=azure-dotnet](https://docs.microsoft.com/pl-pl/dotnet/api/microsoft.applicationinsights.telemetryclient?view=azure-dotnet)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure log analytics reference: [https://docs.loganalytics.io/index](https://docs.loganalytics.io/index)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart analytics: [https://docs.loganalytics.io/docs/Learn/Tutorials/Smart-Analytics/Understanding-Autocluster](https://docs.loganalytics.io/docs/Learn/Tutorials/Smart-Analytics/Understanding-Autocluster)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource Explorer: [https://resources.azure.com/](https://resources.azure.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
