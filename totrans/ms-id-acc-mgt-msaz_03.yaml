- en: Understanding Identity Synchronization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main component in a hybrid identity and access management solution is the
    connectivity between the on-premises **Active Directory** (**AD**)and the **Azure**
    **Active Directory** (**A****AD**), including the related synchronization of objects
    and attributes. Microsoft tries to make the synchronization process straightforward
    without administrators needing to have the complete details of the system under
    the hood.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll discuss the essential identity-synchronization scenarios
    and tools for the successful implementation of a full hybrid identity life cycle
    management. We'll start with an overview of the **Microsoft Identity Manager** (**MIM**)
    and the Azure AD Connect tool, and then we can dive into the identity-synchronization
    scenarios. Afterward, we'll run through the different processes, the AD user account
    cleanup for a hybrid environment and all the crucial parts and steps of the identity
    synchronization in Azure AD Connect. The chapter will be rounded up with a lot
    of practical tips and use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll cover the following essential topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Technology overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronization scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronization terms and processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first section, we start with the technology overview.
  prefs: []
  type: TYPE_NORMAL
- en: Technology overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Microsoft Identity Manager** (**MIM**) 2016 or other identity management
    products are typically used to prepare the identities stored in the local Active
    Directory for cloud synchronization. The Azure AD Connect tool is generally used
    to synchronize the AD identities to the Azure AD to be used in connected **software
    as a a service** (**SaaS**) applications or other functionalities. The main advantage
    that MIM 2016 provides for this solution is to help with domain/forest consolidations,
    attribute normalization, and complete on-premise identity management with the
    help of workflows to support your business processes.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the following diagram, MIM 2016 is also capable of synchronizing
    identities with the Azure AD. So, you're probably wondering which tool you should
    use to sync identities with Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: The short, practical answer for common scenarios is the Azure AD Connect tool
    because it supports all the provided synchronization functionality of the Microsoft
    Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram provides a schematic view of the usage scenarios of both
    tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0979a2b-a13e-4b80-a258-51fd5469010c.png)'
  prefs: []
  type: TYPE_IMG
- en: Identity synchronization architecture
  prefs: []
  type: TYPE_NORMAL
- en: Azure AD Connect doesn't offer an active user write back. You'll find this option
    is deactivated in the Azure AD Connect configuration. To add this functionality,
    you can use the MIM Graph API connector like in Azure B2B user management, where
    you need to write the guest user back to your AD. To view a comparison between
    the tools, check out *Hybrid Identity directory integration tools comparison*
    at [https://docs.microsoft.com/en-us/azure/active-directory/hybrid/plan-hybrid-identity-design-considerations-tools-comparison](https://docs.microsoft.com/en-us/azure/active-directory/hybrid/plan-hybrid-identity-design-considerations-tools-comparison)[.](https://bit.ly/2zXq9Ir)
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Identity Manager (MIM) 2016
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MIM 2016 is the primary identity and access management product of Microsoft
    that provides all the different server roles and components needed in this field
    of technology. MIM 2016 is mainly used to provide a sanitized and central identity
    in on-premise environments. In the context of a hybrid architecture, it plays
    a crucial role in connecting any repository to manage identities in different
    repositories. Furthermore, complex identity-management scenarios are provided
    with this component. This also includes the management of Azure AD and many SaaS
    applications in today''s market, as you can see in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/533279a4-8047-40e1-8247-6a5f0eb8c9fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Identity Manager functionality and objects
  prefs: []
  type: TYPE_NORMAL
- en: The following section gives you a short overview of the key components of MIM
    2016 to help a solution architect/engineer to identify possible interactions or
    elements that need to be included in a design blueprint for a suitable solution. We
    also use some of these components in the provided implementation guides of the
    book, such as in [Chapter 8](efbe1917-c755-4449-b29e-fa4a21e819fd.xhtml), *Using
    the Azure AD App Proxy and the Web Application Proxy**,* where we implement the
    Azure AD **business to business** (**B2B**) scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following main feature sets are provided by MIM 2016:'
  prefs: []
  type: TYPE_NORMAL
- en: Identity synchronization including provisioning/deprovisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access request and Access Policy Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delegation of administration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-service password reset and account unlock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-service group management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Role management (RBAC, ABAC, SoD)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual managed groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manager-based groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Criteria-based groups (attribute-based access controls)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time-limited group memberships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting and compliance and Access Certification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to use MIM 2016 as your central identity-management system, we highly
    recommend you take a look at the **Workflow Activity Library** (**WAL**) under
    [http://microsoft.github.io/MIMWAL/](http://microsoft.github.io/MIMWAL/). Also,
    the combination of the newly integrated privileged access-management solution
    in Windows Server 2016 and MIM 2016 provides a very effective way to manage and
    limit security issues with administrative accounts.
  prefs: []
  type: TYPE_NORMAL
- en: MIM synchronization service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MIM synchronization service is the heart of the product. You can import
    and aggregate data in a central identity store, which is called **metaverse**
    (**MV**). The service provides a staging zone to compare the connected directory
    with the metaverse. This staging zone is called the **connector space** (**CS**).
    The connection to any repository is done over specific connectors, which are also
    called **management agents** (**MAs**). The synchronization service is also responsible
    for the data integrity through all connected repositories, including the provisioning
    and deprovisioning of objects, including their attributes. You can find an overview
    of the available connectors at [https://docs.microsoft.com/en-us/microsoft-identity-manager/supported-management-agents](https://docs.microsoft.com/en-us/microsoft-identity-manager/supported-management-agents).
    In case you need a custom connector, MIM provides a development framework to fit
    your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of different directories and systems
    that can be connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/377ce317-4559-472e-b97d-45be96bd60c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft Identity Manager Synchronization Service Manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following practical notes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MIM synchronization service is a state-based system by default:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imported data will be compared with previously imported data; differences indicate
    modifications in the source
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Imported data will be compared with previously exported data; no difference
    indicates a successful export
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MIM is not real-time; it uses run cycles that can be configured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIM synchronization can work event-based with a synchronization service extension,
    as we provide in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: MIM synchronization service extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To extend the functionality of the MIM synchronization service, you could use
    the Lithnet AutoSync. Lithnet AutoSync runs as a Windows service in addition to
    the MIM synchronization service. The service enables you to execute MIM Management
    Agent run profiles automatically. Furthermore, Lithnet AutoSync empowers you to
    perform exports and delta synchronizations automatically if the MIM synchronization
    engine detects a change. Now you have an event-based and a run-cycle-enabled synchronization
    engine. The following screenshot shows the configuration on the sync engine that
    you saw in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b52466d-f147-4050-b787-b82aedc21300.png)'
  prefs: []
  type: TYPE_IMG
- en: Lithnet Autosync management console
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the Lithnet AutoSync tool, check out [https://github.com/lithnet/miis-autosync](https://github.com/lithnet/miis-autosync)[.](https://bit.ly/2UMTgXM)
  prefs: []
  type: TYPE_NORMAL
- en: MIM service and portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MIM service provides all the necessary capabilities for policies and workflows.
    All objects like groups, users, workflows, requests, and other resources used
    in MIM are stored as objects in the MIM Service database. These objects can be
    modified with typical CRUD (**Create**, **Read**, **Update**, **Delete**) operations requests
    to the MIM service **Identity-Management** (**IdM**) Platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the MIM portal, users interact with the system by using a web browser.
    The usage depends on the permissions; users can be granted to do requests, respond
    to approval requests, cancel existing pending requests, or manage objects in the
    IdM system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e91794b5-89cd-48a3-a436-0430105430bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft Identity Manager Standard Portal
  prefs: []
  type: TYPE_NORMAL
- en: The default MIM Portal is based on a SharePoint solution and can be highly customized.
    You can find some example configurations at [https://docs.microsoft.com/en-us/microsoft-identity-manager/reference/mim-portal-customizations](https://docs.microsoft.com/en-us/microsoft-identity-manager/reference/mim-portal-customizations).
  prefs: []
  type: TYPE_NORMAL
- en: MIM service extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Lithnet **Forefront Identity Manager** (**FIM**)/MIM Service REST API is
    a wrapper for the FIM/MIM Service's **Simple Object Access Protocol** (**SOAP**)/**Windows
    Communication Foundation** (**WCF**) endpoint, exposing create, update, delete,
    and search functionalities via a series of standard HTTP calls. The API returns
    JSON-formatted data, making it compatible with a wide range of platforms and services.
    By default, MIM doesn't provide a REST API to the MIM Service. With this extension,
    you can adopt your own functionality to MIM 2016, such as your own portal as we've
    done, or to interact with Power BI and other technologies to provide custom solutions.
    For more information about the Lithnet REST API for FIM/MIM Service, visit [https://github.com/lithnet/resourcemanagement-webservice](https://bit.ly/1PsgEjp).
  prefs: []
  type: TYPE_NORMAL
- en: MIM password reset and user account unlock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MIM provides two password-related features that can help you to offer solutions
    in your on-premises environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password synchronization**: Password synchronization to other repositories
    based on the AD password change or reset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password and account self-service**: Separate portals to provide a self-service
    password reset and account-unlock capabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the web-based Password Reset and Account Unlock
    functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94e00fe5-f7c7-432d-8eaf-7e712d4fcfe5.png)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft Identity Manager Self-Service Password Reset dialog
  prefs: []
  type: TYPE_NORMAL
- en: In particular, if you have older Windows clients, such as Windows 7 or Windows
    8/8.1, in your environment, you can provide the Password Reset functionality in
    the Windows login UI. The Password Reset functionality in Azure only provides
    support for Windows 10 clients but delivers more capabilities in the verification
    options than the MIM solution.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that MIM 2016 isn't able to provide a password hash synchronization
    such as Azure AD Connect in a hybrid scenario.
  prefs: []
  type: TYPE_NORMAL
- en: MIM privileged access management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MIM 2016 provides a **p****rivileged access management** (**PAM**) solution,
    restricts privileged access within an existing AD environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'PAM solves the following two targets:'
  prefs: []
  type: TYPE_NORMAL
- en: You can get back the authority over a compromised AD environment if you provide
    a separate bastion environment that is more protected from malicious attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the isolation of privileged accounts, you can limit the risk of losing
    sensible credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PAM helps to address the following problems:'
  prefs: []
  type: TYPE_NORMAL
- en: Pass-the-hash and pass-the-ticket attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kerberos compromises or spear phishing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unauthorized privilege escalations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other vulnerabilities and attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows you the role-activation and user-verification
    processes on the MIM PAM example portal, which you can customize based on your
    needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a37ad9f6-38ef-4d40-ae87-48213d020b25.png)'
  prefs: []
  type: TYPE_IMG
- en: MIM privileged access management sample portal
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know a bit about MIM's standard functionality, we'll provide you
    with an overview of an additional solution we developed with a partner company.
    Hopefully, it gives you an idea of the possibilities that MIM provides and how
    they can be expanded.
  prefs: []
  type: TYPE_NORMAL
- en: Additional solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Based on our many years of experience and successfully implemented projects
    in the area of Identity and access management, we've decided to map the recurring
    requirements in our solution that fill the gaps we couldn't fulfill with the MIM
    standard functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following five key pillars will be provided by our solution and enable
    us to implement highly standardized identity and access-management processes that
    are flexible and customizable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fced768f-8e86-4135-8739-e064628a9e82.png)'
  prefs: []
  type: TYPE_IMG
- en: Inovit Identity solution - building blocks
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features of **Organizational Management** and the frontend are the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Supports several cloud scenarios and traditional IT infrastructures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Representation of the organizational structure (parameterization and inheritance)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management of the organizational structure (manual or synchronized)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows you to build efficient, role-based access controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables you to deliver beneficial cost management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-friendly and highly responsive frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single page application** (**SPA**) architecture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated governance features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No SharePoint installation required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highly customizable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single frontend for on-premises or cloud-only deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A clear strategy for future invests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot schematically shows the frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b04b979b-a17b-43c6-8e3d-af8b380c4981.png)'
  prefs: []
  type: TYPE_IMG
- en: Identity Directory SPA portal
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features of **User Management** are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard processes (onboarding, mutation, offboarding)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time-limited user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management of standard and administrative user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management of Azure B2B accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic `samAccountName` and user generation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alignment of UPN, email, and SIP for cloud usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password reset and account unlock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot schematically shows the positions and role assignment
    in the frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d57138c-6bdf-4562-9b89-7cbbd0a272d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Identity Director position-based Access Management
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features of **Access Management** are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Position-based, role-based, attribute-based access management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions directly assigned to a user (if required)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Approval and notification workflow support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administration of privileged accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorization direct views and reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bidirectional interfacing with services such as SharePoint and Microsoft teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main features of **Service Management** are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Automated and straightforward adaptation of systems and services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Representation of the service catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronization-based order units
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workflow-based order units (notification and approvals)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management of Office 365 and other cloud services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud deployment based on identity director service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our Azure-based next-gen SaaS integration, you'll be able to choose where
    you want to start your implementation, whether on-premises based on MIM or directly
    in the cloud. There will also be a fully supported transition path to the cloud.
    On Azure, we use the Identity Director Service with a Cosmos DB backend that provides
    the same functionality and additional features that you already have with an on-premises
    MIM platform. The highly responsive frontend won't change for the user.
  prefs: []
  type: TYPE_NORMAL
- en: On-premises deployment based on MIM 2016
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MIM 2016 represents Microsoft's on-premises Identity and Access Management solution.
    MIM 2016 builds the base platform to our on-premises deployment method. With a
    robust synchronization framework and many interfaces, such as REST, SOAP, LDAP,
    SQL, PowerShell and file-based, you can harmonize AD identities for synchronization
    with Azure AD. The MIM 2016 Service provides a dominant workflow component that
    works state and event-based to solve the Identity and Access Management requirements
    of your business. With MIM 2016 in place, you benefit from cloud-ready identities,
    powerful user self-service, and enhanced security.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've had a quick look at MIM, and the additional available extensions
    and solutions for preparing and managing the AD objects, we'll proceed with our
    connection to the Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Active Directory Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure AD Connect is part of the identity bridge to build a hybrid cloud identity
    and access management. The main purpose of this tool is to synchronize on-premises
    identities to the cloud and is limited back to the AD. Azure AD Connect is also
    able to install and configure the whole identity bridge. This means that you can
    also install and configure your **Active Directory Federation Services **(**ADFS**)
    infrastructure for federation reasons with this tool or use pass-through authentication
    combined with seamless **single sign-on **(**SSO**) to provide a modern and comfortable
    authentication scenario. The tools are also capable of integrating external federation
    tools, such as PingFederate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot provides you with a schematic overview of the Azure
    AD Connect components, whose practical usage we''ll explain during the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69f0142e-84de-4983-aa7d-7c29a5ce01fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Connect synchronization schema overview including management capabilities
  prefs: []
  type: TYPE_NORMAL
- en: 'The following terms are used in the preceding figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connected Data Source (CD)**: A data source that can be represented by a
    repository, directory, database, or data included in flat files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Management agent or call connector (MA)**: The **management agent** (**MA**)
    is the connector to a CD and manages the data specific to the connected data source. Currently,
    AD and Azure AD are the supported MAs, as you can see here: [https://docs.microsoft.com/en-us/microsoft-identity-manager/reference/microsoft-identity-manager-2016-connector-version-history](https://docs.microsoft.com/en-us/microsoft-identity-manager/reference/microsoft-identity-manager-2016-connector-version-history).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connector space** **(CS)**: This represents a storage and staging area. It
    stores the states that indicates whether a piece of information has changed in
    the CD. Each CD has its logical sector in the CS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metaverse:** The central data store that contains the imported and aggregated
    identity information from all connected data sources. It provides a global view
    over all objects and attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Staging: **If you run a staged import operation on an MA, such as Full/Delta
    Import (Stage Only), the data is imported from the **connected directory** (**CD**)
    into the CS, but no synchronization rule is applied to it. So, a staged import
    doesn''t affect the metaverse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Import:** The process of how objects and attributes from the connected data
    source will be moved into the connector space, including the associated operations,
    such as creation, modification, deletion, or verification. The import process
    can be a full or delta import.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Synchronization: **The process of applying all the configured rules to the
    staged objects in the connector space. Synchronization can be divided into inbound
    and outbound processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Export: **The process of writing changes that occurred during synchronization
    from the CS back to the connected data source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronization scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the creation of a new Azure AD tenant, the directory information is managed
    independently from the on-premises AD forest by default. So, basically, a new
    onboarded user must be created in both directories: the Azure AD and the local
    AD. Unless you drive a cloud-only company, you always need to synchronize identities
    from the on-premises AD to the Azure AD tenant you own to provide a single identity.
    After the synchronization process is in place, Azure AD and AD can be viewed as
    one unique identity service. The following section provides you with several integration
    scenarios, including the user sign-in options. We will divide this section into
    the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: Single-forest integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-forest integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi Azure Active Directory Integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory Domain Services Integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stretched Active Directory to Azure IaaS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory B2B Integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory and Microsoft Office 365 synchronization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity and password hash synchronization including SSO options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity synchronization including PingFederate integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity and password hash synchronization including ADFS integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory Connect high availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with the single-forest integration.
  prefs: []
  type: TYPE_NORMAL
- en: Single-forest integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The single-forest scenario is a commonly used one. A single forest can contain
    one or multiple domains and a single instance of **Azure AD**. The express settings
    of **Azure AD Connect** support this scenario. We recommend filtering the objects
    so that service accounts, computers, or other objects won''t be synchronized to
    the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65a104a8-b7a7-4ca0-adee-063d1c84cc5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Connect single-forest integration scenario
  prefs: []
  type: TYPE_NORMAL
- en: Additional **Azure AD Connect** servers connected to the same **Azure AD** aren't
    supported. Excluded is the high availability option with the **Azure AD Connect**
    staging mode, which is explained in the section, *Azure Active Directory Connect
    high availability*.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-forest integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Larger organizations or distributed organizations have environments with multiple
    on-premises ADs. They''re typically used in account/resource forests or provided
    through mergers and acquisitions. These rules need to be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: Users have only one enabled account across all on-premises **Active Directory
    Forests**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserPrincipalName` and Source anchor will be provided from the forest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users have only one mailbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users that have a linked mailbox also have an account in a different forest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's no need to use **Azure AD Connect** on a domain-joined server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the account/resource forest scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f12531e-9b7b-4d36-9edc-d7af9e3fe73c.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Connect multi-forest integration scenario
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: multiple forests and multiple **Azure AD Connect** tools on one Azure
    AD aren''t supported. The only exception is the usage of a staging server. A staging
    server can be configured for high-availability scenarios (active/passive). In
    this scenario, the staging server doesn’t export information to the target system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have multiple forests, a single sync server and the users are represented
    in one directory and, you choose the option Users are represented only once across
    all directories, then each object in every forest is represented once in the Metaverse
    and aggregated in the target Azure AD tenant:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60a04d77-af23-417a-ae7f-16de31fbea10.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Connect multi-forest integration scenario including synchronization
    mappings
  prefs: []
  type: TYPE_NORMAL
- en: If you have numerous forests full of mesh with optional GALSync, you should
    use the User identities exist across multiple directories option.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use the mail attribute as matching criteria, the identity objects are
    joined with the mail attribute.This results in the following behavior—the user
    with a mailbox in one forest is joined with the contact in any other forest:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19d44136-6ab7-4f8f-8c82-39ab6808c999.png)'
  prefs: []
  type: TYPE_IMG
- en: Multi-forest integration scenario (mail attribute mapping)
  prefs: []
  type: TYPE_NORMAL
- en: It's essential that objects are unique across AD forests. If objects are unique
    across every forest, you're in a good position. With object matching and joining,
    you can provide a good state when using cloud services. With the usage of joins,
    the precedence of synchronization rules also comes into play. If you join two
    objects based on an email address, and a specific attribute value where Object
    1 isn't filled and Object 2 is populated, the value of the attribute (Object 2)
    will be used. But what if both objects have filled the attribute with different
    values? This is where precedence comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Rules with higher precedence are implemented later than lower valued rules.
  prefs: []
  type: TYPE_NORMAL
- en: The precedence will be set at the time of adding the forest to Azure AD Connect.
    So, if the forest of Object 1 was added before the forest of Object 2, the value
    of Object 1 will win the game. The preceding diagram shows this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other objects are contacts you will find in such scenarios where a **Global
    Address List** (**GAL**) synchronization was implemented between two forests.
    Azure AD Connect provides the following default behaviors:'
  prefs: []
  type: TYPE_NORMAL
- en: If Azure AD contact finds a match of a contact and a user, a join will happen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there's no user object available, a contact object will be created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a subsequent user object is found with a match to a contact, a user object
    will be built in AAD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have an account/resource forest scenario and you use the User identities
    exist across multiple directories option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you use the matching criteria of **ObjectSID** and the **msExchangeMasterAccountSID**
    attribute, the expected results are that the users are disabled in this forest.
    Furthermore, the mailbox is linked to the account forest. The user will be presented
    uniquely in the Azure AD:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecaf964b-9cd4-4ca3-b9ef-52b35cb9004d.png)'
  prefs: []
  type: TYPE_IMG
- en: Account/Resource forest integration scenario
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram also shows the Azure AD Connect behavior in a scenario
    where the AD object will be checked to determine whether it's a linked mailbox
    before it attempts to match **msExchMasterAccountSID.** This will be done with
    the **recipientTypeDetails** attribute. A value of `2` means that it's a linked
    mailbox. Keep in mind that disabled user accounts are also synchronized to Azure
    AD by default. Deactivated accounts are commonly used in exchange-resource forest
    deployments. The account forest holds the active user account and the resource
    forest holds the disabled user account. We will discuss rule precedence in [Chapter
    3](8f401db9-e842-4a9a-8b12-5fdd175df3c0.xhtml), Exploring advanced synchronization
    concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-Azure Active Directory Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you need to have multiple Azure Active Directories, for example if
    parts of your organization are based in China or you need to follow government
    regulations. For each Azure AD directory, you'll need one Azure AD Connect installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a single-forest filtering scenario to multiple Azure ADs, the following
    needs to be done:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure AD Connect must be configured for filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS domain registration is only possible in a single Azure AD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UPNs of the users on-premises must use separate namespaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Federation configuration needs to be customized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Azure AD directory can enable Exchange hybrid with the on-premises AD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global Address List synchronization needs to be performed through MIM 2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 devices can only be with one Azure AD tenant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SSO option with the password hash synchronization and pass-through authentication
    activated can work only with one Azure AD tenant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group and device write-back scenarios are possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the multiple Azure AD situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48e9100d-6fb7-461a-8478-da1f2523d99c.png)'
  prefs: []
  type: TYPE_IMG
- en: Connecting multiple Azure AD to one AD forest
  prefs: []
  type: TYPE_NORMAL
- en: It's unsupported to sync the same user to multiple Azure ADs.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Active Directory Domain Services Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This service provides the capabilities to use AD Domain Services as a Service
    in Azure. It delivers two domain controllers with a small footprint of management
    options. It integrates directly with your Azure AD. It’s an excellent option to
    move entirely to the cloud with everything you use on-premises. This provides
    smaller companies with an opportunity to live without a local infrastructure.
    Just imagine that a main legacy **LOB** can now be used in an Azure AD integration
    scenario and everything will be managed under service conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/279370ae-d2ce-4e9d-a5c0-039bdf64ec92.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Domain Services integration scenario
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution provides capabilities to support NTLM/Kerberos and LDAP applications.
    You can also securely expose LDAP in an example for printing solutions. We used
    this option in [Chapter 1](54c375d9-b7d0-4478-8777-33935239254b.xhtml), *Building
    and Managing Azure Active Directory*. Note that you need to activate the password-hash
    sync option in Azure AD Connect, so the user can be successfully synced between
    Azure AD and the Azure AD Domain Services. Furthermore, you benefit from the following
    additional features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AD account lockout protection**—Users are locked out for 30 minutes if five
    invalid passwords are used within 2 minutes. Accounts are automatically unlocked
    after 30 minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom** **organizational** **units** (**OUs**)—You are able to create multiple
    OUs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group policy support**—You are able to use group policies to manage servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stretched Active Directory to Azure IaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extending your local AD Domain Services to Azure IaaS provides you with a very
    flexible scenario to use your line-of-business applications in the cloud. To use
    this integration, you need to build a VPN or Express Route connection to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Domain controllers are highly sensitive roles and will have the most concerns
    focus on the trust of the service. Many alternative solutions don''t support seamless
    lift and shift migration to Azure like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34ac1298-cca7-4104-abe0-a5e689bc5689.png)'
  prefs: []
  type: TYPE_IMG
- en: Extending your Active Directory to the cloud
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the following notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Domain controllers (RW)**: The best choice for IaaS workloads and will be
    aware of your replication considerations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain controllers (RO)**: Normally used for scenarios with poor security
    and not an appropriate choice for IaaS workloads'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource forest scenarios**: Not recommended for use in IaaS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we'll take a look at the Azure AD B2B integration scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Active Directory B2B integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure AD B2B allows any partner to use their own identities and credentials
    in a collaboration scenario. For the authentication flows and capabilities, we''ll
    take a more in-depth look in [Chapter 8](efbe1917-c755-4449-b29e-fa4a21e819fd.xhtml),
    *Using the Azure AD App Proxy and the Web Application Proxy* and [Chapter 10](6b29475f-7917-49bf-91d4-3024835d0278.xhtml), *Exploring
    Azure AD Identity Services*. For now, we''ll give a quick overview of the synchronization
    part:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d45f123c-2203-474b-b7a4-e2909c41ee90.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD B2B local application access scenario
  prefs: []
  type: TYPE_NORMAL
- en: 'For **Azure AD**** B2B** users to use on-premises Kerberos applications, we
    need to synchronize the guest user accounts back to the **On-Premises Active Directory**.
    For this reason, you need to provide your default Azure AD domain suffix in your
    local AD. In our case, it''s `inovitcloudlabs.onmicrosoft.com`. You will find
    the option in the AD Domains and Trusts console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b02962fd-ad8d-4581-882f-e6581a83c9e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding your Azure AD tenant suffix to your local UPN suffixes
  prefs: []
  type: TYPE_NORMAL
- en: The registration of the new UPN suffix is necessary because the Azure AD Application
    Proxy checks the local AD for the existence of the guest user `UserPrincipalName`,
    such as `jochen.nickel_inovit.ch#EXT#@inovitcloudlabs.onmicrosoft.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft provides a default solution for synchronizing the guest users back
    to the local AD; check it out at [https://bit.ly/2Bor7xy](https://bit.ly/2Bor7xy).
    The solution contains the needed MIM 2016 configuration or a script to deploy
    the solution successfully. Don't be worried, we'll do the default configuration
    and extension later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Active Directory and Microsoft Office 365 synchronization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following scenario works for the most Office 365 services because every
    service uses its own directory inside of the Azure AD to store and manage identities.
    In particular, with SharePoint, we need many additional attributes in the **User
    Profile Application**, but you can''t configure the sync between Azure AD and
    SharePoint Online. You can find all the default attributes at [https://support.office.com/en-us/article/information-about-user-profile-synchronization-in-sharepoint-online-177eb196-5887-43c9-84c3-b98a43d35129](https://support.office.com/en-us/article/information-about-user-profile-synchronization-in-sharepoint-online-177eb196-5887-43c9-84c3-b98a43d35129).
    The following diagram shows the SharePoint Online synchronization scenario in
    a schematic view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/103cb38e-4970-46ce-9b3f-9d2e084ab99c.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD to User Profile App synchronization extension
  prefs: []
  type: TYPE_NORMAL
- en: One option is to extend the synchronization part with your solution, using the
    Microsoft Azure AD Graph API. In our case, we used a complete serverless solution
    based on Azure Functions and Logic Apps.
  prefs: []
  type: TYPE_NORMAL
- en: Identity and password-hash synchronization including SSO options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By synchronizing identities and the associated password hashes from the on-premises
    AD to the Azure AD, we can build a basic scenario for smaller companies that don’t
    want to invest in an ADFS infrastructure. Also, there's no SSO required. With
    this scenario, the same password can be used to authenticate the user either in
    the cloud or on-premises, depending on what resource is being accessed. Furthermore,
    the Password Reset and Account Unlock features are available with an Azure AD
    Premium license. A requirement is Azure AD Connect with password-hash synchronization
    enabled. Optional password write-back is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: For this process, a rehashing functionality is in place, which allows the user
    to have two different hash values in the local AD and the Azure AD. Additionally,
    multi-forest synchronization is also supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the identity and password-hash synchronization
    scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01a9bd00-e6ef-4bc9-92c5-cd1951d096ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Connect password-hash synchronization scenario
  prefs: []
  type: TYPE_NORMAL
- en: 'To add SSO to the solution, you can enable Pass-through authentication and
    the seamless SSO feature in the Azure AD Connect tool. This is the most commonly
    recommended option from Microsoft to reduce complexity and put Azure AD in the
    role of the central system to provide authentication to your SaaS and on-premises
    Kerberos/Claims-based applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a75c9b10-47e4-4d70-90eb-7f6650eb5f2e.png)'
  prefs: []
  type: TYPE_IMG
- en: PTA and seamless SSO enablement
  prefs: []
  type: TYPE_NORMAL
- en: It's highly recommended you enable password-hash synchronization, so in case
    of an on-premises service interrupt, your users can still use cloud services.
    For now, you can read about this feature at [https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-pta](https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-pta)[.](https://bit.ly/2SOVtAk)
  prefs: []
  type: TYPE_NORMAL
- en: Identity synchronization including PingFederate integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft now directly integrates non-Microsoft products into Azure AD Connect.
    The first one is the integration of PingFederate, which is very popular in the
    market. There''s no change on the directory synchronization—you enable PingFederate
    as your federation provider instead of ADFS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd571f7a-a098-43d1-8a23-fd6b323f090f.png)'
  prefs: []
  type: TYPE_IMG
- en: Integrating PingIdentity for federation and header-based authentication
  prefs: []
  type: TYPE_NORMAL
- en: The main decision that Microsoft has made with this partnership is to move more
    and more into the hybrid identity management approach to help you to enable Microsoft
    and other cloud services quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Identity and password-hash synchronization including ADFS integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the implementation of the federation, all authentication is retained on-premises,
    and all passwords are stored on-premises only. All authentication traffic is redirected
    from Azure AD to the on-premises ADFS, which authenticates the user against a
    trusted AD domain. This scenario is commonly used in different company sizes if
    SSO is required and password-hash synchronization is prohibited due to \ security
    reasons.
  prefs: []
  type: TYPE_NORMAL
- en: The requirement is the usage of a federation service provider, such as ADFS in
    addition to Azure AD Connect in a highly available deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the identity and password-hash synchronization
    with ADFS scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1ca8d1e-f95c-46e4-83c7-eb4f3a9d7eb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Combine federation with password-hash synchronization
  prefs: []
  type: TYPE_NORMAL
- en: You can also combine the ADFS integration with password-hash synchronization
    to provide the capability if the on-premises infrastructure turns into an outage
    and users can still access their cloud services with their known password.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Active Directory Connect high availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For high-availability reasons, a new Azure AD Connect server can be rebuilt
    and resynchronized in a couple of hours for a small or medium-sized business.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the `sourceAnchor` attribute is used to join the objects from
    on-premises and the cloud. The sync engine matches the objects together again
    on reinstallation.
  prefs: []
  type: TYPE_NORMAL
- en: It's very important that you document your configuration changes, such as special
    filtering or synchronization rules. You need to reapply these settings before
    you start the synchronization process. You can use the Azure AD Connect documenter
    ([https://github.com/Microsoft/AADConnectConfigDocumenter](https://github.com/Microsoft/AADConnectConfigDocumenter))
    to save your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Larger organizations with more than 100,000 users, groups, and other objects
    will take much more time to rebuild the synchronization. If there needs to be
    a faster time to recovery, Azure Active Directory Connect can be configured to
    use a dedicated SQL server deployment with SQL high availability. This option
    provides the needed data directly. With more than 100,000 users, an SQL server
    is required because a large organization wants to have low recovery time for the
    synchronization service.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to provide a highly redundant system is to use another server with
    Azure Active Directory Connect installed and configured in Staging mode. This
    functionality also reduces recovery time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a staging-mode configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/239cee63-2632-495d-a6c4-c863a73d3ccc.png)'
  prefs: []
  type: TYPE_IMG
- en: Enable the staging mode for HA
  prefs: []
  type: TYPE_NORMAL
- en: With Azure AD Connect version 1.1.524.0, Microsoft added the SQL **Always-on
    Availability** (**AOA**) Group support. SQL clustering was added in an earlier
    release. Be aware that SQL AOA needs to be enabled before you install Azure AD
    Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Synchronization terms and processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll discuss and implement the practical use of the synchronization
    terms and procedures. We'll combine theory directly with practical use. For this
    reason, we'll install, configure, and run the processes immediately in the Azure
    AD Connect tool. To use the guidance, you should deploy a virtual machine with
    the domain controller role enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Build the virtual machine on Azure or your local virtualization platform. An
    excellent option is to follow the guide at [https://docs.microsoft.com/en-us/office365/enterprise/base-configuration-dev-test-environment](https://docs.microsoft.com/en-us/office365/enterprise/base-configuration-dev-test-environment) with
    the usage of your free trial Azure or MSDN subscription. We provide you with a
    complete scripting solution in the code package of the book, or you can follow
    the instructions in [Chapter 7](468509fa-856c-411d-abdb-e9a39c266750.xhtml), *Deploying
    Solutions on Azure AD and ADFS*.
  prefs: []
  type: TYPE_NORMAL
- en: We use the same domain name you used in [Chapter 1](54c375d9-b7d0-4478-8777-33935239254b.xhtml), *Building
    and Managing Azure Active Directory*. In our case, we use the domain name `inovitlabs.ch`.
    So, change the scripts for your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our primary test environment in place, we can start the preparation
    and installation of the Azure AD Connect on the Domain Controller. We use this
    scenario to reduce the costs of your test environment. Be aware that we'll extend
    the test environment in the coming chapters to demonstrate the functionalities
    we discuss in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Are you ready? Let''s prepare the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in with the domain administrator credentials and run the following script
    to create the demo organizational unit structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following diagram shows the expected result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad5d3b0f-6bfa-4b10-9aa7-67e2d8e5f2a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD service organizational unit
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the Active Directory recycle bin feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the **group-managed service account** (**gMSA**) to run the Azure AD
    Connect service. Replace the computer name with the one you choose for your test
    environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the service account for the Active Directory Management Agent that will
    be used to connect and do the synchronization operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The Active Directory Management Agent account needs to be configured with the
    correct permissions on the domain level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the permissions to configure the `svcaadcadma` Azure AD Connect with
    the Active Directory user''s and computer''s console (`dsa.msc`). Don''t forget
    to enable the advanced features under the view option where you can see the Security
    tabs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replicate Directory Changes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replicate Directory Changes All
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the expected result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b51db496-0ec0-4cd1-8bae-41e0625ab93f.png)'
  prefs: []
  type: TYPE_IMG
- en: Assigning correct permissions to the Azure AD Connect AD Management Agent service
    account
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've finished the preparation tasks in our test environment, let's
    run through the following sections for the theoretical explanations and the practical
    execution. For every task, we'll use the same credentials in an evaluated PowerShell
    session.
  prefs: []
  type: TYPE_NORMAL
- en: UserPrincipalName suffix decisions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`UserPrincipalName` is one of the most relevant user attributes in the connection
    from a local AD to the **Azure A****D**. Azure AD Connect follows the rules shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bd3840d-734a-4688-ad61-768c3f61ec65.png)'
  prefs: []
  type: TYPE_IMG
- en: User Principal Name decision path
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding diagram, AAD Connect uses the following logic
    by default:'
  prefs: []
  type: TYPE_NORMAL
- en: If a UPN is available, it will be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a UPN isn't available, it uses the user's **sAMAccountName** and the **fully
    qualified domain name** (**FQDN**) of the connect AD domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the UPN to be exported to the Azure AD isn't verified, the suffix will be
    replaced with **<tenant>.onmicrosoft.com**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that users can exist in any synchronized forest and they include `UserPrincipalName`
    and `sourceAnchor`. In the case of using linked mailboxes, they will be ignored
    because the synchronization engine will find an active and deactivated account
    representation of the user.
  prefs: []
  type: TYPE_NORMAL
- en: Active Directory preparations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To prepare your AD environment, you can use the IdFix tool, which you can download
    from [http://bit.ly/1VnsvVn](http://bit.ly/1VnsvVn). It performs the discovery
    and remediation of identity objects and their attributes in an on-premises AD
    environment in preparation for synchronization to Azure AD. IdFix is provided
    for AD administrators that plan to use Azure AD Connect with the Azure AD/Office
    365 services. You can use the tool for every synchronization scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d1dc543-bf7f-4f05-89bf-068a6080de4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Incorrect user accounts found by the IdFix tool
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the IdFix utility, we''ll create some incorrect test users with the
    following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the expected result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f41fa94a-0075-421a-8133-a0620ab0ebf2.png)'
  prefs: []
  type: TYPE_IMG
- en: Creation result of the damaged user accounts
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can run the IdFix tool to check the local AD for a user that will build
    errors in a synchronization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50a1f40a-338c-4a43-9db0-6f34b02a10b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Errors found on the damaged user accounts
  prefs: []
  type: TYPE_NORMAL
- en: After you test the IdFix tool, delete the created test user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the next steps we will start the installation of the Azure AD Connect
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the Azure AD Connect installation. Download the actual version of the tool
    from [https://www.microsoft.com/en-us/download/details.aspx?id=47594](https://www.microsoft.com/en-us/download/details.aspx?id=47594)
    [and start the installation with the Domain Administrator credentials.](https://bit.ly/1JPD3qY)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the custom installation option so that we can view all the essential
    configuration steps. I always use the custom option and not the Express option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the gMSA created in the previous steps to configure the Azure AD Connect
    service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0d47629-e355-4539-8bc4-7a45da8e2bb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Service account configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'At this time, we don''t set any User sign-in option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cfd7e498-3eea-487c-94c8-1b8af9b18117.png)'
  prefs: []
  type: TYPE_IMG
- en: User sign-in configuration
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll discuss the source anchor decision process, so click
    Next and wait for the next lab part.
  prefs: []
  type: TYPE_NORMAL
- en: Source Anchor decisions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s crucial to understand Source Anchor because it builds the basis for the
    relationship between the AD Domain Services user and the Azure AD user. The `sourceAnchor`
    attribute can't be changed. Be aware that your configuration fits your expected
    scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'The attribute provides the following capabilities to you:'
  prefs: []
  type: TYPE_NORMAL
- en: Supports faster rebuilding scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports the move from a cloud-only to a synchronized scenario with a hard match
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a federation scenario, it builds the claim with `UserPrincipalName` to identify
    a user uniquely
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following rules need to be followed when choosing a `sourceAnchor` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: Less than 60 characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No special characters, such as {, }, |, ~, <, >, (, ), '' ; : , [, ], ", @,
    _,\, !, #, $, %, &, *, +, /, =, ?, ^, or `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Globally unique
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String, integer, or binary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should not be based on the user's name and case-sensitive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigned at object-creation time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure AD Connect uses the following defaults as the `sourceAnchor` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure AD Connect (version 1.1.486.0 and older) usage of the objectGUID as the
    `sourceAnchor` attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure AD Connect (version 1.1.524.0 and after) usage of the ms-DS-ConsistencyGuid
    as `sourceAnchor` attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the configuration in the Azure AD Connect installation
    wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04e1a01b-c9bd-4b57-9703-0548a061f69a.png)'
  prefs: []
  type: TYPE_IMG
- en: sourceAnchor definition of Azure AD Connect
  prefs: []
  type: TYPE_NORMAL
- en: The Management Agent user account must be granted write permissions to the ms-DS-ConsistencyGuid
    attribute in the local AD. Keep in mind, only newer versions of Azure AD Connect
    (1.1.552.0 and after) support switching from ObjectGuid to ms-DS-ConsistencyGuid
    as the `sourceAnchor` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Connected Directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Synchronization Engine** from the Azure AD Connect processes identities
    from the AD and the Azure AD. Every directory or repository organizes the data
    in their method and provides different access methods. The data repositories that
    are synchronized with Azure AD Connect are called connected data sources or **connected
    directories** (**CDs**). The two supported CDs in Azure AD Connect are the AD
    and the Azure AD. You can connect any other repository but in a Microsoft, unsupported
    way. The following diagram shows the basic concept of synchronization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16d19282-8ddb-4fba-a144-0b8dbaace242.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic concept of a connector and the connected directory
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's jump back to the Azure AD Connect configuration and log back into
    your Domain Controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will configure the two repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide your global administrator credentials from your Azure AD and click
    Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d8679d60-869b-4763-9884-24861aa2917c.png)'
  prefs: []
  type: TYPE_IMG
- en: Connect Azure AD Connect to the Azure AD
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect the local Active Directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/18493b17-7ddb-4432-be41-f2117d97ccd3.png)'
  prefs: []
  type: TYPE_IMG
- en: Connect the local AD
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the created AD Management Agent account for this task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fb6c6cd9-9976-4bd9-8db3-5d513f1b4a4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Configure the AD Management Agent service account
  prefs: []
  type: TYPE_NORMAL
- en: 'Find your verified custom domain, in my case inovitlabs.ch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7edcd30e-934f-4067-ac22-a1483767acc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Define the sign-in options
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Domain and OU filtering page, choose the created Managed Business Objects
    OU. With the following setting, no newly created OUs will be included in the synchronization
    process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c223ef9-3ea0-408d-be63-142081d57e9e.png)'
  prefs: []
  type: TYPE_IMG
- en: OU filtering options
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following option, every newly established OU under Managed Business
    Objects will be included in the synchronization process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f0e1a64-1b7e-46b4-b25e-73ad0545fa71.png)'
  prefs: []
  type: TYPE_IMG
- en: The second part of OU filtering options
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the `sourceAnchor` ms-DS-ConsistencyGuid as we discussed in the *Source
    Anchor decisions* section :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d9457fe4-4e99-498b-a8d3-9bf63a6982b2.png)'
  prefs: []
  type: TYPE_IMG
- en: sourceAnchor definition dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Filter users and devices section, choose the default option. You could
    also use the group option for proof of concepts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a614ae7c-de2a-421b-a42b-efd295c08866.png)'
  prefs: []
  type: TYPE_IMG
- en: Filter users and devices dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Optional features section, you see the available synchronization options,
    which we discussed in the integration scenarios. Keep in mind that you need the
    correct permissions for the Active Directory Management Agent account to write
    back to the local AD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3536a0a4-4c2e-401a-a1e5-5d0f4676d3c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Connect Optional features section
  prefs: []
  type: TYPE_NORMAL
- en: Click Next to finish the configuration. Be sure that you don't enable the synchronization
    process because we do the things step by step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The directories will be connected after we finish the Azure AD Connect installation
    wizard, and can be viewed in the Synchronization Service Manager under Connectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a2f749c-34db-4afb-88a4-67bf654ef134.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Connect - Connected directories
  prefs: []
  type: TYPE_NORMAL
- en: After installing and configuring the Azure AD Connect tool, we can jump into
    the detailed sections of the synchronization. In the upcoming [Chapter 3](8f401db9-e842-4a9a-8b12-5fdd175df3c0.xhtml), *Exploring
    Advanced Synchronization Concepts*, we'll enable the available writeback, extension,
    and filtering options.
  prefs: []
  type: TYPE_NORMAL
- en: Import flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The internal sync engine contains two namespaces that store identity information:
    the CS and the **metaverse** (**MV**). The CS is used to detect changes in the
    connected data sources. The connector space is also used to proceed outgoing changes
    for the export process into the connected data source.'
  prefs: []
  type: TYPE_NORMAL
- en: Data can flow in each direction, but it can't flow in both directions simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to recap: the MV is a storage area that contains the aggregated identity
    information from multiple connected data. It''s very important to understand that
    every synchronization engine object must have a **globally unique identifier**
    (**GUID**) for data integration reasons and the relationships between the objects.'
  prefs: []
  type: TYPE_NORMAL
- en: The import process is done between the connected data source and the connector
    space. For this reason, we provide some information about the connector space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connector space objects have two attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Globally unique identifier** (**GUID**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distinguished name** (**DN**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CS objects can be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A CS object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A placeholder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the schematic view of the **Synchronization Engine**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8ccbf48-de66-454c-8f1a-70ad56bc8cc4.png)'
  prefs: []
  type: TYPE_IMG
- en: Synchronization Engine overview
  prefs: []
  type: TYPE_NORMAL
- en: Now let's see the import flow in action. Keep in mind that we already have users
    in our Azure AD from [Chapter 1](54c375d9-b7d0-4478-8777-33935239254b.xhtml),
    *Building and Managing Azure AD:*
  prefs: []
  type: TYPE_NORMAL
- en: Log into your Domain Controller and open the Azure AD Connect Synchronization
    Service Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run a Full Import on the connected Active Directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/62d846b8-9d54-4a03-87f2-23e67a758d81.png)'
  prefs: []
  type: TYPE_IMG
- en: Full Import profile run
  prefs: []
  type: TYPE_NORMAL
- en: 'The sync engine imports the organizational structure (placeholder) into the
    CS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/575c2606-7f41-4259-a0ce-5dff307a0249.png)'
  prefs: []
  type: TYPE_IMG
- en: Statistics after Full Import
  prefs: []
  type: TYPE_NORMAL
- en: 'You see the imported organizational structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf75545f-39f6-4562-9b09-2d6ff852144e.png)'
  prefs: []
  type: TYPE_IMG
- en: Imported objects
  prefs: []
  type: TYPE_NORMAL
- en: 'Run a Full Import on the connected Azure Active Directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d82aed0-7d49-4dc9-a714-a0ae1a6e41c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Full Import on Azure AD
  prefs: []
  type: TYPE_NORMAL
- en: 'No objects are created in the CS. Remember that we already have users in the
    Azure AD—there''s no user write-back available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/261c972a-bba2-4157-8bc7-12218e04e5c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Full Import Azure AD statistics
  prefs: []
  type: TYPE_NORMAL
- en: Also, there's no interaction with the MV with an import flow. In the next section,
    you'll learn more about placeholder objects.
  prefs: []
  type: TYPE_NORMAL
- en: Placeholder objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An example of a placeholder object is the containers to validate the path to
    the AD objects. We can also talk about a placeholder object to which the manager
    attribute refers. As a rule, we can say that placeholder objects don't contain
    values and are not linked with the MV.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run profiles—one per forest, one step per domain:'
  prefs: []
  type: TYPE_NORMAL
- en: We import (stage) all objects into the CS (even filtered by the Connector Filter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full Import—all objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delta Import—only changed objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll move to the synchronization flows.
  prefs: []
  type: TYPE_NORMAL
- en: Synchronization flows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Synchronization flows are specific to the processes between the CS and the
    MV objects. As a rule, we can say that multiple CS objects can be linked to one
    MV object. This is typical because the MV represents the unique identity object
    over all connected systems. On the other hand, a CS object can''t have a link
    to multiple MV objects, as shown in the image below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99744c52-9595-49a0-b065-91bd0df677e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Synchronization flow overview
  prefs: []
  type: TYPE_NORMAL
- en: 'The synchronization flows are configured over the synchronization rules that
    you can view in the Azure AD Connect Synchronization Rules Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a75c387-813c-4e3f-a5b8-c39e864b6acd.png)'
  prefs: []
  type: TYPE_IMG
- en: Synchronization rules editor overview
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](8f401db9-e842-4a9a-8b12-5fdd175df3c0.xhtml), *Exploring Advanced
    Synchronization Concepts,* we'll discuss the synchronization rules in detail.
    For now, we'll focus on the main functions and explanations.
  prefs: []
  type: TYPE_NORMAL
- en: Inbound synchronization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The inbound synchronization is defined by a subset of synchronization rules
    and contains the terms shown in the following diagram. If we use an inbound synchronization,
    the synchronization engine will update the changes between the MV and the CS.
    The inbound synchronization happens when the content of the MV is updated by using
    the data in the CS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25da1a55-e2f6-4f69-b4fe-ca7a1eb186d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Inbound synchronization overview
  prefs: []
  type: TYPE_NORMAL
- en: Another term for the provisioning is **Projection** and it's part of the outbound
    synchronization. We can also say that provisioning is an object-level operation
    because the synchronization engine creates a new object in the MV based on the
    object in the CS and creates a link between them. The join is in the special process,
    which creates the link. So, the join is also an object-level operation. The import
    attribute flow is used from the synchronization engine to update attribute values
    of the MV object. We can say that the import flow is attribute-level-based and
    requires a link between the CS and the MV object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at our Azure AD Connect:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into your Domain Controller and open the Azure AD Connect Synchronization
    Service Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run a Full Synchronization on the local AD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/87eefc41-5b19-4e6a-bd3e-e13fdfa17018.png)'
  prefs: []
  type: TYPE_IMG
- en: Full Synchronization run on the local AD
  prefs: []
  type: TYPE_NORMAL
- en: 'Nothing happens on the MV. You will only find 5 Disconnectors for the organizational
    structure (placeholders):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb5e3d84-e1a9-42e2-8e1e-efab70d2a9ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Full Synchronization statistics
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a test user with the same `UserPrincipalName` as an existing
    user in Azure AD. In my case, I use `jochen.nickel@inovitlabs.ch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run a Delta import on the local AD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2bedc4ba-32d2-4cbf-acc2-f8286ee78158.png)'
  prefs: []
  type: TYPE_IMG
- en: Delta Import statistics on local AD
  prefs: []
  type: TYPE_NORMAL
- en: 'Run a Delta Synchronization on the local AD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a69d8700-253d-4e6b-867a-d88e116477fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Delta synchronization on local AD statistics
  prefs: []
  type: TYPE_NORMAL
- en: In the actual state, we would have a provisioning of the user in the Azure AD.
    For this reason, we need to run a Full Synchronization on the Azure AD to get
    all the changes. This procedure avoids the making of a wrong provisioning, because
    we want to join the user based on the `UserPrincipalName`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run a Full Synchronization on the Azure AD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6ea3c94-750e-4b95-8bc4-6077f327df57.png)'
  prefs: []
  type: TYPE_IMG
- en: Full synchronization statistics
  prefs: []
  type: TYPE_NORMAL
- en: Click on Connectors without Flow Updates and inspect the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run an Export on the Azure AD which will recognize that the user will be joined
    by `UserPrincipalName`. We prove this with a Metaverse Search:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/24b2cf40-d14e-4f5f-bcad-516bb80def73.png)'
  prefs: []
  type: TYPE_IMG
- en: Metaverse Search options
  prefs: []
  type: TYPE_NORMAL
- en: You synchronized your first user, including a join operation! You can follow
    up by mapping all the accounts. This is how you can map existing on-premises accounts
    with Azure AD accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run an Export on the AD, you''ll receive a permission issue error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c08162c-7f5a-419b-bd13-22fed36ed41f.png)'
  prefs: []
  type: TYPE_IMG
- en: Export statistics on AD
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the cmdlets to your environment and execute them to grant the AD Management
    Account the permissions to write to `ms-ds-consistencyGuid`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Run the Export on the AD again and the error will disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the email address or write `ImmutableId` to a PowerShell script.
    You can use the following script for this purpose, [https://gallery.technet.microsoft.com/scriptcenter/Convert-between-Immutable-e1e96aa9](https://gallery.technet.microsoft.com/scriptcenter/Convert-between-Immutable-e1e96aa9) or
    the following procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After you successfully join all the users, you can run a complete default sync
    cycle with the following PowerShell cmdlet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This would happen if you enable the synchronization in the installation and
    configuration wizard of Azure AD Connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the Azure AD Connect Sync Engine schedulers runs the following
    on the initial run:'
  prefs: []
  type: TYPE_NORMAL
- en: AD—Full Import
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AAD—Full Import
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AD—Full Sync
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AAD—Full Sync
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AAD—Export
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AD—Export
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've done the practical tasks, let's look at the rest of the theoretical
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Outbound synchronization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With outbound synchronization, you update the exported objects when an MV object
    is changed but not deleted. The primary purpose of the outbound synchronization
    is to check the changes to MV objects, which need to be updated in the CS.
  prefs: []
  type: TYPE_NORMAL
- en: 'With outbound synchronization, we use the following three processes. You will
    get a provisioning process if changes are applied to an object in the MV. The
    deprovisioning process always depends on the provisioning itself, because the
    provisioning process is the only one that can initiate the export attribute flow.
    The objects in the CS during an export are provided with the pending export flag
    to make them export objects. You can see the process in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21dc04d7-5c7a-4f32-bc8d-cd8350638d40.png)'
  prefs: []
  type: TYPE_IMG
- en: Outbound synchronization overview
  prefs: []
  type: TYPE_NORMAL
- en: If changes happen to an MV object, the synchronization engine can create joined
    objects as part of the provisioning process. Furthermore, the synchronization
    engine can rename a joined object and disjoin an object.
  prefs: []
  type: TYPE_NORMAL
- en: Joins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Joins are an excellent functionality. We call a linked object in the CS, with
    an object in the MV a joined object. Otherwise, it''s a disjoined object. The
    following diagram shows the Joins concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/286671bf-776d-468d-85c1-2e237cf51178.png)'
  prefs: []
  type: TYPE_IMG
- en: Joins overview
  prefs: []
  type: TYPE_NORMAL
- en: With the synchronization process, an object from the CS will be a joined object.
    In this case, the related attributes can flow. The attribute flow is in both directions.
  prefs: []
  type: TYPE_NORMAL
- en: The disjoined object usage delivers such that the required information about
    the object is already stored and they are convertible in both ways. With an import
    you always create a disjoined object as well with the export.
  prefs: []
  type: TYPE_NORMAL
- en: Connector objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have discussed the join operations we will explain the different
    connector objects, which are used by the system to build the connection between
    the connector space and the metaverse object.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of connector objects:'
  prefs: []
  type: TYPE_NORMAL
- en: Connectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explicit connectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A connector is an object in the CS. The object is linked to an object in the
    MV, so every rule applies to this object. Furthermore, an explicit connector exists.
    With this type of connector, the object is linked to an object in the MV. This
    type of connector can only be created with the Joiner functionality, which isn't
    available in Azure AD Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Disconnector objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three types of disconnector objects:'
  prefs: []
  type: TYPE_NORMAL
- en: Disconnectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explicit disconnectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtered disconnectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We speak about a disconnector when an object in the CS isn't linked to an object
    in the MV. An explicit disconnector is also not a linked object in the MV and
    can only be joined with the Joiner toolset of the synchronization engine. This
    feature is not available in Azure AD Connect. The meaning of a filtered disconnector
    is an object in the CS, that is prevented from being joined or projected to an
    object in the MV.
  prefs: []
  type: TYPE_NORMAL
- en: Export flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the export process, the synchronization engine checks all the exported
    objects with the **Pending Export** flag in the CS, and an update will be sent
    to the data source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29e73f73-0954-40f3-9544-cc8e575cfa43.png)'
  prefs: []
  type: TYPE_IMG
- en: Export flow overview
  prefs: []
  type: TYPE_NORMAL
- en: 'At this moment, the synchronization engine can only validate whether the export
    was successful. It needs an import to prove that the exported values are correctly
    transported to the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3ca2b48-322e-419a-a696-e8b964ae6cfc.png)'
  prefs: []
  type: TYPE_IMG
- en: Import flow to prove the export
  prefs: []
  type: TYPE_NORMAL
- en: Now that you are equipped with the essential information about Azure AD Connect
    and synchronization tasks, we'll jump into the details of the synchronization
    rules editor in [Chapter 3](8f401db9-e842-4a9a-8b12-5fdd175df3c0.xhtml), *Exploring
    Advanced Synchronization Concepts*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we discussed the most important identity synchronization tools:
    Microsoft Identity Manager and Azure Active Directory Connect. We walked through
    the typical synchronization scenarios. Now you''re able to adopt the best scenario
    for your requirements. In the *Synchronization terms and processes* section, we
    took a deep dive into the synchronization service, so you know exactly what''s
    happening under the hood, which will help you to avoid mistakes and provide better
    troubleshooting for synchronization errors.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll explore additional filtering, join attributes, declarative
    provisioning options, and generic connector usage.
  prefs: []
  type: TYPE_NORMAL
