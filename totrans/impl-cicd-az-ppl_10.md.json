["```\n# Multi-Stage pipeline\ntrigger:\n- main\npool:\n  vmImage: ubuntu-latest\nstages:\n- stage: build\n  displayName: Build\n  jobs:\n  - template: build-apps.yml\n  - template: build-iac.yml\n- stage: deployTest\n  displayName: Deploy Test\n  dependsOn: build\n  jobs:\n  - template: deploy.yml\n    parameters:\n      envName: awstest\n- stage: deployProduction\n  displayName: Deploy Production\n  dependsOn: deployTest\n  jobs:\n  - template: deploy.yml\n    parameters:\n      envName: awsproduction\n```", "```\naws ecr create-repository --repository-name packt-store-cart\naws ecr create-repository --repository-name packt-store-catalog\naws ecr create-repository --repository-name packt-store-checkout\naws ecr create-repository --repository-name packt-store-frontend\n```", "```\nparameters:\n- name: awsConnection\n  type: string\n  default: ‹aws-packt'\n- name: location\n  type: string\n  default: ‹us-east-1›\njobs:\n- job: BuildAndPushContainers\n  displayName: Build and Push Containers\n  steps:\n  - task: AWSShellScript@1\n    displayName: 'Build and Push Containers'\n    inputs:\n      awsCredentials: ${{ parameters.awsConnection }}\n      regionName: ${{ parameters.location }}\n      failOnStandardError: false\n      scriptType: 'inline'\n      inlineScript: |\n```", "```\n# Set variables for AWS Region and Account ID\nL=\"${{ parameters.location }}»\nID=`aws sts get-caller-identity --query Account --output text`\n# Login to ECR\naws ecr get-login-password | docker login --username AWS --password-stdin $ID.dkr.ecr.$L.amazonaws.com\n# Build images with docker-compose\ndocker-compose build\n# Tag and push images to ECR\ndeclare -a services=(\"catalog\" \"cart\" \"checkout\" \"frontend\")\ndeclare -a tags=(\"$(Build.BuildNumber)\" \"latest\")\nfor s in \"${services[@]}\"\ndo\n  echo «Pushing images for $s\"\n  for t in «${tags[@]}\"\n  do\n    docker tag packt-store-$s:latest $ID.dkr.ecr.$L.amazonaws.com/packt-store-$s:$t\n    docker push $ID.dkr.ecr.$L.amazonaws.com/packt-store-$s:$t\n  done\ndone\n```", "```\n    parameters:\n    - name: awsConnection\n      type: string\n      default: 'aws-packt'\n    - name: region\n      type: string\n      default: 'us-east-1'\n    ```", "```\n    jobs:\n    - job: VerifyAndPackageIaC\n      displayName: Verify and Package IaC\n      steps:\n    ```", "```\n        - script: docker run --rm -v $(pwd):/manifests stackrox/kube-linter lint /manifests --config /manifests/.kube-linter.yml\n          displayName: 'Lint Catalog Helm Chart'\n          workingDirectory: e2e/iac/helm-charts/catalog\n        - task: HelmInstaller@1\n          displayName: 'Install Helm'\n        - task: HelmDeploy@0\n          displayName: 'Package Catalog Helm Chart'\n          inputs:\n            command: package\n            chartPath: e2e/iac/helm-charts/catalog\n            destination: $(Build.ArtifactStagingDirectory)\n        - task: PublishPipelineArtifact@1\n          displayName: 'Publish Catalog Helm Chart'\n          inputs:\n            targetPath: $(Build.ArtifactStagingDirectory)\n            artifact: catalog-helm-chart\n            publishLocation: 'pipeline'\n    ```", "```\n        - task: AWSCLI@1\n          displayName: 'Validate CloudFormation cart'\n          inputs:\n              awsCredentials: ${{parameters.awsConnection}}\n              regionName: ${{parameters.region}}\n              awsCommand: 'cloudformation'\n              awsSubCommand: 'validate-template'\n              awsArguments: '--template-body file://e2e/iac/aws/cart/template.json'\n        - task: PublishPipelineArtifact@1\n          displayName: 'Publish Artifacts cart'\n          inputs:\n            targetPath: 'e2e/iac/aws/cart'\n            artifact: cart-iac\n            publishLocation: 'pipeline'\n    ```", "```\n        - task: AWSCLI@1\n          displayName: 'Validate CloudFormation checkout'\n          inputs:\n              awsCredentials: ${{parameters.awsConnection}}\n              regionName: ${{parameters.region}}\n              awsCommand: 'cloudformation'\n              awsSubCommand: 'validate-template'\n              awsArguments: '--template-body file://e2e/iac/aws/checkout/template.json'\n        - task: PublishPipelineArtifact@1\n          displayName: 'Publish Artifacts checkout'\n          inputs:\n            targetPath: 'e2e/iac/aws/checkout'\n            artifact: checkout-iac\n            publishLocation: 'pipeline'\n    ```", "```\n        - task: AWSCLI@1\n          displayName: 'Validate CloudFormation frontend'\n          inputs:\n              awsCredentials: ${{parameters.awsConnection}}\n              regionName: ${{parameters.region}}\n              awsCommand: 'cloudformation'\n              awsSubCommand: 'validate-template'\n              awsArguments: '--template-body file://e2e/iac/aws/frontend/template.json'\n        - task: PublishPipelineArtifact@1\n          displayName: 'Publish Artifacts frontend'\n          inputs:\n            targetPath: 'e2e/iac/aws/frontend'\n            artifact: frontend-iac\n            publishLocation: 'pipeline'\n    ```", "```\nparameters:\n- name: envName\n  type: string\n  default: 'test'\n- name: awsConnection\n  type: string\n  default: 'aws-packt'\n- name: location\n  type: string\n  default: 'us-east-1'\n- name: containerTag\n  type: string\n  default: '$(Build.BuildNumber)'\n```", "```\njobs:\n- deployment: deployment_${{ parameters.envName }}\n  displayName: Deploy to ${{ parameters.envName }}\n  environment: ${{ parameters.envName }}\n  strategy:\n    runOnce:\n      deploy:\n        steps:\n```", "```\n    - download: current\n      displayName: 'Download catalog helm chart'\n      artifact: catalog-helm-chart\n    ```", "```\n    - task: HelmInstaller@1\n      displayName: 'Install Helm'\n      inputs:\n        helmVersionToInstall: 3.11.3\n    ```", "```\n    - task: AWSShellScript@1\n      displayName: 'Deploy catalog iac and container'\n      inputs:\n        awsCredentials: ${{ parameters.awsConnection }}\n        regionName: ${{ parameters.location }}\n        arguments: '${{ parameters.envName }}-catalog ${{ parameters.location }} ${{ parameters.containerTag }}'\n        disableAutoCwd: true\n        workingDirectory: '$(Pipeline.Workspace)/cart-iac'\n        failOnStandardError: true\n        scriptType: 'inline'\n        inlineScript: |\n          # Confirm Parameters\n          echo \"SERVICE_NAME: $1\"\n          echo \"AWS_REGION: $2\"\n          echo \"CONTAINER_TAG: $3\"\n          # Install EKSCTL\n          ARCH=amd64\n          PLATFORM=$(uname -s)_$ARCH\n          curl -sLO \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz\"\n          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz\n          sudo mv /tmp/eksctl /usr/local/bin\n          # Create Cluster\n          eksctl create cluster -n $1 --version 1.27 -t t3.large -m 1 -M 2 --full-ecr-access\n          # Retrieve AWS Account ID\n          AWSACCOUNTID=`aws sts get-caller-identity --query Account --output text`\n          # Deploy Catalog App to EKS\n          helm upgrade --install --set image.tag=${{ parameters.containerTag }},image.repository=$AWSACCOUNTID.dkr.ecr.${{ parameters.location }}.amazonaws.com/packt-store-catalog --wait catalog $(Pipeline.Workspace)/catalog-helm-chart/packt-store-catalog-1.0.0.tgz\n          CATALOG_HOSTNAME=`kubectl get service catalog-packt-store-catalog -o json | jq -r \".status.loadBalancer.ingress[0].hostname\"`\n          CATALOG_URL=\"http://$CATALOG_HOSTNAME:5050/\"\n          echo \"Catalog URL: $CATALOG_URL\"\n          echo \"##vso[task.setvariable variable=CatalogUrl;]$CATALOG_URL\"\n    ```", "```\n    - download: current\n      displayName: 'Download cart iac'\n      artifact: cart-iac\n    ```", "```\n    - task: CloudFormationCreateOrUpdateStack@1\n      displayName: 'Create cart stack'\n      inputs:\n        awsCredentials: ${{ parameters.awsConnection }}\n        regionName: ${{ parameters.location }}\n        stackName: '${{ parameters.envName }}-cart'\n        templateSource: 'file'\n        templateFile: '$(Pipeline.Workspace)/cart-iac/template.json'\n        onFailure: 'DELETE'\n        captureStackOutputs: 'asVariables'\n        captureAsSecuredVars: false\n    ```", "```\n        - task: AWSShellScript@1\n          displayName: 'Deploy cart container'\n          inputs:\n            awsCredentials: ${{ parameters.awsConnection }}\n            regionName: ${{ parameters.location }}\n            arguments: '${{ parameters.envName }}-cart ${{ parameters.location }} ${{ parameters.containerTag }}'\n            disableAutoCwd: true\n            workingDirectory: '$(Pipeline.Workspace)/cart-iac'\n            failOnStandardError: true\n            scriptType: 'inline'\n            inlineScript: |\n              # Confirm Parameters\n              echo \"SERVICE_NAME: $1\"\n              echo \"AWS_REGION: $2\"\n              echo \"CONTAINER_TAG: $3\"\n        ```", "```\n              # Add Private Registry Access\n              aws lightsail update-container-service --service-name $1 --region $2 --private-registry-access file://private-registry-access.json\n              echo \"Waiting for container service to be ready...\"\n              principal_arn=\"\"\n              until [ \"$principal_arn\" != \"\" ]\n              do\n                  sleep 5\n                  principal_arn=`aws lightsail get-container-services --service-name $1 --region $2 --query \"containerServices[0].privateRegistryAccess.ecrImagePullerRole.principalArn\" --output text`\n              done\n              echo \"\"\n              echo \"Principal ARN: $principal_arn\"\n        ```", "```\n              # Apply ECR policy\n              echo \"Applying ECR policy...\"\n              sed \"s|IamRolePrincipalArn|$principal_arn|g\" ecr-policy-template.json > ecr-policy.json\n              # redirect stderr to /dev/null to avoid error if policy does not exist\n              aws ecr delete-repository-policy --repository-name packt-store-cart 2>/dev/null\n              aws ecr set-repository-policy --repository-name packt-store-cart --policy-text file://ecr-policy.json\n              # Wait until container service is ready for update\n              state=\"UPDATING\"\n              until [ \"$state\" != \"UPDATING\" ]\n              do\n                  sleep 5\n                  state=`aws lightsail get-container-services --service-name $1 --region $2 --query \"containerServices[0].state\" --output text`\n              done\n              echo \"\"\n        ```", "```\n              # Create Deployment\n              account_id=`aws sts get-caller-identity --query \"Account\" --output text`\n              sed \"s|SERVICENAME|$1|g ; s|AWSACCOUNTID|$account_id|g ; s|AWSREGION|$2|g ; s|CONTAINERTAG|$3|g\" deployment-template.json > deployment.json\n              echo \"Creating deployment...\"\n              aws lightsail create-container-service-deployment --service-name $1 --region $2 --cli-input-json file://deployment.json\n              state=\"DEPLOYING\"\n              until [ \"$state\" != \"DEPLOYING\" ]\n              do\n                  sleep 5\n                  state=`aws lightsail get-container-services --service-name $1 --region $2 --query \"containerServices[0].state\" --output text`\n              done\n              echo \"\"\n              if [ \"$state\" == \"RUNNING\" ]\n              then\n                  echo \"Deployment created successfully!\"\n              else\n                  echo \"Deployment failed!\"\n                  exit 1\n              fi\n        ```", "```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ecs-tasks.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```", "```\naws iam create-role --role-name ecsTaskExecutionRole --assume-role-policy-document file://ecs-tasks-trust-policy.json\naws iam attach-role-policy --role-name ecsTaskExecutionRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n```", "```\n    - download: current\n      displayName: 'Download checkout iac'\n      artifact: checkout-iac\n    ```", "```\n    - task: CloudFormationCreateOrUpdateStack@1\n      displayName: 'Create checkout stack'\n      inputs:\n        awsCredentials: ${{ parameters.awsConnection }}\n        regionName: ${{ parameters.location }}\n        stackName: '${{ parameters.envName }}-checkout'\n        templateSource: 'file'\n        templateFile: '$(Pipeline.Workspace)/checkout-iac/template.json'\n        templateParametersSource: 'inline'\n        templateParameters: '[{\"ParameterKey\":\"ContainerTag\",\"ParameterValue\":\"${{ parameters.containerTag }}\"}]'\n        onFailure: 'DELETE'\n        captureStackOutputs: 'asVariables'\n        captureAsSecuredVars: false\n    ```", "```\n    - download: current\n      displayName: 'Download frontend iac'\n      artifact: frontend-iac\n    ```", "```\n    - task: CloudFormationCreateOrUpdateStack@1\n      displayName: 'Create frontend stack'\n      inputs:\n        awsCredentials: ${{ parameters.awsConnection }}\n        regionName: ${{ parameters.location }}\n        stackName: '${{ parameters.envName }}-frontend'\n        templateSource: 'file'\n        templateFile: '$(Pipeline.Workspace)/frontend-iac/template.json'\n        templateParametersSource: 'inline'\n        templateParameters: '[{\"ParameterKey\":\"ContainerTag\",\"ParameterValue\":\"${{ parameters.containerTag }}\"}, {\"ParameterKey\":\"CatalogUrl\",\"ParameterValue\":\"$(CatalogUrl)\"}, {\"ParameterKey\":\"CartUrl\",\"ParameterValue\":\"$(CartUrl)\"}, {\"ParameterKey\":\"CheckoutUrl\",\"ParameterValue\":\"$(CheckoutUrl)\"}]'\n        onFailure: 'DELETE'\n        captureStackOutputs: 'asVariables'\n        captureAsSecuredVars: false\n    ```", "```\neksctl delete cluster -n test-catalog\naws cloudformation delete-stack --stack-name test-cart\naws cloudformation delete-stack --stack-name test-checkout\naws cloudformation delete-stack --stack-name test-frontend\neksctl delete cluster -n production-catalog\naws cloudformation delete-stack --stack-name production-cart\naws cloudformation delete-stack --stack-name production-checkout\naws cloudformation delete-stack --stack-name production-frontend\n```"]