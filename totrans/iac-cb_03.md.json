["```\nvariable \"aws_coreos_ami\" {\n  type = \"map\"\n\n  default = {\n    eu-west-1 = \"ami-85097ff6\"\n    us-east-1 = \"ami-0aef8e1d\"\n  }\n}\n```", "```\nvariable \"cluster_size\" {\n  type = \"map\"\n\n  default = {\n    staging    = \"1\"\n    production = \"3\"\n  }\n\n  description = \"Number of nodes in the cluster\"\n}\n```", "```\nvariable \"aws_instance_type\" {\n  type = \"map\"\n\n  default = {\n    staging    = \"t2.micro\"\n    production = \"t2.medium\"\n  }\n\n  description = \"Instance type\"\n}\n```", "```\nresource \"aws_instance\" \"coreos\" {\n  count                       = \"${lookup(var.cluster_size, var.environment)}\"\n  ami                         = \"${lookup(var.aws_coreos_ami, var.aws_region)}\"\n  instance_type               = \"${lookup(var.aws_instance_type, var.environment)}\"\n  key_name                    = \"${aws_key_pair.admin_key.key_name}\"\n  associate_public_ip_address = true\n\n  tags {\n    Name        = \"coreos_${var.environment}_${count.index+1}\"\n    Environment = \"${var.environment}\"\n  }\n}\n```", "```\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"iacbook-${var.environment}\"\n\n  tags {\n    Name        = \"IAC Book ${var.environment} Bucket\"\n    Environment = \"${var.environment}\"\n  }\n}\n```", "```\n$ terraform apply -state=staging.tfstate\n\n```", "```\n$ terraform plan -state=production.tfstate -var environment=production\n\n```", "```\n    variable \"aws_centos_ami\" {\n      type = \"map\"\n\n      default = {\n        eu-west-1 = \"ami-7abd0209\"\n        us-east-1 = \"ami-6d1c2007\"\n      }\n    }\n    ```", "```\n    variable \"aws_instance_type\" {\n      default     = \"t2.micro\"\n      description = \"Instance Type\"\n    }\n    ```", "```\n    variable \"chef_version\" {\n      default = \"12.13.37\"\n    }\n    ```", "```\n    variable \"chef_server_url\" {\n      default = \"https://api.chef.io/organizations/iacbook\"\n    }\n    ```", "```\n    variable \"chef_validation_client_name\" {\n      default = \"iacbook\"\n    }\n    ```", "```\n    variable \"ssh_user\" {\n      default = \"centos\"\n    }\n    ```", "```\nresource \"aws_instance\" \"centos\" {\n  ami                         = \"${lookup(var.aws_centos_ami, var.aws_region)}\"\n  instance_type               = \"${var.aws_instance_type}\"\n  key_name                    = \"${aws_key_pair.admin_key.key_name}\"\n  security_groups             = [\"${aws_security_group.base_security_group.name}\"]\n  associate_public_ip_address = true\n\n  tags {\n    Name = \"CentOS-${count.index+1} by Terraform\"\n  }\n}\n```", "```\nconnection {\n    type     = \"ssh\"\n    user     = \"${var.ssh_user}\"\n    key_file = \"${var.aws_ssh_admin_key_file}\"\n  } \n```", "```\nresource \"aws_instance\" \"centos\" {\n[...]\n  provisioner \"chef\" {\n    node_name              = \"centos-${count.index+1}\"\n    run_list               = [\"starter\"]\n    server_url             = \"${var.chef_server_url}\"\n    validation_client_name = \"${var.chef_validation_client_name}\"\n    validation_key         = \"${file(\"chef/validator.pem\")}\"\n    version                = \"${var.chef_version}\"\n  }\n }\n```", "```\nvariable \"aws_centos_ami\" {\n  type = \"map\"\n\n  default = {\n    eu-west-1 = \"ami-7abd0209\"\n    us-east-1 = \"ami-6d1c2007\"\n  }\n}\n\nvariable \"aws_instance_type\" {\n  default     = \"t2.micro\"\n  description = \"Instance Type\"\n}\n```", "```\nresource \"aws_instance\" \"centos\" {\n  ami                         = \"${lookup(var.aws_centos_ami, var.aws_region)}\"\n  instance_type               = \"${var.aws_instance_type}\"\n  key_name                    = \"${aws_key_pair.admin_key.key_name}\"\n  security_groups             = [\"${aws_security_group.base_security_group.name}\"]\n  associate_public_ip_address = true\n\n  tags {\n    Name = \"CentOS\"\n  }\n}\n```", "```\n[section_name_1]\n1.2.3.4\n[section_name_2]\n5.6.7.8\na.server.fqdn\n```", "```\n[centos7_hosts]\n1.2.3.4\n```", "```\n[centos7_hosts]\n${host_public_ipv4}\n```", "```\ndata \"template_file\" \"ansible_hosts\" {\n  template = \"${file(\"hosts.tpl\")}\"\n\n  vars {\n    host_public_ipv4 = \"${aws_instance.centos.public_ip}\"\n  }\n}\n```", "```\nresource \"null_resource\" \"generate_ansible_hosts\" {\n  provisioner \"local-exec\" {\n    command = \"echo '${data.template_file.ansible_hosts.rendered}' > hosts\"\n  }\n}\n```", "```\n$ cat hosts\n[centos7_hosts]\n52.17.172.231\n\n```", "```\n---\n- hosts: centos7_hosts\n  become: yes\n  tasks:\n    - name: Install EPEL\n      yum: name=epel-release state=present\n    - name: Install Docker\n      yum: name=docker state=present\n    - name: Start docker\n      service: name=docker state=started enabled=yes\n```", "```\n$ ansible-playbook -i hosts -u centos ansible/main.yml\nPLAY [centos7_hosts] ***********************************************************\n[...]\nPLAY RECAP *********************************************************************\n52.17.172.231              : ok=4    changed=0    unreachable=0    failed=0\n\n```", "```\nresource \"aws_instance\" \"centos\" {\n  ami                         = \"${lookup(var.aws_centos_ami, var.aws_region)}\"\n  instance_type               = \"${var.aws_instance_type}\"\n  key_name                    = \"${aws_key_pair.admin_key.key_name}\"\n  security_groups             = [\"${aws_security_group.base_security_group.name}\"]\n  associate_public_ip_address = true\n\n  tags {\n    Name = \"CentOS\"\n  }\n}\n```", "```\nvariable \"aws_centos_ami\" {\n  type = \"map\"\n\n  default = {\n    eu-west-1 = \"ami-7abd0209\"\n    us-east-1 = \"ami-6d1c2007\"\n  }\n}\n\nvariable \"aws_instance_type\" {\n  default     = \"t2.micro\"\n  description = \"Instance Type\"\n}\n```", "```\nprovisioner \"remote-exec\" {\n    inline = [\n      \"echo \\\"nameserver 8.8.8.8\\\" | sudo tee -a /etc/resolv.conf\",\n      \"sudo yum update -y\",\n      \"sudo yum install epel-release -y\",\n      \"sudo yum install https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm -y\",\n      \"sudo yum install puppet-agent -y\",\n      \"sudo /opt/puppetlabs/bin/puppet agent --version\"\n    ]\n    connection {\n        user = \"centos\"\n      }\n  }\n```", "```\n$ docker version\nClient:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 21:15:28 2016\n OS/Arch:      darwin/amd64\n\nServer:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 21:15:28 2016\n OS/Arch:      linux/amd64\n\n```", "```\nprovider \"docker\" {\n  host = \"tcp://1.2.3.4:2375\"\n}\n```", "```\ndata \"docker_registry_image\" \"ghost\" {\n  name = \"ghost:0.10\"\n}\n\ndata \"docker_registry_image\" \"nginx-proxy\" {\n  name = \"jwilder/nginx-proxy:0.4.0\"\n}\n```", "```\nresource \"docker_image\" \"ghost\" {\n  name         = \"${data.docker_registry_image.ghost.name}\"\n  pull_trigger = \"${data.docker_registry_image.ghost.sha256_digest}\"\n}\n\nresource \"docker_image\" \"nginx-proxy\" {\n  name         = \"${data.docker_registry_image.nginx-proxy.name}\"\n  pull_trigger = \"${data.docker_registry_image.nginx-proxy.sha256_digest}\"\n}\n```", "```\nresource \"docker_container\" \"ghost\" {\n  name  = \"ghost\"\n  image = \"${docker_image.ghost.latest}\"\n  env   = [\"VIRTUAL_HOST=localhost\"]\n}\n```", "```\nresource \"docker_container\" \"nginx-proxy\" {\n  name  = \"nginx-proxy\"\n  image = \"${docker_image.nginx-proxy.latest}\"\n\n  ports {\n    internal = 80\n    external = 80\n    protocol = \"tcp\"\n  }\n\n  volumes {\n    host_path      = \"/var/run/docker.sock\"\n    container_path = \"/tmp/docker.sock\"\n    read_only      = true\n  }\n}\n```", "```\nvariable \"aws_coreos_ami\" {\n  default = \"ami-85097ff6\"\n}\n\nvariable \"cluster_size\" {\n  default     = \"1\"\n  description = \"Number of nodes in the cluster\"\n}\n\nvariable \"aws_instance_type\" {\n  default     = \"t2.micro\"\n  description = \"Instance type\"\n}\n```", "```\nresource \"aws_instance\" \"coreos\" {\n  count                       = \"${var.cluster_size}\"\n  ami                         = \"${var.aws_coreos_ami}\"\n  instance_type               = \"${var.aws_instance_type}\"\n  key_name                    = \"${aws_key_pair.admin_key.key_name}\"\n  associate_public_ip_address = true\n\n  tags {\n    Name = \"coreos_${count.index+1}\"\n  }\n}\n```", "```\n$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but\nwill not be persisted to local or remote state storage.\nThe Terraform execution plan has been generated and is shown below.\n[...]\n\n+ aws_instance.coreos\n ami:                         \"ami-85097ff6\"\n [...]\n\n+ aws_key_pair.admin_key\n [...]\n\nPlan: 2 to add, 0 to change, 0 to destroy.\n\n```", "```\n$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but\nwill not be persisted to local or remote state storage.\n\naws_key_pair.admin_key: Refreshing state... (ID: admin_key)\naws_instance.coreos: Refreshing state... (ID: i-0f9106905e74a29f7)\n\nNo changes. Infrastructure is up-to-date. This means that Terraform\ncould not detect any differences between your configuration and\nthe real physical resources that exist. As a result, Terraform\ndoesn't need to do anything.\n\n```", "```\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"iacbook\"\n\n  tags {\n    Name = \"IAC Book Bucket\"\n  }\n}\n```", "```\n$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\n[...]\n\naws_key_pair.admin_key: Refreshing state... (ID: admin_key)\naws_instance.coreos: Refreshing state... (ID: i-0f9106905e74a29f7)\n\n[...]\n\n+ aws_s3_bucket.bucket\n bucket:              \"iacbook\"\n tags.Name:           \"IAC Book Bucket\"\n [...]\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n```", "```\n$ terraform plan -var 'cluster_size=\"2\"'\n[...]\n+ aws_instance.coreos.1\n ami:                         \"ami-85097ff6\"\n instance_type:               \"t2.micro\"\n tags.Name:                   \"coreos_2\"\n [...]\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n```", "```\n$ terraform plan -var aws_instance_type=\"t2.medium\"\n[...]\n-/+ aws_instance.coreos\n [...]\n instance_type:               \"t2.micro\" => \"t2.medium\" (forces new resource)\n\nPlan: 1 to add, 0 to change, 1 to destroy.\n\n```", "```\naws_instance_type=\"t2.medium\"\n```", "```\naws_instance_type=\"t2.medium\"\ncluster_size=\"2\"\n```", "```\n$ terraform plan -var-file=plan.tfvars\n-/+ aws_instance.coreos.0\n instance_type:               \"t2.micro\" => \"t2.medium\" (forces new resource)\n tags.Name:                   \"coreos_1\" => \"coreos_1\"\n [...]\n\n+ aws_instance.coreos.1\n instance_type:               \"t2.medium\"\n tags.Name:                   \"coreos_2\"\n [...]\nPlan: 2 to add, 0 to change, 1 to destroy.\n\n```", "```\n$ terraform plan -var-file=plan.tfvars -target=\"aws_s3_bucket.bucket\"\n[...]\naws_s3_bucket.bucket: Refreshing state... (ID: iacbook)\n[...]\nNo changes. Infrastructure is up-to-date.\n[...]\n\n```", "```\nresource \"aws_instance\" \"coreos\" {\n  count                       = \"${var.cluster_size}\"\n  ami                         = \"${var.aws_coreos_ami}\"\n  instance_type               = \"${var.aws_instance_type}\"\n  key_name                    = \"${aws_key_pair.admin_key.key_name}\"\n  associate_public_ip_address = true\n\n  tags {\n    Name = \"coreos_${count.index+1}\"\n  }\n}\n```", "```\nvariable \"aws_coreos_ami\" {\n  default = \"ami-85097ff6\"\n}\n\nvariable \"cluster_size\" {\n  default     = \"1\"\n  description = \"Number of nodes in the cluster\"\n}\n\nvariable \"aws_instance_type\" {\n  default     = \"t2.micro\"\n  description = \"Instance type\"\n}\n```", "```\n$ ls terraform.tfstate*\nterraform.tfstate        terraform.tfstate.backup\n\n```", "```\n$ git add *.tfstate*\n\n```", "```\n$ git commit -m \"initial state creating the infrastructure\"\n[master (root-commit) 6f7e2ba] initial state creating the infrastructure\n 2 files changed, 193 insertions(+)\n create mode 100644 terraform.tfstate\n create mode 100644 terraform.tfstate.backup\n\n```", "```\n$ git push\n\n```", "```\ncoworker@host $ git pull\n\n```", "```\nresource \"aws_s3_bucket\" \"tfstate\" {\n  bucket = \"iacbook-tfstate\"\n\n  versioning {\n    enabled = true\n  }\n\n  tags {\n    Name = \"IAC Book TFState Bucket\"\n  }\n}\n```", "```\n$ terraform remote config -backend=s3 -backend-config=\"bucket=iacbook-tfstate\" -backend-config=\"key=terraform.tfstate\"\nRemote state management enabled\nRemote state configured and pulled. \n\n```", "```\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"iacbook-bucket\"\n\n  tags {\n    Name = \"IAC Book Bucket\"\n  }\n}\n```", "```\n$ terraform remote push\nState successfully pushed!\n\n```", "```\ncoworker@host $ terraform remote config -backend=s3 -backend-config=\"bucket=iacbook-tfstate\" -backend-config=\"key=terraform.tfstate\"\nInitialized blank state with remote state enabled!\nRemote state configured and pulled.\n\n```", "```\n$ head .terraform/terraform.tfstate\n\n```", "```\n$ docker run -it --rm -p 8400:8400 -p 8500:8500 -p 8600:53/udp -h node1 progrium/consul -server -bootstrap\n\n```", "```\n$ terraform remote config -backend=consul -backend-config=\"path=terraform/my_customer\"\nRemote state management enabled\nRemote state configured and pulled.\n\n```", "```\nprovider \"aws\" { region = \"${var.aws_region}\" }\n```", "```\n$ terraform validate\nError validating: 1 error(s) occurred:\n\n* provider config 'aws': unknown variable referenced: 'aws_region'. define it with 'variable' blocks\n\n```", "```\n$ echo $?\n1\n\n```", "```\nvariable \"aws_region\" { default = \"eu-west-1\" }\n\n```", "```\n$ terraform validate\n$ echo $?\n0\n\n```", "```\n$ terraform fmt -write=false -diff=true\nprovider.tf\ndiff a/provider.tf b/provider.tf\n--- /var/folders/zn/bx_20cp90bq5_fqqmlvx3tq40000gn/T/598506546  2016-09-10 22:40:35.000000000 +0200\n+++ /var/folders/zn/bx_20cp90bq5_fqqmlvx3tq40000gn/T/407676393  2016-09-10 22:40:35.000000000 +0200\n@@ -1 +1,3 @@\n-provider \"aws\" { region = \"${var.aws_region}\" }\n+provider \"aws\" {\n+  region = \"${var.aws_region}\"\n+}\nvariables.tf\ndiff a/variables.tf b/variables.tf\n--- /var/folders/zn/bx_20cp90bq5_fqqmlvx3tq40000gn/T/743564340  2016-09-10 22:40:35.000000000 +0200\n+++ /var/folders/zn/bx_20cp90bq5_fqqmlvx3tq40000gn/T/095288323  2016-09-10 22:40:35.000000000 +0200\n@@ -1 +1,3 @@\n-variable \"aws_region\" { default = \"eu-west-1\" }\n+variable \"aws_region\" {\n+  default = \"eu-west-1\"\n+}\n\n```", "```\n$ terraform fmt\nprovider.tf\nvariables.tf\n\n```", "```\n.DEFAULT_GOAL := all\n\nall:\n  terraform validate\n  terraform fmt\n```", "```\nTERRAFORM_VERSION = 0.7.3\n```", "```\nTERRAFORM_BIN = docker run -it --rm -v \"$(PWD)\":/data sjourdan/terraform:$(TERRAFORM_VERSION)\n```", "```\n.DEFAULT_GOAL := help\n\nhelp:\n  @grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m   %s\\n\", $$1, $$2}'\n```", "```\nvalidate: terraform-fmt terraform-validate  ## Validate syntax and format\nterraform-fmt:\n $(TERRAFORM_BIN) fmt -list\nterraform-validate:\n $(TERRAFORM_BIN) validate\n\n```", "```\n$ make\nvalidate                       Validate syntax and format\n\n```", "```\nplan: terraform-validate terraform-plan ## Plan changes\napply: terraform-validate terraform-apply ## Apply Changes\n\n```", "```\nifndef env\ngetenv=$(error var:\"env=\" is not set)\nelse\ngetenv=$(env)\nendif\n```", "```\nterraform-plan:\n  $(TERRAFORM_BIN) plan -state=$(call getenv).tfstate -var environment=$(call getenv)\n\nterraform-apply:\n  $(TERRAFORM_BIN) apply -state=$(call getenv).tfstate -var environment=$(call getenv)\n```", "```\nterraform-validate:\n  $(TERRAFORM_BIN) validate -var environment=$(call getenv)\n```", "```\ndestroy: terraform-destroy  ## Destroy (careful!)\nterraform-destroy:\n  $(TERRAFORM_BIN) destroy -state=$(call getenv).tfstate -var environment=$(call getenv)\n```", "```\n$ make\napply                          Apply Changes\ndestroy                        Destroy (careful!)\nplan                           Plan changes\nvalidate                       Validate syntax and format\n\n```", "```\n$ make plan env=staging\n$ make apply env=staging\n\n```", "```\n$ git clone <your_git_repostory_address>\nCloning into 'my_infrastructure_code'...\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nReceiving objects: 100% (3/3), done.\nChecking connectivity... done.\n\n```", "```\n$ git checkout -b new_infrastructure\nSwitched to a new branch 'new_infrastructure'\n\n```", "```\nvariable \"aws_region\" {\n  default = \"eu-west-1\"\n}\n\nvariable \"aws_ssh_admin_key_file\" {\n  default = \"keys/aws_terraform\"\n}\n\nvariable \"aws_coreos_ami\" {\n  default = \"ami-85097ff6\"\n}\n\nvariable \"cluster_size\" {\n  default     = \"1\"\n  description = \"Number of nodes in the cluster\"\n}\n\nvariable \"aws_instance_type\" {\n  default     = \"t2.micro\"\n  description = \"Instance type\"\n}\n```", "```\nprovider \"aws\" { region = \"${var.aws_region}\" }\n```", "```\nresource \"aws_instance\" \"coreos\" {\n  count                       = \"${var.cluster_size}\"\n  ami                         = \"${var.aws_coreos_ami}\"\n  instance_type               = \"${var.aws_instance_type}\"\n  key_name                    = \"${aws_key_pair.admin_key.key_name}\"\n  associate_public_ip_address = true\n\n  tags {\n    Name = \"coreos_${count.index+1}\"\n  }\n}\n```", "```\n$ terraform validate\n\n```", "```\n$ terraform plan\n[...]\n+ aws_instance.coreos\n[...]\n+ aws_key_pair.admin_key\n[...]\nPlan: 2 to add, 0 to change, 0 to destroy.\n\n```", "```\n$ git status\n[...]\n instances.tf\n keys.tf\n keys/\n provider.tf\n variables.tf\n\n```", "```\n$ git add .\n$ git commit -m \"an initial infrastructure\"\n[new_infrastructure 2415ad4] an initial infrastructure\n 6 files changed, 65 insertions(+)\n create mode 100644 instances.tf\n create mode 100644 keys.tf\n create mode 100644 keys/aws_terraform\n create mode 100644 keys/aws_terraform.pub\n create mode 100644 provider.tf\n create mode 100644 variables.tf\n\n```", "```\n$ git push --set-upstream origin new_infrastructure\nCounting objects: 9, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (8/8), done.\nWriting objects: 100% (9/9), 2.60 KiB | 0 bytes/s, done.\nTotal 9 (delta 0), reused 0 (delta 0)\nTo git@github.com:sjourdan /my_infrastructure_code.git\n * [new branch]      new_infrastructure -> new_infrastructure\nBranch new_infrastructure set up to track remote branch new_infrastructure from origin.\n\n```", "```\n$ terraform fmt\nprovider.tf\n\n```", "```\n$ git diff\ndiff --git a/provider.tf b/provider.tf\nindex 59cdf2a..b54eb94 100644\n--- a/provider.tf\n+++ b/provider.tf\n@@ -1 +1,3 @@\n-provider \"aws\" { region = \"${var.aws_region}\" }\n+provider \"aws\" {\n+  region = \"${var.aws_region}\"\n+}\n\n```", "```\n$ git add provider.tf\n$ git commit -m \"fixed bad formatting\"\n[new_infrastructure b027825] fixed bad formatting\n 1 file changed, 3 insertions(+), 1 deletion(-)\n$ git push\n\n```", "```\n$ terraform apply\naws_key_pair.admin_key: Creating...\n[...]\naws_instance.coreos: Creating...[...]\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n\n```", "```\n$ git status\nterraform.tfstate\n\n```", "```\n$ git add terraform.tfstate\n$ git commit -m \"initial terraform state\"\n$ git push\n\n```", "```\nprovider \"github\" {\n  token        = \"${var.github_token}\"\n  organization = \"${var.github_organization}\"\n}\n```", "```\nvariable \"github_token\" {\n  default = \"1a2b3c4d5\"\n  description = \"GitHub API Token\"\n}\n\nvariable \"github_organization\" {\n  default = \"ACME Inc.\"\n  description = \"GitHub Organization Name\"\n}\n```", "```\n// john is a simple member of the organization\nresource \"github_membership\" \"membership_for_john\" {\n  username = \"john\"\n  role     = \"member\"\n}\n\n// jane is an administrator of the organization\nresource \"github_membership\" \"membership_for_jane\" {\n  username = \"jane\"\n  role     = \"admin\"\n}\n```", "```\n// An engineering team\nresource \"github_team\" \"engineering\" {\n  name        = \"Engineering Team\"\n  description = \"Our awesome engineers\"\n  privacy     = \"secret\"\n}\n\n// A documentation team\nresource \"github_team\" \"documentation\" {\n  name        = \"Technical Writers Team\"\n  description = \"Our awesome technical writers\"\n  privacy     = \"closed\"\n}\n```", "```\n// Jane is a member of the engineering team\nresource \"github_team_membership\" \"eng_membership_jane\" {\n  team_id  = \"${github_team.engineering.id}\"\n  username = \"jane\"\n  role     = \"member\"\n}\n\n// John is a member of the documentation team\nresource \"github_team_membership\" \"doc_membership_john\" {\n  team_id  = \"${github_team.documentation.id}\"\n  username = \"john\"\n  role     = \"member\"\n}\n```", "```\n// technical writers can pull the repo\nresource \"github_team_repository\" \"infrastructure_doc\" {\n  team_id    = \"${github_team.documentation.id}\"\n  repository = \"infrastructure-repository\"\n  permission = \"pull\"\n}\n\n// engineers are admin on the repo\nresource \"github_team_repository\" \"infrastructure_eng\" {\n  team_id    = \"${github_team.engineering.id}\"\n  repository = \"infrastructure-repository\"\n  permission = \"admin\"\n}\n```", "```\nprovider \"statuscake\" {\n  username = \"${var.statuscake_username}\"\n  apikey   = \"${var.statuscake_apikey}\"\n}\n```", "```\nvariable \"statuscake_username\" {\n  default     = \"changeme\"\n  description = \"Sets the StatusCake Username\"\n}\n\nvariable \"statuscake_apikey\" {\n  default     = \"hackme\"\n  description = \"Sets the StatusCake API Key\"\n}\n```", "```\nresource \"statuscake_test\" \"latency\" {\n  website_name = \"My Server Latency\"\n  website_url  = \"1.2.3.4\"\n  test_type    = \"PING\"\n  check_rate   = 300\n  paused       = false\n}\n```", "```\nwebsite_url = \"${aws_instance.centos.public_ip}\"\n```", "```\nresource \"statuscake_test\" \"another_latency\" {\n  website_name = \"${element(aws_instance.centos.*.public_ip, count.index)}\"\n  website_url  = \"${element(aws_instance.centos.*.public_ip, count.index)}\"\n  test_type    = \"PING\"\n  check_rate   = 300\n  paused       = false\n}\n```", "```\nresource \"statuscake_test\" \"http\" {\n  website_name = \"www.myweb.com Availability\"\n  website_url  = \"https://www.myweb.com:443\"\n  test_type    = \"HTTP\"\n  check_rate   = 300\n}\n```"]