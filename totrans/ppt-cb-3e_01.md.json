["```\n  node default {\n    package { 'httpd':\n      ensure => 'installed'\n    }\n  }\n```", "```\n    t@cookbook ~$ facter uptime\n    0:12 hours\n    ```", "```\n    t@cookbook ~$ uptime\n     01:18:52 up 12 min,  1 user,  load average: 0.00, 0.00, 0.00\n    ```", "```\n      service {'httpd':\n        ensure  => running,\n        require => Package['httpd'],\n      }\n    ```", "```\n      package {'httpd':\n        ensure => 'installed',\n      }\n    ```", "```\nPackage['httpd']\n```", "```\nClass['something::somewhere']\n```", "```\nexample::thing {'one':} \n```", "```\nExample::Thing['one']\n```", "```\n      service {'httpd':\n        ensure => running,\n        require => Package['httpd'],\n      }\n    ```", "```\n      package {'httpd':\n        ensure => installed,\n      }\n    ```", "```\n      file {'/etc/httpd/conf.d/cookbook.conf':\n        content => \"<VirtualHost *:80>\\nServernamecookbook\\nDocumentRoot/var/www/cookbook\\n</VirtualHost>\\n\",\n        require => Package['httpd'],\n        notify => Service['httpd'],\n      }\n    ```", "```\n      file {'/var/www/cookbook':\n        ensure => directory,\n      }\n      file {'/var/www/cookbook/index.html':\n        content => \"<html><h1>Hello World!</h1></html>\\n\",\n        require => File['/var/www/cookbook'],\n      }\n    ```", "```\nservice {'httpd':\n  ensure  => running,\n}\n```", "```\npackage { 'exim4':\n```", "```\npackage { exim4:\n```", "```\nfile { '/etc/motd':\n  content => \"Welcome to ${::fqdn}\\n\"\n}\n```", "```\nname => 'Nucky Thompson',\nmode => '0700',\nowner => 'deploy',\n```", "```\nensure => installed,\nenable => true,\nensure => running,\n```", "```\nif \"false\" {\n  notify { 'True': }\n}\nif 'false' {\n  notify { 'Also true': }\n}\nif false {\n  notify { 'Not true': }\n}\n```", "```\nsource => \"puppet:///modules/webserver/${brand}.conf\",\n```", "```\nservice { 'memcached':\n  ensure => running,\n  enable => true,\n}\n```", "```\npackage { 'puppet': ensure => installed }\n```", "```\npackage { 'rake':\n  ensure   => installed,\n  provider => gem,\n  require  => Package['rubygems'],\n}\n```", "```\nfile { \"/var/www/${app}/shared/config/rvmrc\":\n  owner   => 'deploy',\n  group   => 'deploy',\n  content => template('rails/rvmrc.erb'),\n  require => File[\"/var/www/${app}/shared/config\"],\n}\n```", "```\nfile { '/etc/php5/cli/php.ini':\n  ensure => link,\n  target => '/etc/php.ini',\n}\n```", "```\n    t@cookbook:~$ sudo apt-get install rubygems\n    Reading package lists... Done\n    Building dependency tree \n    Reading state information... Done\n    The following NEW packages will be installed:\n     rubygems\n    0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.\n    Need to get 0 B/597 kB of archives.\n    After this operation, 3,844 kB of additional disk space will be used.\n    Selecting previously unselected package rubygems.\n    (Reading database ... 30390 files and directories currently installed.)\n    Unpacking rubygems (from .../rubygems_1.8.24-1_all.deb) ...\n    Processing triggers for man-db ...\n    Setting up rubygems (1.8.24-1) ...\n\n    ```", "```\n    t@cookbook $ sudo gem install puppet\n    Successfully installed hiera-1.3.4\n    Fetching: facter-2.3.0.gem (100%)\n    Successfully installed facter-2.3.0\n    Fetching: puppet-3.7.3.gem (100%)\n    Successfully installed puppet-3.7.3\n    Installing ri documentation for hiera-1.3.4\n    Installing ri documentation for facter-2.3.0\n    Installing ri documentation for puppet-3.7.3\n    Done installing documentation for hiera, facter, puppet after 239 seconds\n\n    ```", "```\n    t@cookbook:~$ mkdir -p .puppet/manifests\n    t@cookbook:~$ cd .puppet/manifests\n    t@cookbook:~/.puppet/manifests$\n\n    ```", "```\n      node default {\n        file { '/tmp/hello':\n          content => \"Hello, world!\\n\",\n        }\n      }\n    ```", "```\n    t@cookbook:~/.puppet/manifests$ puppet apply site.pp\n    Notice: Compiled catalog for cookbook in environment production in 0.14 seconds\n    Notice: /Stage[main]/Main/Node[default]/File[/tmp/hello]/ensure: defined content as '{md5}746308829575e17c3331bbcb00c0898b'\n    Notice: Finished catalog run in 0.04 seconds\n\n    ```", "```\n    t@cookbook:~/puppet/manifests$ cat /tmp/hello\n    Hello, world!\n     t@cookbook:~/puppet/manifests$\n\n    ```", "```\n      package {'puppet-lint':\n        ensure => 'installed',\n        provider => 'gem',\n      }\n    ```", "```\n    t@cookbook ~$ puppet apply puppet-lint.pp Notice: Compiled catalog for node1.example.com in environment production in 0.42 seconds\n    Notice: /Stage[main]/Main/Package[puppet-lint]/ensure: created\n    Notice: Finished catalog run in 2.96 seconds\n    t@cookbook ~$ gem list puppet-lint *** LOCAL GEMS *** puppet-lint (1.0.1)\n\n    ```", "```\n    t@cookbook ~$ puppet-lint puppet-lint.pp \n    WARNING: indentation of => is not properly aligned on line 2\n    ERROR: trailing whitespace found on line 4\n\n    ```", "```\n    t@cookbook ~$ puppet-lint puppet-lint.pp \n    t@cookbook ~$\n\n    ```", "```\nt@cookbook ~$ puppet-lint --no-80chars-check\n\n```", "```\n    t@cookbook:~$ mkdir -p .puppet/modules\n    t@cookbook:~$ cd .puppet/modules\n    t@cookbook:~/.puppet/modules$ puppet module generate thomas-memcached\n    We need to create a metadata.json file for this module.  Please answer the following questions; if the question is not applicable to this module, feel free to leave it blank. Puppet uses Semantic Versioning (semver.org) to version modules.What version is this module?  [0.1.0]\n    --> Who wrote this module?  [thomas]\n    --> What license does this module code fall under?  [Apache 2.0]\n    --> How would you describe this module in a single sentence?\n    --> A module to install memcached Where is this module's source code repository?\n    --> Where can others go to learn more about this module?\n    --> Where can others go to file issues about this module?\n    --> \n    ----------------------------------------\n    {\n     \"name\": \"thomas-memcached\",\n     \"version\": \"0.1.0\",\n     \"author\": \"thomas\",\n     \"summary\": \"A module to install memcached\",\n     \"license\": \"Apache 2.0\",\n     \"source\": \"\",\n     \"issues_url\": null,\n     \"project_page\": null,\n     \"dependencies\": [\n     {\n     \"version_range\": \">= 1.0.0\",\n     \"name\": \"puppetlabs-stdlib\"\n     }\n     ]\n    }\n    ----------------------------------------\n    About to generate this metadata; continue? [n/Y]\n    --> y\n    Notice: Generating module at /home/thomas/.puppet/modules/thomas-memcached...\n    Notice: Populating ERB templates...\n    Finished; module generated in thomas-memcached.\n    thomas-memcached/manifests\n    thomas-memcached/manifests/init.pp\n    thomas-memcached/spec\n    thomas-memcached/spec/classes\n    thomas-memcached/spec/classes/init_spec.rb\n    thomas-memcached/spec/spec_helper.rb\n    thomas-memcached/README.md\n    thomas-memcached/metadata.json\n    thomas-memcached/Rakefile\n    thomas-memcached/tests\n    thomas-memcached/tests/init.pp\n\n    ```", "```\n    t@cookbook:~/.puppet/modules$ ln –s thomas-memcached memcached\n\n    ```", "```\n    class memcached {\n      package { 'memcached':\n        ensure => installed,\n      }\n\n      file { '/etc/memcached.conf':\n        source  => 'puppet:///modules/memcached/memcached.conf',\n        owner   => 'root',\n        group   => 'root',\n        mode    => '0644',\n        require => Package['memcached'],\n      }\n      service { 'memcached':\n        ensure  => running,\n        enable  => true,\n        require => [Package['memcached'],\n                    File['/etc/memcached.conf']],\n      }\n    }\n    ```", "```\n    -m 64\n    -p 11211\n    -u nobody\n    -l 127.0.0.1\n    ```", "```\n    node default {\n      include memcached\n    }\n    ```", "```\n    t@cookbook:~$ sudo puppet apply --modulepath=/home/thomas/.puppet/modules /home/thomas/.puppet/manifests/site.pp\n    Notice: Compiled catalog for cookbook.example.com in environment production in 0.33 seconds\n    Notice: /Stage[main]/Memcached/File[/etc/memcached.conf]/content: content changed '{md5}a977521922a151c959ac953712840803' to '{md5}9429eff3e3354c0be232a020bcf78f75'\n    Notice: Finished catalog run in 0.11 seconds\n    ```", "```\n    t@cookbook:~$ sudo service memcached status\n    [ ok ] memcached is running.\n    ```", "```\nmodules/\n  └MODULE_NAME/  *never use a dash (-) in a module name*\n     └examples/ *example usage of the module*\n     └files/ *flat files used by the module*\n     └lib/\n        └facter/ *define new facts for facter*\n        └puppet/\n           └parser/\n              └functions/ *define a new puppet function, like sort()* \n           └provider/ *define a provider for a new or existing type*\n           └util/ *define helper functions (in ruby)*\n           └type/ *define a new type in puppet*\n     └manifests/\n        └init.pp  *class MODULE_NAME { }*\n     └spec/ rSpec *tests*\n     └templates/ *erb template files used by the module*\n\n```", "```\nfile { '/etc/memcached.conf':\n  source => 'puppet:///modules/memcached/memcached.conf',\n}\n```", "```\nfile { '/etc/memcached.conf':\n  content => template('memcached/memcached.conf.erb'),\n}\n```", "```\nMODULEPATH/memcached/templates/memcached.conf.erb\n```", "```\n    memcached.lucid.conf\n    memcached.precise.conf\n    ```", "```\n    source = > \"puppet:///modules/memcached\n      /memcached.${::lsbdistrelease}.conf\",\n    ```", "```\n  node 'server014' inherits 'server' {\n    include mail::server, repo::gem, repo::apt, zabbix\n  }\n```", "```\ncron { 'chkrootkit':\n  command => '/usr/sbin/chkrootkit >\n    /var/log/chkrootkit.log 2>&1',\n  hour    => inline_template('<%= @hostname.sum % 24 %>'),\n  minute  => '00',\n}\n```", "```\n<%= @fqdn %>\n```", "```\n<%= \"The value of something from otherclass is \" + scope.lookupvar('otherclass::something') %>\n```", "```\n$lunch = [ 'franks', 'beans', 'mustard' ]\n```", "```\n    $packages = [ 'ruby1.8-dev',\n      'ruby1.8',\n      'ri1.8',\n      'rdoc1.8',\n      'irb1.8',\n      'libreadline-ruby1.8',\n      'libruby1.8',\n      'libopenssl-ruby' ]\n\n    package { $packages: ensure => installed }\n    ```", "```\n$interface = {\n  'name' => 'eth0',\n  'ip'   => '192.168.0.1',\n  'mac'  => '52:54:00:4a:60:07' \n}\nnotify { \"(${interface['ip']}) at ${interface['mac']} on ${interface['name']}\": }\n```", "```\nt@cookbook:~/.puppet/manifests$ puppet apply hash.pp\nNotice: (192.168.0.1) at 52:54:00:4a:60:07 on etho\n\n```", "```\ndefine lunchprint() {\n  notify { \"Lunch included ${name}\":}\": }\n}\n\n$lunch = ['egg', 'beans', 'chips']\nlunchprint { $lunch: }\n```", "```\nt@mylaptop ~ $ puppet apply lunchprint.pp \n...\nNotice: Lunch included chips\nNotice: Lunch included beans\nNotice: Lunch included egg\n\n```", "```\n$menu = 'egg beans chips'\n$items = split($menu, ' ')\nlunchprint { $items: }\n```", "```\nt@mylaptop ~ $ puppet apply lunchprint2.pp \n...\nNotice: Lunch included chips\nNotice: Lunch included beans\nNotice: Lunch included egg.\n\n```", "```\n$menu = 'egg and beans and chips'\n$items = split($menu, ' and ')\n```", "```\n$lunch = 'egg:beans,chips'\n$items = split($lunch, ':|,')\n```", "```\n  if $::timezone == 'UTC' {\n    notify { 'Universal Time Coordinated':}\n  } else {\n    notify { \"$::timezone is not UTC\": }\n  }\n```", "```\nif $::timezone == 'UTC' {\n  notify { 'Universal Time Coordinated': }\n} elseif $::timezone == 'GMT' {\n  notify { 'Greenwich Mean Time': }\n} else {\n  notify { \"$::timezone is not UTC\": }\n}\n```", "```\nif $::timezone == 'UTC' {\n\n}\n```", "```\nif $::timezone != 'UTC' {\n  …\n}\n```", "```\nif $::uptime_days > 365 {\n  notify { 'Time to upgrade your kernel!': }\n}\n```", "```\nif $::mtu_eth0 <= 1500 {\n  notify {\"Not Jumbo Frames\": }\n}\n```", "```\nif ($::uptime_days > 365) and ($::kernel == 'Linux') {\n  …\n}\n\nif ($role == 'webserver') and ( ($datacenter == 'A') or ($datacenter == 'B') ) {\n  …\n}\n```", "```\nif $::architecture =~ /64/ {\n  notify { '64Bit OS Installed': }\n} else {\n  notify { 'Upgrade to 64Bit': }\n  fail('Not 64 Bit')\n}\n```", "```\nError: comparison of String with 2 failed at /home/thomas/.puppet/manifests/version.pp:1 on node cookbook.example.com\n\n```", "```\nif $::kernel !~ /Linux/ {\n  notify { 'Not Linux, could be Windows, MacOS X, AIX, or ?': }\n}\n```", "```\n$input = 'Puppet is better than manual configuration'\nif $input =~ /(.*) is better than (.*)/ {\n  notify { \"You said '${0}'. Looks like you're comparing ${1}\n    to ${2}!\": }\n}\n```", "```\n    $systemtype = $::operatingsystem ? {\n      'Ubuntu' => 'debianlike',\n      'Debian' => 'debianlike',\n      'RedHat' => 'redhatlike',\n      'Fedora' => 'redhatlike',\n      'CentOS' => 'redhatlike',\n      default  => 'unknown',\n    }\n\n    notify { \"You have a ${systemtype} system\": }\n    ```", "```\n    class debianlike {\n      notify { 'Special manifest for Debian-like systems': }\n    }\n\n    class redhatlike {\n      notify { 'Special manifest for RedHat-like systems': }\n    }\n\n    case $::operatingsystem {\n      'Ubuntu',\n      'Debian': {\n        include debianlike\n      }\n      'RedHat',\n      'Fedora',\n      'CentOS',\n      'Springdale': {\n        include redhatlike\n      }\n      default: {\n        notify { \"I don't know what kind of system you have!\":\n        }\n      }\n    }\n    ```", "```\ncase $::lsbdistdescription {\n  /Ubuntu (.+)/: {\n    notify { \"You have Ubuntu version ${1}\": }\n  }\n  /CentOS (.+)/: {\n    notify { \"You have CentOS version ${1}\": }\n  }\n  default: {}\n}\n```", "```\n$lunch = 'Filet mignon.'\n$lunchtype =  $lunch ? {\n  /fries/ => 'unhealthy',\n  /salad/ => 'healthy',\n  default => 'unknown',\n}\n\nnotify { \"Your lunch was ${lunchtype}\": }\n```", "```\nt@mylaptop ~ $ puppet apply lunchtype.pp\nNotice: Your lunch was unknown\nNotice: /Stage[main]/Main/Notify[Your lunch was unknown]/message: defined 'message' as 'Your lunch was unknown'\n\n```", "```\nif 'spring' in 'springfield'\n```", "```\nif $crewmember in ['Frank', 'Dave', 'HAL' ]\n```", "```\n$ifaces = { 'lo'   => '127.0.0.1', \n            'eth0' => '192.168.0.1' }\nif 'eth0' in $ifaces {\n  notify { \"eth0 has address ${ifaces['eth0']}\": }\n}\n```", "```\n    if $::operatingsystem in [ 'Ubuntu', 'Debian' ] {\n      notify { 'Debian-type operating system detected': }\n    } elseif $::operatingsystem in [ 'RedHat', 'Fedora', 'SuSE', 'CentOS' ] {\n      notify { 'RedHat-type operating system detected': }\n    } else {\n      notify { 'Some other operating system detected': }\n    }\n    ```", "```\n    t@cookbook:~/.puppet/manifests$ puppet apply in.pp\n    Notice: Compiled catalog for cookbook.example.com in environment production in 0.03 seconds\n    Notice: Debian-type operating system detected\n    Notice: /Stage[main]/Main/Notify[Debian-type operating system detected]/message: defined 'message' as 'Debian-type operating system detected'\n    Notice: Finished catalog run in 0.02 seconds\n\n    ```", "```\n$debianlike = $::operatingsystem in [ 'Debian', 'Ubuntu' ]\n\nif $debianlike {\n  notify { 'You are in a maze of twisty little packages, all alike': }\n}\n```", "```\n    $class_c = regsubst($::ipaddress, '(.*)\\..*', '\\1.0')\n    notify { \"The network part of ${::ipaddress} is ${class_c}\": }\n    ```", "```\n    t@cookbook:~/.puppet/manifests$ puppet apply ipaddress.pp \n    Notice: Compiled catalog for cookbook.example.com in environment production in 0.02 seconds\n    Notice: The network part of 192.168.122.148 is\n     192.168.122.0\n    Notice: /Stage[main]/Main/Notify[The network part of 192.168.122.148 is\n     192.168.122.0]/message: defined 'message' as 'The network part of 192.168.122.148 is\n     192.168.122.0'\n    Notice: Finished catalog run in 0.03 seconds\n\n    ```", "```\n192.168.122.148\n```", "```\n(.*)\\..*\n```", "```\n\\1.0\n```", "```\n192.168.122.0\n```", "```\n$class_c = regsubst($::ipaddress, '\\.\\d+$', '.0')\n```", "```\nt@cookbook:~/.puppet/manifests$ puppet apply --parser=future version.pp \nNotice: Compiled catalog for cookbook.example.com in environment production in 0.36 seconds\nNotice: Finished catalog run in 0.03 seconds\n\n```", "```\n$apache = $::osfamily ? {\n  'Debian' => 'apache2',\n  'RedHat' => 'httpd'\n} \n$packages = ['memcached'] << $apache\npackage {$packages: ensure => installed}\n```", "```\n$sysadmins = [ 'thomas','john','josko' ]\n$appowners = [ 'mike', 'patty', 'erin' ]\n$users = $sysadmins + $appowners\nnotice ($users)\n```", "```\nt@cookbook:~/.puppet/manifests$ puppet apply --parser=future concat.pp Notice: [thomas, john, josko, mike, patty, erin]\nNotice: Compiled catalog for cookbook.example.com in environment production in 0.36 seconds\nNotice: Finished catalog run in 0.03 seconds\nMerging Hashes\n\n```", "```\n$iface = {\n  'name' => 'eth0',\n  'ip'   => '192.168.0.1',\n  'mac'  => '52:54:00:4a:60:07' \n}  + {'route' => '192.168.0.254'}\nnotice ($iface)\n```", "```\nt@cookbook:~/.puppet/manifests$ puppet apply --parser=future hash2.pp\nNotice: {route => 192.168.0.254, name => eth0, ip => 192.168.0.1, mac => 52:54:00:4a:60:07}\nNotice: Compiled catalog for cookbook.example.com in environment production in 0.36 seconds\nNotice: Finished catalog run in 0.03 seconds\n\n```", "```\n$count = [1,2,3,4,5]\n$sum = reduce($count) | $total, $i | { $total + $i }\nnotice(\"Sum is $sum\")\n```", "```\nt@cookbook:~/.puppet/manifests$ puppet apply --parser future lambda.pp\nNotice: Sum is 15\nNotice: Compiled catalog for cookbook.example.com in environment production in 0.36 seconds\nNotice: Finished catalog run in 0.03 seconds\n\n```", "```\n$filter = filter ($count) | $i | { $i > 3 } notice(\"Filtered array is $filter\")\n```", "```\nNotice: Filtered array is [4, 5]\n\n```", "```\n$map = map ($count) | $i | { $i * $i } notice(\"Square of array is $map\")\n```", "```\nNotice: Square of array is [1, 4, 9, 16, 25]\n\n```", "```\n$firewall_rules = ['192.168.0.1','80','192.168.0.10','443']\nslice ($firewall_rules,2) |$ip, $port| { notice(\"Allow $ip on $port\") }\n```", "```\nNotice: Allow 192.168.0.1 on 80\nNotice: Allow 192.168.0.10 on 443\n\n```", "```\nslice ($firewall_rules,2) |$ip, $port| { firewall {\"$port from $ip\": dport  => $port, source => \"$ip\", action => 'accept', }\n}\n```", "```\neach ($count) |$c| { notice($c) }\n```", "```\nNotice: 1\nNotice: 2\nNotice: 3\nNotice: 4\nNotice: 5\n\n```"]