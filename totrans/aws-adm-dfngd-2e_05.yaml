- en: Governing Your Environments Using AWS CloudTrail and AWS Config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to leverage and utilize AWS WAF for
    protecting your web applications against commonly occurring web attacks and exploitations.
    In this chapter, we will be exploring two really useful and must-have security
    and governance services in the form of AWS CloudTrail and AWS Config!
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping this in mind, let''s have a quick look at the various topics that we
    will be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing AWS CloudTrail, its concepts, and how it works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling CloudTrail for your AWS environment by creating your very own Trail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating and managing CloudTrail Logs using Amazon CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating Amazon CloudWatch alarms for CloudTrail using CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing CloudTrail Logs using Amazon Elasticsearch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Amazon Config and how it works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is so much to do, so let's get started right away!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing AWS CloudTrail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in the previous chapter, AWS provides a wide variety of tools
    and managed services which allow you to safeguard your applications running on
    the cloud, such as AWS WAF and AWS Shield. But this, however, just forms one important
    piece in a much larger jigsaw puzzle! What about compliance monitoring, risk auditing,
    and overall governance of your environments? How do you effectively analyze events
    occurring in your environment and mitigate against the same? Well, luckily for
    us, AWS has the answer to our problems in the form of AWS CloudTrail.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS CloudTrail provides you with the ability to log every single action taken
    by a user, service, role, or even API, from within your AWS account. Each action
    recorded is treated as an event which can then be analyzed for enhancing the security
    of your AWS environment. The following are some of the key benefits that you can
    obtain by enabling CloudTrail for your AWS accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**In-depth visibility**: Using CloudTrail, you can easily gain better insights
    into your account''s usage by recording each user''s activities, such as which
    user initiated a new resource creation, from which IP address was this request
    initiated, which resources were created and at what time, and much more!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easier compliance monitoring**: With CloudTrail, you can easily record and
    log events occurring within your AWS account, whether they may originate from
    the Management Console, or the AWS CLI, or even from other AWS tools and services.
    The best thing about this is that you can integrate CloudTrail with another AWS
    service, such as Amazon CloudWatch, to alert and respond to out-of-compliance
    events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security automations**: As we saw in the previous chapter, automating responses
    to security threats not only enables you to mitigate the potential threats faster,
    but also provides you with a mechanism to stop all further attacks. The same can
    be applied to AWS CloudTrail as well! With its easy integration with Amazon CloudWatch
    events, you can now create corresponding Lambda functions that trigger automatically
    each time a compliance is not met, all in a matter of seconds!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With these key points in mind, let''s have a quick look at some of CloudTrail''s
    essential concepts and terminologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Events**: Events are the basic unit of measurement in CloudTrail. Essentially,
    an event is nothing more than a record of a particular activity either initiated
    by the AWS services, roles, or even an AWS user. These activities are all logged
    as API calls that can originate from the Management Console, the AWS SDK, or even
    the AWS CLI as well. By default, events are stored by CloudTrail with S3 buckets
    for a period of 7 days. You can view, search, and even download these events by
    leveraging the events history feature provided by CloudTrail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trails**: Trails are essentially the delivery mechanism, using which events
    are dumped to S3 buckets. You can use these trails to log specific events within
    specific buckets, as well as to filter events and encrypt the transmitted log
    files. By default, you can have a maximum of *five trails* created per AWS region,
    and this limit cannot by increased.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CloudTrail Logs**: Once your CloudTrail starts capturing events, it sends
    these events to an S3 bucket in the form of a CloudTrail Log file. The log files
    are JSON text files that are compressed using the `.gzip` format. Each file can
    contain one or more events within itself. Here is a simple representation of what
    a CloudTrail Log looks like. In this case, the event was created when I tried
    to add an existing user by the name of `Mike` to an *administrator* group using
    the AWS Management Console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view your own CloudTrail Log files by visiting the S3 bucket that you
    specify during the trail''s creation. Each log file is named uniquely using the
    following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AccountID`: Your AWS account ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RegionName`: AWS region where the event was captured: **us-east-1**, and so
    on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YYYYMMDDTTHHmmz`: Specifies the year, month, day, hour (24 hours), minutes,
    and seconds. The `z` indicates time in UTC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UniqueString`: A randomly generated 16-character-long string that is simply
    used so that there is no overwriting of the log files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the basics in mind, let's quickly have a look at how you can get started
    with CloudTrail for your own AWS environments!
  prefs: []
  type: TYPE_NORMAL
- en: Working with AWS CloudTrail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS CloudTrail is a fairly simple and easy to use service that you can get started
    with in a couple of minutes. In this section, we will be walking through a simple
    setup of a CloudTrail Trail using the AWS Management Console itself.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first CloudTrail Trail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started, log in to your AWS Management Console and filter the CloudTrail
    service from the AWS services filter. On the CloudTrail dashboard, select the
    Create Trail option to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: This will bring up the Create Trail wizard. Using this wizard, you can create
    a maximum of five-trails per region. Type a suitable name for the Trail in to
    the Trail name field to begin with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you can either opt to Apply trail to all regions or only to the region
    out of which you are currently operating. Selecting all regions enables CloudTrail
    to record events from each region and dump the corresponding log files into an
    S3 bucket that you specify. Alternatively, selecting to record out of one region
    will only capture the events that occur from the region out of which you are currently
    operating. In my case, I have opted to enable the Trail only for the region I''m
    currently working out of. In the subsequent sections, we will learn how to change
    this value using the AWS CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ae9080d-34d8-4143-8a20-7d9269e5964d.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, in the Management events section, select the *type* of events you wish
    to capture from your AWS environment. By default, CloudTrail records all management
    events that occur within your AWS account. These events can be API operations,
    such as events caused due to the invocation of an EC2 RunInstances or TerminateInstances operation,
    or even non-API based events, such as a user logging into the AWS Management Console,
    and so on. For this particular use case, I've opted to record All management events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting the Read-only option will capture all the `GET` API operations, whereas
    the `Write-only` option will capture only the `PUT` API operations that occur
    within your AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on, in the Storage location section, provide a suitable name for the
    S3 bucket that will store your CloudTrail Log files. This bucket will store all
    your CloudTrail Log files, irrespective of the regions the logs originated from.
    You can alternatively select an existing bucket from the S3 bucket selection field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/750ce232-581b-493d-9ec6-0bbb676679c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, from the Advanced section, you can optionally configure a Log file prefix.
    By default, the logs will automatically get stored under a folder-like hierarchy
    that is usually of the form `AWSLogs/ACCOUNT_ID/CloudTrail/REGION`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also opt to Encrypt log files with the help of an AWS KMS key. Enabling
    this feature is highly recommended for production use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting Yes in the Enable log file validation field enables you to verify
    the integrity of the delivered log files once they are delivered to the S3 bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you can even enable CloudTrail to send you notifications each time
    a new log file is delivered to your S3 bucket by selecting Yes against the Send
    SNS notification for every log file delivery option. This will provide you with
    an additional option to either select a predefined SNS topic or alternatively
    create a new one specifically for this particular CloudTrail. Once all the required
    fields are filled in, click on Create to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this, you should be able to see the newly created Trail by selecting the
    Trails option from the CloudTrail dashboard''s navigation pane, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bad61e60-483b-46d2-9928-85247959904d.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing and filtering captured CloudTrail Logs and Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Trail created, you can now view the captured events and filter them
    using the *event history* option from the CloudTrail dashboard's navigation pane.
    Here, you can view the last 7 days of captured events, and even filter specific
    ones by using one or more supporting filter attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a quick look at the Filter attributes that you can use in conjunction
    with the Time range to extract the required events and logs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Event ID: Each event captured by CloudTrail has a unique ID that you can filter
    and view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Event name: The name of the event. For example, EC2 events RunInstances, DescribeInstances,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Event source: The AWS service to which the request was made. For example, `iam.amazonaws.com` or
    `ec2.amazonaws.com`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resource name: The name or ID of the resource referenced by the event. For
    example, a bucket named `useast-prod-wordpress-code` or an instance ID `i-1234567` for
    an EC2 instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resource type: The type of resource referenced by the event. For example, a
    resource type can be a Bucket for S3, an Instance for EC2, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User name: The name of the user that created or performed an action on the
    said event. For example, an IAM user logging into the AWS Management Console,
    and so on:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4b9582c6-4d78-4acc-a302-03dc5a69c827.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have selected a particular filter and provided its associated attribute
    value, you can use the Time range to narrow your search results based on a predefined
    time window. To analyze further, you can select the View event option present
    in the details pane of an Event as well. Selecting this option will view the event
    in a JSON format, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can additionally select the Download icon and select whether you wish to
    export all the logs using the Export to CSV or Export to JSON option.
  prefs: []
  type: TYPE_NORMAL
- en: You can alternatively even download the log files by accessing your CloudTrail
    S3 bucket and downloading the individual compressed JSON files, as per your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we come towards the end of this section. You can use these same steps
    and create different Trails for capturing data as well as management activities.
    In the next section, we will see how we can leverage the AWS CLI and update our
    newly-created Trail.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying a CloudTrail Trail using the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Trail in place, you can now use either the AWS Management Console or
    the AWS CLI to modify its settings. In this case, we will look at how to perform
    simple changes to the newly created Trail using the AWS CLI itself. Before proceeding
    with this section, however, it is important that you have installed and configured
    the AWS CLI on your desktop/laptop, based on the guides provided at [http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the CLI is installed and configured, we can now run some simple commands
    to verify its validity. To start off, let''s first check the status of our newly-created
    Trail by using the `describe-trails` command, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/118d5718-9d27-40eb-aa4b-deb1c50870c7.png)'
  prefs: []
  type: TYPE_IMG
- en: This will display the essential properties of your CloudTrail Trails, such as
    the `Name`, the `TrailARN`, whether the log file validation is enabled or not,
    and whether the Trail is a multi-regional Trail or it belongs to a single region.
    In this case, the `IsMultiRegionTrail` value is set to `false`, which means that
    the Trail will only record events for its current region, that is, `us-east-1`.
    Let's go ahead and modify this using the AWS CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we will be using the `update-trail` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code will simply change the `IsMultiRegionTrail` value from `false` to
    `true`. You can verify the same by using the `describe-trails` command, as performed
    earlier. Similarly, you can use the `update-trail` command to change other settings
    for your CloudTrail Trail, such as enabling the log file validation feature, as
    described in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can even use the AWS CLI to check the current status of your Trail
    by executing the `get-trail-status` command, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/1f5a6170-3897-4feb-99a2-b17991f79a5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Apart from these values, the `get-trail-status` command will additionally show
    two more fields (`LatestNotificationError` and `LatestDeliveryError`) in case
    an Amazon SNS subscription fails or if a CloudTrail Trail was unsuccessful at
    writing the events to an S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: With this completed, we will now move on to the next section of this chapter,
    in which we will learn how you can effectively monitor your Trails with the help
    of CloudWatch Logs.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring CloudTrail Logs using CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best features of using CloudTrail is that you can easily integrate
    it with other AWS services for an enhanced security auditing and governance experience.
    One such service that we are going to use and explore here with CloudTrail is
    Amazon CloudWatch.
  prefs: []
  type: TYPE_NORMAL
- en: Using CloudWatch, you can easily set up custom metric filters and an array of
    alarms that can send notifications to the right set of people in case a specific
    security or governance issue occurs in your AWS environment. To get started with
    CloudWatch using CloudTrail, you will first need to configure your Trail to send
    the captured log events to CloudWatch Logs. This can be easily configured using
    both the AWS Management Console and the AWS CLI. Next, once this is done, you
    will be required to define custom CloudWatch metric filters to evaluate the log
    events for specific matches. Once a match is made, you can then additionally configure
    CloudWatch to trigger corresponding alarms, send notifications, and even perform
    a remediation action based on the type of alarm generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a diagrammatic representation of CloudTrail''s integration with CloudWatch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/441f4deb-1f5f-413e-93f5-5e606816c434.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this section, we will be using the AWS CLI to integrate the Trail''s logs
    with Amazon CloudWatch Logs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to create a new CloudWatch Log Group using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will need to extract and maintain the newly created Log Group''s
    ARN for the forthcoming steps. To do so, type in the following command and make
    a note of the Log Group''s ARN, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/beb84f9e-191b-4c97-9f73-f705188f07f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the Log Group successfully created, we will now need to create a new IAM
    Role that will essentially enable CloudTrail to send its logs over to the CloudWatch
    Log Group. To do so, we first need to create a policy document that assigns the
    `AssumeRole` permission to our CloudTrail Trail. Create a new file and paste the
    following contents into that file. Remember to to create the file with a `.json`
    extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With the file created, use the `create-role` command to create the role with
    the required permissions for CloudTrail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this command executed, make a note of the newly created role''s ARN. Next,
    copy and paste the following role policy document into a new file. This policy
    document grants CloudTrail the necessary permissions to create a CloudWatch Logs
    log stream in the Log Group that you created a while back, so as to deliver the
    CloudTrail events to that particular log stream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the following command to apply the permissions to the role. Remember
    to provide the name of the policy that we created during the earlier steps here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is to update the Trail with the Log Group ARN as well as the
    CloudWatch Logs role ARN, using the following command snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With this you have now integrated your CloudTrail Logs to seamlessly flow into
    the CloudWatch Log Group that we created. You can verify this by viewing the Log
    Groups provided under the CloudWatch Logs section of your CloudWatch dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will be leveraging this newly created Log Group and
    assign a custom metric as well as an alarm for monitoring and alerting purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom metric filters and alarms for monitoring CloudTrail Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Log Group created and integrated with the CloudTrail Trail, we can
    now continue to create and assign custom metric filters as well as alarms. These
    alarms can be leveraged to trigger notifications whenever a particular compliance
    or governance issue is identified by CloudTrail.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, let''s first create a custom metric filter using CloudWatch
    Logs. In this case, we will be creating a simple filter that triggers a CloudWatch
    alarm each time an S3 bucket API call is made. This API call can be either a simple
    PUT or DELETE operation on the bucket''s policies, life cycle, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Amazon CloudWatch dashboard or, alternatively, select the link
    provided here to get started, at [https://console.aws.amazon.com/cloudwatch/](https://console.aws.amazon.com/cloudwatch/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once logged in, select the Logs option from the navigation pane. Select the
    newly created Log Group that we created a while back, and opt for the Create Metric
    Filter option, as depicted in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c6af2920-4e7e-4486-bdb7-bf7181339a35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, in the Create Metric Filter and Assign a Metric page, start off by providing
    a suitable Filter Name for the new metric, followed by populating the Filter Pattern option
    with the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Once done, type in a suitable Metric Namespace value followed by a Metric Name as
    well. Leave the rest of the values to their defaults, and select the option Create
    filter to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this step completed, you now have a working CloudWatch filter up and running.
    In order to assign this particular filter an alarm, simply select the Create Alarm option
    adjacent to the filter, as depicted in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88608185-edc6-4b7a-92b3-31e0f2db04b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an alarm is a fairly straightforward and simple process, and I'm sure
    you would be more than qualified enough to set it up. Start off by providing a
    Name and an optional Description to your alarm, followed by configuring the trigger
    by setting the event count as `>= 1` for `1` consecutive period. Consequently,
    also remember to set up the Actions section by selecting an SNS Notification List or,
    alternatively, creating a new one. With all the settings configured, select the
    Create Alarm option to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this step completed, the only thing remaining is to give the filter a try!
    Log in to your S3 dashboard and create a new bucket, or alternatively, update
    the bucket policy of an existing one. The CloudTrail Trail will pick up this change
    and send the logs to your CloudWatch Log Group, where our newly created metric
    filter triggers an alarm by notifying the respective cloud administrator! Simply
    awesome isn't it? You can use more custom filters and alarms for configuring CloudWatch's
    notifications, as per your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will be looking at a fairly simple and automated method
    for creating and deploying multiple CloudWatch alarms using a single CloudFormation
    template.
  prefs: []
  type: TYPE_NORMAL
- en: Automating deployment of CloudWatch alarms for AWS CloudTrail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in the previous section, you can easily create different CloudWatch
    metrics and alarms for monitoring your CloudTrail Log files. Luckily for us, AWS
    provides a really simple and easy to use CloudFormation template, which allows
    you to get up and running with a few essential alarms in a matter of minutes!
    The best part of this template is that you can extend the same by adding your
    own custom alarms and notifications as well. So without any further ado, let's
    get started with it.
  prefs: []
  type: TYPE_NORMAL
- en: The template itself is fairly simple and easy to work with. You can download
    a version at [https://s3-us-west-2.amazonaws.com/awscloudtrail/cloudwatch-alarms-for-cloudtrail-api-activity/CloudWatch_Alarms_for_CloudTrail_API_Activity.json](https://s3-us-west-2.amazonaws.com/awscloudtrail/cloudwatch-alarms-for-cloudtrail-api-activity/CloudWatch_Alarms_for_CloudTrail_API_Activity.json).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this book, this template supports the creation of metric
    filters for the following set of AWS resources:'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon EC2 instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IAM policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet gateways
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network ACLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create and launch this CloudFormation stack, head over to the CloudFormation
    dashboard by navigating to [https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the option Create Stack to bring up the CloudFormation template
    selector page. Paste [https://s3-us-west-2.amazonaws.com/awscloudtrail/cloudwatch-alarms-for-cloudtrail-api-activity/CloudWatch_Alarms_for_CloudTrail_API_Activity.json](https://s3-us-west-2.amazonaws.com/awscloudtrail/cloudwatch-alarms-for-cloudtrail-api-activity/CloudWatch_Alarms_for_CloudTrail_API_Activity.json) in
    the Specify an Amazon S3 template URL field, and click on Next to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Specify Details page, provide a suitable Stack name and fill out the
    following required parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Email: A valid email address that will receive all SNS notifications. You will
    have to confirm this email subscription once the template is successfully deployed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LogGroupName: The name of the Log Group that we created earlier in this chapter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the required values are filled in, click on Next to proceed. Review the
    settings of the template on the Review page and finally select the Create option
    to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The template takes a few minutes to completely finish the creation and configuration
    of the required alarms. Here is a snapshot of the alarms and metrics that get
    created for your environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Logical ID of resources created** | **Type of resource** |'
  prefs: []
  type: TYPE_TB
- en: '| `AlarmNotificationTopic` | `AWS::SNS::Topic` |'
  prefs: []
  type: TYPE_TB
- en: '| `AuthorizationFailuresAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `CloudTrailChangesAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `CloudTrailChangesMetricFilter` | `AWS::Logs::MetricFilter` |'
  prefs: []
  type: TYPE_TB
- en: '| `ConsoleSignInFailuresAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `ConsoleSignInFailuresMetricFilter` | `AWS::Logs::MetricFilter` |'
  prefs: []
  type: TYPE_TB
- en: '| `EC2InstanceChangesAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `EC2InstanceChangesMetricFilter` | `AWS::Logs::MetricFilter` |'
  prefs: []
  type: TYPE_TB
- en: '| `EC2LargeInstanceChangesAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `EC2LargeInstanceChangesMetricFilter` | `AWS::Logs::MetricFilter` |'
  prefs: []
  type: TYPE_TB
- en: '| `GatewayChangesAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `GatewayChangesMetricFilter` | `AWS::Logs::MetricFilter` |'
  prefs: []
  type: TYPE_TB
- en: '| `IAMPolicyChangesAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `IAMPolicyChangesMetricFilter` | `AWS::Logs::MetricFilter` |'
  prefs: []
  type: TYPE_TB
- en: '| `NetworkAclChangesAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `NetworkAclChangesMetricFilter` | `AWS::Logs::MetricFilter` |'
  prefs: []
  type: TYPE_TB
- en: '| `SecurityGroupChangesAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `SecurityGroupChangesMetricFilter` | `AWS::Logs::MetricFilter` |'
  prefs: []
  type: TYPE_TB
- en: '| `VpcChangesAlarm` | `AWS::CloudWatch::Alarm` |'
  prefs: []
  type: TYPE_TB
- en: '| `VpcChangesMetricFilter` | `AWS::Logs::MetricFilter` |'
  prefs: []
  type: TYPE_TB
- en: So far, we have seen how to integrate CloudTrail's Log files with CloudWatch
    Log Groups for configuring custom metrics as well as alarms for notifications.
    But how do you effectively analyze and manage these logs, especially if you have
    extremely large volumes to deal with? This is exactly what we will be learning
    about in the next section, along with the help of yet another awesome AWS service
    called **Amazon Elasticsearch**!
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing CloudTrail Logs using Amazon Elasticsearch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Log management and analysis for many organizations starts and ends with just
    three letters: *E*, *L*, and *K*, which stands for Elasticsearch, Logstash, and
    Kibana. These three open-sourced products are essentially used together to aggregate,
    parse, search, and visualize logs at an enterprise scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logstash**: Logstash is primarily used as a log collection tool. It is designed
    to collect, parse, and store logs originating from multiple sources, such as applications,
    infrastructure, operating systems, tools, services, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elasticsearch**: With all the logs collected in one place, you now need a
    query engine to filter and search through these logs for particular events. That''s
    exactly where Elasticsearch comes into play. Elasticsearch is basically a search
    server based on the popular information retrieval software library, Lucene. It
    provides a distributed, full-text search engine along with a RESTful web interface
    for querying your logs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kibana**: Kibana is an open source data visualization plugin, used in conjunction
    with Elasticsearch. It provides you with the ability to create and export your
    logs into various visual graphs, such as bar charts, scatter graphs, pie charts,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can easily download and install each of these components in your AWS environment,
    and get up and running with your very own ELK stack in a matter of hours! Alternatively,
    you can also leverage AWS own Elasticsearch service! Amazon Elasticsearch is a
    managed ELK service that enables you to quickly deploy operate, and scale an ELK
    stack as per your requirements. Using Amazon Elasticsearch, you eliminate the
    need for installing and managing the ELK stack's components on your own, which
    in the long run can be a painful experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this particular use case, we will leverage a simple CloudFormation template
    that will essentially set up an Amazon Elasticsearch domain to filter and visualize
    the captured CloudTrail Log files, as depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f2a768f-400a-4254-87e3-77ab75367cf1.png)'
  prefs: []
  type: TYPE_IMG
- en: To get started, log in to the CloudFormation dashboard, at [https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the option Create Stack to bring up the CloudFormation template
    selector page. Paste [http://s3.amazonaws.com/concurrencylabs-cfn-templates/cloudtrail-es-cluster/cloudtrail-es-cluster.json](http://s3.amazonaws.com/concurrencylabs-cfn-templates/cloudtrail-es-cluster/cloudtrail-es-cluster.json) in,
    the Specify an Amazon S3 template URL field, and click on Next to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Specify Details page, provide a suitable Stack name and fill out the
    following required parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AllowedIPForEsCluster: Provide the IP address that will have access to the
    nginx proxy and, in turn, have access to your Elasticsearch cluster. In my case,
    I''ve provided my laptop''s IP. Note that you can change this IP at a later stage,
    by visiting the security group of the nginx proxy once it has been created by
    the CloudFormation template.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CloudTrailName: Name of the CloudTrail that we set up at the beginning of this
    chapter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'KeyName: You can select a key-pair for obtaining SSH to your nginx proxy instance:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/73c6bade-fe86-45b8-861d-af025942fe37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'LogGroupName: The name of the CloudWatch Log Group that will act as the input
    to our Elasticsearch cluster.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ProxyInstanceTypeParameter: The EC2 instance type for your proxy instance.
    Since this is a demonstration, I''ve opted for the t2.micro instance type. Alternatively,
    you can select a different instance type as well.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once done, click on Next to continue. Review the settings of your stack and
    hit Create to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The stack takes a good few minutes to deploy as a new Elasticsearch domain is
    created. You can monitor the progress of the deployment by either viewing the
    CloudFormation's Output tab or, alternatively, by viewing the Elasticsearch dashboard.
    Note that, for this deployment, a default **t2.micro.elasticsearch** instance
    type is selected for deploying Elasticsearch. You should change this value to
    a larger instance type before deploying the stack for production use.
  prefs: []
  type: TYPE_NORMAL
- en: You can view information on Elasticsearch *Supported Instance Types* at [http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/aes-supported-instance-types.html](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/aes-supported-instance-types.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'With the stack deployed successfully, copy the Kibana URL from the CloudFormation
    Output tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The Kibana UI may take a few minutes to load. Once it is up and running, you
    will need to configure a few essential parameters before you can actually proceed.
    Select Settings and hit the Indices option. Here, fill in the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Index contains time-based events: Enable this checkbox to index time-based
    events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use event times to create index names: Enable this checkbox as well'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Index pattern interval: Set the Index pattern interval to Daily from the drop-down
    list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Index name of pattern: Type `[cwl-]YYYY.MM.DD` in to this field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Time-field name: Select the @timestamp value from the drop-down list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once completed, hit Create to complete the process. With this, you should now
    start seeing logs populate on to Kibana''s dashboard. Feel free to have a look
    around and try out the various options and filters provided by Kibana:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9c0ebe5-a974-4ca4-a8bb-e4b2225a3726.png)'
  prefs: []
  type: TYPE_IMG
- en: Phew! That was definitely a lot to cover! But wait, there's more! AWS provides
    yet another extremely useful governance and configuration management service that
    we need to learn about as well, so without any further ado, here's introducing
    AWS Config!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing AWS Config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Config is yet another managed service, under the security and governance
    wing of services, that provides a detailed view of the configurational settings
    of each of your AWS resources. Configurational settings here can be anything,
    from simple settings made to your EC2 instances or VPC subnets, to how one resource
    is related to another, such as how an EC2 instance is related with an EBS volume,
    an ENI, and so on. Using AWS Config, you can actually view and compare such configurational
    changes that were made to your resource in the past, and take the necessary preventative
    actions if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of things that you can basically achieve by using AWS Config:'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate your AWS resource configurations against a desired setting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieve and view historical configurations of one or more resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send notifications whenever a particular resource is created, modified, or deleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtain a configuration snapshot of your resource that you can later use as a
    blueprint or template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View relationships and hierarchies between resources, such as all the instances
    that are part of a particular network subnet, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AWS Config enables you to manage your resources more effectively by setting
    governing policies and standardizing configurations for your resources. Each time
    a configuration change is violated, you can trigger off notifications or even
    perform a remediation against the change. Furthermore, AWS Config also provides
    out-of-the-box integration capabilities with the likes of AWS CloudTrail, as well
    to providing you with a complete end-to-end auditing and compliance monitoring
    solution for your AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started by setting up AWS Config for our own scenario, let's first
    take a quick look at some of its important concepts and terminologies.
  prefs: []
  type: TYPE_NORMAL
- en: Concepts and terminologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some of the key concepts and terminologies that you ought
    to keep in mind when working with AWS Config:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Config rules**: Config rules form the heart of operations at AWS Config.
    These are essentially rules that represent the desired configuration settings
    for a particular AWS resource. While the service monitors your resources for any
    changes, these changes get mapped to one or more set of config rules, that in
    turn flag the resource against any non-compliances. AWS Config provides you with
    some rules out of the box that you can use as-is or even customize as per your
    requirements. Alternatively, you can also create custom rules completely from
    scratch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration items**: Configuration items are basically a point-in-time
    representation of a particular AWS resource''s configuration. The item can include
    various metadata about your resource, such as its current configuration attributes,
    and its relationships with other AWS resources, if any, its events, such as when
    it was created, last updated, and so on. Configuration items are created by AWS
    Config automatically each time it detects a change in a particular resource''s
    configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration history**: A collection of configuration items of a resource
    over a particular period of time is called its **configuration history**. You
    can use this feature to compare the changes that a resource may undergo overtime,
    and then decide to take necessary actions. Configuration history is stored in
    an Amazon S3 bucket that you specify.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration snapshot**: A configuration snapshot is also a collection of
    configuration items of a particular resource over time. This snapshot acts as
    a template or benchmark that can then be used to compare and validate your resource''s
    current configurational settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this in mind, let's look at some simple steps which allow you to get started
    with your own AWS Config setup in a matter of minutes!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with AWS Config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting started with AWS Config is a very simple process, and it usually takes
    about a minute or two to complete. Overall, you start off by specifying the resources
    that you want AWS Config to record, configure an Amazon SNS topic, and Amazon
    S3 bucket for notifications and storing the configuration history, and, finally,
    add some config rules to evaluate your resources:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, access the AWS Config dashboard by filtering the service from the
    AWS Management Console or by navigating to [https://console.aws.amazon.com/config/](https://console.aws.amazon.com/config/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since this is our first time configuring this, select the Get Started option
    to commence the Config's creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Resource types to record section, select the type of AWS resource that
    you wish config to monitor. By default, config will record the activities of all
    supported AWS resources. You can optionally specify only the services which you
    want to monitor by typing in the Specific types field, as shown in the following
    screenshot. In this case, I''ve opted to go for the default values: Record all
    resources supported in this region and Include global resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/147cf7af-b5b3-4370-a03b-02ce74d85ecd.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, select a location to store your configuration history as well as your
    configuration snapshots. In this case, I've opted to create a new S3 bucket for
    AWS Config by providing a unique Bucket name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Moving on, in the Amazon SNS topic section, you can choose to create a new SNS
    topic that will send email notifications to your specified mailbox, or choose
    a pre-existing topic from your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you will need to provide config with a Read-only access role so that
    it can record the particular configuration information as well as send that over
    to S3 and SNS. Based on your requirements, you can either Create a role or, alternatively,
    Choose a role from your account. Click Save to complete the basic configuration
    for your AWS Config.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this step completed, we can now go ahead and add Config rules to our setup.
    To do so, from the AWS Config dashboard's navigation pane, select the Rules and
    click on the Add rule option.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the AWS Config rules page, you can filter and view predefined rules using
    the *filter* provided. For this particular scenario, let''s go ahead and add two
    rules for checking whether any of the account''s S3 buckets have either public
    read prohibited or public write prohibited on them or not. To do so, simply type
    in `S3-bucket` in the filter and select either of the two config rules, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e9b363ad-c911-4320-958d-32cb259ed266.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Resources**: When any resource that matches the evaluation criteria is either
    created, modified, or deleted'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**: When any resource with the specified tag is created, modified, or
    deleted'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All changes**: When any resource recorded by AWS Config is created, modified,
    or deleted'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting a particular rule will pop up that rule's configuration page, where
    you can define the rule's trigger as well as its scope. Let's pick the s3-bucket-public-read-prohibited rule
    for starters and work with that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Configure rule page, provide a suitable Name and Description for your
    new rule. Now, since this is a managed rule, you will not be provided with an
    option to change the Trigger type; however, when you create your own custom rules,
    you can specify whether you wish to trigger the rule based on a Configuration
    change event or using a Periodic check approach that uses a time frequency that
    you specify to evaluate the rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you can also specify when you want the rule''s evaluations to occur by
    selecting the appropriate options provided under the Scope of changes section.
    In this case, I''ve opted for the Resources scope and selected S3: Bucket as the
    resource, as depicted in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eea146c0-7703-4a23-be63-d30f118f1398.png)'
  prefs: []
  type: TYPE_IMG
- en: Optionally, you can also provide the ARN of the resource that you wish config
    to monitor using the Resource identifier field. Click on Save once done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, using the aforementioned steps, create another managed config rule
    called s3-bucket-public-write-prohibited.
  prefs: []
  type: TYPE_NORMAL
- en: With the rules in place, select the Resources option from the config's navigation
    pane to view the current set of resources that have been evaluated against the
    set compliance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my case, I have two S3 buckets present in my AWS environment: one that has
    public read enabled on it while the other doesn''t. Here''s what the Resources
    evaluated dashboard should look like for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b219e69-55ca-482c-ae19-af13efc85665.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you can view the evaluated resources against a Config timeline by simply
    selecting the name of the resource from the column with the same name. This will
    bring up a time series of your particular resource''s configuration state. You
    can choose between the different time series options to view the state changes,
    as well as toggle between the time periods using the Calendar icon. The best part
    of using this feature of config is that you can simultaneously change your resource''s
    configuration by selecting the Manage resource option. Doing so will automatically
    open the S3 buckets configuration page, as in this case. You can alternatively
    select the Dashboard option from AWS Config navigation pane and obtain a visual
    summary of the current status of your overall compliance, as depicted in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9acb8f3-15c7-40c7-8a03-b91629f860c1.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use the same concepts to create more such managed config rules for a
    variety of other AWS services, including EC2, EBS, Auto Scaling, DynamoDB, RDS,
    Redshift, CloudWatch, IAM, and much more! For a complete list of managed rules,
    check out [http://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html](http://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html).
  prefs: []
  type: TYPE_NORMAL
- en: With the managed config rules done, the last thing left to do is create a customized
    config rule, which is exactly what we will be covering in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom config rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process for creating a custom config rule remains more or less similar
    to the earlier process, apart from a few changes here and there. In this section,
    we will be exploring how to create a simple compliance rule that will essentially
    trigger a config compliance alert if a user launches an EC2 instance other than
    the **t2.micro** instance type:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started, select the Rules option from the AWS Config navigation pane,
    then select the Add custom rule button present on the Add rule page. The creation
    of the custom rule starts off like any other, by providing a suitable Name and
    Description for the rule. Now, here's where the actual change occurs. Custom config
    rules rely on AWS Lambda to monitor and trigger the compliance checks. And this
    is actually perfect, as Lambda functions are event driven and perfect for hosting
    the business logic for our custom rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Create AWS Lambda function to get things started. Here, I''m going
    to make use of a pre-defined Lambda blueprint that was essentially created to
    work in conjunction with AWS Config. Alternatively, you can create your config
    rule''s business logic from scratch, and deploy the same in a fresh function.
    For now, type in the following text in the Blueprints filter, as shown in the
    following screenshot (config-rule-change-triggered):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7236e020-beff-4303-8a83-a996832d35e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Ensure that the blueprint is selected, and click on Next to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the function's Basic Information page, provide a Name for your function followed
    by selecting the Create new role from template(s) option from the Role drop-down
    list. The role will essentially provide the Lambda function with the necessary
    permissions to read from EC2 and write the output back to AWS Config as well as
    to Amazon CloudWatch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in a suitable Role name and select the Create function option to complete
    the process. Once the function is deployed, make a note of its ARN, as we will
    be requiring the same in the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return back to the AWS Config Add custom rule page and paste the newly created
    function''s ARN in the AWS Lambda function ARN file, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/73db2580-9b26-4ac9-a320-b6d63c14c599.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the function''s ARN pasted, the rest of the configuration for the custom
    rule remains the same. Unlike the managed rules, you can opt to change the Trigger
    type between Configuration changes or Periodic, as per your requirements. In this
    case, I''ve opted to go for the Condition changes as my trigger mechanism, followed
    by EC2: Instance as the Resource type.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Last, but not least, we also need to specify the Rule parameters, which is
    basically a key-value pair that defines an attribute against which your resources
    will be validated. In this case, desiredInstanceType is the Key and `t2.micro` is
    the Value. Click Save to complete the setup process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f5cbc09-97ff-487e-bf6a-17c128561410.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the rule in place, all you need to do now is take it for a small test
    run! Go ahead and launch a new EC2 instance that is other than t2.micro. Remember
    that the instance has to be launched in the same region as that of your Lambda
    function! Sure enough, once the instance is launched, the change gets immediately
    reflected in AWS Config''s dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c644035b-99e2-4dc8-abdd-4e609b469ec7.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, we come towards the end of this section as well as the chapter! However,
    before we conclude, here's a quick look at some interesting best practices and
    next steps that you ought to keep in mind when working with AWS CloudTrail and
    AWS Config!
  prefs: []
  type: TYPE_NORMAL
- en: Tips and best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a list of a few essential tips and best practices that you ought to
    keep in mind when working with AWS CloudTrail, AWS Config, and security in general:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Analyze and audit security configurations periodically**: Although AWS provides
    a variety of services for safeguarding your cloud environment, it is the organization''s
    mandate to ensure that the security rules are enforced and periodically verified
    against any potential misconfigurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complete audit trail for all users**: Ensure that all resource creation,
    modifications, and terminations are tracked minutely for each user, including
    root, IAM, and federated users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable CloudTrail globally**: By enabling logging at a global level, CloudTrail
    can essentially capture logs for all AWS services, including the global ones such
    as IAM, CloudFront, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable CloudTrail Log file validation**: An optional setting, however it
    is always recommended to enable CloudTrail Log file validations for an added layer
    of integrity and security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable access logging for CloudTrail and config buckets**: Since both CloudTrail
    and config leverage S3 buckets to store the captured logs, it is always recommended
    that you enable access tracking for them to log unwarranted and unauthorized access.
    Alternatively, you can also restrict access to the logs and buckets to a specialized
    group of users as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encrypt log files at rest**: Encrypting the log files at rest provides an
    additional layer of protection from unauthorized viewing or editing of the logged
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well this has surely been a really interesting chapter to cover! Before we move
    ahead with the next chapter, let's quickly summarize all that we have learned
    so far!
  prefs: []
  type: TYPE_NORMAL
- en: We started off the chapter with a brief overview of AWS CloudTrail, along with
    a small step-by-step guide on getting started with your very own CloudTrail Trail.
    We also learned about AWS CloudTrail Logs, and their integration capabilities
    with Amazon CloudWatch Logs for better alerting and notifications capabilities.
    We also leveraged a couple of CloudFormation templates to deploy pre-configured
    CloudWatch alarms for monitoring our Trail, as well as setting up an entire Amazon
    Elasticsearch domain for viewing and filtering the CloudTrail Logs. Last, but
    not least, we also covered AWS Config as a configuration management and compliance
    service by deploying both managed as well as custom config rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will be continuing and concluding our security journey
    with two really amazing services: AWS IAM and AWS Organizations, so stay tuned!'
  prefs: []
  type: TYPE_NORMAL
