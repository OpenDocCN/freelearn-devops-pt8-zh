["```\nresource \"docker_container\" \"example\" {\n  name  = \"example-container\"\n  image = \"nginx:latest\"\n  ports {\n    internal = 80\n    external = 8080\n  }\n  environment {\n    EXAMPLE_VAR = \"example value\"\n  }\n  volumes {\n    container_path = \"/var/www/html\"\n    host_path = \"./data\"\n    read_only = true\n  }\n}\n```", "```\nresource \"docker_image\" \"example\" {\n  name = \"example-image\"\n  build {\n    context = \"./example-image\"\n    dockerfile = \"Dockerfile\"\n  }\n}\n```", "```\nresource \"docker_network\" \"example\" {\n  name = \"example-network\"\n  driver = \"bridge\"\n}\n```", "```\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\nresource \"aws_ecr_repository\" \"example\" {\n  name = \"example-repository\"\n}\n```", "```\nresource \"aws_ecr_lifecycle_policy\" \"example\" {\n  repository = aws_ecr_repository.example.name\n  policy = <<EOF\n  {\n    \"rules\": [\n      {\n        \"rulePriority\": 1,\n        \"description\": \"Expire images older than 30 days\",\n        \"selection\": {\n          \"tagStatus\": \"untagged\",\n          \"countType\": \"sinceImagePushed\",\n          \"countUnit\": \"days\",\n          \"countNumber\": 30\n        },\n        \"action\": {\n          \"type\": \"expire\"\n        }\n      }\n    ]\n  }\n  EOF\n}\n```", "```\nresource \"aws_ecr_image\" \"example\" {\n  repository = aws_ecr_repository.example.name\n  image_tag = \"latest\"\n  image_digest = \"${data.aws_ecr_image.example.image_digest}\"\n}\ndata \"aws_ecr_image\" \"example\" {\n  repository = aws_ecr_repository.example.name\n  image_tag = \"latest\"\n}\n```", "```\nresource \"aws_ecs_task_definition\" \"example\" {\n  family = \"example-task-definition\"\n  container_definitions = <<DEFINITION\n[\n  {\n    \"name\": \"example-container\",\n    \"image\": \"example-image:latest\",\n    \"portMappings\": [\n      {\n        \"containerPort\": 80,\n        \"hostPort\": 80\n      }\n    ],\n    \"memory\": 512,\n    \"cpu\": 256\n  }\n]\nDEFINITION\n}\nresource \"aws_ecs_service\" \"example\" {\n  name            = \"example-service\"\n  task_definition = aws_ecs_task_definition.example.arn\n  cluster         = aws_ecs_cluster.example.id\n  desired_count   = 2\n}\nresource \"aws_ecs_cluster\" \"example\" {\n  name = \"example-cluster\"\n}\n```", "```\nresource \"aws_eks_cluster\" \"example\" {\n  name     = \"example-cluster\"\n  role_arn = aws_iam_role.example.arn\n  version  = \"1.20\"\n  vpc_config {\n    security_group_ids = [aws_security_group.example.id]\n    subnet_ids         = [aws_subnet.example.*.id]\n  }\n}\nresource \"aws_iam_role\" \"example\" {\n  name = \"example-role\"\n  assume_role_policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"eks.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\nEOF\n}\nresource \"aws_iam_role_policy\" \"example\" {\n  name = \"example-policy\"\n  role = aws_iam_role.example.id\n  policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:Describe*\",\n       \"iam:PassRole\",\n\"eks:\"\n],\n\"Resource\": \"\"\n}\n]\n}\nEOF\n}\nresource \"aws_security_group\" \"example\" {\nname = \"example-security-group\"\ndescription = \"Controls access to the EKS cluster\"\n}\nresource \"aws_subnet\" \"example\" {\ncount = 2\nvpc_id = aws_vpc.example.id\ncidr_block = \"10.0.${count.index}.0/24\"\navailability_zone = \"us-west-2a\"\nmap_public_ip_on_launch = true\n}\n```", "```\nresource \"kubernetes_namespace\" \"example\" {\n  metadata {\n    name = \"example-namespace\"\n  }\n}\nresource \"kubernetes_deployment\" \"example\" {\nmetadata {\nname = \"example-deployment\"\nnamespace = kubernetes_namespace.example.metadata.0.name\n}\nspec {\nreplicas = 2\ntemplate {\n  metadata {\n    labels = {\n      app = \"example\"\n    }\n  }\n  spec {\n    container {\n      name  = \"example\"\n      image = \"example-image:latest\"\n      port {\n        name = \"http\"\n        container_port = 80\n      }\n    }\n  }\n}\n}\n}\nresource \"kubernetes_service\" \"example\" {\nmetadata {\nname = \"example-service\"\nnamespace = kubernetes_namespace.example.metadata.0.name\n}\nspec {\nselector = kubernetes_deployment.example.spec.0.template.0.metadata.0.labels\nport {\nname = \"http\"\nport = 80\ntarget_port = \"http\"\n}\n}\n}\n```"]