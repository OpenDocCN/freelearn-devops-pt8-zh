- en: Chapter 3. Creating Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"Containers within a single operating system are much more efficient,
    and because of this efficiency, they underpin the future of the cloud infrastructure
    industry in place of VM architecture...Efficiency demands a future of containers
    running bare-metal hardware. Virtual machines have had their decade."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *Linux Journal, June 7, 2013* |'
  prefs: []
  type: TYPE_TB
- en: ([http://www.linuxjournal.com/content/containers%E2%80%94not-virtual-machines%E2%80%94are-future-cloud](http://www.linuxjournal.com/content/containers%E2%80%94not-virtual-machines%E2%80%94are-future-cloud))
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Everything at Google runs in a container....we start over 2 billion
    containers per week."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *Joe Beda, a senior staff software engineer for Google Cloud Platform
    in a talk at Gluecon 2014* |'
  prefs: []
  type: TYPE_TB
- en: ([http://www.enterprisetech.com/2014/05/28/google-runs-software-containers/](http://www.enterprisetech.com/2014/05/28/google-runs-software-containers/))
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"If you''re in data-center or cloud IT circles, you''ve been hearing
    about containers in general and Docker in particular non-stop for over a year
    now. With the release of Docker 1.0 in June, the buzz has become a roar."* |  
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *ZDNET, August 4, 2014* |'
  prefs: []
  type: TYPE_TB
- en: In [Chapter 2](ch02.html "Chapter 2. Installing Proxmox VE"), *Installing Proxmox
    VE*, we walked together through the Proxmox VE installation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter''s focus is creating containers from OS templates or virtual appliance
    templates. By its conclusion, this chapter will have addressed how to obtain templates
    and derive LXC containers from them with Proxmox VE. Along the way, we''ll cover
    the following subjects:'
  prefs: []
  type: TYPE_NORMAL
- en: The advantages of, and an example use case for, containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in to the Proxmox VE web-based management interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the OS templates and virtual appliances available directly through
    the management interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a container from both the web-based interface and the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting a new container from the management interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing a container's state directly through the PVE console or via the web-based
    administration interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the container advantage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Proxmox VE Fundamentals"), *Proxmox VE Fundamentals*,
    introduced GNU/Linux containers generally and worked particularly at distinguishing
    them from virtual machines. This section elaborates some advantages of containers,
    and it imagines a scenario ideal for container deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: Where an administrator could run 10-100 virtual machines on a physical host,
    she/he could run 100-1000 containers on the same host without compromising significantly
    on performance ([http://computerpcdeal.com/servers-dell-poweredge/news_2014-06-17-05-30-07-224.html](http://computerpcdeal.com/servers-dell-poweredge/news_2014-06-17-05-30-07-224.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Containers may be thought of, initially, as very lightweight virtual machines,
    but with much lower overhead and the added value of simplified deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Proxmox VE and the case for LXC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Containers are the legacy of FreeBSD jails and have enjoyed a kind of renaissance
    that has become an increasingly valuable cultural touchstone among computing professionals,
    particularly since the rise of Docker in June of 2014.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to keep in mind that Docker was originally reliant on LXC, or
    Linux Containers, the same technology that Proxmox VE relies on for its containerization
    layer since the release of 4,0.
  prefs: []
  type: TYPE_NORMAL
- en: Previous releases, in fact, relied on OpenVZ, another open source container
    technology. OpenVZ had a reputation for stability and reliability; in stark contrast,
    until very recently, LXC was described as a kind of young upstart, one with so
    much promise, but that was nevertheless still immature.
  prefs: []
  type: TYPE_NORMAL
- en: We see the rapid increase in currency that LXC has enjoyed, which is illustrated
    in the following screenshot of a Google Trends analysis at [https://www.google.com/trends/explore#q=%2Fm%2F0crds9p%2C%20OpenVZ&cmpt=q&tz=Etc%2FGMT%2B5](https://www.google.com/trends/explore#q=%2Fm%2F0crds9p%2C%20OpenVZ&cmpt=q&tz=Etc%2FGMT%2B5).
    As a search term, OpenVZ enjoys a very sharp increase in 2006, and its popularity
    is sustained until about 2009 before it starts to drop off.
  prefs: []
  type: TYPE_NORMAL
- en: '![Proxmox VE and the case for LXC](img/image_03_001.png)'
  prefs: []
  type: TYPE_IMG
- en: Interest over time for LXC and OpenVZ from Google Trends
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, LXC slowly grows in popularity, until 2014—the same year that Docker
    created a bit of a container uproar—LXC surpasses OpenVZ.
  prefs: []
  type: TYPE_NORMAL
- en: With the excitement and anxiety that this container renaissance provoked, it
    makes sense that Proxmox VE turned to LXC for its containerization layer in late
    2015; it was cutting edge, it stabilized, and it had the support of contributors
    from corporations such as IBM and Canonical.
  prefs: []
  type: TYPE_NORMAL
- en: Terms that are very often interchangeable with containerization, in this context,
    include **OS virtualization** and **virtual private servers**.
  prefs: []
  type: TYPE_NORMAL
- en: For an infographic covering the history of containers—beginning with Unix V7
    and tracing developments through 2014, visit [http://pivotal.io/platform/infographic/moments-in-container-history](http://pivotal.io/platform/infographic/moments-in-container-history).
  prefs: []
  type: TYPE_NORMAL
- en: Do note that Proxmox VE 4.1 ships with tools with which OpenVZ containers can
    be migrated to LXC. To learn more, visit the PVE wiki at [https://pve.proxmox.com/wiki/Convert_OpenVZ_to_LXC](https://pve.proxmox.com/wiki/Convert_OpenVZ_to_LXC).
  prefs: []
  type: TYPE_NORMAL
- en: Much like a VM, a container is an isolated entity; it can be independently rebooted,
    allowed isolated root access, and have a unique set of users and groups.
  prefs: []
  type: TYPE_NORMAL
- en: That same isolation also means, potentially, independent IP addresses, memory,
    processes, libraries, and configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'LXC''s feature set distinguishes it from full virtualization solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: CPU resources spent on virtualization by the LXC containerization layer will
    be significantly lower than with full virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An authorized container user can change any configuration file and install additional
    software within a container without interfering with other containers or the Proxmox
    VE host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While containers are fully isolated from each other, they do share dynamic libraries
    with the host, which greatly saves on RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most containers fully boot in seconds, while virtual machines may boot in minutes,
    on the same resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because all containers run on the OS kernel of the host system, containers run
    with near-zero overhead
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any container's network traffic is isolated from every other container; traffic
    snooping between containers is impossible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewalling may be used inside a container, as may routing manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In practical terms, these features suggest, for example, that containers can
    be scaled without a restart, and offer improved service efficiency and better
    performance than virtual machines, generally speaking.
  prefs: []
  type: TYPE_NORMAL
- en: It is absolutely worth noting that cautious pundits now suggest the celebrated
    performance advantage of containers and the decreased resources they demand is
    a diminishing advantage, particularly as more powerful hardware becomes available
    at a lower price. The argument here is that full virtualization still has a place,
    and that the benefit of containers is spectral so long as it argues from the perspective
    that hardware resources are scarce.
  prefs: []
  type: TYPE_NORMAL
- en: There's truth to this, but it doesn't negate the assertion that in many cases
    containers can be a less costly alternative to virtual machines without compromising
    on the quality of service.
  prefs: []
  type: TYPE_NORMAL
- en: Consider that the advantages articulated previously can directly lead to a longer
    lifespan for the physical host, as well as flexibility such that containers can
    be transferred quickly to another physical host to facilitate hardware maintenance;
    security is improved against certain threat types; and finally, LXC enjoys a thriving
    community of developers and users, a great resource for support that's available
    with or without a premium Proxmox VE subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Container security**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Securing Proxmox VE"), *Secure Your Servers*,
    will focus particularly on virtual machine security.'
  prefs: []
  type: TYPE_NORMAL
- en: While we're certainly in the thrall of a container revolution, there're still
    outstanding questions about container security and we must be diligent about pursuing
    questions. The LXC documentation at [https://linuxcontainers.org/lxc/security/](https://linuxcontainers.org/lxc/security/)
    offers some insight. More information is available from SANS Institute at [https://www.sans.org/reading-room/whitepapers/linux/securing-linux-containers-36142](https://www.sans.org/reading-room/whitepapers/linux/securing-linux-containers-36142),
    and finally, IBM offers some clear guidance at [http://www.ibm.com/developerworks/library/l-lxc-security/](http://www.ibm.com/developerworks/library/l-lxc-security/).
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, in the domain of full virtualization, there are a variety of documents
    that work toward establishing a security protocol for virtual machines, regardless
    of the vendor. This gives us information to respond to and with which to develop
    a dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Regrettably, this revolution is still young, and no such standards for OS-level
    virtualization seem readily available yet.
  prefs: []
  type: TYPE_NORMAL
- en: This very distinguished feature-set should provoke us to imagine a representative
    use case for LXC containers immediately; imagine the secondary education institution
    as a whole, then consider its various computing courses. The potential for consolidation
    of hardware resources for the two related scenarios is tremendous.
  prefs: []
  type: TYPE_NORMAL
- en: Computing and information and communication technology students, for example,
    can each have their own virtual private server with which to experiment and complete
    guided and independent practice. Each have their own virtual private servers with
    which to experiment, find inspiration, complete assessments, and realize their
    innovative visions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, that same physical hardware could host a container each for relevant
    applications:'
  prefs: []
  type: TYPE_NORMAL
- en: A **learning management system** (**LMS**), such as *Moodle*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A contained social network provided by a web application, such as *Elgg* ([https://elgg.org/about.php](https://elgg.org/about.php))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A microblogging system, such as *GNU Social* ([http://gnu.io/social/](http://gnu.io/social/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A directory server, such as *openLDAP*, to provide a single sign-on service
    across each platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A portfolio system with *Mahara* ([https://mahara.org/](https://mahara.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web filter and firewall solution to protect not only the students, but also
    the integrity of the data, and confidentiality of the stakeholders, and availability
    of services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A domain controller could be added for additional flexibility and functionality
    ([https://www.turnkeylinux.org/domain-controller](https://www.turnkeylinux.org/domain-controller))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's a hitch to containers; they're not a solution for every problem. For
    example, LXC, the container technology beneath PVE containers, only works with
    GNU/Linux guests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Proxmox VE hosts further limit what Linux distributions are supported for containers.
    At present, these are the supported distributions and releases:'
  prefs: []
  type: TYPE_NORMAL
- en: Debain (6, 7 , 8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CentOS 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu (12.04, 14.04, 15.04)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archlinux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is mentioned with an absolute acknowledgement that 4.1 is a very recent
    release of PVE, and it's very clear that Proxmox VE will support more distributions
    with every passing month.
  prefs: []
  type: TYPE_NORMAL
- en: The next section is committed to the very first step required for us to provide
    services with containers hosted on PVE—obtaining container templates.
  prefs: []
  type: TYPE_NORMAL
- en: We'll close this section as a reminder that Proxmox VE is an enterprise-class
    virtualization platform that supports both containers and full virtualization—precisely
    because both have a role in the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Container templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A template is the starting point for an LXC container (abbreviated in Proxmox
    VE as "CT"). There are two sorts of templates: **OS templates** and **appliance
    templates**.'
  prefs: []
  type: TYPE_NORMAL
- en: OS templates provide a minimal set of packages from a GNU/Linux distribution,
    as well as system libraries and scripts, to start up and run the container. They're
    designed to benefit fully from the GNU/Linux kernel running on the host.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from basic tools, such as a bash interpreter and utilities, additional
    software, such as a compiler or a DBMS is not usually incorporated into an OS
    template.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to OS templates, virtual appliances are built on top of JeOS (Just
    enough Operating System) to provide a very specific service reliably, securely,
    and with an absolute commitment to efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual appliances can provide general functionality, such as LAMP stack; or
    a specific application, such as GitLab ([https://about.gitlab.com/](https://about.gitlab.com/));
    a CMS such as WordPress or Drupal; or a web-based network monitoring system such
    as Observium ([http://www.observium.org/](http://www.observium.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: The most compelling aspect of virtual appliances is that they just work with
    minimal configuration or requisite tuning by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Both OS templates and virtual appliances are available via the Proxmox VE management
    interface. At this point, all the available appliances are provided by **TurnKeyGNU/Linux**;
    who provide access to over 190 appliances, from web applications to SDKs (software
    development kits), as well as administrative templates for monitoring network
    activity, providing LDAP or a Domain Controller, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: '![Container templates](img/image_03_002.png)'
  prefs: []
  type: TYPE_IMG
- en: Website for the TurnKey GNU/Linux appliance library
  prefs: []
  type: TYPE_NORMAL
- en: Each of these appliances is built from the same JeOS version of Debian, called
    Turnkey GNU/Linux Core (Debian 8), and features at least shellinabox, OpenSSH
    server, and a customized Webmin.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**TurnKey GNU/Linux Core**'
  prefs: []
  type: TYPE_NORMAL
- en: See [http://www.turnkeylinux.org/core](http://www.turnkeylinux.org/core) for
    more information on TurnKey GNU/Linux Core.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Templates are available directly through the Proxmox VE management interface,
    which offers both OS templates and virtual appliance templates.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll login to the web-based management interface, navigate
    to storage in the server view, and then browse the list of available templates.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To follow along, your Proxmox VE host must be capable of accessing the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in to Proxmox VE's web interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, login to Proxmox VE from a workstation on the same LAN; point
    a browser to port 8006 of the IP address of your Proxmox VE instance using SSL/TLS.
    The machine configured in this chapter has an address of `192.168.1.80`; to access
    this machine, for example, one can simply navigate to `https://192.168.1.80:8006`
    in a (JavaScript enabled) browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because PVE has a self-signed certificate, the browser will warn that the connection
    can''t be trusted. Firefox, for example, will present a window like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Logging in to Proxmox VE''s web interface](img/image_03_003.png)'
  prefs: []
  type: TYPE_IMG
- en: The Insecure Connection dialog (in Firefox)
  prefs: []
  type: TYPE_NORMAL
- en: 'Firefox users can proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To move forward in Firefox, select **Advanced** and click on the **Add Exception...**
    button that is revealed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Add Security Exception** dialog that pops up, click on **Confirm Security
    Exception** while noting that you may choose to store this exception permanently
    by selecting the **Permanently store this exception** check box (this dialog is
    captured in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Logging in to Proxmox VE''s web interface](img/image_03_004.png)'
  prefs: []
  type: TYPE_IMG
- en: The Add Security Exception dialog (in Firefox)
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re using Google Chrome to access the administrative interface, you
    should see a page similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Logging in to Proxmox VE''s web interface](img/image_03_005.png)'
  prefs: []
  type: TYPE_IMG
- en: Privacy Error dialog in Google Chrome
  prefs: []
  type: TYPE_NORMAL
- en: 'To disregard this (somewhat discomforting) alert:'
  prefs: []
  type: TYPE_NORMAL
- en: Scroll to the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Advanced.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Proceed to 192.168.1.80.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Two things to note about this link: it is appended with "unsafe" as a reminder
    that this can be a security risk and of steps for chrome users.'
  prefs: []
  type: TYPE_NORMAL
- en: Whichever browser is used, be sure to replace `192.168.1.80` with the IP address
    of your Proxmox VE host.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For explanations of these browser alerts, see the resources on self-signed
    certificates in relation to TLS/SSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Self-signed_certificate](http://en.wikipedia.org/wiki/Self-signed_certificate)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/HTTPS](http://en.wikipedia.org/wiki/HTTPS)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://security.stackexchange.com/questions/8110/what-are-the-risks-of-self-signing-a-certificate-for-ssl](http://security.stackexchange.com/questions/8110/what-are-the-risks-of-self-signing-a-certificate-for-ssl)'
  prefs: []
  type: TYPE_NORMAL
- en: When the page loads completely, proceed to login with username `root` and the
    password that you determined during installation in [Chapter 2](ch02.html "Chapter 2. Installing
    Proxmox VE"), *Installing Proxmox VE*.
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Realm** called **Linux PAM Standard Authentication**. The final
    field determines the language of the web interface. Make the selection of your
    choice and click on **Login** to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Logging in to Proxmox VE''s web interface](img/image_03_006.png)'
  prefs: []
  type: TYPE_IMG
- en: The login dialog for Proxmox VE web-management interface
  prefs: []
  type: TYPE_NORMAL
- en: After successfully logging in, you'll have your first view of the Proxmox VE
    administration GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Browsing available container templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the left column, toward the banner, the selected view should already be
    set to **Server View**:'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the resource tree directly under **Server View** (the Datacenter node).
    At the bottom of the resource tree in the left frame will be storage that's local
    to the physical host and labeled **local** followed by your hostname in parenthesis;
    in the following screenshot, the hostname is `pve4` and the storage node is simply
    labeled local (`pve4`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the storage node local to your server; in the following screenshot, for
    example, select **local ****(pve4)**:![Browsing available container templates](img/image_03_007.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Server View and Resource Tree (expanded to reveal local (pve4))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Three tabs will appear in the right frame; **Summary**, **Content**, and **Permissions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Content** tab to reveal both a **Templates** button and an **Upload**
    button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Browsing available container templates](img/image_03_008.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Local storage for the PVE node called pve4\. Screenshot to visualize locations
    of local (PVE4), as well as the Templates and Upload buttons
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To browse the list or download an OS template and virtual appliance provided
    through the PVE interface, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Templates** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll through the pop-up browser window until you find a template that suits
    your interests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Browsing available container templates](img/image_03_010.png)'
  prefs: []
  type: TYPE_IMG
- en: A glimpse at a few of the container templates available through the Proxmox
    VE interface
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Turnkey GNU/Linux Appliance Library**'
  prefs: []
  type: TYPE_NORMAL
- en: If you decide you want to know more about a particular Turnkey GNU/Linux appliance,
    point your browser to [http://www.turnkeylinux.org/all](http://www.turnkeylinux.org/all)
    and have a look at the elaborated description and feature lists for each appliance.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading a container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the remainder of the chapter, I'll be working with the Ubuntu 14.04-standard
    template. While it's recommended that you follow along, there are many exciting
    templates to start from.
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading a container](img/image_03_011.png)'
  prefs: []
  type: TYPE_IMG
- en: Preparing to create a Ubuntu 14.04.1 container
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve selected an OS or appliance template:'
  prefs: []
  type: TYPE_NORMAL
- en: Click to select your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The template will be saved to PVE's local storage in `/usr/share/vz/cache/templates/`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the list of available templates in the web interface seems incomplete, it
    can be refreshed from the command line of the PVE host. Access the command line
    interface by logging on to the host locally, via SSH, or using the noVNC console
    available on the web interface.After authenticating, refresh the list of templates
    by simply entering `pveam` at the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Now that a template is downloaded, a container can be built from it. In the
    next section, we'll configure and create the first template.
  prefs: []
  type: TYPE_NORMAL
- en: From template to container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may have noted that when you''ve highlighted an item in storage—ISO or
    template, the option to **Create CT** (container) or **Create VM** (virtual machine)
    appears at the top of the right-hand frame. To build a container from a template
    with Proxmox VE:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Have, at least, the following information ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A password for the root user
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A name for the host
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A free IPv4 address for the host
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Max amount of RAM
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU count
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An idea of the storage space you want for the (virtual) hard drive (in GB)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The IPv4 address of the internet gateway
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The appropriate subnet mask of the network the host is on
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you're certain of this information, select the template in local that you
    want to build a container from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create CT** button at the top right (see the following screenshot).![From
    template to container](img/image_03_012.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create CT and VM to appear at the top of the right-hand corner
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking on **Create CT** will start the **Create LXC Container** dialog, which
    provides a GUI for configuring the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first tab is **General**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![From template to container](img/image_03_013.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The General tab of the container creation dialog
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use this dialog to define the hostname and confirm the password of the root
    user. The VM ID field auto-populates and auto-increments in the Web interface:
    the first guest created will have a default **VM ID** of `100`, the next `101`,
    and so on.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Next** to proceed to the **Template** tab, illustrated here:![From
    template to container](img/image_03_014.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Template tab of the container creation dialog
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To follow this text, choose **Ubuntu-14.04-standard_14.04-1_amd64.tar.gz** from
    the drop-down **Template** menu and click **Next** to continue to the **Root Disk**
    tab.![From template to container](img/image_03_015.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Root Disk tab of the container creation dialog
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this stage, **Storage** is defined as **local** and there are no alternatives
    available. Define the size of the virtual disk for the container to suit your
    preferences (but work to avoid a **Disk Size** of less than 4 GB).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Next** to define a **CPU** limit and units for the container. For
    the purpose of this text, let's leave these settings at the default.![From template
    to container](img/image_03_016.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CPU tab of the container creation dialog
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Next** to configure **Memory** for the container.![From template
    to container](img/image_03_017.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Memory tab of the container creation dialog
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once again, the defaults are good for our purposes, so we''ll move forward
    from the **Memory** tab onto the **Network** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![From template to container](img/image_03_018.png)'
  prefs: []
  type: TYPE_IMG
- en: The Network tab of the container creation dialog
  prefs: []
  type: TYPE_NORMAL
- en: The **Network** tab assumes some prior knowledge about the configuration of
    the network the container is joining. Since the PVE host is at `192.168.1.80`
    in this case, this first container will be addressed as `192.168.1.81`, a static
    address I'm confident won't conflict with other devices. Static is selected instead
    of DHCP at the top right of the tab.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to indicate the scope in the **IPv4/CIDR** field. In this case, the
    subnet mask is 255.255.255.0, so the IP address is appended with `/24`. If the
    correct subnet mask for the network included more addresses, as 255.255.0.0 would,
    simply append `/16` instead, for example. For those of us who don't have the CIDR
    notation at the ready, there's a calculator available at [http://www.subnet-calculator.com/cidr.php](http://www.subnet-calculator.com/cidr.php).
  prefs: []
  type: TYPE_NORMAL
- en: For our purposes, **IPv6** isn't of concern; choose the **DHCP** radio button
    and then check out the left column of the **Network** tab.
  prefs: []
  type: TYPE_NORMAL
- en: '**Name** refers to how the virtual network interface will appear inside the
    container; the default, **eth0**, is precisely what we want.'
  prefs: []
  type: TYPE_NORMAL
- en: The **Bridge** field asks which bridge on the host to connect the container
    to. In the preceding screenshot, `vmbr0` is the default, and only, choice; the
    machine I'm using has only one NIC, and it is defined in the host as `vmbr0`.
  prefs: []
  type: TYPE_NORMAL
- en: When ready to commit the settings in the **Network** tab, click on **Next**
    to point the container to a DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: '![From template to container](img/image_03_019.png)'
  prefs: []
  type: TYPE_IMG
- en: The DNS tab of the container creation dialog
  prefs: []
  type: TYPE_NORMAL
- en: Again, in the case of my network, the default setting in which the **DNS domain**
    field is set to **use host settings** is a perfect fit. To review and commit the
    configuration, click on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: '![From template to container](img/image_03_020.png)'
  prefs: []
  type: TYPE_IMG
- en: The Confirm tab in the container creation dialog
  prefs: []
  type: TYPE_NORMAL
- en: The **Confirm** tab offers a configuration summary, as well as an opportunity
    the revisit some configuration decisions. Click on **Back** to make adjustments
    or **Finish** to begin the container creation task.
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as **Finish** is clicked, the configuration dialog closes and a new
    window opens in the browser that offers an opportunity to watch PVE build the
    LXC container from the template based on your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![From template to container](img/image_03_021.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of Task viewer as the container creation completes
  prefs: []
  type: TYPE_NORMAL
- en: When the **Task viewer** window outputs `TASK OK`, the container is ready to
    use. The **Task viewer** window can be closed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A container can also be created from a template using a PVE host''s command
    line using the `pct` create command. The following bash script illustrates the
    use of this command to create a container nearly identical to the one created
    through the web-based procedure detailed previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In most cases, making changes to a container''s configuration and adding virtual
    devices is a simple matter that can be accomplished through the web interface.
    To edit the configuration or add devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the container in **Server** view in the left frame of the interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the frame on the right, look below the **Start** button for a group of tabs
    (shown in the following screenshot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Match the task you want to complete to the tab name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Add** and **Edit** buttons to make the desired changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![From template to container](img/image_03_022.png)'
  prefs: []
  type: TYPE_IMG
- en: Most container configuration changes can be made through the PVE Web interface
  prefs: []
  type: TYPE_NORMAL
- en: The next section is about controlling the state of any given container; for
    example, how to start it and stop it.
  prefs: []
  type: TYPE_NORMAL
- en: Starting and stopping containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start the container, select it in the left pane; the icon should be black
    and gray, indicating a container that is not running.
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshot, my container is identified with a VM ID of **100**
    and the name **trusty-chapter3**:![Starting and stopping containers](img/image_03_023.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Icon of stopped container
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the upper-right corner of the interface, start the container by clicking
    on the **Start** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Starting and stopping containers](img/image_03_024.png)'
  prefs: []
  type: TYPE_IMG
- en: Container Start button
  prefs: []
  type: TYPE_NORMAL
- en: When the container start up process is complete, it is signified in the left
    frame of the interface by a change in the color of the container's icon; it should
    now be green, black, and grey instead of simply black and grey; the green addition
    to the icon is a quick way to visually distinguish a running container from a
    stopped one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting and stopping containers](img/image_03_025.png)'
  prefs: []
  type: TYPE_IMG
- en: The icon of a running container is green, black, and grey
  prefs: []
  type: TYPE_NORMAL
- en: In the resource tree, in the left frame, select the running container.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right side of the screen, several buttons become available:'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on **Shutdown** will shut down the container gracefully
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Stop** button, by way of contrast, will halt the container abruptly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Migrate** allows us to move, even a running container between the Proxmox
    VE cluster nodes without causing any service outages or other downtime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Remove** button will delete a stopped container. Note that there is no
    recovery option if the container is not backed up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To suspend a container, choose the container's **Backup** tab in the PVE web
    interface. Click on **Backup now**, and in the dialog box that appears, select **Suspend**
    from the **Mode** drop-down menu. Click on the **Backup** button to suspend the
    container and close the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting and stopping containers](img/image_03_026.png)'
  prefs: []
  type: TYPE_IMG
- en: Containers can be suspended from the PVE Web interface
  prefs: []
  type: TYPE_NORMAL
- en: Changing container states with the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A container's state may also be controlled from a PVE host's command line (whether
    via SSH session, noVNC console, or logged in to the physical host).
  prefs: []
  type: TYPE_NORMAL
- en: To start the container described in this chapter and assigned the VM ID of 100,
    enter `pct start 100`. Likewise, the same container can be brought down with `pct
    stop 100`.
  prefs: []
  type: TYPE_NORMAL
- en: Templates can be backed up from either the PVE command line or the web interface.
    To learn more about backing up and restoring containers, visit the Proxmox wiki
    at [https://pve.proxmox.com/wiki/Linux_Container#Backup_container](https://pve.proxmox.com/wiki/Linux_Container#Backup_container).
  prefs: []
  type: TYPE_NORMAL
- en: Accessing a container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most OS templates available through Proxmox VE are initially configured to be
    accessed either through the noVNC console, which can be launched from the management
    web interface, or from the PVE command line interface.
  prefs: []
  type: TYPE_NORMAL
- en: That's not to say OpenSSH isn't installed; in fact, I haven't seen a template
    without the OpenSSH server installed. The OS templates simply aren't configured
    at launch so the root user can login with a password. (However, TurnKey Linux's
    appliances can be accessed through SSH by the root account using a password.)
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The pct enter command makes it a breeze to access a container from the PVE host's
    command line interface. To enter the container developed in this chapter, I could
    access the PVE host via SSH, for example, by logging in as the root user; then,
    I could follow `pct enter` with the VM ID of the container, which in this case
    is `100`. Simply type `pct enter 100` at the prompt and press  **Enter** to drop
    into a shell within the container.
  prefs: []
  type: TYPE_NORMAL
- en: To access a running container through the **noVNC** console, select the running
    template in the web interface, and then select **Console** at the top right of
    the browser, and select **noVNC** from the drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing a container](img/image_03_027.png)'
  prefs: []
  type: TYPE_IMG
- en: When a started container is selected, the Console button appears in the top-right
    corner of the page
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, select the running template as described previously, but instead
    of clicking on the **Console** drop-down menu, choose the **Console** tab for
    the container.
  prefs: []
  type: TYPE_NORMAL
- en: If you have access to a terminal via the console, as illustrated in the following
    screenshot, you're all set to create users, install packages, and make other configuration
    changes to make the container your own.
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing a container](img/image_03_028.png)'
  prefs: []
  type: TYPE_IMG
- en: Reconfiguring a Ubuntu container's time-zone data from noVNC console session
  prefs: []
  type: TYPE_NORMAL
- en: If the console launches but displays only a black screen and an unresponsive
    cursor, try pressing **Enter** and look for a log in prompt. If that doesn't work,
    consider that some containers have to be restarted once to prompt for credentials;
    restart the container and then once more, launch the noVNC console. If the noVNC
    screen is still dark, press  **Enter** to finesse a prompt from it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll want to configure locales and the time zone for most containers. `dpkg-reconfigure
    locales` will lead you through a brief dialog to determine which locales are available
    on a Debian or Ubuntu container. `dpkg-reconfigure tzdata` will lead you through
    the necessary steps to setup or reconfigure the time zone data for a Debian or
    Ubuntu container.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter detailed the process of developing containers from LXC templates.
    We explored the promise of LXC containers in Proxmox VE, and outlined an example
    use case that could be generalized to other circumstances and that demonstrated
    how the Proxmox VE container's features could add value, flexibility, and extensibility
    to an organization's IT infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: After describing how to derive a container from a template, we explored ways
    to manipulate containers from both the command line and the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. Creating Virtual Machines"), *Creating
    Virtual Machines*, we will identify advantages of virtual machines over containers
    and explore some use cases. At the close of the chapter, we'll have walked through
    the creation of Microsoft Windows and GNU/Linux virtual machines from ISOs.
  prefs: []
  type: TYPE_NORMAL
- en: With what we know now about containers, it'll be exciting to explore the place
    for virtual machines in a culture whose fascination is fixed on containerization.
  prefs: []
  type: TYPE_NORMAL
