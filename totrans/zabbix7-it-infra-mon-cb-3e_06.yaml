- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Visualizing Data, Inventory, and Reporting
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据可视化、库存和报告
- en: When working with Zabbix, collected data must be put to good use. After all,
    the data is of no use if we don’t have a place to easily access it. Zabbix already
    puts our data to good use with the **Latest data** page and with problems created
    from triggers, but we can also put our data to good use by building some stuff
    ourselves, such as graphs, maps, an inventory, and completely custom dashboards.
    We can even create reports from the dashboards and use built-in reports in the
    frontend.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Zabbix 时，收集到的数据必须得到充分利用。毕竟，如果我们没有一个可以轻松访问数据的地方，这些数据就没有意义。Zabbix 已经通过 **最新数据**
    页面和由触发器创建的问题有效地利用了我们的数据，但我们也可以通过自己创建一些东西来更好地利用数据，例如图表、地图、库存以及完全自定义的仪表板。我们甚至可以从仪表板生成报告并在前端使用内置报告。
- en: After working through these recipes, you’ll be able to set up the most important
    parts of Zabbix data visualization. You’ll also be able to make good use of your
    inventory and reporting systems to get the most out of their useful features.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，你将能够设置 Zabbix 数据可视化的最重要部分。你还将能够充分利用你的库存和报告系统，以获得它们的最大功能。
- en: 'In this chapter, we’ll cover the following recipes to show you how to achieve
    good results:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容，以帮助你实现良好的结果：
- en: Creating graphs to access visual data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建图表以访问可视数据
- en: Creating maps to keep an eye on infrastructure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建地图以监控基础设施
- en: Creating dashboards to get the right overview
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建仪表板以获得正确的概览
- en: Templating dashboards to work at the host level
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为主机级别工作创建仪表板模板
- en: Setting up Zabbix inventory
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Zabbix 库存
- en: Using the Zabbix Geomap widget
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zabbix Geomap 小部件
- en: Working through Zabbix reporting
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 Zabbix 报告
- en: Setting up scheduled PDF reports
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置定期的 PDF 报告
- en: Setting up improved business service monitoring
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置改进的业务服务监控
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, we will need our Zabbix server, our **Simple Network Management****Protocol**
    (**SNMP**)-monitored host from [*Chapter 5*](B19803_05.xhtml#_idTextAnchor809),
    *Building Your Own Structured Templates*. We’ll be doing most of our work in the
    frontend of Zabbix, so have your mouse at the ready.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章内容，我们需要 Zabbix 服务器，以及我们在 [*第 5 章*](B19803_05.xhtml#_idTextAnchor809) 中配置的
    **简单网络管理协议**（**SNMP**）监控的主机，*构建你自己的结构化模板*。我们将主要在 Zabbix 的前端进行操作，请准备好鼠标。
- en: 'The code files for this chapter can be found in this book’s GitHub repository:
    [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在本书的 GitHub 仓库找到：[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06)。
- en: Creating graphs to access visual data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建图表以访问可视数据
- en: Graphs in Zabbix are a powerful tool to show what’s going on with your collected
    data. You might have already created some ad hoc graphs by using the **Latest
    data** page, but we can also create o predefined graphs. In this recipe, we will
    go over doing just that.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 中的图表是展示你收集的数据变化的强大工具。你可能已经通过 **最新数据** 页面创建了一些临时图表，但我们也可以创建预定义图表。在本章节中，我们将逐步讲解如何做到这一点。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure to get your Zabbix server ready, along with a Linux host that we can
    monitor (with SNMP). If you followed the recipes in [*Chapter 5*](B19803_05.xhtml#_idTextAnchor809),
    *Building Your Own Structured Templates*, you should already have a template.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 Zabbix 服务器已准备好，并且有一台 Linux 主机可以监控（使用 SNMP）。如果你按照 [*第 5 章*](B19803_05.xhtml#_idTextAnchor809)
    中的步骤操作，*构建你自己的结构化模板*，你应该已经有了一个模板。
- en: Alternatively, you can download the templates available at [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以下载本章中提供的模板：[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06)。
- en: If you’re using the downloaded templates, download and import **Custom Linux
    uptime by SNMP** first, then **Custom Linux by SNMP**. You can import a template
    by going to **Data collection** | **Templates** and clicking the blue **Import**
    button in the top-right corner.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是下载的模板，请先下载并导入 **Custom Linux uptime by SNMP**，然后导入 **Custom Linux by
    SNMP**。你可以通过进入 **数据收集** | **模板**，并点击右上角的蓝色 **导入** 按钮来导入模板。
- en: Make sure you put the template on a host and monitor it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by navigating to our templates by going to **Data collection** |
    **Templates** and selecting the template. For me, it is still called **Custom
    Linux** **by SNMP**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Items** and create the following item on the template:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.1 – ICMP item creation page](img/B19803_06_001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – ICMP item creation page
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you go to the **Tags** tab and add a tag, as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2 – ICMP item creation page – the Tags tab](img/B19803_06_002.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – ICMP item creation page – the Tags tab
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to save this item.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, back at the template configuration page, go to **Graphs**. This is where
    we can see all of our configured graphs for this template; at the moment, there
    are none.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Create graph** in the top-right corner. This will take you to the graph
    creation page:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Graph creation page](img/B19803_06_003.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Graph creation page
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: This is where we can create graphs for standalone items. Let’s create a graph
    to see our uptime.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the graph creation page with the following information:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Graph creation page filled with our information](img/B19803_06_004.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Graph creation page filled with our information
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with graphs, it’s a good idea to keep colorblind people in mind.
    Worldwide, about 8% of all males and 0.5% of all females are affected by this
    condition. There are great sources online that explain which colors to use for
    your production environment. You can find one such source here: [https://www.tableau.com/about/blog/2016/4/examining-data-viz-rules-dont-use-red-green-together-53463](https://www.tableau.com/about/blog/2016/4/examining-data-viz-rules-dont-use-red-green-together-53463).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, ping your SNMP-monitored host for a while. Do this from your Zabbix server
    **command-line** **interface** (**CLI**):'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Afterward, navigate to **Monitoring** | **Hosts** and click the **Graphs** button
    next to your host. In my case, the host is still called **lar-book-templated_snmp**.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will immediately take us to an overview of graphs for this host, where
    we can see our new **Incoming ICMP** **messages** graph:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 –Monitoring | Hosts graph page with our graph](img/B19803_06_005.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 –Monitoring | Hosts graph page with our graph
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also make graphs for discovery items; this is called a graph prototype.
    They work in about the same way as our item prototypes. Let’s create one of these
    as well:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Data collection** | **Templates** and select our **Custom Linux
    by** **SNMP** template.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Discovery rules**. Then, for the **Discover Network Interfaces** discovery
    rule, click on **Item prototypes**. In the top-right corner, click **Create item
    prototype** and create the following item prototype:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Item prototype – the Incoming bits page filled with our information](img/B19803_06_006.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Item prototype – the Incoming bits page filled with our information
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add a tag on the **Tags** tab:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Item prototype Incoming bits – the Tags tab](img/B19803_06_007.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Item prototype Incoming bits – the Tags tab
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, make sure you add the following on the **Preprocessing** page:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Item prototype – the Incoming bits Preprocessing tab filled
    with our information](img/B19803_06_008.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Item prototype – the Incoming bits Preprocessing tab filled with
    our information
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Preprocessing is quite an extensive topic. In short, the preprocessing in this
    step will ensure that our data is calculated at a change per second, with the
    mathematical formula *(value - prev_value)/(time - prev_time)*, and that our data
    is multiplied by 8 so that it’s changed from bytes to bits.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to finish creating this item prototype.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, back at our **Discover Network interfaces** discovery rule, click the **Graph**
    **prototypes** button.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-right corner, click **Create graph prototype** and fill in the next
    page with the following information:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Graph prototype – the Incoming bits page filled with our information](img/B19803_06_009.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Graph prototype – the Incoming bits page filled with our information
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we go back to **Monitoring** | **Hosts** and click the **Graphs** button,
    we’ll see two new graphs:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Graphs page for our host](img/B19803_06_010.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Graphs page for our host
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: It might take some time for the graph to fill with data since we’ve only just
    added the item. Give it some time and you will start to see them fill up.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Graphs work by putting your collected values in a visual form. We collect our
    data from our host – through SNMP, for example – and we put that data in our database.
    Our graphs, in turn, collect this data from the database and put it in this visual
    form. For humans, this is a lot better to read, and we can interpret the data
    easily.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: The graph prototype works in almost the same way as our item prototype. For
    every discovered interface, we create a graph using a name containing the `{#IFNAME}`
    **low-level discovery** (**LLD**) macro. This way, we get a versatile structured
    environment because when a new interface is created (or deleted), a new graph
    is also created (or deleted).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Creating maps to keep an eye on infrastructure
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maps in Zabbix are a great way to get an overview of infrastructure. For instance,
    they’re amazing for following traffic flows or seeing where something is going
    off in your environment. They’re not only super-useful for network overviews but
    also for server management overviews, and even for a lot of cool customization.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Maps are super useful, and we use them a lot in environments we build. Since
    we love maps so much, we’ve also taken the liberty of opening a feature request
    suggesting some collected map improvements to make them even better: [https://support.zabbix.com/browse/ZBXNEXT-7680](https://support.zabbix.com/browse/ZBXNEXT-7680).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 地图非常有用，我们在构建的环境中经常使用它们。由于我们非常喜欢地图，我们还自作主张地提出了一个功能请求，建议对已收集的地图进行改进，以使它们更好：[https://support.zabbix.com/browse/ZBXNEXT-7680](https://support.zabbix.com/browse/ZBXNEXT-7680)。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need our Zabbix server, our SNMP-monitored host, and the templates from
    the previous recipe.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要Zabbix服务器、SNMP监控主机以及前面配方中的模板。
- en: How to do it…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Follow these steps:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Let’s start this recipe off by navigating to **Data collection** | **Templates**
    and selecting our **Custom Linux by** **SNMP** template.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过导航到**数据收集** | **模板**并选择我们的**自定义Linux通过** **SNMP**模板来开始这个过程。
- en: 'Go to **Discovery rules** and then **Item prototypes**. Create the following
    item prototype by filling in the fields on the **Item prototype** creation page:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**发现规则**，然后是**项目原型**。通过填写**项目原型**创建页面中的字段，创建以下项目原型：
- en: "![Figure 6.11 – Item prototype creation page\uFEFF](img/B19803_06_011.jpg)"
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – 项目原型创建页面](img/B19803_06_011.jpg)'
- en: Figure 6.11 – Item prototype creation page
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 项目原型创建页面
- en: 'We’ll also need to go to **Tags** to add a new tag, as shown in the following
    screenshot:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要进入**标签**，如以下截图所示，添加一个新标签：
- en: '![Figure 6.12 – Item prototype creation page – the Tags tab](img/B19803_06_012.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12 – 项目原型创建页面 – 标签标签](img/B19803_06_012.jpg)'
- en: Figure 6.12 – Item prototype creation page – the Tags tab
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – 项目原型创建页面 – 标签标签
- en: 'Lastly, don’t forget to add preprocessing by going to the **Preprocessing**
    tab:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，别忘了通过进入**预处理**标签页添加预处理：
- en: '![Figure 6.13 – Item prototype – the Preprocessing tab](img/B19803_06_013.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图6.13 – 项目原型 – 预处理标签](img/B19803_06_013.jpg)'
- en: Figure 6.13 – Item prototype – the Preprocessing tab
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 – 项目原型 – 预处理标签
- en: Click on the blue **Add** button to finish.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**添加**按钮完成。
- en: 'Next, navigate to **Monitoring** | **Maps**. There’s already a default map
    here that’s included in all Zabbix server installs called **Local network**. Feel
    free to check it out:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导航到**监控** | **地图**。这里已经有一个默认地图，所有Zabbix服务器安装中都会包含，叫做**本地网络**。随意查看一下：
- en: '![Figure 6.14 – The default local network map](img/B19803_06_014.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14 – 默认本地网络地图](img/B19803_06_014.jpg)'
- en: Figure 6.14 – The default local network map
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – 默认本地网络地图
- en: There’s not much to see here besides your local Zabbix server host and whether
    it is in a problem state or not. So, let’s click on **All maps**.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了您的本地Zabbix服务器主机以及它是否处于问题状态外，这里没什么可看的。所以，让我们点击**所有地图**。
- en: 'We’re going to create our own map, so click the **Create map** button in the
    top-right corner. Create the map by filling in the following fields:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建我们自己的地图，所以点击右上角的**创建地图**按钮。通过填写以下字段来创建地图：
- en: '![Figure 6.15 – Map creation page](img/B19803_06_015.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图6.15 – 地图创建页面](img/B19803_06_015.jpg)'
- en: Figure 6.15 – Map creation page
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – 地图创建页面
- en: After clicking the blue **Add** button, the frontend will take you back to the
    **Map** overview page. Click the newly created **Templated SNMP host** **map**
    here.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**添加**按钮后，前端会将您带回到**地图**概览页面。点击这里新创建的**模板化SNMP主机** **地图**。
- en: Click **Edit map** in the top-right corner to start editing the map.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**编辑地图**开始编辑地图。
- en: 'Now, what we want to do here is select the **Add** button next to **Map element**,
    which is in the horizontal menu at the top of the map. This will add the following
    element:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们在这里要做的是选择地图顶部水平菜单中**地图元素**旁边的**添加**按钮。这将添加以下元素：
- en: '![Figure 6.16 – The added element](img/B19803_06_016.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16 – 添加的元素](img/B19803_06_016.jpg)'
- en: Figure 6.16 – The added element
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 – 添加的元素
- en: 'Click the newly added element. This will open the following screen:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新添加的元素。这将打开以下屏幕：
- en: "![Figure 6.17 – The  Map element edit win\uFEFFdow](img/B19803_06_017.jpg)"
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – 地图元素编辑窗口](img/B19803_06_017.jpg)'
- en: Figure 6.17 – The Map element edit window
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – 地图元素编辑窗口
- en: 'Here, we can fill out our host information. Let’s add the following information
    to the fields:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们可以填写我们的主机信息。让我们将以下信息添加到字段中：
- en: '![Figure 6.18 – Map element – lar-book-templated_snmp](img/B19803_06_018.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18 – 地图元素 – lar-book-templated_snmp](img/B19803_06_018.jpg)'
- en: Figure 6.18 – Map element – lar-book-templated_snmp
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – 地图元素 – lar-book-templated_snmp
- en: Click `400` and `100` (see *Figure 6**.20*).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`400`和`100`（参见*图6.20*）。
- en: 'Now, add another element by clicking the **Add** button next to **Map element**.
    Edit the new element and add the following information:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **Map element** 旁边的 **Add** 按钮添加另一个元素。编辑新元素并添加以下信息：
- en: '![Figure 6.19 – Map element vSwitch edit window filled with information](img/B19803_06_019.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – 填写信息的地图元素 vSwitch 编辑窗口](img/B19803_06_019.jpg)'
- en: Figure 6.19 – Map element vSwitch edit window filled with information
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19 – 填写信息的地图元素 vSwitch 编辑窗口
- en: After creating both elements, move the new switch element to `150` and `80`,
    as seen in *Figure 6**.20*.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建两个元素后，将新的交换机元素移动到 `150` 和 `80`，如 *图 6**.20* 所示。
- en: Now, select both elements by holding the *Ctrl* key (*command* on Mac) on your
    keyboard.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按住键盘上的 *Ctrl* 键（Mac 上是 *command* 键），选择两个元素。
- en: 'Then, click **Add** next to **Link** to add a link between the two elements.
    It should now look like this:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **Link** 旁边的 **Add** 按钮，添加两个元素之间的链接。现在应该是这样的：
- en: '![Figure 6.20 – Our newly created map](img/6.20.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – 我们新创建的地图](img/6.20.jpg)'
- en: Figure 6.20 – Our newly created map
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – 我们新创建的地图
- en: 'Edit the information for our server again after creating the link by clicking
    on our icon. Click on **Edit** next to the newly created link, as shown in the
    following screenshot:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建链接后，再次点击我们的图标编辑服务器信息。点击新创建的链接旁边的 **Edit** 按钮，如下图所示：
- en: "![Figure 6.21 – The Edit link in the Map element edit window\uFEFF](img/B19803_06_021.jpg)"
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.21 – 地图元素编辑窗口中的编辑链接](img/B19803_06_021.jpg)'
- en: Figure 6.21 – The Edit link in the Map element edit window
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – 地图元素编辑窗口中的编辑链接
- en: 'Add the following information to the window:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口中添加以下信息：
- en: '![Figure 6.22 – Editing the link in the Map element edit window with our information](img/B19803_06_022.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.22 – 在地图元素编辑窗口中编辑链接并填入我们的信息](img/B19803_06_022.jpg)'
- en: Figure 6.22 – Editing the link in the Map element edit window with our information
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – 在地图元素编辑窗口中编辑链接并填入我们的信息
- en: Important information
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Make sure the hostname (in this example, **lar-book-templated_snmp**) is an
    exact match with the hostname in your Zabbix system. We’re requesting data specifically
    from that host. We cannot omit the hostname or use macros such as **{HOST.HOST}**
    here since the link belongs to two hosts and Zabbix won’t understand the context.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 确保主机名（在本示例中是 **lar-book-templated_snmp**）与 Zabbix 系统中的主机名完全匹配。我们是专门从该主机请求数据。我们不能在这里省略主机名或使用宏，如
    **{HOST.HOST}**，因为该链接涉及两个主机，Zabbix 无法理解其上下文。
- en: 'Let’s also click **Add** in the **Link indicators** section and add the following
    trigger with the color red:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 **Link indicators** 部分点击 **Add**，并添加一个红色的触发器：
- en: '![Figure 6.23 – Link indicator filled with a trigger](img/B19803_06_023.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.23 – 填充触发器的链接指示器](img/B19803_06_023.jpg)'
- en: Figure 6.23 – Link indicator filled with a trigger
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – 填充触发器的链接指示器
- en: Now, click **Apply** at the bottom of the window and then **Update** in the
    top-right corner of the page. That’s our first map created!
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击窗口底部的 **Apply**，然后点击页面右上角的 **Update**。我们的第一个地图就创建完成了！
- en: How it works…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'After creating and opening our map, we’ll see the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建并打开地图后，我们将看到如下内容：
- en: '![Figure 6.24 – Our newly created map](img/B19803_06_024.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.24 – 我们新创建的地图](img/B19803_06_024.jpg)'
- en: Figure 6.24 – Our newly created map
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.24 – 我们新创建的地图
- en: The map shows our switch (which is not a monitored host at the moment) and our
    server (which is a monitored host). This means that when something is wrong with
    our server, the **OK** status will turn into a **PROBLEM** status on the map.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 地图展示了我们的交换机（目前不是被监控的主机）和我们的服务器（是被监控的主机）。这意味着，当我们的服务器出现问题时，**OK** 状态会在地图上变为 **PROBLEM**
    状态。
- en: 'We can also see our configured label (see *Figure 6**.24)*, which shows us
    real-time information on traffic statistics. Now, when we break down the label,
    we get the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到我们配置的标签（见 *图 6**.24*），它展示了流量统计的实时信息。现在，当我们分解标签时，会得到如下内容：
- en: '![Figure 6.25 – Map label breakdown](img/B19803_06_025.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.25 – 地图标签分解](img/B19803_06_025.jpg)'
- en: Figure 6.25 – Map label breakdown
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.25 – 地图标签分解
- en: We can pull real-time statistics into a label by defining which statistics we
    want to pull into the label between `{}`. In this case, we collect our values
    for interface traffic and put them directly in the label, creating a real-time
    traffic analysis map.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在 `{}` 中定义要拉取的统计数据，将实时统计数据拉入标签。在这种情况下，我们收集接口流量的值，并直接将其放入标签中，从而创建一个实时流量分析地图。
- en: 'We also put a trigger on this link. The cool thing about putting triggers such
    as this on our map is that when our link goes down, we can see the following happen:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.26 – Map showing problems](img/B19803_06_026.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: Figure 6.26 – Map showing problems
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Traffic has stopped flowing because the link is now down, and our line has turned
    red. Also, our host is now showing a **PROBLEM** state under the hostname.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: We can even create orange lines with triggers that state 50% traffic utilization
    like this and trace **Distributed Denial-of-Service** (**DDoS**) traffic through
    our network.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Creating dashboards to get the right overview
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve created some graphs and a map, let’s continue by not only visualizing
    our data but also getting the visualization in an overview. In this recipe, we’re
    going to create a dashboard for our Linux-monitored hosts.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you followed the previous two recipes and that you have your Zabbix
    server ready. We’ll be using our SNMP-monitored host from the previous recipe,
    as well as some items, triggers, and a map we created earlier.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to substitute any items you might not have with anything else from
    your environment. With dashboards, the most important thing is to play around
    with data, something you can do once you understand the concept of a widget.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: From the sidebar, navigate to **Dashboards** and click **All dashboards** in
    the left corner of the page.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click the **Create dashboard** button in the top-right corner and fill
    in your dashboard’s name, like this:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.27 – The Dashboard properties area](img/B19803_06_027.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
- en: Figure 6.27 – The Dashboard properties area
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '**Start slideshow automatically** is enabled here, but it’s only useful if
    you want to use this dashboard in a slideshow, such as on a big screen (TV) in
    a **Network Operating Center** (**NOC**) room. I always disable it for dashboards
    that are used on personal computers so that my pages don’t jump around while troubleshooting.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve also opened a case to ask Zabbix to change the default behavior: [https://support.zabbix.com/browse/ZBXNEXT-7713](https://support.zabbix.com/browse/ZBXNEXT-7713).'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Keeping Zabbix elements such as maps and dashboards that are meant to be used
    by entire departments owned by the Zabbix **Admin** user is a good idea. This
    way, they aren’t dependent on a single user who might leave your environment at
    a later stage, which means we have to change the map owner once we want to delete
    their account. The elements can be owned by a disabled user as well. If you’re
    not a super admin, don’t forget to share the dashboard with yourself before changing
    the owner.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click **Apply**; you’ll be taken to your dashboard:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.28 – New empty dashboard](img/B19803_06_028.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
- en: Figure 6.28 – New empty dashboard
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: After creating our dashboard, we will see that it is empty. We need to fill
    it with several widgets to create a good overview.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by adding a problem widget. Click **+ Add** in the top-right corner.
    Add the following widget by filling out all the fields:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.29 – New problem widget creation window](img/B19803_06_029.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: Figure 6.29 – New problem widget creation window
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Add**. By doing this, we’ll have our first widget on our dashboard,
    displaying all **Unacknowledged problems**. It will only show them for the **Severity**
    warning and higher on all Linux servers:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.30 – The Unacknowledged problems widget](img/B19803_06_030.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: Figure 6.30 – The Unacknowledged problems widget
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s immediately add some more widgets, starting with our **Map** widget.
    Click **+ Add** in the top-right corner and add the following widget:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.31 – The Add widget page](img/B19803_06_031.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: Figure 6.31 – The Add widget page
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, add a **Graph** type widget by clicking **+ Add** in the top-right corner
    again. This one is a bit more difficult. Let’s add our name first:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.32 – New graph widget creation window\uFEFF](img/B19803_06_032.jpg)"
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: Figure 6.32 – New graph widget creation window
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we need to add our first **Data set**, like this:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.33 – Adding a dataset](img/B19803_06_033.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: Figure 6.33 – Adding a dataset
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add a second one by clicking **+ Add new data set** and adding the following:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.34 – Adding another dataset](img/B19803_06_034.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Figure 6.34 – Adding another dataset
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: We can then click **Add**, and our graph will be added to our dashboard.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s also add the **Item value** widget to the page. Click on **+ Add** again.
    Then, set up the following widget:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.35 – Adding the Item value widget](img/B19803_06_035.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: Figure 6.35 – Adding the Item value widget
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in changing exactly how this widget looks, be sure to use
    the **Advanced configuration** fields in this widget configuration screen.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Another widget we love is the very useful new **Top hosts** widget. Let’s add
    it by using the **+ Add** button again.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the widget configuration screen, set **Host groups** to **Linux servers**.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, click on the **Add** button next to **Columns** to add a column with
    information. Fill out the form like this:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.36 – Top hosts widget 1, column 1](img/B19803_06_036.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
- en: Figure 6.36 – Top hosts widget 1, column 1
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add** button next to **Columns** again and add the following:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.37 – Top hosts widget 1, co\uFEFFlumn 2](img/B19803_06_037.jpg)"
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: Figure 6.37 – Top hosts widget 1, column 2
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'The result should look like this:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.38 – Top hosts widget 1](img/B19803_06_038.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
- en: Figure 6.38 – Top hosts widget 1
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to click the blue **Add** button at the bottom of the form to save
    your changes.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create one more **Top hosts** widget by using the **+ Add** button again.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set **Host groups** to **Linux servers** again. Then, click on the **Add**
    button next to **Columns** again. Add the following:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.39 – Top hosts widget 2, column \uFEFF1](img/B19803_06_039.jpg)"
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: Figure 6.39 – Top hosts widget 2, column 1
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add** button next to **Columns** again and add the following:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.40 – Top hosts widget 2, c\uFEFFolumn 2](img/B19803_06_040.jpg)"
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: Figure 6.40 – Top hosts widget 2, column 2
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will look like this:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.41 – Top hosts widget 2](img/B19803_06_041.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: Figure 6.41 – Top hosts widget 2
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can freely move around the widgets until we see this:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.42 – Our dashboard filled with information](img/B19803_06_042.JPG)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: Figure 6.42 – Our dashboard filled with information
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add another page. Click on the drop-down arrow next to **+ Add**
    and click **Add page**. This will open the following popup, where we will add
    a new page called **Host data**:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.43 – Adding a new Host data page](img/B19803_06_043.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: Figure 6.43 – Adding a new Host data page
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Apply** to add the new page. We can now immediately start adding
    additional widgets on the first page.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s click on **+ Add** again to add a new widget and select the widget called
    **Gauge** first.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s select an item from the default **Zabbix server** host. Click **Select**
    next to the **Item** field and search your host groups for the **Zabbix server**
    host. From the list, select the **Available memory in %** item.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure the form looks like as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.44 – Dashboard Gauge widget creation form](img/B19803_06_044.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: Figure 6.44 – Dashboard Gauge widget creation form
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add** button at the bottom of this window to save the changes
    and add this widget.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s add our last widget by clicking **+ Add** again. We’ll add a new
    widget called **Pie chart**.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set **Name** to **CPU timings**. For **host pattern**, set **Zabbix server**,
    and for **item pattern**, set **CPU * time**. It should look like this:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.45 – Dashboard Pie chart widget creation form](img/B19803_06_045.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: Figure 6.45 – Dashboard Pie chart widget creation form
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: On the **Legend** tab, set **Number of rows** to **3**.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Add** button at the bottom of the page to save the changes
    and add the widget.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your new page should now look like this:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.46 – Zabbix global dashboard second page](img/B19803_06_046.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
- en: Figure 6.46 – Zabbix global dashboard second page
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: I don’t like the name of our first page, so let’s click on **Page 1** and then
    on the three dots next to **Page 1**. It should open a dropdown, where we can
    select **Properties**.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, give your page a new name. I will name it **Overview**. I always rename
    the first page to keep things organized and not have any default non-descriptive
    names in my dashboard (or anywhere for that matter). It should now show us two
    pages with different names:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.47 – Zabbix Linux servers global dashboard page names](img/B19803_06_047.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: Figure 6.47 – Zabbix Linux servers global dashboard page names
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Click **Save changes** in the top-right corner and you’re done.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating dashboards is the best way to create overviews for quick access to
    data during troubleshooting, day-to-day problem monitoring, and – of course –
    for use with big TV walls. We’ve probably all seen the big operation centers with
    TVs displaying data. Zabbix is great for all these purposes and more, as you saw
    in this recipe.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Zabbix has added a lot of new widgets in 7.0 as a big focus for them has been
    visualization. New widgets will be added in even newer versions of Zabbix as well,
    so keep your eye on the roadmap if you’re still missing something: https://www.zabbix.com/roadmap.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'We also haven’t talked about every single new widget yet, so check out the
    *what’s new* page here: [https://www.zabbix.com/whats_new_7_0](https://www.zabbix.com/whats_new_7_0).'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Templating dashboards to work at the host level
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Zabbix removed the screens functionality and replaced it with dashboards
    completely, a lot of people in the Zabbix community got very excited about using
    the newer widgets on their host-level dashboards. Unfortunately, development time
    is limited and at the time of writing, the feature is limited to only six widgets.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: In Zabbix 7.0, this all changes. All the widgets available on your global dashboards
    are now available on host-level dashboards, making the whole feature incredibly
    useful.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you followed the first two recipes in this chapter and that you have
    your Zabbix server ready. We’ll be using our SNMP-monitored host from the first
    two recipes, as well as our item, triggers, and map.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, anyone can create host-level dashboards, so long as they have
    some data available on a host that has a template assigned. As such, feel free
    to apply your own datasets instead.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start building some templated dashboards:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Data collection** | **Templates** and edit the **Custom Linux
    by SNMP** template by clicking on **Dashboards** next to it.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the top-right corner, click on **Create dashboard** to start creating
    your first templated host-level dashboard.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will call this dashboard **Host overview** as it will contain several different
    statistics about our host:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.48 – Host dashboard creation](img/B19803_06_048.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
- en: Figure 6.48 – Host dashboard creation
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '**Start slideshow automatically** is enabled here, but this is only useful
    if you want to use this dashboard in a slideshow, such as on a big screen (TV)
    in a NOC room. I always disable it for dashboards used on personal computers so
    that my pages don’t jump around while troubleshooting.'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Apply** to add this new dashboard.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the dashboard has been created, we can start adding some widgets. Add
    your first widget by clicking on **+ Add** in the top-right corner.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s start with a simple **Item value** widget. Add the following information:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.49 – Host dashboard, Item value widget](img/B19803_06_049.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
- en: Figure 6.49 – Host dashboard, Item value widget
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you apply your changes and add the widget by clicking **+** **Add**.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next up, we’ll add a graph widget. Click **+ Add** to create another widget
    and add the following information:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.50 – Host dashboard, Graph widget](img/B19803_06_050.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
- en: Figure 6.50 – Host dashboard, Graph widget
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on the widget creation form, we’ll also create a dataset. In this case,
    we can keep it simple by just adding a single-item dataset:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.51 – Host dashboard, Graph widget dataset](img/B19803_06_051.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
- en: Figure 6.51 – Host dashboard, Graph widget dataset
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Click `*`) to grab multiple items in a single-item pattern.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s also create a problem overview of the host here. Add the **Problems**
    widget, as follows:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.52 – Host dashboard, Problems widget](img/B19803_06_052.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
- en: Figure 6.52 – Host dashboard, Problems widget
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add** to save your changes and add the widget to the dashboard.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, make sure you arrange these widgets so that they form a proper dashboard:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.53 – Host dashboard, completed and arranged](img/B19803_06_053.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
- en: Figure 6.53 – Host dashboard, completed and arranged
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you might be wondering why this dashboard is empty. Templates
    do not contain data, meaning we have to navigate to a host to look at the actual
    data.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Monitoring** | **Hosts** and go to the **lar-book-templated_snmp**
    host. Click **Dashboards** next to it:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.54 – Host dashboard for host lar-book-templated_snmp](img/B19803_06_054.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
- en: Figure 6.54 – Host dashboard for host lar-book-templated_snmp
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the dashboard now contains data about our specific host.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Host-level dashboards are super useful since they completely rely on templates.
    We have to set them up at the template level; when we do, all of the hosts that
    are using that template will have the same dashboard with unique information shown
    in the widgets. This makes it possible for us to create hundreds or even thousands
    of dashboards by simply setting it up at the template level.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: However, we have to keep in mind that host-level dashboards are different than
    the global dashboards we set up in the previous recipe. Not only do we access
    them differently, but they also operate at the host level. This means that they
    are mainly used to show information about a single host.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 'With Zabbix 7.0, we can add all of the widgets we have available on the global
    dashboard level, making host-level dashboards very useful. If we have several
    templates with one or even multiple dashboards, we can also use the pages at the
    top to easily navigate several dashboards:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.55 – Host dashboard selector for the Zabb\uFEFF\uFEFFix server host](img/B19803_06_055.jpg)"
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: Figure 6.55 – Host dashboard selector for the Zabbix server host
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Zabbix inventory
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zabbix inventory is a feature I love, but it hasn’t had a lot of love from the
    Zabbix development team lately, even though it was on the roadmap for 7.0\. Sorry
    – I still love you Zabbix developers, but if you’re reading this, feel free to
    put some time into the feature!
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, I’m talking about this old gem of a feature request: [https://support.zabbix.com/browse/ZBXNEXT-336](https://support.zabbix.com/browse/ZBXNEXT-336).'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: The inventory feature makes it possible for us to automatically put collected
    data in a visual **configuration management database** (**CMDB**) such as inventory
    in the Zabbix frontend. I think we’ve all seen CMDB inventory systems not be updated
    and thus missing out on data we need once we look into the system. Zabbix inventory
    fixes this by getting the data from the monitored systems. Let’s get started.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that you log in to the Zabbix frontend and keep your SNMP-monitored
    host from the previous recipes ready.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by making sure our Zabbix server puts all of our hosts’ inventory
    information into the fields. I like to do this by going to **Administration**
    | **General** and then selecting **Other** from the dropdown in the top-left corner.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can then set our **Default host inventory mode** parameter to **Automatic**.
    Don’t forget to click **Update**:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.56 – Administration | General | Other configuration parameters](img/B19803_06_056.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
- en: Figure 6.56 – Administration | General | Other configuration parameters
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can do this at the host level. Go to **Configuration** | **Hosts**
    and select our **lar-book-templated_snmp** SNMP-monitored host.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Inventory** and set it to **Automatic** here as well. As you may have
    noticed, the default only applies to newly created hosts from now on.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Changing the global setting does not apply it to all existing hosts, only to
    newly created hosts. It might be a good idea to run a **Mass update** operation
    for all the hosts or change the inventory mode manually, host by host.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s go to **Data collection** | **Templates** and select **Custom Linux**
    **by SNMP**.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Items** and edit **System hostname**. We have to change the **Populates
    host inventory field** setting, like this:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.57 – Edit item page](img/B19803_06_057.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
- en: Figure 6.57 – Edit item page
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Update** and navigate to **Inventory** | **Hosts**. You will see the
    following:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.58 – Inve\uFEFF\uFEFFntory | Hosts](img/B19803_06_058.jpg)"
  id: totrans-308
  prefs: []
  type: TYPE_IMG
- en: Figure 6.58 – Inventory | Hosts
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zabbix inventory is simple but underdeveloped at the moment. It’s not amazing
    to filter to a point where it shows exactly what we want to see, but it can be
    very useful nonetheless.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: If you’re working with a lot of equipment, such as in an MSP environment, it
    can become overwhelming to log in to every device and get the serial number by
    hand. If you poll the serial number and populate the **inventory** field, you
    suddenly have an active list of up-to-date serial numbers.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: The same works with anything from hardware information to software versions.
    We could get the active operating system versions from devices and generate an
    extensive list of all our operating system versions, which is very useful if you
    ever have to patch something, for example.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Use Zabbix inventory wisely when creating items, and set the population to **Automatic**,
    as we did in this chapter – you’ll never have to think too much about the feature.
    You configure it almost automatically this way and have nice lists waiting for
    you when you need them.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Using the Zabbix Geomap widget
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve seen how to create dashboards, let’s set up another dashboard.
    We’ll use this one to create a full-fledged geographical overview of some of our
    hosts in Zabbix. We’ll do this by using the Zabbix inventory functionality we
    have just learned how to use.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All we need for this recipe is our Zabbix setup with access to the frontend.
    It is also smart to follow the previous two recipes about dashboards and inventory.
    If you haven’t followed those yet, it is recommended that you follow them first.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the Zabbix Geomap functionality is quite easy – we simply need to use
    our Zabbix inventory on our hosts in combination with a dashboard widget:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s navigate to our **Data collection** | **Hosts** page and edit one
    of our hosts. I’ll be using the **lar-book-templated_snmp** host, but it doesn’t
    matter which host you use, so long as it is in the **Linux servers** host group.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Inventory** tab and make sure that it is set to **Manual** or **Automatic**:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.59 – Inventory mode selector on the Zabbix host Inventory tab](img/B19803_06_059.JPG)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
- en: Figure 6.59 – Inventory mode selector on the Zabbix host Inventory tab
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the **Location latitude** and **Location longitude** fields, fill in
    the following:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.60 – Inventory tab fields on a Zabbix\uFEFF host](img/B19803_06_060.jpg)"
  id: totrans-326
  prefs: []
  type: TYPE_IMG
- en: Figure 6.60 – Inventory tab fields on a Zabbix host
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button to save these changes.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back at **Data collection** | **Hosts**, let’s do the same thing for another
    host. I’ll use **lar-book-agent_simple**.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Inventory** tab and fill in the **Location latitude** and **Location
    longitude** fields again:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.61 – Inventory tab fields on another Zabbix host](img/B19803_06_061.JPG)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
- en: Figure 6.61 – Inventory tab fields on another Zabbix host
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button to save these changes.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s go to **Dashboards** and, at **All dashboards**, create a new dashboard
    or use our existing **Linux servers** dashboard. This is what I’ll do.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Edit dashboard** button in the top-right corner and use
    the **Add** button dropdown to click on **Add page**:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.62 – Existing dashboard Add page but\uFEFFton](img/B19803_06_062.JPG)"
  id: totrans-336
  prefs: []
  type: TYPE_IMG
- en: Figure 6.62 – Existing dashboard Add page button
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll add the following new page:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.63 – Dashboard page properties](img/B19803_06_063.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
- en: Figure 6.63 – Dashboard page properties
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: Click **Apply** to add this new page.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now add our **Geomap** widget simply by clicking anywhere on the page.
    Fill it in as follows:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.64 – Zabbix Geomap widget properties](img/B19803_06_064.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
- en: Figure 6.64 – Zabbix Geomap widget properties
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Click **Apply** to save the widget configuration.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now click on the blue **Save changes** button in the top-right corner
    to save our dashboard changes.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will take us back to our dashboard, where we can click the **Geomap**
    page of this dashboard:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.65 – Zabbix Geomap widget on a dashboard with two hosts](img/B19803_06_065.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
- en: Figure 6.65 – Zabbix Geomap widget on a dashboard with two hosts
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: We now have a functioning Geomap in our Zabbix dashboard that uses the latitude
    and longitude that are available in our Zabbix inventory.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of creating an entirely new **Monitoring** | **Geomap** page, Zabbix
    has chosen to include this new feature via a widget, giving us the option to create
    even more advanced dashboards. It’s important to note here that Zabbix also chose
    to use existing inventory data. Because it is possible to automatically fill in
    inventory data, as we saw in the *Setting up Zabbix inventory* recipe, we can
    also automate our Geomap widget content.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: So, whether you go the manual route or the automatic route, the Geomap widget
    is a valuable extension of our dashboard. In general, Zabbix is extending the
    dashboard functionality quite a bit by including a bunch of new widgets in Zabbix
    7.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: We will set up our Zabbix automatic reporting in this chapter, which will also
    use the dashboard functionality. f you’d like, you can combine a Geomap widget
    with your automatic report to send out a geographical report. The key takeaway
    here is that Zabbix is building interoperability between components and giving
    us flexibility in the way we want to use a new widget like this.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with the initial release of the Geomap widget, some people asked
    us if it was possible to change the kind of map that’s used by the Geomap widget.
    If we navigate to **Administration** | **General** | **Geographical maps**, we
    can choose several built-in map providers:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.66 – Administration | General | Geographical maps](img/B19803_06_066.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
- en: Figure 6.66 – Administration | General | Geographical maps
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: 'If that isn’t enough, it is also possible to add a custom map provider using
    the **Other** option under **Tile provider**. Simply fill in the form and you’re
    all set:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.67 – Administration | General | Geographical maps – Other](img/B19803_06_067.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
- en: Figure 6.67 – Administration | General | Geographical maps – Other
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, a lot of possibilities have been added through this single widget.
    One of the most requested features from the Zabbix community, we can now set it
    up and use it in the latest Zabbix releases.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Working through Zabbix reporting
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zabbix reporting got some well-deserved love from Zabbix development, especially
    concerning getting reports out of the system and improving the audit log. First,
    let’s take a look at some powerful features to show you exactly what’s going on
    with your statistics right from the Zabbix frontend. Then, in the next recipe,
    we’ll take a look at how to create automatic PDF reports, a new and much-anticipated
    feature.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, all you’ll need is the Zabbix frontend and a monitored host.
    I’ll be using the SNMP-monitored host from the previous recipes.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There isn’t anything to configure really as reporting is present in Zabbix from
    the start. So, let’s dive into what each page of reporting offers us.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: System information
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you navigate to **Reports** | **System information**, you will find the
    following table:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.68 – Reports | System information](img/B19803_06_068.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
- en: Figure 6.68 – Reports | System information
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: 'You might have seen this table before as it can also be configured as a dashboard
    widget. This page gives us all of the information we need about our Zabbix server,
    such as the following:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '**Zabbix server is running**: This informs us whether the Zabbix server backend
    is running and where it is running. In this case, it’s running, and it’s running
    on **localhost:10051**.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zabbix server version**: The version of the Zabbix server daemon installed
    on our instance.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zabbix frontend version**: The version of the Zabbix frontend currently running
    on our web server.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software update last checked**: Details when Zabbix last checked for a new
    available version.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Latest release**: This shows us if there is a new version of Zabbix available.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of hosts**: This will detail the number of hosts enabled (**16**)
    and the number of hosts disabled (**5**). It gives us a quick overview of our
    Zabbix server host information.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of templates**: A simple counter showing the number of templates currently
    available on this Zabbix system.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of items**: Here, we can see details of our Zabbix server’s items
    – in this case, enabled (**565**), disabled (**241**), and not supported (**217**).'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of triggers**: This details the number of triggers we have. We can
    see how many are enabled (**373**) and disabled (**38**), but also how many are
    in a problem state (**12**) and how many are in an OK state (**361**).'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of users (online)**: The first value details the total number of users.
    The second value details the number of users currently logged in to the Zabbix
    frontend.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Required server performance, new values per second**: Perhaps I’m introducing
    you to a completely new concept here, which is **new values per second** (**NVPS**).
    A server receives or requests values through items and writes this to our Zabbix
    database. The information detailed here shows the estimated number of NVPS received
    by the Zabbix server.'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You might also see two additional values here, depending on your setup:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '**Database name**: If you see the name of your database with the value of your
    version, it might indicate you are running a non-supported database version. You
    could see a message like **Warning! Unsupported <DATABASE NAME> database server
    version. Should be at least <****DATABASE VERSION>**.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High availability cluster**: If you are running a Zabbix server high availability
    cluster, you will see if it is enabled here and what the failover delay is. Additionally,
    the **Reports** | **System information** page will display additional high-availability
    information.'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Availability report
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Navigating to **Reports** | **Availability report** will give us some useful
    information about how long a trigger has been in a **Problems** state versus an
    **Ok** state for a certain period:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.69 – Reports | Availability report](img/6.69.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
- en: Figure 6.69 – Reports | Availability report
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Looking at one of our hosts, we can see that in the last 30 days, the **Zabbix
    agent is not available (for 3m)** trigger has been in a **Problems** state for
    **10.0000%** of the time. This might be useful for us to know so that we can determine
    how often a certain problem arises.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Trigger top 100
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Upon navigating to **Reports** | **Trigger top 100**, we will find the top
    100 triggers that have been firing in a certain amount of time:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.70 – Reports | Trigger top 100](img/6.70.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
- en: Figure 6.70 – Reports | Trigger top 100
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: For my Zabbix server, the busiest trigger was a **Zabbix agent is not available**
    trigger on a server. It’s a useful page to see what we are putting most of our
    time into, problem-wise.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Audit
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The audit log, which is a handy addition to Zabbix, can be found by going to
    **Reports** | **Audit**:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.71 – Reports | Audit](img/6.71.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
- en: Figure 6.71 – Reports | Audit
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see which user has done what on our Zabbix server – identifying
    a culprit for something that shouldn’t have been done, for instance.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: Action log
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we go to **Reports** | **Action log**, we land on a page that shows which
    actions have been fired. If you’ve configured **Actions**, then you can get a
    list here, like this:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.72 – Reports | Action log](img/B19803_06_072.jpg)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
- en: Figure 6.72 – Reports | Action log
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not sure if your action succeeded, then look at this list. It is very
    useful to troubleshoot your actions to a point where you get them up and running
    as you want.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: 'When you hover over the **Info** box, you also get to see what went wrong.
    For example, for the **Failed** items on my Zabbix instance, I must define the
    appropriate media type for the **Admin** user:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.73 – Reports | Action log – Info](img/B19803_06_073.jpg)'
  id: totrans-408
  prefs: []
  type: TYPE_IMG
- en: Figure 6.73 – Reports | Action log – Info
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: Notifications
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Last, but not least, navigating to **Reports** | **Notifications** will show
    us the number of notifications that have been sent to a certain user over a certain
    period:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.74 – Reports | Notifications](img/B19803_06_074.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
- en: Figure 6.74 – Reports | Notifications
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: In my case, `50` notifications have been sent to the `0` to other users.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Setting up scheduled PDF reports
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A much-wanted feature was added in Zabbix 5.4: sending automatic PDF reports
    through email. Let me start by stating that this implementation might not fully
    cover every Zabbix user’s situation yet. What this feature does is take a screenshot
    of any Zabbix dashboard and send it through email. It’s not just a screenshot,
    though – data is converted into text in the PDF file and the resolution is very
    high. It’s the first setup from the Zabbix developers and I think we should appreciate
    it for what it is.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, it is a very flexible way of implementing this as we can choose
    any kind of widget available, along with its filters, and send it in an automatic
    report. On top of that, it gives the Zabbix development team the flexibility to
    add new widgets on the fly that immediately work with your PDF reports.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need an existing Zabbix installation with access to the frontend and
    the CLI. You can use the server we have been using throughout this book for this
    or you can use your own installation.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a multi-host setup, the easiest method is to install this where
    the Zabbix server is also running, but it is possible to run this on any host.
    In this example, we’ve used our single-host installation.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: You will also need to set up a user with an email media type.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with Zabbix scheduled reports, we need to install some things
    on our Zabbix server:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Let’s log in to our Zabbix server CLI and execute the following command to install
    the Google Chrome browser.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On RHEL-based systems, run the following command:'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, add the following to the file:'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On Ubuntu systems, run the following command:'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, let’s install our required Zabbix web services package with the following
    commands.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s the command for RHEL-based systems:'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here’s the command for Ubuntu systems:'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let’s edit our new Zabbix web service configuration file:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can find a bunch of Zabbix web-service-specific parameters here, including
    encryption. Make sure the following line is set up to match your Zabbix server(s)
    IP(s):'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let’s edit our Zabbix server configuration file:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Edit the **WebServiceURL** parameter so that it matches your Zabbix web service
    IP and **StartReportWriters** to make sure we have a reporting subprocess:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Important note
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: For scheduled reporting to work, you will need to set up SSL encryption for
    your Zabbix frontend; we recommend using Let’s Encrypt. Alternatively, set the
    **IgnoreURLCertErrors=1** parameter in **/etc/zabbix/zabbix_web_service.conf**.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: That’s it for the CLI part. Let’s log in to our frontend and navigate to **Administration**
    | **General** | **Other**.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure you fill out the **Frontend URL** parameter on this page with your
    frontend URL, like this:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.75 – Administration | General | Others with Frontend URL filled
    in](img/B19803_06_075.jpg)'
  id: totrans-448
  prefs: []
  type: TYPE_IMG
- en: Figure 6.75 – Administration | General | Others with Frontend URL filled in
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Update** button at the bottom of the page and navigate to **Reports**
    | **Scheduled reports**.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we are on the page where we can set up and maintain our scheduled reports.
    So, let’s create a new one using the blue **Create report** button in the top-right
    corner.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will take us to a new page where we can set up a new report. Let’s set
    up a weekly report using our existing dashboard’s **Global view**. First, we’ll
    name this report **Weekly overview of the Global** **view dashboard**.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the dashboard’s **Global view** by clicking the **Select** button next
    to **Dashboard**.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set **Cycle** to **Weekly** with a start time of **9:00** and set **Repeat
    on** to **Monday**:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.76 – Reports | Scheduled reports – creating a new report, part I](img/B19803_06_076.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
- en: Figure 6.76 – Reports | Scheduled reports – creating a new report, part I
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, make sure to fill in **Subject** and **Message** and set up **Subscriptions**
    so that they match users that have media with the type of email set on their user
    profile:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.77 – Reports | Scheduled reports – creating a new report page, part
    II](img/B19803_06_077.jpg)'
  id: totrans-458
  prefs: []
  type: TYPE_IMG
- en: Figure 6.77 – Reports | Scheduled reports – creating a new report page, part
    II
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: You can now click the **Test** button to see if the report is working. Once
    it is, use the blue **Add** button to finish setting up this scheduled report.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This feature is long-awaited and is finally here, but it’s not finished and
    is simply still a building block for more advanced scheduled reports coming later.
    There are some key things to keep in mind with this new reporting functionality.
    I always state that Zabbix development tries to keep everything as customizable
    as possible by adding features and interconnecting them to make sure we can use
    existing functionality in new ways.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: The Zabbix development team could have decided to create a fully fledged PDF
    reporting engine for Zabbix. But by going the way of using Zabbix dashboards as
    building blocks for all your PDF reports, they have created versatility and customizability.
    Every single new dashboard widget that is added is now available for you to use
    in your PDF reports, and more and more reporting-focused widgets will be added
    in the near future.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix simply grabs the information from your dashboard and sends it to you
    in a PDF form using the new Zabbix web services module and the Google Chrome browser.
    Once we get these prerequisites out of the way, we are provided with a way to
    send PDF reports to any of our Zabbix users, provided they have an email media
    type set up.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: Setting up improved business service monitoring
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business service monitoring is a way to monitor the services that we, as a business,
    offer to our customers or internally. Think of a CRM system, email, and our website.
    It all has to work and we’d like to know if it does for the people using them.
    It also allows us to monitor the SLA of those services, if we want to define them.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: Starting from Zabbix 6.0, business service monitoring has had an entire overhaul.
    If you’ve set it up in versions before 6.0, it might be wise to spend some time
    rediscovering the basics using this recipe. If you’re starting with 7.0 here and
    you’re entirely new to business service monitoring, don’t worry as we will go
    through setting it up step by step in this recipe.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need our Zabbix server and access to its frontend. I’ll be using my
    `lar-book-centos` host with the configuration we have done so far. We will also
    need a monitored host, for which I will use the Zabbix server itself.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-470
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ll be using the Zabbix frontend as an example to set up business service monitoring,
    for which we will create a new host called `lar-book-zabbix-frontend` with some
    items and triggers.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: Setting up items and triggers
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have followed the previous recipes, you should have a good understanding
    of setting up items and triggers. Let’s go through it again and set up some for
    our business service monitoring example:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s create a new template by logging in to our Zabbix frontend and
    navigating to **Data collection** | **Templates**.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Create template** button in the top-right corner and fill
    in the page, as follows:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.78 – New Zabbix frontend template configuration page](img/B19803_06_078.jpg)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
- en: Figure 6.78 – New Zabbix frontend template configuration page
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you save this new template by clicking the blue **Add** button.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s set up our new host by navigating to **Data collection** | **Hosts**.
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Create host** button in the top-right corner and fill in
    the page, as follows:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.79 – New Zabbix frontend host configur\uFEFFation page](img/B19803_06_079.jpg)"
  id: totrans-481
  prefs: []
  type: TYPE_IMG
- en: Figure 6.79 – New Zabbix frontend host configuration page
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the following tag by navigating to the **Tags** tab:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.80 – New Zabbix frontend host configuration page – the Tags tab](img/B19803_06_080.jpg)'
  id: totrans-484
  prefs: []
  type: TYPE_IMG
- en: Figure 6.80 – New Zabbix frontend host configuration page – the Tags tab
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to save this new host configuration and navigate
    to **Data collection** | **Templates**.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the **Zabbix frontend by Zabbix agent** template and go to **Value mapping**.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the small **Add** button with the blue dotted line under it and add
    the following value mapping:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.81 – Template Zabbix frontend by Zabbix agent, Service state value
    mapping](img/B19803_06_081.jpg)'
  id: totrans-489
  prefs: []
  type: TYPE_IMG
- en: Figure 6.81 – Template Zabbix frontend by Zabbix agent, Service state value
    mapping
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you click the blue **Update** button. Then, back on the template,
    go to **Items**.
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Create item** button and add the following:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.82 – ICMP ping item](img/B19803_06_082.jpg)'
  id: totrans-493
  prefs: []
  type: TYPE_IMG
- en: Figure 6.82 – ICMP ping item
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: 'Before adding the item, make sure you also add the **Value mapping** value,
    as follows:'
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.83 – ICMP ping item value mapping](img/B19803_06_083.jpg)'
  id: totrans-496
  prefs: []
  type: TYPE_IMG
- en: Figure 6.83 – ICMP ping item value mapping
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: 'We must also go to the **Tags** tab to add some tags to this item:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.84 – ICMP ping item – the T\uFEFFags tab](img/B19803_06_084.jpg)"
  id: totrans-499
  prefs: []
  type: TYPE_IMG
- en: Figure 6.84 – ICMP ping item – the Tags tab
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the blue **Add** button at the bottom of the page.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back at **Items**, click on the blue **Create item** button to create another
    item. Fill it in, as follows:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.85 – Agent ping item](img/B19803_06_085.jpg)'
  id: totrans-503
  prefs: []
  type: TYPE_IMG
- en: Figure 6.85 – Agent ping item
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: 'We must also go to the **Tags** tab to add some tags to this item:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.86 – HTTP service state item – the Tags tab](img/B19803_06_086.jpg)'
  id: totrans-506
  prefs: []
  type: TYPE_IMG
- en: Figure 6.86 – HTTP service state item – the Tags tab
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: Now, save the new item by clicking the blue **Add** button at the bottom of
    the page.
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have two new items, let’s navigate to the **Triggers** page for
    this template.
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Create trigger** button in the top-right corner and add the following
    trigger:'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.87 – ICMP down trigger configuration](img/B19803_06_087.jpg)'
  id: totrans-511
  prefs: []
  type: TYPE_IMG
- en: Figure 6.87 – ICMP down trigger configuration
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, we need to add a new tag, indicating that this trigger
    will be used in our SLA monitoring:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.88 – ICMP down trigger – the Tag\uFEFFs tab](img/B19803_06_088.jpg)"
  id: totrans-514
  prefs: []
  type: TYPE_IMG
- en: Figure 6.88 – ICMP down trigger – the Tags tab
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s click the blue **Add** button to add this trigger. Then, create another
    trigger using the **Create trigger** button in the top-right corner.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s add the following trigger:'
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.89 – Zabbix agent is unreachable trigger configuration](img/B19803_06_089.jpg)'
  id: totrans-518
  prefs: []
  type: TYPE_IMG
- en: Figure 6.89 – Zabbix agent is unreachable trigger configuration
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you add a tag for the SLA on this trigger as well by going to the
    **Tags** tab:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.90 – Zabbix agent is unreachable trigger – the Tags\uFEFF tab](img/B19803_06_090.jpg)"
  id: totrans-521
  prefs: []
  type: TYPE_IMG
- en: Figure 6.90 – Zabbix agent is unreachable trigger – the Tags tab
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to finish setting up this trigger.
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the business service monitoring configuration
  id: totrans-524
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'That concludes our item and trigger configuration. We can now continue with
    setting up our business service monitoring:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s define our SLA period by going to **Services** | **SLA** and clicking
    on the blue **Create SLA** button in the top-right corner. We’ll define the following
    SLA:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.91 – Services | SLA – Zabbix SLA setup](img/B19803_06_091.jpg)'
  id: totrans-527
  prefs: []
  type: TYPE_IMG
- en: Figure 6.91 – Services | SLA – Zabbix SLA setup
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add** at the bottom of the window to save this SLA.
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go to **Service** | **Service** and select **Edit** using the slider in
    the top-right corner.
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click **Create service** in the top-right corner to add a new service.
    Here, we will add a new service for our Zabbix setup:'
  id: totrans-531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.92 – Service | Service – Zabbix s\uFEFFetup service](img/B19803_06_092.jpg)"
  id: totrans-532
  prefs: []
  type: TYPE_IMG
- en: Figure 6.92 – Service | Service – Zabbix setup service
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, make sure to add the following:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.93 – Service | Service – Zabbix setup service – the Tags tab](img/B19803_06_093.jpg)'
  id: totrans-535
  prefs: []
  type: TYPE_IMG
- en: Figure 6.93 – Service | Service – Zabbix setup service – the Tags tab
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the blue **Add** button at the bottom of the window to add this new
    service. Then, click **Create service** in the top-right corner again to add the
    following:'
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.94 – Service | Service – Zabbix server service](img/B19803_06_094.jpg)'
  id: totrans-538
  prefs: []
  type: TYPE_IMG
- en: Figure 6.94 – Service | Service – Zabbix server service
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, make sure to add the following:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.95 – Service | Service – Zabbix server service – the Tags tab](img/B19803_06_095.jpg)'
  id: totrans-541
  prefs: []
  type: TYPE_IMG
- en: Figure 6.95 – Service | Service – Zabbix server service – the Tags tab
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the blue **Add** button again and then **Create service** in the top-right
    corner. Add another service at the same level, as follows:'
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.96 – Service | Service – Zabbix database service](img/B19803_06_096.jpg)'
  id: totrans-544
  prefs: []
  type: TYPE_IMG
- en: Figure 6.96 – Service | Service – Zabbix database service
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, make sure to add the following:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.97 – Service | Service – Zabbix database service – the Tags tab](img/B19803_06_097.jpg)'
  id: totrans-547
  prefs: []
  type: TYPE_IMG
- en: Figure 6.97 – Service | Service – Zabbix database service – the Tags tab
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add** again to add this service.
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we’ll add the last child of the Zabbix setup by clicking the **Create
    service** button again:'
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.98 – Service | Service – Zabbix frontend service](img/B19803_06_098.jpg)'
  id: totrans-551
  prefs: []
  type: TYPE_IMG
- en: Figure 6.98 – Service | Service – Zabbix frontend service
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Advanced configuration** and click **Add** under **New additional
    rule**. We will add the following calculation here:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.99 – Service | Service – Zabbix frontend service, additional rules](img/B19803_06_099.jpg)'
  id: totrans-554
  prefs: []
  type: TYPE_IMG
- en: Figure 6.99 – Service | Service – Zabbix frontend service, additional rules
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, make sure to add the following:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.100 – Service | Service – Zabbix database service – the Tags tab](img/B19803_06_100.jpg)'
  id: totrans-557
  prefs: []
  type: TYPE_IMG
- en: Figure 6.100 – Service | Service – Zabbix database service – the Tags tab
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: Finish setting up this service by clicking the **Add** button at the bottom
    of the window.
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we’ll have to add two more services, but this time under the Zabbix frontend.
    Click on **Zabbix frontend** and then **Create service** again and add the following:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.101 – Service | Service – Zabbix frontend, ICMP status child servi\uFEFF\
    ce](img/B19803_06_101.jpg)"
  id: totrans-561
  prefs: []
  type: TYPE_IMG
- en: Figure 6.101 – Service | Service – Zabbix frontend, ICMP status child service
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button and then **Create service** again to add the last
    service.
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the final service:'
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.102 – Service | Service – Zabbix frontend, Zabbix agent status child
    service](img/B19803_06_102.jpg)'
  id: totrans-565
  prefs: []
  type: TYPE_IMG
- en: Figure 6.102 – Service | Service – Zabbix frontend, Zabbix agent status child
    service
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to add this service. Let’s see if it works as
    expected.
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-568
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s take a look at what we have set up in our current configuration. We’ve
    used business service monitoring to monitor part of our Zabbix stack. Look at
    business service monitoring as a tree, where we just created two levels. Our initial
    level is the Zabbix setup, which consists of our Zabbix server, Zabbix database,
    and Zabbix frontend.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: 'Beneath the Zabbix frontend level, we have one more level where we have defined
    two more services that represent the status of ICMP and the Zabbix agent. We only
    want to calculate the SLA if both the ICMP and Zabbix agent are in a problem state:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.103 – Business service monitoring tree structure example](img/B19803_06_103.jpg)'
  id: totrans-571
  prefs: []
  type: TYPE_IMG
- en: Figure 6.103 – Business service monitoring tree structure example
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have a distinct tree structure forming once we start to visualize
    this. The part where the magic happens in this case is the Zabbix frontend service
    because this is where we defined what should happen to our SLA once something
    goes wrong with services.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take another look at that level:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.104 – Zabbix frontend service completed](img/B19803_06_104.jpg)'
  id: totrans-575
  prefs: []
  type: TYPE_IMG
- en: Figure 6.104 – Zabbix frontend service completed
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we defined that the service should always **Set status to OK**, it
    will only use what we defined in our **Additional rules** section. This is where
    we specified that we only want to affect our SLA calculation: **If at least 2
    child services have High status or above**. Effectively, this means that our SLA
    is only going down if the Zabbix agent can’t be reached and ICMP is down.'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: We’ve built in a security measure for ourselves here, making sure that if someone
    stops the Zabbix agent but the server can still be reached by ICMP, the SLA won’t
    be affected.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s take a look at the result, which we can use to monitor these SLAs.
    Over at **Services** | **SLA report**, we can find all we need to know about whether
    our SLA is being met. We can set the filter to the period for which we want to
    find the SLA. We’ll see the following output:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.105 – Service | SLA report, all services with our SLA:24x7 tag](img/B19803_06_105.jpg)'
  id: totrans-580
  prefs: []
  type: TYPE_IMG
- en: Figure 6.105 – Service | SLA report, all services with our SLA:24x7 tag
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see our monthly 24/7 SLA, where a SLA of 99.9% is expected. For
    our Zabbix setup back in October 2021, the SLA was 100, so we met our required
    SLA. However, in November 2021, we noticed that the SLA dropped below 100, clearly
    indicating in red that our SLA was not met.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: 'Drilling down even further and selecting our specific service Zabbix setup,
    we can create a more detailed overview:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.106 – Service | SLA report, Zabbix setup services with our SLA:24x7
    tag](img/B19803_06_106.jpg)'
  id: totrans-584
  prefs: []
  type: TYPE_IMG
- en: Figure 6.106 – Service | SLA report, Zabbix setup services with our SLA:24x7
    tag
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see all the details regarding the uptime and downtime of our service
    and what our leftover error budget is like.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: Using business service monitoring calculations like this, we can narrow down
    where weak points in our services might be while attaching useful statistics to
    that measure. In this case, we used a simple example with ICMP and the Zabbix
    agent trigger, but the possibilities are endless when using services in combination
    with tags.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main concerns with the old way of monitoring services through business
    service monitoring was the inability to automate and customize it. This automation
    has been mostly resolved through the use of tags as we can now define tags at
    the host, template, or trigger level to define what’s used in the business service
    monitoring configuration.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of customization, Zabbix has given us a lot more options to do calculations:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.107 – Zabbix service, additional rule options](img/B19803_06_107.jpg)'
  id: totrans-591
  prefs: []
  type: TYPE_IMG
- en: Figure 6.107 – Zabbix service, additional rule options
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the numerous options here, we can see that we have a lot more to
    play around with. Not only can we specify the exact number of child services we’d
    like to use in our calculations, but we can also work with weights and percentages,
    giving us the options we might need to build more complex setups.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
