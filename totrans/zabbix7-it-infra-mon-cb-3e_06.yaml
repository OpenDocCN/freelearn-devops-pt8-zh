- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualizing Data, Inventory, and Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with Zabbix, collected data must be put to good use. After all,
    the data is of no use if we don’t have a place to easily access it. Zabbix already
    puts our data to good use with the **Latest data** page and with problems created
    from triggers, but we can also put our data to good use by building some stuff
    ourselves, such as graphs, maps, an inventory, and completely custom dashboards.
    We can even create reports from the dashboards and use built-in reports in the
    frontend.
  prefs: []
  type: TYPE_NORMAL
- en: After working through these recipes, you’ll be able to set up the most important
    parts of Zabbix data visualization. You’ll also be able to make good use of your
    inventory and reporting systems to get the most out of their useful features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following recipes to show you how to achieve
    good results:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating graphs to access visual data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating maps to keep an eye on infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dashboards to get the right overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Templating dashboards to work at the host level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Zabbix inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Zabbix Geomap widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working through Zabbix reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up scheduled PDF reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up improved business service monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, we will need our Zabbix server, our **Simple Network Management****Protocol**
    (**SNMP**)-monitored host from [*Chapter 5*](B19803_05.xhtml#_idTextAnchor809),
    *Building Your Own Structured Templates*. We’ll be doing most of our work in the
    frontend of Zabbix, so have your mouse at the ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found in this book’s GitHub repository:
    [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating graphs to access visual data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Graphs in Zabbix are a powerful tool to show what’s going on with your collected
    data. You might have already created some ad hoc graphs by using the **Latest
    data** page, but we can also create o predefined graphs. In this recipe, we will
    go over doing just that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure to get your Zabbix server ready, along with a Linux host that we can
    monitor (with SNMP). If you followed the recipes in [*Chapter 5*](B19803_05.xhtml#_idTextAnchor809),
    *Building Your Own Structured Templates*, you should already have a template.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can download the templates available at [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using the downloaded templates, download and import **Custom Linux
    uptime by SNMP** first, then **Custom Linux by SNMP**. You can import a template
    by going to **Data collection** | **Templates** and clicking the blue **Import**
    button in the top-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you put the template on a host and monitor it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by navigating to our templates by going to **Data collection** |
    **Templates** and selecting the template. For me, it is still called **Custom
    Linux** **by SNMP**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Items** and create the following item on the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.1 – ICMP item creation page](img/B19803_06_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – ICMP item creation page
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you go to the **Tags** tab and add a tag, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2 – ICMP item creation page – the Tags tab](img/B19803_06_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – ICMP item creation page – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to save this item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, back at the template configuration page, go to **Graphs**. This is where
    we can see all of our configured graphs for this template; at the moment, there
    are none.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Create graph** in the top-right corner. This will take you to the graph
    creation page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Graph creation page](img/B19803_06_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Graph creation page
  prefs: []
  type: TYPE_NORMAL
- en: This is where we can create graphs for standalone items. Let’s create a graph
    to see our uptime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the graph creation page with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Graph creation page filled with our information](img/B19803_06_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Graph creation page filled with our information
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with graphs, it’s a good idea to keep colorblind people in mind.
    Worldwide, about 8% of all males and 0.5% of all females are affected by this
    condition. There are great sources online that explain which colors to use for
    your production environment. You can find one such source here: [https://www.tableau.com/about/blog/2016/4/examining-data-viz-rules-dont-use-red-green-together-53463](https://www.tableau.com/about/blog/2016/4/examining-data-viz-rules-dont-use-red-green-together-53463).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, ping your SNMP-monitored host for a while. Do this from your Zabbix server
    **command-line** **interface** (**CLI**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Afterward, navigate to **Monitoring** | **Hosts** and click the **Graphs** button
    next to your host. In my case, the host is still called **lar-book-templated_snmp**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will immediately take us to an overview of graphs for this host, where
    we can see our new **Incoming ICMP** **messages** graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 –Monitoring | Hosts graph page with our graph](img/B19803_06_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 –Monitoring | Hosts graph page with our graph
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also make graphs for discovery items; this is called a graph prototype.
    They work in about the same way as our item prototypes. Let’s create one of these
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Data collection** | **Templates** and select our **Custom Linux
    by** **SNMP** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Discovery rules**. Then, for the **Discover Network Interfaces** discovery
    rule, click on **Item prototypes**. In the top-right corner, click **Create item
    prototype** and create the following item prototype:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Item prototype – the Incoming bits page filled with our information](img/B19803_06_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Item prototype – the Incoming bits page filled with our information
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add a tag on the **Tags** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Item prototype Incoming bits – the Tags tab](img/B19803_06_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Item prototype Incoming bits – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, make sure you add the following on the **Preprocessing** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Item prototype – the Incoming bits Preprocessing tab filled
    with our information](img/B19803_06_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Item prototype – the Incoming bits Preprocessing tab filled with
    our information
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Preprocessing is quite an extensive topic. In short, the preprocessing in this
    step will ensure that our data is calculated at a change per second, with the
    mathematical formula *(value - prev_value)/(time - prev_time)*, and that our data
    is multiplied by 8 so that it’s changed from bytes to bits.
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to finish creating this item prototype.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, back at our **Discover Network interfaces** discovery rule, click the **Graph**
    **prototypes** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-right corner, click **Create graph prototype** and fill in the next
    page with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Graph prototype – the Incoming bits page filled with our information](img/B19803_06_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Graph prototype – the Incoming bits page filled with our information
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we go back to **Monitoring** | **Hosts** and click the **Graphs** button,
    we’ll see two new graphs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Graphs page for our host](img/B19803_06_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Graphs page for our host
  prefs: []
  type: TYPE_NORMAL
- en: It might take some time for the graph to fill with data since we’ve only just
    added the item. Give it some time and you will start to see them fill up.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Graphs work by putting your collected values in a visual form. We collect our
    data from our host – through SNMP, for example – and we put that data in our database.
    Our graphs, in turn, collect this data from the database and put it in this visual
    form. For humans, this is a lot better to read, and we can interpret the data
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: The graph prototype works in almost the same way as our item prototype. For
    every discovered interface, we create a graph using a name containing the `{#IFNAME}`
    **low-level discovery** (**LLD**) macro. This way, we get a versatile structured
    environment because when a new interface is created (or deleted), a new graph
    is also created (or deleted).
  prefs: []
  type: TYPE_NORMAL
- en: Creating maps to keep an eye on infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maps in Zabbix are a great way to get an overview of infrastructure. For instance,
    they’re amazing for following traffic flows or seeing where something is going
    off in your environment. They’re not only super-useful for network overviews but
    also for server management overviews, and even for a lot of cool customization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maps are super useful, and we use them a lot in environments we build. Since
    we love maps so much, we’ve also taken the liberty of opening a feature request
    suggesting some collected map improvements to make them even better: [https://support.zabbix.com/browse/ZBXNEXT-7680](https://support.zabbix.com/browse/ZBXNEXT-7680).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need our Zabbix server, our SNMP-monitored host, and the templates from
    the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start this recipe off by navigating to **Data collection** | **Templates**
    and selecting our **Custom Linux by** **SNMP** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Discovery rules** and then **Item prototypes**. Create the following
    item prototype by filling in the fields on the **Item prototype** creation page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.11 – Item prototype creation page\uFEFF](img/B19803_06_011.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Item prototype creation page
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also need to go to **Tags** to add a new tag, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Item prototype creation page – the Tags tab](img/B19803_06_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Item prototype creation page – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, don’t forget to add preprocessing by going to the **Preprocessing**
    tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Item prototype – the Preprocessing tab](img/B19803_06_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Item prototype – the Preprocessing tab
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Add** button to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, navigate to **Monitoring** | **Maps**. There’s already a default map
    here that’s included in all Zabbix server installs called **Local network**. Feel
    free to check it out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.14 – The default local network map](img/B19803_06_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – The default local network map
  prefs: []
  type: TYPE_NORMAL
- en: There’s not much to see here besides your local Zabbix server host and whether
    it is in a problem state or not. So, let’s click on **All maps**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We’re going to create our own map, so click the **Create map** button in the
    top-right corner. Create the map by filling in the following fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Map creation page](img/B19803_06_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Map creation page
  prefs: []
  type: TYPE_NORMAL
- en: After clicking the blue **Add** button, the frontend will take you back to the
    **Map** overview page. Click the newly created **Templated SNMP host** **map**
    here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Edit map** in the top-right corner to start editing the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, what we want to do here is select the **Add** button next to **Map element**,
    which is in the horizontal menu at the top of the map. This will add the following
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.16 – The added element](img/B19803_06_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – The added element
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the newly added element. This will open the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.17 – The  Map element edit win\uFEFFdow](img/B19803_06_017.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – The Map element edit window
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can fill out our host information. Let’s add the following information
    to the fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.18 – Map element – lar-book-templated_snmp](img/B19803_06_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – Map element – lar-book-templated_snmp
  prefs: []
  type: TYPE_NORMAL
- en: Click `400` and `100` (see *Figure 6**.20*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add another element by clicking the **Add** button next to **Map element**.
    Edit the new element and add the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Map element vSwitch edit window filled with information](img/B19803_06_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.19 – Map element vSwitch edit window filled with information
  prefs: []
  type: TYPE_NORMAL
- en: After creating both elements, move the new switch element to `150` and `80`,
    as seen in *Figure 6**.20*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, select both elements by holding the *Ctrl* key (*command* on Mac) on your
    keyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, click **Add** next to **Link** to add a link between the two elements.
    It should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.20 – Our newly created map](img/6.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.20 – Our newly created map
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the information for our server again after creating the link by clicking
    on our icon. Click on **Edit** next to the newly created link, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.21 – The Edit link in the Map element edit window\uFEFF](img/B19803_06_021.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.21 – The Edit link in the Map element edit window
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following information to the window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.22 – Editing the link in the Map element edit window with our information](img/B19803_06_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.22 – Editing the link in the Map element edit window with our information
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the hostname (in this example, **lar-book-templated_snmp**) is an
    exact match with the hostname in your Zabbix system. We’re requesting data specifically
    from that host. We cannot omit the hostname or use macros such as **{HOST.HOST}**
    here since the link belongs to two hosts and Zabbix won’t understand the context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also click **Add** in the **Link indicators** section and add the following
    trigger with the color red:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.23 – Link indicator filled with a trigger](img/B19803_06_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.23 – Link indicator filled with a trigger
  prefs: []
  type: TYPE_NORMAL
- en: Now, click **Apply** at the bottom of the window and then **Update** in the
    top-right corner of the page. That’s our first map created!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After creating and opening our map, we’ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.24 – Our newly created map](img/B19803_06_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.24 – Our newly created map
  prefs: []
  type: TYPE_NORMAL
- en: The map shows our switch (which is not a monitored host at the moment) and our
    server (which is a monitored host). This means that when something is wrong with
    our server, the **OK** status will turn into a **PROBLEM** status on the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see our configured label (see *Figure 6**.24)*, which shows us
    real-time information on traffic statistics. Now, when we break down the label,
    we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.25 – Map label breakdown](img/B19803_06_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.25 – Map label breakdown
  prefs: []
  type: TYPE_NORMAL
- en: We can pull real-time statistics into a label by defining which statistics we
    want to pull into the label between `{}`. In this case, we collect our values
    for interface traffic and put them directly in the label, creating a real-time
    traffic analysis map.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also put a trigger on this link. The cool thing about putting triggers such
    as this on our map is that when our link goes down, we can see the following happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.26 – Map showing problems](img/B19803_06_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.26 – Map showing problems
  prefs: []
  type: TYPE_NORMAL
- en: Traffic has stopped flowing because the link is now down, and our line has turned
    red. Also, our host is now showing a **PROBLEM** state under the hostname.
  prefs: []
  type: TYPE_NORMAL
- en: We can even create orange lines with triggers that state 50% traffic utilization
    like this and trace **Distributed Denial-of-Service** (**DDoS**) traffic through
    our network.
  prefs: []
  type: TYPE_NORMAL
- en: Creating dashboards to get the right overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve created some graphs and a map, let’s continue by not only visualizing
    our data but also getting the visualization in an overview. In this recipe, we’re
    going to create a dashboard for our Linux-monitored hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you followed the previous two recipes and that you have your Zabbix
    server ready. We’ll be using our SNMP-monitored host from the previous recipe,
    as well as some items, triggers, and a map we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to substitute any items you might not have with anything else from
    your environment. With dashboards, the most important thing is to play around
    with data, something you can do once you understand the concept of a widget.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the sidebar, navigate to **Dashboards** and click **All dashboards** in
    the left corner of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click the **Create dashboard** button in the top-right corner and fill
    in your dashboard’s name, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.27 – The Dashboard properties area](img/B19803_06_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.27 – The Dashboard properties area
  prefs: []
  type: TYPE_NORMAL
- en: '**Start slideshow automatically** is enabled here, but it’s only useful if
    you want to use this dashboard in a slideshow, such as on a big screen (TV) in
    a **Network Operating Center** (**NOC**) room. I always disable it for dashboards
    that are used on personal computers so that my pages don’t jump around while troubleshooting.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve also opened a case to ask Zabbix to change the default behavior: [https://support.zabbix.com/browse/ZBXNEXT-7713](https://support.zabbix.com/browse/ZBXNEXT-7713).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Keeping Zabbix elements such as maps and dashboards that are meant to be used
    by entire departments owned by the Zabbix **Admin** user is a good idea. This
    way, they aren’t dependent on a single user who might leave your environment at
    a later stage, which means we have to change the map owner once we want to delete
    their account. The elements can be owned by a disabled user as well. If you’re
    not a super admin, don’t forget to share the dashboard with yourself before changing
    the owner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click **Apply**; you’ll be taken to your dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.28 – New empty dashboard](img/B19803_06_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.28 – New empty dashboard
  prefs: []
  type: TYPE_NORMAL
- en: After creating our dashboard, we will see that it is empty. We need to fill
    it with several widgets to create a good overview.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by adding a problem widget. Click **+ Add** in the top-right corner.
    Add the following widget by filling out all the fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.29 – New problem widget creation window](img/B19803_06_029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.29 – New problem widget creation window
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Add**. By doing this, we’ll have our first widget on our dashboard,
    displaying all **Unacknowledged problems**. It will only show them for the **Severity**
    warning and higher on all Linux servers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.30 – The Unacknowledged problems widget](img/B19803_06_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.30 – The Unacknowledged problems widget
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s immediately add some more widgets, starting with our **Map** widget.
    Click **+ Add** in the top-right corner and add the following widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.31 – The Add widget page](img/B19803_06_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.31 – The Add widget page
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, add a **Graph** type widget by clicking **+ Add** in the top-right corner
    again. This one is a bit more difficult. Let’s add our name first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.32 – New graph widget creation window\uFEFF](img/B19803_06_032.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.32 – New graph widget creation window
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we need to add our first **Data set**, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.33 – Adding a dataset](img/B19803_06_033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.33 – Adding a dataset
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add a second one by clicking **+ Add new data set** and adding the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.34 – Adding another dataset](img/B19803_06_034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.34 – Adding another dataset
  prefs: []
  type: TYPE_NORMAL
- en: We can then click **Add**, and our graph will be added to our dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s also add the **Item value** widget to the page. Click on **+ Add** again.
    Then, set up the following widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.35 – Adding the Item value widget](img/B19803_06_035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.35 – Adding the Item value widget
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in changing exactly how this widget looks, be sure to use
    the **Advanced configuration** fields in this widget configuration screen.
  prefs: []
  type: TYPE_NORMAL
- en: Another widget we love is the very useful new **Top hosts** widget. Let’s add
    it by using the **+ Add** button again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the widget configuration screen, set **Host groups** to **Linux servers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, click on the **Add** button next to **Columns** to add a column with
    information. Fill out the form like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.36 – Top hosts widget 1, column 1](img/B19803_06_036.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.36 – Top hosts widget 1, column 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add** button next to **Columns** again and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.37 – Top hosts widget 1, co\uFEFFlumn 2](img/B19803_06_037.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.37 – Top hosts widget 1, column 2
  prefs: []
  type: TYPE_NORMAL
- en: 'The result should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.38 – Top hosts widget 1](img/B19803_06_038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.38 – Top hosts widget 1
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to click the blue **Add** button at the bottom of the form to save
    your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create one more **Top hosts** widget by using the **+ Add** button again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set **Host groups** to **Linux servers** again. Then, click on the **Add**
    button next to **Columns** again. Add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.39 – Top hosts widget 2, column \uFEFF1](img/B19803_06_039.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.39 – Top hosts widget 2, column 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add** button next to **Columns** again and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.40 – Top hosts widget 2, c\uFEFFolumn 2](img/B19803_06_040.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.40 – Top hosts widget 2, column 2
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.41 – Top hosts widget 2](img/B19803_06_041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.41 – Top hosts widget 2
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can freely move around the widgets until we see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.42 – Our dashboard filled with information](img/B19803_06_042.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.42 – Our dashboard filled with information
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add another page. Click on the drop-down arrow next to **+ Add**
    and click **Add page**. This will open the following popup, where we will add
    a new page called **Host data**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.43 – Adding a new Host data page](img/B19803_06_043.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.43 – Adding a new Host data page
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Apply** to add the new page. We can now immediately start adding
    additional widgets on the first page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s click on **+ Add** again to add a new widget and select the widget called
    **Gauge** first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s select an item from the default **Zabbix server** host. Click **Select**
    next to the **Item** field and search your host groups for the **Zabbix server**
    host. From the list, select the **Available memory in %** item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure the form looks like as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.44 – Dashboard Gauge widget creation form](img/B19803_06_044.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.44 – Dashboard Gauge widget creation form
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add** button at the bottom of this window to save the changes
    and add this widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s add our last widget by clicking **+ Add** again. We’ll add a new
    widget called **Pie chart**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set **Name** to **CPU timings**. For **host pattern**, set **Zabbix server**,
    and for **item pattern**, set **CPU * time**. It should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.45 – Dashboard Pie chart widget creation form](img/B19803_06_045.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.45 – Dashboard Pie chart widget creation form
  prefs: []
  type: TYPE_NORMAL
- en: On the **Legend** tab, set **Number of rows** to **3**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Add** button at the bottom of the page to save the changes
    and add the widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your new page should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.46 – Zabbix global dashboard second page](img/B19803_06_046.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.46 – Zabbix global dashboard second page
  prefs: []
  type: TYPE_NORMAL
- en: I don’t like the name of our first page, so let’s click on **Page 1** and then
    on the three dots next to **Page 1**. It should open a dropdown, where we can
    select **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, give your page a new name. I will name it **Overview**. I always rename
    the first page to keep things organized and not have any default non-descriptive
    names in my dashboard (or anywhere for that matter). It should now show us two
    pages with different names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.47 – Zabbix Linux servers global dashboard page names](img/B19803_06_047.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.47 – Zabbix Linux servers global dashboard page names
  prefs: []
  type: TYPE_NORMAL
- en: Click **Save changes** in the top-right corner and you’re done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating dashboards is the best way to create overviews for quick access to
    data during troubleshooting, day-to-day problem monitoring, and – of course –
    for use with big TV walls. We’ve probably all seen the big operation centers with
    TVs displaying data. Zabbix is great for all these purposes and more, as you saw
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Zabbix has added a lot of new widgets in 7.0 as a big focus for them has been
    visualization. New widgets will be added in even newer versions of Zabbix as well,
    so keep your eye on the roadmap if you’re still missing something: https://www.zabbix.com/roadmap.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We also haven’t talked about every single new widget yet, so check out the
    *what’s new* page here: [https://www.zabbix.com/whats_new_7_0](https://www.zabbix.com/whats_new_7_0).'
  prefs: []
  type: TYPE_NORMAL
- en: Templating dashboards to work at the host level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Zabbix removed the screens functionality and replaced it with dashboards
    completely, a lot of people in the Zabbix community got very excited about using
    the newer widgets on their host-level dashboards. Unfortunately, development time
    is limited and at the time of writing, the feature is limited to only six widgets.
  prefs: []
  type: TYPE_NORMAL
- en: In Zabbix 7.0, this all changes. All the widgets available on your global dashboards
    are now available on host-level dashboards, making the whole feature incredibly
    useful.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you followed the first two recipes in this chapter and that you have
    your Zabbix server ready. We’ll be using our SNMP-monitored host from the first
    two recipes, as well as our item, triggers, and map.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, anyone can create host-level dashboards, so long as they have
    some data available on a host that has a template assigned. As such, feel free
    to apply your own datasets instead.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start building some templated dashboards:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Data collection** | **Templates** and edit the **Custom Linux
    by SNMP** template by clicking on **Dashboards** next to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the top-right corner, click on **Create dashboard** to start creating
    your first templated host-level dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will call this dashboard **Host overview** as it will contain several different
    statistics about our host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.48 – Host dashboard creation](img/B19803_06_048.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.48 – Host dashboard creation
  prefs: []
  type: TYPE_NORMAL
- en: '**Start slideshow automatically** is enabled here, but this is only useful
    if you want to use this dashboard in a slideshow, such as on a big screen (TV)
    in a NOC room. I always disable it for dashboards used on personal computers so
    that my pages don’t jump around while troubleshooting.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Apply** to add this new dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the dashboard has been created, we can start adding some widgets. Add
    your first widget by clicking on **+ Add** in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s start with a simple **Item value** widget. Add the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.49 – Host dashboard, Item value widget](img/B19803_06_049.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.49 – Host dashboard, Item value widget
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you apply your changes and add the widget by clicking **+** **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next up, we’ll add a graph widget. Click **+ Add** to create another widget
    and add the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.50 – Host dashboard, Graph widget](img/B19803_06_050.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.50 – Host dashboard, Graph widget
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on the widget creation form, we’ll also create a dataset. In this case,
    we can keep it simple by just adding a single-item dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.51 – Host dashboard, Graph widget dataset](img/B19803_06_051.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.51 – Host dashboard, Graph widget dataset
  prefs: []
  type: TYPE_NORMAL
- en: Click `*`) to grab multiple items in a single-item pattern.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s also create a problem overview of the host here. Add the **Problems**
    widget, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.52 – Host dashboard, Problems widget](img/B19803_06_052.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.52 – Host dashboard, Problems widget
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add** to save your changes and add the widget to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, make sure you arrange these widgets so that they form a proper dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.53 – Host dashboard, completed and arranged](img/B19803_06_053.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.53 – Host dashboard, completed and arranged
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you might be wondering why this dashboard is empty. Templates
    do not contain data, meaning we have to navigate to a host to look at the actual
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Monitoring** | **Hosts** and go to the **lar-book-templated_snmp**
    host. Click **Dashboards** next to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.54 – Host dashboard for host lar-book-templated_snmp](img/B19803_06_054.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.54 – Host dashboard for host lar-book-templated_snmp
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the dashboard now contains data about our specific host.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Host-level dashboards are super useful since they completely rely on templates.
    We have to set them up at the template level; when we do, all of the hosts that
    are using that template will have the same dashboard with unique information shown
    in the widgets. This makes it possible for us to create hundreds or even thousands
    of dashboards by simply setting it up at the template level.
  prefs: []
  type: TYPE_NORMAL
- en: However, we have to keep in mind that host-level dashboards are different than
    the global dashboards we set up in the previous recipe. Not only do we access
    them differently, but they also operate at the host level. This means that they
    are mainly used to show information about a single host.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Zabbix 7.0, we can add all of the widgets we have available on the global
    dashboard level, making host-level dashboards very useful. If we have several
    templates with one or even multiple dashboards, we can also use the pages at the
    top to easily navigate several dashboards:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.55 – Host dashboard selector for the Zabb\uFEFF\uFEFFix server host](img/B19803_06_055.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.55 – Host dashboard selector for the Zabbix server host
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Zabbix inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zabbix inventory is a feature I love, but it hasn’t had a lot of love from the
    Zabbix development team lately, even though it was on the roadmap for 7.0\. Sorry
    – I still love you Zabbix developers, but if you’re reading this, feel free to
    put some time into the feature!
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, I’m talking about this old gem of a feature request: [https://support.zabbix.com/browse/ZBXNEXT-336](https://support.zabbix.com/browse/ZBXNEXT-336).'
  prefs: []
  type: TYPE_NORMAL
- en: The inventory feature makes it possible for us to automatically put collected
    data in a visual **configuration management database** (**CMDB**) such as inventory
    in the Zabbix frontend. I think we’ve all seen CMDB inventory systems not be updated
    and thus missing out on data we need once we look into the system. Zabbix inventory
    fixes this by getting the data from the monitored systems. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that you log in to the Zabbix frontend and keep your SNMP-monitored
    host from the previous recipes ready.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by making sure our Zabbix server puts all of our hosts’ inventory
    information into the fields. I like to do this by going to **Administration**
    | **General** and then selecting **Other** from the dropdown in the top-left corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can then set our **Default host inventory mode** parameter to **Automatic**.
    Don’t forget to click **Update**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.56 – Administration | General | Other configuration parameters](img/B19803_06_056.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.56 – Administration | General | Other configuration parameters
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can do this at the host level. Go to **Configuration** | **Hosts**
    and select our **lar-book-templated_snmp** SNMP-monitored host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Inventory** and set it to **Automatic** here as well. As you may have
    noticed, the default only applies to newly created hosts from now on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Changing the global setting does not apply it to all existing hosts, only to
    newly created hosts. It might be a good idea to run a **Mass update** operation
    for all the hosts or change the inventory mode manually, host by host.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s go to **Data collection** | **Templates** and select **Custom Linux**
    **by SNMP**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Items** and edit **System hostname**. We have to change the **Populates
    host inventory field** setting, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.57 – Edit item page](img/B19803_06_057.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.57 – Edit item page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Update** and navigate to **Inventory** | **Hosts**. You will see the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.58 – Inve\uFEFF\uFEFFntory | Hosts](img/B19803_06_058.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.58 – Inventory | Hosts
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zabbix inventory is simple but underdeveloped at the moment. It’s not amazing
    to filter to a point where it shows exactly what we want to see, but it can be
    very useful nonetheless.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re working with a lot of equipment, such as in an MSP environment, it
    can become overwhelming to log in to every device and get the serial number by
    hand. If you poll the serial number and populate the **inventory** field, you
    suddenly have an active list of up-to-date serial numbers.
  prefs: []
  type: TYPE_NORMAL
- en: The same works with anything from hardware information to software versions.
    We could get the active operating system versions from devices and generate an
    extensive list of all our operating system versions, which is very useful if you
    ever have to patch something, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Use Zabbix inventory wisely when creating items, and set the population to **Automatic**,
    as we did in this chapter – you’ll never have to think too much about the feature.
    You configure it almost automatically this way and have nice lists waiting for
    you when you need them.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Zabbix Geomap widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve seen how to create dashboards, let’s set up another dashboard.
    We’ll use this one to create a full-fledged geographical overview of some of our
    hosts in Zabbix. We’ll do this by using the Zabbix inventory functionality we
    have just learned how to use.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All we need for this recipe is our Zabbix setup with access to the frontend.
    It is also smart to follow the previous two recipes about dashboards and inventory.
    If you haven’t followed those yet, it is recommended that you follow them first.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the Zabbix Geomap functionality is quite easy – we simply need to use
    our Zabbix inventory on our hosts in combination with a dashboard widget:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s navigate to our **Data collection** | **Hosts** page and edit one
    of our hosts. I’ll be using the **lar-book-templated_snmp** host, but it doesn’t
    matter which host you use, so long as it is in the **Linux servers** host group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Inventory** tab and make sure that it is set to **Manual** or **Automatic**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.59 – Inventory mode selector on the Zabbix host Inventory tab](img/B19803_06_059.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.59 – Inventory mode selector on the Zabbix host Inventory tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the **Location latitude** and **Location longitude** fields, fill in
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.60 – Inventory tab fields on a Zabbix\uFEFF host](img/B19803_06_060.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.60 – Inventory tab fields on a Zabbix host
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button to save these changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back at **Data collection** | **Hosts**, let’s do the same thing for another
    host. I’ll use **lar-book-agent_simple**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Inventory** tab and fill in the **Location latitude** and **Location
    longitude** fields again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.61 – Inventory tab fields on another Zabbix host](img/B19803_06_061.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.61 – Inventory tab fields on another Zabbix host
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button to save these changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s go to **Dashboards** and, at **All dashboards**, create a new dashboard
    or use our existing **Linux servers** dashboard. This is what I’ll do.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Edit dashboard** button in the top-right corner and use
    the **Add** button dropdown to click on **Add page**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.62 – Existing dashboard Add page but\uFEFFton](img/B19803_06_062.JPG)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.62 – Existing dashboard Add page button
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll add the following new page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.63 – Dashboard page properties](img/B19803_06_063.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.63 – Dashboard page properties
  prefs: []
  type: TYPE_NORMAL
- en: Click **Apply** to add this new page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now add our **Geomap** widget simply by clicking anywhere on the page.
    Fill it in as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.64 – Zabbix Geomap widget properties](img/B19803_06_064.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.64 – Zabbix Geomap widget properties
  prefs: []
  type: TYPE_NORMAL
- en: Click **Apply** to save the widget configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now click on the blue **Save changes** button in the top-right corner
    to save our dashboard changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will take us back to our dashboard, where we can click the **Geomap**
    page of this dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.65 – Zabbix Geomap widget on a dashboard with two hosts](img/B19803_06_065.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.65 – Zabbix Geomap widget on a dashboard with two hosts
  prefs: []
  type: TYPE_NORMAL
- en: We now have a functioning Geomap in our Zabbix dashboard that uses the latitude
    and longitude that are available in our Zabbix inventory.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of creating an entirely new **Monitoring** | **Geomap** page, Zabbix
    has chosen to include this new feature via a widget, giving us the option to create
    even more advanced dashboards. It’s important to note here that Zabbix also chose
    to use existing inventory data. Because it is possible to automatically fill in
    inventory data, as we saw in the *Setting up Zabbix inventory* recipe, we can
    also automate our Geomap widget content.
  prefs: []
  type: TYPE_NORMAL
- en: So, whether you go the manual route or the automatic route, the Geomap widget
    is a valuable extension of our dashboard. In general, Zabbix is extending the
    dashboard functionality quite a bit by including a bunch of new widgets in Zabbix
    7.
  prefs: []
  type: TYPE_NORMAL
- en: We will set up our Zabbix automatic reporting in this chapter, which will also
    use the dashboard functionality. f you’d like, you can combine a Geomap widget
    with your automatic report to send out a geographical report. The key takeaway
    here is that Zabbix is building interoperability between components and giving
    us flexibility in the way we want to use a new widget like this.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with the initial release of the Geomap widget, some people asked
    us if it was possible to change the kind of map that’s used by the Geomap widget.
    If we navigate to **Administration** | **General** | **Geographical maps**, we
    can choose several built-in map providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.66 – Administration | General | Geographical maps](img/B19803_06_066.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.66 – Administration | General | Geographical maps
  prefs: []
  type: TYPE_NORMAL
- en: 'If that isn’t enough, it is also possible to add a custom map provider using
    the **Other** option under **Tile provider**. Simply fill in the form and you’re
    all set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.67 – Administration | General | Geographical maps – Other](img/B19803_06_067.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.67 – Administration | General | Geographical maps – Other
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, a lot of possibilities have been added through this single widget.
    One of the most requested features from the Zabbix community, we can now set it
    up and use it in the latest Zabbix releases.
  prefs: []
  type: TYPE_NORMAL
- en: Working through Zabbix reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zabbix reporting got some well-deserved love from Zabbix development, especially
    concerning getting reports out of the system and improving the audit log. First,
    let’s take a look at some powerful features to show you exactly what’s going on
    with your statistics right from the Zabbix frontend. Then, in the next recipe,
    we’ll take a look at how to create automatic PDF reports, a new and much-anticipated
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, all you’ll need is the Zabbix frontend and a monitored host.
    I’ll be using the SNMP-monitored host from the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There isn’t anything to configure really as reporting is present in Zabbix from
    the start. So, let’s dive into what each page of reporting offers us.
  prefs: []
  type: TYPE_NORMAL
- en: System information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you navigate to **Reports** | **System information**, you will find the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.68 – Reports | System information](img/B19803_06_068.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.68 – Reports | System information
  prefs: []
  type: TYPE_NORMAL
- en: 'You might have seen this table before as it can also be configured as a dashboard
    widget. This page gives us all of the information we need about our Zabbix server,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Zabbix server is running**: This informs us whether the Zabbix server backend
    is running and where it is running. In this case, it’s running, and it’s running
    on **localhost:10051**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zabbix server version**: The version of the Zabbix server daemon installed
    on our instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zabbix frontend version**: The version of the Zabbix frontend currently running
    on our web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software update last checked**: Details when Zabbix last checked for a new
    available version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Latest release**: This shows us if there is a new version of Zabbix available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of hosts**: This will detail the number of hosts enabled (**16**)
    and the number of hosts disabled (**5**). It gives us a quick overview of our
    Zabbix server host information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of templates**: A simple counter showing the number of templates currently
    available on this Zabbix system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of items**: Here, we can see details of our Zabbix server’s items
    – in this case, enabled (**565**), disabled (**241**), and not supported (**217**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of triggers**: This details the number of triggers we have. We can
    see how many are enabled (**373**) and disabled (**38**), but also how many are
    in a problem state (**12**) and how many are in an OK state (**361**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of users (online)**: The first value details the total number of users.
    The second value details the number of users currently logged in to the Zabbix
    frontend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Required server performance, new values per second**: Perhaps I’m introducing
    you to a completely new concept here, which is **new values per second** (**NVPS**).
    A server receives or requests values through items and writes this to our Zabbix
    database. The information detailed here shows the estimated number of NVPS received
    by the Zabbix server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You might also see two additional values here, depending on your setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database name**: If you see the name of your database with the value of your
    version, it might indicate you are running a non-supported database version. You
    could see a message like **Warning! Unsupported <DATABASE NAME> database server
    version. Should be at least <****DATABASE VERSION>**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High availability cluster**: If you are running a Zabbix server high availability
    cluster, you will see if it is enabled here and what the failover delay is. Additionally,
    the **Reports** | **System information** page will display additional high-availability
    information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Availability report
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Navigating to **Reports** | **Availability report** will give us some useful
    information about how long a trigger has been in a **Problems** state versus an
    **Ok** state for a certain period:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.69 – Reports | Availability report](img/6.69.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.69 – Reports | Availability report
  prefs: []
  type: TYPE_NORMAL
- en: Looking at one of our hosts, we can see that in the last 30 days, the **Zabbix
    agent is not available (for 3m)** trigger has been in a **Problems** state for
    **10.0000%** of the time. This might be useful for us to know so that we can determine
    how often a certain problem arises.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger top 100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Upon navigating to **Reports** | **Trigger top 100**, we will find the top
    100 triggers that have been firing in a certain amount of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.70 – Reports | Trigger top 100](img/6.70.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.70 – Reports | Trigger top 100
  prefs: []
  type: TYPE_NORMAL
- en: For my Zabbix server, the busiest trigger was a **Zabbix agent is not available**
    trigger on a server. It’s a useful page to see what we are putting most of our
    time into, problem-wise.
  prefs: []
  type: TYPE_NORMAL
- en: Audit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The audit log, which is a handy addition to Zabbix, can be found by going to
    **Reports** | **Audit**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.71 – Reports | Audit](img/6.71.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.71 – Reports | Audit
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see which user has done what on our Zabbix server – identifying
    a culprit for something that shouldn’t have been done, for instance.
  prefs: []
  type: TYPE_NORMAL
- en: Action log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we go to **Reports** | **Action log**, we land on a page that shows which
    actions have been fired. If you’ve configured **Actions**, then you can get a
    list here, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.72 – Reports | Action log](img/B19803_06_072.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.72 – Reports | Action log
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not sure if your action succeeded, then look at this list. It is very
    useful to troubleshoot your actions to a point where you get them up and running
    as you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you hover over the **Info** box, you also get to see what went wrong.
    For example, for the **Failed** items on my Zabbix instance, I must define the
    appropriate media type for the **Admin** user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.73 – Reports | Action log – Info](img/B19803_06_073.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.73 – Reports | Action log – Info
  prefs: []
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Last, but not least, navigating to **Reports** | **Notifications** will show
    us the number of notifications that have been sent to a certain user over a certain
    period:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.74 – Reports | Notifications](img/B19803_06_074.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.74 – Reports | Notifications
  prefs: []
  type: TYPE_NORMAL
- en: In my case, `50` notifications have been sent to the `0` to other users.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up scheduled PDF reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A much-wanted feature was added in Zabbix 5.4: sending automatic PDF reports
    through email. Let me start by stating that this implementation might not fully
    cover every Zabbix user’s situation yet. What this feature does is take a screenshot
    of any Zabbix dashboard and send it through email. It’s not just a screenshot,
    though – data is converted into text in the PDF file and the resolution is very
    high. It’s the first setup from the Zabbix developers and I think we should appreciate
    it for what it is.'
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, it is a very flexible way of implementing this as we can choose
    any kind of widget available, along with its filters, and send it in an automatic
    report. On top of that, it gives the Zabbix development team the flexibility to
    add new widgets on the fly that immediately work with your PDF reports.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need an existing Zabbix installation with access to the frontend and
    the CLI. You can use the server we have been using throughout this book for this
    or you can use your own installation.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a multi-host setup, the easiest method is to install this where
    the Zabbix server is also running, but it is possible to run this on any host.
    In this example, we’ve used our single-host installation.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need to set up a user with an email media type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with Zabbix scheduled reports, we need to install some things
    on our Zabbix server:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s log in to our Zabbix server CLI and execute the following command to install
    the Google Chrome browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On RHEL-based systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following to the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On Ubuntu systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let’s install our required Zabbix web services package with the following
    commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s the command for RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here’s the command for Ubuntu systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s edit our new Zabbix web service configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can find a bunch of Zabbix web-service-specific parameters here, including
    encryption. Make sure the following line is set up to match your Zabbix server(s)
    IP(s):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s edit our Zabbix server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the **WebServiceURL** parameter so that it matches your Zabbix web service
    IP and **StartReportWriters** to make sure we have a reporting subprocess:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For scheduled reporting to work, you will need to set up SSL encryption for
    your Zabbix frontend; we recommend using Let’s Encrypt. Alternatively, set the
    **IgnoreURLCertErrors=1** parameter in **/etc/zabbix/zabbix_web_service.conf**.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it for the CLI part. Let’s log in to our frontend and navigate to **Administration**
    | **General** | **Other**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure you fill out the **Frontend URL** parameter on this page with your
    frontend URL, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.75 – Administration | General | Others with Frontend URL filled
    in](img/B19803_06_075.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.75 – Administration | General | Others with Frontend URL filled in
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Update** button at the bottom of the page and navigate to **Reports**
    | **Scheduled reports**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we are on the page where we can set up and maintain our scheduled reports.
    So, let’s create a new one using the blue **Create report** button in the top-right
    corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will take us to a new page where we can set up a new report. Let’s set
    up a weekly report using our existing dashboard’s **Global view**. First, we’ll
    name this report **Weekly overview of the Global** **view dashboard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the dashboard’s **Global view** by clicking the **Select** button next
    to **Dashboard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set **Cycle** to **Weekly** with a start time of **9:00** and set **Repeat
    on** to **Monday**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.76 – Reports | Scheduled reports – creating a new report, part I](img/B19803_06_076.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.76 – Reports | Scheduled reports – creating a new report, part I
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, make sure to fill in **Subject** and **Message** and set up **Subscriptions**
    so that they match users that have media with the type of email set on their user
    profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.77 – Reports | Scheduled reports – creating a new report page, part
    II](img/B19803_06_077.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.77 – Reports | Scheduled reports – creating a new report page, part
    II
  prefs: []
  type: TYPE_NORMAL
- en: You can now click the **Test** button to see if the report is working. Once
    it is, use the blue **Add** button to finish setting up this scheduled report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This feature is long-awaited and is finally here, but it’s not finished and
    is simply still a building block for more advanced scheduled reports coming later.
    There are some key things to keep in mind with this new reporting functionality.
    I always state that Zabbix development tries to keep everything as customizable
    as possible by adding features and interconnecting them to make sure we can use
    existing functionality in new ways.
  prefs: []
  type: TYPE_NORMAL
- en: The Zabbix development team could have decided to create a fully fledged PDF
    reporting engine for Zabbix. But by going the way of using Zabbix dashboards as
    building blocks for all your PDF reports, they have created versatility and customizability.
    Every single new dashboard widget that is added is now available for you to use
    in your PDF reports, and more and more reporting-focused widgets will be added
    in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix simply grabs the information from your dashboard and sends it to you
    in a PDF form using the new Zabbix web services module and the Google Chrome browser.
    Once we get these prerequisites out of the way, we are provided with a way to
    send PDF reports to any of our Zabbix users, provided they have an email media
    type set up.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up improved business service monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business service monitoring is a way to monitor the services that we, as a business,
    offer to our customers or internally. Think of a CRM system, email, and our website.
    It all has to work and we’d like to know if it does for the people using them.
    It also allows us to monitor the SLA of those services, if we want to define them.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from Zabbix 6.0, business service monitoring has had an entire overhaul.
    If you’ve set it up in versions before 6.0, it might be wise to spend some time
    rediscovering the basics using this recipe. If you’re starting with 7.0 here and
    you’re entirely new to business service monitoring, don’t worry as we will go
    through setting it up step by step in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need our Zabbix server and access to its frontend. I’ll be using my
    `lar-book-centos` host with the configuration we have done so far. We will also
    need a monitored host, for which I will use the Zabbix server itself.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ll be using the Zabbix frontend as an example to set up business service monitoring,
    for which we will create a new host called `lar-book-zabbix-frontend` with some
    items and triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up items and triggers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have followed the previous recipes, you should have a good understanding
    of setting up items and triggers. Let’s go through it again and set up some for
    our business service monitoring example:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s create a new template by logging in to our Zabbix frontend and
    navigating to **Data collection** | **Templates**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Create template** button in the top-right corner and fill
    in the page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.78 – New Zabbix frontend template configuration page](img/B19803_06_078.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.78 – New Zabbix frontend template configuration page
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you save this new template by clicking the blue **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s set up our new host by navigating to **Data collection** | **Hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Create host** button in the top-right corner and fill in
    the page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.79 – New Zabbix frontend host configur\uFEFFation page](img/B19803_06_079.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.79 – New Zabbix frontend host configuration page
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the following tag by navigating to the **Tags** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.80 – New Zabbix frontend host configuration page – the Tags tab](img/B19803_06_080.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.80 – New Zabbix frontend host configuration page – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to save this new host configuration and navigate
    to **Data collection** | **Templates**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the **Zabbix frontend by Zabbix agent** template and go to **Value mapping**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the small **Add** button with the blue dotted line under it and add
    the following value mapping:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.81 – Template Zabbix frontend by Zabbix agent, Service state value
    mapping](img/B19803_06_081.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.81 – Template Zabbix frontend by Zabbix agent, Service state value
    mapping
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you click the blue **Update** button. Then, back on the template,
    go to **Items**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Create item** button and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.82 – ICMP ping item](img/B19803_06_082.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.82 – ICMP ping item
  prefs: []
  type: TYPE_NORMAL
- en: 'Before adding the item, make sure you also add the **Value mapping** value,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.83 – ICMP ping item value mapping](img/B19803_06_083.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.83 – ICMP ping item value mapping
  prefs: []
  type: TYPE_NORMAL
- en: 'We must also go to the **Tags** tab to add some tags to this item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.84 – ICMP ping item – the T\uFEFFags tab](img/B19803_06_084.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.84 – ICMP ping item – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the blue **Add** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back at **Items**, click on the blue **Create item** button to create another
    item. Fill it in, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.85 – Agent ping item](img/B19803_06_085.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.85 – Agent ping item
  prefs: []
  type: TYPE_NORMAL
- en: 'We must also go to the **Tags** tab to add some tags to this item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.86 – HTTP service state item – the Tags tab](img/B19803_06_086.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.86 – HTTP service state item – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Now, save the new item by clicking the blue **Add** button at the bottom of
    the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have two new items, let’s navigate to the **Triggers** page for
    this template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Create trigger** button in the top-right corner and add the following
    trigger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.87 – ICMP down trigger configuration](img/B19803_06_087.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.87 – ICMP down trigger configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, we need to add a new tag, indicating that this trigger
    will be used in our SLA monitoring:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.88 – ICMP down trigger – the Tag\uFEFFs tab](img/B19803_06_088.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.88 – ICMP down trigger – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s click the blue **Add** button to add this trigger. Then, create another
    trigger using the **Create trigger** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s add the following trigger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.89 – Zabbix agent is unreachable trigger configuration](img/B19803_06_089.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.89 – Zabbix agent is unreachable trigger configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you add a tag for the SLA on this trigger as well by going to the
    **Tags** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.90 – Zabbix agent is unreachable trigger – the Tags\uFEFF tab](img/B19803_06_090.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.90 – Zabbix agent is unreachable trigger – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to finish setting up this trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the business service monitoring configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'That concludes our item and trigger configuration. We can now continue with
    setting up our business service monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s define our SLA period by going to **Services** | **SLA** and clicking
    on the blue **Create SLA** button in the top-right corner. We’ll define the following
    SLA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.91 – Services | SLA – Zabbix SLA setup](img/B19803_06_091.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.91 – Services | SLA – Zabbix SLA setup
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add** at the bottom of the window to save this SLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go to **Service** | **Service** and select **Edit** using the slider in
    the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click **Create service** in the top-right corner to add a new service.
    Here, we will add a new service for our Zabbix setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.92 – Service | Service – Zabbix s\uFEFFetup service](img/B19803_06_092.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.92 – Service | Service – Zabbix setup service
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, make sure to add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.93 – Service | Service – Zabbix setup service – the Tags tab](img/B19803_06_093.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.93 – Service | Service – Zabbix setup service – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the blue **Add** button at the bottom of the window to add this new
    service. Then, click **Create service** in the top-right corner again to add the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.94 – Service | Service – Zabbix server service](img/B19803_06_094.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.94 – Service | Service – Zabbix server service
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, make sure to add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.95 – Service | Service – Zabbix server service – the Tags tab](img/B19803_06_095.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.95 – Service | Service – Zabbix server service – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the blue **Add** button again and then **Create service** in the top-right
    corner. Add another service at the same level, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.96 – Service | Service – Zabbix database service](img/B19803_06_096.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.96 – Service | Service – Zabbix database service
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, make sure to add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.97 – Service | Service – Zabbix database service – the Tags tab](img/B19803_06_097.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.97 – Service | Service – Zabbix database service – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add** again to add this service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we’ll add the last child of the Zabbix setup by clicking the **Create
    service** button again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.98 – Service | Service – Zabbix frontend service](img/B19803_06_098.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.98 – Service | Service – Zabbix frontend service
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Advanced configuration** and click **Add** under **New additional
    rule**. We will add the following calculation here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.99 – Service | Service – Zabbix frontend service, additional rules](img/B19803_06_099.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.99 – Service | Service – Zabbix frontend service, additional rules
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, make sure to add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.100 – Service | Service – Zabbix database service – the Tags tab](img/B19803_06_100.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.100 – Service | Service – Zabbix database service – the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Finish setting up this service by clicking the **Add** button at the bottom
    of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we’ll have to add two more services, but this time under the Zabbix frontend.
    Click on **Zabbix frontend** and then **Create service** again and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.101 – Service | Service – Zabbix frontend, ICMP status child servi\uFEFF\
    ce](img/B19803_06_101.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.101 – Service | Service – Zabbix frontend, ICMP status child service
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button and then **Create service** again to add the last
    service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the final service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.102 – Service | Service – Zabbix frontend, Zabbix agent status child
    service](img/B19803_06_102.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.102 – Service | Service – Zabbix frontend, Zabbix agent status child
    service
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button to add this service. Let’s see if it works as
    expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s take a look at what we have set up in our current configuration. We’ve
    used business service monitoring to monitor part of our Zabbix stack. Look at
    business service monitoring as a tree, where we just created two levels. Our initial
    level is the Zabbix setup, which consists of our Zabbix server, Zabbix database,
    and Zabbix frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Beneath the Zabbix frontend level, we have one more level where we have defined
    two more services that represent the status of ICMP and the Zabbix agent. We only
    want to calculate the SLA if both the ICMP and Zabbix agent are in a problem state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.103 – Business service monitoring tree structure example](img/B19803_06_103.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.103 – Business service monitoring tree structure example
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have a distinct tree structure forming once we start to visualize
    this. The part where the magic happens in this case is the Zabbix frontend service
    because this is where we defined what should happen to our SLA once something
    goes wrong with services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take another look at that level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.104 – Zabbix frontend service completed](img/B19803_06_104.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.104 – Zabbix frontend service completed
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we defined that the service should always **Set status to OK**, it
    will only use what we defined in our **Additional rules** section. This is where
    we specified that we only want to affect our SLA calculation: **If at least 2
    child services have High status or above**. Effectively, this means that our SLA
    is only going down if the Zabbix agent can’t be reached and ICMP is down.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve built in a security measure for ourselves here, making sure that if someone
    stops the Zabbix agent but the server can still be reached by ICMP, the SLA won’t
    be affected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s take a look at the result, which we can use to monitor these SLAs.
    Over at **Services** | **SLA report**, we can find all we need to know about whether
    our SLA is being met. We can set the filter to the period for which we want to
    find the SLA. We’ll see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.105 – Service | SLA report, all services with our SLA:24x7 tag](img/B19803_06_105.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.105 – Service | SLA report, all services with our SLA:24x7 tag
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see our monthly 24/7 SLA, where a SLA of 99.9% is expected. For
    our Zabbix setup back in October 2021, the SLA was 100, so we met our required
    SLA. However, in November 2021, we noticed that the SLA dropped below 100, clearly
    indicating in red that our SLA was not met.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drilling down even further and selecting our specific service Zabbix setup,
    we can create a more detailed overview:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.106 – Service | SLA report, Zabbix setup services with our SLA:24x7
    tag](img/B19803_06_106.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.106 – Service | SLA report, Zabbix setup services with our SLA:24x7
    tag
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see all the details regarding the uptime and downtime of our service
    and what our leftover error budget is like.
  prefs: []
  type: TYPE_NORMAL
- en: Using business service monitoring calculations like this, we can narrow down
    where weak points in our services might be while attaching useful statistics to
    that measure. In this case, we used a simple example with ICMP and the Zabbix
    agent trigger, but the possibilities are endless when using services in combination
    with tags.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main concerns with the old way of monitoring services through business
    service monitoring was the inability to automate and customize it. This automation
    has been mostly resolved through the use of tags as we can now define tags at
    the host, template, or trigger level to define what’s used in the business service
    monitoring configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of customization, Zabbix has given us a lot more options to do calculations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.107 – Zabbix service, additional rule options](img/B19803_06_107.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.107 – Zabbix service, additional rule options
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the numerous options here, we can see that we have a lot more to
    play around with. Not only can we specify the exact number of child services we’d
    like to use in our calculations, but we can also work with weights and percentages,
    giving us the options we might need to build more complex setups.
  prefs: []
  type: TYPE_NORMAL
