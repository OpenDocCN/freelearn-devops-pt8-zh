- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automating CI/CD for Cross-Mobile Applications by Using Flutter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to create a pipeline to deploy a containerized
    web application on AWS. This chapter will take a deep dive into creating a pipeline
    to automate CI/CD for the Flutter mobile application. Flutter is the most famous
    software development kit for mobile applications. Developers can write mobile
    applications using only Flutter code instead of Kotlin code for Google and Swift
    code for Apple, and the Azure pipeline can build and deploy Flutter code to the
    Google and Apple stores. They are the most widely used stores in the context of
    mobile applications. By the end of this chapter, you will have learned how to
    create a pipeline using YAML to deploy a Flutter application on Google Firebase,
    with the Google Play Console, and in an Apple environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Explaining the solution architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Google Firebase for Flutter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing an Apple environment for Flutter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a Google Play Console environment for Flutter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating common challenges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will find the code for this chapter at [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch11](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch11).
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete the tasks described in this chapter, you will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Firebase account and create a Firebase project by following the instructions
    in the official Firebase guides: [https://firebase.google.com/docs/guides](https://firebase.google.com/docs/guides)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set up Flutter by following the instructions provided in the official Flutter
    guides: [https://docs.flutter.dev/get-started/install](https://docs.flutter.dev/get-started/install)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Download the Flutter code example from the GitHub repository for this book:
    [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create and set up your app with the Google Play Console by following the instructions
    in the official Google guides: [https://support.google.com/googleplay/android-developer/answer/9859152?hl=en](https://support.google.com/googleplay/android-developer/answer/9859152?hl=en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create and set up your app in Apple Developer by following the instructions
    in the official Apple guides: [https://developer.apple.com/help/app-store-connect/create-an-app-record/add-a-new-app/](https://developer.apple.com/help/app-store-connect/create-an-app-record/add-a-new-app/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explaining the solution architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a solution diagram that depicts how, in an Azure Pipelines
    workflow, to build your Flutter code and deploy it to Google Firebase, the Google
    Play Console, and Apple Store Connect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Solution diagram](img/B18875_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Solution diagram
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create three pipelines for Flutter in development and production environments,
    as shown in the preceding diagram, because mobile applications need to be tested
    on internal user or customer environments, such as Google Firebase, before deploying
    to production in the Google and Apple stores. The solution diagram depicts the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Developers develop and test mobile applications using Flutter on their machines
    and push Flutter code to Azure Repos.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the Flutter code is uploaded to Azure Repos, Azure Repos will trigger
    a pipeline to build the Flutter code and deploy the Flutter applications to Google
    Firebase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After testing the Flutter applications on Google Firebase, the developers will
    trigger another pipeline to build the Flutter code and deploy the Flutter applications
    to the Google Play Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After testing the Flutter applications on the Google Play Store, developers
    will trigger another pipeline to build Flutter code and deploy Flutter applications
    to Apple Store Connect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we build our Flutter mobile application and deploy it to the Google and
    Apple stores, we need to generate and upload certain secure files. Let’s look
    at these next.
  prefs: []
  type: TYPE_NORMAL
- en: Managing secure files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we build our Flutter mobile application and deploy it to the Google
    and Apple stores, we need to upload all the required files that tell the Google
    and Apple stores who you are, to check your developer profiles before they accept
    mobile applications. To do this, navigate to the **Pipelines** | **Library** |
    **Secure files** section and upload the following secure files to build and deploy
    the Flutter application:'
  prefs: []
  type: TYPE_NORMAL
- en: You can generate an Apple certificate file based on the instructions provided
    at [https://developer.apple.com/help/account/create-certificates/create-developer-id-certificates](https://developer.apple.com/help/account/create-certificates/create-developer-id-certificates)
    (`distribution.cer`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a provision profile based on the instructions at [https://developer.apple.com/help/account/manage-provisioning-profiles/create-an-app-store-provisioning-profile](https://developer.apple.com/help/account/manage-provisioning-profiles/create-an-app-store-provisioning-profile)
    (`Hello_Flutter_AppStore.mobileprovision`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can download the API key file (`AuthKey_XXXXXXX.p8`) from Apple Store Connect
    at [https://appstoreconnect.apple.com/access/api](https://appstoreconnect.apple.com/access/api),
    as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Generate API key](img/B18875_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Generate API key
  prefs: []
  type: TYPE_NORMAL
- en: 'Once these files are uploaded, you will see a screen similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Secure files](img/B18875_11_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Secure files
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will show you how to prepare all the secure files shown
    in the preceding screenshot for Flutter application deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Certificates_Distribution.p12`): For Mac, navigate to `distribution.cer`)
    to export it into a file with a different format, called `Certificates_Distribution.p12`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`upload-keystore.jks`): Run the following command to generate a key store file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a secret group using the **Library** option of the Azure DevOps portal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Add a new variable group](img/B18875_11_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Add a new variable group
  prefs: []
  type: TYPE_NORMAL
- en: 'Create variables for deploying Android and iOS on Google Firebase, the Google
    Play Console, and the App Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Add all variables](img/B18875_11_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Add all variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s discuss the variables in some detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ANDROID_APP_ID**: Navigate to the Google Firebase project page, and you will
    find the app ID for the Android project:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – App ID of Android project](img/B18875_11_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – App ID of Android project
  prefs: []
  type: TYPE_NORMAL
- en: '`data.b64` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`upload-keystore.jks`. This is a **Java KeyStore** (**JKS**) file used for
    signing Android applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ANDROID_KEYSTORE_PASSWORD**: The password that you enter when you use the
    key store file generated in *step 2*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ANDROID_KEYSTORE_PRIVATE_PASSWORD**: The password that you enter when you
    use the key store file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**APPLE_CERTIFICATE_SIGNING_PASSWORD**: The password when you export the P12
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FIREBASE_TOKEN**: Run the following command to generate it, after which you
    can copy the Firebase token on the command line result:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 11.7 – Generate API Key](img/B18875_11_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Generate API Key
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, identify the **Issuer ID**, **KEY ID**, and **API Key** file for Apple
    application deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Find Issuer ID, KEY ID, and API KEY file](img/B18875_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Find Issuer ID, KEY ID, and API KEY file
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to convert the `.p8` file into the encode string
    and copy the value of the encode string into the variable called **AUTH_KEY_P8**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For **IOS_APP_ID**, navigate to the Google Firebase project page, and you can
    find **App ID** under this section of your Apple project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9 – App ID of Apple project](img/B18875_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – App ID of Apple project
  prefs: []
  type: TYPE_NORMAL
- en: After preparing all the required variables and files, you can start to create
    a pipeline for building and deploying the Flutter application to Google Firebase,
    the Google Play Console, and the App Store. However, before we learn how to do
    this, let’s discuss some key tasks that are used for deploying Flutter applications
    to Google Firebase, Apple environments, and Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks required for Flutter applications on Google Firebase, Apple, and the Google
    Play Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of the key tasks required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JavaToolInstaller@0** ([https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/java-tool-installer-v0?view=azure-pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/java-tool-installer-v0?view=azure-pipelines)):
    This package task is for setting up the Java compiler. It is a required package
    task when you need to build a Flutter mobile application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hey24sheep** ([https://marketplace.visualstudio.com/items?itemName=Hey24sheep.flutter](https://marketplace.visualstudio.com/items?itemName=Hey24sheep.flutter)):
    This package task is for setting up the Flutter compiler. It is a required package
    task when you need to build a Flutter mobile application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CopyFiles@2** ([https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/copy-files-v2?view=azure-pipelines&tabs=yaml](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/copy-files-v2?view=azure-pipelines&tabs=yaml)):
    This package task is for running the command to copy files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Artifacts`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bash@3** ([https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/bash-v3?view=azure-pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/bash-v3?view=azure-pipelines)):
    This package task is for running commands in a Bash shell script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InstallAppleCertificate@2** ([https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/install-apple-certificate-v2?view=azure-pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/install-apple-certificate-v2?view=azure-pipelines)):
    This package task is for installing Apple certificate files, which are used to
    verify Flutter applications for deploying to Apple Store Connect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InstallAppleProvisioningProfile@1** ([https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/install-apple-provisioning-profile-v1?view=azure-pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/install-apple-provisioning-profile-v1?view=azure-pipelines)):
    This package task is for installing an Apple provisioning profile file, which
    is used to verify a developer who is developing a Flutter application and deploying
    it to Apple Store Connect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AppStoreRelease@1** (https://marketplace.visualstudio.com/items?itemName=ms-vsclient.app-store#app-store-release):
    This package task is for deploying Flutter applications to Apple Store Connect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AndroidSigning@3** ([https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/android-signing-v3?view=azure-pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/android-signing-v3?view=azure-pipelines)):
    This package task is for signing an Android package or APK file before deploying
    it to the Google Play Console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GooglePlayRelease@4** ([https://marketplace.visualstudio.com/items?itemName=ms-vsclient.google-play](https://marketplace.visualstudio.com/items?itemName=ms-vsclient.google-play)):
    This package task is for deploying Flutter applications to the Google Play Console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DownloadSecureFile@1** ([https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/download-secure-file-v1?view=azure-pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/download-secure-file-v1?view=azure-pipelines)):
    This package task is for downloading the secure files from the **Secure files**
    section of the **Variable groups** menu. In our case, it is a signing file to
    sign a Flutter application before deploying it on the Google Play Console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, you will learn how to implement Google Firebase for Flutter.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Google Firebase for Flutter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build and deploy Flutter applications on Google Firebase in both **Android**
    and **iOS**, you need to use the tasks discussed in the previous section. First,
    let’s learn how we can create a pipeline for building and deploying the Flutter
    application to Google Firebase on Android.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pipeline for Google Firebase on Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an Android pipeline, we first need to prepare an Ubuntu environment
    and install the Flutter compiler. After that, it will build your code into a binary
    file and upload it to Google Firebase App Distribution. You can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a pipeline file for Android called `azure-pipeline-for-firebase-android.yml`
    and paste the following code snippets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first part of the YAML file is for preparing all variables that will use
    the entirety of this Azure pipeline. It also declares the operating system for
    building this file, which is Ubuntu in this scenario:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for the pre-installation of the Java library for building your
    code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for the pre-installation of the Flutter compiler for building
    your code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for building your code and creating an APK file:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for signing an APK file to allow Android phones to launch your
    application:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for copying a signed APK file to the artifact directory before
    uploading it to Azure Pipelines storage:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for publishing a signed APK file to Azure Pipelines storage:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for uploading a signed APK file from Azure Pipelines storage to
    Google Firebase App Distribution and letting all users download it for testing:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For Android, when a pipeline build is successful, you can see the result in
    the **App Distribution** section of Google Firebase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – App Distribution for the Android project](img/B18875_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – App Distribution for the Android project
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let’s learn how to do this on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pipeline for Google Firebase on iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an iOS pipeline, we first prepare a macOS environment and install
    the Flutter compiler. After that, it will build your code into a binary file and
    upload it to Google Firebase Distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a pipeline file for Android called `azure-pipeline-for-firebase-ios.yml`
    and paste the following code snippets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first part of the YAML file is for preparing all variables that will use
    the entirety of this Azure pipeline. It also declares the operating system for
    building this file, which is the latest version of macOS:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for pre-installing the Java library for building your code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for installing Apple certificate that is required for building
    an iOS application:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for installing an Apple provisioning profile, which is required
    for building an iOS application:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for installing the Flutter compiler to build your code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for building your code and creating an **iOS App Store Package**
    (**IPA**) file:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for uploading an IPA file to Google Firebase App Distribution:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Similar to Android, when a pipeline build is successful, you can see the result
    in the **App Distribution** section of Google Firebase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – App Distribution for the Apple project](img/B18875_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – App Distribution for the Apple project
  prefs: []
  type: TYPE_NORMAL
- en: This section discussed how to build and deploy the Flutter application on Google
    Firebase for testing before deploying it to the Google Play Console or App Store.
    Next, let’s discuss how we can create and deploy Flutter applications on Apple
    Store Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an Apple environment for Flutter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build and deploy Flutter applications on Apple Store Connect, you need to
    use the various tasks in an Azure pipeline, as discussed earlier in this chapter.
    To reduce the time needed for mobile application deployment process, it is necessary
    to construct the Apple Store deployment pipeline. To do this, you can follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a pipeline file called `azure-pipeline-for-apple-store.yml` and paste
    the following code snippets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first part of the YAML file is for preparing all variables that will use
    the entirety of this Azure pipeline. It also declares the operating system for
    building this file, which is the latest version of macOS:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for the pre-installation of the Java library for building your
    code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for installing the Apple certificate that is required for building
    an iOS application:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for installing an Apple provisioning profile, which is required
    for building an iOS application:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for installing the Flutter compiler to build your code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for building your code and creating an IPA file:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for uploading a signed IPA file to Apple Store Connect:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'When a pipeline build is successful, you can see the result in the **App Store
    Connect** | **TestFlight** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 – TestFlight on App Store Connect](img/B18875_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – TestFlight on App Store Connect
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to create a pipeline to build and deploy Flutter
    applications on Apple Store Connect. In the next section, you will learn how to
    build and deploy Flutter applications on the Google Play Console.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a Google Play Console for Flutter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create an Azure pipeline when you need to upload your application to
    the Google Play Store, which is a marketplace for Android applications that allows
    all Android users to download applications. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a pipeline file called `azure-pipeline-for-google-play-store.yml` and
    paste the following code snippets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first part of the YAML file is for preparing all variables that will use
    the entirety of this Azure pipeline. It also declares the operating system for
    building this file, which is Ubuntu:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for downloading the keystore file, which is needed to sign an
    **Android App Bundle** (**AAB**) file before uploading it to the Google Play Console:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for pre-installing the Java library for building your code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for installing the Flutter compiler to build your code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for building Flutter code in an AAB file:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for copying an AAB file from the source folder to an artifact
    folder:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for moving a signed AAB file to Azure Pipelines storage:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This task is for uploading an AAB file to the Google Play Store:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'When a pipeline build is successful, you can see the result in the Google Play
    Console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Internal testing on the Google Play Console](img/B18875_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Internal testing on the Google Play Console
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to create a pipeline to build and deploy Flutter
    applications using the internal testing of the Google Play Console. It will help
    you to focus on application development after you finish setting up the pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating common challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During Flutter development, you may face certain common issues that can be
    prevented if certain best practices are followed. Let’s discuss a couple of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pubspec.yaml`: This contains the name of the dependencies that you use for
    Flutter development, such as database dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pubspec.lock`: This contains the name and version of dependencies that you
    use for Flutter development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you commit `pubspec.lock` to Azure Repos because if you miss this
    step, you will get an error. This is because you will get a new `pubspec.lock`
    file, which will contain a different version of the dependencies that you used
    when you developed the Flutter application on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Handling platform-specific code**: Flutter allows you to write platform-specific
    code but managing this in a CI/CD pipeline can be tricky, especially when your
    application has custom platform-specific modules or dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use separate tasks in Azure Pipelines to handle platform-specific builds. For
    example, you might have different stages or jobs for iOS and Android builds. Ensure
    that the necessary SDKs and tools for each platform are installed and configured
    in your Azure Pipelines environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you’re well-equipped for Flutter development, let’s wrap this chapter
    up.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter taught you how to create build pipelines for Flutter applications.
    It covered pipelines for Google Firebase – both Android and Apple. It also covered
    pipelines for Apple Store Connect and Google Play Console deployment. This will
    help to reduce the time required by developers to create manual commands when
    they need to build and deploy Flutter applications. This will also help developers
    focus on developing mobile applications, because you create a pipeline only once
    and let an Azure pipeline build your code and deploy your application to Google
    Firebase, Apple Store Connect, and the Google Play Store automatically. This will
    increase developer productivity.
  prefs: []
  type: TYPE_NORMAL
- en: In the last chapter, we will learn about some common pitfalls to avoid when
    using Azure Pipelines and discuss the potential future applications and trends
    of this technology.
  prefs: []
  type: TYPE_NORMAL
