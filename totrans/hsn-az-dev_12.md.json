["```\nusing System;\nusing System.Text;\nusing Microsoft.ServiceBus.Messaging;\n\nnamespace HandsOnAzure.Sender\n{\n    internal class Program\n    {\n        private const string ConnectionString = \"<connection-string>\";\n\n        private static void Main()\n        {\n            var eventHubClient = EventHubClient.CreateFromConnectionString(ConnectionString);\n\n            try\n            {\n                var message = Guid.NewGuid().ToString();\n                Console.WriteLine(\"{0} > Sending message: {1}\", DateTime.Now, message);\n                eventHubClient.Send(new EventData(Encoding.UTF8.GetBytes(message)));\n            }\n            catch (Exception exception)\n            {\n                Console.ForegroundColor = ConsoleColor.Red;\n                Console.WriteLine(\"{0} > Exception: {1}\", DateTime.Now, exception.Message);\n                Console.ResetColor();\n            }\n\n            Console.ReadLine();\n        }\n    }\n}\n```", "```\n23.08.2018 11:20:50 > Sending message: 1a09038b-1aeb-4729-ace0-104f26c7d376\n```", "```\npublic class MyFirstEventProcessor : IEventProcessor\n{\n  private Stopwatch _checkpointStopWatch;\n\n  public Task OpenAsync(PartitionContext context)\n  {\n    Console.WriteLine(\"SimpleEventProcessor initialized. Partition: '{0}', Offset: '{1}'\", context.Lease.PartitionId, context.Lease.Offset);\n    _checkpointStopWatch = new Stopwatch();\n    _checkpointStopWatch.Start();\n    return Task.FromResult<object>(null);\n  }\n\n  public async Task ProcessEventsAsync(PartitionContext context, IEnumerable<EventData> messages)\n  {\n    foreach (var eventData in messages)\n    {\n      var data = Encoding.UTF8.GetString(eventData.GetBytes());\n      Console.WriteLine($\"Message received. Partition: '{context.Lease.PartitionId}', Data: '{data}'\");\n    }\n\n    if (_checkpointStopWatch.Elapsed > TimeSpan.FromMinutes(5))\n    {\n      await context.CheckpointAsync();\n      _checkpointStopWatch.Restart();\n    }\n  }\n\n  public async Task CloseAsync(PartitionContext context, CloseReason reason)\n  {\n    Console.WriteLine(\"Processor Shutting Down. Partition '{0}', Reason: '{1}'.\", context.Lease.PartitionId, reason);\n\n    if (reason == CloseReason.Shutdown)\n    {\n      await context.CheckpointAsync();\n    }\n  }\n}\n```", "```\nusing System;\nusing Microsoft.ServiceBus.Messaging;\n\nnamespace HandsOnAzure.Receiver\n{\n    internal class Program\n    {\n        private const string EventHubConnectionString = \"<connection-string>\";\n        private const string EventHubName = \"<event-hub-name>\";\n        private const string StorageAccountName = \"<storage-account-name>\";\n        private const string StorageAccountKey = \"<storage-account-key>\";\n\n        private static void Main()\n        {\n            var storageConnectionString =\n                $\"DefaultEndpointsProtocol=https;AccountName={StorageAccountName};AccountKey={StorageAccountKey}\";\n\n            var eventProcessorHostName = Guid.NewGuid().ToString();\n            var eventProcessorHost = new EventProcessorHost(eventProcessorHostName, EventHubName, EventHubConsumerGroup.DefaultGroupName, EventHubConnectionString, storageConnectionString);\n            Console.WriteLine(\"Registering EventProcessor...\");\n\n            var options = new EventProcessorOptions();\n            options.ExceptionReceived += (sender, e) => { Console.WriteLine(e.Exception); };\n            eventProcessorHost.RegisterEventProcessorAsync<MyFirstEventProcessor>(options).Wait();\n\n            Console.WriteLine(\"Receiving. Press enter key to stop worker.\");\n            Console.ReadLine();\n            eventProcessorHost.UnregisterEventProcessorAsync().Wait();\n        }\n    }\n}\n```", "```\nRegistering EventProcessor...\nReceiving. Press enter key to stop worker.\nMyFirstEventProcessor initialized. Partition: '4', Offset: ''\nMyFirstEventProcessor initialized. Partition: '9', Offset: ''\nMyFirstEventProcessor initialized. Partition: '11', Offset: ''\nMyFirstEventProcessor initialized. Partition: '8', Offset: ''\nMessage received. Partition: '9', Data: '5e0b2a73-ca9d-418d-8d47-43c7b7feb17e'\nMessage received. Partition: '4', Data: '1a09038b-1aeb-4729-ace0-104f26c7d376'\nMessage received. Partition: '4', Data: '859cce28-76e1-4a68-8637-a2349d898e8b'\nMyFirstEventProcessor initialized. Partition: '15', Offset: ''\nMessage received. Partition: '15', Data: '36f13819-46d6-42c9-8afe-6776264e7aab'\nMyFirstEventProcessor initialized. Partition: '1', Offset: ''\nMyFirstEventProcessor initialized. Partition: '5', Offset: ''\nMyFirstEventProcessor initialized. Partition: '0', Offset: ''\nMyFirstEventProcessor initialized. Partition: '7', Offset: ''\nMyFirstEventProcessor initialized. Partition: '12', Offset: ''\nMyFirstEventProcessor initialized. Partition: '3', Offset: ''\nMyFirstEventProcessor initialized. Partition: '14', Offset: ''\nMyFirstEventProcessor initialized. Partition: '10', Offset: ''\nMyFirstEventProcessor initialized. Partition: '2', Offset: ''\nMyFirstEventProcessor initialized. Partition: '6', Offset: ''\nMyFirstEventProcessor initialized. Partition: '13', Offset: ''\n```", "```\nMicrosoft.ServiceBus.Messaging.ReceiverDisconnectedException: New receiver with higher epoch of '4' is created hence current receiver with epoch '3' is getting disconnected. If you are recreating the receiver, make sure a higher epoch is used. TrackingId:628871df00003ffd002d0cc25b7fd487_C1655342710_B13, SystemTracker:handsonazure:eventhub:handsonazurehub~2047|$default, Timestamp:8/24/2018 9:49:09 AM\n   at Microsoft.ServiceBus.Common.AsyncResult.End[TAsyncResult](IAsyncResult result)\n   at Microsoft.ServiceBus.Messaging.MessageReceiver.RetryReceiveEventDataAsyncResult.TryReceiveEnd(IAsyncResult r, IEnumerable`1& messages)\n   at Microsoft.ServiceBus.Messaging.MessageReceiver.EndTryReceiveEventData(IAsyncResult result, IEnumerable`1& messages)\n   at Microsoft.ServiceBus.Messaging.EventHubReceiver.<ReceiveAsync>b__61_1(IAsyncResult result)\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.ServiceBus.Common.TaskHelpers.EndAsyncResult(IAsyncResult asyncResult)\n   at Microsoft.ServiceBus.Messaging.IteratorAsyncResult`1.<>c.<CallTask>b__24_1(TIteratorAsyncResult thisPtr, IAsyncResult r)\n   at Microsoft.ServiceBus.Messaging.IteratorAsyncResult`1.StepCallback(IAsyncResult result)\nProcessor Shutting Down. Partition '0', Reason: 'LeaseLost'.\n```", "```\nRegistering EventProcessor...\nReceiving. Press enter key to stop worker.\nMyFirstEventProcessor initialized. Partition: '0', Offset: ''\nMessage received. Partition: '0', Data: '3c3bb090-2e0c-4d06-ad44-1d0ad4a106a7'\nMessage received. Partition: '0', Data: '54fed07a-a51e-4f36-8f26-f2ded2da9faa'\nMessage received. Partition: '0', Data: '69b8b291-8407-466a-a2c1-0b33a2ef03ad'\nMessage received. Partition: '0', Data: 'ec45d759-01bb-41db-ab51-de469ee5da55'\nMessage received. Partition: '0', Data: 'fcf41b0e-cd6b-465a-ac20-100ba13fd6af'\nMessage received. Partition: '0', Data: '2f05104a-c4a2-4a8f-8689-957f2dca6c71'\nMessage received. Partition: '0', Data: '63d77b4c-584f-4db3-86d0-9f73179ccb9f'\nMessage received. Partition: '0', Data: '03c70d22-4efa-4bd6-9c5c-f666c2922931'\nMessage received. Partition: '0', Data: '96f4c8be-831c-415c-8aa7-0a5125458f16'\nMessage received. Partition: '0', Data: 'af2e8a21-d9ce-4256-a8eb-73483387912c'\nMessage received. Partition: '0', Data: '73d9f92b-686b-44d1-b01a-50c0c63426ee'\nMessage received. Partition: '0', Data: 'bf53ea8f-dd34-405f-a6a6-0e947ce2473b'\n```", "```\npublic static string SharedAccessSignatureTokenProvider.GetSharedAccessSignature(string keyName, string sharedAccessKey, string resource, TimeSpan tokenTimeToLive)\n```", "```\nSharedAccessSignature sr=%2f%2fZvZExXejq40LO5vmRIikSpWLn9YlKMZ5cwC2Nk83%2bnE%3d.servicebus.windows.net%2fhandsonazurehub%2fpublishers%2fhandsonazurepublisher&sig=UraqQnVck9O64h3pd8dcX9KdZZa2rb%2bxfR%2blyod2Ep2Q%3d&se=1535279857&skn=handsonazuresend\n```", "```\nprivate static EventHubSender CreateSender()\n{\n  var publisher = \"handsonazurepublisher\";\n  var token = SharedAccessSignatureTokenProvider.GetSharedAccessSignature(KeyName, SASKey,\n    $\"sb://{Namespace}.servicebus.windows.net/{HubName}/publishers/{publisher}\", TimeSpan.FromHours(24));\n  var connectionString =\n    ServiceBusConnectionStringBuilder.CreateUsingSharedAccessSignature(\n      new Uri($\"sb://{Namespace}.servicebus.windows.net\"), HubName, publisher, token);\n  var eventHubSender = EventHubSender.CreateFromConnectionString(connectionString);\n  return eventHubSender;\n}\n```", "```\nvar nsm = NamespaceManager.CreateFromConnectionString(manageString);\nnsm.RevokePublisher(eventHubName, publisherId);\n```", "```\n25.08.2018 13:11:39 > Sending message: 0a7dd971-6600-458c-816d-fbbbee0d81cb\n25.08.2018 13:11:40 > Exception: Ip has been prevented to connect to the endpoint. TrackingId:9421f06c-3a1c-4e4e-8a25-fb76f1cacee6, SystemTracker:AmqpGatewayProvider, Timestamp:8/25/2018 11:11:36 AM\n```", "```\nObjavro.codecnullavro.schema{\"type\":\"record\",\"name\":\"EventData\",\"namespace \":\"Microsoft.ServiceBus.Messaging\",\"fields\":[{\"name\":\"SequenceNumber\",\"type \":\"long\"},{\"name\":\"Offset\",\"type\":\"string\"},{\"name\":\"EnqueuedTimeUtc\",\"type \":\"string\"},{\"name\":\"SystemProperties\",\"type\":{\"type\":\"map\",\"values\":[\"long \",\"double\",\"string\",\"bytes\"]}},{\"name\":\"Properties\",\"type\":{\"type\":\"map\",\"v alues\":[\"long\",\"double\",\"string\",\"bytes\",\"null\"]}},{\"name\":\"Body\",\"type\":[\" null\",\"bytes\"]}]}\n```", "```\n{\n  \"definitions\" : {\n    \"record:Microsoft.ServiceBus.Messaging.EventData\" : {\n      \"type\" : \"object\",\n      \"required\" : [ \"SequenceNumber\", \"Offset\", \"EnqueuedTimeUtc\", \"SystemProperties\", \"Properties\", \"Body\" ],\n      \"additionalProperties\" : false,\n      \"properties\" : {\n        \"SequenceNumber\" : {\n          \"type\" : \"integer\",\n          \"minimum\" : -9223372036854775808,\n          \"maximum\" : 9223372036854775807\n        },\n        \"Offset\" : {\n          \"type\" : \"string\"\n        },\n        \"EnqueuedTimeUtc\" : {\n          \"type\" : \"string\"\n        },\n        \"SystemProperties\" : {\n          \"type\" : \"object\",\n          \"additionalProperties\" : {\n            \"oneOf\" : [ {\n              \"type\" : \"integer\",\n              \"minimum\" : -9223372036854775808,\n              \"maximum\" : 9223372036854775807\n            }, {\n              \"type\" : \"number\"\n            }, {\n              \"type\" : \"string\"\n            }, {\n              \"type\" : \"string\",\n              \"pattern\" : \"^[\\u0000-y]*$\"\n            } ]\n          }\n        },\n        \"Properties\" : {\n          \"type\" : \"object\",\n          \"additionalProperties\" : {\n            \"oneOf\" : [ {\n              \"type\" : \"integer\",\n              \"minimum\" : -9223372036854775808,\n              \"maximum\" : 9223372036854775807\n            }, {\n              \"type\" : \"number\"\n            }, {\n              \"type\" : \"string\"\n            }, {\n              \"type\" : \"string\",\n              \"pattern\" : \"^[\\u0000-y]*$\"\n            }, {\n              \"type\" : \"null\"\n            } ]\n          }\n        },\n        \"Body\" : {\n          \"oneOf\" : [ {\n            \"type\" : \"null\"\n          }, {\n            \"type\" : \"string\",\n            \"pattern\" : \"^[\\u0000-y]*$\"\n          } ]\n        }\n      }\n    }\n  },\n  \"$ref\" : \"#/definitions/record:Microsoft.ServiceBus.Messaging.EventData\"\n}\n```"]