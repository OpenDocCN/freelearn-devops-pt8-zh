["```\nt@mylaptop ~ $ puppet module install -i ~/puppet/modules puppetlabs-firewall\nNotice: Preparing to install into /home/thomas/puppet/modules ...\nNotice: Downloading from https://forgeapi.puppetlabs.com ...\n/home/thomas/puppet/modules\n└── puppetlabs-firewall (v1.2.0)\n\n```", "```\n    class myfw::pre {\n      Firewall {\n        require => undef,\n      }\n      firewall { '0000 Allow all traffic on loopback':\n        proto => 'all',\n        iniface => 'lo',\n        action => 'accept',\n      }\n      firewall { '0001 Allow all ICMP':\n        proto => 'icmp',\n        action => 'accept',\n      }\n      firewall { '0002 Allow all established traffic':\n        proto => 'all',\n        state => ['RELATED', 'ESTABLISHED'],\n        action => 'accept',\n      }\n      firewall { '0022 Allow all TCP on port 22 (ssh)':\n        proto => 'tcp',\n        port => '22',\n        action => 'accept',\n      }\n    }\n    ```", "```\n    class myfw::post {\n      firewall { '9999 Drop all other traffic':\n        proto  => 'all',\n        action => 'drop',\n        before => undef,\n      } \n    }\n    ```", "```\n    class myfw {\n      include firewall\n      # our rulesets\n      include myfw::post\n      include myfw::pre\n\n      # clear all the rules\n      resources { \"firewall\":\n        purge => true\n      }\n\n      # resource defaults\n      Firewall {\n        before => Class['myfw::post'],\n        require => Class['myfw::pre'],\n      }\n    }\n    ```", "```\n    node cookbook {\n      include myfw\n    }\n    ```", "```\n    [root@cookbook ~]# puppet agent -t \n    Info: Retrieving pluginfacts\n    Info: Retrieving plugin\n    Info: Loading facts\n    Info: Caching catalog for cookbook.example.com\n    Info: Applying configuration version '1415512948'\n    Notice: /Stage[main]/Myfw::Pre/Firewall[000 Allow all traffic on loopback]/ensure: created\n    Notice: /File[/etc/sysconfig/iptables]/seluser: seluser changed 'unconfined_u' to 'system_u'\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0001 Allow all ICMP]/ensure: created\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0022 Allow all TCP on port 22 (ssh)]/ensure: created\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0002 Allow all established traffic]/ensure: created\n    Notice: /Stage[main]/Myfw::Post/Firewall[9999 Drop all other traffic]/ensure: created\n    Notice: /Stage[main]/Myfw/Firewall[9003 49bcd611c61bdd18b235cea46ef04fae]/ensure: removed\n    Notice: Finished catalog run in 15.65 seconds\n\n    ```", "```\n    # Generated by iptables-save v1.4.7 on Sun Nov  9 01:18:30 2014\n    *filter\n    :INPUT ACCEPT [0:0]\n    :FORWARD ACCEPT [0:0]\n    :OUTPUT ACCEPT [74:35767]\n    -A INPUT -i lo -m comment --comment \"0000 Allow all traffic on loopback\" -j ACCEPT \n    -A INPUT -p icmp -m comment --comment \"0001 Allow all ICMP\" -j ACCEPT \n    -A INPUT -m comment --comment \"0002 Allow all established traffic\" -m state --state RELATED,ESTABLISHED -j ACCEPT \n    -A INPUT -p tcp -m multiport --ports 22 -m comment --comment \"022 Allow all TCP on port 22 (ssh)\" -j ACCEPT \n    -A INPUT -m comment --comment \"9999 Drop all other traffic\" -j DROP \n    COMMIT\n    # Completed on Sun Nov  9 01:18:30 2014\n\n    ```", "```\n  # resource defaults\n  Firewall {\n    before => Class['myfw::post'],\n    require => Class['myfw::pre'],\n  }\n```", "```\nFirewall {\n    require => undef,\n  }\n```", "```\nfirewall { '9999 Drop all other traffic':\n    proto  => 'all',\n    action => 'drop',\n    before => undef,\n  }\n```", "```\n# clear all the rules\nresources { \"firewall\":\n  purge => true\n}\n```", "```\n  include myfw\n  firewall {'0080 Allow HTTP':\n    proto  => 'tcp',\n    action => 'accept',\n    port  => 80,\n  }\n```", "```\n[root@cookbook ~]# puppet agent -t\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Loading facts\nInfo: Caching catalog for cookbook.example.com\nInfo: Applying configuration version '1415515392'\nNotice: /File[/etc/sysconfig/iptables]/seluser: seluser changed 'unconfined_u' to 'system_u'\nNotice: /Stage[main]/Main/Node[cookbook]/Firewall[0080 Allow HTTP]/ensure: created\nNotice: Finished catalog run in 2.74 seconds\n\n```", "```\n[root@cookbook ~]# iptables-save\n# Generated by iptables-save v1.4.7 on Sun Nov  9 01:46:38 2014\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [41:26340]\n-A INPUT -i lo -m comment --comment \"0000 Allow all traffic on loopback\" -j ACCEPT \n-A INPUT -p icmp -m comment --comment \"0001 Allow all ICMP\" -j ACCEPT \n-A INPUT -m comment --comment \"0002 Allow all established traffic\" -m state --state RELATED,ESTABLISHED -j ACCEPT \n-A INPUT -p tcp -m multiport --ports 22 -m comment --comment \"0022 Allow all TCP on port 22 (ssh)\" -j ACCEPT \n-A INPUT -p tcp -m multiport --ports 80 -m comment --comment \"0080 Allow HTTP\" -j ACCEPT \n-A INPUT -m comment --comment \"9999 Drop all other traffic\" -j DROP \nCOMMIT\n# Completed on Sun Nov  9 01:46:38 2014\n\n```", "```\n    # Manage Heartbeat\n    class heartbeat {\n      package { 'heartbeat':\n        ensure => installed,\n      }\n\n      service { 'heartbeat':\n        ensure  => running,\n        enable  => true,\n        require => Package['heartbeat'],\n      }\n\n      file { '/etc/ha.d/authkeys':\n        content => \"auth 1\\n1 sha1 TopSecret\",\n        mode    => '0600',\n        require => Package['heartbeat'],\n        notify  => Service['heartbeat'],\n      }\n      include myfw\n      firewall {'0694 Allow UDP ha-cluster':\n        proto  => 'udp',\n        port   => 694,\n        action => 'accept',\n      }\n    }\n    ```", "```\n    # Manage a specific VIP with Heartbeat\n    class \n      heartbeat::vip($node1,$node2,$ip1,$ip2,$vip,$interface='eth0:1') {\n      include heartbeat\n\n      file { '/etc/ha.d/haresources':\n        content => \"${node1} IPaddr::${vip}/${interface}\\n\",\n        require => Package['heartbeat'],\n        notify  => Service['heartbeat'],\n      }\n\n      file { '/etc/ha.d/ha.cf':\n        content => template('heartbeat/vip.ha.cf.erb'),\n        require => Package['heartbeat'],\n        notify  => Service['heartbeat'],\n      }\n    }\n    ```", "```\n    use_logd yes\n    udpport 694\n    autojoin none\n    ucast eth0 <%= @ip1 %>\n    ucast eth0 <%= @ip2 %>\n    keepalive 1\n    deadtime 10\n    warntime 5\n    auto_failback off\n    node <%= @node1 %>\n    node <%= @node2 %>\n    ```", "```\n    node cookbook,cookbook2 {\n      class { 'heartbeat::vip':\n        ip1   => '192.168.122.132',\n        ip2   => '192.168.122.133',\n        node1 => 'cookbook.example.com',\n        node2 => 'cookbook2.example.com',\n        vip   => '192.168.122.200/24',\n      }\n    }\n    ```", "```\n    [root@cookbook2 ~]# puppet agent -t\n    Info: Retrieving pluginfacts\n    Info: Retrieving plugin\n    Info: Loading facts\n    Info: Caching catalog for cookbook2.example.com\n    Info: Applying configuration version '1415517914'\n    Notice: /Stage[main]/Heartbeat/Package[heartbeat]/ensure: created\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0000 Allow all traffic on loopback]/ensure: created\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0001 Allow all ICMP]/ensure: created\n    Notice: /File[/etc/sysconfig/iptables]/seluser: seluser changed 'unconfined_u' to 'system_u'\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0022 Allow all TCP on port 22 (ssh)]/ensure: created\n    Notice: /Stage[main]/Heartbeat::Vip/File[/etc/ha.d/haresources]/ensure: defined content as '{md5}fb9f5d9d2b26e3bddf681676d8b2129c'\n    Info: /Stage[main]/Heartbeat::Vip/File[/etc/ha.d/haresources]: Scheduling refresh of Service[heartbeat]\n    Notice: /Stage[main]/Heartbeat::Vip/File[/etc/ha.d/ha.cf]/ensure: defined content as '{md5}84da22f7ac1a3629f69dcf29ccfd8592'\n    Info: /Stage[main]/Heartbeat::Vip/File[/etc/ha.d/ha.cf]: Scheduling refresh of Service[heartbeat]\n    Notice: /Stage[main]/Heartbeat/Service[heartbeat]/ensure: ensure changed 'stopped' to 'running'\n    Info: /Stage[main]/Heartbeat/Service[heartbeat]: Unscheduling refresh on Service[heartbeat]\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0002 Allow all established traffic]/ensure: created\n    Notice: /Stage[main]/Myfw::Post/Firewall[9999 Drop all other traffic]/ensure: created\n    Notice: /Stage[main]/Heartbeat/Firewall[0694 Allow UDP ha-cluster]/ensure: created\n    Notice: Finished catalog run in 12.64 seconds\n\n    ```", "```\n    [root@cookbook ~]# ip addr show dev eth0\n    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n     link/ether 52:54:00:c9:d5:63 brd ff:ff:ff:ff:ff:ff\n     inet 192.168.122.132/24 brd 192.168.122.255 scope global eth0\n     inet 192.168.122.200/24 brd 192.168.122.255 scope global secondary eth0:1\n     inet6 fe80::5054:ff:fec9:d563/64 scope link \n     valid_lft forever preferred_lft forever\n\n    ```", "```\n    [root@cookbook2 ~]# ip a show dev eth0\n    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n     link/ether 52:54:00:ee:9c:fa brd ff:ff:ff:ff:ff:ff\n     inet 192.168.122.133/24 brd 192.168.122.255 scope global eth0\n     inet 192.168.122.200/24 brd 192.168.122.255 scope global secondary eth0:1\n     inet6 fe80::5054:ff:feee:9cfa/64 scope link \n     valid_lft forever preferred_lft forever\n\n    ```", "```\n# Manage Heartbeat\nclass heartbeat {\n  package { 'heartbeat':\n    ensure => installed,\n  }\n  ...\n}\n```", "```\n# Manage a specific VIP with Heartbeat\nclass \n  heartbeat::vip($node1,$node2,$ip1,$ip2,$vip,$interface='eth0:1') {\n  include heartbeat\n```", "```\nfile { '/etc/ha.d/haresources':\n  content => \"${node1} IPaddr::${vip}/${interface}\\n\",\n  notify  => Service['heartbeat'],\n  require => Package['heartbeat'],\n}\n```", "```\ncookbook.example.com IPaddr::192.168.122.200/24/eth0:1\n```", "```\nfile { '/etc/ha.d/ha.cf':\n  content => template('heartbeat/vip.ha.cf.erb'),\n  notify  => Service['heartbeat'],\n  require => Package['heartbeat'],\n}\n```", "```\nuse_logd yes\nudpport 694\nautojoin none\nucast eth0 <%= @ip1 %>\nucast eth0 <%= @ip2 %>\nkeepalive 1\ndeadtime 10\nwarntime 5\nauto_failback off\nnode <%= @node1 %>\nnode <%= @node2 %>\n```", "```\nclass { 'heartbeat::vip':\n  ip1   => '192.168.122.132',\n  ip2   => '192.168.122.133',\n  node1 => 'cookbook.example.com',\n  node2 => 'cookbook2.example.com',\n  vip   => '192.168.122.200/24',\n}\n```", "```\n    class nfs::exports {\n      exec {'nfs::exportfs':\n        command     => 'exportfs -a',\n        refreshonly => true,\n        path        => '/usr/bin:/bin:/sbin:/usr/sbin',\n      }\n      concat {'/etc/exports':\n        notify => Exec['nfs::exportfs'],\n      }\n    }\n    ```", "```\n    define nfs::export (\n      $where = $title,\n      $who = '*',\n      $options = 'async,ro',\n      $mount_options = 'defaults',\n      $tag     = 'nfs'\n    ) {\n      # make sure the directory exists\n      # export the entry locally, then export a resource to be picked up later.\n      file {\"$where\":\n        ensure => 'directory',\n      }\n      include nfs::exports\n      concat::fragment { \"nfs::export::$where\":\n        content => \"${where} ${who}(${options})\\n\",\n        target  => '/etc/exports'\n      }\n      @@mount { \"nfs::export::${where}::${::ipaddress}\":\n        name    => \"$where\",\n        ensure  => 'mounted',\n        fstype  => 'nfs',\n        options => \"$mount_options\",\n        device  => \"${::ipaddress}:${where}\",\n        tag     => \"$tag\",\n      }\n    }\n    ```", "```\n    class nfs::server {\n      # ensure nfs server is running\n      # firewall should allow nfs communication\n      include nfs::exports\n      case $::osfamily {\n        'RedHat': { include nfs::server::redhat }\n        'Debian': { include nfs::server::debian }\n      }\n      include myfw\n      firewall {'2049 NFS TCP communication':\n        proto  => 'tcp',\n        port   => '2049',\n        action => 'accept',\n      }\n      firewall {'2049 UDP NFS communication':\n        proto  => 'udp',\n        port   => '2049',\n        action => 'accept',\n      }\n      firewall {'0111 TCP PORTMAP':\n        proto  => 'tcp',\n        port   => '111',\n        action => 'accept',\n      }\n      firewall {'0111 UDP PORTMAP':\n        proto  => 'udp',\n        port   => '111',\n        action => 'accept',\n      }\n      firewall {'4000 TCP STAT':\n        proto  => 'tcp',\n        port   => '4000-4010',\n        action => 'accept',\n      }\n      firewall {'4000 UDP STAT':\n        proto  => 'udp',\n        port   => '4000-4010',\n        action => 'accept',\n      }\n    }\n    ```", "```\n    class nfs::server::redhat {\n      package {'nfs-utils':\n        ensure => 'installed',\n      }\n      service {'nfs':\n        ensure => 'running',\n        enable => true\n      }\n      file {'/etc/sysconfig/nfs':\n        source => 'puppet:///modules/nfs/nfs',\n        mode   => 0644,\n        notify => Service['nfs'],\n      }\n    }\n    ```", "```\n    STATD_PORT=4000\n    STATD_OUTGOING_PORT=4001\n    RQUOTAD_PORT=4002\n    LOCKD_TCPPORT=4003\n    LOCKD_UDPPORT=4003\n    MOUNTD_PORT=4004\n    ```", "```\n    class nfs::server::debian {\n      # install the package\n      package {'nfs':\n        name   => 'nfs-kernel-server',\n        ensure => 'installed',\n      }\n      # config\n      file {'/etc/default/nfs-common':\n        source => 'puppet:///modules/nfs/nfs-common',\n        mode   => 0644,\n        notify => Service['nfs-common']\n      }\n      # services\n      service {'nfs-common':\n        ensure => 'running',\n        enable => true,\n      }\n      service {'nfs':\n        name   => 'nfs-kernel-server',\n        ensure => 'running',\n        enable => true,\n        require => Package['nfs-kernel-server']\n      }\n    }\n    ```", "```\n    STATDOPTS=\"--port 4000 --outgoing-port 4001\"\n    ```", "```\n    node debian {\n      include nfs::server\n      nfs::export {'/srv/home': \n        tag => \"srv_home\" }\n    }\n    ```", "```\n    node cookbook {\n      Mount <<| tag == \"srv_home\" |>> {\n        name   => '/mnt',\n      }\n    }\n    ```", "```\n    root@debian:~# puppet agent -t\n    Info: Caching catalog for debian.example.com\n    Info: Applying configuration version '1415602532'\n    Notice: Finished catalog run in 0.78 seconds\n    [root@cookbook ~]# puppet agent -t\n    Info: Caching catalog for cookbook.example.com\n    Info: Applying configuration version '1415603580'\n    Notice: /Stage[main]/Main/Node[cookbook]/Mount[nfs::export::/srv/home::192.168.122.148]/ensure: ensure changed 'ghost' to 'mounted'\n    Info: Computing checksum on file /etc/fstab\n    Info: /Stage[main]/Main/Node[cookbook]/Mount[nfs::export::/srv/home::192.168.122.148]: Scheduling refresh of Mount[nfs::export::/srv/home::192.168.122.148]\n    Info: Mount[nfs::export::/srv/home::192.168.122.148](provider=parsed): Remounting\n    Notice: /Stage[main]/Main/Node[cookbook]/Mount[nfs::export::/srv/home::192.168.122.148]: Triggered 'refresh' from 1 events\n    Info: /Stage[main]/Main/Node[cookbook]/Mount[nfs::export::/srv/home::192.168.122.148]: Scheduling refresh of Mount[nfs::export::/srv/home::192.168.122.148]\n    Notice: Finished catalog run in 0.34 seconds\n\n    ```", "```\n    [root@cookbook ~]# mount -t nfs\n    192.168.122.148:/srv/home on /mnt type nfs (rw)\n\n    ```", "```\nclass nfs::exports {\n  exec {'nfs::exportfs':\n    command     => 'exportfs -a',\n    refreshonly => true,\n    path        => '/usr/bin:/bin:/sbin:/usr/sbin',\n  }\n  concat {'/etc/exports':\n    notify => Exec['nfs::exportfs'],\n  }\n}\n```", "```\ndefine nfs::export (\n  $where = $title,\n  $who = '*',\n  $options = 'async,ro',\n  $mount_options = 'defaults',\n  $tag     = 'nfs'\n) {\n  # make sure the directory exists\n  # export the entry locally, then export a resource to be picked up later.\n  file {\"$where\":\n    ensure => 'directory',\n  }\n  include nfs::exports\n  concat::fragment { \"nfs::export::$where\":\n    content => \"${where} ${who}(${options})\\n\",\n    target  => '/etc/exports'\n  }\n```", "```\n@@mount { \"nfs::export::${where}::${::ipaddress}\":\n    name    => \"$where\",\n    ensure  => 'mounted',\n    fstype  => 'nfs',\n    options => \"$mount_options\",\n    device  => \"${::ipaddress}:${where}\",\n    tag     => \"$tag\",\n  }\n```", "```\nclass nfs::server {\n  # ensure nfs server is running\n  # firewall should allow nfs communication\n  include nfs::exports\n  case $::osfamily {\n    'RedHat': { include nfs::server::redhat }\n    'Debian': { include nfs::server::debian }\n  }\n  include myfw\n  firewall {'2049 NFS TCP communication':\n    proto  => 'tcp',\n    port   => '2049',\n    action => 'accept',\n  }\n  firewall {'2049 UDP NFS communication':\n    proto  => 'udp',\n    port   => '2049',\n    action => 'accept',\n  }\n  firewall {'0111 TCP PORTMAP':\n    proto  => 'tcp',\n    port   => '111',\n    action => 'accept',\n  }\n  firewall {'0111 UDP PORTMAP':\n    proto  => 'udp',\n    port   => '111',\n    action => 'accept',\n  }\n  firewall {'4000 TCP STAT':\n    proto  => 'tcp',\n    port   => '4000-4010',\n    action => 'accept',\n  }\n  firewall {'4000 UDP STAT':\n    proto  => 'udp',\n    port   => '4000-4010',\n    action => 'accept',\n  }\n}\n```", "```\nclass nfs::server::redhat {\n  package {'nfs-utils':\n    ensure => 'installed',\n  }\n  service {'nfs':\n    ensure => 'running',\n    enable => true\n  }\n  file {'/etc/sysconfig/nfs':\n    source => 'puppet:///modules/nfs/nfs',\n    mode   => 0644,\n    notify => Service['nfs'],\n  }\n}\n```", "```\nclass nfs::server::debian {\n  # install the package\n  package {'nfs':\n    name   => 'nfs-kernel-server',\n    ensure => 'installed',\n  }\n  # config\n  file {'/etc/default/nfs-common':\n    source => 'puppet:///modules/nfs/nfs-common',\n    mode   => 0644,\n    notify => Service['nfs-common']\n  }\n  # services\n  service {'nfs-common':\n    ensure => 'running',\n    enable => true,\n  }\n  service {'nfs':\n    name   => 'nfs-kernel-server',\n    ensure => 'running',\n    enable => true,\n  }\n}\n```", "```\n  include nfs::server\n  nfs::export {'/srv/home': \n    tag => \"srv_home\" }\n```", "```\nMount <<| tag == \"srv_home\" |>> {\n  name   => '/mnt',\n}\n```", "```\n    class haproxy::master ($app = 'myapp') {\n      # The HAProxy master server\n      # will collect haproxy::slave resources and add to its balancer\n      package { 'haproxy': ensure => installed }\n      service { 'haproxy':\n        ensure  => running,\n        enable  => true,\n        require => Package['haproxy'],\n      }\n\n      include haproxy::config\n\n      concat::fragment { 'haproxy.cfg header':\n        target  => 'haproxy.cfg',\n        source  => 'puppet:///modules/haproxy/haproxy.cfg',\n        order   => '001',\n        require => Package['haproxy'],\n        notify  => Service['haproxy'],\n      }\n\n      # pull in the exported entries\n      Concat::Fragment <<| tag == \"$app\" |>> {\n        target => 'haproxy.cfg',\n        notify => Service['haproxy'],\n      }\n    }\n    ```", "```\n    global\n            daemon\n            user haproxy\n            group haproxy\n            pidfile /var/run/haproxy.pid\n\n    defaults\n            log     global\n            stats   enable\n            mode    http\n            option  httplog\n            option  dontlognull\n            option  dontlog-normal\n            retries 3\n            option  redispatch\n            timeout connect 4000\n            timeout client 60000\n            timeout server 30000\n\n    listen  stats :8080\n            mode http\n            stats uri /\n            stats auth haproxy:topsecret\n\n    listen  myapp 0.0.0.0:80\n            balance leastconn\n    ```", "```\n    node 'cookbook' {\n      include haproxy\n    }\n    ```", "```\n    class haproxy::slave ($app = \"myapp\", $localport = 8000) {\n      # haproxy slave, export haproxy.cfg fragment\n      # configure simple web server on different port\n      @@concat::fragment { \"haproxy.cfg $::fqdn\":\n        content => \"\\t\\tserver ${::hostname} ${::ipaddress}:${localport}   check maxconn 100\\n\",\n        order   => '0010',\n        tag     => \"$app\",\n      }\n      include myfw\n      firewall {\"${localport} Allow HTTP to haproxy::slave\":\n        proto  => 'tcp',\n        port   => $localport,\n        action => 'accept',\n      }\n\n      class {'apache': }\n      apache::vhost { 'haproxy.example.com':\n        port          => '8000',\n        docroot => '/var/www/haproxy',\n      }\n      file {'/var/www/haproxy':\n        ensure  => 'directory',\n        mode    => 0755,\n        require => Class['apache'],\n      }\n      file {'/var/www/haproxy/index.html':\n        mode    => '0644',\n        content => \"<html><body><h1>${::fqdn} haproxy::slave\\n</body></html>\\n\",\n        require => File['/var/www/haproxy'],\n      }\n    }\n    ```", "```\n    class haproxy::config {\n      concat {'haproxy.cfg':\n        path  => '/etc/haproxy/haproxy.cfg',\n        order => 'numeric',\n        mode  => '0644',\n      }\n    }\n    ```", "```\n    node master {\n      class {'haproxy::master':\n        app => 'cookbook'\n      }\n    }\n    node slave1,slave2 {\n      class {'haproxy::slave':\n        app => 'cookbook'\n      }\n    }\n    ```", "```\n    root@slave1:~# puppet agent -t\n    Info: Caching catalog for slave1\n    Info: Applying configuration version '1415646194'\n    Notice: /Stage[main]/Haproxy::Slave/Apache::Vhost[haproxy.example.com]/File[25-haproxy.example.com.conf]/ensure: created\n    Info: /Stage[main]/Haproxy::Slave/Apache::Vhost[haproxy.example.com]/File[25-haproxy.example.com.conf]: Scheduling refresh of Service[httpd]\n    Notice: /Stage[main]/Haproxy::Slave/Apache::Vhost[haproxy.example.com]/File[25-haproxy.example.com.conf symlink]/ensure: created\n    Info: /Stage[main]/Haproxy::Slave/Apache::Vhost[haproxy.example.com]/File[25-haproxy.example.com.conf symlink]: Scheduling refresh of Service[httpd]\n    Notice: /Stage[main]/Apache::Service/Service[httpd]/ensure: ensure changed 'stopped' to 'running'\n    Info: /Stage[main]/Apache::Service/Service[httpd]: Unscheduling refresh on Service[httpd]\n    Notice: Finished catalog run in 1.71 seconds\n\n    ```", "```\n    [root@master ~]# puppet agent -t\n    Info: Caching catalog for master.example.com\n    Info: Applying configuration version '1415647075'\n    Notice: /Stage[main]/Haproxy::Master/Package[haproxy]/ensure: created\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0000 Allow all traffic on loopback]/ensure: created\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0001 Allow all ICMP]/ensure: created\n    Notice: /Stage[main]/Haproxy::Master/Firewall[8080 haproxy statistics]/ensure: created\n    Notice: /File[/etc/sysconfig/iptables]/seluser: seluser changed 'unconfined_u' to 'system_u'\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0022 Allow all TCP on port 22 (ssh)]/ensure: created\n    Notice: /Stage[main]/Haproxy::Master/Firewall[0080 http haproxy]/ensure: created\n    Notice: /Stage[main]/Myfw::Pre/Firewall[0002 Allow all established traffic]/ensure: created\n    Notice: /Stage[main]/Myfw::Post/Firewall[9999 Drop all other traffic]/ensure: created\n    Notice: /Stage[main]/Haproxy::Config/Concat[haproxy.cfg]/File[haproxy.cfg]/content: \n    ...\n    +listen  myapp 0.0.0.0:80\n    +        balance leastconn\n    +    server slave1 192.168.122.148:8000   check maxconn 100\n    +    server slave2 192.168.122.133:8000   check maxconn 100\n\n    Info: Computing checksum on file /etc/haproxy/haproxy.cfg\n    Info: /Stage[main]/Haproxy::Config/Concat[haproxy.cfg]/File[haproxy.cfg]: Filebucketed /etc/haproxy/haproxy.cfg to puppet with sum 1f337186b0e1ba5ee82760cb437fb810\n    Notice: /Stage[main]/Haproxy::Config/Concat[haproxy.cfg]/File[haproxy.cfg]/content: content changed '{md5}1f337186b0e1ba5ee82760cb437fb810' to '{md5}b070f076e1e691e053d6853f7d966394'\n    Notice: /Stage[main]/Haproxy::Master/Service[haproxy]/ensure: ensure changed 'stopped' to 'running'\n    Info: /Stage[main]/Haproxy::Master/Service[haproxy]: Unscheduling refresh on Service[haproxy]\n    Notice: Finished catalog run in 33.48 seconds\n\n    ```", "```\nclass haproxy::config {\n  concat {'haproxy.cfg':\n    path  => '/etc/haproxy/haproxy.cfg',\n    order => 'numeric',\n    mode  => 0644,\n  }\n}\n```", "```\nclass haproxy::slave ($app = \"myapp\", $localport = 8000) {\n  # haproxy slave, export haproxy.cfg fragment\n  # configure simple web server on different port\n  @@concat::fragment { \"haproxy.cfg $::fqdn\":\n    content => \"\\t\\tserver ${::hostname} ${::ipaddress}:${localport}   check maxconn 100\\n\",\n    order   => '0010',\n    tag     => \"$app\",\n  }\n```", "```\n# pull in the exported entries\n  Concat::Fragment <<| tag == \"$app\" |>> {\n    target => 'haproxy.cfg',\n    notify => Service['haproxy'],\n  }\n```", "```\nconcat::fragment { 'haproxy.cfg header':\n    target  => 'haproxy.cfg',\n    source  => 'puppet:///modules/haproxy/haproxy.cfg',\n    order   => '001',\n    require => Package['haproxy'],\n    notify  => Service['haproxy'],\n  }\n```", "```\nt@mylaptop ~ $ cd puppet\nt@mylaptop ~/puppet $ puppet module install -i modules garethr-docker\nNotice: Preparing to install into /home/thomas/puppet/modules ...\nNotice: Downloading from https://forgeapi.puppetlabs.com ...\nNotice: Installing -- do not interrupt ...\n/home/thomas/puppet/modules\n└─┬ garethr-docker (v3.3.0)\n ├── puppetlabs-apt (v1.7.0)\n ├── puppetlabs-stdlib (v4.3.2)\n └── stahnma-epel (v1.0.2)\n\n```", "```\n     node shipyard {\n     class {'docker': }\n     docker::image {'phusion/baseimage': }\n     docker::run {'cookbook':\n     image   => 'phusion/baseimage',\n     expose  => '8080',\n     ports   => '8080',\n     command => 'nc -k -l 8080',\n     }\n    }\n\n    ```", "```\n    [root@shipyard ~]# puppet agent -t\n    Info: Retrieving pluginfacts\n    Info: Retrieving plugin\n    Info: Loading facts\n    Info: Caching catalog for shipyard\n    Info: Applying configuration version '1421049252'\n    Notice: /Stage[main]/Epel/File[/etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6]/ensure: defined content as '{md5}d865e6b948a74cb03bc3401c0b01b785'\n    Notice: /Stage[main]/Epel/Epel::Rpm_gpg_key[EPEL-6]/Exec[import-EPEL-6]/returns: executed successfully\n    ...\n    Notice: /Stage[main]/Docker::Install/Package[docker]/ensure: created\n    ...\n    Notice: /Stage[main]/Main/Node[shipyard]/Docker::Run[cookbook]/File[/etc/init.d/docker-cookbook]/ensure: created\n    Info: /Stage[main]/Main/Node[shipyard]/Docker::Run[cookbook]/File[/etc/init.d/docker-cookbook]: Scheduling refresh of Service[docker-cookbook]\n    Notice: /Stage[main]/Main/Node[shipyard]/Docker::Run[cookbook]/Service[docker-cookbook]: Triggered 'refresh' from 1 events\n\n    ```", "```\n    [root@shipyard ~]# docker ps\n    CONTAINER ID        IMAGE                      COMMAND             CREATED              STATUS              PORTS                     NAMES\n    f6f5b799a598        phusion/baseimage:0.9.15   \"/bin/nc -l 8080\"   About a minute ago   Up About a minute   0.0.0.0:49157->8080/tcp   suspicious_hawking \n\n    ```", "```\n    [root@shipyard ~]# nc -v localhost 49157\n    Connection to localhost 49157 port [tcp/*] succeeded!\n\n    ```"]