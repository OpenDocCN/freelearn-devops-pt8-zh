["```\n      ExampleTrailBucket: \n        Type: AWS::S3::Bucket\n\n```", "```\n      ExampleBucketPolicy: \n        Type: AWS::S3::BucketPolicy \n        Properties: \n          Bucket: !Ref ExampleTrailBucket \n          PolicyDocument: \n            Statement: \n            - Sid: AWSCloudTrailAclCheck20150319 \n              Effect: Allow \n              Principal: \n                Service: cloudtrail.amazonaws.com \n                Action: s3:GetBucketAcl \n                Resource: !Join \n                  - \"\" \n                  - \n                    - \"arn:aws:s3:::\" \n                    - !Ref ExampleTrailBucket \n            - Sid: AWSCloudTrailWrite20150319 \n              Effect: Allow \n              Principal: \n                Service: cloudtrail.amazonaws.com \n              Action: s3:PutObject \n              Resource: !Join \n                - \"\" \n                - \n                  - \"arn:aws:s3:::\" \n                  - !Ref ExampleTrailBucket \n                  - \"/AWSLogs/\" \n                  - !Ref AWS::AccountId \n                  - \"/*\" \n              Condition: \n                StringEquals: \n                  s3:x-amz-acl: bucket-owner-full-control\n\n```", "```\n      ExampleTrail: \n        Type: AWS::CloudTrail::Trail \n        Properties: \n          EnableLogFileValidation: true \n          IncludeGlobalServiceEvents: true \n          IsLogging: true \n          IsMultiRegionTrail: true \n          S3BucketName: !Ref ExampleTrailBucket \n        DependsOn: \n          - ExampleTrailBucket \n          - ExampleBucketPolicy\n\n```", "```\n      Outputs: \n        ExampleBucketName: \n          Value: !Ref ExampleTrailBucket \n          Description: Bucket where CloudTrail logs will be stored\n\n```", "```\n aws cloudformation create-stack \\\n        --template-body file://05-auditing-your-aws-account.yaml \\\n        --stack-name example-cloudtrail\n\n```", "```\n aws cloudwatch put-metric-data \\ \n --metric-name MemoryUsagePercent \\\n --namespace CustomMetrics \\\n --dimensions InstanceId=`curl -s \\\n http://169.254.169.254/latest/meta-data/instance-id` \\\n --unit Percent \\\n --value `free | grep Mem | awk '{print $3/$2 * 100.0}'`\n\n```", "```\n      AmiId: \n        Type: AWS::EC2::Image::Id \n        Description: AMI ID to launch instances from \n        Default: ami-0b33d91d \n      VpcId: \n        Type: AWS::EC2::VPC::Id \n        Description: VPC where load balancer and instance will launch \n      SubnetIDs: \n        Type: List<AWS::EC2::Subnet::Id> \n        Description: Public subnet where the instance will launch\n          (pick at least 1) \n      KeyPair: \n        Type: AWS::EC2::KeyPair::KeyName \n        Description: Key to launch EC2 instance with \n      AlertEmail: \n        Type: String \n        Description: Email Address which alert emails will be sent to\n\n```", "```\n      ExampleRole: \n        Type: AWS::IAM::Role \n        Properties: \n          AssumeRolePolicyDocument: \n            Version: \"2012-10-17\" \n            Statement: \n              - \n                Effect: Allow \n                Principal: \n                  Service: \n                    - ec2.amazonaws.com \n                Action: \n                  - sts:AssumeRole \n          Path: / \n          Policies: \n            - \n             PolicyName: WriteToCloudWatchLogs \n             PolicyDocument: \n               Version: \"2012-10-17\" \n               Statement: \n                 - \n                  Effect: Allow \n                    Action: \n                      - logs:CreateLogGroup \n                      - logs:CreateLogStream \n                      - logs:PutLogEvents \n                      - logs:DescribeLogStreams \n                    Resource: \"*\" \n      ExampleInstanceProfile: \n        Type: AWS::IAM::InstanceProfile \n        Properties: \n          Roles: \n            - !Ref ExampleRole \n          Path: /\n\n```", "```\n      ExampleEC2InstanceSecurityGroup: \n        Type: AWS::EC2::SecurityGroup \n        Properties: \n          GroupDescription: Security Group for example Instance \n          SecurityGroupIngress: \n            - IpProtocol: tcp \n              CidrIp: \"0.0.0.0/0\" \n              FromPort: 22 \n              ToPort: 22 \n          VpcId: !Ref VpcId\n\n```", "```\n              ExampleEC2Instance: \n                Type: AWS::EC2::Instance \n                Properties: \n                  IamInstanceProfile: !Ref ExampleInstanceProfile \n                  InstanceType: t2.nano \n                  KeyName: !Ref KeyPair \n                  UserData: \n                    Fn::Base64: \n                      Fn::Sub: | \n                        #!/bin/bash -ex \n                        yum update -y \n                        yum install -y awslogs \n                        cat << EOF >\n                        /etc/awslogs/config/var-log-secure.conf \n                        [/var/log/secure] \n                        datetime_format = %b %d %H:%M:%S \n                        file = /var/log/secure \n                        buffer_duration = 5000 \n                        log_stream_name = {instance_id} \n                        initial_position = start_of_file \n                        log_group_name = /var/log/secure \n                        EOF \n                        service awslogs start \n                        chkconfig awslogs on \n                  ImageId: !Ref AmiId \n                  SecurityGroupIds: \n                    - Fn::GetAtt: ExampleEC2InstanceSecurityGroup.GroupId \n                  SubnetId: !Select [ 0, Ref: SubnetIDs ]\n\n```", "```\n      ExampleSNSTopic:  \n        Type: AWS::SNS::Topic \n        Properties:  \n            Subscription:  \n              -  \n                Endpoint: !Ref AlertEmail \n                Protocol: email\n\n```", "```\n      ExampleLogGroup: \n        Type: AWS::Logs::LogGroup \n        Properties: \n          LogGroupName: /var/log/secure \n          RetentionInDays: 7 \n      ExampleLogsMetricFilter: \n        Type: AWS::Logs::MetricFilter \n        Properties:  \n          FilterPattern: '\"Accepted publickey for ec2-user from\"' \n          LogGroupName: /var/log/secure \n          MetricTransformations: \n            -  \n              MetricValue: \"1\" \n              MetricNamespace: SSH/Logins \n              MetricName: LoginCount \n        DependsOn: ExampleLogGroup\n\n```", "```\n      ExampleLoginAlarm: \n        Type: AWS::CloudWatch::Alarm \n        Properties: \n          AlarmDescription: SSH Login Alarm \n          AlarmActions: \n          - Ref: ExampleSNSTopic \n          MetricName: LoginCount \n          Namespace: SSH/Logins \n          Statistic: Sum \n          Period: 60 \n          EvaluationPeriods: 1 \n          Threshold: 0 \n          ComparisonOperator: GreaterThanThreshold\n\n```", "```\n      Outputs: \n        ExampleEC2InstancePublicIp: \n          Value: !GetAtt [ ExampleEC2Instance, PublicIp ]\n\n```", "```\n aws cloudformation create-stack \\ \n --template-body \\\n        file://05-feed-log-files-in-to-cloudwatch-logs.yaml \\ \n --stack-name example-cloudwatchlogs \\ \n --capabilities CAPABILITY_IAM \\ \n --parameters \\ \n ParameterKey=VpcId,ParameterValue=<your-vpc-id> \\ \n ParameterKey=SubnetIDs,ParameterValue='<your-subnet-id>' \\ \n ParameterKey=KeyPair,ParameterValue=<your-ssh-key-name> \\ \n ParameterKey=AlertEmail,ParameterValue=<your-email-address>\n\n```", "```\n      log_group_name = /var/log/secure \n      log_stream_name = {instance_id}\n\n```", "```\n      log_group_name = /var/log/messages \n      log_stream_name = {instance_id}\n\n```"]