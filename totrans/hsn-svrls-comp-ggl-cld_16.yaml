- en: Consuming Third-Party Data via a REST API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 REST API 获取第三方数据
- en: Previously, in [Chapter 11](20f050bc-5118-4170-b2a4-e6c280db6802.xhtml),*Building
    a* *PDF Conversion* *Servic**e*, we learned how to create a PDF service using
    Cloud Run. In this final chapter, we will turn the complexity up a gear in order
    to build a more complex example based on the Pet Theory case study. The requirement
    is to implement a serverless solution on Google Cloud using multiple services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](20f050bc-5118-4170-b2a4-e6c280db6802.xhtml)中，*构建一个* *PDF 转换* *服务*一节中，我们学习了如何使用
    Cloud Run 创建一个 PDF 服务。在本章的最后，我们将增加复杂性，基于 Pet Theory 案例研究构建一个更复杂的示例。要求是在 Google
    Cloud 上使用多个服务实现一个无服务器解决方案。
- en: Through this chapter, your knowledge of serverless workloads and the experience
    required for real-world enterprise products will be challenged. By the end of
    it, a real-world application will be created that demonstrates the key aspects
    of serverless workloads on the Google Cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的学习，您对无服务器工作负载的知识以及实现真实世界企业产品所需的经验将面临挑战。到本章结束时，将创建一个真实世界的应用程序，展示在 Google
    Cloud 上无服务器工作负载的关键方面。
- en: 'Over the course of this chapter, we will discuss the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: An overview of the Pet Theory case study
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pet Theory 案例研究概述
- en: Designing a lab report solution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计实验室报告解决方案
- en: Developing the lab solution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发实验室解决方案
- en: Email SMS communication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件和短信通信
- en: The continuous integration workflow
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成工作流程
- en: Testing a lab service
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试实验室服务
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete the exercises in this chapter, you will require a Google Cloud project
    or a Qwiklabs account.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章的练习，您将需要一个 Google Cloud 项目或一个 Qwiklabs 账户。
- en: You can find all the code files for this chapter in the GitHub repository for
    this book, under the `ch12` subdirectory, at [https://github.com/PacktPublishing/Hands-on-Serverless-Computing-with-Google-Cloud/tree/master/ch12](https://github.com/PacktPublishing/Hands-on-Serverless-Computing-with-Google-Cloud/tree/master/ch12).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的 GitHub 仓库中找到本章的所有代码文件，位于 `ch12` 子目录下，链接为：[https://github.com/PacktPublishing/Hands-on-Serverless-Computing-with-Google-Cloud/tree/master/ch12](https://github.com/PacktPublishing/Hands-on-Serverless-Computing-with-Google-Cloud/tree/master/ch12)。
- en: While you are going through the code snippets in this book, you will notice
    that, in a few instances, a few lines from the code/output have been removed and
    replaced with dots (`...`). The use of ellipses is only to show relevant code/output.
    The complete code is available on GitHub at the previously mentioned link.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当您浏览本书中的代码片段时，您会注意到，在一些实例中，部分代码/输出行已被删除并用省略号（`...`）替代。使用省略号仅是为了展示相关的代码/输出，完整代码可在
    GitHub 上的前面提到的链接中找到。
- en: An overview of the Pet Theory case study
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pet Theory 案例研究概述
- en: As per the previous chapter, our case study is based on the Pet Theory veterinary
    practice. The full Pet Theory case study incorporates a number of different scenarios
    that demonstrate how you can resolve typical real-world issues with serverless
    technology. To view the complete scenario, visit the Qwiklabs website and reference
    the Pet Theory Quest in order to see the associated labs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前一章的内容，我们的案例研究基于 Pet Theory 兽医诊所。完整的 Pet Theory 案例研究包括多个不同的场景，展示了如何使用无服务器技术解决典型的真实世界问题。要查看完整的场景，请访问
    Qwiklabs 网站，并参考 Pet Theory Quest，以查看相关的实验室。
- en: In this exercise, the Pet Theory management team has expressed their concern
    regarding the level of manual effort that is required to process lab reports.
    Currently, clinical reports sent from third-party labs are received electronically
    and are then manually processed by the internal admin team. The process of managing
    the report is effectively to download the information and add it to a report that
    is then communicated to the pet owner via email or SMS. Since the veterinary practice
    has become more and more successful, the number of reports associated with this
    process has become unmanageable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次练习中，Pet Theory 管理团队表达了他们对处理实验室报告所需人工工作量的担忧。目前，来自第三方实验室的临床报告以电子方式接收，然后由内部管理团队手动处理。报告的管理过程实际上是下载信息并将其添加到报告中，随后通过电子邮件或短信与宠物主人沟通。由于兽医诊所越来越成功，涉及该过程的报告数量已变得难以管理。
- en: To resolve the issue relating to processing lab reports, it has been proposed
    that a proof of concept should be built. The initial revision should demonstrate
    how to automate processing the lab reports that are received and also the distribution
    of report information.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决与处理实验室报告相关的问题，提出应构建一个概念验证。初步修订应展示如何自动化处理接收到的实验室报告，并分发报告信息。
- en: To begin our review, we will outline, at a high level, what the proposed architecture
    should achieve and the associated component roles and requirements.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始我们的审查，我们将概述一下提议的架构应实现的目标以及相关组件的角色和要求。
- en: Designing a lab report solution
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计实验室报告解决方案
- en: In this scenario, the Pet Theory team is keen to explore how they can use serverless
    technologies to automate the receiving and processing of lab results. Lab reports
    are currently received electronically and then have to be manually sent to clients.
    As per previous examples, the emphasis of the activities to be performed is to
    demonstrate how to replace existing tasks with minimum development effort. In
    addition to this, the components used should be loosely coupled so that further
    enhancements are straightforward to implement and do not require significant rework.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在此场景中，Pet Theory 团队希望探索如何使用无服务器技术自动化接收和处理实验室结果。目前，实验室报告是以电子方式接收的，然后必须手动发送给客户。根据之前的示例，执行的活动重点是展示如何用最少的开发工作替换现有任务。此外，所使用的组件应该是松耦合的，以便于进一步的增强，且无需大量返工。
- en: 'In terms of the requirements stated, the Pet Theory team has decided they need
    a system capable of the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 根据已声明的需求，Pet Theory 团队已决定他们需要一个能够满足以下要求的系统：
- en: '| **Requirement** | **Service** |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **需求** | **服务** |'
- en: '| Report collation | Reporting |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 报告整理 | 报告 |'
- en: '| Message handling | Message |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 消息处理 | 消息 |'
- en: '| Email communication | Email |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 电子邮件通信 | 电子邮件 |'
- en: '| SMS communication | SMS |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 短信通信 | 短信 |'
- en: '| Test data capture | Test |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 测试数据捕获 | 测试 |'
- en: Let's add to our understanding by describing each requirement.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过描述每个需求来加深理解。
- en: Report collation
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告整理
- en: Lab reports are sent directly to the Pet Theory web endpoint using an HTTP(S)
    POST command. The information received utilizes the JSON format and the external
    application has already agreed on the content for the message communicated.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 实验室报告通过 HTTP(S) POST 命令直接发送到 Pet Theory 的 Web 端点。接收到的信息采用 JSON 格式，外部应用程序已就传递的消息内容达成一致。
- en: Both Cloud Run and Cloud Functions provide the ability to consume web endpoints.
    Apart from consuming messages, a reporting service also needs to be capable of
    propagating the message to downstream services.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Run 和 Cloud Functions 都提供了消费 Web 端点的能力。除了消费消息外，报告服务还需要能够将消息传播到下游服务。
- en: Message handling
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息处理
- en: Pet Theory has experienced a similar requirement for the lab, which was discussed
    in [Chapter 11](20f050bc-5118-4170-b2a4-e6c280db6802.xhtml), *Building a PDF Conversion
    Service*. In that example, the sender and receiver used asynchronous messaging
    via Cloud Pub/Sub to achieve their aim.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Pet Theory 已经遇到过类似的实验室需求，该需求在[第 11 章](20f050bc-5118-4170-b2a4-e6c280db6802.xhtml)中有所讨论，*构建
    PDF 转换服务*。在那个例子中，发送者和接收者通过 Cloud Pub/Sub 使用异步消息传递来实现他们的目标。
- en: In this situation, lab reports are to be delivered to email and SMS services
    for further processing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，实验室报告将被传送到电子邮件和短信服务进行进一步处理。
- en: Email communication
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件通信
- en: The email service represents a new requirement and delivers the ability to communicate
    with clients using an existing email solution. Information is to be passed to
    this component via a Cloud Pub/Sub subscription.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件服务代表了一项新需求，能够使用现有的电子邮件解决方案与客户沟通。信息将通过 Cloud Pub/Sub 订阅传递给该组件。
- en: SMS communication
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短信通信
- en: Similar to email communication, the SMS component offers an alternative way
    to communicate with clients when receiving test results.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于电子邮件通信，短信组件提供了一种在接收测试结果时与客户沟通的替代方式。
- en: 'Now that we have a shared understanding of the key components of the architecture,
    the elements necessary for building the solution should be clearer. From an overview
    perspective, our solution architecture can be described with the following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对架构的关键组成部分有了共同的理解，构建解决方案所需的要素应该更加清晰。从概览角度来看，我们的解决方案架构可以通过以下步骤描述：
- en: A JSON formatted lab report is submitted to the Pet Theory HTTP(S) endpoint.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一份 JSON 格式的实验室报告被提交到 Pet Theory 的 HTTP(S) 端点。
- en: A report service consumes the JSON message.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个报告服务消费该 JSON 消息。
- en: The lab information in the JSON message is published to a Cloud Pub/Sub topic.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSON 消息中的实验信息发布到 Cloud Pub/Sub 主题。
- en: A subscription notification is received by the email service.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个订阅通知被电子邮件服务接收。
- en: A subscription notification is received by the SMS service.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个订阅通知被 SMS 服务接收。
- en: 'In addition, we can see that the following components are required:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以看到以下组件是必需的：
- en: '![](img/85e5fe08-d707-422a-b10e-e0d7899f5545.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85e5fe08-d707-422a-b10e-e0d7899f5545.png)'
- en: It is important to note that there are many other ways to resolve the requirements
    outlined here.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，还有许多其他方式可以解决这里概述的需求。
- en: In the preceding diagram, we have defined a number of components to meet our
    initial requirements. Remember that Pet Theory is a small organization, so it
    will not want to incur development costs unnecessarily.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，我们定义了多个组件以满足我们的初步需求。记住，Pet Theory 是一个小型组织，因此它不会想要不必要地承担开发成本。
- en: In this example, we are going to implement multiple services, each of which
    will perform a specific task. As such, later in this exercise, we will look at
    how to test the individual components by enhancing them to write a status update
    within a document.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将实现多个服务，每个服务将执行特定的任务。因此，在本练习后期，我们将查看如何通过增强它们来测试各个组件，以便在文档中写入状态更新。
- en: Based on what we've just covered, we now have a general understanding of the
    lab report solution for processing reports submitted to our service. In the next
    section, we will start to look at the practical elements of developing the solution
    in order to fulfill the requirements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 基于我们刚刚覆盖的内容，我们现在对处理提交到我们服务的报告的实验报告解决方案有了一个大致的理解。在接下来的章节中，我们将开始查看开发解决方案的实际要素，以满足需求。
- en: Developing the lab solution
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发实验解决方案
- en: Several advanced topics will be covered in this chapter; so, having worked through
    the examples presented in prior chapters is highly recommended. Over the course
    of the previous chapters, knowledge of Google Cloud and its serverless product
    portfolio has been presented in order to guide you on this journey.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖一些高级主题，因此强烈建议先完成前几章中呈现的示例。在之前的章节中，已介绍了 Google Cloud 及其无服务器产品组合，以帮助你完成此过程。
- en: Using your Google Cloud account, open the Cloud Shell and make sure that a clone
    of the lab repository for `Chap12` is accessible.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的 Google Cloud 账户，打开 Cloud Shell，并确保可以访问`Chap12`实验仓库的克隆。
- en: Unlike the earlier chapters, some activities will not be covered in detail.
    Instead, this chapter is devoted to bringing together a skeleton solution that
    illustrates how to construct an application to meet requirements. If you get stuck
    or need help, don't forget that you can consult the solution directory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面章节不同，本章不会详细介绍某些活动。相反，本章致力于汇总一个骨架解决方案，展示如何构建一个满足要求的应用程序。如果你遇到困难或需要帮助，别忘了可以查阅解决方案目录。
- en: Linking to Google Docs
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接到 Google Docs
- en: In addition to using a centralized service such as Stackdriver, we can also
    introduce alternative tooling. In this section, we will be demonstrating how to
    integrate Google Docs (specifically, Google Sheets).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用像 Stackdriver 这样的集中式服务外，我们还可以引入替代工具。在本节中，我们将演示如何集成 Google Docs（特别是 Google
    Sheets）。
- en: When you create a spreadsheet on Google Sheets, by default, only the creator
    has permission to read and write to the sheet. To allow the Cloud Run application
    access to the sheet, we need to provide it with access permissions. As you might
    have guessed, for this task, we will use a service account.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Google Sheets 中创建电子表格时，默认情况下，只有创建者有权限读取和写入该表格。为了允许 Cloud Run 应用程序访问该表格，我们需要授予它访问权限。正如你可能猜到的，对于这项任务，我们将使用服务账户。
- en: 'From Cloud Shell, we need to retrieve the name of the service account for our
    project:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Cloud Shell 中，我们需要检索我们项目的服务账户名称：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we can use that information to link to Google Docs:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用这些信息链接到 Google Docs：
- en: Create a new spreadsheet in Google Sheets (that is, [https://docs.google.com/spreadsheets](https://docs.google.com/spreadsheets)).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Google Sheets 中创建一个新的电子表格（即，[https://docs.google.com/spreadsheets](https://docs.google.com/spreadsheets)）。
- en: Click on the default spreadsheet name of `Untitled spreadsheet`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击默认电子表格名称`无标题电子表格`。
- en: Rename the spreadsheet to `Lab Results Status`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电子表格重命名为`实验结果状态`。
- en: Click on the Share button and enter the service account email address we retrieved
    previously.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击共享按钮，并输入我们之前检索到的服务账户电子邮件地址。
- en: 'Great! We now have a spreadsheet available that is linked to our service account
    project. To link our new spreadsheet with our services, we need to use the `SHEET-ID`
    variable. The `SHEET-ID` variable is a unique identifier for your document and
    is accessible by accessing the URL of the Google Sheet, as per the following example
    URL:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在有一个与我们的服务账户项目关联的电子表格。要将新的电子表格与我们的服务连接，我们需要使用`SHEET-ID`变量。`SHEET-ID`变量是文档的唯一标识符，可以通过访问Google
    Sheet的URL来获取，示例如下：
- en: '![](img/721cb22d-dee5-4c65-affa-bb120f0b3aad.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/721cb22d-dee5-4c65-affa-bb120f0b3aad.png)'
- en: From the preceding graphic, we can see the `SHEET-ID` has been clearly marked.
    Now, we need to incorporate that identifier into our application code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图示中，我们可以看到`SHEET-ID`已被清楚标出。现在，我们需要将该标识符整合到我们的应用程序代码中。
- en: 'Perform the following steps to access the spreadsheet using Cloud Run:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，以通过Cloud Run访问电子表格：
- en: Access the URL for the spreadsheet we created.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问我们创建的电子表格的URL。
- en: Copy the string that starts after `spreadsheets/d/` and ends before `/edit`,
    as shown in the preceding screenshot.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制从`spreadsheets/d/`之后开始，到`/edit`之前结束的字符串，如前面的截图所示。
- en: Now, go back to Cloud Shell and edit the file named `pet theory/lab05/common/sheet.js`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回Cloud Shell并编辑名为`pet theory/lab05/common/sheet.js`的文件。
- en: Replace the `SHEET-ID` variable with the value copied from the URL.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`SHEET-ID`变量替换为从URL复制的值。
- en: Excellent! Now, the spreadsheet can be accessed using our Cloud Run application.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！现在，可以使用我们的Cloud Run应用程序访问该电子表格。
- en: Report collation
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告整理
- en: 'From our prior discussion on the Lab Service architecture, we know that the
    initial service to be created relates to report collation. If we focus on the
    requirements for this stage of processing, we can see that we need to consume
    a JSON file that''s received from external sources:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们之前讨论的实验服务架构，我们知道要创建的第一个服务与报告整理相关。如果我们专注于此处理阶段的需求，可以看到我们需要处理一个从外部来源接收到的JSON文件：
- en: '![](img/fd57de1d-2e7d-43be-a64f-8daecb27330b.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd57de1d-2e7d-43be-a64f-8daecb27330b.png)'
- en: 'At this point in this exercise, let''s take the opportunity to create a Cloud
    Pub/Sub topic, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习的这个阶段，让我们利用这个机会创建一个Cloud Pub/Sub话题，如下所示：
- en: 'Run the following command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Cloud Pub/Sub topic will be used to communicate lab reports between the
    report collation service and backend email/SMS services.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Pub/Sub话题将用于在报告整理服务和后端电子邮件/SMS服务之间传递实验报告。
- en: 'Install the `npm` packages dependencies for the lab report:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装实验报告所需的`npm`包依赖：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Amend the `package.json` file to incorporate a `start` command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`package.json`文件，以包含一个`start`命令：
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create an `index.js` file with the following content:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`index.js`文件，内容如下：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Append the following content to `index.js`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容追加到`index.js`：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, in `index.js`, add the following function, and then close the file
    for editing:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`index.js`中添加以下函数，然后关闭文件进行编辑：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Copy across the `common` directory that includes the Google API''s code:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制包含Google API代码的`common`目录：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Take a moment to look at the `index.js` source code, taking note of the following
    elements:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等片刻，查看`index.js`源代码，并注意以下元素：
- en: The `request.body` property represents the lab report to be processed.
  id: totrans-94
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request.body`属性表示要处理的实验报告。'
- en: The schema associated with the lab report is not required at this point.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此时不需要与实验报告相关的模式。
- en: The data from the lab report is added to a Cloud Pub/Sub topic named `new-lab-report`.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验报告的数据被添加到名为`new-lab-report`的Cloud Pub/Sub话题中。
- en: Once the topic has been published, the service returns an HTTP status code of
    204 (that is, successful but no data to return).
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦话题发布，服务返回HTTP状态码204（即，成功但没有数据返回）。
- en: If an error occurs, an HTTP status code of 500 (a server error) is returned.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发生错误，将返回HTTP状态码500（服务器错误）。
- en: Besides the Node.js source code for the report service, we also require a Dockerfile
    to be created in the same directory.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 除了报告服务的Node.js源代码外，我们还需要在相同目录下创建一个Dockerfile。
- en: 'Create a Dockerfile, as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建如下的Dockerfile：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The content of this manifest should, at this stage, be familiar and require
    no further explanation. We will deploy the manifest later in this exercise when
    we discuss component deployment.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此清单的内容在此阶段应该已经熟悉，无需进一步解释。当我们在后续步骤中讨论组件部署时，我们将部署该清单。
- en: Congratulations! The code definition for a report service capable of consuming
    external lab reports is available and ready to be deployed. A Cloud Pub/Sub has
    been provisioned and made ready to accept information that's received from external
    third parties.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！能够消费外部实验室报告的报告服务的代码定义已准备好并可以部署。一个Cloud Pub/Sub已被配置并准备好接收来自外部第三方的信息。
- en: Next, we will take a closer look at the email and SMS services and review the
    instructions associated with their implementation.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更仔细地查看电子邮件和短信服务，并回顾与其实现相关的说明。
- en: Email/SMS communication
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件/短信通信
- en: For the sake of brevity in our proof of concept, the email and SMS services
    will utilize a similar code base to demonstrate how background services can be
    designed within Google Cloud. While these components are meant to provide isolated
    services, in our example, we will use common code to demonstrate their functionality.
    In a real-world situation, the communication component presents an opportunity
    for a common code base to be replicated/extended for different solutions (for
    example, email, bots, SMSes, pagers, and more).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化概念验证，我们的电子邮件和短信服务将使用相似的代码库来演示如何在Google Cloud中设计后台服务。虽然这些组件旨在提供独立的服务，但在我们的示例中，我们将使用共享代码来演示它们的功能。在实际应用中，通信组件提供了一个机会，可以为不同的解决方案（例如，电子邮件、机器人、短信、寻呼机等）复制/扩展共享代码库。
- en: 'The Cloud Pub/Sub topic we previously created pushes the data to be consumed
    by the communication components. In this instance, the lab report data object
    represents a JSON file that is used to communicate lab results:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建的Cloud Pub/Sub主题将数据推送到通信组件进行消费。在这个实例中，实验室报告数据对象表示一个JSON文件，用于传递实验室结果：
- en: '![](img/c858700d-3281-42ef-8f3c-a04ac7d66f68.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c858700d-3281-42ef-8f3c-a04ac7d66f68.png)'
- en: It is worth pointing out that we have not actually referenced the data passed
    in the lab report, nor do we know the content schema being used. Instead, we treat
    it as a black box and, therefore, don't have any data validation to be performed
    on the content. Taking this step reduces the level of testing to be performed
    later on in the development cycle.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 值得指出的是，我们实际上并没有引用实验室报告中传递的数据，也不知道正在使用的内容架构。相反，我们将其视为一个黑盒，因此没有对内容进行数据验证。采取这一措施将减少开发周期后期需要执行的测试级别。
- en: 'In the context of Cloud Run message processing, this means the following processes
    are observed when using Cloud Pub/Sub:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cloud Run消息处理的背景下，使用Cloud Pub/Sub时，将会观察到以下过程：
- en: Cloud Pub/Sub maintains its responsibility for pushing messages.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Pub/Sub继续负责推送消息。
- en: The subscriber is responsible for consuming the messages.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅者负责消费消息。
- en: A service is aligned with the subscriber to accept the message payload.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个服务与订阅者对齐，接受消息负载。
- en: Once again, we are using techniques that should now be familiar, as these same
    design patterns are common when using Cloud Pub/Sub to interact between resources.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，我们正在使用的技术现在应该已经熟悉，因为这些设计模式在使用Cloud Pub/Sub进行资源间交互时是很常见的。
- en: Email
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件
- en: 'From the `email-service` directory, we need to perform a couple of activities.
    If you are unsure of the exact command, refer to the *Designing a lab report solution*
    section earlier in this chapter:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 从`email-service`目录开始，我们需要执行几个操作。如果你不确定具体的命令，请参考本章前面的*设计实验室报告解决方案*部分：
- en: Amend the `package.json` file to include a node start `index.js` statement.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`package.json`文件，加入一个启动`index.js`的node语句。
- en: Add package dependencies for `express`, `body-parser`, and `googleapis`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`express`、`body-parser`和`googleapis`的包依赖。
- en: 'Create an `index.js` file and populate it with the following code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`index.js`文件，并填入以下代码：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the `index.js` file and populate it with this additional code:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`index.js`文件，并填入以下额外代码：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Copy across the `common` directory that includes the Google API''s code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制包含Google API代码的`common`目录：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once more, take a moment to observe the `index.js` source code, taking note
    of the following key elements:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，花些时间观察`index.js`源代码，并注意以下关键要素：
- en: The `request.body` property translates the Cloud Pub/Sub message using `decodeBase64`.
  id: totrans-126
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request.body`属性通过`decodeBase64`解码Cloud Pub/Sub消息。'
- en: Data processing uses a `console.log` statement.
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据处理使用了`console.log`语句。
- en: The service returns an HTTP status code of `204` (that is, successful but no
    data to return).
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务返回一个HTTP状态码`204`（即成功，但没有数据返回）。
- en: If an error occurs, an HTTP status code of `500` (that is, an unsuccessful server
    error occurred) is returned.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发生错误，将返回`500`的HTTP状态码（即发生了不成功的服务器错误）。
- en: We also need a Dockerfile manifest that will be used later to build the image
    for the Node.js application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个Dockerfile清单，稍后将用于构建Node.js应用的镜像。
- en: Create a Dockerfile for a `Node.js` application.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Node.js`应用创建一个Dockerfile。
- en: Great! Let's move on.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们继续。
- en: SMS
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短信服务
- en: 'From the SMS service directory, we need to perform the same steps. If you are
    unsure of the exact command, reference to the Developing the *Lab solution* section
    earlier in this chapter:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在短信服务目录中，我们需要执行相同的步骤。如果你不确定具体命令，可以参考本章前面“开发*实验室解决方案*”部分的内容：
- en: Amend the `package.json` file to include a node start `index.js` statement.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`package.json`文件，加入一个用于启动`index.js`的Node语句。
- en: Add package dependencies for `express`, `body-parser`, and `googleapis`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`express`、`body-parser`和`googleapis`添加包依赖。
- en: 'Create an `index.js` file and populate it with the following code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`index.js`文件，并填入以下代码：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the `index.js` file and populate it with this additional code:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`index.js`文件，并填入以下附加代码：
- en: '[PRE13]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Copy across the `common` directory that includes the Google API''s code:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制包含Google API代码的`common`目录：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Add a Dockerfile manifest that will be used later to build the image for the
    Node.js application.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个Dockerfile清单，稍后将用于构建Node.js应用的镜像。
- en: Create a Dockerfile for a `Node.js` application.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Node.js`应用创建一个Dockerfile。
- en: Congratulations! The email and SMS services are now available and ready to be
    deployed. Now that we have looked at the general code base, we can move on to
    thinking about how to efficiently build the multiple components needed for this
    solution.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！电子邮件和短信服务现在已经可用，并准备好进行部署。现在我们已经看过了整体代码库，接下来可以考虑如何高效构建为这个解决方案所需的多个组件。
- en: The continuous integration workflow
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成工作流
- en: While building components, using a manual approach may seem like a good technique
    due to its implementation simplicity. In this chapter, we will automate this process.
    The reason for this is that there are multiple code bases that need to be built
    and deployed, which, if done manually, can result in unnecessary errors in the
    process.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建组件时，使用手动方法看似是一个不错的技巧，因为它实现简单。在本章中，我们将自动化这一过程。这样做的原因是需要构建和部署多个代码库，如果手动操作，可能会在过程中出现不必要的错误。
- en: Instead of a manual build, we turn our focus to a development tool to take care
    of this repetitive build and deploy process. In our project, we intend to use
    Cloud Build to manage the build workflow on Google Cloud. To use Cloud Build,
    it is worth understanding the actual process to be automated, since the configuration
    required will often be an approximation of the manual steps to be followed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将焦点转向一个开发工具，以处理这个重复的构建和部署过程，而不是使用手动构建。在我们的项目中，我们打算使用Cloud Build来管理Google Cloud上的构建工作流。要使用Cloud
    Build，理解实际需要自动化的过程非常重要，因为所需的配置通常只是手动步骤的近似。
- en: 'When working in this project, our developer workflow can be defined using the
    following steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们的开发人员工作流可以通过以下步骤来定义：
- en: A developer commits their code using `git`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发人员使用`git`提交他们的代码。
- en: Code commits are notified to Source Repositories.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码提交会通知源代码库。
- en: Cloud Build triggers when a matching pattern is found.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当匹配模式被找到时，Cloud Build会触发。
- en: If the build process fails, the developer is required to rectify the code (go
    to *step 1*).
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果构建过程失败，开发人员需要修正代码（返回到*第 1 步*）。
- en: If the build process succeeds, the image is added to the Container Registry.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果构建过程成功，镜像将被添加到容器注册中心。
- en: A **Quality Assurance** (**QA**) team member can then access the new image.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**质量保证**（**QA**）团队成员随后可以访问新的镜像。'
- en: As you can see, there are multiple steps involved in this process, and an error
    could potentially occur during any one of these stages. Introducing automation
    in this process can help to remediate any errors through consistency and also
    make the overall maintenance of the project more straightforward.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个过程涉及多个步骤，并且在任何一个阶段都可能发生错误。在这个过程中引入自动化可以通过一致性帮助修复任何错误，并使项目的整体维护更加简便。
- en: The defined steps provide a common approach to ensure building software can
    be achieved in an iterative manner. Using a development tool such as Cloud Build
    ensures that the build process remains both consistent and flexible and that the
    process is managed through an external build file. The build file can easily be
    shared between team members and means updates and build profiles can be managed
    under version control.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 已定义的步骤提供了一种常见方法，确保软件构建能够以迭代的方式进行。使用如 Cloud Build 这样的开发工具可以确保构建过程保持一致性和灵活性，并且该过程是通过外部构建文件进行管理的。构建文件可以轻松地在团队成员之间共享，并且意味着更新和构建配置可以在版本控制下进行管理。
- en: Developers are part of a continual feedback workflow based on their code commits,
    meaning they control code submissions and can also react directly to any issues.
    The initiation of the build process, based on a code commit, will feedback on
    the success or failure of the relevant component submitted.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员是基于代码提交的持续反馈工作流的一部分，这意味着他们控制代码提交，并且可以直接响应任何问题。构建过程的启动基于代码提交，反馈会告知相关组件提交的成功或失败。
- en: 'Take a look at the following diagram to see how this process could work in
    practice:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的图表，了解这个过程在实际操作中是如何工作的：
- en: '![](img/ee3ee395-38ea-496b-acb9-2c4c3219aa38.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee3ee395-38ea-496b-acb9-2c4c3219aa38.png)'
- en: Once the code component has been successfully built, it will be stored in the
    Container Registry. From here, the QA team members have access to the latest verified
    image and are able to test each of the images independently, without needing to
    refer to the development team. In this way, alternative versions such as dev,
    staging, and prod could be deployed and tested as different stage gates.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码组件成功构建，它将被存储在容器注册表中。此时，QA 团队成员可以访问最新的已验证镜像，并能够独立测试每个镜像，而无需参考开发团队。通过这种方式，替代版本如开发版、预发布版和生产版可以作为不同的阶段门进行部署和测试。
- en: Configuring Lab Service CI
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置实验服务 CI
- en: To understand how this process will be used in our example, we can create a
    configuration for Pet Theory based on a basic Cloud Build script.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这个过程如何应用于我们的示例，我们可以基于一个基本的 Cloud Build 脚本为 Pet Theory 创建一个配置。
- en: You can refer to the *Further reading* section at the end of this chapter for
    more information regarding account permissions.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考本章结尾的*进一步阅读*部分，获取关于账户权限的更多信息。
- en: 'To get started, go back to the `lab-service` directory. This is where we will
    create a basic Cloud Build configuration:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请返回到`lab-service`目录。这是我们将创建基本 Cloud Build 配置的地方：
- en: 'Create and edit a new `cloudbuild.yaml` file for `lab-service`:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`lab-service`创建并编辑一个新的`cloudbuild.yaml`文件：
- en: '[PRE15]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, we are going to set up Google Source Repositories for our project. We
    need to create a temporary repository in order to host our code and demonstrate
    some additional features of Google Cloud.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的项目设置 Google Source Repositories。我们需要创建一个临时仓库来托管我们的代码，并展示 Google Cloud
    的一些附加功能。
- en: 'Create a Cloud Source Repositories configuration:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Cloud Source Repositories 配置：
- en: '[PRE16]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Clone the newly created repository, noting you will need to supply your project
    identity as a parameter:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆新创建的仓库，请注意你需要提供你的项目身份作为参数：
- en: '[PRE17]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Copy across the subdirectories (that is, `email-service`, `sms-service`, `lab-service`,
    and `common`) to the new Google Source repository directory. Your new `pet-theory-test`
    directory should look like this:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将子目录（即`email-service`、`sms-service`、`lab-service`和`common`）复制到新的 Google Source
    仓库目录中。你的新`pet-theory-test`目录应该像这样：
- en: '[PRE18]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Check the status of the `git` directory to ensure you have the common `email-service`,
    `lab-service`, and `sms-service` subdirectories as untracked files:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`git`目录的状态，确保你有作为未跟踪文件的常见`email-service`、`lab-service`和`sms-service`子目录：
- en: '[PRE19]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the amended files to `git`:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将修改后的文件添加到`git`中：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Set up the email credentials using your email address:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的电子邮件地址设置电子邮件凭证：
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Set up the name credentials using your username:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的用户名设置名称凭证：
- en: '[PRE22]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add a commit message to the repository:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向仓库添加提交信息：
- en: '[PRE23]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Commit the code for the repository directly to the master branch:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码直接提交到主分支：
- en: '[PRE24]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Check the Cloud Source Repositories in the console to ensure the code is now
    available.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中检查 Cloud Source Repositories，以确保代码现在可用。
- en: Congratulations! Knowing how to use Cloud Source Repositories can save time
    when hosting code in Google Cloud. In general, being able to use a Git-based solution
    provides some assurance over the safety of code.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！了解如何使用 Cloud Source Repositories 可以在 Google Cloud 中托管代码时节省时间。通常，能够使用基于 Git
    的解决方案能更好地保障代码的安全性。
- en: Triggering Cloud Build
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发Cloud Build
- en: 'So, now that we have our code in Cloud Source Repositories, how do we get it
    to automatically build using the Google Cloud developer tools? To automatically
    build code on commit, we can use our old friend Cloud Build. For this example,
    we will use our `lab-service` directory to demonstrate the build process:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然我们已经将代码放入了Cloud Source Repositories，如何让它使用Google Cloud开发者工具自动构建呢？为了在提交时自动构建代码，我们可以使用我们的老朋友Cloud
    Build。为了演示构建过程，我们将使用`lab-service`目录：
- en: For this example, make sure that you are in the `pet-theory-test`/`lab-service`
    directory. The initial steps in Cloud Build requires the selection of a repository.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本示例，请确保您位于`pet-theory-test`/`lab-service`目录中。Cloud Build的初始步骤需要选择一个代码库。
- en: From the Cloud Console, access Cloud Build (located under the Developer Tools
    options).
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Cloud Console中访问Cloud Build（位于开发工具选项下）。
- en: Select the Triggers menu option and the Create Trigger option.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择触发器菜单选项和创建触发器选项。
- en: 'Set up the trigger using the following information:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下信息设置触发器：
- en: '| **Field** | **Value** |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **值** |'
- en: '| Name | `trigger-lab-service` |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | `trigger-lab-service` |'
- en: '| Description | `Push to the lab branch` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | `推送到lab分支` |'
- en: '| Trigger type | `Branch` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 触发器类型 | `Branch` |'
- en: '| Branch (regex) | `^([lL]ab)/\w+` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 分支（正则表达式） | `^([lL]ab)/\w+` |'
- en: '| Cloudbuild configuration | `lab-service/cloudbuild.yaml` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| Cloudbuild配置 | `lab-service/cloudbuild.yaml` |'
- en: '| Substitution variables | `N/A` |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 替代变量 | `N/A` |'
- en: Select the Create Trigger button at the bottom of the screen to enable the trigger.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择屏幕底部的创建触发器按钮来启用触发器。
- en: The regex branch in the Cloud Build trigger table is a common way of filtering
    which content should be built. In many instances, developers will want to only
    build a specific branch, and using regex helps to isolate particular branches.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Build触发器表中的正则表达式分支是过滤应构建内容的常见方式。在许多情况下，开发者只希望构建特定的分支，使用正则表达式有助于隔离特定的分支。
- en: 'To test the trigger has been successfully set up, commit a code change to the
    `lab-service` trigger. Follow these steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试触发器是否已成功设置，请向`lab-service`触发器提交代码更改。按照以下步骤操作：
- en: 'Add a comment to the `cloudbuild.yaml` file:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudbuild.yaml`文件中添加注释：
- en: '[PRE25]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the updated file to `git`:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更新后的文件添加到`git`：
- en: '[PRE26]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a commit message:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加提交信息：
- en: '[PRE27]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Push the change to Cloud Source Repositories:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到Cloud Source Repositories：
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the final command, we use a special regex command to indicate that the change
    refers to the `lab-service` trigger. When we set up the trigger, we used a regular
    expression to only look at branches that were labelled with `lab`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个命令中，我们使用了一个特殊的正则表达式命令，表示该更改与`lab-service`触发器相关。当我们设置触发器时，我们使用了正则表达式，只查看标记为`lab`的分支：
- en: '![](img/d6b20ae0-b5f8-4f50-b66e-bf7c031f3df0.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6b20ae0-b5f8-4f50-b66e-bf7c031f3df0.png)'
- en: Once the code has been committed, checking the Cloud Build History will indicate
    a new build job has commenced. After each Git commit to a branch, our components
    will automatically trigger a build process. Now that we know that the build configuration
    works correctly, let's roll out the same changes to the email and SMS directories.
    We will ensure each build is maintained on a separate branch to minimize the potential
    for code merging.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码提交，检查Cloud Build历史记录将显示新的构建任务已开始。在每次Git提交到一个分支后，我们的组件将自动触发构建过程。现在我们知道构建配置正常工作，让我们将相同的更改推广到电子邮件和SMS目录。我们将确保每个构建都保持在单独的分支上，以最小化代码合并的潜在问题。
- en: Triggering email and SMS
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发电子邮件和SMS
- en: 'As per the work we did with the `lab-service` trigger, we need to set up a
    Cloud Build trigger. However, this time, we can just duplicate the existing `lab-service`
    trigger:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们与`lab-service`触发器一起完成的工作，我们需要设置一个Cloud Build触发器。然而，这次我们可以简单地复制现有的`lab-service`触发器：
- en: In this example, we used a single repository for services. However, in the real
    world, this approach would not be optimal. Instead, I would suggest that a repository
    for each service is used for better code isolation.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们为服务使用了一个单独的代码库。然而，在实际应用中，这种方法并不理想。相反，我建议为每个服务使用一个独立的代码库，以便更好地隔离代码。
- en: '![](img/454ea543-1966-489f-9515-32fba1319e4d.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/454ea543-1966-489f-9515-32fba1319e4d.png)'
- en: 'To set up the trigger perform the following steps:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置触发器，请执行以下步骤：
- en: From the Cloud Console, access Cloud Build (located under the Developer Tools
    options).
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Cloud Console中访问Cloud Build（位于开发工具选项下）。
- en: Select the three-dot menu item to open the pop-up menu and select Duplicate.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择三点菜单项以打开弹出菜单，然后选择复制。
- en: Select the three-dot menu (of the newly created trigger) item to open the pop-up
    menu and select Edit.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up the trigger with the following information:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Field** | **Value** |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
- en: '| Name | `trigger-email-service` |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
- en: '| Description | `Push to the email branch` |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
- en: '| Trigger type | `Branch` |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: '| Branch (regex) | `^([eE]mail)/\w+` |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
- en: '| Cloudbuild configuration | `email-service`/`cloudbuild.yaml` |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
- en: '| Substitution variables | N/A |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
- en: Select the Save button at the bottom of the screen to enable the trigger.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, do exactly the same again; however, this time, create an SMS trigger using
    the following details:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Field** | **Value** |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
- en: '| Name | `trigger-sms-service` |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
- en: '| Description | `Push to the sms branch` |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
- en: '| Trigger type | `Branch` |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
- en: '| Branch (regex) | `^([sS]ms)/\w+` |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
- en: '| Cloudbuild configuration | `sms-service`/`cloudbuild.yaml` |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
- en: '| Substitution variables | N/A |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
- en: Select the Save button at the bottom of the screen to enable the trigger.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having created three triggers, the Cloud Build screen should look similar to
    the following screenshot:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ffe261c-3c94-4a30-beb9-4fdcada44282.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
- en: Each of these triggers operates in isolation using a different branch to signify
    work that's been performed on a specific service. Thanks to our regex filter,
    each branch will be checked and a new build job will be created when code is committed
    to the repository. To make this work, we need to add the `cloudbuild.yaml` file
    to the email and SMS directories to initiate the build process.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create some configurations using `cloudbuild.yaml`:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `email-service` directory, create a new `cloudbuild.yaml` file containing
    the following:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you do not remember how to perform any of these actions in Git, you can review
    the earlier examples on how to use Google Source Repositories. The commands are
    similar; we are just working on a different branch.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Create a new branch in `git` called `email/fix-1`.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `git` to add the updated `cloudbuild.yaml` file to the `email/fix-1` branch.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a commit message: `Initial revision - email/fix-1`.'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the `email/fix-1` branch code to the repository.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `sms-service` directory, create a new `cloudbuild.yaml` file containing
    the following:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Create a new branch in `git` called `sms/fix-1`.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `git` to add the updated `cloudbuild.yaml` file to the `sms/fix-1` branch.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a commit message: `Initial revision - sms/fix-1`.'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the `sms/fix-1` branch code to the repository.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pushing the final piece of code automatically initiates Cloud Build and the
    associated three-stage script.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! Using Cloud Build for build process automation increases developer
    productivity. Now that we have integrated a component-based build capability,
    we can move on and look at how to test the multiple components for this solution.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Testing a lab service
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technically, if you need to log information, the correct answer is typically
    Stackdriver as it is already integrated into Google Cloud. However, there are
    instances where you may need an alternative solution – such as in this scenario,
    in which a quick and easy method of checking the services is required.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: In this test section, rather than utilizing *Logging* to a centralized system
    such as Stackdriver, we will be posting our data to a Google Sheet. An approach
    such as this can be a very handy technique to know, so it is worth incorporating
    it into our solution to demonstrate how this is achieved.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'From a high level, the following process is applicable to the test service:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Write information to sheets
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application Audit
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vulnerability Fix
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following diagram in order to understand the components
    involved in this solution:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f612b6a-d9f0-4058-b840-f5606adc2196.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding diagram, we add a new service component to the existing code
    to log information into a Google spreadsheet. Being able to demonstrate the resilience
    of the solution is a handy feature in order to build into our proof of concept.
    The spreadsheet will be completed by the service; so, if it is working successfully,
    the output will be indicated in the spreadsheet. If the service is unavailable
    for some reason, then an alternative status message is written for the service
    that is unable to complete the task:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0edb504-84bb-436b-adde-80864376f08e.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
- en: The spreadsheet is dynamically linked to each of the services and writes a message
    to a spreadsheet cell when invoked by a service. The new component will provide
    a straightforward method to test each service in isolation and show whether a
    service component is operating to specification. As we now have a description
    of the service and properties, we can begin developing the code base to deliver
    against requirements.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the credentials
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll begin by accessing the Compute Engine service account:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'List the service accounts associated with the project:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Copy the Compute Engine service account email address listed.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new Google Sheets document.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the sheet to `Lab Results Status`.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Share button and add the Compute Engine service account email with
    full edit rights.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to set up the email Cloud Pub/Sub subscription.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the email Cloud Pub/Sub subscription
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up the email Cloud Pub/Sub subscription, follow these simple steps:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a service account with invoking privileges:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Give the service account permissions to invoke the email service:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Get the Google Cloud project number:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a role binding of `serviceAccountTokenCreator` using the `PROJECT_NUMBER`
    environment variable:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Get the `EMAIL_URL` endpoint for the email service:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create the Cloud Pub/Sub subscription:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Great work! We have now set up email subscriptions for Cloud Pub/Sub. Next,
    we need to repeat the process for SMS subscriptions.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the SMS Cloud Pub/Sub subscription
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up the SMS Cloud Pub/Sub subscription, complete the following steps:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a role binding of `run.invoker`:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Get the `SMS_URL` endpoint for the `sms-service`:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create the Cloud Pub/Sub subscription:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Fantastic! We have now set up both subscriptions for Cloud Pub/Sub. Next, we
    need to test our services.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Testing the service
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it''s time to test the service. To do this, follow these steps:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the `LAB_URL` endpoint for the `lab-service`:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Post some data to the lab report service:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the following screenshot, you can see the result of posting information
    to the lab service:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c01b7d4-4f0b-4859-99cf-81e0109f30ef.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
- en: Congratulations! The application is now responding to external stimuli.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: To test our service for resilience, we need to add an error that will mean the
    service will not be able to process information. For this example, we will use
    the email service to introduce an error.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to the `ch12/email-service` subdirectory and edit the `index.js` source
    code – add the erroneous `oops` line entry:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Entering the invalid code will ensure the service will not be able to complete
    successfully when invoked.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit the updated `email-service` code.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code will be automatically built, pushed to the registry, and deployed.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when the application is run, the email service will be unable to complete
    as the erroneous line entry, `oops`, stops the service from working correctly.
    Consequentially, no entries will be written in the spreadsheet. To validate this,
    check the Stackdriver logs to see that an error is shown relating to the defect
    entered.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Finally, correct the source file to remove the code defect to resume normal
    service and have the information successfully logged to the spreadsheet.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! We have now successfully concluded testing the various components.
    We will now provide an overview of this chapter's contents.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the course of this final chapter, we built an application to consume external
    information based on JSON. To our credit, we used a scalable and resilient mechanism
    to handle messaging so that retries occur seamlessly. We also learned how to incorporate
    Google Sheets to output information. A new technique like this has many applications
    and will prove useful time and time again. To complete our application, we also
    looked at developer productivity so that we can use tools such as Cloud Build
    when building multiple components.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, you have learned how to integrate with Google APIs,
    initiate Cloud Pub/Sub, and consume JSON information from external services. Learning
    how to aggregate services is part and parcel of working with serverless on Google
    Cloud. For example, achieving scalable application messaging is simple when using
    Cloud Pub/Sub. Each of the patterns that's been used over the previous chapters
    can easily be enhanced for your own projects. Hopefully, you will be able to create
    the next big thing or encourage your colleagues to build even more awesome products
    on Google Cloud.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What products can be used for asynchronous messaging on Google Cloud?
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you name some notifications supported by Google Cloud Storage?
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are there beta commands for the GCloud SDK?
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is regex and why is it useful for creating triggers for branch names?
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloud Source Repositories are project-based. (True or False)
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If I wanted to invoke rate limiting on messages, I would use Cloud Tasks over
    Cloud Pub/Sub. (True or False)
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where would I be able to see HTTP latency associated with a Cloud Run application?
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Deploying builds**: [https://cloud.google.com/cloud-build/docs/deploying-builds/deploy-cloud-run](https://cloud.google.com/cloud-build/docs/deploying-builds/deploy-cloud-run)'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Docs**: [https://www.google.co.uk/docs/about/](https://www.google.co.uk/docs/about/)'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stackdriver**: [https://cloud.google.com/stackdriver/](https://cloud.google.com/stackdriver/)'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud Run API**: [https://cloud.google.com/run/docs/reference/rest/](https://cloud.google.com/run/docs/reference/rest/)'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Troubleshooting Cloud Run – fully managed**: [https://cloud.google.com/run/docs/troubleshooting](https://cloud.google.com/run/docs/troubleshooting)'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stackoverflow [google-cloud-run]**: [https://stackoverflow.com/questions/tagged/google-cloud-run](https://stackoverflow.com/questions/tagged/google-cloud-run)'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
