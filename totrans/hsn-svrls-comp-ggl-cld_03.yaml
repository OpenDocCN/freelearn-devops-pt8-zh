- en: Developing with App Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working on Google Cloud, you will naturally require access to a cloud environment.
    In the upcoming chapters, we will learn how to build App Engine applications that
    reside in Google Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: As we now have a good understanding of the various components that make up a
    **Google App Engine** (**GAE**) environment, in this chapter we will look at how
    to use GAE to engineer applications that meet defined requirements. We will begin
    by building a simple app to demonstrate the process of deploying code on App Engine.
    We will then learn how to perform application updates. Finally, we will explore
    how to use the features of Stackdriver Logging to assist with the analysis of
    defects. All of these lessons will be accompanied by examples and activities so
    that you can apply these GAE concepts and principles on your own.
  prefs: []
  type: TYPE_NORMAL
- en: GAE supports a number of language runtimes; in this chapter, we will utilize
    Python to demonstrate Google Cloud's capabilities. Working with different languages
    can be intimidating; however, the purpose of this chapter is not to teach you
    Python, but rather to explore using GAE in different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Building an application on GAE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding deployment strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting App Engine deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an application on GAE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, we will consider what tools and assets we need to commence building
    our first GAE example application.
  prefs: []
  type: TYPE_NORMAL
- en: For this section, we will be taking our source code and deploying it on GAE.
    As part of this process, we will explore the application structure and how this
    relates to the deployed system. While using the code, we will observe what information
    is available and displayed within Google's Cloud Console.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, we will look at deploying the application (to discuss what
    is meant by the default version), how this relates to code, and deploying multiple
    versions. Finally, we will perform a rollback on the system code deployed to illustrate
    accomplishing this task and what it means in terms of available versions. But
    first, let's learn about the Qwiklabs environment that we will be using in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Qwiklabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qwiklabs ([https://qwiklabs.com](https://qwiklabs.com)) provides a Cloud sandbox
    in which Google Cloud projects can run. The aim of using an environment such as
    Qwiklabs is to give you a close representation of real-world tools and services.
    A transient Google Cloud account, to facilitate this process, assigns a time-restricted
    sandbox environment. Once created, the Google Cloud project will provide you with
    access to all of the relevant access permissions and services that you can expect
    in a project that has been provisioned in a typical manner.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will assume you have either registered on Google Cloud or have a valid Qwiklabs
    account that enables you to access a Google Cloud sandbox environment. Feel free
    to follow along without an account, but it will be more interesting if you can
    join in the exercises as we discuss them.
  prefs: []
  type: TYPE_NORMAL
- en: Our first look at Google's Cloud Console might seem intimidating; however, the
    interface provides an excellent way to navigate the numerous services on offer.
    Launch App Engine from the left-hand navigation menu, and we will take a tour
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To commence development, let''s use the existing App Engine code provided by
    Google to understand how a basic application should appear. To do this, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Google Cloud account, select the App Engine menu item to begin creating
    an application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The initial screen will be displayed, called the **Dashboard**, and from here
    you can see an aggregation of all things associated with App Engine; for example,
    services, task queues, and firewall rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now select the Create Application button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2627beed-3b60-4665-ba49-8e76d6723789.png)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we need to decide is which region our application will reside
    in. Let's take a look at how to do this next.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a region
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking at the following onscreen list, it is clear that there are many options
    available. Typically considered the standard practice is to select a region as
    close as possible to where the data is to be accessed. In this example, that criterion
    won''t apply for our demonstration, so perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose us-east1 as the region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Create app button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/25b7c74a-1a0e-46cb-a47e-99fef39cd38f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we need to decide which language runtime we are going to use.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a language runtime and environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our first simple example, we will use the Python runtime. To do this, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Language drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the various languages that appear, click on Python.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Environment drop-down list, select Standard (this is the default option,
    but it can also be changed later in the development cycle):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/562d78fd-64ec-4357-a6c0-f624550f179d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Be aware that there are multiple language runtimes available. If you are unfamiliar
    with Python, don''t worry: its layout and features are very accessible. In most
    instances, using an alternative language will follow the same process we''ve outlined;
    however, the language specification will be different from that described for
    the Python example.'
  prefs: []
  type: TYPE_NORMAL
- en: Once completed, we can explore using the **Google Cloud SDK** (**GCloud SDK**).
  prefs: []
  type: TYPE_NORMAL
- en: Working with the GCloud SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The GCloud SDK provides a simple way to authenticate against Google Cloud.
    Having the SDK available locally (that is, local to your environment) provides
    significant benefits, so it is an excellent option to include if you wish to integrate
    with other Google Cloud services:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the App Engine menu option from the left-hand side of Google's Cloud
    Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following screen, we will need to choose the required resources for
    our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/881f1335-1f87-4583-96c4-65661ffdfa64.png)'
  prefs: []
  type: TYPE_IMG
- en: We will not be needing the Cloud SDK, as we will be using Cloud Shell, which
    includes a preloaded cloud SDK. So skip this screen by selecting the I'LL DO THIS
    LATER option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the preceding deployment screen, you will also be given a command-line
    prompt to deploy code using `gcloud` commands. Learning how to use the `gcloud
    sdk` command to perform different tasks is highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations! At this point, you have successfully created your first GAE
    application on Google Cloud. As you can see, this process is pretty simple and
    is aimed at ensuring developers minimize the time necessary for infrastructure
    management:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c720933f-258d-493f-b73c-b7329abd6f76.png)'
  prefs: []
  type: TYPE_IMG
- en: Take a moment to remember that, for each application created, a similar process
    to create your infrastructure will be required. As you can see, there is nothing
    complicated about this process; on successful completion, it produces an important
    message that indicates the overall status.
  prefs: []
  type: TYPE_NORMAL
- en: Building and deploying a sample application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will deploy a standard `Hello World` application to GAE.
    Luckily, the engineers at Google have our back, and we can use some sample code.
    For the next build and deploy stage in this process, we will examine this sample
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To commence the process, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Cloud Shell window in your project and clone the sample code for App
    Engine from the Google Cloud repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you ever need to code an application on Google Cloud, it is more efficient
    to check the Google sample repository first to see whether the sample code exists
    as a template.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the open Cloud Shell window, enter the following on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The code location is in a directory named `hello_world`. So, enter the following
    to move to the correct source directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have some source code available, let''s investigate what is in
    this directory by performing a directory listing from the Cloud Shell prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Notably, there are two Python files and the `app.yaml` file. A structure such
    as this is common, so it''s worth outlining what these files do:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Filename** | **Purpose** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `main.py` | Application | This file, written in Python, represents the source
    code to be run, and outputs a `Hello, World!` message to the user. |'
  prefs: []
  type: TYPE_TB
- en: '| `main_test.py` | Unit testing | This file is a test case for the main source
    file to ensure a managed response is returned as expected. |'
  prefs: []
  type: TYPE_TB
- en: '| `app.yaml` | Configuration | This file is the configuration file for the
    application. The contents of the data include a reference to the language runtime,
    API version, and URL to be accessed. |'
  prefs: []
  type: TYPE_TB
- en: 'To deploy the source code to GAE, enter the following on the Cloud Shell command
    line to use your code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As the deployment command processes configuration information, on completion
    it will provide a URL from which you can access the running application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43286884-5499-4a7c-aef7-82eebb242ba8.png)'
  prefs: []
  type: TYPE_IMG
- en: To view the application deployed use `gcloud app browse` from Cloud Shell or
    use the App Engine Dashboard to see the assigned URL.
  prefs: []
  type: TYPE_NORMAL
- en: Once App Engine has completed its deployment, the application is accessible
    from the browser. Typically the URL to access your deployed application will be
    in the form `[PROJECT_ID].appspot.com`. If you have used a custom domain, the
    `PROJECT ID` section will be replaced with the custom domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Access this URL via the browser; this should display the `Hello, World!` message
    from our application, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2802f45e-f385-4a94-b133-f2d28b472319.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now take a look at the updated GAE dashboard to observe what changes are apparent
    once the application is deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/272a77c6-f9a9-49ff-af2e-b622fa10d617.png)'
  prefs: []
  type: TYPE_IMG
- en: From the dashboard, we can see all the relevant telemetry for our application.
    We now have an excellent working knowledge of GAE and how to deploy a simple application
    on Google Cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great job! We have gone through a lot of information quickly, so let's slow
    down a little and recap what we have learned so far in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Hello World!` example, we learned about the following aspects of deploying
    code on GAE:'
  prefs: []
  type: TYPE_NORMAL
- en: We looked at how to create a simple GAE application; we did this using the Google
    Cloud console to initiate the build and deploy process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We saw there were multiple regions available and where this information can
    be accessed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We selected a GAE Standard environment and the Python language runtime for our
    application, noting that we can also use alternatives if desired.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We cloned the Google Cloud repository to gain access to some Python-based example
    code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We explored the system within the catalog and saw that we have three files available,
    taking the time to outline the purpose of each of the source files used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we deployed our code via Cloud Shell and accessed the running application
    via a browser interface from the URL presented on completion of the deployment
    process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you have seen in this first section on App Engine, it is a very straightforward
    process to deploy code. Within this environment, working with GAE provides a level
    of simplicity that developers crave.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to avoid infrastructure management overhead can significantly improve
    efficiency and lends itself to a greater emphasis on specific development activities.
    Throughout the next section, we will explore how GAE handles various deployment
    strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding deployment strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GAE allows new versions to deploy and more besides, performing more complex
    operations such as traffic splitting. As we have already deployed a simple application
    from the command line, let's continue with this code base and look at how to implement
    a new version using the GAE management console.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the mechanism behind the GAE console used to control the flow
    of code is invaluable. Being able to deploy a new system via a rollout provides
    a good layer of control over the application environment. Taking this to the next
    level, we can also split traffic between versions to perform sophisticated A/B
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Back in the Cloud Shell, still working with our source code, we will edit the
    `main.py` file and change the message to read as follows: `Hello, Serverless World!`.
    These simple changes will represent our new version of the application.'
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud Shell also includes a code editor based on Eclipse Orion to perform
    straightforward file edits. The inclusion of this editor can be tremendously helpful
    for situations where you need to view files within a project. Alternatively, Cloud
    Shell also includes other editors (for example, Vim and Nano), so feel free to
    use something that reflects your personal preference.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, you will have noticed that, after editing our source
    file, we then used the GCloud SDK to deploy the code. Now that we have amended
    the source code, follow the same process again:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Cloud Shell, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A new application version has been deployed without needing any additional work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look back at the Google Cloud Console and the Versions menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can see that a new version of the application has been deployed and is available
    from the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8f5c6ea-dac2-44b8-843e-e63109bf4d5e.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that, in the preceding output, the traffic allocation has automatically
    switched to the new version. This behavior is acceptable in most situations; however,
    if you don't want the traffic to be automatically promoted to the latest version
    for the deployment of new code, use the `--no-promote` flag option.
  prefs: []
  type: TYPE_NORMAL
- en: Observe that the version string used represents a timestamp for the application.
    Additionally, both versions of the application remain easily accessible from the
    console—the default version tracks which revision traffic used. If you wish to
    switch to a specific version string, you can specify this as part of the deploy
    process using the `--version` flag option.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you might want to contrast this simple deployment process with
    a typical infrastructure project where this ease of use is not as apparent. The
    ease with which GAE is deployed is stunningly effortless and exquisitely modeled
    so it only exposes an element of the development that is required.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a deployment, we can look at some of the excellent features
    App Engine provides as standard, starting with traffic management.
  prefs: []
  type: TYPE_NORMAL
- en: Traffic splitting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have two versions running, wouldn't it be great if we could divide
    the traffic between them? Consider how useful this option is when working with
    an environment such as testing (for example, A/B) or production (for example,
    phased rollout). Again this level of simplicity should not be misunderstood; this
    is an incredibly powerful option and will undoubtedly be one that is used time
    and time again.
  prefs: []
  type: TYPE_NORMAL
- en: 'To split traffic, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go into the GAE Cloud Console and, under the Versions menu, look for the Split
    traffic option for the specific version and select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now a list of options will be available to split our traffic, as outlined in
    the previous chapter (that is, IP address, Cookie, or Random):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/698e50f9-a9fb-459a-ad6d-de3eccc0093d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that our new application version has defaulted to accept 100% of
    the traffic allocation. For demonstration purposes, we would like it to only receive
    25%. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select an alternate application version that will consume 75% of traffic by
    clicking on the Add version button. You will see that we still have the original
    version of the deployed application available, so let's divert the traffic to
    that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now select the remaining percentage from the box next to the versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f059a569-9e8d-4ed9-b35d-7c675b35b498.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the traffic splitting ratio has been selected, select the Save button and
    GAE will indicate that it is dynamically updating the traffic splitting configuration
    in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to the Versions screen to see the project actually dividing traffic
    between the applications chosen, in the proportions previously selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12211944-846d-4c7a-9c16-070b60584474.png)'
  prefs: []
  type: TYPE_IMG
- en: As we expected, the preceding actions, for example, traffic splitting, are also
    achievable using the GCloud SDK. To achieve the same result with the SDK, use
    the `gcloud app set-traffic` option to provide a flexible way to get the desired
    outcome from a script or command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to initiate traffic splitting between application versions,
    let's move on how to migrate traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, for this section, we want to migrate all traffic back to the original
    deployed version of our application. By now, I suspect that you already have an
    idea of how to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the Versions screen, there is a MIGRATE TRAFFIC option. We will
    use this to move all of the existing traffic flow back to the original version,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21482395-fea0-40d1-ab98-5c44e9255a53.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the original application currently accepts 75% of the traffic and
    the new version only accepts 25% of traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The migration will ensure traffic is directed to the selected default version.
    In this type of migration, the destination instance can only be a single version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ba3c6cb-dd8d-49ed-89fd-a35d255c1b1e.png)'
  prefs: []
  type: TYPE_IMG
- en: The migration of traffic between application versions is straightforward using
    GAE. To reinforce what we have learned, we will summarize our understanding next.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we learned how to control deployment on GAE. We used several
    built-in tools and learned how to use them when working with our application:'
  prefs: []
  type: TYPE_NORMAL
- en: We saw how GAE instigates version control on the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We observed real-time traffic splitting on GAE, accessed at the push of a button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We utilized the migrating traffic option to perform a simplistic application
    rollback.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we explored how traffic splitting can be an invaluable developer
    tool for testing application functionality. In this regard, working with GAE is
    refreshingly simple as it provides a sophisticated means of performing A/B testing
    without any additional setup or requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we performed a version rollback that allowed us to quickly move
    between traffic-serving versions to a designated default version. In this scenario,
    we did not need to think about how to manage the underlying infrastructure; the
    heavy lifting was performed for us by GAE. In the next section, we will look at
    how we can make the build and deploy process more consistent and less error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting App Engine deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to undertake a more detailed examination of troubleshooting
    an application by using Stackdriver Logging. Stackdriver collates application
    information in a *single pane of glass* to enable data to be analyzed by developers.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging an application can be time-consuming and requires a great deal of
    skill to establish the signal from the noise. Logs for GAE are fully available
    in Stackdriver, and learning to use this tool can prove to be a valuable aid for
    identifying defects within an application.
  prefs: []
  type: TYPE_NORMAL
- en: Building and deploying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open Stackdriver Logging from Google''s Cloud Console to present the main page
    of information relating to logs collated on Google Cloud. Stackdriver Logging
    has two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic mode is the default, and, in our example, we will use this to display
    some vital information about the application deployed. The advanced filter provides
    the user with the ability to build bespoke filters for use against logged information.
  prefs: []
  type: TYPE_NORMAL
- en: Basic mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to do in Stackdriver Logging is filter the information
    and restrict it to the GAE application, so that it relates specifically to the
    part of the system we have an interest in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb50d884-12f0-4e4f-9c6f-c270f7cfb915.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, the filter amendment includes GAE Application and
    All logs. As is evident from the information displayed, this is a very detailed
    overview of the activities that have occurred on GAE. For example, we can see
    several references to, for example, `CreateApplication`, `CreateVersion`, and
    `UpdateService` activities. Each of these activities has an associated payload
    with more detail, so gleaning further information where necessary is supported.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the (HTTP) response codes received for the pages are also displayed
    in the logs, meaning a metric to monitor the availability of the application can
    easily be created based on the log information. A metric such as *How many times
    have I received a 404 in the past hour* is quite useful. Aggregating metrics is
    a smart way to perform application analysis, so only the frequency of incident
    occurrence provides the basis for investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some instances, a more bespoke filter is required to investigate an operation
    on GAE. In this instance, use the advanced filter. The advanced log filter is
    accessed via the drop-down filter and presents a more productive interface from
    which you can select information from the logs consumed within Stackdriver.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in this mode, selecting the `CreateApplication` item populates
    the advanced filter and enables a more targeted list of entries to be displayed
    based on the criteria submitted by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stackdriver is an enormously valuable service when used to manage an application
    proactively:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stackdriver Logging**: Access log information for the analysis of issues'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stackdriver Monitoring**: Access monitoring information for general questions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stackdriver Trace**: Access trace information for latency issues'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stackdriver Debug**: Access application details for defect issues'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first defense layer involves integrating logging to supply a detailed and
    accurate view of deployed applications. Examples of this include Stackdriver Monitoring,
    Trace, and Debug, which utilize information about the application to assist ongoing
    maintenance activities and enhancements to deployed artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we highlighted the first steps in using Stackdriver Logging
    in conjunction with GAE. We will be exploring this Stackdriver capability in further
    detail as we move on to more advanced topics:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a *basic* mode filter to see specific GAE information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We switched to an *advanced* filter to take a more granular view of GAE application
    log information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We outlined some Stackdriver functionality and discussed at a high level how
    to use the key features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to use Stackdriver on Google Cloud is fundamental to increasing
    developer productivity. The ability to aggregate information from multiple services
    in an easy-to-access dashboard is both compelling and useful as application complexity
    increases over time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot of material in order to work through some
    typical examples of using GAE. By now, you should have a good understanding of
    how the architecture and its associated components interact and can prevent the
    situational reinvention of the wheel.
  prefs: []
  type: TYPE_NORMAL
- en: We began with a discussion of how to deploy an application within the GAE environment.
    Working with version control and source configuration to support multiple environments
    was also covered. Finally, we looked at different deployment strategies and took
    our first look at Stackdriver Logging.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that GAE is very good at hosting applications that are responsible
    for managing solutions requiring HTTP(s)/API access. Both GAE Standard and Flex
    provide compelling cases for serverless applications in Google Cloud. From a developer
    perspective, there is very little in the way of infrastructure management required.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will expand our view of Google Cloud serverless products
    and start looking at event-based options. When looking at alternatives, it is
    always good to consider how one type of use case is more beneficial than another.
    Now that we have explored applications, we will take a look at more granular requirements
    and introduce event processing via functions.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are three versions of GAE. True or false?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What traffic splitting options are available with GAE?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What filter logging options are present for Stackdriver Logging?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When creating an App Engine application, you need to select a Zone. True or
    false
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Traffic migration offers a simple way to perform an application rollback. True
    or false?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command to perform a command-line deployment of GAE?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What common properties does an App Engine deployment contain in its URL?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Google Cloud Shell**: [https://cloud.google.com/shell/docs/launching-cloud-shell](https://cloud.google.com/shell/docs/launching-cloud-shell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Cloud Shell Editor**: [https://cloud.google.com/blog/products/gcp/introducing-google-cloud-shels-new-code-editor](https://cloud.google.com/blog/products/gcp/introducing-google-cloud-shels-new-code-editor)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google app services**: [https://cloud.google.com/sdk/gcloud/reference/app/services/](https://cloud.google.com/sdk/gcloud/reference/app/services/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
