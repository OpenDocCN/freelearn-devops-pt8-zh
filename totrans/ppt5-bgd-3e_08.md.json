["```\nclass pbg_ntp {\n  ...\n}\n```", "```\ninclude ntp\n```", "```\nclass CLASS_NAME {\n  ...\n}\n```", "```\ninclude CLASS_NAME\n```", "```\n# Manage NTP\nclass pbg_ntp_params (\n  String $version = 'installed',\n) {\n  ensure_packages(['ntp'],\n    {\n      'ensure' => $version,\n    }\n  )\n}\n```", "```\nString $version = 'installed',\n```", "```\ninclude pbg_ntp_params\n```", "```\npbg_ntp_params::version: 'latest'\n```", "```\n# Manage NTP\nclass pbg_ntp_params2 (\n  Boolean $start_at_boot,\n  String[1] $version                        = 'installed',\n  Enum['running', 'stopped'] $service_state = 'running',\n) {\n  ensure_packages(['ntp'],\n    {\n      'ensure' => $version,\n    }\n  )\n\n  service { 'ntp':\n    ensure => $service_state,\n    enable => $start_at_boot,\n  }\n}\n```", "```\npbg_ntp_params2::start_at_boot: true\npbg_ntp_params2::version: 'latest'\npbg_ntp_params2::service_state: 'running'\n```", "```\n  Boolean $start_at_boot,\n  String[1] $version                        = 'installed',\n  Enum['running', 'stopped'] $service_state = 'running',\n```", "```\nError: Evaluation Error: Error while evaluating a Resource Statement, Class[Pbg_ntp_params2]: parameter 'service_state' expects a match for Enum['running', 'stopped'], got String at /examples/class_params2.pp:22:1 on node ubuntu-xenial\n```", "```\nntp::version: 'latest'\n```", "```\n# Manage user and SSH key together\ndefine user_with_key(\n  Enum[\n    'ssh-dss',\n    'dsa',\n    'ssh-rsa',\n    'rsa',\n    'ecdsa-sha2-nistp256',\n    'ecdsa-sha2-nistp384',\n    'ecdsa-sha2-nistp521',\n    'ssh-ed25519',\n    'ed25519'\n  ] $key_type,\n  String $key,\n) {\n  user { $title:\n    ensure     => present,\n    managehome => true,\n  }\n\n  file { \"/home/${title}/.ssh\":\n    ensure => directory,\n    owner  => $title,\n    group  => $title,\n    mode   => '0700',\n  }\n\n  ssh_authorized_key { $title:\n    user => $title,\n    type => $key_type,\n    key  => $key,\n  }\n}\n```", "```\nuser_with_key { 'john':\n  key_type => 'ssh-rsa',\n  key      => 'AAAA...AcZik=',\n}\n```", "```\ntype ServiceState = Enum['running', 'stopped']\n\ndefine myservice(ServiceState $state) {\n  service { $name:\n    ensure => $state,\n  }\n}\n\nmyservice { 'ntp':\n  state => 'running',\n}\n```", "```\ntype IPAddress = Pattern[/\\A([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}\\z/]\n\ndefine socket_server(\n  IPAddress $listen_address,\n  IPAddress $public_address,\n) {\n  # ...\n}\n\nsocket_server { 'myserver':\n  listen_address => '0.0.0.0',\n  public_address => $facts['networking']['ip'],\n}\n```", "```\ncd /etc/puppetlabs/code/environments/production && git pull/opt/puppetlabs/bin/puppet apply manifests/\n\n```", "```\ninclude postgresql\ninclude apache\n```", "```\ninclude(['postgresql', 'apache'])\n```", "```\nclasses:\n- postgresql\n- apache\n```", "```\ninclude(lookup('classes'), Array[String], 'unique')\n```", "```\n  - name: \"Host-specific data\"\n    path: \"nodes/%{facts.hostname}.yaml\"\n```", "```\nclasses:\n- postgresql\n- apache\n```", "```\nclasses:\n- tomcat\n- my_app\n```", "```\ninclude(lookup('classes'), Array[String], 'unique')\n```", "```\n[apache, postgresql, tomcat, my_app]\n```", "```\nclasses:\n- postgresql\n- apache\n- java\n- tomcat\n- my_app\n```", "```\n# Be an app server\nclass role::app_server {\n  include postgresql\n  include apache\n  include java\n  include tomcat\n  include my_app\n}\n```", "```\nclasses:\n- role::app_server\n```", "```\n  include tomcat\n```", "```\n# Be an app server\nclass role::app_server {\n  include profile::postgresql\n  include profile::apache\n  include profile::java\n  include profile::tomcat\n  include profile::my_app\n}\n```", "```\n# Site-specific Tomcat configuration\nclass profile::tomcat {\n  tomcat::install { '/usr/share/tomcat7':\n    install_from_source => false,\n    package_ensure      => present,\n    package_name        => ['libtomcat7-java','tomcat7-common','tomcat7'],\n  }\n\n  exec { 'reload-tomcat':\n    command     => '/usr/sbin/service tomcat7 restart',\n    refreshonly => true,\n  }\n\n  lookup('tomcat_allowed_ips', Array[String[7]]).each |String $source_ip| {\n    firewall { \"100 Tomcat access from ${source_ip}\":\n      proto  => 'tcp',\n      dport  => '8080',\n      source => $source_ip,\n      action => 'accept',\n    }\n  }\n\n  file { '/usr/share/tomcat7/logs':\n    ensure  => directory,\n    owner   => 'tomcat7',\n    require => Tomcat::Install['/usr/share/tomcat7'],\n  }\n\n  file { '/etc/logrotate.d/tomcat7':\n    source => 'puppet:///site-modules/profile/tomcat/tomcat7.logrotate',\n  }\n}\n```"]