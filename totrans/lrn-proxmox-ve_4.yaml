- en: Chapter 4. Creating Virtual Machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"...But if the concept of abstraction is so mundane in IT, what explains
    the increasing fascination with virtualization in recent years? The trend is even
    more hard-core in data centers, where virtualization is deeply ingrained in the
    development strategy of these environments since the mid-2000s. And the infatuation
    continues to grow....Accordingly, these facilities have been assaulted with virtual
    servers, virtual networks, virtual storage, virtual appliances, and other "V-technologies"
    that promise relief from the cuffs of reality."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *Gustavo A. A. Santana, Data Center Virtualization Fundamentals* |'
  prefs: []
  type: TYPE_TB
- en: In [Chapter 3](ch03.html "Chapter 3. Creating Containers"), *Creating Containers*,
    we explored the creation, configuration, and control of LXC containers using Proxmox
    VE. In this chapter, we turn our focus to KVM-QEMU virtual machine creation and
    control with Proxmox VE.
  prefs: []
  type: TYPE_NORMAL
- en: While we contrasted virtual machines with containers in [Chapter 1](ch01.html
    "Chapter 1. Proxmox VE Fundamentals"), *Proxmox VE Fundamentals*, we will take
    this opportunity to dive deeper into specific advantages virtual machines still
    seem to have over containers despite the clear signs that we're in the thrall
    of a container revolution. At the same time, we will explore use cases based on
    what we've learned.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then walk through the process of deriving virtual machines from ISO
    images using Proxmox VE. PVE is intended as a server virtualization platform;
    therefore, we''ll walk through the creation and configuration of two VMs: the
    first running Microsoft Windows 2012r2 and the second running Fedora Core 23 Server.'
  prefs: []
  type: TYPE_NORMAL
- en: Since both operating systems have graphical user interface components, we will
    take advantage of an opportunity to explore more of the PVE's feature set than
    we might otherwise have had an authentic need to cover.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the conclusion of [Chapter 4](ch04.html "Chapter 4. Creating Virtual Machines"), *Creating
    Virtual Machines*, we''ll have covered the following aspects of full virtualization
    with Proxmox VE:'
  prefs: []
  type: TYPE_NORMAL
- en: Uploading ISOs to Proxmox VE's local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and configuring virtual machines from the PVE web interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with VMs using the PVE web interface's console feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reconfiguring a virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the state of a virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, however, we will take a step back and explore the persistent role hardware
    virtualization will have, even as enthusiasm for containers echoes around us.
  prefs: []
  type: TYPE_NORMAL
- en: Distinguishing features of virtual machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Though containers have clearly gained impressive momentum in so brief a period,
    virtual machines continue to have salient and distinguishing features. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: A VM may run any operating system designed for the host's architecture; for
    example, Android-x86, FreeBSD, Ubuntu, Windows Server, and even desktop OSs can
    all run on separate virtual machines on a Proxmox VE host, provided the host has
    adequate hardware resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Distinguishing features of virtual machines](img/image_04_001.png)'
  prefs: []
  type: TYPE_IMG
- en: Ubuntu 15.04 virtual machine hosted on Proxmox VE and accessed via the SPICE
    console option in the PVE's Web interface
  prefs: []
  type: TYPE_NORMAL
- en: One VM may host many containers; when we look for creative and savvy data center
    solutions, we would like to stay consistently aware that OS virtualization and
    system virtualization have a complementary relationship, rather than a competitive
    or antagonistic one. VMs still offer more thorough isolation, for example, than
    containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMs and containers call for different security concerns and approaches. Impressively
    thorough standards for system virtualization are mature and freely available,
    while intelligence on OS virtualization security and standardized solutions are
    not yet mature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll address security and PVE more thoroughly in [Chapter 7](ch07.html "Chapter 7. Securing
    Proxmox VE"), *Securing Proxmox VE*.
  prefs: []
  type: TYPE_NORMAL
- en: System virtualization's distinguishing features suggest that, for the time being,
    virtual machines are more flexible than containers; for example, many operating
    systems may coexist on a single **hypervisor** such as Proxmox VE. Containers
    cannot achieve this. For now, this means that pure containers will only exist
    when GNU-/Linux-based hosts have GNU-/Linux-based containers and Microsoft-based
    containers can only run on Microsoft OS-based hosts. Containers hosted by Proxmox
    VE thus require that the host OS share GNU/Linux libraries and binaries.
  prefs: []
  type: TYPE_NORMAL
- en: With as much momentum as the container movement has, this restriction of containers
    to Unix-type operating systems may change very soon with the release of Windows
    Server 2016, which is now available to preview; Microsoft has announced plans
    to incorporate Docker into the product ([http://zdnet.com/article/microsoft-to-add-virtualized-containers-non-server-mode-to-windows-server-2016/](http://zdnet.com/article/microsoft-to-add-virtualized-containers-non-server-mode-to-windows-server-2016/),
    accessed June 1, 2015).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Docker is an open-source containerization solution under very active development
    and that is generating significant attention. A brief investigation suggests that
    a Windows host running Docker can run Linux containers. This counterpoint is quickly
    resolved once we realize Docker actually does this only with the support of a
    system virtualization layer, such as boot2docker ([https://github.com/boot2docker/boot2docker](https://github.com/boot2docker/boot2docker)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The flexibility system virtualization may claim, with regard to operating systems,
    does come at a cost: *virtual machines require more resources and have more overhead
    than containers*.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll explore scenarios that make system virtualization
    nevertheless compelling.
  prefs: []
  type: TYPE_NORMAL
- en: Scenarios for system virtualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the distinguishing features discussed previously, some very powerful use
    cases emerge. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform software development and testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administration and management of systems in an enterprise with concerns across
    platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency on legacy applications, systems, or data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A proving ground for deployment of new systems or policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labs serving IT and ICT students
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Productivity and consistency across platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These scenarios highlight the changes brought about by each difference, particularly
    between the two forms of virtualization encouraged and supported by Proxmox VE,
    virtual machines, and containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter proceeds with confidence to an informed conclusion: containers
    and virtual machines (or OS virtualization and system virtualization) are two
    different tools that together provide the data center and its engineers with powerful
    flexibility and an opportunity to exercise discretion in the (re)formation of
    the datacenter.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at the VM creation process with Proxmox VE.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section provides an abstract overview of the virtual machine creation process,
    from configuring the machine to the installation of the operating system and ultimately
    to controlling its state.
  prefs: []
  type: TYPE_NORMAL
- en: Installation media
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the best-case scenario, the operating system intended for a new virtual machine
    is available as a downloadable ISO file. This single file is intended to perfectly
    represent an entire CD or DVD. In the case of several GNU/Linux distributions,
    the full install media spans several DVDs.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, in these cases, a network installation (or `netinst`) disk image is
    available that provides just enough operating system to drive the system devices,
    the installer, and then download and install requested software from online repositories.
  prefs: []
  type: TYPE_NORMAL
- en: When the OS is available as an ISO, we can simply download it to a remote workstation
    and then upload it to the PVE host's local storage using PVE's web interface,
    and carry on with the creation of the VM.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading an ISO file to local storage on PVE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are five steps to working with an ISO image from a remote workstation.
  prefs: []
  type: TYPE_NORMAL
- en: Download the ISO from the Web to a local workstation and verify that the image
    is not corrupted or compromised (see [http://www.online-tech-tips.com/cool-websites/what-is-checksum/](http://www.online-tech-tips.com/cool-websites/what-is-checksum/)
    to learn more about this process).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the Proxmox VE web interface by navigating to it in a browser (point
    your browser to `https://<ip address>:8006`, where `<ipaddress>` is the IP address
    of PVE).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left pane of the browser window, **Server View** should be selected.
    Beneath the drop-down menu, a folder labeled **Datacenter** should be available.
    Expand the contents to reveal your PVE host, labeled by hostname. Expand that
    to reveal the host's local storage, and then select its local storage. In the
    following screenshot, for example, the hostname of the PVE host is pve4, so the
    local storage is labeled **local (pve4)**.![Uploading an ISO file to local storage
    on PVE](img/image_04_002.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigating to a PVE node's local storage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After choosing local storage, three tabs should appear in the right pane: **Summary**, **Content**,
    and **Permissions**. Select the **Content** tab to reveal two buttons in the right
    pane, **Templates** and **Uploads**:![Uploading an ISO file to local storage on
    PVE](img/image_04_003.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Local storage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To proceed, click on the **Upload** button. In the dialog that appears, choose **ISO
    image** from the drop-down menu labeled **Content**, then click on the **Select
    File...** button to browse the workstation's filesystem for the disk image to
    be uploaded to the PVE host.![Uploading an ISO file to local storage on PVE](img/image_04_004.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload dialog
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The path to the ISO files uploaded to PVE's local storage via its web interface
    is `/var/lib/template/iso` by default. With this in mind, note that files can
    also be transferred to this location from a workstation via `scp` or `sftp` to
    the Proxmox VE server, provided the tools are installed on the remote workstation.
  prefs: []
  type: TYPE_NORMAL
- en: With the install media available to PVE, we're ready to configure and create
    a VM using Proxmox VE's web interface. The next section explores the process.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a virtual machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin the process by finding the hostname and local storage of our Proxmox
    VE instance in the server view of the PVE web interface. Select the host and click
    on the **Create VM** button (at the upper right corner of the page) to start configuring
    a new virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'A dialog entitled **Create: Virtual Machine** appears in the browser window.
    This is used to provide initial specifications for the new virtual machine, including
    not only hardware specifications, but also the OS type and the name PVE will use
    to refer to the new VM.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The tabs, from left to right, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CD/DVD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard Disk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confirm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After completing a tab, move forward either by clicking on the next tab in the
    sequence or by clicking on the **Next** button.
  prefs: []
  type: TYPE_NORMAL
- en: Anticipating the configuration tabs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What follows is a brief overview of what we can expect from each tab in the
    **Create: Virtual Machine** dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It's on the **General** tab that the name and VM ID of a virtual machine are defined.
    Note that the "name" field doesn't refer to the VM's hostname; that's defined
    when the OS is configured. Rather, it is the name that Proxmox VE will use to
    refer to this VM in the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: In a production environment, it's recommended that you stay deliberate and systematic
    with your naming scheme, just as you would be with a hostname in a datacenter.
  prefs: []
  type: TYPE_NORMAL
- en: When defining the VM ID, it is similarly important to be rigorously systematic.
    Each VM and container must be assigned a unique number that PVE refers to as VM
    ID. Although Proxmox VE will provide a default VM ID number, this is an arbitrary
    system, rather than a deliberated system resulting from a well-formed policy.
  prefs: []
  type: TYPE_NORMAL
- en: In a large production environment, consider assigning VM IDs in a dedicated
    range relative to the virtual server's purpose (for example, VM ID 1000-2000 for
    VMs providing web services). You'll appreciate that you did if your datacenter
    grows as you systematize backup plans and establish a plan for virtual-server
    lifecycle management.
  prefs: []
  type: TYPE_NORMAL
- en: OS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **OS** tab provides some support for creating VMs intended for use with
    specific operating systems. Note there are multiple options, based on the kernel
    version, for GNU/Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '![OS](img/image_04_005.png)'
  prefs: []
  type: TYPE_IMG
- en: CD/DVD
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **CD/DVD** tab provides an opportunity to specify the initial disc image
    to be used for installing the OS; alternatively, we can direct PVE to rely on
    a physical disc in a local optical drive. If you select an ISO image, you're asked
    to choose from among the ISOs that are already uploaded to Proxmox VE.
  prefs: []
  type: TYPE_NORMAL
- en: Hard Disk
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On the **Hard Disk** tab, we can define the size of the secondary storage allocated
    for the VM. There's also a **Bus/Device** field, as well as a field labeled **Storage**
    to specify the location to store the virtual disk. For the purpose of this text,
    we'll keep this field set to the default, **local**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more on virtual storage, see [Chapter 5](ch05.html "Chapter 5. Working with
    Virtual Disks"), *Working with Virtual Disks*.
  prefs: []
  type: TYPE_NORMAL
- en: CPU
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **CPU** tab provides an opportunity to define not only the CPU socket count,
    but also the number of cores to utilize per socket.
  prefs: []
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **Memory** tab offers two methods for allocating RAM for the virtual machine;
    we can select a fixed amount in MB, or we can automatically allocate RAM within
    a specified range.
  prefs: []
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Of particular interest on the Network tab are the three networking modes available
    in the left column of the tab and the opportunity to define the **Model** of the
    network interface in the right column.
  prefs: []
  type: TYPE_NORMAL
- en: '![Network](img/image_04_006.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, the VM will be configured to behave as if it's
    connected directly to the physical network by relying on PVE's bridged mode. By
    way of contrast, the NAT (network address translation) mode connects the VM to
    an isolated LAN maintained by the host and well isolated from the physical network.
  prefs: []
  type: TYPE_NORMAL
- en: In the same screenshot, the model of the network card is set to **Intel E1000**.
    Performance is not as good as we'd get from **virtio paravirtualization**, but
    Microsoft Windows guests will work out of the box with this model, whereas virtio
    would need additional drivers. Intel E1000 stands out for its compatibility, while
    virtio offers superior performance.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A VM configured with NAT mode can access resources on the physical network,
    but is not visible or accessible to resources beyond the Proxmox VE host.
  prefs: []
  type: TYPE_NORMAL
- en: Proxmox VE's network model is sophisticated and very flexible. To learn more,
    see [Chapter 6](ch06.html "Chapter 6. Networking with Proxmox VE"), *Networking
    and Proxmox VE*, which is a chapter dedicated to Proxmox VE networking. Also,
    consider a visit to the wiki page [https://pve.proxmox.com/wiki/Network_Model](https://pve.proxmox.com/wiki/Network_Model).
  prefs: []
  type: TYPE_NORMAL
- en: Confirm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **Confirm** tab offers a summary view of the VM configuration to review
    before committing to the creation of the VM.
  prefs: []
  type: TYPE_NORMAL
- en: On this tab, a **Finish** button appears where the **Next** button was on the
    other tabs. To create the VM, click on the **Finish** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the **Create: Virtual Machine** dialog, the virtual machine
    is configured—analogous to having built a physical computer, plugged it in, powered
    it up just long enough to insert your installation media in the optical drive,
    and then eagerly looking forward to it powering back on for the installation of
    the OS.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stay conscious of the host's hardware specifications and cognizant of how resources
    are allocated as VMs and containers accumulate on a PVE host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to start the newly created VM and install its operating system.
    First, let''s step section steps through controlling the state of a virtual machine:
    starting it, shutting it down, and abruptly stopping it.'
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the state of a virtual machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point in the process, the freshly created VM appears in **Server View**
    in a powered off state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling the state of a virtual machine](img/image_04_007.png)'
  prefs: []
  type: TYPE_IMG
- en: The icon of a VM that is stopped
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, the only VM on the host has a VM ID of 101 and
    the name `fedora-ch4`. A stopped VM is represented by a monitor icon with a black
    display.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we select the VM in the left pane, buttons to control its state appear in
    the right pane, which is exactly what we saw with containers in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling the state of a virtual machine](img/image_04_008.png)'
  prefs: []
  type: TYPE_IMG
- en: Starting a VM
  prefs: []
  type: TYPE_NORMAL
- en: The **Start** button will "power on" the VM and the boot process will begin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A running VM is represented by a monitor icon with a white screen that visually
    distinguishes it from the icon for a stopped VM.
  prefs: []
  type: TYPE_NORMAL
- en: Once started, we can open the VM's noVNC console to see what's going on during
    the boot process, from the BIOS options through the OS's first interaction with
    the user. The same tool works for graphical user interfaces and command line interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling the state of a virtual machine](img/image_04_009.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the state of a running VM
  prefs: []
  type: TYPE_NORMAL
- en: To stop a virtual machine gracefully, use the **Shutdown** button that becomes
    available upon start. Alternatively, use **Stop** to shut down a VM abruptly.
    The **Reset** button will halt the virtual machine, much as a hardware reset button
    would.
  prefs: []
  type: TYPE_NORMAL
- en: To destroy a virtual machine, ensure first that it is in a stopped state, then
    press the **Remove** button to reveal a concerned warning that the process initiated
    is not reversible. PVE will offer the choice to **Cancel** and give the action
    additional consideration, or to follow through with the destruction of the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling a VM from the PVE command line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `qm` command allows us to control the state of a VM from a Proxmox VE command
    line interface. In the following examples, the changes will be made to the virtual
    machine with VM ID 101:'
  prefs: []
  type: TYPE_NORMAL
- en: '`qm destroy 101`: This destroys the VM and deletes all of its used or owned
    volumes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qm reset 101`: This resets the VM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qm resume 101`: This resumes the VM (if it''s suspended)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qm shutdown 101`: This shuts down the VM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qm start 101`: This starts the VM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qm stop 101`: This stops the VM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qm suspend 101`: This suspends the machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The qm command offers full control of a VM, from creation to destruction. To
    learn more, visit the manual page at [https://pve.proxmox.com/wiki/Manual:_qm](https://pve.proxmox.com/wiki/Manual:_qm).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the sections that follow, the abstract outline and illustration of the VM-creation
    and configuration process will become more concrete and specific as we apply what
    we learned to building two virtual machines: first we''ll walk through the creation
    of a Windows Server 2012r2 VM, and then we''ll create a Fedora 23 Server virtual
    machine.'
  prefs: []
  type: TYPE_NORMAL
- en: Practicing the creation of virtual machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section and the next, we'll run through the entire VM creation process,
    from the acquisition of ISO images, to the configuration of the machines, and
    the installation of the operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll step through the process for a Microsoft Windows Server 2012r2
    system. Afterwards, we'll look at the creation of a VM intended for Fedora 23
    Server.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualizing Windows Server 2012r2 with Proxmox VE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to precisely follow the installation process outlined here, it will
    require a Windows Server 2012r2 ISO image, perhaps from an existing DVD if necessary.
    If you have access to the Volume License Center, you're perhaps able to download
    the image file from Microsoft by visiting [https://www.microsoft.com/Licensing/servicecenter/default.aspx](https://www.microsoft.com/Licensing/servicecenter/default.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, Windows Server 2012r2 is available for evaluation (limited
    to 180 days) at Microsoft''s TechNet Evaluation Center: [https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtualizing Windows Server 2012r2 with Proxmox VE](img/image_04_010.png)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft's TechNet Evaluation Center
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtualizing Windows Server 2012r2 with Proxmox VE](img/image_04_011.png)'
  prefs: []
  type: TYPE_IMG
- en: Sign up, login, and download Mircrosoft Windows Server 2012r2
  prefs: []
  type: TYPE_NORMAL
- en: Download the ISO from a workstation on the same physical network as your Proxmox
    VE server, and then upload the image to PVE via the web interface as described
    in the preceding section.
  prefs: []
  type: TYPE_NORMAL
- en: When the upload is complete, it should be visible in the **Content** tab of
    the local storage.
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtualizing Windows Server 2012r2 with Proxmox VE](img/image_04_012.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing available image files
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and creating the virtual machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To configure and create a Windows Server VM quickly, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started, upload the Microsoft Windows Server from your workstation to
    the Proxmox VE server as described previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the OS install media now available to PVE, we can click on the **Create
    VM** button to initiate the **Create:** Virtual Machine dialog as described previously.
    Complete the fields in the **General** tab, as illustrated in the following screenshot:![Configuring
    and creating the virtual machine](img/image_04_013.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proceed to the **OS** tab of the dialog by clicking on **Next**. The left column
    of this dialog consists of options for Microsoft operating systems. Choose the
    top-most option, **Microsoft Windows 8/Server 2012**, and click on **Next** to
    continue to the **CD/DVD** tab.![Configuring and creating the virtual machine](img/image_04_014.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **CD/DVD** tab, select the top option to choose an ISO file. With the **Storage**
    field set to local, use the drop-down menu for the **ISO Image** field to choose
    the uploaded 2012r2 image. Click on **Next** to continue.![Configuring and creating
    the virtual machine](img/image_04_015.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Hard Disk** tab, stay mindful that Server 2012r2 requires at least
    32 GB of storage. Set an appropriate disk size and ensure that **Bus/Device**
    is set to **IDE**; avoid choosing **virtio**. Set the format to **QEMU image format
    (qcow2)** and click on **Next** to continue to the **CPU** tab.![Configuring and
    creating the virtual machine](img/image_04_016.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll cover **Bus/Device** types in the next chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the **CPU** tab, configure the number of sockets and the number of cores
    per socket to commit to the VM. For the purposes of this exercise, I've set **Sockets**
    to `1` and set the number of cores to `2`. The **Type** field should be set to **Default
    (kvm64)**. Keep in mind that we can change the CPU configuration later as necessary.
    Click on **Next** to configure the memory for the VM.![Configuring and creating
    the virtual machine](img/image_04_017.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows Server 2012r2 requires a minimum of 512 MB of RAM. As illustrated in
    the following screenshot, PVE provides an option for using a fixed amount of RAM
    or automatically allocating RAM within a specified range.![Configuring and creating
    the virtual machine](img/image_04_018.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the purposes of this exercise, a fixed amount of 2,048 MB of memory has
    been allocated, with the understanding that this can be easily changed later.
    When the memory is tuned the way you'd like, click on **Next** to configure the
    network.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As the following screenshot illustrates, the IP address of a VM can't be preconfigured
    like it can be with containers:![Configuring and creating the virtual machine](img/image_04_019.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As illustrated, **Bridged mode** is selected rather than **NAT mode**. This
    choice is deliberate. In this case, **NAT mode** would prevent us from accessing
    the virtual machine's desktop through Microsoft's, Remote Desktop Protocol or
    Remote Server Administration Tool.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Bridged mode** provides more choices for accessing the VM, since it''s somewhat
    analogous to attaching a machine to a switch on the physical network. There are
    consequences for this decision in regard to isolation and security, especially
    with Proxmox''s firewall disabled.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about PVE's integrated firewall features, visit [https://pve.proxmox.com/wiki/Proxmox_VE_Firewall#Enabling_firewall_for_qemu_guest_and_openvz_veth](https://pve.proxmox.com/wiki/Proxmox_VE_Firewall#Enabling_firewall_for_qemu_guest_and_openvz_veth).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Networking can be reconfigured at any point after the creation of the virtual
    machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When the **Network** tab is configured to your satisfaction, click on **Next**
    to view a configuration summary and to confirm the configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The final tab, labeled **Confirm**, provides a summary of the VM's configuration
    and the opportunity to finally create the VM.![Configuring and creating the virtual
    machine](img/image_04_020.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Finish** button to confirm your configuration and create the
    virtual machine, but feel encouraged to use this opportunity to return to a prior
    step and adjust the configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Keep in mind, however, that many of these settings can be changed even after
    the VM is created and the OS installed, sometimes without even rebooting the machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within 30 seconds, the new VM will appear in the left frame of the Web interface:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Configuring and creating the virtual machine](img/image_04_021.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**There''s another way**'
  prefs: []
  type: TYPE_NORMAL
- en: Note that in this chapter, the Windows Server VM is configured so we can quickly
    try Windows Server virtualization using a TechNet trial; the configuration is
    not optimized for performance and is not ideal for production. Ideally, a Windows
    Server virtual machine in Proxmox VE that is production ready will be configured
    to take advantage of paravirtualization; in PVE, this is just a matter of choosing
    **virtio** on two tabs. On the **Hard Disk** tab, consider choosing **virtio**
    instead of **IDE**; and on the **Network** tab, consider virtio rather than Intel
    E1000\. This does, however, complicate the Windows Server installation since it
    doesn't ship with virtio drivers. Consequently, we'd need to upload drivers on
    an ISO image to PVE and make them available to Windows Server early in the OS
    installation process. Fortunately, this configuration is well documented on the
    PVE wiki at [https://pve.proxmox.com/wiki/Windows_2012_guest_best_practices](https://pve.proxmox.com/wiki/Windows_2012_guest_best_practices).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your e-mail address and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Code Downloads & Errata**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Code Download**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting the VM and installing Windows Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the virtual machine is configured and available for use, select it in
    the **Server View** in the upper left pane of the web interface. Starting the
    VM is as simple as pressing the Start button that is revealed in the right pane
    as previously described.
  prefs: []
  type: TYPE_NORMAL
- en: When the machine is started, its icon will change from a monitor with a black
    screen to one with a white screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the machine''s display via noVNC, click on the **Console** button;
    a window will popup that allows you to watch the VM''s boot from the Windows Server
    2012r2 install disc and will eventually display the **Windows Setup** wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the VM and installing Windows Server](img/image_04_022.png)'
  prefs: []
  type: TYPE_IMG
- en: Follow the on-screen instructions to complete the installation and configuration
    of Windows Server 2012r2.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for installation of this OS is available at [https://technet.microsoft.com/en-us/library/jj134246.aspx](https://technet.microsoft.com/en-us/library/jj134246.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: Once the Windows Setup dialogs are complete, the installation will proceed and
    the machine will restart a few times until it is ready for a user to log in. Log
    in to the server to see the new desktop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the VM and installing Windows Server](img/image_04_023.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that both the two preceding screenshots have double mouse-pointers. One
    for the local workstation and one for the desktop accessed via noVNC. This is
    awkward and cumbersome.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**noVNC**'
  prefs: []
  type: TYPE_NORMAL
- en: The name noVNC is counterintuitive; noVNC provides, in fact, remote desktop
    access and desktop sharing using the VNC protocol.
  prefs: []
  type: TYPE_NORMAL
- en: However, noVNC does distinguish itself; instead of connecting to a remote computer
    running a VNC server by configuring a client, choosing noVNC produces, from an
    HTML5- and JavaScript-enabled browser, a pop-up window that renders the remote
    desktop served by the virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s a simple solution, enable **Use tablet for pointer** in the VM''s **Options**
    tab if it''s not already enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the VM and installing Windows Server](img/image_04_024.png)'
  prefs: []
  type: TYPE_IMG
- en: If that doesn't resolve the issue, ensure the **Display** field on the hardware
    tab is set to **Default** rather than **SPICE**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a VM for Fedora 23 Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous sections, we detailed the configuration of a virtual machine
    intended for use with Windows Server 2012r2\. In this section, we'll build on
    our experience and apply what we learned to building a server running Fedora 23
    (Server). Creating this VM offers a simple way to practice using paravirtualization
    for the virtual network interface card and the virtual hard-disk interface.
  prefs: []
  type: TYPE_NORMAL
- en: Review Fedora 23 Server installation at [http://www.tecmint.com/installation-of-fedora-23-server-and-administration-with-cockpit-tool/](http://www.tecmint.com/installation-of-fedora-23-server-and-administration-with-cockpit-tool/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the netinst ISO from [http://mirrors.rit.edu/fedora/fedora/linux/releases/23/Server/x86_64/iso/Fedora-Server-netinst-x86_64-23.iso](http://mirrors.rit.edu/fedora/fedora/linux/releases/23/Server/x86_64/iso/Fedora-Server-netinst-x86_64-23.iso).![Creating
    a VM for Fedora 23 Server](img/image_04_025.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloading the Fedora 23 net installation image
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Login to the PVE web interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the image to PVE's local storage as previously described.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create VM**, just as we did for Windows Server 2012r2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **General** tab of the **Create: Virtual Machine** dialog, give the
    machine a well-considered name; in the following screenshot, `fedora-ch4` is used
    and the VM is assigned VM ID 101\. Proceed to the **OS** tab.![Creating a VM for
    Fedora 23 Server](img/image_04_026.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **OS** tab, there are four options that aren't for Microsoft Windows;
    for Fedora 23, choose the **Linux 4.X/3.X/2.6 Kernel (I26)** radio button and
    proceed to the **CD/DVD** tab.![Creating a VM for Fedora 23 Server](img/image_04_027.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the first option on the **CD/DVD** tab, the **Use CD/DVD disc image file
    (iso)** radio button; choose **local** in the **Storage** field and choose the
    image file uploaded in step 4 from the **ISO Image** drop-down menu:![Creating
    a VM for Fedora 23 Server](img/image_04_028.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting the Fedora install disk on the CD/DVD tab
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Proceed to the **Hard Disk** tab to configure a virtual hard disk for the Fedora
    Server VM.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On this virtual machine, we'll rely on paravirtualization for improved efficiency.
    On the **Hard Disk** tab, choose **VIRTIO** from the **Bus/Device** drop-down
    menu. Note that in the following screenshot, the **Disk size** field has changed
    from the default 32 GB to 64 GB; please choose a disk size at your discretion.
    When finished, continue to the **CPU** tab.![Creating a VM for Fedora 23 Server](img/image_04_029.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the Virtual Disk
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ll configure the **CPU** tab just as we did for the Windows Server 2012r2
    VM we created in the preceding section: allocate 1 socket and 2 cores, and specify **Default
    (KVM64)** in the **Type** drop-down menu. When the **CPU** tab is configured to
    your satisfaction, proceed to the Memory tab to allocate RAM for the VM.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your discretion on the **Memory** tab. In the screenshot below, a fixed-size
    memory of 1024 MB is specified. Once you've allocated RAM according to your preferences,
    continue to the **Network** tab.![Creating a VM for Fedora 23 Server](img/image_04_030.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allocate RAM for the Fedora virtual machine on the Memory tab
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the network tab, let's configure Fedora so it's accessible to other machines
    on the physical network; just as we did with Microsoft Server, choose the **Bridged
    mode** radio button. If your PVE host has a single network interface, set the **Bridge**
    drop-down menu to `vmbr0`; otherwise, use your discretion to choose an appropriate
    bridge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, in the right-hand column of the **Network** tab, select **VirtIO (paravirtualized)**
    as the **Model** of the virtual network interface. To review, **Intel E1000**
    is our most widely compatible choice, while **virtio** is the best-performing
    alternative; both are supported "out of the box" by Fedora Server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a VM for Fedora 23 Server](img/image_04_031.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Configuring bridged mode network on the Network tab
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Proceed to the **Confirm** tab and commit to the VM configuration; this is a
    good opportunity to make discretionary changes to the configuration before building
    the VM.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind through this process that, in every case except that of the virtual
    hard disk, the resources allocated here can be changed later with minimal fuss.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on **Finish** to create the virtual machine and close the **Create: Virtual
    Machine** dialog.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the default display option in the Windows Server machine we configured
    in the previous section. It's a great option that works with an established technology
    underlying PVE's noVNC console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: However, by installing additional software on Windows Server, we could have
    relied on SPICE instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**SPICE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This option appears in the menu as **SPICE** (the Simple Protocol for Independent
    Computing Environments), but it refers either to the SPICE protocol that's relied
    on, or to the dependence on a combination of SPICE components, including guest
    tools (installed on the VM) and the SPICE client installed on the Workstation.
    We can infer from this that making use of SPICE requires some post-installation
    work. SPICE is the only solution whose explicit mission is to provide remote access
    to VMs. Moreover, clients are available for mobile devices and several operating
    systems, and the protocol offers many options for both implementation and usage.
    Red Hat is the current developer of this open source solution, and it promotes
    it heavily as part of its KVM-QEMU virtualization platform. The spice-module is
    also, however, integrated into Proxmox VE for use with its own KVM-QEMU VMs. Since
    Fedora Server includes software to support the SPICE display, let's see what preparing
    for that is like.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While the Fedora Server virtual machine is still stopped, select its **Hardware**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click on the **Display** configuration; the **Edit: Display** dialog
    opens, with a drop-down menu labeled **Graphic Card**. Change the selection from **Default**
    to **SPICE** and click on the **OK** button:![Creating a VM for Fedora 23 Server](img/image_04_032.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the VM for use with the SPICE console
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you're ready to install Fedora 23 Server, select the VM in the left pane
    of the browser window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once selected, start the VM. Click on the arrow beside the console button to
    reveal a choice between the noVNC and SPICE consoles.![Creating a VM for Fedora
    23 Server](img/image_04_033.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choosing the SPICE console to access a running virtual machine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **SPICE** to launch a popup console browser window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Creating a VM for Fedora 23 Server](img/image_04_034.png)'
  prefs: []
  type: TYPE_IMG
- en: Initiating the installation of Fedora 23 on the virtual machine with the SPICE
    console
  prefs: []
  type: TYPE_NORMAL
- en: Proceed with the installation by pressing *i* or navigating to **Install Fedora
    23** with the up and down cursor keys on the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: After about 20 seconds, the graphical installer for Fedora 23 will begin to
    ask configuration questions, starting with the language to use with the installer,
    and moving on to the network configuration and host name. Ultimately, you'll also
    be asked to set the password of the root user and create additional accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have questions about network configuration for your new Fedora 23 VM,
    see the *Fedora 23 Networking Guide* at [https://docs.fedoraproject.org/en-US/Fedora/23/pdf/Networking_Guide/Fedora-23-Networking_Guide-en-US.pdf](https://docs.fedoraproject.org/en-US/Fedora/23/pdf/Networking_Guide/Fedora-23-Networking_Guide-en-US.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Follow the onscreen instructions to complete the Fedora 23 installation. The
    time spent on installation is contingent on how you allocated resources, how fast
    your Internet connection is, and what packages you choose to install during the
    initial Fedora 23 configuration process.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Support for Fedora 23 Server installation**'
  prefs: []
  type: TYPE_NORMAL
- en: Fedora 23 Server features can be found at [https://getfedora.org/en/server/](https://getfedora.org/en/server/).
  prefs: []
  type: TYPE_NORMAL
- en: The official Fedora 23 Server installation guide is at [https://docs.fedoraproject.org/en-US/Fedora/23/html/Installation_Guide/](https://docs.fedoraproject.org/en-US/Fedora/23/html/Installation_Guide/).
  prefs: []
  type: TYPE_NORMAL
- en: For post installation suggestions, go to [http://www.tecmint.com/things-to-do-after-fedora-23-installation/](http://www.tecmint.com/things-to-do-after-fedora-23-installation/).
  prefs: []
  type: TYPE_NORMAL
- en: Command line virtual machine creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the `qm` create command to create a Proxmox VE virtual machine from
    the command line. This is a boon to command line users and those looking to script
    automated solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The bash script that follows creates a VM to run Fedora 23 Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See [https://pve.proxmox.com/wiki/Manual:_qm](https://pve.proxmox.com/wiki/Manual:_qm)
    to learn more about creating virtual machines from the Proxmox VE command line
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To the shrewd administrator, the capability to utilize containers in conjunction
    with virtual machines in production environments offers flexibility and increased
    opportunities for professional discretion and informed choices. System virtualization
    continues to have a currency in the datacenter.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, we began this chapter with a high-level overview of the VM creation
    and configuration process with Proxmox VE—from obtaining the install media, to
    configuring the VM, and installing the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Afterwards, we took that abstract outline and applied it to two concrete cases:
    the creation of a Microsoft Windows Server 2012r2 and Fedora 23 Server virtual
    machines.'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 5](ch05.html "Chapter 5. Working with Virtual Disks"), *Working
    with Virtual Drives*, you will learn all you need to know to make informed choices
    when determining what format best suits our virtual hard drives.
  prefs: []
  type: TYPE_NORMAL
- en: We'll give particular attention to making use of VMs created with Oracle's VirtualBox,
    VMware Player, and VMware workstation in our new Proxmox virtual environments.
  prefs: []
  type: TYPE_NORMAL
- en: There's a certain satisfaction in repurposing something that was never intended
    for our scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Let's experience that thrill next.
  prefs: []
  type: TYPE_NORMAL
