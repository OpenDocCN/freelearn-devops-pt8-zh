- en: Implementing and Managing Virtual Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered the last part of the *Deploying and Managing
    Virtual Machines* objective by covering how to manage Azure VMs and VM backups.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the new objective, *Deploying and Managing Virtual Networks**.* In
    this chapter, we are going to focus on virtual networking in Azure and how you
    can implement and manage this. You will learn about the basics of Azure virtual
    networking, including private and public IP addresses, and you will learn how
    to configure subnets, **Virtual Networks** (**VNets**), and public and private
    IP addresses. To finish this chapter, we are going to configure VNet peering.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure VNet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring subnets and VNets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring private and public IP addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and configuring VNet peering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter uses Azure PowerShell for examples. For more details visit [https://docs.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-1.8.0](https://docs.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-1.8.0).
  prefs: []
  type: TYPE_NORMAL
- en: The source code for our sample application can be downloaded from [https://github.com/PacktPublishing/Microsoft-Azure-Administrator-Exam-Guide-AZ-103/tree/master/Chapter09](https://github.com/PacktPublishing/Microsoft-Azure-Administrator-Exam-Guide-AZ-103/tree/master/Chapter09).
  prefs: []
  type: TYPE_NORMAL
- en: Azure VNet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Azure VNet is a virtual representation of a traditional network, hosted in
    the cloud. It is totally software-based, whereas traditional networks use cables,
    routers, and more. VNets provide a secure and isolated environment, and they connect
    Azure resources with each other. By default, the different resources are not reachable
    from outside of the VNet. However, you can connect multiple VNets to each other
    or connect a VNet to your on-premises network as well. All the Azure resources
    that are connected to each other inside the same VNet must reside in the same
    region and subscription.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a VNet, one subnet is automatically created for you. You can
    create multiple subnets inside the same VNet (with a maximum of 1,000 subnets
    per VNet). Connecting multiple VNets together is called VNet peering. A maximum
    of 10 peerings are allowed per Azure subscription.
  prefs: []
  type: TYPE_NORMAL
- en: The smallest subnet that can be used in Azure is the `/29` subnet, which consists
    of eight addresses, and the largest is `/8`, which consists of 16 million addresses.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on subnetting, you can refer to the *Subnet Mask Cheat
    Sheet*: [https://www.aelius.com/njh/subnet_sheet.html](https://www.aelius.com/njh/subnet_sheet.html).
  prefs: []
  type: TYPE_NORMAL
- en: IP addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A VNet in Azure can have private and public IP addresses. Private IP addresses are
    only accessible from within the VNet, and public IP addresses can be accessed from
    the internet as well. You can access private IP addresses from a VPN gateway or
    an ExpressRoute connection. Both private and public IP addresses can be static
    or dynamic, but when you create a new VNet, the IP address is static by default.
    You can change the IP address to *static* from the Azure portal, PowerShell, and
    CLI. The following are the two states of IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic**: Dynamic IP addresses are assigned by Azure automatically and are selected
    from the configured subnet''s address range from the virtual network where the
    Azure resource resides. The IP address is assigned to the Azure resource upon
    creation or start. The IP address will then be released when the resource is stopped
    and deallocated (when you stop the VM from the Azure portal, the VM is deallocated
    automatically), and added back to the pool of available addresses inside the subnet
    by Azure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static**: Static IP addresses (private and public) are preassigned and will
    remain the same until you delete the assignment. You can select a static private
    IP address manually. They can only be assigned to non-internet-facing connections,
    such as an internal load balancer. You can assign a private static IP address
    to a connection of your on-premises network or to an ExpressRoute circuit. Public
    static IP addresses are created by Azure automatically, and they can be assigned
    to internet-facing connections, such as an external load balancer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public IP address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public IP addresses can be used for internal communication between Azure services
    and external communication over the internet. You can use IPv4 and IPv6 for public
    IP addresses, but support for IPv6 is limited. At the time of writing, you can
    only assign IPv6 addresses to external load balancers.
  prefs: []
  type: TYPE_NORMAL
- en: When the Azure resource is started or created, Azure will assign the public
    IP address to the network interface of the VNet. When an outbound connection is
    initiated, Azure will map the private IP address to the public IP addresses, that
    is, **source network address translation** (**SNAT**).
  prefs: []
  type: TYPE_NORMAL
- en: Azure assigns the public IP address to the network interface when the Azure
    resource is started or created. When an outbound connection is initiated, Azure
    will map the private IP address to the public IP address (SNAT). Return traffic
    to the resource is allowed as well. Public IP addresses are typically used for
    VMs, internet-facing load balancers, VPN gateways, and application gateways. There
    is a maximum of 60 dynamic public IP addresses and 20 static public IP addresses
    per subscription. The first five static IP address are free to use.
  prefs: []
  type: TYPE_NORMAL
- en: Private IP addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Private IP addresses support IPv4 and IPv6 as well, but support for IPv6 is
    limited. They can only be assigned dynamically, and IPv6 addresses cannot communicate
    with each other inside a VNet. The only way to use IPv6 addresses is by assigning
    them to an internet-facing load balancer, where the frontend IP address is an
    IPv4 address and the backend is an IPV6 address. Private IP addresses are typically
    used for VMs, internal load balancers, and application gateways. Because of the
    fact that a VPN is always internet-facing, it cannot have a private IP address.
    There is a maximum amount of 4,096 private IP addresses per VNet. However, you
    can create multiple VNets (with a maximum amount of 50 VNets per subscription).
  prefs: []
  type: TYPE_NORMAL
- en: 'These limits are based on the default limits from the following page: [https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits?toc=%2fazure%2fvirtual-network%2ftoc.json#networking-limits](https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits?toc=%2fazure%2fvirtual-network%2ftoc.json#networking-limits).
    You can open a support request to raise the limits.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have some background information about the various networking aspects
    in Azure, we can configure a virtual network with a subnet.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring virtual networks and subnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this demonstration, we are going to create and configure a virtual network
    and a subnet from the Azure portal. We already created both of these in earlier
    demonstrations, for instance, when we created VMs. We are now going to cover this
    topic in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next demonstration, we are going to configure a virtual network and
    a subnet using PowerShell. Therefore, we have to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to log in to the Azure account as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If necessary, select the right subscription as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a resource group for the VNet as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can create the VNet as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create the subnet as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Last, associate the subnet to the virtual network as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have now created a VNet and a subnet from PowerShell. We will use this for
    later demonstrations in this chapter. In the next section, we are going to configure
    a private and a public IP address in PowerShell, and associate them to this VNet.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring private and public IP addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this demonstration, we are going to configure a private and a public IP
    address. When we created the VNet, a private IP address was already created for
    us automatically by Azure. However, we are going to create another in this demonstration
    and associate it, together with the public IP address, to a **network interface
    card** (**NIC**). To configure a private and public IP address from PowerShell,
    you have to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same PowerShell window, add the following code to retrieve the VNet
    and subnet configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a private and public IP address and assign them to the configuration
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a network interface and assign the configuration to it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We now have configured an NIC, a public, and a private IP address, and associated
    them with the VNet that we created in the earlier demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: User-defined routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create subnets, Azure creates system routes that enable all resources
    in a subnet to communicate with each other. Every subnet has the following default
    system route table that contains the following minimum routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Local VNet**: This is a route for resources that reside in the VNet. For
    these routes, there is no next hop address. If the destination IP address contains
    the local VNet prefix, traffic is routed there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**On-premises**: This is a route for defined on-premises address spaces. For
    this route, the next hop address will be the VNet gateway. If the destination
    IP address contains the on-premises address prefix, traffic is routed there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet**: This route is for all traffic that goes over the public internet
    and the internet gateway is always the next hop address. If the destination IP
    address doesn''t contain the VNet or on-premises prefixes, traffic is routed to
    the internet using **network address translation** (**NAT**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can override the system routes by creating **user-defined routes** (**UDRs**).
    This way, you can force traffic to follow a particular route. For instance, you
    have a network that consists of two subnets and you want to add a VM that is used
    as a **demilitarized zone** (**DMZ**) and has a firewall installed on it. You
    want traffic only to go through the firewall and not between the two subnets.
    To create UDRs and enable IP forwarding, you have to create a routing table in
    Azure. When this table is created and there are custom routes in there, Azure
    prefers the custom routes over the default system routes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating user-defined routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create **UDRs**, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure portal by opening [https://portal.azure.com/.](https://portal.azure.com/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create a resource**, type `Route Table` in the search bar, and create
    a new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following values, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `PacktRoutingTable`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription**: Select a subscription.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Group**: Create a new one and call it `PacktRoutingTable`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: East US:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e3e5282f-df48-49a4-9116-5ea39059cdc4.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new route table
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new and empty route table is created. After creation, open the overview blade
    of the route table. To add custom routes, click **Routes** in the left menu as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/211bcb66-8d74-4626-8411-32529dddcda5.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new route
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we want all internet traffic to go through the firewall. So,
    add the following values, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `DefaultRoute`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address prefix**: `0.0.0.0/0`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Next hop type**: Virtual appliance; this is the firewall.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Next hop address**: `10.1.1.10`. This will be the internal IP address of
    the firewall:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6b3cd51c-65bb-4eca-8f9d-b8a2963cbfff.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding route to table
  prefs: []
  type: TYPE_NORMAL
- en: Click **OK**. The route is created for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more detailed instructions on how to create UDRs and a virtual appliance,
    you can refer to the following tutorial: [https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-create-route-table-portal](https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-create-route-table-portal).
  prefs: []
  type: TYPE_NORMAL
- en: We created a custom route table and added a route to it that routes all the
    traffic to a firewall. In the next section, we are going to look at VNet peering.
  prefs: []
  type: TYPE_NORMAL
- en: VNet peering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VNet peering is a mechanism that seamlessly connects two VNets in the same region
    through the Azure backbone infrastructure. Once peered, the VNets appear as one
    for connectivity purposes, just like routing traffic between VMs that are created
    in the same VNet. The VMs that reside in the peered VNets communicate with each
    other using private IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure supports the following two different types of peering:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VNet peering**: This is used for connecting VNets in the same Azure region.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global VNet peering**: This is used for connecting VNets across different
    Azure regions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The network traffic between peered VNets is private. The traffic is kept on
    the Microsoft backbone network completely, so there is no need for using any additional
    gateways, or route traffic over the public internet. There is also no encryption
    required in the communication between the peered VNets. It uses a low-latency,
    high-bandwidth connection between the resources in the different virtual networks.
  prefs: []
  type: TYPE_NORMAL
- en: You can use VNet peering for connecting VNets that are created through the resource
    manager and the classic deployment model together, and it offers the ability to
    transfer data across Azure regions and Azure subscriptions.
  prefs: []
  type: TYPE_NORMAL
- en: VNet peering is different from using an Azure VPN gateway to connect two VNets
    together. When you use an Azure VPN Gateway to connect two VNets to each other,
    it is called a **VNet-to-VNet connection**. This is covered in Chapter 10, *Integrating
    On-Premise Networks with Azure Virtual Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring VNet peering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next demonstration, we are going to create and configure VNet peering
    from the Azure portal. We need two VNets for this. We are going to use the VNet
    that we created in the first demonstration, and we are going to create an additional
    VNet, which has a different address space than the first VNet. You can't use overlapping
    address spaces when you peer two VNets together.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the VNet and set up VNet peering from the Azure portal, take the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create a resource** | **Networking** | **Virtual network**. Create a
    new VNet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `PacktVNetPeering`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address space**: `10.1.0.0/16`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription**: Pick a subscription'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource** **group**: `PacktVNetResourceGroup`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: East US'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subnet**: `default`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address range**: `10.1.0.0/24`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These values are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea46b4a5-08d9-4275-8f95-fa23f990d91c.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an additional VNet
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The VNet is created for you. After creation, open the VNet overview blade of
    the VNet that we created in the first demonstration of this chapter, which is
    called `PacktVirtualNetwork`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f6f7ad89-1023-4ac6-9592-40180643da16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, under Settings, select Peerings. Click Add in the top menu as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/100ca229-acb9-4704-a712-e2dbeb421908.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding new peering
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Add peering blade, add the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name of the peering from PacktVirtualNetwork to PacktVNetPeering**: `PacktPeering`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual network deployment model**: Resource manager.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription**: Keep the default selected.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual network:** Select `PacktVNetPeering`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These values are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57c69dda-30f7-416a-9ee8-8230115affe2.png)'
  prefs: []
  type: TYPE_IMG
- en: Add peering
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of other settings that you can set here as well. The first
    one is **Allow** **forwarded traffic from PacktVirtualNetwork to PacktVNetPeering**:
    this means that you allow traffic from outside the peered VNet. The second one
    is **Configure gateway transit settings**: this means that the peered network
    uses the gateway of this VNet to connect to resources outside the peered VNet,
    for instance, an on-premises environment. The last one is Configure Remote Gateway
    Settings: for this setting, you have to enable the previous one as well, but by
    enabling this one, you are using the other VNet gateway to connect resources outside
    the VNet.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK**, and the peering is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now configured VNet peering from the Azure portal. This concludes this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There are various ways to verify the network connectivity. In [Chapter 11](af30dbe4-17d7-4358-8e6b-e3eae2b34d4a.xhtml),
    *Monitoring and Troubleshooting Virtual Networking*, this is covered in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the first part of the *Deploying and Managing Virtual
    Networks*objective by covering virtual networking in Azure. We have configured
    VNets and created private and public IP addresses. We also configured VNet peering
    from the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue with this objective, by covering how to integrate
    an on-premise network with an Azure VNet.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Answer the following questions to test your knowledge of the information in
    this chapter. You can find the answers in the *Assessments* section at the end
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: When you use VNet peering, do you have to create an Azure VPN Gateway to connect
    both the VNets to each other?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you create custom route tables to adjust the routing between the different
    resources inside your VNets?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you assign IPv6 addresses for all Azure resources?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following links for more information about the topics
    that were covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*IP address types and allocation methods in Azure*: [https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-ip-addresses-overview-arm](https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-ip-addresses-overview-arm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Networking Limits*:[https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits?toc=%2fazure%2fvirtual-network%2ftoc.json#networking-limits](https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits?toc=%2fazure%2fvirtual-network%2ftoc.json#networking-limits)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quickstart: Create a virtual network using the Azure portal*: [https://docs.microsoft.com/en-us/azure/virtual-network/quick-create-portal](https://docs.microsoft.com/en-us/azure/virtual-network/quick-create-portal)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quickstart: Create a virtual network using PowerShell*: [https://docs.microsoft.com/en-us/azure/virtual-network/quick-create-powershell](https://docs.microsoft.com/en-us/azure/virtual-network/quick-create-powershell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quickstart: Create a virtual network using the Azure CLI*: [https://docs.microsoft.com/en-us/azure/virtual-network/quick-create-cli](https://docs.microsoft.com/en-us/azure/virtual-network/quick-create-cli)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Add, change, or remove IP addresses for an Azure network interface*: [https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-network-interface-addresses](https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-network-interface-addresses)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Create, change, or delete a public IP address*: [https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-public-ip-address](https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-public-ip-address)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Tutorial: Route network traffic with a route table using the Azure portal*: [https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-create-route-table-portal](https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-create-route-table-portal)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Virtual network peering*: [https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-peering-overview](https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-peering-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
