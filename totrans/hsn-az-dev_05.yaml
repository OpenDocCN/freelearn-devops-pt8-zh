- en: Using Azure Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When in need of using a search engine, it's always a good idea to use tested
    and well-known solutions that have been available on the market for a while. One
    of those solutions is Azure Search, which offers a search-as-a-service cloud solution
    with an API for developers, so users can focus on developing a working solution
    without the need to manage infrastructure or configuration. With the recent addition
    of the Cognitive Search API, we've been given an opportunity to enhance our search
    functionality with AI features, so it's possible to transform unstructured content
    into searchable content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Azure Search in your projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using full-text search for your needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using linguistics analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using indexing, index definition, and indexers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new Cognitive Search API with indexing workloads supported by AI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform exercises from this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to an Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tool for sending HTTP requests (cURL and Postman)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Azure Search service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Azure Search is an easy task and should not take more than a few minutes.
    The important thing to remember here is that, if you have to recreate a service,
    there is no way to back up and restore data—if you make mistakes here, everything
    has to be done from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: The reason to recreate would be changing the datatypes or other search attributes
    of the search index columns. While it will not be a problem during this exercise,
    have that in mind when creating a production workload.
  prefs: []
  type: TYPE_NORMAL
- en: Using Azure Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with most services in Azure, we will start our journey by creating Azure
    Search in the portal. To do so, click on + Create a resource and search for `Azure
    Search`. On the introduction screen, click on the Create button, which will take
    you to the configuration of this service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e42b191-3ac8-4e65-908f-0feececb7956.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we have pretty standard options here, which should not be unclear
    to you by now. There is, however, an option to select a Pricing tier, where currently
    there are different options to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Free: This is the most basic one without replicas available and shared resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Basic: This comes with load balancing available, scaling, and dedicated resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Standard: This is three different tiers with more compute power and partitions
    available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'High-density: The same as Standard but with more indexes available (and fewer
    partitions). This particular tier is designed for SaaS developers specifically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we proceed, you will have to understand what all of these concepts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Replica**: This is an individual instance of your search service, which hosts
    one copy of an index. If you have more than one replica, you can load balance
    your queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Index**: You can think of this as a table that contains multiple rows (or
    in other words, documents) with additional metadata used by a service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search unit** (**SU**): This is a billing unit for Azure Search, which is
    a composition of the number of replicas and partitions (*SU = Replicas * Partitions*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partition**: Each partition provides storage and I/O for your instance of
    Azure Search, so scaling this unit will give more of those.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main difference between replicas and partitions is that, if you need more
    computational resources, you can increase partitions while, for larger query volumes,
    you need more replicas (so a query can be load balanced).
  prefs: []
  type: TYPE_NORMAL
- en: 'When you fill all fields and select a tier, click on the Create button and
    wait for a moment for service creation. Once it is created, click on it and go
    to the Overview blade. There, select Import data, so we can start with some samples
    before diving deeper into Azure Search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7c6760f-cc7c-4f4c-bb42-2a039b082e5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, you will see multiple options for importing records—you
    are able to select the data source and index and enable Cognitive Search, which
    we will cover in the next sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f357de61-2f55-4499-9eb0-b3c836f44407.png)'
  prefs: []
  type: TYPE_IMG
- en: Remember that it is possible to delete or change the fields used for indexing
    data, but such operations require re-indexing all documents. By re-indexing I
    mean that you have to delete, then recreate the index. However, it is possible
    to add new fields without re-indexing the documents—in that case, the values for
    the new columns will be null for the older ones.
  prefs: []
  type: TYPE_NORMAL
- en: Because we selected sample data, Index is already filled with some default values.
    When you click Ok, they will be validated and the Indexer screen will become available.
    You may wonder what indexer is exactly. Its definition is quite simple—it is a
    crawler that looks at your data source and extracts everything from it based on
    the mapping between an index and stored information. For example, if you selected
    a field named `Status` as a part of your index, the indexer will search for all
    records containing it and push it to your index.
  prefs: []
  type: TYPE_NORMAL
- en: Indexers can be configured either to fetch data once or on schedule. We will
    cover scheduled indexers in the section regarding indexes and indexing documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are satisfied with import configuration, click on the Ok button and
    wait a moment until the data is imported and indexed. Now, we can test how our
    service works—on the Overview blade, you can find the Search explorer button.
    When you click on it, you will see the new screen, where you can enter your Query
    string and Request URL, which can be used in your application to get results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a100749a-bdf8-40be-86dc-dcc073355c81.png)'
  prefs: []
  type: TYPE_IMG
- en: Full-text search in Azure Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The power of Azure Search comes when you need to perform a full-text search
    to find relevant documents that will satisfy your query. This Azure service uses
    **Apache Lucene** under the hood, which is a well-known, high-performance search
    engine written in Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more information about Lucene here: [https://lucene.apache.org/core/](https://lucene.apache.org/core/).
    It is an open source project available to download for everyone.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to perform a full-text search, what is the
    syntax, and how to recognize potential issues.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first section of this chapter, you created your Azure Search instance
    and saw Search explorer, which enables you to send simple queries. Now, we will
    extend our requests, so you can select which fields should be used for query analysis,
    to filter results, and to order by a particular property. Here is the basic URL,
    which you will use for all of your requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://handsonazuresearch.search.windows.net/indexes/realestate-us-sample/docs?api-version=2016-09-01&search=*`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, it will differ depending on the name of your Azure Search instance,
    the index name, and the version used. The URL template can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://[service name].search.windows.net/indexes/[index name]/docs?[query
    parameters]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, in this example I used `*`, which basically means that I am
    interested in all documents indexed. However, before we proceed, we need to do
    one more thing—as with most APIs, Azure Search is secured and requires a key to
    authorize a request. If you do not send it, you will get an `HTTP 403 response`.
    To obtain a key, go to Azure Portal and select the Keys blade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/023894e2-54d4-47b8-899b-7e356a842948.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, with each request to your API, you will have to use the `api-key` header
    with the appropriate value. Here you can find an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Nonetheless, in most cases, we are not interested in literally all documents
    available—we have specific parameters that we would like to use. Let''s assume
    you would like to search for a specific city. In such a case, we have to use another
    endpoint and pass a valid payload, which will be used to build a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I changed the `HTTP` method to `POST` and used the `/search`
    endpoint for my request. The most important thing, however, is the body—for now,
    I used two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`search`: This is our query string, which we are using to tell Azure Search
    what we are interested in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`searchFields`: Here we are passing fields, which should contain our query
    string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please remember that the fields passed in the request body are case-sensitive
    and you should follow camel case if there are multiple words.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the preceding query on the sample index, you should be able to see
    some results returned. If you search for a city that is not in the indexed documents,
    you will see an empty result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You may ask what are the rules for choosing a search field—the only requirement
    is that it has to be marked as `Searchable`. Take a look at what will happen if
    I use `beds` to search for records with a specific number of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It seems we cannot use any field we would like to. You can check which fields
    can be used for searching in the index screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e84dbe7-a777-4bb2-bbe0-a9d2820e5a0b.png)'
  prefs: []
  type: TYPE_IMG
- en: In fact, you cannot use any field of the `Edm.Int32` type as `Searchable`. There
    are some other types, which are also not supported (for example, `Edm.GeographyPoint`)—you
    can find information about them when building or modifying fields used in an index.
  prefs: []
  type: TYPE_NORMAL
- en: 'To overcome the aforementioned problem, you may use filters—these are expressions
    based on the OData syntax, which you can leverage to search for the entities you
    are interested in. The only requirement is to make a field you want to use into
    a filter using filterable. Here you can find all possible fields, which you can
    use in such an HTTP request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We will not cover them all as this would take this whole chapter, however, we
    will focus a little more on the actual syntax of queries sent to Azure Search.
    As you probably remember, this service uses the Lucene search engine to index
    data and handle requests. Lucene supports a variety of different query types such
    as fuzzy search, wildcard search, and many more. You can decide which parser should
    be used by sending the `queryType` parameter with one of the available values—simple
    or full (Lucene).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find supported query operations by Lucene by reading the following
    page: [https://docs.microsoft.com/pl-pl/rest/api/searchservice/lucene-query-syntax-in-azure-search](https://docs.microsoft.com/pl-pl/rest/api/searchservice/lucene-query-syntax-in-azure-search).'
  prefs: []
  type: TYPE_NORMAL
- en: Linguistic analysis in full-text search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using full-text search, you have to understand what are the rules for performing
    such operations. Search engines have to analyze search query lexically to be able
    to extract important information and pass it to a query tree. In this section,
    we will cover the most common lexical analysis, which is linguistic analysis,
    to help you understand how Azure Search works and how to perform correct queries.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzers in Azure Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To perform linguistic analysis, Azure Search supports a variety of different
    analyzers, which can be specified in the index definition. However, before we
    start defining one of those, you have to catch a glimpse of what we are talking
    about. When creating an index, each search service has to analyze all input documents
    and decide what will be important when performing a search procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, each search query should be adjusted to some common rules, so
    the search engine can understand it. The necessary operations can be described
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: All non-essential words should be removed (such as "the" in English)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All words should be lowercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a word contains multiple words in it (such as "up-front"), it should be divided
    into atomic ones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let''s assume you are searching for an apartment using the following search
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Your analyzer will have to perform all of the preceding operations before passing
    the query to a search engine and, in fact, here you can find the result of such
    analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, each word has its particular position and offset. To get a
    result similar to the previous one, you can send the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the request's body, you have to provide both texts to analyze and use the
    analyzer. Note that I used `standard` here, which means that the standard Lucene
    analyzer is used here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Search supports several different analyzers for different languages—what
    is more, both Microsoft and Lucene versions are available. To get the full list,
    go to the documentation page: [https://docs.microsoft.com/pl-pl/rest/api/searchservice/language-support](https://docs.microsoft.com/pl-pl/rest/api/searchservice/language-support).'
  prefs: []
  type: TYPE_NORMAL
- en: If you are proficient in language analysis and syntax, you could create a custom
    analyzer that can be used for text analysis. Such analyzers can be defined during
    index creation, however, we will not cover that topic in this book as it is an
    advanced exercise and is out of our present scope. You will find a link to the
    tutorial in the *Further reading* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzer selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can select an analyzer for a specific field either during the creation
    of an index or while editing it. If you go to Azure Portal and to your Azure Search
    instance*,* you can click on an index and select the Fields section. It should
    display a list of all fields used in that index:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15191048-268f-4635-9058-c34dda27be07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when you scroll down, you will see that you are able to add a new field.
    If you would like to select an analyzer, you will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a checkbox Analyzer at the top of that blade
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Searchable as an option of that field
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you should see a drop-down list from which you are able to select a different
    analyzer than the custom one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37ddf8da-5103-407e-8737-2720d8aa2cf7.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that selecting a different analyzer than the custom one is crucial when
    you have fields containing multiple languages. In such a scenario, you should
    select an analyzer appropriate for the language used.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing in Azure Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An index is one of the most important constructs in Azure Search. We defined
    it as a table that contains all imported documents with searchable data defined
    in it. At the beginning of this chapter, you learned how to create it and add
    or edit fields. In this section, you will learn a bit more about modifying it
    as an index is not a fixed being that cannot be altered and adjusted to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Importing more data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is always a need to push more data to your index—your application grows,
    the storage of your documents becomes bigger and bigger, especially if you are
    creating a document repository, and you would like to be able to find what you
    are searching for even in the most recent documents. In fact, there are two options
    to add data to your index:'
  prefs: []
  type: TYPE_NORMAL
- en: The push model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pull model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover both of them in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Push model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The push model is the best solution for applications that have low-latency requirements.
    As opposed to the pull model, for this model, your document will be indexed immediately
    after pushing it using a RESTful API.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, there is no other option to use a push model besides using a RESTful
    API or .NET SDK to perform an operation. In the pull model, it is also possible
    to get data using Azure Portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can find an example request for pushing a document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is correct, you should be able to see a successful result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I would like to check whether my document is already indexed and available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The result should be a document that contains all of the fields we passed in
    the push request.
  prefs: []
  type: TYPE_NORMAL
- en: Pull model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A pull model is a bit different than a push model as it uses indexers to actually
    fetch the data. When using it, you are configuring both a data source and how
    frequently data should be pulled. As opposed to the push model, it can be configured
    and accessed when using Azure Portal.
  prefs: []
  type: TYPE_NORMAL
- en: Please note one important difference between push and pull—when using push,
    you are able to use any data source you want. When using the pull model you are
    limited to Blob Storage, Table Storage, CosmosDB, and SQL Database (both on Azure
    and VMs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can find an indexer configuration for pulling data when using Table
    Storage as a source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e4243c5-6f53-4fae-b160-9076554b630a.png)'
  prefs: []
  type: TYPE_IMG
- en: Please remember that you cannot configure a pull policy when using sample data.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is more, you can access an indexer configuration and current status by
    clicking on the Indexers button on the Overview blade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae123c63-5190-4aa0-95f1-c45bec2eb395.png)'
  prefs: []
  type: TYPE_IMG
- en: Cognitive search – adding AI to the indexing workload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating and managing an index, you always have to make sure that you have
    selected all required fields and marked them as searchable where needed. Additionally,
    we are limited to the current service functionalities, so we cannot use things
    such as image or natural language processing. Fortunately, Azure Service is about
    to start supporting the Cognitive Search feature, which adds AI to your indexing
    operations, allowing for richer analysis using more vectors. In this chapter,
    you will learn how to configure it, so you can start using it from the very beginning.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Cognitive Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cognitive Search can be configured when importing data for your service. When
    you click on the Import data button, you will see that one of the available sections
    is that feature exactly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ba39ba5-1b3c-47d9-bc22-c444253eb602.png)'
  prefs: []
  type: TYPE_IMG
- en: At the time of writing, this feature is available only in the South Central
    US and Western Europe regions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a list of Cognitive Skills that can be used for indexing your data.
    Whether you use one or not depends on your actual requirements—for the purpose
    of this exercise, I selected Detect language. You can customize the name of a
    field also; this could be crucial if your index will contain another one named
    the same, as it will be added to the result of a query. When you finish configuring
    your index, you can compare the previous one with the new one enriched by AI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/427ebe5e-fa49-4cf6-a502-3019711e8953.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we are missing the language field here since we did not use
    it. Let''s compare it with the newest index:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a87b6c5a-a8aa-45a9-8e69-412313decc12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, when I query a service using a newer index, I will get a result
    containing the language field filled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Search is a great service when you want to have your very own search solution
    and do not plan to maintain its infrastructure and configuration. With its flexibility
    and intuitiveness, you can quickly develop your application, leveraging features
    such as the push/pull model, scheduled indexing, or support for different kinds
    of data sources. Additionally, with the option to start from the free tier even
    for production workloads, you can gradually progress and scale your solution up
    adjusting costs based on real requirements. In [Chapter 6](aedf7d2d-cfb2-443c-b7e2-b638473fe05c.xhtml),
    *Mobile Notifications with Notification Hub*, we will cover topics related to
    handling mobile and applications and push notification by using Azure Notification
    Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is an index?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the push and pull models?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can an indexer be scheduled using a custom interval?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What analyzer does Azure Search use by default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can one implement a custom analyzer and use it in Azure Search?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between partition and replica?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of a header used for authorizing requests to Azure Search?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure Search documentation: [https://docs.microsoft.com/en-us/azure/search/](https://docs.microsoft.com/en-us/azure/search/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cognitive Skills for Azure Search: [https://docs.microsoft.com/en-us/azure/search/cognitive-search-predefined-skills](https://docs.microsoft.com/en-us/azure/search/cognitive-search-predefined-skills)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apache Lucene documentation: [https://lucene.apache.org/core/](https://lucene.apache.org/core/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Filters in Azure Search: [https://docs.microsoft.com/en-us/rest/api/searchservice/odata-expression-syntax-for-azure-search](https://docs.microsoft.com/en-us/rest/api/searchservice/odata-expression-syntax-for-azure-search)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
