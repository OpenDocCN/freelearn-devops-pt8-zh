- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing Terraform in Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Are you ready to start developing your AWS infrastructure with Terraform? In
    this chapter, you’ll learn the basics of Terraform and how to deploy your first
    template in AWS. We’ll cover the process of selecting the right AWS provider and
    choosing public modules that meet your project’s needs. You’ll also learn how
    to write custom Terraform AWS modules for your specific use cases.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have developed and deployed your AWS infrastructure
    using Terraform. You’ll also have gained valuable skills in decision-making for
    providers and selecting the right public modules for your project’s needs. Additionally,
    you’ll learn how and when to develop custom AWS modules and how to use them effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will delve deeper into Terraform and explore how it can
    be used to develop and deploy AWS infrastructure projects. Here’s a look at the
    topics we’ll cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Terraform basics for developing AWS infrastructure projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting AWS Providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting AWS public modules for your needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write custom Terraform AWS modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terraform basics for developing AWS infrastructure projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Terraform is a tool for building, changing, and versioning infrastructure safely
    and efficiently. It can manage infrastructure for many different types of cloud
    providers, including AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some basic concepts in Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A resource is an element of your infrastructure, such as an EC2 instance, an
    S3 bucket, or a security group.
  prefs: []
  type: TYPE_NORMAL
- en: 'A resource is typically created using a resource block in your Terraform configuration.
    A resource block has a type and a name, and it specifies the desired state of
    the resource. For example, the following block creates an EC2 instance in AWS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This resource block creates an EC2 instance with the type `aws_instance` and
    the name `web_server`. It specifies that the instance should be created using
    the specified AMI and instance type.
  prefs: []
  type: TYPE_NORMAL
- en: When you run `terraform apply`, Terraform will create the EC2 instance and set
    it to the desired state specified in the resource block. If the EC2 instance already
    exists and its state differs from the desired state, Terraform will update the
    instance to match the desired state.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use resource properties to specify additional details about the
    resource, such as the VPC in which it should be created, the security groups it
    should be associated with, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Providers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A provider is a plugin that Terraform uses to interact with the infrastructure
    of a particular cloud provider, such as AWS. Each provider has its own set of
    resources that you can use to create and manage infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a provider in your Terraform configuration, you need to specify it in
    a provider block. For example, to use the AWS provider, you would add the following
    block to your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This block specifies that you want to use the AWS provider and that you want
    to use the `us-east-1` region. You can also specify provider-specific configuration
    options, such as the access key and secret key to use when authenticating with
    the provider’s APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve specified a provider in your configuration, you can use resources
    from that provider to create and manage infrastructure. For example, you could
    use the `aws_instance` resource to create an EC2 instance in AWS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: State
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Terraform maintains a state file that stores the current configuration of your
    infrastructure. This allows it to track changes and know what actions to take
    when you make changes to your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The state file is an important part of how Terraform functions, as it allows
    Terraform to know what actions to take when you make changes to your infrastructure.
    For example, if you create a new EC2 instance using Terraform, the state file
    will be updated to reflect the existence of the new instance. If you then modify
    the instance using Terraform, the state file will be updated to reflect the new
    configuration of the instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few different ways that you can store your state file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`terraform.tfstate`. This is the simplest option, but it can be inconvenient
    if you are working in a team and need to share the state file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote state file**: You can also store the state file in a remote location,
    such as an S3 bucket or a Terraform Cloud workspace. This allows you to share
    the state file with other members of your team, and it can also help protect against
    data loss if your local machine is destroyed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Locking state file**: When using a remote state file, you can enable state
    file locking to prevent multiple users from modifying the state file simultaneously.
    This can help avoid conflicts when multiple users are making changes to the infrastructure
    at the same time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modules are self-contained packages of Terraform configurations that can be
    shared and reused. You can use modules to define your infrastructure in a more
    modular, reusable way.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose you want to create a web server cluster with a load balancer
    and a database. You could create a module for each of these components, and then
    use those modules to build the web server cluster. This would allow you to reuse
    the modules in other infrastructure projects, and it would make your code easier
    to understand and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: To create a module, you create a directory with one or more Terraform configuration
    files and a `module.tf` file that specifies the inputs and outputs of the module.
    You can then use the module in your infrastructure by calling it from another
    Terraform configuration using a module block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of a module block that calls a module named `web_server_cluster`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This block specifies the source of the module (a local directory named `web_server_cluster`)
    and sets the input variables for the module (`num_web_servers`, `web_server_size`,
    and `database_size`). The module can then use these input variables to create
    the desired infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Variables allow you to parameterize your configurations and make them more flexible.
    You can use variables to define values that are used in multiple places in your
    configuration, or that you want to be able to adjust easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a variable in your Terraform configuration, you can use a variable
    block. Here’s an example of a variable block that defines a variable named `image_id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This block defines a variable of type string named `image_id`. You can then
    use this variable in your configuration by referencing it with the `${var.name}`
    syntax, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify default values for your variables using the `default`
    attribute, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This sets the default value of the `image_id` variable to `ami-12345678`. If
    you don’t specify a value for the variable when you run Terraform, it will use
    the default value.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set the value of a variable using one of the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hard-coding the value**: You can set the value of a variable directly in
    your configuration using the default attribute. This is useful for simple configurations
    or for testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using environment variables**: You can set the value of a variable using
    an environment variable. This can be useful for storing sensitive information
    or for managing multiple environments (e.g. staging and production).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`terraform.tfvars`) and reference the file in your configuration using the
    `-var-file` flag. This can be useful for sharing values across multiple configurations
    or for storing values that you don’t want to commit to version control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outputs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Outputs are values that are exported from a Terraform configuration and can
    be accessed from other configurations or consumed by external systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define an output in your Terraform configuration, you can use an `output`
    block. Here’s an example of an `output` block that exports the public IP address
    of an EC2 instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This `output` block exports a value named `public_ip` and sets its value to
    the public IP address of the `web_server` EC2 instance. You can then access the
    value of this output using the `terraform output` command or by referencing it
    in another Terraform configuration using the `${``output.name}` syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Outputs are useful for displaying important information about your infrastructure,
    such as the IP addresses of resources or the URLs of applications. They can also
    be used to pass information between multiple configurations, such as the ID of
    an S3 bucket that is created in one configuration and used in another.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Provisioners are used to execute scripts or make API calls after a resource
    is created. This can be useful for tasks such as installing software on an EC2
    instance or uploading files to an S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Provisioners are defined in a `provisioner` block within a `resource` block.
    For example, the following `resource` block includes a provisioner that runs a
    shell script after the EC2 instance is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This provisioner uses the `remote-exec` provisioner type, which allows you to
    execute commands on the remote host using SSH. The inline attribute specifies
    the commands to run. In this case, the provisioner installs the `nginx` web server
    on the EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Terraform supports several different types of provisioners, including `file`,
    `remote-exec`, and `local-exec`. You can use different provisioners depending
    on your needs and the type of resource you are managing.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting AWS Providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Terraform, a provider is a plugin that integrates Terraform with a specific
    infrastructure platform, such as AWS, Google Cloud, or Azure. Providers are responsible
    for understanding the API of the infrastructure platform and exposing resources
    that can be created, modified, and destroyed using Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of Terraform providers – official providers and third-party
    providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Official providers** are developed and maintained by HashiCorp, the company
    behind Terraform. These providers are considered the most stable and reliable,
    as they are supported by HashiCorp and receive regular updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Third-party providers** are developed and maintained by external organizations
    or individuals. These providers are not officially supported by HashiCorp, but
    they can be useful for extending Terraform to support additional infrastructure
    platforms or tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find a list of all the available Terraform providers on the Terraform
    Registry. ([https://registry.terraform.io/browse/providers](https://registry.terraform.io/browse/providers)).
    The Registry lists both official and third-party providers, and it includes information
    on the providers’ compatibility with Terraform and the resources they support.
  prefs: []
  type: TYPE_NORMAL
- en: 'To select a provider in Terraform, you need to specify it in a `provider` block
    in your configuration. For example, to use the AWS provider, you would add the
    following block to your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This block specifies that you want to use the AWS provider and that you want
    to use the `us-east-1` region. You can also specify provider-specific configuration
    options, such as the access key and secret key to use when authenticating with
    the provider’s APIs.
  prefs: []
  type: TYPE_NORMAL
- en: You can use multiple `provider` blocks in a single configuration to manage resources
    across multiple providers. For example, you might use the AWS provider to manage
    your EC2 instances and the Google Cloud provider to manage your Compute Engine
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify the version of a provider to use, you can use the `version` attribute
    in the `provider` block, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This specifies that you want to use the latest version of the AWS provider that
    is compatible with version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: By running the `terraform init` command, Terraform will automatically download
    the required plugins for the providers specified in your configuration. To enforce
    a specific version of a provider, you can add a `version` attribute to the `provider`
    block.
  prefs: []
  type: TYPE_NORMAL
- en: You can also specify the version of a provider using the `-upgrade` flag when
    running `terraform init`. This will force Terraform to download the latest version
    of the provider, even if you have already downloaded a compatible version.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use a specific version of a provider, you can specify the version
    number in the `version` attribute, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This specifies that you want to use version 2.23.0 of the AWS provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use the latest version of a provider, you can set the `version`
    attribute to `latest`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This specifies that you want to use the latest version of the AWS provider that
    is available.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `-get-plugins` flag when running `terraform init` to download
    the latest versions of all the providers in your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are currently two AWS Providers available in Terraform:'
  prefs: []
  type: TYPE_NORMAL
- en: The **aws provider** is the legacy provider, and it is written in Go. It uses
    the AWS SDK for Go to make API requests to AWS, and it was the default AWS provider
    for Terraform for a long time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **aws.sdk provider** is a newer provider, and it is written in TypeScript.
    It uses the AWS SDK for JavaScript to make API requests to AWS. It was introduced
    in Terraform v0.13 as an experimental provider, and it became a stable provider
    in Terraform v0.14.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, the `aws.sdk` provider is preferred over the `aws` provider, as
    it is more feature-complete and has better support for AWS services. However,
    the `aws` provider is still widely used and is likely to be supported for the
    foreseeable future.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting AWS public modules for your needs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use a public module in Terraform, you need to specify the source of the module
    in a `module` block in your configuration. You can specify the source of a module
    using a local path, Terraform Public Registry, a Git repository URL, or a URL
    to a compressed archive file (e.g. a `.zip` or `.``tar.gz` file).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of how you can specify the source of a public module
    in a `module` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '`source` attribute, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This specifies that the `web_server_cluster` module is located in a local directory
    named `web_server_cluster`.
  prefs: []
  type: TYPE_NORMAL
- en: '`source` attribute, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This specifies that the `web_server_cluster` module is located in a Git repository
    at the URL [https://github.com/example/web_server_cluster.git](https://github.com/example/web_server_cluster.git).
  prefs: []
  type: TYPE_NORMAL
- en: '`source` attribute, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This specifies that the `web_server_cluster` module is located in a `.zip` file
    at the URL `http://example.com/web_server_cluster.zip`.
  prefs: []
  type: TYPE_NORMAL
- en: '`module` block and set the `source` attribute to the URL of the module on the
    registry.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of a `module` block that calls a module hosted on the Terraform
    Registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can find a list of available public modules on the Terraform Registry ([https://registry.terraform.io/browse/modules](https://registry.terraform.io/browse/modules)).
    The Registry includes both official and third-party modules, and it includes information
    on the module’s compatibility with Terraform and the resources it supports. You
    can use the search bar to find specific modules, or you can browse the categories
    to find modules for a particular infrastructure platform or use case.
  prefs: []
  type: TYPE_NORMAL
- en: How to decide on Terraform module selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several factors to consider when deciding which Terraform modules
    to use in your infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compatibility**: Make sure that the module is compatible with the version
    of Terraform you are using. You can check the compatibility information on the
    module’s page on the Terraform Registry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supported resources**: Check that the module supports the resources you need
    to create or manage. You can find a list of the resources supported by the module
    on its page on the Terraform Registry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input variables**: Make sure that the module has the input variables you
    need to customize the behavior of the module. You can find a list of the input
    variables for the module on its page on the Terraform Registry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Output values**: Check that the module has the output values you need to
    access the created resources or pass information between modules. You can find
    a list of the output values for the module on its page on the Terraform Registry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintenance**: Consider the maintenance status of the module. Check when
    the module was last updated and whether it is actively maintained. You may want
    to choose a module that is more actively maintained to ensure that it stays up
    to date and receives bug fixes and new features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write custom Terraform AWS modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To write a Terraform module, you will need to create a configuration file or
    a set of configuration files that define the resources you want to create or manage.
    A module is essentially a reusable configuration that can be called from other
    configurations or modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps you can follow to write a Terraform module:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resource` blocks to define the resources you want to create or manage. For
    example, you might use an `aws_instance` resource to create an EC2 instance or
    an `aws_s3_bucket` resource to create an S3 bucket.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`variable` blocks to define the input variables for the module. Input variables
    allow users of the module to customize the behavior of the module when it is called.
    For example, you might define a variable for the number of EC2 instances to create
    or the name of an S3 bucket.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`output` blocks to define the output values for the module. Output values allow
    users of the module to access the created resources or pass information between
    modules. For example, you might define an output value for the public IP address
    of an EC2 instance or the URL of an S3 bucket.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`terraform plan` and `terraform apply` to test the module and make sure it
    is creating the resources as expected.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Document the module**: Document the input variables, output values, and any
    other important information about the module in the README file for the module.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the basics of developing AWS infrastructure projects
    with Terraform. We learned how to deploy our first Terraform template in AWS,
    select AWS Providers, and choose public AWS modules that best suit our needs.
    We also explored how to write custom Terraform AWS modules and how to use them
    effectively. By the end of this chapter, you should be able to develop and deploy
    your own AWS infrastructure, make decisions about providers, select the best public
    AWS modules, and create and use custom Terraform AWS modules. These skills will
    serve as a foundation for you to continue exploring Terraform and AWS infrastructure
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you’re new to serverless or an experienced developer, deploying serverless
    projects with Terraform can be a game changer for your development workflow. In
    the next chapter, we’ll dive into the world of serverless and explore how to use
    Terraform to deploy serverless applications on AWS Lambda. From configuring AWS
    APIs and authentication to handling event triggers and scaling, you’ll gain the
    skills needed to successfully deploy and manage your serverless projects with
    Terraform.
  prefs: []
  type: TYPE_NORMAL
