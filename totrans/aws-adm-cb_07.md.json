["```\n      Parameters:\n        AvailabilityZone1: \n          Description: Availability zone 1 name (e.g. us-east-1a) \n          Type: AWS::EC2::AvailabilityZone::Name \n        AvailabilityZone2: \n          Description: Availability zone 2 name (e.g. us-east-1b) \n          Type: AWS::EC2::AvailabilityZone::Name\n\n```", "```\n      Resources: \n        # VPC & subnets \n        ExampleVPC: \n          Type: AWS::EC2::VPC \n          Properties: \n            CidrBlock: !Ref VPCCIDR \n            EnableDnsSupport: true \n            EnableDnsHostnames: true \n          Tags: \n            - { Key: Name, Value: Example VPC } \n        PublicSubnetA: \n          Type: AWS::EC2::Subnet \n          Properties: \n            AvailabilityZone: !Ref AvailabilityZone1 \n            CidrBlock: !Ref PublicSubnetACIDR \n            MapPublicIpOnLaunch: true \n            VpcId: !Ref ExampleVPC \n          Tags: \n            - { Key: Name, Value: Public Subnet A } \n        PublicSubnetB: \n          Type: AWS::EC2::Subnet \n          Properties: \n            AvailabilityZone: !Ref AvailabilityZone2 \n            CidrBlock: !Ref PublicSubnetBCIDR \n            MapPublicIpOnLaunch: true \n            VpcId: !Ref ExampleVPC \n          Tags: \n            - { Key: Name, Value: Public Subnet B } \n        PrivateSubnetA: \n          Type: AWS::EC2::Subnet \n          Properties: \n            AvailabilityZone: !Ref AvailabilityZone1 \n            CidrBlock: !Ref PrivateSubnetACIDR \n            VpcId: !Ref ExampleVPC \n          Tags: \n            - { Key: Name, Value: Private Subnet A } \n        PrivateSubnetB: \n          Type: AWS::EC2::Subnet \n          Properties: \n            AvailabilityZone: !Ref AvailabilityZone2 \n            CidrBlock: !Ref PrivateSubnetBCIDR \n            VpcId: !Ref ExampleVPC \n          Tags: \n            - { Key: Name, Value: Private Subnet B }\n\n```", "```\n      VPCCIDR: \n        Description: CIDR block for VPC \n        Type: String \n        Default: \"172.31.0.0/21\" # 2048 IP addresses \n      PublicSubnetACIDR: \n        Description: CIDR block for public subnet A \n        Type: String \n        Default: \"172.31.0.0/23\" # 512 IP address \n      PublicSubnetBCIDR: \n        Description: CIDR block for public subnet B \n        Type: String \n        Default: \"172.31.2.0/23\" # 512 IP address \n      PrivateSubnetACIDR: \n        Description: CIDR block for private subnet A \n        Type: String \n        Default: \"172.31.4.0/23\" # 512 IP address \n      PrivateSubnetBCIDR: \n        Description: CIDR block for private subnet B \n        Type: String \n        Default: \"172.31.6.0/23\" # 512 IP address\n\n```", "```\n        # Internet Gateway \n        ExampleIGW: \n          Type: AWS::EC2::InternetGateway \n          Properties: \n            Tags: \n              - { Key: Name, Value: Example Internet Gateway } \n        IGWAttachment: \n          Type: AWS::EC2::VPCGatewayAttachment \n          DependsOn: ExampleIGW \n          Properties: \n            VpcId: !Ref ExampleVPC \n            InternetGatewayId: !Ref ExampleIGW\n\n```", "```\n        # Public Route Table \n        # Add a route for Internet bound traffic pointing to our IGW \n        # A route for VPC bound traffic will automatically be added \n        PublicRouteTable: \n          Type: AWS::EC2::RouteTable \n          Properties: \n            VpcId: !Ref ExampleVPC \n            Tags: \n              - { Key: Name, Value: Public Route Table } \n        PublicInternetRoute: \n          Type: AWS::EC2::Route \n          DependsOn: IGWAttachment \n          Properties: \n            RouteTableId: !Ref PublicRouteTable \n            GatewayId: !Ref ExampleIGW \n            DestinationCidrBlock: \"0.0.0.0/0\" \n        RouteAssociationPublicA: \n          Type: AWS::EC2::SubnetRouteTableAssociation \n          Properties: \n            RouteTableId: !Ref PublicRouteTable \n            SubnetId: !Ref PublicSubnetA \n        RouteAssociationPublicB: \n          Type: AWS::EC2::SubnetRouteTableAssociation \n          Properties: \n            RouteTableId: !Ref PublicRouteTable \n            SubnetId: !Ref PublicSubnetB\n\n```", "```\n        # Private Route Table \n        # We don't add any entries to this route table because there is\n          no NAT gateway \n        # However a route for VPC bound traffic will automatically be added \n        PrivateRouteTable: \n          Type: AWS::EC2::RouteTable \n          Properties: \n            VpcId: !Ref ExampleVPC \n            Tags: \n              - { Key: Name, Value: Private Route Table } \n        PrivateSubnetAssociationA: \n          Type: AWS::EC2::SubnetRouteTableAssociation \n          Properties: \n            RouteTableId: !Ref PrivateRouteTable \n            SubnetId: !Ref PrivateSubnetA \n        PrivateSubnetAssociationB: \n          Type: AWS::EC2::SubnetRouteTableAssociation \n          Properties: \n            RouteTableId: !Ref PrivateRouteTable \n            SubnetId: !Ref PrivateSubnetB\n\n```", "```\n              # Public NACL \n              PublicNACL: \n                Type: AWS::EC2::NetworkAcl \n                Properties: \n                  VpcId: !Ref ExampleVPC \n                  Tags: \n                    - { Key: Name, Value: Example Public NACL } \n              # Allow outbound to everywhere \n              NACLRulePublicEgressAllowAll: \n                Type: AWS::EC2::NetworkAclEntry \n                Properties: \n                  CidrBlock: \"0.0.0.0/0\" \n                  Egress: true \n                  Protocol: 6 \n                  PortRange: { From: 1, To: 65535 } \n                  RuleAction: allow \n                  RuleNumber: 100 \n                  NetworkAclId: !Ref PublicNACL \n              # Allow outbound to VPC on all protocols \n              NACLRulePublicEgressAllowAllToVPC: \n                Type: AWS::EC2::NetworkAclEntry \n                Properties: \n                  CidrBlock: !Ref VPCCIDR \n                  Egress: true \n                  Protocol: -1 \n                  RuleAction: allow \n                  RuleNumber: 200 \n                  NetworkAclId: !Ref PublicNACL \n              # Allow inbound from everywhere to ephemeral ports\n                (above 1024) \n              NACLRulePublicIngressAllowEphemeral: \n                Type: AWS::EC2::NetworkAclEntry \n                Properties: \n                  CidrBlock: \"0.0.0.0/0\" \n                  Protocol: 6 \n                  PortRange: { From: 1024, To: 65535 } \n                  RuleAction: allow \n                  RuleNumber: 100 \n                  NetworkAclId: !Ref PublicNACL \n              # Allow inbound from everywhere on port 22 for SSH \n              NACLRulePublicIngressAllowSSH: \n                Type: AWS::EC2::NetworkAclEntry \n                Properties: \n                  CidrBlock: \"0.0.0.0/0\" \n                  Protocol: 6 \n                  PortRange: { From: 22, To: 22 } \n                  RuleAction: allow \n                  RuleNumber: 200 \n                  NetworkAclId: !Ref PublicNACL \n              # Allow inbound from everywhere on port 443 for HTTPS \n              NACLRulePublicIngressAllowHTTPS: \n                Type: AWS::EC2::NetworkAclEntry \n                Properties: \n                  CidrBlock: \"0.0.0.0/0\" \n                  Protocol: 6 \n                  PortRange: { From: 443, To: 443 } \n                  RuleAction: allow \n                  RuleNumber: 300 \n                  NetworkAclId: !Ref PublicNACL \n              # Allow inbound from everywhere on port 80 for HTTP \n              NACLRulePublicIngressAllowHTTP: \n                Type: AWS::EC2::NetworkAclEntry \n                Properties: \n                  CidrBlock: \"0.0.0.0/0\" \n                  Protocol: 6 \n                  PortRange: { From: 80, To: 80 } \n                  RuleAction: allow \n                  RuleNumber: 400 \n                  NetworkAclId: !Ref PublicNACL \n              # Allow inbound from VPC on all protocols \n              NACLRulePublicIngressAllowFromVPC: \n                Type: AWS::EC2::NetworkAclEntry \n                Properties: \n                  CidrBlock: !Ref VPCCIDR \n                  Protocol: -1 \n                  RuleAction: allow \n                  RuleNumber: 500 \n                  NetworkAclId: !Ref PublicNACL \n              NACLAssociationPublicSubnetA: \n                Type: AWS::EC2::SubnetNetworkAclAssociation \n                Properties: \n                  NetworkAclId: !Ref PublicNACL \n                  SubnetId: !Ref PublicSubnetA \n              NACLAssociationPublicSubnetB: \n                Type: AWS::EC2::SubnetNetworkAclAssociation \n                Properties: \n                  NetworkAclId: !Ref PublicNACL \n                  SubnetId: !Ref PublicSubnetB\n\n```", "```\n      # Private NACL \n      PrivateNACL: \n        Type: AWS::EC2::NetworkAcl \n        Properties: \n          VpcId: !Ref ExampleVPC \n          Tags: \n            - { Key: Name, Value: Example Private NACL } \n      # Allow all protocols from VPC range \n      NACLRulePrivateIngressAllowVPC: \n        Type: AWS::EC2::NetworkAclEntry \n        Properties: \n          CidrBlock: !Ref VPCCIDR \n          Protocol: -1 \n          RuleAction: allow \n          RuleNumber: 100 \n          NetworkAclId: !Ref PrivateNACL \n      # Allow TCP responses from everywhere \n      NACLRulePrivateIngressAllowEphemeral: \n        Type: AWS::EC2::NetworkAclEntry \n        Properties: \n          CidrBlock: \"0.0.0.0/0\" \n          Protocol: 6 \n          PortRange: { From: 1024, To: 65535 } \n          RuleAction: allow \n          RuleNumber: 200 \n          NetworkAclId: !Ref PrivateNACL \n      # Allow outbound traffic to everywhere, all protocols \n      NACLRulePrivateEgressAllowVPC: \n        Type: AWS::EC2::NetworkAclEntry \n        Properties: \n          CidrBlock: \"0.0.0.0/0\" \n          Egress: true \n          Protocol: -1 \n          RuleAction: allow \n          RuleNumber: 100 \n          NetworkAclId: !Ref PrivateNACL \n      NACLAssociationPrivateSubnetA: \n        Type: AWS::EC2::SubnetNetworkAclAssociation \n        Properties: \n          NetworkAclId: !Ref PrivateNACL \n          SubnetId: !Ref PrivateSubnetA \n      NACLAssociationPrivateSubnetB: \n        Type: AWS::EC2::SubnetNetworkAclAssociation \n        Properties: \n          NetworkAclId: !Ref PrivateNACL \n          SubnetId: !Ref PrivateSubnetB\n\n```", "```\n      Outputs: \n        ExampleVPC: \n          Value: !Ref ExampleVPC \n        PublicSubnetA: \n          Value: !Ref PublicSubnetA \n        PublicSubnetB: \n          Value: !Ref PublicSubnetB \n        PrivateRouteTable: \n          Value: !Ref PrivateRouteTable \n        PublicRouteTable: \n          Value: !Ref PublicRouteTable \n        PrivateSubnetA: \n          Value: !Ref PrivateSubnetA \n        PrivateSubnetB: \n          Value: !Ref PrivateSubnetB\n\n```", "```\n aws cloudformation create-stack \\\n --stack-name secure-vpc \\\n --template-body file://07-building-a-secure-network.yaml \\\n --parameters \\\n ParameterKey=AvailabilityZone1,ParameterValue=<az-1> \\\n ParameterKey=AvailabilityZone2,ParameterValue=<az-2>\n\n```", "```\n      AWSTemplateFormatVersion: \"2010-09-09\" \n      Description: Create NAT Gateway and associated route.\n\n```", "```\n      Parameters: \n        PublicSubnetId: \n          Description: Public Subnet ID to add the NAT Gateway to \n          Type: AWS::EC2::Subnet::Id \n        RouteTableId: \n          Description: The private subnet route table to add the NAT\n          Gateway route to \n          Type: String\n\n```", "```\n      Resources: \n        EIP: \n          Type: AWS::EC2::EIP \n          Properties: \n            Domain: vpc\n\n```", "```\n      NatGateway: \n        Type: AWS::EC2::NatGateway \n        Properties: \n          AllocationId: !GetAtt EIP.AllocationId \n          SubnetId: !Ref PublicSubnetId\n\n```", "```\n      Route: \n        Type: AWS::EC2::Route \n        Properties: \n          RouteTableId: !Ref RouteTableId \n          DestinationCidrBlock: 0.0.0.0/0 \n          NatGatewayId: !Ref NatGateway\n\n```", "```\n aws cloudformation create-stack \\\n --stack-name nat-gateway \\\n --template-body file://07-nat-gateway.yaml \\\n --parameters \\\n ParameterKey=RouteTableId,ParameterValue=<route-table-id> \\\n ParameterKey=PublicSubnetId,ParameterValue=<public-subnet-id>\n\n```", "```\n      AWSTemplateFormatVersion: \"2010-09-09\"  \n      Description: Create a weighted DNS setup for canary deployments.\n\n```", "```\n      Parameters: \n        HostedZoneName: \n          Type: String \n          Description: The hosted zone to create records in \n\n        DomainName: \n          Type: String \n          Description: The domain name to create in the hosted zone \n\n        OldResource: \n          Type: String \n          Description: The older resource domain name \n\n        NewResource: \n          Type: String \n          Description: The newer resource domain name\n\n```", "```\n      OldWeight: \n        Type: Number \n        Default: 1 \n        Description: The ratio of requests to send to the older endpoint \n\n      NewWeight: \n        Type: Number \n        Default: 0 \n        Description: The ratio of requests to send to the newer endpoint\n\n```", "```\n      Resources: \n        RecordSetGroup: \n          Type: AWS::Route53::RecordSetGroup \n          Properties: \n            HostedZoneName: !Ref HostedZoneName \n            Comment: Canary deployment record set group \n            RecordSets: \n              - Name: !Join [ \".\", [ Ref: DomainName, Ref: \n                  HostedZoneName ] ] \n                Type: CNAME \n                TTL: \"300\" \n                SetIdentifier: Old \n                Weight: !Ref OldWeight \n                ResourceRecords: \n                  - !Ref OldResource \n              - Name: !Join [ \".\", [ Ref: DomainName, Ref: \n                  HostedZoneName ] ] \n                Type: CNAME \n                TTL: \"300\" \n                SetIdentifier: New \n                Weight: !Ref NewWeight \n                ResourceRecords: \n                  - !Ref NewResource\n\n```", "```\n aws cloudformation create-stack \\\n --stack-name canary \\\n --template-body file://07-canary-deployments.yaml \\\n --parameters \\\n ParameterKey=DomainName,ParameterValue=<your-domain-name> \\\n ParameterKey=OldResource,ParameterValue=<old-resource-dns> \\\n ParameterKey=NewResource,ParameterValue=<new-resource-dns> \\\n ParameterKey=HostedZoneName,ParameterValue=<your-hosted-zone> \n\n```", "```\n aws cloudformation update-stack \\\n --stack-name canary \\\n --parameters \\\n ParameterKey=HostedZoneName,UsePreviousValue=true \\\n ParameterKey=DomainName,UsePreviousValue=true \\\n ParameterKey=OldResource,UsePreviousValue=true \\\n ParameterKey=NewResource,UsePreviousValue=true \\\n ParameterKey=OldWeight,ParameterValue=0 \\\n ParameterKey=NewWeight,ParameterValue=1 \\\n --use-previous-template\n\n```", "```\n      Parameters: \n        DomainName: \n          Description: Your domain name (example.org) \n          Type: String\n\n```", "```\n      Resources: \n        DNSHostedZone:  \n          Type: AWS::Route53::HostedZone \n          Properties: \n            Name: !Ref DomainName\n\n```", "```\n aws cloudformation create-stack \\\n --stack-name example-hosted-zone \\\n --template-body file://07-hosting-a-domain.yaml \\\n --parameters \\\n ParameterKey=DomainName,ParameterValue=<your-domain-name>\n\n```", "```\n  DNSRecords: \n    Type: AWS::Route53::RecordSetGroup \n    Properties: \n      HostedZoneId: \n        Ref: DNSHostedZone \n      RecordSets: \n      - Name: !Ref DomainName \n        Type: A \n        TTL: 60 \n        ResourceRecords: \n          - \"127.0.0.1\" \n      - Name: !Ref DomainName \n        Type: MX \n        TTL: 60 \n        ResourceRecords: \n          - \"10 smtp.example.org\" \n          - \"20 smtp.example.org\" \n      - Name: !Ref DomainName \n        Type: TXT \n        TTL: 60 \n        ResourceRecords: \n          - '\"v=spf1 include:spf.example.org ?all\"'\n\n```", "```\n      Parameters: \n        DomainName: \n          Description: Your domain name (example.org) \n          Type: String \n        LoadBalancerDNSNameRegionA: \n          Description: The DNS name of your ELB in region A \n          Type: String \n        LoadBalancerHostedZoneRegionA: \n          Description: The Hosted Zone ID of your ELB in region A \n          Type: String \n        LoadBalancerDNSNameRegionB: \n          Description: The DNS name of your ELB in region B \n          Type: String \n        LoadBalancerHostedZoneRegionB: \n          Description: The Hosted Zone ID of your ELB in region B \n          Type: String\n\n```", "```\n      Resources: \n        DNSHostedZone: \n          Type: AWS::Route53::HostedZone \n          Properties: \n            Name: !Ref DomainName\n\n```", "```\n        RegionAHealthCheck: \n          Type: AWS::Route53::HealthCheck \n          Properties: \n            HealthCheckConfig: \n              FailureThreshold: 3 \n              FullyQualifiedDomainName: !Ref LoadBalancerDNSNameRegionA \n              Port: 80 \n              RequestInterval: 30 \n              ResourcePath: \"/\" \n              Type: HTTP \n            HealthCheckTags: \n              - { Key: Name, Value: Region A Health Check } \n        RegionBHealthCheck: \n          Type: AWS::Route53::HealthCheck \n          Properties: \n            HealthCheckConfig: \n              FailureThreshold: 3 \n              FullyQualifiedDomainName: !Ref LoadBalancerDNSNameRegionB \n              Port: 80 \n              RequestInterval: 30 \n              ResourcePath: \"/\" \n              Type: HTTP \n            HealthCheckTags: \n              - { Key: Name, Value: Region B Health Check }\n\n```", "```\n        RegionAPrimary: \n          Type: AWS::Route53::RecordSet \n          Properties: \n            Name: !Join [ ., [ a, Ref: DomainName ] ] \n            Type: A \n            HostedZoneId: !Ref DNSHostedZone \n            AliasTarget: \n              HostedZoneId: !Ref LoadBalancerHostedZoneRegionA \n              DNSName: !Ref LoadBalancerDNSNameRegionA \n              Failover: PRIMARY \n              SetIdentifier: primary-region-a \n              HealthCheckId: !Ref RegionAHealthCheck \n        RegionBPrimary: \n          Type: AWS::Route53::RecordSet \n          Properties: \n            Name: !Join [ ., [ b, Ref: DomainName ] ] \n            Type: A \n            HostedZoneId: !Ref DNSHostedZone \n            AliasTarget: \n              HostedZoneId: !Ref LoadBalancerHostedZoneRegionB \n              DNSName: !Ref LoadBalancerDNSNameRegionB \n              Failover: PRIMARY \n              SetIdentifier: primary-region-b \n              HealthCheckId: !Ref RegionBHealthCheck\n\n```", "```\n        RegionAFailover: \n          Type: AWS::Route53::RecordSet \n          Properties: \n            Name: !Join [ ., [ a, Ref: DomainName ] ] \n            Type: A \n            HostedZoneId: !Ref DNSHostedZone \n            AliasTarget: \n              HostedZoneId: !Ref LoadBalancerHostedZoneRegionB \n              DNSName: !Ref LoadBalancerDNSNameRegionB \n              Failover: SECONDARY \n              SetIdentifier: secondary-region-a \n        RegionBFailover: \n          Type: AWS::Route53::RecordSet \n          Properties: \n            Name: !Join [ ., [ b, Ref: DomainName ] ] \n            Type: A \n            HostedZoneId: !Ref DNSHostedZone \n            AliasTarget: \n              HostedZoneId: !Ref LoadBalancerHostedZoneRegionA \n              DNSName: !Ref LoadBalancerDNSNameRegionA \n              Failover: SECONDARY \n              SetIdentifier: secondary-region-b\n\n```", "```\n        NorthAmericaGeolocation: \n          Type: AWS::Route53::RecordSet \n          Properties: \n            Name: !Ref DomainName \n            Type: A \n            HostedZoneId: !Ref DNSHostedZone \n            AliasTarget: \n              HostedZoneId: !Ref DNSHostedZone \n              DNSName: !Join [ ., [ a, Ref: DomainName ] ] \n            GeoLocation: \n              ContinentCode: NA # North America \n            SetIdentifier: geolocation-region-a \n        RestOfWorldGeolocation: \n          Type: AWS::Route53::RecordSet \n          Properties: \n            Name: !Ref DomainName \n            Type: A \n            HostedZoneId: !Ref DNSHostedZone \n            AliasTarget: \n              HostedZoneId: !Ref DNSHostedZone \n              DNSName: !Join [ ., [ b, Ref: DomainName ] ] \n            GeoLocation: \n              CountryCode: \"*\" # Rest of world \n            SetIdentifier: geolocation-region-b\n\n```", "```\n aws cloudformation create-stack \\\n --stack-name geolocation-failover \\\n --template-body file://07-routing-based-on-location.yaml \\\n --parameters \\\n ParameterKey=DomainName,ParameterValue=gitrepository.com \\\n ParameterKey=LoadBalancerDNSNameRegionA,ParameterValue=<elb-a> \\\n ParameterKey=LoadBalancerHostedZoneRegionA, \\\n        ParameterValue=<elb-zoneid-a> \\\n ParameterKey=LoadBalancerDNSNameRegionB,ParameterValue=<elb-b> \\\n ParameterKey=LoadBalancerHostedZoneRegionB, \\\n        ParameterValue=<elb-zoneid-b>\n\n```", "```\n    [root@ip-172-30-0-153 ec2-user]# service nginx stop\n    Stopping nginx:                                            [  OK  ]\n\n```", "```\n      AWSTemplateFormatVersion: \"2010-09-09\" \n      Description: Flow logs for networking resources\n\n```", "```\n      Parameters: \n        VpcId: \n          Type: String \n          Description: The VPC to create flow logs for\n\n```", "```\n      Resources: \n        LogGroup: \n          Type: AWS::Logs::LogGroup \n          DeletionPolicy: Delete \n          Properties: \n            LogGroupName: LogGroup\n\n```", "```\n        IamRole: \n          Type: AWS::IAM::Role \n          Properties: \n            AssumeRolePolicyDocument: \n              Version: \"2012-10-17\" \n              Statement: \n                - \n                  Effect: Allow \n                  Principal: \n                    Service: vpc-flow-logs.amazonaws.com \n                  Action: sts:AssumeRole \n            Policies: \n              - \n                PolicyName: CloudWatchLogsAccess \n                PolicyDocument: \n                  Version: \"2012-10-17\" \n                  Statement: \n                    - \n                      Action: \n                        - logs:CreateLogGroup \n                        - logs:CreateLogStream \n                        - logs:PutLogEvents \n                        - logs:DescribeLogGroups \n                        - logs:DescribeLogStreams \n                      Effect: Allow \n                      Resource: \"*\"\n\n```", "```\n        FlowLog: \n          Type: AWS::EC2::FlowLog \n          DependsOn: LogGroup \n          Properties: \n            DeliverLogsPermissionArn: !GetAtt IamRole.Arn \n            LogGroupName: LogGroup \n            ResourceId: !Ref VpcId \n            ResourceType: VPC \n            TrafficType: ALL\n\n```", "```\n aws cloudformation create-stack \\\n --stack-name VpcFlowLogs \\\n --template-body file://07-flow-logs.yml \\\n --capabilities CAPABILITY_IAM \\\n --parameters ParameterKey=VpcId,ParameterValue=<your-vpc-id>\n\n```"]