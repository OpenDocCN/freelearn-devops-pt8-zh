- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Building Your Own Structured Templates
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建您自己的结构化模板
- en: 'It’s time to start one of the most important tasks in Zabbix: building structured
    templates. A good Zabbix setup relies heavily on templating, and there is a huge
    difference between a good and a bad template. So, if you’re new to Zabbix or you
    haven’t started building your own templates yet, then pay close attention to this
    chapter.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是开始 Zabbix 中最重要任务之一的时候：构建结构化模板。一个好的 Zabbix 设置非常依赖模板，良好的模板和差的模板之间差异巨大。所以，如果你是
    Zabbix 新手，或者还没有开始构建自己的模板，那么请密切关注本章内容。
- en: In this chapter, we will go over how to set up your templates, and how to fill
    them with the right items and triggers. Also, it is important to make use of macros
    and **Low-Level Discovery** (**LLD**) in the right way. After following these
    recipes, you will be more than ready to build solid Zabbix templates with the
    right format and even LLD.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讲解如何设置你的模板，以及如何填充正确的项和触发器。此外，正确使用宏和**低级发现**（**LLD**）非常重要。在遵循这些配方后，你将完全准备好构建格式正确、甚至支持
    LLD 的扎实 Zabbix 模板。
- en: 'In this chapter, we’ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating your Zabbix template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的 Zabbix 模板
- en: Setting up template-level tags
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置模板级标签
- en: Creating template items
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模板项
- en: Creating template triggers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模板触发器
- en: Setting up different kinds of macros
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置不同类型的宏
- en: Using LLD on templates
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板中使用 LLD
- en: Nesting Zabbix templates
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套 Zabbix 模板
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will need our Zabbix server from [*Chapter 4*](B19803_04.xhtml#_idTextAnchor601),
    *Working with Triggers and Alerts*, to monitor our **Simple Network Management
    Protocol** (**SNMP**) host. For the SNMP host, we can use the host we set up in
    the *Working with SNMP monitoring* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up* *Zabbix Monitoring*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要在[*第 4 章*](B19803_04.xhtml#_idTextAnchor601)中学习的**工作与触发器和警报**部分，来监控我们的**简单网络管理协议**（**SNMP**）主机。对于
    SNMP 主机，我们可以使用在[*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)的**设置 Zabbix
    监控**部分中设置的主机。
- en: Creating your Zabbix template
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的 Zabbix 模板
- en: In this recipe, we will start with the basics of creating a Zabbix template.
    We will go over the structure of Zabbix templating and why we need to pay attention
    to certain aspects of templating.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将从创建 Zabbix 模板的基础开始。我们将探讨 Zabbix 模板的结构，并解释为什么我们需要关注模板中的某些方面。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: All you will need in this recipe is your Zabbix server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中所需的一切只是你的 Zabbix 服务器。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Now, let’s get started with building our structured Zabbix template:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始构建我们的结构化 Zabbix 模板：
- en: Open your Zabbix frontend and navigate to **Data collection** | **Templates**.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的 Zabbix 前端并导航到**数据收集** | **模板**。
- en: 'On this page, click the **Create template** button in the top-right corner.
    This will take you to the following page:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页面，点击右上角的**创建模板**按钮。这将带你进入以下页面：
- en: '![Figure 5.1 – The Create template page, empty](img/B19803_05_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 空的创建模板页面](img/B19803_05_01.jpg)'
- en: Figure 5.1 – The Create template page, empty
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 空的创建模板页面
- en: At this point, we are going to need to name our template and assign a template
    group to it. We will be creating an SNMP template to monitor a Linux host. I’ll
    be using SNMP in the example to show how the templates are structured.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们需要为我们的模板命名并为其分配一个模板组。我们将创建一个 SNMP 模板来监控 Linux 主机。我将在示例中使用 SNMP 来展示模板的结构。
- en: Important Note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Use SNMP to monitor network equipment, custom equipment supporting SNMP, and
    more. SNMP is very versatile and easy to understand, and it is implemented by
    a lot of hardware manufacturers. For Linux hosts, I’d still recommend the very
    powerful Zabbix agent, which we covered in the *Setting up Zabbix agent monitoring*
    recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting
    Up* *Zabbix Monitoring*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SNMP 来监控网络设备、支持 SNMP 的自定义设备等。SNMP 非常多功能且容易理解，很多硬件厂商都已实现 SNMP。对于 Linux 主机，我仍然推荐使用功能强大的
    Zabbix 代理，我们在[*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)的**设置 Zabbix
    代理监控**配方中进行了讲解。
- en: 'Create your template with the following information:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下信息创建你的模板：
- en: '![Figure 5.2 – The Create template page filled with information for the SNMP
    template](img/B19803_05_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 填充了 SNMP 模板信息的创建模板页面](img/B19803_05_02.jpg)'
- en: Figure 5.2 – The Create template page filled with information for the SNMP template
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 填充了 SNMP 模板信息的创建模板页面
- en: We will not link any **Templates**, **Tags**, and **Macros** yet, but we’ll
    address some of these functionalities later. That’s all there is to creating our
    template, but there’s nothing in it besides a name, group, and description so
    far.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时不会链接任何 **模板**、**标签** 和 **宏**，但稍后我们会讨论这些功能。到目前为止，创建模板所需的仅仅是一个名称、组和描述，其他什么也没有。
- en: How it works…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: There’s not a lot of work involved in creating our first template—it’s quite
    straightforward. What we need to keep in mind is the right naming convention here.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们第一个模板并不涉及很多工作——它非常简单。我们需要记住的是，这里正确的命名约定。
- en: 'Now, you might think to yourself: *why is naming a template so important?*
    Well, we are going to create a lot of templates when working with Zabbix. For
    example, this is a small part of the list of out-of-the-box templates:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会问自己：*为什么模板命名如此重要？* 嗯，我们在使用 Zabbix 时会创建大量模板。例如，这是一个开箱即用模板的列表的一小部分：
- en: '![Figure 5.3 – Some out-of-the-box templates](img/B19803_05_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 一些开箱即用的模板](img/B19803_05_03.jpg)'
- en: Figure 5.3 – Some out-of-the-box templates
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 一些开箱即用的模板
- en: 'As you can see, this is already a large list, and all of these templates follow
    a singular straightforward naming convention. If you look at the name of the template
    we have just built ourselves and, for example, the built-in Apache template, they
    follow the same convention. Breaking down the convention, it looks like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这已经是一个很大的列表，所有这些模板都遵循一个简单明了的命名约定。如果你查看我们刚刚自己创建的模板名称和例如内置的 Apache 模板，它们遵循相同的约定。拆解这个约定，它看起来是这样的：
- en: '![Figure 5.4 – Template naming convention explanation](img/B19803_05_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 模板命名约定说明](img/B19803_05_04.jpg)'
- en: Figure 5.4 – Template naming convention explanation
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 模板命名约定说明
- en: 'If we look at the list and compare it to the naming convention we went over
    in *Figure 5**.4*, we can see the following pattern:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看这个列表并将其与*图 5.4*中我们讨论的命名约定进行比较，我们可以看到以下模式：
- en: '**What are we monitoring?**: (Linux) We name the template—in this case, we’ll
    call it Linux because the OS we monitor will be Linux.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我们在监控什么？**： （Linux）我们为模板命名——在这种情况下，我们将其命名为 Linux，因为我们监控的操作系统是 Linux。'
- en: '**Monitoring type**: (by SNMP) We will add our data collection method at the
    end of the template as we might monitor the Linux OS in other ways besides SNMP,
    such as the Zabbix agent.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控类型**：（通过 SNMP）我们将在模板的末尾添加数据收集方法，因为我们可能通过除 SNMP 以外的其他方式监控 Linux 操作系统，例如使用
    Zabbix 代理。'
- en: Adhering to the guidelines in this naming convention and thus using the correct
    template names is our first step in creating the correct structure for our template.
    This makes it easy to find out which templates we want to use on which hosts.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循此命名约定中的指导方针并使用正确的模板名称，是我们创建正确模板结构的第一步。这使得我们可以轻松地找出要在哪些主机上使用哪些模板。
- en: In our case, we’ve also added a short custom prefix to make sure we can distinguish
    our template from others already created in the Zabbix setup. Normally, we can
    omit this prefix, but for this book, it’s useful. As a best practice, it is recommended
    to clone the default templates you’d like to use and prefix the template name
    with your company name or shorthand. We do this to not overwrite the default templates
    and to ensure we can import the official templates later without overwriting possible
    changes we made. For example, I would clone *Linux by SNMP* and call it *OICTS
    Linux by SNMP* for use in our company, Opensource ICT Solutions. This would also
    work in a **Managed Service Provider** (**MSP**) environment where we’d like to
    have a unique template for each customer.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们还添加了一个简短的自定义前缀，以确保我们能够将我们的模板与 Zabbix 设置中已经创建的其他模板区分开来。通常，我们可以省略这个前缀，但在本书中它很有用。作为最佳实践，建议克隆你希望使用的默认模板，并在模板名称前加上公司名称或简称。我们这样做是为了不覆盖默认模板，并确保以后可以导入官方模板而不会覆盖我们所做的任何修改。例如，我会克隆*Linux
    by SNMP*并将其命名为*OICTS Linux by SNMP*，以便在我们公司——开源 ICT 解决方案中使用。在**托管服务提供商**（**MSP**）环境中，这种做法同样有效，我们希望为每个客户拥有一个独特的模板。
- en: There’s more…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'When building templates, adhere to the Zabbix guidelines. That’s what we will
    do in this book as well, combined with our experience in creating templates. If
    you want to learn more about Zabbix templating guidelines, check the following
    URL: [https://www.zabbix.com/documentation/guidelines/en/thosts](https://www.zabbix.com/documentation/guidelines/en/thosts).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建模板时，请遵循 Zabbix 指南。这也是我们在本书中所做的，结合我们在创建模板方面的经验。如果您想了解更多关于 Zabbix 模板指南的信息，请查看以下
    URL：[https://www.zabbix.com/documentation/guidelines/en/thosts](https://www.zabbix.com/documentation/guidelines/en/thosts)。
- en: Setting up template-level tags
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置模板级标签
- en: Our next step in setting up our Zabbix template is setting up template-level
    tags. Tags on the template level are used to give every single event (problem)
    created on a host by this template a tag. The tag is then used to filter events
    in things such as dashboards, actions, and the **Monitoring** | **Problems** view.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Zabbix 模板的下一步是设置模板级标签。模板级标签用于为由此模板在主机上创建的每个事件（问题）分配一个标签。然后，这些标签可用于在仪表板、操作以及**监控**
    | **问题**视图中筛选事件。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started with this recipe, you will need a Zabbix server and a template
    on that server, preferably the template we created in the previous recipe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个食谱，您需要一个 Zabbix 服务器和该服务器上的模板，最好是我们在上一个食谱中创建的模板。
- en: How to do it…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Creating template-level tags is a way to make sure that only events created
    by a certain template will get a configured tag. To get started, the first thing
    you will need to do is navigate to the template and follow these steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模板级标签是确保仅由某个特定模板创建的事件才会获得已配置标签的一种方式。首先，您需要做的是导航到模板并按照以下步骤进行操作：
- en: Go to **Data collection** | **Templates** and click on our template, which is
    called **Custom Linux** **by SNMP**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **数据收集** | **模板**，然后点击我们的模板，它叫做 **Custom Linux** **by SNMP**。
- en: 'Then, click the **Tags** tab at the top of the form, and you’ll be taken to
    this tab:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击表单顶部的 **标签** 标签，您将被带到此标签页：
- en: '![Figure 5.5 – Zabbix Tags tab for the SNMP template](img/B19803_05_05.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – SNMP 模板的 Zabbix 标签标签页](img/B19803_05_05.jpg)'
- en: Figure 5.5 – Zabbix Tags tab for the SNMP template
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – SNMP 模板的 Zabbix 标签标签页
- en: Now, the first thing we can do is create some tags to make sure we know all
    the events from this template will be Linux-related.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以做的第一件事是创建一些标签，以确保我们知道所有来自此模板的事件都将与 Linux 相关。
- en: The first tag is already ready to be created. Fill out **Name** as **class**.
    Then, in the **Value** field, type in **os**.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个标签已经准备好创建了。填写 **名称** 为 **class**，然后在 **值** 字段中输入 **os**。
- en: 'For the second tag, click the small dotted-underlined **Add** button and set
    the **Name** for the second tag to **target**. Then, in the **Value** field, type
    in **linux**. It will look like this:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第二个标签，点击小的带点下划线的 **添加** 按钮，并将第二个标签的 **名称** 设置为 **target**。然后，在 **值** 字段中输入
    **linux**。它看起来会是这样：
- en: '![Figure 5.6 – Zabbix Tags tab filled out for the SNMP template](img/B19803_05_06.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 已填写 SNMP 模板的 Zabbix 标签标签页](img/B19803_05_06.jpg)'
- en: Figure 5.6 – Zabbix Tags tab filled out for the SNMP template
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 已填写 SNMP 模板的 Zabbix 标签标签页
- en: Do not forget to click the blue **Update** button to save your tag to this template.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 别忘了点击蓝色的 **更新** 按钮，将标签保存到此模板中。
- en: How it works…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Now, there’s a lot more to creating tags than it might seem at first through
    following this recipe. Tags play a key part in keeping your Zabbix environment
    structured. You will use the template-level tags to filter in a lot of places,
    such as the **Monitoring** | **Problems** window, and with a lot of events created
    by one host, they will improve readability by making problems easy to filter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建标签比按照本食谱步骤看起来要复杂得多。标签在保持 Zabbix 环境结构化方面起着关键作用。您将使用模板级标签在很多地方进行筛选，例如 **监控**
    | **问题** 窗口，在一个主机创建的许多事件中，它们将通过使问题容易筛选来提高可读性。
- en: 'For example, once we have configured some triggers later in this recipe, when
    checking the **Monitoring** | **Problems** page for our host, we could see something
    like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一旦我们在本食谱中稍后配置了一些触发器，当检查我们主机的 **监控** | **问题** 页面时，我们可能会看到如下内容：
- en: '![Figure 5.7 – Example Monitoring | Problems page for host lar-book-agent_snmp](img/B19803_05_07.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 主机 lar-book-agent_snmp 的示例监控 | 问题页面](img/B19803_05_07.jpg)'
- en: Figure 5.7 – Example Monitoring | Problems page for host lar-book-agent_snmp
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 主机 lar-book-agent_snmp 的示例监控 | 问题页面
- en: Note regarding screenshots
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关于截图的说明
- en: 'Some screenshots used in the book have been adjusted to fit the margins of
    the book pages which has resulted in lower readability of the text in the print
    version. Please refer to the PDF version available here: [https://packt.link/free-ebook/978-1-80107-832-0](https://packt.link/free-ebook/978-1-80107-832-0);
    to enlarge the image and view the text with more clarity.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用的一些截图已调整以适应书页的边距，导致印刷版中的文本可读性降低。请参考此处提供的 PDF 版本：[https://packt.link/free-ebook/978-1-80107-832-0](https://packt.link/free-ebook/978-1-80107-832-0)，放大图像并更清晰地查看文本。
- en: As you can see, the problem we are looking at here is displaying the **target:linux**
    and **class:os** tags at the end of the page. The event was tagged with the template-level
    tag, and we can now see that it will always carry that tag, allowing us to filter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在这里看到的问题是页面底部显示**target:linux**和**class:os**标签。该事件已使用模板级标签进行标记，现在我们可以看到它将始终携带该标签，允许我们进行过滤。
- en: This gives us loads of opportunities because we aren’t limited to template-level
    tags. We also have host-level tags, item-level tags, and trigger-level tags. We
    could tag everything from a template with `department:architecture`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了很多机会，因为我们不再仅限于模板级标签。我们还有主机级标签、项级标签和触发器级标签。我们可以用 `department:architecture`
    标记模板中的所有内容。
- en: We could then, for example, create an action that sends out everything Linux-related
    to a certain Linux engineering email address or Teams/Slack channel based on the
    `department:architecture` to a more specific email address or Teams/Slack channel.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以例如创建一个操作，将所有与 Linux 相关的信息发送到某个特定的 Linux 工程邮箱地址或 Teams/Slack 频道，并根据 `department:architecture`
    将信息发送到更具体的邮箱地址或 Teams/Slack 频道。
- en: 'For more information regarding the tag policy starting from Zabbix 6, check
    out the following link:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Zabbix 6 版本起的标签策略，请查看以下链接：
- en: '[https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/](https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/](https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/)'
- en: See also
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: In this chapter, the recipe titled *Using LLD on templates* will also explain
    **tag prototypes**, where we will create tags automatically based on the LLD settings.
    Tag prototypes are the recommended way of working with tags when creating discovery
    and are amazing for keeping templates structured. More about that later.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，名为*在模板中使用 LLD*的教程还将解释**标签原型**，我们将在此基础上根据 LLD 设置自动创建标签。标签原型是创建发现时使用标签的推荐方法，并且非常适合保持模板结构化。稍后会详细介绍。
- en: Creating template items
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模板项
- en: Let’s get started with finally creating some real template items because, in
    the end, items are what it is all about in Zabbix. Without items, we don’t have
    data, and without data, we do not have anything to work with in our monitoring
    system.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始最终创建一些真正的模板项，因为最终在 Zabbix 中，模板项才是核心。没有模板项，我们就没有数据，而没有数据，我们在监控系统中就没有任何东西可操作。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Now, moving along, we are going to need our Zabbix server and a host that we
    can monitor with SNMP. In [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*, we monitored a host with SNMP, so we will use
    this host again. We’ll also use the Zabbix template from the previous recipes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要 Zabbix 服务器和一个可以用 SNMP 监控的主机。在[*第 3 章*](B19803_03_split_000.xhtml#_idTextAnchor306)，*设置
    Zabbix 监控*中，我们用 SNMP 监控了一台主机，所以我们将再次使用这台主机。我们还将使用之前教程中的 Zabbix 模板。
- en: How to do it…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'First of all, let’s log in to our Zabbix server **command-line interface**
    (**CLI**) and enter **snmpwalk**, with the following command:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们登录到 Zabbix 服务器的**命令行界面**（**CLI**），并输入**snmpwalk**，使用以下命令：
- en: '[PRE0]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 5.8 – snmpwalk reply](img/B19803_05_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – snmpwalk 回复](img/B19803_05_08.jpg)'
- en: Figure 5.8 – snmpwalk reply
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – snmpwalk 回复
- en: Now, let’s capture our hostname in our template first, as it is an important
    item to have. When working with SNMP, I always like to work with untranslated
    SNMP `.1.3.6.1.2.1.1.5.0`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们首先在模板中捕获主机名，因为这是一个重要的项。在处理 SNMP 时，我总是喜欢使用未翻译的 SNMP `.1.3.6.1.2.1.1.5.0`。
- en: 'If we have an **Management Information Base** (**MIB**), we can translate this
    OID to make sure it is actually the system name. Enter the following command at
    the Zabbix server CLI:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们有**管理信息库**（**MIB**），我们可以转换此 OID 来确保它确实是系统名称。请在 Zabbix 服务器的 CLI 中输入以下命令：
- en: '[PRE1]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will return the following reply:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回以下回复：
- en: '![Figure 5.9 – snmptranslate reply](img/B19803_05_09.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – snmptranslate 回复](img/B19803_05_09.jpg)'
- en: Figure 5.9 – snmptranslate reply
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – snmptranslate 回复
- en: Tip
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Using **-On** in your SNMP command makes sure that we are receiving the OIDs
    instead of the MIB translation. If we want to work the other way around, we can
    omit the **-On** in our command and **snmptranslate** the translated OID.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 SNMP 命令中使用 **-On** 确保我们接收到的是 OID，而不是 MIB 翻译。如果我们想要反向操作，可以在命令中省略 **-On**，然后使用
    **snmptranslate** 翻译后的 OID。
- en: Now that we know how to get our hostname, add this to our template. Navigate
    to **Data collection** | **Templates** and select our **Custom Linux by** **SNMP**
    template.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们知道如何获取主机名，将其添加到我们的模板中。导航至 **数据收集** | **模板**，并选择我们的 **自定义 Linux 通过 SNMP**
    模板。
- en: 'Here, we will go to **Items**. In the upper-right corner, select **Create item**
    to create the following item:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将进入 **项目**。在右上角选择 **创建项目**，然后创建以下项目：
- en: '![Figure 5.10 – Item for sysName SNMP OID](img/B19803_05_10.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – sysName SNMP OID 项目](img/B19803_05_10.jpg)'
- en: Figure 5.10 – Item for sysName SNMP OID
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – sysName SNMP OID 项目
- en: 'Make sure to also add an item-level tag. These are important for grouping and
    filtering items. Click the **Tags** tab and add the following:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保还要添加项目级别的标签。这些标签对项目分组和筛选非常重要。点击 **标签** 选项卡并添加以下内容：
- en: '![Figure 5.11 – Item for sysName SNMP OID on the Tags tab](img/B19803_05_11.JPG)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – sysName SNMP OID 项目（标签选项卡）](img/B19803_05_11.JPG)'
- en: Figure 5.11 – Item for sysName SNMP OID on the Tags tab
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – sysName SNMP OID 项目（标签选项卡）
- en: Now that we have our first item, let’s create a host as well and assign this
    template to that host.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了第一个项目，让我们也创建一个主机并将模板分配给该主机。
- en: 'Navigate to **Data collection** | **Hosts** and click **Create host** in the
    top-right corner. Create a host with the following settings:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至 **数据收集** | **主机**，然后点击右上角的 **创建主机**。使用以下设置创建一个主机：
- en: '![Figure 5.12 – New host with our self-created template](img/B19803_05_12.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – 使用我们自创建模板的新主机](img/B19803_05_12.jpg)'
- en: Figure 5.12 – New host with our self-created template
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 使用我们自创建模板的新主机
- en: 'Don’t forget to add the macros to our new host before clicking the **Add**
    button. Click on **Macros** and fill in the following information:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记在点击 **添加** 按钮之前，将宏添加到我们的新主机。点击 **宏** 并填写以下信息：
- en: '![Figure 5.13 – Add macros tab on a host](img/B19803_05_13.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – 在主机上添加宏选项卡](img/B19803_05_13.jpg)'
- en: Figure 5.13 – Add macros tab on a host
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 在主机上添加宏选项卡
- en: Do not forget to set your macros to the type secret text to hide the passwords
    in the frontend.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将宏设置为“秘密文本”类型，以便在前端隐藏密码。
- en: Now, you can click the **Add** button, and our new host will be monitored.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击 **添加** 按钮，我们的新主机将开始被监控。
- en: How it works…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'When we create items such as this on our template when assigning the template
    to our hosts, the item will also be created on the host. The great thing about
    this is that we can assign a template to multiple hosts, meaning we only have
    to configure the item on the template level once, instead of creating the item
    on every single host. For instance, our newly created host will show the following
    latest data:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在模板中创建类似的项目时，将模板分配给主机时，该项目也会在主机上创建。这样做的好处是，我们可以将模板分配给多个主机，这意味着我们只需要在模板级别配置一次项目，而无需在每个主机上都创建该项目。例如，我们新创建的主机将显示以下最新数据：
- en: '![Figure 5.14 – Monitoring | Latest data for our new host](img/B19803_05_14.JPG)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.14 – 监控 | 我们新主机的最新数据](img/B19803_05_14.JPG)'
- en: Figure 5.14 – Monitoring | Latest data for our new host
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – 监控 | 我们新主机的最新数据
- en: The value for this item will then be different for all your monitored hosts,
    depending on the value received by that host.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的值会根据每个受监控主机接收到的值而不同。
- en: Important Note
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: When creating an SNMP item, keep the following in mind. The **Item** field SNMP
    OID always contains the non-translated OID. This is to ensure that we do not actually
    need MIB files for our templates to work.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 SNMP 项目时，请记住以下几点。**项目**字段中的 SNMP OID 始终包含未翻译的 OID。这是为了确保我们不需要 MIB 文件，模板就能正常工作。
- en: Furthermore, the item key will be based on the translated OID. In our case,
    the translated OID was `sysName`, which we then turned into the `sysName` item
    key. These are general rules that we should all abide by when creating our templates,
    to make sure they are structured in the same way for everyone.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，项目键将基于翻译后的 OID。在我们的例子中，翻译后的 OID 是 `sysName`，我们将其转化为 `sysName` 项目键。这些是我们在创建模板时应该遵循的通用规则，以确保每个人的模板结构一致。
- en: See also
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'To learn more about Zabbix and SNMP OIDs/MIBs, check out this blog post:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Zabbix 和 SNMP OID/MIB 的信息，请查看这篇博客文章：
- en: "[https://blog.zabbix.com/zabbix-snmp-what-you-need-to-know-and-how-to-configure-it/10345/#snmp-oid](https://blog.zabbix.com/zabbix-snmp-what-you-need-to-know-and-how-to-configure-it/10345/#sn\uFEFF\
    \uFEFFmp-oid)"
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://blog.zabbix.com/zabbix-snmp-what-you-need-to-know-and-how-to-configure-it/10345/#snmp-oid](https://blog.zabbix.com/zabbix-snmp-what-you-need-to-know-and-how-to-configure-it/10345/#snmp-oid)'
- en: Creating template triggers
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模板触发器
- en: Creating templated triggers works in roughly the same way as creating templated
    items or normal triggers. Let’s go over the process to see how we do it and how
    to keep it structured.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模板触发器的方式与创建模板项目或普通触发器大致相同。让我们回顾一下这个过程，看看我们是如何操作的，以及如何保持结构化。
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need the Zabbix server and the host from the previous recipe for this
    recipe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要前一个配方中的 Zabbix 服务器和主机来完成这个配方。
- en: How to do it…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'We have configured one item on our template so far, so let’s create a trigger
    for this item:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在模板上配置了一个项目，现在让我们为该项目创建一个触发器：
- en: Navigate to **Data collection** | **Templates** in our Zabbix frontend and select
    our **Custom Linux by** **SNMP** template.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Zabbix 前端导航到 **数据采集** | **模板**，然后选择我们的 **Custom Linux by** **SNMP** 模板。
- en: 'Now, click **Triggers** and then **Create Trigger** in the top-right corner.
    This will take us to the next page, where we will enter the following information:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **触发器**，然后点击右上角的 **创建触发器**。这将带我们进入下一页，在这里我们将输入以下信息：
- en: '![Figure 5.15 – Create trigger window for the SNMP template](img/B19803_05_15.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.15 – 为 SNMP 模板创建触发器窗口](img/B19803_05_15.jpg)'
- en: Figure 5.15 – Create trigger window for the SNMP template
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – 为 SNMP 模板创建触发器窗口
- en: 'As discussed in the previous chapter, for triggers there’s also the **scope**
    tag that we need to add:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一章所讨论，对于触发器，我们还需要添加 **作用域** 标签：
- en: '![Figure 5.16 – Create trigger window for the SNMP template – tag](img/B19803_05_16.JPG)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.16 – 为 SNMP 模板创建触发器窗口 – 标签](img/B19803_05_16.JPG)'
- en: Figure 5.16 – Create trigger window for the SNMP template – tag
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.16 – 为 SNMP 模板创建触发器窗口 – 标签
- en: 'Last, but not least, let’s edit the hostname on our host to see if the trigger
    is working correctly. Change the hostname entry by executing the following command
    on the Linux host CLI:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，让我们编辑主机的主机名，看看触发器是否正常工作。通过在 Linux 主机的 CLI 上执行以下命令来更改主机名：
- en: '[PRE2]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, make sure the changes take effect by executing the following command:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，确保更改生效，通过执行以下命令：
- en: '[PRE3]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'When editing the template, the created trigger will immediately be added to
    our host named `lar-book-templated_snmp`. This is because when we edited the template,
    the host was already configured with this template. When we have changed the hostname,
    the trigger can immediately be triggered after the item is polled again:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑模板时，创建的触发器将立即添加到我们名为 `lar-book-templated_snmp` 的主机上。这是因为当我们编辑模板时，主机已经配置了该模板。我们更改了主机名后，触发器可以在再次轮询该项目后立即触发：
- en: '![Figure 5.17 – Hostname has changed trigger for host lar-book-templated_snmp](img/B19803_05_17.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.17 – 主机名已更改的触发器，针对主机 lar-book-templated_snmp](img/B19803_05_17.jpg)'
- en: Figure 5.17 – Hostname has changed trigger for host lar-book-templated_snmp
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 – 主机名已更改的触发器，针对主机 lar-book-templated_snmp
- en: Because we used the `change` function in our trigger, the second time we poll
    this item the problem will automatically go away again. In our case, this will
    happen after 30 minutes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在触发器中使用了`change`函数，当我们第二次轮询这个项目时，问题会自动消失。在我们的案例中，这将在 30 分钟后发生。
- en: Important Note
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Like a lot of other Zabbix users, I always like to use the **{HOST.NAME}** macro
    in trigger names, but according to Zabbix guidelines, this isn’t recommended.
    If you prefer this you can still use it, but it’s a lot more useful to use the
    **Host** fields throughout the Zabbix frontend and the built-in macros for notifications.
    This will keep trigger names short and won’t show us redundant information.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多其他 Zabbix 用户一样，我总喜欢在触发器名称中使用**{HOST.NAME}**宏，但根据 Zabbix 的指南，不推荐这样做。如果你更喜欢这种方式，你仍然可以使用它，但使用
    Zabbix 前端中的**主机**字段和内置的通知宏更有用。这样可以使触发器名称简洁，并且不会显示冗余信息。
- en: Setting up different kinds of macros
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置不同种类的宏
- en: When we are working with templates, a very efficient way to make your templates
    more useful is through the use of macros. In this recipe, we’ll discover how to
    use macros to do this.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用模板时，使模板更有用的一个非常有效的方法是使用宏。在这个配方中，我们将学习如何使用宏来实现这一点。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to need our Zabbix server and our SNMP-monitored host from the
    previous recipes. We’ll also need our Zabbix template, as created in the previous
    recipe.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要之前配好的 Zabbix 服务器和 SNMP 监控的主机。还需要我们在前面的食谱中创建的 Zabbix 模板。
- en: How to do it…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Now, let’s start with creating some macros on a template level. We’ll be making
    two different types of macros.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从在模板级别创建一些宏开始。我们将创建两种不同类型的宏。
- en: Defining a user macro
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义用户宏
- en: First, we’ll define a user macro on our template. Navigate to **Data collection**
    | **Templates** and click on our **Custom Linux by** **SNMP** template.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在我们的模板上定义一个用户宏。导航到 **数据收集** | **模板** 并点击我们的 **Custom Linux by** **SNMP**
    模板。
- en: 'Here, we will go to **Macros** and fill in the following fields:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将进入 **宏** 并填写以下字段：
- en: '![Figure 5.18 – Template-level macros](img/B19803_05_18.JPG)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.18 – 模板级别的宏](img/B19803_05_18.JPG)'
- en: Figure 5.18 – Template-level macros
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – 模板级别的宏
- en: 'Click on **Update**, and let’s move to **Trigger** to define a new trigger:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **更新**，然后让我们转到 **触发器** 来定义一个新触发器：
- en: '![Figure 5.19 – Trigger creation window for the SNMP template](img/B19803_05_19.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.19 – SNMP 模板的触发器创建窗口](img/B19803_05_19.jpg)'
- en: Figure 5.19 – Trigger creation window for the SNMP template
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.19 – SNMP 模板的触发器创建窗口
- en: 'Let’s also add the trigger tag:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也添加触发器标签：
- en: '![Figure 5.20 – Trigger creation window for the SNMP template tag tab](img/B19803_05_20.JPG)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.20 – SNMP 模板的触发器创建窗口标签选项卡](img/B19803_05_20.JPG)'
- en: Figure 5.20 – Trigger creation window for the SNMP template tag tab
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.20 – SNMP 模板的触发器创建窗口标签选项卡
- en: 'Now, change the hostname entry by executing the following command on the host
    CLI:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过在主机 CLI 上执行以下命令，修改主机名条目：
- en: '[PRE4]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, make sure the changes take effect by executing the following command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，确保通过执行以下命令使更改生效：
- en: '[PRE5]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our trigger should fire, as shown in the following screenshot:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的触发器应该会触发，如下图所示：
- en: '![Figure 5.21 – Trigger created problem for a hostname prefix on the lar-book-templated_snmp
    host](img/B19803_05_21.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.21 – 针对 lar-book-templated_snmp 主机的主机名前缀创建的触发器问题](img/B19803_05_21.jpg)'
- en: Figure 5.21 – Trigger created problem for a hostname prefix on the lar-book-templated_snmp
    host
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.21 – 针对 lar-book-templated_snmp 主机的主机名前缀创建的触发器问题
- en: Using built-in macros
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用内置宏
- en: Now, let’s work on defining a built-in macro on our template. Navigate to **Data
    collection** | **Templates** and click on our **Custom Linux by** **SNMP** template.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们来定义一个内置宏在我们的模板上。导航到 **数据收集** | **模板** 并点击我们的 **Custom Linux by** **SNMP**
    模板。
- en: 'Now, click **Triggers** and, in the top-right corner, click on **Create trigger**.
    Create a trigger with the following settings:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **触发器**，在右上角点击 **创建触发器**。使用以下设置创建一个触发器：
- en: '![Figure 5.22 – Trigger creation window for hostname match](img/B19803_05_22.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.22 – 主机名匹配的触发器创建窗口](img/B19803_05_22.jpg)'
- en: Figure 5.22 – Trigger creation window for hostname match
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.22 – 主机名匹配的触发器创建窗口
- en: 'Let’s also add the trigger tag:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也添加触发器标签：
- en: "![Figure 5.23 – Trigger creation window for the SNMP template – \uFEFFtag](img/B19803_05_23.JPG)"
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.23 – SNMP 模板的触发器创建窗口 – 标签](img/B19803_05_23.JPG)'
- en: Figure 5.23 – Trigger creation window for the SNMP template – tag
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.23 – SNMP 模板的触发器创建窗口 – 标签
- en: This will then trigger a problem, as expected.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将按预期触发一个问题。
- en: "![Figure 5.24 – Trigger created problem Hostname does no\uFEFF\uFEFFt match](img/B19803_05_24.jpg)"
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.24 – 主机名不匹配的触发器创建问题](img/B19803_05_24.jpg)'
- en: Figure 5.24 – Trigger created problem Hostname does not match
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.24 – 主机名不匹配的触发器创建问题
- en: How it works…
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'There are four types of macros: built-in macros, user macros, expressions macros,
    and LLD macros. All of these macros can be used on templates, but also directly
    on hosts and various other locations. Macros are useful for creating unique values
    in places that would otherwise contain static information.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种类型的宏：内置宏、用户宏、表达式宏和 LLD 宏。所有这些宏都可以在模板上使用，但也可以直接在主机和其他各种位置使用。宏对于在本应包含静态信息的地方创建唯一值非常有用。
- en: Let’s discover how they work.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探索它们是如何工作的。
- en: How a user macro works
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户宏的工作原理
- en: Because we want all of our hosts on this template to contain `lar` as a prefix,
    we create a user macro at the template level. This way, the user macro that will
    be used on every host with this template will be the same.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们希望此模板下的所有主机的前缀都包含 `lar`，所以我们在模板级别创建一个用户宏。这样，每个使用此模板的主机上的用户宏将是相同的。
- en: 'We then define our user macro in our trigger to use the value, which is `lar-`
    in this case. We can reuse this user macro in other triggers, items, and more.
    The great thing is that defining a user macro on a template level isn’t all we
    can do. We can override template-level user macros by defining a host-level user
    macro. So, if we want a single host to contain a different prefix, we simply use
    a host-level macro to override the template-level macro, like this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在触发器中定义我们的用户宏来使用该值，在这个例子中是`lar-`。我们可以在其他触发器、项目等中重用这个用户宏。好处是，定义模板级别的用户宏并不是我们能做的全部。我们可以通过定义主机级的用户宏来覆盖模板级的用户宏。因此，如果我们希望某台主机包含不同的前缀，只需使用主机级宏来覆盖模板级宏，像这样：
- en: '![Figure 5.25 – Host-level macros page](img/B19803_05_25.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.25 – 主机级宏页面](img/B19803_05_25.jpg)'
- en: Figure 5.25 – Host-level macros page
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.25 – 主机级宏页面
- en: 'If we then look at the inherited and host-level macros screen on our host,
    we will see the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看主机上继承的和主机级的宏屏幕，我们会看到以下内容：
- en: '![Figure 5.26 – Inherited and host-level macros page](img/B19803_05_26.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.26 – 继承和主机级宏页面](img/B19803_05_26.jpg)'
- en: Figure 5.26 – Inherited and host-level macros page
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.26 – 继承和主机级宏页面
- en: We see the effective value is now `dev-`, not `lar-`, which is exactly what
    we would be expecting to happen here.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到有效值现在是`dev-`，而不是`lar-`，这正是我们预期的结果。
- en: 'Keep in mind the syntax always starts with a curly bracket and a dollar sign
    and ends with a curly bracket. You are allowed to break the text in between with
    either dots or underscores. Here are some examples:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，语法总是以花括号和美元符号开始，并以花括号结束。您可以使用点号或下划线来分隔其中的文本。以下是一些示例：
- en: '**{$****MACRONAME}**'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{$****MACRONAME}**'
- en: '**{$****MACRO.NAME}**'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{$****MACRO.NAME}**'
- en: '**{$****MACRO_NAME}**'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{$****MACRO_NAME}**'
- en: How a built-in macro works
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置宏的工作原理
- en: Now, a built-in macro comes from a predefined list of macros, hardcoded within
    Zabbix. They are used to get data from your Zabbix system and put them in items,
    triggers, and more. This means that the built-in macro used in this case already
    contains a value.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，内置宏来自 Zabbix 中预定义的宏列表，这些宏是硬编码的。它们用于从您的 Zabbix 系统中获取数据并将其放入项目、触发器等中。这意味着，在这种情况下使用的内置宏已经包含了一个值。
- en: 'In this case, we used `{HOST.HOST}`, which is the hostname we defined on our
    Zabbix host, like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用了`{HOST.HOST}`，这是我们在 Zabbix 主机上定义的主机名，像这样：
- en: '![Figure 5.27 – Zabbix host configuration page for host lar-book-templated_snmp](img/B19803_05_27.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.27 – Zabbix 主机配置页面，主机 lar-book-templated_snmp](img/B19803_05_27.jpg)'
- en: Figure 5.27 – Zabbix host configuration page for host lar-book-templated_snmp
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.27 – Zabbix 主机配置页面，主机 lar-book-templated_snmp
- en: For every single host, this built-in macro would be different as our **Host
    name** value will be unique. This means that our trigger, although defined on
    a template level, will always be unique as well. This method is a very powerful
    way to use built-in macros in triggers, as we’ll pull information from Zabbix
    directly into Zabbix again.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一台主机，这个内置宏都会不同，因为我们的**主机名**值是唯一的。这意味着，虽然触发器在模板级别定义，但它总是唯一的。这种方法是使用内置宏在触发器中非常强大的一种方式，因为我们会直接从
    Zabbix 中获取信息，再次将其导入 Zabbix。
- en: 'Keep in mind the syntax always starts with a curly bracket and ends with a
    curly bracket. You are allowed to break the text in between with either dots or
    underscores. Here are some examples:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，语法总是以花括号开始并以花括号结束。您可以使用点号或下划线来分隔其中的文本。以下是一些示例：
- en: '**{****HOST.NAME}**'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{****HOST.NAME}**'
- en: '**{****INVENTORY.LOCATION.LAT}**'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{****INVENTORY.LOCATION.LAT}**'
- en: There’s more…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'A complete list of supported (built-in) macros can be found here:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的支持（内置）宏列表可以在这里找到：
- en: '[https://www.zabbix.com/documentation/current/en/manual/appendix/macros/supported_by_location](https://www.zabbix.com/documentation/current/en/manual/appendix/macros/supported_by_location)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.zabbix.com/documentation/current/zh/manual/appendix/macros/supported_by_location](https://www.zabbix.com/documentation/current/en/manual/appendix/macros/supported_by_location)'
- en: This list will be updated by Zabbix, just as with every good Zabbix documentation
    page. This way, you can always use this page as a reference for up-to-date (built-in)
    macros for building your Zabbix elements.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表会由 Zabbix 更新，就像每一篇好的 Zabbix 文档页面一样。这样，您可以始终使用此页面作为构建 Zabbix 元素时最新（内置）宏的参考。
- en: Using LLD on templates
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板上使用 LLD
- en: 'Now, let’s get started on my favorite part of template creation: LLD. I think
    this is one of the most powerful and most widely used parts of Zabbix.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始我最喜欢的模板创建部分：LLD。我认为这是 Zabbix 中最强大且最广泛使用的部分之一。
- en: Getting ready
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: To get ready for this recipe, you will need your Zabbix server, the SNMP-monitored
    host from the previous recipes, and our template from the previous recipe.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个配方，您需要Zabbix服务器、前面配方中的SNMP监控主机以及我们之前的模板。
- en: Working knowledge of the SNMP tree structure is also recommended. So, make sure
    to read the *Working with SNMP monitoring* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix* *Monitoring*, thoroughly.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 还建议具备一定的SNMP树结构的工作知识。因此，请确保仔细阅读[*第3章*](B19803_03_split_000.xhtml#_idTextAnchor306)中有关*与SNMP监控配合使用*的配方，*Zabbix监控的设置*。
- en: How to do it…
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: Let’s get started by navigating to **Data collection** | **Templates** and selecting
    our **Custom Linux by** **SNMP** template.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过进入**数据收集**|**模板**并选择我们的**自定义 Linux 通过** **SNMP**模板来开始。
- en: Important Note
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: First, we will add a value mapping, which we’ll use for multiple item prototypes.
    Keep in mind that value mappings since Zabbix 6 are no longer global, but template-
    or host-specific. This is to make sure that the templates and hosts (once exported)
    are even more independent from the global Zabbix settings.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个值映射，供多个项原型使用。请记住，自Zabbix 6以来，值映射不再是全局的，而是模板或主机特定的。这是为了确保模板和主机（导出后）能够更独立于全局的Zabbix设置。
- en: 'Click on the **Value mapping** tab and the dotted **Add** button. Add the following:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**值映射**选项卡和虚线的**添加**按钮。然后添加以下内容：
- en: "![Figure 5.28 – Zabbix add Value mapping p\uFEFFage](img/B19803_05_28.jpg)"
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.28 – Zabbix 添加值映射页面](img/B19803_05_28.jpg)'
- en: Figure 5.28 – Zabbix add Value mapping page
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.28 – Zabbix 添加值映射页面
- en: Make sure to save this change by clicking the blue **Add** button and then the
    blue **Update** button.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保通过点击蓝色的**添加**按钮，然后点击蓝色的**更新**按钮来保存此更改。
- en: 'Now, go back to the template and go to **Discovery rules**, and in the top-right
    corner, click **Create discovery rule**. This will take you to the LLD creation
    page:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到模板并转到**发现规则**，然后在右上角点击**创建发现规则**。这将带您到LLD创建页面：
- en: "![Figure 5.29 – Zabbix LLD creation page, empty\uFEFF](img/B19803_05_29.jpg)"
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.29 – Zabbix LLD 创建页面，空白](img/B19803_05_29.jpg)'
- en: Figure 5.29 – Zabbix LLD creation page, empty
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.29 – Zabbix LLD 创建页面，空白
- en: Now, we will be making a discovery rule to discover our interfaces on the Linux
    host. The Linux SNMP tree for interfaces is at OID `.1.3.6.1.2.1.2`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个发现规则来发现Linux主机上的接口。Linux接口的SNMP树位于OID `.1.3.6.1.2.1.2`。
- en: Important Note
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: 'Make sure that Linux **net-snmp** is configured correctly in the **/etc/ snmp/snmpd.conf**
    file. It’s important to change the view in this file to show everything from **.1**
    and up, like this: **view systemview** **included .1**'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Linux的**net-snmp**在**/etc/snmp/snmpd.conf**文件中已正确配置。重要的是要在此文件中将视图更改为显示从**.1**开始的所有内容，像这样：**view
    systemview** **included .1**
- en: 'Now, let’s continue with creating our LLD rule by adding the following to our
    LLD creation page:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们继续创建我们的LLD规则，通过在LLD创建页面中添加以下内容：
- en: "![Figure 5.30 – Zabbix LLD creation page filled with our information for network\
    \ interface di\uFEFFscovery](img/B19803_05_30.jpg)"
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.30 – Zabbix LLD 创建页面，已填写我们的网络接口发现信息](img/B19803_05_30.jpg)'
- en: Figure 5.30 – Zabbix LLD creation page filled with our information for network
    interface discovery
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.30 – Zabbix LLD 创建页面，已填写我们的网络接口发现信息
- en: After clicking the **Add** button, we can navigate back to our template at **Data
    collection** | **Templates** and click **Custom Linux** **by SNMP**.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮后，我们可以返回到模板，在**数据收集**|**模板**中点击**自定义 Linux** **通过 SNMP**。
- en: Important Note
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: We define **Delete lost resources** as **immediately**; we do this because this
    is a test template. This option is used by LLD to remove created resources (such
    as items and triggers) if they are no longer present on our monitored host. Using
    **immediately** can lead to lost data because we might get a resource back within
    a set amount of time, so make sure to adjust this value to your production environment’s
    standard.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将**删除丢失的资源**定义为**立即**执行；这样做是因为这是一个测试模板。此选项由LLD用于删除已创建的资源（如项和触发器），如果它们不再出现在我们监控的主机上。使用**立即**可能导致数据丢失，因为我们可能在一定时间内重新获得某个资源，因此请确保根据生产环境的标准调整此值。
- en: Go to **Discovery rules** and click our newly created rule, **Discover** **Network
    interfaces**.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**发现规则**并点击我们新创建的规则，**发现** **网络接口**。
- en: 'Now, go to **Item prototypes** and click **Create item prototype** in the top-right
    corner. This will open the **Item prototype** creation popup, as shown in the
    following screenshot:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到 **项目原型** 并点击右上角的 **创建项目原型**。这将打开 **项目原型** 创建弹窗，如下图所示：
- en: '![Figure 5.31 – Zabbix LLD Item prototype creation page, empty](img/B19803_05_31.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.31 – Zabbix LLD 项目原型创建页面，空白](img/B19803_05_31.jpg)'
- en: Figure 5.31 – Zabbix LLD Item prototype creation page, empty
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.31 – Zabbix LLD 项目原型创建页面，空白
- en: Here, we will create our first prototype for creating items from LLD. This means
    we have to fill it with the information we want our items to contain.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建我们的第一个项目原型，用于从 LLD 创建项目。这意味着我们需要将其填充为我们希望项目包含的信息。
- en: 'Let’s start by filling in an item prototype for the interface operational status,
    like this:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从为接口操作状态填写一个项目原型开始，像这样：
- en: '![Figure 5.32 – Zabbix LLD item prototype creation page filled with our information
    for the interface’s operational status](img/B19803_05_32.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.32 – Zabbix LLD 项目原型创建页面，已填充我们的接口操作状态信息](img/B19803_05_32.jpg)'
- en: Figure 5.32 – Zabbix LLD item prototype creation page filled with our information
    for the interface’s operational status
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.32 – Zabbix LLD 项目原型创建页面，已填充我们的接口操作状态信息
- en: 'On the **Tags** tab, make sure to also add a tag prototype as follows:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **标签** 选项卡中，确保也添加一个标签原型，如下所示：
- en: '![Figure 5.33 – Zabbix LLD item prototype tag creation tab](img/B19803_05_33.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.33 – Zabbix LLD 项目原型标签创建选项卡](img/B19803_05_33.jpg)'
- en: Figure 5.33 – Zabbix LLD item prototype tag creation tab
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.33 – Zabbix LLD 项目原型标签创建选项卡
- en: Tip
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In the next step, we’ll create an item that is very similar to the item we just
    created. It’s super useful to use the **Clone** button instead of filling in the
    entire form from scratch again.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将创建一个与我们刚刚创建的项目非常相似的项目。使用 **克隆** 按钮而不是从头开始填写整个表单非常有用。
- en: 'After clicking the **Add** button, let’s repeat the process and also add the
    following item prototype:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮后，让我们重复这个过程，并添加以下项目原型：
- en: '![Figure 5.34 – Zabbix LLD item prototype creation page filled with our information
    for the interface admin status](img/B19803_05_34.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.34 – Zabbix LLD 项目原型创建页面，已填充我们的接口管理员状态信息](img/B19803_05_34.jpg)'
- en: Figure 5.34 – Zabbix LLD item prototype creation page filled with our information
    for the interface admin status
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.34 – Zabbix LLD 项目原型创建页面，已填充我们的接口管理员状态信息
- en: 'Do not forget the **Tags** tab:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记 **标签** 选项卡：
- en: '![Figure 5.35 – Zabbix LLD item 2 prototype tag creation tab](img/B19803_05_35.JPG)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.35 – Zabbix LLD 项目 2 原型标签创建选项卡](img/B19803_05_35.JPG)'
- en: Figure 5.35 – Zabbix LLD item 2 prototype tag creation tab
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.35 – Zabbix LLD 项目 2 原型标签创建选项卡
- en: 'Now, move over to the **Trigger prototype** page, click the **Create trigger**
    prototype button in the top-right corner, and create the following trigger:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到 **触发器原型** 页面，点击右上角的 **创建触发器** 原型按钮，并创建以下触发器：
- en: '![Figure 5.36 – Zabbix LLD trigger prototype creation page filled with our
    information for interface link status](img/B19803_05_36.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.36 – Zabbix LLD 触发器原型创建页面，已填充我们的接口链路状态信息](img/B19803_05_36.jpg)'
- en: Figure 5.36 – Zabbix LLD trigger prototype creation page filled with our information
    for interface link status
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.36 – Zabbix LLD 触发器原型创建页面，已填充我们的接口链路状态信息
- en: 'Last but not least, add the trigger tag:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，添加触发器标签：
- en: "![Figure 5.37 – Zabbix LLD trigger prototype creation pag\uFEFF\uFEFFe Tags\
    \ tab](img/B19803_05_37.JPG)"
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.37 – Zabbix LLD 触发器原型创建页面 标签选项卡](img/B19803_05_37.JPG)'
- en: Figure 5.37 – Zabbix LLD trigger prototype creation page Tags tab
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.37 – Zabbix LLD 触发器原型创建页面 标签选项卡
- en: How it works…
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: LLD is quite an extensive topic in Zabbix, but by following the steps in this
    recipe you should be able to apply what you learn here to almost every form of
    LLD there is to configure in Zabbix. First of all, let’s look at how discovery
    works.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: LLD 是 Zabbix 中一个相当广泛的主题，但通过按照本指南中的步骤，你应该能够将你在这里学到的知识应用到几乎所有需要配置的 Zabbix LLD
    类型。首先，让我们看看发现是如何工作的。
- en: 'In the discovery rule, we just configured the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在发现规则中，我们刚刚配置了以下内容：
- en: '![Figure 5.38 – Zabbix LLD discovery key and OID for key net.if.discovery](img/B19803_05_38.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.38 – Zabbix LLD 发现密钥和 OID，键 net.if.discovery](img/B19803_05_38.jpg)'
- en: Figure 5.38 – Zabbix LLD discovery key and OID for key net.if.discovery
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.38 – Zabbix LLD 发现密钥和 OID，键 net.if.discovery
- en: Tip
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Zabbix LLD works by using a specific JSON format. When creating discovery rules,
    we can always go to the discovery rules at the host level and use the **Test**
    button. This should then show us what the JSON Zabbix uses looks like.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix LLD 通过使用特定的 JSON 格式工作。在创建发现规则时，我们可以始终转到主机级别的发现规则，并使用 **测试** 按钮。这样就可以显示
    Zabbix 使用的 JSON 格式。
- en: 'What we are basically saying here is that for every interface after OID `.1.3.6.1.2.1.2.2.1.2`,
    we fill in the `{#IFNAME}` LLD macro. In our case, we will end up with the following
    OIDs:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上在这里说的是，对于 OID `.1.3.6.1.2.1.2.2.1.2` 后的每个接口，我们都填充 `{#IFNAME}` LLD 宏。在我们的案例中，我们将最终得到以下
    OID：
- en: '[PRE6]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, we are saving these for use in our prototypes. Now, when we look at what
    we did to our **Operational status** prototype, this all comes together:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将这些保存下来以供我们的原型使用。现在，当我们查看我们对 **操作状态** 原型所做的更改时，一切都结合在一起了：
- en: '![Figure 5.39 – Zabbix LLD item prototype name, type, key, and OID](img/B19803_05_39.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.39 – Zabbix LLD 项目原型的名称、类型、键和 OID](img/B19803_05_39.jpg)'
- en: Figure 5.39 – Zabbix LLD item prototype name, type, key, and OID
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.39 – Zabbix LLD 项目原型的名称、类型、键和 OID
- en: 'We are telling our item prototype to create an item for every single `{#IFNAME}`
    value using the key defined plus the `{#SNMPINDEX}` LLD macro. `SNMPINDEX` is
    the last number of our SNMP poll. In this case, we would see the following:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉我们的项目原型，为每个 `{#IFNAME}` 值创建一个项，使用已定义的键和 `{#SNMPINDEX}` LLD 宏。`SNMPINDEX`
    是我们 SNMP 轮询的最后一个数字。在这种情况下，我们将看到以下内容：
- en: '[PRE7]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For all the vendors in the world, there’s a set of predefined SNMP rules they
    should adhere to. Our first interface entry when polling `.1.3.6.1.2.1.2.2.1.2`
    was the `.1` SNMPINDEX with the value `lo`. This means that when polling `.1.3.6.1.2.1.2.2.1.8`,
    the `.1` SNMPINDEX here should still contain a value for `lo`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 对于世界上所有的供应商来说，都有一套预定义的 SNMP 规则，他们应该遵循。在轮询 `.1.3.6.1.2.1.2.2.1.2` 时，我们的第一个接口条目是
    `.1` SNMPINDEX，值为 `lo`。这意味着，当轮询 `.1.3.6.1.2.1.2.2.1.8` 时，`.1` SNMPINDEX 这里仍然应该包含
    `lo` 的值。
- en: 'Zabbix LLD will now create an item with the name `Interface lo: Operational
    status`, which will poll the SNMP OID:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 'Zabbix LLD 现在将创建一个名为 `接口 lo: 操作状态` 的项，来轮询 SNMP OID：'
- en: '[PRE8]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It will also create an item with the name `Interface ens192: Operational status`,
    which will poll the SNMP OID:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '它还将创建一个名为 `接口 ens192: 操作状态` 的项，来轮询 SNMP OID：'
- en: '[PRE9]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The created items will then look like this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的项将如下所示：
- en: '![Figure 5.40 – Zabbix latest data screen for our SNMP-monitored host](img/B19803_05_40.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.40 – 我们的 SNMP 监控主机的 Zabbix 最新数据屏幕](img/B19803_05_40.jpg)'
- en: Figure 5.40 – Zabbix latest data screen for our SNMP-monitored host
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.40 – 我们的 SNMP 监控主机的 Zabbix 最新数据屏幕
- en: 'Besides creating these LLD items, we also created an LLD trigger prototype.
    This works in the same manner as item prototypes. If we check our host triggers,
    we can see two created triggers:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建这些 LLD 项目外，我们还创建了一个 LLD 触发器原型。它的工作方式与项目原型相同。如果我们检查我们的主机触发器，可以看到两个已创建的触发器：
- en: '![Figure 5.41 – Our SNMP-monitored host triggers](img/B19803_05_41.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.41 – 我们的 SNMP 监控主机触发器](img/B19803_05_41.jpg)'
- en: Figure 5.41 – Our SNMP-monitored host triggers
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.41 – 我们的 SNMP 监控主机触发器
- en: 'These triggers have been created in the same manner as the items and are then
    filled with the correct items for triggering on:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这些触发器已与项目相同的方式创建，并且被正确的项目填充以触发：
- en: '![Figure 5.42 – Our SNMP-monitored host trigger for ens192](img/B19803_05_42.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.42 – 我们的 SNMP 监控主机 ens192 的触发器](img/B19803_05_42.jpg)'
- en: Figure 5.42 – Our SNMP-monitored host trigger for ens192
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.42 – 我们的 SNMP 监控主机 ens192 的触发器
- en: 'We can see that for the interface operation status, we have an SNMPINDEX of
    `2`, and we have the same for the `Interface ens192: Admin status` item as well.
    Our trigger will now trigger when the operation status is `0` (*down*) and our
    admin status is `1` (*up*).'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以看到，对于接口操作状态，我们的 SNMPINDEX 是 `2`，`接口 ens192: 管理状态` 项目也有相同的值。现在，当操作状态为 `0`
    (*down*) 且管理状态为 `1` (*up*) 时，我们的触发器将被触发。'
- en: A neat trigger, to make sure we only have a problem when the admin status is
    *up*; after all, we only want our interface down alert when we configure the interface
    to be admin *up*.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 一个整洁的触发器，确保只有在管理状态为 *up* 时才会有问题；毕竟，只有当我们将接口配置为管理员 *up* 时，我们才希望收到接口故障的警报。
- en: Tip
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: It’s possible to use discovery filters to only add the interfaces that have
    admin status *up* to our monitoring. This way, we keep our required Zabbix server
    performance lower and our data cleaner. Consider using discovery filters for use
    cases such as this.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用发现过滤器，仅将管理状态为 *up* 的接口添加到我们的监控中。这样，我们可以保持 Zabbix 服务器的性能更低，同时保持数据更清洁。考虑在此类使用案例中使用发现过滤器。
- en: See also
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: Discovery is an extensive subject and takes a while to master. It’s something
    that can be used like we did in this chapter with SNMP, but also with the Zabbix
    agent, and for a lot of other use cases. Once you start working with Zabbix discovery
    and you keep it structured, that’s when you’ll start building the best templates
    you’ve seen yet.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 发现是一个广泛的主题，需要一些时间才能掌握。它可以像我们在本章中使用SNMP那样使用，但也可以与Zabbix代理一起使用，适用于许多其他使用场景。一旦你开始使用Zabbix发现，并且保持结构化，那时你就能开始构建出迄今为止最好的模板。
- en: 'Check out the following link for the Zabbix LLD documentation:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取Zabbix LLD文档：
- en: '[https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery](https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery](https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery)'
- en: Nesting Zabbix templates
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套Zabbix模板
- en: Using a simple template per device or group of devices is in most cases the
    best practice way to create Zabbix templates, but it isn’t the only way. We can
    also use nested templates to break pieces of them apart and put them back together
    in the highest template in the hierarchy.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，使用每个设备或设备组的简单模板是创建Zabbix模板的最佳实践，但这不是唯一的方法。我们还可以使用嵌套模板将它们的部分拆分并重新组合到层级结构中的最高模板中。
- en: In this recipe, we’ll go over how to configure this and why.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将讨论如何配置这个模板及其原因。
- en: Getting ready
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to need our Zabbix server, our SNMP-monitored host, and the template
    we created in the previous recipe.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要我们的Zabbix服务器、我们的SNMP监控主机以及我们在前一章节中创建的模板。
- en: How to do it…
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Let’s start by navigating to our **Data collection** | **Templates** page and
    clicking the **Create template** button in the top-right corner.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先导航到**数据收集** | **模板**页面，并点击右上角的**创建模板**按钮。
- en: 'We are going to create a new template for monitoring the uptime of our SNMP
    host. Input the following information:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个新模板来监控我们SNMP主机的uptime。请输入以下信息：
- en: '![Figure 5.43 – New template creation page for uptime with SNMP](img/B19803_05_43.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.43 – 使用SNMP的uptime新模板创建页面](img/B19803_05_43.jpg)'
- en: Figure 5.43 – New template creation page for uptime with SNMP
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.43 – 使用SNMP的uptime新模板创建页面
- en: Next, we are going to click the **Add** button and click our **Custom Linux
    uptime by SNMP** template name. This will take us to the template editing screen.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将点击**添加**按钮，并点击我们的**通过SNMP自定义Linux uptime**模板名称。这将带我们进入模板编辑页面。
- en: 'Click on **Items** and **Create item** in the top-right corner. We will create
    an example item here, like this:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**项**和右上角的**创建项**。我们将在这里创建一个示例项，如下所示：
- en: '![Figure 5.44 – A new item on the template creation page called System Uptime](img/B19803_05_44.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.44 – 模板创建页面上的新项，名为系统Uptime](img/B19803_05_44.jpg)'
- en: Figure 5.44 – A new item on the template creation page called System Uptime
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.44 – 模板创建页面上的新项，名为系统Uptime
- en: 'Do not forget to add a tag, as shown in the screenshot, by going to the **Tags**
    tab:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记添加一个标签，如截图所示，通过转到**标签**选项卡：
- en: '![Figure 5.45 – New item on the template creation page, System Uptime, Tags
    tab](img/B19803_05_45.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.45 – 模板创建页面上的新项，系统Uptime，标签选项卡](img/B19803_05_45.jpg)'
- en: Figure 5.45 – New item on the template creation page, System Uptime, Tags tab
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.45 – 模板创建页面上的新项，系统Uptime，标签选项卡
- en: Make sure to click the blue **Add** button to finish adding this item.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保点击蓝色的**添加**按钮以完成此项的添加。
- en: Now, let’s navigate to our original template by going back to the **Data collection**
    | **Templates** page and clicking **Custom Linux** **by SNMP**.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过返回**数据收集** | **模板**页面并点击**通过SNMP自定义Linux**，导航到我们原始的模板。
- en: 'On this page, link a template to the current template by adding it in the **Templates**
    entry field, like this:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页面上，通过在**模板**输入框中添加它，将一个模板链接到当前模板，如下所示：
- en: '![Figure 5.46 – Template link page for master SNMP template](img/B19803_05_46.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.46 – 主SNMP模板的模板链接页面](img/B19803_05_46.jpg)'
- en: Figure 5.46 – Template link page for master SNMP template
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.46 – 主SNMP模板的模板链接页面
- en: Click on the blue **Update** button to finish linking the template.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**更新**按钮以完成模板链接。
- en: 'Last, but not least, navigate to **Data collection** | **Hosts**, click our
    **lar-book- templated_snmp** SNMP-monitored host, and check out the **Items**
    page if the item is present:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要，导航到**数据收集** | **主机**，点击我们的**lar-book- templated_snmp** SNMP监控主机，并检查**项**页面，看看该项是否存在：
- en: '![Figure 5.47 – Our Hosts | Items page for host lar-book-templated_snmp](img/B19803_05_47.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.47 – 我们的主机 | 主机 lar-book-templated_snmp 的项页面](img/B19803_05_47.jpg)'
- en: Figure 5.47 – Our Hosts | Items page for host lar-book-templated_snmp
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.47 – 我们的主机 | 主机 lar-book-templated_snmp 的项页面
- en: The item is present, and it shows it’s actually from another template. That’s
    all there is to do to link a template—using these nested templates is easy to
    work with but harder to keep it structured. Let’s see how this works.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 项目存在，并显示它实际上来自另一个模板。这就是链接模板的全部操作——使用这些嵌套模板操作起来很容易，但要保持其结构化则更具挑战性。让我们看看这是如何运作的。
- en: How it works…
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'Nesting templates have a simple tree structure, just like this:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套模板具有简单的树形结构，就像这样：
- en: '![Figure 5.48 – Template nesting tree structure](img/B19803_05_48.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.48 – 模板嵌套树形结构](img/B19803_05_48.jpg)'
- en: Figure 5.48 – Template nesting tree structure
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.48 – 模板嵌套树形结构
- en: So, we have our Zabbix-monitored host, which in turn has `Custom Linux by SNMP`
    linked as the only template. Now, because we have a nested template on `Custom
    Linux by SNMP` (which is, of course, `Custom Linux uptime by SNMP`), the items
    on that template will also be linked to our Zabbix-monitored host.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们有一个 Zabbix 监控的主机，它与 `Custom Linux by SNMP` 模板链接，作为唯一的模板。现在，由于我们在 `Custom
    Linux by SNMP` 上有一个嵌套模板（当然，它是 `Custom Linux uptime by SNMP`），该模板上的项也会链接到我们的 Zabbix
    监控主机。
- en: We can use this for a great deal of cases—one of my favorites is for networking
    equipment. If we have a Juniper EX (or Cisco Catalyst) and a Juniper QFX (or Cisco
    Nexus) series switch, both series switches use the same SNMP discovery for interfaces.
    So, we can create a template for interfaces and nest it in the main template of
    the EX or QFX series, which use different SNMP OIDs for other values.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此应用于许多场景——其中一个我最喜欢的场景是网络设备。如果我们有一台 Juniper EX（或 Cisco Catalyst）系列交换机和一台
    Juniper QFX（或 Cisco Nexus）系列交换机，这两种系列交换机都使用相同的 SNMP 接口发现。因此，我们可以为接口创建一个模板，并将其嵌套在
    EX 或 QFX 系列的主模板中，这些系列使用不同的 SNMP OID 来表示其他值。
- en: This way, we don’t have to write the same discovery rules, items, graphs, and
    everything else on a template a hundred times. We can simply do it once and nest
    the template neatly.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们不需要在模板中重复编写相同的发现规则、项目、图形以及其他所有内容。我们只需做一次，并将模板整洁地嵌套在其中。
