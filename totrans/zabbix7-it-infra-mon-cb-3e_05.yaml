- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Your Own Structured Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It’s time to start one of the most important tasks in Zabbix: building structured
    templates. A good Zabbix setup relies heavily on templating, and there is a huge
    difference between a good and a bad template. So, if you’re new to Zabbix or you
    haven’t started building your own templates yet, then pay close attention to this
    chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go over how to set up your templates, and how to fill
    them with the right items and triggers. Also, it is important to make use of macros
    and **Low-Level Discovery** (**LLD**) in the right way. After following these
    recipes, you will be more than ready to build solid Zabbix templates with the
    right format and even LLD.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your Zabbix template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up template-level tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating template items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating template triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up different kinds of macros
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using LLD on templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting Zabbix templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need our Zabbix server from [*Chapter 4*](B19803_04.xhtml#_idTextAnchor601),
    *Working with Triggers and Alerts*, to monitor our **Simple Network Management
    Protocol** (**SNMP**) host. For the SNMP host, we can use the host we set up in
    the *Working with SNMP monitoring* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up* *Zabbix Monitoring*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your Zabbix template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will start with the basics of creating a Zabbix template.
    We will go over the structure of Zabbix templating and why we need to pay attention
    to certain aspects of templating.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you will need in this recipe is your Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s get started with building our structured Zabbix template:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Zabbix frontend and navigate to **Data collection** | **Templates**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On this page, click the **Create template** button in the top-right corner.
    This will take you to the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.1 – The Create template page, empty](img/B19803_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – The Create template page, empty
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we are going to need to name our template and assign a template
    group to it. We will be creating an SNMP template to monitor a Linux host. I’ll
    be using SNMP in the example to show how the templates are structured.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Use SNMP to monitor network equipment, custom equipment supporting SNMP, and
    more. SNMP is very versatile and easy to understand, and it is implemented by
    a lot of hardware manufacturers. For Linux hosts, I’d still recommend the very
    powerful Zabbix agent, which we covered in the *Setting up Zabbix agent monitoring*
    recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306), *Setting
    Up* *Zabbix Monitoring*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create your template with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The Create template page filled with information for the SNMP
    template](img/B19803_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – The Create template page filled with information for the SNMP template
  prefs: []
  type: TYPE_NORMAL
- en: We will not link any **Templates**, **Tags**, and **Macros** yet, but we’ll
    address some of these functionalities later. That’s all there is to creating our
    template, but there’s nothing in it besides a name, group, and description so
    far.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There’s not a lot of work involved in creating our first template—it’s quite
    straightforward. What we need to keep in mind is the right naming convention here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you might think to yourself: *why is naming a template so important?*
    Well, we are going to create a lot of templates when working with Zabbix. For
    example, this is a small part of the list of out-of-the-box templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Some out-of-the-box templates](img/B19803_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Some out-of-the-box templates
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, this is already a large list, and all of these templates follow
    a singular straightforward naming convention. If you look at the name of the template
    we have just built ourselves and, for example, the built-in Apache template, they
    follow the same convention. Breaking down the convention, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Template naming convention explanation](img/B19803_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Template naming convention explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at the list and compare it to the naming convention we went over
    in *Figure 5**.4*, we can see the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '**What are we monitoring?**: (Linux) We name the template—in this case, we’ll
    call it Linux because the OS we monitor will be Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring type**: (by SNMP) We will add our data collection method at the
    end of the template as we might monitor the Linux OS in other ways besides SNMP,
    such as the Zabbix agent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adhering to the guidelines in this naming convention and thus using the correct
    template names is our first step in creating the correct structure for our template.
    This makes it easy to find out which templates we want to use on which hosts.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we’ve also added a short custom prefix to make sure we can distinguish
    our template from others already created in the Zabbix setup. Normally, we can
    omit this prefix, but for this book, it’s useful. As a best practice, it is recommended
    to clone the default templates you’d like to use and prefix the template name
    with your company name or shorthand. We do this to not overwrite the default templates
    and to ensure we can import the official templates later without overwriting possible
    changes we made. For example, I would clone *Linux by SNMP* and call it *OICTS
    Linux by SNMP* for use in our company, Opensource ICT Solutions. This would also
    work in a **Managed Service Provider** (**MSP**) environment where we’d like to
    have a unique template for each customer.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When building templates, adhere to the Zabbix guidelines. That’s what we will
    do in this book as well, combined with our experience in creating templates. If
    you want to learn more about Zabbix templating guidelines, check the following
    URL: [https://www.zabbix.com/documentation/guidelines/en/thosts](https://www.zabbix.com/documentation/guidelines/en/thosts).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up template-level tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our next step in setting up our Zabbix template is setting up template-level
    tags. Tags on the template level are used to give every single event (problem)
    created on a host by this template a tag. The tag is then used to filter events
    in things such as dashboards, actions, and the **Monitoring** | **Problems** view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with this recipe, you will need a Zabbix server and a template
    on that server, preferably the template we created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating template-level tags is a way to make sure that only events created
    by a certain template will get a configured tag. To get started, the first thing
    you will need to do is navigate to the template and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Data collection** | **Templates** and click on our template, which is
    called **Custom Linux** **by SNMP**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, click the **Tags** tab at the top of the form, and you’ll be taken to
    this tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Zabbix Tags tab for the SNMP template](img/B19803_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Zabbix Tags tab for the SNMP template
  prefs: []
  type: TYPE_NORMAL
- en: Now, the first thing we can do is create some tags to make sure we know all
    the events from this template will be Linux-related.
  prefs: []
  type: TYPE_NORMAL
- en: The first tag is already ready to be created. Fill out **Name** as **class**.
    Then, in the **Value** field, type in **os**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the second tag, click the small dotted-underlined **Add** button and set
    the **Name** for the second tag to **target**. Then, in the **Value** field, type
    in **linux**. It will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Zabbix Tags tab filled out for the SNMP template](img/B19803_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Zabbix Tags tab filled out for the SNMP template
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to click the blue **Update** button to save your tag to this template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, there’s a lot more to creating tags than it might seem at first through
    following this recipe. Tags play a key part in keeping your Zabbix environment
    structured. You will use the template-level tags to filter in a lot of places,
    such as the **Monitoring** | **Problems** window, and with a lot of events created
    by one host, they will improve readability by making problems easy to filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, once we have configured some triggers later in this recipe, when
    checking the **Monitoring** | **Problems** page for our host, we could see something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Example Monitoring | Problems page for host lar-book-agent_snmp](img/B19803_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Example Monitoring | Problems page for host lar-book-agent_snmp
  prefs: []
  type: TYPE_NORMAL
- en: Note regarding screenshots
  prefs: []
  type: TYPE_NORMAL
- en: 'Some screenshots used in the book have been adjusted to fit the margins of
    the book pages which has resulted in lower readability of the text in the print
    version. Please refer to the PDF version available here: [https://packt.link/free-ebook/978-1-80107-832-0](https://packt.link/free-ebook/978-1-80107-832-0);
    to enlarge the image and view the text with more clarity.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the problem we are looking at here is displaying the **target:linux**
    and **class:os** tags at the end of the page. The event was tagged with the template-level
    tag, and we can now see that it will always carry that tag, allowing us to filter.
  prefs: []
  type: TYPE_NORMAL
- en: This gives us loads of opportunities because we aren’t limited to template-level
    tags. We also have host-level tags, item-level tags, and trigger-level tags. We
    could tag everything from a template with `department:architecture`.
  prefs: []
  type: TYPE_NORMAL
- en: We could then, for example, create an action that sends out everything Linux-related
    to a certain Linux engineering email address or Teams/Slack channel based on the
    `department:architecture` to a more specific email address or Teams/Slack channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information regarding the tag policy starting from Zabbix 6, check
    out the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/](https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, the recipe titled *Using LLD on templates* will also explain
    **tag prototypes**, where we will create tags automatically based on the LLD settings.
    Tag prototypes are the recommended way of working with tags when creating discovery
    and are amazing for keeping templates structured. More about that later.
  prefs: []
  type: TYPE_NORMAL
- en: Creating template items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s get started with finally creating some real template items because, in
    the end, items are what it is all about in Zabbix. Without items, we don’t have
    data, and without data, we do not have anything to work with in our monitoring
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, moving along, we are going to need our Zabbix server and a host that we
    can monitor with SNMP. In [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix Monitoring*, we monitored a host with SNMP, so we will use
    this host again. We’ll also use the Zabbix template from the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, let’s log in to our Zabbix server **command-line interface**
    (**CLI**) and enter **snmpwalk**, with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 5.8 – snmpwalk reply](img/B19803_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – snmpwalk reply
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s capture our hostname in our template first, as it is an important
    item to have. When working with SNMP, I always like to work with untranslated
    SNMP `.1.3.6.1.2.1.1.5.0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we have an **Management Information Base** (**MIB**), we can translate this
    OID to make sure it is actually the system name. Enter the following command at
    the Zabbix server CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return the following reply:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.9 – snmptranslate reply](img/B19803_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – snmptranslate reply
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Using **-On** in your SNMP command makes sure that we are receiving the OIDs
    instead of the MIB translation. If we want to work the other way around, we can
    omit the **-On** in our command and **snmptranslate** the translated OID.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to get our hostname, add this to our template. Navigate
    to **Data collection** | **Templates** and select our **Custom Linux by** **SNMP**
    template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, we will go to **Items**. In the upper-right corner, select **Create item**
    to create the following item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Item for sysName SNMP OID](img/B19803_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Item for sysName SNMP OID
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to also add an item-level tag. These are important for grouping and
    filtering items. Click the **Tags** tab and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Item for sysName SNMP OID on the Tags tab](img/B19803_05_11.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Item for sysName SNMP OID on the Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our first item, let’s create a host as well and assign this
    template to that host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Data collection** | **Hosts** and click **Create host** in the
    top-right corner. Create a host with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.12 – New host with our self-created template](img/B19803_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – New host with our self-created template
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t forget to add the macros to our new host before clicking the **Add**
    button. Click on **Macros** and fill in the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Add macros tab on a host](img/B19803_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – Add macros tab on a host
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to set your macros to the type secret text to hide the passwords
    in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can click the **Add** button, and our new host will be monitored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we create items such as this on our template when assigning the template
    to our hosts, the item will also be created on the host. The great thing about
    this is that we can assign a template to multiple hosts, meaning we only have
    to configure the item on the template level once, instead of creating the item
    on every single host. For instance, our newly created host will show the following
    latest data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Monitoring | Latest data for our new host](img/B19803_05_14.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Monitoring | Latest data for our new host
  prefs: []
  type: TYPE_NORMAL
- en: The value for this item will then be different for all your monitored hosts,
    depending on the value received by that host.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: When creating an SNMP item, keep the following in mind. The **Item** field SNMP
    OID always contains the non-translated OID. This is to ensure that we do not actually
    need MIB files for our templates to work.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the item key will be based on the translated OID. In our case,
    the translated OID was `sysName`, which we then turned into the `sysName` item
    key. These are general rules that we should all abide by when creating our templates,
    to make sure they are structured in the same way for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about Zabbix and SNMP OIDs/MIBs, check out this blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: "[https://blog.zabbix.com/zabbix-snmp-what-you-need-to-know-and-how-to-configure-it/10345/#snmp-oid](https://blog.zabbix.com/zabbix-snmp-what-you-need-to-know-and-how-to-configure-it/10345/#sn\uFEFF\
    \uFEFFmp-oid)"
  prefs: []
  type: TYPE_NORMAL
- en: Creating template triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating templated triggers works in roughly the same way as creating templated
    items or normal triggers. Let’s go over the process to see how we do it and how
    to keep it structured.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need the Zabbix server and the host from the previous recipe for this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have configured one item on our template so far, so let’s create a trigger
    for this item:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Data collection** | **Templates** in our Zabbix frontend and select
    our **Custom Linux by** **SNMP** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click **Triggers** and then **Create Trigger** in the top-right corner.
    This will take us to the next page, where we will enter the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Create trigger window for the SNMP template](img/B19803_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – Create trigger window for the SNMP template
  prefs: []
  type: TYPE_NORMAL
- en: 'As discussed in the previous chapter, for triggers there’s also the **scope**
    tag that we need to add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Create trigger window for the SNMP template – tag](img/B19803_05_16.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – Create trigger window for the SNMP template – tag
  prefs: []
  type: TYPE_NORMAL
- en: 'Last, but not least, let’s edit the hostname on our host to see if the trigger
    is working correctly. Change the hostname entry by executing the following command
    on the Linux host CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, make sure the changes take effect by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When editing the template, the created trigger will immediately be added to
    our host named `lar-book-templated_snmp`. This is because when we edited the template,
    the host was already configured with this template. When we have changed the hostname,
    the trigger can immediately be triggered after the item is polled again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Hostname has changed trigger for host lar-book-templated_snmp](img/B19803_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – Hostname has changed trigger for host lar-book-templated_snmp
  prefs: []
  type: TYPE_NORMAL
- en: Because we used the `change` function in our trigger, the second time we poll
    this item the problem will automatically go away again. In our case, this will
    happen after 30 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Like a lot of other Zabbix users, I always like to use the **{HOST.NAME}** macro
    in trigger names, but according to Zabbix guidelines, this isn’t recommended.
    If you prefer this you can still use it, but it’s a lot more useful to use the
    **Host** fields throughout the Zabbix frontend and the built-in macros for notifications.
    This will keep trigger names short and won’t show us redundant information.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up different kinds of macros
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we are working with templates, a very efficient way to make your templates
    more useful is through the use of macros. In this recipe, we’ll discover how to
    use macros to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need our Zabbix server and our SNMP-monitored host from the
    previous recipes. We’ll also need our Zabbix template, as created in the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s start with creating some macros on a template level. We’ll be making
    two different types of macros.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a user macro
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, we’ll define a user macro on our template. Navigate to **Data collection**
    | **Templates** and click on our **Custom Linux by** **SNMP** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, we will go to **Macros** and fill in the following fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Template-level macros](img/B19803_05_18.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.18 – Template-level macros
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Update**, and let’s move to **Trigger** to define a new trigger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Trigger creation window for the SNMP template](img/B19803_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.19 – Trigger creation window for the SNMP template
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also add the trigger tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.20 – Trigger creation window for the SNMP template tag tab](img/B19803_05_20.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.20 – Trigger creation window for the SNMP template tag tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, change the hostname entry by executing the following command on the host
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, make sure the changes take effect by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our trigger should fire, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.21 – Trigger created problem for a hostname prefix on the lar-book-templated_snmp
    host](img/B19803_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.21 – Trigger created problem for a hostname prefix on the lar-book-templated_snmp
    host
  prefs: []
  type: TYPE_NORMAL
- en: Using built-in macros
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, let’s work on defining a built-in macro on our template. Navigate to **Data
    collection** | **Templates** and click on our **Custom Linux by** **SNMP** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click **Triggers** and, in the top-right corner, click on **Create trigger**.
    Create a trigger with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.22 – Trigger creation window for hostname match](img/B19803_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.22 – Trigger creation window for hostname match
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also add the trigger tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 5.23 – Trigger creation window for the SNMP template – \uFEFFtag](img/B19803_05_23.JPG)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.23 – Trigger creation window for the SNMP template – tag
  prefs: []
  type: TYPE_NORMAL
- en: This will then trigger a problem, as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 5.24 – Trigger created problem Hostname does no\uFEFF\uFEFFt match](img/B19803_05_24.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.24 – Trigger created problem Hostname does not match
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are four types of macros: built-in macros, user macros, expressions macros,
    and LLD macros. All of these macros can be used on templates, but also directly
    on hosts and various other locations. Macros are useful for creating unique values
    in places that would otherwise contain static information.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s discover how they work.
  prefs: []
  type: TYPE_NORMAL
- en: How a user macro works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because we want all of our hosts on this template to contain `lar` as a prefix,
    we create a user macro at the template level. This way, the user macro that will
    be used on every host with this template will be the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then define our user macro in our trigger to use the value, which is `lar-`
    in this case. We can reuse this user macro in other triggers, items, and more.
    The great thing is that defining a user macro on a template level isn’t all we
    can do. We can override template-level user macros by defining a host-level user
    macro. So, if we want a single host to contain a different prefix, we simply use
    a host-level macro to override the template-level macro, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.25 – Host-level macros page](img/B19803_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.25 – Host-level macros page
  prefs: []
  type: TYPE_NORMAL
- en: 'If we then look at the inherited and host-level macros screen on our host,
    we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.26 – Inherited and host-level macros page](img/B19803_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.26 – Inherited and host-level macros page
  prefs: []
  type: TYPE_NORMAL
- en: We see the effective value is now `dev-`, not `lar-`, which is exactly what
    we would be expecting to happen here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind the syntax always starts with a curly bracket and a dollar sign
    and ends with a curly bracket. You are allowed to break the text in between with
    either dots or underscores. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**{$****MACRONAME}**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**{$****MACRO.NAME}**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**{$****MACRO_NAME}**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How a built-in macro works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, a built-in macro comes from a predefined list of macros, hardcoded within
    Zabbix. They are used to get data from your Zabbix system and put them in items,
    triggers, and more. This means that the built-in macro used in this case already
    contains a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we used `{HOST.HOST}`, which is the hostname we defined on our
    Zabbix host, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.27 – Zabbix host configuration page for host lar-book-templated_snmp](img/B19803_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.27 – Zabbix host configuration page for host lar-book-templated_snmp
  prefs: []
  type: TYPE_NORMAL
- en: For every single host, this built-in macro would be different as our **Host
    name** value will be unique. This means that our trigger, although defined on
    a template level, will always be unique as well. This method is a very powerful
    way to use built-in macros in triggers, as we’ll pull information from Zabbix
    directly into Zabbix again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind the syntax always starts with a curly bracket and ends with a
    curly bracket. You are allowed to break the text in between with either dots or
    underscores. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**{****HOST.NAME}**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**{****INVENTORY.LOCATION.LAT}**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A complete list of supported (built-in) macros can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/current/en/manual/appendix/macros/supported_by_location](https://www.zabbix.com/documentation/current/en/manual/appendix/macros/supported_by_location)'
  prefs: []
  type: TYPE_NORMAL
- en: This list will be updated by Zabbix, just as with every good Zabbix documentation
    page. This way, you can always use this page as a reference for up-to-date (built-in)
    macros for building your Zabbix elements.
  prefs: []
  type: TYPE_NORMAL
- en: Using LLD on templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let’s get started on my favorite part of template creation: LLD. I think
    this is one of the most powerful and most widely used parts of Zabbix.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get ready for this recipe, you will need your Zabbix server, the SNMP-monitored
    host from the previous recipes, and our template from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Working knowledge of the SNMP tree structure is also recommended. So, make sure
    to read the *Working with SNMP monitoring* recipe in [*Chapter 3*](B19803_03_split_000.xhtml#_idTextAnchor306),
    *Setting Up Zabbix* *Monitoring*, thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s get started by navigating to **Data collection** | **Templates** and selecting
    our **Custom Linux by** **SNMP** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: First, we will add a value mapping, which we’ll use for multiple item prototypes.
    Keep in mind that value mappings since Zabbix 6 are no longer global, but template-
    or host-specific. This is to make sure that the templates and hosts (once exported)
    are even more independent from the global Zabbix settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Value mapping** tab and the dotted **Add** button. Add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 5.28 – Zabbix add Value mapping p\uFEFFage](img/B19803_05_28.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.28 – Zabbix add Value mapping page
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to save this change by clicking the blue **Add** button and then the
    blue **Update** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go back to the template and go to **Discovery rules**, and in the top-right
    corner, click **Create discovery rule**. This will take you to the LLD creation
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 5.29 – Zabbix LLD creation page, empty\uFEFF](img/B19803_05_29.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.29 – Zabbix LLD creation page, empty
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will be making a discovery rule to discover our interfaces on the Linux
    host. The Linux SNMP tree for interfaces is at OID `.1.3.6.1.2.1.2`.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that Linux **net-snmp** is configured correctly in the **/etc/ snmp/snmpd.conf**
    file. It’s important to change the view in this file to show everything from **.1**
    and up, like this: **view systemview** **included .1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s continue with creating our LLD rule by adding the following to our
    LLD creation page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 5.30 – Zabbix LLD creation page filled with our information for network\
    \ interface di\uFEFFscovery](img/B19803_05_30.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.30 – Zabbix LLD creation page filled with our information for network
    interface discovery
  prefs: []
  type: TYPE_NORMAL
- en: After clicking the **Add** button, we can navigate back to our template at **Data
    collection** | **Templates** and click **Custom Linux** **by SNMP**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: We define **Delete lost resources** as **immediately**; we do this because this
    is a test template. This option is used by LLD to remove created resources (such
    as items and triggers) if they are no longer present on our monitored host. Using
    **immediately** can lead to lost data because we might get a resource back within
    a set amount of time, so make sure to adjust this value to your production environment’s
    standard.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Discovery rules** and click our newly created rule, **Discover** **Network
    interfaces**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to **Item prototypes** and click **Create item prototype** in the top-right
    corner. This will open the **Item prototype** creation popup, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.31 – Zabbix LLD Item prototype creation page, empty](img/B19803_05_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.31 – Zabbix LLD Item prototype creation page, empty
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will create our first prototype for creating items from LLD. This means
    we have to fill it with the information we want our items to contain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by filling in an item prototype for the interface operational status,
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.32 – Zabbix LLD item prototype creation page filled with our information
    for the interface’s operational status](img/B19803_05_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.32 – Zabbix LLD item prototype creation page filled with our information
    for the interface’s operational status
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Tags** tab, make sure to also add a tag prototype as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.33 – Zabbix LLD item prototype tag creation tab](img/B19803_05_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.33 – Zabbix LLD item prototype tag creation tab
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, we’ll create an item that is very similar to the item we just
    created. It’s super useful to use the **Clone** button instead of filling in the
    entire form from scratch again.
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the **Add** button, let’s repeat the process and also add the
    following item prototype:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.34 – Zabbix LLD item prototype creation page filled with our information
    for the interface admin status](img/B19803_05_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.34 – Zabbix LLD item prototype creation page filled with our information
    for the interface admin status
  prefs: []
  type: TYPE_NORMAL
- en: 'Do not forget the **Tags** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.35 – Zabbix LLD item 2 prototype tag creation tab](img/B19803_05_35.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.35 – Zabbix LLD item 2 prototype tag creation tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, move over to the **Trigger prototype** page, click the **Create trigger**
    prototype button in the top-right corner, and create the following trigger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.36 – Zabbix LLD trigger prototype creation page filled with our
    information for interface link status](img/B19803_05_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.36 – Zabbix LLD trigger prototype creation page filled with our information
    for interface link status
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, add the trigger tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 5.37 – Zabbix LLD trigger prototype creation pag\uFEFF\uFEFFe Tags\
    \ tab](img/B19803_05_37.JPG)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.37 – Zabbix LLD trigger prototype creation page Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LLD is quite an extensive topic in Zabbix, but by following the steps in this
    recipe you should be able to apply what you learn here to almost every form of
    LLD there is to configure in Zabbix. First of all, let’s look at how discovery
    works.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the discovery rule, we just configured the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.38 – Zabbix LLD discovery key and OID for key net.if.discovery](img/B19803_05_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.38 – Zabbix LLD discovery key and OID for key net.if.discovery
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix LLD works by using a specific JSON format. When creating discovery rules,
    we can always go to the discovery rules at the host level and use the **Test**
    button. This should then show us what the JSON Zabbix uses looks like.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we are basically saying here is that for every interface after OID `.1.3.6.1.2.1.2.2.1.2`,
    we fill in the `{#IFNAME}` LLD macro. In our case, we will end up with the following
    OIDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we are saving these for use in our prototypes. Now, when we look at what
    we did to our **Operational status** prototype, this all comes together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.39 – Zabbix LLD item prototype name, type, key, and OID](img/B19803_05_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.39 – Zabbix LLD item prototype name, type, key, and OID
  prefs: []
  type: TYPE_NORMAL
- en: 'We are telling our item prototype to create an item for every single `{#IFNAME}`
    value using the key defined plus the `{#SNMPINDEX}` LLD macro. `SNMPINDEX` is
    the last number of our SNMP poll. In this case, we would see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For all the vendors in the world, there’s a set of predefined SNMP rules they
    should adhere to. Our first interface entry when polling `.1.3.6.1.2.1.2.2.1.2`
    was the `.1` SNMPINDEX with the value `lo`. This means that when polling `.1.3.6.1.2.1.2.2.1.8`,
    the `.1` SNMPINDEX here should still contain a value for `lo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Zabbix LLD will now create an item with the name `Interface lo: Operational
    status`, which will poll the SNMP OID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It will also create an item with the name `Interface ens192: Operational status`,
    which will poll the SNMP OID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The created items will then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.40 – Zabbix latest data screen for our SNMP-monitored host](img/B19803_05_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.40 – Zabbix latest data screen for our SNMP-monitored host
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides creating these LLD items, we also created an LLD trigger prototype.
    This works in the same manner as item prototypes. If we check our host triggers,
    we can see two created triggers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.41 – Our SNMP-monitored host triggers](img/B19803_05_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.41 – Our SNMP-monitored host triggers
  prefs: []
  type: TYPE_NORMAL
- en: 'These triggers have been created in the same manner as the items and are then
    filled with the correct items for triggering on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.42 – Our SNMP-monitored host trigger for ens192](img/B19803_05_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.42 – Our SNMP-monitored host trigger for ens192
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that for the interface operation status, we have an SNMPINDEX of
    `2`, and we have the same for the `Interface ens192: Admin status` item as well.
    Our trigger will now trigger when the operation status is `0` (*down*) and our
    admin status is `1` (*up*).'
  prefs: []
  type: TYPE_NORMAL
- en: A neat trigger, to make sure we only have a problem when the admin status is
    *up*; after all, we only want our interface down alert when we configure the interface
    to be admin *up*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It’s possible to use discovery filters to only add the interfaces that have
    admin status *up* to our monitoring. This way, we keep our required Zabbix server
    performance lower and our data cleaner. Consider using discovery filters for use
    cases such as this.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Discovery is an extensive subject and takes a while to master. It’s something
    that can be used like we did in this chapter with SNMP, but also with the Zabbix
    agent, and for a lot of other use cases. Once you start working with Zabbix discovery
    and you keep it structured, that’s when you’ll start building the best templates
    you’ve seen yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following link for the Zabbix LLD documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery](https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery)'
  prefs: []
  type: TYPE_NORMAL
- en: Nesting Zabbix templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a simple template per device or group of devices is in most cases the
    best practice way to create Zabbix templates, but it isn’t the only way. We can
    also use nested templates to break pieces of them apart and put them back together
    in the highest template in the hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll go over how to configure this and why.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need our Zabbix server, our SNMP-monitored host, and the template
    we created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start by navigating to our **Data collection** | **Templates** page and
    clicking the **Create template** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to create a new template for monitoring the uptime of our SNMP
    host. Input the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.43 – New template creation page for uptime with SNMP](img/B19803_05_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.43 – New template creation page for uptime with SNMP
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to click the **Add** button and click our **Custom Linux
    uptime by SNMP** template name. This will take us to the template editing screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Items** and **Create item** in the top-right corner. We will create
    an example item here, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.44 – A new item on the template creation page called System Uptime](img/B19803_05_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.44 – A new item on the template creation page called System Uptime
  prefs: []
  type: TYPE_NORMAL
- en: 'Do not forget to add a tag, as shown in the screenshot, by going to the **Tags**
    tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.45 – New item on the template creation page, System Uptime, Tags
    tab](img/B19803_05_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.45 – New item on the template creation page, System Uptime, Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to click the blue **Add** button to finish adding this item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s navigate to our original template by going back to the **Data collection**
    | **Templates** page and clicking **Custom Linux** **by SNMP**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On this page, link a template to the current template by adding it in the **Templates**
    entry field, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.46 – Template link page for master SNMP template](img/B19803_05_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.46 – Template link page for master SNMP template
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button to finish linking the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Last, but not least, navigate to **Data collection** | **Hosts**, click our
    **lar-book- templated_snmp** SNMP-monitored host, and check out the **Items**
    page if the item is present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.47 – Our Hosts | Items page for host lar-book-templated_snmp](img/B19803_05_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.47 – Our Hosts | Items page for host lar-book-templated_snmp
  prefs: []
  type: TYPE_NORMAL
- en: The item is present, and it shows it’s actually from another template. That’s
    all there is to do to link a template—using these nested templates is easy to
    work with but harder to keep it structured. Let’s see how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nesting templates have a simple tree structure, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.48 – Template nesting tree structure](img/B19803_05_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.48 – Template nesting tree structure
  prefs: []
  type: TYPE_NORMAL
- en: So, we have our Zabbix-monitored host, which in turn has `Custom Linux by SNMP`
    linked as the only template. Now, because we have a nested template on `Custom
    Linux by SNMP` (which is, of course, `Custom Linux uptime by SNMP`), the items
    on that template will also be linked to our Zabbix-monitored host.
  prefs: []
  type: TYPE_NORMAL
- en: We can use this for a great deal of cases—one of my favorites is for networking
    equipment. If we have a Juniper EX (or Cisco Catalyst) and a Juniper QFX (or Cisco
    Nexus) series switch, both series switches use the same SNMP discovery for interfaces.
    So, we can create a template for interfaces and nest it in the main template of
    the EX or QFX series, which use different SNMP OIDs for other values.
  prefs: []
  type: TYPE_NORMAL
- en: This way, we don’t have to write the same discovery rules, items, graphs, and
    everything else on a template a hundred times. We can simply do it once and nest
    the template neatly.
  prefs: []
  type: TYPE_NORMAL
