["```\n/**\n* Triggered from a message on a Cloud Pub/Sub topic.\n*\n* @param {!Object} event Event payload.\n* @param {!Object} context Metadata for the event.\n*/\nexports.helloPubSub = (event, context) => {\n  const pubsubMessage = event.data;\n  console.log(Buffer.from(pubsubMessage, 'base64').toString());\n};\n```", "```\nbase64 <<< \"Rich\"\n```", "```\n/**\n* Triggered from a change to a Cloud Storage bucket.\n*\n* @param {!Object} event Data payload.\n* @param {!Object} context Metadata for the event.\n*/\nexports.helloGCS = (event, context) => {\n  const gcsEvent = event;\n  console.log(`Processing file: ${gcsEvent.name}`);\n  console.log(`Event Type: ${context.eventType}`);\n};\n```", "```\n.\n└── ch05\n├── backend-service\n└── frontend-service\n```", "```\nconst {PubSub} = require('@google-cloud/pubsub');\nconst pubsub = new PubSub();\n\nasync function gcpCreatePayload(message) {\n const payload = Buffer.from(JSON.stringify(message));\n console.log ('Information passed: ' + message);\n await pubsub.topic('start-process').publish(payload);\n}\n\nexports.gcpSecureURL = async(req, res)=> {\n const message = req.query.message || req.body.message || 'google-cloud.png';\n await gcpCreatePayload(message);\n res.status(200).send('Creating a secure URL for:' + message);\n}\n```", "```\ngcloud functions deploy gcpSecureURL — trigger-http --runtime nodejs8\n```", "```\ngcloud pubsub topics create start-process\n```", "```\nexports.gcpCreateSignedURL = (event, context)=> {\n  // Get the file to be processed\n  const payload = JSON.parse(Buffer.from(event.data, 'base64').toString());\n\n  // Debug message\n  console.log ('Creating a Signed URL: ' + payload);\n}\n```", "```\ngcloud functions deploy gcpCreateSignedURL --trigger-topic start-process --runtime nodejs8\n```", "```\nasync function gcpGenerateSignedURL() {\n  // Get a signed URL for the file\n  storage\n    .bucket(bucketName)\n    .file(filename)\n    .getSignedUrl(options)\n    .then(results => {\n      const url = results[0];\n\n      console.log('The signed url for ${filename} is ${url}.');\n    })\n    .catch(err => {\n      console.error('ERROR:', err);\n    });\n}\n```", "```\nconst {Storage} = require('@google-cloud/storage');\nconst storage = new Storage();\n\nconst bucketName = 'roselabs-cloud-functions';\nconst filename = 'google-cloud.png';\n\n// These options will allow temporary read access to the file\nconst options = {\n      action: 'read',\n      // MM-DD-CCYY\n      expires: '11-23-2019',\n};\n\nasync function gcpGenerateSignedURL() {\n…\n}\n```", "```\n…\nexports.gcpCreateSignedURL= (event, context)=> {\n  const payload = JSON.parse(Buffer.from(event.data, 'base64').toString());\n  console.log ('gcpCreateSignedURL: ' + payload);\n  gcpGenerateCreateSignedURL();\n}\n```", "```\ngcloud functions deploy gcpCreateSignedURL --trigger-topic start-process --runtime nodejs8\n```", "```\nexports.gcpSecureURL = (data, context)=> {\n  // Get the file to be processed\n  const message = data;\n\n  // Create a pubsub message\n  gcpCreatePayload(message.name);\n};\n```", "```\ngcloud functions deploy gcpSecureURL \\\n --runtime nodejs10 \\\n --trigger-resource gs://roselabs-signed-upload \\\n --trigger-event google.storage.object.finalize\n```", "```\nexports.gcpSecureURL = async (data, context)=> {\n  // Get the file to be processed\n  const message = data;\n\n  // Create a pubsub message based on filename, bucketname\n  await gcpCreatePayload(message);\n}\n```", "```\nasync function gcpCreatePayload(message) {\n  // Process a Pub/Sub message - amend to a JSON string\n  const payload = Buffer.from(JSON.stringify(message));\n\n  console.log ('Information passed: ' + payload);\n\n  // Pass the Topic and the payload\n  await pubsub.topic('start-process').publish(payload);\n}\n```", "```\nexports.gcpCreateSignedURL= (event, context)=> {\n  // Get the file to be processed\n  const payload = JSON.parse(Buffer.from(event.data, 'base64').toString());\n\n  // Debug message\n  console.log ('gcpCreateSignedURL: ' + payload.name + ' ' + payload.bucket);\n\n  // Call the function\n  gcpGenerateSignedURL(payload.name, payload.bucket);\n}\n```", "```\nasync function gcpGenerateSignedURL(filename, bucketName) {\n  // Get a signed URL for the file\n  storage\n    .bucket(bucketName)\n    .file(filename)\n    .getSignedUrl(options)\n    .then(results => {\n      const url = results[0];\n      console.log('The signed url for ${filename} is ${url}.');\n      // gcpMessageQueue(url);\n    })\n    .catch(err => {\n      console.error('ERROR:', err);\n    });\n}\n```", "```\nfunction gcpExpirationDate(duration) {\n  const ExpirationDate = new Date();\n\n  ExpirationDate.setDate(ExpirationDate.getDate() + duration);\n  futureDate = ((ExpirationDate.getMonth()+1) + '-' + ExpirationDate.getDate() + '-' + ExpirationDate.getFullYear());\n\n  console.log ('Expiration date: ${futureDate}');\n\n  return (futureDate);\n}\n\nasync function gcpGenerateSignedURL(filename, bucketName) {\n…\n}\n```", "```\nconst MAX_DURATION_DAYS = 7\n\nconst options = {\n      action: 'read',\n      // MM-DD-CCYY\n      //expires: '11-23-2019',\n      expires: gcpExpirationDate(MAX_DURATION_DAYS),\n};\n```", "```\ngcloud functions deploy gcpSecureURL \\\n --runtime nodejs8 \\\n --trigger-resource gs://roselabs-signed-upload \\\n --trigger-event google.storage.object.finalize\n```", "```\ngcloud functions deploy gcpCreateSignedURL --trigger-topic start-process --runtime nodejs8\n```"]