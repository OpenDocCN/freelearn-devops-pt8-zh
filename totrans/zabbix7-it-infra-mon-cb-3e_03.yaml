- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Setting Up Zabbix Monitoring
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Zabbix 监控
- en: Zabbix is built to be flexible and should be able to monitor just about anything
    you could ever require. In this chapter, we will learn more about working with
    Zabbix to build a lot of different options for monitoring. We’ll go over them
    recipe by recipe so that you end up with a solid understanding of how they work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 被设计为灵活的，应该能够监控你所需的几乎所有内容。在本章节中，我们将学习更多关于如何使用 Zabbix 构建各种监控选项。我们将逐个食谱地讲解它们，确保你能全面理解它们的工作原理。
- en: 'We’ll cover the following recipes on the different monitoring types:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍以下不同监控类型的食谱：
- en: Setting up Zabbix agent monitoring
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Zabbix 代理监控
- en: Working with SNMP monitoring the old way
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用旧方式进行 SNMP 监控
- en: Setting up SNMP monitoring the new way
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置新的 SNMP 监控方式
- en: Creating Zabbix simple checks and the Zabbix trapper
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Zabbix 简单检查和 Zabbix trapper
- en: Working with calculated and dependent items
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用计算项和依赖项
- en: Creating external checks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建外部检查
- en: Setting up JMX monitoring
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 JMX 监控
- en: Setting up database monitoring
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置数据库监控
- en: Setting up HTTP agent monitoring
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 HTTP 代理监控
- en: Using Zabbix browser items to simulate a web user
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zabbix 浏览器项模拟 Web 用户
- en: Using Zabbix preprocessing to alter item values
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zabbix 预处理改变项值
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will need a Zabbix server capable of performing monitoring, with the following
    requirements:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一台能够执行监控的 Zabbix 服务器，具有以下要求：
- en: A server with Zabbix server installed on a Linux distribution of your choice,
    such as Rocky Linux or Ubuntu. However, a distribution such as Debian, Alma Linux,
    or anything else will suit you just as well.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台安装了 Zabbix 服务器的 Linux 发行版主机，例如 Rocky Linux 或 Ubuntu。然而，Debian、Alma Linux 等发行版也同样适用。
- en: A MariaDB (MySQL) server to monitor – for example, the Zabbix server database
    we set up in [*Chapter 1*](B19803_01.xhtml#_idTextAnchor021).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 MariaDB（MySQL）服务器用于监控——例如，在[*第 1 章*](B19803_01.xhtml#_idTextAnchor021)中我们设置的
    Zabbix 服务器数据库。
- en: I’ll be using the same server that we used in the previous chapter, but any
    Zabbix server should do.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用我们在上一章节中使用的相同服务器，但任何 Zabbix 服务器都适用。
- en: Setting up Zabbix agent monitoring
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Zabbix 代理监控
- en: Starting from the release of Zabbix 5, Zabbix also officially started support
    for the new Zabbix Agent 2\. Zabbix Agent 2 brings some major improvements and
    is even written in another coding language – Golang instead of C. In this recipe,
    we will explore how to work with Zabbix Agent 2 and explore some of the new features
    introduced by it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Zabbix 5 版本开始，Zabbix 正式支持新的 Zabbix Agent 2。Zabbix Agent 2 带来了一些重大改进，甚至采用了另一种编程语言——Golang，而非
    C。在本食谱中，我们将探讨如何使用 Zabbix Agent 2，并探索它带来的一些新功能。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started with Zabbix Agent 2, all we need to do is install it on a host
    that we want to monitor. Make sure you have an empty **Red Hat Enterprise Linux**
    (**RHEL**)-based or Ubuntu Linux host ready to monitor.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Zabbix Agent 2，我们需要做的就是在要监控的主机上安装它。确保你有一台空白的 **Red Hat Enterprise Linux**（**RHEL**）或
    Ubuntu Linux 主机，准备好进行监控。
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Let’s learn how to install Zabbix Agent 2 and then move on to working with it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何安装 Zabbix Agent 2，然后继续使用它。
- en: Installing Zabbix Agent 2
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Zabbix Agent 2
- en: 'Let’s start by installing Zabbix Agent 2 on the Linux host we want to monitor.
    I’ll show you how to do this on both RHEL and Ubuntu systems:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在要监控的 Linux 主机上安装 Zabbix Agent 2 开始。我将展示如何在 RHEL 和 Ubuntu 系统上进行安装：
- en: Issue the following command to add the repository.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令添加仓库。
- en: 'For RHEL-based systems, this is as follows:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 RHEL 系统，命令如下：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For Ubuntu systems, this is as follows:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Ubuntu 系统，命令如下：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, issue the following command to install Zabbix Agent 2.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，输入以下命令安装 Zabbix Agent 2。
- en: 'Here’s the command for RHEL-based systems:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 RHEL 系统的命令：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here’s the command for Ubuntu systems:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 Ubuntu 系统的命令：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Congratulations – Zabbix Agent 2 is now installed and ready to use!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜——Zabbix Agent 2 现在已经安装并准备就绪！
- en: Important note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'When adding new repositories to your system, always check out the Zabbix download
    page. You can find the right up-to-date repository for your system here: [https://www.zabbix.com/download](https://www.zabbix.com/download).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当向系统添加新仓库时，请务必查看 Zabbix 下载页面。你可以在这里找到适合你系统的最新仓库：[https://www.zabbix.com/download](https://www.zabbix.com/download)。
- en: Using a Zabbix agent in passive mode
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用被动模式的 Zabbix 代理
- en: 'Let’s start by building a Zabbix agent with passive checks:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从构建一个带有被动检查的 Zabbix 代理开始：
- en: 'After installing Zabbix Agent 2, let’s open the Zabbix agent configuration
    file for editing:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Zabbix Agent 2 后，让我们打开 Zabbix 代理配置文件进行编辑：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this file, we can edit all the Zabbix agent configuration values we could
    need from the server side.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个文件中，我们可以编辑所有需要的 Zabbix 代理配置项，从服务器端进行配置。
- en: 'Let’s start by editing the following parameters:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从编辑以下参数开始：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Change the value of **Server** to the IP of the Zabbix server that will monitor
    this passive agent. Change the value for **Hostname** to the hostname of the monitored
    server. We can get the IP address of our server with the following command:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **Server** 的值更改为将监控此被动代理的 Zabbix 服务器的 IP 地址。将 **Hostname** 的值更改为被监控服务器的主机名。我们可以通过以下命令获取服务器的
    IP 地址：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, restart the Zabbix Agent 2 process:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，重新启动 Zabbix Agent 2 进程：
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, move to the frontend of your Zabbix server and add this host for monitoring.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，前往 Zabbix 服务器的前端，并添加此主机进行监控。
- en: Go to **Data collection** | **Hosts** in your Zabbix frontend and click **Create
    host** in the top-right corner.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Zabbix 前端界面中，进入 **数据收集** | **主机**，然后点击右上角的 **创建主机**。
- en: 'To create this host in our Zabbix server, we need to fill in the values shown
    in the following screenshot:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Zabbix 服务器中创建此主机，我们需要填写以下截图中显示的值：
- en: '![Figure 3.1 – The Zabbix host creation page for lar-book-agent](img/B19803_03_01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – lar-book-agent 的 Zabbix 主机创建页面](img/B19803_03_01.jpg)'
- en: Figure 3.1 – The Zabbix host creation page for lar-book-agent
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – lar-book-agent 的 Zabbix 主机创建页面
- en: 'It’s important to add the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 需要添加以下内容：
- en: '**Host name**: To identify the host (has to be unique).'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机名**：用于识别主机（必须唯一）。'
- en: '**Host groups**: To logically group hosts.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机组**：用于逻辑分组主机。'
- en: '**Interfaces**: To monitor this host on a specific interface. No interface
    means no communication. It’s possible to have a host without an interface in Zabbix
    7 if we don’t need it. In the case of a Zabbix-agent-monitored host, an agent
    interface is required.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口**：用于在特定接口上监控此主机。没有接口意味着没有通信。如果我们不需要接口，在 Zabbix 7 中可以创建没有接口的主机。对于 Zabbix
    代理监控的主机，需要一个代理接口。'
- en: Make sure you add the correct IP address to the **Agent** interface configuration.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你在 **代理** 接口配置中添加了正确的 IP 地址。
- en: 'It is also important to add a template to this host. With Zabbix 7, this can
    be done on the same tab. As this is a Linux server monitored by a Zabbix agent,
    let’s add the correct out-of-the-box template, as shown in the following screenshot:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样重要的是为此主机添加一个模板。在 Zabbix 7 中，这可以在同一个标签页上完成。由于这是一个由 Zabbix 代理监控的 Linux 服务器，因此让我们添加正确的开箱即用模板，如以下截图所示：
- en: '![Figure 3.2 – The Zabbix host template page for lar-book-agent](img/B19803_03_02.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – lar-book-agent 的 Zabbix 主机模板页面](img/B19803_03_02.jpg)'
- en: Figure 3.2 – The Zabbix host template page for lar-book-agent
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – lar-book-agent 的 Zabbix 主机模板页面
- en: 'Click the blue **Add** button to finish creating this agent host. Now that
    you’ve got this host, make sure the **ZBX** icon turns green, indicating that
    this host is up and being monitored by the passive Zabbix agent:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的 **添加** 按钮完成创建此代理主机。现在你已经创建了这个主机，确保 **ZBX** 图标变为绿色，表示该主机已经启动并被被动 Zabbix
    代理监控：
- en: '![Figure 3.3 – The Zabbix configuration hosts page for lar-book-agent](img/B19803_03_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – lar-book-agent 的 Zabbix 配置主机页面](img/B19803_03_03.jpg)'
- en: Figure 3.3 – The Zabbix configuration hosts page for lar-book-agent
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – lar-book-agent 的 Zabbix 配置主机页面
- en: 'Because we configured our host and added a template with items, we can now
    see the values that were received on items for this host by going to **Monitoring**
    | **Hosts** and checking the **Latest data** button. Please note that the values
    could take around 1 minute to show up:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们已配置主机并添加了带有项目的模板，因此我们现在可以通过进入 **监控** | **主机** 并点击 **最新数据** 按钮来查看此主机的项目接收到的值。请注意，值可能需要大约
    1 分钟才能显示：
- en: '![Figure 3.4 – The Zabbix Latest data page for lar-book-agent](img/B19803_03_04.JPG)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – lar-book-agent 的 Zabbix 最新数据页面](img/B19803_03_04.JPG)'
- en: Figure 3.4 – The Zabbix Latest data page for lar-book-agent
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – lar-book-agent 的 Zabbix 最新数据页面
- en: Using a Zabbix agent in active mode
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Zabbix 代理的主动模式
- en: 'Now, let’s learn how to configure the Zabbix agent with active checks. We need
    to change some values on the monitored Linux server host side:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解如何配置带有主动检查的 Zabbix 代理。我们需要在被监控的 Linux 服务器主机端更改一些值：
- en: 'Start by executing the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从执行以下命令开始：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let’s edit the following value to change this host to an active agent:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们编辑以下值，将此主机更改为主动代理：
- en: '[PRE9]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Change the value for **ServerActive** to the IP of the Zabbix server that will
    monitor this passive agent. Then, change the value of **Hostname** to your hostname.
    In my case, this is **lar-book-agent**:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **ServerActive** 的值更改为将监控此被动代理的 Zabbix 服务器的 IP 地址。然后，将 **Hostname** 的值更改为你的主机名。在我的例子中，这是
    **lar-book-agent**：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Important note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Keep in mind that if you’re working with multiple Zabbix servers or Zabbix proxies,
    such as when you’re running a Zabbix server in high availability, you need to
    fill in all the Zabbix servers or Zabbix proxies IP addresses when using the **ServerActive**
    parameter. **High availability** (**HA**) nodes are delimited by a semicolon (**;**),
    while different Zabbix environment IPs are delimited by a comma (**,**).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果你正在使用多个 Zabbix 服务器或 Zabbix 代理（例如，在运行高可用性 Zabbix 服务器时），你需要在使用 **ServerActive**
    参数时填写所有 Zabbix 服务器或 Zabbix 代理的 IP 地址。**高可用性** (**HA**) 节点由分号（**;**）分隔，而不同的 Zabbix
    环境 IP 地址由逗号（**,**）分隔。
- en: 'Now, restart the Zabbix Agent 2 process:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，重启 Zabbix Agent 2 进程：
- en: '[PRE11]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Next, move to the frontend of your Zabbix server and add another host with a
    template to do active checks instead of passive ones.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到 Zabbix 服务器的前端，添加另一个主机并选择一个模板，以进行主动检查，而不是被动检查。
- en: 'First, let’s rename our passive host. To do that, go to **Data collection**
    | **Hosts** in your Zabbix frontend and click the host we just created. Change
    **Host name** as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们重命名我们的被动主机。为此，请在 Zabbix 前端中进入 **数据收集** | **主机**，然后点击我们刚创建的主机。将 **Host
    name** 更改如下：
- en: '![Figure 3.5 – The Zabbix host configuration page for lar-book-agent_passive](img/B19803_03_05.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – lar-book-agent_passive 的 Zabbix 主机配置页面](img/B19803_03_05.jpg)'
- en: Figure 3.5 – The Zabbix host configuration page for lar-book-agent_passive
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – lar-book-agent_passive 的 Zabbix 主机配置页面
- en: We are doing this because, for an active Zabbix agent, the hostname in the Zabbix
    agent configuration file needs to match the configuration of our host, as seen
    on the Zabbix frontend. For passive agents, this isn’t the case.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做是因为，对于主动 Zabbix 代理，Zabbix 代理配置文件中的主机名需要与我们的主机配置在 Zabbix 前端中的配置相匹配。对于被动代理，则不需要这样做。
- en: Click on the blue **Update** button to save the changes.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的 **更新** 按钮以保存更改。
- en: Go to **Data collection** | **Hosts** in your Zabbix frontend and click **Create
    host** in the top-right corner.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Zabbix 前端中，进入 **数据收集** | **主机**，然后点击右上角的 **创建主机**。
- en: 'Now, let’s create the host, as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建主机，步骤如下：
- en: "![Figure 3.6 – The Zabbix host configuration page for lar-book-age\uFEFFnt](img/B19803_03_06.jpg)"
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – lar-book-agent 的 Zabbix 主机配置页面](img/B19803_03_06.jpg)'
- en: Figure 3.6 – The Zabbix host configuration page for lar-book-agent
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – lar-book-agent 的 Zabbix 主机配置页面
- en: 'Also, make sure you add the correct template, named **Linux by Zabbix** **agent
    active**:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，确保你添加了正确的模板，名为 **Linux by Zabbix** **agent active**：
- en: '![Figure 3.7 – The Zabbix host template page for lar-book-agent](img/B19803_03_07.JPG)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – lar-book-agent 的 Zabbix 主机模板页面](img/B19803_03_07.JPG)'
- en: Figure 3.7 – The Zabbix host template page for lar-book-agent
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – lar-book-agent 的 Zabbix 主机模板页面
- en: Please note that as of Zabbix 6.2, the **ZBX** icon should turn green for an
    active agent. Note that when we navigate to **Monitoring** | **Hosts** and check
    **Latest data**, we can see our active data coming in.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从 Zabbix 6.2 版本开始，**ZBX** 图标应变为绿色，表示这是一个主动代理。注意，当我们导航到 **监控** | **主机** 并查看
    **最新数据** 时，我们可以看到我们的主动数据已被接收。
- en: Tip
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: As you might have noticed, a Zabbix agent can run in both passive and active
    mode at the same time. Keep this in mind when creating your own Zabbix agent templates
    as you might want to combine the check types. In the end, the **Item** type will
    determine how the checks are executed toward the agent.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，Zabbix 代理可以同时以被动模式和主动模式运行。在创建自己的 Zabbix 代理模板时，请记住这一点，因为你可能希望将检查类型结合起来。最终，**Item**
    类型将决定如何执行对代理的检查。
- en: How it works…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Now that we’ve configured our Zabbix agents and know how they should be set
    up, let’s see how the different modes work.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经配置了 Zabbix 代理并知道它们应该如何设置，让我们看看不同模式是如何工作的。
- en: Passive agent
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 被动代理
- en: 'The **passive agent** works by collecting data from our host with the Zabbix
    agent. Every time an item on our host reaches its *update interval*, the Zabbix
    server asks the Zabbix agent what the value is now:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**被动代理**通过使用 Zabbix 代理从我们的主机收集数据来工作。每当主机上的一个项目达到其 *更新间隔* 时，Zabbix 服务器会询问 Zabbix
    代理当前的值：'
- en: '![Figure 3.8 – Communication diagram between the server and the passive agent](img/B19803_03_08.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 服务器与被动代理之间的通信图](img/B19803_03_08.jpg)'
- en: Figure 3.8 – Communication diagram between the server and the passive agent
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 服务器与被动代理之间的通信示意图
- en: Passive agents are great when you’re working in environments where you want
    to keep communication initiated from the Zabbix server or Zabbix proxy side. An
    example of this is when there is a firewall that is only allowing outgoing traffic,
    as seen from the Zabbix server or proxy side.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 被动代理在需要保持从Zabbix服务器或Zabbix代理端发起通信的环境中非常有效。例如，在有防火墙的情况下，防火墙仅允许外向流量，此时从Zabbix服务器或代理端来看，通信就受到限制。
- en: Active agent
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主动代理
- en: 'The **active agent** works by sending data from the Zabbix agent to a Zabbix
    server or Zabbix proxy. Every time an item on our agent reaches its update interval,
    the agent will collect the value to send to our server:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**主动代理**的工作方式是将数据从Zabbix代理发送到Zabbix服务器或Zabbix代理。每当代理上的某个项目达到更新间隔时，代理将收集该值并发送到服务器：'
- en: '![Figure 3.9 – Communication diagram between the server and the active agent](img/B19803_03_09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 服务器与主动代理之间的通信示意图](img/B19803_03_09.jpg)'
- en: Figure 3.9 – Communication diagram between the server and the active agent
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 服务器与主动代理之间的通信示意图
- en: The active agent is great when you’re working in an environment where there
    is a firewall that is only accepting outgoing connections, as seen from the Zabbix
    agent side. This is used in a lot of environments as it can mitigate one of the
    main security concerns that is mostly associated with monitoring hosts. Instead
    of allowing the Zabbix server to access all the different subnets (which is a
    bigger risk), we allow the hosts to send data to Zabbix instead – many to one
    instead of one to many.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 主动代理在需要进行通信的环境中非常适用，尤其是在防火墙仅允许外向连接的情况下，从Zabbix代理端来看便是如此。许多环境采用这种方式，因为它可以缓解与监控主机相关的主要安全问题之一。与允许Zabbix服务器访问所有不同子网（这会带来更大的风险）不同，我们允许主机将数据发送到Zabbix服务器——即多个向一个发送，而不是一个向多个发送。
- en: On the other hand, having the Zabbix agent working in active mode can also be
    a lot more efficient. Most of the load that comes from getting data to your Zabbix
    server is now on the Zabbix agent side. Because there are more Zabbix agents out
    there than you have Zabbix servers or proxies, offloading a load like this is
    a great idea.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，使用Zabbix代理的主动模式也能提高效率。现在，大部分从Zabbix代理到Zabbix服务器的数据传输负载都转移到了Zabbix代理端。因为Zabbix代理的数量通常多于Zabbix服务器或代理的数量，所以将负载转移到代理端是一个很好的选择。
- en: 'As mentioned previously, we can use both types of checks at the same time,
    giving us the freedom to configure every type of check we need. In this case,
    our setup would look like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以同时使用两种类型的检查，这让我们有更大的自由度来配置所需的每种检查。在这种情况下，我们的设置将是这样的：
- en: '![Figure 3.10 – Communication diagram between the server and both agent types](img/B19803_03_10.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – 服务器与两种代理类型之间的通信示意图](img/B19803_03_10.jpg)'
- en: Figure 3.10 – Communication diagram between the server and both agent types
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 服务器与两种代理类型之间的通信示意图
- en: This might be the case in situations where we want to mainly monitor passively,
    but, for example, log file monitoring with the Zabbix agent must be done with
    an active Zabbix agent. In this case, we can combine our modes and make sure we
    use the full scale of our features provided in the Zabbix agent.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们主要想被动监控的情况下，可能需要用到Zabbix代理的主动模式进行一些特定任务。例如，Zabbix代理进行日志文件监控时必须使用主动Zabbix代理。在这种情况下，我们可以结合使用两种模式，并确保我们充分利用Zabbix代理提供的所有功能。
- en: See also
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: "There’s a lot of stuff going on under the hood of Zabbix Agent 2\\. If you’re\
    \ interested in learning more about the core of Zabbix Agent 2, check out this\
    \ cool blog post by Alexey Petrov: [https://blog.zabbix.com/magic-of-new-zabbix-agent/8460/](https://blog.zabbix.com/magic-of-new-zab\uFEFF\
    \uFEFFbix-agent/8460/)."
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix Agent 2的背后有很多复杂的工作。如果你对Zabbix Agent 2的核心工作原理感兴趣，可以看看Alexey Petrov写的这篇有趣的博客文章：[https://blog.zabbix.com/magic-of-new-zabbix-agent/8460/](https://blog.zabbix.com/magic-of-new-zabbix-agent/8460/)。
- en: Working with SNMP monitoring the old way
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用旧方法进行SNMP监控
- en: 'Now, let’s do something I enjoy most when working with Zabbix: build SNMP monitoring.
    My professional roots lie in network engineering, and I have worked with SNMP
    monitoring a lot to monitor all these different network devices.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们做一些我在使用Zabbix时最喜欢的事情：构建SNMP监控。我从事网络工程工作多年，曾使用SNMP监控监控各种网络设备。
- en: Please do keep in mind that although this recipe will cover how to work with
    SNMP monitoring the old way, it is still a valid option. Zabbix 6.4 introduced
    an entirely new way of setting up SNMP monitoring. The new way utilizes bulk metric
    collection and is more efficient for the SNMP device and number of network sessions,
    so it might be a good idea to check out that recipe after this one.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，尽管本教程会介绍如何使用传统方式进行 SNMP 监控，但它仍然是一个有效的选项。Zabbix 6.4 引入了一种全新的 SNMP 监控设置方式。新方式利用批量指标收集，对于
    SNMP 设备和网络会话数量更加高效，因此在完成本教程后，查看这个新方法可能是个不错的选择。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To get started, we need the two Linux hosts we used in the previous recipes:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要前面教程中用到的两台 Linux 主机：
- en: Our Zabbix server host
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的 Zabbix 服务器主机
- en: The host we used in the previous recipe to monitor via the Zabbix active agent
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在前面的教程中使用的主机，通过 Zabbix 活动代理进行监控
- en: How to do it…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Monitoring via SNMP polling is easy and very powerful. We will start by configuring
    SNMPv3 on our monitored Linux host:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 SNMP 拉取监控非常简单且功能强大。我们将从在监控的 Linux 主机上配置 SNMPv3 开始：
- en: Let’s start by issuing the following commands to install SNMP on the host we
    would like to be monitored by SNMP.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先通过执行以下命令在希望被 SNMP 监控的主机上安装 SNMP。
- en: 'For RHEL-based systems:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于 RHEL 的系统：
- en: '[PRE12]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For Ubuntu systems:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Ubuntu 系统：
- en: '[PRE13]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let’s create the new SNMPv3 user that we will use to monitor our host.
    Please note that we’ll be using insecure passwords, so make sure you use secure
    passwords for your production environments. Issue the following command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建新的 SNMPv3 用户，用来监控我们的主机。请注意，我们将使用不安全的密码，因此确保在生产环境中使用安全密码。执行以下命令：
- en: '[PRE14]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Make sure you edit the SNMP configuration file so that you can read all SNMP
    objects:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保编辑 SNMP 配置文件，以便可以读取所有 SNMP 对象：
- en: '[PRE15]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following line to the existing **view systemview** lines. If there
    are none, simply create this new line:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到现有的 **view systemview** 行。如果没有现有行，直接创建这一新行：
- en: '[PRE16]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, enable and start the **snmpd** daemon so that you can start monitoring
    this server:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，启用并启动 **snmpd** 守护进程，以便开始监控此服务器：
- en: '[PRE17]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is all we need to do on the Linux host side; we can now go to the Zabbix
    frontend to configure our host. Go to **Data collection** | **Hosts** in your
    Zabbix frontend and click **Create host** in the top-right corner.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是在 Linux 主机端需要做的所有配置；现在我们可以去 Zabbix 前端配置我们的主机了。在 Zabbix 前端中，进入 **数据收集** |
    **主机**，然后点击右上角的 **创建主机**。
- en: 'Fill in the host configuration page:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写主机配置页面：
- en: '![Figure 3.11 – Zabbix host configuration page for lar-book-agent_snmp](img/B19803_03_11.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11 – Zabbix 主机配置页面，适用于 lar-book-agent_snmp](img/B19803_03_11.jpg)'
- en: Figure 3.11 – Zabbix host configuration page for lar-book-agent_snmp
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – Zabbix 主机配置页面，适用于 lar-book-agent_snmp
- en: Don’t forget to change the IP address of the SNMP interface to your own value.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 别忘了将 SNMP 接口的 IP 地址更改为你自己的值。
- en: 'Make sure you add the right out-of-the-box template, as shown in the following
    screenshot:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保添加正确的现成模板，如下图所示：
- en: '![Figure 3.12 – Adding the Linux by SNMP template to the host](img/B19803_03_12.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – 将 Linux 的 SNMP 模板添加到主机](img/B19803_03_12.jpg)'
- en: Figure 3.12 – Adding the Linux by SNMP template to the host
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 将 Linux 的 SNMP 模板添加到主机
- en: Tip
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'While upgrading from an earlier Zabbix version to Zabbix 6, you won’t get all
    the new out-of-the-box templates. If you feel like you are missing some templates,
    you can download them from the Zabbix GitHub repository: [https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates](https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在从早期版本的 Zabbix 升级到 Zabbix 6 时，你不会得到所有新的现成模板。如果你觉得缺少了一些模板，可以从 Zabbix GitHub 仓库下载：[https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates](https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates)。
- en: We are using some macros in our configuration here for the username and password.
    We can use these macros to add a bunch of hosts with the same credentials. This
    is very useful, for instance, if you have a bunch of switches with the same SNMPv3
    credentials.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在配置中使用了一些宏来表示用户名和密码。通过这些宏，我们可以用相同的凭据添加大量主机。例如，如果你有很多交换机使用相同的 SNMPv3 凭据，这非常有用。
- en: 'Let’s fill in the macros under **Administration** | **Macros**, like so:'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们在 **管理** | **宏** 中填写宏，如下所示：
- en: '![Figure 3.13 – Zabbix global macro page with SNMP macros](img/B19803_03_13.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 带有 SNMP 宏的 Zabbix 全局宏页面](img/B19803_03_13.jpg)'
- en: Figure 3.13 – Zabbix global macro page with SNMP macros
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 带有 SNMP 宏的 Zabbix 全局宏页面
- en: Tip
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'A cool feature in Zabbix 6 is the ability to hide macros in the frontend by
    using the **Secret text** macro type. Do keep in mind that macros of the **Secret
    text** type are still unencrypted in the Zabbix database, So, for fully encrypted
    macros, we would need something such as HashiCorp or CyberArk Vault. Check out
    the documentation for more information: [https://www.zabbix.com/documentation/current/en/manual/config/secrets](https://www.zabbix.com/documentation/current/en/manual/config/secrets).'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 6的一个酷炫功能是能够通过使用**密文**宏类型在前端隐藏宏。请记住，**密文**类型的宏在Zabbix数据库中仍然是未加密的。因此，要实现完全加密的宏，我们需要类似HashiCorp或CyberArk
    Vault的工具。欲了解更多信息，请查看文档：[https://www.zabbix.com/documentation/current/en/manual/config/secrets](https://www.zabbix.com/documentation/current/en/manual/config/secrets)。
- en: 'Use the dropdown to change **{$SNMPV3_AUTH}** and **{$SNMPV3_PRIV}** to **Secret
    text**:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用下拉菜单将**{$SNMPV3_AUTH}**和**{$SNMPV3_PRIV}**更改为**密文**：
- en: '![Figure 3.14 – Zabbix Secret text used to hide sensitive (authentication)
    data](img/B19803_03_14.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – Zabbix密文用于隐藏敏感（认证）数据](img/B19803_03_14.jpg)'
- en: Figure 3.14 – Zabbix Secret text used to hide sensitive (authentication) data
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – Zabbix密文用于隐藏敏感（认证）数据
- en: 'Now, after applying these changes by clicking **Update**, we should be able
    to monitor our Linux server via SNMPv3\. Let’s go to **Monitoring** | **Hosts**
    and check the **Latest data** page for our new host:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**更新**应用这些更改后，我们应该能够通过SNMPv3监控我们的Linux服务器。让我们进入**监控** | **主机**并检查我们新主机的**最新数据**页面：
- en: '![Figure 3.15 – SNMP – the Latest data page for lar-book-agent_snmp](img/B19803_03_15.JPG)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15 – SNMP – lar-book-agent_snmp的最新数据页面](img/B19803_03_15.JPG)'
- en: Figure 3.15 – SNMP – the Latest data page for lar-book-agent_snmp
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – SNMP – lar-book-agent_snmp的最新数据页面
- en: Note that it might take around 1 minute for your data to show up here.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数据可能需要约1分钟才能显示在这里。
- en: Tip
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'When working with macros, there are three levels in cascading order: global,
    template, and host-level macros. When working with global-level macros, keep in
    mind that they are not exported with templates or hosts. You want to use template-level
    and host-level macros in most cases to keep your exports independent of Zabbix
    global settings.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理宏时，有三个级别，按级联顺序排列：全局、模板和主机级宏。在处理全局级宏时，请记住，它们不会随模板或主机一起导出。在大多数情况下，您应该使用模板级和主机级宏，以保持导出与Zabbix的全局设置独立。
- en: How it works…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'When we create a host, as we did in *Step 4*, Zabbix polls the host using SNMP.
    Polling SNMP like this uses SNMP OIDs. For instance, when we poll the `1.3.6.1.4.1.2021.4.6.0`.
    That value is then returned to us on the Zabbix server:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建主机时，如*步骤 4*所示，Zabbix使用SNMP轮询该主机。像这样轮询SNMP会使用SNMP OID。例如，当我们轮询`1.3.6.1.4.1.2021.4.6.0`时，该值会返回到Zabbix服务器：
- en: '![Figure 3.16 – Diagram showing communication between Zabbix server and SNMP
    host](img/B19803_03_16.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – 显示Zabbix服务器与SNMP主机之间通信的示意图](img/B19803_03_16.jpg)'
- en: Figure 3.16 – Diagram showing communication between Zabbix server and SNMP host
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 显示Zabbix服务器与SNMP主机之间通信的示意图
- en: The OID is like the address (or path) of where our metric is located. By requesting
    the OID, the metric is requested.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: OID就像是我们度量标准的位置地址（或路径）。通过请求OID，就可以请求该度量标准。
- en: SNMPv3 adds authentication and encryption to this process, making sure that
    when our Zabbix server requests information, that request is first encrypted and
    the data is sent back encrypted as well.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: SNMPv3为这个过程增加了认证和加密，确保当Zabbix服务器请求信息时，该请求首先被加密，数据也会被加密后发送回来。
- en: We also included the option to use **Combined requests** when configuring our
    host. Combined requests request several OIDs in the same stream, making this the
    preferred method of doing SNMP requests as it is more efficient. Only disable
    it for hosts that do not support **Combined requests**. Even better is to use
    an SNMP bulk request, which we will discuss in the next recipe.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在配置主机时加入了使用**组合请求**的选项。组合请求在同一流中请求多个OID，这使得它成为进行SNMP请求的首选方法，因为它更高效。只有在主机不支持**组合请求**时才禁用此功能。更好的方法是使用SNMP批量请求，我们将在下一个配方中讨论这一点。
- en: 'Lastly, let’s take a look at SNMP OIDs, the most important part of our SNMP
    request. OIDs work in a tree-like structure, meaning that every number behind
    the dot can contain another value. For example, let’s look at this OID for our
    host:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看看SNMP OID，这是我们SNMP请求中最重要的部分。OID以树状结构工作，这意味着点后面的每个数字都可以包含另一个值。例如，让我们看看这个用于我们主机的OID：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we poll that OID with either the SNMPwalk CLI tool or our Zabbix server,
    we will get several OIDs back:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 SNMPwalk CLI 工具或我们的 Zabbix 服务器轮询该 OID，我们将会收到多个 OID 的返回：
- en: '[PRE19]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This includes our `1.3.6.1.4.1.2021.4.6.0` OID with the value that contains
    our free memory. This is how SNMP is built, like a tree.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括我们的 `1.3.6.1.4.1.2021.4.6.0` OID，其值包含我们的空闲内存。这就是 SNMP 的构建方式，像一棵树一样。
- en: Setting up SNMP monitoring the new way
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置新的 SNMP 监视方式
- en: SNMP monitoring has had an entire overhaul starting with Zabbix 6.4, introducing
    a new way to build SNMP monitoring. The old way is still available and works,
    but all out-of-the-box monitoring will be overhauled to work with the new way.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Zabbix 6.4 开始，SNMP 监视已经进行了全面的更新，引入了一种新的构建 SNMP 监视的方式。旧方法仍然可用并且有效，但所有开箱即用的监视都将进行更新以适应新方法。
- en: The new way will utilize SNMP bulk queries, making it a lot more efficient.
    As such, in this recipe, we will look at how to build SNMP monitoring the new
    way.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法将利用 SNMP 批量查询，使其更加高效。因此，在这个示例中，我们将看看如何使用新的方式构建 SNMP 监视。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, we need the two Linux hosts:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要这两台 Linux 主机：
- en: Our Zabbix server environment
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的 Zabbix 服务器环境
- en: Any Linux host running the SNMP server
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何运行 SNMP 服务器的 Linux 主机
- en: How to do it…
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'Let’s be efficient and start building some bulk SNMP queries. First things
    first, get your hosts ready:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们高效率地开始构建一些批量 SNMP 查询。首先要做的是准备您的主机：
- en: First, log in to your Zabbix server CLI. We will start by installing some additional
    tools to make building SNMP monitoring easier.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，登录到您的 Zabbix 服务器 CLI。我们将开始安装一些额外的工具，以便更轻松地构建 SNMP 监视。
- en: 'For RHEL-based systems:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于 RHEL 的系统：
- en: '[PRE20]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then, on the Linux host we would like to monitor, we must install the SNMP server.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，在我们希望监视的 Linux 主机上，我们必须安装 SNMP 服务器。
- en: 'For RHEL-based systems:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于 RHEL 的系统：
- en: '[PRE21]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For Ubuntu systems:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Ubuntu 系统：
- en: '[PRE22]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, let’s configure a new SNMPv3 user on the host we want to monitor and set
    up the server so that we can query information:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在我们想要监视的主机上配置一个新的 SNMPv3 用户，并设置服务器以便可以查询信息：
- en: '[PRE23]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Make sure you edit the SNMP configuration file so that you can read all SNMP
    objects:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您编辑 SNMP 配置文件以便可以读取所有 SNMP 对象：
- en: '[PRE24]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following line to the rest of the **view** **systemview** lines:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到其余的 **视图** **systemview** 行中：
- en: '[PRE25]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, enable and start the **snmpd** daemon so that you can start monitoring
    this server:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，启用并启动 **snmpd** 守护进程以便可以开始监视此服务器：
- en: '[PRE26]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is all we need to do on the Linux host side; we can now go to the Zabbix
    frontend to configure our host.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 Linux 主机端需要完成的所有工作；现在我们可以前往 Zabbix 前端配置我们的主机。
- en: 'Go to **Data collection** | **Hosts** in your Zabbix frontend and click **Create
    host** in the top-right corner. We will create a new host with the following information:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Zabbix 前端的 **数据收集** | **主机**，并点击右上角的 **创建主机**。我们将使用以下信息创建一个新主机：
- en: '![Figure 3.17 – Zabbix host configuration page for lar-book-snmp_bulk](img/B19803_03_17.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.17 – lar-book-snmp_bulk 的 Zabbix 主机配置页面](img/B19803_03_17.jpg)'
- en: Figure 3.17 – Zabbix host configuration page for lar-book-snmp_bulk
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – lar-book-snmp_bulk 的 Zabbix 主机配置页面
- en: 'Before adding the host, make sure you click on the small dotted underlined
    **Add** button in the **Interfaces** section and select **SNMP**:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加主机之前，请确保您点击 **接口** 部分中的小点下划线 **添加** 按钮，并选择 **SNMP**：
- en: '![Figure 3.18 – Zabbix interface configuration for lar-book-snmp_bulk](img/B19803_03_18.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.18 – lar-book-snmp_bulk 的 Zabbix 接口配置](img/B19803_03_18.jpg)'
- en: Figure 3.18 – Zabbix interface configuration for lar-book-snmp_bulk
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – lar-book-snmp_bulk 的 Zabbix 接口配置
- en: Make sure you fill in the right IP address and credentials for the host you
    are going to monitor.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 确保为您要监视的主机填写正确的 IP 地址和凭据。
- en: 'Switch to the **Macros** tab and add the following information:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 **宏** 标签，并添加以下信息：
- en: '![Figure 3.19 – Zabbix host configuration Macros tab for lar-book-snmp_bulk](img/B19803_03_19.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.19 – lar-book-snmp_bulk 的 Zabbix 主机配置宏标签](img/B19803_03_19.jpg)'
- en: Figure 3.19 – Zabbix host configuration Macros tab for lar-book-snmp_bulk
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – lar-book-snmp_bulk 的 Zabbix 主机配置宏标签
- en: 'Let’s also go to **Value mapping** and create the following value map. We’ll
    use this later:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还要前往 **数值映射** 并创建以下值映射。我们稍后会用到这个：
- en: '![Figure 3.20 – Zabbix host configuration Value mapping tab for lar-book-snmp_bulk](img/B19803_03_20.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.20 – lar-book-snmp_bulk 的 Zabbix 主机配置数值映射标签](img/B19803_03_20.jpg)'
- en: Figure 3.20 – Zabbix host configuration Value mapping tab for lar-book-snmp_bulk
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – lar-book-snmp_bulk 的 Zabbix 主机配置数值映射标签
- en: Now, you can click on the big **Add** button at the bottom of the page and the
    host will be created.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击页面底部的大 **添加** 按钮，主机将被创建。
- en: 'At this point, we have to start building our SNMP checks. But before we do
    that, we should decide which checks to build. Let’s do a quick SNMP walk from
    the Zabbix server Linux CLI:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们必须开始构建我们的 SNMP 检查。但在此之前，我们应该决定要构建哪些检查。让我们从 Zabbix 服务器的 Linux CLI 进行一个快速的
    SNMP walk：
- en: '[PRE27]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This SNMP walk will show us an output similar to the following:'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个 SNMP walk 将会显示类似以下的输出：
- en: '[PRE28]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Test the SNMP walk with all interface information:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试所有接口信息的 SNMP walk：
- en: '[PRE29]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You should see a lot more output now.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你应该能看到更多的输出。
- en: Let’s go back to the Zabbix frontend by going to **Data collection** | **Hosts**,
    choosing the **lar-book-snmp_bulk** host, and going to **Item**.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过进入 **数据收集** | **主机**，选择 **lar-book-snmp_bulk** 主机，进入 **项目**，然后返回 Zabbix
    前端。
- en: 'In the top-right corner, click **Create item** and add the following information:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角，点击 **创建项目** 并添加以下信息：
- en: '![Figure 3.21 – Zabbix item configuration for ifTable.walk](img/B19803_03_21.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.21 – Zabbix 项目配置 for ifTable.walk](img/B19803_03_21.jpg)'
- en: Figure 3.21 – Zabbix item configuration for ifTable.walk
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – Zabbix 项目配置 for ifTable.walk
- en: 'Don’t forget to switch to the **Tags** tab and add the following:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 别忘了切换到 **标签** 标签页并添加以下内容：
- en: '![Figure 3.22 – Zabbix item configuration ifTable.walk Tags tab](img/B19803_03_22.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.22 – Zabbix 项目配置 ifTable.walk 标签页](img/B19803_03_22.jpg)'
- en: Figure 3.22 – Zabbix item configuration ifTable.walk Tags tab
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – Zabbix 项目配置 ifTable.walk 标签页
- en: Click on the big **Add** button at the bottom of the window to add this item
    to the host.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击窗口底部的大 **添加** 按钮将此项目添加到主机中。
- en: This item will now collect our SNMP data in bulk. At this point, we can create
    dependent items to get specific values. You should be back on the **Items** page
    for the host, where we can once again click on **Create item**.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个项目现在将批量收集我们的 SNMP 数据。此时，我们可以创建依赖项来获取特定的值。你应该已经回到主机的 **项目** 页面，在这里我们可以再次点击
    **创建项目**。
- en: 'My interface was called **ens192**, so let’s get the operational status for
    that interface. Add the following information:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的接口名为 **ens192**，所以让我们获取该接口的操作状态。添加以下信息：
- en: '![Figure 3.23 – Zabbix item configuration for ifOperStatus[ens192]](img/B19803_03_23.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.23 – Zabbix 项目配置 for ifOperStatus[ens192]](img/B19803_03_23.jpg)'
- en: Figure 3.23 – Zabbix item configuration for ifOperStatus[ens192]
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23 – Zabbix 项目配置 for ifOperStatus[ens192]
- en: 'Don’t forget to switch to the **Tags** tab and add the following:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 别忘了切换到 **标签** 标签页并添加以下内容：
- en: '![Figure 3.24 – Zabbix item configuration ifOperStatus[ens192] Tags tab](img/B19803_03_24.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.24 – Zabbix 项目配置 ifOperStatus[ens192] 标签页](img/B19803_03_24.jpg)'
- en: Figure 3.24 – Zabbix item configuration ifOperStatus[ens192] Tags tab
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.24 – Zabbix 项目配置 ifOperStatus[ens192] 标签页
- en: 'Last, but certainly not least, we will need to go to the **Preprocessing**
    tab. This is where we will decide which value to extract from the bulk. Remember
    the index from *Step 12*? Let’s use it now by adding the OID for the interface
    operational status (**1.3.6.1.2.1.2.2.1.8**) with an index of **2**:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要进入 **预处理** 标签页。在这里我们将决定从批量中提取哪个值。还记得 *第 12 步* 中的索引吗？现在让我们使用它，通过添加接口操作状态的
    OID（**1.3.6.1.2.1.2.2.1.8**）以及索引 **2**：
- en: '![Figure 3.25 – Zabbix item configuration ifOperStatus[ens192] Preprocessing
    tab](img/B19803_03_25.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.25 – Zabbix 项目配置 ifOperStatus[ens192] 预处理标签页](img/B19803_03_25.jpg)'
- en: Figure 3.25 – Zabbix item configuration ifOperStatus[ens192] Preprocessing tab
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.25 – Zabbix 项目配置 ifOperStatus[ens192] 预处理标签页
- en: Now, click the big **Add** button at the bottom of the page and let’s see if
    it all worked.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击页面底部的大 **添加** 按钮，看看是否一切正常。
- en: 'Go to **Monitoring** | **Latest data** and find your host – that is, **lar-book-snmp_bulk**:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 **监控** | **最新数据**，找到你的主机 —— 即 **lar-book-snmp_bulk**：
- en: '![Figure 3.26 – Zabbix lar-book-snmp_bulk under Monitoring | Latest data](img/B19803_03_26.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.26 – Zabbix lar-book-snmp_bulk 在监控 | 最新数据下](img/B19803_03_26.jpg)'
- en: Figure 3.26 – Zabbix lar-book-snmp_bulk under Monitoring | Latest data
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.26 – Zabbix lar-book-snmp_bulk 在监控 | 最新数据下
- en: As you can see, we are now collecting the SNMP information in bulk and then
    collecting a single value from the bulk information.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们现在正在批量收集 SNMP 信息，然后从这些批量信息中收集单个值。
- en: Important note
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: It is always recommended to use the **Do not keep history** option on items
    collecting values in bulk. That way, we aren’t storing duplicate values for no
    reason. Once you finish building all your SNMP items, don’t forget to make that
    change.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 始终建议在收集批量值的项目上使用 **不保留历史记录** 选项。这样，我们就不会无缘无故地存储重复值。在你完成构建所有 SNMP 项目后，别忘了进行这一更改。
- en: How it works…
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The new SNMP walk might seem like a bit of a headscratcher at first. Why do
    we need this new change? The way the internals work in Zabbix before 6.4 is that
    it will collect each SNMP OID separately. There is a smart mechanism that combines
    requests to make it a bit more efficient, but it was never officially a bulk request
    (even though that’s what the frontend called it).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 SNMP walk 一开始可能让人有些困惑。我们为什么需要这个新变化？在 Zabbix 6.4 之前的内部工作方式是，它会单独收集每个 SNMP
    OID。虽然有一个智能机制可以将请求组合在一起以提高效率，但它从未正式作为批量请求（尽管前端是这么称呼的）。
- en: Now, with the new `walk[]` item key, we are collecting all the SNMP values in
    a single SNMP `GetBulk` request. This makes the entire process a lot more efficient
    and stresses the SNMP devices a lot less.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用新的 `walk[]` 项键，我们在一个单一的 SNMP `GetBulk` 请求中收集所有 SNMP 值。这使得整个过程更加高效，并且减少了对
    SNMP 设备的压力。
- en: 'There’s also a new addition in Zabbix 7.0 that is for the following three pollers:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 7.0 中还新增了以下三个轮询器：
- en: Agent poller
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理轮询器
- en: HTTP agent poller
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 代理轮询器
- en: SNMP poller (for **walk[OID]** and **get[OID]** items)
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SNMP 轮询器（用于 **walk[OID]** 和 **get[OID]** 项目）
- en: These processes now execute checks asynchronously. What this means for our SNMP
    checks using `walk[]` or `get[]` is that they can execute multiple (item) checks
    at the same time. In older versions of Zabbix, these pollers could only execute
    a single check at a time.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这些进程现在是异步执行的。这对使用 `walk[]` 或 `get[]` 的 SNMP 检查意味着它们可以同时执行多个（项目）检查。在 Zabbix 的旧版本中，这些轮询器每次只能执行一个检查。
- en: It’s still possible to add multiple of these processes with **StartSNMPPollers**,
    for example, but it now functions differently. They will execute a maximum of
    1,000 checks per poller, something that can be configured with the **MaxConcurrentChecksPerPoller**
    parameter.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然可以通过 **StartSNMPPollers** 添加多个这样的进程，例如，但它的工作方式有所不同。它们每个轮询器最多执行 1,000 次检查，这可以通过
    **MaxConcurrentChecksPerPoller** 参数进行配置。
- en: 'So, what did we use? Well, we started with a simple request, which was to get
    all of the values under the SNMP interface’s OID – that is, `.1.3.6.1.2.1.2.2.1`.
    This contains all the information for our SNMP interfaces, as shown in the following
    screenshot:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们使用了什么？我们从一个简单的请求开始，即获取 SNMP 接口的 OID 下的所有值——也就是 `.1.3.6.1.2.1.2.2.1`。这包含了我们所有
    SNMP 接口的信息，如下图所示：
- en: '![Figure 3.27 – Zabbix lar-book-snmp_bulk raw SNMP walk on Monitoring | Latest
    data](img/B19803_03_031.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.27 – Zabbix lar-book-snmp_bulk 原始 SNMP walk 在监控 | 最新数据](img/B19803_03_031.jpg)'
- en: Figure 3.27 – Zabbix lar-book-snmp_bulk raw SNMP walk on Monitoring | Latest
    data
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.27 – Zabbix lar-book-snmp_bulk 原始 SNMP walk 在监控 | 最新数据
- en: 'After, we extracted a single value from the bulk we collected with a preprocessing
    step:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们从收集到的大量数据中提取了一个单一值，经过预处理步骤：
- en: '![Figure 3.28 – Zabbix lar-book-snmp_bulk SNMP walk value preprocessing](img/B19803_03_28.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.28 – Zabbix lar-book-snmp_bulk SNMP walk 值预处理](img/B19803_03_28.jpg)'
- en: Figure 3.28 – Zabbix lar-book-snmp_bulk SNMP walk value preprocessing
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.28 – Zabbix lar-book-snmp_bulk SNMP walk 值预处理
- en: We can do this to extract any OID from the already completed SNMP walk manually.
    This is super useful if you have a lot of information from an SNMP walk item but
    you only need a few static values from the walk.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过手动提取已经完成的 SNMP walk 中的任何 OID。如果你有大量来自 SNMP walk 项目的信息，但只需要其中少数几个静态值，这个方法非常有用。
- en: This becomes extra apparent once we collect big pieces of information and start
    using LLD rules to automate the task later, as well as when we still need to get
    some specific values, something that might not be an option for LLD. All that
    information can be collected in a single call to the SNMP device and then split
    into LLD rules, as well as separate items.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们收集大量信息并开始使用 LLD 规则自动化任务时，或者当我们仍然需要获取某些特定的值时，这一点尤为明显，这些值可能不适合 LLD。所有这些信息可以通过一次
    SNMP 设备调用收集，并随后拆分成 LLD 规则和单独的项目。
- en: We’ll continue working with this kind of new monitoring in [*Chapter 7*](B19803_07.xhtml#_idTextAnchor1318),
    *Using Discovery for Automatic Creation*, in the *Setting up Zabbix SNMP low-level
    discovery the new* *way* recipe.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第 7 章*](B19803_07.xhtml#_idTextAnchor1318)中继续处理这种新的监控方式，*使用发现功能自动创建*，该章节是*使用
    Zabbix SNMP 低级发现新方法*教程的一部分。
- en: Creating Zabbix simple checks and the Zabbix trapper
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Zabbix 简单检查和 Zabbix trapper
- en: In this recipe, we will go over two checks that can help you build some more
    customized setups. Zabbix simple checks provide you with an easy way to monitor
    some specific data, while the Zabbix trapper combines with the Zabbix sender to
    get data from your hosts into the server, providing you with some scripting options.
    Let’s get started.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将介绍两个检查，它们可以帮助你构建更为自定义的配置。Zabbix 简单检查为你提供了一种轻松监控特定数据的方法，而 Zabbix trapper
    与 Zabbix sender 配合使用，将主机的数据发送到服务器，为你提供了一些脚本选项。让我们开始吧。
- en: Getting ready
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To create these checks, we will need a Zabbix server and a Linux host to monitor.
    We can use the host with a Zabbix agent and SNMP monitoring from the previous
    recipes.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这些检查，我们需要一台 Zabbix 服务器和一台 Linux 主机来进行监控。我们可以使用之前教程中的带有 Zabbix 代理和 SNMP 监控的主机。
- en: Note that we do not need the Zabbix agent for these checks.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这些检查中不需要 Zabbix 代理。
- en: How to do it…
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: As the name suggests, working with simple checks is quite simple. So, let’s
    get started.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，使用简单检查非常简单。那我们开始吧。
- en: Creating simple checks
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建简单检查
- en: 'We will create a simple check to monitor whether a service is running and accepting
    TCP connections on a certain port:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的检查，用于监控某服务是否正在运行，并在某端口上接受 TCP 连接：
- en: To get this done, we will need to create a new host on the Zabbix frontend.
    Go to **Data collection** | **Hosts** in your Zabbix frontend and click **Create
    host** in the top-right corner.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成这个任务，我们需要在 Zabbix 前端创建一个新主机。进入 Zabbix 前端的**数据收集** | **主机**，然后点击右上角的**创建主机**按钮。
- en: 'Create a host with the following settings:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有以下设置的主机：
- en: '![Figure 3.29 – Zabbix host configuration page for lar-book-agent_simple](img/B19803_03_29.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.29 – lar-book-agent_simple 主机的 Zabbix 主机配置页面](img/B19803_03_29.jpg)'
- en: Figure 3.29 – Zabbix host configuration page for lar-book-agent_simple
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.29 – lar-book-agent_simple 主机的 Zabbix 主机配置页面
- en: Now, go to **Data collection** | **Hosts** and go to **Items** for the newly
    created host. We want to create a new item here by clicking the **Create** **item**
    button.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，进入**数据收集** | **主机**，然后进入新创建主机的**项**页面。我们想要通过点击**创建项**按钮来创建一个新项。
- en: 'We must create a new item with the following values. After doing so, click
    the **Add** button at the bottom of the page:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们必须创建一个新项，填写以下值。完成后，点击页面底部的**添加**按钮：
- en: '![Figure 3.30 – The Zabbix item configuration page for the port 22 check on
    the lar-book-agent_simple host](img/B19803_03_30.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.30 – lar-book-agent_simple 主机上端口 22 检查的 Zabbix 项配置页面](img/B19803_03_30.jpg)'
- en: Figure 3.30 – The Zabbix item configuration page for the port 22 check on the
    lar-book-agent_simple host
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.30 – lar-book-agent_simple 主机上端口 22 检查的 Zabbix 项配置页面
- en: 'Make sure that you also add a tag to the item since we need this in several
    places to filter and find our item when we’re working with Zabbix. Set it up like
    this:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请确保你也为该项添加标签，因为我们在多个地方需要它来过滤和查找我们的项。在此设置：
- en: '![Figure 3.31 – Zabbix SSH port item, Tag tab](img/B19803_03_31.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.31 – Zabbix SSH 端口项，标签选项卡](img/B19803_03_31.jpg)'
- en: Figure 3.31 – Zabbix SSH port item, Tag tab
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.31 – Zabbix SSH 端口项，标签选项卡
- en: Important note
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We are adding the **net.tcp.services[ssh,,22]** item key here. The port in this
    case is optional as we can specify the service SSH with a different port if we
    want to.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里添加的是**net.tcp.services[ssh,,22]** 项键。此处的端口是可选的，因为如果需要，我们可以指定使用不同端口的 SSH
    服务。
- en: 'Now, we should be able to see whether our server is accepting SSH connections
    on port **22** on our **Latest data** screen. Navigate to **Monitoring** | **Hosts**
    and check the **Latest data** screen for our new value:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们应该能够在**最新数据**屏幕中查看服务器是否接受端口**22**上的 SSH 连接。进入**监控** | **主机**，并检查我们的新值：
- en: '![Figure 3.32 – Zabbix Latest data page for lar-book-agent_simple, item port
    22 check](img/B19803_03_32.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.32 – lar-book-agent_simple 主机端口 22 检查的 Zabbix 最新数据页面](img/B19803_03_32.jpg)'
- en: Figure 3.32 – Zabbix Latest data page for lar-book-agent_simple, item port 22
    check
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.32 – lar-book-agent_simple 主机端口 22 检查的 Zabbix 最新数据页面
- en: There is one more thing wrong here. As you can see, we do not currently have
    a value mapping setup. Here, **Last value** is just displaying **1** or **0**,
    making it hard to distinguish what this means. To change this, navigate back to
    **Data collection** | **Hosts** and edit the **lar-book-agent_simple** host.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里还有一个问题。如你所见，目前我们没有设置值映射。此处，**最后值**只是显示 **1** 或 **0**，让人难以区分其含义。要更改此设置，请返回到
    **数据采集** | **主机**，然后编辑 **lar-book-agent_simple** 主机。
- en: 'Click on the **Value mapping** tab and click the small **Add** button to add
    a value mapping, like so:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **值映射** 标签页，然后点击小的 **添加** 按钮以添加一个值映射，如下所示：
- en: '![Figure 3.33 – lar-book-agent_simple, Value mapping window](img/B19803_03_33.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.33 – lar-book-agent_simple，值映射窗口](img/B19803_03_33.jpg)'
- en: Figure 3.33 – lar-book-agent_simple, Value mapping window
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.33 – lar-book-agent_simple，值映射窗口
- en: Click on the blue **Add** button and click on the blue **Update** button.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的 **添加** 按钮，然后点击蓝色的 **更新** 按钮。
- en: Then, back at the full **Data collection** | **Hosts** list, navigate to our
    **lar-book-agent_simple** host and click on **Items** for this host.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在完整的 **数据采集** | **主机** 列表中，导航到我们的 **lar-book-agent_simple** 主机，并点击该主机的 **项**。
- en: 'Edit the **Check if port 22 is available** item and add the following value
    mapping:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 **检查端口 22 是否可用** 项，并添加以下值映射：
- en: '![Figure 3.34 – lar-book-agent_simple, edit item window](img/B19803_03_34.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.34 – lar-book-agent_simple，编辑项窗口](img/B19803_03_34.jpg)'
- en: Figure 3.34 – lar-book-agent_simple, edit item window
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.34 – lar-book-agent_simple，编辑项窗口
- en: 'That’s all there is to creating simple checks in Zabbix. The latest data page
    will now look like this:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在 Zabbix 中创建简单检查的全部内容。最新数据页面现在应该像这样：
- en: '![Figure 3.35 – Latest data page for our port 22 check item](img/B19803_03_35.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.35 – 我们的端口 22 检查项的最新数据页面](img/B19803_03_35.jpg)'
- en: Figure 3.35 – Latest data page for our port 22 check item
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.35 – 我们的端口 22 检查项的最新数据页面
- en: As you can see, there is a human-readable value now displaying either **Up**
    or **Down**, giving us a human-readable entry that’s easier to understand. Now,
    let’s look at the Zabbix trapper item.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，现在有一个人类可读的值显示 **Up** 或 **Down**，为我们提供了一个更易理解的人类可读条目。现在，让我们看看 Zabbix trapper
    项。
- en: Creating a trapper
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 trapper
- en: 'We can do some cool stuff with Zabbix trapper items once we get more advanced
    setups. But for now, let’s create an item on our `lar-book-agent_simple` host:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们进行更高级的设置，使用 Zabbix trapper 项目可以做一些很酷的事情。但现在，让我们在 `lar-book-agent_simple`
    主机上创建一个项：
- en: Go to **Data collection** | **Hosts** and click on the host, then go to **Items**.
    We want to create a new item here by clicking the **Create** **item** button.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **数据采集** | **主机**，点击该主机，然后进入 **项**。我们想在此创建一个新项，点击 **创建** **项** 按钮。
- en: 'So, let’s create the following item and click the **Add** button:'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所以，让我们创建以下项并点击 **添加** 按钮：
- en: '![Figure 3.36 – Zabbix item trap receiver configuration screen for lar-book-agent_simple](img/B19803_03_36.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.36 – Zabbix 项目 trap 接收器配置屏幕（lar-book-agent_simple）](img/B19803_03_36.jpg)'
- en: Figure 3.36 – Zabbix item trap receiver configuration screen for lar-book-agent_simple
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.36 – Zabbix 项目 trap 接收器配置屏幕（lar-book-agent_simple）
- en: 'Make sure you also navigate to the **Tags** tab and add a tag. We will use
    this later for filtering:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你也进入 **标签** 标签页并添加一个标签。我们稍后会用到它来进行过滤：
- en: '![Figure 3.37 – Zabbix item trap receiver tag configuration screen for lar-book-agent_simple](img/B19803_03_37.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.37 – Zabbix 项目 trap 接收器标签配置屏幕（lar-book-agent_simple）](img/B19803_03_37.jpg)'
- en: Figure 3.37 – Zabbix item trap receiver tag configuration screen for lar-book-agent_simple
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.37 – Zabbix 项目 trap 接收器标签配置屏幕（lar-book-agent_simple）
- en: If we go to the CLI of our monitored server, we can install Zabbix sender.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们进入被监控服务器的 CLI，可以安装 Zabbix sender。
- en: 'Run the following command for RHEL-based systems:'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于 RHEL 的系统，运行以下命令：
- en: '[PRE30]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run the following command for Ubuntu systems:'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Ubuntu 系统，运行以下命令：
- en: '[PRE31]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After installation, we can use Zabbix sender to send some information to our
    server (make sure you use your Zabbix server IP when using the **-****z** option):'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以使用 Zabbix sender 向服务器发送一些信息（确保使用 Zabbix 服务器的 IP 地址，并在使用 **-****z**
    选项时进行指定）：
- en: '[PRE32]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now, we should be able to see whether our monitored host has sent out the Zabbix
    trap and the Zabbix server has received this trap for processing.
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们应该能够看到我们被监控的主机是否发送了 Zabbix trap，并且 Zabbix 服务器已接收此 trap 进行处理。
- en: 'Navigate to **Monitoring** | **Hosts** and check the **Latest data** screen
    for our new value:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **监控** | **主机**，并检查 **最新数据** 屏幕，查看我们新的值：
- en: '![Figure 3.38 – Zabbix Latest data page for lar-book-agent_simple, item trap
    receiver](img/B19803_03_38.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.38 – Zabbix 最新数据页面，针对 lar-book-agent_simple 的项目陷阱接收器](img/B19803_03_38.jpg)'
- en: Figure 3.38 – Zabbix Latest data page for lar-book-agent_simple, item trap receiver
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.38 – Zabbix 最新数据页面，针对 lar-book-agent_simple 的项目陷阱接收器
- en: There it is – our Zabbix trap is in our Zabbix frontend.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样——我们的 Zabbix 陷阱出现在了 Zabbix 前端。
- en: How it works…
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Now that we have built our new items, let’s see how they work by diving into
    the theoretical side of Zabbix simple checks and trappers.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了新的项目，让我们通过深入了解 Zabbix 简单检查和陷阱的理论部分来看看它们是如何工作的。
- en: Simple checks
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单检查
- en: 'Zabbix simple checks are a list of built-in checks that are made for monitoring
    certain values. There is a list and descriptions available for all the simple
    checks that are available in the Zabbix documentation: [https://www.zabbix.com/documentation/current/manual/config/items/itemtypes/simple_checks](https://www.zabbix.com/documentation/current/manual/config/items/itemtypes/simple_checks).'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 简单检查是一些内置的检查项，用于监控特定的值。Zabbix 文档中提供了所有可用简单检查的列表和说明：[https://www.zabbix.com/documentation/current/manual/config/items/itemtypes/simple_checks](https://www.zabbix.com/documentation/current/manual/config/items/itemtypes/simple_checks)。
- en: All of these checks are performed by the Zabbix server to collect data from
    a monitored host. For example, when we do the Zabbix simple check to check whether
    a port is open, our Zabbix server requests whether it can reach that port and
    turns that into a status we can then see in our Zabbix frontend.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些检查都是由 Zabbix 服务器执行的，用于从被监控主机收集数据。例如，当我们进行 Zabbix 简单检查以检测端口是否开放时，Zabbix 服务器会请求是否能访问该端口，并将其转化为我们可以在
    Zabbix 前端看到的状态。
- en: 'This means that if your monitored host’s firewall is blocking port `22` from
    the Zabbix server, we’ll get a service *down* value. However, this doesn’t necessarily
    mean that SSH isn’t running on the server; it simply means SSH is down as seen
    from the side of the Zabbix server or proxy:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果你的被监控主机的防火墙阻止了 Zabbix 服务器访问端口 `22`，我们将看到服务 *宕机* 的状态。然而，这并不一定意味着服务器上没有运行
    SSH；它只是意味着从 Zabbix 服务器或代理的角度看，SSH 服务是宕机的：
- en: '![Figure 3.39 – Zabbix server-to-host communication diagram](img/B19803_03_39.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.39 – Zabbix 服务器与主机通信示意图](img/B19803_03_39.jpg)'
- en: Figure 3.39 – Zabbix server-to-host communication diagram
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.39 – Zabbix 服务器与主机通信示意图
- en: Tip
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Keep in mind that working with simple checks is dependent on external factors
    such as the firewall settings on the monitored host. When you build simple checks,
    make sure to check these factors as well.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，使用简单检查依赖于外部因素，如被监控主机上的防火墙设置。在构建简单检查时，确保检查这些因素。
- en: There’s one more thing to note here. In Zabbix 6.4, the ability to add simple
    checks without an interface on the host was added. This means you can simply add
    the item with the connection details as parameters in the item key instead of
    selecting an interface.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一点需要注意。在 Zabbix 6.4 中，增加了无需主机接口即可添加简单检查的功能。这意味着你可以通过在项目键中将连接详情作为参数来直接添加项目，而不必选择接口。
- en: Trappers
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 陷阱接收器
- en: 'When working with Zabbix sender, we are doing exactly the opposite of most
    checks – we are building an item on our Zabbix server, which allows us to capture
    trap items. This allows us to build some custom checks so that we can send data
    to our Zabbix server from a monitored host:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Zabbix 发送器时，我们做的恰恰是大多数检查的相反操作——我们在 Zabbix 服务器上构建一个项目，以便捕获陷阱项目。这使得我们可以构建一些自定义检查，从被监控的主机向
    Zabbix 服务器发送数据：
- en: '![Figure 3.40 – Zabbix server trap receiver diagram](img/B19803_03_40.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.40 – Zabbix 服务器陷阱接收器示意图](img/B19803_03_40.jpg)'
- en: Figure 3.40 – Zabbix server trap receiver diagram
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.40 – Zabbix 服务器陷阱接收器示意图
- en: Let’s say, for instance, that we want to build a custom Python script that,
    at the end of running the scripts, sends output to the Zabbix server. We could
    ask Python to send this data using the Zabbix sender utility, at which point we’d
    have this data available for processing on the Zabbix server.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，我们想要构建一个自定义的 Python 脚本，在脚本运行结束时将输出发送到 Zabbix 服务器。我们可以让 Python 使用 Zabbix
    发送器工具发送这些数据，这样就可以在 Zabbix 服务器上处理这些数据。
- en: This process is used by some companies who write software to completely integrate
    their software into Zabbix. As you can see, we can greatly extend our options
    with Zabbix trappers and customize our Zabbix server even further. Amazingly,
    this also works with low-level discovery, so long as we send the correct data
    formats (JSON).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程被一些软件公司用来将他们的软件完全集成到 Zabbix 中。如你所见，我们可以通过 Zabbix 捕获器大大扩展我们的选项，并进一步定制我们的
    Zabbix 服务器。令人惊讶的是，这也适用于低级发现，只要我们发送正确的数据格式（JSON）。
- en: Working with calculated and dependent items
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用计算项和依赖项
- en: Calculated and dependent items are used in Zabbix to produce additional values
    from existing values. Sometimes, we have already collected a value and we need
    to do more with the values created by that item. We can do exactly that by using
    calculated and dependent items.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 计算项和依赖项在 Zabbix 中用于从现有值中生成额外的值。有时，我们已经收集了某个值，并且需要对该项创建的值做更多操作。我们可以通过使用计算项和依赖项来做到这一点。
- en: Getting ready
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work with calculated items and dependent items, we are going to need the
    Zabbix server and monitored hosts from the previous recipes. We will add the items
    to the `lar-book-agent_passive` host and our Zabbix server (or any MySQL server)
    host so that we already have some items available to calculate and make dependent.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用计算项和依赖项，我们需要前面章节中的 Zabbix 服务器和被监控的主机。我们将把项目添加到`lar-book-agent_passive`主机和我们的
    Zabbix 服务器（或任何 MySQL 服务器）主机，这样我们就有一些现成的项目可用于计算和依赖。
- en: How to do it…
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: Let’s see how we can extend our items. We’ll start by looking at calculated
    items.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何扩展我们的项目。我们将从查看计算项开始。
- en: Working with calculated items
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用计算项
- en: 'Follow these steps:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Let’s navigate to our host configuration by going to **Data collection** |
    **Hosts** and clicking on our **lar-book-agent_passive** host’s **Items** area.
    In the **Name** filter field, enter **memory**; you will get the following output:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过进入**数据收集** | **主机**，点击我们的**lar-book-agent_passive**主机的**项目**区域来导航到我们的主机配置。在**名称**过滤字段中输入**内存**，你将得到以下输出：
- en: '![Figure 3.41 – Zabbix item page for lar-book-agent_passive](img/B19803_03_41.jpg)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.41 – Zabbix 项目页面，lar-book-agent_passive](img/B19803_03_41.jpg)'
- en: Figure 3.41 – Zabbix item page for lar-book-agent_passive
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.41 – Zabbix 项目页面，lar-book-agent_passive
- en: Now, we can create a calculated item that is going to show us the average memory
    utilization over 15 minutes. We can use this value to determine how busy our host
    was during that period, without having to look at the graphs.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以创建一个计算项，它将显示我们 15 分钟内的平均内存使用情况。我们可以使用这个值来确定在那个期间内我们的主机有多忙，而无需查看图表。
- en: 'Let’s click the **Create item** button and start creating our new calculated
    item. We want our item to have the following values:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击**创建项目**按钮，开始创建我们的新计算项。我们希望我们的项目具有以下值：
- en: '![Figure 3.42 – Zabbix item configuration page, average memory used](img/B19803_03_42.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.42 – Zabbix 项目配置页面，平均内存使用情况](img/B19803_03_42.jpg)'
- en: Figure 3.42 – Zabbix item configuration page, average memory used
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.42 – Zabbix 项目配置页面，平均内存使用情况
- en: 'Make sure you also navigate to the **Tags** tab and add a tag that we will
    use later for filtering:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你也导航到**标签**标签页，并添加一个我们稍后用于过滤的标签：
- en: '![Figure 3.43 – Calculated item Tags tab](img/B19803_03_43.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.43 – 计算项 标签标签页](img/B19803_03_43.jpg)'
- en: Figure 3.43 – Calculated item Tags tab
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.43 – 计算项 标签标签页
- en: 'Now, if we go to check our **Monitoring** | **Hosts** page and select **Latest
    data**, we can check out our value. Make sure you filter the **Name** field for
    **memory** so that you see the correct values:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们检查**监控** | **主机**页面并选择**最新数据**，我们可以查看我们的值。确保你在**名称**字段中过滤**内存**，以便查看正确的值：
- en: '![Figure 3.44 – Zabbix Latest data page for lar-book-agent_passive, memory
    items](img/B19803_03_44.jpg)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.44 – Zabbix 最新数据页面，lar-book-agent_passive 内存项](img/B19803_03_44.jpg)'
- en: Figure 3.44 – Zabbix Latest data page for lar-book-agent_passive, memory items
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.44 – Zabbix 最新数据页面，lar-book-agent_passive 内存项
- en: As we can see, we are calculating the 15-minute average of the memory utilization
    on our newly created item.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们正在计算新创建项目的 15 分钟内存使用率的平均值。
- en: Working with dependent items
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用依赖项
- en: 'It’s time to make our first dependent item. I’ll use the `lar-book-rocky` host
    or our (as it’s called by default) **Zabbix server** host, but any MySQL database
    server should work. Let’s say we want to request some variables from our MySQL
    database in one big batch. In this case, we can create dependent items on top
    of the first item to further process the data:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建我们的第一个依赖项了。我将使用 `lar-book-rocky` 主机或我们的（默认情况下命名为）**Zabbix 服务器**主机，但任何
    MySQL 数据库服务器都应该能工作。假设我们想从 MySQL 数据库一次性请求一些变量。在这种情况下，我们可以在第一个项上创建依赖项来进一步处理数据：
- en: 'Let’s start by creating the main check. Navigate to **Data collection** | **Hosts**,
    select our host, and click the **Create item** button to start creating our first
    new item. We want an item with the following variables:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建主检查开始。进入 **数据收集** | **主机**，选择我们的主机，然后点击 **创建项** 按钮，开始创建我们的第一个新项。我们希望这个项包含以下变量：
- en: "![Figure 3.45 – Zabbix item configuration page, database sta\uFEFFtus](img/B19803_03_45.jpg)"
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.45 – Zabbix 项目配置页面，数据库状态](img/B19803_03_45.jpg)'
- en: Figure 3.45 – Zabbix item configuration page, database status
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.45 – Zabbix 项目配置页面，数据库状态
- en: This item is an SSH check that logs in to our Zabbix server host using SSH and
    then executes the code that was entered in the **Executed script** field. This
    code will then log in to our MariaDB database and will print its status. Make
    sure you enter your credentials correctly.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项是一个 SSH 检查，使用 SSH 登录到我们的 Zabbix 服务器主机，然后执行在 **执行的脚本** 字段中输入的代码。此代码将登录到我们的
    MariaDB 数据库，并打印其状态。确保正确输入你的凭证。
- en: Tip
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Instead of using plaintext credentials in the MySQL command, which is not recommended,
    use macros in the **Executed script** field. This way, you can use the **Secret
    text** macro type to make sure no one can read your password from the frontend.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 不推荐在 MySQL 命令中使用明文凭证，而应该在 **执行的脚本** 字段中使用宏。这样，你可以使用 **密文文本** 宏类型，确保没有人能从前端读取你的密码。
- en: 'Before saving this new item, make sure you also add a tag, like this:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在保存这个新项之前，请确保也添加一个标签，像这样：
- en: '![Figure 3.46 – Zabbix master item configuration page, Tags tab](img/B19803_03_46.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.46 – Zabbix 主项配置页面，标签选项卡](img/B19803_03_46.jpg)'
- en: Figure 3.46 – Zabbix master item configuration page, Tags tab
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.46 – Zabbix 主项配置页面，标签选项卡
- en: Now, click the blue **Add** button to save this new item.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击蓝色的 **添加** 按钮保存这个新项。
- en: Go back to the list of items and click on this host’s hostname, then **Macros**.
    Create a new **{$USERNAME}** and **{$PASSWORD}** macro with your SSH username
    and password under **Value**.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到项目列表，点击这个主机的主机名，然后选择 **宏**。在 **值** 下创建一个新的 **{$USERNAME}** 和 **{$PASSWORD}**
    宏，填入你的 SSH 用户名和密码。
- en: Next, go to **Monitoring** | **Latest data** and check out the data for our
    new check. There should be a long list of MariaDB values. If so, we can continue
    creating the dependent item.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，进入 **监控** | **最新数据**，查看我们新检查项的数据。应该会有一长串 MariaDB 的值。如果是这样，我们可以继续创建依赖项。
- en: 'To create the dependent item, navigate to **Data collection** | **Hosts**,
    select our host, and click the **Create item** button. We want this item to have
    the following variables:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建依赖项，请导航到 **数据收集** | **主机**，选择我们的主机，然后点击 **创建项** 按钮。我们希望这个项包含以下变量：
- en: '![Figure 3.47 – Zabbix item configuration page, MariaDB aborted clients](img/B19803_03_47.jpg)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.47 – Zabbix 项目配置页面，MariaDB 中止客户端](img/B19803_03_47.jpg)'
- en: Figure 3.47 – Zabbix item configuration page, MariaDB aborted clients
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.47 – Zabbix 项目配置页面，MariaDB 中止客户端
- en: 'Make sure you add the following tag:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保添加以下标签：
- en: '![Figure 3.48 – Zabbix dependent item configuration page, Tags tab](img/B19803_03_48.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.48 – Zabbix 依赖项配置页面，标签选项卡](img/B19803_03_48.jpg)'
- en: Figure 3.48 – Zabbix dependent item configuration page, Tags tab
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.48 – Zabbix 依赖项配置页面，标签选项卡
- en: 'It’s very important to add preprocessing to this item; otherwise, we will simply
    get the same data as our master item. So, let’s add the following:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个项添加预处理非常重要，否则我们将只是获取与主项相同的数据。所以，让我们添加以下内容：
- en: '![Figure 3.49 – Zabbix item Preprocessing page, MariaDB aborted clients](img/B19803_03_49.jpg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.49 – Zabbix 项目预处理页面，MariaDB 中止客户端](img/B19803_03_49.jpg)'
- en: Figure 3.49 – Zabbix item Preprocessing page, MariaDB aborted clients
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.49 – Zabbix 项目预处理页面，MariaDB 中止客户端
- en: 'With the preprocessing added, the result will be the number of aborted clients
    for our MariaDB instance:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了预处理后，结果将是我们 MariaDB 实例中已中止的客户端数量：
- en: '![Figure 3.50 – Zabbix Latest data page, MariaDB aborted clients](img/B19803_03_50.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.50 – Zabbix 最新数据页面，MariaDB 中止客户端](img/B19803_03_50.jpg)'
- en: Figure 3.50 – Zabbix Latest data page, MariaDB aborted clients
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.50 – Zabbix最新数据页面，MariaDB终止的客户端
- en: As you can see, using a dependent item, we can use already available information
    from other Zabbix items and split them up into dependent items.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用依赖项，我们可以利用其他Zabbix项中已有的信息，并将其拆分为依赖项。
- en: How it works…
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The calculated and dependent items we worked with in the *How to do it…* section
    can be quite complicated, so let’s go over how they work.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*如何操作…*部分中处理的计算项和依赖项可能相当复杂，因此让我们来看看它们是如何工作的。
- en: Calculated items
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算项
- en: Working with calculated items can be a great way to get even more statistics
    out of your existing data. Sometimes, you just need to combine multiple items
    into one specific value.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 使用计算项是从现有数据中获取更多统计信息的好方法。有时，你只需要将多个项合并为一个特定的值。
- en: 'What we did just now works by taking several values of one item every 15 minutes
    and calculating the average, as follows:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才做的操作是通过每隔15分钟获取一个项的多个值并计算其平均值，具体如下：
- en: '![Figure 3.51 – Zabbix dependent item diagram](img/B19803_03_51.jpg)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![图3.51 – Zabbix依赖项示意图](img/B19803_03_51.jpg)'
- en: Figure 3.51 – Zabbix dependent item diagram
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.51 – Zabbix依赖项示意图
- en: We’re taking those values and calculating the average every 15 minutes. It gives
    us a nice indication of what we are doing over a set period.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每15分钟获取这些值并计算平均值。这为我们提供了一个很好的指示，告诉我们在设定的时间段内做了什么。
- en: Dependent items
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 依赖项
- en: 'Dependent items work by taking the data from a master item and processing that
    data into other data. This way, we can structure our data and keep our check interval
    for all these items the same since the dependent items will receive their data
    on the update interval as the master item. That means that dependent items don’t
    have (and don’t need) an update interval:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项通过从主项获取数据并将其处理为其他数据来工作。这样，我们可以结构化我们的数据，并保持所有这些项的检查间隔相同，因为依赖项会按照主项的更新间隔接收数据。这意味着依赖项没有（也不需要）更新间隔：
- en: '![Figure 3.52 – Dependent item diagram](img/B19803_03_52.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![图3.52 – 依赖项示意图](img/B19803_03_52.jpg)'
- en: Figure 3.52 – Dependent item diagram
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.52 – 依赖项示意图
- en: As we can see, dependent items work as duplicators, on which we use preprocessing
    options to get specific values. Note that preprocessing must be used to extract
    data from the master items since without preprocessing, our data will be the same
    as it is for the master item.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，依赖项充当复制器，我们可以使用预处理选项来获取特定值。请注意，必须使用预处理来提取主项的数据，因为如果没有预处理，我们的数据将与主项相同。
- en: Tip
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Often, we don’t require our master item to be saved in our database since we
    already have the information in our dependent items. When we don’t want the master
    item to be saved, we can simply select the **Do not keep history** option on that
    master item. This will save us some storage space.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们不需要将主项保存在数据库中，因为我们已经在依赖项中拥有该信息。当我们不希望保存主项时，我们可以简单地选择**不保存历史**选项，这样就可以节省一些存储空间。
- en: Creating external checks
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建外部检查
- en: To further extend our Zabbix functionality, we can use custom scripts that can
    be executed as Zabbix external checks. Not everything that we want to monitor
    will always be standard in Zabbix, although a lot is. There’s always something
    that could be missing, and external checks are just a way to bypass some of these.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步扩展我们的Zabbix功能，我们可以使用自定义脚本，这些脚本可以作为Zabbix外部检查执行。并非我们想要监控的所有内容在Zabbix中都是标准的，尽管有很多是。总会有些东西可能缺失，外部检查正是绕过这些问题的一种方式。
- en: Getting ready
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we are going to need just our Zabbix server. We can create an
    item on our `lar-book-rocky` host, which is our Zabbix server-monitored host.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方案中，我们只需要我们的Zabbix服务器。我们可以在我们的`lar-book-rocky`主机上创建一个项，它是我们的Zabbix服务器监控的主机。
- en: How to do it…
  id: totrans-411
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'First, let’s make sure our Zabbix server configuration is set up correctly.
    Execute the following on the Zabbix server CLI:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们确保Zabbix服务器配置正确。请在Zabbix服务器CLI中执行以下操作：
- en: '[PRE33]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This should show us the path where we will place the script that’s used by
    the Zabbix external check. By default, this is **/usr/lib/zabbix/ externalscripts/**.
    Let’s create a new script called **test_external** in this folder with the following
    command:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这应该会显示出我们放置Zabbix外部检查所使用脚本的路径。默认情况下，这是**/usr/lib/zabbix/ externalscripts/**。让我们在这个文件夹中使用以下命令创建一个名为**test_external**的新脚本：
- en: '[PRE34]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following code to this file and save it:'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将以下代码添加到此文件并保存：
- en: '[PRE35]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Make sure our Zabbix server can execute the script by adding the right permissions
    to the file. The **zabbix** user on your Linux server needs to be able to access
    and execute the file:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保我们的 Zabbix 服务器可以执行脚本，通过为文件添加正确的权限来实现。Linux 服务器上的**zabbix**用户需要能够访问并执行该文件：
- en: '[PRE36]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, we are ready to go to our host to create a new item. Navigate to **Data
    collection** | **Hosts**, select our host, **lar-book-rocky**, and click the **Create
    item** button. We want this item to be created as follows:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备去我们的主机上创建一个新项。导航到**数据收集** | **主机**，选择我们的主机**lar-book-rocky**，然后点击**创建项**按钮。我们希望此项按如下方式创建：
- en: '![Figure 3.53 – Zabbix item configuration page](img/B19803_03_53.jpg)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.53 – Zabbix 项目配置页面](img/B19803_03_53.jpg)'
- en: Figure 3.53 – Zabbix item configuration page
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.53 – Zabbix 项目配置页面
- en: 'Now that we’ve added this new item, let’s navigate to **Monitoring** | **Hosts**
    and check the **Latest data** page for our host. Our **Test** variable should
    be returned by our script as **Last value** in Zabbix, as shown in the following
    screenshot:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经添加了这个新项，让我们导航到**监控** | **主机**并检查我们主机的**最新数据**页面。我们的**Test**变量应该会由脚本返回为
    Zabbix 中的**最后值**，如下截图所示：
- en: '![Figure 3.54 – Zabbix Latest data page](img/B19803_03_54.jpg)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.54 – Zabbix 最新数据页面](img/B19803_03_54.jpg)'
- en: Figure 3.54 – Zabbix Latest data page
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.54 – Zabbix 最新数据页面
- en: Tip
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Use the macros in the frontend as variables to send data from your frontend
    to your scripts. You can further automate your checks with this to enhance your
    external checks.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端使用宏作为变量，将数据从前端发送到脚本中。通过这种方式，您可以进一步自动化检查，以增强外部检查。
- en: How it works…
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'External checks seem like they have a steep learning curve, but they are quite
    simple from the Zabbix side. All we do is execute an external script, at which
    point we will receive the standard result output (`STDOUT`) and error (`STDERR`):'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 外部检查看起来有一个陡峭的学习曲线，但从 Zabbix 方面来看它们相当简单。我们所要做的只是执行一个外部脚本，此时我们将收到标准的结果输出（`STDOUT`）和错误（`STDERR`）：
- en: '![Figure 3.55 – Zabbix server external script communication diagram](img/B19803_03_55.jpg)'
  id: totrans-431
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.55 – Zabbix 服务器外部脚本通信图](img/B19803_03_55.jpg)'
- en: Figure 3.55 – Zabbix server external script communication diagram
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.55 – Zabbix 服务器外部脚本通信图
- en: In our example, we sent a value of `Test` to our script, which the script then
    echoed back to us as `$1`.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们向脚本发送了一个值`Test`，然后脚本将其回显为`$1`。
- en: When you have good knowledge of a programming language such as Python, you can
    use this function to build a lot more expansions on top of the current existing
    Zabbix feature set – a simple yet powerful tool to work with.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 当你熟悉像 Python 这样的编程语言时，你可以利用这个功能在现有的 Zabbix 功能基础上进行更多扩展——这是一个简单而强大的工具，易于使用。
- en: Setting up JMX monitoring
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 JMX 监控
- en: Zabbix has JMX monitoring built into it so that we can monitor our Java applications.
    In this recipe, we’ll learn how to monitor Apache Tomcat with Zabbix JMX so that
    we can get a feel for what this monitoring option is all about.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 内置了 JMX 监控功能，使我们可以监控 Java 应用程序。在本节中，我们将学习如何使用 Zabbix JMX 监控 Apache Tomcat，从而了解这种监控选项的具体内容。
- en: Getting ready
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get ready for this recipe, we are going to need our Zabbix server so that
    we can monitor our JMX application.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备好本节内容，我们需要一个 Zabbix 服务器来监控我们的 JMX 应用程序。
- en: 'I used a CentOS 7 machine for this recipe, with Tomcat installed. It can be
    quite tricky to use Tomcat on later CentOS versions due to package dependencies,
    so I recommend sticking with CentOS 7 for this example. You can add the following
    to your Tomcat configuration after installing it to get it working for this recipe:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本节中使用的是一台 CentOS 7 机器，并安装了 Tomcat。由于软件包依赖关系，使用 Tomcat 在较新的 CentOS 版本上可能会很棘手，因此我建议在本例中使用
    CentOS 7。在安装 Tomcat 后，您可以将以下内容添加到配置文件中，使其能够正常工作：
- en: '[PRE37]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If you want to set up JMX monitoring in your production environment, you can
    use the settings you have probably already set up there. Simply change the port
    and IP address accordingly.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在生产环境中设置 JMX 监控，可以使用您可能已经在该环境中设置的配置。只需相应地更改端口和 IP 地址即可。
- en: How to do it…
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To set up JMX monitoring, we are going to add a host to our Zabbix server that
    will monitor our Apache Tomcat installation. But first, we will need to add some
    settings to our `/``etc/zabbix/zabbix_server.conf` file:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 JMX 监控，我们将向 Zabbix 服务器添加一个主机，用来监控我们的 Apache Tomcat 安装。但首先，我们需要在`/etc/zabbix/zabbix_server.conf`文件中添加一些设置：
- en: 'Let’s edit the **zabbix_server.conf** file by logging in to our Zabbix server
    and executing the following command:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过登录到 Zabbix 服务器并执行以下命令来编辑 **zabbix_server.conf** 文件：
- en: '[PRE38]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, we need to add the following lines to this file:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在该文件中添加以下行：
- en: '[PRE39]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Tip
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: It’s possible to install your Java gateway on a host that’s separate from your
    Zabbix. This way, you can spread the load and scale more. Simply install it on
    a separate host and add the IP address of that host to the **JavaGateway** parameter.
    So long as your Zabbix server or proxy can reach the gateway on port **10052**
    over the network, this should work. We won’t be doing this in this example, so
    keep the Java gateway set up on the Zabbix server host itself.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 Java 网关安装在与 Zabbix 分开的主机上。这样，你可以分担负载并进行更多的扩展。只需将其安装在一个单独的主机上，并将该主机的 IP
    地址添加到 **JavaGateway** 参数中。只要你的 Zabbix 服务器或代理能够通过网络在端口 **10052** 上访问网关，应该就能正常工作。在本例中我们不会这样做，因此保持
    Java 网关设置在 Zabbix 服务器主机上。
- en: We will also need to install the **zabbix-java-gateway** application on our
    Zabbix server with the following command.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要在 Zabbix 服务器上安装 **zabbix-java-gateway** 应用程序，使用以下命令：
- en: 'RHEL-based systems:'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于 RHEL 的系统：
- en: '[PRE40]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Ubuntu systems:'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Ubuntu 系统：
- en: '[PRE41]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: That is all we need to do on the server side of things to get JMX monitoring
    to work. Zabbix doesn’t include these settings by default, so we need to add the
    respective text to our file and install the application.
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是我们在服务器端需要做的所有工作，以使 JMX 监控正常运行。Zabbix 默认不包含这些设置，因此我们需要将相应的文本添加到文件中，并安装应用程序。
- en: To start monitoring our JMX host, go to **Data collection** | **Hosts** in your
    Zabbix frontend and click **Create host** in the top-right corner.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始监控我们的 JMX 主机，进入 Zabbix 前端的 **数据收集** | **主机**，然后点击右上角的 **创建主机**。
- en: 'Add a host with the following settings:'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加一个主机，使用以下设置：
- en: '![Figure 3.56 – Zabbix item configuration page](img/B19803_03_56.jpg)'
  id: totrans-458
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.56 – Zabbix 项目配置页面](img/B19803_03_56.jpg)'
- en: Figure 3.56 – Zabbix item configuration page
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.56 – Zabbix 项目配置页面
- en: 'After this, our JMX icon should turn green; let’s check this under **Monitoring**
    | **Hosts**. It should look like this:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们的 JMX 图标应该变成绿色；让我们在 **监控** | **主机** 中检查一下。它应该是这样的：
- en: '![Figure 3.57 – Monitoring | Hosts](img/B19803_03_57.jpg)'
  id: totrans-461
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.57 – 监控 | 主机](img/B19803_03_57.jpg)'
- en: Figure 3.57 – Monitoring | Hosts
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.57 – 监控 | 主机
- en: 'If we click on **Latest data** for our new JMX-monitored host, we should also
    see our incoming data. Check it out; it should return stats like these:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们点击新添加的 JMX 监控主机的 **最新数据**，我们应该也能看到传入的数据。查看一下，它应该返回像这样的统计信息：
- en: "![Figure 3.58 – Zabbix La\uFEFF\uFEFFtest data page](img/B19803_03_58.jpg)"
  id: totrans-464
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.58 – Zabbix 最新数据页面](img/B19803_03_58.jpg)'
- en: Figure 3.58 – Zabbix Latest data page
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.58 – Zabbix 最新数据页面
- en: How it works…
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: 'Zabbix utilizes a Java gateway either hosted on the Zabbix server itself or
    hosted on another server (proxy) to monitor JMX applications:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 利用 Java 网关，Java 网关可以托管在 Zabbix 服务器本身上，或者托管在另一台服务器（代理）上，以监控 JMX 应用程序：
- en: '![Figure 3.59 – Communication diagram between the Zabbix server and Java](img/B19803_03_59.jpg)'
  id: totrans-468
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.59 – Zabbix 服务器与 Java 之间的通信图](img/B19803_03_59.jpg)'
- en: Figure 3.59 – Communication diagram between the Zabbix server and Java
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.59 – Zabbix 服务器与 Java 之间的通信图
- en: Zabbix polls the Java gateway and the Java gateway, in turn, communicates with
    our JMX application, as it does with Tomcat in our example. The data is then returned
    through the same path, at which point we can see our data in our Zabbix server.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 会轮询 Java 网关，而 Java 网关则与我们的 JMX 应用程序进行通信，正如在我们的例子中与 Tomcat 的交互一样。然后，数据通过相同的路径返回，我们可以在
    Zabbix 服务器上看到这些数据。
- en: See also
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'There are loads of applications that can be monitored through Zabbix JMX. Check
    out the Zabbix monitoring and integrations page for more uses of Zabbix JMX monitoring:
    [https://www.zabbix.com/integrations/jmx](https://www.zabbix.com/integrations/jmx).'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多应用程序可以通过 Zabbix JMX 进行监控。请查看 Zabbix 监控和集成页面，了解更多 Zabbix JMX 监控的用途：[https://www.zabbix.com/integrations/jmx](https://www.zabbix.com/integrations/jmx)。
- en: Setting up database monitoring
  id: totrans-473
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据库监控
- en: Databases are a black hole to a lot of engineers; data is being written to them
    and something is being done with this data. But what if you want to know more
    about the health of your database? That’s where Zabbix database monitoring comes
    in – we can use it to monitor the health of our database.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库对许多工程师来说就像一个黑洞；数据被写入其中，并且对这些数据进行某些处理。但如果你想了解更多关于数据库健康状况的信息呢？这就是 Zabbix 数据库监控的用武之地
    —— 我们可以用它来监控数据库的健康状况。
- en: Getting ready
  id: totrans-475
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For convenience, in this recipe, we’ll be monitoring our Zabbix database. This
    means that all we are going to need is our installed Zabbix server with our database
    on it. We’ll be using MariaDB in this example, so if you have a PostgreSQL setup,
    make sure you install a MariaDB instance on a Linux host (although the same kind
    of setup could be created on PostgreSQL if you change some of the ODBC parameters).
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便，在本食谱中，我们将监控 Zabbix 数据库。这意味着我们所需的仅仅是已安装 Zabbix 服务器和其上的数据库。在本示例中，我们将使用 MariaDB，因此，如果你有
    PostgreSQL 设置，请确保在 Linux 主机上安装 MariaDB 实例（虽然如果更改一些 ODBC 参数， PostgreSQL 也可以创建类似的设置）。
- en: How to do it…
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Before getting started with the item configuration, we’ll have to do some stuff
    on the CLI side of the server:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始配置项目之前，我们需要在服务器的 CLI 端做一些准备工作：
- en: Let’s start by installing the required modules on our server.
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从安装服务器上所需的模块开始。
- en: 'RHEL-based systems:'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于 RHEL 的系统：
- en: '[PRE42]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Ubuntu systems:'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Ubuntu 系统：
- en: '[PRE43]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, let’s verify whether our **Open Database Connectivity** (**ODBC**) configuration
    files exist:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们验证我们的 **开放数据库连接**（**ODBC**）配置文件是否存在：
- en: '[PRE44]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Your output should look similar to this:'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的输出应类似于以下内容：
- en: '[PRE45]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If the output is correct, we can go to the Linux CLI and continue by editing
    **odbc.ini** so that we can connect to our database:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输出正确，我们可以进入 Linux CLI，继续编辑 **odbc.ini** 以便连接到我们的数据库：
- en: '[PRE46]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, fill in your Zabbix database information. It will look like this:'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，填写你的 Zabbix 数据库信息。它应该是这样的：
- en: '[PRE47]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let’s also check that our driver exists:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也检查一下我们的驱动程序是否存在：
- en: '[PRE48]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'You should see the driver:'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到驱动程序：
- en: '[PRE49]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, let’s test whether our connection is working as expected by executing
    the following command:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过执行以下命令来测试我们的连接是否按预期工作：
- en: '[PRE50]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now, let’s move to the Zabbix frontend to configure our first database check.
    Navigate to **Data collection** | **Hosts** and click the **lar-book-rocky** host;
    note that it might still be called **Zabbix server**. Now go to **Items**; we
    want to create a new item here by clicking the **Create** **item** button.
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们进入 Zabbix 前端，配置我们的第一个数据库检查。导航到 **数据采集** | **主机**，然后点击 **lar-book-rocky**
    主机；请注意，它可能仍然叫做 **Zabbix server**。接下来，进入 **项目**，我们要通过点击 **创建** **项目** 按钮来创建一个新项目。
- en: Tip
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you haven’t already, a great way to keep Zabbix structured is to keep all
    hostnames in Zabbix equal to the real server hostname. Rename your default **Zabbix
    server** host in the frontend to what you’ve called your server.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这么做，一个保持 Zabbix 结构化的好方法是将 Zabbix 中的所有主机名设置为实际服务器的主机名。将前端中的默认 **Zabbix
    server** 主机重命名为你服务器的名称。
- en: 'We want to add an item with the following parameters:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要添加一个具有以下参数的项目：
- en: '![Figure 3.60 – Zabbix item configuration page, items in Zabbix database](img/B19803_03_60.jpg)'
  id: totrans-502
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.60 – Zabbix 项目配置页面，Zabbix 数据库中的项目](img/B19803_03_60.jpg)'
- en: Figure 3.60 – Zabbix item configuration page, items in Zabbix database
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.60 – Zabbix 项目配置页面，Zabbix 数据库中的项目
- en: 'Make sure you also add a tag to the item:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你也为项目添加一个标签：
- en: '![Figure 3.61 – Zabbix item configuration page, items in Zabbix database, Tags
    tab](img/B19803_03_61.jpg)'
  id: totrans-505
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.61 – Zabbix 项目配置页面，Zabbix 数据库中的项目，标签标签](img/B19803_03_61.jpg)'
- en: Figure 3.61 – Zabbix item configuration page, items in Zabbix database, Tags
    tab
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.61 – Zabbix 项目配置页面，Zabbix 数据库中的项目，标签标签
- en: 'Now, click the **Add** button and click on the name of the host to add the
    macros, as follows:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **添加** 按钮，然后点击主机名称以添加宏，具体如下：
- en: '![Figure 3.62 – Zabbix host macro configuration page](img/B19803_03_62.jpg)'
  id: totrans-508
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.62 – Zabbix 主机宏配置页面](img/B19803_03_62.jpg)'
- en: Figure 3.62 – Zabbix host macro configuration page
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.62 – Zabbix 主机宏配置页面
- en: 'Now, if you go to **Monitoring** | **Hosts** and click on **Latest data** for
    our host, you’ll see the following:'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你进入 **监控** | **主机**，然后点击我们的主机的 **最新数据**，你将看到以下内容：
- en: '![Figure 3.63 – Zabbix Latest data page for lar-book-rocky, items in Zabbix
    database](img/B19803_03_63.jpg)'
  id: totrans-511
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.63 – lar-book-rocky 的 Zabbix 最新数据页面，Zabbix 数据库中的项目](img/B19803_03_63.jpg)'
- en: Figure 3.63 – Zabbix Latest data page for lar-book-rocky, items in Zabbix database
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.63 – lar-book-rocky 的 Zabbix 最新数据页面，Zabbix 数据库中的项目
- en: From here, we can see how many items have been written to the database directly.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以直接看到写入数据库的项目数量。
- en: How it works…
  id: totrans-514
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: 'Zabbix database monitoring works by connecting to your database with the ODBC
    middleware API. Any database supported by ODBC can be queried with Zabbix database
    monitoring:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 数据库监控通过 ODBC 中间件 API 连接到数据库。任何 ODBC 支持的数据库都可以通过 Zabbix 数据库监控进行查询：
- en: '![Figure 3.64 – A diagram showing communication between the Zabbix server and
    ODBC](img/B19803_03_64.jpg)'
  id: totrans-516
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.64 – 显示 Zabbix 服务器与 ODBC 之间通信的示意图](img/B19803_03_64.jpg)'
- en: Figure 3.64 – A diagram showing communication between the Zabbix server and
    ODBC
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.64 – 显示 Zabbix 服务器与 ODBC 之间通信的示意图
- en: 'Your Zabbix server sends a command with, for instance, your MySQL query to
    the ODBC connector. Your ODBC connecter sends this query to the database through
    the ODBC API, which, in turn, returns a value to ODBC. ODBC then forwards the
    value to the Zabbix server and hey presto: we have a value under our item.'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Zabbix 服务器将一个命令（例如，MySQL 查询）发送给 ODBC 连接器。你的 ODBC 连接器通过 ODBC API 将查询发送到数据库，数据库返回值给
    ODBC。然后，ODBC 将该值转发给 Zabbix 服务器，最终：我们在项目下得到了一个值。
- en: There’s more…
  id: totrans-519
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: You can do loads of queries to your databases with Zabbix database monitoring,
    but keep in mind that you are working with actual queries. Querying a database
    takes time and processing power, so keep your database monitoring structured and
    define the right execution times.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Zabbix 数据库监控，你可以对数据库进行大量查询，但请记住，你正在处理实际的查询。查询数据库需要时间和处理能力，因此要确保你的数据库监控结构化，并定义正确的执行时间。
- en: Alternatively, we can use Zabbix Agent 2 to monitor most databases natively.
    This can improve security and performance and keep complexity lower.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用 Zabbix Agent 2 来原生监控大多数数据库。这可以提高安全性和性能，同时保持较低的复杂性。
- en: Setting up HTTP agent monitoring
  id: totrans-522
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 HTTP 代理监控
- en: With the Zabbix HTTP agent, we can monitor a web page or API by retrieving data
    from it. For instance, if there’s a counter on a web page and we want to keep
    an eye on that counter value, we can do so with the Zabbix HTTP monitor.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Zabbix HTTP 代理，我们可以通过从网页或 API 获取数据来监控网页或 API。例如，如果网页上有一个计数器，且我们希望关注该计数器的值，可以使用
    Zabbix HTTP 监控器来实现。
- en: Getting ready
  id: totrans-524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we’re going to need a web page to monitor, as well as our
    Zabbix server. For this lab, we will use Zabbix update v1: [https://services.zabbix.com/updates/v1](https://services.zabbix.com/updates/v1).'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '对于本教程，我们需要一个网页来监控，以及我们的 Zabbix 服务器。为了这个实验，我们将使用 Zabbix 更新 v1: [https://services.zabbix.com/updates/v1](https://services.zabbix.com/updates/v1)。'
- en: Please note that your Zabbix server will need an active internet connection
    for this recipe.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您的 Zabbix 服务器需要一个活跃的互联网连接才能进行此操作。
- en: How to do it…
  id: totrans-527
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s poll the web page from Zabbix so that it shows the latest version of
    Zabbix 7.0 that’s currently available:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Zabbix 拉取网页，以显示当前可用的 Zabbix 7.0 的最新版本：
- en: Navigate to your Zabbix frontend and navigate to **Data collection** | **Hosts**.
    Then, click the **lar-book-agent_simple** host.
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到你的 Zabbix 前端，选择 **数据收集** | **主机**。然后，点击 **lar-book-agent_simple** 主机。
- en: 'Now, go to **Items**; we want to create a new item here by clicking the **Create
    item** button. We are going to need to create an **HTTP agent** item, as shown
    in the following screenshot:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到 **项目**；我们要通过点击 **创建项目** 按钮来创建一个新项目。我们需要创建一个 **HTTP 代理** 项目，如下图所示：
- en: '![Figure 3.65 – Zabbix Item configuration page, visitor count on the oicts.com
    page](img/B19803_03_65.jpg)'
  id: totrans-531
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.65 – Zabbix 项目配置页面，oicts.com 页面上的访问者计数](img/B19803_03_65.jpg)'
- en: Figure 3.65 – Zabbix Item configuration page, visitor count on the oicts.com
    page
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.65 – Zabbix 项目配置页面，oicts.com 页面上的访问者计数
- en: 'Make sure you fill in the query fields as follows:'
  id: totrans-533
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保按照以下方式填写查询字段：
- en: '**type**: **software_update_check**'
  id: totrans-534
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**: **软件更新检查**'
- en: '**version**: **1.0**'
  id: totrans-535
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**: **1.0**'
- en: '**software_update_check_hash**: A randomly generated 64-character string with
    lowercase letters and numbers'
  id: totrans-536
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件更新检查哈希**: 一个随机生成的 64 字符的字符串，包含小写字母和数字'
- en: 'We also need to add a tag to this item:'
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要为该项目添加一个标签：
- en: "![Figure 3.66 – Zabbix Item configuration page, visitor count on the oicts.com\
    \ page, Tags ta\uFEFFb](img/B19803_03_66.jpg)"
  id: totrans-538
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.66 – Zabbix 项目配置页面，oicts.com 页面上的访问者计数，标签选项卡](img/B19803_03_66.jpg)'
- en: Figure 3.66 – Zabbix Item configuration page, visitor count on the oicts.com
    page, Tags tab
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.66 – Zabbix 项目配置页面，oicts.com 页面上的访问者计数，标签选项卡
- en: 'Use the following preprocessing steps:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下预处理步骤：
- en: '![Figure 3.67 – Zabbix Item configuration page, visitor count on the oicts.com
    page, Preprocessing tab](img/B19803_03_67.jpg)'
  id: totrans-541
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.67 – Zabbix 项目配置页面，oicts.com 页面上的访问者计数，预处理选项卡](img/B19803_03_67.jpg)'
- en: Figure 3.67 – Zabbix Item configuration page, visitor count on the oicts.com
    page, Preprocessing tab
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.67 – Zabbix 项目配置页面，oicts.com 页面上的访问者计数，预处理选项卡
- en: 'Now, navigate to **Monitoring** | **Hosts** and open the **Latest data** page
    for our **lar-book-agent_simple** host. If everything is working as it should,
    we should now be requesting the latest Zabbix 7.0 version:'
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到 **监控** | **主机**，并打开我们 **lar-book-agent_simple** 主机的 **最新数据** 页面。如果一切正常，我们现在应该能够请求到最新的
    Zabbix 7.0 版本：
- en: "![Figure 3.68 – Zabbi\uFEFF\uFEFFx Latest data page](img/3.67.jpg)"
  id: totrans-544
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.68 – Zabbix 最新数据页面](img/3.67.jpg)'
- en: Figure 3.68 – Zabbix Latest data page
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.68 – Zabbix 最新数据页面
- en: How it works…
  id: totrans-546
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'Here, we request the complete web page from Zabbix by navigating to the page
    with the HTTP agent and downloading it. Once we have the complete content of the
    page – in this case, an HTML/PHP page – we can process the data:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过 HTTP 代理导航到页面并下载整个网页，来请求 Zabbix 完整的网页内容。一旦我们拥有了页面的完整内容——在这种情况下是一个 HTML/PHP
    页面——我们就可以处理这些数据：
- en: '![Figure 3.69 – Diagram showing Zabbix HTTP agent communication](img/B19803_03_68.jpg)'
  id: totrans-548
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.69 – 显示 Zabbix HTTP 代理通信的图示](img/B19803_03_68.jpg)'
- en: Figure 3.69 – Diagram showing Zabbix HTTP agent communication
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.69 – 显示 Zabbix HTTP 代理通信的图示
- en: We ask our preprocessor to go through the requested code via a JSONPath and
    only show the version for the `latest_release` node.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要求我们的预处理器通过 JSONPath 遍历请求的代码，并只显示 `latest_release` 节点的版本。
- en: All that’s left is the number, ready for us to use in graphs and other types
    of data visualization.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是数字，准备好供我们在图表和其他类型的数据可视化中使用。
- en: Using Zabbix browser items to simulate a web user
  id: totrans-552
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Zabbix 浏览器项模拟网页用户
- en: Zabbix now includes the ability to monitor web pages in a brand-new way. It’s
    now possible to use the new Zabbix **Browser items** functionality to simulate
    the things a browser user would do when navigating your web page. This makes it
    possible to navigate to pages, simulate clicks, get results, and much more.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 现在包括了一种全新的网页监控方式。现在可以使用新的 Zabbix **浏览器项** 功能来模拟浏览器用户在浏览网页时的操作。这使得模拟页面导航、点击、获取结果等变得可能。
- en: Getting ready
  id: totrans-554
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: For this recipe, we will only need our Zabbix server and Zabbix frontend. Keep
    in mind that we will be running Selenium in Docker on our Zabbix server to get
    this new type of monitoring working.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们只需要 Zabbix 服务器和 Zabbix 前端。请记住，我们将在 Zabbix 服务器上通过 Docker 运行 Selenium，以使这种新类型的监控正常工作。
- en: 'We’ll also use some pre-prepared JavaScript that you can find here: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt).'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用一些预先准备好的 JavaScript，你可以在这里找到：[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt)。
- en: How to do it…
  id: totrans-557
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'First, we’ll log in to the CLI of our server and start preparing the environment:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将登录到服务器的 CLI 并开始准备环境：
- en: We’ll use a lightweight Docker container to run Selenium, which will handle
    the browser emulation. Issue the following on the Zabbix server CLI.
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用一个轻量级的 Docker 容器来运行 Selenium，它将处理浏览器仿真。在 Zabbix 服务器的 CLI 中发出以下命令。
- en: 'For RHEL-based systems:'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于 RHEL 的系统：
- en: '[PRE51]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'For Ubuntu systems:'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Ubuntu 系统：
- en: '[PRE52]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Make sure you start Docker as well:'
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你也启动了 Docker：
- en: '[PRE53]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Now, let’s download and run our Docker container:'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们下载并运行我们的 Docker 容器：
- en: '[PRE54]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Next, we must edit the Zabbix server configuration:'
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须编辑 Zabbix 服务器配置：
- en: '[PRE55]'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Two new parameters have been added to the Zabbix server configuration file
    that we can edit. Let’s connect to the container and add some browser pollers:'
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zabbix 服务器配置文件中新增了两个参数，我们可以进行编辑。让我们连接到容器并添加一些浏览器轮询器：
- en: '[PRE56]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Restart your Zabbix server to make the changes take effect:'
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 Zabbix 服务器以使更改生效：
- en: '[PRE57]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: With the Zabbix server side of things done, let’s move on to the Zabbix frontend.
    Navigate to **Data collection** | **Hosts**.
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成 Zabbix 服务器端的设置后，让我们继续进行 Zabbix 前端配置。导航到 **数据采集** | **主机**。
- en: 'Let’s add a new host to monitor our Zabbix frontend website:'
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个新的主机来监控我们的 Zabbix 前端网站：
- en: '![Figure 3.70 – Zabbix website host configuration window](img/B19803_03_69.jpg)'
  id: totrans-576
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.70 – Zabbix 网站主机配置窗口](img/B19803_03_69.jpg)'
- en: Figure 3.70 – Zabbix website host configuration window
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.70 – Zabbix 网站主机配置窗口
- en: Click on the **Add** button at the bottom of the page to add this new host.
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的 **添加** 按钮来添加这个新主机。
- en: Now, let’s add an item to this host. Click **Items** next to the **Zabbix website**
    host, then click on the **Create item** button in the top-right corner.
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个项目到此主机。点击**项目**，在**Zabbix 网站**主机旁边，然后点击右上角的**创建项目**按钮。
- en: 'To create the item, we will need to download a bit of JavaScript from the Packt
    GitHub repo. You can find it here: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt).'
  id: totrans-580
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建项目，我们需要从 Packt GitHub 仓库下载一些 JavaScript。你可以在这里找到它：[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt)。
- en: 'Now, let’s fill in the new item fields. Make sure you place the aforementioned
    script in the **Script** field. The item should now look like this:'
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们填写新项目的字段。确保将前述脚本放入**脚本**字段。项目现在应该像这样：
- en: '![Figure 3.71 – Zabbix website host item configuration window](img/B19803_03_70.jpg)'
  id: totrans-582
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.71 – Zabbix 网站主机项目配置窗口](img/B19803_03_70.jpg)'
- en: Figure 3.71 – Zabbix website host item configuration window
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.71 – Zabbix 网站主机项目配置窗口
- en: 'Make sure you add a tag as well:'
  id: totrans-584
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你也添加一个标签：
- en: '![Figure 3.72 – Zabbix website host item tag configuration window](img/B19803_03_71.jpg)'
  id: totrans-585
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.72 – Zabbix 网站主机项目标签配置窗口](img/B19803_03_71.jpg)'
- en: Figure 3.72 – Zabbix website host item tag configuration window
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.72 – Zabbix 网站主机项目标签配置窗口
- en: Now, save the item by clicking on the **Add** button at the bottom of the window.
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过点击窗口底部的**添加**按钮来保存该项目。
- en: 'Since we’re using macros, make sure you add them to the host. Click on the
    **Zabbix website** hostname. Then, add the following macros:'
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用的是宏，请确保将它们添加到主机中。点击**Zabbix 网站**主机名。然后，添加以下宏：
- en: '![Figure 3.73 – Zabbix website host macros configuration window](img/B19803_03_72.jpg)'
  id: totrans-589
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.73 – Zabbix 网站主机宏配置窗口](img/B19803_03_72.jpg)'
- en: Figure 3.73 – Zabbix website host macros configuration window
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.73 – Zabbix 网站主机宏配置窗口
- en: Make sure you fill in the correct URL. Also, don’t forget to set the password
    macro to the **Secret** **text** type.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 确保填写正确的 URL。同时，不要忘记将密码宏设置为**秘密** **文本**类型。
- en: 'Navigating to **Monitoring** | **Latest data** should now show us the value
    for our new host:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**监控** | **最新数据**，现在应该显示我们的新主机的值：
- en: '![Figure 3.74 – Zabbix website item result](img/B19803_03_73.jpg)'
  id: totrans-593
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.74 – Zabbix 网站项目结果](img/B19803_03_73.jpg)'
- en: Figure 3.74 – Zabbix website item result
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.74 – Zabbix 网站项目结果
- en: As we learned earlier in this chapter, we can extract data from this bulk metric
    item using dependent items. This is what we’ll do next.
  id: totrans-595
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们在本章前面所学，我们可以使用依赖项目从这个批量度量项目中提取数据。这就是我们接下来要做的。
- en: Let’s go back to **Data collection** | **Hosts** and click on **Items** for
    the **Zabbix** **website** host.
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回**数据收集** | **主机**，并点击**Zabbix** **网站**主机的**项目**。
- en: 'Click **Create item** in the top-right corner and create a new item to get
    the total duration:'
  id: totrans-597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**创建项目**，并创建一个新项目来获取总时长：
- en: '![Figure 3.75 – Browser monitoring total duration item](img/B19803_03_74.jpg)'
  id: totrans-598
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.75 – 浏览器监控总时长项目](img/B19803_03_74.jpg)'
- en: Figure 3.75 – Browser monitoring total duration item
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.75 – 浏览器监控总时长项目
- en: 'Click on **Preprocessing** so that we can add preprocessing details as well:'
  id: totrans-600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**预处理**，以便我们可以添加预处理详情：
- en: '![Figure 3.76 – Browser monitoring total duration item preprocessing](img/B19803_03_75.jpg)'
  id: totrans-601
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.76 – 浏览器监控总时长项目预处理](img/B19803_03_75.jpg)'
- en: Figure 3.76 – Browser monitoring total duration item preprocessing
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.76 – 浏览器监控总时长项目预处理
- en: 'Click on **Tags** – we can’t forget to add a tag:'
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**标签** – 我们不能忘记添加标签：
- en: '![Figure 3.77 – Browser monitoring total duration item tag](img/B19803_03_76.jpg)'
  id: totrans-604
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.77 – 浏览器监控总时长项目标签](img/B19803_03_76.jpg)'
- en: Figure 3.77 – Browser monitoring total duration item tag
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.77 – 浏览器监控总时长项目标签
- en: Click **Add** to finish creating the item.
  id: totrans-606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**以完成创建该项目。
- en: 'Now, click **Create item** in the top-right corner again and create a new item
    to get the number of enabled hosts:'
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次点击右上角的**创建项目**，并创建一个新项目来获取启用主机的数量：
- en: '![Figure 3.78 – Browser monitoring enabled hosts item](img/B19803_03_77.jpg)'
  id: totrans-608
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.78 – 启用浏览器监控的主机项目](img/B19803_03_77.jpg)'
- en: Figure 3.78 – Browser monitoring enabled hosts item
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.78 – 启用浏览器监控的主机项目
- en: 'Click on **Preprocessing** and add some preprocessing details:'
  id: totrans-610
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**预处理**并添加一些预处理详情：
- en: '![Figure 3.79 – Browser monitoring enabled hosts item preprocessing](img/B19803_03_78.jpg)'
  id: totrans-611
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.79 – 启用浏览器监控的主机项目预处理](img/B19803_03_78.jpg)'
- en: Figure 3.79 – Browser monitoring enabled hosts item preprocessing
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.79 – 启用浏览器监控的主机项目预处理
- en: 'Click on **Tags** – we can’t forget to add a tag:'
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **标签** – 我们不能忘记添加标签：
- en: '![Figure 3.80 – Browser monitoring enabled hosts item tag](img/B19803_03_79.jpg)'
  id: totrans-614
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.80 – 启用浏览器监控的主机项目标签](img/B19803_03_79.jpg)'
- en: Figure 3.80 – Browser monitoring enabled hosts item tag
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.80 – 启用浏览器监控的主机项目标签
- en: Click **Add** to finish creating the item.
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 来完成项目的创建。
- en: Tip
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Feel free to add more dependent items yourself to get even more statistics from
    the raw JSON that was collected by the master item. Don’t forget to set **History**
    to **Do not store** on the master item once you’ve finished adding dependent items
    to save some disk space.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 随时自己添加更多依赖项，以便从主项收集的原始 JSON 中获得更多统计数据。不要忘记在添加完依赖项后，将 **历史记录** 设置为 **不存储**，以节省一些磁盘空间。
- en: Let’s have a look at how this code works.
  id: totrans-619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看一下这段代码是如何工作的。
- en: How it works…
  id: totrans-620
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: With the new Zabbix browser monitoring, we can use advanced JavaScript in combination
    with Selenium, for example. This gives us the option to do almost anything a normal
    browser user can. This provides us with endless opportunities to monitor what
    our end users are doing.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的 Zabbix 浏览器监控，我们可以将高级 JavaScript 与 Selenium 等结合使用。这让我们可以做几乎任何普通浏览器用户能做的事情。这为我们提供了无限的机会来监控最终用户的行为。
- en: 'Let’s have a look at some of the steps in our JavaScript:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们 JavaScript 中的一些步骤：
- en: '[PRE58]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We start by parsing the parameters that we defined in the Zabbix frontend.
    We don’t want to use just hardcoded usernames and passwords – we want to use other
    values that can be dynamic in this script, such as URLs, which are useful to parse.
    This way, we create flexibility, which can also be useful later when we template
    the item:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从解析在 Zabbix 前端定义的参数开始。我们不想仅仅使用硬编码的用户名和密码——我们希望使用其他可以动态变化的值，比如 URL，这些对于解析非常有用。通过这种方式，我们创造了灵活性，这在稍后创建模板时也非常有用：
- en: '[PRE59]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Then, we have a `browser.findElement` function. We will be using this to find
    the correct field to fill in with the username and password before we click on
    the login button. With this type of monitoring, we are translating JavaScript
    to what looks like what a user could also be doing:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个 `browser.findElement` 函数。我们将使用它来查找正确的字段，以便在点击登录按钮之前填写用户名和密码。通过这种监控方式，我们实际上是在将
    JavaScript 转换为看起来像是用户也可能在做的事情：
- en: '[PRE60]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We also collect some performance statistics so that we can find how quickly
    the login was performed:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还收集了一些性能统计数据，以便找到登录执行的速度：
- en: '[PRE61]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then, we have a few `browser.findElement` functions to navigate to the **Reports**
    | **System information** menu. On this page, we want to find specific rows from
    the table. Something important to note here is that apart from using browser monitoring
    to gather performance data or see if a user’s functionality is still working,
    we can also use it to extract metrics. We’ll come back to this shortly:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有几个 `browser.findElement` 函数，用来导航到 **报告** | **系统信息** 菜单。在这个页面上，我们要从表格中找到特定的行。这里有一点很重要，除了使用浏览器监控来收集性能数据或查看用户功能是否仍然有效外，我们还可以使用它来提取度量数据。我们很快会回到这个话题：
- en: '[PRE62]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We must ensure we log out (it’s best practice to end any session correctly),
    at which point we can do some more error and result-catching. At this point, I
    would love to show you the JSON result, but let’s not cut down any more trees
    than necessary. Open your **Latest data** page and have a look at some of the
    JSON entries:'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须确保正确登出（最佳实践是在结束任何会话时正确退出），此时我们可以进行更多的错误和结果捕获。此时，我本想向你展示 JSON 结果，但我们不想不必要地多砍几棵树。打开你的
    **最新数据** 页面，查看一些 JSON 条目：
- en: '[PRE63]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'We can see the total duration of the whole item execution at the top of the
    JSON result:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 JSON 结果的顶部看到整个项目执行的总时长：
- en: '[PRE64]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'For each step we did, we can see a `mark` value, which will give us more information
    about the action we executed through the browser:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们执行的每一步，我们可以看到一个 `mark` 值，这将提供更多关于我们通过浏览器执行的操作的信息：
- en: '[PRE65]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Last, but not least, at the bottom, we have our extracted Zabbix system report
    values. We gathered all this information through this single browser item monitoring
    type:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，在底部，我们有提取的 Zabbix 系统报告值。我们通过这个单一的浏览器项目监控类型收集了所有这些信息：
- en: '![Figure 3.81 – Zabbix](img/B19803_03_80.jpg)'
  id: totrans-639
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.81 – Zabbix](img/B19803_03_80.jpg)'
- en: Figure 3.81 – Zabbix
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.81 – Zabbix
- en: Using the dependent items we learned about earlier, we can now extract useful
    data from our bulk metric collection, which was done by the browser item type.
    This gives us nice and clean metrics in a single item, which can also easily be
    used in triggers. For example, we can use these triggers to specify whether the
    duration is too long or whether there are fewer hosts enabled now than before.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 利用我们之前学习的依赖项目，我们现在可以从由浏览器项目类型收集的批量度量数据中提取有用数据。这使我们能够在单个项目中获得干净、整洁的度量数据，这些数据也可以轻松用于触发器。例如，我们可以使用这些触发器来指定持续时间是否过长，或者当前启用的主机是否少于之前。
- en: As you can see, this single new item type opens up a world of possibilities
    for us. I can only imagine the Zabbix community finding more and more use cases
    for this and sharing their amazing new templates.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这种单一的新项目类型为我们打开了一个全新的可能性世界。我只能想象 Zabbix 社区会发现越来越多的使用案例，并分享他们令人惊叹的新模板。
- en: Using Zabbix preprocessing to alter item values
  id: totrans-643
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Zabbix 预处理来修改项目值
- en: Preprocessing item values is an important functionality in Zabbix; we can use
    it to create all kinds of checks. We’ve already done some preprocessing in this
    chapter, but let’s take a deeper dive into it and what it does.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理项目值是 Zabbix 中的一个重要功能，我们可以用它来创建各种检查。我们在本章中已经做了一些预处理，但让我们更深入地了解它以及它的作用。
- en: Getting started
  id: totrans-645
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: We are going to need a Zabbix server to create a check for. We will also need
    a passive Zabbix agent on a Linux host to get our values from and preprocess them.
    We can use the agent that’s running on our Zabbix server for this. In my case,
    this is `lar-book-rocky`.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个 Zabbix 服务器来创建检查。我们还需要在 Linux 主机上运行一个被动的 Zabbix 代理来获取并预处理我们的值。我们可以使用在
    Zabbix 服务器上运行的代理来做这件事。在我的例子中，它是 `lar-book-rocky`。
- en: How to do it…
  id: totrans-647
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Let’s start by logging in to our Zabbix frontend and going to **Data collection**
    | **Hosts**.
  id: totrans-649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从登录到 Zabbix 前端并进入 **数据收集** | **主机** 开始。
- en: Click on your Zabbix server host; in my case, it’s called **lar-book-rocky**.
  id: totrans-650
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你的 Zabbix 服务器主机；在我的例子中，它叫做 **lar-book-rocky**。
- en: 'Now, go to **Items** and click on the blue **Create item** button in the top-right
    corner. Let’s create a new item with the following information:'
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到 **项目** 并点击右上角的蓝色 **创建项目** 按钮。让我们创建一个新的项目，信息如下：
- en: '![Figure 3.82 – New item creation screen, Get traffic statistics from CLI](img/B19803_03_81.jpg)'
  id: totrans-652
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.82 – 新项目创建屏幕，从 CLI 获取流量统计信息](img/B19803_03_81.jpg)'
- en: Figure 3.82 – New item creation screen, Get traffic statistics from CLI
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.82 – 新项目创建屏幕，从 CLI 获取流量统计信息
- en: 'Don’t forget to add your tag:'
  id: totrans-654
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 别忘了添加你的标签：
- en: '![Figure 3.83 – New item creation screen, Get traffic statistics from CLI,
    Tags tab](img/B19803_03_82.jpg)'
  id: totrans-655
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.83 – 新项目创建屏幕，从 CLI 获取流量统计信息，标签页](img/B19803_03_82.jpg)'
- en: Figure 3.83 – New item creation screen, Get traffic statistics from CLI, Tags
    tab
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.83 – 新项目创建屏幕，从 CLI 获取流量统计信息，标签页
- en: 'Make sure you change **ens192** to your primary network interface. You can
    find your primary network interface by logging in to the Linux CLI and executing
    the following command:'
  id: totrans-657
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将 **ens192** 更改为你的主网络接口。你可以通过登录到 Linux CLI 并执行以下命令来找到你的主网络接口：
- en: '[PRE66]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Back on the item creation screen, click on the blue **Add** button. This item
    will use the Zabbix agent to execute a remote command on the Linux CLI.
  id: totrans-659
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目创建屏幕上，点击蓝色的**添加**按钮。此项目将使用 Zabbix 代理在 Linux CLI 上执行远程命令。
- en: 'When we navigate to this new item, we’ll see that the item becomes unsupported.
    This is because when we use the **system.run** key, we need to allow it in the
    Zabbix agent configuration:'
  id: totrans-660
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们导航到这个新项目时，我们会看到该项目变成了不支持状态。这是因为当我们使用 **system.run** 键时，需要在 Zabbix 代理配置中允许它：
- en: '![Figure 3.84 – Unsupported item information, Unknown metric system.run](img/B19803_03_83.jpg)'
  id: totrans-661
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.84 – 不支持的项目信息，未知的度量系统.run](img/B19803_03_83.jpg)'
- en: Figure 3.84 – Unsupported item information, Unknown metric system.run
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.84 – 不支持的项目信息，未知的度量系统.run
- en: 'Log in to the Linux CLI of the monitored host and edit the Zabbix agent configuration
    by running the following command:'
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到被监控主机的 Linux CLI，并通过运行以下命令编辑 Zabbix 代理配置：
- en: '[PRE67]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Go to the **Option: AllowKey** line and add **AllowKey=system.run[*]**, as
    shown here:'
  id: totrans-665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '转到 **Option: AllowKey** 行并添加 **AllowKey=system.run[*]**，如图所示：'
- en: '![Figure 3.85 – Zabbix agent configuration file, AllowKey=system.run[*]](img/B19803_03_84.jpg)'
  id: totrans-666
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.85 – Zabbix 代理配置文件，AllowKey=system.run[*]](img/B19803_03_84.jpg)'
- en: Figure 3.85 – Zabbix agent configuration file, AllowKey=system.run[*]
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.85 – Zabbix 代理配置文件，AllowKey=system.run[*]
- en: 'Save the file and restart the Zabbix agent, like so:'
  id: totrans-668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并重启 Zabbix 代理，方法如下：
- en: '[PRE68]'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Back at the Zabbix frontend, the error we noticed in *Step 7* should be gone
    after a few minutes.
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Zabbix 前端，*步骤 7* 中我们注意到的错误应该在几分钟后消失。
- en: Navigate to **Monitoring** | **Latest data** and filter your Zabbix server host,
    **lar-book-rocky**, and the name of the new **Get traffic statistics from** **CLI**
    item.
  id: totrans-671
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**监控** | **最新数据**，并筛选你的 Zabbix 服务器主机，**lar-book-rocky**，以及新**从 CLI 获取流量统计信息**项目的名称。
- en: 'The value should now be pulled from the host. If we click on **History**, we
    can see the full value; it should look as follows:'
  id: totrans-672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，值应该从主机中拉取。如果我们点击**历史**，我们可以看到完整的值，应该如下所示：
- en: '![Figure 3.86 – Zabbix agent system.run command executing ifconfig ens192 results](img/B19803_03_85.jpg)'
  id: totrans-673
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.86 – Zabbix agent system.run 命令执行 ifconfig ens192 结果](img/B19803_03_85.jpg)'
- en: Figure 3.86 – Zabbix agent system.run command executing ifconfig ens192 results
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.86 – Zabbix agent system.run 命令执行 ifconfig ens192 结果
- en: The information we can see here is way too much for just one item, so we need
    to split it up. We’ll use preprocessing to get the number of RX bytes from the
    information.
  id: totrans-675
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里看到的信息太多，无法仅用一个项目显示，所以我们需要将其拆分。我们将使用预处理从信息中获取 RX 字节数。
- en: Go back to **Data collection** | **Hosts** and click on your Zabbix server host.
    Go to **Items** on this host.
  id: totrans-676
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**数据采集** | **主机**，然后点击你的 Zabbix 服务器主机。进入该主机的**项目**。
- en: 'Click on the **Get traffic statistics from CLI** item to edit it. Change its
    name to **Total RX traffic in bytes for ens192** and add **B** to **Units**, where
    **B** stands for **bytes**. It will look like this:'
  id: totrans-677
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**从 CLI 获取流量统计信息**项目进行编辑。将其名称更改为**ens192 的总 RX 流量字节数**，并在**单位**中添加**B**，其中**B**表示**字节**。它将如下所示：
- en: "![Figure 3.87 – Zabbix agent system.run it\uFEFFem](img/B19803_03_86.jpg)"
  id: totrans-678
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.87 – Zabbix agent system.run 项](img/B19803_03_86.jpg)'
- en: Figure 3.87 – Zabbix agent system.run item
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.87 – Zabbix agent system.run 项目
- en: 'Add your tag:'
  id: totrans-680
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加你的标签：
- en: '![Figure 3.88 – New item creation screen, Get traffic statistics from CLI,
    Tags tab](img/B19803_03_87.jpg)'
  id: totrans-681
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.88 – 新项目创建屏幕，获取 CLI 流量统计信息，标签标签](img/B19803_03_87.jpg)'
- en: Figure 3.88 – New item creation screen, Get traffic statistics from CLI, Tags
    tab
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.88 – 新项目创建屏幕，获取 CLI 流量统计信息，标签标签
- en: Now, click on **Preprocessing** and click on the underlined **Add** button.
  id: totrans-683
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**预处理**，然后点击下划线的**添加**按钮。
- en: 'A **Regular expression** (regex) field will be added. We are going to fill
    this so that it matches the total number of bytes for your interface:'
  id: totrans-684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个**正则表达式**（regex）字段将被添加。我们将填写这个字段，以便它匹配你接口的总字节数：
- en: '![Figure 3.89 – Zabbix agent system.run item preprocessing](img/B19803_03_88.jpg)'
  id: totrans-685
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.89 – Zabbix agent system.run 项目预处理](img/B19803_03_88.jpg)'
- en: Figure 3.89 – Zabbix agent system.run item preprocessing
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.89 – Zabbix agent system.run 项目预处理
- en: Make sure you also select the **Discard value** box under **Custom** **on fail**.
  id: totrans-687
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你也选中了**自定义** **失败时丢弃值**框。
- en: 'Now, click on the underlined **Add** button again and use the drop-down menu
    for this new step to select **Discard unchanged**. The result will look like this:'
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次点击下划线的**添加**按钮，并使用此新步骤的下拉菜单选择**丢弃不变值**。结果将如下所示：
- en: '![Figure 3.90 – Zabbix agent system.run item preprocessing](img/B19803_03_89.jpg)'
  id: totrans-689
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.90 – Zabbix agent system.run 项目预处理](img/B19803_03_89.jpg)'
- en: Figure 3.90 – Zabbix agent system.run item preprocessing
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.90 – Zabbix agent system.run 项目预处理
- en: We can now click the blue **Update** button to finish editing this item.
  id: totrans-691
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以点击蓝色的**更新**按钮来完成编辑此项。
- en: Navigate back to **Monitoring** | **Latest data** and filter on your host and
    the new item name, **Total RX traffic in bytes for ens192**. Make sure you use
    your own interface name.
  id: totrans-692
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**监控** | **最新数据**，并筛选你的主机和新项目名称，**ens192 的总 RX 流量字节数**。确保使用你自己的接口名称。
- en: 'We can now see our value coming in. Here, we have an item displaying our total
    RX traffic for our main interface:'
  id: totrans-693
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以看到我们的值进来了。这里，我们有一个项目显示主接口的总 RX 流量：
- en: "![Figure 3.91 – Zabbix Total RX traffic i\uFEFF\uFEFFtem latest data](img/B19803_03_90.jpg)"
  id: totrans-694
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.91 – Zabbix 总 RX 流量项目最新数据](img/B19803_03_90.jpg)'
- en: Figure 3.91 – Zabbix Total RX traffic item latest data
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.91 – Zabbix 总 RX 流量项目最新数据
- en: How it works…
  id: totrans-696
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We did some preprocessing in the *Working with calculated and dependent items*
    recipe to get data from a master item. We also used preprocessing in the *Setting
    up HTTP agent monitoring* recipe to get a specific value from a web page. We didn’t
    go over the preprocessing concepts used in those recipes, though, so let’s go
    over them here.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*处理计算和依赖项项目*食谱中做了一些预处理，以从主项目获取数据。我们还在*设置 HTTP agent 监控*食谱中使用了预处理，从网页中获取特定值。然而，我们并没有在这些食谱中介绍使用的预处理概念，所以我们在这里讲解一下。
- en: 'When working with preprocessing, it’s important to know the basic setup. Let’s
    take a look at the incoming data before we use preprocessing:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行预处理时，了解基本的设置是很重要的。让我们在使用预处理之前，先看看传入的数据：
- en: '![Figure 3.92 – Zabbix agent system.run command executing ifconfig ens192 results](img/B19803_03_85.jpg)'
  id: totrans-699
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.92 – Zabbix 代理 system.run 命令执行 ifconfig ens192 结果](img/B19803_03_85.jpg)'
- en: Figure 3.92 – Zabbix agent system.run command executing ifconfig ens192 results
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.92 – Zabbix 代理 system.run 命令执行 ifconfig ens192 结果
- en: 'This is a lot of information. When we look at how Zabbix items are used, we
    try to put graspable information in a single item. Luckily, we can preprocess
    this item before we store the value in Zabbix. In the following figure, we can
    see the preprocessing steps we added to our item:'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 这是大量的信息。当我们查看 Zabbix 项目的使用方式时，我们尝试将可理解的信息放入一个项目中。幸运的是，我们可以在将值存储到 Zabbix 之前对该项目进行预处理。在下图中，我们可以看到我们为项目添加的预处理步骤：
- en: '![Figure 3.93 – Zabbix agent system.run item preprocessing with two steps](img/B19803_03_92.jpg)'
  id: totrans-702
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.93 – Zabbix 代理 system.run 项目预处理的两个步骤](img/B19803_03_92.jpg)'
- en: Figure 3.93 – Zabbix agent system.run item preprocessing with two steps
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.93 – Zabbix 代理 system.run 项目预处理的两个步骤
- en: Our first step is a regex. This step will make sure we only use the numbers
    we need. We match on the word `RX`, then the word `bytes`, and a sequence of numbers
    after them. This way, we end up with the total number of RX bytes in capture group
    2\. This is why we fill in `\2` in the output field. We also specify **Custom
    on fail**, which will discard any value if the regex doesn’t match.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是正则表达式。此步骤将确保我们仅使用所需的数字。我们匹配单词`RX`，然后是单词`bytes`，以及它们之后的一串数字。这样，我们最终得到的是捕获组
    2 中的 RX 字节总数。这就是为什么我们在输出字段中填入`\2`的原因。我们还指定了**自定义失败处理**，如果正则表达式未匹配，则丢弃任何值。
- en: Our second step is to discard any values that are the same as the value received
    before. Instead of storing duplicate values, we simply discard them and save some
    space in our Zabbix database.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二步是丢弃任何与之前接收到的值相同的值。与其存储重复的值，我们干脆丢弃它们，从而节省了 Zabbix 数据库中的空间。
- en: Tip
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: It’s a lot easier to build a regex when using an online tool such as [https://regex101.com/](https://regex101.com/).
    You can see what number your capture groups will get, and there’s a lot of valuable
    information in the tools as well.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像[https://regex101.com/](https://regex101.com/)这样的在线工具来构建正则表达式要容易得多。你可以看到你的捕获组将获得的数字，并且工具中还有很多有价值的信息。
- en: It’s important to note that steps are executed in the sequence they are defined
    in the frontend. If the first step fails, the item becomes unsupported unless
    **Custom on fail** is set to do something else.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，步骤是按照它们在前端定义的顺序执行的。如果第一步失败，除非**自定义失败处理**设置为执行其他操作，否则该项目将变得不支持。
- en: By adding preprocessing to Zabbix, we open up a whole range of options for our
    items, and we can alter our data in almost any way required. These two steps are
    just the beginning of the options that are available when diving into the world
    of Zabbix preprocessing.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 Zabbix 中添加预处理，我们为我们的项目开启了一系列新的选项，我们几乎可以根据需要以任何方式修改数据。这两个步骤只是深入 Zabbix 预处理世界时可用选项的开始。
- en: See also
  id: totrans-710
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Preprocessing in Zabbix is an important subject, and it’s impossible to cover
    every aspect of it in a single recipe. The two preprocessing steps in this recipe’s
    example are just two of the many options we can use. Check out the official Zabbix
    documentation to see the other options we can use: [https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing](https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing).'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 中的预处理是一个重要的主题，在一个简单的方案中不可能涵盖它的每个方面。本方案中的两个预处理步骤只是我们可以使用的众多选项中的两个。请查看官方
    Zabbix 文档，了解我们可以使用的其他选项：[https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing](https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing)。
