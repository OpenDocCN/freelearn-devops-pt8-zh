- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up Zabbix Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zabbix is built to be flexible and should be able to monitor just about anything
    you could ever require. In this chapter, we will learn more about working with
    Zabbix to build a lot of different options for monitoring. We’ll go over them
    recipe by recipe so that you end up with a solid understanding of how they work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following recipes on the different monitoring types:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Zabbix agent monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with SNMP monitoring the old way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up SNMP monitoring the new way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Zabbix simple checks and the Zabbix trapper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with calculated and dependent items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating external checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up JMX monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up database monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up HTTP agent monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Zabbix browser items to simulate a web user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Zabbix preprocessing to alter item values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will need a Zabbix server capable of performing monitoring, with the following
    requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: A server with Zabbix server installed on a Linux distribution of your choice,
    such as Rocky Linux or Ubuntu. However, a distribution such as Debian, Alma Linux,
    or anything else will suit you just as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A MariaDB (MySQL) server to monitor – for example, the Zabbix server database
    we set up in [*Chapter 1*](B19803_01.xhtml#_idTextAnchor021).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ll be using the same server that we used in the previous chapter, but any
    Zabbix server should do.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Zabbix agent monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from the release of Zabbix 5, Zabbix also officially started support
    for the new Zabbix Agent 2\. Zabbix Agent 2 brings some major improvements and
    is even written in another coding language – Golang instead of C. In this recipe,
    we will explore how to work with Zabbix Agent 2 and explore some of the new features
    introduced by it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with Zabbix Agent 2, all we need to do is install it on a host
    that we want to monitor. Make sure you have an empty **Red Hat Enterprise Linux**
    (**RHEL**)-based or Ubuntu Linux host ready to monitor.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s learn how to install Zabbix Agent 2 and then move on to working with it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Zabbix Agent 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start by installing Zabbix Agent 2 on the Linux host we want to monitor.
    I’ll show you how to do this on both RHEL and Ubuntu systems:'
  prefs: []
  type: TYPE_NORMAL
- en: Issue the following command to add the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, this is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, this is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, issue the following command to install Zabbix Agent 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s the command for RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here’s the command for Ubuntu systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations – Zabbix Agent 2 is now installed and ready to use!
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'When adding new repositories to your system, always check out the Zabbix download
    page. You can find the right up-to-date repository for your system here: [https://www.zabbix.com/download](https://www.zabbix.com/download).'
  prefs: []
  type: TYPE_NORMAL
- en: Using a Zabbix agent in passive mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start by building a Zabbix agent with passive checks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing Zabbix Agent 2, let’s open the Zabbix agent configuration
    file for editing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this file, we can edit all the Zabbix agent configuration values we could
    need from the server side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s start by editing the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the value of **Server** to the IP of the Zabbix server that will monitor
    this passive agent. Change the value for **Hostname** to the hostname of the monitored
    server. We can get the IP address of our server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, restart the Zabbix Agent 2 process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, move to the frontend of your Zabbix server and add this host for monitoring.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Data collection** | **Hosts** in your Zabbix frontend and click **Create
    host** in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create this host in our Zabbix server, we need to fill in the values shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The Zabbix host creation page for lar-book-agent](img/B19803_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – The Zabbix host creation page for lar-book-agent
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s important to add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host name**: To identify the host (has to be unique).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host groups**: To logically group hosts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interfaces**: To monitor this host on a specific interface. No interface
    means no communication. It’s possible to have a host without an interface in Zabbix
    7 if we don’t need it. In the case of a Zabbix-agent-monitored host, an agent
    interface is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure you add the correct IP address to the **Agent** interface configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is also important to add a template to this host. With Zabbix 7, this can
    be done on the same tab. As this is a Linux server monitored by a Zabbix agent,
    let’s add the correct out-of-the-box template, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The Zabbix host template page for lar-book-agent](img/B19803_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – The Zabbix host template page for lar-book-agent
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the blue **Add** button to finish creating this agent host. Now that
    you’ve got this host, make sure the **ZBX** icon turns green, indicating that
    this host is up and being monitored by the passive Zabbix agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – The Zabbix configuration hosts page for lar-book-agent](img/B19803_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – The Zabbix configuration hosts page for lar-book-agent
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we configured our host and added a template with items, we can now
    see the values that were received on items for this host by going to **Monitoring**
    | **Hosts** and checking the **Latest data** button. Please note that the values
    could take around 1 minute to show up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The Zabbix Latest data page for lar-book-agent](img/B19803_03_04.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – The Zabbix Latest data page for lar-book-agent
  prefs: []
  type: TYPE_NORMAL
- en: Using a Zabbix agent in active mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let’s learn how to configure the Zabbix agent with active checks. We need
    to change some values on the monitored Linux server host side:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s edit the following value to change this host to an active agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the value for **ServerActive** to the IP of the Zabbix server that will
    monitor this passive agent. Then, change the value of **Hostname** to your hostname.
    In my case, this is **lar-book-agent**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that if you’re working with multiple Zabbix servers or Zabbix proxies,
    such as when you’re running a Zabbix server in high availability, you need to
    fill in all the Zabbix servers or Zabbix proxies IP addresses when using the **ServerActive**
    parameter. **High availability** (**HA**) nodes are delimited by a semicolon (**;**),
    while different Zabbix environment IPs are delimited by a comma (**,**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, restart the Zabbix Agent 2 process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, move to the frontend of your Zabbix server and add another host with a
    template to do active checks instead of passive ones.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, let’s rename our passive host. To do that, go to **Data collection**
    | **Hosts** in your Zabbix frontend and click the host we just created. Change
    **Host name** as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The Zabbix host configuration page for lar-book-agent_passive](img/B19803_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – The Zabbix host configuration page for lar-book-agent_passive
  prefs: []
  type: TYPE_NORMAL
- en: We are doing this because, for an active Zabbix agent, the hostname in the Zabbix
    agent configuration file needs to match the configuration of our host, as seen
    on the Zabbix frontend. For passive agents, this isn’t the case.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button to save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Data collection** | **Hosts** in your Zabbix frontend and click **Create
    host** in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s create the host, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.6 – The Zabbix host configuration page for lar-book-age\uFEFFnt](img/B19803_03_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – The Zabbix host configuration page for lar-book-agent
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, make sure you add the correct template, named **Linux by Zabbix** **agent
    active**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The Zabbix host template page for lar-book-agent](img/B19803_03_07.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – The Zabbix host template page for lar-book-agent
  prefs: []
  type: TYPE_NORMAL
- en: Please note that as of Zabbix 6.2, the **ZBX** icon should turn green for an
    active agent. Note that when we navigate to **Monitoring** | **Hosts** and check
    **Latest data**, we can see our active data coming in.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: As you might have noticed, a Zabbix agent can run in both passive and active
    mode at the same time. Keep this in mind when creating your own Zabbix agent templates
    as you might want to combine the check types. In the end, the **Item** type will
    determine how the checks are executed toward the agent.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve configured our Zabbix agents and know how they should be set
    up, let’s see how the different modes work.
  prefs: []
  type: TYPE_NORMAL
- en: Passive agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **passive agent** works by collecting data from our host with the Zabbix
    agent. Every time an item on our host reaches its *update interval*, the Zabbix
    server asks the Zabbix agent what the value is now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Communication diagram between the server and the passive agent](img/B19803_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Communication diagram between the server and the passive agent
  prefs: []
  type: TYPE_NORMAL
- en: Passive agents are great when you’re working in environments where you want
    to keep communication initiated from the Zabbix server or Zabbix proxy side. An
    example of this is when there is a firewall that is only allowing outgoing traffic,
    as seen from the Zabbix server or proxy side.
  prefs: []
  type: TYPE_NORMAL
- en: Active agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **active agent** works by sending data from the Zabbix agent to a Zabbix
    server or Zabbix proxy. Every time an item on our agent reaches its update interval,
    the agent will collect the value to send to our server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Communication diagram between the server and the active agent](img/B19803_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Communication diagram between the server and the active agent
  prefs: []
  type: TYPE_NORMAL
- en: The active agent is great when you’re working in an environment where there
    is a firewall that is only accepting outgoing connections, as seen from the Zabbix
    agent side. This is used in a lot of environments as it can mitigate one of the
    main security concerns that is mostly associated with monitoring hosts. Instead
    of allowing the Zabbix server to access all the different subnets (which is a
    bigger risk), we allow the hosts to send data to Zabbix instead – many to one
    instead of one to many.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, having the Zabbix agent working in active mode can also be
    a lot more efficient. Most of the load that comes from getting data to your Zabbix
    server is now on the Zabbix agent side. Because there are more Zabbix agents out
    there than you have Zabbix servers or proxies, offloading a load like this is
    a great idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned previously, we can use both types of checks at the same time,
    giving us the freedom to configure every type of check we need. In this case,
    our setup would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Communication diagram between the server and both agent types](img/B19803_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Communication diagram between the server and both agent types
  prefs: []
  type: TYPE_NORMAL
- en: This might be the case in situations where we want to mainly monitor passively,
    but, for example, log file monitoring with the Zabbix agent must be done with
    an active Zabbix agent. In this case, we can combine our modes and make sure we
    use the full scale of our features provided in the Zabbix agent.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: "There’s a lot of stuff going on under the hood of Zabbix Agent 2\\. If you’re\
    \ interested in learning more about the core of Zabbix Agent 2, check out this\
    \ cool blog post by Alexey Petrov: [https://blog.zabbix.com/magic-of-new-zabbix-agent/8460/](https://blog.zabbix.com/magic-of-new-zab\uFEFF\
    \uFEFFbix-agent/8460/)."
  prefs: []
  type: TYPE_NORMAL
- en: Working with SNMP monitoring the old way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let’s do something I enjoy most when working with Zabbix: build SNMP monitoring.
    My professional roots lie in network engineering, and I have worked with SNMP
    monitoring a lot to monitor all these different network devices.'
  prefs: []
  type: TYPE_NORMAL
- en: Please do keep in mind that although this recipe will cover how to work with
    SNMP monitoring the old way, it is still a valid option. Zabbix 6.4 introduced
    an entirely new way of setting up SNMP monitoring. The new way utilizes bulk metric
    collection and is more efficient for the SNMP device and number of network sessions,
    so it might be a good idea to check out that recipe after this one.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, we need the two Linux hosts we used in the previous recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Our Zabbix server host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The host we used in the previous recipe to monitor via the Zabbix active agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Monitoring via SNMP polling is easy and very powerful. We will start by configuring
    SNMPv3 on our monitored Linux host:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by issuing the following commands to install SNMP on the host we
    would like to be monitored by SNMP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s create the new SNMPv3 user that we will use to monitor our host.
    Please note that we’ll be using insecure passwords, so make sure you use secure
    passwords for your production environments. Issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure you edit the SNMP configuration file so that you can read all SNMP
    objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line to the existing **view systemview** lines. If there
    are none, simply create this new line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, enable and start the **snmpd** daemon so that you can start monitoring
    this server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is all we need to do on the Linux host side; we can now go to the Zabbix
    frontend to configure our host. Go to **Data collection** | **Hosts** in your
    Zabbix frontend and click **Create host** in the top-right corner.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Fill in the host configuration page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Zabbix host configuration page for lar-book-agent_snmp](img/B19803_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Zabbix host configuration page for lar-book-agent_snmp
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to change the IP address of the SNMP interface to your own value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure you add the right out-of-the-box template, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Adding the Linux by SNMP template to the host](img/B19803_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Adding the Linux by SNMP template to the host
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'While upgrading from an earlier Zabbix version to Zabbix 6, you won’t get all
    the new out-of-the-box templates. If you feel like you are missing some templates,
    you can download them from the Zabbix GitHub repository: [https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates](https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates).'
  prefs: []
  type: TYPE_NORMAL
- en: We are using some macros in our configuration here for the username and password.
    We can use these macros to add a bunch of hosts with the same credentials. This
    is very useful, for instance, if you have a bunch of switches with the same SNMPv3
    credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s fill in the macros under **Administration** | **Macros**, like so:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Zabbix global macro page with SNMP macros](img/B19803_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Zabbix global macro page with SNMP macros
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'A cool feature in Zabbix 6 is the ability to hide macros in the frontend by
    using the **Secret text** macro type. Do keep in mind that macros of the **Secret
    text** type are still unencrypted in the Zabbix database, So, for fully encrypted
    macros, we would need something such as HashiCorp or CyberArk Vault. Check out
    the documentation for more information: [https://www.zabbix.com/documentation/current/en/manual/config/secrets](https://www.zabbix.com/documentation/current/en/manual/config/secrets).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the dropdown to change **{$SNMPV3_AUTH}** and **{$SNMPV3_PRIV}** to **Secret
    text**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Zabbix Secret text used to hide sensitive (authentication)
    data](img/B19803_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Zabbix Secret text used to hide sensitive (authentication) data
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, after applying these changes by clicking **Update**, we should be able
    to monitor our Linux server via SNMPv3\. Let’s go to **Monitoring** | **Hosts**
    and check the **Latest data** page for our new host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.15 – SNMP – the Latest data page for lar-book-agent_snmp](img/B19803_03_15.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – SNMP – the Latest data page for lar-book-agent_snmp
  prefs: []
  type: TYPE_NORMAL
- en: Note that it might take around 1 minute for your data to show up here.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with macros, there are three levels in cascading order: global,
    template, and host-level macros. When working with global-level macros, keep in
    mind that they are not exported with templates or hosts. You want to use template-level
    and host-level macros in most cases to keep your exports independent of Zabbix
    global settings.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we create a host, as we did in *Step 4*, Zabbix polls the host using SNMP.
    Polling SNMP like this uses SNMP OIDs. For instance, when we poll the `1.3.6.1.4.1.2021.4.6.0`.
    That value is then returned to us on the Zabbix server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Diagram showing communication between Zabbix server and SNMP
    host](img/B19803_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – Diagram showing communication between Zabbix server and SNMP host
  prefs: []
  type: TYPE_NORMAL
- en: The OID is like the address (or path) of where our metric is located. By requesting
    the OID, the metric is requested.
  prefs: []
  type: TYPE_NORMAL
- en: SNMPv3 adds authentication and encryption to this process, making sure that
    when our Zabbix server requests information, that request is first encrypted and
    the data is sent back encrypted as well.
  prefs: []
  type: TYPE_NORMAL
- en: We also included the option to use **Combined requests** when configuring our
    host. Combined requests request several OIDs in the same stream, making this the
    preferred method of doing SNMP requests as it is more efficient. Only disable
    it for hosts that do not support **Combined requests**. Even better is to use
    an SNMP bulk request, which we will discuss in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, let’s take a look at SNMP OIDs, the most important part of our SNMP
    request. OIDs work in a tree-like structure, meaning that every number behind
    the dot can contain another value. For example, let’s look at this OID for our
    host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we poll that OID with either the SNMPwalk CLI tool or our Zabbix server,
    we will get several OIDs back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This includes our `1.3.6.1.4.1.2021.4.6.0` OID with the value that contains
    our free memory. This is how SNMP is built, like a tree.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SNMP monitoring the new way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SNMP monitoring has had an entire overhaul starting with Zabbix 6.4, introducing
    a new way to build SNMP monitoring. The old way is still available and works,
    but all out-of-the-box monitoring will be overhauled to work with the new way.
  prefs: []
  type: TYPE_NORMAL
- en: The new way will utilize SNMP bulk queries, making it a lot more efficient.
    As such, in this recipe, we will look at how to build SNMP monitoring the new
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, we need the two Linux hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: Our Zabbix server environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any Linux host running the SNMP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s be efficient and start building some bulk SNMP queries. First things
    first, get your hosts ready:'
  prefs: []
  type: TYPE_NORMAL
- en: First, log in to your Zabbix server CLI. We will start by installing some additional
    tools to make building SNMP monitoring easier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, on the Linux host we would like to monitor, we must install the SNMP server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s configure a new SNMPv3 user on the host we want to monitor and set
    up the server so that we can query information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure you edit the SNMP configuration file so that you can read all SNMP
    objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line to the rest of the **view** **systemview** lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, enable and start the **snmpd** daemon so that you can start monitoring
    this server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is all we need to do on the Linux host side; we can now go to the Zabbix
    frontend to configure our host.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to **Data collection** | **Hosts** in your Zabbix frontend and click **Create
    host** in the top-right corner. We will create a new host with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Zabbix host configuration page for lar-book-snmp_bulk](img/B19803_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Zabbix host configuration page for lar-book-snmp_bulk
  prefs: []
  type: TYPE_NORMAL
- en: 'Before adding the host, make sure you click on the small dotted underlined
    **Add** button in the **Interfaces** section and select **SNMP**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Zabbix interface configuration for lar-book-snmp_bulk](img/B19803_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – Zabbix interface configuration for lar-book-snmp_bulk
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you fill in the right IP address and credentials for the host you
    are going to monitor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the **Macros** tab and add the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Zabbix host configuration Macros tab for lar-book-snmp_bulk](img/B19803_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Zabbix host configuration Macros tab for lar-book-snmp_bulk
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also go to **Value mapping** and create the following value map. We’ll
    use this later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Zabbix host configuration Value mapping tab for lar-book-snmp_bulk](img/B19803_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Zabbix host configuration Value mapping tab for lar-book-snmp_bulk
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can click on the big **Add** button at the bottom of the page and the
    host will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we have to start building our SNMP checks. But before we do
    that, we should decide which checks to build. Let’s do a quick SNMP walk from
    the Zabbix server Linux CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This SNMP walk will show us an output similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the SNMP walk with all interface information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see a lot more output now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s go back to the Zabbix frontend by going to **Data collection** | **Hosts**,
    choosing the **lar-book-snmp_bulk** host, and going to **Item**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-right corner, click **Create item** and add the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Zabbix item configuration for ifTable.walk](img/B19803_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – Zabbix item configuration for ifTable.walk
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t forget to switch to the **Tags** tab and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Zabbix item configuration ifTable.walk Tags tab](img/B19803_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – Zabbix item configuration ifTable.walk Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Click on the big **Add** button at the bottom of the window to add this item
    to the host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This item will now collect our SNMP data in bulk. At this point, we can create
    dependent items to get specific values. You should be back on the **Items** page
    for the host, where we can once again click on **Create item**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'My interface was called **ens192**, so let’s get the operational status for
    that interface. Add the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.23 – Zabbix item configuration for ifOperStatus[ens192]](img/B19803_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.23 – Zabbix item configuration for ifOperStatus[ens192]
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t forget to switch to the **Tags** tab and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.24 – Zabbix item configuration ifOperStatus[ens192] Tags tab](img/B19803_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.24 – Zabbix item configuration ifOperStatus[ens192] Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Last, but certainly not least, we will need to go to the **Preprocessing**
    tab. This is where we will decide which value to extract from the bulk. Remember
    the index from *Step 12*? Let’s use it now by adding the OID for the interface
    operational status (**1.3.6.1.2.1.2.2.1.8**) with an index of **2**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.25 – Zabbix item configuration ifOperStatus[ens192] Preprocessing
    tab](img/B19803_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.25 – Zabbix item configuration ifOperStatus[ens192] Preprocessing tab
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the big **Add** button at the bottom of the page and let’s see if
    it all worked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Monitoring** | **Latest data** and find your host – that is, **lar-book-snmp_bulk**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.26 – Zabbix lar-book-snmp_bulk under Monitoring | Latest data](img/B19803_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.26 – Zabbix lar-book-snmp_bulk under Monitoring | Latest data
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we are now collecting the SNMP information in bulk and then
    collecting a single value from the bulk information.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is always recommended to use the **Do not keep history** option on items
    collecting values in bulk. That way, we aren’t storing duplicate values for no
    reason. Once you finish building all your SNMP items, don’t forget to make that
    change.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new SNMP walk might seem like a bit of a headscratcher at first. Why do
    we need this new change? The way the internals work in Zabbix before 6.4 is that
    it will collect each SNMP OID separately. There is a smart mechanism that combines
    requests to make it a bit more efficient, but it was never officially a bulk request
    (even though that’s what the frontend called it).
  prefs: []
  type: TYPE_NORMAL
- en: Now, with the new `walk[]` item key, we are collecting all the SNMP values in
    a single SNMP `GetBulk` request. This makes the entire process a lot more efficient
    and stresses the SNMP devices a lot less.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s also a new addition in Zabbix 7.0 that is for the following three pollers:'
  prefs: []
  type: TYPE_NORMAL
- en: Agent poller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP agent poller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SNMP poller (for **walk[OID]** and **get[OID]** items)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These processes now execute checks asynchronously. What this means for our SNMP
    checks using `walk[]` or `get[]` is that they can execute multiple (item) checks
    at the same time. In older versions of Zabbix, these pollers could only execute
    a single check at a time.
  prefs: []
  type: TYPE_NORMAL
- en: It’s still possible to add multiple of these processes with **StartSNMPPollers**,
    for example, but it now functions differently. They will execute a maximum of
    1,000 checks per poller, something that can be configured with the **MaxConcurrentChecksPerPoller**
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what did we use? Well, we started with a simple request, which was to get
    all of the values under the SNMP interface’s OID – that is, `.1.3.6.1.2.1.2.2.1`.
    This contains all the information for our SNMP interfaces, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – Zabbix lar-book-snmp_bulk raw SNMP walk on Monitoring | Latest
    data](img/B19803_03_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.27 – Zabbix lar-book-snmp_bulk raw SNMP walk on Monitoring | Latest
    data
  prefs: []
  type: TYPE_NORMAL
- en: 'After, we extracted a single value from the bulk we collected with a preprocessing
    step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – Zabbix lar-book-snmp_bulk SNMP walk value preprocessing](img/B19803_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.28 – Zabbix lar-book-snmp_bulk SNMP walk value preprocessing
  prefs: []
  type: TYPE_NORMAL
- en: We can do this to extract any OID from the already completed SNMP walk manually.
    This is super useful if you have a lot of information from an SNMP walk item but
    you only need a few static values from the walk.
  prefs: []
  type: TYPE_NORMAL
- en: This becomes extra apparent once we collect big pieces of information and start
    using LLD rules to automate the task later, as well as when we still need to get
    some specific values, something that might not be an option for LLD. All that
    information can be collected in a single call to the SNMP device and then split
    into LLD rules, as well as separate items.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll continue working with this kind of new monitoring in [*Chapter 7*](B19803_07.xhtml#_idTextAnchor1318),
    *Using Discovery for Automatic Creation*, in the *Setting up Zabbix SNMP low-level
    discovery the new* *way* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Zabbix simple checks and the Zabbix trapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will go over two checks that can help you build some more
    customized setups. Zabbix simple checks provide you with an easy way to monitor
    some specific data, while the Zabbix trapper combines with the Zabbix sender to
    get data from your hosts into the server, providing you with some scripting options.
    Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create these checks, we will need a Zabbix server and a Linux host to monitor.
    We can use the host with a Zabbix agent and SNMP monitoring from the previous
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we do not need the Zabbix agent for these checks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the name suggests, working with simple checks is quite simple. So, let’s
    get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating simple checks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will create a simple check to monitor whether a service is running and accepting
    TCP connections on a certain port:'
  prefs: []
  type: TYPE_NORMAL
- en: To get this done, we will need to create a new host on the Zabbix frontend.
    Go to **Data collection** | **Hosts** in your Zabbix frontend and click **Create
    host** in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a host with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.29 – Zabbix host configuration page for lar-book-agent_simple](img/B19803_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.29 – Zabbix host configuration page for lar-book-agent_simple
  prefs: []
  type: TYPE_NORMAL
- en: Now, go to **Data collection** | **Hosts** and go to **Items** for the newly
    created host. We want to create a new item here by clicking the **Create** **item**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We must create a new item with the following values. After doing so, click
    the **Add** button at the bottom of the page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.30 – The Zabbix item configuration page for the port 22 check on
    the lar-book-agent_simple host](img/B19803_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.30 – The Zabbix item configuration page for the port 22 check on the
    lar-book-agent_simple host
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you also add a tag to the item since we need this in several
    places to filter and find our item when we’re working with Zabbix. Set it up like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.31 – Zabbix SSH port item, Tag tab](img/B19803_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.31 – Zabbix SSH port item, Tag tab
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We are adding the **net.tcp.services[ssh,,22]** item key here. The port in this
    case is optional as we can specify the service SSH with a different port if we
    want to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we should be able to see whether our server is accepting SSH connections
    on port **22** on our **Latest data** screen. Navigate to **Monitoring** | **Hosts**
    and check the **Latest data** screen for our new value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.32 – Zabbix Latest data page for lar-book-agent_simple, item port
    22 check](img/B19803_03_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.32 – Zabbix Latest data page for lar-book-agent_simple, item port 22
    check
  prefs: []
  type: TYPE_NORMAL
- en: There is one more thing wrong here. As you can see, we do not currently have
    a value mapping setup. Here, **Last value** is just displaying **1** or **0**,
    making it hard to distinguish what this means. To change this, navigate back to
    **Data collection** | **Hosts** and edit the **lar-book-agent_simple** host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Value mapping** tab and click the small **Add** button to add
    a value mapping, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.33 – lar-book-agent_simple, Value mapping window](img/B19803_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.33 – lar-book-agent_simple, Value mapping window
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Add** button and click on the blue **Update** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, back at the full **Data collection** | **Hosts** list, navigate to our
    **lar-book-agent_simple** host and click on **Items** for this host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the **Check if port 22 is available** item and add the following value
    mapping:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.34 – lar-book-agent_simple, edit item window](img/B19803_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.34 – lar-book-agent_simple, edit item window
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s all there is to creating simple checks in Zabbix. The latest data page
    will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.35 – Latest data page for our port 22 check item](img/B19803_03_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.35 – Latest data page for our port 22 check item
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there is a human-readable value now displaying either **Up**
    or **Down**, giving us a human-readable entry that’s easier to understand. Now,
    let’s look at the Zabbix trapper item.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a trapper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can do some cool stuff with Zabbix trapper items once we get more advanced
    setups. But for now, let’s create an item on our `lar-book-agent_simple` host:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Data collection** | **Hosts** and click on the host, then go to **Items**.
    We want to create a new item here by clicking the **Create** **item** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, let’s create the following item and click the **Add** button:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.36 – Zabbix item trap receiver configuration screen for lar-book-agent_simple](img/B19803_03_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.36 – Zabbix item trap receiver configuration screen for lar-book-agent_simple
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you also navigate to the **Tags** tab and add a tag. We will use
    this later for filtering:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.37 – Zabbix item trap receiver tag configuration screen for lar-book-agent_simple](img/B19803_03_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.37 – Zabbix item trap receiver tag configuration screen for lar-book-agent_simple
  prefs: []
  type: TYPE_NORMAL
- en: If we go to the CLI of our monitored server, we can install Zabbix sender.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command for RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command for Ubuntu systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After installation, we can use Zabbix sender to send some information to our
    server (make sure you use your Zabbix server IP when using the **-****z** option):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we should be able to see whether our monitored host has sent out the Zabbix
    trap and the Zabbix server has received this trap for processing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to **Monitoring** | **Hosts** and check the **Latest data** screen
    for our new value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.38 – Zabbix Latest data page for lar-book-agent_simple, item trap
    receiver](img/B19803_03_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.38 – Zabbix Latest data page for lar-book-agent_simple, item trap receiver
  prefs: []
  type: TYPE_NORMAL
- en: There it is – our Zabbix trap is in our Zabbix frontend.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have built our new items, let’s see how they work by diving into
    the theoretical side of Zabbix simple checks and trappers.
  prefs: []
  type: TYPE_NORMAL
- en: Simple checks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Zabbix simple checks are a list of built-in checks that are made for monitoring
    certain values. There is a list and descriptions available for all the simple
    checks that are available in the Zabbix documentation: [https://www.zabbix.com/documentation/current/manual/config/items/itemtypes/simple_checks](https://www.zabbix.com/documentation/current/manual/config/items/itemtypes/simple_checks).'
  prefs: []
  type: TYPE_NORMAL
- en: All of these checks are performed by the Zabbix server to collect data from
    a monitored host. For example, when we do the Zabbix simple check to check whether
    a port is open, our Zabbix server requests whether it can reach that port and
    turns that into a status we can then see in our Zabbix frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that if your monitored host’s firewall is blocking port `22` from
    the Zabbix server, we’ll get a service *down* value. However, this doesn’t necessarily
    mean that SSH isn’t running on the server; it simply means SSH is down as seen
    from the side of the Zabbix server or proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.39 – Zabbix server-to-host communication diagram](img/B19803_03_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.39 – Zabbix server-to-host communication diagram
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that working with simple checks is dependent on external factors
    such as the firewall settings on the monitored host. When you build simple checks,
    make sure to check these factors as well.
  prefs: []
  type: TYPE_NORMAL
- en: There’s one more thing to note here. In Zabbix 6.4, the ability to add simple
    checks without an interface on the host was added. This means you can simply add
    the item with the connection details as parameters in the item key instead of
    selecting an interface.
  prefs: []
  type: TYPE_NORMAL
- en: Trappers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When working with Zabbix sender, we are doing exactly the opposite of most
    checks – we are building an item on our Zabbix server, which allows us to capture
    trap items. This allows us to build some custom checks so that we can send data
    to our Zabbix server from a monitored host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.40 – Zabbix server trap receiver diagram](img/B19803_03_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.40 – Zabbix server trap receiver diagram
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say, for instance, that we want to build a custom Python script that,
    at the end of running the scripts, sends output to the Zabbix server. We could
    ask Python to send this data using the Zabbix sender utility, at which point we’d
    have this data available for processing on the Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: This process is used by some companies who write software to completely integrate
    their software into Zabbix. As you can see, we can greatly extend our options
    with Zabbix trappers and customize our Zabbix server even further. Amazingly,
    this also works with low-level discovery, so long as we send the correct data
    formats (JSON).
  prefs: []
  type: TYPE_NORMAL
- en: Working with calculated and dependent items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Calculated and dependent items are used in Zabbix to produce additional values
    from existing values. Sometimes, we have already collected a value and we need
    to do more with the values created by that item. We can do exactly that by using
    calculated and dependent items.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To work with calculated items and dependent items, we are going to need the
    Zabbix server and monitored hosts from the previous recipes. We will add the items
    to the `lar-book-agent_passive` host and our Zabbix server (or any MySQL server)
    host so that we already have some items available to calculate and make dependent.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see how we can extend our items. We’ll start by looking at calculated
    items.
  prefs: []
  type: TYPE_NORMAL
- en: Working with calculated items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s navigate to our host configuration by going to **Data collection** |
    **Hosts** and clicking on our **lar-book-agent_passive** host’s **Items** area.
    In the **Name** filter field, enter **memory**; you will get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.41 – Zabbix item page for lar-book-agent_passive](img/B19803_03_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.41 – Zabbix item page for lar-book-agent_passive
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can create a calculated item that is going to show us the average memory
    utilization over 15 minutes. We can use this value to determine how busy our host
    was during that period, without having to look at the graphs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s click the **Create item** button and start creating our new calculated
    item. We want our item to have the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.42 – Zabbix item configuration page, average memory used](img/B19803_03_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.42 – Zabbix item configuration page, average memory used
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you also navigate to the **Tags** tab and add a tag that we will
    use later for filtering:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.43 – Calculated item Tags tab](img/B19803_03_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.43 – Calculated item Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we go to check our **Monitoring** | **Hosts** page and select **Latest
    data**, we can check out our value. Make sure you filter the **Name** field for
    **memory** so that you see the correct values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.44 – Zabbix Latest data page for lar-book-agent_passive, memory
    items](img/B19803_03_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.44 – Zabbix Latest data page for lar-book-agent_passive, memory items
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, we are calculating the 15-minute average of the memory utilization
    on our newly created item.
  prefs: []
  type: TYPE_NORMAL
- en: Working with dependent items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s time to make our first dependent item. I’ll use the `lar-book-rocky` host
    or our (as it’s called by default) **Zabbix server** host, but any MySQL database
    server should work. Let’s say we want to request some variables from our MySQL
    database in one big batch. In this case, we can create dependent items on top
    of the first item to further process the data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating the main check. Navigate to **Data collection** | **Hosts**,
    select our host, and click the **Create item** button to start creating our first
    new item. We want an item with the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.45 – Zabbix item configuration page, database sta\uFEFFtus](img/B19803_03_45.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.45 – Zabbix item configuration page, database status
  prefs: []
  type: TYPE_NORMAL
- en: This item is an SSH check that logs in to our Zabbix server host using SSH and
    then executes the code that was entered in the **Executed script** field. This
    code will then log in to our MariaDB database and will print its status. Make
    sure you enter your credentials correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using plaintext credentials in the MySQL command, which is not recommended,
    use macros in the **Executed script** field. This way, you can use the **Secret
    text** macro type to make sure no one can read your password from the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before saving this new item, make sure you also add a tag, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.46 – Zabbix master item configuration page, Tags tab](img/B19803_03_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.46 – Zabbix master item configuration page, Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the blue **Add** button to save this new item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the list of items and click on this host’s hostname, then **Macros**.
    Create a new **{$USERNAME}** and **{$PASSWORD}** macro with your SSH username
    and password under **Value**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go to **Monitoring** | **Latest data** and check out the data for our
    new check. There should be a long list of MariaDB values. If so, we can continue
    creating the dependent item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create the dependent item, navigate to **Data collection** | **Hosts**,
    select our host, and click the **Create item** button. We want this item to have
    the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.47 – Zabbix item configuration page, MariaDB aborted clients](img/B19803_03_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.47 – Zabbix item configuration page, MariaDB aborted clients
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you add the following tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.48 – Zabbix dependent item configuration page, Tags tab](img/B19803_03_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.48 – Zabbix dependent item configuration page, Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s very important to add preprocessing to this item; otherwise, we will simply
    get the same data as our master item. So, let’s add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.49 – Zabbix item Preprocessing page, MariaDB aborted clients](img/B19803_03_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.49 – Zabbix item Preprocessing page, MariaDB aborted clients
  prefs: []
  type: TYPE_NORMAL
- en: 'With the preprocessing added, the result will be the number of aborted clients
    for our MariaDB instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.50 – Zabbix Latest data page, MariaDB aborted clients](img/B19803_03_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.50 – Zabbix Latest data page, MariaDB aborted clients
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, using a dependent item, we can use already available information
    from other Zabbix items and split them up into dependent items.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The calculated and dependent items we worked with in the *How to do it…* section
    can be quite complicated, so let’s go over how they work.
  prefs: []
  type: TYPE_NORMAL
- en: Calculated items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Working with calculated items can be a great way to get even more statistics
    out of your existing data. Sometimes, you just need to combine multiple items
    into one specific value.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we did just now works by taking several values of one item every 15 minutes
    and calculating the average, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.51 – Zabbix dependent item diagram](img/B19803_03_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.51 – Zabbix dependent item diagram
  prefs: []
  type: TYPE_NORMAL
- en: We’re taking those values and calculating the average every 15 minutes. It gives
    us a nice indication of what we are doing over a set period.
  prefs: []
  type: TYPE_NORMAL
- en: Dependent items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Dependent items work by taking the data from a master item and processing that
    data into other data. This way, we can structure our data and keep our check interval
    for all these items the same since the dependent items will receive their data
    on the update interval as the master item. That means that dependent items don’t
    have (and don’t need) an update interval:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.52 – Dependent item diagram](img/B19803_03_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.52 – Dependent item diagram
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, dependent items work as duplicators, on which we use preprocessing
    options to get specific values. Note that preprocessing must be used to extract
    data from the master items since without preprocessing, our data will be the same
    as it is for the master item.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Often, we don’t require our master item to be saved in our database since we
    already have the information in our dependent items. When we don’t want the master
    item to be saved, we can simply select the **Do not keep history** option on that
    master item. This will save us some storage space.
  prefs: []
  type: TYPE_NORMAL
- en: Creating external checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To further extend our Zabbix functionality, we can use custom scripts that can
    be executed as Zabbix external checks. Not everything that we want to monitor
    will always be standard in Zabbix, although a lot is. There’s always something
    that could be missing, and external checks are just a way to bypass some of these.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we are going to need just our Zabbix server. We can create an
    item on our `lar-book-rocky` host, which is our Zabbix server-monitored host.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s make sure our Zabbix server configuration is set up correctly.
    Execute the following on the Zabbix server CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should show us the path where we will place the script that’s used by
    the Zabbix external check. By default, this is **/usr/lib/zabbix/ externalscripts/**.
    Let’s create a new script called **test_external** in this folder with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to this file and save it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure our Zabbix server can execute the script by adding the right permissions
    to the file. The **zabbix** user on your Linux server needs to be able to access
    and execute the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we are ready to go to our host to create a new item. Navigate to **Data
    collection** | **Hosts**, select our host, **lar-book-rocky**, and click the **Create
    item** button. We want this item to be created as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.53 – Zabbix item configuration page](img/B19803_03_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.53 – Zabbix item configuration page
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’ve added this new item, let’s navigate to **Monitoring** | **Hosts**
    and check the **Latest data** page for our host. Our **Test** variable should
    be returned by our script as **Last value** in Zabbix, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.54 – Zabbix Latest data page](img/B19803_03_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.54 – Zabbix Latest data page
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Use the macros in the frontend as variables to send data from your frontend
    to your scripts. You can further automate your checks with this to enhance your
    external checks.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'External checks seem like they have a steep learning curve, but they are quite
    simple from the Zabbix side. All we do is execute an external script, at which
    point we will receive the standard result output (`STDOUT`) and error (`STDERR`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.55 – Zabbix server external script communication diagram](img/B19803_03_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.55 – Zabbix server external script communication diagram
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we sent a value of `Test` to our script, which the script then
    echoed back to us as `$1`.
  prefs: []
  type: TYPE_NORMAL
- en: When you have good knowledge of a programming language such as Python, you can
    use this function to build a lot more expansions on top of the current existing
    Zabbix feature set – a simple yet powerful tool to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up JMX monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zabbix has JMX monitoring built into it so that we can monitor our Java applications.
    In this recipe, we’ll learn how to monitor Apache Tomcat with Zabbix JMX so that
    we can get a feel for what this monitoring option is all about.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get ready for this recipe, we are going to need our Zabbix server so that
    we can monitor our JMX application.
  prefs: []
  type: TYPE_NORMAL
- en: 'I used a CentOS 7 machine for this recipe, with Tomcat installed. It can be
    quite tricky to use Tomcat on later CentOS versions due to package dependencies,
    so I recommend sticking with CentOS 7 for this example. You can add the following
    to your Tomcat configuration after installing it to get it working for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: If you want to set up JMX monitoring in your production environment, you can
    use the settings you have probably already set up there. Simply change the port
    and IP address accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up JMX monitoring, we are going to add a host to our Zabbix server that
    will monitor our Apache Tomcat installation. But first, we will need to add some
    settings to our `/``etc/zabbix/zabbix_server.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s edit the **zabbix_server.conf** file by logging in to our Zabbix server
    and executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to add the following lines to this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It’s possible to install your Java gateway on a host that’s separate from your
    Zabbix. This way, you can spread the load and scale more. Simply install it on
    a separate host and add the IP address of that host to the **JavaGateway** parameter.
    So long as your Zabbix server or proxy can reach the gateway on port **10052**
    over the network, this should work. We won’t be doing this in this example, so
    keep the Java gateway set up on the Zabbix server host itself.
  prefs: []
  type: TYPE_NORMAL
- en: We will also need to install the **zabbix-java-gateway** application on our
    Zabbix server with the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ubuntu systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That is all we need to do on the server side of things to get JMX monitoring
    to work. Zabbix doesn’t include these settings by default, so we need to add the
    respective text to our file and install the application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To start monitoring our JMX host, go to **Data collection** | **Hosts** in your
    Zabbix frontend and click **Create host** in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a host with the following settings:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.56 – Zabbix item configuration page](img/B19803_03_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.56 – Zabbix item configuration page
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, our JMX icon should turn green; let’s check this under **Monitoring**
    | **Hosts**. It should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.57 – Monitoring | Hosts](img/B19803_03_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.57 – Monitoring | Hosts
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on **Latest data** for our new JMX-monitored host, we should also
    see our incoming data. Check it out; it should return stats like these:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.58 – Zabbix La\uFEFF\uFEFFtest data page](img/B19803_03_58.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.58 – Zabbix Latest data page
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Zabbix utilizes a Java gateway either hosted on the Zabbix server itself or
    hosted on another server (proxy) to monitor JMX applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.59 – Communication diagram between the Zabbix server and Java](img/B19803_03_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.59 – Communication diagram between the Zabbix server and Java
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix polls the Java gateway and the Java gateway, in turn, communicates with
    our JMX application, as it does with Tomcat in our example. The data is then returned
    through the same path, at which point we can see our data in our Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are loads of applications that can be monitored through Zabbix JMX. Check
    out the Zabbix monitoring and integrations page for more uses of Zabbix JMX monitoring:
    [https://www.zabbix.com/integrations/jmx](https://www.zabbix.com/integrations/jmx).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up database monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Databases are a black hole to a lot of engineers; data is being written to them
    and something is being done with this data. But what if you want to know more
    about the health of your database? That’s where Zabbix database monitoring comes
    in – we can use it to monitor the health of our database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For convenience, in this recipe, we’ll be monitoring our Zabbix database. This
    means that all we are going to need is our installed Zabbix server with our database
    on it. We’ll be using MariaDB in this example, so if you have a PostgreSQL setup,
    make sure you install a MariaDB instance on a Linux host (although the same kind
    of setup could be created on PostgreSQL if you change some of the ODBC parameters).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before getting started with the item configuration, we’ll have to do some stuff
    on the CLI side of the server:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by installing the required modules on our server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ubuntu systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s verify whether our **Open Database Connectivity** (**ODBC**) configuration
    files exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your output should look similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the output is correct, we can go to the Linux CLI and continue by editing
    **odbc.ini** so that we can connect to our database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, fill in your Zabbix database information. It will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s also check that our driver exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the driver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s test whether our connection is working as expected by executing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let’s move to the Zabbix frontend to configure our first database check.
    Navigate to **Data collection** | **Hosts** and click the **lar-book-rocky** host;
    note that it might still be called **Zabbix server**. Now go to **Items**; we
    want to create a new item here by clicking the **Create** **item** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t already, a great way to keep Zabbix structured is to keep all
    hostnames in Zabbix equal to the real server hostname. Rename your default **Zabbix
    server** host in the frontend to what you’ve called your server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to add an item with the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.60 – Zabbix item configuration page, items in Zabbix database](img/B19803_03_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.60 – Zabbix item configuration page, items in Zabbix database
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you also add a tag to the item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.61 – Zabbix item configuration page, items in Zabbix database, Tags
    tab](img/B19803_03_61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.61 – Zabbix item configuration page, items in Zabbix database, Tags
    tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click the **Add** button and click on the name of the host to add the
    macros, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.62 – Zabbix host macro configuration page](img/B19803_03_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.62 – Zabbix host macro configuration page
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you go to **Monitoring** | **Hosts** and click on **Latest data** for
    our host, you’ll see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.63 – Zabbix Latest data page for lar-book-rocky, items in Zabbix
    database](img/B19803_03_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.63 – Zabbix Latest data page for lar-book-rocky, items in Zabbix database
  prefs: []
  type: TYPE_NORMAL
- en: From here, we can see how many items have been written to the database directly.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Zabbix database monitoring works by connecting to your database with the ODBC
    middleware API. Any database supported by ODBC can be queried with Zabbix database
    monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.64 – A diagram showing communication between the Zabbix server and
    ODBC](img/B19803_03_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.64 – A diagram showing communication between the Zabbix server and
    ODBC
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Zabbix server sends a command with, for instance, your MySQL query to
    the ODBC connector. Your ODBC connecter sends this query to the database through
    the ODBC API, which, in turn, returns a value to ODBC. ODBC then forwards the
    value to the Zabbix server and hey presto: we have a value under our item.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can do loads of queries to your databases with Zabbix database monitoring,
    but keep in mind that you are working with actual queries. Querying a database
    takes time and processing power, so keep your database monitoring structured and
    define the right execution times.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can use Zabbix Agent 2 to monitor most databases natively.
    This can improve security and performance and keep complexity lower.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up HTTP agent monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Zabbix HTTP agent, we can monitor a web page or API by retrieving data
    from it. For instance, if there’s a counter on a web page and we want to keep
    an eye on that counter value, we can do so with the Zabbix HTTP monitor.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we’re going to need a web page to monitor, as well as our
    Zabbix server. For this lab, we will use Zabbix update v1: [https://services.zabbix.com/updates/v1](https://services.zabbix.com/updates/v1).'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that your Zabbix server will need an active internet connection
    for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s poll the web page from Zabbix so that it shows the latest version of
    Zabbix 7.0 that’s currently available:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your Zabbix frontend and navigate to **Data collection** | **Hosts**.
    Then, click the **lar-book-agent_simple** host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to **Items**; we want to create a new item here by clicking the **Create
    item** button. We are going to need to create an **HTTP agent** item, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.65 – Zabbix Item configuration page, visitor count on the oicts.com
    page](img/B19803_03_65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.65 – Zabbix Item configuration page, visitor count on the oicts.com
    page
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you fill in the query fields as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**type**: **software_update_check**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**version**: **1.0**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**software_update_check_hash**: A randomly generated 64-character string with
    lowercase letters and numbers'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also need to add a tag to this item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.66 – Zabbix Item configuration page, visitor count on the oicts.com\
    \ page, Tags ta\uFEFFb](img/B19803_03_66.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.66 – Zabbix Item configuration page, visitor count on the oicts.com
    page, Tags tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following preprocessing steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.67 – Zabbix Item configuration page, visitor count on the oicts.com
    page, Preprocessing tab](img/B19803_03_67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.67 – Zabbix Item configuration page, visitor count on the oicts.com
    page, Preprocessing tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, navigate to **Monitoring** | **Hosts** and open the **Latest data** page
    for our **lar-book-agent_simple** host. If everything is working as it should,
    we should now be requesting the latest Zabbix 7.0 version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.68 – Zabbi\uFEFF\uFEFFx Latest data page](img/3.67.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.68 – Zabbix Latest data page
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we request the complete web page from Zabbix by navigating to the page
    with the HTTP agent and downloading it. Once we have the complete content of the
    page – in this case, an HTML/PHP page – we can process the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.69 – Diagram showing Zabbix HTTP agent communication](img/B19803_03_68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.69 – Diagram showing Zabbix HTTP agent communication
  prefs: []
  type: TYPE_NORMAL
- en: We ask our preprocessor to go through the requested code via a JSONPath and
    only show the version for the `latest_release` node.
  prefs: []
  type: TYPE_NORMAL
- en: All that’s left is the number, ready for us to use in graphs and other types
    of data visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Using Zabbix browser items to simulate a web user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zabbix now includes the ability to monitor web pages in a brand-new way. It’s
    now possible to use the new Zabbix **Browser items** functionality to simulate
    the things a browser user would do when navigating your web page. This makes it
    possible to navigate to pages, simulate clicks, get results, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will only need our Zabbix server and Zabbix frontend. Keep
    in mind that we will be running Selenium in Docker on our Zabbix server to get
    this new type of monitoring working.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also use some pre-prepared JavaScript that you can find here: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we’ll log in to the CLI of our server and start preparing the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use a lightweight Docker container to run Selenium, which will handle
    the browser emulation. Issue the following on the Zabbix server CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure you start Docker as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s download and run our Docker container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we must edit the Zabbix server configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Two new parameters have been added to the Zabbix server configuration file
    that we can edit. Let’s connect to the container and add some browser pollers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart your Zabbix server to make the changes take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the Zabbix server side of things done, let’s move on to the Zabbix frontend.
    Navigate to **Data collection** | **Hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s add a new host to monitor our Zabbix frontend website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.70 – Zabbix website host configuration window](img/B19803_03_69.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.70 – Zabbix website host configuration window
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add** button at the bottom of the page to add this new host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s add an item to this host. Click **Items** next to the **Zabbix website**
    host, then click on the **Create item** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create the item, we will need to download a bit of JavaScript from the Packt
    GitHub repo. You can find it here: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/blob/main/chapter03/browser_item_script.txt).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s fill in the new item fields. Make sure you place the aforementioned
    script in the **Script** field. The item should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.71 – Zabbix website host item configuration window](img/B19803_03_70.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.71 – Zabbix website host item configuration window
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you add a tag as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.72 – Zabbix website host item tag configuration window](img/B19803_03_71.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.72 – Zabbix website host item tag configuration window
  prefs: []
  type: TYPE_NORMAL
- en: Now, save the item by clicking on the **Add** button at the bottom of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we’re using macros, make sure you add them to the host. Click on the
    **Zabbix website** hostname. Then, add the following macros:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.73 – Zabbix website host macros configuration window](img/B19803_03_72.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.73 – Zabbix website host macros configuration window
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you fill in the correct URL. Also, don’t forget to set the password
    macro to the **Secret** **text** type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating to **Monitoring** | **Latest data** should now show us the value
    for our new host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.74 – Zabbix website item result](img/B19803_03_73.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.74 – Zabbix website item result
  prefs: []
  type: TYPE_NORMAL
- en: As we learned earlier in this chapter, we can extract data from this bulk metric
    item using dependent items. This is what we’ll do next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s go back to **Data collection** | **Hosts** and click on **Items** for
    the **Zabbix** **website** host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Create item** in the top-right corner and create a new item to get
    the total duration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.75 – Browser monitoring total duration item](img/B19803_03_74.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.75 – Browser monitoring total duration item
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Preprocessing** so that we can add preprocessing details as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.76 – Browser monitoring total duration item preprocessing](img/B19803_03_75.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.76 – Browser monitoring total duration item preprocessing
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Tags** – we can’t forget to add a tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.77 – Browser monitoring total duration item tag](img/B19803_03_76.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.77 – Browser monitoring total duration item tag
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add** to finish creating the item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click **Create item** in the top-right corner again and create a new item
    to get the number of enabled hosts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.78 – Browser monitoring enabled hosts item](img/B19803_03_77.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.78 – Browser monitoring enabled hosts item
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Preprocessing** and add some preprocessing details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.79 – Browser monitoring enabled hosts item preprocessing](img/B19803_03_78.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.79 – Browser monitoring enabled hosts item preprocessing
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Tags** – we can’t forget to add a tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.80 – Browser monitoring enabled hosts item tag](img/B19803_03_79.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.80 – Browser monitoring enabled hosts item tag
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add** to finish creating the item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to add more dependent items yourself to get even more statistics from
    the raw JSON that was collected by the master item. Don’t forget to set **History**
    to **Do not store** on the master item once you’ve finished adding dependent items
    to save some disk space.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s have a look at how this code works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the new Zabbix browser monitoring, we can use advanced JavaScript in combination
    with Selenium, for example. This gives us the option to do almost anything a normal
    browser user can. This provides us with endless opportunities to monitor what
    our end users are doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at some of the steps in our JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by parsing the parameters that we defined in the Zabbix frontend.
    We don’t want to use just hardcoded usernames and passwords – we want to use other
    values that can be dynamic in this script, such as URLs, which are useful to parse.
    This way, we create flexibility, which can also be useful later when we template
    the item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have a `browser.findElement` function. We will be using this to find
    the correct field to fill in with the username and password before we click on
    the login button. With this type of monitoring, we are translating JavaScript
    to what looks like what a user could also be doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We also collect some performance statistics so that we can find how quickly
    the login was performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have a few `browser.findElement` functions to navigate to the **Reports**
    | **System information** menu. On this page, we want to find specific rows from
    the table. Something important to note here is that apart from using browser monitoring
    to gather performance data or see if a user’s functionality is still working,
    we can also use it to extract metrics. We’ll come back to this shortly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We must ensure we log out (it’s best practice to end any session correctly),
    at which point we can do some more error and result-catching. At this point, I
    would love to show you the JSON result, but let’s not cut down any more trees
    than necessary. Open your **Latest data** page and have a look at some of the
    JSON entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the total duration of the whole item execution at the top of the
    JSON result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'For each step we did, we can see a `mark` value, which will give us more information
    about the action we executed through the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Last, but not least, at the bottom, we have our extracted Zabbix system report
    values. We gathered all this information through this single browser item monitoring
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.81 – Zabbix](img/B19803_03_80.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.81 – Zabbix
  prefs: []
  type: TYPE_NORMAL
- en: Using the dependent items we learned about earlier, we can now extract useful
    data from our bulk metric collection, which was done by the browser item type.
    This gives us nice and clean metrics in a single item, which can also easily be
    used in triggers. For example, we can use these triggers to specify whether the
    duration is too long or whether there are fewer hosts enabled now than before.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this single new item type opens up a world of possibilities
    for us. I can only imagine the Zabbix community finding more and more use cases
    for this and sharing their amazing new templates.
  prefs: []
  type: TYPE_NORMAL
- en: Using Zabbix preprocessing to alter item values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preprocessing item values is an important functionality in Zabbix; we can use
    it to create all kinds of checks. We’ve already done some preprocessing in this
    chapter, but let’s take a deeper dive into it and what it does.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need a Zabbix server to create a check for. We will also need
    a passive Zabbix agent on a Linux host to get our values from and preprocess them.
    We can use the agent that’s running on our Zabbix server for this. In my case,
    this is `lar-book-rocky`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by logging in to our Zabbix frontend and going to **Data collection**
    | **Hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on your Zabbix server host; in my case, it’s called **lar-book-rocky**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to **Items** and click on the blue **Create item** button in the top-right
    corner. Let’s create a new item with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.82 – New item creation screen, Get traffic statistics from CLI](img/B19803_03_81.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.82 – New item creation screen, Get traffic statistics from CLI
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t forget to add your tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.83 – New item creation screen, Get traffic statistics from CLI,
    Tags tab](img/B19803_03_82.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.83 – New item creation screen, Get traffic statistics from CLI, Tags
    tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you change **ens192** to your primary network interface. You can
    find your primary network interface by logging in to the Linux CLI and executing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Back on the item creation screen, click on the blue **Add** button. This item
    will use the Zabbix agent to execute a remote command on the Linux CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we navigate to this new item, we’ll see that the item becomes unsupported.
    This is because when we use the **system.run** key, we need to allow it in the
    Zabbix agent configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.84 – Unsupported item information, Unknown metric system.run](img/B19803_03_83.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.84 – Unsupported item information, Unknown metric system.run
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the Linux CLI of the monitored host and edit the Zabbix agent configuration
    by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the **Option: AllowKey** line and add **AllowKey=system.run[*]**, as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.85 – Zabbix agent configuration file, AllowKey=system.run[*]](img/B19803_03_84.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.85 – Zabbix agent configuration file, AllowKey=system.run[*]
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the file and restart the Zabbix agent, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Back at the Zabbix frontend, the error we noticed in *Step 7* should be gone
    after a few minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Monitoring** | **Latest data** and filter your Zabbix server host,
    **lar-book-rocky**, and the name of the new **Get traffic statistics from** **CLI**
    item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The value should now be pulled from the host. If we click on **History**, we
    can see the full value; it should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.86 – Zabbix agent system.run command executing ifconfig ens192 results](img/B19803_03_85.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.86 – Zabbix agent system.run command executing ifconfig ens192 results
  prefs: []
  type: TYPE_NORMAL
- en: The information we can see here is way too much for just one item, so we need
    to split it up. We’ll use preprocessing to get the number of RX bytes from the
    information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to **Data collection** | **Hosts** and click on your Zabbix server host.
    Go to **Items** on this host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Get traffic statistics from CLI** item to edit it. Change its
    name to **Total RX traffic in bytes for ens192** and add **B** to **Units**, where
    **B** stands for **bytes**. It will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.87 – Zabbix agent system.run it\uFEFFem](img/B19803_03_86.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.87 – Zabbix agent system.run item
  prefs: []
  type: TYPE_NORMAL
- en: 'Add your tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.88 – New item creation screen, Get traffic statistics from CLI,
    Tags tab](img/B19803_03_87.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.88 – New item creation screen, Get traffic statistics from CLI, Tags
    tab
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on **Preprocessing** and click on the underlined **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A **Regular expression** (regex) field will be added. We are going to fill
    this so that it matches the total number of bytes for your interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.89 – Zabbix agent system.run item preprocessing](img/B19803_03_88.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.89 – Zabbix agent system.run item preprocessing
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you also select the **Discard value** box under **Custom** **on fail**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click on the underlined **Add** button again and use the drop-down menu
    for this new step to select **Discard unchanged**. The result will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.90 – Zabbix agent system.run item preprocessing](img/B19803_03_89.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.90 – Zabbix agent system.run item preprocessing
  prefs: []
  type: TYPE_NORMAL
- en: We can now click the blue **Update** button to finish editing this item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to **Monitoring** | **Latest data** and filter on your host and
    the new item name, **Total RX traffic in bytes for ens192**. Make sure you use
    your own interface name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now see our value coming in. Here, we have an item displaying our total
    RX traffic for our main interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.91 – Zabbix Total RX traffic i\uFEFF\uFEFFtem latest data](img/B19803_03_90.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.91 – Zabbix Total RX traffic item latest data
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We did some preprocessing in the *Working with calculated and dependent items*
    recipe to get data from a master item. We also used preprocessing in the *Setting
    up HTTP agent monitoring* recipe to get a specific value from a web page. We didn’t
    go over the preprocessing concepts used in those recipes, though, so let’s go
    over them here.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with preprocessing, it’s important to know the basic setup. Let’s
    take a look at the incoming data before we use preprocessing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.92 – Zabbix agent system.run command executing ifconfig ens192 results](img/B19803_03_85.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.92 – Zabbix agent system.run command executing ifconfig ens192 results
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a lot of information. When we look at how Zabbix items are used, we
    try to put graspable information in a single item. Luckily, we can preprocess
    this item before we store the value in Zabbix. In the following figure, we can
    see the preprocessing steps we added to our item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.93 – Zabbix agent system.run item preprocessing with two steps](img/B19803_03_92.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.93 – Zabbix agent system.run item preprocessing with two steps
  prefs: []
  type: TYPE_NORMAL
- en: Our first step is a regex. This step will make sure we only use the numbers
    we need. We match on the word `RX`, then the word `bytes`, and a sequence of numbers
    after them. This way, we end up with the total number of RX bytes in capture group
    2\. This is why we fill in `\2` in the output field. We also specify **Custom
    on fail**, which will discard any value if the regex doesn’t match.
  prefs: []
  type: TYPE_NORMAL
- en: Our second step is to discard any values that are the same as the value received
    before. Instead of storing duplicate values, we simply discard them and save some
    space in our Zabbix database.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It’s a lot easier to build a regex when using an online tool such as [https://regex101.com/](https://regex101.com/).
    You can see what number your capture groups will get, and there’s a lot of valuable
    information in the tools as well.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that steps are executed in the sequence they are defined
    in the frontend. If the first step fails, the item becomes unsupported unless
    **Custom on fail** is set to do something else.
  prefs: []
  type: TYPE_NORMAL
- en: By adding preprocessing to Zabbix, we open up a whole range of options for our
    items, and we can alter our data in almost any way required. These two steps are
    just the beginning of the options that are available when diving into the world
    of Zabbix preprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Preprocessing in Zabbix is an important subject, and it’s impossible to cover
    every aspect of it in a single recipe. The two preprocessing steps in this recipe’s
    example are just two of the many options we can use. Check out the official Zabbix
    documentation to see the other options we can use: [https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing](https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing).'
  prefs: []
  type: TYPE_NORMAL
