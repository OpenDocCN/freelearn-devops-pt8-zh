- en: Distributing Load with Azure Traffic Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes we want to distribute our load depending on the performance of our
    backends, or maybe route users to different servers while some are under maintenance.
    This is not an easy task if we don't have a service that will do this seamlessly
    and quickly. Thanks to **Azure Traffic Manager** we are able to improve the availability
    of our critical applications, distribute traffic when performing large, complex
    deployments, or perform maintenance without downtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Azure Traffic Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different routing methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Endpoint monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform exercises from this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to an Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Traffic Manager fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine the following situation—you have an application that has to be served
    globally. To guarantee the best performance for all your customers worldwide,
    you provision different instances of your service in different regions (one for
    North America, one for Europe, and one for Africa). There is one problem, however.
    You have to explicitly tell your customer to access a specific instance of the
    application—the one that is closest to its location.
  prefs: []
  type: TYPE_NORMAL
- en: While this is, of course, possible (just give it the right URL), the solution
    is not ideal. For example, what if your client goes for a holiday and spends the
    following two weeks in Europe instead of in Africa? To overcome such problems,
    in Azure you can leverage a service named **Azure Traffic Manager**, which takes
    care of the proper routing of incoming requests and allows you to implement high
    availability in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Functions of Azure Traffic Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can think of Azure Traffic Manageras a load balancer that works on the
    DNS level. To understand the concept, please take a look at the following example.
    By default, if there is no service such as Azure Traffic Manager, your **customer**
    uses an endpoint URL to send requests from a **client application** to a **server
    application**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/610c5da1-765c-4941-b370-b65410feaea6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to load-balance incoming requests, you have to introduce another
    element of an architecture that will take care of routing them to the proper backend
    (and possibly ensure that they are healthy):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2203b07b-6c8d-47ed-ba14-079f22c3658c.png)'
  prefs: []
  type: TYPE_IMG
- en: The downside of such a setup is that latency can be introduced. What is more,
    in that scenario your client connects via a **load balancer** directly, which
    does not resolve the problem of globally distributing the entry point.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example is a common solution when using a reverse proxy, which
    acts as a gateway to your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The described scenario defines a solution, where load balancing is based on
    distributing traffic based on TCP/UDP, so it is a significantly lower level than
    DNS. When using Azure Traffic Manager*, *the flow of a request is completely different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e04cc3dc-d471-42f2-aa52-f5a3bf9b993b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The flow can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Send a **DNS query** to a **DNS service** to obtain the address of a server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **DNS service** is configured in such a way that it points to **Azure Traffic
    Manager****,* *instead of pointing to a service directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Azure Traffic Manager**chooses the right endpoint based on the query characteristics
    and returns a **DNS response** containing the address of the proper server'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A client receives a **DNS response** and uses it to connect to the right server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In fact, a client has to perform two requests:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtain the URL of a server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send the actual request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While it may seem like a bit of an overhead, in reality, the impact is imperceptible.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the advantage of such a solution is the ability to send requests directly
    to a server. There is no intermediary service that participates in the communication.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Azure Traffic Manager in the Azure portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with Azure Traffic Managerin the portal, you have to click on
    the + Create a resourcebutton and search for `traffic manager`*.* Then from the
    search results, select Traffic Manager profile. You will see a form, where you
    have to enter all required fields to be able to create a service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d374818-feb0-400e-97d6-170c441b7359.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While most of them should be self-explanatory, there is one drop-down that
    will require our focus, Routing method. Here you have six different methods available:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Priority
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geographic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MultiValue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we describe each and every one, you have to understand what **Routing
    method **is exactly. Previously I mentioned that Azure Traffic Managerdecides
    to which endpoint a user should be routed. This routing operation may give a different
    result depending on the selected method. Let''s consider the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Instances of your application are distributed globally, and you want to route
    a user to the closest one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instances of your application offer different performances, and you want to
    route a user to the one that offers the best user experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have a primary region that handles all the traffic, and you want to route
    a user to secondary ones in case of an outage or temporary issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to distribute traffic evenly, or according to set weights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to map user IP addresses to a specific instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the chosen scenario, a different **Routing method **should be chosen.
    Now I will describe them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Routing method – performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using the performance routing method, a user will be routed to the endpoint
    that is the "closest" one. It is important to remember here, that the "closest"
    endpoint may not be the one that is the closest geographically, as this method
    takes into consideration performance, not distance. Let''s assume that internally Azure
    Traffic Managerstores the following information regarding configured endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Endpoint** | **Region** | **Latency** |'
  prefs: []
  type: TYPE_TB
- en: '| Server A | West Europe | **12 ms** |'
  prefs: []
  type: TYPE_TB
- en: '| Server B | East US 2 | 67 ms |'
  prefs: []
  type: TYPE_TB
- en: In the preceding scenario, the endpoint that performs better is **Server A**.
    When the performance routing method is selected the user will be routed to that
    server.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to remember that with the performance method, Azure Traffic
    Manager checks the latency of a response, taking into consideration the IP address
    of the DNS server that sent the request. It is not an IP address of a client.
  prefs: []
  type: TYPE_NORMAL
- en: Routing method – weighted
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you want to distribute traffic evenly or based on predefined weights, the
    weighted routing method is something you are looking for. Using that method, you
    define weights, which are then taken into consideration when deciding where a
    request should be routed. Let''s take into consideration the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Endpoint** | **Weight** | **Status** |'
  prefs: []
  type: TYPE_TB
- en: '| Server A | 100 | **Online** |'
  prefs: []
  type: TYPE_TB
- en: '| Server B | 100 | Degraded |'
  prefs: []
  type: TYPE_TB
- en: '| Server A - staging | 5 | **Online** |'
  prefs: []
  type: TYPE_TB
- en: In the preceding example, we have three endpoints, one of which is reporting
    issues. Although both **Server A** and **Server B** have the same weights, as
    Server B's status is reported as degraded, it will not be considered as a healthy
    endpoint, and as a result, a user will not be routed to it. There are two servers
    left that have different weights. In that situation, Azure Traffic Managerwill
    randomly assign a user to an endpoint with the probability determined by the endpoint's
    weight. If we imagine that there are 105 requests, 100 of them will be routed
    to **Server A**, and the rest to the **Server A – staging**.
  prefs: []
  type: TYPE_NORMAL
- en: A Weighted routing method is a great option for A/B testing, where you randomly
    route users to the new instance of your application containing new features. If
    they like them, you can change the weight and route the rest of the traffic to
    that instance.
  prefs: []
  type: TYPE_NORMAL
- en: Routing method – priority
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The priority routing method is the most straightforward as it covers a simple
    scenario where you have a primary region that hosts your application, and you
    want to ensure that you can easily fail over to the secondary ones in case something
    is wrong. Let''s consider the following scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server** | **Priority** | **Status** |'
  prefs: []
  type: TYPE_TB
- en: '| Server A | 1 | **Online** |'
  prefs: []
  type: TYPE_TB
- en: '| Server A - secondary | 2 | Online |'
  prefs: []
  type: TYPE_TB
- en: 'In the preceding example, all traffic will be routed to Server A for the following
    reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Its priority is set to `1`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its status is considered online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now something has happened and the primary replica went down:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server** | **Priority** | **Status** |'
  prefs: []
  type: TYPE_TB
- en: '| Server A | 1 | Degraded |'
  prefs: []
  type: TYPE_TB
- en: '| Server A - Secondary | 2 | **Online** |'
  prefs: []
  type: TYPE_TB
- en: Because Server A is considered unhealthy, all traffic will be routed to the
    secondary instance until the primary one works again.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that clients may cache DNS responses, which will extend the period
    that your endpoint appears unavailable to them.
  prefs: []
  type: TYPE_NORMAL
- en: Routing method – geographic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes you need to route a user to a specific region, taking into consideration
    its location. There are multiple reasons to do so, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Legal requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content localization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving an application from a server that is the closest one taking distance
    into consideration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do remember that a region that is closest to a user may not be the best one
    regarding network latency. Do not overuse this routing method to achieve the best
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the Geographic routing method, you assign regions to configured
    endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server** | **Regions** |'
  prefs: []
  type: TYPE_TB
- en: '| Server A | France |'
  prefs: []
  type: TYPE_TB
- en: '| Server B | Asia |'
  prefs: []
  type: TYPE_TB
- en: '| Server C | World |'
  prefs: []
  type: TYPE_TB
- en: Now to route a user to the proper server, Azure Traffic Managertries to determine
    its location by reading the IP address of the source DNS server. It starts from
    state/province (or country/region if the former is not supported), and ends on
    the World value.
  prefs: []
  type: TYPE_NORMAL
- en: When using the Geographic routing method, Azure Traffic Managerwill return an
    endpoint whether it is healthy or not. It is important to leverage nested profiles,
    to extend routing methods further, and achieve high availability.
  prefs: []
  type: TYPE_NORMAL
- en: Routing method – MultiValue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MultiValue routing method works a little bit differently from other routing
    methods, as it allows the return of multiple healthy endpoints, and lets the client
    choose which one should be used. This scenario covers a situation when on the
    service side you do not know where to route a user, and simultaneously you want
    to ensure that a user will be routed to a healthy endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that an endpoint can be returned to a user for this routing method,
    it has to be set as External and has an IPv4 or IPv6 address assigned.
  prefs: []
  type: TYPE_NORMAL
- en: Routing method – subnet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last routing method is the most sophisticated, as it allows you to map specific
    IP addresses (or a range of IP addresses) to a specific endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'The use cases for that method may vary if, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: You want to block users using a specific ISP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to route users from a corporate network to an internal instance of
    an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have branded your application and want to route users from different corporate
    networks to a particular branded instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Subnet routing method, make sure you have covered all possible IP
    addresses, as failing to do so will result in a `NODATA` response being returned,
    resulting in an error being returned to a client.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are satisfied with your choice of a routing method, you can click on
    the Createbutton to provision a resource in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Azure Traffic Manager in the Azure Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you access your instance of Azure Traffic Manager, you will see a default
    screen containing the overview of the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81f6ce7a-3e42-42b7-a24c-edd3e0bccaf3.png)'
  prefs: []
  type: TYPE_IMG
- en: As there is currently no endpoint attached to this particular profile, the list
    of endpoints displayed is empty. Before we add a new one, let's focus a little
    bit on other service features.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you access the Configuration blade, you will see the full configuration
    of your instance of Azure Traffic Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a7b0768-f8e8-458d-979d-ebcf8c115875.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It contains things such as the Routing method (by default it displays the one
    you chose during service creation), Endpoint monitoring settings, and Fast endpoint
    failover settings. From this screen, you basically control how Azure Traffic Managerwill
    behave. For instance, let''s assume that each of your endpoints has a custom `/status` endpoint
    that is designed to work with the service. By default, Azure Traffic Manager checks
    the default endpoint URL (set here as `/`), so you will have to change the Path field
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fabe7bd3-f056-4388-b3a2-fb8180f5da96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The same goes for expected status codes. If your endpoints can return a range
    of HTTP status codes, and each of them should be considered as a success, you
    are able to enter the range in the Expected Status Code Rangesfield:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc2bcf3f-561c-437a-9550-0e9b3f3d9c47.png)'
  prefs: []
  type: TYPE_IMG
- en: You can experiment here with different settings, so they reflect the real scenario
    you have to cover.
  prefs: []
  type: TYPE_NORMAL
- en: Real user measurements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using the performance routing method, Azure Traffic Managerchecks where
    DNS requests originate from, and translates the result to an internal table that
    reflects different network latencies for different end user networks. While this
    option is perfectly fine for most use cases, sometimes you want to be able to
    tell Azure Traffic Managerabout real latency. With Real user measurementsfeatures,
    you are able to inject JavaScript code in to your client endpoints, to send delays
    to your endpoints directly to this Azure service.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, go to the Real user measurementsblade and click on the **Generate
    key **button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ca84af0-7331-4ec7-8579-58045b9ee2dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Key: Stores the generated key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Measurement JavaScript: Holds the script that should be injected into the client
    application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you use the generated script, it will start sending additional information
    to your instance of Azure Traffic Managerregarding latencies and client network,
    which will improve the accuracy of decisions made by the service.
  prefs: []
  type: TYPE_NORMAL
- en: The accuracy improvement is not instant—Azure Traffic Manager has to gather
    lots of data from different networks to improve the performance.
  prefs: []
  type: TYPE_NORMAL
- en: Endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main functionality of Azure Traffic Manageris the ability to configure
    the endpoints it handles. You can access it through the Endpointsblade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08f08ff4-18f8-43a8-a54d-83f3a2431732.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add an endpoint, you have to enter the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type**: You can choose between an Azure endpoint, External endpoint, and
    Nested endpoint.The difference impacts the whole form—with Azure endpointyou can
    choose an Azure service, External endpointrequires providing a fully qualified
    domain name or IP, and when you select Nested endpoint you can point to another
    Traffic Manager profile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: Unique name of an endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target resource type/FQDN or IP/Target resource**: Depending on the Typevalue,
    you will have to select different values to configure an endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Priority**: Because my routing method is Priority, I have to enter the correct
    value for this particular endpoint. If you select another method, you may find
    other fields here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following example, I selected an Azure endpointand pointed the configuration
    to one of my Azure App Services. I performed the operation twice and added two
    different endpoints to two instances of my application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49a92369-2a0e-455c-8f44-4da10ce2c901.png)'
  prefs: []
  type: TYPE_IMG
- en: Remember that you cannot add to a single Azure Traffic Managerprofile service
    domains that point to the same region.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, right after adding endpoints, their status is displayed as Checking
    endpoint. This means that Azure Traffic Managertries to gather information regarding
    their health. If something is wrong, you will see the Degradedstatus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d2960e1-4659-440c-a44f-a807b3f3d056.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In my case, the problem was an invalid configuration as I set the **Path **field
    in the Configurationblade to`/status`, which turned out to be an invalid value
    (in my application, as I implemented that endpoint as` /api/status`). After correcting
    the configuration in the primary service, its status was displayed as Online:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49040795-c16e-4bd6-baab-3fea58431d35.png)'
  prefs: []
  type: TYPE_IMG
- en: The last thing to configure is the DNS record on your DNS server to point to
    your instance of Azure Traffic Manager (by using DNS name,which can be found on
    the Overview blade).
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides routing traffic to a different endpoint, Azure Traffic Manageroffers
    some additional functionalities when it comes to monitoring. Besides the traditional Metrics blade,
    there is an extra feature available called Traffic view, which enables you to
    monitor. What is more, you can use many different built-in mechanisms (like `nslookup`in
    Windows OS), to check the current configuration of the service.
  prefs: []
  type: TYPE_NORMAL
- en: Nslookup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use `nslookup`, you have to run the command line in Windows using your administrator
    account. Once it is loaded, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After a moment, it should return a result showing the command resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it points to the second instance of my application (`handsonazure02`
    hosted within the North Europe region). The reason why I got this response is
    that my primary endpoint was considered to be downgraded. Once it went back online,
    I ran the command once more and got a quite different response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now it returned the primary server (as expected, by using the Priority routing
    method).
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you have to wait a fixed amount time before all DNS changes will
    be propagated. The value can be configured in the Configurationblade by changing
    the DNS time to livefield.
  prefs: []
  type: TYPE_NORMAL
- en: Traffic view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Traffic viewis an additional monitoring feature that enables you to check how
    the selected routing method works exactly at the DNS level. It gives you extra
    helpful information like:'
  prefs: []
  type: TYPE_NORMAL
- en: Real latency level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume of traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that this feature takes up to 24 hours to propagate and gather all
    necessary information.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the screen for this functionality looks such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c12c64c-c46b-4905-becc-65c35427179b.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the information is gathered, you can leverage a graphical representation
    of collected data, and better understand the behaviour of the selected routing
    method (and possibly improve it).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was the last chapter in this book and explained the basics of one Azure
    services, Azure Traffic Manager. You have learned the fundamental concepts of
    traffic distribution and different routing methods that cover many real use cases,
    which you may well face in your daily work. Now you should understand how this
    particular Azure service works and what can be achieved by the proper usage of
    its features, such as configuration, real user measurements, and monitoring. In
    the next (and, unfortunately, the last) chapter, I will show you some useful tips
    and tricks for working with the Azure Portal and different cloud components to
    improve your skills even further.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the supported routing methods in Azure Traffic Manager?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you use the Real user measurementsfeature?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you link different Azure Traffic Managerprofiles?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to use an external endpoint?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does a client connect directly to an endpoint returned by Azure Traffic Manager?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main difference between a gateway and Azure Traffic Manager?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can Azure Traffic Managerbe used to achieve high availability? If so, how?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Disaster recovery with Azure DNS and Traffic Manager: [https://docs.microsoft.com/en-us/azure/networking/disaster-recovery-dns-traffic-manager](https://docs.microsoft.com/en-us/azure/networking/disaster-recovery-dns-traffic-manager)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works: [https://docs.microsoft.com/en-us/azure/traffic-manager/traffic-manager-how-it-works](https://docs.microsoft.com/en-us/azure/traffic-manager/traffic-manager-how-it-works)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
