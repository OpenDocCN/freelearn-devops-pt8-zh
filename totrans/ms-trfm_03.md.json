["```\n    resource \"random_string\" \"name_suffix\" {\n      length           = 6\n      special          = true\n      override_special = \"/@£$\"\n    }\n```", "```\n    locals {\n      resource_name = \"foobar${random_string.name_suffix.result}\"\n    }\n```", "```\n    resource \"random_password\" \"database\" {\n      length           = 16\n      special          = true\n      override_special = \"!#$%&*()-_=+[]{}<>:?\"\n    }\n```", "```\n    locals {\n      azs = [\n        \"us-west-1a\",\n        \"us-west-1c\",\n        \"us-west-1d\",\n        \"us-west-1e\"\n      ]\n    }\n```", "```\n    resource \"random_integer\" \"az\" {\n      min = 0\n      max = length(local.azs) – 1\n    }\n```", "```\n    locals {\n      selected_az = local.azs[random_integer.az.result]\n    }\n```", "```\n    resource \"aws_elb\" \"foo\" {\n      availability_zones = [local.selected_az]\n      # ... and other aws_elb arguments ...\n    }\n```", "```\n    resource \"random_id\" \"foo\" {\n      byte_length = 8\n    }\n```", "```\n    locals {\n      azs = [\n        \"us-west-1a\",\n        \"us-west-1c\",\n        \"us-west-1d\",\n        \"us-west-1e\"\n      ]\n    }\n```", "```\n    resource \"random_shuffle\" \"azs\" {\n      input        = local.azs\n      result_count = 2\n    }\n```", "```\n    resource \"aws_elb\" \"foo\" {\n      availability_zones = random_shuffle.azs.result\n      # ... and other aws_elb arguments ...\n    }\n```", "```\n    locals {\n      option1 = timestamp()\n    }\n```", "```\n    resource \"time_static\" \"current_time\" {}\n```", "```\n    locals {\n      future_date = \"2024-05-04T00:00:00Z\"\n    }\n```", "```\n    resource \"time_static\" \"may_the_fourth\" {\n      rfc3339 = \"2024-05-04T00:00:00Z\"\n    }\n```", "```\n    resource \"time_offset\" \"certificate_expiration\" {\n      offset_years = 1\n    }\n```", "```\n    resource \"time_rotating\" \"certificate\" {\n      rotation_days = 90\n    }\n```", "```\n    data \"external\" \"example\" {\n      program = [\"python\", \"${path.module}/example-data-source.py\"]\n      query = {\n        # arbitrary map from strings to strings, passed\n        # to the external program as the data query.\n        id = \"abc123\"\n      }\n    }\n```", "```\n    # This resource will destroy (potentially immediately) after null_resource.next\n    resource \"null_resource\" \"previous\" {}\n    resource \"time_sleep\" \"wait_30_seconds\" {\n      depends_on = [null_resource.previous]\n      create_duration = \"30s\"\n    }\n    # This resource will create (at least) 30 seconds after null_resource.previous\n    resource \"null_resource\" \"next\" {\n      depends_on = [time_sleep.wait_30_seconds]\n    }\n```", "```\n    data \"http\" \"foo\" {\n      url = \"https://foo\"\n    }\n```", "```\n    resource \"local\\_file\" \"foo\" {\n      content  = \"foo!\"\n      filename = \"${path.module}/foo.bar\"\n    }\n```", "```\n    data \"local_file\" \"foo\" {\n      filename = \"${path.module}/foo.bar\"\n    }\n```", "```\n    data \"archive_file\" \"init\" {\n      type        = \"zip\"\n      source_file = \"${path.module}/foo.txt\"\n      output_path = \"${path.module}/files/out.zip\"\n    }\n```", "```\n    data \"archive_file\" \"dotfiles\" {\n      type        = \"zip\"\n      output_path = \"${path.module}/files/out.zip\"\n      source {\n        content  = \"foobar\"\n        filename = \"foo.txt\"\n      }\n    }\n```", "```\n    data \"archive_file\" \"dotfiles\" {\n      type        = \"zip\"\n      output_path = \"${path.module}/files/out.zip\"\n      source_content          = \"foobar\"\n      source_content_filename = \"foo.txt\"\n    }\n```", "```\n    resource \"tls_private_key\" \"ssh_key\" {\n      algorithm = \"RSA\"\n      rsa_bits  = 4096\n    }\n```", "```\n    resource \"azurerm_key_vault_secret\" \"ssh_private_key\" {\n      name         = \"ssh-key\"\n      value        = tls_private_key.ssh_key.private_key_openssh\n      key_vault_id = azurerm_key_vault.main.id\n    }\n```", "```\n    resource \"tls_private_key\" \"foo\" {\n      algorithm = \"RSA\"\n    }\n```", "```\n    resource \"tls_cert_request\" \"foo\" {\n      private_key_pem = tls_private_key.foo.private_key_pem\n      subject {\n        common_name  = \"foo.com\"\n        organization = \"Foobar, Inc\"\n      }\n    }\n```", "```\n    resource \"tls_locally_signed_cert\" \"vault\" {\n      cert_request_pem = tls_cert_request.foo.cert_request_pem\n      ca_key_algorithm   = tls_private_key.foo.algorithm\n      ca_private_key_pem = tls_private_key.foo.private_key_pem\n      ca_cert_pem        = tls_self_signed_cert.foo.cert_pem\n      validity_period_hours = 17520\n      allowed_uses = [\n        \"server_auth\",\n        \"client_auth\",\n      ]\n    }\n```", "```\n    data \"cloudinit_config\" \"foo\" {\n      gzip          = false\n      base64_encode = false\n    }\n```", "```\n    resource \"aws_instance\" \"web\" {\n      # other ec2 attributes\n      user_data = data.cloudinit_config.foo.rendered\n    }\n```", "```\n    data \"cloudinit_config\" \"foo\" {\n      gzip          = false\n      base64_encode = false\n      part {\n        content_type = \"text/x-include-url\"\n        content      = \"http://foo.com/bar.sh\"\n      }\n    }\n```", "```\n    #!/bin/bash\n    sudo apt-get update -y\n    sudo apt-get install nginx -y\n    echo '<h1>Hello from Terraform Cloud-Init!</h1>' | sudo tee /var/www/html/index.html\n```", "```\n    data \"cloudinit_config\" \"foo\" {\n      gzip          = false\n      base64_encode = false\n      part {\n        content_type = \"text/x-shellscript\"\n        content      = file(\"${path.module}/foo.sh\")\n      }\n    }\n```", "```\n    #cloud-config\n    groups:\n      - bar\n    users:\n      - name: foo\n        groups: sudo, bar\n        shell: /bin/bash\n        sudo: ['ALL=(ALL) NOPASSWD:ALL']\n        ssh_authorized_keys:\n          - ssh-rsa your-public-key\n```", "```\n    data \"cloudinit_config\" \"foo\" {\n      gzip          = false\n      base64_encode = false\n      part {\n        content_type = \"text/cloud-config\"\n        content      = file(\"${path.module}/users.yaml\")\n      }\n    }\n```"]