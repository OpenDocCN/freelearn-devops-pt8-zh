- en: Using Auto Scaling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon ECS provides built-in internal load balancing to distribute client traffic
    between the tasks in an ECS service. If all the client load were to be sent to
    a single task in a three-task service, the internal load balancer would direct
    some of the client traffic to the other tasks to distribute the client load evenly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem: **The number of tasks in a service as configured initially is fixed.
    If the client load is expected to be fixed, the fixed number of tasks in an ECS
    service should suffice. But if client load fluctuates, the ECS service tasks do
    not scale automatically. If the client load were to increase, the preconfigured
    number of tasks may not be able to serve the client traffic.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution: **Amazon ECS supports auto scaling using an auto scaling policy
    that consists of a CloudWatch alarm based on one of the ECS service metrics: `CPUUtilization`
    or `MemoryUtilization`. An alarm threshold must be set before any scaling action
    is performed; for instance, `MemoryUtilization` must not exceed a specific value
    for a specified number of consecutive periods, with each period being one minute,
    five minutes, 15 minutes, or 1 hour. If an alarm threshold is exceeded, a scaling
    action could be performed, such as adding, setting to, or removing a specified
    number or percentage of tasks. The measure of client load is `CPUUtilization`
    or `MemoryUtilization`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of tasks scale with the load, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ae1a2b0-d114-40ee-99a7-acd5bb683de8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we shall demonstrate configuring and using auto scaling and we
    will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ECS service for a Hello world application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Types of auto scaling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring an auto scaling policy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Demonstrating the use of auto scaling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring CloudWatch metrics and logs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating a service to modify the number of tasks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an ECS service for a Hello world application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating an ECS Service for a Hello world application using the `tutum/hello-world`
    Docker image is discussed in detail in [Chapter 2](20fbdcad-0dd7-4066-aafb-1bc74b268b33.xhtml),
    *Networking*. In this section, we shall create a `hello-world` cluster consisting
    of a `hello-world-service` service with three tasks for a `tutum/hello-world`
    Docker image. To create the cluster, service, and task definition, use the same
    procedure as in Chapter 2, *Networking * which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Container Definition, `hello-world`, for the `tutum/hello-world` Docker
    image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a task definition, `hello-world-task-definition`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a service, `hello-world-service`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a cluster, `hello-world`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The procedure is the same as in [Chapter 2](20fbdcad-0dd7-4066-aafb-1bc74b268b33.xhtml), *Networking*,
    except for a few differences. Define the service with three tasks instead of the
    default one task:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Edit in the Define your service section, as shown in the following
    screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0632223f-0df3-4bfe-9257-7af26cd7d479.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Set up service: hello-world-service dialog, set the Number of desired
    tasks to `3`, as shown here. Click on Save:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fe536390-6712-4ac7-ad6b-104706056a58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the Number of desired tasks set to 3, click on Next in Define your service,
    as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e77a0848-4904-4da0-a462-95845dfd044c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Configure your cluster, specify the Cluster name as hello-world, as shown
    here. The other settings, which include VPC ID and Subnets, are not modifiable.
    Click on Next:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/5b487776-339d-4f56-b1b3-f51b9283afe4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Review the Container definition, Task definition, Service, and Cluster in Review,
    as shown here. An Edit button is provided to modify each of these. Click on Create
    to create the ECS objects, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/227b2760-8f0a-4c19-b89f-97dac776f057.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Launch Status should indicate that all ECS resources have been created,
    as indicated by the complete status shown here. Click on View service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ed796956-e07d-4762-a9f8-d26f89c5c399.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A service gets created, as shown here. The Service name, Cluster, Status, Task
    definition, Launch type, Platform version, Service role, Desired count, Pending
    count, and Running count are listed in the service summary. The Details tab lists
    the Load Balancing and Network Access:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fab3c55d-40b2-4013-80ce-643df5861c57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Tasks tab to list the tasks. The Last status column lists the task
    status, which could initially be PENDING. Click on the Refresh button periodically
    to refresh the task status. When all tasks have started running, the Last status
    becomes RUNNING, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b0225031-8f2c-48b7-8425-77ae59445742.png)'
  prefs: []
  type: TYPE_IMG
- en: Types of auto scaling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Two kinds of auto scaling policies are defined:'
  prefs: []
  type: TYPE_NORMAL
- en: Target tracking scaling policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step scaling policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We shall discuss these two kinds of auto scaling policy next, before demonstrating
    the use of auto scaling.
  prefs: []
  type: TYPE_NORMAL
- en: Target tracking scaling policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The target being referred to is a target value for a specific metric that CloudWatch
    metrics monitor. The two ECS metrics CloudWatch monitors are CPU utilization and
    memory utilization. With target tracking scaling policies, the number of tasks
    is increased or decreased with the objective that the target value of a metric
    is kept. It may not be feasible to keep the precise target value of a metric because
    the number of tasks are increased/decreased in increments/decrements of 1\. The
    metric is kept at the precise configured target value or close to the target value.
    A target tracking scaling policy itself adjusts itself to the fluctuations in
    a metric value to avoid rapid fluctuations in the number of tasks. For high application
    availability, a service scales out faster than it scales in, as fewer tasks hamper application
    availability while extra tasks do not. Multiple target tracking scaling policies
    may be set concurrently and the service is scaled to fulfill the scaling policy
    that effects the greatest increase in task capacity. Increases in CPU or memory
    utilization are indicators that the application is in need of more tasks and the
    service scales out if a target metric is exceeded. Sufficient metric data is a
    prerequisite for a scaling policy to scale. If insufficient data is available,
    the scaling policy does not scale the number of tasks. To scale if insufficient
    data is available, a step scaling policy should be used, which is discussed next.
  prefs: []
  type: TYPE_NORMAL
- en: Step scaling policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Target tracking scaling policies* section, it is mentioned that if insufficient
    data is available, step scaling policies could be used. To elaborate on this,
    a CloudWatch alarm could be set to be invoked when a metric state is `INSUFFICIENT_DATA`.
    Such a policy is called a Step Scaling Policy. All step scaling policies make
    use of CloudWatch alarms. CloudWatch alarms can be set to be invoked when a specific
    CloudWatch metric (CPU utilization or memory utilization) exceeds or goes below
    a set threshold. As an example, during high use of an application, these metrics
    are likely to increase and CloudWatch alarms could be set to increase the number
    of tasks. Similarly, during times of low application load, these metrics decrease
    in value and CloudWatch alarms could be set to decrease the number of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Service auto scaling, target tracking auto scaling, or step auto scaling, could
    modify a services's desired count.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an auto scaling policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Auto scaling is not configured by default:'
  prefs: []
  type: TYPE_NORMAL
- en: To configure auto scaling, click on the Update button, which is shown in the
    preceding screenshot, for the service that is to be auto scaled. The Update Service
    wizard gets started, as shown in the following screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Configure service page, the settings are not to be modified unless the
    Desired number of tasks (`3`) needs to be updated. Click on Next step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Configure network, we don't need to make any modifications. Click on Next
    step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the Service auto scaling page, select the Service auto scaling option Configure
    Service auto scaling to adjust your service’s desired count, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/131da8f2-9d2b-42c4-8f6b-065d815d8c36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We shall discuss configuring a step auto scaling policy next. Configuring step
    auto scaling involves the following sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the range for the number of tasks within which the cluster is to be scaled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an auto scaling policy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a CloudWatch alarm as a threshold to apply the scaling policy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a scaling action to take if the alarm threshold is exceeded
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We shall discuss configuring each of these next.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the range of tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Specify the Minimum number of tasks (`1`), and the Maximum number of tasks
    (`5`), as shown in the following screenshot. The number of tasks specified in
    the example configuration is arbitrary but the maximum number of tasks must be
    the same or more than the desired number of tasks, and the minimum number of tasks
    must be the same or less than the desired number of tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d2595f7-89dd-4fdc-8a02-1f9c286fe360.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the number of tasks (minimum, desired, and maximum) does not, by itself,
    configure auto scaling; it only specifies the range in which the number of tasks
    may fluctuate with load fluctuations. An auto scaling policy also needs to be
    added.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an auto scaling policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add a scaling policy, click on Add scaling policy, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf748b50-bc20-422e-89bb-3cea99488726.png)'
  prefs: []
  type: TYPE_IMG
- en: An Add policy dialog gets started, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we shall discuss configuring a step auto scaling policy.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a step scaling policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Add Policy, select Scaling policy type as Step scaling, as shown in the following
    screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Specify a Policy name (`AutoScaler`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ededc98e-0f04-40df-beb0-185f74c0db8b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Execute policy when, select Create new Alarm, as shown here. The Use an
    existing Alarm option is also provided if an existing alarm could be used:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/90dbb3ea-ac49-40ea-9043-c31328517fae.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a CloudWatch alarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we shall discuss creating a CloudWatch alarm:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify an Alarm name, as shown in the following screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a new alarm, ECS metrics are used for the CloudWatch alarm. To use other
    metrics for auto scaling, create an alarm in the CloudWatch console and select
    the alarm within Add policy with Use an existing Alarm. Only two ECS metrics are
    available for configuring a new alarm in Add policy: CPUUtilization and MemorUtilization.
    Select CPUUtilization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The alarm threshold specifies when the auto scaling policy is to be applied.
    An example of auto scaling is to scale the tasks when MemoryUtilization exceeds
    256 MB. Different measures are available for defining the alarm threshold. The
    different alarm threshold measures are Average, Minimum, Maximum, Sum, and Data
    samples. As an example, select Maximum.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because the ECS service metric is selected as CPUUtilization, the comparison
    operators (<,<=,>,>=) are defined on CPUUtilization. Select >= as an example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify a value (0.1) for the comparison.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Specify the number of consecutive periods after which the Alarm threshold would
    have been exceeded and the auto scaling policy should be applied as 1\. A period
    definition is not fixed and different options to define a period are 1 minute,
    5 minutes, 15 minutes, and 1 hour. The lower the frequency value, the faster the
    response to resource utilization fluctuations would be. Select 1 minute as an
    example. Click on Save, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2b80198b-33c2-429b-90cf-486960e08a4e.png)'
  prefs: []
  type: TYPE_IMG
- en: A CloudWatch alarm for the auto scaling policy has now been defined.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a scaling action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, configure a scaling action for which three options are available: Add,
    Set to and Remove:'
  prefs: []
  type: TYPE_NORMAL
- en: Select Add to add a specified number of tasks when the alarm threshold is exceeded.
    By alarm threshold exceeded, it does not always imply that some value for a metric
    has been exceeded, but implies that the comparison used in the alarm threshold
    has been exceeded. The comparison itself could be a less than (<) comparison.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify the number of tasks to add as 1\. Alternatively, a percentage of tasks
    may be added by selecting percent. The complete scaling is shown next.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple scaling actions may be defined with Add.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Specify a Cooldown period (300 is the default) between scaling actions. The
    cooldown period is relevant if multiple scaling actions are used and we have not
    used multiple scaling actions. Click on Save:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1b33c500-825c-4612-9191-34ea00607d7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An auto scaling policy (AutoScaler), including the range of tasks, gets defined
    as shown here. Click on Next step:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e5fd50ad-58bc-43db-89e0-6d7d2434138e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Review, click on Update Service, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1735c41a-a6ff-4700-bc2a-f9b97c6e7eff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Launch Status indicates that the service has been updated, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd1fd3b9-4eae-4485-ad68-744cb0a929f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following configurations get applied:'
  prefs: []
  type: TYPE_NORMAL
- en: Scalable target gets registered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scaling policy `AutoScaler` gets created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudWatch alarm for scaling policy gets created/updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on View Service, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dccd384c-2492-4ce9-be2b-45672cb65adf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The updated service is shown here. Select the auto scaling tab to display the
    auto scaling policy added. The auto scaling tab lists the Minimum tasks, Maximum
    tasks, AutoScaler, Policy type, CloudWatch alarm, and Scaling action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3813ae75-8673-48a6-bbfd-e39f279a8c69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Events tab lists the events for the service, as shown here. As indicated
    by an event entry, the service has started three tasks and reached a steady state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6cfc979-e52a-47f3-91ba-6a2ec6e51371.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An auto scaling policy has been configured. Select the Tasks tab and three
    tasks are running as before, as shown here. The number of tasks is still three,
    the same as before adding the auto scaling policy, because the service does not
    need to be auto scaled and the three tasks are able to handle the client load:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6eb06818-75f8-4f63-ac17-3366045f7bde.png)'
  prefs: []
  type: TYPE_IMG
- en: Demonstrating the use of auto scaling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we shall demonstrate the use of auto scaling by adding an extra
    load to the Hello world service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Invoke the service using the public IP of one of the tasks; the public IP may
    be obtained from a task''s details, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8cda5241-19fa-4cd7-81bb-4c8ab56377a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, invoke the service in one browser only. The Hello world application
    gets invoked and the service response gets displayed in the browser, as shown
    in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/adc96582-e5f2-4d0f-a0dc-e329fe3edbad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To increase the load, invoke the same Hello world application multiple times
    using the curl tool. Run the following command on a Windows Command line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'An internal load balancer automatically distributes the client load among the
    tasks in a service, regardless of which task is invoked by a client. An external
    load balancer may also be configured, as discussed in a later chapter. As the
    client load on the Hello world service is increased, the number of tasks also
    gets increased if the existing number of tasks are not able to handle the load.
    As shown here, the number of running tasks has increased to four:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/766aed96-932a-48ff-b541-693536054a22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Increase the load on the service still further with the following curl command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown here, the number of tasks has increased to five, which is the maximum
    number of tasks that the auto scaler is able to scale to, as specified in the
    auto scaling configuration for the service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/90c79219-8933-4fe0-b73a-a0b431d1cca9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The five running tasks are listed in the Tasks tab for the service, as shown
    here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/77c7f1c3-dd96-45c7-bda6-8b222c89d43f.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploring CloudWatch metrics and Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we shall explore the CloudWatch metrics and logs generated
    by the ECS service and find log events for the CloudWatch alarm threshold being
    exceeded:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the CloudWatch console as shown here. The alarm summary for the `AutoScaleCPUUtilization`
    gets displayed in a graph.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on Browse Metrics to browse metrics:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/744a88c6-a18c-4326-918a-a4ca7b66f06b.png)'
  prefs: []
  type: TYPE_IMG
- en: Select Alarms in the margin. The AutoScaleBasedOnCPUUtilization alarm used as
    a threshold for auto scaling gets listed, as shown in the following screenshot.
    The alarm state is ALARM when the alarm threshold is exceeded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The AutoScaleBasedOnCPUUtilization alarm details and graph get displayed. The
    two spikes in CPU utilization in the graph indicate that the alarm threshold has
    been exceeded, which applies the auto scaling to add one task each time the alarm
    threshold is exceeded. The first spike in the graph is for when the load is increased
    slightly, and the second spike is for when the load is increased to a greater
    extent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee1ce06a-b45b-42d4-8bdd-41ccc6f9165e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the load on the ECS service is reduced, the alarm state becomes OK. Reducing
    client load does not by itself reduce the number of running tasks. The scaling
    action used as an example only scales up the tasks if client load increases. Another
    scaling action would need to be added to scale down tasks on client load reduction. In
    the History tab, two instances of auto scaling action are listed, as shown in
    the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f5622ac9-16ac-4c03-9236-7a2f6cbfa4e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Desired count of the service has been updated to 5, in addition to increasing
    the auto scaling running count to five tasks. The AutoScaleBasedOnCPUUtilization
    alarm may also be accessed from the auto scaling tab:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e95a6b47-efcd-4f1c-a3ef-298447545643.png)'
  prefs: []
  type: TYPE_IMG
- en: Updating auto scaling policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The auto scaling policy only scales the number of running (desired) tasks and
    does not modify the auto scaling policy, which is still set to a range of 1-5
    tasks. The service may be updated to modify any or all of the minimum number of
    tasks, desired count, maximum number of tasks, and scaling action for auto scaling.
    In this section, we shall discuss updating the auto scaling configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Update for the service as before. The Desired number of tasks is set
    to `5`, as shown here, when auto scaling is performed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/27910814-88b9-41e8-beff-ff38a12b4737.png)'
  prefs: []
  type: TYPE_IMG
- en: Reduce the Desired number of tasks to `3`, as shown here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To modify the scaling policy, click on the AutoScaler link, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/07a9e93a-a5c5-4aac-a45c-b7640385e392.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Edit policy, select Use an existing policy and select the AutoScaleBasedOnCPUUtilization
    policy. The scaling action does not have to be performed when the alarm threshold
    is breached. Modify the scaling action to Add 1 tasks when `0.9<=CPUUtilization`,
    as shown here. The alarm threshold is `CPUUtilization> 0.1` for 60 seconds, while
    the scaling action is performed when `CPUUtilization>=0.9`. The `AutoScaler` policy
    runs each time the CloudWatch alarm threshold is breached, but the scaling action
    is performed only when `CPUUtilization>=0.9`. Click on Save:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/42b209c8-7bf3-4f84-a698-098d0ffc5774.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The minimum and maximum number of tasks has not been modified and is still
    1 and 5 respectively. Click on Next step, and then click on Update Service, as
    shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/06549da3-c47b-49b3-94da-6ce27a11012a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The old auto scaling policy gets deleted and a new auto scaling policy gets
    created, as shown here. The scalable target is the same as before:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/08bb7b77-28e4-4dbb-baff-e078df9e737b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The CloudWatch alarm gets updated. Click on View Service. The Running count
    and Desired count of the service are both 3, as shown here. The scaling action
    has been updated to Add 1 tasks when 0.9 <= CPUUtilization:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e01c8498-b2b4-4e4a-b175-682d7af7f84f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Events tab lists the log events generated by the ECS service, as shown
    here. The number of running tasks had increased to five when the client load was
    increased. But, when the client load is removed and the scaling policy updated,
    the number of running tasks becomes three again. As listed in an event, the service
    has stopped two running tasks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0b55de94-3b24-49aa-82d5-36e162963cc0.png)'
  prefs: []
  type: TYPE_IMG
- en: Initially, one task is started. When the alarm threshold is breached for the
    first time, the scaling action is performed to set the desired count for the maximum
    number of tasks to four, as indicated by one of the log messages. The number of
    running tasks increases to four. When the load is increased still further, the
    alarm threshold is breached for the second time and a scaling action is performed
    to set the desired count for the maximum number of tasks to five. The number of
    running tasks increases to five. When the client load is removed and the service
    is updated to modify the desired count to three, two of the running tasks get
    stopped, as indicated by another event message.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced the ECS auto scaling service, as used with the
    Fargate launch type. Configuring auto scaling involves setting a range (minimum
    and maximum) for the number of tasks within which the auto scaling gets applied.
    Configuring auto scaling also requires an auto scaling policy, consisting of a
    CloudWatch alarm threshold for running the auto scaling policy, and one or more
    scaling actions to perform each time the auto scaling policy runs. In the next
    chapter, we shall discuss using an IAM user with Fargate.
  prefs: []
  type: TYPE_NORMAL
