- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Building Git Workflows for IaC and Terraform Projects
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为IaC和Terraform项目构建Git工作流
- en: In this chapter, we look at the pivotal role of Git workflows in managing **Infrastructure
    as Code** (**IaC**) and Terraform projects, particularly within **Amazon Web Services**
    (**AWS**) environments. We explore various Git workflows, offering insights to
    effectively implement them for optimized collaboration and code quality. This
    chapter provides a comprehensive guide on selecting, setting up, and managing
    Git workflows, along with tools specifically tailored for AWS and Terraform projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们重点讨论Git工作流在管理**基础设施即代码**（**IaC**）和Terraform项目中的关键作用，特别是在**亚马逊Web服务**（**AWS**）环境中的应用。我们探讨了各种Git工作流，并提供了实施它们的见解，以实现优化的协作和代码质量。本章还提供了关于选择、设置和管理Git工作流的全面指南，以及专为AWS和Terraform项目量身定制的工具。
- en: Security takes center stage as we share best practices to safeguard your Terraform
    projects, from backend security to **role-based access control** (**RBAC**) and
    compliance. We wrap up the chapter with strategic insights on streamlining AWS
    Terraform projects for enhanced efficiency and effectiveness.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性成为中心主题，我们分享了保护你的Terraform项目的最佳实践，从后端安全到**基于角色的访问控制**（**RBAC**）和合规性。我们通过战略性见解总结了本章内容，探讨了如何简化AWS
    Terraform项目，以提高效率和效果。
- en: In the subsequent chapters, we’ll expand on advanced strategies and tools, empowering
    you to elevate the security, efficiency, and scalability of your IaC and Terraform
    projects in AWS environments to new heights.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，我们将扩展有关高级策略和工具的内容，帮助你将AWS环境中的IaC和Terraform项目的安全性、效率和可扩展性提升到新的高度。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论以下主题：
- en: Why do we need a Git workflow?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为什么需要Git工作流？
- en: Implementing a Git workflow
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施Git工作流
- en: Tools and flows to use with AWS Terraform projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于AWS Terraform项目的工具和流程
- en: How to secure a Terraform project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何保护Terraform项目的安全
- en: Streamlining AWS Terraform projects
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化AWS Terraform项目
- en: Why do we need a Git workflow?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们为什么需要Git工作流？
- en: Git is a **version control system** (**VCS**) that allows multiple developers
    to work on the same code base while keeping track of changes and collaborating
    on code. A Git workflow is a set of guidelines that dictate how developers use
    Git to manage the code base.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个**版本控制系统**（**VCS**），它允许多个开发者在相同的代码库上工作，同时跟踪更改并协作开发代码。Git工作流是一套指导方针，规定了开发者如何使用Git来管理代码库。
- en: 'There are several Git workflows, but the most common one is a **Gitflow** workflow.
    A Gitflow workflow is a branching model that provides a clear separation of development
    branches and release branches. It consists of two main branches:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种Git工作流，但最常见的是**Gitflow**工作流。Gitflow工作流是一种分支模型，它提供了开发分支和发布分支的清晰分离。它由两个主要分支组成：
- en: '**Master branch**: The master branch represents the official code base, and
    it should always contain a stable, working version of the code.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主分支**：主分支代表官方代码库，应该始终包含一个稳定的、可工作的代码版本。'
- en: '**Develop branch**: The develop branch is used for ongoing development work.
    Developers create feature branches off the develop branch, make changes to the
    code, and then merge their changes back into the develop branch.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发分支**：开发分支用于进行持续的开发工作。开发者从开发分支创建功能分支，对代码进行修改，然后将修改合并回开发分支。'
- en: 'In addition to the master and develop branches, there are also feature branches,
    release branches, and hotfix branches:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了主分支和开发分支外，还有功能分支、发布分支和热修复分支：
- en: '**Feature branches** are used for developing new features. Developers create
    a new branch off the develop branch, make changes to the code, and then merge
    their changes back into the develop branch.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能分支**用于开发新特性。开发者从开发分支创建一个新分支，进行代码修改，然后将修改合并回开发分支。'
- en: '**Release branches** are used for preparing a new release. Developers create
    a new branch off the develop branch, perform final testing and bug fixing, and
    then merge their changes into the master branch.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布分支**用于准备新版本。开发者从开发分支创建一个新分支，进行最终测试和修复错误，然后将其更改合并到主分支。'
- en: '**Hotfix branches** are used to fix critical issues in the master branch. Developers
    create a new branch off the master branch, make changes to the code, and then
    merge their changes back into the master and develop branches.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**热修复分支**用于修复主分支中的关键问题。开发者从主分支创建一个新分支，进行代码修改，然后将修改合并回主分支和开发分支。'
- en: 'In addition to the Gitflow workflow, there are several other Git workflows
    that developers can use, depending on their needs and preferences. Here are some
    of the most common Git workflows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Gitflow 工作流外，还有几种其他 Git 工作流，开发人员可以根据他们的需求和偏好进行选择。以下是一些最常见的 Git 工作流：
- en: '**Centralized workflow**: In a centralized workflow, all developers work on
    a single master branch, and changes are made directly to the master branch. While
    this workflow is simple and straightforward, it can lead to conflicts and make
    it difficult to manage changes in the code base.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式工作流**：在集中式工作流中，所有开发人员都在单一的主分支上进行工作，并直接对主分支进行修改。虽然这种工作流简单直接，但可能会导致冲突，并使得代码库变更的管理变得困难。'
- en: '**Feature branch workflow**: In a feature branch workflow, developers create
    a new branch for each feature they work on. Once the feature is complete, they
    merge the changes back into the main branch. This workflow can be useful for teams
    that need to work on multiple features simultaneously.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特性分支工作流**：在特性分支工作流中，开发人员为每个开发的功能创建一个新的分支。一旦功能完成，他们将修改合并回主分支。这种工作流适用于需要同时开发多个功能的团队。'
- en: '**Forking workflow**: In a forking workflow, each developer creates their own
    copy of the repository, known as a fork. They make changes to the code base in
    their fork and then submit a pull request to the main repository to merge their
    changes. This workflow is often used for open source projects where contributions
    come from many different developers.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分叉工作流**：在分叉工作流中，每个开发人员都会创建自己版本库的副本，即分叉。他们在自己的分叉中对代码库进行修改，然后提交一个拉取请求（pull
    request），将其变更合并到主版本库中。这种工作流通常用于开源项目，贡献来自许多不同的开发人员。'
- en: No matter which workflow is used, Git provides a powerful set of tools for managing
    changes to the code base, collaborating with other developers, and ensuring that
    the code base remains stable and functional. By following a clear and consistent
    workflow, teams can work together more effectively and produce higher-quality
    code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种工作流，Git 都提供了一套强大的工具，用于管理代码库的变更、与其他开发人员协作，以及确保代码库保持稳定和功能正常。通过遵循清晰一致的工作流，团队可以更加高效地合作，产出更高质量的代码。
- en: Overall, a Git workflow helps developers manage changes to the code base, collaborate
    effectively, and ensure that the code base is always stable and functional.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，Git 工作流帮助开发人员管理代码库的变更，促进高效协作，并确保代码库始终稳定且功能正常。
- en: 'A Git workflow is important for several reasons:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Git 工作流重要的原因有以下几点：
- en: '**Collaboration**: A Git workflow allows multiple developers to work on the
    same code base without interfering with each other’s work. By following a consistent
    workflow, developers can manage changes to the code base in a clear and organized
    way, avoiding conflicts and making it easier to collaborate.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作**：Git 工作流使得多个开发人员可以在同一个代码库上工作而不会互相干扰。通过遵循一致的工作流，开发人员可以以清晰、有序的方式管理代码库的变更，避免冲突并且便于协作。'
- en: '**Change management**: A Git workflow allows developers to keep track of changes
    to the code base, including who made each change and when. This makes it easier
    to identify and resolve issues that arise during development and to roll back
    changes if necessary.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更管理**：Git 工作流允许开发人员跟踪代码库的变更，包括谁进行了哪些更改以及何时进行的。这使得开发过程中出现问题时更容易进行识别和解决，并能在必要时回滚变更。'
- en: '**Code quality**: A Git workflow can help improve code quality by providing
    a clear process for code review and testing. By following a consistent workflow,
    developers can ensure that code changes are thoroughly reviewed and tested before
    being merged into the main branch.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码质量**：Git 工作流通过提供清晰的代码审查和测试流程，帮助提高代码质量。通过遵循一致的工作流，开发人员可以确保代码变更在合并到主分支之前已经经过充分的审查和测试。'
- en: '**Release management**: A Git workflow provides a clear process for preparing
    and releasing new versions of the code base. By using feature branches and release
    branches, developers can ensure that new features are properly tested and that
    the code base remains stable and functional during the release process.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布管理**：Git 工作流提供了一个清晰的过程，用于准备和发布代码库的新版本。通过使用特性分支和发布分支，开发人员可以确保新特性经过充分测试，并确保在发布过程中代码库保持稳定和功能正常。'
- en: '**Efficiency**: A Git workflow can help teams work more efficiently by reducing
    time spent resolving conflicts and managing changes to the code base. By following
    a clear and consistent workflow, developers can focus on writing code and collaborating
    with their team members, rather than managing the technical details of version
    control.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：Git 工作流可以帮助团队更高效地工作，通过减少解决冲突和管理代码库变更所花费的时间。通过遵循清晰一致的工作流，开发人员可以专注于编写代码和与团队成员协作，而不是管理版本控制的技术细节。'
- en: In summary, a Git workflow provides a set of guidelines that help teams manage
    changes to the code base, collaborate more effectively, and ensure that the code
    base remains stable and functional throughout the development process. By following
    a consistent workflow, teams can work more efficiently and produce higher-quality
    code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Git 工作流提供了一套准则，帮助团队管理代码库的变更，更有效地协作，并确保代码库在整个开发过程中保持稳定和功能正常。通过遵循一致的工作流，团队可以更高效地工作，并生成更高质量的代码。
- en: Implementing a Git workflow
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施 Git 工作流
- en: 'Implementing a Git workflow involves defining a set of guidelines and processes
    that dictate how developers will use Git to manage the code base. Here are general
    steps for implementing a Git workflow:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 Git 工作流涉及定义一套准则和流程，规定开发人员如何使用 Git 来管理代码库。以下是实现 Git 工作流的一般步骤：
- en: '**Choose a Git workflow**: Choose the Git workflow that best suits the needs
    of your team and project. The most common Git workflow is Gitflow, but there are
    other workflows as well, such as a centralized workflow, a feature branch workflow,
    and a forking workflow.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择 Git 工作流**：选择最适合团队和项目需求的 Git 工作流。最常见的 Git 工作流是 Gitflow，但也有其他工作流，如集中式工作流、特性分支工作流和分叉工作流。'
- en: '**Set up the repository**: Create a Git repository to store the code base for
    your IAC project and set up the necessary branches, such as the master and develop
    branches.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置仓库**：创建一个 Git 仓库来存储你 IAC 项目的代码库，并设置必要的分支，例如主分支和开发分支。'
- en: '**Define a process for creating and merging feature branches**: Define a process
    for creating and merging feature branches, such as naming conventions, coding
    standards, code review, and testing. Typically, developers will create a new branch
    off the develop branch for each feature they work on, make changes to the code,
    and then merge their changes back into the develop branch.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义创建和合并特性分支的流程**：定义创建和合并特性分支的流程，例如命名规范、编码标准、代码审查和测试。通常，开发人员会从开发分支创建一个新的分支来处理每个特性，对代码进行更改，然后将更改合并回开发分支。'
- en: '**Define a process for preparing and releasing new versions**: Define a process
    for preparing and releasing new versions of the code base. This may involve creating
    a release branch off the develop branch, performing final testing and bug fixing,
    and then merging changes into the master branch.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义准备和发布新版本的流程**：定义准备和发布新版本代码库的流程。这可能涉及从开发分支创建一个发布分支，进行最终测试和修复 Bug，然后将更改合并到主分支。'
- en: '**Define a process for hotfixes**: Define a process for handling critical issues
    in the master branch. This may involve creating a hotfix branch off the master
    branch, making changes to the code, and then merging changes back into the master
    and develop branches.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义热修复流程**：定义处理主分支中关键问题的流程。这可能涉及从主分支创建一个热修复分支，对代码进行更改，然后将更改合并回主分支和开发分支。'
- en: '**Train the team**: Train the development team on the Git workflow, including
    how to create and merge branches, how to handle conflicts, and how to use Git
    to manage the code base effectively.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**培训团队**：对开发团队进行 Git 工作流的培训，包括如何创建和合并分支、如何处理冲突，以及如何有效地使用 Git 管理代码库。'
- en: '**Review and iterate**: Continuously review and iterate on the Git workflow
    to ensure that it is working effectively and meeting the needs of the team and
    project.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**审查和迭代**：持续审查和迭代 Git 工作流，以确保其有效运行，并满足团队和项目的需求。'
- en: Overall, implementing a Git workflow requires a clear understanding of the needs
    of the team and IaC project, as well as a willingness to experiment and iterate
    until the workflow is working effectively. With a well-defined Git workflow in
    place, teams can collaborate more effectively, manage changes to the IaC project
    code base more efficiently, and produce higher-quality templates.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，实施Git工作流程需要清楚了解团队和IaC项目的需求，以及愿意进行实验和迭代，直到工作流程有效为止。通过建立明确定义的Git工作流程，团队可以更有效地协作，更高效地管理IaC项目代码库的变更，并生成更高质量的模板。
- en: Tools and flows to use with AWS Terraform projects
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与AWS Terraform项目一起使用的工具和流程
- en: 'When using Terraform for AWS IAC projects, several Git tools can be used to
    implement a Git flow. Here are some of the most commonly used Git tools for Terraform:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS IAC项目中使用Terraform时，可以使用几种Git工具来实现Git流程。以下是一些常用于Terraform的Git工具：
- en: '**Git**: Git is a popular VCS that can be used to manage changes to Terraform
    code. With Git, you can create branches for different features, manage changes
    to the code base, and collaborate with other developers.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**: Git是一个流行的版本控制系统，可用于管理Terraform代码的变更。使用Git，您可以为不同的功能创建分支，管理代码库的变更，并与其他开发者进行协作。'
- en: '**GitHub**: GitHub is a popular Git hosting platform that provides features
    such as pull requests, code review, and collaboration tools. You can use GitHub
    to host your Terraform code and collaborate with other developers.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub**: GitHub是一个流行的Git托管平台，提供拉取请求、代码审查和协作工具等功能。您可以使用GitHub托管您的Terraform代码并与其他开发者进行协作。'
- en: '**GitLab**: GitLab is another popular Git hosting platform that provides features
    such as **continuous integration/continuous delivery** (**CI/CD**) and security
    scanning. You can use GitLab to host your Terraform code, manage pipelines, and
    collaborate with other developers.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLab**: GitLab是另一个流行的Git托管平台，提供持续集成/持续交付（CI/CD）和安全扫描等功能。您可以使用GitLab托管您的Terraform代码，管理流水线，并与其他开发者进行协作。'
- en: '**Bitbucket**: Bitbucket is a Git hosting platform that provides features such
    as pull requests, code review, and collaboration tools. You can use Bitbucket
    to host your Terraform code and collaborate with other developers.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bitbucket**: Bitbucket是一个提供拉取请求、代码审查和协作工具等功能的Git托管平台。您可以使用Bitbucket托管您的Terraform代码并与其他开发者进行协作。'
- en: When implementing a Git flow with Terraform, it’s important to follow a consistent
    workflow that includes branching strategies, pull requests, and code review. This
    can help ensure that changes to the Terraform code base are properly tested and
    reviewed before being merged into the main branch. Additionally, you may want
    to consider using tools such as Terraform Cloud or AWS CodePipeline for managing
    infrastructure deployment and release management.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Terraform实现Git流程时，重要的是要遵循一致的工作流程，包括分支策略、拉取请求和代码审查。这有助于确保Terraform代码库的更改在合并到主分支之前得到适当的测试和审查。此外，您可能还希望考虑使用像Terraform
    Cloud或AWS CodePipeline这样的工具来管理基础设施部署和发布管理。
- en: 'Here are some additional tips for implementing a Git flow with Terraform:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些实施Terraform Git流程的额外提示：
- en: '**Branching strategy**: When creating a branching strategy for Terraform, consider
    using a Gitflow-like approach with branches such as feature, develop, release,
    and master. You may also want to create separate branches for different environments,
    such as staging and production.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支策略**: 在为Terraform创建分支策略时，考虑使用类似于Gitflow的方法，例如feature、develop、release和master分支。您可能还希望为不同环境（如staging和production）创建单独的分支。'
- en: '**Pull requests and code review**: Use pull requests and code review to ensure
    that changes to the Terraform code base are properly reviewed and tested before
    being merged into the main branch. This can help catch potential issues early
    and prevent them from impacting the infrastructure.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉取请求和代码审查**: 使用拉取请求和代码审查确保对Terraform代码库的更改在合并到主分支之前得到适当的审查和测试。这有助于早期捕获潜在问题，并防止其影响基础架构。'
- en: '**Automated testing**: Consider using automated testing tools such as Terratest
    or Kitchen-Terraform to automate testing of your Terraform code base. This can
    help catch potential issues before they make it to production.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**: 考虑使用自动化测试工具，如Terratest或Kitchen-Terraform，来自动化测试您的Terraform代码库。这可以帮助在代码进入生产环境之前捕获潜在问题。'
- en: '**Versioning**: Use versioning tools such as **Semantic Versioning** (**SemVer**)
    to manage versioning of your Terraform code base. This can help ensure that changes
    are properly tracked and that different versions of the infrastructure can be
    easily managed and maintained.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：使用版本控制工具，如**语义版本控制**（**SemVer**），管理Terraform代码库的版本控制。这有助于确保变更得到妥善跟踪，不同版本的基础设施可以轻松管理和维护。'
- en: '**IaC best practices**: Follow best practices for IaC such as using modularity,
    separating configuration from code, and creating reusable modules. This can help
    ensure that your Terraform code base is scalable, maintainable, and secure.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IaC最佳实践**：遵循IaC最佳实践，如使用模块化、将配置与代码分离，并创建可重用的模块。这有助于确保你的Terraform代码库具有可扩展性、可维护性和安全性。'
- en: By following these tips and using the right Git tools, you can implement a robust
    and effective Git flow for your Terraform AWS IAC projects. This can help ensure
    that your infrastructure is properly managed, versioned, and tested and that your
    team can work efficiently and collaboratively.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些建议并使用正确的Git工具，你可以为你的Terraform AWS IAC项目实施一个强大且有效的Git流程。这有助于确保你的基础设施得到妥善管理、版本控制和测试，并确保团队能够高效且协同工作。
- en: How to secure a Terraform project
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何保护Terraform项目
- en: 'Securing a Terraform project involves taking several steps to ensure that the
    infrastructure is properly configured and protected against security threats.
    Here are some best practices for securing a Terraform project:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 保护Terraform项目需要采取多个步骤，确保基础设施得到妥善配置并防范安全威胁。以下是一些保护Terraform项目的最佳实践：
- en: '**Use a secure backend**: Terraform stores state information in a backend,
    which can be a remote service such as Amazon **Simple Storage Service** (**S3**)
    or Terraform Cloud. Make sure that the backend is properly secured, with appropriate
    access controls and encryption.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全的后端**：Terraform将状态信息存储在后端，可以是远程服务，如Amazon **简单存储服务**（**S3**）或Terraform
    Cloud。确保后端已得到妥善保护，具备适当的访问控制和加密措施。'
- en: '**Use variables and secrets**: Use variables and secrets to store sensitive
    information such as API keys, passwords, and other secrets. Store these variables
    and secrets in a secure location such as AWS Secrets Manager or a secure configuration
    management tool.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用变量和秘密**：使用变量和秘密存储敏感信息，如API密钥、密码等。将这些变量和秘密存储在安全的位置，如AWS Secrets Manager或安全的配置管理工具中。'
- en: '**Use secure networking**: Ensure that the network configuration for the infrastructure
    is properly secured, with appropriate firewalls, **network security groups** (**NSGs**),
    and **virtual private networks** (**VPNs**) in place.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全的网络配置**：确保基础设施的网络配置已得到妥善保护，包括适当的防火墙、**网络安全组**（**NSGs**）和**虚拟私人网络**（**VPNs**）。'
- en: '**Follow least privilege**: Use the **principle of least privilege** (**PoLP**)
    to ensure that access to the infrastructure is properly controlled. Use RBAC to
    ensure that only authorized users have access to the infrastructure.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遵循最小权限原则**：使用**最小权限原则**（**PoLP**）确保对基础设施的访问得到妥善控制。使用RBAC确保只有授权用户才能访问基础设施。'
- en: '**Monitor for changes**: Monitor the infrastructure for changes and unusual
    activity. Use automated tools such as AWS CloudTrail to track changes to the infrastructure
    and identify potential security threats.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控变更**：监控基础设施的变更和异常活动。使用自动化工具，如AWS CloudTrail，追踪基础设施的变更并识别潜在的安全威胁。'
- en: '**Use security tools**: Use security tools such as vulnerability scanners and
    penetration testing tools to identify potential security threats and vulnerabilities
    in the infrastructure.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全工具**：使用安全工具，如漏洞扫描仪和渗透测试工具，识别基础设施中潜在的安全威胁和漏洞。'
- en: '**Regularly update and patch**: Regularly update and patch the infrastructure
    to ensure that it is protected against known security threats and vulnerabilities.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期更新和修补**：定期更新和修补基础设施，确保其免受已知安全威胁和漏洞的侵害。'
- en: '**Use secure coding practices**: Use secure coding practices such as input
    validation, error checking, and output encoding to prevent security vulnerabilities
    such as injection attacks.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全编码实践**：采用安全编码实践，如输入验证、错误检查和输出编码，以防止诸如注入攻击等安全漏洞。'
- en: '**Enable auditing**: Enable auditing for your infrastructure to track changes
    and identify security threats. Use tools such as AWS Config to track changes to
    your infrastructure and monitor for security threats.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用审计**：启用基础设施审计，以跟踪变更并识别安全威胁。使用工具，如 AWS Config，来跟踪基础设施的变更并监控安全威胁。'
- en: '**Use encryption**: Use encryption to protect sensitive data such as API keys,
    passwords, and other secrets. Use encryption tools such as AWS **Key Management
    Service** (**KMS**) to encrypt and store sensitive data.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用加密**：使用加密保护敏感数据，如 API 密钥、密码和其他秘密。使用加密工具，如 AWS **密钥管理服务** (**KMS**) 来加密并存储敏感数据。'
- en: '**Use multi-factor authentication (MFA)**: Use MFA to ensure that only authorized
    users have access to your infrastructure. Use MFA tools such as AWS MFA to add
    an extra layer of security to your infrastructure.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用多因素认证 (MFA)**：使用 MFA 确保只有授权用户可以访问你的基础设施。使用 MFA 工具，如 AWS MFA，为你的基础设施添加额外的安全层。'
- en: '**Implement disaster recovery (DR)**: Implement DR measures to ensure that
    your infrastructure can recover from security incidents and other disasters. Use
    tools such as AWS **Elastic Disaster Recovery** (**DRS**) to implement DR measures
    for your infrastructure.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施灾难恢复 (DR)**：实施灾难恢复措施，以确保你的基础设施能够从安全事件和其他灾难中恢复。使用工具，如 AWS **弹性灾难恢复** (**DRS**)
    来为你的基础设施实施灾难恢复措施。'
- en: '**Follow compliance standards**: Follow compliance standards such as the **Payment
    Card Industry Data Security Standard** (**PCI DSS**) or the **Health Insurance
    Portability and Accountability Act** (**HIPAA**) to ensure that your infrastructure
    meets the necessary security and compliance requirements.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遵循合规标准**：遵循合规标准，如 **支付卡行业数据安全标准** (**PCI DSS**) 或 **健康保险可携性与责任法案** (**HIPAA**)，以确保你的基础设施符合必要的安全和合规要求。'
- en: By following these additional steps, you can further enhance the security of
    your Terraform project and help ensure that your infrastructure is properly protected
    against security threats. It’s important to regularly review and update your security
    measures to ensure that your infrastructure remains secure over time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些额外步骤，你可以进一步增强 Terraform 项目的安全性，并帮助确保你的基础设施免受安全威胁。定期审查和更新你的安全措施，以确保你的基础设施在长期内保持安全，是非常重要的。
- en: Streamlining AWS Terraform projects
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精简 AWS Terraform 项目
- en: 'Streamlining an AWS Terraform project involves taking steps to optimize the
    infrastructure deployment process, reduce the time and effort required for deployment,
    and improve the efficiency of the development process. Here are some best practices
    for streamlining an AWS Terraform project:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 精简 AWS Terraform 项目涉及采取措施优化基础设施部署过程，减少部署所需的时间和精力，并提高开发过程的效率。以下是精简 AWS Terraform
    项目的最佳实践：
- en: '**Use modular code**: Use modular code to create reusable templates and modules
    that can be easily shared across the project. This can help reduce the amount
    of duplicated code and make it easier to maintain and update the infrastructure.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用模块化代码**：使用模块化代码创建可重用的模板和模块，这些模板和模块可以轻松地在项目中共享。这可以帮助减少重复代码，并使基础设施的维护和更新更容易。'
- en: '**Use Terraform modules**: Use Terraform modules to encapsulate reusable infrastructure
    components such as security groups, load balancers, and databases. This can help
    simplify the infrastructure deployment process and reduce the time and effort
    required for deployment.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Terraform 模块**：使用 Terraform 模块来封装可重用的基础设施组件，如安全组、负载均衡器和数据库。这可以帮助简化基础设施部署过程，减少部署所需的时间和精力。'
- en: '**Use Terraform workspaces**: Use Terraform workspaces to manage multiple environments
    such as development, staging, and production. This can help streamline the deployment
    process and ensure that the infrastructure is properly configured for each environment.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Terraform 工作空间**：使用 Terraform 工作空间来管理多个环境，如开发、预发布和生产。这可以帮助简化部署过程，并确保每个环境中的基础设施配置正确。'
- en: '**Use Terraform Cloud**: Use Terraform Cloud to automate the deployment process
    and manage IaC. Terraform Cloud provides features such as collaboration, version
    control, and CI/CD, which can help streamline the development process.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Terraform Cloud**：使用 Terraform Cloud 自动化部署过程并管理基础设施即代码 (IaC)。Terraform
    Cloud 提供协作、版本控制和 CI/CD 等功能，这些功能可以帮助简化开发过程。'
- en: '**Use automated testing**: Use automated testing tools such as Terratest or
    Kitchen-Terraform to automate the testing of your Terraform code base. This can
    help catch potential issues before they make it to production and reduce the amount
    of manual testing required.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用自动化测试**：使用自动化测试工具，如Terratest或Kitchen-Terraform，来自动化测试你的Terraform代码库。这有助于在代码进入生产环境之前发现潜在问题，并减少手动测试的工作量。'
- en: '**Use CI/CD**: Use CI/CD tools such as Jenkins, GitLab CI/CD, or AWS CodePipeline
    to automate the deployment process and reduce the time and effort required for
    deployment.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用CI/CD**：使用CI/CD工具，如Jenkins、GitLab CI/CD或AWS CodePipeline，来自动化部署过程，并减少所需的时间和精力。'
- en: '**Use IAC best practices**: Follow IAC best practices such as separating configuration
    from code, creating reusable modules, and using version control. This can help
    simplify the infrastructure deployment process and reduce the time and effort
    required for deployment.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遵循IAC最佳实践**：遵循IAC最佳实践，如将配置与代码分离、创建可重用模块和使用版本控制。这有助于简化基础设施部署过程，并减少所需的时间和精力。'
- en: '**Use tagging**: Use tagging to label and organize your infrastructure resources.
    This can help simplify management and make it easier to identify and manage resources.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用标签**：使用标签为你的基础设施资源进行标记和组织。这有助于简化管理，并使识别和管理资源更加容易。'
- en: '**Use AWS managed services**: Use AWS managed services such as Amazon **Relational
    Database Service** (**RDS**), Amazon ElastiCache, or Amazon **Simple Notification
    Service** (**SNS**) instead of managing infrastructure components manually. This
    can help simplify the deployment process and reduce the amount of manual work
    required.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用AWS托管服务**：使用AWS托管服务，如Amazon **关系数据库服务**（**RDS**）、Amazon ElastiCache或Amazon
    **简单通知服务**（**SNS**），而不是手动管理基础设施组件。这可以帮助简化部署过程，并减少所需的手动工作。'
- en: '**Monitor infrastructure health**: Monitor the health of your infrastructure
    using Amazon CloudWatch. This can help identify potential issues early and prevent
    downtime.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控基础设施健康**：使用Amazon CloudWatch监控你的基础设施健康状况。这有助于及早识别潜在问题，防止停机。'
- en: '**Use parameterized templates**: Use parameterized templates to create reusable
    templates that can be customized for different environments. This can help simplify
    the deployment process and reduce the time and effort required for deployment.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用参数化模板**：使用参数化模板创建可重用的模板，这些模板可以根据不同环境进行定制。这有助于简化部署过程，并减少所需的时间和精力。'
- en: By following these steps, you can streamline your AWS Terraform project and
    improve the efficiency of the development process. It’s important to regularly
    review and update your infrastructure deployment process to ensure that it remains
    efficient and effective over time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，你可以简化你的AWS Terraform项目，并提高开发过程的效率。定期审查和更新基础设施部署过程非常重要，以确保它随着时间的推移依然高效和有效。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we unfolded the intricacies of integrating Git workflows into
    IaC and Terraform projects. We demystified the art of selecting and implementing
    robust Git workflows and elucidated security protocols essential for safeguarding
    your Terraform projects. We also navigated through strategies to enhance the efficiency
    of deploying AWS Terraform projects, setting the stage for advanced, streamlined,
    and secure infrastructure deployment.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们展开了将Git工作流集成到IaC和Terraform项目中的复杂性。我们揭开了选择和实施强大Git工作流的艺术，并阐明了保护Terraform项目的安全协议。我们还探讨了提升部署AWS
    Terraform项目效率的策略，为更高级、精简且安全的基础设施部署奠定了基础。
- en: As we transition into the next chapter, *Automating the Deployment of Terraform
    Projects*, prepare to delve deeper into the world of automation, where we’ll explore
    cutting-edge tools and methodologies designed to optimize, expedite, and enhance
    the precision of deploying Terraform projects, turning complexity into simplicity
    and challenges into opportunities. We’re on the brink of transforming theory into
    actionable insights!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们过渡到下一章，*自动化Terraform项目的部署*时，准备深入探索自动化的世界，在这里我们将探讨旨在优化、加速和提高部署Terraform项目精确性的前沿工具和方法，将复杂性转化为简易，将挑战转变为机遇。我们即将将理论转化为可操作的见解！
