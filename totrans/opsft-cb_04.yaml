- en: Chapter 4. Using MySQL with OpenShift Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter presents a number of recipes that show you how to get started
    with the OpenShift MySQL database cartridge. You will learn how to add and manage
    the MySQL cartridge, how to take MySQL database backups, and how to use Amazon
    RDS MySQL support with OpenShift applications. The specific recipes within this
    chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a MySQL cartridge to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a phpMyAdmin cartridge to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a MySQL database from your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a MySQL cartridge from your local machine using MySQL Workbench
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the MySQL max connections setting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the MySQL configuration settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing scheduled MySQL database backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an Amazon RDS MySQL DB instance with OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every typical web application needs some sort of persistent data storage on
    the backend. OpenShift supports a number of options to store your data, including
    several third-party providers that liberate you from having to deal with hardware
    provisioning and database management. At the time of writing this book, OpenShift
    officially supports the MySQL, PostgreSQL, and MongoDB data stores. Apart from
    these supported databases, there are third-party downloadable database cartridges
    available for data stores, such as Redis and MariaDB. Red Hat does not support
    downloadable cartridges, so you have to use them at your own risk. This chapter
    will cover the MySQL cartridge in detail. [Chapter 5](part0070_split_000.html#page
    "Chapter 5. Using PostgreSQL with OpenShift Applications"), *Using PostgreSQL
    with OpenShift Applications*, and [Chapter 6](part0079_split_000.html#page "Chapter 6. Using
    MongoDB and Third-party Database Cartridges with OpenShift Applications"), *Using
    MongoDB and Third-party Database Cartridges with OpenShift Applications,* will
    cover the PostgreSQL and MongoDB cartridges respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will use the PHP 5.4 application we created in [Chapter 3](part0041_split_000.html#page
    "Chapter 3. Creating and Managing Applications"), *Creating and Managing Applications*.
    If you do not have any OpenShift application running, then you can create a new
    OpenShift application by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, we created a nonscalable application, as we have not
    used the `–s` option. If the application is nonscalable, then the database cartridges
    are installed on the same gear as the primary application gear. If you created
    a scalable application, then the database cartridge is installed on its own gear.
    This allows a database to use all the available RAM and disk space. We will cover
    scalable applications in [Chapter 11](part0131_split_000.html#page "Chapter 11. Logging
    and Scaling Your OpenShift Applications"), *Logging and Scaling Your OpenShift
    Applications*.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift also provides a persistent data directory to store your data. The
    persistent data directory is not scalable and, hence, should not be used with
    scalable applications. For scalable applications, you should use a third-party
    service such as Amazon S3.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift supports stock-standard, security-hardened distributions of MySQL,
    PostgreSQL, and MongoDB databases. If something goes wrong, the OpenShift operation
    team is available to fix operational issues. Also, as you are using standard versions
    of databases, you are not locked inside OpenShift and can easily port your data
    if required. In this chapter, we will cover how to take periodic backups of your
    database cartridges to make sure you always have your data in case something goes
    wrong.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use third-party database services, such as Amazon RDS, if running
    your database in OpenShift is not possible, or you have already invested in third-party
    services. Another reason you might like to use a third-party database service
    is that the OpenShift database cartridges are not scalable. So, for applications
    where you need horizontally scalable, highly available databases, you can use
    any of the third-party database services covered in this chapter. This chapter
    will cover how to use Amazon RDS with OpenShift applications. [Chapter 5](part0070_split_000.html#page
    "Chapter 5. Using PostgreSQL with OpenShift Applications"), *Using PostgreSQL
    with OpenShift Applications*, and [Chapter 6](part0079_split_000.html#page "Chapter 6. Using
    MongoDB and Third-party Database Cartridges with OpenShift Applications"), *Using
    MongoDB and Third-party Database Cartridges with OpenShift Applications*, will
    cover third-party PostgreSQL and MongoDB cloud database services.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a MySQL cartridge to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of this writing, OpenShift supports two versions of the MySQL database.
    You can view the supported MySQL versions by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for this recipe, you will need the `rhc` command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for more details.
    Also, we will use the application created in the *Creating an OpenShift application
    using the rhc command-line client* recipe in [Chapter 3](part0041_split_000.html#page
    "Chapter 3. Creating and Managing Applications"), *Creating and Managing Applications*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add the MySQL database cartridge to your OpenShift application
    and manage it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the MySQL 5.5 cartridge to the `myapp` application, open a new command-line
    terminal, change the directory to the `myapp` directory location, and execute
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will install a new instance of the MySQL database on your application
    gear. The `-c` option is used to specify the cartridge name, and the `--app` option
    is used to specify the application name. The `--app` option is not required if
    you are running the command from within the application directory. The `-c` option
    is required, but you can get away from writing `-c` as the `rhc` command-line
    client is intelligent enough to infer that `mysql-5.5` is the cartridge name.
    This can be seen in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can view the cartridge details using the `rhc show-cartridge` command as
    shown in the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To stop the MySQL database cartridge, use the `stop` command as shown in this
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To restart the MySQL database cartridge, use the `restart` command as shown
    in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, if you want to remove the MySQL database from your application, you
    can use the `remove` command as shown in this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you run the `rhc cartridge-add` command, `rhc` will make an HTTP POST
    request to the OpenShift server. The OpenShift server will receive the request
    and instantiate a new instance of the MySQL server for your application. After
    provisioning the MySQL server, the `rhc` client will show the database details
    on the command-line terminal as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view the MySQL installation by performing SSH into your application
    gear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run the `ls` command to view the gear directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `mysql` directory hosts your `mysql` installation. The MySQL database is
    not shared with any other OpenShift application or user. It is only for your application,
    and only your application can access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can connect to the `mysql` directory with your MySQL database using the
    `mysql` command-line client as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can run SQL commands against your MySQL server. To view all the databases,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `myapp` database corresponds to your application database. You can use
    this database for your application or create a new database using the `CREATE
    DATABASE` command. To view the uptime of your MySQL database, try running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The output shows that the MySQL server is up from the last `2573` seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view all the available MySQL command-line utilities on the gear by
    typing `mysql` and hitting *Tab* twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also add MySQL cartridges from the OpenShift web console. Go to [https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications),
    and click on the `myapp` application for details. On the `myapp` application details
    web page, you will see the option to add the MySQL database as shown in the following
    screenshot. Click on the **Add MySQL 5.5** link to add the MySQL 5.5 cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on the **Add Cartridge** button to add the MySQL 5.5 cartridge
    to your application as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After installing the MySQL cartridge, you will be shown the MySQL database
    details as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
    in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating and Managing
    Applications"), *Creating and Managing Applications*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a phpMyAdmin cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Accessing a MySQL database from your local machine recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a phpMyAdmin cartridge to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: phpMyAdmin (which you can access at [http://www.phpmyadmin.net/](http://www.phpmyadmin.net/))
    is a free, open source, and popular tool written in the PHP programming language
    to handle the administration of the MySQL database via a web browser. In this
    recipe, you will learn how to install a phpMyAdmin cartridge to your application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MySQL cartridge.
    Please refer to the *Adding a MySQL cartridge to your application* recipe in this
    chapter to learn how to add a MySQL cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe will walk you through all the steps required to add a phpMyAdmin
    cartridge to the OpenShift application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the phpMyAdmin cartridge to the `myapp` application, open a new
    command-line terminal, change the directory to the `myapp` directory location,
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the username and password returned by the `rhc add-cartridge` command.
    You will need the credentials to log in to phpMyAdmin. The phpMyAdmin credentials
    are the same as your MySQL database credentials, and you can view them anytime
    by executing the `rhc show-app` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to phpMyAdmin, accessible at `https://myapp-{domain-name}.rhcloud.com/phpmyadmin/`,
    using the credentials you got in step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you run the `rhc cartridge-add` command, the `rhc` client makes an HTTP
    POST request to the OpenShift server. The OpenShift server receives the request
    and installs the phpMyAdmin cartridge on the application gear. The phpMyAdmin
    cartridge works with all the supported application types (Java, Python, Node.js,
    Ruby, Perl, and PHP). You don't need to create PHP applications to use the phpMyAdmin
    cartridge. OpenShift will start an Apache process to run the phpMyAdmin application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can only add a phpMyAdmin cartridge after you have added a MySQL cartridge
    to your application. If you try to add the phpMyAdmin cartridge before adding
    the MySQL cartridge, then you will get an error, `Cartridge 'phpmyadmin-4' cannot
    be added without mysql`. The dependency `mysql` can be satisfied with `mysql-5.5`
    or `mysql-5.1`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also add the phpMyAdmin cartridge from the OpenShift web console. Go
    to [https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications),
    and add the phpMyAdmin cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MySQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Accessing a MySQL database from your local machine* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a MySQL database from your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Adding a MySQL cartridge to your application* recipe of this chapter,
    you learned how to access the MySQL database by performing an SSH into the application
    gear. In this recipe, you will learn how to connect with the MySQL database from
    your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MySQL cartridge.
    Please refer to the *Adding a MySQL cartridge to your application* recipe to learn
    how to install a MySQL cartridge. Also, you will need the `mysql` command-line
    client on your machine. You can download the MySQL community server (which includes
    the `mysql` command-line client) from the official website at [http://dev.mysql.com/downloads/mysql/](http://dev.mysql.com/downloads/mysql/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to access the MySQL cartridge from your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command-line terminal, and change the directory to the `myapp` application
    directory. Execute the following command to forward remote ports to the local
    machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding command will list down ports along with services
    that you could use to connect from your local machine. The output is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Connect to the MySQL server from the local `mysql` command-line client as shown
    in the following command. You can get the username and password for the MySQL
    cartridge using the `rhc show-app` or `rhc cartridge-show` `mysql` command. The
    hostname and port are available in the output of the `rhc port-forward` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once connected to the MySQL server, you can run any valid SQL command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In step 1, you used the `rhc port-forward` command to forward all the remote
    ports to the local machine. The `rhc port-forward` command is a wrapper around
    the SSH port. Forwarding that makes a port on the remote machine available on
    your local machine. A port on the remote machine, which would otherwise be unavailable
    to you, can be used just as if it''s on your local machine. The following command
    returns the list of ports that you can connect to from your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding output, the MySQL process is available at
    port `3306` on the `127.0.0.1` host.
  prefs: []
  type: TYPE_NORMAL
- en: In step 2, you connected to the MySQL server from your local machine, passing
    in the username, password, host, and port of the database. After successful connection,
    you ran a SQL command in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: To terminate port forwarding, just press *Ctrl* + *C* on the command-line terminal
    where the `rhc port-forward` command is running.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MySQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Connecting to a MySQL cartridge from your local machine using MySQL Workbench*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a MySQL cartridge from your local machine using MySQL Workbench
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Accessing a MySQL database from your local machine* recipe, we showed
    you how to connect to the MySQL database from the `mysql` command line from your
    local machine using port forwarding. In this recipe, you will learn how to connect
    to the MySQL database from MySQL Workbench. MySQL Workbench is a visual database
    design tool that integrates SQL development, administration, database design,
    creation, and maintenance into a single integrated development environment for
    the MySQL database system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MySQL cartridge.
    Please refer to the *Adding a MySQL cartridge to your application* recipe of this
    chapter to learn how to install the MySQL cartridge. Also, you will need MySQL
    Workbench on your local machine. You can download MySQL Workbench from the MySQL
    official website at [http://dev.mysql.com/downloads/tools/workbench/](http://dev.mysql.com/downloads/tools/workbench/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to connect to the MySQL cartridge from MySQL Workbench running
    on your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command-line terminal, and change the directory to the `myapp` application
    directory. Execute the following command to forward the remote ports to the local
    machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the MySQL Workbench application, and you will see the following screenshot.
    Click on the plus button to add a new MySQL connection.![How to do it…](img/00026.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a new connection by entering the MySQL database details. You can get
    the username and password for the MySQL cartridge using the `rhc show-app` or
    `rhc cartridge-show` `mysql` command. The hostname and port are available in the
    output of the `rhc port-forward` command. The following screenshot shows the **Setup
    New Connection** page:![How to do it…](img/00027.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, test the connection by clicking on the **Test Connection** button. After
    successful connection, you will see the following dialog box with the message
    **Connection parameters are correct**:![How to do it…](img/00028.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to the MySQL cartridge by clicking on the **OK** button. You will see
    the new connection listed on the MySQL Workbench screen shown in the following
    screenshot. Click on the connection to open SQL Editor.![How to do it…](img/00029.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can run any legitimate SQL query from within SQL Editor as shown in
    the following screenshot:![How to do it…](img/00030.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you used the `rhc port-forward` command to forward all the remote
    ports to the local machine. This makes it possible to connect to the MySQL database
    running inside your application gear. From step 2 through to step 6, you created
    a new MySQL connection and connected with the MySQL cartridge from within MySQL
    Workbench. In Step 7, you executed a SQL query using SQL Editor to check whether
    that connection is getting data from the MySQL cartridge installed in your `myapp`
    application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MySQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Accessing a MySQL database from your local machine* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the MySQL max connections setting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL database will start giving too many connection errors when all the
    available connections are in use by other clients. In this recipe, you will learn
    how to update the MySQL cartridge max connections setting.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MySQL cartridge.
    Please refer to the *Adding a MySQL cartridge to your application* recipe of this
    chapter to learn how to install the MySQL cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to update the MySQL max connection setting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the maximum connections to `200`, open a command-line terminal, and
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After setting the environment variable, you have to restart the MySQL cartridge
    for changes to take effect using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The number of connections supported by the MySQL database is controlled by
    the `max_connections` system variable. The default value of `max_connections`
    is `151`. You can see the current value by running the following SQL query against
    your MySQL database. To see `max_connections` for your OpenShift application,
    SSH into the application gear, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'One way to configure the `max_connections` system variable is to add `max_connections
    = 200` under the `[mysqld]` section in the `my.cnf` MySQL configuration file.
    This solution does not work with OpenShift as the `my.cnf` file is read-only.
    To allow users to change the `max_connections` value, OpenShift provides an environment
    variable called `OPENSHIFT_MYSQL_MAX_CONNECTIONS` that can be used to set the
    `max_connections` system variable. In step 1, you set the `OPENSHIFT_MYSQL_MAX_CONNECTIONS`
    environment variable to `200`. The MySQL server will not read the new value unless
    you restart the database. So, in step 2, you restarted the database using the
    `rhc cartridge-restart` command. To verify whether the `max_connections` value
    is updated, you can run the following SQL command again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the recommended way to update the MySQL `max_connections` system variable
    value. The only drawback with this approach is that you have to restart the MySQL
    database, which, depending on the circumstances, may not be the ideal way. Another
    way you could update the `max_connections` system variable is by issuing the following
    SQL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This will take immediate effect and will not require a restart. However, this
    value will be lost once the MySQL database is restarted.
  prefs: []
  type: TYPE_NORMAL
- en: The best solution is to combine the two approaches. Run the `set global max_connections
    = 200;` SQL command to make sure `max_connections` is instantly updated, and then
    create a new environment variable using the `rhc env-set` command. This means
    the next time your MySQL database is started, it will pick the value from the
    environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MySQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Updating the MySQL configuration settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the MySQL configuration settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL database stores its configuration settings in the `my.cnf` file. This
    file is located under the `conf` directory inside the MySQL cartridge installation.
    As mentioned in the previous recipe, OpenShift does not allow users to update
    the `my.cnf` configuration file. The solution is to use a set of environment variables
    to configure various settings of the MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this book, you could configure the following MySQL settings
    through the environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '| MySQL setting | OpenShift environment variable |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `lower_case_table_names` | `OPENSHIFT_MYSQL_LOWER_CASE_TABLE_NAMES` |'
  prefs: []
  type: TYPE_TB
- en: '| `default-storage-engine` | `OPENSHIFT_MYSQL_DEFAULT_STORAGE_ENGINE` |'
  prefs: []
  type: TYPE_TB
- en: '| `max_connections` | `OPENSHIFT_MYSQL_MAX_CONNECTIONS` |'
  prefs: []
  type: TYPE_TB
- en: '| `ft_min_word_len` | `OPENSHIFT_MYSQL_FT_MIN_WORD_LEN` |'
  prefs: []
  type: TYPE_TB
- en: '| `ft_max_word_len` | `OPENSHIFT_MYSQL_FT_MAX_WORD_LEN` |'
  prefs: []
  type: TYPE_TB
- en: '| `innodb_use_native_aio` | `OPENSHIFT_MYSQL_AIO` |'
  prefs: []
  type: TYPE_TB
- en: '| `default-time-zone` | `OPENSHIFT_MYSQL_TIMEZONE` |'
  prefs: []
  type: TYPE_TB
- en: '| `table_open_cache` | `OPENSHIFT_MYSQL_TABLE_OPEN_CACHE` |'
  prefs: []
  type: TYPE_TB
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MySQL cartridge.
    Please refer to the *Adding a MySQL cartridge to your application* recipe of this
    chapter to learn how to add a MySQL cartridge to your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to update the MySQL `lower_case_table_names` configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the `lower_case_table_names` setting, you should type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After setting the environment variable, you have to restart the MySQL cartridge
    for changes to take effect using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The way it works is that OpenShift provides a set of environment variables that
    you can set to configure the MySQL configuration settings. After setting the environment
    variable, you have to restart the MySQL database so that it can use the new configuration
    value.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MySQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Updating the MySQL max connections setting* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing scheduled MySQL database backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to perform a scheduled backup of your MySQL
    database and upload it to Amazon S3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MySQL cartridge.
    Please refer to the *Adding a MySQL cartridge to your application* recipe of this
    chapter to learn how to install the MySQL cartridge. Also, you need to have an
    Amazon AWS account. Visit [http://aws.amazon.com/](http://aws.amazon.com/), and
    sign up for a new account if you don't have one already.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to schedule a daily backup of your MySQL cartridge:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://console.aws.amazon.com/s3/home](https://console.aws.amazon.com/s3/home),
    and create a new bucket to store your database backups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `cron` cartridge to your application by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'SSH into the application gear, and download the `s3-bash` utility in `$OPENSHIFT_DATA_DIR`.
    Then, extract it to the `s3-bash` directory by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file called `AWSSecretAccessKeyIdFile` in the `$OPENSHIFT_DATA_DIR/s3-bash`
    directory, and store your Amazon access key secret to it. This is required by
    `s3-bash` to communicate with Amazon S3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a script on your local machine at `.openshift/cron/minutely` named `database_backup.sh`,
    and add the following contents to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding script will run every day at `23:50` and run the `mysqldump` command
    to create the data dump file. The file is then transferred to Amazon S3 using
    the `s3-bash` API. Finally, after uploading the file, it deletes the SQL dump
    file from the application gear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following environment variables. Please refer to the Amazon EC2
    documentation for detailed steps on how to create access keys and `S3 bucket`.
    You then run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Following this, commit the code, and push it to the OpenShift application gear.
    The scheduled job will run every night at `23:50` (11:50 pm) to take database
    backup, and your backup will be uploaded to Amazon S3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you created a new Amazon S3 bucket to store your MySQL database backups.
    Amazon S3 is widely used to store static files and is an ideal choice for this
    job. Next, in step 2, you added the `cron` cartridge to your application. The
    `cron` cartridge will be used to perform daily backups at a particular time.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon S3 exposes its REST service, which users can use to perform operations
    on S3 buckets. Amazon provides many programming languages wrapped around its REST
    API to make it easy for developers to integrate with their application. As we
    wanted to keep this recipe language agnostic, we used the Amazon `S3-bash` wrapper.
    Amazon does not officially support this wrapper but it works very well nonetheless.
    In step 3, you downloaded the `s3-bash` wrapper using the `wget` utility. The
    `tar.gz` file was stored in `$OPENSHIFT_DATA_DIR`. You then extracted the `tar.gz`
    file to the `s3-bash` directory.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, you created a file called `AWSSecretAccessKeyIdFile` to store the
    Amazon access key secret. The `s3-bash` wrapper uses this file for the AWS secret
    access key ID so that it does not appear in the list of running processes with
    `ps`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 5, you created a bash script that will be executed every night at 11:50
    pm. The script first takes the database backup using the `mysqldump` command and
    then uploads the file to Amazon S3\. The filename is the current timestamp. Finally,
    after uploading the backup to S3, the script deletes the backup to save disk space.
    If your MySQL database is big, then you might want to compress the `mysqldump`
    output. You just have to update the `mysqldump` command in step 5 to the one shown
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, we have used `gzip`, a popular data compression program,
    to compress the `mysqldump` output.
  prefs: []
  type: TYPE_NORMAL
- en: In Step 6, you created three environment variables required by the backup script.
    Finally, you committed the changes in step 7 and pushed them to the OpenShift
    application gear.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MySQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an Amazon RDS MySQL DB instance with OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon Relational Database Service** (**Amazon RDS**) is a web service that
    makes it easy for you to set up, operate, and scale a relational database on top
    of Amazon EC2\. It provides access to MySQL, Oracle, PostgreSQL, and Microsoft
    SQL Server database engines. In addition to the standard database features, RDS
    offers the following functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic database patches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Point-in-time recovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vertical scaling of a database instance via a single API call
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use the Amazon RDS MySQL database service
    with your OpenShift applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with a MySQL cartridge.
    Please refer to the *Adding a MySQL cartridge to your application* recipe of this
    chapter to learn how to install the MySQL cartridge. Also, you need to have an
    Amazon AWS account. Visit [http://aws.amazon.com/](http://aws.amazon.com/), and
    sign up for a new account if you don't have one already.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the Amazon RDS MySQL database with your
    OpenShift applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://console.aws.amazon.com/rds/home](https://console.aws.amazon.com/rds/home),
    and then click on **Security Groups** as shown in the following screenshot:![How
    to do it…](img/00031.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create DB Security Group** option to create a new security group,
    and then enter the details for your new security group (as shown in the following
    screenshot) before clicking on the **Add** button:![How to do it…](img/00032.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new security group will be visible in the security group list. Click on
    the details icon to view the security group details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, configure the security group to permit ingress from all IPs. After entering
    the CIDR value `0.0.0.0/0`, click on the **Add** button as shown in the following
    screenshot:![How to do it…](img/00033.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few seconds, the new CIDR connection type will be visible under **Security
    Group Details**:![How to do it…](img/00034.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Instances** option in the left-hand side navigation bar, and
    then click on **Launch DB Instance**:![How to do it…](img/00035.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you have to choose the database engine that you want to work with. Select
    the **use MySQL database** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you have to choose whether you want to use this database for production
    or development purposes. We will choose **No**, but for production, it is recommended
    that you choose **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, enter the database details, which will include the MySQL version, database
    identifier, username, and password to connect to the MySQL database and many others
    as shown in the following screenshot:![How to do it…](img/00036.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Additional Config** page, you have to provide the additional information
    that RDS needs to launch the MySQL database. You have to specify the database
    name, port, availability zone, DB security group, and so on. The DB security group
    is very important as we want to use the security group we created in step 3\.
    Enter the details and click on **Next Step**. Have a look at the following screenshot:![How
    to do it…](img/00037.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, on the **Management Options** page, you can specify the backup and maintenance
    options for your DB instance as shown in the following screenshot:![How to do
    it…](img/00038.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you can review the details of your DB instance on the **Review** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The creation and provisioning of the new MySQL DB instance will take a minute
    or so, and once done, it will be available under the list of DB instances, as
    you can see in the following screenshot:![How to do it…](img/00039.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before you can connect to the Amazon RDS MySQL DB instance, you should know
    the details of the newly created instance. The details of the MySQL DB instance
    can be found by clicking on the details icon in the DB instance list, as you can
    see in the following screenshot:![How to do it…](img/00040.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on the details page icon, you can view the MySQL hostname that
    you can connect to. The host information is next to **Endpoint**, and it will
    be a subdomain of `*.rds.amazonaws.com`, as shown in the following screenshot:![How
    to do it…](img/00041.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To connect to the MySQL DB instance, you will need to have the MySQL command-line
    client on the gear. Every OpenShift application gear already has the `mysql` command-line
    agent installed, so you don''t have to do anything. Just SSH into the application
    gear using the `rhc ssh` command and then running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The username and password corresponds to the one you created during step 10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once connected, you can run any SQL command. To check the uptime of your MySQL
    database, you can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every Amazon RDS instance has a firewall that prevents any outside access to
    it. So, before you can create an Amazon RDS instance, you should create a new
    DB security group that gives access to an IP range. From step 1 through to step
    6, you created a new security group that would allow all the IP addresses to connect
    to your Amazon MySQL DB instance. The `0.0.0.0/0` value allows all the IPs to
    access the database instance. This is important with environments such as OpenShift
    that do not provide static IPs.
  prefs: []
  type: TYPE_NORMAL
- en: Step 7 through to step 14 helped you create a new instance of Amazon RDS MySQL
    DB. You are required to provide details related to your DB instance, and Amazon
    RDS will provision a DB instance based on the details you entered. By step 14,
    you had a running MySQL DB instance that you could connect to from the outside
    world. You can connect to it from your local machine or the OpenShift application
    gear.
  prefs: []
  type: TYPE_NORMAL
- en: Step 15 and step 16 helped you to view the details of your MySQL DB instance.
    The most important detail is the hostname on which the MySQL DB instance is hosted.
    In step 17, you used the details to connect to the Amazon RDS MySQL DB instance
    using the `mysql` command-line client. In step 18, you ran a simple SQL query
    against your database to check its uptime.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can make the MySQL database connection secure by configuring the RDS instance
    to only accept SSL-encrypted connections from authorized users. To configure SSL,
    execute the following SQL command. Please replace the username with your MySQL
    DB instance username:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you quit the connection and try to log in again using the `mysql` command
    mentioned in step 5, you will get an access denied error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To connect to the MySQL DB instance, you have to first download the Amazon
    RDS CA certificate. Go to `$OPENSHIFT_DATA_DIR`, and run the following `wget`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a MySQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
