- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Zabbix and Getting Started Using the Frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Zabbix 7, the developers have really outdone themselves. In this **Long
    Term Support** (**LTS**) release, we will find far more **quality-of-life** (**QoL**)
    changes along with some impressive new cutting-edge features. Coming from Zabbix
    6.0, you will still find a lot of improvements made in Zabbix 6.2 and 6.4 as those
    have, of course, been included in Zabbix 7.0 LTS. We will detail all important
    changes throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will install the Zabbix server and explore the Zabbix UI
    to get you familiar with it. We will go over finding your hosts, triggers, dashboards,
    and more to make sure you feel confident diving into the deeper material later
    on in this book. The Zabbix UI has a lot of options to explore, so if you are
    just getting started, don’t get overwhelmed. It’s quite structurally built, and
    once you get the hang of it, I am confident you will find your way without issues.
    You will learn all about these subjects in the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Zabbix server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Zabbix frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Zabbix server **high** **availability** (**HA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Zabbix frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating the Zabbix frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll be starting this chapter with an empty Linux (virtual) machine. Feel free
    to choose a RHEL- or Debian-based Linux distribution (we’ll be using Ubuntu in
    the examples). It’s recommended to use a server distribution and not a desktop
    distribution of the Linux distribution you choose. We will then set up a Zabbix
    server from scratch on this host.
  prefs: []
  type: TYPE_NORMAL
- en: So before jumping in, make sure you have your Linux host at the ready. I’ll
    be using Rocky Linux 9 and Ubuntu 22.04 in my examples.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Zabbix server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before doing anything within Zabbix, we need to install it and get ready to
    start working with it. In this recipe, we are going to discover how to install
    Zabbix server 7.0.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we actually install the Zabbix server, we are going to need to fulfill
    some prerequisites. We will be using **MariaDB** mostly throughout this book.
    MariaDB is popular, and a lot of information is available on using it with Zabbix.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should have a prepared Linux server in front of you running
    either a RHEL- or Debian-based distribution. I’ll be installing Rocky Linux 9
    and Ubuntu 22.04 on my server; let’s call them `lar-book-rocky` and `lar-book-ubuntu`.
  prefs: []
  type: TYPE_NORMAL
- en: When you have your server ready, we can start the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start by adding the Zabbix 7.0 repository to our system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For RHEL-based systems, we’ll also remove the Zabbix **Extra Packages for Enterprise
    Linux** (**EPEL**) repository packages (if installed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the repository is added, let’s add the MariaDB repository on our server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, install and enable it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After installing MariaDB, make sure to secure your installation by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure to answer the questions with yes (**Y**) and configure a root password
    that’s secure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run through the secure installation setup, and make sure to save your password
    somewhere. It’s highly recommended to use a password vault.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s install our Zabbix server with MySQL support.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the Zabbix server installed, we are ready to create our Zabbix database.
    Log in to MariaDB with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the password you set up during the secure installation. Next, we’ll create
    the Zabbix database with the following commands. Do not forget to change **password**
    in the second and third commands, as this will be the password used for connecting
    to your Zabbix database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Zabbix 6, Zabbix uses **utf8mb4** by default in all its installation
    documentation. We’ve changed **utf8** to **utf8mb4** in the preceding command
    so that everything will work. For reference, check the Zabbix support ticket here:
    [https://support.zabbix.com/browse/ZBXNEXT-3706](https://support.zabbix.com/browse/ZBXNEXT-3706).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to import our Zabbix database schema to our newly created Zabbix
    database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As mentioned, we can now disable **log_bin_trust_function_creators** again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: At this point, it might look like you are stuck and the system is not responding.
    Do not worry, though, as it will just take a while to import the SQL schema.
  prefs: []
  type: TYPE_NORMAL
- en: We are now done with the preparations for our MariaDB side and are ready to
    move on to the next step, which will be configuring the Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Zabbix server is configured using the Zabbix server config file. This file
    is located in **/etc/zabbix/**. Let’s open this file with our favorite editor;
    I’ll be using Vim throughout the book (but feel free to substitute Vim with **vi**
    or **nano**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, make sure the following lines in the file match your database name, database
    user username, and database user password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Before starting the Zabbix server, you should configure SELinux or AppArmor
    to allow the use of the Zabbix server. If this is a test machine, you can use
    a permissive stance for SELinux or disable AppArmor, but it is not recommended
    to do this in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'All done; we are now ready to start our Zabbix server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether everything is starting up as expected with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, make sure to monitor the log file, which provides a detailed description
    of the Zabbix startup process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Most of the messages in this file are fine and can be ignored safely, but make
    sure to read them well and see if there are any issues with your Zabbix server
    starting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Zabbix server is the main process for our Zabbix setup. It is responsible
    for our monitoring, problem alerting, and a lot of the other tasks described in
    this book. A complete Zabbix stack consists of at least the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A database (MySQL/MySQL fork, PostgreSQL, or Oracle)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Zabbix server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache or NGINX running the Zabbix frontend with PHP 8.0 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can see the components and how they communicate with each other in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Zabbix setup communications diagram](img/B19803_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Zabbix setup communications diagram
  prefs: []
  type: TYPE_NORMAL
- en: We’ve just set up the Zabbix server and database; by running these two, we are
    basically ready to start monitoring. The Zabbix server communicates with the Zabbix
    database to write collected values to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is still one problem, though: we cannot configure our Zabbix server to
    do anything. For this, we are going to need our Zabbix frontend, which we’ll set
    up in the next recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Zabbix frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Zabbix frontend is the face of our server. It’s where we will configure
    all of our hosts, templates, dashboards, maps, and everything else. Without it,
    we would be blind to what’s going on on the server side. So, let’s set up our
    Zabbix frontend in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to set up the Zabbix frontend using NGINX. It’s also possible to
    use Apache, but NGINX is known to be faster and, as such, it has a slight edge
    over Apache. Since installation of both NGINX and Apache is quite simple, NGINX
    is the preferred way to go if you have a lot of frontend users. Before starting
    with this recipe, make sure you are running the Zabbix server on a Linux distribution
    of your choice. I’ll be using the `lar-book-rocky` and `lar-book-ubuntu` hosts
    in these recipes to show the setup process on Rocky Linux 9 and Ubuntu 22.04.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s jump right in and install the frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to allow ports **80** and **443** in your firewall if you are using
    one. Without this, you won’t be able to connect to the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: We will then have to configure our NGINX configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, edit the following file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, edit the following file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, edit the following two lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make it look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: At **server_name**, it is important to add the IP address of where this NGINX
    (Zabbix) web page will be running. Add the IP address or DNS name of where you
    want your frontend to be available here.
  prefs: []
  type: TYPE_NORMAL
- en: Restart the Zabbix components and make sure they start up when the server is
    booted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should now be able to navigate to our Zabbix frontend without any issues
    and start the final steps to set up the Zabbix frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s go to our browser and navigate to our server’s IP. It should look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu (in some cases), you might have to add port **8080**, which you will
    probably want to change to port **80** (or **443** after adding SSL) later. In
    those cases, the URL should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: http://<your_server_ip>:8080/
  prefs: []
  type: TYPE_NORMAL
- en: 'We should now see the following web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The Zabbix welcome screen](img/B19803_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – The Zabbix welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t see this web page, you may have missed some steps in the setup
    process. Retrace your steps and double-check your configuration files; even the
    smallest typo could prevent the web page from serving.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s continue by clicking **Next step** on this page, which will serve you
    with the next page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The Zabbix installation prerequisites page](img/B19803_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – The Zabbix installation prerequisites page
  prefs: []
  type: TYPE_NORMAL
- en: 'Every single option here should be showing **OK** now; if not, fix the mistake
    it’s showing you. If everything is OK, you may proceed by clicking **Next step**
    again, which will take you to the next page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.4 – The Zabbix installation DB connection pag\uFEFFe](img/B19803_01_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – The Zabbix installation DB connection page
  prefs: []
  type: TYPE_NORMAL
- en: Here, we need to tell our Zabbix frontend where our MySQL database is located.
    Since we installed it on **localhost**, we just need to make sure we issue the
    right database name, database user username, and database user password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should make the Zabbix frontend able to communicate with the database.
    Let’s proceed by clicking **Next** **step** again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.5 – The Zabbix installation server details page\uFEFF](img/B19803_01_05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – The Zabbix installation server details page
  prefs: []
  type: TYPE_NORMAL
- en: Next up is the Zabbix server configuration. Make sure to name your server something
    useful or something cool. For example, I set up a production server called `Meeseeks`
    because every time we got an alert, we could make Zabbix say “*I’m Mr. Meeseeks.
    Look at me.*” But something such as `zabbix.example.com` also works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s name our server, set up the time zone to match our own time zone, and
    proceed to the next step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.6 – The Zabbix installation summary \uFEFFpage](img/B19803_01_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – The Zabbix installation summary page
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify your settings and proceed to click **Next step** one more time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.7 – The Zabbix installation finish pa\uFEFFge](img/B19803_01_07.JPG)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – The Zabbix installation finish page
  prefs: []
  type: TYPE_NORMAL
- en: 'You have successfully installed the Zabbix frontend. You may now click the
    **Finish** button, and we can start using the frontend. You’ll be served with
    a login page where you can use the following default credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Username**: **Admin**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: **zabbix**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind that the username and password fields are both case-sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we’ve installed our Zabbix frontend, our Zabbix setup is complete
    and we are ready to start working with it. Our Zabbix frontend will connect to
    our database to edit the configuration values of our setup, as we can see in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Zabbix setup communications diagram](img/B19803_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Zabbix setup communications diagram
  prefs: []
  type: TYPE_NORMAL
- en: The Zabbix frontend will also talk to our Zabbix server, but this is just to
    make sure the Zabbix server is up and running and to provide some additional functionality
    such as a test button on items. Now that we know how to set up the Zabbix frontend,
    we can start using it. Let’s check this out after the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Zabbix provides a very convenient setup guide that contains a lot of detail
    regarding the installation of Zabbix. I would always recommend keeping this page
    open during a Zabbix installation as it contains information such as a link to
    the latest repository. Check it out here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/download](https://www.zabbix.com/download)'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Zabbix server HA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zabbix 6 shipped with one of the most anticipated features of all time, HA.
    This feature will bring your Zabbix setup to the next level by making sure that
    if one of your Zabbix servers is having issues, another one will take over. Of
    course, this feature is still available in Zabbix 7, and we will be making good
    use of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'A great thing about this implementation is that it supports an easy proprietary
    way to put one to many Zabbix servers in a cluster: a great way of making sure
    your monitoring stays in the air at all times (or at least as much as possible).'
  prefs: []
  type: TYPE_NORMAL
- en: The setup for the Zabbix server will be active/passive, as we cannot do anything
    such as load balancing on the Zabbix server side. Load balancing is, however,
    supported using Zabbix proxies, which we will discuss in [*Chapter 8*](B19803_08.xhtml#_idTextAnchor1490),
    *Setting up* *Zabbix Proxies*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before getting started, please note that creating an HA setup is considered
    an advanced topic. It might be more difficult than other recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this setup, we will need three new virtual machines, as we are going to
    create a split Zabbix setup, unlike the setup that we created in the first recipe
    of this chapter. Let’s take a look at how I have named our three new virtual machines
    and what their IP addresses will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lar-book-ha1** (**192.168.0.1**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lar-book-ha2** (**192.168.0.2**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lar-book-ha-db** (**192.168.0.10**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two of these servers will run our Zabbix server cluster and a Zabbix frontend.
    The other server is just for our MySQL database. Please take note that the IP
    addresses used in the example may be different for you. Use the correct ones for
    your environment.
  prefs: []
  type: TYPE_NORMAL
- en: We will also need a `192.168.0.5` in the example.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In our setup, we are using only one MySQL Zabbix database. To make sure all
    parts of Zabbix are set up as highly available, it might be worth looking into
    setting up MySQL in a primary/primary setup. This can be a great combination with
    the Zabbix server’s HA.
  prefs: []
  type: TYPE_NORMAL
- en: This cookbook will *not* use SELinux or AppArmor, so make sure to add the correct
    policies before or during the use of this guide. It’s also possible to disable
    SELinux, but this is not recommended in production. Additionally, this guide does
    not detail how to set up your firewall, so make sure to do this beforehand as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For your convenience, we’ve split this *How to do it…* section into three parts.
    The first is setting up the database, the next is setting up the Zabbix server
    cluster, and the last is how to set up the Zabbix frontend redundantly. The *How
    it works…* section will then provide an explanation of the entire setup.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start with setting up our Zabbix database, ready to be used in a highly
    available Zabbix server setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to **lar-book-ha-db** and install the MariaDB repository with the following
    command on Red Hat-based systems:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, let’s install the MariaDB server application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After installing MariaDB, make sure to secure your installation with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure to answer the questions with yes (**Y**) and configure a root password
    that’s secure. It’s highly recommended to use a password vault for storing it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s create our Zabbix database for our Zabbix servers to connect to.
    Log in to MariaDB with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the password you set up during the secure installation. Next, we’ll create
    a Zabbix database with the following commands. Do not forget to change **password**
    in the second, third, and fourth commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Lastly, we need to import the initial Zabbix database configuration, but for
    that, we need to install the Zabbix repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, we need to install the SQL scripts Zabbix module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we issue the following command, which might take a while, so be patient
    until it is done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will need to disable **log_bin_trust_function_creators** after this step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Setting up the Zabbix server cluster nodes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting up the cluster nodes works in the same way as setting up any new Zabbix
    server. The only difference is that we will need to specify some new configuration
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by adding the Zabbix 7.0 repository to our **lar-book-ha1** and
    **lar-book-ha2** systems:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, use the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let’s install the Zabbix server application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now edit the Zabbix server configuration files, starting with **lar-book-ha1**.
    Issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following lines to allow a database connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`DBName` and `DBUser` are both set to `zabbix` by default. If you used a different
    database and/or username, you will have to change those as well.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To enable HA on this host, add the following lines in the same file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make sure our Zabbix frontend knows where to connect to if there is a node
    failover, fill in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file, and let’s do the same for our **lar-book-ha2** host by editing
    its file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following lines to allow a database connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`DBName` and `DBUser` are both set to `zabbix` by default. If you used a different
    database and/or username, you will have to change those as well.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To enable HA on this host, add the following lines in the same file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make sure our Zabbix frontend knows where to connect to if there is a node
    failover, fill in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file, and let’s start our Zabbix server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Setting up NGINX with HA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make sure our frontend is also set up in such a way that if one Zabbix server
    has issues, it fails over, we will set them up with `keepalived`. Let’s see how
    we can do this.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by logging in to both **lar-book-ha1** and **lar-book-ha2** and
    installing **keepalived**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, on **lar-book-ha1**, edit the **keepalived** configuration with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete everything from this file (if it’s not empty already) and add the following
    text to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do not forget to update **password** to something secure and edit the **ens192**
    interface to your own interface name/number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In the previous file, we specified **virtual_router_id 51**; make sure the virtual
    router ID **51** isn’t used anywhere in the network yet. If it is, simply change
    the virtual router ID throughout this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'On **lar-book-ha2**, edit the same file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete everything from the file with **dG** (if you are using vim), and this
    time, we will add the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once again, do not forget to update **password** to something secure and edit
    the **ens192** interface to your own interface name/number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s install the Zabbix frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, run the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will then have to configure our NGINX configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, edit the following file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, edit the following file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, edit the following two lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make it look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: At **server_name**, it is important to add the IP address of where this NGINX
    (Zabbix) web page will be running. Add the IP address or DNS name of where you
    want your frontend to be available here. In this case, we have added the VIP address
    that **keepalived** will be managing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the web server and **keepalived** to make your Zabbix frontend available
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we are ready to configure our Zabbix frontend. Navigate to your VIP address
    (in the example IP case, **http://192.168.0.5/**), and you will see the following
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.9 – The Zabbix initial configuration window](img/B19803_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – The Zabbix initial configuration window
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Next step** twice until you see the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.10 – The Zabbix database configuration wind\uFEFFow for lar-book-ha1](img/B19803_01_10.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – The Zabbix database configuration window for lar-book-ha1
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to fill in **Database host** with the IP address of our Zabbix MariaDB
    database (**192.168.0.10**). Then, fill in the database password for our **zabbix**
    database user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, for the last step, for our first node, set up **Zabbix server name**
    as **lar-book-ha1** and select your time zone, as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.11 – The Zabbix server settings win\uFEFFdow for lar-book-ha1](img/B19803_01_11.JPG)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – The Zabbix server settings window for lar-book-ha1
  prefs: []
  type: TYPE_NORMAL
- en: Then, click **Next step** and **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to do the same thing to our second frontend. Log in to **lar-book-ha1**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On RHEL-based systems, issue the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, issue the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When navigating to your VIP (in the example IP case, **http://192.168.0.5/zabbix**),
    you will see the same configuration wizard again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the database details again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.12 – The Zabbix database configuration win\uFEFFdow for lar-book-ha\uFEFF\
    2](img/B19803_01_12.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – The Zabbix database configuration window for lar-book-ha2
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, make sure to set up **Zabbix server name** as **lar-book-ha2**, as seen
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.13 – The Zabbix server settings window f\uFEFFor lar-book-ha2](img/B19803_01_13.JPG)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – The Zabbix server settings window for lar-book-ha2
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to enable the **lar-book-ha1** frontend again by issuing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That should be our last step. Everything should now be working as expected.
    Make sure to check your Zabbix server log file to see if the HA nodes are running
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have done it, how does the Zabbix server actually work in an HA
    mode? Let’s start by checking out the **Reports** | **System information** page
    on our Zabbix frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – The Zabbix server system information with HA information](img/B19803_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – The Zabbix server system information with HA information
  prefs: []
  type: TYPE_NORMAL
- en: We can now see that we have some new information available; for example, the
    **High availability cluster** parameter. This parameter now tells us if HA is
    enabled or not and what the failover delay is. In our case, this is 1 minute,
    meaning that it could take up to 1 minute before failover is initiated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, we can see every single node in our cluster. As Zabbix now supports
    one to many nodes in a cluster, we can see every single one taking part in our
    cluster right here. Let’s take a look at the setup we have built:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – The Zabbix server HA setup](img/B19803_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – The Zabbix server HA setup
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the setup, we have connected our two Zabbix server nodes,
    `lar-book-ha1` and `lar-book-ha2`, to our single Zabbix database, `lar-book-ha-db`.
    Because our Zabbix database is our `HANodeName` value in the Zabbix server configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: We also included the `NodeAddress` parameter in the configuration file. This
    parameter is used by the Zabbix frontend to make sure that our system information
    (widget) and Zabbix server are not running frontend notification work. The `NodeAddress`
    parameter will tell the frontend which IP address to connect to for each respective
    server once it becomes the active Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To take things a bit further, I have added a simple `keepalived` setup to this
    installation as well. A `keepalived` configuration is a way to build simple VRRP
    failover setups between Linux servers. In our case, we have entered the VIP as
    `192.168.0.5` and added the `chk_nginx` process monitoring to determine when to
    fail over. Our failover works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: If NGINX is running on our node, that adds a weight of 10 to our priority, leading
    to the total priority of `254` and `253`, respectively. Now, let’s imagine that
    `lar-book-ha1` no longer has the web server process running. That means its priority
    drops to `244`, which is lower than `253` on `lar-book-ha2`, which does have the
    web server process running.
  prefs: []
  type: TYPE_NORMAL
- en: Whichever host has the highest priority is the host that will have the `192.168.0.5`
    VIP, meaning that host is running the Zabbix frontend, which will be served.
  prefs: []
  type: TYPE_NORMAL
- en: Combining these two ways of setting up HA, we have just created redundancy for
    two of the parts that make up our Zabbix setup, making sure we can keep outages
    to a minimum.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, you may wonder, what if I wanted to go further in terms of setting up HA?
    First, the Zabbix HA feature is built to be simple and understandable to the entire
    Zabbix user base, meaning that as of now, you might not see the same amount of
    features you would get with a third-party implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, the new Zabbix server HA feature has proved itself to be a long-awaited
    feature that really adds something to the table. If you want to run an HA setup
    such as this, the best way to add one more level of complexity to HA is a MySQL
    master/master setup. Setting up the Zabbix database with HA, which is the main
    **source of truth** (**SOT**), will make sure that your Zabbix setup really is
    reliable in as many ways as possible. For more information regarding MariaDB replication,
    check out the documentation here: [https://mariadb.com/kb/en/standard-replication/](https://mariadb.com/kb/en/standard-replication/).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Zabbix frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If this is your first time using Zabbix, congratulations on getting to the UI.
    If you are a returning Zabbix user, there have been some changes to the Zabbix
    7 UI that you might notice. We’ll be going over some of the different elements
    that we can find in the Zabbix frontend so that during this book, you’ll feel
    confident in finding everything you need.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with the Zabbix UI, all we need to do is log in to the frontend.
    You will be served with the following page at the IP on which your server is running
    the Zabbix frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.16 – The Z\uFEFFabbix login screen](img/B19803_01_16.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – The Zabbix login screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you log in to the Zabbix frontend with the default credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Username**: **Admin**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: **zabbix**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Just like in Linux, Zabbix is case-sensitive in most places. When entering your
    username, make sure to include the right cases; otherwise, you won’t be able to
    log in!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you log in, you’ll be served with the default page, which is the default
    dashboard. This is what Zabbix has called **Global view**, and it provides us
    with a nice overview of what’s going on. We can completely customize this and
    all the other dashboards that Zabbix supplies, but it’s a good idea to familiarize
    yourself with the default setup before building something new:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.17 – The Global \uFEFFview dashboard](img/1.17.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – The Global view dashboard
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s get started on getting to know this Zabbix 7 frontend by looking at
    the default dashboard. Please follow along in the frontend by clicking and checking
    out the content mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix uses dashboards, and they are filled with widgets to show you information.
    Let’s go over the different widgets in the default dashboard and detail their
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the **System** **information** widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – The System information widget](img/B19803_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – The System information widget
  prefs: []
  type: TYPE_NORMAL
- en: The **System information** widget, as you might have guessed, details all system
    information for you. This way, we can keep an eye on what’s going on with our
    Zabbix server and see whether our Zabbix server is even running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go over the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Zabbix server is running**: Informs us whether the Zabbix server backend
    is actually running and where it is running. In this case, it’s running, and it’s
    running on **localhost:10051**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zabbix server version**/**Zabbix frontend version**: We now have separate
    indicators that will detail what the versions of our Zabbix server and frontend
    are.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software update last checked**: This is another new addition. Zabbix will
    now check for new releases for you, indicating in the column below what the latest
    release is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Latest release**: This will detail the latest available version of Zabbix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of hosts (enabled/disabled)**: This will detail the number of hosts
    enabled (**15**) and the number of hosts disabled (**5**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of templates**: This details the total number of templates we have
    (**284**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of items (enabled/disabled/not supported)**: Here, we can see details
    of our Zabbix server’s items—in this case, enabled (**564**), disabled (**240**),
    and not supported (**216**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of triggers (enabled/disabled [problem/ok]**: This details the number
    of triggers. We can see how many are enabled (**371**) and disabled (**38**),
    but also how many are in a **problem** state (**13**) and how many are in an **ok**
    state (**358**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of users (online)**: The first value details the total number of users.
    The second value details the number of users currently logged in to the Zabbix
    frontend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Required server performance, new values per second**: Perhaps I’m introducing
    you to a completely new concept here, which is **New Values Per Second**, or **NVPS**.
    A server receives or requests values through items and writes these to our MariaDB
    database (or another database). The NVPS information detailed here shows the estimated
    number of NVPS received by the Zabbix server. Keep a close eye on this as your
    Zabbix server grows, as it’s a good indicator to see how quickly you should scale
    up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High availability cluster**: If you are running a Zabbix server HA cluster,
    you will see if it is enabled here and what the failover delay is. Additionally,
    the **System information** page will display extra HA information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You might also see two additional values here depending on your setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database history tables upgraded**: If you see this, it indicates that one
    of your database history tables hasn’t been upgraded yet. Numeric (float) tables
    have been expanded to allow for more characters to be saved per data point. This
    table isn’t upgraded automatically coming from Zabbix 4 to 5 or higher, as not
    everyone needs it, and it might take a long time to upgrade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database name**: If you see the name of your database with the value of your
    version, it might indicate you are running a non-supported database version. You
    could see a message such as **Warning! Unsupported <DATABASE NAME> database server
    version. Should be at least <****DATABASE VERSION>**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, that’s one of the most important widgets when it comes to your Zabbix server,
    and it’s a great one to keep on your main dashboard if you ask me.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s move on to the next widget, **Host availability**:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.19 – The Host availability widg\uFEFFet](img/B19803_01_19.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – The Host availability widget
  prefs: []
  type: TYPE_NORMAL
- en: The **Host availability** widget is a quick overview widget showing you everything
    you want to know about your monitored host’s availability status. In this widget,
    it shows whether the host is available, not available, or unknown. This way, you
    get a good overview of the availability of all hosts you could be monitoring with
    your Zabbix server in a single widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next to it is the **Problems by** **severity** widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20 – The Problems by severity widget](img/B19803_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – The Problems by severity widget
  prefs: []
  type: TYPE_NORMAL
- en: 'It shows you how many hosts currently have a trigger in a certain state. There
    are several default severities in Zabbix:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Disaster**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Average**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warning**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Information**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not classified**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can fully customize the severity levels and colors; for example, what severity
    levels we want to put on which triggers. So, if you are worried about the severities
    right now, don’t be. We’ll get to that later.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the severity levels and colors can be very useful to your organization.
    We can customize the severity levels to match levels used throughout our company
    or even to match some of our other monitoring systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next widget is **Clock**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21 – The Clock widget, indicating a time](img/B19803_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 – The Clock widget, indicating a time
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s a clock with the local Linux system time, finally in a digital time format.
    Need I say more? Let’s move on to the **Problems** widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22 – One of the Problems widgets available](img/1.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – One of the Problems widgets available
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, this is an interesting widget that I use a lot. We see our current problems
    on this screen, so if we have our triggers set up correctly, we get valuable information
    here. A quick overview of how many hosts are having problems is one thing, but
    the **Problems** page also gives us more details about the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time**: At what time this problem was first noticed by the Zabbix server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Info**: Information about the event, with **Manual close** and **Suppressed**
    statuses being represented here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host**: What host this problem occurred on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Problem**/**Severity**: What the problem is and how severe it is. The severity
    is shown in a color; in this case, orange, meaning **Average**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duration**: How long this has been a problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update**: A button to allow us to make changes to this existing problem,
    such as acknowledging it or adding messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**: What actions have been taken after this problem occurred; for
    example, the problem being acknowledged or a custom script that executes on problem
    creation? If you hover over any action, it will show you detailed information
    about all actions that have been taken for this problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**: What tags are assigned to this problem?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Problems** widget is very useful. We have different types of this widget
    available, and as mentioned before, it is completely customizable, based on how
    this widget shows our problems to us. Take a quick look at some of the options,
    which we’ll detail further in a later chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23 – The Add widget screen](img/B19803_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – The Add widget screen
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: We can hide severity levels from these widgets to make sure we only see important
    ones. Sometimes, we don’t want to see informational severity problems on our dashboards;
    it can distract us from a more important problem. Keep your dashboards clean by
    customizing widgets to their full extent.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s also a very basic **Graph** widget included on the default dashboard.
    As you can see, it details the number of processed values per second. As we said,
    **System information** gives us an estimate on this value. The **Graph** widget
    gives us a more accurate and detailed look:'
  prefs: []
  type: TYPE_NORMAL
- en: "![F\uFEFFigure 1.24 – The Graph widget](img/B19803_01_24.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.24 – The Graph widget
  prefs: []
  type: TYPE_NORMAL
- en: These graph widgets are also fully customizable, and we will talk about them
    more later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some newer widgets you will find on this page are the **Top hosts**, **Item
    value**, and **Geomap** widgets. Starting with the **Top hosts** widget, let’s
    have a closer look at these:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.25 – The Top hosts widget](img/B19803_01_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.25 – The Top hosts widget
  prefs: []
  type: TYPE_NORMAL
- en: The **Top hosts** widget is fully customizable to show us a list of any item
    we want. We can then sort that list to show us the item with the highest (**Top
    N**) or Lowest (**Bottom N**) values, giving us a great overview of—in this case—hosts
    with the highest CPU load.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Item value** widget is also super useful, showing us a single item value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.26 – The Item value widget](img/B19803_01_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.26 – The Item value widget
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, last, we have the **Geomap** widget: a geographical map with a representation
    of all the hosts we would like to add. As you can see, by default, our Zabbix
    server is already included. In our case, I’ve made sure to update the location
    of our Zabbix server to our main office in the Netherlands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.27 – The Geomap widget](img/B19803_01_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.27 – The Geomap widget
  prefs: []
  type: TYPE_NORMAL
- en: It also shows us that the Zabbix server currently has no issues, as the icon
    is green. If there is a problem the icon will show in the colour of the severity
    of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: We now know how to work with the Zabbix frontend and can continue further on
    with how to navigate our instance.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating the Zabbix frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigating the Zabbix frontend is easier than it looks at first glance, especially
    with some of the amazing changes made to the UI starting from Zabbix 5.0 and continuing
    into Zabbix 7.0\. Let’s explore the Zabbix navigational UI some more in this recipe
    by looking at the navigation bar and what it has to offer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve seen the first page after logging in with the default dashboard,
    it is time to start navigating through the Zabbix UI and see some of the other
    pages available. We’ll move through the sidebar and explore the pages available
    in our Zabbix installation so that when we start monitoring our networks and applications,
    we know where we can find everything.
  prefs: []
  type: TYPE_NORMAL
- en: So, before continuing, make sure you have the Zabbix server ready as set up
    in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Zabbix navigation bar is the gateway to all of our powerful tools and configuration
    settings. Zabbix uses a left-side navigation bar to keep our UI as clean as possible.
    On top of that, they have made the sidebar disappear so that we can keep a close
    look at all of our content without the sidebar blocking our vision.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: We cannot change the Zabbix navigation menu location, but it is possible to
    hide it to a smaller form or completely hide it. If you want the navigation bar
    to be hidden (or not), click the first icon on the right side of the Zabbix logo.
    If you want to fully hide the navigation bar, click the second icon on the right
    side of the Zabbix logo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the Zabbix sidebar as we see it from our default page
    and get to know it. Please follow along in the frontend by clicking and checking
    out the content mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.28 – The default Zabbix page as seen in your own web browser](img/1.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.28 – The default Zabbix page as seen in your own web browser
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve got some categories here to choose from, and one level below the categories,
    we’ve got our different pages. First, let’s start by detailing the categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitoring**: The **Monitoring** category is where we can find all information
    about our collected data. It’s basically the category you want to use when you’re
    working with Zabbix to read any collected information you’ve worked hard to acquire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**: The **Services** category is new to Zabbix 7 and comes as part
    of the improved **Business Service Monitoring** (**BSM**) features. We can find
    all the information regarding service and **service-level agreement** (**SLA**)
    monitoring here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inventory**: The **Inventory** category is a cool extra feature in Zabbix
    that we can use to look at our host-related inventory information. You can add
    stuff such as software versions or serial numbers to hosts and look at them here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reports**: The **Reports** category contains a variety of predefined and
    user-customizable reports focused on displaying an overview of parameters such
    as system information, triggers, and gathered data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data collection**: The **Data collection** category is where we build everything
    that has to do with monitoring our devices. We will later use this data in **Monitoring**,
    **Inventory**, and **Reports**. We can edit our settings to suit our every need
    so that Zabbix can show us that data in a useful way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alerts**: The **Alerts** section of the UI is all about showing the right
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Users**: The **Users** section is all about displaying user- and user-group-related
    data. It has everything you need to manage accounts and permissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Administration**: The **Administration** category is where we administer
    the Zabbix server. You’ll find all your settings from the server here to enable
    you and your colleagues to have a good working Zabbix experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You’ll go over all of these quite a lot while using this book, so remember
    them well. Let’s dive a little deeper into the categories by looking at them one
    by one. Let’s start with the **Monitoring** category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29 – The Monitoring section of the sidebar](img/B19803_01_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.29 – The Monitoring section of the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Monitoring** tab contains the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problems**: We can look at our current problems in detail here. We are provided
    with a bunch of filter options to narrow down our problem search if needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosts**: This page will provide a quick overview of what’s going on with
    hosts. It also provides links to navigate to pages showing data for our hosts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Latest data**: Here is a page we’re going to use quite a lot throughout our
    professional Zabbix lifetime. The **Latest data** page is where we can find collected
    values for every single host, which we can, of course, filter on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maps**: Maps are a very helpful tool in Zabbix to get an overview of your
    infrastructure. We can use them for network overviews and such.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discovery**: This page provides us with an overview of discovered devices.
    We’ll work more on this later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we have the **Services** category:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.30 – The Services secti\uFEFFon of the sidebar](img/B19803_01_30.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.30 – The Services section of the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: 'This part of the sidebar contains the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Services**: This is where we configure all of the services we want to monitor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SLA**: We can configure any SLAs here that we can then use in our services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SLA report**: A detailed overview of configured services with their SLAs
    and whether they are being met or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we have the **Inventory** category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.31 – The Inventory section of the sidebar](img/B19803_01_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.31 – The Inventory section of the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Inventory** tab contains the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Overview**: A quick overview page for your inventory information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosts**: A more detailed look into inventory values on a per-host basis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we have the **Reports** category:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.32 – The Repor\uFEFFts section of the sidebar](img/B19803_01_32.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.32 – The Reports section of the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Reports** tab contains the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**System information**: You can look at system information here; it contains
    the same information as the **System information** widget we discussed earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scheduled reports**: This is where we configure any automatic PDF reporting
    that we might want to send out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability report**: On this page, we can see the percentage of time a
    trigger has been in a **problem** state compared to an **ok** state. This is a
    helpful way of seeing how long certain items are actually healthy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Top 100 triggers**: The top 100 triggers that have changed their state most
    often within a period of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Audit log**: We can see who changed what on our Zabbix server here. This
    is a great way to see which colleague locked you out by accident or whether it
    was on purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action log**: We can see a list of actions that have been taken; for example,
    due to triggers going to a **problem** state or an **ok** state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notifications**: On this page, we can see the number of notifications sent
    to our users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we have the **Data collection** category, which is a new entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.33 – The Data collection section of the sidebar](img/B19803_01_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.33 – The Data collection section of the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Data collection** tab is almost the same as what the **Configuration**
    tab used to be in older versions. It contains the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Template groups**: We configure our template groups here; for instance, a
    group for all templates that will be used within our company (*Templates/Open
    source ICT Solutions*) or all network devices (*Templates/Networking*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host groups**: We configure our host groups here; for instance, a group for
    all Linux servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Templates**: This is where we configure templates that we can use to monitor
    hosts from the Zabbix server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosts**: Another **Hosts** tab, but this time it is not for checking data.
    This is where we add and configure host settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintenance**: In Zabbix, we have the availability to set maintenance periods;
    this way, triggers or notifications won’t disturb you while you take something
    offline for maintenance, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event correlation**: We can correlate problems here to reduce noise or prevent
    event storms. This is achieved by closing new or old problems when they correlate
    to other problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discovery**: This is where we configure Zabbix discovery for automatic host
    creation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New in Zabbix is the **Alerts** category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.34 – The Alerts section of the sidebar](img/B19803_01_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.34 – The Alerts section of the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: 'It consists of the following three pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Actions**: All different kinds of actions can be configured in this part
    of the frontend. We can set up actions for sending out alerts, creating hosts,
    and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Media types**: There are several media types preconfigured in Zabbix, which
    you’ll find here already. We can also add custom media types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scripts**: This is where we can add custom scripts for extending Zabbix functionality
    in the frontend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Second to last, and also new, we have **Users**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.35 – The Users section of the sidebar](img/B19803_01_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.35 – The Users section of the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find five different pages here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User groups**: This is where we configure user groups and the permissions
    for these user groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User roles**: It’s possible to configure different users’ roles here to limit
    or extend certain frontend functionality to certain users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Users**: Add users to this page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API tokens**: This page was kind of hidden before, but it’s now easier to
    find. We can manage all API tokens we have permission to edit here: super useful
    for super admins to create and manage tokens of different users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**: We can find our authentication settings here, such as **Lightweight
    Directory Access Protocol** (**LDAP**), **Security Assertion Markup Language**
    (**SAML**), and HTTP. It also contains settings for the new **just-in-time** (**JIT**)
    user provisioning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, we have the **Administration** category:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.36 – The Administration section of the sidebar](img/B19803_01_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.36 – The Administration section of the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Administration** tab contains the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General**: The general page contains our Zabbix server configuration. Settings
    ranging from **Housekeeping** to **Frontend theme** are found here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Audit log**: The audit log settings are located here. We can enable or disable
    audit logging as well as change how long logs should be stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Housekeeping**: General housekeeping settings are found here. We can edit
    what we want to enable or disable for housekeeping, as well as change how long
    we store things such as history, trends, triggers, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proxy groups**: At this new entry, we will define proxy groups that we can
    use for failover and load balancing in combination with proxies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proxies**: This is where we configure proxies that should be connected to
    this Zabbix server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Macros**: A bit more accessible now is global macros, since they have been
    relocated here. Define new and manage existing global macros here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Queue**: View your Zabbix server queue here. Items might be stuck in a queue
    due to data collection or performance issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When using Zabbix authentication such as HTTP, LDAP, or SAML, we still need
    to create our users internally with the right permissions. Configure your users
    to match your authentication method’s username in Zabbix and use the authentication
    method for password management. With Zabbix 7.0, however, it is possible to use
    JIT user provisioning to automatically create users with the correct permissions,
    which we will also talk about in this book.
  prefs: []
  type: TYPE_NORMAL
