- en: Managing AWS Accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a master account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a member account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inviting an account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing your accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a service control policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We work with a lot of companies who maintain a large, ever-growing number of
    AWS accounts. Keeping a handle on all these accounts has typically been quite
    difficult to do—even for the most seasoned AWS users.
  prefs: []
  type: TYPE_NORMAL
- en: With the release of AWS Organizations, you now have the ability to centrally
    manage your AWS accounts, to arrange them into logical groupings and hierarchies,
    and to apply controls to them in ways which haven't previously been possible on
    the AWS platform.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a master account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All accounts that use AWS Organizations for billing and control purposes must
    have a *master account*. This account controls membership to the organization,
    and pays the bills of all the members (someone's got to do it).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up a master account, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the My Organization section of the account you want to become the master.
    You must be logged in with your root credentials (that is, those you created the
    account with):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the AWS Organizations section of the AWS console, click on Create organization,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Unless you have a specific requirement, choose ENABLE ALL FEATURES to get the
    full benefit of organizations, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that your account has been converted, you can return to the AWS Organizations
    page to see a list of all your accounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_004.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While this is a very simple recipe, it's the first thing you must do before
    you can use any of the useful features of AWS Organizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you can see a high-level diagram of the relationships between master accounts,
    members, and **organizational units** (**OUs**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_02_05.png)'
  prefs: []
  type: TYPE_IMG
- en: We deliberately enable all the features of organizations. The consolidated billing
    option is available for backward compatibility—before organizations, consolidated
    billing was your only option to link accounts.
  prefs: []
  type: TYPE_NORMAL
- en: '*Do not use your master account for day-to-day tasks*. Since it is so important,
    it doesn''t make sense to risk using it and/or having access keys for it. If your
    master account was to become compromised somehow, it would impact all of your
    member accounts. Just don''t do it.'
  prefs: []
  type: TYPE_NORMAL
- en: The master account will always have a star next to its name.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the organizations functionality is exposed via the API. This means you
    can use the AWS SDKs or the CLI tool to do the same things you would in the web
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-factor authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the consolidated billing confirmation e-mail, it is advisable
    to configure **multi-factor authentication** (**MFA**) on your console. To do
    this, log in as your root user (that is, the credentials you used when first creating
    your account), go to the **Identity and Access Management** (**IAM**) console,
    and follow the Activate MFA on your root account prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Using the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can easily create your master account with the CLI tool. The following
    command will turn your account into a master account, with all organizations features
    enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Inviting an account* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a member account* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a member account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your organization is up and running, the most common use you will have
    for it is automating the account creation process. Accounts created inside an
    organization are referred to as **member accounts**.
  prefs: []
  type: TYPE_NORMAL
- en: All charges incurred by a member account will be billed to the master account.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obviously, you will need an organization to perform this recipe. See the other
    recipes in this chapter to get started.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the CLI tool command to create a new account, with appropriate values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will return a `create account status` request ID value that you
    can use to check the status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command to create a member account in your organization is extremely simple.
  prefs: []
  type: TYPE_NORMAL
- en: The e-mail address used cannot be associated with any other AWS accounts.
  prefs: []
  type: TYPE_NORMAL
- en: The account creating process takes some time, so it is done *asynchronously*.
    This means that you won't receive an immediate status to your `create-account`
    command. Instead, the command in this recipe will return a request ID.
  prefs: []
  type: TYPE_NORMAL
- en: This ID is then passed to another account to check the status of the creation.
    When the status is `CREATED`, you can start to use the new account.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While this functionality is definitely useful, the AWS Organizations service
    is relatively new. This means there are a few *features* you should be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the member account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've created your member account, it's time to put it to work!
  prefs: []
  type: TYPE_NORMAL
- en: An IAM role will be present in the new account, with a default name of `OrganizationAccountAccessRole`.
    This is so you can assume the role (from your master account) and administer the
    member account. While this name is as good as any, it can be configured by passing
    the `--role-name` argument when creating the account.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to assume the role, you need to know its **Amazon Resource Name**
    (**ARN**). Working out the ARN is a multi-step process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List your member accounts by running the following command in your master account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the account you created (by its name) and note the ID value in the record.
    Using that ID, generate the role''s ARN by following this pattern:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you have changed the created role's name, update the last part of the ARN
    accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See the recipes in [Chapter 8](c19319d5-2db2-4b99-ad4c-1676db3bae2f.xhtml), *Security
    and Identity* for information on how to best manage multiple accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Service control policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **service control policies** (**SCPs**) are another major feature of AWS
    Organizations. You can apply them at multiple levels/resources, including accounts
    (both member accounts and invited accounts). Check the other recipes in this chapter
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Root credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some activities still require the root credentials of the account. An example
    activity would be closing (or deleting) an account (see the next section for more
    details).
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, you will need to do the password recovery process for the
    e-mail that was associated with the account when the `create-account` request
    was sent.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, *there is no way to delete an account created in your
    organization via the API*. We can only imagine that being able to programmatically
    delete a member account created in an organization will be a *highly requested*
    feature, and will be addressed soon. You can still go into the member account
    and close it using the root credentials, but these don't exist by default.
  prefs: []
  type: TYPE_NORMAL
- en: While you can technically delete your *organization* via the API, you cannot
    do it if you have created any member accounts in your organization (because you
    can't delete them, your organization will never be empty). This should improve
    in the near future, but is still worth being aware of now.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Setting up a master account* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a service control policy* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Cross-account user roles* recipe in [Chapter 8](c19319d5-2db2-4b99-ad4c-1676db3bae2f.xhtml),
    *Security and Identity*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inviting an account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it makes sense to create new accounts in your organization, what do you
    do with all the other accounts you have now?
  prefs: []
  type: TYPE_NORMAL
- en: You can invite existing accounts to your organization, which means you can treat
    them just like a member account from an administrative point of view. This greatly
    simplifies the administrative overhead of your accounts, as there isn't a separate
    process for *old* and *new* accounts.
  prefs: []
  type: TYPE_NORMAL
- en: As this is generally performed once for each existing account, we will use the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: All the AWS organizations functionality is available via the SDKs and AWS CLI
    tool. If you need to automate this process, you can.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must have enabled AWS Organizations for one of your accounts (your master
    account), and have another account that has not been made part of an organization
    yet (that you will invite).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the AWS console of the master account, click on your username, and select
    My Organization from the drop-down menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be taken to the AWS Organizations console, where you will see your
    current account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Invitations tab in the top-right of the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Invite account button. Specify the account ID (or main e-mail
    address) of the account to invite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click Invite, you will be taken to a list of invitations where you
    can view the status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this stage, the target/invited account will receive an e-mail notifying
    them of the invite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Log in to the invited account and go to the My Organization link under the
    user menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the AWS Organizations console, you can see the pending invite on the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the invite, you can see its details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_014.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the invite includes all features, you will be asked to confirm your acceptance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_015.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once confirmed, you can now see the details of the organization you have joined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_016.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this stage, the master account will be notified of the accepted invite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Back in the master account, you can now see the new account alongside the master:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_018.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there are many steps involved, the process of inviting an existing account
    is a relatively simple *handshake* process. This means that both sides must actively
    initiate/accept the invite, in order for it to succeed—an invite cannot be forced.
  prefs: []
  type: TYPE_NORMAL
- en: After specifying the target account's account ID (or e-mail address), the e-mail
    address associated will be notified.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the handshake process, the invited account must explicitly accept
    the invite.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the default invite type (and what we have used
    in the recipe) is to use the full feature set for AWS Organizations. As noted
    in the console, this means that the invited account *could be prevented from leaving
    the organization* if the relevant policies are configured.
  prefs: []
  type: TYPE_NORMAL
- en: After confirmation, both parties will receive an e-mail detailing the membership.
    From this point forward, the bill for the invited account will be paid by the
    master account.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Invited accounts are treated differently to accounts created via the organizations
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Removing accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike *member accounts* (which are created via the AWS Organizations API),
    invited accounts can be removed from an organization.
  prefs: []
  type: TYPE_NORMAL
- en: Consolidated billing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an alternative to the *full feature* invite, it is possible to specify just
    *consolidated billing* mode for an organization. In this mode, no OUs or policies
    will be available, only the billing relationship will be shared between the accounts
    (that is, the master account will pay the bill of the member accounts).
  prefs: []
  type: TYPE_NORMAL
- en: Any pre-existing accounts that were configured to use consolidated billing will
    have been *automatically* migrated to AWS Organizations *in consolidated billing
    mode*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a member account* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing your accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of ways to group and arrange your AWS accounts. How you
    do this is completely up to you, but here are a few examples to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Business unit (BU) or location**: You may wish to allow each BU to work in
    isolation on their own products or services, on their own schedule, without impacting
    other parts of the business'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost center**: Grouping according to cost may help you track spend versus
    allocated budget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment type**: It may make sense to group your development, test, and
    production environments together in a way which helps you manage the controls
    across each environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workload type or data classification**: Your company may want to isolate
    workload types from each other, or ensure that particular controls are applied
    to all accounts containing a particular kind of data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following fictitious example, we have isolated the **Sitwell Enterprises
    Account** from the rest of the organization by placing it in an OU called **Sudden
    Valley**. Perhaps they operate in a different geographical location and have different
    regulatory requirements around controls and access.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_019.png)'
  prefs: []
  type: TYPE_IMG
- en: Organization hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that while it''s also technically possible for us to put the master account
    inside an OU, we avoid doing this to make it obvious that:'
  prefs: []
  type: TYPE_NORMAL
- en: It's the master account and has control over the entire organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rules we set, using SCPs for the member accounts in our organization, do
    not apply to the master account (because they can't)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more about SCPs in the *Adding a service control policy* recipe in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can proceed, you should have already done the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up a master AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created an organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created member accounts in your organization, or manually added member accounts
    (by invitation) to your organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll now cover the one-line commands you'll need to perform the common tasks
    required to manage your OU. These commands can only be performed in your master
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the root ID for your organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can run this command to get the ID of the root for your organization. The
    root is created automatically for you when you create your organization in your
    master account. The ID returned to you will look something like this: `r-bmdw`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating an OU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create an OU, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine where you'd like this OU to live. If it lives directly underneath
    the root, then your root ID will be the parent. Alternatively, if this OU is going
    to be a child of another OU, use the ID of the OU instead. Obviously, if this
    is the first OU you're creating, the root will be the parent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the CLI to create your OU like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Getting the ID of an OU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you need to fetch the ID of an OU, you can use the CLI to do so; note that
    you''ll need to know the parent of the OU. Here is how you''d get a list of all
    the OUs and their IDs in a root or OU:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Adding an account to an OU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add an account to an OU, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When an account is initially added to your organization, it will be a child
    of the organization root. To add it to the OU you just created, you need to move
    it using the following CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you wish to move an account from one OU to another, simply use the same command
    but use the existing parent OU ID instead of the root ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Removing an account from an OU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To remove an account from an OU, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to remove an account from an OU, you have two options. You can move
    it to another OU, or you can move it back to the root. If you decide you want
    to delete an OU, you'll need to make sure no accounts exist inside it first (we'll
    show you how to do this next).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to move an account back to the root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Deleting an OU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete an OU, you''ll first need to make sure it''s empty by removing its
    child accounts (as mentioned previously). You can then go ahead and delete the
    OU like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If done right, grouping your accounts together using OUs will help you simplify
    the way you manage and administer them. Try to use only *just enough* OUs to get
    the job done. The idea is to use OUs to make your life easier, not harder.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **organizational control policies** (**OCPs**) can be attached to your
    root, OU, or AWS accounts. At this time, only one kind of OCP is supported: SCP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accounts can only belong to one OU or root.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, OUs can only belong to one OU or root.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's best to avoid deploying resources in the master account because this account
    can't be controlled with SCPs. The master account should be treated as a management
    account for audit, control, and billing purposes only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding a service control policy* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a service control policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, we should talk through what SCPs are and how they apply to
    your organization.
  prefs: []
  type: TYPE_NORMAL
- en: An SCP consists of a policy document which defines (by way of filtering) the
    services and actions which are able to be used and performed within an OU or in
    an AWS account. If you've previously configured an IAM policy, then you will have
    more than enough background knowledge to get started with SCPs. Apart from a couple
    of minor exceptions, they look exactly the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'SCPs can be applied at different levels throughout an organization. These are
    the levels, starting from the bottom and going up:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS account level**: An SCP applied to an AWS account takes effect on only
    that account. It''s important to note that the SCP is very separate from the IAM
    policies which live inside the account. For example, an SCP might allow full access
    to S3 for an AWS account but the IAM policies inside the account may deny it (for
    certain roles and/or users).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OU level**: An SCP applied at the OU level will apply to all the AWS accounts
    which live inside the OU as well as any child OUs (remember that an OU can by
    a member of an OU).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Root level**: If an SCP is applied at this level, it will apply to all AWS
    accounts inside the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things can start to get really interesting when you have an SCP applied at multiple
    levels. The *intersection* of the polices at the root, OU, account, and IAM levels
    is evaluated and will determine whether or not an API call is allowed to be made.
    For example, someone belonging to an IAM role which has full administrator access
    to an account still won't be able to call any EC2 APIs if any of the SCPs above
    it (account, OU, root) deny EC2 access.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we have a top-level OU, Austero Bluth, with an SCP
    which allows access to all AWS resources for all OUs and accounts underneath it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_020.png)'
  prefs: []
  type: TYPE_IMG
- en: Organization hierarchy and policies
  prefs: []
  type: TYPE_NORMAL
- en: Austero Bluth has two child OUs; let's focus on Sudden Valley. It has an SCP
    which allows only EC2 and S3\. By using a whitelisting approach, anything except
    these two services will be denied. Remembering that SCPs act like a filter, any
    OU or AWS accounts living underneath the Sudden Valley OU will, at most, have
    access to EC2 and S3.
  prefs: []
  type: TYPE_NORMAL
- en: The **Sitwell Enterprises Account** also has an SCP attached to it. This particular
    SCP allows S3 and SQS. Note that the SQS statement will have no effect here because
    the Sitwell account is inside an OU which does not allow SQS. Also note that this
    account has no access to EC2 despite the **Sudden Valley OU** allowing it; this
    is because EC2 wasn't explicitly allowed in the SCP attached to the account.
  prefs: []
  type: TYPE_NORMAL
- en: At the IAM level, we have a role in the Sitwell AWS account which allows full
    administrator privileges. But, because the intersection of the SCPs governing
    this account will only allow S3, anyone using this role will be denied access
    if they attempt to use EC2 or SQS, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Let's also take a look at the **Bluth Company Account**. The SCP which is attached
    to it allows full AWS access; however, it lives inside an OU (Balboa Bay) which
    only allows EC2, RDS, and S3\. There is an IAM role inside this account which
    also allows full admin access but, again, administrators in this account will
    be limited to EC2, RDS, and S3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to step through creating an SCP and adding it to an OU.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''re going to need the ID of the OU in question; you can fetch it from the
    organizations web console or use the CLI. It will look something like this: `ou-bmdw-omzypry7`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be preparing a policy document as well. In this example, we''re going
    to add an SCP to the Sudden Valley OU to allow access to EC2 and S3\. Here''s
    what our SCP looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a new file in your text editor, add your JSON policy document, and save
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `create-policy` CLI command like so. We''re getting a little tricky
    with the `tr` command here: we''re using it to remove the carriage returns from
    the policy document, so pay close attention to the syntax in the example provided.
    Unfortunately, the organizations CLI doesn''t allow us to provide the path to
    the policy document directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If the preceding CLI command works successfully, some JSON will be returned
    to you containing the ID of the policy we just added. It will look something like
    this: `p-o9to04s7`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now go ahead and attach this policy to the OU. Use the following CLI
    command to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, the preceding command does not output anything if it ran successfully.
    You can double-check your handiwork in the AWS web console or use the following
    CLI command to verify that it worked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, the policies you add will act as a filter at each level of your organizational
    structure. With this in mind, it might be a good time to point out that testing
    your policies on a single account before applying them organization-wide will
    save you a lot of heartache. Making sweeping changes to an SCP living at the top
    of your organization may create an unforeseen situation at the AWS account level
    at the bottom of the chain. A local admin in an AWS account is not able to override
    SCPs.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of publishing, you are only able to have a single root inside an
    organization (it's created automatically for you when you create an organization).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For obvious reasons, the master account is not affected by any SCPs which are
    attached to it. You may also notice that it's technically possible to place the
    master account in an OU; again, it will be unaffected by any SCPs which have been
    attached to that OU.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the master account is unaffected by SCPs, it's a good idea to leave it
    as empty as possible and to not create any resources in it. Use child AWS accounts
    instead so you can apply fine-grained controls to them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SCPs are required on each OU and account but shouldn't be considered the only
    form of access control for your AWS accounts. Apply IAM where appropriate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When creating our policy, we have to specify a `--type` parameter. At the time
    of publishing, AWS only supports one variant of OCP: `SERVICE_CONTROL_POLICY`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As much as possible, follow the principle of least privilege. You want to give
    your AWS accounts access to only the services they need. This helps you mitigate
    damage caused by misclicks, programming errors, or compromised accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the long run, you may find it advantageous to not assign controls at the
    root level. Instead, you may be better off adding *all* accounts to an OU and
    applying your controls to the OU instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your policies can take a whitelisting or blacklisting approach. In this recipe,
    we've used a whitelist approach, but you may instead prefer to allow your OUs
    and accounts to use all services except the ones you explicitly disallow. You
    should choose one of these approaches and stick with it, as mixing the two will
    cause you lots of confusion down the road.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike IAM policies, you can't specify conditions in SCP documents and `Resource`
    *must* be `*`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Federating with your AWS account* recipe in [Chapter 8](c19319d5-2db2-4b99-ad4c-1676db3bae2f.xhtml), *Security
    and Identity* for some discussion around IAM roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
