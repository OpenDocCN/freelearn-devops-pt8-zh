- en: Advanced Networking Topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenStack Networking provides many networking functions that enable users to
    develop topologies that best support their applications. While this book focuses
    on many of the core features of OpenStack Networking, there are times when certain
    use cases require advanced functionality. In this chapter, we will look at some
    advanced OpenStack Networking features, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: VLAN-aware VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BGP Speaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network availability zones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VLAN-aware VMs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VLAN tagging is a method in which a VLAN tag is added to an Ethernet header
    to help distinguish traffic from multiple networks carried over the same interface.
    In the architectures described so far in this book, an instance connected to multiple
    networks has a corresponding interface for each network. This works at small scale,
    but PCI limitations may cap the number of interfaces that can be attached to an
    instance. In addition, hot-plugging interfaces to running VMs when attaching new
    networks may have unexpected results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram visualizes the concept of one vNIC per network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b526e8a-0a19-451a-bf9d-6a6449b75d7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1
  prefs: []
  type: TYPE_NORMAL
- en: In Figure 14.1, a single vNIC is associated with a Neutron port. Neutron typically
    performs VLAN tagging at the virtual switch based on the `segmentation_id` provider
    attribute of the respective VLAN network. In this case, instances are not expected
    to perform any VLAN tagging themselves and any tagged traffic from the instance
    may be dropped by the compute node.
  prefs: []
  type: TYPE_NORMAL
- en: The trunk service plugin for Neutron allows VLAN-aware VM instances to tag traffic
    within the guest operating system, enabling the quick addition and removal of
    network sub-interfaces and setting up advanced use cases such as **Network Function
    Virtualization (NFV)**.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the trunk plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The trunk service plugin was first introduced in the Newton release of OpenStack
    Networking and supports both the Open vSwitch and Linux bridge ML2 mechanism drivers.
    Other drivers may be supported but are outside the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the trunk service plugin, modify the Neutron configuration file
    on the `controller` node hosting the Neutron API service. In this environment,
    API services are running on `controller01`. Append `trunk` to the list of existing
    service plugins as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to append to the existing list of plugins, rather than replacing the
    list contents, to avoid issues with the API and existing network objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Close the file and restart the `neutron-server` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Defining the workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Trunking in OpenStack Networking introduces some concepts that are important
    to the workflow needed when attaching trunks to an instance. Those concepts include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Trunks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parent ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sub-ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A trunk is an object that binds a parent port to sub-ports.
  prefs: []
  type: TYPE_NORMAL
- en: A parent port is a port that is attached to the instance and represents the
    trunk link from within the guest operating system. The interface looks and feels
    like a normal interface and inherits the MAC and IP addresses of the parent port.
    Any traffic sent over the associated interface inside the guest operating system
    is considered untagged and follows normal Neutron port behavior.
  prefs: []
  type: TYPE_NORMAL
- en: A sub-port is associated with a network and subnet and is not directly attached
    to an instance. Instead, the sub-port is associated with the trunk object. A VLAN
    sub-interface can be configured within the guest operating system using the properties
    of the sub-port and network, including a unique MAC address, IP address, and 802.1q
    VLAN tag. Traffic sent over the sub-interface is tagged by the guest operating
    system and forwarded through the parent port.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram visualizes the concept of one vNIC per instance using
    802.1q VLAN encapsulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/016ba293-12e7-455e-97b9-55aa2158269b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2
  prefs: []
  type: TYPE_NORMAL
- en: In Figure 14.2, a single vNIC is associated with a parent port. The parent port
    and multiple sub-ports are associated with a trunk. Instances can tag traffic
    using 802.1q encapsulation and the Neutron agent configures the underlying bridges
    to support this tagged traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'When leveraging trunking within OpenStack, the following workflow should be
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: Create networks and subnets for the trunk and sub-ports
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the trunk
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add sub-ports to the trunk
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch an instance connected to the trunk
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the instance is active, additional sub-ports can be associated with the
    trunk and configured within the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Managing trunks in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following commands are used to manage trunk objects in the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Trunk Management Commands** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `network trunk create` | Create a trunk. |'
  prefs: []
  type: TYPE_TB
- en: '| `network trunk delete` | Delete a given trunk. |'
  prefs: []
  type: TYPE_TB
- en: '| `network trunk list` | List trunks that belong to a given project. |'
  prefs: []
  type: TYPE_TB
- en: '| `network trunk set` | Update properties of a given trunk. |'
  prefs: []
  type: TYPE_TB
- en: '| `network trunk show` | Show details of a given trunk. |'
  prefs: []
  type: TYPE_TB
- en: '| `network trunk unset` | Unset properties of a given trunk. |'
  prefs: []
  type: TYPE_TB
- en: Creating trunks in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a trunk, use the `openstack network trunk create` command shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `--description` argument is optional and can be used to provide a description
    for the trunk.
  prefs: []
  type: TYPE_NORMAL
- en: The `--parent-port` argument is required and is used to associate a parent port
    with the trunk. The parent port is the port attached to the instance and acts
    as the trunk within the guest operating system.
  prefs: []
  type: TYPE_NORMAL
- en: The `--subport` argument is optional and is used to associate a sub-port to
    the trunk. A sub-port corresponds to an `802.1q` sub-interface within the guest
    operating system. If sub-ports are not specified, all tagged traffic from the
    instance will be dropped.
  prefs: []
  type: TYPE_NORMAL
- en: The `--project` and `--project-domain` arguments are optional and can be used
    to associate the trunk with a project and/or domain other than the creating project.
  prefs: []
  type: TYPE_NORMAL
- en: The `name` argument is required and can be used to specify a name for the trunk.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting trunks in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete a trunk, use the `openstack network trunk delete` command shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `trunk` argument specifies the name or ID or the trunk to delete. Multiple
    trunks can be deleted simultaneously using a space-separated list.
  prefs: []
  type: TYPE_NORMAL
- en: Listing trunks in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To list all load balances, use the `openstack network trunk list` command shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Showing trunk details in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To show the details of a trunk, use the `openstack network trunk show` command
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `trunk` argument specifies the name or ID or the trunk to show.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a trunk in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To update the attributes of a trunk, use the `openstack network trunk set`
    or `openstack network trunk unset` commands shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `set` and `unset` commands can be used to add and remove sub-ports from
    a trunk without impacting the running instance.
  prefs: []
  type: TYPE_NORMAL
- en: Building a trunk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate the creation and use of trunks within OpenStack Networking,
    I have configured the following networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e854e11c-e424-4b13-be96-1635d17981e0.png)'
  prefs: []
  type: TYPE_IMG
- en: The guest instance will run the Ubuntu 16.04 LTS operating system and will be
    connected to a single interface.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the parent port
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step to building a functional trunk is to first create the parent
    port. The parent port should be associated with a network that handles untagged
    traffic, in other words, the native VLAN. With the OpenStack client, create a
    port with the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: `parent0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network: `GREEN_NET`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1e40bbc-f999-4cf0-b089-43b72cde1022.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a sub-port
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sub-ports should be associated with networks that will be tagged using 802.1q
    VLAN encapsulation inside the instance. Sub-ports are then associated with a trunk
    and correspond to tagged sub-interfaces within the guest operating system. With
    the openstack client, create a sub-port with the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: `child-p0c1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network: `RED_NET`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10da0eb0-4e3d-48e5-9945-a02f779bcdb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Like any other port, when a sub-port is created, Neutron dynamically assigns
    a MAC address. However, when creating VLAN sub-interfaces inside an instance,
    the sub-interface may inherit the MAC address of the parent interface. This behavior
    is acceptable since the interfaces are on two different networks and MAC addresses
    do not pass the Layer 2 boundary. However, it may be problematic from a port security
    standpoint. When creating sub-interfaces in an instance, you will need to specify
    the MAC address Neutron assigned for the sub-port or create the sub-port with
    the same MAC address of the parent port.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a trunk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last step to building a functional trunk is to create a trunk object and
    associate parent and sub-ports. The information required for the trunk includes
    a name, a parent port with segment details, and sub-port(s) with segment details.
    With the OpenStack client, create a trunk object with the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: `trunk0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parent port: `parent0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sub-port: `child-p0c1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sub-port VLAN: `42`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa517dcc-a558-4a02-9a97-27673fa1a1a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Booting an instance with a trunk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the trunk has been created and associated with a parent and sub-port,
    an instance can be booted and attached only to the parent port. Since a VIF is
    not being created for the subinterface(s), there's no need to attach them at boot.
    Logic within Neutron will associate traffic from sub-interfaces inside the instance
    with the parent interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following OpenStack command syntax can be used to boot the instance with
    a parent port attached:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/e3b8f0b2-7c66-4598-b700-ed0d843018b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once booted, the instance should be available via the IP address of the parent
    port and can be accessed from a namespace or workstation if the proper routing
    is in place. From within the respective `qdhcp` namespace, confirm connectivity
    to the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a461357-f987-47b7-97b1-e62eef974d4a.png)'
  prefs: []
  type: TYPE_IMG
- en: The `ip addr list` command confirms the IP address of the parent port has been
    configured by DHCP, and our ability to connect to the instance demonstrates traffic
    over the parent port of the trunk is untagged and behaves like an ordinary port.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using utilities from the `iproute2` package, we can configure a sub-interface
    using the attributes of our sub-port shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MAC address: `fa:16:3e:a9:48:cc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VLAN ID: `42`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For convenience, an 802.1q VLAN sub-interface can be created with the `ip link`
    command. Or, on Ubuntu systems, the `/etc/network/interfaces` file can be modified
    for persistent interface configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `ip link add` command, create the sub-interface and modify the MAC
    address using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `ip addr list` command, the newly configured interface should be
    visible in an UP state and have the specified MAC address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/291187a8-49d0-4f90-8c67-eff40f75ff29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The interface does not yet have an IP address, so connectivity cannot be confirmed
    just yet. There are two options available for IP address configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: DHCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static address configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To utilize DHCP, simply run the `dhclient ens3.42` command as root or with
    `sudo` privileges. When operating properly, the Neutron DHCP server should return
    the assigned address and the interface will be configured automatically as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c70f1c9a-e5f3-4be7-a844-3163a40c1fa3.png)'
  prefs: []
  type: TYPE_IMG
- en: The specifics of a dynamic or static, but persistent, interface configuration
    will vary based on the installed guest operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick ping to the DHCP server of the `RED_NET` network demonstrates tagged
    traffic from the instance''s interface traverses the network appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/286de616-2220-456d-8151-928349eefe4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Reviewing the network plumbing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the `compute` node hosting instance, a quick look at the bridges using `brctl
    show` does not reveal anything unique about the configuration that would support
    tagging within the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ceca0aa-2211-4e39-be32-5a380c235635.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, a deeper look at the `tap` interface that corresponds to the sub-port
    reveals that the interface has been configured as a VLAN interface off the parent
    port using VLAN ID 42:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22da6da0-fd9c-4831-a3d9-5374e47c3092.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Performing a packet capture on the `tap` interface associated with the parent
    port, we can see traffic leaving the instance''s sub-interface and through the
    parent interface is tagged with `802.1q VLAN ID 42`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f462893-1c2b-408a-b884-8052391c61ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `compute` node strips the `VLAN ID` and forwards the traffic out the `tap`
    interface associated with the sub-port untagged:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b4bfd94-1e09-490b-bb7e-f3126c52efec.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, normal Linux bridge-related traffic operations take place and
    traffic is forwarded over the physical network infrastructure as described earlier
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: When an Open vSwitch network agent is used, flow rules may be used instead of
    the methods described here.
  prefs: []
  type: TYPE_NORMAL
- en: BGP dynamic routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BGP dynamic routing enables the advertisement of self-service IPv4 and IPv6
    network prefixes to network devices that support BGP, including many physical
    and virtual router and firewall devices. By advertising self-service networks
    attached to Neutron routers, the use of floating IPs can be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: BGP speaker functionality relies on address scopes and requires knowledge of
    their operation for proper deployment.
  prefs: []
  type: TYPE_NORMAL
- en: BGP dynamic routing consists of a Neutron API service plugin that implements
    the Networking service extension and an agent that manages BGP peering sessions.
    A cloud administrator creates and configures a BGP speaker using the CLI or API
    and manually schedules it to one or more hosts running the agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram demonstrates the BGP agent''s peering relationship with
    a physical router that enables the physical route to reach self-service networks
    behind Neutron routers via a common provider network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd00ab74-3e18-4de4-a9c8-18baebc194f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Prefix advertisement requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'BGP dynamic routing advertises prefixes for self-service networks and host
    routes for floating IP addresses. The following conditions must be met to advertise
    a self-service network:'
  prefs: []
  type: TYPE_NORMAL
- en: The external and self-service network must reside in the same address scope.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Neutron router must contain an interface on the self-service subnet and
    a gateway on the external provider network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The BGP speaker must peer with a device connected to the same external provider
    network as the Neutron router.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The BGP speaker has the `advertise_tenant_networks` attribute set to `True`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Advertisement of a floating IP address requires satisfying the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: The BGP speaker must peer with a device connected to the same external provider
    network as the Neutron router hosting the floating IP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The BGP speaker has the `advertise_floating_ip_host_routes` attribute set to
    `True`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations with distributed virtual routers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In deployments using distributed virtual routers, the BGP speaker advertises
    floating IP addresses and self-service networks differently. For floating IP addresses,
    the BGP speaker advertises the floating IP agent gateway on the corresponding
    compute node as the next-hop IP address. For self-service networks using SNAT,
    the BGP speaker advertises the DVR SNAT node as the next-hop IP address. This
    means that traffic directed to a self-service network behind a distributed virtual
    router must traverse a `network` node, while traffic to a floating IP will avoid
    routing through a `network` node.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring BGP dynamic routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The BGP dynamic routing plugin was first introduced in the Mitaka release of
    OpenStack Networking and supports the native L3 agent provided by Neutron.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the BGP service plugin, modify the Neutron configuration file on
    the controller node hosting the Neutron API service. In this environment, API
    services are running on `controller01`. Add the BGP plugin to the list of existing
    service plugins as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to append to the existing list of plugins, rather than replacing the
    list contents, to avoid issues with the API and existing network objects.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the Neutron BGP agent, run the following command on the `controller01`
    node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Neutron stores the BGP agent configuration in the `/etc/neutron/bgp_dragent.ini`
    file. The most common configuration options will be covered in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Edit the BGP agent configuration file and add the following configuration,
    substituting the `bgp_router_id` value with the IP address of the respective controller
    node, if necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the management IP address of the host is used. Using an IP
    address and interface dedicated to router advertisements is possible but outside
    the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Restarting services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the configuration changes to take effect, restart the `Neutron API` service
    and the `Neutron BGP` agent with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the OpenStack client to verify the BGP agent is checked in and ready for
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/792267db-db0a-4736-823e-98df4e5efed7.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing BGP speakers in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As of the Pike release of the OpenStack client, BGP speaker-related commands
    are not yet available. The following neutron client commands are used to manage
    BGP speaker objects in the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **BGP speaker management Commands** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-dragent-list-hosting-speaker` | Lists dynamic routing agents hosting
    a BGP speaker. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-dragent-speaker-add` | Adds a BGP speaker to a dynamic routing agent.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-dragent-speaker-remove` | Removes a BGP speaker from a dynamic routing
    agent. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-peer-create` | Creates a BGP peer. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-peer-delete` | Deletes a BGP peer. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-peer-list` | List BGP peers. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-peer-show` | Shows information of a given BGP peer. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-peer-update` | Updates BGP peer information. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-advertiseroute-list` | Lists routes advertised by a given BGP
    speaker. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-create` | Creates a BGP speaker. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-delete` | Deletes a BGP speaker. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-list` | Lists BGP speakers. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-list-on-dragent` | Lists BGP speakers hosted by a dynamic routing
    agent. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-network-add` | Adds a network to the BGP speaker. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-network-remove` | Removes a network from the BGP speaker. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-peer-add` | Adds a peer to the BGP speaker. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-peer-remove` | Removes a peer from the BGP speaker. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-show` | Shows information of a given BGP speaker. |'
  prefs: []
  type: TYPE_TB
- en: '| `bgp-speaker-update` | Updates BGP speaker information. |'
  prefs: []
  type: TYPE_TB
- en: Please refer to the upstream documentation on configuring address scopes and
    subnet pools for use with BGP dynamic routing. The following URL provides working
    examples that demonstrate BGP dynamic routing: [https://docs.openstack.org/neutron/pike/admin/config-bgp-dynamic-routing.html](https://docs.openstack.org/neutron/pike/admin/config-bgp-dynamic-routing.html).
  prefs: []
  type: TYPE_NORMAL
- en: Network availability zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A network availability zone is a logical construct used to define a group of
    network nodes that share similar power, network, and cooling systems. Network
    resources can be scheduled to multiple availability zones to ensure a high level
    of reliability when a single zone fails. This is similar to how Nova availability
    zones work, as they as used to group compute nodes in a similar way to ensure
    components of an application are not in the same failure domain.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring network availability zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Availability zone support for Neutron was first introduced in the Mitaka release
    of OpenStack Networking, and supports both the DHCP and L3 agents included with
    Neutron. Other drivers may be supported but are outside the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the environment built throughout this book, the Neutron L3 agent has been
    installed on most of the nodes to demonstrate standalone, highly available, and
    distributed virtual routers. A quick look at the Neutron agent list shows they
    all share a common availability zone based on default agent configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05987e3f-947d-4093-bd84-809932f61d7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To modify the availability zone for a particular L3 agent, edit the respective
    agent configuration file at `/etc/neutron/l3_agent.ini` and modify the `availability_zone`
    configuration option as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the L3 agent with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'A fresh look at the agent list reflects the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6974b509-d4da-4863-976b-29ba7f711adb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'DHCP agents can also be associated with availability zones in a similar manner.
    To modify the availability zone for a particular DHCP agent, edit the respective
    agent configuration file at `/etc/neutron/dhcp_agent.ini` and modify the `availability_zone`
    configuration option as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the `DHCP` agent with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Scheduling routers to availability zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Neutron routers can be directed to a particular availability zone during the
    router creation process. Using the `openstack router create` command, we can schedule
    a router to availability zone `AZ1` with the `--availability-zone-hint` argument
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5d83fb7-9998-4222-9545-280a7a054222.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After attaching the router to the external provider network `GATEWAY_NET`,
    we can see the router was scheduled to an `L3` agent in availability zone `AZ1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4642805-0141-48f9-8892-8f418a357589.png)'
  prefs: []
  type: TYPE_IMG
- en: Directing a router to a particular availability zone does not ensure it will
    be scheduled to an L3 agent in that zone, however, as the directive is more of
    a scheduler hint than an outright requirement. Neutron performs best effort scheduling
    using availability zone hints. Multiple availability zones can be specified, if
    desired, by repeating the `--availability-zone-hint` argument as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling DHCP services to availability zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DHCP service for a given network is something often taken for granted and
    is not directly seen, let alone configurable, by users or operators via the API.
    Neutron has scheduled DHCP services across multiple DHCP agents for some time
    using the following configuration option in the Neutron configuration file at
    `/etc/neutron/neutron.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When `dhcp_agents_per_network` is greater than `1`, and more than one DHCP
    agent exists in the environment, Neutron will automatically schedule a network
    to multiple `DHCP` agents up to the specified value. Using the `openstack network
    create` command with the `--availability-zone-hint` argument, we can suggest to
    the scheduler that `DHCP` services be split amongst multiple availability zones
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Directing a network's DHCP services to a particular availability zone does not
    ensure it will be scheduled to a DHCP agent in that zone, however, as the directive
    is more of a scheduler hint than an outright requirement. Neutron performs best
    effort scheduling using availability zone hints. Multiple availability zones can
    be specified, if desired, by repeating the `--availability-zone-hint` argument
    as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: More information on the use of network availability zones can be found in upstream
    documentation available at the following URL: [https://docs.openstack.org/neutron/pike/admin/config-az.html](https://docs.openstack.org/neutron/pike/admin/config-az.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As workloads for OpenStack-based clouds have evolved, so have the features provided
    by OpenStack Networking. VLAN-aware VMs, BGP speakers, and network availability
    zones are just a few of the advanced network features that have been introduced
    in Neutron over the last few release cycles and there are more to come in future
    releases. Used in tandem, these features can provide users with the ability to
    define rich network topologies and provide high-availability to a number of different
    applications and workloads in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: The release notes for OpenStack Networking are a great place to find information
    on recently released features as well as bug fixes for existing functions. To
    find the release notes for a given release, please visit the following URL: [https://docs.openstack.org/releasenotes/neutron/index.html](https://docs.openstack.org/releasenotes/neutron/index.html).
  prefs: []
  type: TYPE_NORMAL
