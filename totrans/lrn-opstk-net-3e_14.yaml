- en: Advanced Networking Topics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级网络话题
- en: 'OpenStack Networking provides many networking functions that enable users to
    develop topologies that best support their applications. While this book focuses
    on many of the core features of OpenStack Networking, there are times when certain
    use cases require advanced functionality. In this chapter, we will look at some
    advanced OpenStack Networking features, including the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 网络提供了许多网络功能，使用户能够开发最佳支持其应用程序的拓扑。虽然本书重点介绍了 OpenStack 网络的许多核心功能，但某些用例有时需要高级功能。在本章中，我们将探讨一些高级的
    OpenStack 网络功能，包括以下内容：
- en: VLAN-aware VMs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VLAN 感知虚拟机
- en: BGP Speaker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BGP Speaker
- en: Network availability zones
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络可用性区域
- en: VLAN-aware VMs
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VLAN 感知虚拟机
- en: VLAN tagging is a method in which a VLAN tag is added to an Ethernet header
    to help distinguish traffic from multiple networks carried over the same interface.
    In the architectures described so far in this book, an instance connected to multiple
    networks has a corresponding interface for each network. This works at small scale,
    but PCI limitations may cap the number of interfaces that can be attached to an
    instance. In addition, hot-plugging interfaces to running VMs when attaching new
    networks may have unexpected results.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: VLAN 标记是一种方法，在以太网头部添加 VLAN 标签，以帮助区分通过同一接口传输的多个网络的流量。在本书中迄今为止描述的架构中，一个连接到多个网络的实例为每个网络都有一个相应的接口。这在小规模环境中有效，但
    PCI 限制可能会限制可以附加到实例的接口数量。此外，当附加新网络时，热插拔接口到正在运行的虚拟机可能会产生意外结果。
- en: 'The following diagram visualizes the concept of one vNIC per network:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示化了每个网络一个虚拟网络接口卡（vNIC）的概念：
- en: '![](img/2b526e8a-0a19-451a-bf9d-6a6449b75d7c.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b526e8a-0a19-451a-bf9d-6a6449b75d7c.png)'
- en: Figure 14.1
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1
- en: In Figure 14.1, a single vNIC is associated with a Neutron port. Neutron typically
    performs VLAN tagging at the virtual switch based on the `segmentation_id` provider
    attribute of the respective VLAN network. In this case, instances are not expected
    to perform any VLAN tagging themselves and any tagged traffic from the instance
    may be dropped by the compute node.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在图 14.1 中，一个单独的 vNIC 与 Neutron 端口关联。Neutron 通常根据各个 VLAN 网络的 `segmentation_id`
    提供程序属性在虚拟交换机上执行 VLAN 标记。在这种情况下，实例不需要自行执行 VLAN 标记，任何来自实例的标记流量可能会被计算节点丢弃。
- en: The trunk service plugin for Neutron allows VLAN-aware VM instances to tag traffic
    within the guest operating system, enabling the quick addition and removal of
    network sub-interfaces and setting up advanced use cases such as **Network Function
    Virtualization (NFV)**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 的 trunk 服务插件允许 VLAN 感知的虚拟机实例在客户操作系统内标记流量，从而实现快速添加和移除网络子接口，并配置 **网络功能虚拟化（NFV）**
    等高级用例。
- en: Configuring the trunk plugin
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 trunk 插件
- en: The trunk service plugin was first introduced in the Newton release of OpenStack
    Networking and supports both the Open vSwitch and Linux bridge ML2 mechanism drivers.
    Other drivers may be supported but are outside the scope of this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: trunk 服务插件首次出现在 OpenStack Networking 的 Newton 版本中，支持 Open vSwitch 和 Linux bridge
    ML2 机制驱动程序。其他驱动程序可能也得到支持，但不在本书的讨论范围内。
- en: 'To install the trunk service plugin, modify the Neutron configuration file
    on the `controller` node hosting the Neutron API service. In this environment,
    API services are running on `controller01`. Append `trunk` to the list of existing
    service plugins as shown here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 trunk 服务插件，请修改托管 Neutron API 服务的 `controller` 节点上的 Neutron 配置文件。在此环境中，API
    服务运行在 `controller01` 上。将 `trunk` 添加到现有服务插件列表中，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Be sure to append to the existing list of plugins, rather than replacing the
    list contents, to avoid issues with the API and existing network objects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保将 `trunk` 添加到现有插件列表中，而不是替换列表内容，以避免与 API 和现有网络对象发生冲突。
- en: 'Close the file and restart the `neutron-server` service:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭文件并重启 `neutron-server` 服务：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Defining the workflow
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义工作流
- en: 'Trunking in OpenStack Networking introduces some concepts that are important
    to the workflow needed when attaching trunks to an instance. Those concepts include
    the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 网络中引入了 trunking，带来了一些在将 trunk 附加到实例时需要的工作流相关概念。这些概念包括以下内容：
- en: Trunks
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Trunk
- en: Parent ports
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 父端口
- en: Sub-ports
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子端口
- en: A trunk is an object that binds a parent port to sub-ports.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Trunk 是将父端口与子端口绑定的对象。
- en: A parent port is a port that is attached to the instance and represents the
    trunk link from within the guest operating system. The interface looks and feels
    like a normal interface and inherits the MAC and IP addresses of the parent port.
    Any traffic sent over the associated interface inside the guest operating system
    is considered untagged and follows normal Neutron port behavior.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 父端口是附加到实例的端口，并代表客户操作系统中的 trunk 链接。该接口看起来像一个正常接口，并继承父端口的 MAC 和 IP 地址。通过客户操作系统内相关接口发送的任何流量都被视为未标记流量，并遵循正常的
    Neutron 端口行为。
- en: A sub-port is associated with a network and subnet and is not directly attached
    to an instance. Instead, the sub-port is associated with the trunk object. A VLAN
    sub-interface can be configured within the guest operating system using the properties
    of the sub-port and network, including a unique MAC address, IP address, and 802.1q
    VLAN tag. Traffic sent over the sub-interface is tagged by the guest operating
    system and forwarded through the parent port.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 子端口与网络和子网关联，并且不会直接连接到实例。相反，子端口与 trunk 对象关联。可以在客户操作系统中使用子端口和网络的属性配置 VLAN 子接口，包括唯一的
    MAC 地址、IP 地址和 802.1q VLAN 标签。通过子接口发送的流量会被客户操作系统标记，并通过父端口转发。
- en: 'The following diagram visualizes the concept of one vNIC per instance using
    802.1q VLAN encapsulation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示化展示了每个实例使用 802.1q VLAN 封装的一个 vNIC 概念：
- en: '![](img/016ba293-12e7-455e-97b9-55aa2158269b.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/016ba293-12e7-455e-97b9-55aa2158269b.png)'
- en: Figure 14.2
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2
- en: In Figure 14.2, a single vNIC is associated with a parent port. The parent port
    and multiple sub-ports are associated with a trunk. Instances can tag traffic
    using 802.1q encapsulation and the Neutron agent configures the underlying bridges
    to support this tagged traffic.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在图 14.2 中，一个 vNIC 与一个父端口关联。父端口和多个子端口与 trunk 关联。实例可以使用 802.1q 封装标记流量，Neutron
    代理会配置底层桥接器来支持这些标记流量。
- en: 'When leveraging trunking within OpenStack, the following workflow should be
    used:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中使用 trunk 时，应遵循以下工作流程：
- en: Create networks and subnets for the trunk and sub-ports
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 trunk 和子端口创建网络和子网
- en: Create the trunk
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 trunk
- en: Add sub-ports to the trunk
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 trunk 添加子端口
- en: Launch an instance connected to the trunk
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个连接到 trunk 的实例
- en: Once the instance is active, additional sub-ports can be associated with the
    trunk and configured within the instance.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实例处于活动状态，可以将更多子端口与 trunk 关联，并在实例中进行配置。
- en: Managing trunks in the CLI
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中管理 trunks
- en: 'The following commands are used to manage trunk objects in the CLI:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令用于在 CLI 中管理 trunk 对象：
- en: '| **Trunk Management Commands** | **Description** |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| **Trunk 管理命令** | **描述** |'
- en: '| `network trunk create` | Create a trunk. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `network trunk create` | 创建一个 trunk。 |'
- en: '| `network trunk delete` | Delete a given trunk. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `network trunk delete` | 删除给定 trunk。 |'
- en: '| `network trunk list` | List trunks that belong to a given project. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `network trunk list` | 列出属于某个项目的 trunks。 |'
- en: '| `network trunk set` | Update properties of a given trunk. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `network trunk set` | 更新给定 trunk 的属性。 |'
- en: '| `network trunk show` | Show details of a given trunk. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `network trunk show` | 显示给定 trunk 的详细信息。 |'
- en: '| `network trunk unset` | Unset properties of a given trunk. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `network trunk unset` | 取消设置给定 trunk 的属性。 |'
- en: Creating trunks in the CLI
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中创建 trunk
- en: 'To create a trunk, use the `openstack network trunk create` command shown here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 trunk，请使用如下所示的 `openstack network trunk create` 命令：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `--description` argument is optional and can be used to provide a description
    for the trunk.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`--description` 参数是可选的，可以用于为 trunk 提供描述。'
- en: The `--parent-port` argument is required and is used to associate a parent port
    with the trunk. The parent port is the port attached to the instance and acts
    as the trunk within the guest operating system.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`--parent-port` 参数是必需的，用于将父端口与 trunk 关联。父端口是附加到实例上的端口，并在客户操作系统中充当 trunk。'
- en: The `--subport` argument is optional and is used to associate a sub-port to
    the trunk. A sub-port corresponds to an `802.1q` sub-interface within the guest
    operating system. If sub-ports are not specified, all tagged traffic from the
    instance will be dropped.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`--subport` 参数是可选的，用于将子端口与 trunk 关联。子端口对应于客户操作系统中的 `802.1q` 子接口。如果没有指定子端口，则来自实例的所有标记流量将被丢弃。'
- en: The `--project` and `--project-domain` arguments are optional and can be used
    to associate the trunk with a project and/or domain other than the creating project.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`--project` 和 `--project-domain` 参数是可选的，可以用于将 trunk 与创建项目以外的项目和/或域关联。'
- en: The `name` argument is required and can be used to specify a name for the trunk.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`name` 参数是必需的，可用于指定 trunk 的名称。'
- en: Deleting trunks in the CLI
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中删除 trunks
- en: 'To delete a trunk, use the `openstack network trunk delete` command shown here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除 trunk，请使用如下的 `openstack network trunk delete` 命令：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `trunk` argument specifies the name or ID or the trunk to delete. Multiple
    trunks can be deleted simultaneously using a space-separated list.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`trunk` 参数指定要删除的 trunk 的名称或 ID。可以使用空格分隔的列表同时删除多个 trunks。'
- en: Listing trunks in the CLI
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中列出 trunks
- en: 'To list all load balances, use the `openstack network trunk list` command shown
    here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有负载均衡器，使用如下 `openstack network trunk list` 命令：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Showing trunk details in the CLI
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中显示 trunk 详细信息
- en: 'To show the details of a trunk, use the `openstack network trunk show` command
    shown here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示 trunk 的详细信息，请使用如下的 `openstack network trunk show` 命令：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `trunk` argument specifies the name or ID or the trunk to show.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`trunk` 参数指定要显示的 trunk 的名称或 ID。'
- en: Updating a trunk in the CLI
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中更新 trunk
- en: 'To update the attributes of a trunk, use the `openstack network trunk set`
    or `openstack network trunk unset` commands shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新 trunk 的属性，请使用如下的 `openstack network trunk set` 或 `openstack network trunk
    unset` 命令：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `set` and `unset` commands can be used to add and remove sub-ports from
    a trunk without impacting the running instance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `set` 和 `unset` 命令在不影响运行实例的情况下向 trunk 添加或删除子端口。
- en: Building a trunk
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 trunk
- en: 'To demonstrate the creation and use of trunks within OpenStack Networking,
    I have configured the following networks:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示在 OpenStack 网络中创建和使用 trunks，我配置了以下网络：
- en: '![](img/e854e11c-e424-4b13-be96-1635d17981e0.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e854e11c-e424-4b13-be96-1635d17981e0.png)'
- en: The guest instance will run the Ubuntu 16.04 LTS operating system and will be
    connected to a single interface.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端实例将运行 Ubuntu 16.04 LTS 操作系统，并将连接到单个接口。
- en: Creating the parent port
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建父端口
- en: 'The first step to building a functional trunk is to first create the parent
    port. The parent port should be associated with a network that handles untagged
    traffic, in other words, the native VLAN. With the OpenStack client, create a
    port with the following attributes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个功能性 trunk 的第一步是首先创建父端口。父端口应与处理未标记流量的网络相关联，换句话说，就是原生 VLAN。使用 OpenStack 客户端，创建具有以下属性的端口：
- en: 'Name: `parent0`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`parent0`
- en: 'Network: `GREEN_NET`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络：`GREEN_NET`
- en: 'The following command can be used:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output will resemble the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![](img/b1e40bbc-f999-4cf0-b089-43b72cde1022.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1e40bbc-f999-4cf0-b089-43b72cde1022.png)'
- en: Creating a sub-port
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建子端口
- en: 'Sub-ports should be associated with networks that will be tagged using 802.1q
    VLAN encapsulation inside the instance. Sub-ports are then associated with a trunk
    and correspond to tagged sub-interfaces within the guest operating system. With
    the openstack client, create a sub-port with the following attributes:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 子端口应与将在实例内使用 802.1q VLAN 封装进行标记的网络关联。子端口随后与 trunk 关联，并对应于客操作系统中的标记子接口。使用 OpenStack
    客户端，创建具有以下属性的子端口：
- en: 'Name: `child-p0c1`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`child-p0c1`
- en: 'Network: `RED_NET`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络：`RED_NET`
- en: 'The following command can be used:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output will resemble the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![](img/10da0eb0-4e3d-48e5-9945-a02f779bcdb0.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10da0eb0-4e3d-48e5-9945-a02f779bcdb0.png)'
- en: Like any other port, when a sub-port is created, Neutron dynamically assigns
    a MAC address. However, when creating VLAN sub-interfaces inside an instance,
    the sub-interface may inherit the MAC address of the parent interface. This behavior
    is acceptable since the interfaces are on two different networks and MAC addresses
    do not pass the Layer 2 boundary. However, it may be problematic from a port security
    standpoint. When creating sub-interfaces in an instance, you will need to specify
    the MAC address Neutron assigned for the sub-port or create the sub-port with
    the same MAC address of the parent port.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他端口一样，创建子端口时，Neutron 会动态分配一个 MAC 地址。然而，在实例内部创建 VLAN 子接口时，子接口可能会继承父接口的 MAC
    地址。由于接口位于两个不同的网络中且 MAC 地址不会跨越 Layer 2 边界，因此这种行为是可以接受的。然而，从端口安全性角度来看，可能会存在问题。创建实例中的子接口时，您需要指定
    Neutron 分配给子端口的 MAC 地址，或者使用父端口的相同 MAC 地址创建子端口。
- en: Creating a trunk
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 trunk
- en: 'The last step to building a functional trunk is to create a trunk object and
    associate parent and sub-ports. The information required for the trunk includes
    a name, a parent port with segment details, and sub-port(s) with segment details.
    With the OpenStack client, create a trunk object with the following attributes:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 创建功能性 trunk 的最后一步是创建 trunk 对象并关联父端口和子端口。trunk 所需的信息包括名称、带有段信息的父端口和带有段信息的子端口。使用
    OpenStack 客户端，创建一个具有以下属性的 trunk 对象：
- en: 'Name: `trunk0`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '名称: `trunk0`'
- en: 'Parent port: `parent0`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '父端口: `parent0`'
- en: 'Sub-port: `child-p0c1`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '子端口: `child-p0c1`'
- en: 'Sub-port VLAN: `42`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '子端口 VLAN: `42`'
- en: 'The following command can be used:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output will resemble the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![](img/aa517dcc-a558-4a02-9a97-27673fa1a1a4.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa517dcc-a558-4a02-9a97-27673fa1a1a4.png)'
- en: Booting an instance with a trunk
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动带有 trunk 的实例
- en: Now that the trunk has been created and associated with a parent and sub-port,
    an instance can be booted and attached only to the parent port. Since a VIF is
    not being created for the subinterface(s), there's no need to attach them at boot.
    Logic within Neutron will associate traffic from sub-interfaces inside the instance
    with the parent interface.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 trunk 已创建并与父端口和子端口关联，实例可以启动并仅附加到父端口。由于没有为子接口创建 VIF，因此在启动时不需要附加它们。Neutron
    内部的逻辑将会把来自实例内子接口的流量与父接口关联。
- en: 'The following OpenStack command syntax can be used to boot the instance with
    a parent port attached:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 OpenStack 命令语法可以用于启动附加父端口的实例：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/e3b8f0b2-7c66-4598-b700-ed0d843018b5.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3b8f0b2-7c66-4598-b700-ed0d843018b5.png)'
- en: Configuring the instance
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置实例
- en: 'Once booted, the instance should be available via the IP address of the parent
    port and can be accessed from a namespace or workstation if the proper routing
    is in place. From within the respective `qdhcp` namespace, confirm connectivity
    to the instance:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 启动后，实例应通过父端口的 IP 地址可用，并且如果路由正确设置，可以从命名空间或工作站访问。从相应的 `qdhcp` 命名空间内，确认与实例的连接：
- en: '![](img/4a461357-f987-47b7-97b1-e62eef974d4a.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a461357-f987-47b7-97b1-e62eef974d4a.png)'
- en: The `ip addr list` command confirms the IP address of the parent port has been
    configured by DHCP, and our ability to connect to the instance demonstrates traffic
    over the parent port of the trunk is untagged and behaves like an ordinary port.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ip addr list` 命令确认父端口的 IP 地址已通过 DHCP 配置，并且我们能够连接到实例，证明 trunk 的父端口上的流量是未标记的，并表现得像普通端口。
- en: 'Using utilities from the `iproute2` package, we can configure a sub-interface
    using the attributes of our sub-port shown here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用来自 `iproute2` 包的工具，我们可以使用以下子端口的属性配置子接口：
- en: 'MAC address: `fa:16:3e:a9:48:cc`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MAC 地址: `fa:16:3e:a9:48:cc`'
- en: 'VLAN ID: `42`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VLAN ID: `42`'
- en: For convenience, an 802.1q VLAN sub-interface can be created with the `ip link`
    command. Or, on Ubuntu systems, the `/etc/network/interfaces` file can be modified
    for persistent interface configuration.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便，可以使用 `ip link` 命令创建 802.1q VLAN 子接口。或者，在 Ubuntu 系统上，可以修改 `/etc/network/interfaces`
    文件以进行持久的接口配置。
- en: 'Using the `ip link add` command, create the sub-interface and modify the MAC
    address using the following commands:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ip link add` 命令，创建子接口并使用以下命令修改 MAC 地址：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using the `ip addr list` command, the newly configured interface should be
    visible in an UP state and have the specified MAC address:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ip addr list` 命令，新的配置接口应处于 UP 状态并具有指定的 MAC 地址：
- en: '![](img/291187a8-49d0-4f90-8c67-eff40f75ff29.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/291187a8-49d0-4f90-8c67-eff40f75ff29.png)'
- en: 'The interface does not yet have an IP address, so connectivity cannot be confirmed
    just yet. There are two options available for IP address configuration:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 该接口尚未拥有 IP 地址，因此暂时无法确认连接性。IP 地址配置有两种可选方案：
- en: DHCP
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP
- en: Static address configuration
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态地址配置
- en: 'To utilize DHCP, simply run the `dhclient ens3.42` command as root or with
    `sudo` privileges. When operating properly, the Neutron DHCP server should return
    the assigned address and the interface will be configured automatically as shown
    here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 DHCP，只需以 root 用户身份或使用 `sudo` 权限运行 `dhclient ens3.42` 命令。操作正常时，Neutron DHCP
    服务器应返回分配的地址，并且接口会自动配置，如下所示：
- en: '![](img/c70f1c9a-e5f3-4be7-a844-3163a40c1fa3.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c70f1c9a-e5f3-4be7-a844-3163a40c1fa3.png)'
- en: The specifics of a dynamic or static, but persistent, interface configuration
    will vary based on the installed guest operating system.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 动态或静态（但持久的）接口配置的具体实现将根据安装的来宾操作系统有所不同。
- en: 'A quick ping to the DHCP server of the `RED_NET` network demonstrates tagged
    traffic from the instance''s interface traverses the network appropriately:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对`RED_NET`网络的DHCP服务器进行快速ping操作，证明来自实例接口的标记流量正确地穿越网络：
- en: '![](img/286de616-2220-456d-8151-928349eefe4f.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/286de616-2220-456d-8151-928349eefe4f.png)'
- en: Reviewing the network plumbing
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查网络结构
- en: 'On the `compute` node hosting instance, a quick look at the bridges using `brctl
    show` does not reveal anything unique about the configuration that would support
    tagging within the instance:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在承载实例的`compute`节点上，使用`brctl show`查看桥接设备，未发现任何与实例内标记支持相关的独特配置：
- en: '![](img/9ceca0aa-2211-4e39-be32-5a380c235635.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ceca0aa-2211-4e39-be32-5a380c235635.png)'
- en: 'However, a deeper look at the `tap` interface that corresponds to the sub-port
    reveals that the interface has been configured as a VLAN interface off the parent
    port using VLAN ID 42:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，深入查看与子端口对应的`tap`接口，发现该接口已被配置为使用VLAN ID 42，从父端口划分出的VLAN接口：
- en: '![](img/22da6da0-fd9c-4831-a3d9-5374e47c3092.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22da6da0-fd9c-4831-a3d9-5374e47c3092.png)'
- en: 'Performing a packet capture on the `tap` interface associated with the parent
    port, we can see traffic leaving the instance''s sub-interface and through the
    parent interface is tagged with `802.1q VLAN ID 42`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对与父端口关联的`tap`接口进行数据包捕获，可以看到流量从实例的子接口离开并通过父接口时，带有`802.1q VLAN ID 42`标记：
- en: '![](img/9f462893-1c2b-408a-b884-8052391c61ee.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f462893-1c2b-408a-b884-8052391c61ee.png)'
- en: 'The `compute` node strips the `VLAN ID` and forwards the traffic out the `tap`
    interface associated with the sub-port untagged:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`compute`节点会去除`VLAN ID`，并将流量以未标记的形式通过与子端口关联的`tap`接口转发：'
- en: '![](img/8b4bfd94-1e09-490b-bb7e-f3126c52efec.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b4bfd94-1e09-490b-bb7e-f3126c52efec.png)'
- en: At this point, normal Linux bridge-related traffic operations take place and
    traffic is forwarded over the physical network infrastructure as described earlier
    in this book.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，正常的Linux桥接相关流量操作开始进行，流量通过前面本书中描述的物理网络基础设施转发。
- en: When an Open vSwitch network agent is used, flow rules may be used instead of
    the methods described here.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Open vSwitch网络代理时，可能会使用流规则而不是此处描述的方法。
- en: BGP dynamic routing
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BGP动态路由
- en: BGP dynamic routing enables the advertisement of self-service IPv4 and IPv6
    network prefixes to network devices that support BGP, including many physical
    and virtual router and firewall devices. By advertising self-service networks
    attached to Neutron routers, the use of floating IPs can be avoided.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: BGP动态路由使得能够将自服务IPv4和IPv6网络前缀广告发送给支持BGP的网络设备，包括许多物理和虚拟路由器以及防火墙设备。通过向Neutron路由器附加的自服务网络进行广告，可以避免使用浮动IP。
- en: BGP speaker functionality relies on address scopes and requires knowledge of
    their operation for proper deployment.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: BGP发言人功能依赖于地址范围，并需要了解其操作以便正确部署。
- en: BGP dynamic routing consists of a Neutron API service plugin that implements
    the Networking service extension and an agent that manages BGP peering sessions.
    A cloud administrator creates and configures a BGP speaker using the CLI or API
    and manually schedules it to one or more hosts running the agent.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: BGP动态路由由一个Neutron API服务插件组成，该插件实现了网络服务扩展，以及一个管理BGP对等会话的代理。云管理员通过CLI或API创建并配置BGP发言人，并手动将其调度到一个或多个运行代理的主机上。
- en: 'The following diagram demonstrates the BGP agent''s peering relationship with
    a physical router that enables the physical route to reach self-service networks
    behind Neutron routers via a common provider network:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了BGP代理与物理路由器的对等关系，该对等关系使得物理路由能够通过共同的提供商网络到达Neutron路由器后面的自服务网络：
- en: '![](img/dd00ab74-3e18-4de4-a9c8-18baebc194f3.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd00ab74-3e18-4de4-a9c8-18baebc194f3.png)'
- en: Prefix advertisement requirements
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前缀广告要求
- en: 'BGP dynamic routing advertises prefixes for self-service networks and host
    routes for floating IP addresses. The following conditions must be met to advertise
    a self-service network:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: BGP动态路由将自服务网络的前缀和浮动IP地址的主机路由进行广告。广告自服务网络时，必须满足以下条件：
- en: The external and self-service network must reside in the same address scope.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部网络和自服务网络必须位于同一地址范围内。
- en: The Neutron router must contain an interface on the self-service subnet and
    a gateway on the external provider network.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neutron路由器必须在自服务子网中包含一个接口，并在外部提供商网络中包含一个网关。
- en: The BGP speaker must peer with a device connected to the same external provider
    network as the Neutron router.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BGP发言人必须与连接到与Neutron路由器相同外部提供商网络的设备建立对等关系。
- en: The BGP speaker has the `advertise_tenant_networks` attribute set to `True`.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BGP 交换机的 `advertise_tenant_networks` 属性设置为 `True`。
- en: 'Advertisement of a floating IP address requires satisfying the following conditions:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 广播浮动 IP 地址需要满足以下条件：
- en: The BGP speaker must peer with a device connected to the same external provider
    network as the Neutron router hosting the floating IP.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BGP 交换机必须与连接到与托管浮动 IP 的 Neutron 路由器相同外部提供商网络的设备建立对等连接。
- en: The BGP speaker has the `advertise_floating_ip_host_routes` attribute set to
    `True`.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BGP 交换机的 `advertise_floating_ip_host_routes` 属性设置为 `True`。
- en: Operations with distributed virtual routers
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与分布式虚拟路由器的操作
- en: In deployments using distributed virtual routers, the BGP speaker advertises
    floating IP addresses and self-service networks differently. For floating IP addresses,
    the BGP speaker advertises the floating IP agent gateway on the corresponding
    compute node as the next-hop IP address. For self-service networks using SNAT,
    the BGP speaker advertises the DVR SNAT node as the next-hop IP address. This
    means that traffic directed to a self-service network behind a distributed virtual
    router must traverse a `network` node, while traffic to a floating IP will avoid
    routing through a `network` node.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用分布式虚拟路由器的部署中，BGP 交换机以不同的方式广播浮动 IP 地址和自服务网络。对于浮动 IP 地址，BGP 交换机将相应计算节点上的浮动
    IP 代理网关广播为下一跳 IP 地址。对于使用 SNAT 的自服务网络，BGP 交换机将 DVR SNAT 节点广播为下一跳 IP 地址。这意味着，指向分布式虚拟路由器后面的自服务网络的流量必须经过一个
    `network` 节点，而指向浮动 IP 的流量将绕过 `network` 节点。
- en: Configuring BGP dynamic routing
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 BGP 动态路由
- en: The BGP dynamic routing plugin was first introduced in the Mitaka release of
    OpenStack Networking and supports the native L3 agent provided by Neutron.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: BGP 动态路由插件首次在 OpenStack Networking 的 Mitaka 版本中引入，并支持 Neutron 提供的原生 L3 代理。
- en: 'To install the BGP service plugin, modify the Neutron configuration file on
    the controller node hosting the Neutron API service. In this environment, API
    services are running on `controller01`. Add the BGP plugin to the list of existing
    service plugins as shown here:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 BGP 服务插件，请修改托管 Neutron API 服务的控制节点上的 Neutron 配置文件。在此环境中，API 服务在 `controller01`
    上运行。按照如下所示，将 BGP 插件添加到现有服务插件列表中：
- en: '[PRE12]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Be sure to append to the existing list of plugins, rather than replacing the
    list contents, to avoid issues with the API and existing network objects.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将插件添加到现有插件列表中，而不是替换列表内容，以避免与 API 和现有网络对象出现问题。
- en: Installing the agent
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装代理
- en: 'To install the Neutron BGP agent, run the following command on the `controller01`
    node:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Neutron BGP 代理，请在 `controller01` 节点上运行以下命令：
- en: '[PRE13]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Neutron stores the BGP agent configuration in the `/etc/neutron/bgp_dragent.ini`
    file. The most common configuration options will be covered in the following sections.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 将 BGP 代理配置存储在 `/etc/neutron/bgp_dragent.ini` 文件中。以下部分将介绍最常见的配置选项。
- en: Configuring the agent
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置代理
- en: 'Edit the BGP agent configuration file and add the following configuration,
    substituting the `bgp_router_id` value with the IP address of the respective controller
    node, if necessary:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 BGP 代理配置文件，并根据需要将 `bgp_router_id` 值替换为相应控制节点的 IP 地址：
- en: '[PRE14]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this example, the management IP address of the host is used. Using an IP
    address and interface dedicated to router advertisements is possible but outside
    the scope of this book.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，使用的是主机的管理 IP 地址。可以使用专门用于路由器广播的 IP 地址和接口，但超出了本书的范围。
- en: Restarting services
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重启服务
- en: 'For the configuration changes to take effect, restart the `Neutron API` service
    and the `Neutron BGP` agent with the following command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要使配置更改生效，请使用以下命令重启 `Neutron API` 服务和 `Neutron BGP` 代理：
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use the OpenStack client to verify the BGP agent is checked in and ready for
    use:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenStack 客户端验证 BGP 代理是否已检查并准备好使用：
- en: '![](img/792267db-db0a-4736-823e-98df4e5efed7.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/792267db-db0a-4736-823e-98df4e5efed7.png)'
- en: Managing BGP speakers in the CLI
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中管理 BGP 交换机
- en: 'As of the Pike release of the OpenStack client, BGP speaker-related commands
    are not yet available. The following neutron client commands are used to manage
    BGP speaker objects in the CLI:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 从 OpenStack 客户端的 Pike 版本开始，BGP 交换机相关的命令尚不可用。以下 neutron 客户端命令用于在 CLI 中管理 BGP
    交换机对象：
- en: '| **BGP speaker management Commands** | **Description** |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| **BGP 交换机管理命令** | **描述** |'
- en: '| `bgp-dragent-list-hosting-speaker` | Lists dynamic routing agents hosting
    a BGP speaker. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-dragent-list-hosting-speaker` | 列出托管 BGP 交换机的动态路由代理。 |'
- en: '| `bgp-dragent-speaker-add` | Adds a BGP speaker to a dynamic routing agent.
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-dragent-speaker-add` | 向动态路由代理添加 BGP 说话人。 |'
- en: '| `bgp-dragent-speaker-remove` | Removes a BGP speaker from a dynamic routing
    agent. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-dragent-speaker-remove` | 从动态路由代理中移除 BGP 说话人。 |'
- en: '| `bgp-peer-create` | Creates a BGP peer. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-peer-create` | 创建 BGP 对等体。 |'
- en: '| `bgp-peer-delete` | Deletes a BGP peer. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-peer-delete` | 删除 BGP 对等体。 |'
- en: '| `bgp-peer-list` | List BGP peers. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-peer-list` | 列出 BGP 对等体。 |'
- en: '| `bgp-peer-show` | Shows information of a given BGP peer. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-peer-show` | 显示给定 BGP 对等体的信息。 |'
- en: '| `bgp-peer-update` | Updates BGP peer information. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-peer-update` | 更新 BGP 对等体信息。 |'
- en: '| `bgp-speaker-advertiseroute-list` | Lists routes advertised by a given BGP
    speaker. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-advertiseroute-list` | 列出由给定 BGP 说话人广告的路由。 |'
- en: '| `bgp-speaker-create` | Creates a BGP speaker. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-create` | 创建 BGP 说话人。 |'
- en: '| `bgp-speaker-delete` | Deletes a BGP speaker. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-delete` | 删除 BGP 说话人。 |'
- en: '| `bgp-speaker-list` | Lists BGP speakers. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-list` | 列出 BGP 说话人。 |'
- en: '| `bgp-speaker-list-on-dragent` | Lists BGP speakers hosted by a dynamic routing
    agent. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-list-on-dragent` | 列出由动态路由代理托管的 BGP 说话人。 |'
- en: '| `bgp-speaker-network-add` | Adds a network to the BGP speaker. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-network-add` | 向 BGP 说话人添加网络。 |'
- en: '| `bgp-speaker-network-remove` | Removes a network from the BGP speaker. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-network-remove` | 从 BGP 说话人中移除网络。 |'
- en: '| `bgp-speaker-peer-add` | Adds a peer to the BGP speaker. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-peer-add` | 向 BGP 说话人添加一个对等体。 |'
- en: '| `bgp-speaker-peer-remove` | Removes a peer from the BGP speaker. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-peer-remove` | 从 BGP 说话人中移除对等体。 |'
- en: '| `bgp-speaker-show` | Shows information of a given BGP speaker. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-show` | 显示给定 BGP 说话人的信息。 |'
- en: '| `bgp-speaker-update` | Updates BGP speaker information. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `bgp-speaker-update` | 更新 BGP 说话人信息。 |'
- en: Please refer to the upstream documentation on configuring address scopes and
    subnet pools for use with BGP dynamic routing. The following URL provides working
    examples that demonstrate BGP dynamic routing: [https://docs.openstack.org/neutron/pike/admin/config-bgp-dynamic-routing.html](https://docs.openstack.org/neutron/pike/admin/config-bgp-dynamic-routing.html).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考上游文档，了解如何配置用于 BGP 动态路由的地址范围和子网池。以下 URL 提供了演示 BGP 动态路由的工作示例：[https://docs.openstack.org/neutron/pike/admin/config-bgp-dynamic-routing.html](https://docs.openstack.org/neutron/pike/admin/config-bgp-dynamic-routing.html)。
- en: Network availability zones
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络可用区
- en: A network availability zone is a logical construct used to define a group of
    network nodes that share similar power, network, and cooling systems. Network
    resources can be scheduled to multiple availability zones to ensure a high level
    of reliability when a single zone fails. This is similar to how Nova availability
    zones work, as they as used to group compute nodes in a similar way to ensure
    components of an application are not in the same failure domain.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 网络可用区是一个逻辑构造，用于定义一组共享相似电力、网络和冷却系统的网络节点。网络资源可以调度到多个可用区，以确保在某个区域发生故障时，系统具有较高的可靠性。这类似于
    Nova 可用区的工作方式，它们用于将计算节点分组，确保应用程序的组件不在同一故障域内。
- en: Configuring network availability zones
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置网络可用区
- en: Availability zone support for Neutron was first introduced in the Mitaka release
    of OpenStack Networking, and supports both the DHCP and L3 agents included with
    Neutron. Other drivers may be supported but are outside the scope of this book.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 的可用区支持首次在 OpenStack Networking 的 Mitaka 版本中引入，并支持 Neutron 中包含的 DHCP
    和 L3 代理。其他驱动程序可能被支持，但超出了本书的范围。
- en: 'In the environment built throughout this book, the Neutron L3 agent has been
    installed on most of the nodes to demonstrate standalone, highly available, and
    distributed virtual routers. A quick look at the Neutron agent list shows they
    all share a common availability zone based on default agent configuration options:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书所构建的环境中，Neutron L3 代理已安装在大多数节点上，以演示独立、高可用和分布式虚拟路由器。快速查看 Neutron 代理列表显示，它们都共享一个基于默认代理配置选项的公共可用区：
- en: '![](img/05987e3f-947d-4093-bd84-809932f61d7a.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05987e3f-947d-4093-bd84-809932f61d7a.png)'
- en: 'To modify the availability zone for a particular L3 agent, edit the respective
    agent configuration file at `/etc/neutron/l3_agent.ini` and modify the `availability_zone`
    configuration option as shown here:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改特定 L3 代理的可用区，请编辑位于 `/etc/neutron/l3_agent.ini` 的相应代理配置文件，并按如下所示修改 `availability_zone`
    配置选项：
- en: '[PRE16]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Restart the L3 agent with the following command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令重新启动 L3 代理：
- en: '[PRE17]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A fresh look at the agent list reflects the change:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看代理列表，反映了变化：
- en: '![](img/6974b509-d4da-4863-976b-29ba7f711adb.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6974b509-d4da-4863-976b-29ba7f711adb.png)'
- en: 'DHCP agents can also be associated with availability zones in a similar manner.
    To modify the availability zone for a particular DHCP agent, edit the respective
    agent configuration file at `/etc/neutron/dhcp_agent.ini` and modify the `availability_zone`
    configuration option as shown here:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP代理也可以以类似方式与可用区关联。要修改特定DHCP代理的可用区，请编辑`/etc/neutron/dhcp_agent.ini`中的相应代理配置文件，并修改`availability_zone`配置选项，如下所示：
- en: '[PRE18]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Restart the `DHCP` agent with the following command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令重启`DHCP`代理：
- en: '[PRE19]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Scheduling routers to availability zones
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将路由器调度到可用区
- en: 'Neutron routers can be directed to a particular availability zone during the
    router creation process. Using the `openstack router create` command, we can schedule
    a router to availability zone `AZ1` with the `--availability-zone-hint` argument
    as shown here:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由器创建过程中，可以将Neutron路由器定向到特定的可用区。使用`openstack router create`命令，我们可以通过`--availability-zone-hint`参数将路由器调度到可用区`AZ1`，如下面所示：
- en: '![](img/d5d83fb7-9998-4222-9545-280a7a054222.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5d83fb7-9998-4222-9545-280a7a054222.png)'
- en: 'After attaching the router to the external provider network `GATEWAY_NET`,
    we can see the router was scheduled to an `L3` agent in availability zone `AZ1`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在将路由器连接到外部提供者网络`GATEWAY_NET`之后，我们可以看到路由器被调度到可用区`AZ1`中的`L3`代理：
- en: '![](img/b4642805-0141-48f9-8892-8f418a357589.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4642805-0141-48f9-8892-8f418a357589.png)'
- en: Directing a router to a particular availability zone does not ensure it will
    be scheduled to an L3 agent in that zone, however, as the directive is more of
    a scheduler hint than an outright requirement. Neutron performs best effort scheduling
    using availability zone hints. Multiple availability zones can be specified, if
    desired, by repeating the `--availability-zone-hint` argument as necessary.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 将路由器调度到特定可用区并不能确保它会被调度到该区的L3代理，因为该指令更像是一个调度提示，而非明确的要求。Neutron使用可用区提示进行最佳努力调度。如果需要，可以通过重复`--availability-zone-hint`参数来指定多个可用区。
- en: Scheduling DHCP services to availability zones
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将DHCP服务调度到可用区
- en: 'The DHCP service for a given network is something often taken for granted and
    is not directly seen, let alone configurable, by users or operators via the API.
    Neutron has scheduled DHCP services across multiple DHCP agents for some time
    using the following configuration option in the Neutron configuration file at
    `/etc/neutron/neutron.conf`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 给定网络的DHCP服务通常是被视为理所当然的，用户或操作员通过API无法直接看到或配置它。Neutron已经使用以下配置选项在Neutron配置文件`/etc/neutron/neutron.conf`中将DHCP服务调度到多个DHCP代理：
- en: '[PRE20]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When `dhcp_agents_per_network` is greater than `1`, and more than one DHCP
    agent exists in the environment, Neutron will automatically schedule a network
    to multiple `DHCP` agents up to the specified value. Using the `openstack network
    create` command with the `--availability-zone-hint` argument, we can suggest to
    the scheduler that `DHCP` services be split amongst multiple availability zones
    as shown here:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当`dhcp_agents_per_network`大于`1`，且环境中存在多个DHCP代理时，Neutron将自动将网络调度到多个`DHCP`代理，直到指定的值为止。使用带有`--availability-zone-hint`参数的`openstack
    network create`命令，我们可以建议调度器将`DHCP`服务分配到多个可用区，如下所示：
- en: '[PRE21]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Directing a network's DHCP services to a particular availability zone does not
    ensure it will be scheduled to a DHCP agent in that zone, however, as the directive
    is more of a scheduler hint than an outright requirement. Neutron performs best
    effort scheduling using availability zone hints. Multiple availability zones can
    be specified, if desired, by repeating the `--availability-zone-hint` argument
    as necessary.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 将网络的DHCP服务调度到特定可用区并不能确保它会被调度到该区的DHCP代理，因为该指令更像是一个调度提示，而非明确的要求。Neutron使用可用区提示进行最佳努力调度。如果需要，可以通过重复`--availability-zone-hint`参数来指定多个可用区。
- en: More information on the use of network availability zones can be found in upstream
    documentation available at the following URL: [https://docs.openstack.org/neutron/pike/admin/config-az.html](https://docs.openstack.org/neutron/pike/admin/config-az.html).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用网络可用区的更多信息，请参阅上游文档，网址：[https://docs.openstack.org/neutron/pike/admin/config-az.html](https://docs.openstack.org/neutron/pike/admin/config-az.html)。
- en: Summary
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As workloads for OpenStack-based clouds have evolved, so have the features provided
    by OpenStack Networking. VLAN-aware VMs, BGP speakers, and network availability
    zones are just a few of the advanced network features that have been introduced
    in Neutron over the last few release cycles and there are more to come in future
    releases. Used in tandem, these features can provide users with the ability to
    define rich network topologies and provide high-availability to a number of different
    applications and workloads in the cloud.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 随着基于 OpenStack 的云工作负载的发展，OpenStack 网络功能也不断演进。VLAN 感知虚拟机、BGP 交换机和网络可用性区域只是 Neutron
    在过去几个发布周期中引入的一些高级网络功能，未来的版本还将带来更多功能。将这些功能结合使用，可以为用户提供定义丰富网络拓扑的能力，并为云中的多种应用和工作负载提供高可用性。
- en: The release notes for OpenStack Networking are a great place to find information
    on recently released features as well as bug fixes for existing functions. To
    find the release notes for a given release, please visit the following URL: [https://docs.openstack.org/releasenotes/neutron/index.html](https://docs.openstack.org/releasenotes/neutron/index.html).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 网络的发布说明是查找最近发布的功能和现有功能的 bug 修复的绝佳来源。要查找给定版本的发布说明，请访问以下网址：[https://docs.openstack.org/releasenotes/neutron/index.html](https://docs.openstack.org/releasenotes/neutron/index.html)。
