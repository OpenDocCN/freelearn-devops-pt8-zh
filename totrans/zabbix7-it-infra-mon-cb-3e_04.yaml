- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Working with Triggers and Alerts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用触发器和警报
- en: Now, what use would all of that collected data in Zabbix be without actually
    doing some alerting with it? Of course, we can use Zabbix to collect our data
    and just go over it manually, but Zabbix gets a lot more useful when we actually
    start sending out notifications to users. This way, we don’t have to always keep
    an eye on our Zabbix frontend, but we can just let our triggers and alerts do
    the work for us, redirecting us to the frontend only when we need it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果没有实际进行警报操作，那么 Zabbix 收集的所有数据又有什么用呢？当然，我们可以使用 Zabbix 来收集数据，并手动查看它们，但 Zabbix
    在我们开始发送通知给用户时变得更有用。这样，我们就不需要时刻关注 Zabbix 前端，而是让触发器和警报为我们工作，只有在需要时，才会引导我们到前端。
- en: In Zabbix 7, you will find a new trigger expressions syntax compared to Zabbix
    5\. This syntax has been available since Zabbix 5.4, so if you skipped some versions,
    this might be the first time you’re working with it. If you’ve been working with
    a Zabbix version before version 5.4, keep in mind that you might need to get used
    to this new syntax. If you have Zabbix 5.4 or higher running already, the syntax
    will be the same in Zabbix 7.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Zabbix 7 中，你会发现与 Zabbix 5 相比，触发器表达式的语法有所变化。这种语法自 Zabbix 5.4 版本以来已经可用，因此如果你跳过了某些版本，这可能是你第一次接触这种语法。如果你之前使用的是
    Zabbix 5.4 之前的版本，请记住，你可能需要适应这种新的语法。如果你已经运行 Zabbix 5.4 或更高版本，那么 Zabbix 7 中的语法将保持一致。
- en: 'We will learn all about setting up effective triggers with the new expression
    format and about alerts in the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的教程中详细学习如何使用新的表达式格式设置有效的触发器，以及如何设置警报：
- en: Setting up triggers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置触发器
- en: Setting up advanced triggers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置高级触发器
- en: Setting up alerts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置警报
- en: Keeping alerts effective
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持警报的有效性
- en: Customizing alerts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义警报
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, we will need a Zabbix server, for instance, the one used in
    the previous chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们需要一台 Zabbix 服务器，例如前一章中使用的那台服务器。
- en: The Zabbix server installed on a Linux distribution of your choice. We will
    use the server set up in [*Chapter 1*](B19803_01.xhtml#_idTextAnchor021).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你选择的 Linux 发行版上安装 Zabbix 服务器。我们将使用在[*第一章*](B19803_01.xhtml#_idTextAnchor021)中设置的服务器。
- en: MariaDB set up to work with your Zabbix server.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB 设置以与 Zabbix 服务器配合工作。
- en: NGINX or Apache set up to serve the Zabbix frontend.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 NGINX 或 Apache 以提供 Zabbix 前端。
- en: We will also need a Linux host to monitor so that we can actually build some
    cool triggers to use.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要一台 Linux 主机进行监控，以便实际构建一些有趣的触发器来使用。
- en: Setting up triggers
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置触发器
- en: Triggers are important in Zabbix because they notify you as to what’s going
    on with your data. We want to get a trigger when our data reaches a certain threshold
    or when we receive a certain value.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器在 Zabbix 中很重要，因为它们会通知你数据的状态变化。当我们的数据达到某个阈值或收到某个值时，我们希望触发一个警报。
- en: So, let’s get started with setting up some cool triggers. There are loads of
    different options for defining triggers, but after reading this recipe, you should
    be able to set up some of the most prominent triggers. Let’s take your trigger
    experience to the next level.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始设置一些有趣的触发器吧。定义触发器有许多不同的选项，但阅读完本教程后，你应该能够设置一些最常见的触发器。让我们将你的触发器经验提升到一个新的水平。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need our Zabbix server ready and we will need a Linux
    host. I will use the `lar-book-agent_simple` host from the previous chapter because
    we already have some items on that.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们需要准备好 Zabbix 服务器，并且需要一台 Linux 主机。我将使用上一章中的`lar-book-agent_simple`主机，因为我们已经在该主机上配置了一些项目。
- en: We’ll also need one more host that is monitored by the Zabbix agent with the
    Zabbix agent template. We’ll use one of the items on this host to create a trigger.
    This will be the `lar-book-agent_passive` host from the previous chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个由 Zabbix 代理监控的主机，并使用 Zabbix 代理模板。我们将使用该主机上的一个项目来创建触发器。这将是上一章中的`lar-book-agent_passive`主机。
- en: On this host, we will already have some triggers available, but we will extend
    these triggers further to inform us even better.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在此主机上，我们已经有一些可用的触发器，但我们将进一步扩展这些触发器，以便更好地通知我们。
- en: How to do it…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In this section, we are going to create three triggers to monitor state changes.
    Let’s get started by creating our first trigger.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建三个触发器来监控状态变化。让我们从创建第一个触发器开始。
- en: Trigger 1 – SSH service monitoring
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器 1 – SSH 服务监控
- en: 'Let’s create a simple trigger on the `lar-book-agent_simple` host. We made
    a simple check on this host called `Check if port 22 is available`, but we haven’t
    created anything to notify us about this yet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`lar-book-agent_simple`主机上创建一个简单的触发器。我们在该主机上进行了一个名为`检查端口 22 是否可用`的简单检查，但我们还没有创建任何通知机制：
- en: First, let’s get started by going to **Data collection** | **Hosts**, then clicking
    the host and going to **Triggers**. This is where we will find our triggers and
    where we can create them. We want to create a new trigger here by clicking the
    blue **Create trigger** button in the top-right corner.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们开始前往**数据收集** | **主机**，然后点击主机并进入**触发器**。在这里我们可以找到我们的触发器并创建新的触发器。我们将在右上角点击蓝色的**创建触发器**按钮来创建新的触发器。
- en: 'Let’s create a new trigger with the following information:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新的触发器，使用以下信息：
- en: '![Figure 4.1 – The Zabbix trigger creation page – Service unreachable](img/B19803_04_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – Zabbix 触发器创建页面 – 服务无法访问](img/B19803_04_01.jpg)'
- en: Figure 4.1 – The Zabbix trigger creation page – Service unreachable
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – Zabbix 触发器创建页面 – 服务无法访问
- en: Click on **Add** and finish creating the trigger. This will create a trigger
    for us that will fire when our **Secure Shell** (**SSH**) port goes down.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**，并完成触发器的创建。这将为我们创建一个触发器，当我们的**安全外壳**（**SSH**）端口出现故障时触发。
- en: 'Let’s test this by navigating to our host **command-line interface** (**CLI**)
    and executing some commands to shut our Zabbix server off from port **22**. We
    will add an **iptables** rule to block off all incoming traffic on port **22**
    (SSH):'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过进入我们的主机**命令行界面**（**CLI**）并执行一些命令，模拟将 Zabbix 服务器从端口**22**上关闭来测试它。我们将添加一个**iptables**规则，阻止所有进入端口**22**（SSH）的流量：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Make sure to change the **ens192** network card and the IP address **10.16.16.152**
    to your own values. You can use the following command to get that information:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将**ens192**网卡和 IP 地址**10.16.16.152**替换为您自己的值。您可以使用以下命令来获取这些信息：
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, if we click on **Dashboards** in the navigation bar, after a while we
    should see the following:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们点击导航栏中的**仪表盘**，稍等片刻后，我们应该看到以下内容：
- en: '![Figure 4.2 – Zabbix problems on a dashboard – port 22 down](img/B19803_04_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – Zabbix 仪表盘上的问题 – 端口 22 无法访问](img/B19803_04_02.jpg)'
- en: Figure 4.2 – Zabbix problems on a dashboard – port 22 down
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – Zabbix 仪表盘上的问题 – 端口 22 无法访问
- en: Trigger 2 – triggering when there is a new Zabbix version
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器 2 – 当有新 Zabbix 版本发布时触发
- en: 'Now, to create our second trigger, let’s ramp it up a bit. If you followed
    *Chapter 3*, *Setting Up Zabbix Monitoring*, in the recipe titled *Setting up
    HTTP agent monitoring*, we created an item that polls the Zabbix website for the
    latest release of Zabbix, Zabbix 7.0\. Now, what we probably want to do ourselves
    is keep an eye out for any new version of Zabbix being released:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了创建我们的第二个触发器，我们来稍微提高一下难度。如果您已经跟随*第 3 章*、*设置 Zabbix 监控*中的*设置 HTTP 代理监控*这部分，我们创建了一个项目，定期查询
    Zabbix 网站以获取 Zabbix 的最新版本，Zabbix 7.0。现在，我们可能想要做的就是持续关注任何新的 Zabbix 版本发布：
- en: Let’s navigate to **Data collection** | **Hosts** and click on the **lar-book-agent_simple**
    host.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们前往**数据收集** | **主机**，并点击**lar-book-agent_simple**主机。
- en: 'Now, go to **Triggers** and click the **Create trigger** button. We will build
    our trigger with the following settings:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往**触发器**并点击**创建触发器**按钮。我们将使用以下设置来构建我们的触发器：
- en: '![Figure 4.3 – The Zabbix trigger creation page – new Zabbix 7.0 release trigger](img/B19803_04_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – Zabbix 触发器创建页面 – 新的 Zabbix 7.0 版本触发器](img/B19803_04_03.jpg)'
- en: Figure 4.3 – The Zabbix trigger creation page – new Zabbix 7.0 release trigger
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – Zabbix 触发器创建页面 – 新的 Zabbix 7.0 版本触发器
- en: Click on **Add** and finish creating the trigger.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**，并完成触发器的创建。
- en: Now, this might not actually trigger for you in the frontend, but I’ll explain
    to you just how this trigger works in the *How it works…* section of this recipe.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个触发器可能在前端不会立即触发，但我将在本食谱的*工作原理…*部分解释这个触发器是如何工作的。
- en: Trigger 3 – using multiple items in a trigger
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器 3 – 在触发器中使用多个项目
- en: 'We have seen triggers that use one item, but we can also use multiple items
    in a single trigger. Let’s build a new trigger by using multiple items in the
    same expression:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一些使用单个项目的触发器，但我们也可以在一个触发器中使用多个项目。让我们通过在同一个表达式中使用多个项目来构建一个新的触发器：
- en: Let’s navigate to **Data collection** | **Hosts** and click on the **lar-book-agent_
    passive** host. Now, go to **Triggers** and click the **Create** **trigger** button.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们前往**数据收集** | **主机**，并点击**lar-book-agent_passive**主机。接下来，前往**触发器**并点击**创建触发器**按钮。
- en: 'We are going to create a trigger with the following settings:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用以下设置创建一个触发器：
- en: '![Figure 4.4 – The Zabbix trigger creation page – inbound or outbound packets
    trigger](img/B19803_04_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – Zabbix 触发器创建页面 – 入站或出站数据包触发器](img/B19803_04_04.jpg)'
- en: Figure 4.4 – The Zabbix trigger creation page – inbound or outbound packets
    trigger
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – Zabbix 触发器创建页面 – 入站或出站数据包触发器
- en: 'Please note that your item keys might need different interface names. In my
    case, the interface is called **ens192**, so use the correct name for your interface
    in its place. Use the following Linux command to get the interface on your host:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，你的项目键可能需要不同的接口名称。在我的案例中，接口名是**ens192**，因此请使用你所在主机的正确接口名称。使用以下 Linux 命令来获取你主机的接口：
- en: '[PRE2]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Click on **Add** and finish creating the trigger.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮，完成触发器的创建。
- en: '**Here''s a tip -** On the trigger creation page, use the **Add** button next
    to the **Expression** field to add a condition and build your expression easily.
    For example, we can use the **Select** button to pick an item from a list. Something
    that’s also very useful, when using the **Function** drop-down menu, is the short
    explanation for every trigger function that’s included:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**这里有一个小提示 -** 在触发器创建页面，使用**添加**按钮，位于**表达式**字段旁边，轻松地添加条件并构建表达式。例如，我们可以使用**选择**按钮从列表中选择一个项目。当使用**函数**下拉菜单时，还有一个非常有用的功能，就是每个触发器函数都有一个简短的说明：'
- en: '![Figure 4.5 – Trigger creation page](img/B19803_04_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 触发器创建页面](img/B19803_04_05.jpg)'
- en: Figure 4.5 – Trigger creation page
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 触发器创建页面
- en: That’s all we need to do to build a trigger that will function on two items.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们创建一个在两个项目上运行的触发器所需要做的所有工作。
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: We need a good understanding of how to build triggers and how they work so we
    can create a well-set-up monitoring platform. Especially important here is that
    we make sure that our triggers are set up correctly and we test them well. Triggers
    are a very important part of Zabbix as they will be vital to inform you about
    things going on with your monitoring targets. Configure your triggers too loosely
    and you will be missing things. Configure them too strictly and you will be overloaded
    with information.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要充分理解如何构建触发器及其工作原理，以便创建一个配置良好的监控平台。特别重要的是，我们需要确保触发器配置正确，并对其进行充分的测试。触发器是 Zabbix
    中非常重要的一部分，它们对通知你监控目标的运行状态至关重要。若配置触发器过于宽松，你会错过重要信息；配置过于严格，你会被过多信息淹没。
- en: 'In all of these triggers, we have also included a trigger severity, as we can
    see in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些触发器中，我们还包括了触发器的严重性，如下图所示：
- en: '![Figure 4.6 – A Zabbix trigger severity selector](img/B19803_04_06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 一个 Zabbix 触发器严重性选择器](img/B19803_04_06.jpg)'
- en: Figure 4.6 – A Zabbix trigger severity selector
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 一个 Zabbix 触发器严重性选择器
- en: These severities are important to make sure your alerts will be correctly defined
    by importance. We can also filter on these severities in several places in the
    Zabbix frontend and even in things such as actions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些严重性级别非常重要，可以确保你的警报根据重要性正确定义。在 Zabbix 前端的多个地方，甚至在一些操作中，我们都可以根据这些严重性级别进行筛选。
- en: Now, let’s discover why we built our triggers as we did.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看为什么我们按照这样的方式构建触发器。
- en: Trigger 1 – SSH service monitoring
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器 1 – SSH 服务监控
- en: This is a very simple but effective trigger to set up in Zabbix. When our value
    returns either `1` for `UP` or `0` for `DOWN`, we can easily create triggers such
    as these—not just for monitoring logical ports that are up or down, but for everything
    that returns a simple value change from, for example, `1` to `0` and vice versa.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在 Zabbix 中非常简单但有效的触发器配置。当我们的值返回`1`表示`UP`或`0`表示`DOWN`时，我们可以轻松创建这样的触发器——不仅用于监控逻辑端口的开关状态，还适用于所有返回简单值变化的情况，例如从`1`到`0`，或者反过来。
- en: 'Now, if we break down our expression, we have the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们分析我们的表达式，得到以下内容：
- en: '![Figure 4.7 – A Zabbix trigger expression – port 22 (SSH)](img/B19803_04_07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 一个 Zabbix 触发器表达式 – 端口 22 (SSH)](img/B19803_04_07.jpg)'
- en: Figure 4.7 – A Zabbix trigger expression – port 22 (SSH)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 一个 Zabbix 触发器表达式 – 端口 22 (SSH)
- en: 'When building an expression, we have four parts:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建表达式时，我们有四个部分：
- en: '**Trigger function**: The trigger function is the part of the expression that
    determines what we expect of the value, such as whether we want just the last
    value or, for example, an average value over a period of time.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触发器函数**：触发器函数是表达式的一部分，决定了我们期望值的内容，例如是否只需要最后一个值，或者比如说一段时间内的平均值。'
- en: '**Host**: The host part of the expression is where we define which host we
    are using to trigger on. Most of the time, it’s simply just the host (or template)
    we are working on.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机**：表达式中的主机部分是我们定义用于触发的主机。大多数时候，它就是我们正在使用的主机（或模板）。'
- en: '**Item key**: The item key is the part of the expression where we define which
    item key we’ll be using to retrieve the value(s) on a host and feed it into the
    trigger function.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目键**：项目键是表达式的一部分，我们在其中定义了要用于从主机检索值并将其输入触发函数的项目键。'
- en: '**Operator**: The operator determines how our function will be calculated based
    on the trigger expression—against a constant or another expression, for example.
    The operator can be anything, such as the following:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运算符**：运算符决定了我们的函数如何基于触发表达式进行计算——例如，可能是与常数或另一个表达式进行比较。运算符可以是任何形式，如下所示：'
- en: '| = | Equal to. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| = | 等于。 |'
- en: '| <> | Not equal to. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| <> | 不等于。 |'
- en: '| > | Bigger than. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| > | 大于。 |'
- en: '| < | Smaller than. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| < | 小于。 |'
- en: '| >= | Bigger than or equal to. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| >= | 大于或等于。 |'
- en: '| <= | Smaller than or equal to. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| <= | 小于或等于。 |'
- en: '| + | Add to. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| + | 加上。 |'
- en: '| - | Subtract from. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| - | 减去。 |'
- en: '| / | Divide by. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| / | 除以。 |'
- en: '| * | Multiply by. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| * | 乘以。 |'
- en: '| and | Logical AND. Used to, for example, equal both one and another expression.
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| and | 逻辑与。用于例如同时满足一个和另一个表达式。 |'
- en: '| or | Logical OR. Used to, for example, equal either one or another epxression.
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| or | 逻辑或。用于例如，等于一个或另一个表达式。 |'
- en: '| not | Logical NOT. Used to, for example, specifically not equal an expression.
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| not | 逻辑非。用于例如，特定地不等于某个表达式。 |'
- en: '**Constant**: The constant is the actual constant (often a value) that our
    trigger function uses to determine whether the trigger should be in an **OK**
    or **PROBLEM** state. We can also use macros here.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常量**：常量是触发函数用来确定触发器是否应该处于**OK**或**PROBLEM**状态的实际常量（通常是一个值）。我们在这里也可以使用宏。'
- en: Now, for our first trigger, we defined our host and the item that gives us the
    SSH status. What we are saying in the trigger function is that we want the last
    value to be `0` before triggering it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于我们的第一个触发器，我们定义了我们的主机和提供 SSH 状态的项目。我们在触发函数中所说的是，我们希望在触发之前最后一个值为 `0`。
- en: 'For this item, that would mean it would trigger within a minute because in
    our item, we specified the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，这意味着它会在一分钟内触发，因为在我们的项目中，我们指定了以下内容：
- en: '![Figure 4.8 – The Zabbix item configuration page – port 22 availability item](img/B19803_04_08.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – Zabbix 项目配置页面 – 端口 22 可用性项目](img/B19803_04_08.jpg)'
- en: Figure 4.8 – The Zabbix item configuration page – port 22 availability item
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – Zabbix 项目配置页面 – 端口 22 可用性项目
- en: Looking at the `0` and that it will take a maximum of one minute of SSH port
    `22` downtime due to the `1m` interval.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 看着`0`并且考虑到由于`1m`间隔，SSH 端口 `22` 的停机时间最多为一分钟。
- en: Trigger 2 – triggering when there is a new Zabbix version
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器 2 – 当有新的 Zabbix 版本时触发
- en: Now, for our second trigger, we did something different. We not only made an
    expression for triggering this problem but also one for recovering from the trigger.
    What we do in the **Problem expression** option is define a trigger function,
    telling our host to compare the last value with the value before it. We did this
    by using the **change** trigger function.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于我们的第二个触发器，我们做了一些不同的事情。我们不仅为触发此问题创建了一个表达式，还为从触发器中恢复创建了一个表达式。在**问题表达式**选项中，我们定义了一个触发函数，告诉我们的主机将最后一个值与前一个值进行比较。我们通过使用**change**触发函数来实现这一点。
- en: '![Figure 4.9 – A Zabbix trigger expression – HTTPS check](img/B19803_04_09.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – Zabbix 触发表达式 – HTTPS 检查](img/B19803_04_09.jpg)'
- en: Figure 4.9 – A Zabbix trigger expression – HTTPS check
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – Zabbix 触发表达式 – HTTPS 检查
- en: So, our trigger will only be activated when the latest Zabbix version has been
    changed. We could just let the trigger resolve the first time the current value
    and the value before that are the same again, but I want to keep this trigger
    in the `PROBLEM` state just a little longer.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只有在最新的 Zabbix 版本发生更改时，我们的触发器才会被激活。我们本可以让触发器在当前值和之前的值相同的时候第一次解决，但我希望让这个触发器保持在`PROBLEM`状态稍微长一点。
- en: 'Therefore, I defined a recovery expression as well. I’m telling it that this
    problem can only be recovered if the last received value and the fifth last are
    received. Check out the recovery expression up close:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我还定义了一个恢复表达式。我告诉它，只有在接收到最后一个值和倒数第五个值时，问题才能恢复。请仔细查看恢复表达式：
- en: '![Figure 4.10 – Another Zabbix trigger expression – HTTPS check with different
    value](img/B19803_04_10.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 另一个 Zabbix 触发器表达式 – 使用不同值的 HTTPS 检查](img/B19803_04_10.jpg)'
- en: Figure 4.10 – Another Zabbix trigger expression – HTTPS check with different
    value
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 另一个 Zabbix 触发器表达式 – 使用不同值的 HTTPS 检查
- en: Recovery expressions are powerful when you want to extend your trigger functionality
    with just a bit more control over when it comes back into the `OK` state.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复表达式在你想通过稍微更多的控制来扩展触发器功能，特别是在它恢复到`OK`状态时，非常强大。
- en: Tip
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You can use the recovery expression to extend the trigger’s **PROBLEM** state
    beyond what you defined in the **Problem expression** option. This way, we know
    we are still close to the **PROBLEM** state. We define that we only want the trigger
    to go back to the **OK** state after we’ve reached another threshold as defined
    in the recovery expression. This will work by evaluating both the problem and
    recovery expressions, where the problem expression has to be **FALSE** and the
    recovery expression **TRUE**.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用恢复表达式将触发器的**PROBLEM**状态扩展到你在**问题表达式**选项中定义的范围之外。这样，我们就知道触发器仍然接近**PROBLEM**状态。我们定义只有在达到了恢复表达式中定义的另一个阈值后，触发器才会回到**OK**状态。这将通过评估问题表达式和恢复表达式来工作，其中问题表达式必须是**FALSE**，而恢复表达式必须是**TRUE**。
- en: Trigger 3 – using multiple items in a trigger
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器 3 – 在触发器中使用多个项
- en: 'Now, trigger 3 might seem complicated because we’ve used more than one item,
    but it’s basically the same setup:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，触发器 3 可能看起来有些复杂，因为我们使用了多个项，但基本设置是一样的：
- en: '![Figure 4.11 – A Zabbix trigger expression using several items](img/B19803_04_11.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 使用多个项的 Zabbix 触发器表达式](img/B19803_04_11.jpg)'
- en: Figure 4.11 – A Zabbix trigger expression using several items
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 使用多个项的 Zabbix 触发器表达式
- en: We have the same setup for the expression, with the function, host, item key,
    and value. Yet when we are working with multiple items, we can add an `or` statement
    between the items. This way, we can say we need to match one of the items before
    triggering the `PROBLEM` state. In this case, we trigger when either item exceeds
    the threshold.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对表达式的设置是相同的，包括函数、主机、项键和值。但当我们处理多个项时，可以在项之间添加`or`语句。这样，我们可以说，我们需要匹配其中一个项才能触发**PROBLEM**状态。在这种情况下，只要任意一项超过阈值，我们就触发。
- en: Important note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this trigger expression, we have some empty lines between the different item
    expressions. Empty lines between item expressions are totally fine and actually
    make for good readability. Use this wisely when building triggers.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个触发器表达式中，我们在不同项的表达式之间有一些空行。项表达式之间的空行是完全可以的，实际上有助于提高可读性。在构建触发器时，明智地使用这一点。
- en: Old versus new trigger expression syntax
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旧版与新版触发器表达式语法
- en: Now, if you’ve worked with Zabbix before version 5.4, the next part might be
    interesting to you. As mentioned in our introduction, there has been a big update
    to expressions within Zabbix. Trigger expressions now work in a new way, which
    is the same way as you will see in calculated items and other places for a unified
    experience.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前使用过 Zabbix 5.4 之前的版本，接下来的部分可能会对你很有意思。如我们在介绍中提到的，Zabbix 中的表达式已进行大规模更新。触发器表达式现在的工作方式与
    Zabbix 中计算项以及其他地方的方式相同，提供了统一的体验。
- en: 'Let’s take a look at the old expression syntax as seen in Zabbix 5.2 and older
    versions:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在 Zabbix 5.2 和更早版本中看到的旧表达式语法：
- en: '![Figure 4.12 – A Zabbix trigger expression using the old syntax](img/B19803_04_12.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 使用旧语法的 Zabbix 触发器表达式](img/B19803_04_12.jpg)'
- en: Figure 4.12 – A Zabbix trigger expression using the old syntax
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 使用旧语法的 Zabbix 触发器表达式
- en: In the old syntax, we always started with a *curly bracket* and then the hostname
    or template name. Between the hostname or template name and the item key, we had
    a colon. Marking the end of the item key, we had a *dot*, but item keys can also
    include dots themselves. Then, after the *dot*, we have the trigger function followed
    by the ending *curly bracket*. Then, all we have left is the operator and constant
    we want to compare the expression against.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧语法中，我们总是从*大括号*开始，然后是主机名或模板名。在主机名或模板名与项键之间，我们有一个冒号。在标记项键的结尾时，我们有一个*点*，但项键本身也可以包含点。然后，在*点*后，我们有触发器函数，最后是结束的*大括号*。然后，我们剩下的就是我们要用来与表达式进行比较的运算符和常量。
- en: 'As you can imagine, this could become confusing at times, especially when using
    dots in item keys. Now let’s check out the new trigger syntax:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所料，这在使用项键中的点时可能会变得有些混乱。现在让我们来看一下新的触发器语法：
- en: '![Figure 4.13 – A Zabbix trigger expression using the new syntax](img/B19803_04_13.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – 使用新语法的 Zabbix 触发器表达式](img/B19803_04_13.jpg)'
- en: Figure 4.13 – A Zabbix trigger expression using the new syntax
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 使用新语法的 Zabbix 触发器表达式
- en: Our new trigger syntax starts off right away with our trigger function; no hassle,
    just immediately showing you what we’re doing with this line. This is followed
    by a *bracket* and a *forward slash* before entering the host or template name.
    We then use another *forward slash* to divide the hostname or template name and
    the item key. We end with a *bracket*, and then all we have left is the operator
    and value we want to hold the expression against.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新触发器语法从触发器函数开始，直接展示我们正在做什么，不需要任何麻烦。接下来是一个 *括号* 和一个 *斜杠*，然后进入主机或模板名称。我们随后使用另一个
    *斜杠* 来分隔主机名或模板名与项键。最后以一个 *括号* 结束，然后剩下的就是我们希望与之匹配的操作符和值。
- en: Starting with the trigger function makes for a clear indicator of what your
    line is doing. Putting the hostname or template name into brackets and then dividing
    it with forward slashes from the item key makes for a more cohesive experience
    when writing expressions. We also don’t have confusing extra dots any longer.
    Altogether a very nice change to the trigger syntax, which in all honesty might
    take a bit of time to get used to.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从触发器函数开始，使得这一行的作用一目了然。将主机名或模板名放入括号中，然后用斜杠将其与项键分隔开来，这让编写表达式时的体验更加连贯。我们也不再有混淆的额外点了。总的来说，这是触发器语法的一个非常好的变化，老实说，可能需要一些时间来适应。
- en: It’s the small stuff that makes the entire software feel more professional and
    well thought out. Zabbix including changes such as these really helps with that.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这些小细节让整个软件感觉更加专业且经过深思熟虑。像这些更改，Zabbix 的引入无疑对这一点大有帮助。
- en: There’s more…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: Not only can we match one of the items in a trigger expression, but we can also
    use an `and` statement. This way, we can make sure our trigger only goes into
    a `PROBLEM` state when multiple items are reaching a certain value. Triggers are
    very powerful like this, allowing us to define our own criteria in great detail.
    There’s no predefinition—we can add as many `and`, `not`, or `or` statements and
    different functions as we like in the trigger expressions. Customize your triggers
    to exactly what you need, and suddenly you are going to have a lot more peace
    of mind because you know your triggers will notify you when something is up.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以匹配触发器表达式中的某一项，还可以使用 `and` 语句。这样，我们可以确保触发器只有在多个项达到某一特定值时才会进入 `PROBLEM`
    状态。触发器非常强大，可以让我们在详细程度上定义自己的标准。没有预定义——我们可以在触发器表达式中根据需要添加任意多的 `and`、`not` 或 `or`
    语句以及不同的函数。根据您的需求自定义触发器，这样您会更加安心，因为您知道触发器会在出现问题时通知您。
- en: See also
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: To know more about trigger expressions, check out the Zabbix documentation.
    There’s a lot of information on which functions you can use to build the perfect
    trigger. For more details, go to [https://www.zabbix.com/documentation/current/en/manual/config/triggers/expression](https://www.zabbix.com/documentation/current/en/manual/config/triggers/expression).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解更多关于触发器表达式的信息，请查阅 Zabbix 文档。文档中有很多关于如何使用哪些函数来构建完美触发器的详细信息。详情请访问 [https://www.zabbix.com/documentation/current/en/manual/config/triggers/expression](https://www.zabbix.com/documentation/current/en/manual/config/triggers/expression)。
- en: Setting up advanced triggers
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置高级触发器
- en: Triggers in Zabbix keep getting more advanced and it might be hard to keep up.
    For people working with Zabbix 5.2 or older and upgrading to Zabbix 7, not only
    is there a new Zabbix trigger syntax but there’s also a whole new array of functions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 中的触发器不断变得更加高级，可能会让人难以跟上。对于使用 Zabbix 5.2 或更早版本并升级到 Zabbix 7 的用户，不仅有了全新的
    Zabbix 触发器语法，还引入了全新的函数集合。
- en: Let’s dive into setting up some more advanced triggers in Zabbix 7.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解如何在 Zabbix 7 中设置一些更高级的触发器。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need our Zabbix server ready and we’ll need one host
    that is monitored by a Zabbix agent with the Zabbix agent template. We’ll use
    the items on this host to create triggers. Let’s use the `lar-book-agent_passive`
    host from the previous chapter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们需要准备好 Zabbix 服务器，并且需要一个通过 Zabbix 代理监控的主机，并且该主机使用了 Zabbix 代理模板。我们将使用该主机上的项来创建触发器。让我们使用上一章节中的
    `lar-book-agent_passive` 主机。
- en: If you don’t have this host from the previous chapter, simply hook up a new
    host with the default passive Linux monitoring template called `Linux by` `Zabbix
    agent`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有在上一章中提到的这个主机，只需连接一个新的主机，并使用默认的被动 Linux 监控模板 `Linux by` `Zabbix agent`。
- en: We’ll also be touching on some more advanced topics that are discussed later
    in the book. If you don’t know how to use **Low-Level Discovery** (**LLD**), for
    example, it might be a good idea to dive into [*Chapter 7*](B19803_07.xhtml#_idTextAnchor1318),
    *Using Discovery for Automatic* *Creation*, first.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论一些在书后部分提到的更高级主题。例如，如果你不知道如何使用**低级发现**（**LLD**），那么不妨先深入了解[*第7章*](B19803_07.xhtml#_idTextAnchor1318)，*使用发现进行自动创建*。
- en: How to do it…
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s take a look at three *more advanced* triggers compared to the three we’ve
    seen in the previous recipe: `trendavg` for going through trend data, `timeleft`
    to predict values in the future, and **time shifting** to compare to the past.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下与前一个教程中看到的三个触发器相比的三种*更高级*触发器：用于遍历趋势数据的 `trendavg`、用于预测未来值的 `timeleft`
    和用于与过去比较的**时间偏移**。
- en: Advanced trigger 1 – trendavg function
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级触发器 1 – trendavg 功能
- en: 'First, we’ll take a look at one of the newer trigger functionalities, the trend
    average function:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来看看其中一个新的触发器功能，趋势平均（trendavg）功能：
- en: Let’s start by creating a new trigger in our frontend. Navigate to **Data**
    **collection** | **Hosts** and select **lar-book-agent_passive**.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在前端创建一个新的触发器开始。导航到**数据** **收集** | **主机**并选择**lar-book-agent_passive**。
- en: Navigate to **Triggers** and click on the blue **Create trigger** button in
    the top-right corner.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**触发器**，然后点击右上角的蓝色**创建触发器**按钮。
- en: 'Next to the **Expression** field, click on the white **Add** button. Fill out
    the trigger using the expression builder:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**表达式**字段旁，点击白色的**添加**按钮。使用表达式构建器填写触发器：
- en: '![Figure 4.14 – trendavg trigger expression builder](img/B19803_04_14.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – trendavg 触发器表达式构建器](img/B19803_04_14.jpg)'
- en: Figure 4.14 – trendavg trigger expression builder
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – trendavg 触发器表达式构建器
- en: Click on **Insert** and add a name. It will look like this if done correctly.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**插入**并添加名称。如果正确完成，它将如下所示。
- en: '![Figure 4.15 – trendavg trigger form filled out](img/B19803_04_15.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – 已填写的 trendavg 触发器表单](img/B19803_04_15.jpg)'
- en: Figure 4.15 – trendavg trigger form filled out
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 已填写的 trendavg 触发器表单
- en: Now let’s click the blue **Add** button at the bottom of the page to finish
    creating this trigger.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们点击页面底部的蓝色**添加**按钮，完成此触发器的创建。
- en: That’s all for creating this trigger. Check out the *How it works…* section
    of this recipe to get more information about the trigger.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此触发器就这些。请查看本教程的*如何工作...*部分，以获取更多有关触发器的信息。
- en: Advanced trigger 2 – timeleft function
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级触发器 2 – timeleft 功能
- en: 'Next up is our `timeleft` function, which is very useful for things such as
    space utilization. Let’s take a look:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们的 `timeleft` 函数，它对于诸如空间利用率之类的内容非常有用。我们来看看：
- en: We’ll create a new trigger in our Zabbix frontend. Navigate to **Data collection**
    | **Hosts** and select **lar-book-agent_passive**.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在 Zabbix 前端创建一个新的触发器。导航到**数据收集** | **主机**并选择**lar-book-agent_passive**。
- en: Navigate to **Discovery rules** and click on **Trigger prototype** next to **Mounted**
    **filesystem discovery**.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**发现规则**，然后点击**已挂载** **文件系统发现**旁边的**触发器原型**。
- en: Important note
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this case, we are creating the trigger prototype directly on the host, using
    an existing template discovery rule. If you want to apply a trigger like this
    to every host using a template, make sure to create the trigger on a template
    level. Furthermore, discovery rules are explained further in [*Chapter 7*](B19803_07.xhtml#_idTextAnchor1318),
    *Using Discovery for Automatic Creation*, of this book.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们直接在主机上创建触发器原型，使用现有的模板发现规则。如果你想将这样的触发器应用于每个使用模板的主机，确保在模板级别上创建触发器。此外，发现规则的详细解释可以参考本书的[*第7章*](B19803_07.xhtml#_idTextAnchor1318)，*使用发现进行自动创建*。
- en: Click on **Create** **trigger prototype**.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建** **触发器原型**。
- en: 'Next to the **Expression** field, click on the white **Add** button. Fill out
    the trigger using the expression builder:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**表达式**字段旁，点击白色的**添加**按钮。使用表达式构建器填写触发器：
- en: '![Figure 4.16 – timeleft trigger expression builder](img/B19803_04_16.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – timeleft 触发器表达式构建器](img/B19803_04_16.jpg)'
- en: Figure 4.16 – timeleft trigger expression builder
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – timeleft 触发器表达式构建器
- en: Important note
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Using short intervals in predictive triggers to predict long time periods is
    not recommended. Make sure to use the right dataset for the time period we want
    to use in relation to the time we want to predict.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在预测触发器中使用短时间间隔来预测长时间段是不推荐的。确保使用与我们想要预测的时间相关的正确数据集。
- en: Click the blue **Insert** button and the finished trigger will look like this.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**插入**按钮，完成的触发器将如下所示。
- en: '![Figure 4.17 – timeleft trigger form filled out](img/B19803_04_17.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 填写完毕的 timeleft 触发器表单](img/B19803_04_17.jpg)'
- en: Figure 4.17 – timeleft trigger form filled out
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 填写完毕的 timeleft 触发器表单
- en: Click the blue **Add** button at the bottom of the page to finish setting up
    the trigger.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的蓝色**添加**按钮以完成触发器的设置。
- en: We now have a new trigger using the `timeleft` function to tell us when hard
    disks are filling up within a week. Check out the *How it works…* section of this
    recipe to get more information about the trigger.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个新的触发器，使用`timeleft`函数告诉我们硬盘在一周内何时填满。查看本配方的*工作原理…*部分以获取更多关于触发器的信息。
- en: Advanced trigger 3 – time shifting using mathematical functions
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级触发器 3 – 使用数学函数进行时间偏移
- en: 'Lastly, we are going to work with time shifting, and in this case, we’ll do
    so in combination with a mathematical function. Time shifting is a little bit
    of a difficult example, so bear with me:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将处理时间偏移，在这种情况下，我们将其与数学函数结合使用。时间偏移是一个有些复杂的例子，请耐心一下：
- en: Let’s navigate to **Data collection** | **Hosts** and select our host, **lar-book-agent_passive**.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导航到**数据收集** | **主机**并选择我们的主机，**lar-book-agent_passive**。
- en: Go to **Triggers** and click the blue **Create** **trigger** button.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**触发器**并点击蓝色的**创建** **触发器**按钮。
- en: 'Add the following trigger, as seen in the screenshot:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下触发器，如截图所示：
- en: '![Figure 4.18 – Time shifting average trigger form filled out](img/B19803_04_18.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 填写完毕的时间偏移平均触发器表单](img/B19803_04_18.jpg)'
- en: Figure 4.18 – Time shifting average trigger form filled out
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 填写完毕的时间偏移平均触发器表单
- en: This is a very complex trigger to set up, so let’s dive right into how it’s
    set up in the *How it* *works…* section.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常复杂的触发器设置，因此让我们直接进入*工作原理…*部分，看看它是如何设置的。
- en: How it works…
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Advanced triggers can get very complex. The triggers we have just set up are
    just the tip of the iceberg. Do not worry if these triggers seem intimidating,
    as there is plentiful documentation out there to help you set them up, which you
    can find here: [https://www.zabbix.com/documentation/current/en/manual/config/triggers](https://www.zabbix.com/documentation/current/en/manual/config/triggers).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 高级触发器可能变得非常复杂。我们刚刚设置的触发器只是冰山一角。如果这些触发器看起来令人生畏，请不要担心，外面有大量文档可以帮助你设置它们，你可以在这里找到：[https://www.zabbix.com/documentation/current/en/manual/config/triggers](https://www.zabbix.com/documentation/current/en/manual/config/triggers)。
- en: It’s near impossible to cover every single use case in this book, so the triggers
    we set up will show you what’s possible. Use what you have learned in the examples
    in your own scenarios, but make sure to apply your own thinking to it.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中几乎不可能覆盖所有的使用案例，所以我们设置的触发器将向你展示什么是可能的。将你在示例中学到的内容应用到你自己的场景中，但确保加入你自己的思考。
- en: Advanced trigger 1 – trendavg function
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级触发器 1 – trendavg 函数
- en: Let’s start off the *How it works…* section with the trend average. Trend average
    is one of the few trigger functions that use trend data instead of history data.
    Let’s do a short crash course on history and trend data in Zabbix. History data
    is the exact value every time an item receives data from a monitored host. Trend
    data is the average, minimum, and maximum values over one hour created from the
    history data and a count of the number of values.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从*工作原理…*部分开始，介绍趋势平均。趋势平均是少数几个使用趋势数据而不是历史数据的触发器函数之一。让我们简要了解一下Zabbix中的历史数据和趋势数据。历史数据是每次项目从被监控主机接收数据时的确切值。趋势数据是从历史数据中创建的一个小时内的平均值、最小值和最大值，以及值的计数。
- en: 'Now, let’s look at the available functions for creating triggers using trend
    data:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下使用趋势数据创建触发器的可用函数：
- en: '**trendavg**: To get the average value from trend values within a time period'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**trendavg**：获取在时间段内趋势值的平均值'
- en: '**trendmax**: To get the maximum value from trend values within a time period'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**trendmax**：获取在时间段内趋势值的最大值'
- en: '**trendmin**: To get the minimum value from trend values within a time period'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**trendmin**：获取在时间段内趋势值的最小值'
- en: '**trendcount**: To get the number of retrieved trend values within a time period'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**trendcount**：获取在时间段内检索到的趋势值的数量'
- en: '**trendsum**: To get a sum of trend values within a time period'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**trendsum**：获取一段时间内趋势值的总和'
- en: 'As I said, all of these will use our trend values. The values used are stored
    in a special Zabbix trend cache in memory, for use in our trigger. We’ve used
    the `trendavg` function. Let’s check out how we used it in our trigger expression
    again:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所说，所有这些都将使用我们的趋势值。使用的值存储在内存中的特殊 Zabbix 趋势缓存中，用于触发器中。我们已经使用了 `trendavg` 函数。让我们再次查看我们在触发器表达式中是如何使用它的：
- en: '![Figure 4.19 – trendavg trigger expression](img/B19803_04_19.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – trendavg 触发器表达式](img/B19803_04_19.jpg)'
- en: Figure 4.19 – trendavg trigger expression
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – trendavg 触发器表达式
- en: We start off our trigger with the `trendavg` function and then the *host/template*
    and *item key* as we saw earlier in the last recipe. What’s new here is the part
    where we state `1w:now-1w`. This is the time period; here we’ve stated to use
    a value from one week ago.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以 `trendavg` 函数开始触发器，然后是之前在上一节中看到的 *主机/模板* 和 *项目键*。这里的新内容是我们声明 `1w:now-1w`
    的部分。这是时间段；在这里，我们声明使用一周前的值。
- en: What this means is that if the average value from our trends one week ago is
    above 800 Mbps, then this trigger will go into a problem state.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果我们一周前的趋势平均值超过 800 Mbps，那么此触发器将进入问题状态。
- en: Advanced trigger 2 – timeleft function
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级触发器 2 – timeleft 函数
- en: '`timeleft` is another very interesting trigger function. We can use `timeleft`
    to create triggers that only fire when it expects something to reach a certain
    threshold in the future. This is called a predictive trigger, as it makes a prediction
    based on older data.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`timeleft` 是另一个非常有趣的触发器函数。我们可以使用 `timeleft` 创建仅在预计某个东西将来达到某个阈值时触发的触发器。这被称为预测触发器，因为它是基于旧数据做出的预测。'
- en: Let’s check out our trigger expression again.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次检查我们的触发器表达式。
- en: "![Figure 4.20 – timeleft trigger expression\uFEFF](img/B19803_04_20.jpg)"
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: "![图 4.20 – timeleft 触发器表达式\uFEFF](img/B19803_04_20.jpg)"
- en: Figure 4.20 – timeleft trigger expression
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – timeleft 触发器表达式
- en: 'As we can see, we start our expression as usual: the *trigger function*, *host/template*,
    and our *item key*. In this case, we combined that with a time period we want
    to use for our predictive trigger to define its prediction. We used `7h`, to tell
    this expression to use seven hours of historic data. Combine that with a threshold
    of `100`, to make sure this will trigger if we expect to reach 100% disk space
    usage. Now we only need one more element to complete this, the expected result,
    which in this case is `<1w`.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，我们像往常一样开始表达式：*触发器函数*、*主机/模板* 和 *项目键*。在这种情况下，我们将其与用于预测触发器的时间段结合，定义其预测。我们使用了
    `7h`，告知该表达式使用七小时的历史数据。再加上 `100` 的阈值，确保如果预计达到 100% 的磁盘空间使用率时会触发。现在，我们只需要一个元素来完成它，即预期结果，在这种情况下是
    `<1w`。
- en: To sum it all up, this trigger expression looks at *seven hours* of historic
    data and if it expects to reach *100%* disk space in *less than one week*, it
    will go into a problem state, alerting you that you will need to make sure your
    disks don’t run out of space.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，这个触发器表达式查看了 *七小时* 的历史数据，如果预计在 *不到一周* 内达到 *100%* 的磁盘空间，它将进入问题状态，并提醒你确保磁盘不会用完空间。
- en: '`timeleft` trigger function with other functions to limit how many times you
    get alerted. For example, with disk space, we might expect a disk to fill up in
    a week, but you might not want to see that unless the used space is at least less
    than 50 Gigabytes. Add another expression and you are golden:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `timeleft` 触发器函数与其他函数结合，限制触发警报的次数。例如，对于磁盘空间，我们可能预计磁盘将在一周内填满，但你可能不想看到除非已用空间至少少于
    50 GB。再添加一个表达式，你就大功告成：
- en: '![Figure 4.21 – timeleft trigger function expression](img/B19803_04_21.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – timeleft 触发器函数表达式](img/B19803_04_21.jpg)'
- en: Figure 4.21 – timeleft trigger function expression
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – timeleft 触发器函数表达式
- en: Advanced trigger 3 – time shifting using mathematical functions
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级触发器 3 – 使用数学函数的时间偏移
- en: As a Zabbix trainer, time shifting trigger expressions are where my students
    and I always need to spend some additional time on what they all do exactly. This
    makes sense, as it is one of the more complex expressions, and in this example,
    we even combined it with some mathematical functions.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Zabbix 培训师，时间偏移触发器表达式是我和我的学生总是需要额外花时间理解它们具体作用的地方。这是有道理的，因为它是更复杂的表达式之一，在这个例子中，我们甚至将其与一些数学函数结合使用。
- en: So, let’s take another look at our expression and break it down.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们再看一下我们的表达式并进行拆解。
- en: '![Figure 4.22 – Time shifting trigger expression](img/B19803_04_22.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – 时间偏移触发器表达式](img/B19803_04_22.jpg)'
- en: Figure 4.22 – Time shifting trigger expression
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 时间偏移触发表达式
- en: 'I’ve added line numbers for our convenience. Now we can go over each line and
    explain what they mean:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为了方便添加了行号。现在我们可以逐行解释每一行的含义：
- en: This is the opening bracket for our mathematical statement, using the operator
    between two items.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们数学语句的开括号，使用两个项目之间的运算符。
- en: Our first item, using the time shift function. This item will get our memory
    availability as a percentage from one week ago starting from this moment exactly.
    If the current date and time are Monday 24th November at 14:00, it will get the
    one-hour average value for Monday 17th November between 13:00 and 14:00.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的第一个项目，使用时间偏移函数。此项目将从此时刻开始获取一周前某一时刻的内存可用百分比。如果当前日期和时间是 11 月 24 日星期一下午 14:00，它将获取
    11 月 17 日星期一 13:00 到 14:00 的一小时平均值。
- en: Our mathematical operator, stating a minus. This means we’ll subtract the result
    of the first expression from the result of the second expression.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的数学运算符，表示减号。这意味着我们将从第一个表达式的结果中减去第二个表达式的结果。
- en: This is our second item, not using a time shift. This item will be filled with
    a one-hour average value of the last hour.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们的第二个项目，不使用时间偏移。此项目将填充上一小时的一小时平均值。
- en: The closing bracket ends our mathematical statement.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结尾括号结束我们的数学语句。
- en: Finally, an operator and constant. This states that this trigger will only trigger
    if the mathematical result is higher than 20.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，一个运算符和常数。这说明此触发器仅在数学结果高于 20 时触发。
- en: 'Now that we know what each of the lines does, let’s take a look at how it works
    in a real-life scenario. We’re going to fill out the values manually and see whether
    the expression is `TRUE` or `FALSE`. `TRUE` means that there is a problem and
    `FALSE` means everything is fine. So, the math is as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道每一行的作用，让我们看看它在实际场景中的运作方式。我们将手动填写数值并查看表达式是否为`TRUE`或`FALSE`。`TRUE`表示存在问题，而`FALSE`表示一切正常。因此，数学运算如下：
- en: '[PRE3]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Filling it out with 80% memory available last week and only 50% available this
    week, we can see the following happening:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 上周有 80% 的内存可用，而本周仅剩下 50%，我们可以看到以下情况发生：
- en: '[PRE4]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s do it one more time but with 80% memory available last week and 70% this
    week:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来一次，但上周有 80% 的内存可用，而本周有 70%：
- en: '[PRE5]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is how you should go about setting up your time shifting expressions. Simply
    use a notebook or whatever you like, write down your expression in simple text
    for yourself, and do the calculations.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您应该设置时间偏移表达式的方法。只需使用笔记本或您喜欢的任何工具，在简单文本中写下表达式，然后进行计算。
- en: There’s more…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: Trigger expressions can also be tested within Zabbix itself. If we go to **Data
    collection** | **Hosts** | **Triggers** and select any of our three advanced triggers,
    we can do a little test. For example, using the time shifting trigger, we can
    click **Expression constructor**.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 触发表达式也可以在 Zabbix 内部进行测试。如果我们转到**数据收集** | **主机** | **触发器**，然后选择任何三个高级触发器中的一个，我们可以进行简单测试。例如，使用时间偏移触发器，我们可以点击**表达式构造器**。
- en: '![Figure 4.23 – Time shifting trigger expression constructor](img/B19803_04_23.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.23 – 时间偏移触发表达式构造器](img/B19803_04_23.jpg)'
- en: Figure 4.23 – Time shifting trigger expression constructor
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.23 – 时间偏移触发表达式构造器
- en: 'Here, we can select **Test** and then fill out our values. Let’s use the same
    80% and 50% we did in the earlier example:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以选择**测试**，然后填写我们的值。让我们使用与前面示例中相同的 80% 和 50%：
- en: '![Figure 4.24 – Time shifting trigger expression constructor – Test](img/B19803_04_24.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.24 – 时间偏移触发表达式构造器 – 测试](img/B19803_04_24.jpg)'
- en: Figure 4.24 – Time shifting trigger expression constructor – Test
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.24 – 时间偏移触发表达式构造器 – 测试
- en: As you can see, this will tell us whether our expression ends up being **TRUE**
    or **FALSE**, using any values we want to fill. In short, if you want to be sure
    your math on paper is doing the same thing directly in Zabbix, use **Expression
    constructor** to test it.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这将告诉我们我们的表达式最终是否为**TRUE**或**FALSE**，使用我们希望填充的任何值。简而言之，如果您希望确保您的纸上数学与 Zabbix
    中直接执行的操作相同，请使用**表达式构造器**进行测试。
- en: Setting up alerts
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置警报
- en: Alerting can be a very important part of your Zabbix setup. When we set up alerts,
    we want the person on the other end to be informed of just what is going on. It’s
    also important to not spam someone with alerts; we want it to be effective.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 警报可以是 Zabbix 设置中非常重要的一部分。当设置警报时，我们希望接收方了解到正在发生的情况。同时，不要向某人发送大量警报；我们希望它是有效的。
- en: So, in this recipe, we will go over the basics of setting up alerts, so we know
    just how to get it right from the start.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在这个食谱中，我们将介绍设置告警的基础知识，让我们从一开始就知道如何正确设置。
- en: Getting ready
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will only need two things. We will have to use our Zabbix
    server to create our alerts and we will need some triggers, such as the triggers
    from the previous recipe. The triggers will be used to initiate the alerting process
    to see just how the Zabbix server will convey this information.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们只需要两样东西。我们将使用我们的 Zabbix 服务器来创建告警，并且我们将需要一些触发器，像是前一个食谱中的触发器。这些触发器将用于启动告警过程，看看
    Zabbix 服务器如何传递这些信息。
- en: How to do it…
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s start by setting up our action on the Zabbix frontend. To do this, we
    will navigate to **Alerts** | **Actions** | **Trigger actions** and we will be
    served with this screen:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在 Zabbix 前端设置我们的操作开始。为此，我们将导航到**告警** | **操作** | **触发器操作**，然后我们将看到这个屏幕：
- en: '![Figure 4.25 – The Zabbix Trigger actions page with one trigger action](img/B19803_04_25.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.25 – Zabbix 触发器操作页面，带有一个触发器操作](img/B19803_04_25.jpg)'
- en: Figure 4.25 – The Zabbix Trigger actions page with one trigger action
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.25 – Zabbix 触发器操作页面，带有一个触发器操作
- en: There is already one action set up to notify **Zabbix administrators** of problem
    events. In Zabbix 7, a lot of features, such as **Actions** and **Media**, are
    predefined. Most of the time, all we need to do is enable them and fill out some
    information.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 已经设置了一个操作来通知**Zabbix 管理员**组有关问题事件。在 Zabbix 7 中，很多功能，如**操作**和**媒介**，都是预定义的。通常，我们只需要启用它们并填写一些信息。
- en: 'We will set up our own action, so let’s create a new action to notify a user
    in the **Zabbix administrators** group of our new triggers. Click the blue **Create
    action** button to be taken to the next page:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将设置我们自己的操作，因此让我们创建一个新的操作来通知**Zabbix 管理员**组的用户我们的新触发器。点击蓝色的**创建操作**按钮，进入下一页面：
- en: '![Figure 4.26 – The Zabbix action creation page – notify book reader](img/B19803_04_26.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.26 – Zabbix 操作创建页面 – 通知书籍阅读者](img/B19803_04_26.jpg)'
- en: Figure 4.26 – The Zabbix action creation page – notify book reader
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – Zabbix 操作创建页面 – 通知书籍阅读者
- en: On this page, check the **Enabled** checkbox to make sure that this action will
    actually do something. Make sure to name your action clearly so that you won’t
    have any issues with differentiating between actions.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页面上，选中**启用**复选框，以确保此操作确实会生效。确保清晰地命名你的操作，以便不会在区分操作时遇到问题。
- en: 'Now, move on to the **Operations** tab:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到**操作**标签页：
- en: '![Figure 4.27 – The Zabbix action creation page at the Operations tab – notify
    book reader](img/B19803_04_27.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.27 – Zabbix 操作创建页面（操作标签页）– 通知书籍阅读者](img/B19803_04_27.jpg)'
- en: Figure 4.27 – The Zabbix action creation page at the Operations tab – notify
    book reader
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.27 – Zabbix 操作创建页面（操作标签页）– 通知书籍阅读者
- en: 'The **Operations** tab is empty by default, so we are going to want to create
    some operations here. There are three forms of operation that we are going to
    create here—let’s start with the **Operations** operation by clicking **Add**:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**操作**标签页默认是空的，因此我们需要在这里创建一些操作。我们将创建三种操作形式——让我们通过点击**添加**来开始创建**操作**操作：'
- en: '![Figure 4.28 – Zabbix Operation details page – notify book reader](img/B19803_04_28.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.28 – Zabbix 操作详情页面 – 通知书籍阅读者](img/B19803_04_28.jpg)'
- en: Figure 4.28 – Zabbix Operation details page – notify book reader
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.28 – Zabbix 操作详情页面 – 通知书籍阅读者
- en: We have the option to add users and/or user groups here that we want to alert.
    If you’ve followed along with [*Chapter 1*](B19803_01.xhtml#_idTextAnchor021),
    *Installing Zabbix and Getting Started Using the Frontend*, you can just select
    the **Networking** user group here. If not, selecting just the **Zabbix administrators**
    group is fine.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在此处添加用户和/或用户组，来接收告警。如果你已经跟随[*第1章*](B19803_01.xhtml#_idTextAnchor021)，“*安装
    Zabbix 并开始使用前端*”，你可以直接选择**网络**用户组。如果没有，选择仅**Zabbix 管理员**组也可以。
- en: After clicking the blue **Add** button at the bottom of the form, we will be
    taken back to the **Actions** screen.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单底部点击蓝色的**添加**按钮后，我们将返回到**操作**屏幕。
- en: 'Now, we will create the next operation, named **Recovery operations**. What
    we do here is create an operation, as follows:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建下一个操作，命名为**恢复操作**。我们在这里创建一个操作，如下所示：
- en: '![Figure 4.29 – Zabbix Recovery operations details – notify book reader](img/B19803_04_29.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.29 – Zabbix 恢复操作详情 – 通知书籍阅读者](img/B19803_04_29.jpg)'
- en: Figure 4.29 – Zabbix Recovery operations details – notify book reader
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.29 – Zabbix恢复操作详情 – 通知书籍阅读者
- en: This option will notify all users involved in the initial operation defined
    earlier. All users that got a **PROBLEM** generation notification will also receive
    the recovery this way. Click **Add**, and let’s continue.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个选项将通知所有参与之前定义的初始操作的用户。所有收到**问题**生成通知的用户也会以这种方式收到恢复通知。点击**添加**，然后继续。
- en: Now, if you’re like me and you want to stay on top of things, you can create
    an update notification. This way, we know that—for instance—someone acknowledged
    a problem and is working on it. Normally, I would select different channels for
    stuff such as this—for instance, using **SMS** for high-priority alerts and a
    Slack or Teams channel for everything else.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你像我一样，想随时掌握情况，可以创建一个更新通知。这样，我们就知道——例如——某人已确认问题并正在处理它。通常，我会为这种事情选择不同的渠道——例如，使用**短信**来处理高优先级的警报，其他事情则使用Slack或Teams渠道。
- en: 'Let’s click **Add** under **Update operations** to add the following to our
    setup:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击**添加**，在**更新操作**下将以下内容添加到我们的设置中：
- en: '![Figure 4.30 – Zabbix update operation details – notify book reader](img/B19803_04_30.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图4.30 – Zabbix更新操作详情 – 通知书籍阅读者](img/B19803_04_30.jpg)'
- en: Figure 4.30 – Zabbix update operation details – notify book reader
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.30 – Zabbix更新操作详情 – 通知书籍阅读者
- en: We will do the same thing here as we did for the **Recovery operations** option
    and notify all users involved of any update to this problem. After clicking **Add**
    here, click the blue **Add** button again on the **Actions** screen to finish
    creating the action.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照在**恢复操作**选项中的设置做同样的事情，通知所有参与的用户关于此问题的任何更新。点击**添加**后，再次点击**操作**界面中的蓝色**添加**按钮，完成创建操作。
- en: 'Now, the next thing we want to do is create a media type for actually notifying
    our users of the issue. Go to **Alerts** | **Media types**, and you will be presented
    with the following screen:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想做的下一件事是创建一种媒体类型，用于实际通知我们的用户问题。进入**警报** | **媒体类型**，你将看到以下界面：
- en: '![Figure 4.31 – The Zabbix Media types page with predefined media options](img/B19803_04_31.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图4.31 – 带有预定义媒体选项的Zabbix媒体类型页面](img/B19803_04_31.jpg)'
- en: Figure 4.31 – The Zabbix Media types page with predefined media options
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.31 – 带有预定义媒体选项的Zabbix媒体类型页面
- en: 'As you can see, there are quite a lot of predefined media types in Zabbix 7\.
    We have them for Slack, Opsgenie, and even Telegram. Let’s start with something
    almost everyone has, though: email.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Zabbix 7中有相当多的预定义媒体类型。我们有Slack、Opsgenie，甚至Telegram的类型。不过，让我们从几乎每个人都有的东西开始：电子邮件。
- en: 'Click the **Email** media type and we’ll edit it to suit our needs:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**电子邮件**媒体类型，我们将编辑它以满足我们的需求：
- en: '![Figure 4.32 – The Zabbix Media type creation page for email](img/B19803_04_32.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图4.32 – 用于电子邮件的Zabbix媒体类型创建页面](img/B19803_04_32.jpg)'
- en: Figure 4.32 – The Zabbix Media type creation page for email
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.32 – 用于电子邮件的Zabbix媒体类型创建页面
- en: I set it up to reflect my Office 365 settings, but any **Simple Mail Transfer
    Protocol** (**SMTP**) server should work. Fill in your SMTP settings, and we should
    be able to receive notifications.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我将其设置为反映我的Office 365设置，但任何**简单邮件传输协议**（**SMTP**）服务器都应能正常工作。填写你的SMTP设置，我们就应该能够接收通知。
- en: 'Be sure to also check the next tab, **Message templates**. For example, the
    message template for a **Problem** generation event looks like this:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一定要查看下一个标签页，**消息模板**。例如，**问题**生成事件的消息模板如下所示：
- en: '![Figure 4.33 – The default Zabbix Message template page for problems](img/B19803_04_33.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图4.33 – Zabbix问题的默认消息模板页面](img/B19803_04_33.jpg)'
- en: Figure 4.33 – The default Zabbix Message template page for problems
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.33 – Zabbix问题的默认消息模板页面
- en: We set this up like this so that we get a message telling us just what’s going
    on. This is fully customizable as well, to reflect just what we want to know.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样设置是为了让我们收到一条告诉我们发生了什么的消息。这也是完全可定制的，可以反映我们想知道的具体内容。
- en: Let’s keep the default settings for now. Last but not least, go to **Users**
    | **Users** and edit a user in the **Zabbix administrators** or **Networking**
    group. I will use the **Admin** user as an example.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们保持默认设置。最后，进入**用户** | **用户**，编辑**Zabbix管理员**或**网络**组中的一个用户。我将以**Admin**用户为例。
- en: '![Figure 4.34 – The Zabbix user Media page for the Admin user](img/B19803_04_34.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![图4.34 – Admin用户的Zabbix用户媒体页面](img/B19803_04_34.jpg)'
- en: Figure 4.34 – The Zabbix user Media page for the Admin user
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.34 – Admin用户的Zabbix用户媒体页面
- en: 'On this window, go to **Media** and click the **Add** button. We want to add
    the following to notify us of all trigger severities at our email address:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此窗口中，转到**媒体**并点击**添加**按钮。我们希望添加以下内容，以便在我们的电子邮件地址接收所有触发器严重性的通知：
- en: '![Figure 4.35 – The Zabbix user media creation page for the Admin user](img/B19803_04_35.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图4.35 – Zabbix管理员用户的媒体创建页面](img/B19803_04_35.jpg)'
- en: Figure 4.35 – The Zabbix user media creation page for the Admin user
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.35 – Zabbix管理员用户的媒体创建页面
- en: Now, click on the blue **Add** button and finish creating this user’s media.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击蓝色的**添加**按钮，完成创建该用户的媒体。
- en: How it works…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Now, that’s how we set up alerts in Zabbix. You will now receive alerts at
    your email address, as shown in the following flowchart:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这就是我们在Zabbix中设置警报的方式。你将会收到发送到你电子邮件地址的警报，如下图所示的流程图：
- en: '![Figure 4.36 – Diagram showing Zabbix problem flow](img/B19803_04_36.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图4.36 – 展示Zabbix问题流程的图示](img/B19803_04_36.jpg)'
- en: Figure 4.36 – Diagram showing Zabbix problem flow
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.36 – 展示Zabbix问题流程的图示
- en: When something breaks, a **problem** in Zabbix is triggered by our trigger configuration.
    Our **action** will then be triggered by our problem event and it will use the
    media type and user media configuration to notify our user. Our user then fixes
    the issue (for instance, rebooting a stuck server), and then an **OK** event will
    be generated. We will then trigger the action again and get an OK message.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 当某个问题发生时，Zabbix中的**问题**会通过我们的触发器配置被触发。接着，**操作**会通过问题事件被触发，并使用媒体类型和用户媒体配置通知我们的用户。我们的用户随后解决了问题（例如，重启卡住的服务器），然后会生成一个**OK**事件。之后，我们会再次触发操作，并收到一个OK消息。
- en: Tip
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Before building alerts such as this, make a workflow (as shown in *Figure 4**.36*)
    for yourself, specifying just which user groups and users should be notified.
    This way, it’s clear just how you will use Zabbix for alerting.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建类似的警报之前，为自己创建一个工作流程（如*图4.36*所示），明确哪些用户组和用户应该被通知。这样，你就能清楚地知道如何使用Zabbix进行警报。
- en: There’s more…
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: There are loads of media types and integrations, and we’ve just touched the
    tip of the iceberg by seeing a list of predefined ones. Make sure to check out
    the Zabbix integration list ([https://www.zabbix.com/integrations](https://www.zabbix.com/integrations))
    for more options or build your own using the Zabbix webhooks and other extensions
    available.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多种媒体类型和集成方式，我们刚刚仅仅触及了冰山一角，看到了一些预定义的选项。请确保查看Zabbix集成列表（[https://www.zabbix.com/integrations](https://www.zabbix.com/integrations)）以获得更多选项，或者使用Zabbix的Webhook和其他可用的扩展来构建你自己的集成。
- en: Keeping alerts effective
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持警报有效
- en: It’s important to keep our alerts effective to make sure we are neither overwhelmed
    nor underwhelmed by notifications. To do this, we will change our trigger and
    the **Email** media type to reflect just what we want to see.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 保持警报有效非常重要，以确保我们不会因为通知而感到过于困扰，也不会因为缺少通知而感到失落。为此，我们将更改触发器和**电子邮件**媒体类型，只显示我们需要看到的内容。
- en: Getting ready
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using trigger 1 from the first recipe and the default email media
    type in Zabbix.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自第一个配方的触发器1和Zabbix中的默认电子邮件媒体类型。
- en: Furthermore, of course, we’ll also be using our Zabbix server.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还将使用我们的Zabbix服务器。
- en: How to do it…
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create effective alerts, let’s follow these steps:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建有效的警报，请按照以下步骤操作：
- en: Let’s get started on trigger 1, which we created in this chapter’s *Setting
    up triggers* recipe. Navigate to the **lar-agent-simple** host by going to **Data
    collection** | **Hosts** and clicking **Trigger** for the host.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始设置触发器1，这个触发器是在本章的*设置触发器*配方中创建的。通过进入**数据采集** | **主机**，并点击该主机的**触发器**，来导航到**lar-agent-simple**主机。
- en: 'Here, sometimes people use a different trigger name like the one we see here:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，有时人们会使用不同的触发器名称，就像我们看到的这个：
- en: '![Figure 4.37 – Trigger 1 from the previous recipe](img/B19803_04_37.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图4.37 – 来自上一配方的触发器1](img/B19803_04_37.jpg)'
- en: Figure 4.37 – Trigger 1 from the previous recipe
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.37 – 来自上一配方的触发器1
- en: Even when you’ve used the `{HOST.NAME}` macro in the trigger, it’s quite simple,
    so fortunately there isn’t a lot to change here. If you’ve used the hostname in
    the trigger name, we can change the name to reflect a message that is clearer.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你在触发器中使用了`{HOST.NAME}`宏，这也很简单，因此幸运的是这里无需做很多更改。如果你在触发器名称中使用了主机名，我们可以更改名称，以便传达更清晰的信息。
- en: 'Make sure to use a short and descriptive trigger name, such as the following:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保使用简洁且具有描述性的触发器名称，例如以下内容：
- en: '![Figure 4.38 – New Trigger 1 name](img/B19803_04_38.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![图4.38 – 新的触发器1名称](img/B19803_04_38.jpg)'
- en: Figure 4.38 – New Trigger 1 name
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.38 – 新的触发器1名称
- en: 'Next, navigate to the **Tags** page to add a tag to keep the triggers organized.
    Let’s add the following:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导航到 **标签** 页面，添加一个标签以保持触发器有序。我们来添加以下内容：
- en: '![Figure 4.39 – Trigger 1 tags](img/B19803_04_39.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.39 – 触发器 1 标签](img/B19803_04_39.jpg)'
- en: Figure 4.39 – Trigger 1 tags
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.39 – 触发器 1 标签
- en: Another great way of keeping everything organized is changing the message on
    media types. Let’s change the media type to reflect our needs. Navigate to **Alerts**
    | **Media types** and select our media type named **Email**.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一种保持一切有序的好方法是更改媒体类型上的消息。让我们更改媒体类型以反映我们的需求。导航到 **警报** | **媒体类型** 并选择名为 **电子邮件**
    的媒体类型。
- en: 'Select **Message** **templates** and click **Edit** next to our first problem.
    This will bring us to the following window:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **消息** **模板** 并点击我们第一个问题旁边的 **编辑**。这将把我们带到以下窗口：
- en: '![Figure 4.40 – Standard email media type message](img/B19803_04_40.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.40 – 标准电子邮件媒体类型消息](img/B19803_04_40.jpg)'
- en: Figure 4.40 – Standard email media type message
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.40 – 标准电子邮件媒体类型消息
- en: Currently, Zabbix uses the default configured message under the media type when
    we do not use a custom message. But if we want to change that message, we can
    do that here by creating a custom message. The default message under the **Email**
    media type looks as in the previous screenshot.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当我们不使用自定义消息时，Zabbix 使用媒体类型下默认配置的消息。但如果我们想要更改该消息，可以通过创建自定义消息来实现。**电子邮件**媒体类型下的默认消息如前面的截图所示。
- en: 'We can change the message on the media type. For instance, if you don’t want
    to see the original problem ID or want a more customized message, simply remove
    that line, as shown in the following screenshot:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以更改媒体类型上的消息。例如，如果您不想看到原始问题 ID 或者需要更自定义的消息，只需删除该行，如以下截图所示：
- en: "![Figure 4.41 – Custom Email media type \uFEFF\uFEFFmessage](img/B19803_04_41.jpg)"
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.41 – 自定义电子邮件媒体类型消息](img/B19803_04_41.jpg)'
- en: Figure 4.41 – Custom Email media type message
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.41 – 自定义电子邮件媒体类型消息
- en: How it works…
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'We’ve done two things in this recipe: changed our trigger name and added a
    tag to our trigger.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们做了两件事：更改了触发器名称并向触发器添加了一个标签。
- en: 'Keeping trigger names clear and defined in a structured way is important to
    keep our Zabbix environment structured. Instead of just naming our trigger `Port
    22 SSH down on {HOST.NAME}`, we’ve added standardization to our setup and can
    now create cool structures such as this with our future triggers:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 保持触发器名称简洁明了并以结构化的方式定义是保持 Zabbix 环境有序的重要因素。我们不仅仅把触发器命名为 `Port 22 SSH down on
    {HOST.NAME}`，而是对我们的设置进行了标准化，现在我们可以创建像这样的酷结构，应用到未来的触发器：
- en: '![Figure 4.42 – Trigger structure diagram](img/B19803_04_42.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.42 – 触发器结构图](img/B19803_04_42.jpg)'
- en: Figure 4.42 – Trigger structure diagram
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.42 – 触发器结构图
- en: Our triggers are all clear and we can immediately see which host, port, and
    service are down.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的触发器都很清晰，能够立刻看到哪个主机、端口和服务出现问题。
- en: 'On top of that, we’ve added a tag for the service that is down, which will
    now immediately display our service in a clear way, alerting us to exactly what
    is going on:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还为出现故障的服务添加了标签，这样它现在会立即以清晰的方式显示我们的服务，提醒我们到底发生了什么：
- en: '![Figure 4.43 – Trigger down – structured](img/B19803_04_43.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.43 – 触发器关闭 – 结构化](img/B19803_04_43.jpg)'
- en: Figure 4.43 – Trigger down – structured
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.43 – 触发器关闭 – 结构化
- en: In Zabbix 6, a new tag policy was introduced. As we created the item used in
    the trigger with a `availability`, `performance`, `notification`, `security`,
    and `capacity`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Zabbix 6 中，引入了一种新的标签策略。我们在触发器中创建的项使用了 `availability`（可用性）、`performance`（性能）、`notification`（通知）、`security`（安全性）和
    `capacity`（容量）标签。
- en: 'For more information about the new Zabbix tag policy that we still use in Zabbix
    7, check out this link:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Zabbix 7 中仍在使用的新 Zabbix 标签策略，请查看这个链接：
- en: '[https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/](https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/)'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/](https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/)'
- en: Another thing we’ve done is removed the `{HOST.NAME}` macro if we’ve used it
    before. As we can already see which host this trigger is on by checking the `{HOST.NAME}`
    macro. We need to keep trigger names short and effective and use the hostname
    macros in **Media** or simply use the field already available in the frontend.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的另一件事是移除了 `{HOST.NAME}` 宏（如果之前使用过的话）。因为我们已经可以通过查看 `{HOST.NAME}` 宏来确认触发器所在的主机。我们需要保持触发器名称简短有效，并在
    **媒体** 中使用主机名宏，或者简单地使用前端已有的字段。
- en: We’ve also changed our action in this recipe. Changing a message on media types
    is a powerful way to keep our problem channels structured. Sometimes, we want
    to see less or more information on certain channels, and changing media type messages
    is one way to do this.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还改变了本节中的操作。更改媒体类型的消息是一种强有力的方式，可以保持我们的问题频道结构化。有时，我们希望在某些频道上看到更多或更少的信息，而更改媒体类型消息正是实现这一目标的一种方法。
- en: We can also create custom messages on an **Action** level, changing all the
    messages sent to the selected channels.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在**操作**级别创建自定义消息，更改发送到选定频道的所有消息。
- en: There’s more…
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: What I’m trying to show you in this recipe is that although it might be simple
    to set up Zabbix, it is not simple to set up a good monitoring solution with Zabbix—or
    any monitoring tool, for that matter—if you don’t plan. Carefully plan out how
    you want your triggers to be structured before you build everything in your Zabbix
    installation.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本节中想向你展示的是，虽然设置Zabbix可能很简单，但如果没有计划，建立一个良好的监控解决方案并不简单——无论使用什么监控工具，都是如此。在你在Zabbix安装中构建一切之前，仔细规划触发器的结构非常重要。
- en: An engineer who works in a structured way and takes the time to build a good
    monitoring solution will save a lot of hours in the future because they will understand
    the problem before anyone else.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 一位以结构化方式工作的工程师，并花时间构建一个良好的监控解决方案，未来将节省大量时间，因为他们在其他人之前就能理解问题。
- en: Customizing alerts
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义警报
- en: Alerting is very useful, especially in combination with some of the tricks we’ve
    learned in this book so far to keep everything structured. But sometimes, we need
    a little more from our alerts than what we are already getting from Zabbix out
    of the box.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 警报非常有用，特别是与我们在本书中学到的一些技巧结合使用，可以保持一切结构化。但有时，我们需要从警报中获得更多信息，而不仅仅是Zabbix默认提供的内容。
- en: In this recipe, we’ll do a small bit of customization to make the alerts more
    our own.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将进行一些小的自定义，使警报更加符合我们的需求。
- en: Getting ready
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, all we are going to need is our current Zabbix server installation.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们只需要当前的Zabbix服务器安装。
- en: How to do it…
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To customize alerts, follow these steps:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 要自定义警报，请按照以下步骤操作：
- en: 'Let’s create some custom severities in our Zabbix server to reflect our organization’s
    needs. Navigate to **Administration** | **General** and select **Trigger displaying
    options** from the side menu:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在Zabbix服务器中创建一些自定义严重性级别，以便更好地反映我们组织的需求。导航至**管理** | **常规**，然后从侧边菜单中选择**触发器显示选项**：
- en: '![Figure 4.44 – Administration | General from side menu](img/B19803_04_44.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.44 – 管理 | 从侧边菜单的常规选项](img/B19803_04_44.jpg)'
- en: Figure 4.44 – Administration | General from side menu
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.44 – 管理 | 从侧边菜单的常规选项
- en: 'After selecting this, we’ll be taken to the next page. This window contains
    the default Zabbix trigger severities, as shown in the following screenshot:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项后，我们将进入下一页。此窗口包含默认的Zabbix触发器严重性，如下图所示：
- en: '![Figure 4.45 – Default trigger severities page](img/B19803_04_45.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.45 – 默认触发器严重性页面](img/B19803_04_45.jpg)'
- en: Figure 4.45 – Default trigger severities page
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.45 – 默认触发器严重性页面
- en: 'Next up, we can customize the default trigger severities, as follows:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以按以下方式自定义默认的触发器严重性：
- en: '![Figure 4.46 – Custom trigger severities page](img/B19803_04_46.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.46 – 自定义触发器严重性页面](img/B19803_04_46.jpg)'
- en: Figure 4.46 – Custom trigger severities page
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.46 – 自定义触发器严重性页面
- en: Do not forget to click the blue **Update** button at the bottom of the page
    to save the changes.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 别忘了点击页面底部的蓝色**更新**按钮以保存更改。
- en: How it works…
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Not all companies like using terms such as **High** and **Disaster**, but prefer
    using different severities such as **P1** and **P2**. Using custom severities,
    we can customize Zabbix to make it more our own and reflect the terms we’ve already
    been using in different tools, for example.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有公司都喜欢使用**高**和**灾难**等术语，而是更倾向于使用不同的严重性级别，例如**P1**和**P2**。通过使用自定义严重性级别，我们可以定制Zabbix，使其更符合我们的需求，并反映我们在不同工具中已经使用的术语，例如。
- en: Changing custom severities is not a necessity by any means, but it can be a
    good way to adopt Zabbix more easily if you are used to something different.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 更改自定义严重性级别绝非必要，但如果你习惯了不同的方式，它可能是更轻松采用Zabbix的好方法。
