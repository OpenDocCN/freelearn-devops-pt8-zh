- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Triggers and Alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, what use would all of that collected data in Zabbix be without actually
    doing some alerting with it? Of course, we can use Zabbix to collect our data
    and just go over it manually, but Zabbix gets a lot more useful when we actually
    start sending out notifications to users. This way, we don’t have to always keep
    an eye on our Zabbix frontend, but we can just let our triggers and alerts do
    the work for us, redirecting us to the frontend only when we need it.
  prefs: []
  type: TYPE_NORMAL
- en: In Zabbix 7, you will find a new trigger expressions syntax compared to Zabbix
    5\. This syntax has been available since Zabbix 5.4, so if you skipped some versions,
    this might be the first time you’re working with it. If you’ve been working with
    a Zabbix version before version 5.4, keep in mind that you might need to get used
    to this new syntax. If you have Zabbix 5.4 or higher running already, the syntax
    will be the same in Zabbix 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn all about setting up effective triggers with the new expression
    format and about alerts in the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up advanced triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping alerts effective
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, we will need a Zabbix server, for instance, the one used in
    the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Zabbix server installed on a Linux distribution of your choice. We will
    use the server set up in [*Chapter 1*](B19803_01.xhtml#_idTextAnchor021).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MariaDB set up to work with your Zabbix server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NGINX or Apache set up to serve the Zabbix frontend.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also need a Linux host to monitor so that we can actually build some
    cool triggers to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Triggers are important in Zabbix because they notify you as to what’s going
    on with your data. We want to get a trigger when our data reaches a certain threshold
    or when we receive a certain value.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s get started with setting up some cool triggers. There are loads of
    different options for defining triggers, but after reading this recipe, you should
    be able to set up some of the most prominent triggers. Let’s take your trigger
    experience to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need our Zabbix server ready and we will need a Linux
    host. I will use the `lar-book-agent_simple` host from the previous chapter because
    we already have some items on that.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also need one more host that is monitored by the Zabbix agent with the
    Zabbix agent template. We’ll use one of the items on this host to create a trigger.
    This will be the `lar-book-agent_passive` host from the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: On this host, we will already have some triggers available, but we will extend
    these triggers further to inform us even better.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to create three triggers to monitor state changes.
    Let’s get started by creating our first trigger.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger 1 – SSH service monitoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s create a simple trigger on the `lar-book-agent_simple` host. We made
    a simple check on this host called `Check if port 22 is available`, but we haven’t
    created anything to notify us about this yet:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s get started by going to **Data collection** | **Hosts**, then clicking
    the host and going to **Triggers**. This is where we will find our triggers and
    where we can create them. We want to create a new trigger here by clicking the
    blue **Create trigger** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a new trigger with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The Zabbix trigger creation page – Service unreachable](img/B19803_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – The Zabbix trigger creation page – Service unreachable
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Add** and finish creating the trigger. This will create a trigger
    for us that will fire when our **Secure Shell** (**SSH**) port goes down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s test this by navigating to our host **command-line interface** (**CLI**)
    and executing some commands to shut our Zabbix server off from port **22**. We
    will add an **iptables** rule to block off all incoming traffic on port **22**
    (SSH):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to change the **ens192** network card and the IP address **10.16.16.152**
    to your own values. You can use the following command to get that information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if we click on **Dashboards** in the navigation bar, after a while we
    should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Zabbix problems on a dashboard – port 22 down](img/B19803_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Zabbix problems on a dashboard – port 22 down
  prefs: []
  type: TYPE_NORMAL
- en: Trigger 2 – triggering when there is a new Zabbix version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, to create our second trigger, let’s ramp it up a bit. If you followed
    *Chapter 3*, *Setting Up Zabbix Monitoring*, in the recipe titled *Setting up
    HTTP agent monitoring*, we created an item that polls the Zabbix website for the
    latest release of Zabbix, Zabbix 7.0\. Now, what we probably want to do ourselves
    is keep an eye out for any new version of Zabbix being released:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s navigate to **Data collection** | **Hosts** and click on the **lar-book-agent_simple**
    host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to **Triggers** and click the **Create trigger** button. We will build
    our trigger with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – The Zabbix trigger creation page – new Zabbix 7.0 release trigger](img/B19803_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – The Zabbix trigger creation page – new Zabbix 7.0 release trigger
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Add** and finish creating the trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, this might not actually trigger for you in the frontend, but I’ll explain
    to you just how this trigger works in the *How it works…* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger 3 – using multiple items in a trigger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have seen triggers that use one item, but we can also use multiple items
    in a single trigger. Let’s build a new trigger by using multiple items in the
    same expression:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s navigate to **Data collection** | **Hosts** and click on the **lar-book-agent_
    passive** host. Now, go to **Triggers** and click the **Create** **trigger** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to create a trigger with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – The Zabbix trigger creation page – inbound or outbound packets
    trigger](img/B19803_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – The Zabbix trigger creation page – inbound or outbound packets
    trigger
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that your item keys might need different interface names. In my
    case, the interface is called **ens192**, so use the correct name for your interface
    in its place. Use the following Linux command to get the interface on your host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on **Add** and finish creating the trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Here''s a tip -** On the trigger creation page, use the **Add** button next
    to the **Expression** field to add a condition and build your expression easily.
    For example, we can use the **Select** button to pick an item from a list. Something
    that’s also very useful, when using the **Function** drop-down menu, is the short
    explanation for every trigger function that’s included:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Trigger creation page](img/B19803_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Trigger creation page
  prefs: []
  type: TYPE_NORMAL
- en: That’s all we need to do to build a trigger that will function on two items.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a good understanding of how to build triggers and how they work so we
    can create a well-set-up monitoring platform. Especially important here is that
    we make sure that our triggers are set up correctly and we test them well. Triggers
    are a very important part of Zabbix as they will be vital to inform you about
    things going on with your monitoring targets. Configure your triggers too loosely
    and you will be missing things. Configure them too strictly and you will be overloaded
    with information.
  prefs: []
  type: TYPE_NORMAL
- en: 'In all of these triggers, we have also included a trigger severity, as we can
    see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – A Zabbix trigger severity selector](img/B19803_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – A Zabbix trigger severity selector
  prefs: []
  type: TYPE_NORMAL
- en: These severities are important to make sure your alerts will be correctly defined
    by importance. We can also filter on these severities in several places in the
    Zabbix frontend and even in things such as actions.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s discover why we built our triggers as we did.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger 1 – SSH service monitoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a very simple but effective trigger to set up in Zabbix. When our value
    returns either `1` for `UP` or `0` for `DOWN`, we can easily create triggers such
    as these—not just for monitoring logical ports that are up or down, but for everything
    that returns a simple value change from, for example, `1` to `0` and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we break down our expression, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – A Zabbix trigger expression – port 22 (SSH)](img/B19803_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – A Zabbix trigger expression – port 22 (SSH)
  prefs: []
  type: TYPE_NORMAL
- en: 'When building an expression, we have four parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trigger function**: The trigger function is the part of the expression that
    determines what we expect of the value, such as whether we want just the last
    value or, for example, an average value over a period of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host**: The host part of the expression is where we define which host we
    are using to trigger on. Most of the time, it’s simply just the host (or template)
    we are working on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Item key**: The item key is the part of the expression where we define which
    item key we’ll be using to retrieve the value(s) on a host and feed it into the
    trigger function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator**: The operator determines how our function will be calculated based
    on the trigger expression—against a constant or another expression, for example.
    The operator can be anything, such as the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| = | Equal to. |'
  prefs: []
  type: TYPE_TB
- en: '| <> | Not equal to. |'
  prefs: []
  type: TYPE_TB
- en: '| > | Bigger than. |'
  prefs: []
  type: TYPE_TB
- en: '| < | Smaller than. |'
  prefs: []
  type: TYPE_TB
- en: '| >= | Bigger than or equal to. |'
  prefs: []
  type: TYPE_TB
- en: '| <= | Smaller than or equal to. |'
  prefs: []
  type: TYPE_TB
- en: '| + | Add to. |'
  prefs: []
  type: TYPE_TB
- en: '| - | Subtract from. |'
  prefs: []
  type: TYPE_TB
- en: '| / | Divide by. |'
  prefs: []
  type: TYPE_TB
- en: '| * | Multiply by. |'
  prefs: []
  type: TYPE_TB
- en: '| and | Logical AND. Used to, for example, equal both one and another expression.
    |'
  prefs: []
  type: TYPE_TB
- en: '| or | Logical OR. Used to, for example, equal either one or another epxression.
    |'
  prefs: []
  type: TYPE_TB
- en: '| not | Logical NOT. Used to, for example, specifically not equal an expression.
    |'
  prefs: []
  type: TYPE_TB
- en: '**Constant**: The constant is the actual constant (often a value) that our
    trigger function uses to determine whether the trigger should be in an **OK**
    or **PROBLEM** state. We can also use macros here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, for our first trigger, we defined our host and the item that gives us the
    SSH status. What we are saying in the trigger function is that we want the last
    value to be `0` before triggering it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this item, that would mean it would trigger within a minute because in
    our item, we specified the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – The Zabbix item configuration page – port 22 availability item](img/B19803_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – The Zabbix item configuration page – port 22 availability item
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the `0` and that it will take a maximum of one minute of SSH port
    `22` downtime due to the `1m` interval.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger 2 – triggering when there is a new Zabbix version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, for our second trigger, we did something different. We not only made an
    expression for triggering this problem but also one for recovering from the trigger.
    What we do in the **Problem expression** option is define a trigger function,
    telling our host to compare the last value with the value before it. We did this
    by using the **change** trigger function.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – A Zabbix trigger expression – HTTPS check](img/B19803_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – A Zabbix trigger expression – HTTPS check
  prefs: []
  type: TYPE_NORMAL
- en: So, our trigger will only be activated when the latest Zabbix version has been
    changed. We could just let the trigger resolve the first time the current value
    and the value before that are the same again, but I want to keep this trigger
    in the `PROBLEM` state just a little longer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, I defined a recovery expression as well. I’m telling it that this
    problem can only be recovered if the last received value and the fifth last are
    received. Check out the recovery expression up close:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Another Zabbix trigger expression – HTTPS check with different
    value](img/B19803_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Another Zabbix trigger expression – HTTPS check with different
    value
  prefs: []
  type: TYPE_NORMAL
- en: Recovery expressions are powerful when you want to extend your trigger functionality
    with just a bit more control over when it comes back into the `OK` state.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can use the recovery expression to extend the trigger’s **PROBLEM** state
    beyond what you defined in the **Problem expression** option. This way, we know
    we are still close to the **PROBLEM** state. We define that we only want the trigger
    to go back to the **OK** state after we’ve reached another threshold as defined
    in the recovery expression. This will work by evaluating both the problem and
    recovery expressions, where the problem expression has to be **FALSE** and the
    recovery expression **TRUE**.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger 3 – using multiple items in a trigger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, trigger 3 might seem complicated because we’ve used more than one item,
    but it’s basically the same setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – A Zabbix trigger expression using several items](img/B19803_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – A Zabbix trigger expression using several items
  prefs: []
  type: TYPE_NORMAL
- en: We have the same setup for the expression, with the function, host, item key,
    and value. Yet when we are working with multiple items, we can add an `or` statement
    between the items. This way, we can say we need to match one of the items before
    triggering the `PROBLEM` state. In this case, we trigger when either item exceeds
    the threshold.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In this trigger expression, we have some empty lines between the different item
    expressions. Empty lines between item expressions are totally fine and actually
    make for good readability. Use this wisely when building triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Old versus new trigger expression syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, if you’ve worked with Zabbix before version 5.4, the next part might be
    interesting to you. As mentioned in our introduction, there has been a big update
    to expressions within Zabbix. Trigger expressions now work in a new way, which
    is the same way as you will see in calculated items and other places for a unified
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the old expression syntax as seen in Zabbix 5.2 and older
    versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – A Zabbix trigger expression using the old syntax](img/B19803_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – A Zabbix trigger expression using the old syntax
  prefs: []
  type: TYPE_NORMAL
- en: In the old syntax, we always started with a *curly bracket* and then the hostname
    or template name. Between the hostname or template name and the item key, we had
    a colon. Marking the end of the item key, we had a *dot*, but item keys can also
    include dots themselves. Then, after the *dot*, we have the trigger function followed
    by the ending *curly bracket*. Then, all we have left is the operator and constant
    we want to compare the expression against.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can imagine, this could become confusing at times, especially when using
    dots in item keys. Now let’s check out the new trigger syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – A Zabbix trigger expression using the new syntax](img/B19803_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – A Zabbix trigger expression using the new syntax
  prefs: []
  type: TYPE_NORMAL
- en: Our new trigger syntax starts off right away with our trigger function; no hassle,
    just immediately showing you what we’re doing with this line. This is followed
    by a *bracket* and a *forward slash* before entering the host or template name.
    We then use another *forward slash* to divide the hostname or template name and
    the item key. We end with a *bracket*, and then all we have left is the operator
    and value we want to hold the expression against.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with the trigger function makes for a clear indicator of what your
    line is doing. Putting the hostname or template name into brackets and then dividing
    it with forward slashes from the item key makes for a more cohesive experience
    when writing expressions. We also don’t have confusing extra dots any longer.
    Altogether a very nice change to the trigger syntax, which in all honesty might
    take a bit of time to get used to.
  prefs: []
  type: TYPE_NORMAL
- en: It’s the small stuff that makes the entire software feel more professional and
    well thought out. Zabbix including changes such as these really helps with that.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not only can we match one of the items in a trigger expression, but we can also
    use an `and` statement. This way, we can make sure our trigger only goes into
    a `PROBLEM` state when multiple items are reaching a certain value. Triggers are
    very powerful like this, allowing us to define our own criteria in great detail.
    There’s no predefinition—we can add as many `and`, `not`, or `or` statements and
    different functions as we like in the trigger expressions. Customize your triggers
    to exactly what you need, and suddenly you are going to have a lot more peace
    of mind because you know your triggers will notify you when something is up.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To know more about trigger expressions, check out the Zabbix documentation.
    There’s a lot of information on which functions you can use to build the perfect
    trigger. For more details, go to [https://www.zabbix.com/documentation/current/en/manual/config/triggers/expression](https://www.zabbix.com/documentation/current/en/manual/config/triggers/expression).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up advanced triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Triggers in Zabbix keep getting more advanced and it might be hard to keep up.
    For people working with Zabbix 5.2 or older and upgrading to Zabbix 7, not only
    is there a new Zabbix trigger syntax but there’s also a whole new array of functions.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive into setting up some more advanced triggers in Zabbix 7.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need our Zabbix server ready and we’ll need one host
    that is monitored by a Zabbix agent with the Zabbix agent template. We’ll use
    the items on this host to create triggers. Let’s use the `lar-book-agent_passive`
    host from the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have this host from the previous chapter, simply hook up a new
    host with the default passive Linux monitoring template called `Linux by` `Zabbix
    agent`.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also be touching on some more advanced topics that are discussed later
    in the book. If you don’t know how to use **Low-Level Discovery** (**LLD**), for
    example, it might be a good idea to dive into [*Chapter 7*](B19803_07.xhtml#_idTextAnchor1318),
    *Using Discovery for Automatic* *Creation*, first.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s take a look at three *more advanced* triggers compared to the three we’ve
    seen in the previous recipe: `trendavg` for going through trend data, `timeleft`
    to predict values in the future, and **time shifting** to compare to the past.'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced trigger 1 – trendavg function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we’ll take a look at one of the newer trigger functionalities, the trend
    average function:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by creating a new trigger in our frontend. Navigate to **Data**
    **collection** | **Hosts** and select **lar-book-agent_passive**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Triggers** and click on the blue **Create trigger** button in
    the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next to the **Expression** field, click on the white **Add** button. Fill out
    the trigger using the expression builder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – trendavg trigger expression builder](img/B19803_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – trendavg trigger expression builder
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Insert** and add a name. It will look like this if done correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.15 – trendavg trigger form filled out](img/B19803_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – trendavg trigger form filled out
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s click the blue **Add** button at the bottom of the page to finish
    creating this trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s all for creating this trigger. Check out the *How it works…* section
    of this recipe to get more information about the trigger.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced trigger 2 – timeleft function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next up is our `timeleft` function, which is very useful for things such as
    space utilization. Let’s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll create a new trigger in our Zabbix frontend. Navigate to **Data collection**
    | **Hosts** and select **lar-book-agent_passive**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Discovery rules** and click on **Trigger prototype** next to **Mounted**
    **filesystem discovery**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we are creating the trigger prototype directly on the host, using
    an existing template discovery rule. If you want to apply a trigger like this
    to every host using a template, make sure to create the trigger on a template
    level. Furthermore, discovery rules are explained further in [*Chapter 7*](B19803_07.xhtml#_idTextAnchor1318),
    *Using Discovery for Automatic Creation*, of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create** **trigger prototype**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next to the **Expression** field, click on the white **Add** button. Fill out
    the trigger using the expression builder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.16 – timeleft trigger expression builder](img/B19803_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – timeleft trigger expression builder
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Using short intervals in predictive triggers to predict long time periods is
    not recommended. Make sure to use the right dataset for the time period we want
    to use in relation to the time we want to predict.
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Insert** button and the finished trigger will look like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – timeleft trigger form filled out](img/B19803_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – timeleft trigger form filled out
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Add** button at the bottom of the page to finish setting up
    the trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a new trigger using the `timeleft` function to tell us when hard
    disks are filling up within a week. Check out the *How it works…* section of this
    recipe to get more information about the trigger.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced trigger 3 – time shifting using mathematical functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lastly, we are going to work with time shifting, and in this case, we’ll do
    so in combination with a mathematical function. Time shifting is a little bit
    of a difficult example, so bear with me:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s navigate to **Data collection** | **Hosts** and select our host, **lar-book-agent_passive**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Triggers** and click the blue **Create** **trigger** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following trigger, as seen in the screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Time shifting average trigger form filled out](img/B19803_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – Time shifting average trigger form filled out
  prefs: []
  type: TYPE_NORMAL
- en: This is a very complex trigger to set up, so let’s dive right into how it’s
    set up in the *How it* *works…* section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Advanced triggers can get very complex. The triggers we have just set up are
    just the tip of the iceberg. Do not worry if these triggers seem intimidating,
    as there is plentiful documentation out there to help you set them up, which you
    can find here: [https://www.zabbix.com/documentation/current/en/manual/config/triggers](https://www.zabbix.com/documentation/current/en/manual/config/triggers).'
  prefs: []
  type: TYPE_NORMAL
- en: It’s near impossible to cover every single use case in this book, so the triggers
    we set up will show you what’s possible. Use what you have learned in the examples
    in your own scenarios, but make sure to apply your own thinking to it.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced trigger 1 – trendavg function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start off the *How it works…* section with the trend average. Trend average
    is one of the few trigger functions that use trend data instead of history data.
    Let’s do a short crash course on history and trend data in Zabbix. History data
    is the exact value every time an item receives data from a monitored host. Trend
    data is the average, minimum, and maximum values over one hour created from the
    history data and a count of the number of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s look at the available functions for creating triggers using trend
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**trendavg**: To get the average value from trend values within a time period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trendmax**: To get the maximum value from trend values within a time period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trendmin**: To get the minimum value from trend values within a time period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trendcount**: To get the number of retrieved trend values within a time period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trendsum**: To get a sum of trend values within a time period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As I said, all of these will use our trend values. The values used are stored
    in a special Zabbix trend cache in memory, for use in our trigger. We’ve used
    the `trendavg` function. Let’s check out how we used it in our trigger expression
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.19 – trendavg trigger expression](img/B19803_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – trendavg trigger expression
  prefs: []
  type: TYPE_NORMAL
- en: We start off our trigger with the `trendavg` function and then the *host/template*
    and *item key* as we saw earlier in the last recipe. What’s new here is the part
    where we state `1w:now-1w`. This is the time period; here we’ve stated to use
    a value from one week ago.
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that if the average value from our trends one week ago is
    above 800 Mbps, then this trigger will go into a problem state.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced trigger 2 – timeleft function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`timeleft` is another very interesting trigger function. We can use `timeleft`
    to create triggers that only fire when it expects something to reach a certain
    threshold in the future. This is called a predictive trigger, as it makes a prediction
    based on older data.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s check out our trigger expression again.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 4.20 – timeleft trigger expression\uFEFF](img/B19803_04_20.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – timeleft trigger expression
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, we start our expression as usual: the *trigger function*, *host/template*,
    and our *item key*. In this case, we combined that with a time period we want
    to use for our predictive trigger to define its prediction. We used `7h`, to tell
    this expression to use seven hours of historic data. Combine that with a threshold
    of `100`, to make sure this will trigger if we expect to reach 100% disk space
    usage. Now we only need one more element to complete this, the expected result,
    which in this case is `<1w`.'
  prefs: []
  type: TYPE_NORMAL
- en: To sum it all up, this trigger expression looks at *seven hours* of historic
    data and if it expects to reach *100%* disk space in *less than one week*, it
    will go into a problem state, alerting you that you will need to make sure your
    disks don’t run out of space.
  prefs: []
  type: TYPE_NORMAL
- en: '`timeleft` trigger function with other functions to limit how many times you
    get alerted. For example, with disk space, we might expect a disk to fill up in
    a week, but you might not want to see that unless the used space is at least less
    than 50 Gigabytes. Add another expression and you are golden:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – timeleft trigger function expression](img/B19803_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – timeleft trigger function expression
  prefs: []
  type: TYPE_NORMAL
- en: Advanced trigger 3 – time shifting using mathematical functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a Zabbix trainer, time shifting trigger expressions are where my students
    and I always need to spend some additional time on what they all do exactly. This
    makes sense, as it is one of the more complex expressions, and in this example,
    we even combined it with some mathematical functions.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s take another look at our expression and break it down.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Time shifting trigger expression](img/B19803_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – Time shifting trigger expression
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve added line numbers for our convenience. Now we can go over each line and
    explain what they mean:'
  prefs: []
  type: TYPE_NORMAL
- en: This is the opening bracket for our mathematical statement, using the operator
    between two items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our first item, using the time shift function. This item will get our memory
    availability as a percentage from one week ago starting from this moment exactly.
    If the current date and time are Monday 24th November at 14:00, it will get the
    one-hour average value for Monday 17th November between 13:00 and 14:00.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our mathematical operator, stating a minus. This means we’ll subtract the result
    of the first expression from the result of the second expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is our second item, not using a time shift. This item will be filled with
    a one-hour average value of the last hour.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The closing bracket ends our mathematical statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, an operator and constant. This states that this trigger will only trigger
    if the mathematical result is higher than 20.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we know what each of the lines does, let’s take a look at how it works
    in a real-life scenario. We’re going to fill out the values manually and see whether
    the expression is `TRUE` or `FALSE`. `TRUE` means that there is a problem and
    `FALSE` means everything is fine. So, the math is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Filling it out with 80% memory available last week and only 50% available this
    week, we can see the following happening:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s do it one more time but with 80% memory available last week and 70% this
    week:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is how you should go about setting up your time shifting expressions. Simply
    use a notebook or whatever you like, write down your expression in simple text
    for yourself, and do the calculations.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Trigger expressions can also be tested within Zabbix itself. If we go to **Data
    collection** | **Hosts** | **Triggers** and select any of our three advanced triggers,
    we can do a little test. For example, using the time shifting trigger, we can
    click **Expression constructor**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.23 – Time shifting trigger expression constructor](img/B19803_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – Time shifting trigger expression constructor
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can select **Test** and then fill out our values. Let’s use the same
    80% and 50% we did in the earlier example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24 – Time shifting trigger expression constructor – Test](img/B19803_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 – Time shifting trigger expression constructor – Test
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this will tell us whether our expression ends up being **TRUE**
    or **FALSE**, using any values we want to fill. In short, if you want to be sure
    your math on paper is doing the same thing directly in Zabbix, use **Expression
    constructor** to test it.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alerting can be a very important part of your Zabbix setup. When we set up alerts,
    we want the person on the other end to be informed of just what is going on. It’s
    also important to not spam someone with alerts; we want it to be effective.
  prefs: []
  type: TYPE_NORMAL
- en: So, in this recipe, we will go over the basics of setting up alerts, so we know
    just how to get it right from the start.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will only need two things. We will have to use our Zabbix
    server to create our alerts and we will need some triggers, such as the triggers
    from the previous recipe. The triggers will be used to initiate the alerting process
    to see just how the Zabbix server will convey this information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by setting up our action on the Zabbix frontend. To do this, we
    will navigate to **Alerts** | **Actions** | **Trigger actions** and we will be
    served with this screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.25 – The Zabbix Trigger actions page with one trigger action](img/B19803_04_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – The Zabbix Trigger actions page with one trigger action
  prefs: []
  type: TYPE_NORMAL
- en: There is already one action set up to notify **Zabbix administrators** of problem
    events. In Zabbix 7, a lot of features, such as **Actions** and **Media**, are
    predefined. Most of the time, all we need to do is enable them and fill out some
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will set up our own action, so let’s create a new action to notify a user
    in the **Zabbix administrators** group of our new triggers. Click the blue **Create
    action** button to be taken to the next page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.26 – The Zabbix action creation page – notify book reader](img/B19803_04_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 – The Zabbix action creation page – notify book reader
  prefs: []
  type: TYPE_NORMAL
- en: On this page, check the **Enabled** checkbox to make sure that this action will
    actually do something. Make sure to name your action clearly so that you won’t
    have any issues with differentiating between actions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, move on to the **Operations** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.27 – The Zabbix action creation page at the Operations tab – notify
    book reader](img/B19803_04_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.27 – The Zabbix action creation page at the Operations tab – notify
    book reader
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Operations** tab is empty by default, so we are going to want to create
    some operations here. There are three forms of operation that we are going to
    create here—let’s start with the **Operations** operation by clicking **Add**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.28 – Zabbix Operation details page – notify book reader](img/B19803_04_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.28 – Zabbix Operation details page – notify book reader
  prefs: []
  type: TYPE_NORMAL
- en: We have the option to add users and/or user groups here that we want to alert.
    If you’ve followed along with [*Chapter 1*](B19803_01.xhtml#_idTextAnchor021),
    *Installing Zabbix and Getting Started Using the Frontend*, you can just select
    the **Networking** user group here. If not, selecting just the **Zabbix administrators**
    group is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking the blue **Add** button at the bottom of the form, we will be
    taken back to the **Actions** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will create the next operation, named **Recovery operations**. What
    we do here is create an operation, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.29 – Zabbix Recovery operations details – notify book reader](img/B19803_04_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.29 – Zabbix Recovery operations details – notify book reader
  prefs: []
  type: TYPE_NORMAL
- en: This option will notify all users involved in the initial operation defined
    earlier. All users that got a **PROBLEM** generation notification will also receive
    the recovery this way. Click **Add**, and let’s continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you’re like me and you want to stay on top of things, you can create
    an update notification. This way, we know that—for instance—someone acknowledged
    a problem and is working on it. Normally, I would select different channels for
    stuff such as this—for instance, using **SMS** for high-priority alerts and a
    Slack or Teams channel for everything else.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s click **Add** under **Update operations** to add the following to our
    setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.30 – Zabbix update operation details – notify book reader](img/B19803_04_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.30 – Zabbix update operation details – notify book reader
  prefs: []
  type: TYPE_NORMAL
- en: We will do the same thing here as we did for the **Recovery operations** option
    and notify all users involved of any update to this problem. After clicking **Add**
    here, click the blue **Add** button again on the **Actions** screen to finish
    creating the action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the next thing we want to do is create a media type for actually notifying
    our users of the issue. Go to **Alerts** | **Media types**, and you will be presented
    with the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.31 – The Zabbix Media types page with predefined media options](img/B19803_04_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.31 – The Zabbix Media types page with predefined media options
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are quite a lot of predefined media types in Zabbix 7\.
    We have them for Slack, Opsgenie, and even Telegram. Let’s start with something
    almost everyone has, though: email.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Email** media type and we’ll edit it to suit our needs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.32 – The Zabbix Media type creation page for email](img/B19803_04_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.32 – The Zabbix Media type creation page for email
  prefs: []
  type: TYPE_NORMAL
- en: I set it up to reflect my Office 365 settings, but any **Simple Mail Transfer
    Protocol** (**SMTP**) server should work. Fill in your SMTP settings, and we should
    be able to receive notifications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Be sure to also check the next tab, **Message templates**. For example, the
    message template for a **Problem** generation event looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.33 – The default Zabbix Message template page for problems](img/B19803_04_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.33 – The default Zabbix Message template page for problems
  prefs: []
  type: TYPE_NORMAL
- en: We set this up like this so that we get a message telling us just what’s going
    on. This is fully customizable as well, to reflect just what we want to know.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s keep the default settings for now. Last but not least, go to **Users**
    | **Users** and edit a user in the **Zabbix administrators** or **Networking**
    group. I will use the **Admin** user as an example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.34 – The Zabbix user Media page for the Admin user](img/B19803_04_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.34 – The Zabbix user Media page for the Admin user
  prefs: []
  type: TYPE_NORMAL
- en: 'On this window, go to **Media** and click the **Add** button. We want to add
    the following to notify us of all trigger severities at our email address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.35 – The Zabbix user media creation page for the Admin user](img/B19803_04_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.35 – The Zabbix user media creation page for the Admin user
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the blue **Add** button and finish creating this user’s media.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, that’s how we set up alerts in Zabbix. You will now receive alerts at
    your email address, as shown in the following flowchart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.36 – Diagram showing Zabbix problem flow](img/B19803_04_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.36 – Diagram showing Zabbix problem flow
  prefs: []
  type: TYPE_NORMAL
- en: When something breaks, a **problem** in Zabbix is triggered by our trigger configuration.
    Our **action** will then be triggered by our problem event and it will use the
    media type and user media configuration to notify our user. Our user then fixes
    the issue (for instance, rebooting a stuck server), and then an **OK** event will
    be generated. We will then trigger the action again and get an OK message.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Before building alerts such as this, make a workflow (as shown in *Figure 4**.36*)
    for yourself, specifying just which user groups and users should be notified.
    This way, it’s clear just how you will use Zabbix for alerting.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are loads of media types and integrations, and we’ve just touched the
    tip of the iceberg by seeing a list of predefined ones. Make sure to check out
    the Zabbix integration list ([https://www.zabbix.com/integrations](https://www.zabbix.com/integrations))
    for more options or build your own using the Zabbix webhooks and other extensions
    available.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping alerts effective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s important to keep our alerts effective to make sure we are neither overwhelmed
    nor underwhelmed by notifications. To do this, we will change our trigger and
    the **Email** media type to reflect just what we want to see.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using trigger 1 from the first recipe and the default email media
    type in Zabbix.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, of course, we’ll also be using our Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create effective alerts, let’s follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started on trigger 1, which we created in this chapter’s *Setting
    up triggers* recipe. Navigate to the **lar-agent-simple** host by going to **Data
    collection** | **Hosts** and clicking **Trigger** for the host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, sometimes people use a different trigger name like the one we see here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.37 – Trigger 1 from the previous recipe](img/B19803_04_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.37 – Trigger 1 from the previous recipe
  prefs: []
  type: TYPE_NORMAL
- en: Even when you’ve used the `{HOST.NAME}` macro in the trigger, it’s quite simple,
    so fortunately there isn’t a lot to change here. If you’ve used the hostname in
    the trigger name, we can change the name to reflect a message that is clearer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to use a short and descriptive trigger name, such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.38 – New Trigger 1 name](img/B19803_04_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.38 – New Trigger 1 name
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, navigate to the **Tags** page to add a tag to keep the triggers organized.
    Let’s add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.39 – Trigger 1 tags](img/B19803_04_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.39 – Trigger 1 tags
  prefs: []
  type: TYPE_NORMAL
- en: Another great way of keeping everything organized is changing the message on
    media types. Let’s change the media type to reflect our needs. Navigate to **Alerts**
    | **Media types** and select our media type named **Email**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Message** **templates** and click **Edit** next to our first problem.
    This will bring us to the following window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.40 – Standard email media type message](img/B19803_04_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.40 – Standard email media type message
  prefs: []
  type: TYPE_NORMAL
- en: Currently, Zabbix uses the default configured message under the media type when
    we do not use a custom message. But if we want to change that message, we can
    do that here by creating a custom message. The default message under the **Email**
    media type looks as in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can change the message on the media type. For instance, if you don’t want
    to see the original problem ID or want a more customized message, simply remove
    that line, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 4.41 – Custom Email media type \uFEFF\uFEFFmessage](img/B19803_04_41.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.41 – Custom Email media type message
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ve done two things in this recipe: changed our trigger name and added a
    tag to our trigger.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping trigger names clear and defined in a structured way is important to
    keep our Zabbix environment structured. Instead of just naming our trigger `Port
    22 SSH down on {HOST.NAME}`, we’ve added standardization to our setup and can
    now create cool structures such as this with our future triggers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.42 – Trigger structure diagram](img/B19803_04_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.42 – Trigger structure diagram
  prefs: []
  type: TYPE_NORMAL
- en: Our triggers are all clear and we can immediately see which host, port, and
    service are down.
  prefs: []
  type: TYPE_NORMAL
- en: 'On top of that, we’ve added a tag for the service that is down, which will
    now immediately display our service in a clear way, alerting us to exactly what
    is going on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.43 – Trigger down – structured](img/B19803_04_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.43 – Trigger down – structured
  prefs: []
  type: TYPE_NORMAL
- en: In Zabbix 6, a new tag policy was introduced. As we created the item used in
    the trigger with a `availability`, `performance`, `notification`, `security`,
    and `capacity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the new Zabbix tag policy that we still use in Zabbix
    7, check out this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/](https://blog.zabbix.com/tags-in-zabbix-6-0-lts-usage-subfilters-and-guidelines/19565/)'
  prefs: []
  type: TYPE_NORMAL
- en: Another thing we’ve done is removed the `{HOST.NAME}` macro if we’ve used it
    before. As we can already see which host this trigger is on by checking the `{HOST.NAME}`
    macro. We need to keep trigger names short and effective and use the hostname
    macros in **Media** or simply use the field already available in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve also changed our action in this recipe. Changing a message on media types
    is a powerful way to keep our problem channels structured. Sometimes, we want
    to see less or more information on certain channels, and changing media type messages
    is one way to do this.
  prefs: []
  type: TYPE_NORMAL
- en: We can also create custom messages on an **Action** level, changing all the
    messages sent to the selected channels.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What I’m trying to show you in this recipe is that although it might be simple
    to set up Zabbix, it is not simple to set up a good monitoring solution with Zabbix—or
    any monitoring tool, for that matter—if you don’t plan. Carefully plan out how
    you want your triggers to be structured before you build everything in your Zabbix
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: An engineer who works in a structured way and takes the time to build a good
    monitoring solution will save a lot of hours in the future because they will understand
    the problem before anyone else.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alerting is very useful, especially in combination with some of the tricks we’ve
    learned in this book so far to keep everything structured. But sometimes, we need
    a little more from our alerts than what we are already getting from Zabbix out
    of the box.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll do a small bit of customization to make the alerts more
    our own.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, all we are going to need is our current Zabbix server installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To customize alerts, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create some custom severities in our Zabbix server to reflect our organization’s
    needs. Navigate to **Administration** | **General** and select **Trigger displaying
    options** from the side menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.44 – Administration | General from side menu](img/B19803_04_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.44 – Administration | General from side menu
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting this, we’ll be taken to the next page. This window contains
    the default Zabbix trigger severities, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.45 – Default trigger severities page](img/B19803_04_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.45 – Default trigger severities page
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we can customize the default trigger severities, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.46 – Custom trigger severities page](img/B19803_04_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.46 – Custom trigger severities page
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to click the blue **Update** button at the bottom of the page
    to save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not all companies like using terms such as **High** and **Disaster**, but prefer
    using different severities such as **P1** and **P2**. Using custom severities,
    we can customize Zabbix to make it more our own and reflect the terms we’ve already
    been using in different tools, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Changing custom severities is not a necessity by any means, but it can be a
    good way to adopt Zabbix more easily if you are used to something different.
  prefs: []
  type: TYPE_NORMAL
