["```\ngcloud services enable container.googleapis.com containerregistry.googleapis.com cloudbuild.googleapis.com\n```", "```\nexport CLUSTER_NAME=\"test-cluster\"\nexport ZONE=\"us-central1-a\"\n```", "```\ngcloud beta container clusters create $CLUSTER_NAME \\\n--addons=HorizontalPodAutoscaling,HttpLoadBalancing,Istio,CloudRun \\\n--machine-type=n1-standard-2 \\\n--cluster-version=latest --zone=$ZONE \\\n--enable-stackdriver-kubernetes \\\n--scopes cloud-platform\n```", "```\ngcloud config set run/cluster $CLUSTER_NAME\ngcloud config set run/cluster_location $ZONE\n```", "```\nkubectl get nodes\n```", "```\ngit clone [github repo]/ch09/hello-node\n```", "```\ngcloud builds submit --config cloudbuild.yaml\n```", "```\ngcloud run deploy [SERVICE] --image [IMAGE] --platform gke --cluster [CLUSTER-NAME] --cluster-location [CLUSTER-LOCATION]\n```", "```\nconst express = require('express');\nconst app = express();\nconst port = process.env.PORT || 8080;\napp.get('/', (req, res) => res.send('Hello World! +1'));\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));\n```", "```\ngcloud builds submit --config cloudbuild.yaml\n```", "```\ngcloud beta run deploy [SERVICE] --image [IMAGE] --platform gke --cluster [CLUSTER-NAME] --cluster-location [CLUSTER-LOCATION]\n```", "```\nconst express = require('express')\nconst app = express()\nconst port = process.env.PORT || 8080;\napp.get('/', (req, res) => res.send('Hello World! GitHub Build'))\napp.listen(port, () => console.log(`Example app listening on port ${port}!`))\n```", "```\nsteps:\n  # Build the container image\n- name: 'gcr.io/cloud-builders/docker'\n  args: ['build', '-t', 'gcr.io/$PROJECT_ID/hello-node', '.']\n  # push the container image to Container Registry\n- name: 'gcr.io/cloud-builders/docker'\n  args: ['push', 'gcr.io/$PROJECT_ID/hello-node']\n  # Deploy container image to Cloud Run\n- name: 'gcr.io/cloud-builders/gcloud'\n  args: ['beta', 'run', 'deploy', 'hello-node', '--image', 'gcr.io/$PROJECT_ID/hello-node', '--platform', 'gke', '--cluster', 'test-cluster', '--cluster-location', 'us-central1-a']\nimages:\n- 'gcr.io/$PROJECT_ID/hello-node'\ntimeout: \"600s\"\n```", "```\ngcloud builds submit --config cloudbuild.github\n```", "```\nSERVICE_URL=$(gcloud beta run services describe [SERVICE-NAME] --platform gke --cluster [CLUSTER-NAME] --cluster-location [ZONE] --format \"value(status.url)\")\n```", "```\nISTIO_INGRESS=$(kubectl get svc istio-ingress -n gke-system -o json | jq -r '.status.loadBalancer.ingress[0].ip')\n```", "```\nkubectl patch configmap config-domain --namespace knative-serving --patch \\\n'{\"data\": {\"example.com\": null, \"[EXTERNAL-IP].[DNS-SERVICE]\": \"\"}}'\n```", "```\nSERVICE_URL=$(gcloud beta run services describe [SERVICE-NAME] --platform gke --cluster [CLUSTER-NAME] --cluster-location [ZONE] --format \"value(status.url)\")\n```", "```\nconst express = require('express')\nconst app = express()\nconst port = process.env.PORT || 8080;\noops\napp.get('/', (req, res) => res.send('Hello World! GitHub Build'))\napp.listen(port, () => console.log(`Example app listening on port ${port}!`))\n```", "```\ngcloud beta container clusters delete CLUSTER_NAME\n```"]