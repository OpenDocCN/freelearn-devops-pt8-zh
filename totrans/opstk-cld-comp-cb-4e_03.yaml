- en: Chapter 3. Keystone – OpenStack Identity Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction – OpenStack Identity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating OpenStack domains in Keystone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling domains in the OpenStack dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating OpenStack projects in Keystone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring roles in Keystone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding users in Keystone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring groups in Keystone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack endpoint information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction – OpenStack Identity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenStack Identity service, known as **Keystone** , provides services for
    authenticating and managing user accounts and role information for our OpenStack
    cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: It is a crucial service that underpins the authentication and verification between
    all of our OpenStack cloud services and is the first service that needs to be
    installed within an OpenStack environment. The OpenStack Identity service authenticates
    users and projects by sending a validated authorization token between all OpenStack
    services. This token is passed to the other services, such as Storage and Compute,
    to grant user access to specific functionalities. Therefore, configuration of
    the OpenStack Identity service must be completed first before using any of the
    other services. Setting up of the Identity service involves the creation of appropriate
    roles for users and services, projects, the user accounts, and the service API
    endpoints that make up our cloud infrastructure. Since we are using Ansible for
    deploying our environment (refer to [Chapter 1](part0014_split_000.html#DB7S2-189e69df43a248268db97cde1b1a8e47
    "Chapter 1. Installing OpenStack with Ansible"), *Installing OpenStack with Ansible*
    for more details), all the basic configuration is done for us in the Ansible playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: In Keystone, we have the concepts of domains, projects, roles, users, and user
    groups. A Keystone domain (not to be confused with a DNS domain) is a high level
    OpenStack Identity resource that contains projects, users, and groups. A project
    has resources such as users, images, and instances, as well as networks in it
    that can be restricted only to that particular project, unless explicitly shared
    with others. A user can belong to one or more projects and is able to switch between
    them to gain access to those resources. Users within a project can have various
    roles assigned. Users can be organized into user groups and the groups can have
    roles assigned to them. In the most basic scenario, a user can be assigned either
    the role of admin or just be a member. When a user has admin privileges within
    a project, the admin is able to utilize features that can affect the project (such
    as modifying external networks), whereas a normal user is assigned the member
    role. This member role is generally assigned to perform user-related roles, such
    as spinning up instances, creating volumes, and creating isolated, project-specific
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Projects used to be called **tenants** in early versions of OpenStack.
  prefs: []
  type: TYPE_NORMAL
- en: Creating OpenStack domains in Keystone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you wish to use more than one domain for your OpenStack deployment, consider
    using separate domains. Think of domains as separate accounts or departments in
    large organizations. For this section, we will create a domain for our project,
    called `bookstore`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a domain in our OpenStack environment, perform the following step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by creating a domain called `bookstore` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will look similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00017.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In OpenStack, high level identity resources can be grouped under different
    domains. If you have to manage distinct organizations within your OpenStack environment,
    having separate domains for managing them might be very beneficial. By default,
    your OpenStack environment most likely has a default domain called "Default."
    By running the preceding command, we just created an additional domain that can
    used to manage resources related to this book. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `description` parameter is also optional, but highly recommended. The domain
    name must be unique to other domains in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our recipes, we will use the `--domain` parameter and specify a domain name.
    If the domain is not specified, the OpenStack command-line client will use the
    domain set for the current user that was specified in the `openrc` file. Most
    likely, that will be the `default` domain.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling domains in the OpenStack dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using multiple domains in your OpenStack environment, you will need
    to enable them in the OpenStack dashboard (Horizon) as well. To do so, the `OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT`
    variable in Horizon settings needs to be set to `True`. In this example, we will
    show you how to do so using OpenStack Ansible playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use Ansible to update Horizon settings. Make sure that you have
    access to your `openstack-ansible` deployment host.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable multidomain support in the OpenStack dashboard, we will update one
    horizon variable, `OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT` in `local_settings.py`
    using the `openstack-ansible` deployment tool. First, you will need to connect
    to your `openstack-ansible` deployment host. Once connected, execute the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `/etc/openstack_deploy/user_variables.yml` file to add the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Deploy Horizon with the `openstack-ansible` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `openstack-ansible` command produces a lot of output. For brevity, its output
    has been omitted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Launch the OpenStack dashboard to verify that the login screen now shows domain
    field:![How to do it…](img/00018.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In OpenStack, if you are taking advantage of the multiple domain functionality,
    you have full control via command-line tools. However, if you want to be able
    to use the OpenStack dashboard with multiple domains, you will need to enable
    Horizon's multidomain support. To do so, you need to update the Horizon settings
    file. Since we are using the `openstack-ansible` tool, we updated the `user_variables.yml`
    file and ran the `openstack-ansible` command. This command updated the required
    variable and restarted the `apache2` (HTTP server) services on the Horizon container.
  prefs: []
  type: TYPE_NORMAL
- en: Creating OpenStack projects in Keystone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users can't be created without having a project assigned to them, so these must
    be created first. For this section, we will create a project for our users, called
    `cookbook`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a project in our OpenStack environment, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by creating a project called `cookbook` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The command should produce the output similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00019.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By running the preceding command, we just created a project in our `bookstore`
    domain. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `domain` parameter is optional, used to determine which domain the project
    will belong to. If omitted, the project will be created in the `default` domain.
    The `description` parameter is also optional, but highly recommended. The `name`
    parameter has to be unique to the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring roles in Keystone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Roles are the permissions given to users within a project. Roles can also be
    scoped to a particular domain, making it possible to restrict permissions for
    particular users to a domain and project. If you used Ansible to install your
    OpenStack environment, it should already contain some default roles, such as `admin`
    and `_member_`. Here we will configure one role, a `cloud_admin` role that allows
    for administration of our example `bookstore` domain environment and a `user`
    role for the `default` domain that is given to ordinary users who will be using
    the cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the required roles in our OpenStack environment, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creation of the `cloud_admin` role is done as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00020.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To configure the `user` role for the `default` domain, execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00021.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: This command created a new role called `user`. Since we didn't specify a domain,
    it was created under the `default` domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'View roles associated with the `bookstore` domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00022.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'List roles associated with the current admin user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00023.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creation of roles is simply achieved using the OpenStack client, specifying
    the `role create` option with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `domain_name` attribute is optional, if you omit it, a role for the `default`
    domain will be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `role_name` attribute, the `admin` and `_member_` roles names cannot
    be used again. The `admin` role is set by default in OpenStack code starting with
    the Pike release, and in releases before Pike in the `/etc/keystone/policy.json`
    file, as having administrative rights:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `_member_` role is also configured by default in the dashboard when a nonadmin
    user is created through the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'On creation of the role, the ID associated with the role is returned, and we
    can use it when assigning roles to users. To see a list of roles and the associated
    IDs in our environment, we can issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the `domain` parameter is not specified, you will see roles associated only
    with your current user's domain.
  prefs: []
  type: TYPE_NORMAL
- en: Adding users in Keystone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding users to OpenStack Identity service requires the user to belong to a
    domain or a project in the domain and to be assigned a role defined in the domain
    or the project. For this section, we will create two users. The first user will
    be named `cloud_admin` and will have the `cloud_admin` role assigned to them in
    the `cookbook` project. The second user will be named `reader` and will have the
    default `_member_` role assigned to them in the same `cookbook` project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to create a user in OpenStack and assign roles to it, we will need
    to execute the commands listed below.
  prefs: []
  type: TYPE_NORMAL
- en: First, get the `bookstore` domain ID or domain name:![How to do it…](img/00024.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the `bookstore` domain name, create a new `cloud_admin` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00025.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Next, get a cookbook project ID or project name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00026.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create the `reader` user in the `bookstore` domain `cookbook` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00027.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Assign `cloud_admin` user to the `admin` role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is no output from this command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Assign the `reader` user to the `_member_` role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is no output from this command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List user and role assignment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output will be a matrix of role, user, group, project, and domain IDs. We
    omit the example output due to sheer size of the table that contains a matrix
    of IDs for each role, user, group, project, domain, and whether the role was inherited.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding users in the OpenStack Identity service involves a number of steps and
    dependencies. First, a domain and a project are required for the user to be part
    of. A user must always belong to a domain. If there are no custom domains created,
    a `default` domain will be used. Once the project exists, the user can be added.
    At this point, the user has no role associated, so the final step is to assign
    the role to this user, such as `_member_,` `admin`, or a custom role.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a user with the `user create` option, the syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `user_name` attribute is an arbitrary name, but cannot contain any spaces.
    A `password` attribute must be present. In the previous examples, these were set
    to `verysecret`. If the `domain` attribute is not specified, the `default` domain
    will be set.
  prefs: []
  type: TYPE_NORMAL
- en: 'To assign a role to a user with the `role add` option, the syntax is as follows
    for the `default` domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For a user in a custom domain, use the following syntax to assign a role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `role_domain` parameter is the name (or ID) of the domain to which the role
    belongs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need to have the names or IDs of the user, role, and project in
    order to assign roles to users. These names or IDs can be found using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `--domain <domain>` option is only required if custom domains are used.
    To obtain a list of domains, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To get a matrix of domain, project, user, and role assignments, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Configuring groups in Keystone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you wish to organize users by their roles, you can create a user group using
    Keystone groups. Groups are owned by a domain. In this example, we will create
    one group, `reader_group`, and set a `cloud_admin` role to it. We will also add
    two users to it, `reader` and `reader1`. We will also verify that the users belong
    to the group, as well as remove one of the users afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create groups and assign users to them, we will need to execute
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00028.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'List existing groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00029.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Add group to the role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both the `--domain` and `--role-domain` parameters are needed. There is no output
    to this command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `reader` user to the group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This produces a message like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `reader1` user to the group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should output the following message:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that `reader` is in the `reader_group` group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should output the following message:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that `reader1` is in the `reader_group` group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This produces a message like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the `reader1` user from the `reader_group` group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This produces a message like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check again whether `reader1` is in the `reader_group` group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This produces a message like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding users to identity groups is a good way to grant them specific set of
    roles without individually assigning each role to a user. If you have to manage
    users that always get the same set of roles, you can create a user group and add
    or remove users as needed, rather than setting individual roles to each user.
    Roles are assigned to the group in a similar fashion that they are assigned to
    the user. In our example, we first created a custom group, `reader_group`. The
    command for creating groups is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Since we are using a custom domain in our example, `<domain-name>` is needed.
    However, if `<domain-name>` is omitted, domain for the current user will be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add group to a role:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `role_domain` parameter is the name (or ID) of the domain to which the role
    belongs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need to have the name of the group, the name of the role, and
    the name of the project in order to assign roles to users. These names can be
    found using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass `--domain <domain>` as an option to the preceding commands if you have
    custom domains. To obtain a list of domains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a user to the group, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove a user from the group, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify if the user belongs to the group, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To get a matrix of domain, project, user, group, and role assignments, use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: You can also use IDs instead of names for projects for all of the preceding
    commands instead of names.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Groups were introduced in Keystone v3.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Projects can be deleted even if they have users associated with them, so be
    sure to delete users and other project assets before deleting a project, otherwise
    you risk having orphaned resources. In this example, we will show how to delete
    a project named `oldbook`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to delete a project, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the project''s name from a current project list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00030.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Delete the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will have no output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deleting unnecessary projects is simple when using OpenStack command-line tool.
    Be sure to delete only empty projects. Start with a command to get existing projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete a project by executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `<project>` parameter can be either project ID or project name.
  prefs: []
  type: TYPE_NORMAL
- en: If project has users assigned, they will not be deleted, but the project will
    be.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Removing users from OpenStack Identity is a simple one step process. In this
    example, we will show how to delete a user named `oldreader`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to delete a user, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the user''s name from the users in a current domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00031.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Delete the `oldreader` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will have no output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deleting unnecessary users is simple when using OpenStack command-line tool.
    Start with a command to get existing users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete a user by executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Here the `<user>` parameter can be either user ID or username.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Removing roles from the OpenStack Identity is a simple one step. In this example,
    we will show how to delete a role named `oldrole`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to delete a role, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the role''s name from a current role list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00032.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Delete the `oldrole` role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will have no output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deleting unnecessary roles is simple when using OpenStack command-line tool.
    Start with a command to get an existing role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete a role by executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Here the `<role>` parameter can be either role ID or role name.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Removing user groups from the OpenStack Identity service is a simple one step.
    In this example, we will show how to delete a group named `oldgroup`. Note that
    when you delete a group, it doesn't delete the users assigned to the group. The
    role and group permission mappings will be gone, and as a result, users may lose
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to delete a user group, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the group''s name from a current group list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00033.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Delete the `oldgroup` group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will have no output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deleting unnecessary groups is simple when using OpenStack command-line tool.
    Start with a command to get existing group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete a group by executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Here the `<group>` parameter can be either group ID or group name.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keystone domains can be deleted if there are no users associated with them.
    If there are any users associated with the domain when trying to delete it, an
    error will be shown. In this example, we will show how to delete a domain that
    is no longer being used, called `olddomain`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to delete a domain, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the domain's name from a current domain list:![How to do it…](img/00034.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that there are no users associated with the `olddomain` domain that
    we will be deleting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This list should be empty before proceeding. If it is not, delete all the users
    before proceeding to the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Disable the domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will have no output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Delete domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If successful, this command will have no output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deleting unnecessary domains requires that domains have no users associated
    with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that there are no users attached to this domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Deleting a domain requires that it first be disabled. A domain can be disabled
    even if there are users attached to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Only after a domain is disabled and no longer has any users associated with
    it, will you be able to delete a domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: If you need to delete users, refer to the *Deleting users* recipe, earlier in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: OpenStack endpoint information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to find out the endpoint information for different OpenStack services,
    or the services running on the OpenStack installation, use the OpenStack service
    catalog. If you need to automate any OpenStack tasks or are integrating any other
    tools with OpenStack, catalog will also come in handy. The catalog lists services
    and endpoint information for each of them. The catalog may be different for each
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list OpenStack catalog information, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In OpenStack, different service API endpoints can be found out using the OpenStack
    catalog. The catalog will list all the OpenStack services that it knows about
    and their respective internal, admin, and public URLs. The catalog is also handy
    if you are trying to automate any of the OpenStack tasks. On the **Command-Line
    Interface** (**CLI**), list the available endpoints by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works…](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The output from our `catalog` command has been trunkated for this example. The
    full catalog command will list all the installed services.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The service catalog will be different for each OpenStack installation.
  prefs: []
  type: TYPE_NORMAL
