["```\nresource \"azurerm_container_registry\" \"main\" {\n  name                    = replace(\"acr${var.application_name}${var.environment_name}\", \"-\", \"\")\n  resource_group_name     = azurerm_resource_group.main.name\n  location                = azurerm_resource_group.main.location\n  sku                     = \"Premium\"\n  admin_enabled           = true\n  zone_redundancy_enabled = true\n}\n```", "```\nresource \"azurerm_role_assignment\" \"acr_push\" {\n  count = length(var.container_registry_pushers)\n  scope                = azurerm_container_registry.main.id\n  role_definition_name = \"AcrPush\"\n  principal_id         = var.container_registry_pushers[count.index]\n}\n```", "```\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  name                      = \"aks-${var.application_name}-${var.environment_name}\"\n  location                  = azurerm_resource_group.main.location\n  resource_group_name       = azurerm_resource_group.main.name\n  dns_prefix                = \"${var.application_name}-${var.environment_name}\"\n  node_resource_group       = \"${azurerm_resource_group.main.name}-cluster\"\n  sku_tier                  = \"Standard\"\n  ...\n}\n```", "```\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  ...\n  default_node_pool {\n  name                        = \"systempool\"\n  vm_size                     = var.aks_system_pool.vm_size\n  enable_auto_scaling         = true\n  min_count                   = var.aks_system_pool.min_node_count\n  max_count                   = var.aks_system_pool.max_node_count\n  vnet_subnet_id              = azurerm_subnet.kubernetes.id\n  os_disk_type                = \"Ephemeral\"\n  os_disk_size_gb             = 30\n  orchestrator_version        = var.aks_orchestration_version\n  temporary_name_for_rotation = \"workloadpool\"\n  zones = [1, 2, 3]\n  upgrade_settings {\n    max_surge = \"33%\"\n  }\n  ...\n}\n```", "```\nresource \"azurerm_kubernetes_cluster_node_pool\" \"workload\" {\n  name                  = \"workloadpool\"\n  kubernetes_cluster_id = azurerm_kubernetes_cluster.main.id\n  vm_size               = var.aks_workload_pool.vm_size\n  enable_auto_scaling   = true\n  min_count             = var.aks_workload_pool.min_node_count\n  max_count             = var.aks_workload_pool.max_node_count\n  vnet_subnet_id        = azurerm_subnet.kubernetes.id\n  os_disk_type          = \"Ephemeral\"\n  orchestrator_version  = var.aks_orchestration_version\n  mode  = \"User\" # Define this node pool as a \"user\" aka workload node pool\n  zones = [1, 2, 3]\n  upgrade_settings {\n    max_surge = \"33%\"\n  }\n  node_labels = {\n    \"role\" = \"workload\"\n  }\n  node_taints = [\n    \"workload=true:NoSchedule\"\n  ]\n}\n```", "```\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  ...\n  identity {\n    type         = \"UserAssigned\"\n    identity_ids = [azurerm_user_assigned_identity.cluster.id]\n  }\n  ...\n}\n```", "```\nresource \"azurerm_role_assignment\" \"cluster_identity_operator\" {\n  scope                = azurerm_resource_group.main.id\n  role_definition_name = \"Managed Identity Operator\"\n  principal_id         = azurerm_user_assigned_identity.cluster.principal_id\n}\n```", "```\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  ...\n  kubelet_identity {\n    client_id                 = azurerm_user_assigned_identity.cluster_kubelet.client_id\n    object_id                 = azurerm_user_assigned_identity.cluster_kubelet.principal_id\n    user_assigned_identity_id = azurerm_user_assigned_identity.cluster_kubelet.id\n  }\n}\n```", "```\nresource \"azurerm_role_assignment\" \"cluster_kubelet_acr\" {\n  principal_id         = azurerm_user_assigned_identity.cluster_kubelet.principal_id\n  role_definition_name = \"AcrPull\"\n  scope                = azurerm_container_registry.main.id\n}\n```", "```\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  ...\n  key_vault_secrets_provider {\n    secret_rotation_enabled  = true\n    secret_rotation_interval = \"5m\"\n  }\n  ...\n}\n```", "```\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  ...\n  oidc_issuer_enabled       = true\n  workload_identity_enabled = true\n  ...\n}\n```", "```\nresource \"azurerm_federated_identity_credential\" \"main\" {\n  name                = azurerm_user_assigned_identity.workload.name\n  resource_group_name = azurerm_resource_group.main.name\n  audience            = [\"api://AzureADTokenExchange\"]\n  issuer              = azurerm_kubernetes_cluster.main.oidc_issuer_url\n  parent_id           = azurerm_user_assigned_identity.workload.id\n  subject             = \"system:serviceaccount:${var.k8s_namespace}:${var.k8s_service_account_name}\"\n}\n```", "```\ndata \"azurerm_kubernetes_cluster\" \"main\" {\n    name                = var.kubernetes_cluster_name\n    resource_group_name = var.resource_group_name\n}\n```", "```\nprovider \"kubernetes\" {\n    host                   = data.azurerm_kubernetes_cluster.main.kube_admin_config[0].host\n    client_key             = base64decode(data.azurerm_kubernetes_cluster.main.kube_admin_config[0].client_key)\n    client_certificate     = base64decode(data.azurerm_kubernetes_cluster.main.kube_admin_config[0].client_certificate)\n    cluster_ca_certificate = base64decode(data.azurerm_kubernetes_cluster.main.kube_admin_config[0].cluster_ca_certificate)\n}\n```", "```\nprovider \"helm\" {\n  kubernetes {\n    ...\n  }\n}\n```", "```\nresource \"kubernetes_manifest\" \"secret_provider_class\" {\n  manifest = {\n    apiVersion = \"secrets-store.csi.x-k8s.io/v1\"\n    kind       = \"SecretProviderClass\"\n    metadata = {\n      name      = \"web-app-secrets\"\n      namespace = var.namespace\n    }\n    spec = {\n      provider = \"azure\"\n        secretObjects = [\n        {\n          data = [\n            {\n              key        = \"db-admin-password\"\n              objectName = \"db-admin-password\"\n            }\n          ]\n          secretName = \"db-admin-password\"\n          type       = \"Opaque\"\n        }\n      ]\n      parameters = {\n        usePodIdentity = \"false\"\n        clientID       = var.service_account_client_id\n        keyvaultName   = var.keyvault_name\n        cloudName      = \"\"\n        objects = yamlencode([\n          {\n            objectName    = \"db-admin-password\"\n            objectType    = \"secret\"\n            objectVersion = \"\"\n          }\n        ])\n        tenantId = var.tenant_id\n      }\n    }\n  }\n}\n```", "```\nresource \"kubernetes_service_account\" \"main\" {\n  metadata {\n    namespace = var.namespace\n    name      = var.service_account_name\n    annotations = {\n      \"azure.workload.identity/client-id\" = var.service_account_client_id\n    }\n  }\n}\n```", "```\nlabels = {\n    \"azure.workload.identity/use\" = \"true\"\n}\n```", "```\nspec {\n    ...\n    service_account_name = \"workload\"\n    ...\n}\n```", "```\n- name: Login to Azure Container Registry\n    uses: docker/login-action@v3\n    with:\n    registry: ${{ steps.terraform.outputs.registry_endpoint }}\n    username: ${{ vars.DOCKER_ARM_CLIENT_ID }}\n    password: ${{ secrets.DOCKER_ARM_CLIENT_SECRET }}\n```", "```\n- name: Build and push Docker image to ACR\n    uses: docker/build-push-action@v5\n    with:\n    context: ${{ env.DOCKER_WORKING_DIRECTORY }}\n    push: true\n    tags: ${{ steps.terraform.outputs.registry_endpoint }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.image-version.outputs.version }}\n```"]