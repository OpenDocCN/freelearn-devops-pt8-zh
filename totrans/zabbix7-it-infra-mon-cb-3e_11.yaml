- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maintaining Your Zabbix Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like any good piece of software, Zabbix needs to be maintained in order to keep
    working over the years. A lot of users have been running their setups since the
    days of Zabbix 2.0\. It’s perfectly viable to do this if you bring the right knowledge
    of Zabbix to the equation.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to see how to do some of the most important parts
    of Zabbix maintenance to make sure you can keep your setup available and running
    smoothly. We are going to cover creating maintenance periods, how to make backups,
    how to upgrade Zabbix and various Zabbix components, and how to do some performance
    maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover these in the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Zabbix maintenance periods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up your Zabbix setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading the Zabbix backend from older PHP versions to PHP 8.2 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading a Zabbix database from older MariaDB versions to MariaDB 10.11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading your Zabbix setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining Zabbix performance over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to need several important servers for these recipes. First of all,
    we are going to need a running Zabbix 7 server for which to set up maintenance
    periods and do performance tuning.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the upgrade part, we will need one of the following servers:'
  prefs: []
  type: TYPE_NORMAL
- en: A Rocky Linux 8 server running Zabbix server 6, a PHP version before 8.2, and
    a MariaDB version before 11.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Ubuntu 22.04 server running Zabbix server 6 a PHP version before 8.3, and
    a MariaDB version before 11.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will call the upgrade server `lar-book-zbx6`, which you can run with a distribution
    of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have any prior experience with Zabbix, this chapter may prove
    a good challenge, as we are going to go into the more advanced Zabbix processes
    in depth.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Zabbix maintenance periods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we are working on our Zabbix server or on other hosts, it’s super useful
    to set up maintenance periods in the Zabbix frontend. With maintenance periods
    we can make sure that our Zabbix users don’t get alerts going off because of our
    maintenance. One improvement you’ll find in Zabbix 7 is the inclusion of near-instant
    maintenance periods. As we no longer have to wait long for the config cache reload,
    Zabbix also altered the timer process to instantly enable a new maintenance period.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how we can schedule maintenance periods in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All we are going to need in this recipe is our Zabbix server, for which I’ll
    use `lar-book-rocky`. The server will need at least some hosts and host groups
    to create maintenance periods for. Furthermore, we’ll need to know how to navigate
    the Zabbix frontend.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s get started with this recipe by logging in to our frontend and navigating
    to **Data collection** | **Maintenance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are going to click on the blue **Create maintenance period** button in the
    top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will show us a popup, where we can set up our maintenance period. Let’s
    start by defining the maintenance period parameters. Fill in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Zabbix Data collection | Maintenance, create maintenance window,
    Patch Tuesday](img/B19803_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Zabbix Data collection | Maintenance, create maintenance window,
    Patch Tuesday
  prefs: []
  type: TYPE_NORMAL
- en: Now, at the **Periods** part, we’ll create a new maintenance period. We need
    to click on the underlined **Add** text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will bring us to another pop-up window where we can set the maintenance
    period. We need to fill in the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Zabbix Data collection | Maintenance, create maintenance period
    window, Patch Tuesday](img/B19803_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Zabbix Data collection | Maintenance, create maintenance period
    window, Patch Tuesday
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click the blue **Add** button to continue. You should now see that our
    maintenance period is filled in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Zabbix Configuration | Maintenance, create maintenance period
    page, Patch Tuesday](img/B19803_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Zabbix Configuration | Maintenance, create maintenance period
    page, Patch Tuesday
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, next to the **Host groups** field, click on the **Select** button and
    select the **Linux servers** host group. Our page should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Zabbix Configuration | Maintenance, add hosts to maintenance
    page, Patch Tuesday](img/B19803_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Zabbix Configuration | Maintenance, add hosts to maintenance page,
    Patch Tuesday
  prefs: []
  type: TYPE_NORMAL
- en: You can still add a **Description** if you’d like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the blue **Add** button at the bottom of the page to finish creating
    the maintenance period. This will bring us back to our **Maintenance periods**
    page, where we should see that our maintenance window has been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When configuring actions in Zabbix, we tell Zabbix to do a certain defined operation
    when a trigger is fired. Maintenance periods (with data collection) work by suppressing
    these Zabbix operations for the time period defined in the maintenance period.
    We do this to make sure that no Zabbix users are notified of any problems going
    on as maintenance is being done on a host. Of course, it’s a good idea to only
    use this during the time that we are actually working on the hosts in question.
    This only works if the **Pause operations for suppressed problems** checkbox is
    ticked on the action, though.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of this recipe, we’ve created a recurring maintenance period (with
    data collection) for the entire year of 2023\. Let’s say the organization we’re
    working for has a lot of Linux hosts that need to be patched weekly. We set up
    the maintenance period to recur weekly every Tuesday between 22:00 and 04:00.
  prefs: []
  type: TYPE_NORMAL
- en: Now keep in mind that after December 31, 2023, Zabbix will stop this maintenance
    period as it won’t be active any longer. We have two time/date values to bear
    in mind when setting up scheduled maintenance. The **Active since**/**Active till**
    time/date value of the maintenance period and the **Periods** time/date value
    of the maintenance period. This allows us to create more flexible periods, along
    with recurring ones as we just did.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that this maintenance period is `nodata` trigger function is also
    affected by maintenance and it won’t fire in both situations.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up your Zabbix setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before working on any Zabbix setup, it is vital to make a backup of everything
    important. In this recipe, we will go through some of the most important steps
    you should always take before doing maintenance on your Zabbix setup.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need our Zabbix server, for which I’ll use `lar-book-rocky`.
    Make sure to get the CLI to the server ready, as this whole recipe will use the
    Linux CLI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by logging in to our Zabbix server via the Linux CLI and create
    some new directories that we are going to use for our Zabbix backups. Preferably,
    this directory would be on another partition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It’s important to back up all of our Zabbix configuration data, which is located
    at **/etc/zabbix/**. We can manually copy the data from our current folder to
    our new backup folder by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s do the same for our **nginx** configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Please note that if you are using Apache, your web configuration location might
    be different. Adjust your command accordingly. For Red Hat-based systems it’s
    usually **/etc/httpd** and for Debian-based systems, **/etc/apache2**.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s also important to keep our Zabbix PHP files and binaries backed up. We
    can do that using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, let’s make sure to also back up the Zabbix files in **/usr/lib**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We could also create a cronjob to automatically compress and back up these
    files for us every day at **00:00**. Simply issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And add the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These are all of the most important files we need to back up from our Zabbix
    stack. Let’s move on to our database. We could now additionally use a rotation
    tool such as **logrotate** to manage our files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Backing up our database is quite easy. We can simply use the built-in tools
    provided by MySQL and PostgreSQL. Issue the following command for your respective
    database (make sure to fill in the right username, database name, and password):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For MySQL databases:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For PostgreSQL databases:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure to add the right location, as the database dump will be quite large
    if the database itself is large. Preferably, dump to another disk/partition or
    even better, another machine. As such, **/opt/** might not be the best location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can also do this with a cronjob by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then for MySQL, add the following line where **-u** is the username, **-p**
    is the password, and the database name is **zabbix**. This is the command for
    MySQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to back up a PostgreSQL database with a cronjob, we will need to
    create a file in our user’s home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We add the following to this file, where **zabbixuser** is the username and
    **zabbixdb** is the database name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we can add a cronjob for PostgreSQL as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also add a cronjob to only keep a certain number of days’ worth of backups.
    Issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add the following line, where **+60** is the number of days you want to
    keep backups for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That concludes our demonstration of backing up our Zabbix components the easy
    way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For MySQL databases, there are also tools such as ExtraBackup, and for Postgres
    we could use PGBarman. It’s never a bad idea to look into tools such as these
    to create backups for your system, but the built-in examples provided here can
    prove to be just as useful.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Zabbix setup consists of several components. We have the Zabbix frontend,
    Zabbix server, and Zabbix database. These components in this setup require different
    pieces of software to run on, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Zabbix key components setup diagram](img/B19803_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Zabbix key components setup diagram
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the preceding diagram, we can see that our Zabbix frontend runs
    on a web engine such as NGINX or Apache. We also need PHP to run our Zabbix web
    pages. This means that we have to back up two components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The web engine: NGINX, Apache, or another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Zabbix server is the application designed by Zabbix, so we only need to
    back up one thing here: the **Zabbix server** **config files**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then last, but definitely not least, we need to make a backup of our database.
    The most common databases used are MySQL and PostgreSQL, so we only need to do
    one thing for this: **create a dump of the** **Zabbix database**.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backing up your Zabbix setup like this is one thing, but of course, it’s not
    everything. Make sure you take the correct backups of your Linux system using
    snapshots and other technologies.
  prefs: []
  type: TYPE_NORMAL
- en: When you follow standard backup implementations, you should be prepared for
    any unforeseen circumstances with your Zabbix setup.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading the Zabbix backend from older PHP versions to PHP 8.2 or higher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RHEL7, Ubuntu 20.04, and Debian 9 (Stretch) are no longer supported by Zabbix,
    thus our upgrade recipe no longer includes any information about the upgrade path
    from PHP versions before 7.2 to version 8.2 or higher. Newer Linux versions already
    ship with PHP8.0 or higher, which means that when we are upgrading a Zabbix setup
    from Zabbix version 6 to Zabbix 7, we can upgrade immediately.
  prefs: []
  type: TYPE_NORMAL
- en: The PHP requirement for Zabbix 7 is different than it was for Zabbix 6, meaning
    that if we are running PHP 7.2, we actually have a mandatory upgrade to do before
    we can run the latest Zabbix 7 release. I also like to work in a *future-proofing*
    kind of way, so in this recipe, we will go over how to upgrade PHP 7.2 to 8.2
    which is the latest supported version on RHEL8-based systems at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need our server installed with a RHEL8-based system,
    which will be running Zabbix server 6 with PHP version 7.2.
  prefs: []
  type: TYPE_NORMAL
- en: Another possibility is that you have a server running a Debian-based distribution
    such as Ubuntu 20.04, Debian 11, or a newer version of those Linux distributions.
    These include PHP version 7.2 or higher by default.
  prefs: []
  type: TYPE_NORMAL
- en: I will refer to both possible servers as `lar-book-zbx6` throughout this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, make sure to take backups of your system and read the release notes
    for the new version you’re installing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is split into two different sections, one for RHEL8-based systems
    and another for Ubuntu systems. We will start by going through the steps for RHEL8.
  prefs: []
  type: TYPE_NORMAL
- en: RHEL8-based systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are already running PHP version 7.2 on a RHEL8-based system, the upgrade
    process is a bit simpler. Let’s check out how we can upgrade our `lar-book-zbx6`
    server in this scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, always verify what PHP version we are running with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the version is older than 8.2, we can continue with the next step. We’ll
    execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will show us something like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – RHEL8 DNF module list for PHP](img/B19803_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – RHEL8 DNF module list for PHP
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, on RHEL8, the latest stable PHP 8.3 version is not included in
    the DNF modules from AppStream. This means we will have to find an alternative
    route for RHEL8-based systems. If you want to install PHP 8.3 or higher, continue
    to *step 9*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since PHP 8.2 is included in the AppStream list, reset your already available
    PHP modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to answer with **Y**. Then we will enable the latest PHP version
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Answer with **Y** again to enable PHP 8.2 and then we can upgrade our PHP version
    by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Answer **Y** again and your PHP version will now be running the latest PHP 8.2
    version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we cannot use the **dnf module enable** method to reach the version you want
    to install, we are going to have to rely on different means of getting PHP, the
    most popular route being the REMI repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure your system is up to date with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'REMI depends on the EPEL repository, so we will have to add that first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After installing **epel-release**, make sure to exclude Zabbix from it. This
    ensures that Zabbix is only downloaded and updated from the official Zabbix repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '.Then we install the REMI repository with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reset the PHP modules and enable the REMI PHP 8.3 version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter **Y** or **Yes** everywhere during the installation procedure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, verify whether the upgrade was successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to restart NGINX (or Apache) and **php-fpm**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These steps have been tested on a Rocky Linux RHEL system, but they should work
    with any RHEL8-based system, be it in Stream or when it’s a full rebuild as with
    Alma Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Consider upgrading to RHEL9-based systems for further support for newer versions
    of the PHP packages.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s upgrade to the latest version of PHP available on our Ubuntu system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, start by adding the PPA repository to our host with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now update the repositories with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On some installations, the key for the repository might not be available, in
    which case we might see an error reading **Key is not available**. We can fix
    this with the following command, where **PUB_KEY_HERE** is the key shown in the
    error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can install PHP version 8.3 with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That’s it, the version of PHP should now be the one we want. Check the version
    of PHP with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because Zabbix 7 requires us to install PHP version 8.0 or higher, we need to
    upgrade the PHP version if we are still using PHP 7.2 for our Zabbix 6 install.
    It’s a different requirement than for Zabbix 6, making the upgrade process fairly
    long in some cases. If you are still running RHEL7, Ubuntu 20.04, or Debian 9
    (Stretch), then you will need to upgrade your Linux system first as well. Zabbix
    has dropped support for these older Linux versions in favor of installation simplicity
    in terms of package management, security, and support.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is still possible to run Zabbix on older Linux versions by building
    from sources, but it is not recommended.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we did an upgrade from PHP 7.2 to PHP 8.2 or 8.3, which are
    some of the latest supported stable versions at the time of writing. Doing this
    upgrade will not break our current Zabbix server installation. As mentioned, this
    is a mandatory upgrade as PHP versions below 8.0 are too old to run Zabbix 7\.
    Even if the upgrade was optional, it is always good to consider running the latest
    stable release of software to make sure that we are ready for the future.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have upgraded PHP, we are ready to move on to upgrading the Zabbix
    database engine.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading a Zabbix database from older MariaDB versions to MariaDB 11.4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our Zabbix 7 installation, we are going to need MariaDB 10.5 or a newer
    supported version, so, it is a good idea to keep your database version up to date.
    MariaDB regularly makes improvements to how it handles certain aspects of performance.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe details how to upgrade MariaDB to the latest stable LTS version,
    which is MariaDB 11.4 at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need our server which we called `lar-book-zbx6`. At
    this point, the server is running a RHEL8-based distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to have a server running a Debian-based distribution such
    as Ubuntu 22.04, Debian 12, or a newer version of those Linux distributions. We
    will be upgrading the MariaDB instance on this server to version 11.4.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve followed the *Upgrading the Zabbix backend from older PHP versions
    to PHP 8.2 or higher* recipe, your server will now be running PHP version 8.2
    or higher. If not, it’s a good idea to follow that recipe first.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure to take backups of your system and read the release notes for
    the new version you’re installing. We covered this in the *Backing up your Zabbix*
    *setup* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First things first, let’s log in to our Linux host CLI to check out our versions.
    Issue the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Zabbix server:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For MariaDB:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After verifying our versions match the versions mentioned in the *Getting ready*
    section of this recipe, let’s move on to upgrade our version of MariaDB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RHEL-based systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On our RHEL-based server, the first thing we’ll do after checking the versions
    is to stop our Zabbix environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now set up a repository file for MariaDB with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will add the following code to this new file. Make sure to add the correct
    architecture after **baseurl** if using anything other than **amd64**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively and probably the best method is to use the MariaDB setup script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now upgrade your MariaDB server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the MariaDB service with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That’s it, MariaDB should now be upgraded to the intended version. Check the
    version again with the following command to make sure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ubuntu systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On our Ubuntu server, the first thing we’ll do after checking the versions
    is to stop our Zabbix server environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check for the MariaDB repository file at **/etc/apt/sources.list.d/mariadb.list**.
    To check whether it is on version 11.4, edit it with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The file should look like the following code block. If it doesn’t look right,
    edit it to match. Make sure to add the correct architecture on the **deb** lines
    if using anything other than **amd64**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, we can use the MariaDB repository setup script to update to
    the right repository. Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to remove our old MariaDB packages with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now upgrade the MariaDB server version with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart MariaDB with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then issue the **upgrade** command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now start Zabbix back up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That’s it, MariaDB should now be upgraded to the correct version. Check the
    version again with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, while it might not always be a requirement, it is a smart idea to upgrade
    your database version regularly. New versions of your database engine might include
    improvements to stability and performance, both of which could improve your Zabbix
    server greatly.
  prefs: []
  type: TYPE_NORMAL
- en: Do keep the release notes and bug reports on your radar though. MariaDB 11.4
    is, at the time of writing, the newest LTS version on the market. You might want
    to stay behind one or two releases as these are still supported and have been
    running in production for a while already. After all, nobody likes unforeseen
    issues such as bugs.
  prefs: []
  type: TYPE_NORMAL
- en: For Zabbix 7, we do need to install at least MariaDB 10.5 or a newer supported
    version though, so keep that in mind.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you really cannot upgrade to MariaDB version 10.5 or, if you are running
    another database, the supported version for that one, then there’s a new Zabbix
    feature. Zabbix 7 allows us to run unsupported database versions. When we edit
    the Zabbix server configuration files at `/etc/zabbix/zabbix_server.conf`, we
    can add the following parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This will allow you to run an older or newer version of your database that
    is not officially tested and supported by Zabbix yet, but keep in mind that it
    is not recommended to do so. Check out the current Zabbix LTS installation requirements
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/current/en/manual/installation/requirements](https://www.zabbix.com/documentation/current/en/manual/installation/requirements)'
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading your Zabbix setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we’ve seen throughout the book already, Zabbix 7 offers a great deal of cool
    new features. Zabbix 7.0 is a **Long-Term Support** (**LTS**) release, so just
    like 5.0 and 6.0, you will receive long-term support for it. Let’s see how we
    can upgrade a Zabbix server from version 6.0 to version 7.0.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need our server called `lar-book-zbx6`. At this point,
    your server will be running either a RHEL8-based Linux distribution or a Debian-based
    distribution like Ubuntu 22.04, Debian 12, or newer versions of those distributions.
  prefs: []
  type: TYPE_NORMAL
- en: If you followed the *Upgrading the Zabbix backend from older PHP versions to
    PHP 8.2 or higher* recipe, your server will now be running PHP version 8.2 or
    higher. If not, it’s a good option to follow that recipe first.
  prefs: []
  type: TYPE_NORMAL
- en: If you followed the *Upgrading a Zabbix database from older MariaDB versions
    to MariaDB 11.4* recipe, it will now be running MariaDB version 11.4\. If not,
    it’s wise to follow that recipe first.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure to take backups of your system and read the release notes for
    the new version you’re installing. We covered this in the *Backing up your Zabbix*
    *setup* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First things first, let’s log in to our Linux host CLI to check out our software
    versions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Issue the following commands to check the respective software versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Zabbix server:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For MariaDB:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After verifying our versions match the versions mentioned in the *Getting ready*
    section of this recipe, let’s move on to upgrade our Zabbix server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RHEL-based systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we will start with upgrading the Zabbix server on a RHEL-based system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s stop our Zabbix server components with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On our server, let’s issue the following command to add the new Zabbix 7.0
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to clean the repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now upgrade the Zabbix setup with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Additionally, install the Zabbix NGINX configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the Zabbix components with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we check if the server is running, it should say **Active** (**running**)
    when we issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If not, we check the logs with the following command, so we can see what is
    happening:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the log file for any notable errors and if you find any, fix them before
    continuing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we start the server again, this error should be gone and the Zabbix server
    should keep running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now restart the Zabbix components with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now everything should be working as expected and we should see the new Zabbix
    7 frontend, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 11.7 – Zabbix 7 frontend after the up\uFEFFgrade on RHEL](img/B19803_11_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Zabbix 7 frontend after the upgrade on RHEL
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, let’s stop our Zabbix server components with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the new repository for Zabbix 7 on Ubuntu with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Always check **zabbix.com/download** to get the right repository for your systems.
    In the example, I used the Ubuntu repository. Switch this out for the right repository
    for your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the repository information with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now upgrade the Zabbix server components with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure to not overwrite your Zabbix server configuration. If you do overwrite
    your configuration file, you can restore it from the backup taken in the *Backup
    up your Zabbix* *setup* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then install the new Zabbix NGINX configuration with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the Zabbix server components with the following command and you should
    be done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We check the logs with the following command so we can see what is happening:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the log file for any notable errors and if you find any, fix them before
    continuing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we start the server again, this error should be gone and the Zabbix server
    should keep running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should conclude the upgrade process, and if we go to the frontend, we
    should see the new Zabbix 7 frontend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 11.8 \uFEFF\uFEFF– Zabbix \uFEFF7 frontend after the U\uFEFFbuntu\
    \ upgrade](img/B19803_11_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Zabbix 7 frontend after the Ubuntu upgrade
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Upgrading Zabbix can be an easy task when we are running the latest version
    of Linux. When we are running older versions of software though, we might run
    into some issues.
  prefs: []
  type: TYPE_NORMAL
- en: The recipe we’ve just followed shows us the upgrade process for a Zabbix 6 instance
    resulting in a setup running Zabbix 7, along with the most common issues we might
    run into.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: While upgrading, make sure to keep an eye on your **zabbix_server.log** file,
    as this file will tell you if something has gone wrong during the upgrade process.
  prefs: []
  type: TYPE_NORMAL
- en: We made sure to upgrade PHP to a version higher than 8.0 as this was the requirement
    for Zabbix 7, making the upgrade process from Zabbix 6 a bit more complicated
    if we ran an older PHP version. For the database, Zabbix kept the same requirements
    between Zabbix 6 and Zabbix 7, requiring MariaDB 10.5 or a newer supported version
    for your Zabbix setup.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve upgraded all the components, you should be ready to work with
    Zabbix 7 and your setup will be future-proof for a while – of course, until Zabbix
    8 comes out, when we might see some new requirements come along.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure to check out the Zabbix documentation for the versions you are upgrading
    from and to. Zabbix always includes detailed descriptions of the requirements
    and processes to make it as easy as possible for you to upgrade. Check out the
    right documentation for your version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/current/en/manual/installation/upgrade](https://www.zabbix.com/documentation/current/en/manual/installation/upgrade)'
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining Zabbix performance over time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s important to make sure that your Zabbix setup keeps performing well over
    time. There are several key components that are important to keep your Zabbix
    setup performing optimally. Let’s see how to work on some of these components
    and keep your Zabbix setup running smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All we are going to need for this recipe is a Zabbix 7 server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will go through three of the main problems people face whilst maintaining
    Zabbix server performance. First things first, let’s look at the Zabbix processes
    and how to edit them.
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix processes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A regular problem people face is a Zabbix process being too busy. Let’s log
    in to our Zabbix frontend and check out how this problem might look.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s start by logging in to our Zabbix server frontend and check out
    some messages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we navigate to **Monitoring** | **Dashboard** and then select the default
    dashboard **Global view**, we might see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Zabbix problem from our Zabbix server, discoverer processes
    75% busy](img/11.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Zabbix problem from our Zabbix server, discoverer processes 75%
    busy
  prefs: []
  type: TYPE_NORMAL
- en: Then we navigate to **Monitoring** | **Hosts** and click on **Latest data**
    for the Zabbix server host (which, in my case, is called **lar-book-rocky**).
    This will take us to the latest data for our host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the filters, type **discovery** in the **Name** field, then click on **Graph**
    for the discovery worker item. This will show you the following graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Zabbix server discoverer graph, Utilization of discoverer
    data collector in %](img/B19803_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Zabbix server discoverer graph, Utilization of discoverer data
    collector in %
  prefs: []
  type: TYPE_NORMAL
- en: This graph is at 100% almost all the time, which explains why we see the problem
    shown in *Figure 11**.9* on our dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s log in to the Linux CLI of our Zabbix server to edit this process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the following file on your Zabbix server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if we want to give our Zabbix server’s **discoverer** process more room,
    we need to edit the correct parameter. Scroll down until you see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 11.11 – Zabbix server conf\uFEFFiguration file, StartDiscoverers default](img/B19803_11_11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Zabbix server configuration file, StartDiscoverers default
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add a new line under this and add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If your file now looks like the following screenshot, you can save and exit
    the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Zabbix server configuration file, StartDiscoverers 2](img/B19803_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Zabbix server configuration file, StartDiscoverers 2
  prefs: []
  type: TYPE_NORMAL
- en: 'For the changes to take effect, we will need to restart the Zabbix server with
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now if we go back to our Zabbix frontend, we should still be at our graph where
    we can see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 11.13 – Zab\uFEFFbix server discoverer graph](img/B19803_11_13.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Zabbix server discoverer graph
  prefs: []
  type: TYPE_NORMAL
- en: The utilization of our discoverer process has gone down, which means our utilization
    problem won’t show up anymore. That’s how we edit Zabbix server processes.
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix housekeeper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another very common problem people face is the Zabbix housekeeper process being
    too busy. Let’s log in to our Zabbix frontend and check out the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we navigate to **Monitoring** | **Dashboard** and then select the default
    dashboard **Global view**, we might see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – A problem with Zabbix housekeeper](img/11.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – A problem with Zabbix housekeeper
  prefs: []
  type: TYPE_NORMAL
- en: Similar to editing any Zabbix process, we can also edit the Zabbix housekeeper
    process. Let’s log in to the Linux CLI of our Zabbix server to edit our process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s edit the following file on our Zabbix server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if we want to edit this process, we need to edit the correct parameters.
    Scroll down until you see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.15 – Zabbix configuration file, HousekeepingFrequency 1](img/B19803_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – Zabbix configuration file, HousekeepingFrequency 1
  prefs: []
  type: TYPE_NORMAL
- en: 'This is our first housekeeper parameter. Let’s edit this parameter by adding
    the following line under this block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Making the interval longer is not going to solve your issue; at most, you are
    delaying the inevitable. It is only recommended to change this setting until the
    next maintenance window, and it should be avoided as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now scroll down until you see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.16 – Zabbix configuration file, HousekeepingDelete 5000](img/B19803_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – Zabbix configuration file, HousekeepingDelete 5000
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot shows our second housekeeper parameter. Let’s edit
    this parameter by adding the following line under this code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the changes to take effect, we need to restart the Zabbix server with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tuning a MySQL database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s see how we can tune a MySQL database with ease. First off, let’s go to
    the following link in our browser: [https://github.com/major/MySQLTuner-perl](https://github.com/major/MySQLTuner-perl).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This link brings us to an open source GitHub project started by *Major Hayden*.
    Be sure to follow the repository and do all you can to help out. Let’s download
    the script from the GitHub repository or simply use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can execute this script with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will bring us to a prompt for our MySQL database credentials. Fill them
    out and continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.17 – MySQL tuner script execution](img/B19803_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.17 – MySQL tuner script execution
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the script will output a lot of information that you will need to read
    carefully, but the most important part is at the end – everything after **Variables**
    **to adjust**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.18 – MySQL tuner script output](img/B19803_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.18 – MySQL tuner script output
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '*DO NOT* simply copy over the output from this script. The script is simply
    giving us an indicator of what might be tuned in our MySQL settings. Always look
    up the settings suggested and read about the best practices for those settings.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can edit these variables in the MySQL **my.cnf** file. In my case, I edit
    it with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you simply edit or add the variables that are suggested in the script
    and then restart your MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve just done three of the main performance tweaks we can do for a Zabbix
    server, but there’s a lot more to do. Let’s take a look at what we’ve just edited,
    consider why we’ve edited it, and find out whether it’s really that simple.
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix processes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zabbix processes are a big part of your Zabbix server setup and must be edited
    with care. In this recipe, we’ve only just edited the discoverer process on a
    small installation. This problem was easy as the server had more than enough resources
    to account for another process running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if we look at the following diagram, we can see the situation as it was
    before we added a new discoverer process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Zabbix server single-process setup diagram](img/B19803_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.19 – Zabbix server single-process setup diagram
  prefs: []
  type: TYPE_NORMAL
- en: We can see our **Linux host** running our **Zabbix server** application and
    we can see our **LLDProcessors 1** process discovering **LLD rule 1**. **LLD rule
    2** and **LLD rule 3** are queueing up as one LLDProcessor subprocess can only
    handle one rule at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we’ve seen that this is apparently too heavy for our system, we have added
    another LLDProcessor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.20 – Zabbix server multiple-process setup diagram](img/B19803_11_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.20 – Zabbix server multiple-process setup diagram
  prefs: []
  type: TYPE_NORMAL
- en: Our new setup will balance the load to a certain extent. It’s only possible
    for a discovery rule to be handled by a single discoverer process. This means
    that if we have multiple discovery rules, we can add discoverers like this to
    make sure there are enough resources available per discovery rule. It works the
    same for the other processes – more processes mean better distributions of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are several things to be careful of here. First of all, not all
    issues can be solved by simply throwing more resources at them. Some Zabbix setups
    are configured poorly, where there’s something in the configuration making our
    processes unnecessarily busy. If we deal with the poor configuration aspect, we
    can take away the high load, thus we need fewer processes.
  prefs: []
  type: TYPE_NORMAL
- en: The second thing I’d like to stress is that we can keep adding processes to
    our Zabbix server configuration – within limits. Before we reach those limits
    though, you are definitely going to reach the roof of what our Linux host hardware
    is capable of. Make sure you have enough RAM and CPU power to actually run all
    these processes or use Zabbix proxies for offloading. Also keep in mind that adding
    more processes might require additional database tuning, for example allowing
    more connections to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, keep in mind that changing the Zabbix server configuration
    requires a restart of the `zabbix-server` process. On large installations, this
    can take a long time. The Zabbix server might have to do a lot of database writes
    (for example, of the trend data) to get the `zabbix-server` process to shut down.
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix housekeeper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now for Zabbix housekeeper, which is a very important process for Zabbix administrators
    who haven’t set up MySQL partitioning or PostgreSQL TimescaleDB partitioning yet.
    The Zabbix housekeeper process connects to our database and then drops information
    line by line that has *expired*. You might think, how do you mean expired? Well,
    we can set limits in the Zabbix server for how long an item should be kept in
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at **Administration** | **Housekeeping**, part of what we will see
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.21 – Zabbix server history and trends housekeeping setup](img/B19803_11_21.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.21 – Zabbix server history and trends housekeeping setup
  prefs: []
  type: TYPE_NORMAL
- en: 'These are our global **History** and **Trends** housekeeping parameters. This
    defines how long an item’s data should be kept in our database. If we look at
    an item on a template or host, we can also see these parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.22 – Zabbix item hi\uFEFFstory and trends housekeeping parameters](img/B19803_11_22.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.22 – Zabbix item history and trends housekeeping parameters
  prefs: []
  type: TYPE_NORMAL
- en: These settings override the global settings so you can tweak the housekeeper
    further. That’s how the housekeeper keeps your database in check.
  prefs: []
  type: TYPE_NORMAL
- en: But now, let’s look at the tweaks we made in our Zabbix server configuration
    file, the first of which is `HousekeepingFrequency`. Housekeeping frequency is
    how often the housekeeper process is started. We’ve lowered this from every hour
    to every two hours. Now you might think that’s worse, but it doesn’t have to be.
    A lot of the time, we see that housekeeping is not done after one hour and then
    it just keeps going on and on.
  prefs: []
  type: TYPE_NORMAL
- en: We also changed the `MaxHousekeeperDelete` parameter, which is something completely
    different. This determines how many database rows our Zabbix housekeeper is allowed
    to delete in each run. The default settings determined that every hour, we can
    delete 5,000 database rows. With our new settings, we can now delete 20,000 database
    rows every two hours. Each row will basically just be a single metric we are allowed
    to delete.
  prefs: []
  type: TYPE_NORMAL
- en: How does this change anything at all? Well, it might not. It completely depends
    on your setup. Tweaking the Zabbix housekeeper is different for every setup, and
    you will have to determine your optimum settings for yourself. Try to balance
    what you see in your graphs with the two settings we’ve discussed here to see
    how well you can optimize it.
  prefs: []
  type: TYPE_NORMAL
- en: However, at one point, your Zabbix setup might grow big enough and Zabbix housekeeping
    won’t be able to keep up. This is when you’ll need to look at MySQL partitioning
    or PostgreSQL TimescaleDB. There’s no predefined point where the Zabbix housekeeper
    won’t be able to keep up, so it is smarter to just start with MySQL partitioning
    or PostgreSQL TimescaleDB right from the start. After all, any setup might grow
    larger than expected, right? More on this subject is explained in [*Chapter 12*](B19803_12.xhtml#_idTextAnchor2180)
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Tuning a MySQL database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now for tuning your MySQL database with the `mysqltuner.pl` script. This script
    does a lot in the background, but we can summarize it as follows: it looks at
    what the current utilization of your MySQL database is, and then outputs what
    it thinks the correct tuning variables would be.'
  prefs: []
  type: TYPE_NORMAL
- en: Do not take the script output as a given, as with Zabbix housekeeping, there
    is no way to give you a definitive setup for your database. Databases are simply
    more complicated than just doing some tweaks and being done with it.
  prefs: []
  type: TYPE_NORMAL
- en: The script will definitely help you tweak your MySQL database to an extent,
    especially for smaller setups. But make sure to extend your knowledge by reading
    blogs, guides, and books about databases regularly.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We went over how to tune a MySQL database, but we didn’t go over how to tune
    a PostgreSQL instance. There’s a wide variety of options out there to do this,
    so for more on that I recommend checking out the PostgreSQL wiki at [https://wiki.postgresql.org/wiki/Performance_Optimization](https://wiki.postgresql.org/wiki/Performance_Optimization).
    There are different varieties and different preferences at play here. Make sure
    to check them all out well and pick the one that works the best for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s also a new addition in Zabbix 7.0, which is specifically for the following
    three pollers:'
  prefs: []
  type: TYPE_NORMAL
- en: Agent poller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP agent poller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SNMP poller (for walk[OID] and get[OID] items)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These processes now execute checks asynchronously. What that means is that they
    can execute multiple (item) checks at the same time. In older versions of Zabbix,
    these pollers could only execute a single check at the time.
  prefs: []
  type: TYPE_NORMAL
- en: It’s still possible to add multiple of these processes with, for example, **StartAgentPollers**,
    but it now functions differently. This will execute a maximum of 1,000 checks
    per poller, which is configurable with the **MaxConcurrentChecksPerPoller** parameter.
  prefs: []
  type: TYPE_NORMAL
