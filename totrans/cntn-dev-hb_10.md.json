["```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mypod\nspec:\n  containers:\n  - name: mypod\n    image: myregistry/myimage\n    volumeMounts:\n    - name: config\n      mountPath: \"/app/config/appsettings.json\"\n      subPath: appsettings.json\n      readOnly: true\n  volumes:\n  - name: config\n    configMap:\n      name: appsettings\n```", "```\n...\nmetadata:\n  annotations:\n    environment: development\n    cluster: cluster1\n    location: Berlin\n...\n```", "```\n...\n  containers:\n  ...\n    volumeMounts:\n        - name: podinfo\n          mountPath: /etc/pod-annotations\n  volumes:\n    - name: podinfo\n      downwardAPI:\n        items:\n          - path: \"annotations\"\n            fieldRef:\n              fieldPath: metadata.annotations\n...\n```", "```\n   volumeMounts:\n   - name: mysecret\n     mountPath: \"/etc/settings/mysecretfile\"\n     subPath: mysecretfile\n```", "```\n        apiVersion: v1\n        data:\n          POSTGRES_PASSWORD: Y2hhbmdlbWU=\n        kind: Secret\n        metadata:\n          name: dbcredentials\n        ```", "```\n        $ cat init-demo.sh\n        #!/bin/bash\n        set -e\n        psql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" <<-EOSQL\n            CREATE USER demo with PASSWORD 'd3m0' ;\n            CREATE DATABASE demo owner demo;\n            GRANT ALL PRIVILEGES ON DATABASE demo TO demo;\n            \\connect demo;\n            CREATE TABLE IF NOT EXISTS hits\n            (\n              hitid serial,\n              serverip varchar(15) NOT NULL,\n              clientip varchar(15) NOT NULL,\n              date timestamp without time zone,\n              PRIMARY KEY (hitid)\n            );\n            ALTER TABLE hits OWNER TO demo;\n        initdb.secret.yaml Secret manifest:\n\n        ```", "```\n\n        ```", "```\n        $ kubectl apply -f dbcredentials.secret.yaml\n        $ kubectl get secret dbcredentials \\\n        -ojsonpath=\"{.data.POSTGRES_PASSWORD}\"|base64 -d\n        StatefulSet manifest was modified:\n\n        ```", "```\n\n        The full manifest file can be found in the `Chapter10/db.statefulset.yaml` file.\n        ```", "```\n        $ kubectl create -f dbcredentials.secret.yaml \\\n        -f initdb.secret.yaml\n        secret/dbcredentials created\n        secret/initdb created\n        $ kubectl create -f db.statefulset.yaml\n        statefulset.apps/db created\n        $ kubectl create -f db.service.yaml\n        service/db created\n        ```", "```\n        $ kubectl exec -ti db-0 -- psql -U postgres\n        psql (15.3)\n        Type \"help\" for help.\n        postgres=# \\du\n                                           List of roles\n         Role name |                         Attributes\n        | Member of\n        -----------+------------------------------------------------------------+-----------\n         demo      |\n        | {}\n         postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}\n        postgres=# \\q\n        POSTGRES_PASSWORD variable, and now it’s taken from the Secret we created.We also included `initdb-secre`t as a volume, and it’s mounted in the `/docker-entrypoint-initdb.d` directory. Notice that we didn’t use `subPath` because this directory is empty. You can change the content of the Secret and it will be synced inside the containers, but this will not change the authentication values in the database because it is an initialization script. You can modify it to enforce the change of the password via SQL.\n        ```", "```\n        $ kubectl get pvc\n        NAME                STATUS   VOLUME\n        CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n        postgresdata-db-0   Bound    pvc-4999f00b-deb3-4cec-97a0-3a289c4457d9   1Gi        RWO            hostpath\n        168m\n        $ kubectl get pv pvc-4999f00b-deb3-4cec-97a0-3a289c4457d9\n        NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM      STORAGECLASS   REASON   AGE\n        pvc-4999f00b-deb3-4cec-97a03a289c4457d9   1Gi        RWO  Delete     Bound    default/postgresdata-db-0   hostpath                168m\n        ```", "```\n        $ kubectl get sc\n        NAME                 PROVISIONER          RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\n        appcredentials Secret. This method does not generate a YAML manifest, which may be a problem because you will need to store your passwords somewhere. If you need to store all your manifest in your code repository, which is always recommended, you must always encrypt your Secret manifests:\n\n        ```", "```\n\n        The values for these variables must be the ones used in the initialization script.\n        ```", "```\n        apiVersion: apps/v1\n        kind: Deployment\n        metadata:\n          name: app\n        ...\n              containers:\n              - name: app\n                image: docker.io/frjaraur/simplestapp:1.0\n                ports:\n                - containerPort: 3000\n                env:\n                - name: dbhost\n                  valueFrom:\n                    secretKeyRef:\n                      name: appcredentials\n                      key: dbhost\n                - name: dbname\n                  valueFrom:\n                    secretKeyRef:\n                      name: appcredentials\n                      key: dbname\n        ...\n        ```", "```\n        $ kubectl create -f app.deployment.yaml\n        -f app.service.yaml\n        deployment.apps/app created\n        service/app created\n        ```", "```\n        $ kubectl exec -ti app-5f9797d755-2bgtt – env\n        ...\n        dbhost=db\n        dbname=demo\n        dbuser=demo\n        dbpasswd=d3m0\n        ...\n        $ kubectl get pods\n        NAME                   READY   STATUS    RESTARTS   AGE\n        app-5f9797d755-2bgtt   1/1     Running   0          100s\n        app-5f9797d755-gdpw7   1/1     Running   0          100s\n        app-5f9797d755-rzkqz   1/1     Running   0          100s\n        db-0                   1/1     Running   0          179m\n        ```", "```\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: lb-config\n          labels:\n            component: lb\n            app: simplestlab\n        data:\n          nginx.conf: |\n            user  nginx;\n            worker_processes  auto;\n            error_log  /tmp/nginx/error.log warn;\n            pid        /tmp/nginx/nginx.pid;\n            events {\n              worker_connections  1024;\n            }\n            http {\n              server {\n                listen 8080; # specify a port higher than 1024 if running as non-root user\n                location /healthz {\n                    add_header Content-Type text/plain;\n                    return 200 'OK';\n                }\n                location / {\n                  proxy_pass http://app:3000;\n                }\n              }\n            }\n        ```", "```\n        $ kubectl create -f lb.daemonset.yaml \\\n        -f lb.configmap.yaml -f  lb.service.yaml\n        daemonset.apps/lb created\n        configmap/lb-config created\n        service/lb create\n        ```", "```\n        $ kubectl get pods\n        NAME                   READY   STATUS    RESTARTS   AGE\n        app-5f9797d755-2bgtt   1/1     Running   0          5m52s\n        app-5f9797d755-gdpw7   1/1     Running   0          5m52s\n        app-5f9797d755-rzkqz   1/1     Running   0          5m52s\n        db-0                   1/1     Running   0          3h4m\n        lb-zcm6q               1/1     Running   0          2m2s\n        $ kubectl exec lb-zcm6q -- cat /etc/nginx/nginx.conf\n        user  nginx;\n        worker_processes  auto;\n        ...    location / {\n              proxy_pass http://app:3000;\n            }\n          }\n        }\n        $\n        ```"]