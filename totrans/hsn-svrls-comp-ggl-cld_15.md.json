["```\ngsutil mb gs://$GOOGLE_CLOUD_PROJECT-upload\n```", "```\ngsutil mb gs://$GOOGLE_CLOUD_PROJECT-processed\n```", "```\ngsutil notification create -t new-doc -f json -e OBJECT_FINALIZE gs://$GOOGLE_CLOUD_PROJECT-upload\n```", "```\n...\n\"scripts\": {\n \"start\": \"node index.js\",\n \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n },\n...\n```", "```\nnpm install express\nnpm install body-parser\nnpm install child_process\nnpm install @google-cloud/storage\n```", "```\nconst {promisify} = require('util');\nconst {Storage} = require('@google-cloud/storage');\nconst exec = promisify(require('child_process').exec);\nconst storage = new Storage();\n```", "```\napp.post('/', async (req, res) => {\n try {\n const file = decodeBase64Json(req.body.message.data);\n await downloadFile(file.bucket, file.name);\n const pdfFileName = await convertFile(file.name);\n await uploadFile(process.env.PDF_BUCKET, pdfFileName);\n await deleteFile(file.bucket, file.name);\n }\n catch (ex) {\n console.log(`Error: ${ex}`);\n }\n res.set('Content-Type', 'text/plain');\n res.send('\\n\\nOK\\n\\n');\n})\n```", "```\nasync function downloadFile(bucketName, fileName) {\n const options = {destination: `/tmp/${fileName}`};\n await storage.bucket(bucketName).file(fileName).download(options);\n}\n```", "```\nasync function convertFile(fileName) {\n const cmd = 'libreoffice --headless --convert-to pdf --outdir /tmp ' +\n `\"/tmp/${fileName}\"`;\n console.log(cmd);\n const { stdout, stderr } = await exec(cmd);\n if (stderr) {\n throw stderr;\n }\n console.log(stdout);\n pdfFileName = fileName.replace(/\\.\\w+$/, '.pdf');\n return pdfFileName;\n}\n```", "```\nasync function deleteFile(bucketName, fileName) {\n await storage.bucket(bucketName).file(fileName).delete();\n}\n```", "```\nasync function uploadFile(bucketName, fileName) {\n await storage.bucket(bucketName).upload(`/tmp/${fileName}`);\n}\n```", "```\nFROM node:12\nRUN apt-get update -y \\\n && apt-get install -y libreoffice \\\n && apt-get clean\nWORKDIR /usr/src/app\nCOPY package.json package*.json ./\nRUN npm install --only=production\nCOPY . .\nCMD [ \"npm\", \"start\" ]\n```", "```\ngcloud builds submit \\\n --tag gcr.io/$GOOGLE_CLOUD_PROJECT/pdf-converter\n```", "```\ngcloud beta run deploy pdf-converter \\\n --image gcr.io/$GOOGLE_CLOUD_PROJECT/pdf-converter \\\n --platform managed \\\n --region us-central1 \\\n --memory=2Gi \\\n --no-allow-unauthenticated \\\n --set-env-vars PDF_BUCKET=$GOOGLE_CLOUD_PROJECT-processed\n```", "```\nSERVICE_URL=$(gcloud beta run services describe pdf-converter --platform managed --region us-central1 --format \"value(status.url)\")\n```", "```\ngcloud iam service-accounts create pubsub-cloud-run-invoker --display-name \"PubSub Cloud Run Invoker\"\n```", "```\ngcloud beta run services add-iam-policy-binding pdf-converter --member=serviceAccount:pubsub-cloud-run-invoker@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com --role=roles/run.invoker --region us-central1\n```", "```\nPROJECT_NUMBER=$(gcloud config get-value project)\n```", "```\ngcloud projects add-iam-policy-binding $GOOGLE_CLOUD_PROJECT --member=serviceAccount:service-$PROJECT_NUMBER@gcp-sa-pubsub.iam.gserviceaccount.com --role=roles/iam.serviceAccountTokenCreator\n```", "```\ngcloud beta pubsub subscriptions create pdf-conv-sub --topic new-doc --push-endpoint=$SERVICE_URL --push-auth-service-account=pubsub-cloud-run-invoker@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com\n```", "```\n{\n  \"message\": {\n    \"attributes\": {\n      \"key\": \"value\"\n    },\n    \"data\": \"V2VsY29tZSB0byBHb29nbGUgQ2xvdWQgU2VydmVybGVzcwo=\",\n    \"messageId\": \"123456789012\"\n  },\n  \"subscription\": \"projects/[PROJECT_ID]/subscriptions/[SUBSCRIPTION_ID]\"\n}\n```", "```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" $SERVICE_URL\n```", "```\ngsutil -m cp gs://spls/gsp644/* gs://$GOOGLE_CLOUD_PROJECT-upload\n```"]