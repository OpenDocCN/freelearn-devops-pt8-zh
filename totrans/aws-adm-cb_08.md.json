["```\n      { \n        \"Version\": \"2012-10-17\", \n        \"Statement\": [ \n            { \n              \"Sid\": \"Stmt1487396837000\", \n              \"Effect\": \"Allow\", \n              \"Action\": [ \n                  \"sts:AssumeRole\" \n              ], \n              \"Resource\": [ \n                  \"arn:aws:iam::<app-acct-number>:role/*\" \n              ] \n            } \n        ] \n      }\n\n```", "```\n      { \n        \"Version\": \"2012-10-17\", \n        \"Statement\": [ \n            { \n              \"Effect\": \"Allow\", \n              \"Principal\": { \n                 \"AWS\": \"arn:aws:iam::<auth-account-number>:\n                    role/CanAssumePowerUser\" \n              }, \n              \"Action\": \"sts:AssumeRole\" \n            } \n        ] \n      }\n\n```", "```\n      { \n        \"Version\": \"2012-10-17\", \n        \"Statement\": [ \n            { \n              \"Effect\": \"Allow\", \n              \"Principal\": { \n                  \"AWS\": \"arn:aws:iam::<auth-account-number>:\n                     role/CanAssumeReadOnly\" \n              }, \n              \"Action\": \"sts:AssumeRole\" \n            }, \n            { \n              \"Effect\": \"Allow\", \n              \"Principal\": { \n                  \"AWS\": \"arn:aws:iam::<auth-account-number>:\n                    role/CanAssumePowerUser\" \n              }, \n              \"Action\": \"sts:AssumeRole\" \n            } \n        ] \n      }\n\n```", "```\n aws acm request-certificate --domain-name <your-domain>\n\n```", "```\nResources: \n  MyCertificate: \n    Type: \"AWS::CertificateManager::Certificate\" \n    Properties: \n      DomainName: <your-domain>\n\n```", "```\n      AWSTemplateFormatVersion: '2010-09-09' \n      Parameters: \n        FullyQualifiedName: \n          Description: The fully qualified name for the directory\n            (e.g. megacorp.com) \n          Type: String \n          AllowedPattern: '^([a-zA-Z0-9]+[\\\\.-])+([a-zA-Z0-9])+$' \n        Password: \n          Description: The password for the directory Administrator \n          Type: String \n          NoEcho: true \n        VpcId: \n          Description: The ID of the VPC to deploy to \n          Type: AWS::EC2::VPC::Id \n        SubnetIds: \n          Description: Subnets where the directory will be deployed to\n            (pick at least 2) \n          Type: List<AWS::EC2::Subnet::Id> \n        DirectorySize: \n          Description: The size of the directory to deploy \n          Type: String \n          AllowedValues:  \n            - Small \n            - Large\n\n```", "```\n      Resources: \n        ExampleDirectory: \n          Type: AWS::DirectoryService::SimpleAD \n          Properties:  \n            Name: !Ref FullyQualifiedName \n            Password: !Ref Password \n            Size: !Ref DirectorySize \n            VpcSettings:  \n              SubnetIds:  \n                - !Select [ 0, Ref: SubnetIds ] \n                - !Select [ 1, Ref: SubnetIds ] \n              VpcId: !Ref VpcId\n\n```", "```\n aws cloudformation create-stack \\ \n --stack-name example-directory \\ \n --template-body file://08-active-directory-as-a-service.yaml \\ \n --parameters \\ \n ParameterKey=FullyQualifiedName,ParameterValue=<fqdn> \\ \n ParameterKey=Password,ParameterValue=<password> \\ \n ParameterKey=VpcId,ParameterValue=<vpd-id> \\ \n \"ParameterKey=SubnetIds,ParameterValue='<subnet-1>,<subnet-2>'\" \\ \n ParameterKey=DirectorySize,ParameterValue=<Small/Large>\n\n```", "```\n aws iam create-group --group-name <group-name>\n\n```", "```\n      { \n          \"Group\": { \n            \"Path\": \"/\", \n            \"GroupId\": \"AGPAIHM2XJ2ELQTNYBFQQ\", \n            \"Arn\": \"arn:aws:iam::067180688831:group/PowerUsers\", \n            \"GroupName\": \"PowerUsers\" \n          } \n      }\n\n```", "```\n aws iam attach-group-policy \\\n --group-name <group-name> \\\n --policy-arn <policy-arn>\n\n```", "```\n aws iam list-policies\n\n```", "```\n arn:aws:iam::aws:policy/PowerUserAccess\n\n```", "```\n aws iam create-user --user-name <new-username>\n\n```", "```\n      { \n        \"User\": { \n            \"UserName\": \"lucille.bluth\", \n            \"Path\": \"/\", \n            \"CreateDate\": \"2017-02-19T06:16:50.558Z\", \n            \"UserId\": \"AIDAIU5P6ESCGYTVGACFE\", \n            \"Arn\": \"arn:aws:iam::07180688831:user/lucille.bluth\" \n        } \n      }\n\n```", "```\n aws iam create-login-profile --user-name <username> \\\n --password <password> \\\n --password-reset-required\n\n```", "```\n      { \n         \"LoginProfile\": { \n              \"UserName\": \"lucille.bluth\", \n              \"CreateDate\": \"2017-02-19T06:29:06.244Z\", \n              \"PasswordResetRequired\": true \n         } \n      }\n\n```", "```\n aws iam create-access-key --user-name <username>\n\n```", "```\n      { \n          \"AccessKey\": { \n            \"UserName\": \"lucille.bluth\", \n            \"Status\": \"Active\", \n            \"CreateDate\": \"2017-02-19T06:59:45.273Z\", \n            \"SecretAccessKey\": \"abcdefghijklmnopqrstuvwxyz\", \n            \"AccessKeyId\": \"AAAAAAAAAAAAAAAAAAAA\" \n          } \n      }\n\n```", "```\n aws iam add-user-to-group \\\n --group-name <group-name> \\\n --user-name <username>\n\n```", "```\n aws iam list-groups-for-user --user-name <username>\n\n```", "```\n      { \n          \"Groups\": [ \n              { \n                 \"Path\": \"/\", \n                 \"CreateDate\": \"2017-02-19T07:24:46Z\", \n                 \"GroupId\": \"AGPAIHM2XJ2ELQTNYBFQQ\", \n                 \"Arn\": \"arn:aws:iam::067180688831:group/PowerUsers\", \n                 \"GroupName\": \"PowerUsers\" \n              } \n          ] \n      }\n\n```", "```\n      AWSTemplateFormatVersion: '2010-09-09' \n      Resources: \n        ExampleRole: \n          Type: AWS::IAM::Role \n          Properties: \n            AssumeRolePolicyDocument: \n              Version: \"2012-10-17\" \n              Statement: \n                - \n                  Effect: Allow \n                  Principal: \n                    Service: \n                      - ec2.amazonaws.com \n                  Action: \n                    - sts:AssumeRole \n            ManagedPolicyArns: \n              - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess \n              - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess \n            Path: / \n            Policies: \n              - \n                PolicyName: WriteToCloudWatchLogs \n                PolicyDocument: \n                  Version: \"2012-10-17\" \n                  Statement: \n                    - \n                      Effect: Allow \n                      Action: \n                        - logs:CreateLogGroup \n                        - logs:CreateLogStream \n                        - logs:PutLogEvents \n                        - logs:DescribeLogStreams \n                      Resource: \"*\"\n\n```", "```\n      ExampleInstanceProfile: \n        Type: AWS::IAM::InstanceProfile \n        Properties: \n          Roles: \n            - !Ref ExampleRole \n          Path: /\n\n```", "```\n      Outputs: \n        ExampleInstanceProfile: \n          Value: !Ref ExampleInstanceProfile \n        ExampleInstanceProfileArn: \n          Value: !GetAtt ExampleInstanceProfile.Arn\n\n```", "```\n aws cloudformation create-stack \\\n --stack-name example-instance-profile \\\n --template-body file://08-creating-instance-roles.yaml \\\n --capabilities CAPABILITY_IAM\n\n```", "```\n      { \n        \"Code\" : \"Success\", \n        \"LastUpdated\" : \"2017-02-17T11:14:23Z\", \n        \"Type\" : \"AWS-HMAC\", \n\"AccessKeyId\" : \"AAAAAAAAAAAAAAAAAAAA\", \n        \"SecretAccessKey\" : \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", \n        \"Token\" : \"token\", \n        \"Expiration\" : \"2017-02-17T12:14:23Z\" \n      }\n\n```", "```\n      AWSTemplateFormatVersion: \"2010-09-09\" \n      Description: This template creates a role that can be assumed \n       from another account.\n\n```", "```\n      Parameters: \n        SourceAccountNumber: \n          Type: String \n          Description: The AWS account number to grant access to assume\n            the role. \n          AllowedPattern: \"[0-9]+\" \n          MaxLength: \"12\" \n          MinLength: \"12\"\n\n```", "```\n        Resources: \n          CrossAccountRole: \n            Type: \"AWS::IAM::Role\" \n            Properties: \n              Path: \"/\" \n              AssumeRolePolicyDocument: \n                Version: \"2012-10-17\" \n                Statement: \n                  - Sid: \"\" \n                    Action: \"sts:AssumeRole\" \n                    Effect: Allow \n                    Principal: \n                      AWS: \n                        !Sub \"arn:aws:iam::${SourceAccountNumber}:root\" \n              Policies: \n                - PolicyName: DoEverything \n                  PolicyDocument: \n                    Version: \"2012-10-17\" \n                    Statement: \n                      - Action: \n                          - \"*\" \n                        Effect: Allow \n                        Resource: \"*\" \n                        Sid: DoEverything\n\n```", "```\n      Outputs: \n        RoleARN: \n          Description: The Role ARN that can be assumed by the\n            other account. \n          Value: !GetAtt CrossAccountRole.Arn\n\n```", "```\n aws cloudformation create-stack \\\n        --stack-name CrossAccountRole \\\n --template-body file://src/08-target-account-role.yaml \\\n --parameters \\\n        ParameterKey=SourceAccountNumber, \\\n        ParameterValue=<your-source-account-number> \\\n --capabilities CAPABILITY_IAM\n\n```", "```\n aws cloudformation describe-stacks \\\n --stack-name CrossAccountRole \\\n --query 'Stacks[0].Outputs[0].OutputValue' \\\n --output text\n\n```", "```\n aws sts assume-role \\\n --role-arn <your-target-role-arn> \\\n --role-session-name CrossAccountRole\n\n```", "```\n[profile accountb] \nrole_arn = <your-target-account-role-arn> \nsource_profile = default\n\n```", "```\n aws --profile accountb ...\n\n```", "```\n aws kms create-key --query 'KeyMetadata.KeyId' --output text\n\n```", "```\n aws kms create-alias --alias-name 'alias/credstash' \\\n        --target-key-id \"<your-key-id>\"\n\n```", "```\n unicreds setup\n\n```", "```\n unicreds put foo bar\n\n```", "```\n unicreds get foo\n\n```", "```\n{ \n  \"Version\": \"2012-10-17\", \n  \"Statement\": [ \n    { \n      \"Action\": [ \n        \"kms:Decrypt\" \n      ], \n      \"Effect\": \"Allow\", \n      \"Resource\": \"arn:aws:kms:us-east-1:<your-account-id>:\n         key/<your-key-id>\" \n    }, \n    { \n      \"Action\": [ \n        \"dynamodb:GetItem\", \n        \"dynamodb:Query\", \n        \"dynamodb:Scan\" \n      ], \n      \"Effect\": \"Allow\", \n      \"Resource\": \"arn:aws:dynamodb:us-east-1:<your-account-id>:\n         table/credential-store\" \n    } \n  ] \n}\n\n```", "```\n{ \n  \"Version\": \"2012-10-17\", \n  \"Statement\": [ \n    { \n      \"Action\": [ \n         \"kms:GenerateDataKey\" \n      ], \n      \"Effect\": \"Allow\", \n      \"Resource\": \"arn:aws:kms:us-east-1:<your-account-id>:\n         key/<your-key-id>\" \n    }, \n    { \n      \"Action\": [ \n        \"dynamodb:PutItem\" \n      ], \n      \"Effect\": \"Allow\", \n      \"Resource\": \"arn:aws:dynamodb:us-east-1:<your-account-id>:\n         table/credential-store\" \n    } \n  ] \n}\n\n```", "```\nunicreds put-file foo bar.txt\n\n```", "```\nunicreds get foo 1\n\n```"]