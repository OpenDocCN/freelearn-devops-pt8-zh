["```\n    wget -O cookbook.yaml \n    https://raw.githubusercontent.com/OpenStackCookbook/OpenStackCookbook/master/cookbook.yaml\n\n    ```", "```\n    parameters:\n      key_name:\n        type: string\n        description: Name of keypair to assign to servers\n      image:\n        type: string\n        description: Name of image to use for servers\n      flavor:\n        type: string\n        description: Flavor to use for servers\n      public_net_id:\n        type: string\n        description: >\n          ID of public network for which floating IP addresses will be allocated\n      private_net_id:\n        type: string\n        description: ID of private network into which servers get deployed\n      private_subnet_id:\n        type: string\n        description: ID of private sub network into which servers get deployed\n    ```", "```\n    openstack keypair list\n    openstack image list\n    openstack flavor list\n    openstack network list\n\n    ```", "```\n    parameters:\n      key_name: demokey\n      image: xenial-image\n      flavor: m1.tiny\n      public_net_id: 2da8979e-dcf8-4eb8-b207-f33bfce4a15a\n      private_net_id: 78a5a119-c27a-41c4-8310-5c04d3a6bc31\n      private_subnet_id: 3cee2bb9-5673-4a6e-bb1e-8cb66be066b2\n    ```", "```\n    openstack stack create myStack\n     --template cookbook.yaml\n     --environment cookbook-env.yaml\n\n    ```", "```\n    openstack stack list\n\n    ```", "```\nopenstack stack create nameOfStack\n --template template.yaml\n --environment template-env.yaml\n\n```", "```\n    openstack stack show myStack\n\n    ```", "```\n    openstack stack output list myStack\n\n    ```", "```\n    openstack stack output show myStack haproxy_public_ip\n\n    ```", "```\noutputs:\n  webserver1_private_ip:\n    description: IP address of webserver1 in private network\n    value: { get_attr: [ webserver1, first_address ] }\n  webserver2_private_ip:\n    description: IP address of webserver2 in private network\n    value: { get_attr: [ webserver2, first_address ] }\n  haproxy_public_ip:\n    description: Floating IP address of haproxy in public network\n    value: { get_attr: [ haproxy_floating_ip, floating_ip_address ] }\n```", "```\nopenstack stack output show myStack haproxy_public_ip\n\n```", "```\n    openstack stack delete myStack\n\n    ```", "```\n    openstack stack list\n\n    ```", "```\nopenstack stack delete nameOfStack -y\n\n```", "```\n    parameters:\n      key_name: demokey\n      image: xenial-image\n      flavor: m1.large\n      public_net_id: 2da8979e-dcf8-4eb8-b207-f33bfce4a15a\n      private_net_id: 78a5a119-c27a-41c4-8310-5c04d3a6bc31\n      private_subnet_id: 3cee2bb9-5673-4a6e-bb1e-8cb66be066b2\n    ```", "```\n    openstack stack show myStack\n\n    ```", "```\n    openstack stack update myStack --existing\n\n    ```", "```\n    openstack stack show myStack\n\n    ```", "```\nopenstack stack update nameOfStack\n --environment updatedEnvironmentFile.yaml\n --template originalStackTemplate.yml\n\n```", "```\nopenstack stack update nameOfStack --existing\n\n```", "```\nsudo pip install shade\n\n```", "```\n    sudo apt-get install software-properties-common\n\n    ```", "```\n    sudo apt-add-repository ppa:ansible/ansible\n\n    ```", "```\n    sudo apt-get update\n    sudo apt-get install ansible\n\n    ```", "```\n    sudo easy_install pip\n\n    ```", "```\n    sudo pip install ansible\n\n    ```", "```\nansible --version\n\n```", "```\n    - name: Launch instance on OpenStack\n      hosts: localhost\n      gather_facts: false\n      tasks:\n      - name: Deploy an instance\n        os_server:\n           state: present\n           name: cookbook1\n           image: xenial-image\n           key_name: demokey\n           timeout: 200\n           flavor: m1.tiny\n           network: private-net\n           verify: false\n    ```", "```\n    source openrc\n    ansible-playbook launch-instance.yml\n\n    ```", "```\n    openstack server list\n\n    ```", "```\nos_server:\n  state: present\n```", "```\n    - name: Launch instances on OpenStack\n      hosts: localhost\n      gather_facts: false\n\n      tasks:\n        - name: Create ansible security group\n          os_security_group:\n            state: present\n            name: ansible\n            verify: false\n        - name: Create a rule to allow SSH connections\n          os_security_group_rule:\n            security_group: ansible\n            protocol: tcp\n            port_range_min: 22\n            port_range_max: 22\n            remote_ip_prefix: 0.0.0.0/0\n            verify: false\n        - name: Create webserver security group\n          os_security_group:\n            state: present\n            name: webserver\n            verify: false\n        - name: Create rule to allow http connections\n          os_security_group_rule:\n            security_group: webserver\n            protocol: tcp\n            port_range_min: 80\n            port_range_max: 80\n            remote_ip_prefix: 0.0.0.0/0\n            verify: false\n    ```", "```\n        - name: Deploy an instance\n          os_server:\n            state: present\n            name: cookbook1\n            image: xenial-image\n            key_name: demokey\n            timeout: 200\n            flavor: m1.tiny\n            network: private-net\n            security_groups: default,ansible,webserver\n            verify: false\n          register: nova_cookbook\n    ```", "```\n      - name: Add instance to Inventory\n        add_host: name=cookbook1 groups=webservers\n                  ansible_ssh_host={{ nova_cookbook.server.accessIPv4 }}\n    ```", "```\n    - name: Wait for port 22 to be ready\n      hosts: webservers\n      gather_facts: False\n      tasks:\n        - local_action: wait_for port=22 host=\"{{ ansible_ssh_host }}\"  search_regex=OpenSSH delay=10\n    ```", "```\n    - hosts: webservers\n      remote_user: ubuntu\n      become: yes\n      gather_facts: no\n      pre_tasks:\n        - name: Set APT proxy\n          raw: echo \"Acquire::http::Proxy \\\"http://192.168.1.20:3128\\\";\" > /etc/apt/apt.conf\n        - name: 'install python2'\n          raw: sudo apt-get -y install python-simplejson\n      tasks:\n        - name: Ensure Apache is installed\n          apt: name=apache2 state=latest\n        - name: Ensure that Apache is started\n          service: name=apache2 state=started\n    ```", "```\nsource openrc\nansible-playbook orchestrate-instance.yml\n\n```", "```\n    - name: Launch instances on OpenStack\n      hosts: localhost\n      gather_facts: false\n\n      vars:\n        count: 2\n\n      tasks:\n        - name: Create ansible security group\n          os_security_group:\n            state: present\n            name: ansible\n            verify: false\n        - name: Create a rule to allow SSH connections\n          os_security_group_rule:\n            security_group: ansible\n            protocol: tcp\n            port_range_min: 22\n            port_range_max: 22\n            remote_ip_prefix: 0.0.0.0/0\n            verify: false\n        - name: Create webserver security group\n          os_security_group:\n            state: present\n            name: webserver\n            verify: false\n        - name: Create a rule to allow http connections\n          os_security_group_rule:\n            security_group: webserver\n            protocol: tcp\n            port_range_min: 80\n            port_range_max: 80\n            remote_ip_prefix: 0.0.0.0/0\n            verify: false\n        - name: Deploy an instance\n          os_server:\n            state: present\n            name: cookbook{{ item }}\n            image: xenial-image\n            key_name: demokey\n            timeout: 200\n            flavor: m1.tiny\n            network: private-net\n            verify: false\n        register: nova_cookbook\n        with_sequence:\n            count={{ count }}\n\n        - name: Add instance to Inventory\n          add_host: name=\"{{ item.server.name }}\" groups=webservers\n             \tansible_ssh_host=\"{{ item.server.accessIPv4 }}\"\n        with_items: \"{{ nova_cookbook.results }}\"\n    ```", "```\n    - name: Wait for port 22 to be ready\n      hosts: webservers\n      gather_facts: False\n      tasks:\n        - local_action: wait_for port=22 host=\"{{ ansible_ssh_host }}\"  search_regex=OpenSSH delay=10\n\n    - hosts: webservers\n      remote_user: ubuntu\n      become: yes\n      gather_facts: no\n    ```", "```\n      pre_tasks:\n        - name: Set APT proxy\n          raw: echo \"Acquire::http::Proxy \\\"http://192.168.1.20:3128\\\";\" > /etc/apt/apt.conf\n        - name: 'install python2'\n          raw: sudo apt-get -y install python-simplejson\n\n    tasks:\n        - name: Ensure Apache is installed\n          apt: name=apache2 state=latest\n        - name: Ensure that Apache is started\n          service: name=apache2 state=started\n    ```", "```\n    source openrc\n    ansible-playbook multi-orchestrate-instances.yml\n\n    ```", "```\nvars:\n   count: 2\n```", "```\nwith_sequence:\n          count={{ count }}\n```", "```\nname: cookbook{{ item }}\n```", "```\n    - name: Create OpenStack Cloud Environment\n      hosts: localhost\n      gather_facts: false\n\n      vars:\n        webserver_count: 2\n\n      tasks:\n        - name: Download Ubuntu 16.04 Xenial\n          get_url:\n            url: http://releases.ubuntu.com/16.04/ubuntu-16.04.3-server-amd64.img\n            dest: /tmp/ubuntu-16.04.img\n\n        - name: Ensure Ubuntu 16.04 Xenial Image Exists\n          os_image:\n            name: xenial-image\n            container_format: bare\n            disk_format: qcow2\n            state: present\n            filename: /tmp/ubuntu-16.04.img\n            verify: false\n    ```", "```\n        - name: Create the cookbook network\n          os_network:\n            state: present\n            name: cookbook_network\n            external: false\n            shared: false\n            verify: false\n          register: cookbook_network\n\n        - name: Create the test subnet\n          os_subnet:\n            state: present\n            network_name: \"{{ cookbook_network.id }}\"\n            name: cookbook_subnet\n            ip_version: 4\n            cidr: 192.168.0.0/24\n            gateway_ip: 192.168.0.1\n            enable_dhcp: yes\n            dns_nameservers:\n              - 192.168.1.20\n            verify: false\n          register: cookbook_subnet\n\n        - name: Create the test router\n          os_router:\n            state: present\n            name: cookbook_router\n            network: GATEWAY_NET\n            external_fixed_ips:\n              - subnet: GATEWAY_SUBNET\n            interfaces:\n              - cookbook_subnet\n            verify: false\n    ```", "```\n        - name: Insert routes into router\n          command: openstack router set --route destination=192.168.1.0/24,gateway=192.168.100.1 cookbook_router\n          register: cookbook_router_route\n    ```", "```\n        - name: Create ansible security group\n          os_security_group:\n            state: present\n            name: ansible\n            verify: false\n        - name: Create rule to allow SSH connections\n          os_security_group_rule:\n            security_group: ansible\n            protocol: tcp\n            port_range_min: 22\n            port_range_max: 22\n            remote_ip_prefix: 0.0.0.0/0\n            verify: false\n\n        - name: Create webserver security group\n          os_security_group:\n            state: present\n            name: webserver\n            verify: false\n        - name: Create rule to allow http connections\n          os_security_group_rule:\n            security_group: webserver\n            protocol: tcp\n            port_range_min: 80\n            port_range_max: 80\n            remote_ip_prefix: 0.0.0.0/0\n            verify: false\n    ```", "```\n        - name: Deploy Webserver Instances\n          os_server:\n            state: present\n            name: webserver{{ item }}\n            image: xenial-image\n            key_name: demokey\n            timeout: 200\n            flavor: m1.tiny\n            network: cookbook_network\n            security_groups: default,ansible,webserver\n            verify: false\n          register: nova_webservers\n          with_sequence:\n            count={{ webserver_count }}\n\n        - name: Add webservers to Inventory\n          add_host: name=\"{{ item.server.name }}\" groups=webservers\n                 ansible_ssh_host=\"{{ item.server.accessIPv4 }}\"\n          with_items: \"{{ nova_webservers.results }}\"\n\n        - name: Deploy HAProxy Instance\n          os_server:\n            state: present\n            name: haproxy\n            image: xenial-image\n            key_name: demokey\n            timeout: 200\n            flavor: m1.tiny\n            network: cookbook_network\n            security_groups: default,ansible,webserver\n            verify: false\n          register: nova_haproxy\n          with_sequence:\n            count=1\n\n        - name: Add HAProxy to Inventory\n          add_host: name=\"{{ item.server.name }}\" groups=haproxy\n                 ansible_ssh_host=\"{{ item.server.accessIPv4 }}\"\n          with_items: \"{{ nova_haproxy.results }}\"\n    ```", "```\n    - name: Wait for port 22 to be ready\n      hosts: webservers:haproxy\n      gather_facts: False\n      tasks:\n        - local_action: wait_for port=22 host=\"{{ ansible_ssh_host }}\"  search_regex=OpenSSH delay=10\n    ```", "```\n    - name: Configure Web Servers\n      hosts: webservers\n      remote_user: ubuntu\n      become: yes\n      gather_facts: False\n\n    pre_tasks:\n        - name: Set APT proxy\n          raw: echo \"Acquire::http::Proxy \\\"http://192.168.1.20:3128\\\";\" > /etc/apt/apt.conf\n        - name: 'install python2'\n          raw: sudo apt-get -y install python-simplejson\n\n    tasks:\n        - name: Ensure Apache is installed\n          apt: name=apache2 state=latest\n        - name: Ensure that Apache is started\n          service: name=apache2 state=started\n    ```", "```\n    - name: Gathering facts about webservers\n      hosts: webservers\n      remote_user: ubuntu\n      become: yes\n      tasks:\n        - name: Gathering facts\n          setup:\n    ```", "```\n    - name: Configure HAProxy\n      hosts: haproxy\n      remote_user: ubuntu\n      become: yes\n      gather_facts: False\n\n      pre_tasks:\n        - name: Set APT proxy\n          raw: echo \"Acquire::http::Proxy \\\"http://192.168.1.20:3128\\\";\" > /etc/apt/apt.conf\n        - name: 'install python2'\n          raw: sudo apt-get -y install python-simplejson\n\n      tasks:\n        - name: Update apt cache\n          apt: update_cache=yes cache_valid_time=3600\n\n        - name: Install haproxy\n          apt: name=haproxy state=present\n\n        - name: Enable init script\n          replace: dest='/etc/default/haproxy'\n                regexp='ENABLED=0'\n                replace='ENABLED=1'\n\n        - name: Update HAProxy config\n          template: src=templates/haproxy.cfg.j2\n                dest=/etc/haproxy/haproxy.cfg\n          notify:\n            - restart haproxy\n\n      handlers:\n        - name: restart haproxy\n          service: name=haproxy state=restarted\n    ```", "```\n    mkdir templates/\n    vi templates/haproxy.cfg.j2\n    ```", "```\n    global\n        log 127.0.0.1 local0 notice\n        maxconn 2000\n        user haproxy\n        group haproxy\n        daemon\n\n    defaults\n        log  global\n        mode  http\n        option  httplog\n        option  dontlognull\n        retries 3\n        option redispatch\n        timeout connect  5000\n        timeout client  10000\n        timeout server  10000\n\n    listen {{haproxy_app_name}}\n        bind *:80\n        mode {{haproxy_mode}}\n        stats {{haproxy_enable_stats}}\n        {% if haproxy_enable_stats == 'enable' %}\n        stats uri /haproxy?stats\n        stats realm Strictly\\ Private\n       {% endif %}\n        balance {{haproxy_algorithm}}\n        option httpclose\n        option forwardfor\n        {% for host in groups['webservers'] %}\n        server {{ hostvars[host].inventory_hostname }} {{ hostvars[host]['ansible_all_ipv4_addresses'][0] }} check\n        {% endfor %}\n    ```", "```\n    mkdir -p group_vars/haproxy\n    vi group_vars/haproxy/main.yml\n    ```", "```\n    ---\n    haproxy_app_name: myapp\n    haproxy_mode: http\n    haproxy_enable_stats: enable\n    haproxy_algorithm: roundrobin\n    ```", "```\n    source openrc\n    ansible-playbook full-stack.yml\n    ```", "```\nserver webserver1 192.168.0.6 check\nserver webserver2 192.168.0.3 check\n\n```", "```\n{% for host in groups['webservers'] %}\nserver {{ hostvars[host].inventory_hostname }} {{ hostvars[host]['ansible_all_ipv4_addresses'][0] }} check\n{% endfor %}\n```", "```\n---\nhaproxy_app_name: myapp\nhaproxy_mode: http\nhaproxy_enable_stats: enable\nhaproxy_algorithm: roundrobin\n```", "```\nlisten {{haproxy_app_name}}\n   bind *:80\n   mode {{haproxy_mode}}\n   stats {{haproxy_enable_stats}}\n   {% if haproxy_enable_stats == 'enable' %}\n   stats uri /haproxy?stats\n   stats realm Strictly\\ Private\n   {% endif %}\n   balance {{haproxy_algorithm}}\n```"]