["```\nfull_FQDN_registry_name[:registry_port]/[username or team]/image_repository:image_tag\n```", "```\n$ skopeo  list-tags docker://docker.io/frjaraur/colors\n{\n    \"Repository\": \"docker.io/frjaraur/colors\",\n    \"Tags\": [\n        \"1.0\",\n        \"1.1\",\n        \"1.2\",\n        \"1.5\",\n        \"latest\"\n    ]\n}\n```", "```\n$ skopeo inspect docker://docker.io/frjaraur/colors:1.0 \\\n--format=\"{{ .Digest }}\"\nsha256:cb7c1e49bcac66663aafea571ce5a6e6626e387c43b4836cc4d9e4c0e5d9faff\n```", "```\n$ docker container run --rm quay.io/skopeo/stable \\\ninspect docker://docker.io/frjaraur/colors:1.0 \\\n--format=\"{{ .Digest }}\"\nUnable to find image 'quay.io/skopeo/stable:latest' locally\nlatest: Pulling from skopeo/stable\n1a72627e77ed: Already exists\n...\nDigest: sha256:23f4b378c4aff49621e90289b33daf133462824b5eba603b0834e25cb83a97ca\nStatus: Downloaded newer image for quay.io/skopeo/stable:latest\nsha256:cb7c1e49bcac66663aafea571ce5a6e6626e387c43b4836cc4d9e4c0e5d9faff\n```", "```\n    $ docker image pull busybox\n    Using default tag: latest\n    latest: Pulling from library/busybox\n    Digest: sha256:7b3ccabffc97de872a30dfd234fd972a66d247c8cfc69b0550f276481852627c\n    Status: Image is up to date for busybox:latest\n    DOCKER_CONTENT_TRUST=1 and download the same image again:\n\n    ```", "```\n    $ docker pull docker.io/frjaraur/busybox-untrusted:0.1\n    Error: remote trust data does not exist for docker.io/frjaraur/busybox-untrusted: notary.docker.io does not have trust data for docker.io/frjaraur/busybox-untrusted\n    ```", "```\n    $ export DOCKER_CONTENT_TRUST=0\n    $ docker pull docker.io/frjaraur/busybox-untrusted:0.1\n    0.1: Pulling from frjaraur/busybox-untrusted\n    Digest: sha256:907ca53d7e2947e849b839b1cd258c98fd3916c60f2e6e70c30edbf741ab6754\n    Status: Downloaded newer image for frjaraur/busybox-untrusted:0.1\n    docker.io/frjaraur/busybox-untrusted:0.1\n    ```", "```\n    $ docker run -ti --disable-content-trust=false\\\n    docker.io/frjaraur/busybox-untrusted:0.1\n    docker: Error: remote trust data does not exist for docker.io/frjaraur/busybox-untrusted: notary.docker.io does not have trust data for docker.io/frjaraur/busybox-untrusted.\n    See 'docker run --help'.\n    ```", "```\n    $ docker run -ti --disable-content-trust=false \\\n    docker.io/busybox:latest ls -ld /tmp\n    docker trust command line:\n\n    ```", "```\n\n    ```", "```\n\n    ```", "```\n    $ docker trust key generate frjaraur\n    Generating key for frjaraur...\n    Enter passphrase for new frjaraur key with ID ceb39cd:\n    Repeat passphrase for new frjaraur key with ID ceb39cd:\n    ~/.docker/trust/private/:\n\n    ```", "```\n    $ docker image tag busybox docker.io/frjaraur/busybox-trusted:0.1\n    $ docker image push docker.io/frjaraur/busybox-trusted:0.1\n    The push refers to repository [docker.io/frjaraur/busybox-trusted]\n    b64792c17e4a: Mounted from frjaraur/busybox\n    0.1: digest: sha256:907ca53d7e2947e849b839b1cd258c98fd3916c60f2e6e70c30edbf741ab6754 size: 528\n    Signing and pushing trust metadata\n    You are about to create a new root signing key passphrase. This passphrase\n    will be used to protect the most sensitive key in your signing system. Please\n    choose a long, complex passphrase and be careful to keep the password and the\n    key file itself secure and backed up. It is highly recommended that you use a\n    password manager to generate the passphrase and keep it safe. There will be no\n    way to recover this key. You can find the key in your config directory.\n    Enter passphrase for new root key with ID dfbeee2:\n    Repeat passphrase for new root key with ID dfbeee2:\n    Enter passphrase for new repository key with ID 9cfa33d:\n    Repeat passphrase for new repository key with ID 9cfa33d:\n    Finished initializing \"docker.io/frjaraur/busybox-trusted\"\n    docker trust sign docker.io/frjaraur/busybox-trusted:0.1 and then push it with docker image push docker.io/frjaraur/busybox-trusted:0.1.\n    ```", "```\n\n    ```", "```\n    $ docker trust inspect \\\n    --pretty docker.io/frjaraur/busybox-trusted:0.1\n    Signatures for docker.io/frjaraur/busybox-trusted:0.1\n    SIGNED TAG   DIGEST                                                             SIGNERS\n    0.1          907ca53d7e2947e849b839b1cd258c98fd3916c60f2e6e70c30edbf741ab6754   (Repo Admin)\n    Administrative keys for docker.io/frjaraur/busybox-trusted:0.1\n      Repository Key:       9cfa33df6e6b93596416b06bb82198a46befb94479bbf5b0d92e73a213a30126\n      Root Key:     f802546452481df2edc8b9670d30638e079164e7dc7187b698cd275d894531f4\n    ```", "```\n    $ docker image pull docker.io/registry:2.8.1\n    ...\n    Digest: sha256:3f71055ad7c41728e381190fee5c4cf9b8f7725839dcf5c0fe3e5e20dc5db1faStatus: Downloaded newer image for registry:2.8.1\n    docker.io/library/registry:2.8.1\n    ```", "```\n    $ docker image inspect docker.io/registry:2.8.1 \\\n    --format=\"{{ .Config.Cmd }} {{.Config.Entrypoint }} {{.Config.Volumes }} {{.Config.ExposedPorts }}\"\n    5000 will be published, and a custom script will be launched with a configuration file as the argument. The /var/lib/registry directory will be used for our images; hence, we will map it to a local folder in this lab.If you’ve already downloaded this book’s GitHub repository, change to the `Chapter3` folder and follow the next steps from there. If you haven’t, please download the repository to your computer by executing `git clone` [https://github.com/PacktPublishing/Containers-for-Developers-Handbook.git](https://github.com/PacktPublishing/Containers-for-Developers-Handbook.git). We will remove the long path in the following prompts.\n    ```", "```\n    Chapter3$ mkdir registry-data\n    Chapter3$ docker container run -P -d \\\n    --name myregstry \\\n    -v $(pwd)/registry-data:/var/lib/registry \\\n    5000. It also used the directory we created to store all our images, by using $(pwd) to get the current directory. Adding volumes to a container requires the use of the directory’s full path.As we identified our new container as `myregistry`, we can easily review its status:\n\n    ```", "```\n    $ curl -I 0.0.0.0:32768\n    HTTP/1.1 200 OK\n    Cache-Control: no-cache\n    32768 (in my example environment).\n    ```", "```\n\n    ```", "```\n    Chapter3$ docker pull alpine\n    Using default tag: latest\n    ...\n    Status: Downloaded newer image for alpine:latest\n    localhost:32768:\n\n    ```", "```\n\n    ```", "```\n    Chapter3$ docker image ls |grep \"alpine\"\n    alpine                        latest      b2aa39c304c2   3 weeks ago    7.05MB\n    localhost:32768 registry:\n\n    ```", "```\n\n    As you can see, everything works as if we were pushing to the Docker Hub registry. The only difference here is that we didn’t have to log in and our registry uses HTTP. We can manage this by adding an NGINX web server as a frontend, behind the registry server.\n    ```", "```\n    Chapter3$ ls -lart registry-data/docker/registry/v2/\n    total 16\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 repositories\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 ..\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 blobs\n    repositories directory manages the metadata for each image repository, while the blobs directory stores all the layers from all container images.The `blobs` directory is distributed in many other directories to be able to manage an enormous number of layers:\n\n    ```", "```\n    Chapter3$ docker image tag alpine localhost:32768/alpine:0.2\n    ```", "```\n\n    ```", "```\n    $ docker image push localhost:32768/alpine:0.2\n    The push refers to repository [localhost:32768/alpine]\n    7cd52847ad77: Layer already exists\n    localhost:32768 registry says that the image layers already exist.\n    ```", "```\n    Chapter3$ ls -lart registry-data/docker/registry/v2/blobs/sha256/\n    total 20\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 63\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 ..\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 e2\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 b2\n    blobs directory wasn’t changed, but let’s review the repositories directory, where the image metadata is managed:\n\n    ```", "```\n\n    ```", "```\n    Chapter3$ cat <<EOF | docker build -t \\\n    localhost:32768/alpine:0.3 -\n    FROM docker.io/alpine:latest\n    RUN apk add --update nginx\n    EXPOSE 80\n    CMD [\"whatever command\"]\n    EOF\n    ```", "```\n    Chapter3$ cat <<EOF | docker build -t \\\n    localhost:32768/alpine:0.3 -\n    FROM> FROM docker.io/alpine:latest\n    > RUN apk add --update nginx\n    > EXPOSE 80\n    > CMD [\"whatever command\"]\n    > EOF\n    [+] Building 1.3s (6/6) FINISHED\n    ...\n    => [1/2] FROM docker.io/library/alpine:latest\n    0.0s\n    => [2/2] RUN apk add --update nginx\n    1.2s\n    ...\n    => => writing image sha256:e900ec26c76b9d779bc3d6a7f828403db07daea66c85b5271ccd94e12b460ccd                                0.0s\n    => => naming to localhost:32768/alpine:0.3\n    ```", "```\n    Chapter3$ docker push localhost:32768/alpine:0.3\n    The push refers to repository [localhost:32768/alpine]\n    33593eed7b41: Pushed\n    7cd52847ad77: Layer already exists\n    0.3: digest: sha256:1bf4c7082773b616fd2247ef9758dfec9e3084ff0d23845452a1384a6e715c40 size: 739\n    ```", "```\n    Chapter3$ ls -lart registry-data/docker/\\\n    registry/v2/repositories/alpine/_manifests/tags/\n    total 20\n    drwxr-xr-x 4 root root 4096 Mar  6 19:55 0.1\n    drwxr-xr-x 4 root root 4096 Mar  6 19:55 ..\n    drwxr-xr-x 4 root root 4096 Mar  6 19:59 0.2\n    drwxr-xr-x 4 root root 4096 Mar  6 20:08 0.3\n    drwxr-xr-x 5 root root 4096 Mar  6 20:08 .\n     Chapter3$ ls -lart registry-data/docker/registry/v2/blobs/sha256/\n    total 32\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 63\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 ..\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 e2\n    drwxr-xr-x 3 root root 4096 Mar  6 19:55 b2\n    drwxr-xr-x 3 root root 4096 Mar  6 20:08 c1\n    drwxr-xr-x 3 root root 4096 Mar  6 20:08 e9\n    drwxr-xr-x 3 root root 4096 Mar  6 20:08 1b\n    repositories and blobs locations.\n    ```", "```\n    Chapter3$ mkdir bin\n    Chapter3$ export PATH=$PATH:$(pwd)/bin\n    Chapter3$ curl -sL -o bin/cosign https://github.com/sigstore/cosign/releases/download/v2.0.0/cosign-linux-amd64\n    Chapter3$ chmod 755 bin/*\n    Chapter3$ cosign --help\n    A tool for Container Signing, Verification and Storage in an OCI registry.\n    Usage:\n      cosign [command]\n    --output-key-prefix to ensure our keys have an appropriate name:\n\n    ```", "```\n\n    Use your own name for your key. You will be asked for a password. Use your own, and remember that this will be required to sign any image. This will create your public and private keys:\n\n    ```", "```\n\n    ```", "```\n    Chapter3$ docker tag localhost:32768/alpine:0.3 \\\n    localhost:32768/alpine:0.4-signed\n    Chapter3$ docker push localhost:32768/alpine:0.4-signed\n    The push refers to repository [localhost:32768/alpine]\n    dfdda8f0d335: Pushed\n    7cd52847ad77: Layer already exists\n    0.4-signed: digest: sha256:f7ffc0ab458dfa9e474f656afebb4289953bd1196022911f0b4c739705e49956 size: 740\n    ```", "```\n    Chapter3$ cosign sign --key frjaraur.key \\\n    localhost:32768/alpine:0.4-signed\n    Enter password for private key:\n    WARNING: Image reference localhost:32768/alpine:0.4-signed uses a tag, not a digest, to identify the image to sign.\n        This can lead you to sign a different image than the intended one. Please use a\n        digest (example.com/ubuntu@sha256:abc123...) rather than tag\n        (example.com/ubuntu:latest) for the input to cosign. The ability to refer to\n        images by tag will be removed in a future release.\n            Note that there may be personally identifiable information associated with this signed artifact.\n            This may include the email address associated with the account with which you authenticate.\n            This information will be used for signing this artifact and will be stored in public transparency logs and cannot be removed later.\n    By typing 'y', you attest that you grant (or have permission to grant) and agree to have this information stored permanently in transparency logs.\n    Are you sure you would like to continue? [y/N] y\n    tlog entry created with index: 14885625\n    Pushing signature to: localhost:32768/alpine\n    ```", "```\n    Chapter3$ cosign verify --key frjaraur.pub \\\n    localhost:32768/alpine:0.4-signed\n    Verification for localhost:32768/alpine:0.4-signed --\n    The following checks were performed on each of these signatures:\n      - The cosign claims were validated\n      - Existence of the claims in the transparency log was verified offline\n      - The signatures were verified against the specified public key\n    cosign triangulate to verify whether an image is signed:\n\n    ```", "```\n\n    This hash is the digest referenced:\n\n    ```", "```\n    Chapter3$ docker tag localhost:32768/alpine:0.3 \\\n    localhost:32768/alpine:0.4-signed\n    ```", "```\n\n    ```", "```\n    Chapter3$ docker push localhost:32768/\\\n    alpine:0.4-signed\n    The push refers to repository [localhost:32768/alpine]\n    33593eed7b41: Layer already exists\n    7cd52847ad77: Layer already exists\n    0.4-signed: digest: sha256:1bf4c7082773b616fd2247ef9758dfec9e3084ff0d23845452a1384a6e715c40 size: 739\n    ```", "```\n    Chapter3$ cosign verify --key frjaraur.pub \\\n    localhost:32768/alpine:0.4-signed\n    Error: no matching signatures:\n    ValidatingWebHook. This will ensure that only signed images (we can also include specific signatures) will be available to create containers.\n    ```", "```\n    Chapter3$ skopeo inspect \\\n    docker://aquasec/trivy:0.38.2-amd64|grep -i digest\n    trivy image. We will move inside the trivy folder to build our new image. Review the Dockerfile’s content, and write down the appropriate hash for your base image:\n\n    ```", "```\n\n    ```", "```\n    Chapter3/trivy$ docker build -t \\\n    localhost:32768/trivy:custom-0.38.2 . --no-cache\n    [+] Building 23.5s (7/7) FINISHED\n    => [internal] load build definition from Dockerfile\n    0.1s\n    ...\n    => => writing image sha256:de8c7b30b715d05ab3167f6c8d66ef47f25603d05b8392ab614e8bb8eb70d4b3             0.1s\n    => => naming to localhost:32768/trivy:custom-0.38.2\n    python:alpine image available in Docker Hub. We will only scan for content vulnerability:\n\n    ```", "```\n\n    ```"]