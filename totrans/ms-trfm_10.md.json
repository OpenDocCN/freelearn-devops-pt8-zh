["```\npacker {\n  required_plugins {\n    azure = {\n      source  = \"github.com/hashicorp/azure\"\n      version = \"~> 2.0.0\"\n    }\n  }\n}\n```", "```\nsource \"azure-arm\" \"vm\" {\nclient_id       = var.arm\\_client\\_id\nclient\\_secret   = var.arm\\_client\\_secret\nsubscription\\_id = var.arm\\_subscription\\_id\ntenant\\_id       = var.arm\\_tenant\\_id\n...\n}\n```", "```\nsource \"azure-arm\" \"vm\" {\n  ...\n  image_offer     = \"0001-com-ubuntu-server-jammy\"\n  image_publisher = \"canonical\"\n  image_sku       = \"22_04-lts\"\n  ...\n}\n```", "```\nsource \"azure-arm\" \"vm\" {\n  ...\n  location                     = var.azure_primary_location\n  communicator                 = \"ssh\"\n  os_type                      = \"Linux\"\n  vm_size                      = var.vm_size\n  allowed_inbound_ip_addresses = [var.agent_ipaddress]\n}\n```", "```\nprovisioner \"shell\" {\n  execute_command = local.execute_command\n  inline = [\"/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync\"]\n  only = [\"azure-arm\"]\n}\n```", "```\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.75.0\"\n    }\n    cloudinit = {\n      source  = \"hashicorp/cloudinit\"\n      version = \"~> 2.3.2\"\n    }\n  }\n  backend \"azurerm\" {\n  }\n}\n```", "```\nprovider \"azurerm\" {\n  features {}\n}\n```", "```\nterraform {\n  ...\n  backend \"azurerm\" {\n  }\n}\n```", "```\nresource \"aws_vpc\" \"main\" {\n  cidr_block = var.vpc_cidr_block\n  tags = {\n    Name        = \"${var.application_name}-${var.environment_name}-network\"\n    application = var.application_name\n    environment = var.environment_name\n  }\n}\nresource \"azurerm_virtual_network\" \"main\" {\n  ...\n  tags = {\n    application = var.application_name\n    environment = var.environment_name\n  }\n}\n```", "```\nresource \"azurerm_virtual_network\" \"main\" {\n  name                = \"vnet-${var.application_name}-${var.environment_name}\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  address_space       = [var.vnet_cidr_block]\n}\n```", "```\nresource \"azurerm_subnet\" \"frontend\" {\n  name                 = \"snet-frontend\"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = [cidrsubnet(var.vnet_cidr_block, 2, 1)]\n}\n```", "```\nresource \"azurerm_public_ip\" \"frontend\" {\n  name                = \"pip-lb-${var.application_name}-${var.environment_name}-frontend\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  allocation_method   = \"Static\"\n  sku                 = \"Standard\"\n  zones               = [1, 2, 3]\n}\nresource \"azurerm_lb\" \"frontend\" {\n  name                = \"lb-${var.application_name}-${var.environment_name}-frontend\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  sku                 = \"Standard\"\n  frontend_ip_configuration {\n    name                 = \"PublicIPAddress\"\n    public_ip_address_id = azurerm_public_ip.frontend.id\n    zones                = [1, 2, 3]\n  }\n}\n```", "```\nresource \"azurerm_lb_backend_address_pool\" \"frontend\" {\n  loadbalancer_id = azurerm_lb.frontend.id\n  name            = \"frontend-pool\"\n}\n```", "```\nresource \"azurerm_network_interface_backend_address_pool_association\" \"frontend\" {\n  count = var.az_count\n  network_interface_id    = azurerm_network_interface.frontend[count.index].id\n  ip_configuration_name   = \"internal\"\n  backend_address_pool_id = azurerm_lb_backend_address_pool.frontend.id\n}\n```", "```\nresource \"azurerm_lb_probe\" \"frontend_probe_http\" {\n  loadbalancer_id = azurerm_lb.frontend.id\n  name            = \"http\"\n  protocol        = \"Http\"\n  port            = 5000\n  request_path    = \"/\"\n}\nresource \"azurerm_lb_rule\" \"frontend_http\" {\n  loadbalancer_id                = azurerm_lb.frontend.id\n  name                           = \"HTTP\"\n  protocol                       = \"Tcp\"\n  frontend_port                  = 80\n  backend_port                   = 5000\n  frontend_ip_configuration_name = \"PublicIPAddress\"\n  probe_id                       = azurerm_lb_probe.frontend_probe_http.id\n  backend_address_pool_ids       = [azurerm_lb_backend_address_pool.frontend.id]\n  disable_outbound_snat          = true\n}\n```", "```\nresource \"azurerm_application_security_group\" \"frontend\" {\n  name                = \"asg-${var.application_name}-${var.environment_name}-frontend\"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_resource_group.main.location\n}\n```", "```\nresource \"azurerm_network_security_group\" \"frontend\" {\n  name                = \"nsg-${var.application_name}-${var.environment_name}-frontend\"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_resource_group.main.location\n}\nresource \"azurerm_network_security_rule\" \"frontend_http\" {\n  resource_group_name                        = azurerm_resource_group.main.name\n  network_security_group_name                = azurerm_network_security_group.frontend.name\n  name                                       = \"allow-http\"\n  priority                                   = \"2001\"\n  access                                     = \"Allow\"\n  direction                                  = \"Inbound\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"5000\"\n  source_address_prefix                      = \"*\"\n  destination_address_prefix                 = \"*\"\n  destination_application_security_group_ids = [azurerm_application_security_group.frontend.id]\n}\n```", "```\nresource \"azurerm_key_vault\" \"main\" {\n  name                       = \"kv-${var.application_name}-${var.environment_name}\"\n  location                   = azurerm_resource_group.main.location\n  resource_group_name        = azurerm_resource_group.main.name\n  tenant_id                  = data.azurerm_client_config.current.tenant_id\n  soft_delete_retention_days = 7\n  purge_protection_enabled   = false\n  sku_name                   = \"standard\"\n  enable_rbac_authorization  = true\n}\n```", "```\nresource \"azurerm_user_assigned_identity\" \"frontend\" {\n  name                = \"${var.application_name}-${var.environment_name}-frontend\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n}\n```", "```\nresource \"azurerm_role_assignment\" \"frontend_keyvault\" {\n  scope                = azurerm_key_vault.main.id\n  role_definition_name = \"Key Vault Secrets User\"\n  principal_id         = azurerm_user_assigned_identity.frontend.principal_id\n}\n```", "```\ndata \"azurerm_image\" \"frontend\" {\n  name                = var.frontend_image.name\n  resource_group_name = var.frontend_image.resource_group_name\n}\n```", "```\nresource \"azurerm_network_interface\" \"frontend\" {\n  count = var.az_count\n  name                = \"nic-${var.application_name}-${var.environment_name}-frontend${count.index}\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     =azurerm_subnet.frontend.id\n    private_ip_address_allocation = \"Dynamic\"\n  }\n}\n```", "```\nresource \"azurerm_linux_virtual_machine\" \"frontend\" {\n  count = var.az_count\n  name                = \"vm-${var.application_name}-${var.environment_name}-frontend${count.index}\"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_resource_group.main.location\n  size                = \"Standard_F2\"\n  admin_username      = var.admin_username\n  zone                = count.index + 1\n  network_interface_ids = [\n    azurerm_network_interface.frontend[count.index].id\n  ]\n  admin_ssh_key {\n    username   = var.admin_username\n    public_key = tls_private_key.ssh.public_key_openssh\n  }\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n  source_image_id = data.azurerm_image.frontend.id\n  user_data       = data.cloudinit_config.frontend.rendered\n}\n```", "```\n- id: build\n  name: Packer Build\n  env:\n    PKR_VAR_arm_subscription_id: ${{ vars.ARM_SUBSCRIPTION_ID }}\n    PKR_VAR_arm_tenant_id: ${{ vars.ARM_TENANT_ID }}\n    PKR_VAR_arm_client_id: ${{ vars.PACKER_ARM_CLIENT_ID }}\n    PKR_VAR_arm_client_secret: ${{ secrets.PACKER_ARM_CLIENT_SECRET }}\n    PKR_VAR_image_version: ${{ steps.image-version.outputs.version }}\n    PKR_VAR_agent_ipaddress: ${{ steps.agent-ipaddress.outputs.ipaddress }}\n  working-directory: ${{ env.WORKING_DIRECTORY }}\n  run: |\n    packer init ./\n    packer build -var-file=variables.pkrvars.hcl ./\n```", "```\n- id: apply\n  name: Terraform Apply\n  env:\n    ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}\n    ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}\n    ARM_CLIENT_ID: ${{ vars.TERRAFORM_ARM_CLIENT_ID }}\n    ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_ARM_CLIENT_SECRET }}\n    BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}\n    BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}\n    BACKEND_STORAGE_CONTAINER_NAME: ${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}\n    TF_BACKEND_KEY: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT_NAME }}\n  working-directory: ${{ env.WORKING_DIRECTORY }}\n  run: |\n    terraform init \\\n      -backend-config=\"resource_group_name=$BACKEND_RESOURCE_GROUP_NAME\" \\\n      -backend-config=\"storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME\" \\\n      -backend-config=\"container_name=$BACKEND_STORAGE_CONTAINER_NAME\" \\\n      -backend-config=\"key=$TF_BACKEND_KEY\"\n    terraform apply -auto-approve\n```"]