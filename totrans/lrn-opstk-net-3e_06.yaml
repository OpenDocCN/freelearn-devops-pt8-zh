- en: Building Networks with Neutron
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *[Chapter 4](05786c3c-b24e-40dc-82a7-ed6072eca14f.xhtml), Virtual Network
    Infrastructure Using Linux Bridges*, and *[Chapter 5](0763a131-4ab9-4b3e-8854-8646feae7937.xhtml),
    Building a Virtual Switching Infrastructure Using Open vSwitch* , we laid down
    a virtual switching infrastructure that would support the OpenStack Neutron networking
    features that we have discussed in this book. In this chapter, we will build network
    resources on top of that foundation. These will be able to be consumed by instances.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, I will guide you through the following tasks:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Managing networks using the CLI and dashboard
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing IPv4 subnets using the CLI and dashboard
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing subnet pools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating ports
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networks, subnets, and ports are the core resources of the Neutron API, which
    was introduced in *[Chapter 3](bf508e37-ce8a-4116-89db-e8f8a6abf0f4.xhtml)*, *Installing
    Neutron*. The relationship between these core resources and instances and other
    virtual network devices can be observed in the following sections.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Network management in OpenStack
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenStack can be managed in a variety of ways, including through the Horizon
    dashboard, the Neutron API, and the OpenStack CLI. A command-line client, provided
    by the `python-openstackclient` package, gives users the ability to execute commands
    from a shell that interfaces with the Neutron API. To enter the shell, type `openstack`
    in a terminal connected to the `controller` node, like so:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `openstack` shell features tab completion and a `help` command that lists
    all of the available commands within the shell. Openstack-related commands can
    also be executed straight from the Linux command line by using the `openstack`
    client like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The client provides a number of commands that assist with the creation, modification,
    and deletion of networks, subnets, and ports.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The `openstack` client is preferred over the `neutron` client moving forward,
    but may not have complete command parity. The use of the `neutron` client should
    be limited.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'All `openstack` client commands can be determined by using the `--help` flag.
    The primary commands associated with network management that will be discussed
    in this chapter are listed in the following table:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '| **Network Commands** | **Description** |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| `network create` | Creates a new network |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| `network delete` | Deletes a network(s) |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| `network show` | Shows network details |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| `network list` | Lists networks |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| `network set` | Sets network properties |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| `network unset` | Unsets network properties |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: Whether you've chosen a Linux bridge or Open vSwitch-based virtual networking
    infrastructure, the process to create, modify, and delete networks and subnets
    is the same. Behind the scenes, however, the process of connecting instances and
    other resources to the network differs greatly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Provider and tenant networks
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two categories of networks that can provide connectivity to instances
    and other network resources, including virtual routers:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Provider networks
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者网络
- en: Project or tenant networks, also known as self-service networks
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目或租户网络，也称为自服务网络
- en: Every network created in Neutron, whether created by a regular user or a user
    with an admin role, has provider attributes that describe that network. Attributes
    that describe a network include the network's type, such as flat, VLAN, GRE, VXLAN,
    or local, the physical network interface that the traffic will traverse, and the
    segmentation ID of the network. The difference between a provider and project
    or tenant network is in who or what sets those attributes and how they are managed
    within OpenStack.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Neutron 中创建的每个网络，无论是普通用户还是具有管理员角色的用户创建的，都具有描述该网络的提供者属性。描述网络的属性包括网络类型（如 flat、VLAN、GRE、VXLAN
    或 local）、流量经过的物理网络接口以及网络的分段 ID。提供者网络与项目或租户网络之间的区别在于由谁或什么设置这些属性，以及它们在 OpenStack
    中是如何管理的。
- en: Provider networks can only be created and managed by an OpenStack administrator,
    since they require knowledge and configuration of the physical network infrastructure.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 提供者网络只能由 OpenStack 管理员创建和管理，因为它们需要对物理网络基础设施的了解和配置。
- en: An OpenStack administrator refers to a user associated with the `admin` role
    in Keystone.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 管理员是指与 Keystone 中的 `admin` 角色相关联的用户。
- en: When a provider network is created, the administrator must manually specify
    the provider attributes for the network in question. The administrator is expected
    to have some understanding of the physical network infrastructure and may be required
    to configure switch ports for proper operation. Provider networks allow for either
    virtual machine instances or virtual routers created by users to be connected
    to them. When a provider network is configured to act as an external network for
    Neutron routers, the provider network is known as an **external provider network**.
    Provider networks are often configured as flat or vlan networks, and utilize an
    external routing device to properly route traffic in and out of the cloud.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建提供者网络时，管理员必须手动指定该网络的提供者属性。管理员需要对物理网络基础设施有一定的了解，可能还需要配置交换机端口以确保网络的正常运行。提供者网络允许由用户创建的虚拟机实例或虚拟路由器连接到它们。当提供者网络被配置为
    Neutron 路由器的外部网络时，该网络被称为 **外部提供者网络**。提供者网络通常配置为 flat 或 VLAN 网络，并使用外部路由设备来正确地路由云中的流量。
- en: Self-service networks, unlike provider networks, are created by users and are
    usually isolated from other networks in the cloud. The inability to configure
    the physical infrastructure means that tenants will likely connect their networks
    to Neutron routers when external connectivity is required. Tenants are unable
    to specify provider attributes manually and are restricted to creating networks
    whose attributes have been pre-defined by the administrator in the Neutron configuration
    files. More information on the configuration and use of Neutron routers begins
    in *[Chapter 10](371886b8-4c2a-49e9-90b8-8fe79217adb4.xhtml), Creating Standalone
    Routers with Neutron.*
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 自服务网络与提供者网络不同，由用户创建，通常与云中的其他网络隔离。由于无法配置物理基础设施，租户通常会在需要外部连接时将其网络连接到 Neutron 路由器。租户无法手动指定提供者属性，并且仅能创建管理员在
    Neutron 配置文件中预定义的属性的网络。有关 Neutron 路由器配置和使用的更多信息，请参见 *[第 10 章](371886b8-4c2a-49e9-90b8-8fe79217adb4.xhtml)，使用
    Neutron 创建独立路由器。*
- en: Managing networks in the CLI
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中管理网络
- en: 'To create networks using the OpenStack client, use the `network create` command
    that''s shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 OpenStack 客户端创建网络，请使用下面显示的 `network create` 命令：
- en: '![](img/2159c79e-e080-496a-b397-ec03c8f8e684.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2159c79e-e080-496a-b397-ec03c8f8e684.png)'
- en: The `--share` and `--no-share` arguments are used to share the network with
    all other projects, or limit the network to the owning project, respectively.
    By default, networks are not shared and can only be used by the owning project.
    Neutron's RBAC functionality can be used to share a network between a subset of
    projects and will be discussed in [*Chapter 9*](b4632ba9-6a36-46da-b2ca-6e7f80a040bf.xhtml),
    *Role-Based Access Control*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`--share` 和 `--no-share` 参数用于分别将网络与所有其他项目共享，或限制网络仅限于拥有项目。默认情况下，网络不会被共享，仅能由拥有项目使用。Neutron
    的 RBAC 功能可以用于在部分项目之间共享网络，相关内容将在 [*第 9 章*](b4632ba9-6a36-46da-b2ca-6e7f80a040bf.xhtml)
    中讨论，*基于角色的访问控制*。'
- en: The `--enable` and `--disable`  arguments are used to enable or disable the
    administrative state of the network.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`--enable` 和 `--disable` 参数用于启用或禁用网络的管理状态。'
- en: The `--availability-zone-hint`  argument is used to define the availability
    zone in which the network should be created. By default, all networks are placed
    in a single zone and all hosts within the environment are expected to have the
    capability of servicing traffic for the network. Network availability zones are
    an advanced networking topic that will be touched on in [*Chapter 14*](7d442e41-1f89-4339-9085-17ef6eace767.xhtml),
    *Advanced Networking Topics*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`--availability-zone-hint` 参数用于定义应该创建网络的可用区。默认情况下，所有网络都放置在一个单一的可用区内，环境中的所有主机预计都具有为网络提供服务的能力。网络可用区是一个高级网络主题，将在[*第14章*](7d442e41-1f89-4339-9085-17ef6eace767.xhtml)，*高级网络主题*中涉及。'
- en: The `--enable-port-security` and `--disable-port-security`  arguments are used
    to enable or disable port security on any port that's created from a given network.
    Port security refers to the use and support of security groups and MAC/ARP filtering
    on Neutron ports, and will be discussed further in [*Chapter 8*](240902fd-5108-446e-afa5-8122de12f0af.xhtml),
    *Managing Security Groups*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`--enable-port-security` 和 `--disable-port-security` 参数用于启用或禁用在给定网络中创建的任何端口的端口安全性。端口安全性指的是在
    Neutron 端口上使用和支持安全组以及 MAC/ARP 过滤，将在[*第8章*](240902fd-5108-446e-afa5-8122de12f0af.xhtml)，*管理安全组*中进一步讨论。'
- en: The `--qos-policy`  argument is used to set a QoS policy on any port created
    in the network. The configuration and use of the Quality of Service extension
    is an advanced topic that is outside the scope of this book.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`--qos-policy` 参数用于为网络中创建的任何端口设置 QoS 策略。质量服务扩展的配置和使用是一个高级主题，超出了本书的范围。'
- en: The `--external` and `--internal` arguments are used to specify whether the
    network is considered an external provider network that's eligible for use as
    a gateway network or floating IP pool, or if it is only to be used internally
    within the cloud. The default value for the `router:external` attribute of a network
    is `false`, or `internal`. For more information on Neutron routers, refer to [*Chapter
    10*](371886b8-4c2a-49e9-90b8-8fe79217adb4.xhtml), *Creating Standalone Routers
    with Neutron*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`--external` 和 `--internal` 参数用于指定网络是作为外部提供商网络（可以作为网关网络或浮动 IP 池使用），还是仅在云内部使用。网络的
    `router:external` 属性的默认值为 `false` 或 `internal`。有关 Neutron 路由器的更多信息，请参阅[*第10章*](371886b8-4c2a-49e9-90b8-8fe79217adb4.xhtml)，*使用
    Neutron 创建独立路由器*。'
- en: The `--default` and `--no-default ` arguments are used to specify whether or
    not a network should act as the default external network for the cloud and are
    often used for the network auto-allocation feature that was introduced in Mitaka.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`--default` 和 `--no-default` 参数用于指定网络是否应作为云的默认外部网络，并且通常用于 Mitaka 中引入的网络自动分配功能。'
- en: The network auto-allocation features of Neutron require the auto-allocated-topology,
    router, subnet_allocation, and external-net extensions. Some of these are not
    enabled by default. For more information on these features, please refer to the
    upstream documentation that's available at [https://docs.openstack.org/neutron/pike/admin/config-auto-allocation.html](https://docs.openstack.org/neutron/pike/admin/config-auto-allocation.html).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 的网络自动分配功能需要 auto-allocated-topology、router、subnet_allocation 和 external-net
    扩展。其中一些默认情况下没有启用。有关这些功能的更多信息，请参阅上游文档，[https://docs.openstack.org/neutron/pike/admin/config-auto-allocation.html](https://docs.openstack.org/neutron/pike/admin/config-auto-allocation.html)。
- en: The `--provider-network-type` argument defines the type of network being created.
    Available options include flat, VLAN, local, GRE, geneve, and VXLAN. For a network
    type to be functional, the corresponding type driver must be enabled in the ML2
    configuration file and supported by the enabled mechanism driver.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`--provider-network-type` 参数定义了正在创建的网络类型。可用的选项包括 flat、VLAN、local、GRE、geneve
    和 VXLAN。要使网络类型生效，必须在 ML2 配置文件中启用相应的类型驱动程序，并且由启用的机制驱动程序支持。'
- en: The `--provider-physical-network` argument is used to specify the network interface
    that will be used to forward traffic through the host. The value specified here
    corresponds to the provider label defined by the `bridge_mappings` or `physical_interface_mappings`
    options that are set in the Neutron agent configuration file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`--provider-physical-network` 参数用于指定将用于通过主机转发流量的网络接口。此处指定的值对应于在 Neutron 代理配置文件中通过
    `bridge_mappings` 或 `physical_interface_mappings` 选项定义的提供商标签。'
- en: The `--provider-segment` argument is used to specify a unique ID for the network
    that corresponds to the respective network type. If you are creating a VLAN-type
    network, the value used will correspond to the 802.1q VLAN ID which is mapped
    to the network and should be trunked to the host. If you are creating a GRE or
    VXLAN network, the value should be arbitrary, but unique; the integer is not used
    by any other network of the same type. This ID is used to provide network isolation
    via the GRE key or VXLAN.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`--provider-segment`参数用于指定与相应网络类型对应的唯一网络 ID。如果你创建的是 VLAN 类型的网络，则使用的值将对应于映射到该网络的
    802.1q VLAN ID，并且应通过中继连接到主机。如果你创建的是 GRE 或 VXLAN 网络，则该值应为任意且唯一的整数；这个整数不会被任何其他相同类型的网络使用。该
    ID 用于通过 GRE 键或 VXLAN 提供网络隔离。'
- en: VNI header fields for GRE and VXLAN networks, respectively. When the provider-segment parameter
    is not specified, one is automatically allocated from the tenant range that's
    specified in the plugin configuration file. Users have no visibility or option
    to specify a segment ID when creating networks. When all available IDs in the
    range that are available to projects are exhausted, users will no longer be able
    to create networks of that type.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: GRE 和 VXLAN 网络的 VNI 头字段。当未指定`provider-segment`参数时，插件配置文件中指定的租户范围内会自动分配一个段。用户在创建网络时无法查看或指定段
    ID。当项目可用范围内的所有可用 ID 耗尽时，用户将无法再创建此类型的网络。
- en: The `--tag` and `--no-tag` arguments are used to apply or remove a tag from
    a network. Tags are label that are applied to a network resource which can be
    used by a client for filtering purposes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`--tag` 和 `--no-tag` 参数用于为网络添加或移除标签。标签是应用于网络资源的标签，客户端可以使用这些标签进行过滤。'
- en: By default, provider attributes can only be set by users with the admin role
    in Keystone. Users without the admin role are beholden to values provided by Neutron
    based on configurations set in the ML2 and agent configuration files.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，提供者属性只能由 Keystone 中具有管理员角色的用户设置。没有管理员角色的用户只能使用 Neutron 基于 ML2 和代理配置文件中设置的配置提供的值。
- en: Creating a flat network in the CLI
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中创建平面网络
- en: If you recall from previous chapters, a flat network is a network in which no
    802.1q tagging takes place.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾前面的章节，你会记得平面网络是一个没有进行 802.1q 标签化的网络。
- en: 'The syntax to create a flat network can be seen here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建平面网络的语法如下：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is an example of using the OpenStack client to create a flat
    network by the name of `MyFlatNetwork`. The network will utilize an interface
    or bridge represented by the label `physnet1` and will be shared among all projects:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用 OpenStack 客户端创建名为`MyFlatNetwork`的平面网络的示例。该网络将使用标记为`physnet1`的接口或桥接，并将在所有项目之间共享：
- en: '![](img/ea1e8ada-d9d5-445a-af1a-b1505f048f70.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea1e8ada-d9d5-445a-af1a-b1505f048f70.png)'
- en: In the preceding output, the project ID corresponds to the admin project where
    the user who executed the `network create` command was scoped. Since the network
    is shared, all projects can create instances and network resources that utilize
    the `MyFlatNetwork` network.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，项目 ID 对应于执行了`network create`命令的用户所作用的管理员项目。由于网络是共享的，所有项目都可以创建使用`MyFlatNetwork`网络的实例和网络资源。
- en: 'Attempting to create an additional flat network using the same `provider-physical-network`
    name of `physnet1` will result in an error, as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用相同的`provider-physical-network`名称`physnet1`创建额外的平面网络将导致错误，如下截图所示：
- en: '![](img/e841988c-0fa4-4960-b79f-de5abb68a17b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e841988c-0fa4-4960-b79f-de5abb68a17b.png)'
- en: Because there is only one untagged or native VLAN available on the interface,
    Neutron cannot create a second flat network and returns a `Conflict` error. Given
    this limitation, flat networks are rarely utilized in favor of VLAN networks.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因为接口上只有一个未标记或本地 VLAN 可用，Neutron 无法创建第二个平面网络，并返回`Conflict`错误。鉴于这个限制，平面网络很少被使用，VLAN
    网络更为常见。
- en: Creating a VLAN network in the CLI
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中创建 VLAN 网络
- en: 'A VLAN network is one in which Neutron will tag traffic based on an 802.1q
    segmentation ID. The syntax used to create a VLAN network can be seen here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: VLAN 网络是 Neutron 将根据 802.1q 分段 ID 对流量进行标记的网络。用于创建 VLAN 网络的语法如下：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By default, only users with the admin role are allowed to specify provider attributes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，只有拥有管理员角色的用户才允许指定提供者属性。
- en: Up to 4,096 VLANs can be defined on a single provider interface, though some
    of those may be reserved by the physical switching platform for internal use.
    The following is an example of using the OpenStack client to create a VLAN network
    by the name of `MyVLANNetwork`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'The network will utilize the bridge or interface represented by `physnet1`, and
    the traffic will be tagged with a VLAN identifier of 300\. The resulting output
    is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e79faf73-f62c-41a7-a510-e2807816354a.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: 'To create an additional VLAN network that utilizes the provider interface,
    simply specify a different segmentation ID. In the following example, VLAN 301
    is used for the new network, MyVLANNetwork2\. The resulting output is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/952a82b0-caf1-42ed-b162-3592c6569dd8.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: When using VLAN networks, don't forget to configure the physical switch port
    interface as a trunk. This configuration will vary between platforms and is outside
    the scope of this book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Creating a local network in the CLI
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an instance sends traffic on a local network,the traffic remains isolated
    to the instance and other interfaces connected to the same bridge and/or segment.
    Services such as DHCP and metadata might not be available to instances on local
    networks, especially if they are located on different nodes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a local network, use the following syntax:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When using the Linux bridge driver, a bridge is created for the local network
    but no physical or tagged interface is added. Traffic is limited to any port connected
    to the bridge and will not leave the host. When using the Open vSwitch driver,
    instances are attached to the integration bridge and can only communicate with
    other instances in the same local VLAN.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Listing networks in the CLI
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To list networks known to Neutron, use the `openstack network list` command,
    as shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97459ad8-b4a5-49ff-a427-3884f06895de.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: The list output provides the network ID, network name, and any associated subnets.
    An OpenStack user with the admin role can see all networks, while regular users
    can see shared networks and networks within their respective projects.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'If tags are utilized, the results may be filtered using the following parameters:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '`--tags <tag>`: Lists networks which have all given tag(s)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--any-tags <tag>`: Lists networks which have any given tag(s)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--not-tags <tag>`: Excludes networks which have all given tag(s)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--not-any-tags <tag>`: Excludes networks which have any given tag(s)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing network properties in the CLI
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To show the properties of a network, use the `openstack network show` command,
    as shown here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output of the preceding command can be observed in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37bb99a1-483c-4d58-9d74-33d5d1b8800f.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: Various properties of the network can be seen in the output, including the administrative
    state, default MTU, sharing status, and more. Network provider attributes are
    hidden from ordinary users and can only be seen by users with the admin role.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Updating network attributes in the CLI
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中更新网络属性
- en: 'At times, it may be necessary to update the attributes of a network after it
    has been created. To update a network, use the `openstack network set` and `openstack
    network unset` commands as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在网络创建后可能需要更新网络的属性。要更新网络，请使用以下 `openstack network set` 和 `openstack network
    unset` 命令：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `--name` arguments can be used to change the name of the network. The ID
    will remain the same.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`--name` 参数可用于更改网络的名称，ID 保持不变。'
- en: The `--enable` and `-disable` arguments are used to enable or disable the administrative
    state of the network.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`--enable` 和 `--disable` 参数用于启用或禁用网络的管理状态。'
- en: The `--share` and `--no-share` arguments are used to share the network with
    all other projects, or limit the network to the owning project, respectively.
    Once other projects have created ports in a shared network, it is not possible
    to revoke the shared state of the network until those ports have been deleted.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`--share` 和 `--no-share` 参数分别用于将网络与所有其他项目共享，或将网络限制为仅限拥有项目使用。其他项目在共享网络中创建端口后，无法撤销该网络的共享状态，直到这些端口被删除。'
- en: The `--enable-port-security` and `--disable-port-security` arguments are used
    to enable or disable port security on any port created from the given network.
    Port security refers to the use and support of security groups and MAC/ARP filtering
    on Neutron ports, and will be discussed further in [*Chapter 8*](240902fd-5108-446e-afa5-8122de12f0af.xhtml),
    *Managing Security Groups*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`--enable-port-security` 和 `--disable-port-security` 参数用于启用或禁用从给定网络创建的任何端口上的端口安全性。端口安全性是指在
    Neutron 端口上使用和支持安全组及 MAC/ARP 过滤功能，详情请参见 [*第 8 章*](240902fd-5108-446e-afa5-8122de12f0af.xhtml)，*管理安全组*。'
- en: The `--external` and `--internal` arguments are used to specify whether the
    network is considered an an external provider network that's eligible for use
    as a gateway network and floating IP pool, or if it is only to be used internally
    within the cloud. The default value for the `router:external` attribute of a network
    is false, or internal.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`--external` 和 `--internal` 参数用于指定网络是否被视为外部提供者网络，该网络可以作为网关网络和浮动 IP 池使用，或者仅在云内部使用。网络的
    `router:external` 属性的默认值为 false，即内部网络。'
- en: The `--default` and`--no-default` arguments are used to specify whether or not
    a network should act as the default external network for the cloud.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`--default` 和 `--no-default` 参数用于指定网络是否应作为云的默认外部网络。'
- en: The `--qos-policy` argument is used to set a QoS policy on any port created
    in the network.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`--qos-policy` 参数用于为网络中创建的任何端口设置 QoS 策略。'
- en: The `--tag` argument, when used with the set command, will add the specified
    tag to the network. When used with the unset command, the specified tag will be
    removed from the network. Using `--all-tag` with the unset command will remove
    all tags from the network.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`--tag` 参数在与 set 命令一起使用时，会将指定的标签添加到网络上；与 unset 命令一起使用时，则会从网络中移除指定的标签。使用`--all-tag`与
    unset 命令一起使用时，会从网络中移除所有标签。'
- en: Provider attributes are among those that cannot be changed once a network has
    been created. If a provider attribute such as `segmentation_id` must be changed
    after the network has been created, you must delete and recreate the network.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 提供者属性是网络创建后不能更改的属性之一。如果必须在网络创建后更改 `segmentation_id` 等提供者属性，则必须删除并重新创建网络。
- en: Deleting networks in the CLI
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CLI 中删除网络
- en: 'To delete a network, use the `openstack network delete` command and specify
    the ID or name of the network:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除网络，请使用 `openstack network delete` 命令并指定网络的 ID 或名称：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To delete a network named `MySampleNetwork`, you can enter the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除名为`MySampleNetwork`的网络，可以输入以下命令：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Alternatively, you can use the network''s ID:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用网络的 ID：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Multiple networks can also be deleted simultaneously, like so:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以同时删除多个网络，如下所示：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Neutron will successfully delete the network as long as ports utilized by instances,
    routers, floating IPs, load balancer virtual IPs, and other user-created ports
    have been deleted. Any Neutron-created port, like those used for DHCP namespaces,
    will be automatically deleted when the network is deleted.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 只要实例、路由器、浮动 IP、负载均衡器虚拟 IP 和其他用户创建的端口所使用的端口被删除，Neutron 将成功删除网络。任何 Neutron 创建的端口（如用于
    DHCP 名称空间的端口）将在网络被删除时自动删除。
- en: Creating networks in the dashboard
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在仪表盘中创建网络
- en: Networks can be created in the Horizon dashboard, but the method of doing so
    may vary based on the role of the user. Users with the admin role have the ability
    to create networks on behalf of other projects and specify provider attributes,
    while users without the admin role are limited to creating networks in their respective
    projects and have the same capabilities that are available via the OpenStack client.
    Both methods are described in the following sections.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 网络可以在 Horizon 仪表板中创建，但创建方法可能会根据用户角色的不同而有所变化。具有管理员角色的用户可以代表其他项目创建网络并指定提供程序属性，而没有管理员角色的用户只能在各自项目内创建网络，并且具有通过
    OpenStack 客户端可用的相同功能。两种方法将在以下章节中描述。
- en: Via the Project panel
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过项目面板
- en: 'Users can create networks using a wizard located within the Project tab in
    the dashboard. To create a network, login as the user in the demo project and
    perform the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过仪表板中的项目标签页使用向导创建网络。要创建网络，请以演示项目中的用户身份登录并执行以下步骤：
- en: 'Navigate to Project | Network | Networks:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 项目 | 网络 | 网络：
- en: '![](img/e4bb11c7-f5c8-45fb-b466-1a6ee0f2e134.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4bb11c7-f5c8-45fb-b466-1a6ee0f2e134.png)'
- en: In the preceding screenshot, notice that there are no actions available next
    to the networks that are currently defined. Even though the networks are shared,
    they are not modifiable by users and can only be modified by an administrator.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，注意到当前定义的网络旁边没有可用的操作。即使这些网络是共享的，用户也不能修改它们，只有管理员才能进行修改。
- en: 'Click the Create Network button in the upper right-hand corner of the screen.
    A window will appear that will allow you to specify network properties:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕右上角的“创建网络”按钮。一个窗口将出现，允许你指定网络属性：
- en: '![](img/9c1d240d-4664-4276-9ebc-23877ee86259.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c1d240d-4664-4276-9ebc-23877ee86259.png)'
- en: 'From the Network tab, you can define the Network Name and Admin State (on or
    off). Users creating networks within the dashboard are not required to create
    a subnet at the time the network is created. By unchecking the Create Subnet checkbox
    in the Subnet tab, the network creation process can be completed:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络标签页中，你可以定义网络名称和管理状态（开启或关闭）。在仪表板中创建网络时，用户不需要在创建网络时创建子网。通过取消选中子网标签页中的“创建子网”复选框，可以完成网络创建过程：
- en: '![](img/2d905e4d-e2ab-4e8f-bca7-34f3f5559999.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d905e4d-e2ab-4e8f-bca7-34f3f5559999.png)'
- en: The process to create subnets within the dashboard will be explained later on
    in this chapter.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后面将解释如何在仪表板中创建子网。
- en: Via the Admin panel
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过管理员面板
- en: 'Users with the admin role will notice additional functionality available within
    the dashboard. An Admin panel can be seen on the left-hand side of the dashboard,
    which allows users with the admin role to manipulate networks outside of their
    respective project. To create a network in the dashboard as a cloud administrator,
    login as the admin user and perform the following steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 具有管理员角色的用户将在仪表板中看到额外的功能。仪表板左侧将显示管理员面板，允许管理员角色的用户操作其项目外的网络。作为云管理员在仪表板中创建网络时，请以管理员用户身份登录并执行以下步骤：
- en: 'Navigate to Admin | Network | Networks:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 管理 | 网络 | 网络：
- en: '![](img/a9aa41e9-14d7-45dd-a7b5-b20e481ccefc.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9aa41e9-14d7-45dd-a7b5-b20e481ccefc.png)'
- en: 'Click on Create Network in the upper right-hand corner of the screen. A wizard
    will appear that will allow you to specify network properties:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕右上角的“创建网络”。一个向导将出现，允许你指定网络属性：
- en: '![](img/25a9c8ea-4714-4162-99e7-14d528e52260.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25a9c8ea-4714-4162-99e7-14d528e52260.png)'
- en: Various network attributes can be set from the wizard, including the network
    type, interface, and segmentation ID, if applicable. Other options include associating
    the network with a project, setting the administrative state, enabling sharing,
    creating a subnet, and enabling the network to be used as an external network
    for Neutron routers. When complete, click the Create Network button to create
    the network.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过向导设置各种网络属性，包括网络类型、接口和分段 ID（如果适用）。其他选项包括将网络与项目关联、设置管理状态、启用共享、创建子网以及启用将网络用作
    Neutron 路由器的外部网络。完成后，点击“创建网络”按钮以创建网络。
- en: Subnet management in OpenStack
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStack 中的子网管理
- en: A subnet in Neutron is a Layer 3 object and can be an IPv4 or IPv6 address block
    defined using classless inter-domain routing (CIDR) notation. CIDR is a method
    of allocating IP addresses using variable-length subnet masking, or VLSM. Subnets
    have a direct relationship to networks and cannot exist without them.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: More information on CIDR and VLSM can be found on Wikipedia at [http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary commands associated with subnet management that will be discussed
    in this chapter are listed in the following table:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '| **Subnet Commands** | **Description** |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
- en: '| `subnet create` | Creates a subnet |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
- en: '| `subnet delete` | Deletes a subnet(s) |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
- en: '| `subnet show` | Displays subnet details |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
- en: '| `subnet list` | Lists subnets |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '| `subnet set` | Sets subnet properties |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| `subnet unset` | Unsets subnet properties |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: '| `subnet pool create` | Creates a subnet pool |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: '| `subnet pool delete` | Deletes a subnet pool(s) |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '| `subnet pool list` | Lists subnet pools |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: '| `subnet pool set` | Sets subnet pool properties |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: '| `subnet pool show` | Displays subnet pool details |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| `subnet pool unset` | Unsets subnet pool properties |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: Working with IPv4 addresses
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A few examples of IPv4 addresses and subnets described using CIDR notation
    are as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '`192.168.100.50/24` represents the IP address `192.168.100.50`, its associated
    routing prefix `192.168.100.0`, and the subnet mask `255.255.255.0` (that is,
    24 "1" bits). There are 256 total addresses in a /24, with 254 addresses available
    for use.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`172.16.1.200/23` represents the IP address `172.16.0.200`, its associated
    routing prefix `172.16.0.0`, and the subnet mask `255.255.254.0` (that is, 23
    "1" bits). There are 512 total addresses in a /23, with 510 addresses available
    for use.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10.0.10.4/22` represents the IP address `10.0.10.4`, its associated routing
    prefix `10.0.8.0`, and the subnet mask `255.255.252.0` (that is, 22 "1" bits).
    There are 1,024 total addresses in a /22, with 1,022 addresses available for use.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Not every address in a subnet might be usable, as the first and last addresses
    are usually reserved as the network and broadcast addresses, respectively. As
    a result, Neutron will not assign the first or last address of a subnet to network
    resources, including instances. Use the following formula to determine the total
    number of usable addresses in a subnet when sizing your network. The *x* variable
    represents the number of host bits available in the subnet mask:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Keep in mind that when creating a subnet, it is important to plan ahead as the
    subnet mask, or CIDR, is currently not an updatable attribute. When instances
    and other resources consume all of the available IP addresses in a subnet, devices
    can no longer be added to the network. To resolve this, a new subnet will need
    to be created and added to the existing network, or an entirely new network and
    subnet will need to be created. Depending on your network infrastructure, this
    might not be an easy change to implement.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: VLSM and CIDR, to an extent, are important when designing networks for use within
    an OpenStack cloud and will play an even more important role when we discuss the
    use of subnet pools later on in this chapter.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Working with IPv6 addresses
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPv6 is a first-class citizen in OpenStack Networking, but is an advanced topic
    that will not be discussed in this chapter. All of the subnet-related commands
    described here will behave similarly when defining IPv6 subnets, but additional
    parameters may be required.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: For more information on IPv6 in Pike, please refer to the upstream documentation
    available at [https://docs.openstack.org/neutron/pike/admin/config-ipv6.html](https://docs.openstack.org/neutron/pike/admin/config-ipv6.html).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Creating subnets in the CLI
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a subnet using the OpenStack client, use the `subnet create` command,
    as shown here:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4074f34-fdcd-43df-ba57-71d5fad14208.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
- en: The `--project` argument specifies the ID of the project that the subnet should
    be associated with and is only available to users with the admin role. This should
    be the same project associated with the parent network.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: The `--project-domain`  argument specifies the ID of the project domain that
    the subnet should be associated with and is only available to users with the admin
    role (this is not commonly used).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: The `--subnet-pool` argument specifies the pool from which the subnet will obtain
    a CIDR.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: The `--use-default-subnet-pool` argument instructs Neutron to choose the default
    subnet pool to obtain a CIDR. Using this parameter first requires the creation
    of at least one subnet pool.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: The `--prefix-length`  argument specifies the prefix length for subnet allocation
    from the subnet pool.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: The `--subnet-range` argument specifies the CIDR notation of the subnet being
    created. This option is required unless the subnet is associated with a subnet
    pool.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: The `--dhcp` and `--no-dhcp` argument enable or disable DHCP services for the
    subnet, respectively. DHCP is enabled by default.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: DHCP is not required for network operation. Disabling DHCP simply means that
    instances attached to the subnet will not utilize DHCP for dynamic interface configuration.
    Instead, interfaces will need to be configured manually or by using scripts or
    other methods within the instance itself. Instances are still allocated IP addresses
    within the allocation pool range whether DHCP is disabled or enabled.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: The `--gateway` argument defines the gateway address for the subnet. The three
    possible options include auto, none, or an IP address of the user's choosing.
    When the subnet is attached to the instance side of a Neutron router, the router's
    interface will be configured with the address specified here. The address is then
    used as the default gateway for instances in the subnet. If the subnet is attached
    to the external side of a Neutron router, the address is used as the default gateway
    for the router itself. To see this behavior in action, refer to [*Chapter 10*](371886b8-4c2a-49e9-90b8-8fe79217adb4.xhtml)*,
    *Creatin*g Standalone Routers with Neutron*. If a gateway is not specified, Neutron
    defaults to auto and uses the first available address in the subnet.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: The `--ip-version` argument specifies the version of the IP protocol represented
    by the subnet. Possible options are 4 for IPv4 and 6 for IPv6\. The default is
    4.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: The `--ipv6-ra-mode` argument defines the router advertisement mode for the
    subnet when IPv6 is used. Possible options include `dhcpv6-stateful`, `dhcpv6-stateless`,
    and `slaac`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: The `--ipv6-address-mode` argument defines the address mode for the subnet when
    IPv6 is used. Possible options include `dhcpv6-stateful`, `dhcpv6-stateless`,
    and `slaac`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Not all combinations of the `ipv6-ra-mode` and `ipv6-address-mode` arguments
    are valid. To review both valid and invalid use cases, please refer to the API
    guide at  [https://docs.openstack.org/neutron/pike/admin/config-ipv6.html](https://docs.openstack.org/neutron/pike/admin/config-ipv6.html). More
    information on IPv6 can be found in the appendix.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: The `--network-segment` argument specifies the network segment to associate
    with the subnet.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: The `--network` argument specifies the network the subnet should be associated
    with. Multiple subnets can be associated with a single network as long as the
    subnet range does not overlap with another subnet in the same network.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'The `--allocation-pool ` argument specifies the range of IP addresses within
    the subnet that can be assigned to ports. IP addresses cannot be excluded from
    a single range. However, multiple allocation pools can be defined that exclude
    addresses. For example, to exclude `192.168.1.50-55` from `192.168.1.0/24`, the
    following syntax would be needed:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Depending on the type of network in use, it is possible for devices outside
    of OpenStack to coexist with instances in the same network and subnet. The allocation
    pool(s) should be defined so that addresses allocated to instances do not overlap
    with devices outside of the OpenStack cloud.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: The `--dns-nameserver` argument specifies a DNS name server for the subnet.
    This option can be repeated to set multiple name servers. However, the default
    maximum number of name servers is five per subnet and can be modified by updating
    the `max_dns_nameservers` configuration option in the `/etc/neutron/neutron.conf`
    file.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: The `--host-route` argument specifies one or more static routes defined as destinations and
    next hop pairs to be injected into an instance's routing table via DHCP. This
    option can be used multiple times to specify multiple routes. The default maximum
    number of routes per subnet is 20 and can be modified by updating the `max_subnet_host_routes`
    configuration option in the `/etc/neutron/neutron.conf` file.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: The `--tag` and `--no-tag` argument are used to apply or remove a tag from a
    subnet. Tags are labels that are applied to a network resource, which can be used
    by a client for filtering purposes.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: The name argument specifies the name of the subnet. While you can create multiple
    subnets with the same name, it is recommended that subnet names remain unique
    for easy identification.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Creating a subnet in the CLI
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate this command in action, create a subnet within the `MyFlatNetwork`
    network with the following characteristics:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Name: `MyFlatSubnet`
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Internet Protocol: `IPv4`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subnet: `192.168.100.0/24`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subnet mask: `255.255.255.0`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'External gateway: `192.168.100.1`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DNS servers: `8.8.8.8, 8.8.4.4`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create the subnet and associate it with `MyFlatNetwork`, refer to the following
    screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9888dff-06fa-4f57-bdc6-88c89ab75d1d.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: Listing subnets in the CLI
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To list existing subnets, use the `openstack subnet list` command, as shown
    in the following screenshot:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03f9ecdc-4b9d-4424-a18c-63b2c7c1bb24.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
- en: By default, the command output provides the ID, name, CIDR notation, and associated
    networks of each subnet that are available to the user. Users with the admin role
    may see all subnets, while ordinary users are restricted to subnets within their
    project or subnets associated with shared networks. The `openstack subnet list`
    command also accepts filters that narrow down returned results.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'If tags are utilized, the results may be filtered using the following parameters:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '`--tags <tag>`: Lists subnets which have all given tag(s)'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--any-tags <tag>`: Lists subnets which have any given tag(s)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--not-tags <tag>`: Excludes subnets which have all given tag(s)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--not-any-tags <tag>`: Excludes subnets which have any given tag(s)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional details can be found by using the `-h` or `--help` options.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Showing subnet properties in the CLI
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To show the properties of a subnet, use the `openstack subnet show` command,
    as shown here:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the preceding command can be observed in the following screenshot:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bd064cb-14b9-43bc-9919-e546445da49d.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: Updating a subnet in the CLI
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To update a subnet in the CLI, use the `openstack subnet set` and `openstack
    subnet unset` commands as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `--name` argument specifies the updated name of the subnet.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: The `--dhcp` and `--no-dhcp` arguments enable or disable DHCP services for the
    subnet, respectively.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Instances that rely on DHCP to procure or renew an IP address lease might lose
    network connectivity over time if DHCP is disabled.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: The `--gateway`  argument defines the gateway address for the subnet. The two
    possible options when updating a subnet includes none or an IP address of the
    user's choosing.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: The `--tag` argument, when used with the `set` command, will add the specified
    tag to the subnet. When used with the `unset` command, the specified tag will
    be removed from the subnet. Using the `--all-tag` with the `unset` command will
    remove all tags from the subnet.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: The `--allocation-pool` argument, when used with the `set` command, adds the
    specified pool to the subnet. When used with the `unset` command, the specified
    pool will be removed from the subnet.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: The`--dns-nameserver` argument, when used with the `set` command, adds the specified
    DNS name server to the subnet. When used with the `unset` command, the specified
    DNS name server is removed from the subnet. Using `--no-name-servers` will remove
    all DNS name servers from the subnet.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: The `--host-route` argument, when used with the `set` command, adds the specified
    static route defined using destination and next hop pairs. When used with the
    `unset` command, the specified route is removed. Using `--no-host-route` with
    the `set` command will remove all host routes from the subnet.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: The `subnet` argument specifies the name of the subnet being modified.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Creating subnets in the dashboard
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Subnets can be created in the Horizon dashboard, but the method of doing so
    may vary depending on the role of the user. Users with the admin role have the
    ability to create subnets on behalf of other projects and specify other attributes
    that may not be available to ordinary users. Users without the admin role are
    limited to creating subnets in their respective projects and have the same capabilities
    that are available via the OpenStack client. Both methods are described in the
    following sections.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Via the Project tab
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users can create subnets at the time of network creation using a wizard located
    within the Project tab in the dashboard. They can also add new subnets to existing
    networks. To create a network and subnet, login as the user in the demo project
    and perform the following steps:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to Project | Network | Networks and click on the Create Network button:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef31bb1d-af00-41e2-b8c6-90552fc7a9b5.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on Create Network will open a window where you can specify the network
    and subnet details:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/207b02e5-b874-41e2-a3f0-b37dee817dae.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Subnet tab or the Next button will navigate you to a panel
    where subnet details are defined, including the name, network address, and gateway
    information:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3abec4c5-fcfb-4ac8-bd6c-9abd4a3731f7.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: 'Finally, clicking on Subnet Details or Next will navigate you to a panel where
    additional subnet details are defined, including Allocation pools, DNS Name Servers,
    and Host Routes. Enter the details shown here and click on the blue Create button
    to complete the creation of the network and subnet:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f5db4e1d-456e-42f2-82c3-c676520ce231.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: 'The ability to add additional subnets or delete a network entirely is provided
    within the menu located under the Actions column, as pictured in the following
    screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1adfda7-5736-44a0-b53f-47e61e9add76.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: Via the Admin tab
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users with the admin role will notice additional functionality available within
    the dashboard. An Admin panel can be seen on the left-hand side of the dashboard,
    which allows users with the admin role to manipulate subnets outside of their
    respective project.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a subnet in the dashboard as a cloud administrator, login as the
    admin user and perform the following steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to Admin | Network | Networks, and click on the name of the network
    you wish to add a subnet to:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb8cfcfb-71b9-4390-b938-07868dcac066.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on MyVLANNetwork provides a list of details of the network, including
    the associated subnets and ports in their respective panels:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c22b7656-5cab-4394-a5bc-92faaebb91e9.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
- en: 'To add a subnet to the network, click on the Subnet tab and click on the Create
    Subnet button on the right-hand side:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e9a9fba-7ba9-44ce-8746-900d2f23d54c.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
- en: 'A wizard will appear that allows you to define the properties of the new subnet:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49fa9466-d27a-42e4-859a-597cfe99f56a.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: 'Clicking Next reveals additional configuration options:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26c7963e-35d8-4ef6-a808-8a751dd65436.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
- en: 'Click on the blue Create button to complete the creation of the subnet. The
    Subnets panel will be updated accordingly:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e3e63e8c-d1ab-4d4c-a7e9-82de1b653c94.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: Managing subnet pools
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Subnet pools were introduced in the Kilo release of OpenStack and allow Neutron
    to control the assignment of IP address space upon subnet creation. Users can
    create subnet pools for use within their respective project only, or an administrator
    can create a subnet pool that is shared between projects. The use of subnet pools
    helps ensure that there is no IP address overlap between subnets and makes the
    creation of subnets easier for users. Subnet pools work best for self-service
    networks that are expected to be connected to Neutron routers and are ideal for
    cases where address scopes and Neutron's BGP Speaker functionality has been implemented.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: BGP stands for Border Gateway Protocol and is a dynamic routing protocol used
    to route traffic over the internet or within autonomous systems. For more information
    on BGP Speaker functionality in Neutron, please refer to the upstream documentation
    available at [https://docs.openstack.org/neutron/pike/admin/config-bgp-dynamic-routing.html](https://docs.openstack.org/neutron/pike/admin/config-bgp-dynamic-routing.html).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Creating a subnet pool
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a subnet pool, you will need the following information at a minimum:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Subnet pool prefix in CIDR notation
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnet pool name
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional information can be provided based on your environment and can be
    determined using the `openstack subnet pool create -h` command.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this command in action, create a subnet pool with the following
    characteristics:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: `MySubnetPool`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnet Pool CIDR: `172.31.0.0/16`
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create the subnet pool, refer to the following screenshot:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c14b01a-ef6c-4300-aee2-3a6c13b9042b.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
- en: The subnet pool `MySubnetPool` is now available for use, but only by the project
    that created it, as shared is `False`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: The default prefix length is 8, which is not ideal and will cause issues if
    users do not specify a prefix length when creating a subnet. Setting a default
    prefix length when creating the subnet pool is highly recommended.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Creating a subnet from a pool
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a subnet from the subnet pool `MySubnetPool`, use the `openstack
    subnet create` command with the `--subnet-pool` argument. To demonstrate this
    command in action, create a subnet with the following characteristics:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Name: `MySubnetFromPool`
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network: `MyVLANNetwork2`'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prefix Length: `28`'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create the subnet, refer to the following screenshot:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28de2501-cbf5-4752-8a87-e82353a315ea.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, the subnet's CIDR was carved from the
    provided subnet pool, and all other attributes were automatically determined by
    Neutron.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the following bug may restrict the use of
    the OpenStack client when providing a prefix length when creating subnets: [https://bugs.launchpad.net/python-openstacksdk/+bug/1754062](https://bugs.launchpad.net/python-openstacksdk/+bug/1754062). If
    an error occurs, try the Neutron client instead.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a subnet pool
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete a subnet pool, use the `openstack subnet pool delete` command, as
    shown here:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Multiple subnet pools can be deleted simultaneously. Existing subnets that reference
    a subnet pool must be deleted before the subnet pool can be deleted.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a default subnet pool
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A default subnet pool can be defined that allows users to create subnets without
    specifying a prefix or a subnet pool. At subnet creation, use both the `--default-prefix-length`
    and `--default` arguments to make the subnet pool the default pool for a particular
    network. A subnet pool can also be updated to become the default subnet pool by
    using the same argument.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command demonstrates setting `MySubnetPool` as the default subnet
    pool:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: No output is returned upon successful completion of the preceding command.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot demonstrates the creation of a new subnet using the
    default subnet pool:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ca8f759-e36a-4d72-a1d3-75554780b5ec.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: As you can see, Neutron automatically carved out a /28 subnet from the default
    subnet pool and set basic attributes without user interaction. The subnet can
    now be attached to a Neutron router for use by instances.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Managing network ports in OpenStack
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A port in Neutron is a logical connection of a virtual network interface to
    a subnet and network. Ports can be associated with virtual machine instances,
    DHCP servers, routers, firewalls, load balancers, and more. Ports can even be
    created simply to reserve IP addresses from a subnet. Neutron stores port relationships
    in the Neutron database and uses that information to build switching connections
    at the physical or virtual switch layer through the networking plugin and agent.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary commands associated with port management are listed in the following
    table:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '| **Port Commands** | **Description** |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
- en: '| `port create` | Creates a new port |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
- en: '| `port delete` | Deletes a port(s) |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
- en: '| `port list` | Lists ports |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
- en: '| `port set` | Sets port properties |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
- en: '| `port show` | Displays port details |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
- en: '| `port unset` | Unsets port properties |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
- en: When a port is created in OpenStack and associated with an instance or other
    virtual network device, it is bound to a Neutron agent on the respective node
    hosting the instance or device. Using details provided by the port, OpenStack
    services may construct a virtual machine interface (vif) or virtual ethernet interface
    (veth) on the host for use with a virtual machine, network namespace, or more
    depending on the application.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve a list of all Neutron ports, use the `openstack port list` command,
    as shown in the following screenshot:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7533f21-6476-4354-87b3-3a2744895e73.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
- en: Users with the admin role will see all ports known to Neutron, while ordinary
    users will only see ports associated with their respective project.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'If tags are utilized, the results may be filtered using the following parameters:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`--tags <tag>`: Lists ports which have all given tag(s)'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--any-tags <tag>`: Lists ports which have any given tag(s)'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--not-tags <tag>`: Excludes ports which have all given tag(s)'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--not-any-tags <tag>`: Excludes ports which have any given tag(s)'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the `openstack port show` command to see the details of a particular port:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a2b7feb7-867a-4fe6-84bd-0308636ae703.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
- en: The port pictured in the preceding screenshot is owned by an interface that's
    used within a DHCP namespace, as represented by a `device_owner` of `network:dhcp`.
    The `network_id` field reveals the network to be `d51943ef-8061-4bdb-b684-8a7d2b7ce73b`,
    which is the `MyFlatNetwork` network that we created earlier on in this chapter.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `ip netns exec` command to execute commands within the DHCP
    namespace. If you recall, the DHCP namespace can be identified with the prefix
    `qdhcp-` and a suffix of the respective network ID. On the `controller01` node,
    run the `ip addr` command within the namespace to list its interfaces and their
    details:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e93612ff-489b-4481-b8be-451039221515.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
- en: 'In the DHCP namespace, the interface''s MAC address corresponds to the port''s
    `mac_address` field, while the name of the interface corresponds to the first
    10 characters of the Neutron port `UUID`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/160b0c62-f3a5-4e23-8790-6a2ed6d6bc1e.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
- en: Creating a port
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By creating a Neutron port manually, users have the ability to specify a particular
    fixed IP address, MAC address, security group, and more.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a port, use the `openstack port create` command, as shown here:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once created, the port can then be associated with a virtual machine instance
    or other virtual network device. It can also be used to reserve an IP address
    in a subnet. In the next chapter, we will look at creating ports and associating
    them with instances in multiple ways.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter laid the foundation for creating networks and subnets that can
    be utilized by instances and other virtual and physical devices. Both the Horizon
    dashboard and the OpenStack command-line client can be used to manage networks,
    subnets, and ports, though the latter is recommended for most administrative tasks.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: For more information on network, subnet, and port attributes, as well as for
    guidance on how to use the Neutron API, refer to the OpenStack wiki at [https://developer.openstack.org/api-ref/network/v2/index.html](https://developer.openstack.org/api-ref/network/v2/index.html).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn the basics of creating instances and attaching
    them to networks. Some of the networks built in this chapter will be used to demonstrate
    the creation of ports that can be attached to instances with the end goal of end-to-end
    connectivity.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
