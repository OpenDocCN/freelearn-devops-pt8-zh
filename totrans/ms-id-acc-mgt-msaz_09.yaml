- en: Deploying Solutions on Azure AD and ADFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What's better than using theory directly in a practical lab activity? Nothing,
    in our eyes. Working through [Chapter 6](1f239a9c-c62a-4e40-ab58-ce78cd87e8be.xhtml), *Managing
    Authentication Protocols,* you learned about the different authentication methods
    used in current environments. Now, we'll start to use this knowledge to deploy
    several scenarios to our **Azure AD** and **Active Directory Federation Services **(**ADFS**).
    We will help you to understand all the configuration steps for required a suitable
    authentication environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will extend your current lab environment, install and
    configure the service we connect, and configure your authentication solution to
    handle different methods. We use this approach so that you can understand all
    the stuff from scratch. We highly recommend that you read [Chapter 6](1f239a9c-c62a-4e40-ab58-ce78cd87e8be.xhtml), *Managing
    Authentication Protocols*, before you run through this chapter, which will cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic environment installation and configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure AD authentication deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ADFS authentication deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Azure MFA into ADFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you ready to go? Yes! We'll start by preparing our environment.
  prefs: []
  type: TYPE_NORMAL
- en: Basic environment installation and configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we start to extend our actual simulated on-premises infrastructure
    with the additional servers we need in order to demonstrate and configure different
    capabilities. In the following diagram, we introduce the complete environment
    we''ll have configured after working through all the labs in the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e724686-e24b-4fc7-a384-c4efe9e8f4da.png)'
  prefs: []
  type: TYPE_IMG
- en: Lab environment overview
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will add `YD1APP01` and `YD1URA01` to our environment. `YourDomain1`
    (`YD1`) is used to identify the machine in the correct domain. In our case, we
    used `INODEMOAPP01` as an example. You need to provision the machines with the
    previous values.
  prefs: []
  type: TYPE_NORMAL
- en: You already deployed the `YDADS01` domain controller in [Chapter 2](c0918163-6616-4bdb-aa82-4a65f578d268.xhtml), *Understanding
    Identity Synchronization*. For all future virtual servers, use the same **Azure
    subscription**, the same **resource group**, and the same **virtual network**.
    Join the virtual machines to your existing Active Directory. For the domain controller
    installation, we used `inovitlabs.ch` as an example. In the following chapters,
    we will use similar DNS suffixes. To be clear, we use `inovitdemos.ch` as a continuous
    representation of `inovitlabs.ch` and we will add `azureid.ch` and `leano.ch` for
    the different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: '`azureid.ch` will be used for the second domain we use without any cloud integration.'
  prefs: []
  type: TYPE_NORMAL
- en: '`leano.ch` will be used as a cloud-only environment for business to business
    communication.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the names you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a better understanding, we show one example for an additional virtual machine,
    and you should run into the following result if you have provisioned all virtual
    machines by the end of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d5e9c9f-0751-499f-b50d-01c9bd7f9564.png)'
  prefs: []
  type: TYPE_IMG
- en: Virtual machine overview
  prefs: []
  type: TYPE_NORMAL
- en: 'For INODEMOSAPP01 (`YDAPP01`), we use a Standard B4ms (4 VCPUs, 16 GB memory)
    virtual machine with Windows Server 2019\. This virtual machine will be the host
    for running an SQL Server instance, most of our demo apps, and Visual Studio.
    For this reason, we use such a big machine type:'
  prefs: []
  type: TYPE_NORMAL
- en: Always use the same resource group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use the same subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the size from the previous screenshot (recommended)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use the same virtual network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always configure a DNS name for a virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the Connect button to download the RDP-connection file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19b96f9c-0759-4ad7-9da5-62422ab9d062.png)'
  prefs: []
  type: TYPE_IMG
- en: VM configuration options
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the labs as easy as we can, we define for every machine an RDP inbound
    rule at creation time, and configure a static internal IP address for the virtual
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3477c0c-1950-41aa-81e7-b84fc712c813.png)'
  prefs: []
  type: TYPE_IMG
- en: Firewall configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on Network Interface, you can configure the static IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a144a3e-14f6-4d45-a378-ee297d2d2df5.png)'
  prefs: []
  type: TYPE_IMG
- en: Static IP configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to click on the virtual network to configure our `YDADS01` domain
    controller as the primary DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b39aaf18-ed38-4ff1-94e4-7e750b8e110e.png)'
  prefs: []
  type: TYPE_IMG
- en: Custom DNS configuration
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to go, and you can follow the same steps for any additional
    virtual machines. We also provide a scripting solution in the code package of
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: This configuration is just for lab and demonstration purposes, and not for a
    production environment. We highly recommend that you do the same on your already
    provisioned domain controller configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this chapter, and specifically the `YD1URA01` virtual machine, we need
    to configure two additional inbound port rules to provide external access to our
    `Web Application Proxy`. We need to open port 80 TCP (HTTP) and 443 TCP (HTTPS).
    The expected configuration should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d757751-0725-4b25-abe9-2f714aed5aae.png)'
  prefs: []
  type: TYPE_IMG
- en: Firewall configuration
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed the virtual machine setup, you should deploy the
    `YD1APP01` and `YD1URA01` servers to run the following labs in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Create the certificate for your environment with let's encrypt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To provide a valid certificate for our tasks, we need to install the `Posh-ACME`
    PowerShell module to use let's encrypt as our certificate provider. The certificates
    are valid for three months, without any cost. If you want to use your environment
    for longer, you just need to renew the certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Find the module description and further information at the following source: [https://docs.microsoft.com/en-us/office365/enterprise/base-configuration-dev-test-environment](https://docs.microsoft.com/en-us/office365/enterprise/base-configuration-dev-test-environment)[ ](https://docs.microsoft.com/en-us/office365/enterprise/base-configuration-dev-test-environment)
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following command, you install the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing the PowerShell module, we can request our certificate (replace
    the DNS suffix with your value):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get a message that you need to create the `TXT` entries in your public
    DNS server required for the domain verification process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4c8739c-4aec-47db-a9a7-f495b63d1a2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's encrypt verification entries
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the values in your public DNS like in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that it requires some time for the values to become active. After
    creating the entries, you can press any key to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a successful validation, you''ll get a message that you can remove the
    values from your public DNS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5700560-539d-40a8-90b8-7ed43f2d1c6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Removal note for Let's encrypt verification option
  prefs: []
  type: TYPE_NORMAL
- en: 'Your new certificate is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99920670-2412-4eb6-b889-221fb22f30bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Newly created certificate information
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to find and import the certificate on every server in our environment.
    Use the following cmdlet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94fb89b8-ad74-4639-9bc1-f7c86ed03b29.png)'
  prefs: []
  type: TYPE_IMG
- en: Certificate information
  prefs: []
  type: TYPE_NORMAL
- en: Just type `.\cert.pfx` and hit *Enter,* and then follow the import wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose Local Machine for the storage location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4aef7c60-f41d-4d3f-8c19-49b2a8b74604.png)'
  prefs: []
  type: TYPE_IMG
- en: Certificate Import Wizard
  prefs: []
  type: TYPE_NORMAL
- en: 'The default password used from the PowerShell module to protect the `PFX` file
    is `poshacme`. Choose Mark key as exportable only if you want to export the file
    with your own password to use it on other servers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8708ee63-50c6-49fa-bab9-6a39a33583dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Certificate import options
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the certificate management console for the local machine store with
    the `certlm.msc` command and you are able to verify the installed Certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70dc1696-dc19-4869-a68c-43b2431d5e9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Certificate store and Subject Alternative Names
  prefs: []
  type: TYPE_NORMAL
- en: We don't show this procedure in every following chapter, so be aware that you
    always install the certificate on a new server in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have finished all the preparation tasks, we can install `ADFS` and
    the `Web Application Proxy` for our demo application installations.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the ADFS farm on YDADS01
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our environment, we will install the `ADFS` farm on our domain controller.
    In production, this is not always the recommended option, but for cost saving,
    we'll use this option. Let's start!
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the internal DNS entry for the `ADFS` farm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the internal DNS entries for the demo applications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `ADFS` **group managed service account** (**gMSA**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the `ADFS` farm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable `IdP Initiated Signon Page`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Check your `ADFS` infrastructure installation, opening the provided links in
    your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we connect `ADFS` to our Azure AD and change to a federated environment.
    We use the `SupportMultipleDomain` options to be ready for later demonstrations,
    where we integrate a second domain suffix and an additional Active Directory forest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, we install and configure the `Web Application Proxy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the Web Application Proxy on YD1URA01
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will install the `Web Application Proxy` on `YD1URA01` to provide external
    access to our `ADFS` infrastructure by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open an evaluated PowerShell instance and use the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will publish Active Directory `Federation Services` with the `Web
    Application Proxy`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create the entries in the public DNS for `ADFS` and the demo
    applications, where you need to use your DNS server names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will test the external `ADFS` functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your administrative virtual machine or any other external client, open [https://login.inovitdemos.ch/adfs/ls/idpinitiatedsignon.aspx](https://login.inovitdemos.ch/adfs/ls/idpinitiatedsignon.aspx) in
    a browser, and log in with one of your test users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we have a working `ADFS` and `Web Application Proxy` infrastructure. The
    only missing actors are the demo applications that we will implement now on the
    `YD1APP01` server and subscribe to several cloud services.
  prefs: []
  type: TYPE_NORMAL
- en: Installing demo applications on (YD1APP01) for ADFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our tasks in this and later chapters, we need to install a SQL Server and
    Management Tools instance on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following software needs to also be installed on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio ([https://bit.ly/2NzB14g](https://bit.ly/2NzB14g)) with the following
    options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7ced695a-3e78-4023-9d45-f055d7d665dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Visual Studio package installation options
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we start with the **Internet Information Service** (**IIS**) base installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install IIS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we install the SQL instance. Create the SQL organizational unit in your
    Active Directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the service accounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can do a standard installation of SQL Server 2017 (Trial Edition: [https://bit.ly/2FoSE6z](https://bit.ly/2FoSE6z)
    ) with a default instance. You can follow the guidance at [https://bit.ly/2lKJ9mi](https://bit.ly/2FoSE6z)
    to install the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just use the following parameters to install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In general, use the default settings
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add just the database engine and the Full-Text Index as features
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the current user as administrator
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the service accounts for the database engine and the SQL Agent; choose the
    start type to be automatic
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and install SQL Management Studio
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After the installation, you should be able to connect to the new SQL instance
    with SQL Management Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0fca3397-1c5d-4889-9aeb-94834713f186.png)'
  prefs: []
  type: TYPE_IMG
- en: Connecting to the SQL instance with SQL Management Studio
  prefs: []
  type: TYPE_NORMAL
- en: We use the test site from the Microsoft blog at [https://bit.ly/2QDIqQN](https://bit.ly/2QDIqQN)
    (credit: Emmanuel Boersma), to demonstrate the different authentication methods.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the authentication demo apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to change the bold values to create all demo apps with the following
    values:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`basic`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kerberos`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ntlm`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, will add an HTTPS binding to every demo app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b02d728-d2da-414a-a5f8-7c66d186d7a4.png)'
  prefs: []
  type: TYPE_IMG
- en: IIS demo app configuration overview
  prefs: []
  type: TYPE_NORMAL
- en: Do this for every app!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3ab3d38-2acc-4f33-9182-ea545b9edfd8.png)'
  prefs: []
  type: TYPE_IMG
- en: IIS binding configuration
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to work on some extra tasks for the applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with the claims app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the claims demo app package from the code package and execute the script
    (change it to your values before execution):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Connect the HTTPS binding of the claims demo app to your certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s do the tasks for the `kerberos` app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create and configure a service account on`YD1ADS01` to run the application
    pool with the name `svckrbapp`, and with the password never expires option selected.
    Note the password so you can provide it in the following configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to configure the correct Service Principal Name for the Kerberos
    Delegation scenario later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the Kerberos delegation on your `YD1APP01` and `YD1URA01 `computer
    account (for external access) with the `svckrbapp` user account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff1fc34c-2871-41f1-82d7-4a2b80a7bbfe.png)'
  prefs: []
  type: TYPE_IMG
- en: Kerberos Delegation configuration in AD
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to jump to your `YD1APP01` server to configure the Kerberos application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Application pools, click Add a new application pool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the pool Kerberos website and leave the other default values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Advanced Settings and change the identity to the `svckrbapp` account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Kerberos website and click Advanced Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the application pool to the newly created one: Kerberos website.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under IIS Authentication, enable Windows Authentication and disable Anonymous
    Authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Windows Authentication | Advanced Settings | Clear Enable Kernel-mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the content of the `authpage` folder from the code package to the Kerberos
    root directory at `C:\inetpub\kerbroot`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will configure the `ntlm` app:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the NTLM website and click Advanced Settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the application pool to Kerberos website
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under IIS Authentication, enable Windows Authentication and disable Anonymous
    Authentication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Windows Authentication | Advanced Settings | Clear Enable Kernel-mode
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Windows Authentication | Advanced Settings | Providers and leave only
    NTLM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the content of the `authpage `folder from the code package to the NTLM
    root directory at `C:\inetpub\ntlmroot`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will configure the `basic` app:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the content of the `authpage` folder from the code package to the basic
    root directory at `C:\inetpub\basicroot`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the IIS manager, go to the `basic` app and configure the authentication so
    that just the basic authentication is enabled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot your `YD1ADS01`, `YD1APP01`, and `YD1URA01` servers before we move on
    to the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have finished the on-premises demo apps, we need to sign up for
    some cloud demo apps.
  prefs: []
  type: TYPE_NORMAL
- en: Subscribing to demo apps (Azure AD)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete all the authentication and information protection labs, we need
    to register for the following cloud applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign up for a *salesforce developer account: [https://developer.salesforce.com/signup](https://developer.salesforce.com/signup)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign up for a service now developer account:[ ](https://bit.ly/2Ji2Ta9)[https://bit.ly/2FniUOC](https://bit.ly/2FniUOC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign up for a business dropbox account trial: [https://bit.ly/1KYht6o](https://bit.ly/1KYht6o)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign up for a LinkedIn account: [https://bit.ly/1k7JbKB](https://bit.ly/1k7JbKB)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign up for a *Twitter account: [https://bit.ly/1k7JbKB](https://bit.ly/2Ji2Ta9)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign up for a Google account: [**https://bit.ly/2reCBP3**](https://bit.ly/2reCBP3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign up for a Okta developer account: [https://bit.ly/2IOw3ix](https://bit.ly/2IOw3ix)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign up for a Proxyclick trial: [https://bit.ly/2D5BKqV](https://bit.ly/2D5BKqV)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The applications marked with * will be used in this chapter and the other one
    in the [Chapter 8](efbe1917-c755-4449-b29e-fa4a21e819fd.xhtml), *Using Azure AD
    App Proxy an**d Web Application Proxy* and the following.
  prefs: []
  type: TYPE_NORMAL
- en: After the successful trial or developer accounts, we can start with our journey
    through the capabilities of Azure AD and ADFS.
  prefs: []
  type: TYPE_NORMAL
- en: Azure AD authentication deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will build applications for our users and work through
    the different authentication mechanisms provided by Azure AD. All the configurations
    we do in this section will be done with global administrator rights and on the
    Azure portal, [https://portal.azure.com](https://portal.azure.com). We will start
    with Salesforce configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Azure Active Directory blade and click Enterprise applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under All applications, click New application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd9fe36b-62e7-4d3b-b867-44228d1579b1.png)'
  prefs: []
  type: TYPE_IMG
- en: New application creation context
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `Salesforce` in the search field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7cb4b682-19cb-4d96-91ff-fd16e362ad61.png)'
  prefs: []
  type: TYPE_IMG
- en: Salesforce enablement
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Single sing-on, change to SAML authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bfce6ec2-038b-40c2-ac48-458c7b7841d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing SAML as the authentication method
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the SAML Signing Certificate section and click Download on Certificate
    (RAW):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/982902b6-7a23-4c18-8eaf-a5f80d5db248.png)'
  prefs: []
  type: TYPE_IMG
- en: Downloading the signing certificate
  prefs: []
  type: TYPE_NORMAL
- en: Now, log in to your Salesforce account and navigate to Identity | Single Sign-On
    Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the SAML settings and click SAML Enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e51bf40-339c-4d68-b688-816db782af02.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuration of SAML in Salesforce
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create new **SAML Single Sign-On Settings**; click New:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01836c54-7d3f-4b8d-9877-371fd0eedcaf.png)'
  prefs: []
  type: TYPE_IMG
- en: New settings dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'To gather the values for the configuration, you need to jump back to your Azure
    portal and copy the three links to Notepad:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b2d7853-6a22-462b-9710-c2528bfa4b35.png)'
  prefs: []
  type: TYPE_IMG
- en: Salesforce configuration information about the Azure AD endpoints
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the following information on the Salesforce configuration page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2545a68e-f69c-478a-b6f3-31bd7792c06b.png)'
  prefs: []
  type: TYPE_IMG
- en: Salesforce SAML configuration page
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to configure our Salesforce domain name under SETTINGS | Company
    Settings | My Domain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use your tenant name and click Check Availability and Register Domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/961bb4ef-5314-4ade-b773-4ce12678854f.png)'
  prefs: []
  type: TYPE_IMG
- en: Salesforce domain registration process
  prefs: []
  type: TYPE_NORMAL
- en: The registration process takes about 5-10 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the page and Edit the Authentication Configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70b65762-2947-4697-8fdc-cb99170ab5ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Authentication configuration dialog
  prefs: []
  type: TYPE_NORMAL
- en: Click Open and Upload a logo from [Chapter 1](54c375d9-b7d0-4478-8777-33935239254b.xhtml), *Building
    and Managing Azure Active Directory*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check AzureADSSO and Save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a4c5ca8-0558-447e-9282-4bcce2a342f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the Authentication service AzureADSSO
  prefs: []
  type: TYPE_NORMAL
- en: Click on login and if you are prompted to register your phone, click **I Don't
    want ...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are prompted, log in with your Salesforce administrator account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under the My Domain section, click Deploy to Users and OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we switch back to our **Azure AD** configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the Sign on URL and Identifier (Entity ID) text box values to your value, `https://<TENANT>-dev-ed.my.salesforce.com`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1be9d8fc-332d-46d7-9b08-49fc3053867b.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Salesforce SAML configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have configured SAML authentication, we can activate user provisioning
    with Salesforce by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Under the Manage section, click Provisioning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provisioning Mode drop-down list, set **Automatic.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Admin Credentials, type in the admin username and password for accessing
    Salesforce.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Obtain a secret token by switching to the Salesforce administration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9870154a-5792-4cb0-8aa0-104a2d66164d.png)'
  prefs: []
  type: TYPE_IMG
- en: Secret token creation for provisioning
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Reset Security Token and you will receive a new security token by mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30eb22f3-1080-4697-affb-bf6e1f519501.png)'
  prefs: []
  type: TYPE_IMG
- en: Get new secret token
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we configure the provisioning settings in the Azure portal. Use the token
    from your mailbox and configure a notification email address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49b26f6d-3c62-40e1-8c4c-3b4a960a8d99.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the provisioning service
  prefs: []
  type: TYPE_NORMAL
- en: 'The following message is expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56994c23-9475-49a5-a68d-f67d11ed3fbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Test the connection to the Salesforce provisioning endpoint
  prefs: []
  type: TYPE_NORMAL
- en: To use the newly deployed application, we need to create and assign a group
    to the Salesforce application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following group and assign a licensed user from the Sales department:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d7c9f53-ff94-4725-bb85-7a820e2dfae0.png)'
  prefs: []
  type: TYPE_IMG
- en: Group assignment for Salesforce app access
  prefs: []
  type: TYPE_NORMAL
- en: 'Assign this group with the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5aec567-b0a4-44d0-a6fd-57ea8d3d6df8.png)'
  prefs: []
  type: TYPE_IMG
- en: Role selection
  prefs: []
  type: TYPE_NORMAL
- en: Under Manage | Provisioning | Settings, set Provisioning Status to On and leave
    the default Scope.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the checkbox for Clear current state and restart synchronization and click
    Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Restart Synchronization window, click Yes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26722074-1765-4ce2-b22a-d533ffe53c4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Synchronization and Provisioning status information
  prefs: []
  type: TYPE_NORMAL
- en: Test the application with your assigned test user at [https://myapps.microsoft.com](https://myapps.microsoft.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following result is expected, a successful logon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6399ab9a-e1ad-4b8a-80cc-a12f68db50bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Successful logon on Salesforce with test user
  prefs: []
  type: TYPE_NORMAL
- en: We successfully deployed Salesforce, including SAML and provisioning capabilities,
    to our Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will use another feature in Azure AD with Twitter. For this, we use
    the password-based Sign-In option:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add the Twitter app from the application gallery. You already
    know the process from Salesforce:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8bfe76b4-cf37-45e6-aebd-5dd10370ce89.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding Twitter to app catalog
  prefs: []
  type: TYPE_NORMAL
- en: Next, we choose Password-based Single Sign-on mode from the Single Sign-On section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The wizard automatically sets the correct URL to Twitter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2cdc097f-0b69-4b07-a52f-7d92aeb0afb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing password-based authentication option
  prefs: []
  type: TYPE_NORMAL
- en: 'We assign the sales and marketing application access group to the application,
    and the provide the credentials we want to use and hide from the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d2c9e299-cc85-4add-9715-c983d05880ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Assigning the Twitter credentials to a group
  prefs: []
  type: TYPE_NORMAL
- en: 'You are also able to Update Credentials on the assigned groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01dd30fe-324b-4dee-a771-bd36487f8bac.png)'
  prefs: []
  type: TYPE_IMG
- en: Update credentials option
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have configured the Twitter app for our sales and marketing users,
    you can test the functionality with the user over at [https://myapps.microsoft.com](https://myapps.microsoft.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should have a Single Sign-On experience.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Some applications require access to the application''s access panel ([https://myapps.microsoft.com](https://myapps.microsoft.com)).
    In this case, the website requires a browser extension:'
  prefs: []
  type: TYPE_NORMAL
- en: To configure Microsoft Edge for the access panel extension, launch your browser
    and navigate to [https://myapps.microsoft.com](https://myapps.microsoft.com)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in as a test user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Twitter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Install Now
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the installation wizard to install the My Apps Secure Sign-In Extension
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You get a new extension notification; click Turn it on
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Relaunch the browser and navigate to [https://myapps.microsoft.com](https://myapps.microsoft.com)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in as a test user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is our first impression of Azure AD's capabilities. We will dive deeper
    in the next [Chapter 8](efbe1917-c755-4449-b29e-fa4a21e819fd.xhtml), *Using Azure
    AD App Proxy and Web Application Proxy*, and now start to configure our first
    applications in our ADFS infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: ADFS Authentication deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure a claims-based application with **WS-Federation**, we can use
    our claims demo application. With this application, you can test many features
    of ADFS with claims authentication and learn in a more practical way. Run the
    following configuration on your **YD1ADS01**. Later, we''ll configure the application
    to get more experience:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Server Manager, click Tools, and open ADFS Management.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand Trust Relationships and select Relying Party Trusts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Actions, add Relying Party Trust, and click Start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the box, type `https://claims.inovitdemos.ch`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0109ea84-b78a-4b3a-b44e-5da0370efa22.png)'
  prefs: []
  type: TYPE_IMG
- en: ADFS relying party trust configuration
  prefs: []
  type: TYPE_NORMAL
- en: Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the display name as `claims Demo Web Site` and click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select I do not want to configure multi-factor authentication settings for this relying
    party trust currently and click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Permit all users to access this relying party, and click Next | Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the Open the Edit Claim Rules dialog box for this relying party trust when
    the wizard closes and click Close.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the new app with Internet Explorer by typing `https://claims.inovitdemos.ch`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3945262b-4ff7-41b6-995b-66350ba01f71.png)'
  prefs: []
  type: TYPE_IMG
- en: Claims demo web site
  prefs: []
  type: TYPE_NORMAL
- en: The installation script automatically puts the thumbprint of the `Token-Signing`
    certificate in the `web.config` file of the claims web application. If you renew
    the `Token-Signing` certificate, you need to update the thumbprint in the application
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can gather the `Token-Signing` certificate from our ADFS instance with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16392d3a-4671-4c6f-92eb-50561f192987.png)'
  prefs: []
  type: TYPE_IMG
- en: Get the Token-Signing certificate information
  prefs: []
  type: TYPE_NORMAL
- en: 'Another good helper for several test scenarios such as SAML, WS-Federation,
    OAuth2, and the strong authentication methods is the **Claims X-Ray tool** from
    Microsoft, which you can find at [https://bit.ly/2EqoPOi](https://bit.ly/2EqoPOi),
    and it''s quite easy to configure by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open an evaluated PowerShell instance on your **YD1ADS01** and run the following
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To use OAuth2, we need to create the required OAuth client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get a WS-Federation Passive Endpoints and SAML Assertion Consumer
    Endpoint and OAuth2 configured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c274f4e7-132c-4788-856f-f86934c44e04.png)'
  prefs: []
  type: TYPE_IMG
- en: Open a browser and test the basic capabilities with one of your test users on
    the following page: [https://login.inovitdemos.ch/adfs/ls/IdpInitiatedSignon.aspx](https://login.inovitdemos.ch/adfs/ls/IdpInitiatedSignon.aspx).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose ClaimsXRay, log in, and see your token response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/985b533f-1746-41f4-98b2-18d7a83a00a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Get your claim information
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our first helper applications in place, we can start playing
    around with them. You are already able to view two sample implementations with
    WS-Federation, SAML, and OAuth.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the Claims X-Ray application, we can run several tests against our ADFS
    instance. For this, we use source at [https://bit.ly/2EqoPOi](https://bit.ly/2EqoPOi):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test our OAuth configuration with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8cce6977-847e-479b-a9c8-6936af9aa687.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing the OAuth configuration with the Claims X-Ray tool
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can analyze your response and you will see that you already work with
    OAuth2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b60a275-a90c-4372-ac06-f9d25a003309.png)'
  prefs: []
  type: TYPE_IMG
- en: View the response
  prefs: []
  type: TYPE_NORMAL
- en: 'What about if you want to translate a **SAML Token** into a **Kerberos** one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can work with the Non claims aware option in `ADFS`, which appears if you
    add a new Relying Party:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/486ea529-d160-4a3a-b71d-8ccbdf0fe7a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding the Kerberos example app
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try this with our Kerberos example application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0372bd0-76ce-4273-8e4a-d81b7c0c8b34.png)'
  prefs: []
  type: TYPE_IMG
- en: Providing a Display Name
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Next and enter [https://kerb.inovitdemos.ch](https://kerb.inovitdemos.ch) in Relying
    party trust identifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ec6d2d3-12e0-40c1-bcc6-ce5ac33d6e54.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the identifier
  prefs: []
  type: TYPE_NORMAL
- en: Click Next in the Access Control Policy section and next again until the relying
    party is added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test the application, we need to configure the Web Application Proxy to publish
    the app externally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to **YD1URA01** and publish the **Kerberos application** over at the
    Remote Access Management console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/85793156-3867-4478-9000-2e790fc1efee.png)'
  prefs: []
  type: TYPE_IMG
- en: Publishing the Kerberos app with the Web Application Proxy
  prefs: []
  type: TYPE_NORMAL
- en: Click Next and choose the Web and MSOFBA option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, choose `Kerberos Demo Web Site` and configure the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/55ad9956-01a0-4c28-9275-1732f5582b32.png)'
  prefs: []
  type: TYPE_IMG
- en: Providing the external/backend server URL and SPN
  prefs: []
  type: TYPE_NORMAL
- en: Finish the configuration and jump to your external admin virtual machine or
    any other external client
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a browser and the Kerberos website, [https://kerb.inovitdemos.ch](https://kerb.inovitdemos.ch),
    and get a successful login
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we start to test more applications, we will install the Fiddler Debugging
    tool from [https://bit.ly/2eBzw4C](https://bit.ly/2eBzw4C) to analyze our traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the Fiddler debugging tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ce2d91c6-51e4-4570-81ce-aba6d4c2aaa4.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Fiddler for authentication analysis
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the HTTPS capture options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31fe9b4f-e0b0-456b-a002-b1ca0d431f1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Capturing HTTPS traffic with Fiddler
  prefs: []
  type: TYPE_NORMAL
- en: Press *F12* to start the debugging and open a browser, and you'll see the traffic produced.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrating Azure MFA (YD1ADS01)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we just integrate Azure MFA into our ADFS farm. We will customize
    and use this option in [Chapter 8](efbe1917-c755-4449-b29e-fa4a21e819fd.xhtml), *Using
    Azure AD App Proxy and Web Application Proxy*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to generate a certificate for Azure MFA on each server
    using the following cmdlet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we set the certificate as the new credential against the Azure Multi-Factor
    Auth client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can configure the ADFS farm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterwards, we can see that Azure MFA is available as the primary authentication
    method for intranet/extranet use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c044925-ff3f-4659-931f-6d8e2d733f44.png)'
  prefs: []
  type: TYPE_IMG
- en: ADFS Primary Authentication configuration
  prefs: []
  type: TYPE_NORMAL
- en: ADFS 2019 allows you to use other third-party authentication providers as the
    primary method.
  prefs: []
  type: TYPE_NORMAL
- en: With this configuration, we have successful implemented Azure MFA in our ADFS
    farm.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of practical work, hopefully you liked it! From our perspective, it's
    always the best to work directly with the authentication methods and capabilities
    you have just learned. Working through this chapter moves you to touch Azure AD
    and ADFS to provide several authentication methods. We know that we have many
    pre-configuration tasks, but it helps you to know the application configurations
    and to apply the correct authentication configuration. You touched on WS-Federation,
    SAML, and OAuth2 methods, including Azure AD's user provisioning capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive further into the different authentication
    scenarios and also put the application proxy features in place. We'll be happy
    to see you in [Chapter 8](efbe1917-c755-4449-b29e-fa4a21e819fd.xhtml), *Using
    Azure AD App Proxy and Web Application Proxy*.
  prefs: []
  type: TYPE_NORMAL
