- en: Access Control Using AWS IAM and AWS Organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learnt and explored about how you can leverage two
    AWS services, namely AWS Config and AWS CloudTrail, to govern your Cloud environments.
    In this chapter, we will be continuing on the security journey by revisiting AWS
    IAM along with a few useful features as well as learning a bit about yet another
    service in the form of AWS Organizations!
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping this in mind, let us have a quick look at the various topics that we
    will be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What's new with AWS IAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating policies using the IAM visual editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your IAM policies using the IAM Policy Simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing AWS Organizations with a few essential concepts and terminologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own organizations using the AWS Management Console as well as
    the AWS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's new with AWS IAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we look at some of the recent enhancements made to IAM, here is a quick
    crash course on IAM for the uninitiated. AWS Identity and Access Management or
    IAM is a web service that provides secured access control mechanisms for all AWS
    services. You can use IAM to create users and groups, assigning users specific
    permissions and policies, and a lot more. The best part of all this is that IAM
    is completely FREE. Yup! Not a penny is required to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s quickly look at some interesting features provided by AWS IAM:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multi-factor authentication**: IAM allows you to provide two-factor authentications
    to users for added security. This means that now, along with your password, you
    will also have to provide a secret key/pin from a special hardware device, such
    as a hard token, or even from software apps such as Google Authenticator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration with other AWS products**: IAM integrates with almost all AWS
    products and services and can be used to provide granular access rights and permissions
    to each service as required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity federation**: Do you have an on-premise Active Directory already
    that has users and groups created? Not a problem, as IAM can be integrated with
    an on-premise AD to provide access to your AWS account using a few simple steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access mechanisms**: IAM can be accessed using a variety of different tools,
    the most common and frequently used being the AWS Management Console. Apart from
    this, IAM can also be accessed via the AWS CLI, via SDKs that support different
    platforms and programming languages such as Java, .NET, Python, Ruby, and so on,
    and programmatically via a secured HTTPS API as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the basics in mind, let us now look at some interesting and useful enhancements
    made to IAM in recent years.
  prefs: []
  type: TYPE_NORMAL
- en: Using the visual editor to create IAM policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IAM policies are used to define permissions for your IAM entities such as users,
    groups, and roles. Each policy that you create consists of one or more statements
    that include the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Effect**: This element determines whether a policy statement allows or explicitly
    denies access to a particular IAM resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action**: Actions are used to define AWS service actions within a policy,
    for example; you can specify Amazon S3 related actions such as list buckets, read
    or write to buckets, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource**: Resources are the AWS services or individual entities to which
    the actions apply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Condition**: Conditions are used to define when a particular permission is
    allowed or denied on a resource. You can leverage one or more conditions to provide
    additional granular security to your AWS resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once a policy is created, you essentially attach it to your resource which
    can be an IAM user, group or even a role. However, creating custom and granular
    IAM policies can prove to be a challenge at times especially if you are just getting
    started with AWS. To address this, AWS has provided a new and improved visual
    editor using which you can easily create customized policies on your own:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started with the visual editor, first log in to the IAM Management Console
    by selecting this URL [https://console.aws.amazon.com/iam/home](https://console.aws.amazon.com/iam/home).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged in, select the Policies option from the navigation pane. This will
    display a page that lists both the AWS Managed as well as the Customer Managed policies.
    To create a policy, simply select the Create policy option. For this scenario,
    let us create a simple S3 policy that grants full access to only a single folder
    present within an S3 bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Create policy page, ensure that the Visual editor tab is selected and
    click on the Choose a service option to filter and pick out Amazon S3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the Service selected, next click on the Select actions options to add
    the appropriate actions for our policy. Here, you can select the appropriate Access
    levels for your resource by either opting to add the actions *manually* or even
    provide individual permissions by selecting the correct access rights from each
    individual Access levels. In this case, I have opted to select the entire List level
    for permissions and the `s3:GetObject` from the Read access level followed by
    the `s3:PutObject`, and the `s3:DeleteObject` permissions from the Write access
    level. Following is screenshot of the Actions selected for your reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dee5eded-e465-466d-9aef-fe4f83254c4e.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, all actions selected here will be allowed. To deny actions explicitly,
    select the Switch to deny permissions option provided in the Actions section.
  prefs: []
  type: TYPE_NORMAL
- en: Once completed, you can now select the Resources section to add either all or
    specific resources to your new set of permissions. In this case, we will add the
    set of permissions to a specific bucket called **useast-prod-stuff-01**. To do
    so, select the Add ARN option adjoining to the bucket field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Add ARN(s) dialog box, type in the name of the selected bucket in the
    Bucket name field as depicted in the following screenshot. Once done, select Add to
    complete the process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cccd14f2-0fee-4adb-9fb2-a3ce51fd4445.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once done, you can optionally choose to add permissions to an object level
    as well. Click on the Add ARN option adjoining the object field and fill in the
    required information as we performed in the previous steps. The only addition
    here is that you can provide an additional *folder name* in the Object name field
    for a more granular permission control. Once done, click on Add to complete the
    process. Here is a screenshot of the completed resource allocation for our policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28a65ad5-7662-44fc-ab42-d1c9a533ef62.png)'
  prefs: []
  type: TYPE_IMG
- en: With the permissions and the resources set, you can optionally choose to add
    Conditions as well to your policy. To do so, select the Specify request conditions option.
    Here you can opt to select and edit conditions that match your requirements. For
    example, for this particular policy, we want the user to access the particular
    S3 bucket only from within an organization's internal network. To do so, select
    the Source IP option and type in suitable IP range or a single IP address based
    on your organization's IP range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also add additional conditions to your policy by selecting the Add
    request condition option. Here, you can customize and specify a granular condition
    using a combination of Condition key, Qualifier, and Operator as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b5d61fc-38f7-4135-9ed9-b3b1359a7915.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, the condition will check and allow only a particular AWS IAM user with
    the username joe access to the S3 bucket. You can create your own custom conditions
    using the same approach and once done, click on Add to complete the process.
  prefs: []
  type: TYPE_NORMAL
- en: With the permissions, resources, and conditions in place, select the Review
    policy option to complete the policy creation process. Provide a suitable Name and
    an optional Description for your policy before selecting the Create policy option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There you have it! Simple, wasn't it! You can use the same process to create
    highly customized and granular policies with relative ease. However, there is
    still one question that remains unanswered; how do we test and troubleshoot the
    policies without making any actual requests? That's exactly what the IAM Policy
    Simulator is all about!
  prefs: []
  type: TYPE_NORMAL
- en: Testing IAM policies using the IAM Policy Simulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With your new policy created, the next steps would be to attach it to either
    an IAM user or group and test it out. But how do you effectively test your new
    policy without having to make any actual calls or requests? That's where the new
    IAM Policy Simulator comes into play!
  prefs: []
  type: TYPE_NORMAL
- en: 'The IAM Policy Simulator is used to evaluate IAM policies in order to determine
    the most effective set of permissions and actions that you can specify without
    making any actual resource calls whatsoever. The policy simulator internally leverages
    the same policy evaluation engine that processes real requests to AWS resources;
    however, it does not make any actual service request itself. Because of this nature,
    the policy simulator is unable to report any responses from the generated requests.
    All you get as a result is whether the policy would allow or deny a particular
    action. Here are a few ways using which you can leverage the IAM Policy Simulator:'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the IAM Policy Simulator to test policies that are attached to existing
    users, groups and roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also use the simulator to test policies that are not attached yet to
    your resources by simply copying and executing them against the simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The simulator can also be used to test policies attached to various AWS resources
    such as Amazon S3 buckets, Amazon EC2 instances, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can even use the simulator to test out real world scenarios by passing various
    context keys such as *IP addresses* or *usernames* that are passed alongside the
    conditions of a policy, and much more!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get started with the IAM Policy Simulator, simply select this URL [https://policysim.aws.amazon.com/](https://policysim.aws.amazon.com/). The
    policy simulator is a separate entity that runs outside your standard AWS Console.
    Use your standard AWS IAM credentials to log in to the policy simulator if asked:'
  prefs: []
  type: TYPE_NORMAL
- en: Once logged in, you can use the simulator to test and validate your existing
    user, group and even role-based policies. To start with, let us test the policy
    we created in our earlier section of this chapter! To do so, from the Users, Groups,
    and Roles section, select the Users from the drop-down list. You should see a
    list of users present in your AWS account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the appropriate User that was used to attach the policy. In my case,
    the username was `joe`. Once selected, you will be shown all the policies that
    the user is currently associated with, in this case, we should see the custom
    S3 access policy that we created in the earlier section as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9770311d-142a-479b-8b98-a3165d016824.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the policy to view its details. You can even choose to modify and test
    the policy here using the inbuilt *policy editor*, however do note that changes
    made to the policy here are not reflected in the actual policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the policy selected, we are now ready to test it using the IAM Policy
    Simulator section. Here''s a snippet of the policy that we are going to test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As per our policy, only the user `joe` has the `s3:PutObject`, `s3:GetObject`,
    `s3:ListBucket`, `s3:DeleteObject` rights to the `useast-prod-stuff-01` bucket
    and that too if Joe is accessing the bucket from his organization's internal network
    (`10.0.0.0/24`).
  prefs: []
  type: TYPE_NORMAL
- en: To test the same, from the Select service drop-down list, select Amazon S3 option.
    Next, match either of the actions using the Select actions drop-down list. In
    this case, I've only selected the `s3:PutObject` action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once completed, from the Global Settings section, type in the adjacent values
    against the *condition keys* that appear in the policy. In this case, type in
    the username and the sourceip as depicted in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff4a14dc-1396-4be1-9e6e-11b7482e6c47.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, from the Action Settings and Results section, expand on the Resource and
    type in the ARN of the resource against which the policy needs to be tested. In
    this case, this has to be the ARN of the S3 bucket arn:aws:s3:::useast-prod-stuff-01\.
    Once done, select the Run Simulation option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the simulation running, you should get either *allowed* or *denied* results
    based on the values you provide during the simulation. Feel free to change the
    *actions* as well as the *condition keys* and re-run the simulation. With each
    attempt, you can fine tune and troubleshoot your policy without having to actually
    pass any real requests to your resources.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the same policy simulator to test out new policies that are
    not yet attached to resources. To do so, you will first need to toggle from the
    current (default) mode of Existing policies to New Policy using the Mode option
    provided at the very top of the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: Once the New Policy option is selected, you can use the Policy Sandbox to create
    new policies and test them out the same way we did a while back. Remember, however,
    that policies created or edited here are not reflected back in AWS IAM.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we come towards the end of this section. In the next section, we
    will be looking at how you can leverage AWS Organizations to effectively manage
    multiple AWS accounts with relative ease.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing AWS Organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have been working out of a single AWS account that we use for development,
    testing as well as for production purposes, but this isn't the case with many
    organizations who end up with multiple AWS accounts for a variety of purposes
    such as multiple environments, compliance issues, and so on. Each account gets
    governed and managed in its own way with no centralized ownership or control.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Organizations is a simple service that allows you to consolidate and manage
    multiple such AWS accounts all under one roof. It enables you to group AWS accounts
    into one or more collective *organizations* that you can create and manage as
    a whole.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a quick look at some of AWS Organizations key concepts and terminologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Organizations**: Organizations are consolidated views of all your AWS accounts
    in one place. Using organizations, you can centrally view and manage each of your
    AWS accounts under one roof. Organizations provide an additional functionality
    using which you can determine the type of organization you wish to create. There
    are two such feature sets, namely:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consolidated billing**: A key feature provided by AWS Organizations is the
    ability to view and consolidate each AWS accounts billing under one organization.
    This feature is selected by default when you first create an organization and
    only provides you with the consolidated billing views. For leveraging all of the
    AWS Organizations advanced features, you will have to select the All features
    option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All features**: This feature set provides the full functionality of AWS Organizations,
    including consolidated billing and many other features that provide you with better
    control over your individual accounts. Using this feature set, you can restrict
    certain AWS services from accounts; modify access roles, and much more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Root**: The root is the primary container for all your individual accounts
    used within AWS. AWS Organizations automatically creates a default root element
    for you when you first create an organization. Any changes or policies applied
    at the root level propagate to its subsequent child elements as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organizational Unit** (**OU**): OUs are containers for one or more AWS accounts.
    You can branch multiple OUs from a single OU as well, however the end of an OU
    is always an account. Here is a representational diagram depicting the interactions
    between an organization, the root element, OUs, and various AWS accounts:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**![](img/25cd1cdc-8bb6-46bc-adbe-16f3d5c34953.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accounts**: Accounts are standard AWS accounts that contain your AWS resources.
    When creating an organization, AWS marks the account from where the organization
    gets created as the *master account*. Any additional accounts added later to this
    organization are termed as *member accounts*. The master account is also responsible
    for overseeing the consolidated billing and payments for the rest member accounts
    as well as useful for inviting other AWS accounts into the organization, creating
    OUs, managing policies, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service Control Policy** (**SCP**): SCPs are essentially policies that are
    attached to roots, accounts or OUs for specifying services and actions that the
    particular account''s or OU''s user can use. For example, you can use an SCP on
    an account that is created with HIPAA compliance in mind and you want to restrict
    all users of this account to use only HIPAA compliant AWS services, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To know more about the HIPAA compliance and how it works along with AWS visit
    this URL to know more [https://aws.amazon.com/compliance/hipaa-compliance/](https://aws.amazon.com/compliance/hipaa-compliance/).
  prefs: []
  type: TYPE_NORMAL
- en: An important point to remember here is that SCPs only work when you have enabled
    the All features feature set while creating your organization.
  prefs: []
  type: TYPE_NORMAL
- en: With this basic information in hand, let us look at how you can get started
    with AWS Organizations using a few simple steps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with AWS Organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS Organizations can be set up using both the AWS Management Console as well
    as the AWS CLI. In this section, we will be exploring simple steps using which
    you can get started with your own organization in a matter of minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: From the AWS Management Console, filter out AWS Organizations using the Filter option
    or alternatively navigating to this URL [https://console.aws.amazon.com/organizations/](https://console.aws.amazon.com/organizations/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since this is the first time we are setting up an AWS Organization here, this
    particular account will now be transformed into the master account. Any other
    AWS accounts added or created to this master account will be termed as member
    accounts. Click on Create organization to get started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the time of creating an organization, you can opt to select either to Enable
    all features or Enable only Consolidated Billing based on your requirements. For
    this scenario, select Enable all features and click on Create organization once
    completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the organization created, you should see your existing account listed
    on the accounts page as shown in the following screenshot. Select the Add account option
    to add a new AWS account to our organization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8bbd5dbe-17b7-4137-bd17-4c3bfa38f132.png)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned before, AWS Organizations allows you to add existing AWS accounts
    into a new organization as well as create new accounts as a part of your master
    account itself. For this particular scenario, let us go ahead and create a new
    account called **sandbox**. Select the Create account option on the Add account page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a suitable name and email address for your new account in the Full name and
    Email fields respectively. The email that you provide has to be globally unique
    so provide an email address that has not been used so far with AWS here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the IAM role name filed, provide a suitable role name for your account.
    This role will enable you to access the new member account when signed in as an
    IAM user in the master account. Once completed, click on Create to complete the
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a snippet of the IAM Role that is created by AWS. The role grants full
    access to all AWS services and resources present in the new account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The account creation process takes a few minutes to complete. Once done, you
    should see a new account created with the name Sandbox and a new Account ID as
    well in the Accounts page of AWS Organizations. Select the sandbox account to
    view its associated ARN and ID in the adjoining pane.
  prefs: []
  type: TYPE_NORMAL
- en: 'With your account created, the next step involves creation of one or more OUs
    and moving the newly created account into an OU. For this particular scenario,
    let us go ahead and create an OU called Sandbox:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Organize accounts tab from the AWS Organizations dashboard to view
    the current hierarchical setup of the organization. From the Organizational Units section,
    select the + New Organization Unit option to get started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Create organizational unit dialog box, provide a suitable name for the
    new OU in the Name of organization unit field as shown in the following screenshot.
    Click on Create organizational unit once done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5fdd02cc-f82f-4790-af05-58ba53f63a2f.png)'
  prefs: []
  type: TYPE_IMG
- en: With the OU created, the final step in the process is to move the account into
    the newly created OU. To do so, from the same Organize accounts page, select the
    Sandbox account and click on Move.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will bring up a simple interface using which you will need to select the
    new OU to which you want to move the Sandbox account. Select the Sandbox OU and
    click on Move to compete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this step, you should have a new OU and a new account listed within it.
    You can use the same steps to create multiple OUs and accounts based on your requirements
    and needs. You can additionally provide restricted access to the services present
    in your new account by creating and assigning a new SCP to it as well:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new SCP, select the Policies tab on the AWS Organization dashboard.
    You should see a default policy with the name `FullAWSAccess` already present
    there. This is a default policy that is created by AWS the first time you create
    an AWS Organization. The sandbox environment too is currently referenced to the
    same policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a new SCP, select the Create policy option. AWS Organization provides
    you with two options when it comes to creating new SCPs. You can choose to leverage
    the Policy generator to select specific services and actions from a list and build
    your custom policy or alternatively, choose to Copy an existing SCP and edit the
    same manually. For this case, select the Policy generator option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, provide a Policy name and Description followed by selecting the Effect the
    policy should have on the applied AWS account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Organizations allows you to either whitelist (allow) or blacklist (deny)
    services based on your requirements. Blacklisting services will cause all services
    listed in the policy to be blocked by default, whereas whitelisting services will
    block all service APIs that are not listed in the policy. Let us go ahead and
    create a simple policy for our sandbox OU that allows EC2, S3, and RDS services
    while explicitly blocking AWS CloudTrail.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Choose Overall Effect section, select Allow to first create the whitelist
    of services. Use the Statement builder to select the correct service and its appropriate
    action as well. Once done, click on Add statement to add further services and
    actions as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9032107d-2367-4c09-9e20-511aa6ae4279.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you are done with adding the required statements, simply select the Create
    policy option to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the policy created, you can attach the same to an existing account, OU,
    or even root by simply selecting the policy from the Policies page and selecting
    either of the root, accounts, or organization units options as required. However,
    before you proceed further, you will first need to enable SCP policy types for
    your root account. To do so, select the Root option from the Organize accounts tab.
    In the adjoining details pane, select enable next to the Service control policies section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this completed, you can now proceed with attaching the newly created policy
    to an entity within your organization. Remember, by attaching the policy to the
    root domain, you effectively propagate the policy down to its members as well.
    This includes the sub OUs and accounts that you may have created. For this particular
    case however, select the Accounts option and click the Attach option below the
    listed Sandbox environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There you have it! A simple way using which you can create and manage your AWS
    accounts with utmost ease. Next, we will look at how you can achieve the same
    results by leveraging the AWS CLI as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating and managing AWS accounts, OUs and SCPs using the CLI has its own
    bit of advantages. For example, you can easily automate the entire account creation
    process and make it faster and easier to on-board new teams within your organization,
    and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step involved in this exercise is to create the organization and
    set it to use all features, just as we performed with the AWS Management Console.
    To do so, type in the following command as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: However this command may result in an error message for those of you who already
    have associated your AWS account with an organization.
  prefs: []
  type: TYPE_NORMAL
- en: You can alternatively pass the `CONSOLIDATED_BILLING` value for the `--feature-set` parameter
    depending on your organization's requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the organization in place, let us go ahead and create an AWS account for
    our organization, but before we do that, we need to execute just one command that
    will provide us with the organization''s root''s ID. The ID will be in the form
    of `r-<XY00>`. Make a note of the same for later steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With the root ID noted type in the following command to create a new account.
    In this case, we are going to create a new account with the name of `prod`. Remember
    to substitute the `<EMAIL_ID>` field with a globally unique value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a snapshot of the command''s output. Make a note of the new account''s
    status ID in the format `car-<UNIQUE_ID>` as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/628de4ef-8741-47dd-a67e-0794ce84a780.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use this status ID to check whether the account creation has completed
    successfully or not by typing in the following command. Replace the `car-<UNIQUE_ID>` with
    the value copied from the earlier step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view the newly created accounts ID by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**aws organizations list-accounts**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the new account is created, we can proceed to create a new OU and move
    the account over to the new OU. In this case, we are naming the new OU as `production`.
    Substitute the value of `r-<XY00>` with the root ID that we made a note of from
    our earlier steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The output of this command yields two important values, first is the ARN of
    the new OU and the second is the OU's ID which is in the form of `ou-<XY00>-<UNIQUE_ID>`.
    Make a note of the same for the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the account and OU are created, we simply have to move the account
    into the new OU. To do so, type in the following command while substituting the
    correct values for the `account-id`, `parent-id`, and the `OU-id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b52e917d-bae0-4464-9ccf-e4867d65cfb2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s it! You have just created a brand new AWS account and moved it into
    a new OU as well with a few simple commands! It''s that easy! However, you can
    take things a bit further by creating a new SCP and attaching the same to our
    newly created OU. Let us assume for a moment that the particular OU that we have
    created can only allow certain AWS services to run as a part of the production
    environment. To do so, we first need to create a new SCP as shown in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the SCP is whitelisting EC2, RDS, and DynamoDB however feel free
    to modify to suit your own requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the SQP into a new file named as `policy.json` and save it. Next, type
    in the following command to create it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With the policy created, you should receive a policy ID in the form of `p-<UNIQUE_ID>`.
    Make a note of the same. Next, use the following command to attach the newly created
    policy to our OU:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That's it! You have just successfully attached a new policy to your OU. You
    can use the same syntax to attach the policy directly to each individual account
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Planning your next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are still plenty of things worth trying out when working with AWS Organizations.
    Here are a few recommendations for the same:'
  prefs: []
  type: TYPE_NORMAL
- en: First up, as a best practice, you should always monitor your individual organizations
    and make sure that each change is tracked and reported. You can leverage both
    AWS CloudTrail as well as AWS CloudWatch events to accomplish the same. Monitoring
    the organizations is essential as it helps you to ensure that no unwanted changes
    affect the compliance of your accounts and environments. You can read up more
    on how you can leverage AWS CloudTrail and AWS CloudWatch events for monitoring
    organizations at [https://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, I would also recommend that you try out the AWS provided end-to-end
    account creation process here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://aws.amazon.com/blogs/security/how-to-use-aws-organizations-to-automate-end-to-end-account-creation/](https://aws.amazon.com/blogs/security/how-to-use-aws-organizations-to-automate-end-to-end-account-creation/)'
  prefs: []
  type: TYPE_NORMAL
- en: The overall process for automating the account creation is very similar to the
    CLI commands that we executed a while back. The script accepts a few variables
    that are required to be defined first along with a few customizations of role
    names. Once done, you simply execute the shell script, which in turn calls a CloudFormation
    template to create and configure the new member account.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this, we come toward the end of yet another chapter but before we move
    on to the next, let us quickly summarize all that we have learnt so far!
  prefs: []
  type: TYPE_NORMAL
- en: We first started with a brief recap of AWS IAM and its core building blocks
    followed by learning a bit about two really useful enhancements made to IAM in
    recent times. The first was a visual editor using which you can create customized
    and granular IAM policies with relative ease, followed by an IAM Policy Simulator
    tool that helps you to create and test your policies without affecting any running
    workloads on the cloud. Post this we also learnt about AWS Organizations and how
    you can leverage it for creating and managing multiple AWS accounts under one
    roof. We also saw how easily you can create and work with root, organizations,
    and accounts using both the AWS Organizations dashboard as well as the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be learning and exploring how you can leverage
    the AWS Code Suite of services to build an entire end-to-end CICD pipeline with
    the utmost of ease.
  prefs: []
  type: TYPE_NORMAL
