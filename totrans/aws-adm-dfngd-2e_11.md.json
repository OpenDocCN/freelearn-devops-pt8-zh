["```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n  {\n    \"Effect\": \"Allow\",\n    \"Action\": \"iot:*\",\n    \"Resource\": \"*\"\n  }\n  ]\n}\n```", "```\n# sudo apt-get update \n# sudo apt-get install nodejs npm \n# node -v && npm -v \n```", "```\n# npm install aws-iot-device-sdk \n```", "```\n# vi test1.js \n//Connection parameters \nvar awsIot = require('aws-iot-device-sdk'); \nvar device = awsIot.device({ \n   keyPath: '<PATH_TO_PRIVATE.PEM.KEY>', \n  certPath: '<PATH_TO_CERTIFICATE.PEM>CRT>', \n    caPath: 'root-CA.crt', \n  clientId: '<THING_NAME>', \n    region: '<REGION>', \n      host: '<IoT_DEVICE_REST_API_ENDPOINT>' \n}); \n//Connection parameters end \n\n//Device Object \ndevice \n.on('connect', function () { \nconsole.log('Yaaa! We are connected!'); \n}); \n```", "```\n# node test1.js \n```", "```\n# vi test2.js \n//Connnection parameters \n. . . . . \n//Connection parameters end \n\n//Device Object \ndevice \n.on('connect', function () { \nconsole.log('Yaaa! We are connected!'); \ndevice.subscribe('Topic0'); \nconsole.log('Subscribed to Topic'); \n}); \n\ndevice \n.on('message', function (topic, payload) { \nconsole.log('Received following message: ', topic, payload.toString()); \n}); \n```", "```\n# node test2.js \n```", "```\n# vi test3.js \n//Connnection parameters \n. . . . . \n//Connection parameters end \n\n//Device Object \ndevice \n.on('connect', function () { \nconsole.log('Yaaa! We are connected!'); \ndevice.subscribe('Topic0'); \nconsole.log('Subscribed to Topic'); \nvar msg = \"Hello from IoT Device!\"; \n      device.publish('Topic0', msg); \n      console.log (\"Publishing message: \"+msg); \n}); \n\ndevice \n.on('message', function (topic, payload) { \nconsole.log('Received following message: ', topic, payload.toString()); \n}); \n```", "```\n# node test3.js \n```", "```\n# vi test4.js \n//Connnection parameters \n. . . . . \n//Connection parameters end \n\nvar uuid = require('node-uuid'); \nvar numbers = new Array(10); \nfunction getRandomInt(min, max) { \n  return Math.floor(Math.random() * (max - min + 1)) + min; \n} \n\ndevice \n.on('connect', function () { \nconsole.log('Yaaa! We are connected!'); \ndevice.subscribe('Topic0'); \nconsole.log('Subscribed to Topic'); \n\nfor (var i = 0; i < numbers.length; i++) \n    { \n  for (var j = 0; j < numbers.length; j++) \n     { \n       numbers[i] = getRandomInt(0,1); \n       uuid[i] = uuid.v4() \n      } \n      var msg = \"{\"uuid\":\"\" + uuid[i] + \"\"\" + \",\" +\"\"\"+ \"state\":\" + numbers[i]+\"}\"; \n      device.publish('Topic0', msg); \n      console.log (\"Publishing message: \"+uuid[i],numbers[i]); \n   } \n\n}); \n\ndevice \n.on('message', function (topic, payload) { \nconsole.log('Received following message: ', topic, payload.toString()); \n}); \n```", "```\n{ \n\"uuid\":\"357d6212-3444-4f55-9784-93a265905289\", \n\"state\":0 \n} \n{ \n\"uuid\":\"ad8cb61b-f29d-4a84-a7eb-42633dd3a3c2\", \n\"state\":0 \n} \n. . . . .  \n{ \n\"uuid\":\"19492c45-0cf7-4468-b275-5b7b1bdf3a64\", \n\"state\":1 \n} \n```", "```\n# node test4.js \n```", "```\n# node test4.js\n```", "```\n# sudo tar -xzvf greengrass-<PLATFORM-VERSION>.tar.gz -C /\n```", "```\n# sudo tar -xzvf <UID>-setup.tar.gz -C /greengrass\n```", "```\n# cd /greengrass/certs/\n# sudo wget -O root.ca.pem http://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem\n```", "```\n# sudo adduser --system ggc_user \n# sudo addgroup --system ggc_group \n```", "```\n# sudo apt-get update \n# sudo apt-get install sqlite3 \n```", "```\n# cd /greengrass/ggc/packages/1.3.0/ \n# sudo ./greengrassd start\n```"]