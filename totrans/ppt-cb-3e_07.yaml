- en: Chapter 7. Managing Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章 管理应用程序
- en: '|   | *Everyone knows that debugging is twice as hard as writing a program
    in the first place. So if you''re as clever as you can be when you write it, how
    will you ever debug it?* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *每个人都知道，调试比编写程序要困难两倍。那么，如果你在编写时尽可能聪明，你又怎么调试它呢？* |   |'
- en: '|   | --*Brian W. Kernighan.* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Brian W. Kernighan.* |'
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Using public modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用公共模块
- en: Managing Apache servers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理 Apache 服务器
- en: Creating Apache virtual hosts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Apache 虚拟主机
- en: Creating nginx virtual hosts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 nginx 虚拟主机
- en: Managing MySQL
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理 MySQL
- en: Creating databases and users
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库和用户
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: 'Without applications, a server is just a very expensive space heater. In this
    chapter, I''ll present some recipes to manage some specific software with Puppet:
    MySQL, Apache, **nginx**, and Ruby. I hope the recipes will be useful to you in
    themselves. However, the patterns and techniques they use are applicable to almost
    any software, so you can adapt them to your own purposes without much difficulty.
    One thing that is common about these applications, they are common. Most Puppet
    installations will have to deal with a web server, Apache or nginx. Most, if not
    all, will have databases and some of those will have MySQL. When everyone has
    to deal with a problem, community solutions are generally better tested and more
    thorough than homegrown solutions. We''ll use modules from the Puppet Forge in
    this chapter to manage these applications.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 没有应用程序，服务器只是一个非常昂贵的取暖器。在本章中，我将展示一些使用 Puppet 管理特定软件的食谱：MySQL、Apache、**nginx**
    和 Ruby。我希望这些食谱本身对你有所帮助。然而，它们所使用的模式和技术适用于几乎任何软件，因此你可以轻松地将其调整为适合自己的目的。这些应用程序的一个共同点是它们很常见。大多数
    Puppet 安装都需要处理一个 Web 服务器，Apache 或 nginx。大多数情况下，甚至所有情况下，都会有数据库，其中一些将使用 MySQL。当每个人都需要处理一个问题时，社区解决方案通常比自家开发的解决方案经过更好的测试和更彻底的完善。我们将在本章中使用来自
    Puppet Forge 的模块来管理这些应用程序。
- en: When you are writing your own Apache or nginx modules from scratch, you'll have
    to pay attention to the nuances of the distributions you support. Some distributions
    call the apache package `httpd`, while others use `apache2`; the same can be said
    for MySQL. In addition, Debian-based distributions use an enabled folder method
    to enable custom sites in Apache, which are virtual sites, whereas RPM based distributions
    do not. For more information on virtual sites, visit [http://httpd.apache.org/docs/2.2/vhosts/](http://httpd.apache.org/docs/2.2/vhosts/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从头开始编写自己的 Apache 或 nginx 模块时，你需要关注你所支持的发行版的细微差别。一些发行版将 Apache 包称为 `httpd`，而其他发行版则使用
    `apache2`；MySQL 也是如此。此外，基于 Debian 的发行版使用启用文件夹方法来启用 Apache 中的自定义站点，这些站点是虚拟站点，而基于
    RPM 的发行版则没有这种方法。有关虚拟站点的更多信息，请访问 [http://httpd.apache.org/docs/2.2/vhosts/](http://httpd.apache.org/docs/2.2/vhosts/)。
- en: Using public modules
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用公共模块
- en: When you write a Puppet module to manage some software or service, you don't
    have to start from scratch. Community-contributed modules are available at the
    Puppet Forge site for many popular applications. Sometimes, a community module
    will be exactly what you need and you can download and start using it straight
    away. In most cases, you will need to make some modifications to suit your particular
    needs and environment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写一个 Puppet 模块来管理某些软件或服务时，你不必从头开始。许多流行应用程序的社区贡献模块可以在 Puppet Forge 网站上找到。有时，社区模块正是你所需要的，你可以直接下载并开始使用。在大多数情况下，你需要做一些修改以适应你特定的需求和环境。
- en: Like all community efforts, there are some excellent and some less than excellent
    modules on the Forge. You should read the README section of the module and decide
    whether the module is going to work in your installation. At the least, ensure
    that your distribution is supported. Puppetlabs has introduced a set of modules
    that are supported, that is, if you are an enterprise customer, they will support
    your use of the module in your installation. Additionally, most Forge modules
    deal with multiple operating systems, distributions, and a great number of use
    cases. In many cases, not using a forge module is like reinventing the wheel.
    One caveat though is that Forge modules may be more complex than your local modules.
    You should read the code and get a sense of what the module is doing. Knowing
    how the module works will help you debug it later.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 和所有社区项目一样，Forge 上有一些优秀的模块，也有一些不太优秀的模块。你应该阅读模块的 README 部分，决定该模块是否适用于你的安装。至少要确保你的发行版是受支持的。Puppetlabs
    引入了一些受支持的模块，也就是说，如果你是企业客户，他们会支持你在安装中使用这些模块。此外，大多数 Forge 模块都涉及多个操作系统、发行版和大量用例。在很多情况下，不使用
    Forge 模块就像是重新发明轮子。不过，有一点需要注意的是，Forge 模块可能比你本地的模块更复杂。你应该阅读代码并了解模块的作用。了解模块如何工作将帮助你在之后进行调试。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this example, we''ll use the `puppet module` command to find and install
    the useful `stdlib` module, which contains many utility functions to help you
    develop Puppet code. It is one of the aforementioned supported modules by puppetlabs.
    I''ll download the module into my user''s home directory and manually install
    it in the Git repository. To install puppetlabs stdlib module, follow these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用`puppet module`命令来查找并安装有用的`stdlib`模块，该模块包含许多帮助你开发 Puppet 代码的工具函数。它是
    puppetlabs 提供的上述受支持模块之一。我将把模块下载到我的用户主目录，并手动将其安装到 Git 仓库中。要安装 puppetlabs stdlib
    模块，请按照以下步骤操作：
- en: 'Run the following command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We verified that we have the right module, so we''ll install it with `module
    install` now:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经验证了我们所需的模块，因此现在将使用 `module install` 命令安装它：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The module is now ready to use in your manifests; most good modules come with
    a `README` file to show you how to do this.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该模块现在已准备好在你的清单中使用；大多数优秀模块都会附带一个`README`文件，告诉你如何操作。
- en: How it works...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: You can search for modules that match the package or software you're interested
    in with the `puppet module search` command. To install a specific module, use
    `puppet module install`. You can add the `-i` option to tell Puppet where to find
    your module directory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `puppet module search` 命令搜索与你感兴趣的软件包或软件匹配的模块。要安装特定的模块，使用 `puppet module
    install`。你可以添加 `-i` 选项来告诉 Puppet 在哪里找到你的模块目录。
- en: You can browse the forge to see what's available at [http://forge.puppetlabs.com/](http://forge.puppetlabs.com/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以浏览 Forge，查看可用的模块：[http://forge.puppetlabs.com/](http://forge.puppetlabs.com/)。
- en: More information on supported modules is available at [https://forge.puppetlabs.com/supported](https://forge.puppetlabs.com/supported).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关受支持模块的更多信息，请访问 [https://forge.puppetlabs.com/supported](https://forge.puppetlabs.com/supported)。
- en: The current list of supported modules is available at [https://forge.puppetlabs.com/modules?endorsements=supported](https://forge.puppetlabs.com/modules?endorsements=supported).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当前支持的模块列表可以在 [https://forge.puppetlabs.com/modules?endorsements=supported](https://forge.puppetlabs.com/modules?endorsements=supported)
    查看。
- en: There's more...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: Modules on the Forge include a `metadata.json` file, which describes the module
    and which operating systems the module supports. This file also includes a list
    of modules that are required by the module.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Forge 上的模块包括一个 `metadata.json` 文件，描述该模块以及模块支持的操作系统。此文件还包含该模块所需的其他模块列表。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This file was previously named Modulefile and not in JSON format; the old Modulefile
    format was deprecated in Version 3.6.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件之前被命名为 Modulefile，且不采用 JSON 格式；旧的 Modulefile 格式在 3.6 版本中已被弃用。
- en: As we will see in our next section, when installing a module from the Forge,
    the required dependencies will automatically be installed as well.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在下一节中将看到的，当从 Forge 安装一个模块时，所需的依赖项也会自动安装。
- en: 'Not all publically available modules are on Puppet Forge. Some other great
    places to look at on GitHub are:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有公开可用的模块都在 Puppet Forge 上。一些很棒的模块可以在 GitHub 上找到：
- en: '[https://github.com/camptocamp](https://github.com/camptocamp)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/camptocamp](https://github.com/camptocamp)'
- en: '[https://github.com/example42](https://github.com/example42)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/example42](https://github.com/example42)'
- en: 'Though not a collection of modules as such, the Puppet Cookbook website has
    many useful and illuminating code examples, patterns, and tips, maintained by
    the admirable Dean Wilson:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Puppet Cookbook 网站本身不是一个模块集合，但它包含了许多有用且富有启发性的代码示例、模式和提示，由令人钦佩的 Dean Wilson
    维护：
- en: '[http://www.puppetcookbook.com/](http://www.puppetcookbook.com/)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.puppetcookbook.com/](http://www.puppetcookbook.com/)'
- en: Managing Apache servers
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 Apache 服务器
- en: Apache is the world's favorite web server, so it's highly likely that part of
    your Puppetly duties will include installing and managing Apache.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 是世界上最受欢迎的 Web 服务器，因此您的 Puppet 工作职责中很可能包括安装和管理 Apache。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We'll install and use the `puppetlabs-apache` module to install and start Apache.
    This time, when we run `puppet module install`, we'll use the `-i` option to tell
    Puppet to install the module in our Git repository's module's directory.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装并使用 `puppetlabs-apache` 模块来安装并启动 Apache。这一次，当我们运行 `puppet module install`
    时，我们将使用 `-i` 选项告诉 Puppet 将模块安装到我们 Git 仓库的模块目录中。
- en: 'Install the module using `puppet modules install`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `puppet modules install` 安装模块：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the modules to your Git repository and push them out:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模块添加到您的 Git 仓库并推送：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a web server node definition in `site.pp`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `site.pp` 中创建一个 Web 服务器节点定义：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run Puppet to apply the default Apache module configuration:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Puppet 来应用默认的 Apache 模块配置：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Verify that you can reach `webserver.example.com`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您是否可以访问 `webserver.example.com`：
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Installing the puppetlabs-Apache module from the Forge causes both puppetlabs-concat
    and puppetlabs-stdlib to be installed into our modules directory. The concat module
    is used to stitch snippets of files together in a specific order. It is used by
    the Apache module to create the main Apache configuration files.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Forge 安装 puppetlabs-Apache 模块会同时安装 puppetlabs-concat 和 puppetlabs-stdlib 到我们的模块目录中。concat
    模块用于将文件片段按特定顺序拼接在一起。它被 Apache 模块用于创建主要的 Apache 配置文件。
- en: We then defined a web server node and applied the Apache class to that node.
    We used all the default values and let the Apache module configure our server
    to be an Apache web server.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义了一个 Web 服务器节点，并将 Apache 类应用到该节点上。我们使用了所有默认值，并让 Apache 模块将我们的服务器配置为 Apache
    Web 服务器。
- en: The Apache module then went and rewrote all our Apache configurations. By default,
    the module purges all the configuration files from the Apache directory (`/etc/apache2`
    or `/etc/httpd` depending on the distribution). The module can configure many
    different distributions and handle the nuances of each distribution. As a user
    of the module, you don't need to know how your distribution deals with the Apache
    module configuration.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Apache 模块会重写我们所有的 Apache 配置文件。默认情况下，该模块会清除 Apache 目录中的所有配置文件（`/etc/apache2`
    或 `/etc/httpd`，具体取决于发行版）。该模块可以配置多种不同的发行版，并处理每个发行版的细微差别。作为该模块的用户，您无需了解您的发行版如何处理
    Apache 模块配置。
- en: After purging and rewriting the configuration files, the module ensures that
    the apache2 service is running (`httpd` on Enterprise Linux (EL)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在清除并重写配置文件后，该模块会确保 apache2 服务正在运行（在企业级 Linux（EL）系统上是 `httpd`）。
- en: We then tested the webserver using curl. There was nothing returned but an empty
    index page. This is the expected behavior. Normally, when we install Apache on
    a server, there are some files that display a default page (`welcome.conf` on
    EL-based systems), since the module purged those configurations, we only see an
    empty page.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用 curl 测试了 Web 服务器。返回的只有一个空的索引页面。这是预期的行为。通常，当我们在服务器上安装 Apache 时，有一些文件会显示默认页面（在
    EL 系统上是 `welcome.conf`），由于模块清除了这些配置，我们只看到了一个空页面。
- en: 'In a production environment, you would modify the defaults applied by the Apache
    module; the suggested configuration from the README is as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，您将修改 Apache 模块应用的默认设置；README 中建议的配置如下：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Creating Apache virtual hosts
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Apache 虚拟主机
- en: Apache virtual hosts are created with the `apache` module with the defined type
    `apache::vhost`. We will create a new vhost on our Apache webserver called **navajo**,
    one of the apache tribes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 虚拟主机是通过 `apache` 模块和定义的类型 `apache::vhost` 创建的。我们将在 Apache Web 服务器上创建一个新的虚拟主机，命名为
    **navajo**，这是 Apache 部落之一。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create Apache virtual hosts:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建 Apache 虚拟主机：
- en: 'Create a navajo `apache::vhost` definition as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 navajo `apache::vhost` 定义，如下所示：
- en: '[PRE8]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create an index file for the new vhost:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为新的虚拟主机创建一个索引文件：
- en: '[PRE9]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run Puppet to create the new vhost:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Puppet 来创建新的虚拟主机：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Verify that you can reach the new virtual host:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您是否可以访问新的虚拟主机：
- en: '[PRE11]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `apache::vhost` defined type creates a virtual host configuration file
    for Apache, `25-navajo.example.com.conf`. The file is created with a template;
    `25` at the beginning of the filename is the "priority level" of this virtual
    host. When Apache first starts, it reads through its configuration directory and
    starts executing files in an alphabetical order. Files that begin with numbers
    are read before files that start with letters. In this way, the Apache module
    ensures that the virtual hosts are read in a specific order, which can be specified
    when you define the virtual host. The contents of this file are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`apache::vhost`定义的类型为Apache创建了一个虚拟主机配置文件，文件名为`25-navajo.example.com.conf`。该文件通过模板创建；文件名开头的`25`是该虚拟主机的“优先级”级别。当Apache首次启动时，它会遍历其配置目录，并按照字母顺序执行文件。以数字开头的文件会先于以字母开头的文件被读取。通过这种方式，Apache模块确保虚拟主机按照特定顺序读取，而这个顺序可以在定义虚拟主机时进行指定。该文件的内容如下：'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, the default file has created log files, set up directory access
    permissions and options, in addition to specifying the listen port and `DocumentRoot`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，默认文件已经创建了日志文件，设置了目录访问权限和选项，此外还指定了监听端口和`DocumentRoot`。
- en: The vhost definition creates the `DocumentRoot` directory, specified as 'root'
    to the `apache::virtual` definition. The directory is created before the virtual
    host configuration file; after that file has been created, a notify trigger is
    sent to the Apache process to restart.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: vhost定义创建了`DocumentRoot`目录，该目录作为'root'传递给`apache::virtual`定义。目录在虚拟主机配置文件之前创建；文件创建之后，通知触发器会发送给Apache进程以重新启动。
- en: Our manifest included a file that required the `Apache::Vhost['navajo.example.com']`
    resource; our file was then created after the directory and the virtual host configuration
    file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的清单文件包含了一个需要`Apache::Vhost['navajo.example.com']`资源的文件；在目录和虚拟主机配置文件创建之后，我们的文件也随之创建。
- en: 'When we run curl on the new website (if you haven''t created a hostname alias
    in DNS, you will have to create one in your local `/etc/hosts` file for `navajo.example.com`,
    or specify the host as `curl -H ''Host: navajo.example.com'' <ipaddress` of `navajo.example.com>`),
    we see the contents of the index file we created:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们在新网站上运行curl时（如果你没有在DNS中创建主机名别名，你需要在本地`/etc/hosts`文件中为`navajo.example.com`创建一个，或者将主机指定为`curl
    -H ''Host: navajo.example.com'' <navajo.example.com的ip地址>`），我们会看到我们创建的索引文件内容：'
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Both the defined type and the template take into account a multitude of possible
    configuration scenarios for virtual hosts. It is highly unlikely that you will
    find a setting that is not covered by this module. You should look at the definition
    for `apache::virtual` and the sheer number of possible arguments.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 定义的类型和模板都考虑了虚拟主机的多种配置场景。几乎不可能找到这个模块没有涵盖的设置。你应该查看`apache::virtual`的定义，以及可能的各种参数。
- en: 'The module also takes care of several settings for you. For instance, if we
    change the listen port on our `navajo` virtual host from `80` to `8080`, the module
    will make the following changes in `/etc/httpd/conf.d/ports.conf`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块还为你处理了几个设置。例如，如果我们将`navajo`虚拟主机的监听端口从`80`更改为`8080`，该模块将在`/etc/httpd/conf.d/ports.conf`中进行如下更改：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And in our virtual host file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的虚拟主机文件中：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So that we can now curl on port `8080` and see the same results:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以在端口`8080`上使用curl，并看到相同的结果：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And when we try on port `80`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试使用端口`80`时：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As we can see, the virtual host is no longer listening on port `80` and we receive
    the default empty directory listing we saw in our earlier example.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，虚拟主机不再监听端口`80`，我们收到的是之前示例中看到的默认空目录列表。
- en: Creating nginx virtual hosts
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建nginx虚拟主机
- en: Nginx is a fast, lightweight web server that is preferred over Apache in many
    contexts, especially where high performance is important. Nginx is configured
    slightly differently than Apache; like Apache though, there is a Forge module
    that can be used to configure nginx for us. Unlike Apache, however, the module
    that is suggested for use is not supplied by puppetlabs but by James Fryman. This
    module uses some interesting tricks to configure itself. Previous versions of
    this module used R.I. Pienaar's `module_data` package. This package is used to
    configure hieradata within a module. It's used to supply default values to the
    nginx module. I wouldn't recommend starting out with this module at this point,
    but it is a good example of where module configuration may be headed in the future.
    Giving modules the ability to modify hieradata may prove useful.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 是一个快速、轻量级的 Web 服务器，在许多场景中，比 Apache 更受欢迎，特别是在性能要求较高的环境中。Nginx 的配置方式与 Apache
    略有不同；不过，像 Apache 一样，有一个 Forge 模块可以帮助我们配置 nginx。与 Apache 不同的是，推荐使用的这个模块并不是由 puppetlabs
    提供的，而是由 James Fryman 提供的。这个模块使用了一些有趣的技巧来进行自我配置。该模块的早期版本使用了 R.I. Pienaar 的 `module_data`
    包。这个包用于在模块内配置 hieradata，为 nginx 模块提供默认值。现在我不建议从这个模块开始使用，但它是一个很好的例子，展示了模块配置未来可能的发展方向。赋予模块修改
    hieradata 的能力可能会变得非常有用。
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In this example, we'll use a Forge module to configure nginx. We'll download
    the module and use it to configure virtualhosts.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用一个 Forge 模块来配置 nginx。我们将下载该模块，并使用它来配置虚拟主机。
- en: 'Download the `jfryman-nginx` module from the Forge:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Forge 下载 `jfryman-nginx` 模块：
- en: '[PRE18]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Replace the definition for webserver with an nginx configuration:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 webserver 的定义替换为 nginx 配置：
- en: '[PRE19]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If apache is still running on your webserver, stop it:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 Apache 仍在 Web 服务器上运行，请停止它：
- en: '[PRE20]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Verify that you can reach the new virtualhost:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证是否能访问新的虚拟主机：
- en: '[PRE21]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Installing the `jfryman-nginx` module causes the concat, stdlib, and APT modules
    to be installed. We run Puppet on our master to have the plugins created by these
    modules added to our running master. The stdlib and concat have facter and Puppet
    plugins that need to be installed for the nginx module to work properly.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 `jfryman-nginx` 模块会导致 concat、stdlib 和 APT 模块被安装。我们在主节点上运行 Puppet，让这些模块创建的插件被添加到正在运行的主节点中。stdlib
    和 concat 模块包含了需要安装的 facter 和 Puppet 插件，以确保 nginx 模块能够正常工作。
- en: With the plugins synchronized, we can then run puppet agent on our web server.
    As a precaution, we stop Apache if it was previously started (we can't have nginx
    and Apache both listening on port `80`). After puppet agent runs, we verified
    that nginx was running and the virtual host was configured.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 插件同步后，我们可以在我们的 Web 服务器上运行 puppet agent。作为预防措施，如果 Apache 之前已经启动，我们先停止 Apache（因为我们不能让
    nginx 和 Apache 都监听端口 `80`）。运行 puppet agent 后，我们确认 nginx 正在运行，且虚拟主机已配置好。
- en: There's more...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: This nginx module is under active development. There are several interesting
    solutions employed with the module. Previous releases used the `ripienaar-module_data`
    module, which allows a module to include default values for its various attributes,
    via a hiera plugin. Although still in an early stage of development, this system
    is already usable and represents one of the cutting-edge modules on the Forge.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 nginx 模块正在积极开发中。模块中采用了几种有趣的解决方案。之前的版本使用了 `ripienaar-module_data` 模块，该模块通过
    hiera 插件允许模块为其各种属性包含默认值。尽管仍处于开发的早期阶段，但该系统已经可以使用，并且代表了 Forge 上最前沿的模块之一。
- en: In the next section, we'll use a supported module to configure and manage MySQL
    installations.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用一个支持的模块来配置和管理 MySQL 安装。
- en: Managing MySQL
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 MySQL
- en: MySQL is a very widely used database server, and it's fairly certain you'll
    need to install and configure a MySQL server at some point. The `puppetlabs-mysql`
    module can simplify your MySQL deployments.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 是一个非常广泛使用的数据库服务器，几乎可以确定你在某个时刻需要安装并配置一个 MySQL 服务器。`puppetlabs-mysql` 模块可以简化
    MySQL 部署。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create the example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建示例：
- en: 'Install the `puppetlabs-mysql` module:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `puppetlabs-mysql` 模块：
- en: '[PRE22]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a new node definition for your MySQL server:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的 MySQL 服务器创建一个新的节点定义：
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run Puppet to install the database server and apply the new root password:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Puppet 安装数据库服务器并应用新的 root 密码：
- en: '[PRE24]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Verify that you can connect to the database:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证是否能连接到数据库：
- en: '[PRE25]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The MySQL module installs the MySQL server and ensures that the server is running.
    It then configures the root password for MySQL. The module does a lot of other
    things for you as well. It creates a `.my.cnf` file with the root user password.
    When we run the `mysql` client, the `.my.cnf` file sets all the defaults, so we
    do not need to supply any arguments.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL模块安装MySQL服务器并确保服务器正在运行。然后，它配置MySQL的root密码。这个模块还为你做了很多其他事情。它创建了一个`.my.cnf`文件，其中包含root用户密码。当我们运行`mysql`客户端时，`.my.cnf`文件会设置所有默认值，因此我们无需提供任何参数。
- en: There's more...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the next section, we'll show how to create databases and users.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将展示如何创建数据库和用户。
- en: Creating databases and users
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库和用户
- en: Managing a database means more than ensuring that the service is running; a
    database server is nothing without databases. Databases need users and privileges.
    Privileges are handled with `GRANT` statements. We will use the `puppetlabs-mysql`
    package to create a database and a user with access to that database. We'll create
    a MySQL user Drupal and a database called Drupal. We'll create a table named nodes
    and place data into that table.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 管理数据库意味着不仅要确保服务正在运行；没有数据库，数据库服务器什么都不是。数据库需要用户和权限。权限是通过`GRANT`语句来处理的。我们将使用`puppetlabs-mysql`包来创建一个数据库，并为该数据库创建一个用户。我们将创建一个名为Drupal的MySQL用户，以及一个名为Drupal的数据库。接着，我们将创建一个名为nodes的表，并将数据插入该表。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create databases and users:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建数据库和用户：
- en: 'Create a database definition within your `dbserver` class:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`dbserver`类中创建一个数据库定义：
- en: '[PRE26]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Allow the Drupal user to modify the nodes table:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许Drupal用户修改nodes表：
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create the `drupal.sql` file with the following contents:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的`drupal.sql`文件：
- en: '[PRE28]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run Puppet to have user, database, and `GRANT` created:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Puppet以创建用户、数据库和`GRANT`：
- en: '[PRE29]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Verify that the database and table have been created:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证数据库和表是否已创建：
- en: '[PRE30]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, verify that our default data has been loaded into the table:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，验证我们的默认数据是否已加载到表中：
- en: '[PRE31]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We start with the definition of the new drupal database:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从新Drupal数据库的定义开始：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We specify that we''ll connect from localhost (we could connect to the database
    from another server) using the drupal user. We give the password for the user
    and specify a SQL file that will be applied to the database after the database
    has been created. We require that this file already exist and define the file
    next:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定将从localhost连接（也可以从另一台服务器连接到数据库），使用drupal用户。我们为该用户提供密码，并指定一个将在数据库创建后应用的SQL文件。我们要求这个文件已经存在，并接下来定义该文件：
- en: '[PRE33]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We then ensure that the user has the appropriate privileges with a `mysql_grant`
    statement:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们确保用户拥有适当的权限，通过`mysql_grant`语句：
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: There's more...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Using the puppetlabs-MySQL and puppetlabs-Apache module, we can create an entire
    functioning web server. The puppetlabs-Apache module will install Apache, and
    we can include the PHP module and MySQL module as well. We can then use the puppetlabs-Mysql
    module to install the MySQL server, and then create the required drupal databases
    and seed the database with the data.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用puppetlabs-MySQL和puppetlabs-Apache模块，我们可以创建一个完整的功能性Web服务器。puppetlabs-Apache模块将安装Apache，我们还可以包括PHP模块和MySQL模块。然后，我们可以使用puppetlabs-MySQL模块来安装MySQL服务器，并创建所需的Drupal数据库，再将数据填充到数据库中。
- en: Deploying a new drupal installation would be as simple as including a class
    on a node.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 部署一个新的Drupal安装就像在节点上包含一个类一样简单。
