- en: Chapter 7. Managing Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *Everyone knows that debugging is twice as hard as writing a program
    in the first place. So if you''re as clever as you can be when you write it, how
    will you ever debug it?* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Brian W. Kernighan.* |'
  prefs: []
  type: TYPE_TB
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using public modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Apache servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Apache virtual hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating nginx virtual hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating databases and users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Without applications, a server is just a very expensive space heater. In this
    chapter, I''ll present some recipes to manage some specific software with Puppet:
    MySQL, Apache, **nginx**, and Ruby. I hope the recipes will be useful to you in
    themselves. However, the patterns and techniques they use are applicable to almost
    any software, so you can adapt them to your own purposes without much difficulty.
    One thing that is common about these applications, they are common. Most Puppet
    installations will have to deal with a web server, Apache or nginx. Most, if not
    all, will have databases and some of those will have MySQL. When everyone has
    to deal with a problem, community solutions are generally better tested and more
    thorough than homegrown solutions. We''ll use modules from the Puppet Forge in
    this chapter to manage these applications.'
  prefs: []
  type: TYPE_NORMAL
- en: When you are writing your own Apache or nginx modules from scratch, you'll have
    to pay attention to the nuances of the distributions you support. Some distributions
    call the apache package `httpd`, while others use `apache2`; the same can be said
    for MySQL. In addition, Debian-based distributions use an enabled folder method
    to enable custom sites in Apache, which are virtual sites, whereas RPM based distributions
    do not. For more information on virtual sites, visit [http://httpd.apache.org/docs/2.2/vhosts/](http://httpd.apache.org/docs/2.2/vhosts/).
  prefs: []
  type: TYPE_NORMAL
- en: Using public modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you write a Puppet module to manage some software or service, you don't
    have to start from scratch. Community-contributed modules are available at the
    Puppet Forge site for many popular applications. Sometimes, a community module
    will be exactly what you need and you can download and start using it straight
    away. In most cases, you will need to make some modifications to suit your particular
    needs and environment.
  prefs: []
  type: TYPE_NORMAL
- en: Like all community efforts, there are some excellent and some less than excellent
    modules on the Forge. You should read the README section of the module and decide
    whether the module is going to work in your installation. At the least, ensure
    that your distribution is supported. Puppetlabs has introduced a set of modules
    that are supported, that is, if you are an enterprise customer, they will support
    your use of the module in your installation. Additionally, most Forge modules
    deal with multiple operating systems, distributions, and a great number of use
    cases. In many cases, not using a forge module is like reinventing the wheel.
    One caveat though is that Forge modules may be more complex than your local modules.
    You should read the code and get a sense of what the module is doing. Knowing
    how the module works will help you debug it later.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we''ll use the `puppet module` command to find and install
    the useful `stdlib` module, which contains many utility functions to help you
    develop Puppet code. It is one of the aforementioned supported modules by puppetlabs.
    I''ll download the module into my user''s home directory and manually install
    it in the Git repository. To install puppetlabs stdlib module, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We verified that we have the right module, so we''ll install it with `module
    install` now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The module is now ready to use in your manifests; most good modules come with
    a `README` file to show you how to do this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can search for modules that match the package or software you're interested
    in with the `puppet module search` command. To install a specific module, use
    `puppet module install`. You can add the `-i` option to tell Puppet where to find
    your module directory.
  prefs: []
  type: TYPE_NORMAL
- en: You can browse the forge to see what's available at [http://forge.puppetlabs.com/](http://forge.puppetlabs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: More information on supported modules is available at [https://forge.puppetlabs.com/supported](https://forge.puppetlabs.com/supported).
  prefs: []
  type: TYPE_NORMAL
- en: The current list of supported modules is available at [https://forge.puppetlabs.com/modules?endorsements=supported](https://forge.puppetlabs.com/modules?endorsements=supported).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modules on the Forge include a `metadata.json` file, which describes the module
    and which operating systems the module supports. This file also includes a list
    of modules that are required by the module.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This file was previously named Modulefile and not in JSON format; the old Modulefile
    format was deprecated in Version 3.6.
  prefs: []
  type: TYPE_NORMAL
- en: As we will see in our next section, when installing a module from the Forge,
    the required dependencies will automatically be installed as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all publically available modules are on Puppet Forge. Some other great
    places to look at on GitHub are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/camptocamp](https://github.com/camptocamp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/example42](https://github.com/example42)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Though not a collection of modules as such, the Puppet Cookbook website has
    many useful and illuminating code examples, patterns, and tips, maintained by
    the admirable Dean Wilson:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.puppetcookbook.com/](http://www.puppetcookbook.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Managing Apache servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache is the world's favorite web server, so it's highly likely that part of
    your Puppetly duties will include installing and managing Apache.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll install and use the `puppetlabs-apache` module to install and start Apache.
    This time, when we run `puppet module install`, we'll use the `-i` option to tell
    Puppet to install the module in our Git repository's module's directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the module using `puppet modules install`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the modules to your Git repository and push them out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a web server node definition in `site.pp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Puppet to apply the default Apache module configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that you can reach `webserver.example.com`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing the puppetlabs-Apache module from the Forge causes both puppetlabs-concat
    and puppetlabs-stdlib to be installed into our modules directory. The concat module
    is used to stitch snippets of files together in a specific order. It is used by
    the Apache module to create the main Apache configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: We then defined a web server node and applied the Apache class to that node.
    We used all the default values and let the Apache module configure our server
    to be an Apache web server.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache module then went and rewrote all our Apache configurations. By default,
    the module purges all the configuration files from the Apache directory (`/etc/apache2`
    or `/etc/httpd` depending on the distribution). The module can configure many
    different distributions and handle the nuances of each distribution. As a user
    of the module, you don't need to know how your distribution deals with the Apache
    module configuration.
  prefs: []
  type: TYPE_NORMAL
- en: After purging and rewriting the configuration files, the module ensures that
    the apache2 service is running (`httpd` on Enterprise Linux (EL)).
  prefs: []
  type: TYPE_NORMAL
- en: We then tested the webserver using curl. There was nothing returned but an empty
    index page. This is the expected behavior. Normally, when we install Apache on
    a server, there are some files that display a default page (`welcome.conf` on
    EL-based systems), since the module purged those configurations, we only see an
    empty page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a production environment, you would modify the defaults applied by the Apache
    module; the suggested configuration from the README is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Creating Apache virtual hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache virtual hosts are created with the `apache` module with the defined type
    `apache::vhost`. We will create a new vhost on our Apache webserver called **navajo**,
    one of the apache tribes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create Apache virtual hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a navajo `apache::vhost` definition as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an index file for the new vhost:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Puppet to create the new vhost:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that you can reach the new virtual host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `apache::vhost` defined type creates a virtual host configuration file
    for Apache, `25-navajo.example.com.conf`. The file is created with a template;
    `25` at the beginning of the filename is the "priority level" of this virtual
    host. When Apache first starts, it reads through its configuration directory and
    starts executing files in an alphabetical order. Files that begin with numbers
    are read before files that start with letters. In this way, the Apache module
    ensures that the virtual hosts are read in a specific order, which can be specified
    when you define the virtual host. The contents of this file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the default file has created log files, set up directory access
    permissions and options, in addition to specifying the listen port and `DocumentRoot`.
  prefs: []
  type: TYPE_NORMAL
- en: The vhost definition creates the `DocumentRoot` directory, specified as 'root'
    to the `apache::virtual` definition. The directory is created before the virtual
    host configuration file; after that file has been created, a notify trigger is
    sent to the Apache process to restart.
  prefs: []
  type: TYPE_NORMAL
- en: Our manifest included a file that required the `Apache::Vhost['navajo.example.com']`
    resource; our file was then created after the directory and the virtual host configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run curl on the new website (if you haven''t created a hostname alias
    in DNS, you will have to create one in your local `/etc/hosts` file for `navajo.example.com`,
    or specify the host as `curl -H ''Host: navajo.example.com'' <ipaddress` of `navajo.example.com>`),
    we see the contents of the index file we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both the defined type and the template take into account a multitude of possible
    configuration scenarios for virtual hosts. It is highly unlikely that you will
    find a setting that is not covered by this module. You should look at the definition
    for `apache::virtual` and the sheer number of possible arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The module also takes care of several settings for you. For instance, if we
    change the listen port on our `navajo` virtual host from `80` to `8080`, the module
    will make the following changes in `/etc/httpd/conf.d/ports.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And in our virtual host file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'So that we can now curl on port `8080` and see the same results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And when we try on port `80`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the virtual host is no longer listening on port `80` and we receive
    the default empty directory listing we saw in our earlier example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating nginx virtual hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nginx is a fast, lightweight web server that is preferred over Apache in many
    contexts, especially where high performance is important. Nginx is configured
    slightly differently than Apache; like Apache though, there is a Forge module
    that can be used to configure nginx for us. Unlike Apache, however, the module
    that is suggested for use is not supplied by puppetlabs but by James Fryman. This
    module uses some interesting tricks to configure itself. Previous versions of
    this module used R.I. Pienaar's `module_data` package. This package is used to
    configure hieradata within a module. It's used to supply default values to the
    nginx module. I wouldn't recommend starting out with this module at this point,
    but it is a good example of where module configuration may be headed in the future.
    Giving modules the ability to modify hieradata may prove useful.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll use a Forge module to configure nginx. We'll download
    the module and use it to configure virtualhosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the `jfryman-nginx` module from the Forge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the definition for webserver with an nginx configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If apache is still running on your webserver, stop it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that you can reach the new virtualhost:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing the `jfryman-nginx` module causes the concat, stdlib, and APT modules
    to be installed. We run Puppet on our master to have the plugins created by these
    modules added to our running master. The stdlib and concat have facter and Puppet
    plugins that need to be installed for the nginx module to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: With the plugins synchronized, we can then run puppet agent on our web server.
    As a precaution, we stop Apache if it was previously started (we can't have nginx
    and Apache both listening on port `80`). After puppet agent runs, we verified
    that nginx was running and the virtual host was configured.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This nginx module is under active development. There are several interesting
    solutions employed with the module. Previous releases used the `ripienaar-module_data`
    module, which allows a module to include default values for its various attributes,
    via a hiera plugin. Although still in an early stage of development, this system
    is already usable and represents one of the cutting-edge modules on the Forge.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll use a supported module to configure and manage MySQL
    installations.
  prefs: []
  type: TYPE_NORMAL
- en: Managing MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is a very widely used database server, and it's fairly certain you'll
    need to install and configure a MySQL server at some point. The `puppetlabs-mysql`
    module can simplify your MySQL deployments.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create the example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `puppetlabs-mysql` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new node definition for your MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Puppet to install the database server and apply the new root password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that you can connect to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MySQL module installs the MySQL server and ensures that the server is running.
    It then configures the root password for MySQL. The module does a lot of other
    things for you as well. It creates a `.my.cnf` file with the root user password.
    When we run the `mysql` client, the `.my.cnf` file sets all the defaults, so we
    do not need to supply any arguments.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the next section, we'll show how to create databases and users.
  prefs: []
  type: TYPE_NORMAL
- en: Creating databases and users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing a database means more than ensuring that the service is running; a
    database server is nothing without databases. Databases need users and privileges.
    Privileges are handled with `GRANT` statements. We will use the `puppetlabs-mysql`
    package to create a database and a user with access to that database. We'll create
    a MySQL user Drupal and a database called Drupal. We'll create a table named nodes
    and place data into that table.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create databases and users:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a database definition within your `dbserver` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Allow the Drupal user to modify the nodes table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `drupal.sql` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Puppet to have user, database, and `GRANT` created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the database and table have been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, verify that our default data has been loaded into the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start with the definition of the new drupal database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We specify that we''ll connect from localhost (we could connect to the database
    from another server) using the drupal user. We give the password for the user
    and specify a SQL file that will be applied to the database after the database
    has been created. We require that this file already exist and define the file
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We then ensure that the user has the appropriate privileges with a `mysql_grant`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the puppetlabs-MySQL and puppetlabs-Apache module, we can create an entire
    functioning web server. The puppetlabs-Apache module will install Apache, and
    we can include the PHP module and MySQL module as well. We can then use the puppetlabs-Mysql
    module to install the MySQL server, and then create the required drupal databases
    and seed the database with the data.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a new drupal installation would be as simple as including a class
    on a node.
  prefs: []
  type: TYPE_NORMAL
