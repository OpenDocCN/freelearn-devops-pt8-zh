- en: Reactive Architecture with Event Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Event Grid is another cloud component that represents serverless services
    in Azure. It can be considered an events gateway, able to both make our solution
    work faster and to reverse control, so our services don't have to wait for others,
    burning available resources just to be idle. It's also a great routing tool, able
    to quickly distribute load and multiply it, allowing jobs to be finished faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Grid and reactive architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to other services through Azure Event Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security features of Azure Event Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing custom events to Azure Event Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Azure Functions with Azure Event Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform exercises from this chapter you will need:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An IDE compatible with Visual Studio 2017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Event Grid and reactive architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with multiple services in the cloud, you often need to have a centralized
    service responsible for routing events to a different endpoint. This makes the
    exchange of data a piece of cake—you do not have to maintain different URLs of
    APIs, as you can leverage a common event schema and custom routing configuration
    based on, for example, event type. In Azure, such a service is called Azure Event
    Grid—a serverless event gateway, which is one of the newer cloud components available.
    With a pay-as-you-go pricing model, you can quickly build a reactive architecture
    that inverts communication between your services and makes them passive. In this
    chapter, you will learn how to work with Event Gridand integrate it with other
    Azure components.
  prefs: []
  type: TYPE_NORMAL
- en: Reactive architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started, let''s consider the architecture shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/198227b6-5af2-44f8-babc-b9fc8118346e.png)'
  prefs: []
  type: TYPE_IMG
- en: In this diagram, you can see an example flow of uploading, for instance, an
    image for an avatar from a user. A file is transferred through an **Azure App
    Service** and put into **Azure Blob Storage**. Then, it is processed by **Azure
    Functions**. While such a setup is perfectly fine, consider the following disadvantage—to
    be able to process the image, **Azure Functions** has to be notified about the
    fact that a new file was uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since** Azure Blob Storage** is unable to do so (at least with the functionality
    available publicly), the only way to achieve that is to pool a storage and somehow
    maintain processed files. While conceptually, this is not rocket science, you
    have to bear in mind that, in the cloud, when you use a resource, you pay for
    the time taken. So basically, in the preceding scenario, you would be paying even
    if no file was uploaded to the storage, since a trigger in **Azure Functions**
    (here, a Blob trigger) will have to maintain a state of files available and check
    at intervals whether something new appeared, so you will often pay for nothing.
    Now, consider the following change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d08e54c-a233-44d3-9b47-f7c584026339.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, I put an **Azure Event Grid**between **Azure Blob Storage**and **Azure
    Functions**. What has it changed? Well, functions processing a Blob do not have
    to pool storage to get info about uploaded files. This is possible thanks to version
    2 of Azure Storage (you can find a link to a description in *Further reading*section)—it
    can publish events to **Azure Event Grid** so they can then be forwarded to all
    subscribers of that particular event type. Thanks to this, **Azure Functions**can
    remain passive—they will be called by **Azure Event Grid**when needed, so if nothing
    is uploaded, you will pay nothing. This is, of course, an element of serverlessarchitecture—being
    able to pay for usage makes such a setup possible.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you will not be charged if you only use the Consumption plan in Azure
    Functions. If you have to use an App Service Planfor your functions, you will
    not be able to save money with the preceding architecture—on the other hand, you
    will save some compute power, which could be used for other workloads, so reactive
    architecture concepts will still be valid.
  prefs: []
  type: TYPE_NORMAL
- en: This is what we call **reactive architecture**—a model where your components
    can remain idle and wait for upcoming requests.
  prefs: []
  type: TYPE_NORMAL
- en: Topics and event subscriptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are five main topics when it comes to working with Azure Event Grid:'
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Topics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event subscriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will go through each of them to build a better understanding
    of this service.
  prefs: []
  type: TYPE_NORMAL
- en: Event sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, Azure Event Gridsupports the following event sources:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Blob Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Media Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Subscriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource Groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Event Hubs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure IoT Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Service Bus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom topics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage **General-purpose v2** (**GPv2**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see, there are plenty of different services integrated and available
    when working with Event Grid. While we know which event sources we can use, we
    still have not defined what an event sourceactually is. Take a look at the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0ef7d40-e691-4fc4-afc1-45e10a8a09a9.png)'
  prefs: []
  type: TYPE_IMG
- en: In this scenario, a file uploaded to **Azure Blob Storage**triggers an event,
    which is then fetched by **Azure Event Grid**and passed further to the consumer. The
    event sourceis the origin of an event that was then handled by Event Grid. When
    working with this service, all event sources have a way to publish an event and
    communicate with **Azure Event Grid**. There is also one extra event source possible—it
    is Custom topics. It is possible to publish your own custom events directly to
    an Event Gridendpoint—we will cover that later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous example, we covered event sources. Let''s take a similar scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0826e92-15b9-4cce-be5b-2ed15a92845a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once more, we have **Azure Blob Storage**as a publisher, but this time, events
    are forwarded to both **Azure Functions**and **Azure Event Hub**. In that architecture,
    services presented on the right are event handlers. Here is a list of currently
    supported services:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Logic Apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebHooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Queue Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid Connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Event Hubs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So what actually is an event handler? You can think about it as a processor
    of an event—based on the configuration, Azure Event Gridwill forward events to
    handlers, where they will be deserialized and analyzed.
  prefs: []
  type: TYPE_NORMAL
- en: In general, Azure Event Griduses a common event schema when delivering events
    to handlers. What is more, it can deliver more than just one event at the time—you
    have to be prepared for a possible batch of events.
  prefs: []
  type: TYPE_NORMAL
- en: Topics and subscriptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A topic is a general messaging concept that allows for one-to-many communication.
    It works with subscriptions in the following way—you publish a message to a topic
    in a messaging service, and then subscribe to it with your consumers. In Azure
    Event Grid,you are responsible for creating a topic—that means that you have to
    publish a custom application that handles communication between publishers and
    the Event Gridendpoint. You can have a single application, or many of them—this
    depends on your design and expected throughput. Additionally, you have to configure
    subscriptions—in the next section, you will see how to do that, and how to set
    up proper filtering. The general structure could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10a33702-ca0a-4e89-8bc3-db2bb540c0b1.png)'
  prefs: []
  type: TYPE_IMG
- en: The left side of the preceding diagram represents publishers and a topic (the
    line between a publisher and **Azure Event Grid**) and subscriptions with handlers.
    Each line is a different topic and subscription. The whole configuration and routing
    resides within Event Grid and can be managed there.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Gridtakes care of retrying undelivered messages. This can be configured
    with a custom policy that defines the rules for retrying. Additionally, when a
    custom topic is used, events have to be published in batches to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, we can define both a topic and a subscription as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Topic**: A channel between a service and Azure Event Grid, which allows the
    former to push an event to the Azure service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription**: A channel between Azure Event Grid and a service, which is
    used to retrieve events in the former'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting services through Azure Event Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you know something about what Azure Event Gridis and how it works,
    we will try to test it and create a working solution. We will start by creating
    an instance in Azure Portal and configuring it to accept and route events. You
    will see also what the schema of an event is and how to leverage it so you can
    send custom events that will be handled by Event Grid.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Azure Event Grid in Azure Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with Azure Event Grid, do the followingin Azure Portal:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on + Create a resourceand search for `Event Grid`. From the list, select Event
    Grid Topicand click Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see a really simple form, where you have to enter the name of an instance
    of a service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4c8bc6b-8043-462f-9e2b-8b4fe92d5775.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click Create and wait a moment, an instance of a service will be created.
    Once it is finished, you can go to your resource to see an empty instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b1bb9eb-5975-40d3-97d5-2354005ed02e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, there is no subscription created yet. What is more, there is
    also no topic, which is what would send events to our instance. Before we proceed,
    let''s take a look what we have on the Overviewblade. Besides the option to create
    a subscription, there is also one other important thing—Topic Endpoint. You will
    use this to publish events from your custom topics. There is also one important
    blade—Access keys. When you click on it, you will see two keys that can be used
    to authorize access to Azure Event Grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bc31311-144d-4a98-b89c-6e592ae736c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s try to create a topic with a subscription. To do so, we will use
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This PowerShell code should create a Resource Group topic that will push events
    to an endpoint defined in the `$myEndpoint`variable. However, if you execute the
    code, the following error will occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What has happened? Well, it turns out that we cannot create a subscription,
    because our endpoint is not validated. How can we validate our endpoint so it
    will be possible to create a subscription? I will explain shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Grid security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides access tokens, Azure Event Gridalso checks whether or not an endpoint
    is valid and secure. This validation will not happen for the following handler
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Logic Apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Functions when `EventGridTrigger` is used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The rest of the endpoints (and especially those triggered by an HTTP request)
    have to be validated to be used. Here is how that kind of validation is processed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, `SubscriptionValidationEvent`is sent to an endpoint containing multiple
    fields, such as topic, validation code, and others. Additionally, a special `aeg-event-type:
    SubscriptionValidation` header is sent.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Secondly, Event Gridexpects a success response containing a validation code
    that was sent in the request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example of a validation event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this scenario, to validate an endpoint, you would have to return the following
    response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After that, you should be able to create a subscription.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, the validation event also contains the `validationUrl`property.
    It allows you to manually validate a subscription, instead of redeploying code
    with a proper application logic.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a subscription
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you are familiar with endpoint validation topic, we can try to create
    a subscription once more:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, I created a function that is triggered by an HTTP request. I wrote
    it quickly in CSX, so I did not have to compile and deploy it manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to the preceding code, I can see that a validation event was sent to
    an endpoint. Now, depending on the version of toolset you have, you will have
    the `validationUrl` value in the payload.
  prefs: []
  type: TYPE_NORMAL
- en: 'To leverage this feature, you will have to install the Event Grid extension
    for Azure CLI 2.0—a link for download can be found in the *Further reading*section.
    To progress without this feature, we will have to change the code of our function
    a little bit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that I am deserializing the validation event as `ValidationEvent[]`, so
    it is actually an array of events. It is important to bear this in mind to avoid
    possible issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If events were sent to an endpoint that wasn't validated, the batch will be
    divided into two parts, one with a single validation event, and the second one
    with the actual events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you execute PowerShell code that failed earlier, you should be able
    to create a subscription. To check whether it all works correctly, you can run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see the result in my case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that subscriptions created with the API are not visible in the Portal.
    This should be changed soon, but as long as this issue persists, stick mainly
    to the **command-line interface** (**CLI**) for maintaining Azure Event Grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if, for example, you create a resource in the resource group that publishes
    events to Event Grid, an event similar to the following will occur:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to create a connection like this without the CLI—if you
    go to your resource group, you will see the Eventsblade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/472bce37-777f-447a-bf83-9e5ef01f0d37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the + Event subscriptionbutton, you will see a form that
    makes the whole process much easier. You can use this form if you prefer configuring
    services in the Portal, instead of the CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d2f27cd-aeea-4492-98db-df2e14edafd3.png)'
  prefs: []
  type: TYPE_IMG
- en: Publishing custom events to Azure Event Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have talked about integrating Azure Event Gridwith already built-in
    publishers and topics, using Resource Group as an example. I mentioned at the
    beginning of this chapter that this service is capable of handling custom topics,
    making it a really flexible solution that can act as an event gateway. In this
    section, we will cover this topic and try to use Event Gridas our router for handling
    and maintaining the routing of our events.
  prefs: []
  type: TYPE_NORMAL
- en: Event gateway concept
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98da7232-06aa-48bf-aaa6-8dd549b96873.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you have a single events producer and four different handlers. Now, if
    you imagine that **Publisher **publishes only custom events, you can see that Event
    Gridis able to distribute them among `N` different handlers (which do not have
    to be the same type—it can be a mix of any supported handlers available). Of course,
    this concept can also be used with publishers such as Resource Group, Azure Blob
    Storage, or Azure Event Hub—personally, I think that it is slightly more useful
    for custom scenarios. Let''s take an example—you are publishing an `OrderCreated`event.
    With Azure Event Grid,you could now distribute it to different handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OrderConfirmation`: For example, for sending a confirmation via a mail message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OrderProcessor`: For handling the actual logic of processing an order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OrderNotification`: For notifying someone that there is an order that has
    to be validated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, the preceding steps rely only on your logic—it should, however, give
    you a hint of what can be done with routing and distributing events using Azure
    Event Grid.
  prefs: []
  type: TYPE_NORMAL
- en: Handling a custom event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we send a custom event, we have to take a look at the Event Gridevent
    schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it is a simple JSON array, containing many different events.
    Let''s describe each field here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`topic`: This defines a full path to an event source (for example, Azure Blob
    Storage).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subject`:This defines a path to an event subject (so, in the case of publishing
    events from a resource group, this could be a full path to an Azure resource,
    or, in the case of Azure Blob Storage, this would be a Blob path).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id`: This is the unique identifier of an event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eventType`: A type of a published event (such as `Microsoft.Resources.ResourceWriteSuccess`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eventTime`: This defines when an event was published using the publisher''s
    UTC time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: The payload of an event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataVersion`: An event schema version defined by the publisher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metadataVersion`: A revision number of event metadata schema version, provided
    by Event Grid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, if you want to publish an event, you will have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Always use an array of events, even if you are publishing a single one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either use an empty topic or use the following syntax, which reflects the fact,
    that each topic is also an Azure resource `/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.EventGrid/topics/<eventgrid-name>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `aeg-sas-key`or `aeg-sas-token`to authorize a request by providing a key
    from the Access keysblade
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, you can find an example request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is correct, you should see an `HTTP 200` response. Now, you may
    wonder how you can receive such a request. If you go to your instance of Azure
    Event Gridand click on the + Event Subscriptionbutton, you will see a form where
    you can create a new subscription:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22049e7c-6258-4cdc-9c69-54051b9eca68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You saw this form before, when we were discussing creating a subscription directly
    from a resource group. There are, however, some important things to mention:'
  prefs: []
  type: TYPE_NORMAL
- en: Subscribe to all event types**:** You have an option to either route all events
    types to an endpoint, or just to the ones defined by you (you will be able to
    enter any event type you wish once you uncheck the checkbox). This is very useful
    for the proper events routing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Endpoint Type: You have a choice of different endpoints, including WebHook, Azure
    Event Hub,and Hybrid Connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Event Schema: You can choose to use either Event Gridschema or a more common
    Cloud Events schema, the latter of which is an open standard specification and
    can be used to introduce a custom schema for all the components in your system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FILTERS: You can additionally filter events of a specific type by filtering
    them with the subject field value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you fill all values, click on Createto actually create it.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that an endpoint has to be validated to successfully create a subscription!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you send an example request, you should be able to receive it in your
    handler (in my case, Azure Functions):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You may wonder what will happen if your event handler doesn't return a success
    response to Azure Event Grid. In that scenario, a retry will be performed.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Gridconsiders only `HTTP 200` and `HTTP 202` responses as successful.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Event Griduses an exponential backoff retry policy. This means that
    each consecutive retry will be performed with an increased delay between that
    one, and the next retry. You can customize this behaviour by providing a custom
    retry policy. A link to that feature can be found in the *Further reading*section.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Azure Functions with Azure Event Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing that we'll cover for Azure Event Gridis integration with Azure
    Functions. As mentioned earlier, if you use Event Gridto publish events to Azure
    Functions triggered by an HTTP trigger, you will have to validate an endpoint.
    This is not the best solution, but fortunately, it is possible to use `EventGridTrigger`,
    which allows us to skip the endpoint validation step when configuring services.
    This topic itself is quite big, so we will not cover each and every problem possible;
    however, I will point you to the specific parts of the documentation, which will
    help you understand the topic even better.
  prefs: []
  type: TYPE_NORMAL
- en: EventGridTrigger in Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In general, the easiest way to integrate Azure Functionswith Azure Event Gridis
    to use `HttpTrigger`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the most generic setup. It provides direct access to a request message
    and enables you to control its specific parts. There is, however, an alternative
    to the preceding setup—we can instead use `EventGridTrigger`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'With `EventGridTrigger` here, you can directly access the payload of a request,
    which is pretty useful if you are not interested in the remaining part of it.
    Additionally, you do not have to validate an endpoint. The preceding function
    can be used a bit differently if you use version 2 of the Azure Functionsruntime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, instead of binding to `JObject`here, you can access a well defined `EventGridEvent`.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to use `EventGridEvent`even with version 1 of the Azure Functionsruntime.
    To do so, you have to manually reference `Microsoft.Azure.EventGrid.Models.EventGridEvent`
    by installing the `Microsoft.Azure.EventGrid` NuGet package.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily create a function triggered by Event Gridusing Azure Portal,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3636ccf-9ead-4ccd-bedd-db65711b6fc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After creating the function, you will see a code snippet from where you can
    start working on the function. The important thing is to add the Event Grid subscription,
    which you will have to use to integrate the function with Azure Event Grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a13c9291-e875-4438-adca-f2d4f2ffdbfb.png)'
  prefs: []
  type: TYPE_IMG
- en: The generated code depends on the runtime version of your Function App—in my
    example, I used version 1, so I used `JObject` instead of `EventGridEvent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on it, you will see a form that you can fill to create a subscription.
    In fact, it is very similar to the form you saw previously when creating a subscription
    from within the Event Gridinstance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d4af097-bb14-4c90-b2ee-efcbef7b9292.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The only difference is that some fields are filled automatically. After creation
    of a subscription, you can test it by sending, for example, a custom event to Event
    Grid. What is more, a newly created subscription should be visible on the Overviewblade
    of your Azure Event Gridinstance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7c40c36-81da-40b2-9839-7a00387a67db.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing Azure Event Grid and Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You are probably thinking about the options for testing Azure Event Gridand Azure
    Functionslocally. In fact, currently, you have two ways of doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: Capturing and resending events to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ngrok, available at [https://ngrok.com/](https://ngrok.com/), to forward
    requests to your local computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Which of these methods you choose will depend on your capabilities (for example,
    ngrok exposes your computer''s port, so it can be a security concern), so you
    will have to figure out by yourself what the best option is. Both methods are
    described in the link mentioned in the *Further reading*section. However, there
    is one interesting feature of Azure Functions, which can be used to test Event
    Grid locally. It can be found under the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you can find an example request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note one important thing here—you have to set `aeg-event-type` to `Notification`.
    If you fail to do so, you will receive an `HTTP 400` response. With such a setup,
    you can emulate how your function will behave when deployed to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what reactive architecture is and how to use it
    with Azure Event Grid. You integrated different event producers with event handlers,
    and used custom topics to publish custom events. What is more, you now have the
    knowledge of how to integrate Azure Event Grid with Azure Functionsand test it
    locally.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter ends the second part of the book, which has been on serverlessservices
    and architectures. In the next part, we will cover different storage options and
    messaging and monitoring services, which will broaden your proficiency with Azure
    even more.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the supported event schemas in Azure Event Grid?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you authorize a request to an Event Gridendpoint when posting a custom
    event?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What has to be returned when validating an endpoint?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When will an endpoint not have to be validated?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens if an endpoint doesn't return a success response?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you filter events in Azure Event Grid?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you test Event Gridintegration with Azure Functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Storage V2 accounts: [https://docs.microsoft.com/en-us/azure/storage/common/storage-account-options#general-purpose-v2-accounts](https://docs.microsoft.com/en-us/azure/storage/common/storage-account-options#general-purpose-v2-accounts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure CLI: [https://docs.microsoft.com/en-us/cli/azure/azure-cli-extensions-list?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/azure-cli-extensions-list?view=azure-cli-latest)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CloudEvents standard specification: [https://cloudevents.io/](https://cloudevents.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Event delivery in Azure Event Grid: [https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Function Azure Event Grid binding: [https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-grid](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-grid)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
