- en: Deploying Web Applications as Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Web 应用程序作为容器部署
- en: Containers are one of the hottest topics in the IT industry. They allow for
    deploying an application in "a box," so we don't have to worry about the OS it
    runs under or the installed services that are required for it. While containers
    are sometimes criticized for redundant abstraction over underlying resources,
    they guarantee a stabilized environment for both developing and hosting applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是 IT 行业中最热门的话题之一。它们允许将应用程序部署在“一个盒子”中，这样我们就不必担心它运行在哪个操作系统上或所需的已安装服务。虽然容器有时因对底层资源的冗余抽象而受到批评，但它们为开发和托管应用程序提供了一个稳定的环境。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下主题：
- en: Understanding containers and their best use cases
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解容器及其最佳使用场景
- en: '**Azure Kubernetes Service** (**AKS**) and hosting a Kubernetes environment
    using PaaS components'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes 服务**（**AKS**）和使用 PaaS 组件托管 Kubernetes 环境'
- en: Web App for containers for scalable applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于可扩展应用程序的 Web 应用容器
- en: Azure Container instances and how to manage a container without managing servers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 容器实例及如何在不管理服务器的情况下管理容器
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To start working with containers in Azure, you will need the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在 Azure 中使用容器，您需要以下内容：
- en: A basic understanding of Docker concepts ([https://docs.docker.com/get-started/](https://docs.docker.com/get-started/))
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 Docker 概念的基本理解 ([https://docs.docker.com/get-started/](https://docs.docker.com/get-started/))
- en: Docker development environment (depending on the OS you are using—[https://docs.docker.com/docker-for-mac/](https://docs.docker.com/docker-for-mac/), [https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/),
    or [https://docs.docker.com/install/](https://docs.docker.com/install/))
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 开发环境（取决于您使用的操作系统——[https://docs.docker.com/docker-for-mac/](https://docs.docker.com/docker-for-mac/)、[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)、或
    [https://docs.docker.com/install/](https://docs.docker.com/install/))
- en: A Docker Hub account
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Docker Hub 账户
- en: The Azure CLI ([https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure CLI ([https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest))
- en: A basic understanding of Kubernetes ([https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 Kubernetes 的基本理解 ([https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/))
- en: The Kubernetes CLI ([https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes CLI ([https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/))
- en: Working with AKS
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AKS
- en: AKS eases the process of deploying and managing containerized applications by
    eliminating the need to maintain or upgrade your resources on your own. It is
    a managed Kubernetes service hosted in Azure with many helpful features such as
    integrated logging and monitoring, identity and security management, and virtual
    network integration. In this section, we will create a simple application hosted
    in an AKS cluster, which we will scale and update.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: AKS 通过消除需要自己维护或升级资源的步骤，简化了容器化应用程序的部署和管理过程。它是一个托管在 Azure 中的 Kubernetes 服务，提供许多有用的功能，如集成日志记录和监控、身份和安全管理以及虚拟网络集成。在本节中，我们将创建一个托管在
    AKS 集群中的简单应用程序，并对其进行扩展和更新。
- en: Preparing an application
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备应用程序
- en: 'Let''s start with a tutorial application proposed by the Docker documentation:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Docker 文档中提供的一个教程应用程序开始：
- en: 'To begin, we need `Dockerfile`, which is a definition of how our container
    environment should look. It contains keywords such as `FROM` (defines an image
    that will be used for the container), `WORKDIR` (the working directory of the
    application), `ADD` (adds a directory to a container), `RUN` (runs a command),
    `EXPOSE` (exposes a given port in the container), `ENV` (adds an environment variable),
    and `CMD` (declares an entry point):'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要 `Dockerfile`，它定义了我们的容器环境应如何构建。它包含诸如 `FROM`（定义将用于容器的镜像）、`WORKDIR`（应用程序的工作目录）、`ADD`（将目录添加到容器中）、`RUN`（运行命令）、`EXPOSE`（暴露容器中的指定端口）、`ENV`（添加环境变量）和
    `CMD`（声明入口点）等关键字：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will need two more files:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要另外两个文件：
- en: '`requirements.txt`: This one defines the external dependencies our application
    has to download'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements.txt`：这个文件定义了我们的应用程序需要下载的外部依赖'
- en: '`app.py`: The main file of an application'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.py`：应用程序的主要文件'
- en: If you are familiar with Docker, you can prepare your very own `Dockerfile` and
    application; there is no need to follow everything in this section as we are covering
    very basic topics.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉Docker，您可以准备自己的`Dockerfile`和应用程序；在本节中讲解的内容很基础，您无需完全跟随。
- en: 'Here, you can find the contents of `requirements.txt`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以找到`requirements.txt`的内容：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And of course, `app.py`, which is the script we want to run. It is a simple
    Python application that uses Flask to host a web app and defines the default route
    that exposes an HTML web page. Note that it accesses the `HandsOnAzure` environment
    variable defined in the Dockerfile:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，还有`app.py`，这是我们要运行的脚本。它是一个简单的Python应用，使用Flask托管一个Web应用，并定义了默认路由来暴露一个HTML网页。注意，它访问了Dockerfile中定义的`HandsOnAzure`环境变量：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, you need two more things—to build an image and check whether it works.
    To build an image, you will need the following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要再做两件事——构建镜像并检查它是否正常工作。要构建镜像，您需要以下命令：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After Docker fetches all of the packages and builds an image, you can run it.
    I used the `4000`port but you can choose whichever works for you:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker获取所有包并构建镜像后，您可以运行它。我使用了`4000`端口，但您可以选择适合您的端口：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If everything is correct, you should be able to see a running application:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正确，您应该能够看到一个正在运行的应用：
- en: '![](img/69093daa-f9c4-42d4-a8fc-75e8ee1915f7.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69093daa-f9c4-42d4-a8fc-75e8ee1915f7.png)'
- en: In the next section, we will create a container registry and Kubernetes cluster
    to host an application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建一个容器注册表和Kubernetes集群来托管一个应用。
- en: Container Registry and Kubernetes clusters
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器注册表和Kubernetes集群
- en: 'To use a Docker image in Azure, we have to put it in a container registry.
    To do so, we can use **Azure Container Registry** (**ACR**), which is a private
    registry for hosting container images. To get started, go to Azure Portal, click
    on + Create a resource, and search for `Container Registry`. When you click Create, you
    will see a familiar screen containing multiple fields needed for service configuration.
    The following need clarification for now:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Azure中使用Docker镜像，我们必须将它放入容器注册表中。为此，我们可以使用**Azure容器注册表**（**ACR**），它是一个用于托管容器镜像的私有注册表。首先，进入Azure门户，点击+
    创建资源，搜索`Container Registry`。点击创建后，您将看到一个包含多个服务配置字段的熟悉屏幕。现在以下内容需要澄清：
- en: Admin user: If you want to log in to your registry using the registry name and
    admin access key, you can turn on this feature. By default it is disabled.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员用户：如果您想通过注册表名称和管理员访问密钥登录到您的注册表，您可以启用此功能。默认情况下，它是禁用的。
- en: SKU: This defines the overall performance of the registry and available features.
    To start with, the Basic tier should be more than enough.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SKU：这定义了注册表的整体性能和可用功能。首先，Basic层应该足够用了。
- en: 'The following screenshot shows my current configuration:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我当前的配置：
- en: '![](img/4c7f0280-f5bf-4d05-af0f-a50f35c82374.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c7f0280-f5bf-4d05-af0f-a50f35c82374.png)'
- en: If you are satisfied with the configuration, you can click OK. Now we will push
    an image with an application to the registry to use it in Azure.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对配置满意，可以点击确认。现在我们将推送一个带有应用的镜像到注册表，以便在Azure中使用它。
- en: Pushing a Docker image to Azure Container Registry
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Docker镜像推送到Azure容器注册表
- en: 'To push an image to Azure Container Registry, we have to know the exact name
    of the image:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要将镜像推送到Azure容器注册表，我们需要知道镜像的准确名称：
- en: 'To list available images, use the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出可用的镜像，请使用以下命令：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result of running the command is a list of all repositories available for
    Docker:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行该命令的结果是一个列出所有Docker可用仓库的列表：
- en: '![](img/0251b209-9d62-4e00-9106-7795c5678689.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0251b209-9d62-4e00-9106-7795c5678689.png)'
- en: 'I want to push `handsonazurehello`, which I created previously, to Azure. To
    do so, I will need firstly to tag an image using the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我想将我之前创建的`handsonazurehello`推送到Azure。为此，我首先需要使用以下命令标记镜像：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The reason for tagging is to both set a version for my container and give it
    the appropriate name that is required to push it to a private registry.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 标记的原因是为了为我的容器设置一个版本，并为它赋予推送到私有注册表所需的适当名称。
- en: 'You can find Login serveron the Overview blade:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在概览面板中找到登录服务器：
- en: '![](img/9fabdfaf-3c58-4232-b211-5fccc25fbef4.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fabdfaf-3c58-4232-b211-5fccc25fbef4.png)'
- en: 'Now you can try to push an image with the following command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以尝试使用以下命令推送一个镜像：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Of course, you have to push your image name and registry server login. When
    you execute the preceding command, you will see the following result:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，您必须推送您的镜像名称和注册表服务器登录。当您执行上面的命令时，您将看到以下结果：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Still there is something wrong—we are pushing a container to the correct registry,
    but we have not authenticated yet. To have access to Azure Container Registry,
    we have to use Azure CLI. Use two commands:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然有问题——我们正在将容器推送到正确的注册表，但我们尚未进行身份验证。要访问 Azure 容器注册表，我们必须使用 Azure CLI。请使用两个命令：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The first one is used to authenticate in Azure, the second one will let you
    work with your instance of Container Registry. After successfully authenticating,
    you can retry pushing an image—this time everything should work smoothly:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个命令用于在 Azure 中进行身份验证，第二个命令将让你与自己的容器注册表实例进行交互。成功身份验证后，你可以重试推送镜像——这次一切应该顺利运行：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can verify it is available in the portal:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在门户中验证它是否可用：
- en: '![](img/e6df1be3-6edc-43cf-b964-fd4250d16fd1.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6df1be3-6edc-43cf-b964-fd4250d16fd1.png)'
- en: The next thing we need is a Kubernetes cluster—this is why we use AKS to provision
    a managed Kubernetes service.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要的是一个 Kubernetes 集群——这就是我们使用 AKS 来配置托管 Kubernetes 服务的原因。
- en: Creating a Kubernetes cluster using AKS
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AKS 创建 Kubernetes 集群
- en: 'To create a Kubernetes service, perform the following steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 Kubernetes 服务，请执行以下步骤：
- en: '*G*o to the portal.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*前往*门户。'
- en: Click on the + Create a resource button and search for `AKS`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 + 创建资源 按钮并搜索 `AKS`。
- en: 'When you click Create, you should see the following screen:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击 创建时，你应该看到以下屏幕：
- en: '![](img/4404f199-8450-43ee-a713-ffdc30302ca5.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4404f199-8450-43ee-a713-ffdc30302ca5.png)'
- en: As you can see, we have plenty of different options and fields here. Some of
    them should be self-explanatory. Initially, I recommend using default values for
    most fields, such as Kubernetes versionor Service principal,as they matter only
    if you have existing requirements regarding your application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里有很多不同的选项和字段。其中一些应该是显而易见的。最初，我建议对大多数字段使用默认值，比如 Kubernetes 版本或 Service
    principal，因为这些字段只有在你对应用程序有特定需求时才会重要。
- en: To learn more about applications and service principal objects in Azure AD,
    you can read this short article from the documentation: [https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-application-objects](https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-application-objects).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Azure AD 中应用程序和服务主体对象的信息，可以阅读文档中的这篇简短文章：[https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-application-objects](https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-application-objects)。
- en: You can go to different tabs such as Networking or Monitoring to see whether
    you want to change something—however, the current settings should be correct for
    the very first AKS cluster.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以进入不同的标签页，如 Networking 或 Monitoring，查看是否需要更改某些设置——然而，当前的设置应该适用于第一个 AKS 集群。
- en: 'Once you have reviewed all fields, click on the Review + create button. The
    following screenshot shows my configuration:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 审核完所有字段后，点击 Review + create 按钮。以下截图展示了我的配置：
- en: '![](img/727919e2-e7fb-447f-a01b-0509aaf06eb7.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/727919e2-e7fb-447f-a01b-0509aaf06eb7.png)'
- en: When you click on Create, you will have to wait a moment until deployment is
    finished.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击 创建时，你需要稍等片刻，直到部署完成。
- en: Creating a cluster can take a while, especially when you select several machines
    to be deployed at once. Be patient!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建集群可能需要一些时间，尤其是在你选择同时部署多个机器时。耐心等待！
- en: Running, scaling, and updating an application in AKS
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AKS 中运行、扩展和更新应用程序
- en: 'To run and deploy an application in AKS in Azure, we will need the Kubernetes
    manifest file, which will define how an image should be deployed. However, before
    we perform that part of the exercise, we have to configure Kubernetes locally,
    so it can connect with our cluster. To do so, perform the following steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Azure 的 AKS 中运行和部署应用程序，我们需要 Kubernetes 清单文件，该文件将定义如何部署镜像。然而，在执行这部分操作之前，我们必须先在本地配置
    Kubernetes，以便它能够与我们的集群连接。为此，请执行以下步骤：
- en: 'Run the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Initially, it will return the following result:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初，它会返回以下结果：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'That means that we have not configured `kubectl `with the AKS cluster we just
    created. To do so, use the following Azure CLI command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这意味着我们尚未将`kubectl`与我们刚刚创建的 AKS 集群进行配置。为此，请使用以下 Azure CLI 命令：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Running it should merge your cluster as a current context in your local configuration.
    Now, when you verify your connection, everything should be set and ready. We can
    go back to our manifest file—the initial version can be found in the *Chapter03*
    in the repository. In general, it is a simple YML file that defines and configures
    services and deployment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它应该会将集群合并为你本地配置中的当前上下文。现在，当你验证连接时，一切应该已经设置好并准备就绪。我们可以回到清单文件——初始版本可以在仓库中的*Chapter03*找到。一般来说，这是一个简单的
    YML 文件，用于定义和配置服务及部署。
- en: 'Put the file in the directory for your application and use the following command
    to deploy it:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件放入你的应用程序目录中，并使用以下命令进行部署：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After a moment, you should see the status of the process:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稍等片刻，你应该看到进程的状态：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we need one more command to get the external IP of our service:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个命令来获取服务的外部 IP：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Initially, you could see the `EXTERNAL-IP` field as pending—it should change
    in a second. Now you can verify the installation of an application:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初，你可以看到 `EXTERNAL-IP` 字段为 pending——它应该在一秒钟内改变。现在你可以验证应用的安装情况：
- en: '![](img/0ab0908c-fb6a-4c57-b8e9-3d0cd6d0d7d8.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ab0908c-fb6a-4c57-b8e9-3d0cd6d0d7d8.png)'
- en: 'There is also one more method to get the status of the whole cluster. Try to
    run the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一种方法可以获取整个集群的状态。尝试运行以下命令：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After a moment, you should see the whole Kubernetes dashboard available locally.
    Read all of the information carefully as it is really helpful when diagnosing
    possible issues with AKS:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稍等片刻后，你应该能看到整个 Kubernetes 仪表板可以在本地使用。请仔细阅读所有信息，因为它在诊断 AKS 可能出现的问题时非常有帮助：
- en: '![](img/69fb2ba1-64bd-4b67-baf3-70d8db69549c.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69fb2ba1-64bd-4b67-baf3-70d8db69549c.png)'
- en: Solving problems with authentication
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决身份验证问题
- en: 'Sometimes AKS cannot access Azure Container Registry and needs the creation
    of a service principal, which can be used in pod deployment. To create it, you
    will need to perform the following script:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有时 AKS 无法访问 Azure 容器注册表，并且需要创建服务主体，这可以在 pod 部署中使用。要创建它，你需要执行以下脚本：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The full script can be also found in the source code for this chapter. Once
    the secret is created, you can modify the manifest file and add the `imagePullSecrets` line
    to it:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的脚本也可以在本章的源代码中找到。一旦密钥创建完成，你可以修改清单文件并添加`imagePullSecrets`行：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Scaling a cluster
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩容集群
- en: 'Scaling in AKS is one of the easiest things to do. All you need to do is go
    to Azure Portal, find your AKS instance, and click on the Scaleblade:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AKS 中扩容是最简单的操作之一。你只需要进入 Azure 门户，找到你的 AKS 实例，然后点击 Scaleblade：
- en: '![](img/687cdef4-2be9-4696-9070-350407190317.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/687cdef4-2be9-4696-9070-350407190317.png)'
- en: Once there, you can change the cluster capacity depending on your needs.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在那里，你可以根据需求调整集群容量。
- en: Make sure you have the required number of nodes available for your application—such
    information can be found in the Kubernetes dashboard. If you don't have enough
    machines, some of your images might not be deployed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你有足够数量的节点可供你的应用使用——这些信息可以在 Kubernetes 仪表板中找到。如果机器不足，某些镜像可能无法部署。
- en: Updating an application
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新应用程序
- en: 'Updating an application in AKS requires two things:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AKS 中更新应用程序需要做两件事：
- en: Publishing a new image to Azure Container Registry
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将新镜像发布到 Azure 容器注册表
- en: Setting a new image as the actual one in AKS
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将新的镜像设置为 AKS 中的当前镜像
- en: 'When you make changes in your application, you need two commands to update
    it in a registry. First, change its version to a new one:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对应用进行更改时，需要使用两个命令将其更新到注册表中。首先，将其版本更改为新的版本：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now what you need is to push this version to make it available in the cloud:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要做的是将这个版本推送到云端以便使用：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The final step to tell Kubernetes to update an image:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步，告诉 Kubernetes 更新镜像：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To ensure that your application is fully functional while updating, you have
    to scale it out to multiple pods. You can do it with the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保应用在更新过程中完全正常工作，你需要将其扩展到多个 pod。你可以使用以下命令来实现：
- en: '`**kubectl scale --replicas=3 deployment/{YOUR_APPLICATION}**`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`**kubectl scale --replicas=3 deployment/{YOUR_APPLICATION}**`'
- en: Azure Container Instances
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 容器实例
- en: While AKS is a complete orchestration solution, you might sometimes like to
    use a lightweight service instead that provides the most crucial features related
    to running containers. These features include no need to provision and manage
    virtual machines, security, and integrated public IP connectivity. If you want
    to run a containerized simple application such as a WebJob or website, **Azure
    Container Instances** (**ACI**) can be used to satisfy your requirements.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 AKS 是一个完整的编排解决方案，但有时你可能更倾向于使用一个轻量级服务，它提供与运行容器相关的最关键功能。这些功能包括不需要配置和管理虚拟机、安全性以及集成的公共
    IP 连接性。如果你想运行一个容器化的简单应用程序，比如 WebJob 或网站，**Azure 容器实例**（**ACI**）可以满足你的需求。
- en: Creating and deploying an application and container
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并部署一个应用程序和容器
- en: We will start our journey with ACI by creating an application that we will host
    in a container. In the previous section, we used a simple Python script—this time
    we will try to use Node.js.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个应用程序来开始我们的 ACI 之旅，这个应用程序将托管在容器中。在上一节中，我们使用了一个简单的 Python 脚本——这次我们将尝试使用
    Node.js。
- en: As always, you can find source files in the appropriate source file folder for
    this chapter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，你可以在本章的适当源文件文件夹中找到源文件。
- en: 'The very first thing we need once more is `Dockerfile`. As you remember, it
    contains instructions on how an application should be run. The following is an example
    for this exercise:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的第一件事是 `Dockerfile`。如你所记，它包含了如何运行应用程序的指令。以下是本次练习的示例：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you read it carefully, you will find it pretty easy—what it does (step-by-step)
    is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细阅读，你会发现它其实非常简单——它的步骤如下：
- en: Installs the specific Node.js version (this time **alpine**, which is a smaller
    distribution well designed for running in containers)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装特定的 Node.js 版本（这次是 **alpine**，它是一个为容器设计的小型发行版）
- en: Creates a new working directory
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的工作目录
- en: Copies files to it
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件复制到容器中
- en: Installs all dependencies with the `npm install`command
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 命令安装所有依赖项
- en: Starts an application by providing its starting point
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过提供其起始点来启动应用程序
- en: 'Now we can create a container using the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令创建一个容器：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: After a moment, you should have a new image created and added. If you face any
    problems, make sure that you are in the correct directory and not doubling its
    name.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等片刻，你应该能创建并添加一个新的镜像。如果遇到问题，请确保你在正确的目录中，并且没有重复命名。
- en: Remember that you can always check what images are currently available for you
    and their names. To do so, you can use the following Docker command: `docker images`*.*
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '记住，你可以随时检查当前可用的镜像及其名称。为此，你可以使用以下 Docker 命令：`docker images`*.* '
- en: 'Now we can verify how our application works. To start it, use the following
    command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以验证应用程序的工作情况。要启动它，请使用以下命令：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You can go to `localhost:8080` and check whether your application is running.
    If everything is configured correctly, you should be able to see the `Welcome
    to Azure Container Instances!`message in the center of the screen.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问 `localhost:8080`，检查应用程序是否在运行。如果一切配置正确，你应该能在屏幕中央看到 `Welcome to Azure Container
    Instances!` 消息。
- en: Sometimes, you may face problems when working with some web applications and
    running them locally—for some reason, you cannot connect to them using the specified
    port. In such situations, it is always a good idea to reconfigure them and use
    different ports.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你在使用某些 Web 应用程序并将其本地运行时，可能会遇到问题——出于某种原因，你无法通过指定的端口连接它们。在这种情况下，重新配置应用程序并使用不同的端口通常是一个好主意。
- en: Now we will push an image to Azure so we can use it later in ACI.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把镜像推送到 Azure，以便以后在 ACI 中使用。
- en: Pushing an image to Azure Container Registry
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将镜像推送到 Azure 容器注册中心
- en: 'You can find full instructions on how you can work with ACI in *Container Registry
    and Kubernetes clusters *section of this chapter. Now, the idea is the same as
    when working with AKS—we have to perform the following actions:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本章的 *容器注册中心和 Kubernetes 集群* 部分找到如何使用 ACI 的完整说明。现在，操作与使用 AKS 时相同——我们需要执行以下操作：
- en: Log in to ACR
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 ACR
- en: Tag an image
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为镜像打标签
- en: Push it to ACR
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其推送到 ACR
- en: 'You will need the following three commands:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下三个命令：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: After a successful push, we can deploy an application to ACI.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 推送成功后，我们可以将应用程序部署到 ACI。
- en: Deploying an application to ACI
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序部署到 ACI
- en: The first thing we need is an instance of ACI. As usual, in Azure Portal click
    on + Create a resourceand search for `Container Instances`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建一个 ACI 实例。像往常一样，在 Azure Portal 中点击 + 创建资源，并搜索 `Container Instances`。
- en: 'You should see a similar wizard to the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到类似下面的向导：
- en: '![](img/4cde788d-9dcb-4ec0-a652-fce4392ad3eb.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cde788d-9dcb-4ec0-a652-fce4392ad3eb.png)'
- en: 'The important thing here is that you have to select Privatewhen deciding on
    a Container image type. Choosing this option will display additional fields, which
    have to be filled in. When creating ACI, you will need to provide Container image.
    This is just the Docker tag you created when pushing an image to Container Registry.
    In my case it was `handsonazureregistry.azurecr.io/ handsonazure-aci`. The image
    registry login serveris simply a login server for the registry (you can find it
    in the Overviewblade of ACR). We need two more things—the registry username and
    password. While the username is simply the registry name, a password can be obtained
    using the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的是，在选择容器镜像类型时，必须选择**Private**。选择此选项后，将显示额外的字段，必须填写这些字段。在创建ACI时，您需要提供容器镜像。这就是您在将镜像推送到容器注册表时创建的Docker标签。在我的例子中是`handsonazureregistry.azurecr.io/handsonazure-aci`。镜像注册表登录服务器就是注册表的登录服务器（您可以在ACR的“概述”面板中找到它）。我们还需要另外两样东西——注册表用户名和密码。用户名就是注册表名称，密码可以使用以下命令获取：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To obtain a password, admin credentials have to be enabled. To enable them
    from CMD, use the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取密码，必须启用管理员凭据。可以使用以下命令从CMD启用管理员凭据：
- en: '`**az acr update -n {REGISTRY_NAME} --admin-enabled true**`'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`**az acr update -n {REGISTRY_NAME} --admin-enabled true**`'
- en: 'Now we can go to the Configurationsection:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以进入“配置”部分：
- en: '![](img/0eea2926-08bc-4a2a-af70-8ff62b4906e1.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0eea2926-08bc-4a2a-af70-8ff62b4906e1.png)'
- en: This time, all of these fields should be self-explanatory and, in fact, I left
    the default values in force during this exercise. You can change them if you feel
    other values will meet your requirements (such as, for example, the OS or available
    memory). Once all is set, you can click OKand publish an instance of your container.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，所有这些字段应该都是不言自明的，事实上，在本次操作中，我保留了默认值。您可以根据需要更改它们（例如操作系统或可用内存）。设置完成后，您可以点击**OK**并发布您的容器实例。
- en: 'If you have problems deploying a container from the portal, you can always
    use the Azure CLI. Here is the full command to do the same as we did in Azure
    Portal:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在门户中部署容器时遇到问题，您可以始终使用Azure CLI。下面是与我们在Azure门户中做的相同操作的完整命令：
- en: '`**az container create --resource-group {RG_NAME}--name {ACI_NAME} --image
    {ACR_LOGIN_SERVER}/{CONTAINER_NAME}:v1 --cpu 1 --memory 1 --registry-login-server
    {ACR_LOGIN_SERVER} --registry-username {REGISTRY_NAME} --registry-password {REGISTRY_PASSWORD}
    --dns-name-label {DNS_LABEL} --ports 80**`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`**az container create --resource-group {RG_NAME}--name {ACI_NAME} --image
    {ACR_LOGIN_SERVER}/{CONTAINER_NAME}:v1 --cpu 1 --memory 1 --registry-login-server
    {ACR_LOGIN_SERVER} --registry-username {REGISTRY_NAME} --registry-password {REGISTRY_PASSWORD}
    --dns-name-label {DNS_LABEL} --ports 80**`'
- en: 'When deployment is complete, go to your instance of ACI and check the Overviewblade.
    Copy the value of the `FQDN` field and paste it into your browser. You should
    be able to see the very same screen you saw locally:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，进入ACI实例并查看“概述”面板。复制`FQDN`字段的值并将其粘贴到浏览器中。您应该能够看到与本地看到的完全相同的屏幕：
- en: '![](img/8c0992a4-3e53-492d-9380-a4362dce839a.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c0992a4-3e53-492d-9380-a4362dce839a.png)'
- en: That is all! As you can see, using Azure Container Services is a really quick
    way to deploy your application in a container using a minimal set of features.
    In the next section, we will focus on leveraging containers in App Services.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！如您所见，使用Azure容器服务是一种非常快速的方式，通过最少的功能集将应用程序部署到容器中。在接下来的部分，我们将重点介绍在应用服务中利用容器。
- en: Web App for Containers
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器化Web应用
- en: You do not have to use AKS or ACI to leverage features of containers in Azure—currently,
    there is one more feature available that you can use to deploy web applications
    written in an unsupported language (such as Go). Web App for Containers is an
    extension to App Services that uses Linux under the hood with Docker to run a
    service built on a stack, which is not currently supported by Azure.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必使用AKS或ACI来利用Azure中容器的功能——目前还有一种功能可以用来部署用不受支持的语言（如Go）编写的Web应用。**容器化Web应用**是**应用服务**的扩展，它使用Linux作为底层操作系统，配合Docker来运行构建在当前Azure不支持的技术栈上的服务。
- en: Creating a web app hosted in a container
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个托管在容器中的Web应用
- en: To create an App Service running with a Docker instance, you have to follow
    the very same steps from [Chapter 1](81d59e59-02b1-4973-95a0-9bf6a998e752.xhtml),
    *Azure App Service*, when we were discussing the creation of a web app using Azure
    Portal.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个运行Docker实例的应用服务，你必须遵循与[第一章](81d59e59-02b1-4973-95a0-9bf6a998e752.xhtml)
    *Azure应用服务*相同的步骤，回顾我们在讨论使用Azure门户创建Web应用时所做的内容。
- en: 'Once you reach the web app creation blade, take a look at the OSfield:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入Web应用创建界面时，请查看操作系统字段：
- en: '![](img/bcb5903b-b11c-465b-af17-63e949e62f9d.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcb5903b-b11c-465b-af17-63e949e62f9d.png)'
- en: 'As you can see, the Dockeroption is available. When you click on it, two more
    fields will need to be set:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Docker选项是可用的。点击它后，还需要设置两个字段：
- en: App Service plan/Location: This is the same as with "traditional" App Services with
    one important note. When you select Docker, all App Service Plans you can choose
    from will be powered by the Linuxoperating system. This will impact both pricing
    and feature availability.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用服务计划/位置：这与“传统”的应用服务相同，但有一个重要的说明。当你选择Docker时，所有可供选择的应用服务计划将由Linux操作系统提供支持。这将影响定价和功能可用性。
- en: Configure container: When you select this option, you will see another screen
    with many different options depending on container settings. Currently, we have
    three different options to choose from—Single Container, Docker Compose, and Kubernetes.
    The latest two are currently in preview, but we will also cover them. For now,
    select Single Containerand use the Quickstartoption.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置容器：选择此选项后，你将看到另一个屏幕，显示根据容器设置的多个不同选项。目前，我们有三个不同的选择：单容器、Docker Compose和Kubernetes。后两个选项目前处于预览阶段，但我们也会涵盖它们。现在，请选择单容器并使用快速入门选项。
- en: 'Here you can find my configuration:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我的配置：
- en: '![](img/f5d0cf68-d6a6-43d5-926d-669da3af031a.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5d0cf68-d6a6-43d5-926d-669da3af031a.png)'
- en: 'Now, after clicking on Create, Azure finishes provisioning new resources after
    several seconds. After creation, go to the freshly created App Service and take
    a look at the blades on the left. You will see that some of them are disabled:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击创建后，Azure将在几秒钟内完成新资源的配置。创建完成后，进入新创建的应用服务，并查看左侧的界面。你会发现其中一些已经被禁用：
- en: '![](img/b00058d9-ad5a-4c51-9f01-4c56da9747be.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b00058d9-ad5a-4c51-9f01-4c56da9747be.png)'
- en: 'As you can see, using Web App for Containers doesn''t allow us to use features such
    as WebJobs or Application Insights*.* Yet, we are still able to scale an application,
    attach a custom domain, or set a backup. Notice that one more blade is available—Container
    settings. When you click on it, you will see the same screen as during App Service creation:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用Web应用容器（Web App for Containers）不允许我们使用诸如WebJobs或应用程序洞察（Application Insights）*等功能*。然而，我们仍然能够扩展应用程序、附加自定义域名或设置备份。请注意，另一个界面——容器设置是可用的。当你点击它时，你将看到与应用服务创建时相同的界面：
- en: '![](img/6f922ebd-cdbf-4ca6-9cdc-9cf277b7216a.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f922ebd-cdbf-4ca6-9cdc-9cf277b7216a.png)'
- en: 'Let''s see what happens when we change the image for our container. Change
    the Image and optional tag(eg ''image:tag'')field to `appsvc/dotnetcore`and then
    click Save. After restarting an application, you should see a change in the visible
    logs:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们更改容器的镜像时会发生什么。将镜像和可选标签（例如“image:tag”）字段更改为`appsvc/dotnetcore`，然后点击保存。重新启动应用程序后，你应该会看到可见日志中的变化：
- en: '![](img/5f08f0ad-c6d3-4ddc-a4ee-c221628d0634.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f08f0ad-c6d3-4ddc-a4ee-c221628d0634.png)'
- en: 'Also, you should see a success message when browsing your web application:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你浏览你的Web应用时，你应该会看到一个成功的消息：
- en: '![](img/8556b293-2512-45d1-880b-8442a1560dd3.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8556b293-2512-45d1-880b-8442a1560dd3.png)'
- en: Now we will try to deploy our own code and see whether it works.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将尝试部署我们自己的代码并查看它是否能正常工作。
- en: Deploying a custom application
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署自定义应用程序
- en: In this section, we will focus on creating and deploying a custom application
    to our Docker container in the web app. For the purpose of this exercise, we will
    reuse the container image from the previous part of this chapter where we were
    discussing ACI.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重点介绍如何在Web应用中创建并部署自定义应用程序到我们的Docker容器。为了本次练习的目的，我们将重用本章前部分讨论ACI时使用的容器镜像。
- en: If you would like to prepare a brand new application, go through the steps defined
    in the *Creating and deploying an application and container* section where we
    created a Docker image and pushed it to Azure Container Registry.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想准备一个全新的应用程序，请按照*创建和部署应用程序和容器*部分中定义的步骤操作，我们在那里创建了一个Docker镜像并将其推送到Azure容器注册表。
- en: 'When you go once more to the Container settingsblade, you can change Image
    source to three different options:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次进入容器设置面板时，你可以将镜像来源更改为三种不同的选项：
- en: Azure Container Registry: It allows you to select images pushed to your own
    instance of ACR
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 容器注册表：它允许你选择推送到自己实例的 ACR 中的镜像
- en: Docker Hub: Provides access to all images available in this repository
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub：提供对该存储库中所有镜像的访问
- en: Private registry: You can also define a private repository from which to deploy
    your images
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有注册表：你还可以定义一个私有存储库来部署你的镜像
- en: Note that, if you use ACR, the two other sources will also point to ACR as it
    acts as your own private Docker Hub with your images.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你使用 ACR，其他两个来源也会指向 ACR，因为它充当你自己私有的 Docker Hub，存储着你的镜像。
- en: 'Select the Azure Container Registry tab and fill in all required fields as
    suggested by the portal:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Azure 容器注册表标签，并根据门户提示填写所有必填字段：
- en: '![](img/b3075b7c-a582-49be-8246-957a657d7c3b.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3075b7c-a582-49be-8246-957a657d7c3b.png)'
- en: 'After a moment, a new image should be reloaded and working. If you browse to
    the URL of your application, you should be able to see changes:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 片刻之后，新的镜像应该会重新加载并正常工作。如果你浏览到应用的 URL，应该能够看到更新的内容：
- en: '![](img/f27f9e05-fdb1-458d-8045-6b6221cc04a0.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f27f9e05-fdb1-458d-8045-6b6221cc04a0.png)'
- en: As you can see, the very same container image I used while working with ACI is
    fully functional here in Web App for Containers.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我在使用 ACI 时使用的同一个容器镜像，在 Web 应用容器中也是完全可用的。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As you saw, when working with containers in Azure you are able to focus on the
    delivery and shape of your application rather than configuration or maintenance.
    Of course, available features are not limited to those we covered in this chapter—you
    can also leverage functionalities such as continuous deployment, networking, or
    data volumes. What is available depends solely on the service you choose—Azure
    Container Instances and Web App for Containers are cloud components that are quite
    minimalistic and focus on running an application, while AKS delivers more advanced
    features. Nonetheless, containers are one of the most popular topics of recent
    months and it is quite possible that building and evolving that skill will help
    you in your future projects.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在 Azure 中使用容器时，你可以专注于应用的交付和形态，而不是配置或维护。当然，可用的功能不仅限于本章所涵盖的内容——你还可以利用持续部署、网络或数据卷等功能。可用的功能完全取决于你选择的服务——Azure
    容器实例和 Web 应用容器是非常简洁的云组件，专注于运行应用，而 AKS 提供了更多高级功能。尽管如此，容器仍然是近几个月最受欢迎的话题，毫无疑问，构建和发展这一技能将有助于你未来的项目。
- en: In the next chapter, you will learn a bit about another service that allows
    you to run containerized applications and get the out of from the microservice
    architecture in the Azure cloud—Azure Service Fabric.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解另一个服务，它允许你运行容器化应用并在 Azure 云中从微服务架构中获得更多的功能——Azure Service Fabric。
- en: Questions
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Azure Container Registry?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Azure 容器注册表？
- en: What is the Admin loginfeature in AKS?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 AKS 中的管理员登录功能？
- en: Which OS do you have to choose while creating an App Service to be able to run
    containers?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建应用服务时，你需要选择哪种操作系统才能运行容器？
- en: Can you use images from the public registry in Web App for Containers?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在 Web 应用容器中使用来自公共注册表的镜像吗？
- en: Can you scale AKS in the portal?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在门户中扩展 AKS 吗？
- en: How you can lower your application's downtime in AKS when updating it?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更新应用时，你如何降低 AKS 中应用的停机时间？
- en: What do you have to do if AKS cannot authenticate to your instance of Azure
    Container Registry?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 AKS 无法验证你实例的 Azure 容器注册表身份，你需要做什么？
- en: Further reading
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: '[https://docs.microsoft.com/en-us/azure/container-instances/container-instances-orchestrator-relationship](https://docs.microsoft.com/en-us/azure/container-instances/container-instances-orchestrator-relationship)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/zh-cn/azure/container-instances/container-instances-orchestrator-relationship](https://docs.microsoft.com/en-us/azure/container-instances/container-instances-orchestrator-relationship)'
- en: '[https://docs.microsoft.com/en-us/azure/aks/networking-overview](https://docs.microsoft.com/en-us/azure/aks/networking-overview)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/zh-cn/azure/aks/networking-overview](https://docs.microsoft.com/en-us/azure/aks/networking-overview)'
- en: '[https://docs.microsoft.com/en-us/azure/monitoring/monitoring-container-health?toc=%2Fen-us%2Fazure%2Faks%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json](https://docs.microsoft.com/en-us/azure/monitoring/monitoring-container-health?toc=%2Fen-us%2Fazure%2Faks%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/zh-cn/azure/monitoring/monitoring-container-health?toc=%2Fzh-cn%2Fazure%2Faks%2FTOC.json&bc=%2Fzh-cn%2Fazure%2Fbread%2Ftoc.json](https://docs.microsoft.com/zh-cn/azure/monitoring/monitoring-container-health?toc=%2Fzh-cn%2Fazure%2Faks%2FTOC.json&bc=%2Fzh-cn%2Fazure%2Fbread%2Ftoc.json)'
