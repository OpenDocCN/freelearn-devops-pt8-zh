- en: Deploying Web Applications as Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containers are one of the hottest topics in the IT industry. They allow for
    deploying an application in "a box," so we don't have to worry about the OS it
    runs under or the installed services that are required for it. While containers
    are sometimes criticized for redundant abstraction over underlying resources,
    they guarantee a stabilized environment for both developing and hosting applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding containers and their best use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Kubernetes Service** (**AKS**) and hosting a Kubernetes environment
    using PaaS components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web App for containers for scalable applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Container instances and how to manage a container without managing servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start working with containers in Azure, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A basic understanding of Docker concepts ([https://docs.docker.com/get-started/](https://docs.docker.com/get-started/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker development environment (depending on the OS you are using—[https://docs.docker.com/docker-for-mac/](https://docs.docker.com/docker-for-mac/), [https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/),
    or [https://docs.docker.com/install/](https://docs.docker.com/install/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Docker Hub account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure CLI ([https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic understanding of Kubernetes ([https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes CLI ([https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with AKS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AKS eases the process of deploying and managing containerized applications by
    eliminating the need to maintain or upgrade your resources on your own. It is
    a managed Kubernetes service hosted in Azure with many helpful features such as
    integrated logging and monitoring, identity and security management, and virtual
    network integration. In this section, we will create a simple application hosted
    in an AKS cluster, which we will scale and update.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with a tutorial application proposed by the Docker documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we need `Dockerfile`, which is a definition of how our container
    environment should look. It contains keywords such as `FROM` (defines an image
    that will be used for the container), `WORKDIR` (the working directory of the
    application), `ADD` (adds a directory to a container), `RUN` (runs a command),
    `EXPOSE` (exposes a given port in the container), `ENV` (adds an environment variable),
    and `CMD` (declares an entry point):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need two more files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`requirements.txt`: This one defines the external dependencies our application
    has to download'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.py`: The main file of an application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are familiar with Docker, you can prepare your very own `Dockerfile` and
    application; there is no need to follow everything in this section as we are covering
    very basic topics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can find the contents of `requirements.txt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And of course, `app.py`, which is the script we want to run. It is a simple
    Python application that uses Flask to host a web app and defines the default route
    that exposes an HTML web page. Note that it accesses the `HandsOnAzure` environment
    variable defined in the Dockerfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you need two more things—to build an image and check whether it works.
    To build an image, you will need the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After Docker fetches all of the packages and builds an image, you can run it.
    I used the `4000`port but you can choose whichever works for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is correct, you should be able to see a running application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69093daa-f9c4-42d4-a8fc-75e8ee1915f7.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will create a container registry and Kubernetes cluster
    to host an application.
  prefs: []
  type: TYPE_NORMAL
- en: Container Registry and Kubernetes clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use a Docker image in Azure, we have to put it in a container registry.
    To do so, we can use **Azure Container Registry** (**ACR**), which is a private
    registry for hosting container images. To get started, go to Azure Portal, click
    on + Create a resource, and search for `Container Registry`. When you click Create, you
    will see a familiar screen containing multiple fields needed for service configuration.
    The following need clarification for now:'
  prefs: []
  type: TYPE_NORMAL
- en: Admin user: If you want to log in to your registry using the registry name and
    admin access key, you can turn on this feature. By default it is disabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SKU: This defines the overall performance of the registry and available features.
    To start with, the Basic tier should be more than enough.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows my current configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c7f0280-f5bf-4d05-af0f-a50f35c82374.png)'
  prefs: []
  type: TYPE_IMG
- en: If you are satisfied with the configuration, you can click OK. Now we will push
    an image with an application to the registry to use it in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing a Docker image to Azure Container Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To push an image to Azure Container Registry, we have to know the exact name
    of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To list available images, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of running the command is a list of all repositories available for
    Docker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0251b209-9d62-4e00-9106-7795c5678689.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I want to push `handsonazurehello`, which I created previously, to Azure. To
    do so, I will need firstly to tag an image using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The reason for tagging is to both set a version for my container and give it
    the appropriate name that is required to push it to a private registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find Login serveron the Overview blade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9fabdfaf-3c58-4232-b211-5fccc25fbef4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can try to push an image with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you have to push your image name and registry server login. When
    you execute the preceding command, you will see the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Still there is something wrong—we are pushing a container to the correct registry,
    but we have not authenticated yet. To have access to Azure Container Registry,
    we have to use Azure CLI. Use two commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The first one is used to authenticate in Azure, the second one will let you
    work with your instance of Container Registry. After successfully authenticating,
    you can retry pushing an image—this time everything should work smoothly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify it is available in the portal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6df1be3-6edc-43cf-b964-fd4250d16fd1.png)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we need is a Kubernetes cluster—this is why we use AKS to provision
    a managed Kubernetes service.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Kubernetes cluster using AKS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a Kubernetes service, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '*G*o to the portal.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the + Create a resource button and search for `AKS`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you click Create, you should see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4404f199-8450-43ee-a713-ffdc30302ca5.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have plenty of different options and fields here. Some of
    them should be self-explanatory. Initially, I recommend using default values for
    most fields, such as Kubernetes versionor Service principal,as they matter only
    if you have existing requirements regarding your application.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about applications and service principal objects in Azure AD,
    you can read this short article from the documentation: [https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-application-objects](https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-application-objects).
  prefs: []
  type: TYPE_NORMAL
- en: You can go to different tabs such as Networking or Monitoring to see whether
    you want to change something—however, the current settings should be correct for
    the very first AKS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have reviewed all fields, click on the Review + create button. The
    following screenshot shows my configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/727919e2-e7fb-447f-a01b-0509aaf06eb7.png)'
  prefs: []
  type: TYPE_IMG
- en: When you click on Create, you will have to wait a moment until deployment is
    finished.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a cluster can take a while, especially when you select several machines
    to be deployed at once. Be patient!
  prefs: []
  type: TYPE_NORMAL
- en: Running, scaling, and updating an application in AKS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run and deploy an application in AKS in Azure, we will need the Kubernetes
    manifest file, which will define how an image should be deployed. However, before
    we perform that part of the exercise, we have to configure Kubernetes locally,
    so it can connect with our cluster. To do so, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Initially, it will return the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'That means that we have not configured `kubectl `with the AKS cluster we just
    created. To do so, use the following Azure CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Running it should merge your cluster as a current context in your local configuration.
    Now, when you verify your connection, everything should be set and ready. We can
    go back to our manifest file—the initial version can be found in the *Chapter03*
    in the repository. In general, it is a simple YML file that defines and configures
    services and deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put the file in the directory for your application and use the following command
    to deploy it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After a moment, you should see the status of the process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need one more command to get the external IP of our service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Initially, you could see the `EXTERNAL-IP` field as pending—it should change
    in a second. Now you can verify the installation of an application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ab0908c-fb6a-4c57-b8e9-3d0cd6d0d7d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also one more method to get the status of the whole cluster. Try to
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'After a moment, you should see the whole Kubernetes dashboard available locally.
    Read all of the information carefully as it is really helpful when diagnosing
    possible issues with AKS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69fb2ba1-64bd-4b67-baf3-70d8db69549c.png)'
  prefs: []
  type: TYPE_IMG
- en: Solving problems with authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes AKS cannot access Azure Container Registry and needs the creation
    of a service principal, which can be used in pod deployment. To create it, you
    will need to perform the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The full script can be also found in the source code for this chapter. Once
    the secret is created, you can modify the manifest file and add the `imagePullSecrets` line
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Scaling a cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Scaling in AKS is one of the easiest things to do. All you need to do is go
    to Azure Portal, find your AKS instance, and click on the Scaleblade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/687cdef4-2be9-4696-9070-350407190317.png)'
  prefs: []
  type: TYPE_IMG
- en: Once there, you can change the cluster capacity depending on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have the required number of nodes available for your application—such
    information can be found in the Kubernetes dashboard. If you don't have enough
    machines, some of your images might not be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Updating an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Updating an application in AKS requires two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a new image to Azure Container Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a new image as the actual one in AKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you make changes in your application, you need two commands to update
    it in a registry. First, change its version to a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now what you need is to push this version to make it available in the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step to tell Kubernetes to update an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that your application is fully functional while updating, you have
    to scale it out to multiple pods. You can do it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**kubectl scale --replicas=3 deployment/{YOUR_APPLICATION}**`'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Container Instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While AKS is a complete orchestration solution, you might sometimes like to
    use a lightweight service instead that provides the most crucial features related
    to running containers. These features include no need to provision and manage
    virtual machines, security, and integrated public IP connectivity. If you want
    to run a containerized simple application such as a WebJob or website, **Azure
    Container Instances** (**ACI**) can be used to satisfy your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and deploying an application and container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start our journey with ACI by creating an application that we will host
    in a container. In the previous section, we used a simple Python script—this time
    we will try to use Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: As always, you can find source files in the appropriate source file folder for
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The very first thing we need once more is `Dockerfile`. As you remember, it
    contains instructions on how an application should be run. The following is an example
    for this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you read it carefully, you will find it pretty easy—what it does (step-by-step)
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Installs the specific Node.js version (this time **alpine**, which is a smaller
    distribution well designed for running in containers)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creates a new working directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copies files to it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installs all dependencies with the `npm install`command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starts an application by providing its starting point
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we can create a container using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: After a moment, you should have a new image created and added. If you face any
    problems, make sure that you are in the correct directory and not doubling its
    name.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can always check what images are currently available for you
    and their names. To do so, you can use the following Docker command: `docker images`*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can verify how our application works. To start it, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You can go to `localhost:8080` and check whether your application is running.
    If everything is configured correctly, you should be able to see the `Welcome
    to Azure Container Instances!`message in the center of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you may face problems when working with some web applications and
    running them locally—for some reason, you cannot connect to them using the specified
    port. In such situations, it is always a good idea to reconfigure them and use
    different ports.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will push an image to Azure so we can use it later in ACI.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing an image to Azure Container Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find full instructions on how you can work with ACI in *Container Registry
    and Kubernetes clusters *section of this chapter. Now, the idea is the same as
    when working with AKS—we have to perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to ACR
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tag an image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push it to ACR
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will need the following three commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: After a successful push, we can deploy an application to ACI.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an application to ACI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need is an instance of ACI. As usual, in Azure Portal click
    on + Create a resourceand search for `Container Instances`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a similar wizard to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4cde788d-9dcb-4ec0-a652-fce4392ad3eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The important thing here is that you have to select Privatewhen deciding on
    a Container image type. Choosing this option will display additional fields, which
    have to be filled in. When creating ACI, you will need to provide Container image.
    This is just the Docker tag you created when pushing an image to Container Registry.
    In my case it was `handsonazureregistry.azurecr.io/ handsonazure-aci`. The image
    registry login serveris simply a login server for the registry (you can find it
    in the Overviewblade of ACR). We need two more things—the registry username and
    password. While the username is simply the registry name, a password can be obtained
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To obtain a password, admin credentials have to be enabled. To enable them
    from CMD, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**az acr update -n {REGISTRY_NAME} --admin-enabled true**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can go to the Configurationsection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0eea2926-08bc-4a2a-af70-8ff62b4906e1.png)'
  prefs: []
  type: TYPE_IMG
- en: This time, all of these fields should be self-explanatory and, in fact, I left
    the default values in force during this exercise. You can change them if you feel
    other values will meet your requirements (such as, for example, the OS or available
    memory). Once all is set, you can click OKand publish an instance of your container.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have problems deploying a container from the portal, you can always
    use the Azure CLI. Here is the full command to do the same as we did in Azure
    Portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**az container create --resource-group {RG_NAME}--name {ACI_NAME} --image
    {ACR_LOGIN_SERVER}/{CONTAINER_NAME}:v1 --cpu 1 --memory 1 --registry-login-server
    {ACR_LOGIN_SERVER} --registry-username {REGISTRY_NAME} --registry-password {REGISTRY_PASSWORD}
    --dns-name-label {DNS_LABEL} --ports 80**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'When deployment is complete, go to your instance of ACI and check the Overviewblade.
    Copy the value of the `FQDN` field and paste it into your browser. You should
    be able to see the very same screen you saw locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c0992a4-3e53-492d-9380-a4362dce839a.png)'
  prefs: []
  type: TYPE_IMG
- en: That is all! As you can see, using Azure Container Services is a really quick
    way to deploy your application in a container using a minimal set of features.
    In the next section, we will focus on leveraging containers in App Services.
  prefs: []
  type: TYPE_NORMAL
- en: Web App for Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You do not have to use AKS or ACI to leverage features of containers in Azure—currently,
    there is one more feature available that you can use to deploy web applications
    written in an unsupported language (such as Go). Web App for Containers is an
    extension to App Services that uses Linux under the hood with Docker to run a
    service built on a stack, which is not currently supported by Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a web app hosted in a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create an App Service running with a Docker instance, you have to follow
    the very same steps from [Chapter 1](81d59e59-02b1-4973-95a0-9bf6a998e752.xhtml),
    *Azure App Service*, when we were discussing the creation of a web app using Azure
    Portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you reach the web app creation blade, take a look at the OSfield:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcb5903b-b11c-465b-af17-63e949e62f9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the Dockeroption is available. When you click on it, two more
    fields will need to be set:'
  prefs: []
  type: TYPE_NORMAL
- en: App Service plan/Location: This is the same as with "traditional" App Services with
    one important note. When you select Docker, all App Service Plans you can choose
    from will be powered by the Linuxoperating system. This will impact both pricing
    and feature availability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure container: When you select this option, you will see another screen
    with many different options depending on container settings. Currently, we have
    three different options to choose from—Single Container, Docker Compose, and Kubernetes.
    The latest two are currently in preview, but we will also cover them. For now,
    select Single Containerand use the Quickstartoption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here you can find my configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5d0cf68-d6a6-43d5-926d-669da3af031a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, after clicking on Create, Azure finishes provisioning new resources after
    several seconds. After creation, go to the freshly created App Service and take
    a look at the blades on the left. You will see that some of them are disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b00058d9-ad5a-4c51-9f01-4c56da9747be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, using Web App for Containers doesn''t allow us to use features such
    as WebJobs or Application Insights*.* Yet, we are still able to scale an application,
    attach a custom domain, or set a backup. Notice that one more blade is available—Container
    settings. When you click on it, you will see the same screen as during App Service creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f922ebd-cdbf-4ca6-9cdc-9cf277b7216a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see what happens when we change the image for our container. Change
    the Image and optional tag(eg ''image:tag'')field to `appsvc/dotnetcore`and then
    click Save. After restarting an application, you should see a change in the visible
    logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f08f0ad-c6d3-4ddc-a4ee-c221628d0634.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, you should see a success message when browsing your web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8556b293-2512-45d1-880b-8442a1560dd3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we will try to deploy our own code and see whether it works.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a custom application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will focus on creating and deploying a custom application
    to our Docker container in the web app. For the purpose of this exercise, we will
    reuse the container image from the previous part of this chapter where we were
    discussing ACI.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to prepare a brand new application, go through the steps defined
    in the *Creating and deploying an application and container* section where we
    created a Docker image and pushed it to Azure Container Registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you go once more to the Container settingsblade, you can change Image
    source to three different options:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Container Registry: It allows you to select images pushed to your own
    instance of ACR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Hub: Provides access to all images available in this repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private registry: You can also define a private repository from which to deploy
    your images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that, if you use ACR, the two other sources will also point to ACR as it
    acts as your own private Docker Hub with your images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Azure Container Registry tab and fill in all required fields as
    suggested by the portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3075b7c-a582-49be-8246-957a657d7c3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After a moment, a new image should be reloaded and working. If you browse to
    the URL of your application, you should be able to see changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f27f9e05-fdb1-458d-8045-6b6221cc04a0.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the very same container image I used while working with ACI is
    fully functional here in Web App for Containers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw, when working with containers in Azure you are able to focus on the
    delivery and shape of your application rather than configuration or maintenance.
    Of course, available features are not limited to those we covered in this chapter—you
    can also leverage functionalities such as continuous deployment, networking, or
    data volumes. What is available depends solely on the service you choose—Azure
    Container Instances and Web App for Containers are cloud components that are quite
    minimalistic and focus on running an application, while AKS delivers more advanced
    features. Nonetheless, containers are one of the most popular topics of recent
    months and it is quite possible that building and evolving that skill will help
    you in your future projects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn a bit about another service that allows
    you to run containerized applications and get the out of from the microservice
    architecture in the Azure cloud—Azure Service Fabric.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Azure Container Registry?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the Admin loginfeature in AKS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which OS do you have to choose while creating an App Service to be able to run
    containers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use images from the public registry in Web App for Containers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you scale AKS in the portal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How you can lower your application's downtime in AKS when updating it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do you have to do if AKS cannot authenticate to your instance of Azure
    Container Registry?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/container-instances/container-instances-orchestrator-relationship](https://docs.microsoft.com/en-us/azure/container-instances/container-instances-orchestrator-relationship)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/aks/networking-overview](https://docs.microsoft.com/en-us/azure/aks/networking-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/monitoring/monitoring-container-health?toc=%2Fen-us%2Fazure%2Faks%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json](https://docs.microsoft.com/en-us/azure/monitoring/monitoring-container-health?toc=%2Fen-us%2Fazure%2Faks%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
