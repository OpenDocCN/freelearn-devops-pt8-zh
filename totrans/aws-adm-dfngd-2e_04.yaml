- en: Securing Workloads Using AWS WAF
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS WAF 保障工作负载安全
- en: In the previous chapter, we learned a lot about how to leverage Amazon Elastic
    Beanstalk as well as Amazon Elastic File System to build and deploy highly scalable
    and available applications with the utmost of ease! However, there is one critical
    aspect that we didn't talk too much about in the previous chapter, and that is,
    of course, security! "*How do I safeguard my applications and workloads against
    malicious software and threats?*" This is exactly the question we will try and
    answer through a combination of two simple, yet very powerful, AWS services, namely
    AWS Shield and AWS **Web Application Firewall**, or **WAF**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何利用 Amazon Elastic Beanstalk 和 Amazon Elastic File System 来构建和部署高度可扩展且可用的应用程序，且过程非常简单！然而，有一个关键方面我们在上一章没有过多讨论，那就是，当然，安全性！"*我该如何保护我的应用程序和工作负载免受恶意软件和威胁的侵害？*"
    这个正是我们通过结合两个简单但非常强大的 AWS 服务——AWS Shield 和 AWS **Web 应用防火墙**（**WAF**）来回答的问题。
- en: 'Keeping this in mind, let''s have a quick look at the various topics that we
    will be covering in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，让我们快速浏览一下本章将涵盖的各个主题：
- en: Introducing AWS WAF and how it works
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 AWS WAF 及其工作原理
- en: Securing our WordPress site by leveraging WAF and using web ACLs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过利用 WAF 和使用 Web ACL 保护我们的 WordPress 网站
- en: Learning about additional WAF conditions for protection against cross-site scripting
    and SQL injections
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解用于防范跨站脚本和 SQL 注入的附加 WAF 条件
- en: Automated deployment and configuration of AWS WAF using CloudFormation templates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CloudFormation 模板自动部署和配置 AWS WAF
- en: Monitoring AWS WAF using Amazon CloudWatch
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon CloudWatch 监控 AWS WAF
- en: A brief introduction to AWS Shield and how it works
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简要介绍 AWS Shield 及其工作原理
- en: Understanding AWS Shield Advanced and how to leverage it
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 AWS Shield Advanced 以及如何利用它
- en: There is so much to do, so let's get started right away!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多事情要做，让我们马上开始吧！
- en: Introducing AWS Web Application Firewall
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 AWS Web 应用防火墙
- en: Security has always been, and always will be, a key concern for a lot of organizations
    that run their workloads and applications on the cloud. That is precisely why
    AWS offers a wide assortment of managed services that you, as a cloud administrator,
    should leverage in order to protect and safeguard your workloads from any compromises
    or threats. In this section, we are going to explore one such simple, yet really
    powerful, service, called AWS WAF, or Web Application Firewall.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性一直是并将永远是许多在云上运行工作负载和应用程序的组织的关键关注点。这正是 AWS 提供各种托管服务的原因，作为云管理员的您应当利用这些服务来保护和保障您的工作负载免受任何安全漏洞或威胁。在本节中，我们将探索这样一个简单但非常强大的服务——AWS
    WAF，或称 Web 应用防火墙。
- en: AWS WAF is basically a firewall that helps you to protect your internet-facing
    applications from common web-based threats and exploits. It is basically a service
    that enables you to specify a set of web security rules or ACLs that can allow
    or restrict a certain type of web traffic across Amazon CloudFront as well as
    the **Application Load Balancer** (**ALB**). As of now, WAF can be used to create
    customized rules that can safeguard your applications against attacks, such as
    SQL injections, cross-site scripting, **Distributed Denial of Services** (**DDoS**),
    bad bots, scrapers, and much more! You can easily create new rules and attach
    them to your existing ACL list as per your requirements, enabling you to respond
    to and mitigate changing traffic patterns more rapidly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: AWS WAF 基本上是一个防火墙，帮助您保护面向互联网的应用程序免受常见的基于网络的威胁和攻击。它实际上是一个服务，允许您指定一组 Web 安全规则或访问控制列表（ACL），这些规则可以允许或限制通过
    Amazon CloudFront 以及 **应用负载均衡器**（**ALB**）的某种类型的 Web 流量。到目前为止，WAF 可以用来创建自定义规则，帮助您的应用程序抵御诸如
    SQL 注入、跨站脚本、**分布式拒绝服务**（**DDoS**）、恶意机器人、抓取器等攻击！您可以根据需求轻松创建新规则，并将其附加到现有的 ACL 列表中，使您能够更快速地响应并缓解变化的流量模式。
- en: WAF also comes equipped with a powerful API, by using which you can automate
    the deployments of ACL rules as well as manage them programmatically. Alternatively,
    for the UI people out there, WAF provides customization CloudFormation templates
    which will allow you to get started with a complete WAF-based security solution
    in less than a few minutes! We will be looking at how to deploy this template
    for securing our own WordPress application as well a bit later in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: WAF还配备了一个强大的API，通过使用它，您可以自动化部署ACL规则以及以编程方式管理它们。此外，对于界面用户，WAF提供定制的CloudFormation模板，这将使您能够在几分钟内开始使用完整的基于WAF的安全解决方案！我们稍后将查看如何部署此模板，以确保我们自己的WordPress应用程序在本章稍后的部分。
- en: WAF is priced based on the number of ACL rules which you deploy, as well as
    on the number of web requests that your application receives.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: WAF的定价基于您部署的ACL规则数量以及您的应用程序接收的Web请求数量。
- en: 'Here is a quick summary of benefits that you can obtain by levering AWS WAF:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是通过利用AWS WAF可以获得的一些好处的快速总结：
- en: '**Enhanced protection**: Apart from your standard VPC and security groups,
    you can additionally safeguard your applications against commonly occurring web
    attacks by leveraging WAF''s ACL rules.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的保护**：除了标准的VPC和安全组外，您还可以通过利用WAF的ACL规则来进一步保护应用程序免受常见的Web攻击。'
- en: '**Advanced traffic filtering**: Unlike your simple NACLs or security groups,
    WAFs provide you with an ability to define custom rules and conditions based on
    the characteristics of your incoming web request, such as values present in the
    headers, origin IP address of the request, whether the request has any SQL code
    present in it, and so on. Using these conditions, you now have the ability to
    basically allow, block, or filter traffic based on such preset conditions.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级流量过滤**：与简单的NACL或安全组不同，WAF为您提供了根据传入Web请求的特征定义自定义规则和条件的能力，例如头部中存在的值，请求的源IP地址，请求中是否存在任何SQL代码等。使用这些条件，您现在可以基本上根据这些预设条件允许、阻止或过滤流量。'
- en: '**Easy management**: With WAF rules defined and managed in one central location,
    you can easily reuse and propagate your custom ACLs across multiple CloudFront
    CDNs as well as Application Load Balancers, and monitor the traffic as well as
    mitigate any issues, all using the same WAF API or web user interface.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简易管理**：通过在一个中心位置定义和管理WAF规则，您可以轻松地在多个CloudFront CDN和应用程序负载均衡器上重用和传播自定义ACL，并监视流量以及缓解任何问题，所有这些都可以使用相同的WAF
    API或Web用户界面完成。'
- en: '**Cost effective security solution**: One of the best parts of leveraging WAF
    is that there are absolutely no upfront fees or costs associated with it. You
    simply pay based on the number of rules you create using WAF as well as the amount
    of traffic your web application receives, and not a penny more!'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益的安全解决方案**：利用WAF的最佳之处之一是，它完全没有预付费用或相关费用。您只需根据使用WAF创建的规则数量以及您的Web应用程序接收的流量量进行支付，而不会多花一分钱！'
- en: With this basic set of information, let's have a look at how WAF actually works!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些基本信息，让我们看看WAF的实际工作原理！
- en: Concepts and terminologies
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概念和术语
- en: 'As discussed briefly, WAF can be enabled over your standard ALBs and over your
    CloudFront distributions. But before we get started with configuring WAF and its
    various rules and ACLs, we first need to understand some of its commonly used
    terms and terminologies:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如简要讨论的那样，WAF可以在您的标准ALB和CloudFront分发上启用。但在我们开始配置WAF及其各种规则和ACL之前，我们首先需要了解一些常用术语和术语：
- en: '**Conditions**: Conditions form the core of your WAF rulesets. These are basically
    configurable characteristics that you want WAF to monitor in each of your incoming
    web requests. At the time of writing this book, WAF supports the following list
    of conditions:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**条件**：条件构成了您WAF规则集的核心。这些基本上是您希望WAF在每个传入的Web请求中监视的可配置特征。在编写本书时，WAF支持以下条件列表：'
- en: '**IP match**: You can use this condition to check whether the incoming web
    request originated from a specified black/whitelisted IP addresses or not. You
    can then plot corresponding actions to be performed against the same based on
    your requirements, such as not allowing any incoming traffic other that the whitelisted
    IP range, and so on.  AWS WAF supports `/8`, `/16`, `/24`, `/32` CIDR blocks for
    an IPv4 address.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP 匹配**：你可以使用此条件检查传入的 web 请求是否来自指定的黑名单/白名单 IP 地址。然后，你可以根据需求对这些请求采取相应的操作，例如只允许来自白名单
    IP 范围的流量，等等。AWS WAF 支持 IPv4 地址的 `/8`、`/16`、`/24`、`/32` CIDR 块。'
- en: '**String and regex match**: A string match or a regex match condition can be
    used to specify a part of an incoming web request and its corresponding text that
    you wish to control access to. For example, you can create a match or regex condition
    that checks the user agent headers and its value against a preset *string* or
    *expression*. If the condition matches, you can opt to either allow or block that
    particular traffic using WAF rules.'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串和正则表达式匹配**：字符串匹配或正则表达式匹配条件可以用来指定传入 web 请求中的某一部分及其相应的文本，控制访问。例如，你可以创建一个匹配或正则表达式条件，检查用户代理头及其值是否与预设的*字符串*或*表达式*匹配。如果条件匹配，你可以选择允许或阻止该特定流量。'
- en: '**SQL injection match**: You can use this condition to inspect certain parts
    of your incoming web requests, such as the URI or query string, for any malicious
    SQL code. If a pattern matches, you can then opt to block all traffic originating
    from that particular request''s IP range.'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL 注入匹配**：你可以使用此条件检查传入 web 请求的某些部分，比如 URI 或查询字符串，是否包含任何恶意的 SQL 代码。如果模式匹配成功，你可以选择阻止所有来自该请求
    IP 范围的流量。'
- en: '**Cross-site scripting match**: Hackers and exploiters can often embed malicious
    scripts within web requests that can potentially harm your application. You can
    leverage the cross-site scripting match condition to inspect your incoming request
    URI or headers for any such scripts or code, and then opt to block the same using
    WAF rules.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨站脚本匹配**：黑客和利用者通常会在 web 请求中嵌入恶意脚本，这些脚本可能会危害你的应用程序。你可以利用跨站脚本匹配条件来检查传入请求的 URI
    或头部，查找任何此类脚本或代码，并选择通过 WAF 规则阻止这些请求。'
- en: '**Geographic match**: You can use this condition to list countries that your
    web request originated from and accordingly block or allow the same based on your
    requirements.'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理位置匹配**：你可以使用此条件列出你的 web 请求来源的国家，并根据你的需求决定是否阻止或允许这些请求。'
- en: '**Size constraint match**: You can use the size constraint match condition
    to check the lengths of specified parts of your incoming web requests, such as
    the query string or the URI. For example, you can create a simple WAF rule to
    block all requests which have a query string greater than 100 bytes, and so on.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小限制匹配**：你可以使用大小限制匹配条件来检查传入 web 请求中指定部分的长度，比如查询字符串或 URI。例如，你可以创建一个简单的 WAF
    规则来阻止所有查询字符串大于 100 字节的请求，等等。'
- en: '**Rules**: With your conditions defined, the next important aspect of configuring
    WAF are the rules. Rules basically allow you to combine one or more conditions
    into a logical statement, which can then be used to either allow, block, or count
    a particular incoming request. Rules are further classified into two categories:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则**：在定义了条件后，配置 WAF 的下一个重要方面是规则。规则基本上允许你将一个或多个条件组合成一个逻辑语句，然后可以用来允许、阻止或统计特定的传入请求。规则进一步分为两类：'
- en: '**Regular rules**: Regular or standard rules, apply one or more conditions
    to your most recent batch of incoming web requests. For example, a rule to block
    all incoming traffic from the IP range `40.40.5.0/24` or if there is any SQL-like
    code in the query string of your request, and so on.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常规规则**：常规或标准规则，应用一个或多个条件到你最近的一批传入的 web 请求。例如，一个规则可以阻止所有来自 IP 范围`40.40.5.0/24`的流量，或者当请求的查询字符串中包含任何类似
    SQL 的代码时，等等。'
- en: '**Rate-based rules**: Rate-based rules are very much like your regular rules
    apart from one addition: the rate limit. You can now configure conditions and
    pass a rate limit along them as well. The rule will only trigger if the conditions
    match or exceed that particular rate limit which was set.'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于速率的规则**：基于速率的规则与常规规则非常相似，不同之处在于它增加了速率限制。你现在可以配置条件并为其设置速率限制。只有当条件匹配或超过设置的速率限制时，规则才会触发。'
- en: Rate limits are checked by WAF within a 5-minute window period.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: WAF 会在 5 分钟的窗口期内检查速率限制。
- en: For example, you may configure a simple condition that blocks all incoming traffic
    from the IP range `40.40.5.0/24` with a rate limit of 10,000\. In this case, the
    rule will only trigger a corresponding action (allow, block, count) if the condition
    is met and the number of incoming requests in a 5-minute period exceed 10,000
    requests. Requests that do not meet both the conditions are simply not compared
    towards the rate limit and hence will not be blocked by this rule.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以配置一个简单的条件，阻止来自 `40.40.5.0/24` IP 范围的所有传入流量，且请求速率限制为 10,000。在这种情况下，只有在满足条件并且
    5 分钟内的请求数量超过 10,000 个时，规则才会触发相应的操作（允许、阻止、计数）。不符合这两个条件的请求将不会被计入速率限制，因此不会被此规则阻止。
- en: '**Web ACLs**: Once the rules are defined, you combine them into one or more
    web ACLs. Here, you have the ability to define an action for your rule if it gets
    triggered; for example, allow, block, count, or even perform a default action
    that gets triggered in case a request doesn''t match any of the conditions or
    rules specified. Web ACLs work on a priority basis, so the rule listed first is
    the one that gets compared to the incoming request first. This makes it extremely
    important to know the order in which you create and assign your rules in a web
    ACL.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web ACLs**：一旦规则定义完成，你需要将它们组合成一个或多个 Web ACL。在这里，你可以为触发的规则定义一个操作，例如：允许、阻止、计数，或在请求不符合任何指定条件或规则时执行默认操作。Web
    ACL 按优先级工作，因此第一个列出的规则会首先与传入的请求进行比较。这使得你非常有必要了解在 Web ACL 中创建和分配规则的顺序。'
- en: 'Here is a simple representation of how conditions, rules, and web ACLs work
    together in WAF:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是条件、规则和 Web ACL 如何在 WAF 中协同工作的简单示意图：
- en: '![](img/4ed0bb58-5f5a-4ef5-80ca-4387460aece2.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ed0bb58-5f5a-4ef5-80ca-4387460aece2.png)'
- en: With the concepts out of the way, let's look at a few simple steps that allow
    you to set up and configure WAF Web ACLs for safeguarding your web applications.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了这些概念后，让我们来看一些简单的步骤，帮助你设置和配置 WAF Web ACL，以保护你的 Web 应用程序。
- en: Getting started with WAF
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 WAF
- en: In this section, we are going to look at a few simple and easy-to-follow steps
    for getting started with AWS WAF. For demonstration purposes, we will be leveraging
    the same environments and application that we deployed from our previous chapter
    here, so, if you haven't gone through the use case, this might be a good time
    for a quick revisit!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些简单易行的步骤，帮助你快速开始使用 AWS WAF。为了演示，我们将使用与上一章节相同的环境和应用程序，因此，如果你还没有完成前面的案例，现在是时候快速回顾一下了！
- en: 'In the previous chapter, we leveraged Elastic Beanstalk as well as Elastic
    File System services to deploy a scalable and highly available WordPress application
    over the internet. In this section, we will leverage the same setup and secure
    it even further by introducing AWS WAF into it. Why use WAF for our WordPress
    application? Well, the simplest answer is to completely abstract the security
    checks from the underlying web server instance(s), and instead place the security
    checks at the point of entry of our application, as depicted in the following
    diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章节中，我们使用了 Elastic Beanstalk 和 Elastic File System 服务，将一个可扩展且高度可用的 WordPress
    应用程序部署到互联网上。在本节中，我们将继续使用相同的设置，并通过引入 AWS WAF 进一步加强其安全性。为什么要为我们的 WordPress 应用程序使用
    WAF？最简单的答案是：完全将安全检查从底层的 Web 服务器实例中抽象出来，而是将安全检查放在应用程序的入口点，如下图所示：
- en: '![](img/caa43ac4-8f03-4a43-8f5e-d8f132fc09d1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/caa43ac4-8f03-4a43-8f5e-d8f132fc09d1.png)'
- en: To get started, you will first need to ensure that your WordPress application
    has a CloudFront CDN attached to it, or alternatively an Application Load Balancer
    frontend its requests. This is a crucial step, as without a CloudFront CDN or
    an Application Load Balancer, WAF will simply not work! In my case, I have configured
    and deployed a simple CloudFront CDN for my production-grade WordPress application.
    You can refer to the following step-by-step guide for setting up your own CDN
    using CloudFront, at [http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，你首先需要确保你的 WordPress 应用程序已附加了 CloudFront CDN，或者至少前端请求是通过 Application Load
    Balancer 进行的。这一步至关重要，因为没有 CloudFront CDN 或 Application Load Balancer，WAF 根本无法工作！在我的案例中，我为我的生产级
    WordPress 应用程序配置并部署了一个简单的 CloudFront CDN。你可以参考以下步骤指南，使用 CloudFront 设置你自己的 CDN：[http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/)。
- en: Creating the web ACL
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Web ACL
- en: 'Once you are done with your CDN, head over to the AWS Management Console and
    filter out WAF and Shield services using the dashboard, or alternatively, navigate
    to this URL [https://console.aws.amazon.com/waf/home](https://console.aws.amazon.com/waf/home)
    to bring up the WAF dashboard:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 完成 CDN 设置后，前往 AWS 管理控制台，使用仪表板筛选 WAF 和 Shield 服务，或者直接访问此 URL [https://console.aws.amazon.com/waf/home](https://console.aws.amazon.com/waf/home)
    打开 WAF 仪表板：
- en: Assuming that this is the first time you are configuring WAF, you will be prompted
    by a welcome screen to either opt for AWS WAF or AWS Shield services. Select the
    Go to AWS WAF option. This will redirect you to the WAF dashboard, where we select
    the Configure web ACL option to get started.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设这是您第一次配置 WAF，您将看到一个欢迎界面，提示您选择 AWS WAF 或 AWS Shield 服务。选择“前往 AWS WAF”选项。这将将您重定向到
    WAF 仪表板，在此选择“配置 web ACL”选项以开始。
- en: Selecting the Configure web ACL option will bring up a Set up a web access control
    list (web ACL) wizard that will guide you through your first web ACL setup.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“配置 web ACL”选项，将弹出一个“设置 web 访问控制列表（web ACL）”向导，指导您完成第一次 web ACL 设置。
- en: The first page on the wizard basically covers the concepts of conditions, rules,
    and ACLs, so simply select the Next option to proceed further.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向导的第一页基本涵盖了条件、规则和 ACL 的概念，因此只需选择“下一步”继续。
- en: In the Name web ACL page, provide a suitable Web ACL Name for your new ACL.
    You will notice that the CloudWatch metric name field gets correspondingly auto-populated
    with a matching name. You can change the name as per your requirements. This metric
    name will be later used to monitor our web ACLs using CloudWatch's dashboards.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“命名 web ACL”页面中，为您的新 ACL 提供一个合适的 Web ACL 名称。您会注意到，CloudWatch 指标名称字段会自动填充相应的名称。您可以根据需要更改名称。此指标名称将在以后用于通过
    CloudWatch 仪表板监控我们的 web ACL。
- en: Moving on, from the Region drop-down list, select either Global (CloudFront) or
    an alternative Region name, based on whether you want to secure a CDN or an Application
    Load Balancer. In my case, since I already have a CDN set up, I've opted for the
    Global (CloudFront) option.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在“区域”下拉列表中，选择 Global (CloudFront) 或其他区域名称，具体取决于您是否要保护 CDN 或应用程序负载均衡器。以我为例，由于我已经设置了
    CDN，所以我选择了 Global (CloudFront) 选项。
- en: WAF for the Application Load Balancer is currently supported only for the following
    regions: US East (N. Virginia), US West (N. California), US West (Oregon),  EU
    (Ireland), and  Asia Pacific (Tokyo).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，WAF 对应用程序负载均衡器的支持仅限于以下地区：美国东部（弗吉尼亚北部）、美国西部（加利福尼亚北部）、美国西部（俄勒冈）、欧洲（爱尔兰）和亚太地区（东京）。
- en: 'In the AWS resource to associate field, you can opt to select your CloudFront
    distribution or your Application Load Balancer using the drop-down list; however,
    for the sake of simplicity, do not configure this option for the time being. Remember,
    you can always associate your web ACLs with one or more AWS resources after completing
    this wizard! Once done, click Next to proceed:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 资源关联字段中，您可以选择从下拉列表中选择您的 CloudFront 分发或应用程序负载均衡器；但是，为了简化起见，暂时不要配置此选项。请记住，完成此向导后，您始终可以将
    web ACL 与一个或多个 AWS 资源关联！完成后，点击“下一步”继续：
- en: '![](img/10056b82-20c4-4f42-b737-1e5a648b0b0a.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10056b82-20c4-4f42-b737-1e5a648b0b0a.png)'
- en: With the web ACL named, we move on to the next section where we can configure
    our conditions. On the Create conditions page, select an appropriate condition
    that you wish to configure for your web application. In this scenario, we will
    be configuring an IP match condition along with a string match condition. The
    idea here is to only grant access to our WordPress administrator login page (`wp-login.php`)
    from my local laptop's IP, and, conversely, for any other IP that wishes to access
    the `wp-login.php` page, the traffic should get dropped.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命名 web ACL 后，我们进入下一个阶段，可以配置条件。在“创建条件”页面，选择您希望为您的 web 应用程序配置的适当条件。在此场景中，我们将配置一个
    IP 匹配条件以及一个字符串匹配条件。目标是仅允许我的本地笔记本 IP 访问 WordPress 管理员登录页面（`wp-login.php`），而任何其他
    IP 访问 `wp-login.php` 页面时，流量应被丢弃。
- en: Creating the conditions
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建条件
- en: 'As mentioned earlier, conditions are configurable characteristics that you
    want WAF to monitor in each of your incoming web requests:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，条件是您希望 WAF 监控的每个传入 Web 请求的可配置特性：
- en: To get started with a condition, select the Create condition option from the
    IP match conditions tile.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始配置条件，请从 IP 匹配条件卡片中选择“创建条件”选项。
- en: Here, provide a suitable Name for your match condition and select the IPv4 option
    from the IP Version. Provide your desktop's or laptop's public IP in the Address field.
    You can alternatively provide a range of IP addresses here using either of the
    supported CIDR blocks.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，为你的匹配条件提供一个合适的名称，并从IP版本中选择IPv4选项。在地址字段中提供你的桌面或笔记本电脑的公共IP。你也可以使用支持的CIDR块提供一系列IP地址。
- en: 'Remember to select the Add IP address or range option before creating the match
    condition:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记得在创建匹配条件之前选择“添加IP地址或范围”选项：
- en: '![](img/0f9e052b-010e-4c08-abcb-2288ffb00b84.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f9e052b-010e-4c08-abcb-2288ffb00b84.png)'
- en: With the IP match condition created, let's move on to creating the second condition
    for our ACL as well. For this, select the Create condition option from the String
    and regex match conditions section.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了IP匹配条件后，让我们继续为我们的ACL创建第二个条件。为此，请从字符串和正则匹配条件部分选择“创建条件”选项。
- en: Once again, we start by providing a suitable Name for our string match condition,
    followed by selecting the Type of string to match with. Here, select the String
    match option to begin with.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们再次通过为我们的字符串匹配条件提供一个合适的名称开始，然后选择与之匹配的字符串类型。在这里，首先选择字符串匹配选项。
- en: 'Next, in the Part of the request to filter on section, select the appropriate
    section of your request that you wish to filter, using the match condition. In
    my case, I have selected the URI option as we need to match the resource `wp-login.php` from
    the URI. Alternatively, you can also opt to select the following values based
    on your requirements:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在请求过滤部分，选择你希望根据匹配条件过滤的请求部分。在我的例子中，我选择了URI选项，因为我们需要从URI中匹配资源`wp-login.php`。另外，你也可以根据需求选择以下值：
- en: '`Header`: Used to match a specific request header, such as user-agent.'
  id: totrans-65
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Header`：用于匹配特定的请求头，如用户代理。'
- en: '`HTTPMethod`: Used to indicate the type of operation the request intends to
    perform on the origin, such as `PUT`, `GET`, `DELETE`, and so on.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTPMethod`：用于指示请求打算在源上执行的操作类型，如`PUT`、`GET`、`DELETE`等。'
- en: '`QueryString`: Used to define a query string in a URL.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QueryString`：用于定义URL中的查询字符串。'
- en: '`Body`: Used to match the body of the request. In this case, WAF only inspects
    the first 8,192 bytes (8 KB) contained within the request''s body. You can alternatively
    set up a Size Constraint condition that blocks all requests that are greater than
    8 KB in size.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Body`：用于匹配请求的主体。在这种情况下，WAF仅检查请求主体中的前8,192字节（8KB）。你还可以设置大小限制条件，以阻止所有大于8KB的请求。'
- en: 'Next, in the Match type drop-down list, select the option Contains, as shown
    in the following screenshot. The Contains option means that the string to match
    can appear anywhere in the request. Alternatively, you can also opt to select
    from these options, based on your requirement:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在匹配类型下拉列表中，选择“包含”选项，如下图所示。“包含”选项意味着待匹配的字符串可以出现在请求的任何位置。你还可以根据需求从以下选项中进行选择：
- en: 'ContainsWord: Used to specify a specific Value to match in the request'
  id: totrans-70
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: ContainsWord：用于指定要在请求中匹配的特定值
- en: 'Exactly matches: Used to match the string and the request value exactly'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全匹配：用于精确匹配字符串和请求值
- en: 'Starts with: Used to check for a matching string at the beginning of a request'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以...开始：用于检查请求开头的匹配字符串
- en: 'Ends with: Used to check for a matching string at the end of the request'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以...结束：用于检查请求结尾的匹配字符串
- en: '![](img/52df0987-8ebe-4b02-94a0-0905f6ed3b40.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52df0987-8ebe-4b02-94a0-0905f6ed3b40.png)'
- en: The Transformation field is handy when you need to re-format the web request
    before WAF inspects the same. This can involve Converting to lowercase, HTML decoding,
    Whitespace normalization, URL Decode, and so on. For this particular use case,
    we don't have any particular transformation to perform on the request, and hence
    I've selected the None option.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换字段在你需要在WAF检查请求之前重新格式化请求时非常有用。这可能包括转换为小写字母、HTML解码、空白符规范化、URL解码等。对于这个特定的用例，我们不需要对请求执行任何特定的转换，因此我选择了“无”选项。
- en: Finally, in the Value to match field, enter the text (`wp-login`) that we want
    WAF to search for in the web requests. Once completed, remember to click on the
    Add filter option before you proceed with the `Create` command.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在值匹配字段中，输入我们希望WAF在Web请求中搜索的文本（`wp-login`）。完成后，记得点击“添加过滤器”选项，然后再继续执行`创建`命令。
- en: With this step completed, our basic conditions are in place. Alternatively,
    you can set up other relevant conditions based on your criteria and requirements.
    Once done, select the Next option to proceed with the wizard.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此步骤后，我们的基本条件已设置完毕。或者，你可以根据你的标准和需求设置其他相关条件。完成后，选择下一步选项继续进行向导。
- en: Creating rules
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建规则
- en: 'With your conditions defined, we now move on to the next important aspect of
    configuring WAF: rules. Rules basically allow you to combine one or more condition,
    into a logical statement, which can then be used to either allow, block, or count
    a particular incoming request:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了条件后，我们将进入配置 WAF 的下一个重要方面：规则。规则基本上允许你将一个或多个条件组合成一个逻辑语句，之后可以用来允许、阻止或计数某个特定的传入请求：
- en: In the Create rules page, you can now merge the conditions we created a while
    back and assign each rule a corresponding action, such as allow, block, or count.
    To get started, select the Create rule option.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建规则页面，你现在可以合并我们之前创建的条件，并为每个规则分配相应的操作，例如允许、阻止或计数。要开始，选择创建规则选项。
- en: 'In the Create rule popup, we will be creating two rules: one rule that will
    basically allow me to access the WordPress admin login page (`wp-login.php`) from
    my local laptop, and another rule that blocks traffic to the same login page.
    Let''s first create the Allow traffic rule.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建规则弹出框中，我们将创建两个规则：一个规则基本上允许我从本地笔记本电脑访问 WordPress 管理员登录页面（`wp-login.php`），另一个规则阻止流量访问同一登录页面。让我们首先创建允许流量规则。
- en: To do so, type in a suitable Name for your rule. You will notice the corresponding
    CloudWatch metric name field auto-populate itself with the same name as well.
    You can choose to change this name as per your requirements, or leave it to its
    default value.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，输入一个适当的规则名称。你会注意到，相应的 CloudWatch 指标名称字段也会自动填充为相同的名称。你可以根据需求选择更改此名称，或者保留其默认值。
- en: 'Next, in the Rule type drop-down list, select whether you want this rule to
    be a Regular rule or a Rated rule. For this scenario, I''ve opted for the Regular
    rule, as shown in the following screenshot:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在规则类型下拉列表中，选择你希望此规则是常规规则还是评级规则。在此场景中，我选择了常规规则，如下图所示：
- en: '![](img/fcd78b2e-1bf3-4202-9118-304dee3a97df.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcd78b2e-1bf3-4202-9118-304dee3a97df.png)'
- en: 'Once done, move on to the Add conditions section, where we can associate our
    rule with one or more conditions. Start by selecting the appropriate drop-down
    option to form the following rule:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，继续进入添加条件部分，在这里我们可以将规则与一个或多个条件关联起来。首先选择适当的下拉选项来形成以下规则：
- en: '[PRE0]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s what your new rule should look like once it is properly set up. Click
    on Create once completed:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你新规则应该是什么样子的，一旦正确设置完成，点击创建：
- en: '![](img/5420d5a5-f35a-48bd-a446-9d1336c1dc26.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5420d5a5-f35a-48bd-a446-9d1336c1dc26.png)'
- en: With your Allow rule created, we use the same steps once again to create a Block
    rule as well. Select the Create rule option once again, and provide a suitable
    Name for your rule. Similar to the previous case, I've opted for a Regular rule here
    as well.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建了“允许”规则后，我们再次使用相同的步骤来创建一个“阻止”规则。再次选择创建规则选项，并为规则提供一个适当的名称。与之前的情况类似，我在这里也选择了一个常规规则。
- en: 'Next, in the Add conditions section, we first add a condition that matches
    the following statement:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在添加条件部分，我们首先添加一个匹配以下语句的条件：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, select the Add condition option to add the string match condition as
    well:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择添加条件选项，添加字符串匹配条件：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s what your rule should look like once both the conditions are added
    to it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在将条件添加到规则后，它应该是什么样子的：
- en: '![](img/99faa3d2-619b-4df9-9e89-67950ab0437f.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99faa3d2-619b-4df9-9e89-67950ab0437f.png)'
- en: With the conditions in place, select the Create option to finally create your
    blocking rule.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置好条件后，选择创建选项，最终创建你的阻止规则。
- en: 'Now that your two rules are created, you should see them both listed in the
    Add rules to a web ACL page, as shown in the following screenshot:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你的两个规则已经创建完成，你应该能在添加规则到 Web ACL 页面中看到它们，如下图所示：
- en: '![](img/5b32b5ad-3182-4188-be53-f0e4c75df03d.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b32b5ad-3182-4188-be53-f0e4c75df03d.png)'
- en: Here, make sure you order your rules correctly, based on their precedence, by
    selecting the Order option as required. You can additionally configure the Default
    action for your web ACL as well. This default action will only get triggered if
    the request does not match any of the conditions mentioned in either the *allow
    or the blocking rules*. Once you are confident with your configurations, select
    the Review and create option, as shown earlier. And voila! Your basic WAF is now
    up and running!
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，请确保根据它们的优先级正确排序你的规则，通过选择所需的“顺序”选项。你还可以配置你的Web ACL的默认操作。只有当请求不匹配任何*允许或阻止规则*中提到的条件时，才会触发此默认操作。一旦你对配置感到满意，选择“审阅和创建”选项，如前所示。大功告成！你的基本WAF现在已经启动运行！
- en: Assigning a WAF Web ACL to CloudFront distributions
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将WAF Web ACL分配给CloudFront分发
- en: 'With the web ACL created, you can now easily assign it to one or more CloudFront
    distributions, as per your requirements. To do so, simply log in to your AWS dashboard
    and filter the CloudFront service, or alternatively, navigate to [https://console.aws.amazon.com/cloudfront/home](https://console.aws.amazon.com/cloudfront/home)
    to view the CloudFront dashboard directly:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了Web ACL之后，你现在可以根据需求轻松地将其分配给一个或多个CloudFront分发。要做到这一点，只需登录到AWS控制台并过滤“CloudFront”服务，或者直接导航到[https://console.aws.amazon.com/cloudfront/home](https://console.aws.amazon.com/cloudfront/home)直接查看CloudFront仪表板：
- en: Once logged into the CloudFront dashboard, select the appropriate Distribution
    ID for which you wish to enable the WAF Web ACL rules.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦登录到CloudFront仪表板，选择你希望启用WAF Web ACL规则的适当分发ID。
- en: Select the Edit option from the General tab to bring up your distribution's
    configurations and settings.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“常规”选项卡中选择“编辑”选项，以打开分发的配置和设置。
- en: 'Here, in the Edit Distribution page, select your newly created web ACL from
    the AWS WAF Web ACL drop-down list, as shown in the following screenshot:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“编辑分发”页面中，从AWS WAF Web ACL下拉列表中选择你新创建的Web ACL，如下图所示。
- en: '![](img/5b906b2d-1584-41af-b7e3-92251e32f5ff.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b906b2d-1584-41af-b7e3-92251e32f5ff.png)'
- en: Once the ACL is selected, I would also recommend that you enable the logging
    of your distribution in case you already haven't done that. This is just an added
    measure of precaution and security that is a must for any production-grade environment
    that you may be working on. Scroll down on the Edit Distribution page, and select
    the On option adjoining the Logging field. Provide your logging bucket's name
    in the Bucket for Logs field and click on the Yes, Edit option once the required
    fields are all filled in.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦选择了ACL，我还建议你启用你的分发日志记录，以防你还没有这样做。这只是一种额外的预防和安全措施，对于你可能正在工作的任何生产级环境都是必须的。在“编辑分发”页面上滚动到底部，并选择“日志记录”字段旁边的“打开”选项。在“日志记录桶的名称”字段中提供你的日志记录桶的名称，一旦所有必填字段都填写完毕，点击“是，编辑”选项。
- en: The changes will take a good few minutes to propagate through the CloudFront
    distribution. You can then move on to testing your WAF once the distribution's
    Status has changed to Enabled.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 更改将需要一些时间来传播到CloudFront分发中。一旦分发的“状态”更改为“已启用”，你可以开始测试你的WAF。
- en: 'To test your WAF, simply open a browser and type in the URL of your WordPress
    application (`<http://YOUR_CLOUDFRONT_URL>/wp-login.php`) from your own laptop/desktop.
    In this case, you should be able to see the `wp-login.php` page without any issues
    whatsoever. However, if you try accessing the same page from a different laptop
    or machine, you will be thrown the following error on screen:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试你的WAF，请简单地打开浏览器，输入你的WordPress应用的URL（`<http://YOUR_CLOUDFRONT_URL>/wp-login.php`）在你自己的笔记本电脑/台式机上。在这种情况下，你应该能够毫无问题地看到`wp-login.php`页面。但是，如果你尝试从不同的笔记本电脑或机器访问同一页面，你将在屏幕上看到以下错误：
- en: '![](img/6cec3fcf-f199-42d9-9bae-941ec3a6ff30.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cec3fcf-f199-42d9-9bae-941ec3a6ff30.png)'
- en: At this point, your WordPress administrator login page is now protected from
    all IPs except those that you specified in your Web ACL's allow list! Amazing,
    isn't it?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你的WordPress管理员登录页面现在受到除了你在Web ACL允许列表中指定的IP之外的所有IP的保护！是不是很神奇？
- en: You can create a custom error page using the CloudFront distribution settings
    and redirect your users to this page rather than showing them the standard *error
    page*, as depicted in the preceding screenshot.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用CloudFront分发设置创建自定义错误页面，并将用户重定向到此页面，而不是显示标准的*错误页面*，如前面截图所示。
- en: With this, we come towards the end of this basic web ACL configuration section.
    In the next section, we will be looking at how to enhance your basic ACL setup
    with more conditions, with more emphasis towards SQL injections and cross-site
    scripting.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里，我们即将结束本节的基本 Web ACL 配置内容。在下一节中，我们将探讨如何通过添加更多条件来增强您的基本 ACL 设置，重点关注 SQL 注入和跨站脚本攻击。
- en: Working with SQL injection and cross-site scripting conditions
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 SQL 注入和跨站脚本攻击条件
- en: Besides restricting access to a specific set of IP addresses, WAF additionally
    provides defense capabilities against more exploitative attacks, such as SQL injections
    and cross-site scripting. In this section, we will take a closer look at both
    of these conditions and how you can leverage them for protecting your own applications.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了限制对特定 IP 地址集的访问外，WAF 还提供了防范更多攻击的能力，例如 SQL 注入和跨站脚本攻击。在本节中，我们将详细了解这两种条件，以及如何利用它们保护您的应用程序。
- en: To start off, let's have a closer look at SQL injections. An SQL injection basically
    consists of the insertion of an SQL query within a request that is made from a
    client to your application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们更详细地了解 SQL 注入。SQL 注入本质上是在客户端发出的请求中插入 SQL 查询，攻击目标是您的应用程序。
- en: SQL injections, if successfully implemented, can read as well as modify sensitive
    data from the database, and are even capable enough to execute administration
    operations on your database, such as restoring from a previous backed up file,
    shutting the database down completely, and much more.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SQL 注入成功实施，它可以读取并修改数据库中的敏感数据，甚至能够执行数据库的管理操作，比如从之前的备份文件恢复、完全关闭数据库等操作。
- en: 'Here''s a list of some common conditions and their associated configurations
    that you can choose to apply in your web ACL rules:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些常见条件及其关联配置的列表，您可以选择在 Web ACL 规则中应用它们：
- en: '| **HTTP request component to match** | **Relevant input transformations to
    apply** | **Justification** |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| **HTTP 请求组件匹配** | **相关输入转换应用** | **理由** |'
- en: '| `QUERY_STRING` | `URL_DECODE`, `HTML_ENTITY_DECODE` | The most common component
    to match. Query string parameters are frequently used in database lookups. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `QUERY_STRING` | `URL_DECODE`, `HTML_ENTITY_DECODE` | 最常见的匹配组件。查询字符串参数常用于数据库查找。
    |'
- en: '| `URI` | `URL_DECODE`, `HTML_ENTITY_DECODE` | If your application is using
    friendly or clean URLs, then parameters might appear as part of the URL path segment,
    and not the query string. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `URI` | `URL_DECODE`, `HTML_ENTITY_DECODE` | 如果您的应用使用友好或干净的 URL，那么参数可能会作为
    URL 路径的一部分出现，而不是查询字符串的一部分。 |'
- en: '| `BODY` | `URL_DECODE`, `HTML_ENTITY_DECODE` | A common component to match
    if your application accepts form input. AWS WAF only evaluates the first 8 KB
    of the body content. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `BODY` | `URL_DECODE`, `HTML_ENTITY_DECODE` | 如果您的应用接受表单输入，这是一个常见的匹配组件。AWS
    WAF 仅评估正文内容的前 8 KB。 |'
- en: '| **HEADER**: **Cookie** | `URL_DECODE`, `HTML_ENTITY` | A less common component
    to match. But, if your application uses cookie-based parameters in database lookups,
    consider matching on this component as well. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| **HEADER**: **Cookie** | `URL_DECODE`, `HTML_ENTITY` | 一个不太常见的匹配组件。如果您的应用在数据库查找中使用基于
    Cookie 的参数，可以考虑匹配这个组件。 |'
- en: '| **HEADER**: **Authorization** | `URL_DECODE`, `HTML_ENTITY_DECODE _DECODE`
    | A less common component to match. But, if your application uses the value of
    this header for database validation, consider matching on this component as well.
    |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| **HEADER**: **Authorization** | `URL_DECODE`, `HTML_ENTITY_DECODE _DECODE`
    | 一个不太常见的匹配组件。如果您的应用使用该标头的值进行数据库验证，考虑匹配此组件。 |'
- en: To configure your own SQL injection conditions and rules, log in to your WAF
    dashboard once again by navigating to [https://console.aws.amazon.com/waf/home](https://console.aws.amazon.com/waf/home).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置您自己的 SQL 注入条件和规则，请再次登录 WAF 仪表板，方法是访问 [https://console.aws.amazon.com/waf/home](https://console.aws.amazon.com/waf/home)。
- en: Next, select the SQL Injection option from the navigation pane and, within that,
    select the Create condition to get started.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从导航窗格中选择 SQL 注入选项，然后选择创建条件以开始配置。
- en: 'In the Create SQL injection match condition page, start off by providing a
    Name for your new condition. You can additionally select whether you want to enable
    this condition for your CloudFront CDNs (Global) or for your individual Application
    Load Balancers. In this case, I''ve opted for the Global (CloudFront) option,
    as depicted in the following screenshot:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建 SQL 注入匹配条件页面中，首先为您的新条件提供一个名称。您还可以选择是否要为您的 CloudFront CDN（全球）或单独的应用程序负载均衡器启用此条件。在这种情况下，我选择了全球（CloudFront）选项，如下图所示：
- en: '![](img/3ecbae94-ad63-4367-86b4-96ca15afca9c.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ecbae94-ad63-4367-86b4-96ca15afca9c.png)'
- en: Next, in the Filter settings section, select the appropriate Part of the request
    to filter on as well as the associated Transformation section. You can refer to
    the SQL injection *common conditions* table, as discussed previously, for the
    same. Once the values are provided, click on the Add filter option to complete
    the process.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在筛选设置部分，选择要筛选的请求的相应部分，以及相关的转换部分。如前所述，您可以参考 SQL 注入的*常见条件*表格。填写完值后，点击添加筛选器选项以完成该过程。
- en: Now, here's a really handy tip! There will definitely be cases where you will
    be writing more than one filter for your SQL injection condition based on different
    parts of the request you wish to filter, such as URI, query string, and so on.
    In such cases, it is always recommended to create multiple filters within the
    same SQL injection condition and then attach that one condition to a web ACL rule.
    The reason? A web request needs only to match one of the filters in the SQL injection
    match condition for WAF to allow or block the request based on that condition.
    On the other hand, if you add only one filter per SQL injection match condition,
    and you create more than one such SQL injection condition, the request has to
    match all the conditions in order for WAF to allow or block it.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是一个非常实用的技巧！在某些情况下，您可能需要为 SQL 注入条件编写多个筛选器，依据您想要筛选的请求的不同部分，如 URI、查询字符串等。在这种情况下，建议在同一个
    SQL 注入条件内创建多个筛选器，然后将该条件附加到 Web ACL 规则中。原因是，Web 请求只需要匹配 SQL 注入匹配条件中的一个筛选器，WAF 就会根据该条件允许或阻止请求。另一方面，如果您为每个
    SQL 注入匹配条件仅添加一个筛选器，并且创建多个此类 SQL 注入条件，那么请求必须匹配所有条件，WAF 才会根据所有条件来允许或阻止该请求。
- en: The same can also be applied for protection against cross-site scripting or
    XSS. Cross-site scripting generally occurs when web applications include user-provided
    data in web pages that is sent to the browser without proper sanitization. If
    the data isn't properly validated or escaped, an attacker can use those vectors
    to embed scripts, inline frames, or other objects into the rendered page. These,
    in turn, can be used for a variety of malicious purposes, including stealing user
    credentials by using keyloggers, installing system malware, and much more. The
    impact of the attack is magnified if that user data persists on the server side
    in a data store and is then delivered to a larger set of users.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的设置也可以用于防护跨站脚本攻击（XSS）。跨站脚本通常发生在 Web 应用程序将用户提供的数据嵌入到网页中，并在没有正确清理的情况下发送到浏览器。如果数据没有经过适当验证或转义，攻击者可以利用这些向量将脚本、内联框架或其他对象嵌入渲染的页面中。这些攻击可以用于各种恶意目的，包括通过键盘记录器窃取用户凭据、安装系统恶意软件等。如果这些用户数据在服务器端的数据库中持续存在，并且随后被传递给更多的用户，攻击的影响将被放大。
- en: 'Here''s a list of some common conditions and their associated configurations
    that you can choose to apply in your web ACL rules:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常见条件及其相关配置的列表，您可以选择应用于您的 Web ACL 规则中：
- en: '| **HTTP request component to match** | **Relevant input transformations to
    apply** | **Justification** |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| **HTTP 请求组件匹配** | **应用的相关输入转换** | **理由** |'
- en: '| `BODY` | `URL_DECODE`, `HTML_ENTITY_DECODE` | A very common component to
    match if your application accepts form input. AWS WAF only evaluates the first
    8 KB of the body content. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `BODY` | `URL_DECODE`, `HTML_ENTITY_DECODE` | 如果您的应用程序接受表单输入，这是一个非常常见的组件。AWS
    WAF 只会评估前 8 KB 的正文内容。 |'
- en: '| `QUERY_STRING` | `URL_DECODE`, `HTML_ENTITY_DECODE` | Recommended if query
    string parameters are reflected back into the web page. An example is the current
    page number in a paginated list. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `QUERY_STRING` | `URL_DECODE`, `HTML_ENTITY_DECODE` | 如果查询字符串参数被反射回网页中，建议使用此设置。一个例子是分页列表中的当前页码。
    |'
- en: '| **HEADER**: **Cookie** | `URL_DECODE`, `HTML_ENTITY_DECODE` | A common component
    to match if your application accepts form input. Recommended if your application
    uses cookie-based parameters that are reflected back on the web page. For example,
    the name of the user who is currently logged in is stored in a cookie and embedded
    in the page header. WAF only evaluates the first 8 KB of the body content. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| **HEADER**: **Cookie** | `URL_DECODE`, `HTML_ENTITY_DECODE` | 如果你的应用接受表单输入，这是一个常见的匹配组件。推荐在你的应用使用基于Cookie的参数并将其反射回网页时使用。例如，当前登录用户的名称存储在一个Cookie中，并嵌入在页面头部。WAF仅评估正文内容的前8KB。
    |'
- en: '| `URI` | `URL_DECODE`, `HTML_ENTITY_DECODE` | Less common, but if your application
    is using friendly URLs, then parameters might appear as part of the URL path segment,
    not the query string (they are later rewritten server side). There are similar
    concerns as with query strings. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `URI` | `URL_DECODE`, `HTML_ENTITY_DECODE` | 不太常见，但如果你的应用使用友好的URL，则参数可能作为URL路径的一部分出现，而不是查询字符串（这些参数随后会在服务器端被重写）。这与查询字符串存在类似的安全隐患。
    |'
- en: To configure your own cross-site scripting conditions and rules, log in to your
    WAF dashboard once again by visiting [https://console.aws.amazon.com/waf/home](https://console.aws.amazon.com/waf/home).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置你自己的跨站脚本条件和规则，再次登录到你的WAF仪表板，访问[https://console.aws.amazon.com/waf/home](https://console.aws.amazon.com/waf/home)。
- en: Next, select the Cross-site scripting option from the navigation pane and, within
    that, select the Create condition to get started.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从导航窗格中选择“跨站脚本”选项，然后在其中选择“创建条件”以开始操作。
- en: In the Create cross-site scripting match condition page, start off by providing
    a Name for your new condition. You can additionally select whether you want to
    enable this condition for your CloudFront CDNs (Global) or for your individual
    Application Load Balancers. In this case, I've opted for the Global (CloudFront) option
    for now.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建跨站脚本匹配条件页面中，首先为你的新条件提供一个名称。你还可以选择是否启用该条件适用于CloudFront CDN（全局）或单个应用负载均衡器。在这种情况下，我暂时选择了全局（CloudFront）选项。
- en: Next, from the Part of the request to filter on section, select the part of
    the request you wish WAF to filter on. You can choose between Header, HTTP method,
    Query string, URI, and Body as valid parameters. Note, however, that by selecting
    the Header option, you will be provided with an additional field in which you
    can either select the header from a list of headers or, alternatively, type in
    the name of the header.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在“要过滤的请求部分”一栏中，选择你希望WAF过滤的请求部分。你可以选择 Header、HTTP方法、查询字符串、URI 和 Body 作为有效参数。然而请注意，如果选择了
    Header 选项，系统会提供一个额外的字段，在该字段中，你可以从头部列表中选择一个头部，或者直接输入头部名称。
- en: Finally, select the appropriate Transformation operation you wish WAF to perform
    over the request before it is actually inspected. Once done, remember to select
    the Add filter option before completing the condition's creation process.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，选择你希望WAF在实际检查请求之前执行的适当转换操作。完成后，记得选择“添加过滤器”选项，然后完成条件的创建过程。
- en: You now have two additional conditions that you can add to your existing web
    ACL, or even, go ahead and create a new web ACL. In this way, you can create different
    filters and conditions based on your requirements and keep attaching them to your
    web ACL as and when required. But this manual way of setting up rules and conditions
    can get a bit tricky after some time, especially when you don't have a dedicated
    security team and need to deploy the ACLs a lot faster into your environment.
    That's precisely what we are going to cover in the next section.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有两个额外的条件可以添加到现有的Web ACL中，或者你也可以继续创建一个新的Web ACL。通过这种方式，你可以根据需求创建不同的过滤器和条件，并在需要时将其附加到Web
    ACL中。但是，这种手动设置规则和条件的方式，随着时间的推移可能会变得有些复杂，尤其是在没有专门的安全团队的情况下，如果你需要将ACL快速部署到环境中。接下来，我们将介绍如何解决这个问题。
- en: Automating WAF Web ACL deployments using CloudFormation
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CloudFormation自动化WAF Web ACL部署
- en: Working with web ACLs can be really difficult at times, especially when you
    have a large, distributed environment and don't necessarily have a dedicated security
    team to create and manage the rules on a regular basis. Luckily for us, AWS makes
    things far simpler by providing easy to use and customize CloudFormation templates
    that can spin up a single web ACL, with all the basic security conditions configured,
    in a mere matter of minutes! The collective solution is called AWS WAF Security
    Automations, and, is available free of charge for all to use. All the end user
    has to do is specify which security feature is required, configure that, and deploy
    the solution! The rest is completely taken care of by AWS itself!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Web ACL 配合使用时，有时可能会非常困难，特别是当您拥有一个大型分布式环境且不一定有专门的安全团队来定期创建和管理规则时。幸运的是，AWS 通过提供易于使用和定制的
    CloudFormation 模板来简化这一过程，用户可以在短短几分钟内创建一个包含所有基本安全条件配置的单一 Web ACL！这一综合解决方案称为 AWS
    WAF 安全自动化，所有人都可以免费使用。最终用户只需指定所需的安全功能，进行配置并部署解决方案！剩下的工作完全由 AWS 负责！
- en: The architecture of the AWS WAF Security Automation solution is relatively simple,
    and comprises of a few more AWS services than AWS WAF, such as AWS Lambda, Amazon
    CloudWatch, Amazon API Gateway, and Amazon S3, as depicted in the diagram later
    in this section.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: AWS WAF 安全自动化解决方案的架构相对简单，包含了比 AWS WAF 更多的 AWS 服务，例如 AWS Lambda、Amazon CloudWatch、Amazon
    API Gateway 和 Amazon S3，如本节后面所示的图所示。
- en: 'At the core of the solution is the WAF service that acts as the central point
    for making all security-related decisions and filtering. Based on the inputs specified
    by the user during the CloudFormation template''s configuration, the respective
    solution components get activated accordingly. These components are further explained
    here:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案的核心是 WAF 服务，它作为做出所有与安全相关的决策和过滤的中央点。根据用户在 CloudFormation 模板配置中指定的输入，相应的解决方案组件会相应激活。这些组件在这里进一步解释：
- en: '**Honeypot for bad bots and scraper protection (A)**: This security component
    automatically sets up a *honeypot* to lure and deflect a possible attack on your
    application. The solution provides you with an API Gateway endpoint that you need
    to insert into your web application as a trap to detect and lure inbound requests
    from various bots and scrapers. If a source accesses the trap request, an associated
    Lambda function intercepts that request, gathers its source IP address, and adds
    the same to the WAF''s web ACL block list.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蜜罐和反爬虫保护 (A)**：此安全组件自动设置一个*蜜罐*，以诱使并偏转可能对您的应用程序发起的攻击。该解决方案为您提供一个 API Gateway
    端点，您需要将其插入到您的 Web 应用中，作为陷阱来检测并诱使来自各种爬虫和抓取器的请求。如果某个来源访问了该陷阱请求，相关的 Lambda 函数将拦截该请求，收集其源
    IP 地址，并将其添加到 WAF 的 Web ACL 阻止列表中。'
- en: '**SQL injection protection (B) and cross-site scripting protection (C)**: Selecting
    this solution enables the creation of two AWS WAF rules that provide protection
    against commonly occurring SQL injection or cross-site scripting patterns:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL 注入保护 (B) 和跨站脚本保护 (C)**：选择此解决方案会创建两个 AWS WAF 规则，提供对常见 SQL 注入或跨站脚本模式的保护：'
- en: '![](img/f2e94078-3e32-4445-a4a8-9e5a71901a81.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2e94078-3e32-4445-a4a8-9e5a71901a81.png)'
- en: '**HTTP flood, scanner and probe protection (D)**: Also called **log parsing
    protection**, this solution comes in handy when you want to analyze your web application''s
    access logs for any abnormalities that can cause a potential threat. This is performed
    by a dedicated AWS Lambda function that does the parsing of the access logs which
    get stored in a S3 bucket created by the CloudFormation template itself.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP 洪水、扫描器和探测器保护 (D)**：也称为**日志解析保护**，当您需要分析 Web 应用的访问日志以查找可能导致潜在威胁的异常时，此解决方案非常有用。通过一个专门的
    AWS Lambda 函数来解析存储在 CloudFormation 模板创建的 S3 存储桶中的访问日志。'
- en: '**IP address whitelist/blacklist (E)**: Similar to the SQL injection and cross-site
    scripting solution, WAF creates two rules to allow you to manually enter IP addresses
    that you wish to either allow or block to your application.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP 地址白名单/黑名单 (E)**：与 SQL 注入和跨站脚本解决方案类似，WAF 创建两个规则，允许您手动输入希望允许或阻止访问应用程序的 IP
    地址。'
- en: '**Known-attacker protection (F)**: This solution also leverages a simple Lambda
    function that monitors certain third-party sites for a list of potential IP addresses
    to block against threats. The sites include *Spamhaus* ([https://www.spamhaus.org/drop/](https://www.spamhaus.org/drop/)),
    *Proofpoint* ([https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt](https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt)),
    and *TOR* ([https://check.torproject.org/exit-addresses](https://check.torproject.org/exit-addresses)),
    to name a few.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已知攻击者保护（F）**：此解决方案还利用了一个简单的 Lambda 函数，该函数监控某些第三方网站以获取潜在的 IP 地址列表，用于阻止威胁。这些网站包括
    *Spamhaus*（[https://www.spamhaus.org/drop/](https://www.spamhaus.org/drop/)）、*Proofpoint*（[https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt](https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt)）和
    *TOR*（[https://check.torproject.org/exit-addresses](https://check.torproject.org/exit-addresses)）等。'
- en: 'With these basics in mind, let''s quickly move on to deploying these solutions
    using the CloudFormation templates. At the time of writing this book, AWS WAF
    Security Automations provides two templates for use: one intended for the CloudFront
    CDN based deployments and the other for the Application Load Balancer. Both of
    the templates provide a default configuration that consists of a web ACL with
    eight pre-configured sets of rules that you can always change or extend as required.
    The following are the links to download the respective templates:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些基本概念后，让我们迅速进入使用 CloudFormation 模板部署这些解决方案。撰写本书时，AWS WAF 安全自动化提供了两个模板供使用：一个用于基于
    CloudFront CDN 的部署，另一个用于应用负载均衡器。两个模板都提供了一个默认配置，其中包括一个包含八组预配置规则的 web ACL，您可以根据需要随时更改或扩展这些规则。以下是下载相应模板的链接：
- en: '**CloudFront CDN-based template**: [https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations.template](https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations.template)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于 CloudFront CDN 的模板**: [https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations.template](https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations.template)'
- en: '**Application Load Balancer-based template**: [https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations-alb.template](https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations-alb.template)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于应用负载均衡器的模板**: [https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations-alb.template](https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations-alb.template)'
- en: You can alternatively copy the links and deploy the stacks in CloudFormation.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以复制这些链接并在 CloudFormation 中部署堆栈。
- en: 'With the correct template downloaded, we can now move on to configuring and
    deploying the solution using CloudFormation:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下载正确的模板后，我们现在可以继续使用 CloudFormation 配置和部署解决方案：
- en: To do so, first log in to your CloudFormation dashboard by navigating to [https://console.aws.amazon.com/cloudformation/home](https://console.aws.amazon.com/cloudformation/home).
    Note that in this case, we will be deploying the CloudFront CDN-based template
    in the **N.Virginia** region.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，首先通过导航到 [https://console.aws.amazon.com/cloudformation/home](https://console.aws.amazon.com/cloudformation/home)
    登录到您的 CloudFormation 仪表盘。请注意，在本例中，我们将在 **N.Virginia** 区域部署基于 CloudFront CDN 的模板。
- en: 'In the CloudFormation dashboard, select the option Create new stack to get
    started. Here, in the Select Template page, you can either choose to *upload* your
    downloaded template, or simply copy the template''s URL in the Specify an Amazon
    S3 template URL field, as shown in the following screenshot. Click on Next to
    continue with the setup:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CloudFormation 仪表盘中，选择“创建新堆栈”选项开始。在选择模板页面，您可以选择 *上传* 您下载的模板，或者仅在指定 Amazon
    S3 模板 URL 字段中复制模板的 URL，如下图所示。点击“下一步”继续设置：
- en: '![](img/c291da88-0b7e-42e9-a831-1fabbb2a0816.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c291da88-0b7e-42e9-a831-1fabbb2a0816.png)'
- en: In the Specify Details page, you can start off by providing a suitable Stack
    name for your CloudFormation stack.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在指定详细信息页面，您可以通过为您的 CloudFormation 堆栈提供一个合适的堆栈名称来开始。
- en: Next, in the Parameters section, select the Protection services that you wish
    to opt for. Remember, these are the same services that we discussed at the beginning
    of this section. In this case, I've opted for a rather simple setup that involves
    activating protection against SQL injection, cross-site scripting, and bad bots.
    You can alternatively select your own protection services, as required.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在“参数”部分，选择您希望选择的保护服务。请记住，这些是我们在本节开始时讨论过的服务。在这种情况下，我选择了一个相对简单的设置，包括启用对 SQL
    注入、跨站脚本和恶意机器人防护。您也可以根据需要选择自己的保护服务。
- en: Moving on, in the CloudFront Access Log Bucket Name field, provide a unique
    name for the S3 bucket that will store your Amazon CloudFront's access logs. You
    can either provide the name of an existing bucket or a new one.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 CloudFront 访问日志桶名称字段中，提供一个独特的名称，用于存储 Amazon CloudFront 访问日志的 S3 桶。您可以提供现有桶的名称或新建一个桶。
- en: Finally, in the Advanced Settings section, you can additionally opt to modify
    a few parameters, such as Request Threshold, Error Threshold, and the WAF Block
    Period, as per your requirements. These parameters would come in handy especially
    if you select the HTTP Flood Protection or the Activate Scanners & Probes Protection,
    otherwise, you can leave these values to their defaults, as I have done in my
    case. Select Next to continue with the deployment process.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在“高级设置”部分，您还可以选择修改一些参数，如请求阈值、错误阈值和 WAF 阻止周期，以满足您的需求。如果您选择了 HTTP 洪水保护或启用扫描器与探测器保护，这些参数将非常有用，否则，您可以像我一样将这些值保持默认。选择“下一步”继续部署过程。
- en: In the Options page, you can specify Tags for the resources that will be created
    by the CloudFormation template, as well as opt to provide any special *IAM Role* to
    allow CloudFormation to create, modify, or delete the resources in the stack.
    Click on Next to review the changes made and, finally, go ahead with the stack's
    creation by selecting the Create option on the Review page.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选项”页面中，您可以为 CloudFormation 模板创建的资源指定标签，并选择提供任何特殊的*IAM 角色*，以允许 CloudFormation
    创建、修改或删除堆栈中的资源。点击“下一步”查看所做的更改，然后在“审查”页面选择“创建”选项以开始堆栈的创建。
- en: 'The stack takes a good few minutes to deploy successfully. Once done, you can
    verify the status of your stack''s completion by checking the Status column, as
    depicted in the following screenshot:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 堆栈部署成功需要花费几分钟。一旦完成，您可以通过检查“状态”栏来验证堆栈的完成状态，如下截图所示：
- en: '![](img/1cb087cd-d113-430e-82b3-a96440b2ea05.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1cb087cd-d113-430e-82b3-a96440b2ea05.png)'
- en: Additionally, based on your Protection service selection, you can also verify
    the additional outputs created by the template for your application, such as the
    Honeypot Endpoint, that's actually an Amazon API Gateway endpoint that you need
    to insert somewhere in your application to capture bots and scrapers. In my case,
    the template created a Lambda function for bad bots scraping, WAF rules for SQL
    injections, IP whitelisting, and XSS detection, along with an API Gateway as well.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，根据您的保护服务选择，您还可以验证模板为您的应用程序创建的其他输出，例如蜜罐端点，它实际上是一个 Amazon API Gateway 端点，您需要将其插入到应用程序中的某个位置，用来捕获机器人和爬虫。在我的案例中，模板创建了一个用于恶意爬虫的
    Lambda 函数，针对 SQL 注入的 WAF 规则、IP 白名单和 XSS 检测，以及一个 API Gateway。
- en: 'With the stack up and running, you can additionally go back to the WAF dashboard
    and check out the individual rules that the template auto-populated against some
    of the protection services. In this case, the *SQL injection* and c*ross-site
    scripting* conditions were auto-populated; however, the *IP Whitelist* and *Bad
    Bot* rules still require you to manually provide the IP ranges and addresses to
    start off with, or allow the Lambda function to inject the IP addresses into the
    lists at runtime as well. Here is a snapshot of the list of rules created for
    the SQL injection condition:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 堆栈成功运行后，您还可以返回 WAF 仪表板，查看模板自动填充的各个规则，针对一些保护服务。在这种情况下，*SQL 注入* 和 *跨站脚本* 条件已被自动填充；然而，*IP
    白名单* 和 *恶意机器人* 规则仍然需要您手动提供 IP 范围和地址，或者允许 Lambda 函数在运行时将 IP 地址注入到列表中。以下是 SQL 注入条件创建的规则列表快照：
- en: '![](img/1b6b9c51-d01a-40ce-9bd2-107e28a9e293.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b6b9c51-d01a-40ce-9bd2-107e28a9e293.png)'
- en: With this we come to the end of this particular section. You can additionally
    use these templates to spin up newer web ACLs for your Application Load Balancers.
    Just remember to delete your stack once your testing is completed, to avoid incurring
    any unnecessary charges. In the next section, we will be briefly looking at how
    to effectively monitor your WAF rules using a few essential monitoring tools provided
    by AWS.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里，我们就结束了这一部分内容。你还可以使用这些模板为你的应用程序负载均衡器快速创建新的 Web ACL。记住，一旦测试完成，请删除你的堆栈，以避免产生不必要的费用。在下一部分中，我们将简要了解如何使用
    AWS 提供的几个基本监控工具来有效监控你的 WAF 规则。
- en: Monitoring WAF using CloudWatch
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CloudWatch 监控 WAF
- en: 'Monitoring of your WAF rules, conditions, as well as your application''s web
    traffic, plays an important part towards identifying and mitigating possible attacks
    and exploits. AWS provides a wide assortment of tools and services that you, as
    an administrator, can leverage for the monitoring and reporting of such activities.
    The following are the list of services briefly explained:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 监控你的 WAF 规则、条件以及应用程序的 Web 流量，对于识别和减轻可能的攻击和漏洞利用至关重要。AWS 提供了多种工具和服务，作为管理员的你可以利用它们来监控和报告此类活动。以下是简要说明的服务列表：
- en: '**AWS WAF dashboard**: Yes, you read it right! AWS WAF also provides a simple
    monitoring dashboard that lists the total requests made to your application via
    either the CloudFront CDN or the Application Load Balancer, as well as the number
    of requests that actually match to your specified rules. To view the dashboard,
    all you need to do is log in to your AWS WAF, select the Web ACLs page, and click
    on the Requests tab, as shown in the following screenshot:![](img/85e92692-509d-46b5-893f-de84f26e7367.png)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS WAF 仪表盘**：没错，你没看错！AWS WAF 还提供了一个简单的监控仪表盘，列出了通过 CloudFront CDN 或应用程序负载均衡器发送到你应用程序的总请求数量，以及实际匹配你指定规则的请求数量。要查看仪表盘，你只需要登录
    AWS WAF，选择 Web ACL 页面，并点击 Requests 标签，如下图所示：![](img/85e92692-509d-46b5-893f-de84f26e7367.png)'
- en: The graph aggregates and displays the requests on a five-minute period basis.
    You can alternatively open the same graph using Amazon CloudWatch for further
    analysis.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 该图表按五分钟周期聚合和显示请求。你也可以使用 Amazon CloudWatch 打开相同的图表进行进一步分析。
- en: '**Amazon CloudWatch**: Amazon CloudWatch has been around for some time, and
    definitely provides various metrics that you can select and configure as a part
    of a customized requests monitoring dashboard. Here is a list of the supported
    WAF metrics, with a brief description:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon CloudWatch**：Amazon CloudWatch 已经存在一段时间，并且提供了多种你可以选择和配置的指标，作为定制请求监控仪表盘的一部分。以下是支持的
    WAF 指标列表及简要说明：'
- en: '`AllowedRequests`: Captures the number of allowed web requests. The valid dimensions
    for this metric are Rule and WebACL.'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AllowedRequests`：捕获被允许的 Web 请求数量。此指标的有效维度为 Rule 和 WebACL。'
- en: '`BlockedRequests`: Captures the number of blocked web requests. The valid dimensions
    for this metric are Rule and WebACL.'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BlockedRequests`：捕获被阻止的 Web 请求数量。此指标的有效维度为 Rule 和 WebACL。'
- en: '`CountedRequests`: Typically used to test your web ACLs and rules, this metric
    provides a count of the web requests that match all of the conditions in a particular
    rule.'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CountedRequests`：通常用于测试你的 Web ACL 和规则，这个指标提供了匹配特定规则中所有条件的 Web 请求计数。'
- en: You can use these metrics to monitor your WAF rules, and even configure CloudWatch
    alarms to trigger and send notifications in case their threshold values are crossed.
    Based on your requirements, you can additionally take things a step further and
    configure CloudWatch events that trigger an appropriate Lambda function to mitigate
    against a possible attack, as we performed during the Security Automations solutions.
    You can even leverage Amazon CloudWatch to monitor the traffic flowing into the
    CloudFront CDNs as well as your Application Load Balancers.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些指标来监控你的 WAF 规则，甚至可以配置 CloudWatch 警报，当它们的阈值被超越时触发并发送通知。根据你的需求，你还可以进一步配置
    CloudWatch 事件，触发相应的 Lambda 函数来缓解可能的攻击，正如我们在安全自动化解决方案中所执行的那样。你甚至可以利用 Amazon CloudWatch
    来监控流入 CloudFront CDN 和应用程序负载均衡器的流量。
- en: '**AWS****CloudTrail**: AWS CloudTrail is yet another service that you can and
    should leverage for parsing and analyzing your application''s access and error
    logs, as well as logs generated by the AWS services'' logs themselves. Here is
    a sample of few Log Groups, created automatically by the Security Automations
    Solution, for capturing WAF traffic flow and events. We will be exploring more
    on AWS CloudTrail in the next chapter:![](img/428e3d3f-8e7c-4bfa-8f83-7ea9382cb4e0.png)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS** **CloudTrail**：AWS CloudTrail 是你可以并且应该利用的另一项服务，用于解析和分析你的应用程序访问和错误日志，以及
    AWS 服务本身生成的日志。以下是一些由安全自动化解决方案自动创建的日志组，用于捕获 WAF 流量流动和事件。我们将在下一章深入探讨 AWS CloudTrail：![](img/428e3d3f-8e7c-4bfa-8f83-7ea9382cb4e0.png)'
- en: With this, we come towards the end of yet another chapter, but before we sign
    off, here's some interesting things that I feel you ought to try out as a part
    of AWS WAF.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里，我们已经接近本章的结尾，但在我们结束之前，我想分享一些有趣的内容，我认为你作为 AWS WAF 的一部分应该尝试。
- en: Planning your next steps
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划你的下一步
- en: Well, we have covered a lot of new features and services in this chapter. However,
    there are still a few things that I recommend you need to read up on on your own.
    First up is the AWS Shield service!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们在本章中介绍了许多新的功能和服务。不过，我还是建议你自己阅读一些内容。首先要了解的是 AWS Shield 服务！
- en: Introduction to AWS Shield
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Shield 介绍
- en: 'AWS Shield is an extension of AWS WAF, but is targeted to provide security
    around potential DDoS attacks. It is a fully managed service that provides Always-on detection
    and automatic mitigations that minimize application downtime and latency. AWS
    Shield provides two tiers of services: **Standard** and **Advanced**:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Shield 是 AWS WAF 的扩展，但其目标是提供针对潜在 DDoS 攻击的安全保护。它是一项完全托管的服务，提供始终在线的检测和自动化缓解功能，最大限度减少应用程序的停机时间和延迟。AWS
    Shield 提供两个服务级别：**标准**和**高级**：
- en: '**AWS Shield Standard**: Provided at no additional costs, this service is enabled
    on your account and AWS services by default, and is designed to protect your web
    applications against the most common and frequently occurring DDoS attacks.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Shield Standard**：该服务不收取额外费用，默认启用在你的账户和 AWS 服务上，旨在保护你的 web 应用程序免受最常见和频繁发生的
    DDoS 攻击。'
- en: '**AWS Shield Advanced**: Designed for providing a higher level of protection
    for your web applications, AWS Shield Advanced is intended to work with applications
    that are currently running on Elastic or Application Load Balancers, Amazon CloudFront,
    and Amazon Route 53 resources. AWS Shield Advanced also provides near real-time
    visibility into potential attacks, along with mitigation capabilities as well.
    To top it all, you also get access to a dedicated 24x7 **DDoS Response Team**
    (**DRT**) that looks into potential DDoS attacks occurring on your web application,
    and provides quick resolutions against the same.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Shield Advanced**：旨在为你的 web 应用程序提供更高层次的保护，AWS Shield Advanced 适用于当前运行在弹性负载均衡器（Elastic
    Load Balancers）或应用程序负载均衡器（Application Load Balancers）、Amazon CloudFront 和 Amazon
    Route 53 资源上的应用程序。AWS Shield Advanced 还提供对潜在攻击的近实时可见性，并具备缓解能力。最棒的是，你还可以获得专门的 24x7
    **DDoS 响应团队** (**DRT**) 的支持，他们会关注你 web 应用程序上发生的潜在 DDoS 攻击，并提供快速的解决方案。'
- en: AWS Shield Advanced is priced at $ 3,000 per month.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Shield Advanced 的费用为每月 3,000 美元。
- en: 'Here''s a brief comparison between the various services offered by AWS Shield
    Standard and Advanced tiers:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 AWS Shield 标准和高级服务之间的简要对比：
- en: '| **Features** | **AWS Shield Standard** | **AWS Shield Advanced** |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **AWS Shield Standard** | **AWS Shield Advanced** |'
- en: '| Network flow monitoring | Yes | Yes |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 网络流量监控 | 是 | 是 |'
- en: '| Automated application (layer 7) traffic monitoring | No | Yes |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 自动化应用程序（第7层）流量监控 | 否 | 是 |'
- en: '| Helps protect from common DDoS attacks, such as SYN floods and UDP reflection
    attacks | Yes | Yes |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 有助于防范常见的 DDoS 攻击，例如 SYN 洪水和 UDP 反射攻击 | 是 | 是 |'
- en: '| Access to additional DDoS mitigation capacity | No | Yes |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 访问额外的 DDoS 缓解能力 | 否 | 是 |'
- en: '| Layer 3/4 attack notification and attack forensic and history reports | No
    | Yes |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 第 3/4 层攻击通知及攻击取证和历史报告 | 否 | 是 |'
- en: '| Incident management during high-severity events | No | Yes |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 高严重性事件期间的事件管理 | 否 | 是 |'
- en: '| Custom mitigations during attacks | No | Yes |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 攻击期间的自定义缓解措施 | 否 | 是 |'
- en: '| Post-attack analysis | No | Yes |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 攻击后分析 | 否 | 是 |'
- en: '| Reimburse related Route 53, CloudFront, and ELB DDoS charges | No | Yes |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 补偿与 Route 53、CloudFront 和 ELB 相关的 DDoS 费用 | 否 | 是 |'
- en: To activate AWS Shield Advanced for your environments, simply log in to your
    AWS WAF dashboard and select the Protected resources option present under the
    AWS Shield section in the navigation pane. Here, click on the Activate AWS Shield
    Advanced button to start your Shield Advanced protection plan. Here, you will
    be asked to select a particular Resource to protect against DDoS attacks. Select
    your CloudFront CDN or the Elastic/Application Load Balancer, based on the resource
    you wish to protect, and provide a suitable Name for the resources that you are
    specifying for protection. Finally, remember to select the Enable checkbox to
    associate your resources with a web ACL, if you have one created already. Once
    done, select the Add DDoS protection option, and voila! You are up and running
    with AWS Shield Advanced! Simple isn't it?
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要为您的环境启用 AWS Shield Advanced，只需登录到您的 AWS WAF 仪表盘，然后在导航窗格中的 AWS Shield 部分选择受保护资源选项。在这里，点击启用
    AWS Shield Advanced 按钮，开始您的 Shield Advanced 保护计划。在此过程中，您将被要求选择一个特定的资源，以保护免受 DDoS
    攻击。根据您希望保护的资源，选择您的 CloudFront CDN 或弹性/应用负载均衡器，并为您指定的保护资源提供一个合适的名称。最后，记得勾选启用复选框，以将您的资源与
    Web ACL 关联（如果您已经创建了 Web ACL）。完成后，选择添加 DDoS 保护选项，完成！您的 AWS Shield Advanced 保护已经启动！很简单，不是吗？
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Here's a quick round up of the topics that we have covered so far in this chapter.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中我们已经涵盖的主题的简要回顾。
- en: We started off by learning and understanding a bit about the Web Application
    Firewall service and how it works to protect against potential security threats
    and exploits. We later looked at how to get started with WAF by safeguarding our
    previously deployed WordPress application against restrictive access by leveraging
    the IP Match, as well as the string/regex match conditions. We also looked at
    how to mitigate and safeguard your applications by leveraging advanced WAF conditions
    in the form of SQL injection and cross-site scripting. Towards the end, we covered
    how to leverage certain pre-built CloudFormation templates to automate the deployments
    of our WAF rules and, finally, we concluded the chapter with a brief introduction
    to AWS Shield and its various tiers.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先学习并了解了 Web 应用防火墙服务的一些基本知识，以及它如何通过防止潜在的安全威胁和漏洞来保护应用程序。接下来，我们查看了如何通过利用 IP
    匹配以及字符串/正则表达式匹配条件，来保护我们之前部署的 WordPress 应用免受限制性访问。我们还讨论了如何通过利用 WAF 高级条件（如 SQL 注入和跨站脚本攻击）来减轻和保护您的应用程序。最后，我们介绍了如何利用某些预构建的
    CloudFormation 模板来自动部署我们的 WAF 规则，并以简要介绍 AWS Shield 及其不同层次作为本章的结束。
- en: 'In the next chapter, we will be continuing on our security journey and will
    cover two really amazing services as well: AWS CloudTrail and AWS Config, so stay
    tuned!'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将继续我们的安全之旅，并将介绍两个非常棒的服务：AWS CloudTrail 和 AWS Config，请继续关注！
