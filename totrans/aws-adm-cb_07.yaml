- en: Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a secure network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a NAT gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canary deployment via DNS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hosting a domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing based on location with failover
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network logging and troubleshooting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Networking is a foundational component of using other AWS services such as EC2,
    RDS, and others. Using constructs such as VPCs and NAT gateways gives you the
    capability and confidence to secure your resources at a networking level. At a
    DNS level, Route 53 provides connectivity to your users in a responsive and fault-tolerant
    way that ensures the best performance in a variety of scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Building a secure network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we''re going to build a secure network (VPC) in AWS. This network
    will consist of two public and private subnets split across two Availability Zones.
    It will also allow inbound connections to the public subnets for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: SSH (port `22`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP (port `80`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPS (port `443`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/image_07_001.png)'
  prefs: []
  type: TYPE_IMG
- en: Building a secure network
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we proceed, you''re going to need to know the names of at least two
    Availability Zones in the region we''re deploying to. The recipes in this book
    will typically deploy to `us-east-`, so to get things moving you can just use
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`us-east-1a`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`us-east-1b`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you create an AWS account, your zones are randomly allocated. This means
    that `us-east-1a` in your account isn't necessarily the same data center as `us-east-1a`
    in my account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go ahead and create a new CloudFormation template for our VPC. Just a heads-up:
    this will be one of the larger templates that we''ll create in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first two `Parameters` correspond to the Availability Zones we discussed
    previously. We don''t provide any default values for these parameters, to maintain
    region portability:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell of our VPC has now been created. At this point, it''s not connected
    to the Internet, so it''s not entirely useful to us. We need to add an Internet
    gateway and attach it to our VPC. Go ahead and do that, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The remaining `Parameters` define the IP address ranges for the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The entire VPC
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The public subnets (A and B)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The private subnets (A and B)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The default values we provide for the subnets will allocate 512 IP addresses
    to each subnet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS reserves a small number of IP addresses in your IP space for AWS-specific
    services. The VPC DNS server is one such example of this. It's usually located
    at the second (`*.2`) IP address in the block allocated to your VPC.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can start to define `Resources`. We''ll start by defining the VPC itself,
    as well as the two public and two private subnets inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create a couple of route tables. The first one we''ll focus on is
    the public route table. We''ll assign this route table to the two public subnets
    we''ve created. This route table will have just one route in it, which will direct
    all Internet-bound traffic to the Internet gateway we created in the previous
    step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll create the private route table in a similar fashion. Since the private
    subnet is isolated from the Internet, we won''t add a route to the Internet gateway.
    Note that if you were to follow the NAT gateway recipe in this book, it will require
    a route table as an input parameterâ€”this is the route table you want to add NAT
    routes to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now focus on the security aspects of our network. Let''s focus on the
    public subnets. These are the subnets you''ll add your load balancers to; you''ll
    also add things such as bastion boxes and NAT gateways. So we need to add a **Network
    ACL** (**NACL**) with several entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow outbound traffic to all ports. Outbound access is unrestricted from hosts
    in our public subnets.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow inbound traffic to ephemeral ports (above `1024`). This ensures that packets
    returned to us from our outbound connections are not dropped.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Allow inbound access to low port numbers for SSH, HTTP, and HTTPS (`22`, `80`,
    and `443`):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to do the same for our private subnets. These subnets are somewhat
    easier to deal with. They should *only* be allowed to talk to hosts within our
    VPC, so we just need to add some NACLs allowing inbound and outbound traffic to
    our VPCs IP range:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll add some `Outputs` to our template. These outputs are usually
    candidates for feeding into other templates or components of automation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can go ahead and create your VPC in the web console or via the CLI using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run this template, AWS will go ahead and create an isolated, secure
    network just for you. While it contains a number of resources and concepts which
    will be familiar to network administrators, it's essentially an empty shell, which
    you can now go ahead and populate.
  prefs: []
  type: TYPE_NORMAL
- en: For example, each VPC contains a virtual router. You can't see it and you can't
    log into it to perform any special configuration, but you can customize its behavior
    by modifying the route tables in this template.
  prefs: []
  type: TYPE_NORMAL
- en: The NACLs we've deployed are not stateful and should *not* be considered a substitution
    for security groups. NACLs are *complementary* to security groups, which are stateful
    and frankly much easier to change and manage than NACLs. While the NACLs in our
    recipe allow everywhere (`0.0.0.0/0`) to make inbound connections to port `22`,
    for example, you'll want to use security groups to lock this down to a specific
    IP range (your corporate data center, for example).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Actually, there''s a *lot* more. Despite the amount of code in this recipe,
    we''ve really only covered the basics of what''s possible with VPCs and networking
    in AWS. Here are some of the main VPC topics you''ll encounter as you progress
    with your VPC usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Direct Connect**: This is a method of connecting your DC to your VPC using
    a private, dedicated pipe. Doing this often provides better network performance,
    and may also be cheaper than a VPN connection over the Internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Private Gateway** (**VPN**): You can configure your VPC to connect
    to your corporate DC over the Internet via VPN. This requires that you run supported
    VPN hardware in your DC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPv6 support was added recently. We've left it out to keep things simple.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VPC endpoints**: This feature exposes AWS endpoints inside your VPC so that
    you don''t have to route traffic over public Internet to consume them. Only S3
    is supported at the time of writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VPC peering**: You can peer a VPC to one or more VPCs so that (unencrypted)
    traffic can flow between them. The IP ranges must not clash and, while the peering
    is free, you will still need to pay for traffic between VPCs. Transitive peering
    isn''t supported, so if you need traffic to traverse VPCs you''ll require a VPN/routing
    appliance of some kind. Cross-account VPC peering is supported (we use this feature
    quite often), but cross-region peering isn''t yet available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VPC sizing**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IPv4: You can deploy networks between sizes /28 and /16.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IPv6: Your VPCs will be fixed in size at /56.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once your VPC has been deployed you can't change its size. If you run out of
    IP space, your only option is to deploy a larger VPC and migrate everything (ouch!),
    or you can perhaps mitigate your problem with VPC peering.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VPC flow-logs**: You will want to enable VPC flow-logs in order to monitor
    traffic and do any kind of network debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multicast traffic isn't supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnets must reside in a single availability zone; they can't span Availability
    Zones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elastic Load Balancers** (**ELBs**) can scale out to use a lot of private
    IP addresses if you are sending a large amount of traffic through them. Keep this
    in mind when you''re sizing your subnets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of VPCs you can deploy is limited to five per region, per account.
    You can request to increase this limit if necessary. Internet gateways have the
    same limit, and increasing one limit increases the other.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *default* VPC:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First and foremost, the default VPC is created automatically for you when you
    create your account. It has some different properties and behaviors to the VPCs
    you create for yourself.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you try to launch an EC2 instance without specifying a subnet ID, AWS will
    attempt to launch it in your default VPC.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It consists of only public subnets. These subnets are configured to provide
    a public IP address to all instances by default.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It's possible to delete the default VPC in a region. If you do this by mistake,
    or have simply decided that you'd like to undo this action, you'll need to log
    a support ticket with AWS to have them create a new one for you.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a NAT gateway* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a NAT gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unless required, your instances should not be publicly exposed to the Internet.
    When your instances are on the Internet, you have to assume they will be attacked
    at some stage.
  prefs: []
  type: TYPE_NORMAL
- en: This means most of your workloads should run on instances in private subnets.
    Private subnets are those that are not connected directly to the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: In order to give your private instances access to the Internet, you use **network
    address translation** (**NAT**). A NAT gateway allows your instances to initiate
    a connection *to* the Internet, without allowing connections *from* the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, you must have the following existing resources:'
  prefs: []
  type: TYPE_NORMAL
- en: A VPC with an **Internet gateway** (**IGW**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A public subnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A private subnet route table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need the IDs for the public subnet and private subnet route table.
    Both of these resources should be in the same AZ.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start with the usual CloudFormation template version and description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The template must take the following required parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Resources` section, define an **Elastic IP** (**EIP**) that will be
    assigned to the NAT gateway:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the NAT gateway resource, assigning it the EIP you just defined in the
    public subnet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, define the route to the NAT gateway and associate it with the private
    subnet''s route table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Save the template with a known filename; for example, `07-nat-gateway.yaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch the template with the following CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The parameters required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A public subnet ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A private subnet route table ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The public subnet ID is needed to host the NAT gateway, which must have Internet
    access. The private subnet route table will be updated with a route to the NAT
    gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Using the AWS NAT gateway service means that AWS takes care of hosting and securing
    the service for you. The service will be hosted redundantly in a single AZ.
  prefs: []
  type: TYPE_NORMAL
- en: You can use this recipe multiple times to deploy NAT gateways in each of your
    private subnets. Just make sure the public subnet and the private subnet are in
    the same AZ.
  prefs: []
  type: TYPE_NORMAL
- en: In the unlikely (but possible) event of an AZ outage, you should deploy a NAT
    gateway per subnet. This means that if one NAT gateway goes offline, instances
    in the other AZ can continue to access the Internet as normal. You are deploying
    your application in multiple subnets, aren't you?
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will only work if you have created your own private subnets, as
    the default subnets in a new AWS account are all *public*. Instances in a public
    subnet have direct access to the Internet (via an IGW), so they do not need a
    NAT gateway.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Building a secure network* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canary deployment via DNS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Canary deployment is a popular deployment method in the cloud. It allows you
    to deploy new versions of your resources alongside your old resources, gradually
    and selectively directing parts of your traffic to the new resource.
  prefs: []
  type: TYPE_NORMAL
- en: By directing a small portion of your traffic to your new resources, you can
    get valuable real-world data and metrics. This means you don't need to engage
    in a *big bang* deploymentâ€”where you switch over all of your traffic at once.
  prefs: []
  type: TYPE_NORMAL
- en: It also gives you more flexibility in terms of troubleshooting and monitoring;
    if you see errors for your new resources, you can redirect the traffic back to
    your old resources while you investigate.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create the resources necessary to do a DNS-based canary
    deployment, and cut traffic from one resource to another (that is, old to new).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe requires a few things to be in place:'
  prefs: []
  type: TYPE_NORMAL
- en: A Route 53 hosted zone for your domain suffix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Existing DNS records for your *old* and *new* resources/endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a new file, define the template version and description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the `Parameters` section and the required parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the optional parameters (such as those with defaults) in the `Parameters`
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the `Resources` section of the template, and define your record set group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Save the template with a known filename; for example, `07-canary-deployments.yaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch the template with the following CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When ready, update the stack to change (just) the domain weighting with the
    following CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This template focuses on utilizing the features of a Route 53 record set group,
    and the most useful properties have been parameterized.
  prefs: []
  type: TYPE_NORMAL
- en: The value for your `DomainName` parameter will be created as multiple `CNAME`
    records in your hosted zone (as set in `HostedZoneName`), one for each of your
    resources, old and new.
  prefs: []
  type: TYPE_NORMAL
- en: The `OldResource` and `NewResource` parameters represent the target domain names
    that the incoming requests will be shared between.
  prefs: []
  type: TYPE_NORMAL
- en: Once the stack is deployed, you will be able to go to your domain name and see
    your *old* resource. By default, this template will send all traffic to the old
    resource endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've verified the setup is working correctly, you can start to deploy
    by updating the stack to send *some* of your requests to the new resource.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the resource record set's weightings via the CLI is quite involved,
    as it requires passing a complex JSON object as an argument. It is much simpler
    and safer to simply update the existing CloudFormation stack you deployed, changing
    just the weighting parameters that are already present.
  prefs: []
  type: TYPE_NORMAL
- en: With the `update-stack` command, the new weightings will be propagated to your
    record set group members (without interruption) and the new distribution of traffic
    will start taking effect.
  prefs: []
  type: TYPE_NORMAL
- en: For the parameters without default values, you must explicitly tell CloudFormation
    to use the previous values, as well as the template body supplied previously.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the distribution will be determined by the target's weight divided
    by the total weight value of all targets. This means you can easily *turn off*
    a target by setting its weight to `0`, regardless of the other weight values.
    In this recipe, we have used `0` and `1` as simple values to illustrate the impact,
    but you can (and should) use more fine-grained parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting a domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll show you how to host a domain in Route 53 and add some
    records to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_07_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Hosting a domain
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You technically don't need to have registered a domain name in order to proceed
    with this recipe, but it sure helps if you have a real domain that you can use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new CloudFormation template and add the following `Parameter` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we need to add a `HostedZone` resource to our template, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You''re now ready to go ahead and create your hosted zone in Route 53\. You
    can do so via the CloudFormation web console, or use the following CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This will create a hosted zone in Route 53\. Once the stack has finished creating,
    go and find it in the web console. You'll see that there are a number of name
    servers associated with it. These are the name servers to use if you wish to proceed
    with delegating your domain name to AWS's Route 53 servers using your domain name
    registrar's control panel.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A hosted zone with no DNS records will be of limited use to you. Here are some
    examples of records that you may wish to add to your template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Some items of note:'
  prefs: []
  type: TYPE_NORMAL
- en: For the priority in `MX` records, add the number at the start of the record
    followed by a space.
  prefs: []
  type: TYPE_NORMAL
- en: For `TXT` records such as `spf` entries, which are typically required to be
    quoted, you can surround double quotes with single quotes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how they look in the Route 53 web console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_07_03-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Hosting a domain
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Hosting a static website* recipe in [Chapter 3](3061e8a1-9092-4f75-931a-8c4da66160b7.xhtml),
    *Storage and Content Delivery*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing based on location with failover
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we''re going to show you two Route 53 routing policies:'
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failover routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In fact, we're actually going to combine these two policies together. A perusal
    of the AWS documentation might lead you to believe that this isn't particularly
    common practice, but understand that by combining routing policies, you can do
    great things for your performance and availability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given that we're demonstrating a failover task, you'll want to set up two ELBs
    before we proceed. We're going to assume you're doing this in different regions,
    but this isn't strictly necessary. These ELBs will need to accept HTTP connections
    (on port `80` of course) and have at least one instance attached to them (which
    is passing its health check and serving content).
  prefs: []
  type: TYPE_NORMAL
- en: The *Creating security groups* recipe in [Chapter 4](beece917-78ff-43b8-934b-706eca5968f9.xhtml),
    *Using AWS Compute* deployed in two different regions, should fit the bill nicely.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need a domain name that you'd like to create as a new hosted zone
    in Route 53\. You technically don't need to delegate this domain to Route 53 from
    your registrar, so you can complete this recipe with any domain you choose. Just
    remember that using a real domain you can delegate to Route 53, which will save
    you messing with your localhost's file or DNS setup in order to test this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, you''ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The DNS names for both ELBs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hosted zone IDs for both ELBs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A domain name of your choosing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go ahead and create a new CloudFormation template. We''ll add some `Parameters`
    for the items we''ve mentioned previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The first `Resource` we want is the `HostedZone` resource for our domain name.
    Add it to your template as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to have failover happen automatically, we''re going to need to set
    up some health checks. We want health checks on the ELBs in both regions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re now going to create four record sets for your domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`a.<your-domain>-PRIMARY`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b.<your-domain>-PRIMARY`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a.<your-domain>-SECONDARY` (failover to `b`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b.<your-domain>-SECONDARY` (failover to `a`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These records correspond to ELB A and ELB B (or *site* A and B, if that term
    makes more sense to you), and they will allow each region to fail over to the
    other if the health check fails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s start with the primary records for both ELBs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the secondary (failover) records:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''re going to add the root/apex record for our domain. For the purposes
    of this recipe, we''re going to send requests originating from North America to
    region/ELB A, and requests from the rest of the world to region/ELB B:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! You can now run this CloudFormation template in the AWS web console
    or via the CLI, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve effectively constructed a small decision tree, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_004.png)'
  prefs: []
  type: TYPE_IMG
- en: Route 53 flow
  prefs: []
  type: TYPE_NORMAL
- en: In order to test this for yourself, you'll need to have some way of performing
    DNS responses from other regions. In the following screenshots, we have provisioned
    a machine using AWS workspaces in North America (left), while our actual location
    is in Australia (right).
  prefs: []
  type: TYPE_NORMAL
- en: Normal operation (geolocation routing)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Under normal operation, our North American user (left) will connect to region
    A, which, for practical reasons, we''ve deployed in `us-east-1`, although it could
    be in any region. Our Australian user (right) will connect to region B, which
    is the region we''ve designated as being for theÂ *rest of the world*. Again, for
    practical reasons, we deployed this site to the `ap-southeast-2` region:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Region A served to North American user. Right: Region B served to Australian
    user.'
  prefs: []
  type: TYPE_NORMAL
- en: Region A failure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To simulate a failure of region A, we''ll simply stop the web server, which
    is attached to the ELB as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After a short period, the web console will show that the health check for region
    A is failing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_07_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Region A failing health check
  prefs: []
  type: TYPE_NORMAL
- en: 'Our North American user (left) now sees region B instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Region B served to North American users due to failover. Right: Region
    B served to Australian users as normal.'
  prefs: []
  type: TYPE_NORMAL
- en: Region B failure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll now flip the script and simulate the same scenario in region B. This
    time, the web server in this region is stopped, but the server in region A is
    healthy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_07_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Region B failing health check
  prefs: []
  type: TYPE_NORMAL
- en: 'Region A content will now be shown to both North American users and those designated
    as theÂ *rest of the world* (including Australia):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Region A served to North American users as normal. Right: Region A served
    to Australian users due to failover.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Route 53 offers a couple of other useful routing policies, so you should have
    a think about which best suits you:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Latency-based routing**: This policy makes the Route 53 DNS servers respond
    to you with IP addresses that provide the lowest latency. This will not necessarily
    be the endpoint geographically closest to you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weighted routing**: This allows you to divvy up your traffic between endpoints
    based on a weighting system. You might have a 50/50 split between two regions,
    or you may elect to have a 90/10 ratio instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Hosting a static website* recipe in [Chapter 3](3061e8a1-9092-4f75-931a-8c4da66160b7.xhtml),Â *Storage
    and Content Delivery*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating security groups* recipe in [Chapter 4](beece917-78ff-43b8-934b-706eca5968f9.xhtml),
    *Using AWS Compute*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network logging and troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the benefits of using virtualized infrastructure is that you can get
    a level of introspection that is difficult or costly with physical hardware. Being
    able to quickly switch on logging at a network-device level is an extremely useful
    feature, especially when getting used to the interactions between VPCs, subnets,
    NACLs, routing, and security groups.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will turn on logging for our network resources. You could
    do this all the time, to give yourself another layer for monitoring and auditing,
    or you could selectively enable it during troubleshooting, saving yourself any
    additional datastorage charges.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you must have a VPC to log activity on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by defining the template version and description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `Parameters`Â for the template. In this case, it is just the `VpcId`
    to turn logging on for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `Resources` section of the template and define the log group to
    use to send our flow-logs to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we define the IAM role that will give the flow-logs service permission
    to write the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we define the flow-log itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Save the template, and give it a known filename such as `07-flow-logs.yaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the flow-logs and associated resources by creating the template with
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Once launched (and assuming you have network activity), you will be able to
    see your flow-log in the CloudWatch logs console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The only parameter required for this template is the VPC ID to target. We specifically
    target a VPC to turn on flow-logging for, because it gives us the most *bang for
    buck*. While you can enable flow-logs for subnets and **Elastic Network Interfaces**
    (**ENIs**) individually, if you enable them on a VPC you get flow-logs for all
    the networking resources contained in that VPCâ€”which includes subnets and ENIs.
  prefs: []
  type: TYPE_NORMAL
- en: In the resources section, we start by explicitly defining the log group to *hold*
    the flow-logs. If you don't create the log group yourself (and specify it in your
    flow-log resource configuration), a log group will be created for you. This means
    that you will still be able to use flow-logs, but the log group won't be managed
    by CloudFormation and will have to be maintained (for example, deleted) manually.
    We have also set a **deletion policy** of *delete* for our log group. This means
    it will be deleted if the CloudFormation stack is deleted, which is fine for a
    demonstration such as this. If using in a *real* environment (such as production),
    remove the `DeletionPolicy` property and its value.
  prefs: []
  type: TYPE_NORMAL
- en: By default, CloudWatch log groups are *not* deleted when the stack that created
    them is deleted. This lets you retain any important logs, but it can incur an
    ongoing cost.
  prefs: []
  type: TYPE_NORMAL
- en: Next we define the IAM role to use. Via the `AssumeRolePropertyDocument` value,
    we give the AWS flow-logs service permission to assume this role. Without this
    access, the flow-logs service cannot access the account. In the `Policies` property,
    we give the role permission to create and update log groups and streams.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, now that we have created the dependent resources, we define the flow-log
    resource itself. You don't need to define the resources in order of dependencies,
    but it is usually easier to read if you do. In the resource, we also define a
    `DependsOn` relationship to the log group we defined earlier, so that the log
    group is ready to receive the flow-logs when it is created.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to launch the template you have created, passing the VPC ID
    as parameter. As this template creates an IAM role to allow the VPC service to
    send logs to CloudWatch logs, the command to create the stack must be given the
    `CAPABILITY_IAM` flag to signify that you are aware of the potential impact of
    launching this template.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Turning on logging is just the start of the troubleshooting process. There are
    a few other things you should be aware of when using flow-logs.
  prefs: []
  type: TYPE_NORMAL
- en: Log format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once logging is enabled, you can view the logs in the CloudWatch logs console.
    Here is a summary of the type of information you will see in the flow-log (in
    order):'
  prefs: []
  type: TYPE_NORMAL
- en: The VPC flow-logs version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AWS account ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ID of the network interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source IPv4 or IPv6 address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The destination IPv4 or IPv6 address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source port of the traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The destination port of the traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IANA protocol number of the traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of packets transferred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of bytes transferred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The start time of the capture window (in Unix seconds)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The end time of the capture window (in Unix seconds)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The action associated with the traffic; for example, `ACCEPT` or `REJECT`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The logging status of the flow-log; for example, `OK`, `NODATA`, or `SKIPDATA`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To identify the protocol, check the protocol number field against the IANA protocol
    numbers list at [http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You cannot update the configuration of an existing flow-log; you must delete
    it and recreate it if you want to change any settings associated. This is another
    reason why it is good to explicitly create and manage the associated log group.
  prefs: []
  type: TYPE_NORMAL
- en: Omissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some traffic is not captured by the flow-logs service, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Traffic to the Amazon DNS server (`x.x.x.2` in your allocated range)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic for Amazon Windows license activation (obviously only applicable to
    Windows instances)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic to and from the instance metadata service (that is, IP address `169.254.169.254`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DHCP traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic to the reserved VPC IP address for the default VPC router (`x.x.x.1`
    in your allocated range)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Building a secure network* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
