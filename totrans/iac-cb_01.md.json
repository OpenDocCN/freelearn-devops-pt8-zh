["```\n$ vagrant box add ubuntu/xenial64\n==> box: Loading metadata for box 'ubuntu/xenial64'\n box: URL: https://atlas.hashicorp.com/ubuntu/xenial64\n==> box: Adding box 'ubuntu/xenial64' (v20160815.0.0) for provider: virtualbox\n box: Downloading: https://atlas.hashicorp.com/ubuntu/boxes/xenial64/versions/20160815.0.0/providers/virtualbox.box\n==> box: Successfully added box 'ubuntu/xenial64' (v20160815.0.0) for 'virtualbox'!\n\n```", "```\nVagrant.configure(\"2\") do |config|\n  # all your Vagrant configuration here\nend\n```", "```\n    $ mkdir vagrant_ubuntu_xenial_1 && cd $_\n    ```", "```\n    Vagrant.configure(\"2\") do |config|\n      config.vm.box = \"ubuntu/xenial64\"\n    end\n    ```", "```\n    $ vagrant up --provider=virtualbox\n    ```", "```\n    $ vagrant ssh\n    Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-34-generic x86_64)\n    […]\n    ubuntu@ubuntu-xenial:~$ hostname\n    ubuntu-xenial\n    ubuntu@ubuntu-xenial:~$ free -m\n    ubuntu@ubuntu-xenial:~$ cat /proc/cpuinfo\n\n    ```", "```\n    $ vagrant destroy\n    ==> default: Forcing shutdown of VM...\n    ==> default: Destroying VM and associated drives...\n\n    ```", "```\n    $ vagrant plugin install vagrant-vbguest\n    Installing the 'vagrant-vbguest' plugin. This can take a few minutes...\n    Installed the plugin 'vagrant-vbguest (0.13.0)'!\n\n    ```", "```\n    $ vagrant plugin list\n    vagrant-vbguest (0.13.0)\n\n    ```", "```\n    $ vagrant up\n    […]\n    Installing Virtualbox Guest Additions 5.0.26\n    […]\n    Building the VirtualBox Guest Additions kernel modules\n     ...done.\n    Doing non-kernel setup of the Guest Additions …done.\n\n    ```", "```\n    config.vbguest.auto_update = false\n    ```", "```\n    if Vagrant.has_plugin?(\"vagrant-vbguest\") then\n        config.vbguest.auto_update = false\n    end\n    ```", "```\n    Vagrant.configure(\"2\") do |config|\n        config.vm.box = \"ubuntu/xenial64\"\n        if Vagrant.has_plugin?(\"vagrant-vbguest\") then\n              config.vbguest.auto_update = false\n        end\n    end\n    ```", "```\n$ vagrant vbguest --status\n[default] GuestAdditions 5.0.26 running --- OK.\n\n```", "```\n$ vagrant vbguest --do install\n\n```", "```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"bento/centos-7.2\"\nend\n```", "```\n$ vagrant up --provider=vmware_fusion\n$ vagrant ssh\n\n```", "```\n$ export VAGRANT_DEFAULT_PROVIDER=vmware_fusion\n$ vagrant up\n\n```", "```\n# VMware Fusion configuration\nconfig.vm.provider \"vmware_fusion\" do |vmware|\n  # enter all the vmware configuration here\nend\n\n# VMware Workstation configuration\nconfig.vm.provider \"vmware_workstation\" do |vmware|\n  # enter all the vmware configuration here\nend\n```", "```\n[\"vmware_fusion\", \"vmware_workstation\"].each do |vmware|\n  config.vm.provider vmware do |v|\n    # enter all the vmware configuration here\n  end\nend\n```", "```\n  [\"vmware_fusion\", \"vmware_workstation\"].each do |vmware|\n    config.vm.provider vmware do |v|\n      v.vmx[\"numvcpus\"] = \"2\"\n      v.vmx[\"memsize\"] = \"1024\"\n    end\n  end\n```", "```\n$ vagrant up\n[…]\n\n```", "```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"bento/centos-7.2\"\n  [\"vmware_fusion\", \"vmware_workstation\"].each do |vmware|\n    config.vm.provider vmware do |v|\n      v.vmx[\"numvcpus\"] = \"2\"\n      v.vmx[\"memsize\"] = \"1024\"\n    end\n  end\nend\n```", "```\n  config.vm.provider :virtualbox do |vb|\n    vb.memory = \"1024\"\n    vb.cpus = \"2\"\n  end\n```", "```\nvm_memory = 1024\nvm_cpus = 2\n```", "```\nconfig.vm.hostname = \"vagrant-lab-1\"\n```", "```\nconfig.vm.box_check_update = false\n```", "```\nconfig.vm.box_version = \"2.2.9\"\n```", "```\nconfig.vm.post_up_message = \"Use \\\"vagrant ssh\\\" to log into the box. This VM uses #{vm_cpus} CPUs and #{vm_memory}MB of RAM.\"\n```", "```\nVagrant.require_version \">= 1.8.0\"\n```", "```\nVagrant.configure(\"2\") do |config|\n  config.vm.hostname = \"vagrant-docker-1\"\n  config.vm.post_up_message = \"HTTP access: http://localhost/\"\n  config.vm.provider \"docker\" do |docker|\n      docker.image = \"nginx:stable\"\n  end\nend\n```", "```\n$ vagrant up --provider=docker\nBringing machine 'default' up with 'docker' provider...\n==> default: Creating the container...\n[…]\n==> default: HTTP access: http://localhost/\n\n```", "```\nENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'\n```", "```\n  config.vm.provider \"docker\" do |docker|\n      docker.image = \"nginx:stable\"\n      docker.ports = ['80:80']\n  end\n```", "```\n$ curl http://localhost/\n\n```", "```\n$ mkdir src; echo \"<h1>Hello from Docker via Vagrant<h1>\" > src/index.html\n\n```", "```\n  config.vm.provider \"docker\" do |docker|\n      docker.image = \"nginx:stable\"\n      docker.ports = ['80:80']\n      docker.volumes = [\"#{Dir.pwd}/src:/usr/share/nginx/html\"]\n  end\n```", "```\n$ curl http://localhost\n<h1>Hello from Docker via Vagrant<h1>\n\n```", "```\n$ sudo setenforce 0\n\n```", "```\nconfig.vm.provider \"docker\" do |docker|\ndocker.vagrant_vagrantfile = \"docker_host/Vagrantfile\"\nend\n```", "```\n  config.vm.define \"front\" do |front|\n    front.vm.provider \"docker\" do |docker|\n      docker.image = \"nginx:stable\"\n      docker.ports = ['80:80']\n      docker.volumes = [\"#{Dir.pwd}/src:/usr/share/nginx/html\"]\n    end\n  end\n```", "```\n  config.vm.define \"app\" do |app|\n    app.vm.provider \"docker\" do |docker|\n      docker.image = \"ghost:0.9.0\"\n      docker.ports = ['8080:2368']\n    end\n  end\n```", "```\n$ curl -IL http://localhost:8080\nHTTP/1.1 200 OK\nX-Powered-By: Express\n[…]\n\n$ curl -IL http://localhost\nHTTP/1.1 200 OK\nServer: nginx/1.10.1\n\n```", "```\nserver {\n  listen 80;\n  location / {\n    proxy_set_header   X-Real-IP $remote_addr;\n    proxy_set_header   Host      $http_host;\n    proxy_pass         http://app:2368;\n  }\n}\n```", "```\n  config.vm.define \"front\" do |front|\n    front.vm.provider \"docker\" do |docker|\n      docker.image = \"nginx:stable\"\n      docker.ports = ['80:80']\n      docker.volumes = [\"#{Dir.pwd}/nginx.conf:/etc/nginx/conf.d/default.conf\"]\n      docker.link(\"app:app\")\n    end\n  end\n```", "```\n  config.vm.define \"app\" do |app|\n    app.vm.provider \"docker\" do |docker|\n      docker.name = \"app\"\n      docker.image = \"ghost:0.9.0\"\n    end\n  end\n```", "```\nENV['VAGRANT_NO_PARALLEL'] = 'true'\n```", "```\n$ vagrant docker-logs --follow\n==> app: > ghost@0.9.0 start /usr/src/ghost\n==> app: > node index\n==> app: Migrations: Creating tables...\n[…]\n==> front: 172.17.0.1 - - [21/Aug/2016:10:55:08 +0000] \"GET / HTTP/1.1\" 200 1547 \"-\" \"Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:48.0) Gecko/20100101 Firefox/48.0\" \"-\"\n==> app: GET / 200 113.120 ms - -\n[…]\n\n```", "```\nversion: '2'\nservices:\n  front:\n    image: nginx:stable\n    volumes:\n      - \"./nginx.conf:/etc/nginx/conf.d/default.conf\"\n    restart: always\n    ports:\n      - \"80:80\"\n    depends_on:\n      - app\n    links:\n      - app\n  app:\n    image: ghost:0.9.0\n    restart: always\n```", "```\n$ vagrant plugin install vagrant-aws\n\n```", "```\n$ vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box\n\n```", "```\nconfig.vm.provider :aws do |aws, override|\n  # AWS Configuration\n  override.vm.box = \"dummy\"\nend\n```", "```\nconfig.vm.define \"srv-1\" do |config|\n    config.vm.provider :aws do |aws|\n      aws.ami = \"ami-c06b1eb3\"\n    end\n    config.vm.provision :shell, :path => \"script.sh\"\nend\n```", "```\naws.access_key_id = ENV['AWS_ACCESS_KEY_ID']\naws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']\n```", "```\naws.region = \"eu-west-1\"\naws.availability_zone = \"eu-west-1a\"\n```", "```\naws.instance_type = \"t2.micro\"\n```", "```\naws.security_groups = ['iac-lab']\n```", "```\naws.keypair_name = \"iac-lab\"\noverride.ssh.username = \"ubuntu\"\noverride.ssh.private_key_path = \"./keys/iac-lab.pem\"\n```", "```\noverride.nfs.functional = false\n```", "```\naws.tags = {\n  'Name'   => 'Vagrant'\n}\n```", "```\n#!/bin/sh\n# install Docker\ncurl -sSL https://get.docker.com/ | sh\n# add ubuntu user to docker group\nsudo usermod -aG docker ubuntu\n# install docker-compose\ncurl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n# execute the docker compose file\ncd /vagrant\ndocker-compose up -d\n\n```", "```\n$ vagrant up\nBringing machine 'srv-1' up with 'aws' provider...\n[…]\n==> srv-1: Launching an instance with the following settings...\n==> srv-1:  -- Type: t2.micro\n==> srv-1:  -- AMI: ami-c06b1eb3\n==> srv-1:  -- Region: eu-west-1\n[…]\n==> srv-1: Waiting for SSH to become available...\n==> srv-1: Machine is booted and ready for use!\n[…]\n==> srv-1:  docker version\n[…]\n==> srv-1: Server:\n==> srv-1:  Version:      1.12.1\n[…]\n==> srv-1: Creating vagrant_app_1\n==> srv-1: Creating vagrant_front_1\n\n```", "```\nvm_memory = 512\nvm_cpus = 1\n\nVagrant.configure(\"2\") do |config|\n\n  config.vm.box = \"bento/centos-7.2\"\n\n  config.vm.provider :virtualbox do |vb|\n    vb.memory = vm_memory\n    vb.cpus = vm_cpus\n  end\n\n   config.vm.define \"srv-1\" do |config|\n     config.vm.provision :shell, :inline => \"ip addr | grep \\\"inet\\\" | awk '{print $2}'\"\n     config.vm.network \"private_network\", ip: \"192.168.50.11\", virtualbox__intnet: \"true\"\n   end\nend\n```", "```\nconfig.vm.define \"srv-2\" do |config|\n     config.vm.provision :shell, :inline => \"ip addr | grep \\\"inet\\\" | awk '{print $2}'\"\n     config.vm.network \"private_network\", ip: \"192.168.50.12\", virtualbox__intnet: \"true\"\nend\n```", "```\nvm_num = 2\n```", "```\n(1..vm_num).each do |n|\n    # a lan lab in the 192.168.50.0/24 range\n    lan_ip = \"192.168.50.#{n+10}\"\n    config.vm.define \"srv-#{n}\" do |config|\n      config.vm.provision :shell, :inline => \"ip addr | grep \\\"inet\\\" | awk '{print $2}'\"\n      config.vm.network \"private_network\", ip: lan_ip, virtualbox__intnet: \"true\"\n    end\n  end\n```", "```\nconfig.vm.provider :virtualbox do |vb|\n    vb.memory = vm_memory\n    vb.cpus = vm_cpus\n vb.linked_clone = true\nend\n```", "```\nconfig.vm.network \"private_network\", ip: lan_ip, virtualbox__intnet: \"iac-lab\"\n\n```", "```\n  config.vm.define \"db-1\" do |config|\n    config.vm.hostname = \"db-1\"\n    config.vm.network \"private_network\", ip: \"10.30.0.11\", virtualbox__intnet: \"db_lan\"\n    config.vm.provision :shell, :inline => \"sudo yum install -q -y epel-release\"\n    config.vm.provision :shell, :inline => \"sudo yum install -q -y redis\"\n    config.vm.provision :shell, :inline => \"sudo sed -i 's/bind 127.0.0.1/bind 127.0.0.1 10.30.0.11/' /etc/redis.conf\"\n    config.vm.provision :shell, :inline => \"sudo systemctl enable redis\"\n    config.vm.provision :shell, :inline => \"sudo systemctl start redis\"\n  end\n```", "```\n#!/usr/bin/env node\nvar os = require(\"os\");\nvar redis = require('redis');\nvar client = redis.createClient(6379, '10.30.0.11');\nclient.on('connect', function() {\n    console.log('connected to redis on '+os.hostname()+' 10.30.0.11:6379');\n});\n```", "```\nvar http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Running on '+os.hostname()+'\\n');\n}).listen(8080);\nconsole.log('HTTP server listening on :8080');\n```", "```\n[Unit]\nDescription=Node App\nAfter=network.target\n\n[Service]\nExecStart=/srv/nodeapp/app.js\nRestart=always\nUser=vagrant\nGroup=vagrant\nEnvironment=PATH=/usr/bin\nEnvironment=NODE_ENV=production\nWorkingDirectory=/srv/nodeapp\n[Install]\nWantedBy=multi-user.target\n```", "```\n# Tier 2: a scalable number of application servers\nvm_app_num = 2\n  (1..vm_app_num).each do |n|\n    app_lan_ip = \"10.20.0.#{n+10}\"\n    db_lan_ip = \"10.30.0.#{n+100}\"\n    config.vm.define \"app-#{n}\" do |config|\n      config.vm.hostname = \"app-#{n}\"\n      config.vm.network \"private_network\", ip: app_lan_ip, virtualbox__intnet: \"app_lan\"\n      config.vm.network \"private_network\", ip: db_lan_ip, virtualbox__intnet: \"db_lan\"\n      config.vm.provision :shell, :inline => \"sudo yum install -q -y epel-release\"\n      config.vm.provision :shell, :inline => \"sudo yum install -q -y nodejs npm\"\n      config.vm.provision :shell, :inline => \"sudo mkdir /srv/nodeapp\"\n      config.vm.provision :shell, :inline => \"sudo cp /vagrant/app.js /src/nodeapp\"\n      config.vm.provision :shell, :inline => \"sudo chown -R vagrant.vagrant /srv/\"\n      config.vm.provision :shell, :inline => \"sudo chmod +x /srv/nodeapp/app.js\"\n      config.vm.provision :shell, :inline => \"cd /srv/nodeapp; npm install redis\"\n      config.vm.provision :shell, :inline => \"sudo cp /vagrant/nodeapp.service /etc/systemd/system\"\n      config.vm.provision :shell, :inline => \"sudo systemctl daemon-reload\"\n      config.vm.provision :shell, :inline => \"sudo systemctl start nodeapp\"\n    end\n  end\n```", "```\nevents {\n  worker_connections 1024;\n}\nhttp {\n  upstream app {\n    server 10.20.0.11:8080 max_fails=1 fail_timeout=1s;\n    server 10.20.0.12:8080 max_fails=1 fail_timeout=1s;\n  }\n  server {\n    listen 80;\n    server_name  _;\n    location / {\n      proxy_set_header   X-Real-IP $remote_addr;\n      proxy_set_header   Host      $http_host;\n      proxy_pass         http://app;\n    }\n  }\n}\n```", "```\n  # Tier 1: an NGINX reverse proxy VM, available on http://localhost:8080\n  config.vm.define \"front-1\" do |config|\n    config.vm.hostname = \"front-1\"\n    config.vm.network \"private_network\", ip: \"10.10.0.11\", virtualbox__intnet: \"front_lan\"\n    config.vm.network \"private_network\", ip: \"10.20.0.101\", virtualbox__intnet: \"app_lan\"\n    config.vm.network \"forwarded_port\", guest: 80, host: 8080\n    config.vm.provision :shell, :inline => \"sudo yum install -q -y epel-release\"\n    config.vm.provision :shell, :inline => \"sudo yum install -q -y nginx\"\n    config.vm.provision :shell, :inline => \"sudo cp /vagrant/nginx.conf /etc/nginx/nginx.conf\"\n    config.vm.provision :shell, :inline => \"sudo systemctl enable nginx\"\n    config.vm.provision :shell, :inline => \"sudo systemctl start nginx\"\n  end\n```", "```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"bento/centos-7.2\"\n  config.vm.define \"srv-1\" do |config|\n    config.vm.hostname = \"srv-1\"\n  end\nend\n```", "```\nevents {\n  worker_connections 1024;\n}\nhttp {\n  sendfile off;\n  server {\n    listen 80;\n    server_name  _;\n    root /srv/app/public ;\n    try_files $uri $uri/ /index.php?q=$uri&$args;\n    index index.php;\n    location / {\n      try_files $uri $uri/ /index.php?$query_string;\n    }\n    location ~ \\.php$ {\n      try_files $uri /index.php =404;\n      fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n      fastcgi_param PATH_INFO $fastcgi_script_name;\n      include fastcgi_params;\n    }\n  }\n}\n```", "```\n    sudo yum install -q -y epel-release\n\n    ```", "```\n    sudo yum install -q -y php-fpm\n\n    ```", "```\n    sudo sed -i 's/user = apache/user = vagrant/' /etc/php-fpm.d/www.conf\n\n    ```", "```\n    sudo yum install -q -y php-pdo php-mcrypt php-mysql php-cli php-mbstring php-dom\n\n    ```", "```\n    curl -sS https://getcomposer.org/installer | php\n    sudo mv composer.phar /usr/local/bin/composer\n    sudo chmod +x /usr/local/bin/composer\n\n    ```", "```\n    sudo yum install -q -y nginx\n    sudo cp /vagrant/nginx.conf /etc/nginx/nginx.conf\n\n    ```", "```\n    sudo yum install -q -y mariadb-server\n\n    ```", "```\n    sudo systemctl enable php-fpm\n    sudo systemctl start php-fpm\n    sudo systemctl enable nginx\n    sudo systemctl start nginx\n    sudo systemctl enable mariadb\n    sudo systemctl start mariadb\n\n    ```", "```\nconfig.vm.provision :shell, :path => \"provision.sh\"\n\n```", "```\nconfig.vm.synced_folder \"src/\", \"/srv/app\"\n\n```", "```\nconfig.vm.network \"public_network\", bridge: \"en0: Wi-Fi (AirPort)\"\n\n```", "```\n==> srv-1: Available bridged network interfaces:\n1) en0: Wi-Fi (AirPort)\n[...]\n\n```", "```\ncd /srv/app\ncomposer create-project --prefer-dist laravel/laravel.\n\n```", "```\nsendfile off;\n\n```", "```\nEnableSendfile Off\n\n```", "```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"bento/centos-7.2\"\n  config.vm.define \"blog\" do |config|\n    config.vm.hostname = \"blog\"\n  end\nend\n```", "```\n    config.vm.provision :shell, :path => \"provision.sh\"\n```", "```\n    config.vm.synced_folder \"src/\", \"/srv/blog\"\n```", "```\n    config.vm.network \"private_network\", type: \"dhcp\"\n    config.vm.network \"forwarded_port\", guest: 2368, host: 8080\n```", "```\n    sudo yum install -q -y epel-release\n\n    ```", "```\n    sudo yum install -q -y node npm unzip \n\n    ```", "```\n    curl -L https://ghost.org/zip/ghost-latest.zip -o ghost.zip\n\n    ```", "```\n    sudo unzip -uo ghost.zip -d /srv/blog/\n\n    ```", "```\n    cd /srv/blog && sudo npm install --production\n\n    ```", "```\nvagrant ssh\ncd /srv/blog && sudo npm start --production\n[…]\nGhost is running in production...\nYour blog is now available on http://my-ghost-blog.com\nCtrl+C to shut down\n\n```", "```\nserver: {\n host: '0.0.0.0',\n port: '2368'\n }\n\n```", "```\ncd /srv/blog && sudo npm start --production\n\n```", "```\n$ vagrant share\n==> srv-1: Detecting network information for machine...\n[...]\n==> srv-1: Your Vagrant Share is running! Name: anxious-cougar-6317\n==> srv-1: URL: http://anxious-cougar-6317.vagrantshare.com\n\n```", "```\n$ vagrant share --ssh\n==> srv-1: Detecting network information for machine...\n[...]\nsrv-1: Please enter a password to encrypt the key:\n srv-1: Repeat the password to confirm:\n[...]\n==> srv-1: You're sharing with SSH access. This means that another user\n==> srv-1: simply has to run `vagrant connect --ssh subtle-platypus-4976`\n==> srv-1: to SSH to your Vagrant machine.\n[...]\n\n```", "```\n$ vagrant connect --ssh subtle-platypus-4976\nLoading share 'subtle-platypus-4976'...\n[...]\n[vagrant@srv-1 ~]$ head -n1 /srv/blog/config.js\n// # Ghost Configuration\n\n```", "```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"bento/centos-7.2\"\n  config.vm.define \"prod\" do |config|\n    config.vm.hostname = \"prod\"\n    config.vm.network \"private_network\", type: \"dhcp\"\n  end\n\nend\n```", "```\n$ vagrant plugin install vagrant-omnibus\nInstalling the 'vagrant-omnibus' plugin. This can take a few minutes...\nInstalled the plugin 'vagrant-omnibus (1.4.1)'!\n\n```", "```\nconfig.omnibus.chef_version = :latest\n```", "```\nconfig.omnibus.chef_version = \"11.18.12\"\n```", "```\n%w(vagrant-vbguest vagrant-omnibus).each do |plugin|\n  unless Vagrant.has_plugin?(plugin)\n    raise \"#{plugin} plugin is not installed! Please install it using `vagrant plugin install #{plugin}`\"\n  end\nend\n```", "```\npackage \"httpd\"\n\nservice \"httpd\" do\n  action [ :enable, :start ]\nend\n```", "```\n    config.vm.provision :chef_solo do |chef|\n      chef.add_recipe 'apache2'\n    end\n```", "```\n$ chef-solo --version\nChef: 11.18.12\n\n```", "```\n$ httpd -v\nServer version: Apache/2.4.6 (CentOS)\n\n```", "```\n$ pidof httpd\n13029 13028 13027 13026 13025 13024\n\n```", "```\n  config.vm.define \"staging\" do |config|\n    config.vm.hostname = \"staging\"\n    config.omnibus.chef_version = \"12.13.37\"\n    config.vm.network \"private_network\", type: \"dhcp\"\n    config.vm.provision :chef_solo do |chef|\n      chef.add_recipe 'apache2'\n    end\n  end\n```", "```\n$ vagrant ssh staging\n$ chef-solo --version\nChef: 12.13.37\n$ httpd -v\nServer version: Apache/2.4.6 (CentOS)\n$ pidof httpd\n13029 13028 13027 13026 13025 13024\n\n```", "```\nconfig.vm.define \"prod\", primary: true do |config|\n  […]\nend\n```", "```\nconfig.vm.define \"staging\", autostart: false do |config|\n  […]\nend\n```", "```\n---\n- hosts: all\n become: yes\n tasks:\n - name: Enable EPEL\n yum: name=epel-release state=present\n - name: Create a Docker group\n group: name=docker state=present\n - name: Add the vagrant user to Docker group\n user: name=vagrant groups=docker append=yes\n - name: Install Docker\n yum: name=docker state=present\n - name: Enable and Start Docker Daemon\n service: name=docker state=started enabled=yes\n\n```", "```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"bento/centos-7.2\"\n  config.vm.define \"srv-1\" do |config|\n    config.vm.hostname = \"srv-1\"\n    config.vm.network \"private_network\", type: \"dhcp\"\n  end\nend\n```", "```\n    config.vm.provision \"ansible\" do |ansible|\n      ansible.playbook = \"playbook.yml\"\n    end\n```", "```\n$ vagrant ssh\n[vagrant@srv-1 ~]$ systemctl status docker\n[vagrant@srv-1 ~]$ docker --version\nDocker version 1.10.3, build d381c64-unsupported\n[vagrant@srv-1 ~]$ docker run -it --rm alpine /bin/hostname\n0f44a4d7afcd\n\n```", "```\n    config.vm.provision \"ansible_local\" do |ansible|\n      ansible.playbook = \"playbook.yml\"\n    end\n```", "```\n$ vagrant up\n[…]\n==> srv-1: Running provisioner: ansible_local...\n srv-1: Installing Ansible...\n srv-1: Running ansible-playbook...\n[…]\n\n```", "```\n$ vagrant ssh\n$ ansible --version\nansible 2.1.1.0\n\n```", "```\n    config.vm.provision \"ansible_local\" do |ansible|\n ansible.version = \"1.9.6\"\n ansible.install_mode = :pip\n      ansible.playbook = \"playbook.yml\"\n    end\n```", "```\n$ vagrant up\n[…]\n==> srv-1: Running provisioner: ansible_local...\n srv-1: Installing Ansible...\n srv-1: Installing pip... (for Ansible installation)\n srv-1: Running ansible-playbook...\n\n```", "```\n$ pip --version\npip 8.1.2 from /usr/lib/python2.7/site-packages (python 2.7)\n$ ansible --version\nansible 1.9.6\n\n```", "```\n$ docker version\n\n```", "```\n$ docker run -it --rm alpine ping -c2 google.com\nPING google.com (216.58.211.78): 56 data bytes\n64 bytes from 216.58.211.78: seq=0 ttl=61 time=22.078 ms\n64 bytes from 216.58.211.78: seq=1 ttl=61 time=21.061 ms\n\n```", "```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = https://stable.release.core-os.net/amd64-usr/current/coreos_production_vagrant.box\nend\n```", "```\n  config.vm.provider :virtualbox do |vb|\n      vb.check_guest_additions = false\n      vb.functional_vboxsf     = false\n  end\n\n  if Vagrant.has_plugin?(\"vagrant-vbguest\") then\n    config.vbguest.auto_update = false\n  end\n```", "```\n  config.vm.define \"core-1\" do |config|\n    config.vm.hostname = \"core-1\"\n    config.vm.network \"private_network\", type: \"dhcp\" \n  end\n```", "```\n$ docker run -d --name mariadb -e MYSQL_ROOT_PASSWORD=h4ckm3 mariadb\n$ docker run -d -e WORDPRESS_DB_HOST=mariadb -e 'WORDPRESS_DB_PASSWORD=h4ckm3 --link mariadb:mariadb -p 80:80 wordpress\n\n```", "```\ndb_root_password = \"h4ckm3\"\nconfig.vm.provision \"docker\" do |docker|\n docker.run \"mariadb\",\n args: \"--name 'mariadb' -e 'MYSQL_ROOT_PASSWORD=#{db_root_password}'\"\n docker.run \"wordpress\",\n args: \"-e 'WORDPRESS_DB_HOST=mariadb' -e 'WORDPRESS_DB_PASSWORD=#{db_root_password}' --link 'mariadb:mariadb' -p '80:80'\"\n end\n\n```", "```\n$ curl -IL http://172.28.128.3/wp-admin/install.php\nHTTP/1.1 200 OK\nDate: Thu, 25 Aug 2016 10:54:17 GMT\nServer: Apache/2.4.10 (Debian)\nX-Powered-By: PHP/5.6.25\nExpires: Wed, 11 Jan 1984 05:00:00 GMT\nCache-Control: no-cache, must-revalidate, max-age=0\nContent-Type: text/html; charset=utf-8\n\n```"]