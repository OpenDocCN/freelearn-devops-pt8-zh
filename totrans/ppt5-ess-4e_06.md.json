["```\n<% [1,2,3].each  |$p| { %> \nHello, world! \n<% } %> \n```", "```\n<% (1 .. 3).each  do %> \nHello, world! \n<% end %> \n```", "```\n<% [1,2,3].each |$p| { -%> \nHello, world! \n<% } -%> \n```", "```\n<% [1,2,3].each  |$index|  { -%> \nHello, world #<%= $index %> ! \n<% } -%> \n```", "```\n<IfModule mpm_worker_module> \nServerLimit         <%= $apache::apache_server_limit %> \nStartServers        <%= $apache::apache_start_servers %> \nMaxClients          <%= $apache::apache_max_clients %> \n</IfModule> \n<% $apache::apache_ports.each  |$port| { -%> \nListen <%= $port %> \nNameVirtualHost *:<%= $port %> \n<% } -%> \n```", "```\nfile { '/etc/apache2/conf.d/cacti.conf':  \n  content => epp('cacti/apache/cacti.conf.epp'),  \n}  \n```", "```\ndefine logrotate::conf(\n  String $pattern,\n  Integer $max_days=7,\n  Array $options=[]\n) {\n  file { \"/etc/logrotate.d/$name\": \n    ensure  => file,\n    mode    => '0644', \n    content => epp('logrotate/config-snippet.epp',\n      {\n        'pattern'  => $pattern,\n        'max_days' => $max_days,\n        'options'  => $options,\n      },) \n  }\n}\n```", "```\n$comma_seperated_list = inline_epp('<%= $my_class::my_array * \",\" %>') \n```", "```\nfile_line { 'user admin proxy': \n  ensure   => present, \n  path     => '/home/admin/.bashrc', \n  line     => 'export \n  http_proxy=http://proxy.domain.com:3127', \n} \n```", "```\nfile { '/home/admin/.bashrc': \n  ensure => file, \n  owner  => 'admin', \n  group  => 'admin', \n  mode   => '0644', \n} \n```", "```\nini_setting { 'puppet agent report': \n  ensure  => present, \n  path    => '/etc/puppetlabs/puppet/puppet.conf', \n  section => 'agent', \n  setting => 'report', \n  value   => 'true', \n} \n```", "```\nini_setting { 'ssh config host default':\n  ensure              => present,\n  path                => '/etc/ssh/ssh_config',\n  section             => 'Host *',\n  section_prefix      => '',\n  section_suffix      => '',\n  key_value_separator => ' ',\n  setting             => 'HashKnownHosts',\n  value               => 'true',\n}\n```", "```\nHost * \nHashKnownHosts true \n```", "```\nconcat { 'ssh config':\n  ensure => present,\n  path   => '/etc/ssh/ssh_config',\n}\n```", "```\nconcat::fragment { 'ssh_config header':\n  target  => 'ssh config',\n  content => \"# Managed by Pupept\\n\",\n  order   => '01',\n}\nconcat::fragment { 'default host':\n  target => 'ssh config',\n   source => \n'puppet:///modules/<modulename>/ssh_config_default host',\n   order => '10',\n}\n```", "```\nclass yumrepos::team_ninja_stable {\n  yumrepo { 'team_ninja_stable': \n    ensure => present, \n    ... \n  }\n}\n```", "```\ninclude yumrepos::team_ninja_stable\ninclude yumrepos::team_wizard_experimental\npackage { 'doombunnies': \n  ensure  => installed, \n  require => [\n    Class['yumrepos::team_ninja_stable'], \n    Class['yumrepos::team_wizard_experimental']\n  ],\n}\n```", "```\nclass yumrepos::all { \n  @yumrepo { 'tem_ninja_stable':\n    ensure => present,\n    tag    => 'stable',\n  }\n  @yumrepo { 'team_wizard_experimantel':\n    ensure => present,\n    tag    => 'experimental',\n  }\n} \n```", "```\nrealize(Yumrepo['team_ninja_stable'])\nrealize(Yumrepo['team_wizard_experimental'])\npackage { 'doombunnies': \n  ensure  => installed, \n  require => [ \n    Yumrepo['team_ninja_stable'], \n    Yumrepo['team_wizard_experimental'], \n  ], \n}  \n```", "```\nYumrepo<| title == 'team_ninja_stable' |>\n```", "```\nYumrepo<| title == 'team_ninja_stable' |> -> Class['...']\n```", "```\nUser<| |>\n```", "```\nfile { '/etc/sysctl.conf': \n  ensure => file, \n  tag    => 'security', \n} \n```", "```\nUser<| tag == 'developers' |>\n```", "```\n@user { 'felix':  \n  ensure => present,  \n  groups => [ 'power', 'sys' ],  \n} \nUser<| groups == 'sys' |> \n```", "```\n@@file { 'my-app-psk':  \n  ensure  => file, \n  path    => '/etc/my-app/psk',  \n  content => 'nwNFgzsn9n3sDfnFANfoinaAEF',  \n  tag     => 'cluster02',  \n}\n```", "```\nFile <<| tag == 'cluster02' |>>\n```", "```\npuppet module install puppetlabs-puppetdb  \n```", "```\npuppet apply -e 'include puppetdb, puppetdb::master::config'\n```", "```\ninclude puppetdb \nclass { ‘puppetdb::master::config’: \n         puppetdb_server => 'master.example.net', \n      } \n```", "```\n@@sshkey { $::facts['networking']['fqdn']: \n  host_aliases => $::facts['networking']['hostname'], \n  key          => $::facts['sshecdsakey'], \n  tag          => 'san-nyc' \n}  \n```", "```\nSshkey<<| tag == 'san-nyc' |>>\n```", "```\n@@host { $::facts['networking']['fqdn']:\n  ip           => $::facts['networking']['ipaddress'],\n  host_aliases => [ $::facts['networking']['hostname'] ],\n  tag          => 'nyc-site',\n}\n```", "```\nHost<<| tag == 'nyc-site' |>> \n```", "```\n@@cacti_device { $::facts['networking']['fqdn']: \n  ensure => present, \n  ip     => $::facts['networking']['ipaddress'], \n  tag    => 'nyc-site', \n} \n```", "```\nCacti_device<<| tag == 'nyc-site' |>>\n```", "```\nCacti_device<<| |>>\n```", "```\nclass site::ssh { \n  # ...actual SSH management... \n  @@nagios_service { \"${::facts['networking']['fqdn']}-\n  ssh\": \n  use       => 'ssh_template', \n  host_name => $::facts['networking']['fqdn'], \n  } \n}  \n```", "```\nNagios_service<<| |>> \n```", "```\n@@firewall { \"150 forward port 443 to ${::facts['networking']['hostname']}\": \n  proto       => 'tcp', \n  dport       => '443', \n  destination => $public_ip_address, \n  jump        => 'DNAT', \n  todest      => $::facts['networking']['ipaddress'], \n  tag         => 'segment03', \n}\n```", "```\nFirewall<<| tag == 'segment03' |>>\n```", "```\npuppet node deactivate vax793.example.net\n```", "```\nUser<| title == 'felix' |> { \n  uid => '2066' \n} \n```", "```\ninclude cacti \nPackage<| title == 'cacti' |> { ensure => 'latest' } \n```", "```\nPackage<| |> { before => Exec['send-software-list'] }\n```", "```\nMysql_grant { \n  options    => ['GRANT'], \n  privileges => ['ALL'], \n  tables     => '*.*', \n} \nmysql_grant { 'root': \n  ensure => 'present', \n  user   => 'root@localhost', \n}\nmysql_grant { 'apache': \n  ensure => 'present', \n  user   => 'apache@10.0.1.%', \n  tables => 'application.*', \n}\nmysql_grant { 'wordpress': \n  ensure => 'present', \n  user   => 'wordpress@10.0.5.1', \n  tables => 'wordpress.*', \n}\nmysql_grant { 'backup':\n  ensure     => 'present',\n  user       => 'backup@localhost',\n  privileges => [ 'SELECT', 'LOCK TABLE' ],\n} \n```", "```\nclass webserver {  \n  File { owner => 'www-data' }  \n  include apache, nginx, firewall, logging_client  \n  file {  \n    ...  \n  } \n} \n```", "```\nfile { '/etc/motd': content => '...' } \n```", "```\nFile { owner => undef } \n```", "```\nfile { '/etc/motd': content => '...', owner => undef } \n```", "```\nif defined(File['/etc/motd']) { \n  notify { 'This machine has a MotD': } \n} \n```", "```\nif ! defined(Package['apache2']) {  \n  package { 'apache2':  \n    ensure => 'installed'  \n  }  \n}  \n```", "```\nclass cacti { \n  if !defined(Package['apache2']) { \n    package { 'apache2': ensure => 'present' } \n  }\n}\nclass postfixadmin { \n  if !defined(Package['apache2'] { \n    package { 'apache2': ensure => 'latest' } \n  }\n}\n```", "```\nensure_resource('package', 'apache2', { ensure => 'installed' }) \n```"]