- en: Chapter 10. Continuous Integration for OpenShift Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will help you to add continuous integration to your OpenShift
    applications using the Jenkins cartridge. The specific recipes of this chapter
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Jenkins CI to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increasing the slave idle timeout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Jenkins plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Jenkins to build projects hosted on GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Jenkins workflow for your OpenShift applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading Jenkins to the latest version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to add **Continuous Integration** (**CI**)
    support to your OpenShift applications. CI is an **Extreme Programming** (**XP**)
    practice in which a tool monitors your version control system, such as Git or
    SVN, for code changes. Whenever it detects a change, it builds the project and
    runs its test cases. If the build fails for some reason, the tool will notify
    the development team about the failure via e-mail or other communication channels
    so that they can fix the build failure immediately. CI tools can do much more
    beyond building and testing the application. They can also keep track of the code
    quality over a period of time, run functional tests, perform automatic deployment,
    apply database migrations, and perform a lot of other tasks. This helps us to
    discover defects early in the software development cycle, improves code quality,
    and automates deployment.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift supports Jenkins as its CI tool of choice. Jenkins ([http://jenkins-ci.org/](http://jenkins-ci.org/))
    is the most dominant and popular CI server in the market today. It is an open
    source project written in the Java programming language. Jenkins is feature rich
    and extensible through plugins. There are more than 600 Jenkins plugins made by
    an active community at your disposal, which can cover everything from version
    control system, build tools, code quality metrics, build notifiers, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: The *Adding Jenkins CI to your application* recipe will help you to add Jenkins
    to your existing OpenShift application. We will use a Java application to showcase
    OpenShift Jenkins integration. This chapter discusses Jenkins in the context of
    Java applications. Nevertheless, even if you are using any other web cartridge
    supported by OpenShift, this chapter will give you a good understanding on how
    to add the OpenShift Jenkins CI support to your application.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift uses the Jenkins master/slave topology ([https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds](https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds))
    to distribute build jobs among different slaves. This ensures you get a scalable
    Jenkins environment for your OpenShift applications. Also, the Jenkins master
    will create different types of slaves to build different OpenShift application
    types. The type of slave depends on the application type. For example, to build
    a JBoss EAP application, the Jenkins master will create a slave that has a JBoss
    EAP cartridge installed. By default, a slave will die after 15 minutes of inactivity.
    The *Increasing the slave idle timeout* recipe will cover how you can increase
    the idle timeout for slaves.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins make Jenkins extensible and allow you to extend it to meet your needs.
    In the *Installing Jenkins plugins* recipe, you will learn how to install Jenkins
    plugins. You can view the full list of Jenkins plugins at [https://wiki.jenkins-ci.org/display/JENKINS/Plugins](https://wiki.jenkins-ci.org/display/JENKINS/Plugins).
  prefs: []
  type: TYPE_NORMAL
- en: You can use Jenkins not only to build applications hosted on OpenShift but also
    to build projects hosted elsewhere. The *Using Jenkins to build projects hosted
    on GitHub* recipe will cover how you can build projects hosted on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe will
    show how you can customize the default build created by OpenShift for your needs.
    In this recipe, you will create a Jenkins workflow, including three Jenkins jobs.
    The first Jenkins job will poll a Git repository for changes, the second job will
    run code coverage over the application source code, and the third will deploy
    the application to OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins version supported by OpenShift is not the latest version. In the
    *Upgrading Jenkins to the latest version* recipe, you will upgrade Jenkins to
    the latest version. The advantage of using the latest version is that some of
    the plugins do not work with the Jenkins version supported by OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins is not the only CI server you can use to build and deploy OpenShift
    applications. You can also use a hosted CI server, such as Travis CI, to build
    and deploy an OpenShift application. The OpenShift Travis CI integration is not
    covered in this chapter, but you can refer to my blog for more information on
    this topic at [https://www.openshift.com/blogs/how-to-build-and-deploy-openshift-java-projects-using-travis-ci](https://www.openshift.com/blogs/how-to-build-and-deploy-openshift-java-projects-using-travis-ci).
  prefs: []
  type: TYPE_NORMAL
- en: Adding Jenkins CI to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding Jenkins to your application is a two-step process. You have to first
    create the Jenkins server application and then add the Jenkins client cartridge
    to your application. In this recipe, you will learn how to add Jenkins CI to an
    existing OpenShift application. After adding Jenkins to your application, each
    Git push to your OpenShift application Git repository will initiate a Jenkins
    job that will build the project and then deploy it to OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, you will need three available gears. One gear will
    be used by the application, and Jenkins will consume the remaining two gears.
    This chapter will use the application created in [Chapter 7](part0089_split_000.html#page
    "Chapter 7. OpenShift for Java Developers"), *OpenShift for Java Developers*.
    If you don''t have this application running, then recreate the application using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to add Jenkins to your application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can add the Jenkins cartridge to your application, you have to create
    the Jenkins server application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the preceding command is executed, the Jenkins server will be available
    at `http://jenkins-{domain-name}.rhcloud.com`. Please replace `{domain-name}`
    with your OpenShift account domain name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make note of the username and password that the OpenShift `rhc` command-line
    client presented to you in the application creation logs. These are used to log
    in to the Jenkins web console. This is shown in the following command-line output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Log in to Jenkins at `https://jenkins-{domain-name}.rhcloud.com/me/configure`
    using the credentials you got in step 1\. I recommend that you change the Jenkins
    password to something that you can easily remember. To change the password, enter
    your new password in the **Password** section, and click on the **Save** button:![How
    to do it…](img/00110.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After saving your new password, log out and log in again using the new password.
    You will be presented with the Jenkins dashboard as shown in the following screenshot:![How
    to do it…](img/00111.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you have created the Jenkins server application, you can add the Jenkins
    cartridge to the `jobstore` application. To add the cartridge, run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the Jenkins dashboard at `https://jenkins-{domain-name}.rhcloud.com/`,
    and you will see a new job configured for the `jobstore` application, as shown
    in the following screenshot:![How to do it…](img/00112.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **jobstore-build** link (`https://jenkins-{domain-name}.rhcloud.com/job/jobstore-build/`)
    to view the Jenkins job details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To initiate a new build, you can either click on the **Build Now** link on
    the left-hand side or make a change to the project source, commit it, and then
    push the change to the application Git repository. Let''s make a small change
    to our application source code. Change the title in the `src/main/webapp/index.html`
    location from `<title>JobStore</title>` to `<title>JobStore with Jenkins</title>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `git push` logs will show that Jenkins is building the project as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can view the build logs in the Jenkins web console by clicking on the **Console
    Output** option as shown in the following screenshot:![How to do it…](img/00113.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the job is completed, you will see the build status under **Build History**.
    The successful builds are shown in blue and failed builds are shown in red.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can verify that your changes are applied by opening the application URL
    in your favorite browser (`http://jobstore-{domain-name}.rhcloud.com`). You will
    see that the title has been updated to **Jobstore with Jenkins**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the powerful features of Jenkins is its ability to distribute builds
    over multiple machines. Jenkins uses the master/slave architecture to manage distributed
    builds. In the master/slave architecture, there is a Jenkins server whose job
    is to schedule jobs, dispatch builds to the slave for the actual execution, monitor
    the slave health, and record and present build results. The slave runs the actual
    build and shares job results with the master.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift uses the Jenkins master/slave architecture to build your applications.
    You can only have one Jenkins master for an OpenShift domain, and all the applications
    under that domain will use the Jenkins master for application builds. The Jenkins
    master, depending on the Jenkins job configuration for that application, will
    create a slave that will build the application. Every OpenShift Jenkins installation
    has the OpenShift Jenkins plugin installed. This plugin makes it possible for
    Jenkins to talk with your OpenShift account and create slaves on your behalf.
    The Jenkins slaves are nothing more than OpenShift gears.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 1, you created the Jenkins master application. You can use the master
    instance to execute jobs directly but, most of the time in the master/slave architecture,
    slaves are used to build the projects. The Jenkins master created by OpenShift
    is configured not to run any jobs by setting the number of executors configuration
    to `0`. The number of executors lets you define the number of concurrent jobs
    an instance can run. As the number of executors for the master instance is set
    to `0`, you can''t use it to build any project. You can set the number of executors
    to a number greater than `0` by updating the **# of executors** system configuration
    value in the Jenkins configuration screen (`https://jenkins-{domain-name}.rhcloud.com/configure`),
    as shown in the following screenshot. In the *Using Jenkins to build projects
    hosted on GitHub* recipe, you will use the Jenkins master to build the project.
    Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have created the Jenkins master application, you can add the Jenkins
    client to the `jobstore` application. If you try to add the Jenkins client to
    an application before creating the Jenkins master, you will get an error message
    in the `rhc add-cartridge` command logs.
  prefs: []
  type: TYPE_NORMAL
- en: In step 5, you added the Jenkins client cartridge to the `jobstore` application.
    The Jenkins client cartridge creates a new Jenkins job for the `jobstore` project.
    In Jenkins, a job defines what needs to be done. You can view the job configuration
    by opening `https://jenkins-{domain}.rhcloud.com/job/jobstore-build/configure`
    in your favorite browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The job configuration can be divided into three sections: builder configuration,
    source code management configuration, and build configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Builder configuration**: The configuration values shown in the following
    screenshot will be used to create a slave. The configuration says that it needs
    a builder slave with a small gear size of type `redhat-jbosseap-6`. This means
    the slave gear will have a JBoss EAP 6 cartridge installed. It also defines a
    timeout for which the Jenkins master will wait for the slave to come online. The
    default builder timeout is `5` minutes or `300000` milliseconds. The **Restrict
    where this project can be run** configuration defines that this project will only
    be built on the slave with the label `jobstore-build`. As you might have probably
    noticed, the name of the label is the same as the name of the job. The OpenShift
    Jenkins plugin uses the label name to read the job configuration and creates a
    slave using the builder configuration of the job. So, if you change the name of
    the label from `jobstore-build` to `jobstore-os-build`, then the Jenkins plugin
    will not be able to find the associated job configuration, and the job will not
    be executed.![How it works…](img/00115.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git configuration**: The next important configuration is the Git version
    control configuration. This configuration specifies the application Git repository
    URL. The Jenkins job will clone this Git repository using the specified Git repository
    URL and build this project. The following screenshot shows the Git configuration:![How
    it works…](img/00116.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build configuration**: This is the most important part of our job configuration.
    It defines what needs to be done. The job configuration is shown in the following
    screenshot. The configuration does the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It downloads the contents from the actual application to the builder application
    using Git and `rsync`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the `force_clean_build` marker is not present, then it also copies the content
    of the `$OPENSHIFT_BUILD_DEPENDENCIES_DIR` and `$OPENSHIFT_DEPENDENCIES_DIR` directories
    from the actual application to the builder application. When the `force_clean_build`
    marker is present, then the dependencies are downloaded again on the builder application,
    and the build will take more time to finish.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, it builds the application using whatever build commands the cartridge
    uses. For Java applications, it will use the `mvn clean install –Popenshift –DskipTests`
    command.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: After the build finishes successfully, it stops the application gear.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Then Jenkins copies the new content from the builder application to the actual
    application using `rsync`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, it starts the application. Have a look at the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How it works…](img/00117.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you don't have Jenkins enabled in your application, then the code is built
    on the same gear on which the application is running. When you push changes to
    your application gear, OpenShift first stops your application, builds the application,
    deploys the artifact, and finally starts the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 8, after adding the Jenkins cartridge to the `jobstore` application,
    you made a change to the source code and pushed changes to the application gear.
    This time, rather than building the project on the application gear, the Jenkins
    server launches a slave and initiates the build. The process is explained in detail
    in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The user makes a change and pushes the changes to the application gear using
    the `git push` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After receiving the bits, a Git action hook is called that notifies the Jenkins
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Jenkins server creates a dedicated Jenkins slave (builder) to build this
    project. You can see the new gear created by Jenkins using the `rhc apps` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Jenkins runs the build using the steps mentioned in the build configuration
    section. After a successful build, the build artifact is copied to the application
    gear using the `rsync` tool, as mentioned in the build configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins starts the application after a successful build and then archives the
    build artifact that you can use later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After 15 minutes of idle time, the Jenkins builder is destroyed and will no
    longer show up in the `rhc apps` command-line output. The build artifacts, however,
    will still exist in Jenkins and can be viewed there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using Jenkins with your OpenShift application has the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No application downtime in case of build failure**: Without Jenkins'' support,
    OpenShift runs the build on the same gear on which your application is running.
    It first stops all the cartridges on the application gear, runs the build, and
    finally deploys the successful build artifact. In the event of build failure,
    the build artifact will not be deployed and your application will have downtime.
    With CI enabled for your application, OpenShift stops the application only after
    the build finishes successfully. This avoids downtime due to build failures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More resources to build your project**: As the Jenkins builders run on separate
    gears, they have additional resources, such as memory and storage, to run your
    application build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Store previous builds**: Jenkins can store your previous successful build
    artifacts for you. You can use these build artifacts if you want to roll back
    to a previous version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins plugins**: Jenkins has a strong and active community that has built
    a variety of plugins to perform various common tasks. You can use these plugins
    to automate various tasks of your application. Throughout this chapter, you will
    install various Jenkins plugins to do various tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can view the logs of your Jenkins server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also enable Jenkins support at application creation time using the
    `--enable-jenkins` option as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will create the Jenkins server application and add the
    Jenkins client to the application. If the Jenkins server application already exists,
    then it only adds the `jenkins` client cartridge to the application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Increasing the slave idle timeout* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Installing Jenkins plugins* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increasing the slave idle timeout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Jenkins master creates slaves to build the project. These slaves remain
    alive only for 15 minutes after building the project, that is, they will be reused
    only if the next build request is received within 15 minutes of finishing the
    first build. If they don't receive the build request in 15 minutes after building
    the project, then the Jenkins master will kill the slave instance. The next build
    request will again create a new slave and build the application on it. Slave creation
    is a time-consuming process and is not ideal during the development cycle, when
    you expect quick feedback from your CI server.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to increase the slave idle timeout so that
    you can reuse the slave for a longer time and get quick feedback from the CI server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a Jenkins-enabled application, as
    discussed in the *Adding Jenkins CI to your application* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Jenkins dashboard, and then go to the Jenkins configuration page
    at `https://jenkins-{domain-name}.rhcloud.com/configure`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Cloud** configuration section, there is a **Slave Idle Time to Live**
    configuration as shown in the following screenshot. The default configuration
    is 15 minutes.![How to do it…](img/00118.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the **Slave Idle Time To Live** value to `60` minutes, and save the configuration
    by clicking on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Jenkins master created by OpenShift comes bundled with a few plugins that
    Jenkins needs to work effectively. You can see all the installed plugins by navigating
    to **Plugin Manager** | **Installed** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The plugin that makes it possible for Jenkins to talk with your OpenShift account
    is **OpenShift Origin Jenkins Cloud Plugin**. This plugin is responsible for managing
    the slave gears that build your application.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the Jenkins plugins have global configuration and job-level configuration.
    Global configuration applies to all the Jenkins jobs, whereas the job-level configuration
    applies only to a particular Jenkins job. You can view the Jenkins global configuration
    by navigating to the **Configure System** screen at `https://jenkins-{domain-name}.rhcloud.com/configure`.
    Many plugins that you will install will also need to be configured here. Jenkins
    dynamically adds new fields when you install the plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The default screen contains a number of sections to configure either a general,
    system-wide parameter or various plugin configurations. The OpenShift Jenkins
    plugin adds the **OpenShift Cloud** subsection under the **Cloud** section. This
    configuration is used to talk with your OpenShift account and create slaves required
    to build your application.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding steps, you increased the slave idle timeout to 60 minutes in
    the OpenShift **Cloud** configuration section. This is the maximum slave idle
    timeout that you can assign to the slave. The next slave that Jenkins will create
    will use this configuration and will be alive for 60 minutes after building the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding Jenkins CI to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Installing Jenkins plugins* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Jenkins plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The extensible architecture of Jenkins makes it very powerful. There are third-party
    plugins that enable you to add extra features to your Jenkins instance. These
    features enable you to work with different SCM tools, such as Git, to generate
    code quality and code coverage reports, or to automate other manual tasks, such
    as database schema migration, and so on. In this recipe, you will learn how you
    can install the Green Balls plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Green+Balls](https://wiki.jenkins-ci.org/display/JENKINS/Green+Balls))
    to your OpenShift Jenkins instance. The Green Balls plugin makes Jenkins use green
    balls instead of blue balls for successful builds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes you already have a Jenkins-enabled application, as discussed
    in the *Adding Jenkins CI to your application* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to install a plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your OpenShift Jenkins dashboard and go to the **Manage Jenkins**
    screen at `https://jenkins-{domain-name}.rhcloud.com/manage`. The **Manage Jenkins**
    screen is a central place where you can configure all the aspects of the Jenkins
    system configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Manage Plugins** to work with Jenkins plugins. You can install,
    remove, or update plugins through the **Manage Plugins** screen. Have a look at
    the following screenshot:![How to do it…](img/00120.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Manage Plugins** screen is divided into four tabs: **Updates**, **Available**,
    **Installed**, and **Advanced**, as shown in the following screenshot:![How to
    do it…](img/00121.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Updates** tab shows all the installed plugins that have updates, the **Available**
    tab shows all the plugins that you can install on your Jenkins instance, the **Installed**
    tab shows all the plugins that are already installed on your Jenkins instance,
    and the **Advanced** tab allows you to manually install the plugin or force Jenkins
    to check for updates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All the Jenkins plugins available in the Jenkins plugin registry are shown in
    the **Available** tab. If you click on the **Available** tab, you will find that
    the list is empty. To enable Jenkins to show plugins under the **Available** tab,
    navigate to **Manage Plugins** | **Advanced**, and click on the **Check Now**
    button, as shown in the following screenshot, to forcefully check for new updates:![How
    to do it…](img/00122.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, you will see a list of plugins available under the **Available**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To install the Green Balls plugin, filter the available plugins, and then click
    on **Install without restart**. Have a look at the following screenshot:![How
    to do it…](img/00123.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the plugin is installed, you will see the Green Balls plugin in action.
    Please clean your browser cache if you still see blue balls.![How to do it…](img/00124.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding steps, you installed the Green Balls plugin to your OpenShift
    Jenkins instance. The Green Balls plugin does what it says: it makes successful
    builds display as green balls instead of the default blue balls.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of ways to install plugins to your Jenkins instance. You
    can either use the automatic method or the manual method. In the preceding steps,
    you used the automatic method to install the plugins. The automatic method works
    for plugins that are listed in the Jenkins central plugins registry available
    at [http://updates.jenkins-ci.org/download/plugins/](http://updates.jenkins-ci.org/download/plugins/).
    The plugins that are not available in the central plugin registry need to be installed
    manually. To install a plugin manually, navigate to **Manage Jenkins** | **Manage
    Plugins** | **Advance**. In the **Advanced** tab, there is a section called **Upload
    Plugin** that you can use to upload your plugin. Click on the **Choose File**
    button, select the plugin from your local machine, and then click on the **Upload**
    button to upload the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The manually installed plugins are not installed until you restart Jenkins.
    So, once the plugin is uploaded, restart Jenkins by going to `https://jenkins-{domain-name}.rhcloud.com/safeRestart`.
    This will restart Jenkins after the current builds have been completed and will
    install your plugin.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding Jenkins CI to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Jenkins to build projects hosted on GitHub* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Jenkins to build projects hosted on GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the OpenShift Jenkins instance to build your non-OpenShift projects
    as well. This recipe will use a Maven-based project publicly hosted on GitHub
    at [https://github.com/OpenShift-Cookbook/chapter10-demo-app](https://github.com/OpenShift-Cookbook/chapter10-demo-app).
    The goal of this recipe is to build the project whenever you push code to the
    GitHub repository and send an e-mail in case the build status changes, that is,
    the build fails or recovers from a build failure. This is the first step an organization
    takes when they try to introduce CI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a Jenkins-enabled application, as
    discussed in the *Adding Jenkins CI to your application* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to learn how to build projects hosted on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the Jenkins master to build the project. Go to `https://jenkins-{domain-name}.rhcloud.com/configure`,
    and update the **# of executors** property to `1`. Any number greater than `0`
    will allow the master to run build jobs. Also, change the **Usage** field value
    to **Leave this machine for tied jobs only**. This configuration will make sure
    that the master instance is only used for the job explicitly configured to run
    on the master. Later in the job configuration, you will configure a job to run
    only on the master. Click on the **Save** button to save the new values:![How
    to do it…](img/00126.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the goals of this recipe is to send e-mails when the project becomes
    unstable. To allow Jenkins to send an e-mail, you have to provide e-mail settings
    in the **E-mail Notification** section under the Jenkins **Configure System**
    screen. Click on the **Advanced** tab to see all the configuration options. The
    configuration shown in the following screenshot uses Gmail to send e-mails. Gmail
    is shown just for demonstration here. Google might send you an e-mail stating
    that someone is hacking your account, as your account is accessed from a different
    location than it is usually used. Ideally, you should use your organization SMTP
    server configuration.![How to do it…](img/00127.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also send a test e-mail to check the configuration. Check the **Test**
    configuration by sending a test e-mail checkbox and providing it with the e-mail
    address you want to send an e-mail to. You will receive an e-mail like the one
    shown in the following screenshot:![How to do it…](img/00128.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One thing that you will find annoying in the preceding screenshot is that the
    address is not configured yet in the from section of the e-mail. You can configure
    it to something else by updating the value of the **System Admin e-mail address**
    property from **address not configured yet** to something user friendly, as shown
    in the following screenshot. After making this change, the notification e-mails
    from Jenkins will be sent with this address in the from header.![How to do it…](img/00129.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fork the GitHub repository ([https://github.com/OpenShift-Cookbook/chapter10-demo-app](https://github.com/OpenShift-Cookbook/chapter10-demo-app))
    by clicking on the **Fork** button. You need to log in to GitHub with a valid
    account before you can fork this repository. You have to fork this repository
    so that you can push your changes to the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your Jenkins dashboard, and click on **New Job**. Have a look at the following
    screenshot:![How to do it…](img/00130.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Build a free-style software project** build type, and give it a
    name, `chapter10-github-recipe-build`, as shown in the following screenshot. Click
    on **OK** to create the job.![How to do it…](img/00131.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will be shown the job configuration page where you can configure this
    job. The first configuration that you will update is under the **Source Code Management**
    section. As the project is hosted on GitHub, enter the URL of the GitHub repository
    that you want to build. The GitHub repository URL will be `https://github.com/<username>/chapter10-demo-app.git`.
    The username corresponds to your GitHub username. The following screenshot shows
    the **Source Code Management** section:![How to do it…](img/00132.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you have to configure when this build should get triggered. This is configured
    under the **Build Triggers** section. In the configuration shown in the following
    screenshot, you told Jenkins to poll SCM every minute. It uses the same syntax
    as `crontab` on Unix/Linux.![How to do it…](img/00133.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the Jenkins job knows from where and how often to get the source code,
    the next step is to tell the job what to do with the source code. This is achieved
    by defining the build steps. A job can have one or more build steps. To add a
    new build step, click on the **Add build step** dropdown, and select **Execute
    shell**, as shown in the following screenshot:![How to do it…](img/00134.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will render a text area where you can enter the command you want to run.
    Enter the `mvn clean install` command in the text area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next configuration that you can optionally specify in your job is what to
    do after building your project. This is defined by creating one or more post-build
    actions. Let's add an action that will send an e-mail when the build becomes unstable.
    Click on the **Add post-build action** drop-down list, and then select **E-mail
    notification**. In the **Recipients** textbox, provide a whitespace-separated
    list of e-mail IDs that you want to send an e-mail to in the event of a build
    failure, as shown in the following screenshot:![How to do it…](img/00135.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last configuration left before you can save this job is to configure it
    to run on the master node. This is done by checking the **Restrict where this
    project can be run** checkbox and then giving it the name of the node that should
    be used to build the project, as shown in the following screenshot:![How to do
    it…](img/00136.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, save the configuration by clicking on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test the new Jenkins job, first clone the project on your local machine.
    To clone the project, use the following command. Please replace the username with
    your GitHub account username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test whether the job is working correctly, let's change one of the test cases
    so that it fails. Update the `MessageRepositoryTest` assertion from `assertEquals(1,
    messages.size());` to `assertEquals(2, messages.size());`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Commit the code, and push the changes to your GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Jenkins will pick the change and start a new build. The build will fail, and
    you will receive an e-mail with the job logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s fix the build failure by reverting the change from `assertEquals(2,
    messages.size());` to `assertEquals(1, messages.size());`. Then run the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, Jenkins will pick the change and start a new build. This time, you will
    receive an e-mail saying that the build is back to normal, as shown in the following
    screenshot:![How to do it…](img/00137.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You created a freestyle Jenkins job that will poll Jenkins every minute and,
    if it detects a new commit, it will build the project. In step 1, you updated
    the Jenkins master configuration so that it can run build jobs. By default, the
    Jenkins master is not configured to run any builds. Setting the number of executors
    to `1` in the Jenkins system configuration enables the Jenkins master to run builds.
    The number of executors lets you define how many concurrent builds a Jenkins instance
    can perform.
  prefs: []
  type: TYPE_NORMAL
- en: E-mail is one of the most popular ways of communication. In step 2, you configured
    Jenkins to send an e-mail using the Gmail SMTP settings. You can send 99 e-mails
    per day using the Gmail SMTP server, which is fine for most individual projects,
    but for your organization projects, you should use your organization SMTP server.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe requires you to have your own Git repository that will be polled
    by Jenkins. This is required so that you can push changes to your Git repository,
    as you can't push changes to the Git repository of another person unless you are
    added as a collaborator. You forked the repository in step 3 so that you have
    your own copy of this repository that you can work with.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, you created a new Jenkins job that will be used to build the project
    you forked in step 3\. You used a freestyle build job, as it is the most flexible
    build option that you can use to build any type of project.
  prefs: []
  type: TYPE_NORMAL
- en: From steps 5 through step 9, you configured the job so that Jenkins polls the
    Git repository every minute and uses the Jenkins master to build the project.
    After saving the job in step 10, you will see your new job listed in the Jenkins
    dashboard. Jenkins will automatically run the build for the first time, as it
    does not have any history for this job. After running the job for the first time,
    Jenkins will wait for the changes in your Git repository before it starts another
    build.
  prefs: []
  type: TYPE_NORMAL
- en: Once the job was configured, you tested the Jenkins job in steps 11 through
    15 by making a change to your local repository and pushing the change to GitHub.
    Jenkins will poll the Git repository in the next one minute, detect the change,
    and start the build.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Jenkins workflow for your OpenShift applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will create a Jenkins workflow that you could use to build
    and deploy applications on OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will cover all the steps from the start to make sure you have all
    the three gears available.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a Jenkins workflow for your OpenShift
    applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Jenkins server application by running the following command. This
    was covered in detail in the *Adding Jenkins CI to your application* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an OpenShift Apache Tomcat 7 application that will be used to deploy
    the project. The project will be created with the `--no-git` option, as we do
    not want to clone the repository, because the code will be hosted on GitHub. The
    `--enable-jenkins` option will create a new Jenkins job that will build and deploy
    the application on OpenShift:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Log in to your Jenkins dashboard, and you will see the **forumapp-build** job
    listed on the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Jenkins job with the name `forumapp-github-build` by following
    the steps mentioned in the *Using Jenkins to build projects hosted on GitHub*
    recipe. Once the job is created, any change pushed to your GitHub repository will
    result in a Jenkins build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, install the Jenkins Cobertura plugin by following the instructions mentioned
    in the *Installing Jenkins plugins* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the plugin is installed, create another job with the name `forumapp-quality-build`.
    But, rather than creating a job from the start, you can use the `forumapp-github-build`
    job as a template. After entering the details, click on **OK**:![How to do it…](img/00138.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be directed to the `forumapp-quality-build` job configuration page.
    Update the following configuration values to suit this job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Restrict this project can be run** value from `master` to `forumapp-build`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck **Poll SCM** under the **Build Triggers** section.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Execute Shell** command from `mvn clean install` to `mvn clean
    package -Pquality`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you need to add two post-build actions to `forumapp-quality-build`, first
    to kick the `forumapp-build` job that will deploy the application to OpenShift
    and, second, publish the Cobertura code coverage report. Add the post-build action
    to trigger `forumapp-build` when the build succeeds. To add the Cobertura code
    coverage post-build action, click on the **Add post-build action hook** option,
    select **Publish Cobertura Coverage Report**, and provide `**/ target/site/cobertura/coverage.xml`
    for the **Cobertura xml report pattern** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After updating the `forumapp-quality-build` job configuration, click on the
    **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the responsibilities of `forumapp-github-build` is to start the `forumapp-quality-build`
    job after it has been completed successfully. Update the `forumapp-github-build`
    job configuration by adding a post-build action. Add the **Build other projects**
    post-build action to build `forumapp-github-build` when the build is successful.
    Click on the **Save** button after adding the post-build action:![How to do it…](img/00139.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you have configured the `forumapp-github-build` and `forumapp-quality-build`
    jobs, you need to update the `forumapp-build` job configuration to pull the code
    from the GitHub repository and deploy the latest code to OpenShift. Go to `https://jenkins-{domain-name}.rhcloud.com/job/forumapp-build/configure`,
    and add a new **Execute Shell** build step. This build step will first add a Git
    remote to the GitHub repository and then pull code from the GitHub repository.
    This is shown in the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please replace the username with your GitHub account username. Also, make sure
    that the order of the build action hooks is the same as the order shown in the
    following screenshot:![How to do it…](img/00140.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button to save the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, to test whether all our jobs are configured properly, go to the Jenkins
    dashboard and manually start the `forumapp-github-build` job. Instead of manually
    starting the job, you could also make a change to the application source and push
    the change to the GitHub repository. Jenkins will detect the change and start
    the build process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After all the builds are successfully completed, you will see all the builds
    in a healthy state on the Jenkins dashboard, as shown in the following screenshot:![How
    to do it…](img/00141.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To view the code coverage of your project, go to the **forumapp-quality-build**
    page, and click on **Coverage Report** to see the code coverage of your project:![How
    to do it…](img/00142.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding steps, you created a simple workflow with three Jenkins jobs,
    each responsible for a specific task. The first job polls the GitHub repository
    at a specified interval for code changes and then builds the project when the
    changes are found. This job builds the project and runs its unit tests. It used
    the Jenkins master to build the project. The advantage of using Jenkins for light
    jobs like this is that you don't have to wait for the slave creation. You should
    only use the master for jobs that are light in nature; otherwise, the Jenkins
    master might go down.
  prefs: []
  type: TYPE_NORMAL
- en: The first build, if successful, starts the quality job that runs the code coverage
    over the application code. This build uses Cobertura ([http://cobertura.github.io/cobertura/](http://cobertura.github.io/cobertura/))
    to identify the parts of the Java application that lack test coverage. The quality
    build was configured to execute the `mvn clean install -Pquality` command. This
    command will run the Maven Cobertura plugin. The Maven plugin will generate both
    HTML and XML reports. The XML report is used by Jenkins to parse the coverage
    results. The quality build will use the Jenkins slave instead of the master, as
    a quality build usually tends to be memory- and CPU-intensive, and you will not
    like the master going down because of one job.
  prefs: []
  type: TYPE_NORMAL
- en: On successful completion of the quality build, the third Jenkins job will deploy
    the application to OpenShift. This job will also use the Jenkins slave.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Upgrading Jenkins to the latest version* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading Jenkins to the latest version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Jenkins application created by OpenShift runs an old version of Jenkins.
    At the time of this writing, the Jenkins application created by OpenShift runs
    the 1.509.1 Version. This version is quite old, and some Jenkins plugins do not
    work with this version. In this recipe, you will learn how to upgrade Jenkins
    to the latest version. The latest version of Jenkins at the time of this writing
    is 1.567.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe is experimental, and I don't recommend that people use it for their
    production Jenkins instances. The aim of this recipe is to show that it is feasible
    to upgrade the Jenkins version. This might result in build data loss or a break
    in the Jenkins instance. So, use this recipe in your test environments first.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes you already have a Jenkins-enabled application, as discussed
    in the *Adding Jenkins CI to your application* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to upgrade the Jenkins version:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new command-line terminal, and SSH into your Jenkins application by
    running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new directory called `jenkins-latest-version` inside `$OPENSHIFT_DATA_DIR`,
    and download the latest Jenkins WAR file using `wget` by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Exit the SSH session by typing the `exit` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create two environment variables by running the following command. Please replace
    `$OPENSHIFT_DATA_DIR` with your Jenkins application''s `$OPENSHIFT_DATA_DIR` environment
    variable value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the Jenkins plugin manager, and uninstall the OpenShift Jenkins plugin.
    Restart Jenkins after uninstalling the plugin for the changes to take effect.
    You can restart Jenkins by going to the `https://jenkins-{domain-name}.rhcloud.com/safeRestart`
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the Jenkins restart, you will see the latest version of Jenkins running,
    as shown in the following screenshot:![How to do it…](img/00143.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default OpenShift plugin installed with the Jenkins installation does not
    work with the latest version of Jenkins. You have to build the latest OpenShift
    Jenkins plugin from source. The source code is available on GitHub at [https://github.com/openshift/jenkins-cloud-plugin](https://github.com/openshift/jenkins-cloud-plugin).
    I have packaged the latest version and made it available at [https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin](https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin).
    Download the latest plugin from [https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin/raw/master/openshift.hpi](https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin/raw/master/openshift.hpi)
    to a convenient location on your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the plugin manually by going to the plugin manager **Advanced** tab
    and uploading the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart Jenkins so that the plugin gets installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Jenkins system configuration, add a new OpenShift cloud, and click
    on **Save**. Have a look at the following screenshot:![How to do it…](img/00144.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Plugin Manager** (`https://jenkins-{domain-name}.rhcloud.com/pluginManager/`),
    and update all the installed plugins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, to test whether all of your existing jobs are working fine, start an
    existing job manually. If you followed the last recipe, then you will already
    have three Jenkins jobs listed on the Jenkins dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenShift Jenkins cartridge allows a user to upgrade the Jenkins version
    by defining an environment variable, `JENKINS_WAR_PATH`. If this environment variable
    were used, then the OpenShift Jenkins cartridge will use the Jenkins `war` file
    located at this path. From step 1 through step 4, you first downloaded the latest
    version of Jenkins WAR and then created the `JENKINS_WAR_PATH` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: You also created another environment variable called `JENKINS_JAR_CACHE_PATH`.
    This is required with Jenkins Version 1.540 or higher. The reason you need to
    set this environment variable is that if you don't set this environment variable,
    then Jenkins will try to cache the plugin in the user home directory at `~/.jenkins/cache/jars`.
    In OpenShift, you can only write to the `$OPENSHIFT_DATA_DIR` directory. This
    environment variable makes sure that JARs are cached in a writable directory;
    otherwise, your build will fail.
  prefs: []
  type: TYPE_NORMAL
- en: After setting the environment variables, you restarted Jenkins so that the new
    environment variables are picked up by Jenkins. You will now see the latest Jenkins
    version running.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding Jenkins CI to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
