- en: Puppet Server and Agents
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet 服务器和代理
- en: So far, you have dealt with some concise Puppet manifests that were built to
    model some very specific goals. By means of the `puppet apply` command, you can
    use such snippets on any machine in your infrastructure. This is not the most
    common way of using Puppet, though, and this chapter will introduce you to the
    popular server/agent structure. It's worth noting, however, that applying standalone
    manifests that are independent of your overall Puppet design can always be useful.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你处理了一些简明的 Puppet 清单，这些清单被构建来模拟一些非常具体的目标。通过 `puppet apply` 命令，你可以在基础设施中的任何机器上使用这些片段。然而，这并不是使用
    Puppet 的最常见方式，本章将介绍流行的服务器/代理结构。不过，值得注意的是，应用与整体 Puppet 设计无关的独立清单仍然是很有用的。
- en: Under the server/agent paradigm, you will typically install the Puppet agent
    software on all nodes under your care and make them call the server, which is
    yet another Puppet installation. The server will compile the appropriate manifests
    and effectively remotely control the agents. Both the agent and the server authenticate
    themselves using trusted SSL certificates.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器/代理范式下，通常会在你管理的所有节点上安装 Puppet 代理软件，并使它们调用服务器，而服务器本身也是一个 Puppet 安装。服务器将编译适当的清单，并有效地远程控制代理。代理和服务器都会使用受信任的
    SSL 证书进行身份验证。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下内容：
- en: The Puppet server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet 服务器
- en: Setting up the Puppet agent
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Puppet 代理
- en: Performance optimizations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能优化
- en: Completing the stack with PuppetDB
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PuppetDB 完善堆栈
- en: The Puppet CA
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet CA
- en: The Puppet server
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet 服务器
- en: Many Puppet-based workflows are centered on the server, which is the central
    source of configuration data and authority. The server hands instructions to all
    the computer systems in the infrastructure (where agents are installed). It serves
    multiple purposes in the distributed system of Puppet components.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多基于 Puppet 的工作流集中在服务器上，服务器是配置数据和权限的中央源。服务器将指令发送到基础架构中的所有计算机系统（代理已安装的地方）。它在
    Puppet 组件的分布式系统中起着多重作用。
- en: 'The server will perform the following tasks:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将执行以下任务：
- en: Storing manifests and compiling catalogs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储清单并编译目录
- en: Serving as the SSL certification authority
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为 SSL 证书颁发机构
- en: Processing reports from the agent machines
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理来自代理机器的报告
- en: Gathering and storing information about the agents
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集并存储有关代理的信息
- en: As such, the security of your server machine is paramount. The requirements
    for hardening are comparable to those of a Kerberos key distribution center.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，服务器机器的安全性至关重要。其加固要求与 Kerberos 密钥分发中心的要求类似。
- en: During its first initialization, the Puppet server generates the CA certificate.
    This self-signed certificate will be distributed among and trusted by all the
    components of your infrastructure. This is why its private key must be protected
    very carefully. New agent machines request individual certificates, which are
    signed with the CA certificate.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次初始化时，Puppet 服务器会生成 CA 证书。这个自签名证书将被分发到你的基础设施中的所有组件，并被信任。因此，它的私钥必须非常小心地保护。新的代理机器请求个人证书，这些证书会使用
    CA 证书进行签名。
- en: It's a good idea to include a copy of the CA certificate in your OS-provisioning
    process so that the agent can establish the authenticity of the master before
    requesting its individual certificate.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作系统提供过程中包含 CA 证书的副本是个好主意，这样代理在请求其个人证书之前就能验证主服务器的真实性。
- en: The terminology around the master software might be a little confusing. That's
    because both the terms **Puppet master** and **Puppet server** are floating around,
    and they are closely related too. Let's consider some technological background
    in order to give you a better understanding of what is what.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于主服务器软件的术语可能有些令人困惑。因为**Puppet master**和**Puppet server**这两个术语都有出现，而且它们之间也有密切关系。为了帮助你更好地理解，我们来了解一些技术背景。
- en: Puppet's master service mainly comprises a RESTful HTTP API. Agents initiate
    the HTTPS transactions, with both sides identifying each other using trusted SSL
    certificates. During the time when Puppet 3 and older versions were the most advanced
    versions available, the HTTPS layer was typically handled by Apache. Puppet's
    Ruby core was invoked through the `Passenger` module. This approach offered good
    stability and scalability.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet的主服务主要由RESTful HTTP API组成。代理启动HTTPS事务，双方通过受信任的SSL证书相互识别。在Puppet 3及更早版本为最先进版本时，HTTPS层通常由Apache处理。Puppet的Ruby核心通过`Passenger`模块调用。这种方式提供了良好的稳定性和可扩展性。
- en: Puppet Inc. has improved upon this standard solution with specialized software
    called `puppetserver`. The Ruby-based core of the master remains basically unchanged,
    although it now runs on JRuby instead of Ruby's own MRI. The HTTPS layer is run
    by Jetty, sharing the same Java virtual machine with the master.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet Inc.通过名为`puppetserver`的专用软件改进了这一标准解决方案。主服务器的Ruby核心基本保持不变，尽管它现在运行在JRuby上，而不是Ruby的原生MRI。HTTPS层由Jetty运行，与主服务器共享同一个Java虚拟机。
- en: By cutting out some middlemen, `puppetserver` is faster and more scalable than
    a Passenger solution. It is also significantly easier to set up.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过去除一些中间层，`puppetserver`比Passenger解决方案更快且具有更好的可扩展性，而且配置起来也显著更简单。
- en: Setting up the server machine
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置服务器机器
- en: Getting the `puppetserver` software onto a Linux machine is just as simple as
    the agent package (which you did at the very beginning of [Chapter 1](8a22dc0e-3fe2-4153-b60e-935b7e6d9f94.xhtml),
    *Writing Your First Manifests*). Packages are available on Red Hat Enterprise
    Linux and its derivatives, Debian and Ubuntu, and any other operating system that
    is supported to run a Puppet server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将`puppetserver`软件安装到Linux机器上与安装代理包一样简单（正如您在[第1章](8a22dc0e-3fe2-4153-b60e-935b7e6d9f94.xhtml)中所做的那样，*编写您的第一个清单*）。这些包适用于Red
    Hat Enterprise Linux及其衍生版、Debian和Ubuntu，以及任何支持运行Puppet服务器的操作系统。
- en: Until now, the Puppet server must run on a Linux-based operating system, and
    cannot run on Windows or any other Unix. A great way to get Puppet Inc. packages
    on any platform is the Puppet Collection. Shortly after the release of Puppet
    4, Puppet Inc. created this new way of supplying software. This can be considered
    as a distribution in its own right. Unlike Linux distributions, it does not contain
    a Kernel, system tools, or libraries. Instead, it comprises various software from
    the Puppet ecosystem. Software versions that are available from the same Puppet
    collection are guaranteed to work well together.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Puppet服务器必须运行在基于Linux的操作系统上，无法在Windows或其他Unix系统上运行。将Puppet Inc.的软件包获取到任何平台的一个好方法是Puppet集合。在Puppet
    4发布后不久，Puppet Inc.创建了这种新的软件供应方式。这可以视为一个独立的发行版。与Linux发行版不同，它不包含内核、系统工具或库，而是包含Puppet生态系统中的各种软件。从同一Puppet集合中提供的软件版本保证能够良好兼容。
- en: 'Use the following commands to install `puppetserver` from the first **Puppet
    Collection** (**PC1**) on a Debian 8 machine (the collection for Debian 9 has
    not yet received a `puppetserver` package at the time of writing this):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在Debian 8机器上从第一个**Puppet集合**（**PC1**）安装`puppetserver`（截至本文编写时，Debian 9的集合尚未包含`puppetserver`包）：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `puppetserver` package comprises only the Jetty server and the Clojure API,
    but the all-in-one `puppet-agent` package is pulled in as a dependency.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`puppetserver`包仅包含Jetty服务器和Clojure API，但所有功能合一的`puppet-agent`包作为依赖被拉取。'
- en: The package name, `puppet-agent`, is misleading. This AIO package contains all
    the parts of Puppet, including the master core, a vendored Ruby build, and several
    pieces of additional software.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 包名`puppet-agent`具有误导性。这个AIO包包含了Puppet的所有部分，包括主核心、一个定制的Ruby构建和几个附加软件组件。
- en: Specifically, you can use the `puppet` command on the master node. You will
    soon learn how this is useful. However, when using the packages from Puppet Labs,
    everything gets installed under `/opt/puppetlabs`. It is advisable to make sure
    that your `PATH` variable always includes the `/opt/puppetlabs/bin` directory
    so that the `puppet` command is found here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，您可以在主节点上使用`puppet`命令。很快您将了解到这如何派上用场。然而，当使用Puppet Labs的包时，所有内容都会安装在`/opt/puppetlabs`目录下。建议确保您的`PATH`变量始终包括`/opt/puppetlabs/bin`目录，以便能够找到`puppet`命令。
- en: 'Regardless of this, once the `puppetserver` package is installed, you can start
    the master service:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，一旦`puppetserver`包安装完成，您可以启动主服务：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Depending on the power of your machine, the startup can take a few minutes.
    Once initialization completes, the server will operate very smoothly, though.
    As soon as the master port `8140` is open, your Puppet master is ready to serve
    requests.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的机器性能，启动过程可能需要几分钟。一旦初始化完成，服务器将非常流畅地运行。只要主控端端口`8140`开放，你的Puppet主控端就准备好服务请求。
- en: 'If the service fails to start, there might be an issue with certificate generation
    (we observed such issues with some versions of the software). Check the log file
    at `/var/log/puppetlabs/puppetserver/puppetserver-daemon.log`. If it indicates
    that there are problems while looking up its certificate file, you can work around
    the problem by temporarily running a standalone master as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务未能启动，可能是证书生成出现问题（我们在某些软件版本中观察到过此类问题）。检查`/var/log/puppetlabs/puppetserver/puppetserver-daemon.log`日志文件。如果日志显示在查找证书文件时出现问题，你可以通过临时运行独立的主控端来规避问题，方法如下：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After initialization, you can stop this process. The certificate is available
    now, and `puppetserver` should now be able to start as well.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化后，你可以停止该进程。现在证书已可用，`puppetserver`应该也能够启动。
- en: Another reason for start failures is an insufficient amount of memory. The Puppet
    server process needs 2 GB of memory.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 启动失败的另一个原因可能是内存不足。Puppet服务器进程需要2 GB的内存。
- en: Creating the master manifest
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主控端清单
- en: When you used Puppet locally in [Chapter 1](8a22dc0e-3fe2-4153-b60e-935b7e6d9f94.xhtml),
    *Writing Your First Manifests*, you specified a manifest file that `puppet apply`
    should compile. The master compiles manifests for many machines, but the agent
    does not get to choose which source file is to be used; this is completely at
    the master's discretion. The starting point for any compilation by the master
    is always the site manifest, which can be found in `/opt/puppetlabs/code/environments/production/manifests/`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在[第1章](8a22dc0e-3fe2-4153-b60e-935b7e6d9f94.xhtml)《编写你的第一个清单》一节中本地使用Puppet时，你指定了一个清单文件，`puppet
    apply`应该编译该文件。主控端为多台机器编译清单，但代理无法选择使用哪个源文件；这完全由主控端决定。主控端任何编译的起点始终是站点清单，位于`/opt/puppetlabs/code/environments/production/manifests/`。
- en: The significance of the environments/production part will be investigated in
    [Chapter 5](3217a4c2-135e-46b4-bcf2-eef9ddce9991.xhtml), *Combining Classes, Configuration
    Files, and Extensions into Modules*. In Puppet versions before 4.0, the site manifest
    is at another location, `/etc/puppet/manifests/site.pp`, and comprises just one
    file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`environments/production`部分的重要性将在[第5章](3217a4c2-135e-46b4-bcf2-eef9ddce9991.xhtml)《将类、配置文件和扩展整合为模块》一节中探讨。在4.0版本之前的Puppet中，站点清单位于另一个位置`/etc/puppet/manifests/site.pp`，并且只包含一个文件。'
- en: 'Each connecting agent will use all the manifests found here. Of course, you
    don''t want to manage only one identical set of resources on all your machines.
    To define a piece of manifest exclusively for a specific agent, put it in a `node`
    block. This block''s contents will only be considered when the calling agent has
    a matching common name in its SSL certificate. You can dedicate a piece of the
    manifest to a machine with the name of `agent`, for example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每个连接的代理将使用此处找到的所有清单。当然，你不希望在所有机器上只管理一套相同的资源。为了专门为某个特定代理定义一份清单，可以将其放入`node`区块中。此区块的内容只有在调用代理的SSL证书中有匹配的通用名称时才会被考虑。你可以为名为`agent`的机器专门定义一部分清单，例如：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The given example does not show best practice for node classification. It is
    merely used as an example. We will show the modern best practice node classification
    in [Chapter 9](0a0cf4b0-23fa-48fd-abf9-77ed851bb581.xhtml), *Puppet Roles and
    Profiles*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 给出的示例并没有展示最佳的节点分类实践，仅作为示例使用。我们将在[第9章](0a0cf4b0-23fa-48fd-abf9-77ed851bb581.xhtml)《Puppet角色与配置文件》一节中展示现代最佳的节点分类实践。
- en: Before you set up and connect your first agent to the master, step back and
    think about how the master should be addressed. By default, agents will try to
    resolve the unqualified `puppet` hostname in order to get the master's address.
    If you have a default domain that is being searched by your machines, you can
    use this as a default and add a record for `puppet` as a subdomain (such as `puppet.example.net`).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置并连接第一个代理到主控端之前，先退后一步，思考主控端应如何进行地址解析。默认情况下，代理会尝试解析未限定的`puppet`主机名，以获取主控端的地址。如果你的机器正在搜索默认域名，你可以将其用作默认域名，并为`puppet`添加一个记录作为子域名（例如`puppet.example.net`）。
- en: 'Otherwise, pick a domain name that seems fitting to you, such as `master.example.net`
    or `adm01.example.net`. What''s important is the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，选择一个适合你的域名，比如`master.example.net`或`adm01.example.net`。关键点在于：
- en: All your agent machines can resolve the name to an address
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有你的代理机器都能将名称解析为地址
- en: The master process is listening for connections on that address
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主控进程正在监听该地址上的连接
- en: The master uses a certificate with the chosen name as CN or DNS Alt Names
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主控使用选择的证书名称作为CN或DNS Alt Names
- en: The mode of resolution depends on your circumstances; the `hosts` file on each
    machine is one ubiquitous possibility. The Puppet server listens on all the available
    addresses by default.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 解析模式取决于你的情况；每台机器上的`hosts`文件是一个常见的选择。Puppet服务器默认会监听所有可用的地址。
- en: 'This leaves the task of creating a suitable certificate, which is simple. Configure
    the master to use the appropriate certificate name and restart the service. If
    the certificate does not exist yet, Puppet will take the necessary steps to create
    it. Put the following setting into your `/etc/puppetlabs/puppet/puppet.conf` file
    on the master machine:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这就剩下了创建合适证书的任务，这非常简单。配置主控端使用合适的证书名称并重启服务。如果证书尚不存在，Puppet会采取必要的步骤来创建它。将以下设置放入主控机的`/etc/puppetlabs/puppet/puppet.conf`文件中：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In Puppet versions earlier than 4.0, the default location for the configuration
    file is `/etc/puppet/puppet.conf`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Puppet 4.0之前的版本中，配置文件的默认位置是`/etc/puppet/puppet.conf`。
- en: Upon its next start, the master will use the appropriate certificate for all
    SSL connections. The automatic proliferation of SSL data is not dangerous, even
    in an existing setup, except for the certification authority. If the master were
    to generate a new CA certificate at any point in time, it would break the trust
    of all existing agents.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下次启动时，主控端将为所有SSL连接使用合适的证书。即使在现有设置下，SSL数据的自动传播也不危险，唯一的例外是认证机构。如果主控端在任何时间生成新的CA证书，它将破坏所有现有代理的信任。
- en: Make sure that the CA data is neither lost nor compromised. All previously signed
    certificates become obsolete whenever Puppet needs to create a new certification
    authority. The default storage location is `/etc/puppetlabs/puppet/ssl/ca` for
    Puppet 4.0 and higher, and `/var/lib/puppet/ssl/ca` for older versions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 确保CA数据不会丢失或被泄露。每当Puppet需要创建新的认证机构时，所有先前签署的证书都会变得无效。Puppet 4.0及更高版本的默认存储位置为`/etc/puppetlabs/puppet/ssl/ca`，较早版本的默认存储位置为`/var/lib/puppet/ssl/ca`。
- en: Inspecting the configuration settings
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查配置设置
- en: 'All the customization of the master''s parameters can be made in the `puppet.conf`
    file. The operating system packages ship with some settings that are deemed sensible
    by the respective maintainers. Apart from these explicit settings, Puppet relies
    on defaults that are either built-in or derived from the environment (details
    on how this works follow in the [Chapter 3](be2d7b8b-9ea8-4459-b415-081e77db07c7.xhtml),
    *A Peek into the Ruby Part of Puppet - Facts, Types, and Providers*):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主控参数的自定义都可以在`puppet.conf`文件中进行。操作系统包带有一些由相应维护者认为合适的设置。除了这些显式设置外，Puppet还依赖于内建的或从环境中派生的默认设置（关于如何运作的细节，请参见[第3章](be2d7b8b-9ea8-4459-b415-081e77db07c7.xhtml)，*Puppet的Ruby部分探秘
    - Facts、Types和Providers*）：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Most users will want to rely on these defaults for as many settings as possible.
    This is possible without any drawbacks because Puppet makes all settings fully
    transparent using the `--configprint` parameter. For example, you can find out
    where the master manifest files are located.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用户会希望尽可能依赖这些默认设置。这是可行的且没有任何缺点，因为Puppet通过`--configprint`参数使所有设置完全透明。例如，你可以找出主控端清单文件的位置。
- en: 'To get an overview of all available settings and their values, use the following
    command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有可用设置及其值，请使用以下命令：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: While this command is especially useful on the master side, the same introspection
    is available for `puppet apply` and `puppet agent`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个命令在主控端尤其有用，但相同的自省功能也适用于`puppet apply`和`puppet agent`。
- en: 'Setting specific configuration entries is possible with the `puppet config`
    command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`puppet config`命令设置特定的配置项：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting up the Puppet agent
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Puppet代理
- en: As was explained earlier, the master mainly serves instructions to agents in
    the form of catalogs that are compiled from the manifest. You have also prepared
    a `node` block for your first agent in the master manifest.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，主节点主要通过从清单编译而来的目录为代理提供指令。你也已经为你的第一个代理在主节点清单中准备了一个 `node` 块。
- en: Installing the agent software is easy; you did this at the start of [Chapter
    1](8a22dc0e-3fe2-4153-b60e-935b7e6d9f94.xhtml), *Writing Your First Manifests*.
    The plain Puppet package that allows you to apply a local manifest contains all
    the required parts in order to operate a proper agent.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 安装代理软件很简单；你在[第1章](8a22dc0e-3fe2-4153-b60e-935b7e6d9f94.xhtml)开始时就做过这件事，*编写你的第一个清单*。允许应用本地清单的普通
    Puppet 包包含了操作正常代理所需的所有必要部分。
- en: If you are using Puppet Labs packages, use the instructions from earlier in
    this chapter. On agent machines, you need not install the `puppetserver` package.
    Just get `puppet-agent` instead.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Puppet Labs 的包，按照本章前面部分的指示操作。在代理机器上，无需安装 `puppetserver` 包，只需安装 `puppet-agent`
    即可。
- en: 'After a successful package installation, one needs to specify where puppet
    agent can find the puppet server:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装包之后，需要指定 puppet agent 可以找到 puppet server 的位置：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Afterwards, the following invocation is sufficient for an initial test:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以下的调用就足以进行初步测试：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Puppet first created a new SSL certificate key for itself. For its own name,
    it picked `agent`, which is the machine''s hostname. That''s fine for now. An
    error occurred because the `puppet` name cannot be currently resolved to anything.
    Add this to `/etc/hosts` so that Puppet can contact the master:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 首先为自己创建了一个新的 SSL 证书密钥。它为自己的名字选择了 `agent`，这是机器的主机名。现在这样就可以了。发生错误是因为 `puppet`
    名称当前无法解析。将此添加到 `/etc/hosts` 文件中，以便 Puppet 能够联系到主节点：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How Puppet conveniently downloaded and cached the CA certificate. The agent
    will establish trust based on this certificate from now on.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 如何方便地下载并缓存了 CA 证书。代理今后将基于此证书建立信任。
- en: Puppet created a certificate request and sent it to the master. It then immediately
    tried to download the signed certificate. This is expected to fail the master
    won't just sign a certificate for any request it receives. This behavior is important
    for proper security.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 创建了一个证书请求并将其发送到主节点。然后它立即尝试下载签名的证书。这预计会失败，因为主节点不会为它收到的任何请求签发证书。这种行为对于确保安全至关重要。
- en: There is a configuration setting that enables such automatic signing, but users
    are generally discouraged from using this setting because it allows the creation
    of arbitrary numbers of signed (and therefore, trusted) certificates to any user
    who has network access to the master.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个配置设置可以启用这种自动签名，但通常不建议用户使用此设置，因为它允许任何具有网络访问权限的用户为任意数量的请求生成签名证书（因此被信任）。
- en: 'To authorize the agent, look for the CSR on the master using the `puppet cert`
    command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要授权代理，使用 `puppet cert` 命令在主节点上查找 CSR：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This looks alright, so now you can sign a new certificate for the agent:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来没问题，现在你可以为代理签署一个新证书：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When choosing the action for `puppet cert`, the dashes in front of the option
    name can be omitted; you can just use `puppet cert list` and `puppet cert sign`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择 `puppet cert` 的操作时，可以省略选项名前的连字符；你可以直接使用 `puppet cert list` 和 `puppet cert
    sign`。
- en: 'Now the agent can receive its certificate for its catalog run as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代理可以按如下方式接收其证书并运行目录：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The agent is now fully operational. It received a catalog and applied all resources
    found within. Before you read on to learn how the agent usually operates, there
    is a note that is especially important for the users of Puppet 3.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 代理现在已完全正常工作。它接收了一个目录并应用了其中找到的所有资源。在继续阅读了解代理的常规操作之前，尤其是对于 Puppet 3 的用户来说，有一项注意事项非常重要。
- en: Remember that you configured the master to use the name `master.example.net`
    for the master machine earlier in this chapter by setting the `certname` option
    in the master's `puppet.conf` file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你在本章前面已经配置了主节点，使用 `master.example.net` 作为主节点机器的名称，并通过设置主节点 `puppet.conf`
    文件中的 `certname` 选项来指定。
- en: Since this is the common name in the master's certificate, the preceding command
    will not even work with a Puppet 3.x master. It works with `puppetserver` and
    Puppet 4 because the default `puppet` name is now included in the certificate's
    Subject Alternative Names by default.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是主节点证书中的通用名称，因此之前的命令甚至在 Puppet 3.x 版本上也无法工作。它在 `puppetserver` 和 Puppet 4
    上工作，因为默认的 `puppet` 名称现在已经默认包含在证书的主题备用名称（SAN）中。
- en: 'It is tidier to not rely on this alias name, though. After all, in production,
    you will probably want to make sure that the master has a fully qualified name
    that can be resolved, at least inside your network. You should, therefore, add
    the following to the `main` section of `puppet.conf` on each agent machine:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最好不要依赖这个别名。在生产环境中，您可能希望确保主节点有一个完全合格的名称，至少在您的网络内部可以解析。因此，您应在每台代理机器的 `puppet.conf`
    文件的 `main` 部分中添加以下内容：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the absence of DNS to resolve this name, your agent will need an appropriate
    entry in its hosts file or a similar alternative way of address resolution.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有 DNS 来解析此名称，您的代理将需要在其 hosts 文件中有适当的条目，或采用类似的地址解析方式。
- en: 'These steps are necessary in a Puppet 3.x setup. If you have been following
    along with a Puppet 4 agent, you might notice that after this change, it generates
    a new certificate signing request:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤在 Puppet 3.x 设置中是必要的。如果您正在使用 Puppet 4 代理，您可能会注意到在此更改后，它会生成一个新的证书签名请求：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If this happens, you will have to use `puppet cert sign` on the master again.
    The agent will then retrieve a new certificate.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生这种情况，您需要再次在主节点上使用 `puppet cert sign`。然后，代理将获取一个新的证书。
- en: The agent's life cycle
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理的生命周期
- en: 'In a Puppet-centric workflow, you typically want all changes to the configuration
    of servers (perhaps even workstations) to originate on the Puppet master and propagate
    to the agents automatically. Each new machine gets integrated into the Puppet
    infrastructure with the master at its center, and gets removed during the decommissioning,
    as shown in the following diagram:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在以 Puppet 为中心的工作流中，通常希望所有服务器（甚至工作站）的配置更改都从 Puppet 主节点发起，并自动传播到代理。每一台新机器都会与 Puppet
    基础设施集成，主节点位于中心位置，并在退役时将其移除，如下图所示：
- en: '![](img/0cad3915-47be-4fa8-a396-3ce43350b167.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cad3915-47be-4fa8-a396-3ce43350b167.jpg)'
- en: The very first step, generating a key and a certificate signing request is always
    performed implicitly and automatically at the start of an agent run if no local
    SSL data exists yet. Puppet creates the required data if no appropriate files
    are found. There will be a short description on how to trigger this behavior manually
    later in this section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步，生成密钥和证书签名请求，如果本地尚未存在 SSL 数据，通常会在代理程序启动时隐式并自动执行。如果找不到相应的文件，Puppet 会创建所需的数据。稍后会在本节中简要描述如何手动触发此行为。
- en: 'The next step is usually the signing of the agent''s certificate, which is
    performed on the master. It is good practice to monitor the pending requests by
    listing them on the console:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步通常是对代理证书进行签名，这在主节点上进行。最好通过在控制台上列出待处理的请求来监控它们：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: From this point on, the agent will periodically check with the master to load
    updated catalogs. The default interval for this is 30 minutes. The agent will
    perform a run of a catalog each time and check the sync state of all the contained
    resources. The run is performed for unchanged catalogs as well, because the sync
    states can change between runs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从此时起，代理将定期检查主节点以加载更新的目录。默认的检查间隔为 30 分钟。每次运行时，代理会执行一个目录，并检查所有资源的同步状态。即使目录没有变化，运行仍会执行，因为同步状态可能在运行间发生变化。
- en: Before you manage to sign the certificate, the agent process will query the
    master at short intervals for a while. This can avoid a 30 minute delay if the
    certificate is not ready right when the agent starts up.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在您成功签署证书之前，代理进程会在短时间内定期查询主节点。这样可以避免代理启动时如果证书还没有准备好，而导致 30 分钟的延迟。
- en: 'Launching this background process can be done manually through a simple command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 启动此后台进程可以通过一个简单的命令手动完成：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: However, it is preferable to do this through the `puppet` system service.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最好通过 `puppet` 系统服务来执行此操作。
- en: 'When an agent machine is taken out of active service, its certificate should
    be invalidated. As is customary with SSL, this is done through revocation and
    cleaning the certificate. The master adds the serial number of the certificate
    to its certificate revocation list. This list, too, is shared with each agent
    machine. Revocation is initiated on the master through the `puppet cert` command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理机器被移出活跃服务时，应该使其证书失效。与 SSL 的惯例一样，这通常是通过吊销和清除证书来完成的。主节点将证书的序列号添加到证书吊销列表中。这个列表也会与每台代理机器共享。吊销操作在主节点上通过
    `puppet cert` 命令发起：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The updated CRL is not honored until the master service is restarted. If security
    is a concern, this step must not be postponed.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的 CRL 直到主服务重启后才会生效。如果安全性是一个问题，这一步骤不能被延迟。
- en: 'The agent can then no longer use its old certificate:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 代理将无法再使用其旧证书：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Renewing an agent's certificate
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新代理的证书。
- en: 'Sometimes, it is necessary during an agent machine''s life cycle to regenerate
    its certificate and related data. The reasons for this can include data loss,
    human error, or certificate expiration, among others. The regeneration is achieved
    through the following steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在代理机器的生命周期中，需要重新生成其证书及相关数据。可能的原因包括数据丢失、人为错误或证书过期等。重新生成的步骤如下：
- en: 'Performing the regeneration is quite simple: all relevant files are kept at
    `/etc/puppetlabs/puppet/ssl` (for Puppet 3.x, this is `/var/lib/puppet/ssl`) on
    the agent machine.'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行重新生成过程非常简单：所有相关文件都保存在代理机器上的 `/etc/puppetlabs/puppet/ssl`（对于 Puppet 3.x，这是
    `/var/lib/puppet/ssl`）目录下。
- en: 'Once these files are removed (or rather, the whole `ssl/` directory tree),
    Puppet will renew everything on the next agent run. Of course, a new certificate
    must be signed. This requires some preparation; just initiating the request from
    the agent will fail:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦这些文件（或者整个 `ssl/` 目录树）被移除，Puppet 将在下一次代理运行时重新生成所有内容。当然，新的证书必须被签名。这需要一些准备，仅仅从代理发起请求将会失败：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The master still has the old certificate cached. This is a simple protection
    against the impersonation of your agents by unauthorized entities.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 主服务仍然缓存着旧的证书。这是一个简单的防护措施，防止未经授权的实体伪装成你的代理。
- en: 'To fix this, remove the certificate from both the master and the agent and
    then start a Puppet run, which will automatically regenerate a certificate:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，从主服务和代理中删除证书，然后启动一次 Puppet 运行，这将自动重新生成证书：
- en: 'On the master, use the following:'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主服务上，使用以下命令：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'On the agent, use the following:'
  id: totrans-118
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代理上，使用以下命令：
- en: 'On most platforms, use the following:'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数平台上，使用以下命令：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'On Windows, use the following:'
  id: totrans-121
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上，使用以下命令：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once you perform the cleanup operation on the master, as advised in the preceding
    output, and remove the indicated file from the agent machine, the agent will be
    able to successfully place its new CSR:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你根据前述输出执行了主服务上的清理操作，并从代理机器上移除指示的文件，代理将能够成功地放置其新的 CSR：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The rest of the process is identical to the original certificate creation. The
    agent uploads its CSR to the master, where the certificate is created through
    the `puppet cert sign` command.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的过程与原始证书创建完全相同。代理将其 CSR 上传到主服务，在主服务中通过 `puppet cert sign` 命令创建证书。
- en: Running the agent from cron
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 cron 运行代理。
- en: 'There is an alternative way to operate the agent. We covered starting one long-running
    `puppet agent` process that does its work in set intervals and then goes back
    to sleep. However, it is also possible to have cron launch a discrete agent process
    in the same interval. This agent will contact the master once, run the received
    catalog, and then terminate. This has several advantages, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种替代方法来操作代理。我们之前提到过启动一个长时间运行的 `puppet agent` 进程，它按照设定的间隔工作，然后回到休眠状态。然而，也可以通过
    cron 在相同的间隔启动一个独立的代理进程。这个代理将联系主服务一次，运行接收到的目录，然后终止。这有几个优点，具体如下：
- en: The agent operating system saves resources
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理操作系统节省资源。
- en: The interval is precise and not subject to skew (when running the background
    agent, deviations result from the time that elapses during the catalog run), and
    distributed interval skew can lead to thundering herd effects
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 间隔是精确的，不会受到偏差的影响（当运行后台代理时，偏差来自目录运行过程中消耗的时间），并且分布式间隔偏差可能导致“雷鸣效应”。
- en: Any agent crash or an inadvertent termination is not fatal
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何代理崩溃或意外终止都不会致命。
- en: 'Setting Puppet to run the agent from cron is also very easy to do with Puppet!
    You can use a manifest like the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 cron 启动代理的 Puppet 设置也非常简单！你可以使用如下的清单：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `fqdn_rand` function computes a distinct minute for each of your agents.
    Setting the `hour` property to `absent` means that the job should run every hour.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`fqdn_rand` 函数为每个代理计算一个独特的分钟。将 `hour` 属性设置为 `absent` 意味着该任务应该每小时运行一次。'
- en: Performance optimizations
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能优化。
- en: Operating a Puppet master gives you numerous benefits over just using `puppet
    apply` on all your machines. This comes at a cost, of course. The master and agents
    form a server/client relation, and, as with most such constructs, the server can
    become the bottleneck.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 操作 Puppet 主机相比于在所有机器上仅使用 `puppet apply` 为您带来了许多好处。当然，这也有代价。主机和代理之间形成了一个服务器/客户端关系，与大多数此类结构一样，服务器可能会成为瓶颈。
- en: The good news is that the Puppet agent is a fat client. The major share of the
    work inspecting file contents, interfacing with the package-management subsystem,
    services subsystem, and much more is done by the agent. The master only has to
    compile manifests and build catalogs from them. This becomes increasingly complex
    as you hand over more control to Puppet.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，Puppet 代理是一个胖客户端。文件内容检查、与软件包管理子系统、服务子系统的接口以及其他很多工作都由代理完成。主机只需要编译清单并从中构建目录。随着您将更多控制交给
    Puppet，这一过程变得越来越复杂。
- en: 'There is one more task your master is responsible for. Many of your manifests
    will contain file resources that rely on prepared content:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一项任务是由主机负责的。您的许多清单将包含依赖于已准备好内容的文件资源：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `source` parameter with a URL value indicates that the file has been pregenerated
    and placed in a module on the Puppet master (more on modules in [Chapter 5](3217a4c2-135e-46b4-bcf2-eef9ddce9991.xhtml), *Combining
    Classes, Configuration Files, and Extensions into Modules*). The agent will compare
    the local file with the master's copy (by checksum) and download the canonical
    version, if required. The comparison is a frequent occurrence in most agent runs;
    you will make Puppet manage a lot of files. The master does not need a lot of
    resources to make this happen, but it *will* hinder fluent agent operation if
    the master gets congested.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 URL 值的 `source` 参数表示该文件已经预生成并放置在 Puppet 主机上的模块中（有关模块的更多内容，请参见 [第 5 章](3217a4c2-135e-46b4-bcf2-eef9ddce9991.xhtml)，*将类、配置文件和扩展组合成模块*）。代理将通过校验和比较本地文件与主机的副本，并在需要时下载规范版本。大多数代理运行时会频繁进行比较；您会让
    Puppet 管理大量文件。主机不需要大量资源来完成此操作，但如果主机出现拥塞，*将会*妨碍代理的流畅操作。
- en: 'This can happen for any combination of the following reasons:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是由于以下任意组合原因导致的：
- en: The total number of agents is too large
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理的总数过多
- en: The agents check in too frequently
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理检查频率过高
- en: The manifests are too complex
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单过于复杂
- en: The Puppet server is not tuned adequately
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet 服务器未得到充分调优
- en: The master's hardware resources are insufficient
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机的硬件资源不足
- en: There are ways to scale your master operation via load balancing, but these
    are not covered in this book.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有方法可以通过负载均衡来扩展您的主机操作，但这些内容本书未涉及。
- en: Puppet Labs have some documentation on a few advanced approaches at [https://docs.puppetlabs.com/guides/scaling_multiple_masters.html.](https://docs.puppetlabs.com/guides/scaling_multiple_masters.html.)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet Labs 在 [https://docs.puppetlabs.com/guides/scaling_multiple_masters.html](https://docs.puppetlabs.com/guides/scaling_multiple_masters.html)
    上提供了一些关于几种高级方法的文档。
- en: Tuning puppetserver
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调优 puppetserver
- en: The puppetserver is a great way to run the master service. It is simple to set
    up and maintain, and it also has great performance during the operation. Starting
    up can take a little while to initialize everything to that end.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: puppetserver 是运行主机服务的绝佳方式。它的设置和维护非常简单，而且在操作期间性能也非常好。启动过程可能需要一些时间来初始化所有必要的内容。
- en: There are only a few customizable settings that can impact performance. Seeing
    as puppetserver runs in the JVM, the most important tuning approach is to scale
    the heap. A small heap will increase the overhead for garbage collection. Therefore,
    you should use the `-Xmx` and `-Xms` Java options to allow the JVM to use large
    parts of your available memory for the aforementioned heap.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 只有少数可自定义的设置会影响性能。由于 puppetserver 运行在 JVM 中，最重要的调优方法是调整堆内存。较小的堆内存会增加垃圾回收的开销。因此，您应该使用
    `-Xmx` 和 `-Xms` Java 选项，让 JVM 使用大量可用内存来分配上述堆内存。
- en: On Debian, these settings are found in `/etc/default/puppetserver`. It is sensible
    to pass the same value to both. A dynamic heap has little benefit because you
    cannot safely use any saved memory.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Debian 系统中，这些设置位于 `/etc/default/puppetserver`。建议将相同的值传递给两者。动态堆内存几乎没有好处，因为您无法安全地使用任何节省下来的内存。
- en: For proper puppetserver functionality, it is recommended that you have 4 GB
    of RAM available.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保证 puppetserver 的正常运行，建议您至少有 4 GB 的 RAM 可用。
- en: Completing the stack with PuppetDB
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完善 PuppetDB 堆栈
- en: PuppetDB is a specialized database REST API designed to interact with the Puppet
    master. It mainly comprises a PostgreSQL backend with an API wrapper. The latter
    was written in Clojure and runs in yet another JVM.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: PuppetDB 是一个专门为与 Puppet 主节点交互而设计的数据库 REST API。它主要包括一个 PostgreSQL 后端和一个 API 包装器。后者是用
    Clojure 编写的，并在另一个 JVM 中运行。
- en: PuppetDB aids the master's secondary task of storing reports and other agent
    data. It is also necessary for some specific manifest compiler functionality.
    This is covered in [Chapter 6](60cec52e-6b29-4028-bc15-3b5685598e6b.xhtml), *The
    Puppet Beginners Advanced Parts*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: PuppetDB 协助主节点的次要任务——存储报告和其他代理数据。它对于某些特定的清单编译器功能也是必需的。相关内容将在 [第六章](60cec52e-6b29-4028-bc15-3b5685598e6b.xhtml)，
    *Puppet 初学者进阶部分* 中介绍。
- en: The best way to set up and configure PuppetDB is actually Puppet itself. Since
    the necessary tools have not yet been introduced, we will postpone this step until
    [Chapter 6](60cec52e-6b29-4028-bc15-3b5685598e6b.xhtml),  *The Puppet Beginners
    Advanced Parts*. This is not a problem, because PuppetDB is not essential for
    basic master operation.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和配置 PuppetDB 的最佳方式实际上就是 Puppet 本身。由于必要的工具尚未介绍，我们将在 [第六章](60cec52e-6b29-4028-bc15-3b5685598e6b.xhtml)，
    *Puppet 初学者进阶部分* 中讲解这一步骤。这样做没有问题，因为 PuppetDB 对于基础主节点操作并非必需。
- en: Nevertheless, after finishing this chapter, you should include PuppetDB into
    any new master setup because it allows for advanced reporting and introspection.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在完成本章内容后，你应该将 PuppetDB 集成到任何新的主节点设置中，因为它支持高级报告和自省功能。
- en: The Puppet CA
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet CA
- en: Among the most frustrating issues, especially for new users, are problems with
    the agent's SSL handshake. Such errors are especially troublesome because Puppet
    cannot always offer very helpful analysis in its logs - the problems occur in
    the SSL library functions, and the application cannot examine the circumstances.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新用户来说，最令人沮丧的问题之一是代理的 SSL 握手问题。这些错误特别麻烦，因为 Puppet 并不总是能在日志中提供有用的分析 —— 问题发生在
    SSL 库函数中，而应用程序无法检查具体情况。
- en: The online documentation at Puppet Labs has a troubleshooting section that also
    has some advice concerning SSL-related issues at [https://docs.puppetlabs.com/guides/troubleshooting.html](https://docs.puppet.com/pe/latest/trouble_puppet.html).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet Labs 的在线文档中有一个故障排除部分，其中还提供了一些关于 SSL 相关问题的建议，详见 [https://docs.puppetlabs.com/guides/troubleshooting.html](https://docs.puppet.com/pe/latest/trouble_puppet.html)。
- en: 'Consider the following output for the `--test` command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下 `--test` 命令的输出：
- en: '[PRE27]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The agent opines that the CRL it receives from the master is not yet valid.
    Errors such as these can happen whenever the agent's clock gets reset to a very
    early date. This can also result from a slight clock skew, when the CRL has recently
    been updated through a revocation action on the master. If the system clock on
    the agent machine returns a time far in the future, it will consider certificates
    to be expired.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 代理认为它从主节点接收到的 CRL 尚未生效。当代理的时钟被重置为非常早的时间时，或者由于轻微的时钟偏差（当主节点上进行吊销操作时，CRL 最近更新），就可能发生这种错误。如果代理机器的系统时钟返回的时间远在未来，它将认为证书已过期。
- en: These clock-related issues are best avoided by running an `ntp` service on all
    Puppet agents and masters.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这些与时钟相关的问题最好通过在所有 Puppet 代理和主节点上运行 `ntp` 服务来避免。
- en: 'Errors will generally result if the data in the agent''s `$ssldir` becomes
    inconsistent. This can happen when the agent interacts with an alternate master
    (a testing instance, for example). The first piece of advice you will most likely
    receive when asking the community what to do about such problems is to create
    a new agent certificate from scratch. This works as described in the *The agent''s
    life cycle* section:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代理的 `$ssldir` 中的数据不一致，通常会导致错误。比如，当代理与一个备用主节点（例如测试实例）交互时，就可能发生这种情况。当你向社区询问如何解决这类问题时，最常得到的建议通常是从头开始创建一个新的代理证书。这在
    *代理的生命周期* 部分中有描述：
- en: Remove all the SSL data from the agent machine
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除代理机器上的所有 SSL 数据
- en: Revoke and remove the certificate from the master using `puppet cert clean`
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `puppet cert clean` 撤销并移除主节点上的证书
- en: Request and sign a new certificate
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求并签署新的证书
- en: Before you start the recovery procedure, make sure that you are logged in to
    the afflicted agent machine and not the master. Losing the master's SSL data will
    make it necessary to recreate your complete SSL infrastructure.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始恢复程序之前，请确保你登录的是受影响的代理机器，而不是主节点。丢失主节点的 SSL 数据将需要重新创建完整的 SSL 基础设施。
- en: This approach will indeed remedy most issues. Be careful not to leave any old
    files in the relevant location on the agent machine. If the problems persist,
    a more involved solution is required. The openssl command-line tool is helpful
    to analyze the certificates and related files. The details of such an analysis
    are beyond the scope of this book, though.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法确实可以解决大部分问题。请小心不要在代理机的相关位置留下任何旧文件。如果问题仍然存在，则需要更复杂的解决方案。`openssl`命令行工具对分析证书及相关文件很有帮助。不过，关于这种分析的详细内容超出了本书的范围。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You can now set up your own Puppet master, using the sophisticated puppetserver
    solution. You have successfully signed the certificate for a Puppet agent and
    can revoke certificates, if required. Using the `node` blocks in the master manifest,
    you can describe individual manifests for each distinct agent. Finally, you learned
    about some things that can go wrong with the SSL-based authentication.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用先进的puppetserver解决方案来设置自己的Puppet主控。你已经成功为Puppet代理签署了证书，并且可以在需要时撤销证书。通过在主控清单中使用`node`块，你可以为每个独立的代理描述各自的清单。最后，你也学习了一些基于SSL的认证中可能出现的问题。
- en: In [Chapter 3](be2d7b8b-9ea8-4459-b415-081e77db07c7.xhtml), *A Peek into the
    Ruby Part of Puppet - Facts, Types, and Providers*, we will take a look at the
    inner workings of Puppet in order to give you an understanding of how the Puppet
    agent adapts to its environment. You will also learn how the agent provides feedback
    to the master, allowing you to create flexible manifests that fit different needs.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](be2d7b8b-9ea8-4459-b415-081e77db07c7.xhtml)，《Puppet的Ruby部分 - Facts, Types,
    and Providers》中，我们将深入探讨Puppet的内部工作原理，以便帮助你理解Puppet代理如何适应其环境。你还将了解代理如何向主控提供反馈，允许你创建适应不同需求的灵活清单。
