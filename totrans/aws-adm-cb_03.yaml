- en: Storage and Content Delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Hosting a static website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching a website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with network storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up data for compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of these recipes is backed by a CloudFormation template that makes them
    quick and easy to reproduce and modify.
  prefs: []
  type: TYPE_NORMAL
- en: Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Storage is an integral part of any organization's cloud usage. When used correctly,
    servers are short-lived and replaceable. This means that having a durable, available
    storage service is critical to persisting and sharing state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a high-level summary of the storage services AWS offers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_03_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Storage services from AWS
  prefs: []
  type: TYPE_NORMAL
- en: Elastic Block Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Elastic Block Store** (**EBS**) provides block-device storage as volumes
    to EC2 instances. It behaves similarly to a **storage area network** (**SAN**)
    and offers the lowest-latency access of the various storage services offered.
    EBS volumes can only be accessed by one instance at a time. The size of a volume
    must be specified when they are provisioned, and cannot be changed after.'
  prefs: []
  type: TYPE_NORMAL
- en: Volumes are hosted on redundant hardware in a specific AZ, but they do not offer
    redundancy across AZs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some recommended use cases for EBS are:'
  prefs: []
  type: TYPE_NORMAL
- en: Instance boot volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intensive data processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transactional writes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover EBS in more detail in the [Chapter 4](beece917-78ff-43b8-934b-706eca5968f9.xhtml),
    *Using AWS Compute*, as its primary use is as the underlying storage for EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: Elastic File System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Elastic File System** (**EFS**) provides a file-storage service that can
    be accessed simultaneously by many instances, similar to **Network Attached Storage**
    (**NAS**). While not as fast as EBS, it still provides low-latency access. As
    it may be accessed by multiple clients at a time, it can reach much higher levels
    of throughput than EBS. EFS filesystems also in size scale dynamically and so
    do not need to be preallocated or modified during use. Filesystems are stored
    redundantly across AZs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some recommended use cases for EFS are:'
  prefs: []
  type: TYPE_NORMAL
- en: Home directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving shared web content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EFS performance scales according to the filesystem size. As the filesystem size
    is not preallocated, the only way to increase your performance is to add more
    data to it.
  prefs: []
  type: TYPE_NORMAL
- en: Simple Storage Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Simple Storage Service** (**S3**) provides a web-based service for hosting
    files. Files are referred to as **objects** and grouped in **buckets**. Objects
    are effectively a key-value pair, similar to a document database. Keys are used
    like file paths, with */* used as a separator and grouping character. Buckets
    can be easily accessed like a website via an automatically generated domain name.'
  prefs: []
  type: TYPE_NORMAL
- en: Due to being associated with a domain name, bucket names must be *globally*
    unique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some recommended usecases for S3 are:'
  prefs: []
  type: TYPE_NORMAL
- en: Static website assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing large files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Short-term (a.k.a. *warm*) backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glacier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Glacier** is a companion service to S3, but is the **cold** storage option.
    Cold storage is a service where you are not able to directly access your data;
    you must lodge a request for data to be restored (to S3), and you are notified
    when it is ready. A physical example of cold storage might be backup tapes that
    are stored in a secure location. Similar to S3, files are referred to as *objects*.
    Files are grouped together and stored in **archives**. Archives can be created
    and deleted, but never modified. Archives are grouped together in to **vaults**,
    which allow you to control access.'
  prefs: []
  type: TYPE_NORMAL
- en: The shortest restoration time is 1-5 minutes (with limitations). Standard restoration
    times take 3-5 hours, with some other options available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some recommended usecases for Glacier are:'
  prefs: []
  type: TYPE_NORMAL
- en: Long-term (a.k.a. *cold*) backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Content delivery is aimed at quickly and efficiently distributing your content
    to users. The best practice way to do this is to leverage a **Content Delivery
    Network** (**CDN**). Amazon's CDN service is **Amazon CloudFront**.
  prefs: []
  type: TYPE_NORMAL
- en: While AWS currently has 14 regions, it has an additional 68 edge locations that
    can be used as part of CloudFront. This gives you a massive global network of
    resources you can use to improve your users' experience of your application.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFront works closely with S3 to serve static assets. In addition to this,
    it can be configured to cache dynamic content. This gives you an easy way to improve
    the performance of applications that are not even aware of CloudFront.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFront websites are referred to as **distributions** which speaks to their
    CDN role.
  prefs: []
  type: TYPE_NORMAL
- en: Distributions can also be used to provide a common frontend for multiple, disparate,
    sources of content.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting a static website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's really easy to host a static website on AWS. It turns out it's also dirt
    cheap, fast, reliable, and massively scalable too.
  prefs: []
  type: TYPE_NORMAL
- en: You do this by storing your content in an S3 bucket and configuring that bucket
    to behave like a website.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that we're talking about static content only. This method
    doesn't work for websites requiring server-side processing or some other backend
    functionality. WordPress, for example, requires PHP which means you need a fully
    functional web server to run it. S3 won't interpret PHP pages for you, it will
    just serve files straight to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, why would you want to host a static website in S3? Common scenarios we
    see are:'
  prefs: []
  type: TYPE_NORMAL
- en: Simply, your website is completely static and you don't change it very often.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your company is launching a new product or service. You're expecting very large
    numbers of customers to visit a mini-site within a short time period; likely more
    traffic than your existing web hosting environment can handle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need somewhere to host a failover or *down for maintenance* style page which
    is separate from your existing web hosting environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPS is not supported by S3 when it is used to serve static content.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_03_02-1.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe provides you with the CloudFormation necessary to create:'
  prefs: []
  type: TYPE_NORMAL
- en: An S3 bucket for hosting your content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Route 53 hosted zone and necessary DNS records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A redirection from `www` to `root/apex` for your domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After running this CloudFormation you will of course need to upload your content
    to the buckets which CloudFormation created for you.
  prefs: []
  type: TYPE_NORMAL
- en: Creating S3 buckets and hosting content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we''re actually going to create two S3 buckets for our site
    [http://www.example.org/](http://www.example.org/). They correspond to the hostnames:'
  prefs: []
  type: TYPE_NORMAL
- en: '`www.example.org`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`example.org`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It might be a good time to remind you that S3 bucket names are globally unique.
    You'll also need to substitute `example.org` for a domain which you own.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to put all our content in our `example.org` bucket and tell S3
    that requests to `www.example.org` should be redirected to the other bucket. Here''s
    what the relevant parts of the CloudFormation would look like for creating these
    buckets (note that we''ll be expanding on this example as we proceed through this
    recipe):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We won't be hardcoding our domain name into the bucket names. Instead we're
    going to supply our domain as a parameter to the CloudFormation template in order
    to maximize its reusability, then reference it via `!Ref DomainName`. To keep
    this recipe as simple as possible we're going to set up a single page website.
    In the real world, your website will of course consist of multiple files but the
    process you need to follow is exactly the same.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configuring the index document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **index** document is the file which S3 will serve by default when someone
    types your domain name into the address bar in their browser. This precludes the
    user from having to type the full path to a file, that is, `example.org/index.html`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically, your index document will be called `index.html`. We'll provide a
    code snippet for this file towards the end of this chapter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configuring the error document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **error** document is the file S3 will serve if something goes wrong (missing
    files, forbidden access, bad requests, and so on). To keep things consistent we're
    going to call ours `error.html`. Again, we'll provide a code snippet for this
    later in the chapter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enabling website hosting on your bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As mentioned previously, we''re going to need to tell S3 that it should serve
    static website content from our `example.org` bucket. Often users will perform
    this configuration through the S3 web console. We''re going to do it in CloudFormation
    however. The CLI also offers a nice one-liner for doing this. You''re not going
    to need to run this command, we''re just adding it here for reference:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting up redirection from the `www` hostname:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When performing this task manually one has little option but to fire up the
    web console and configure the `www.example.org` bucket to redirect to the `example.org`
    bucket. There's no handy one-line CLI command for this one. Fortunately, it's
    easy in CloudFormation as you'll soon see in the upcoming CloudFormation snippet.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configuring permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last bucket setup task is to configure permissions. By default S3 buckets
    are private and only the bucket owner can see its contents. This is not much use
    to us in this scenario because we need *everyone* to be able to see our bucket
    contents. This is a public website after all.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we were configuring our bucket manually we would apply a bucket policy which
    looks something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Fortunately, in CloudFormation the task is much simpler. Building on the previous
    example, the `Resources` section of our CloudFormation template now looks like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating a hosted zone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to start adding DNS records we first need to add a hosted zone to
    Route 53\. As you can see in the following code, this is reasonably simple to
    do. The `Name` we are going to supply will be provided as a parameter to our CloudFormation
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating DNS records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a hosted zone we can go ahead and create DNS records for it.
    For this we use the AWS resource type `AWS::Route53::RecordSetGroup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're going to create an A record for our domain's `root/apex` entry and we'll
    make it an alias. This alias will be configured to point to the AWS endpoint for
    S3-hosted websites in the particular region we choose to run this CloudFormation
    in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to archive region portability in our template, we'll use a *mapping*
    to provide all the endpoints. The values in this map are published by AWS in their
    API endpoints documentation. You won't need to look these up, however, because
    our code sample provides the most up-to-date endpoints (as of the time of writing
    this). The endpoints tend not to change, but the list obviously grows when AWS
    adds more regions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The mapping will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need a `CNAME` for `www` which will point at our `WWWBucket` so
    that redirection can take place. The final resource for our DNS records will look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re ready for launch. It''s time to create our CloudFormation stack. You
    can do so using the following CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Uploading website content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s now time to upload some content to our S3 buckets. Here are the snippets
    we promised you earlier. There''s nothing fancy here. Once you''ve got these examples
    working, you can try replacing them with your real website content:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`error.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's it! As soon as S3 has an `index.html` file to serve up, you will be hosting
    a single-page website on S3\. Go ahead and test it out. The supplied CloudFormation
    example will output a URL you can use to see your new website. After you've verified
    it's working, you can go ahead and upload your real static website and enjoy fast,
    cheap, and server-free hosting.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at some additional things to consider.
  prefs: []
  type: TYPE_NORMAL
- en: Delegating your domain to AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While we''ve created a hosted zone and some DNS records in Route 53, no one
    can actually see them yet. In order to send your website visitors to your new
    S3 static website, you''ll need to delegate your domain to Route 53\. This is
    left to you as an exercise; however, there are some important things to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: The DNS servers to delegate your domain to can be found in the NS record for
    your hosted zone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your domain is already live and production-like, you'll need to make sure
    all your DNS records for your zone are recreated in Route 53, including things
    such as MX records, which are critical for the continuity of your e-mail service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before delegating to AWS, you may consider reducing the TTL values on your DNS
    records. This will be useful if for some reason you need to re-delegate or make
    changes to them. Once your DNS setup is stable, you can increase TTLs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-origin resource sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's worth discussing **cross-origin resource sharing** (**CORS**) here because
    the more static web content hosting you do in S3, the higher your chances are
    of needing to know about this, particularly where web fonts are concerned.
  prefs: []
  type: TYPE_NORMAL
- en: Some browsers implement a *same origin* policy restriction. This prevents the
    browser from loading certain kinds of assets from hostnames that are different
    from the page being displayed to the user. Web fonts fall under this restriction
    and are an often-cited example because when they don't load correctly, your website
    will usually look a lot different to how you intended. The solution to this is
    to add a CORS configuration to your bucket to allow its content to be loaded by
    the particular origin or hostname that requested it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll leave the CORS configuration out of our full example, but if you need
    to add one to your bucket, here''s how you can do it. Update your `AllowedOrigins`
    property to look similar to the following CloudFormation and you should be all
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Caching a website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll show you how to use AWS CloudFront to cache your website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary reasons you''ll want to consider doing this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Copies of your content will be geographically located closer to your end users,
    thus improving their experience and delivering content to them faster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The burden for serving content will be removed from your fleet of servers. This
    could potentially result in a large cost saving if you're able to turn off some
    servers or reduce your bandwidth bill.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may need to be shielded from large and unexpected spikes in traffic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While not the focus of this chapter, CloudFront gives you the ability to implement
    **Web Application Firewall** (**WAF**) as an added layer of protection from the
    bad guys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike most AWS services, which are region specific, CloudFront is a *global*
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, you're going to need a publicly accessible website. This could
    be a static website hosted in S3, or it could be a dynamically generated website
    hosted in EC2\. In fact, your website doesn't even need to be hosted in AWS in
    order to use CloudFront. As long as your website is publicly accessible, you should
    be good to go.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need to have the ability to modify the DNS records for your website.
    Instead of pointing to your web server (or S3 bucket), we'll eventually point
    them to CloudFront.
  prefs: []
  type: TYPE_NORMAL
- en: About dynamic content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your website consists of mostly dynamic content, you can still benefit from
    implementing CloudFront.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, CloudFront will maintain a pool of persistent connections with
    your origin servers. This lessens the time it takes for files to be served to
    your users because the number of three-way handshakes they'll need to perform
    is reduced.
  prefs: []
  type: TYPE_NORMAL
- en: Second, CloudFront implements some additional optimizations around TCP connections
    for high performance. More data is able to initially be transferred over the wire
    because CloudFront uses a wider initial TCP window.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, implementing a CDN such as CloudFront *does* give you the opportunity
    to review your caching strategy and how you use cache-control headers. If your
    home page is dynamically generated, you'll get some benefit straight away by serving
    it via CloudFront, but the benefits will be much greater if you were to let CloudFront
    cache it for a few minutes. Again, cost, end user, and backend performance are
    all things you should take into consideration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CloudFront distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Distributions can be configured with a fairly wide array of options. Our recipe
    is going to be quite simple so that you can get up and running as quickly as possible.
    But we will talk through some of the more common configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Origins: A distribution needs to have at least one origin. An origin, as the
    name indicates, is where your website content originates from your public-facing
    website. The properties you''ll most likely be concerned with are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Origin Domain Name: This is the hostname of your public-facing website. The
    CloudFormation template we supply accepts this hostname as a parameter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Origin Path: It''s possible to configure the distribution to fetch content
    from a directory or subfolder at the origin, for example, `/content/images` if
    you were using CloudFront to cache images only. In our case, we are caching our
    entire website, so we don''t specify an Origin Path at all.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Origin ID: This is particularly important when you are using nondefault cache
    behavior settings and therefore have configured multiple origins. You need to
    assign a unique ID to the origins so that the cache behaviors know which origin
    to target. There''ll be more discussion on cache behaviors later.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTTP Port, HTTPS Port: If your origin is listening on nonstandard ports for
    HTTP or HTTPS, you would use these parameters to define those ports.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Origin Protocol Policy: You are able to configure the distribution to talk
    to your origin via:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP Only
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPS Only
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Match Viewer
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Match Viewer option forwards requests to the origin based on which protocol
    the user requested with in their browser. Again, we are keeping things quite simple
    in this recipe, so we'll be opting for HTTP Only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Logging: Keep in mind that because less traffic will be hitting your origin,
    fewer access logs will also be captured. It makes sense to have CloudFront keep
    these logs for us in an S3 bucket. This is included in the CloudFormation provided
    with this recipe:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cache behaviors**: In this recipe, we''ll configure a single (default) cache
    behavior, which will forward all requests to our origin.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CloudFront**: It allows you to get quite fine grained with the behaviors
    you configure. You might, for example, want to apply a rule to all the `.js` and
    `.css` files on your origin. Perhaps you want to forward query strings to the
    origin for these file types. Similarly, you might want to ignore the TTL the origin
    is trying to set for image files, instead telling CloudFront to cache for a minimum
    of 24 hours.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Aliases: These are additional hostnames you want the distribution to serve
    traffic for. For example, if your Origin Domain Name is configured to `loadbalancer.example.org`,
    then you probably want aliases that look something like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`example.org`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`www.example.org`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The CloudFormation template provided with this recipe expects one or more
  prefs: []
  type: TYPE_NORMAL
- en: aliases to be provided in the form of a comma-delimited list of strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Allowed HTTP Methods: By default, CloudFront will only forward GET and HEAD
    requests to your origin. This recipe doesn''t change those defaults, so we don''t
    declare this parameter in the provided template. If your origin is serving dynamically
    generated content, then you will likely want to declare this parameter and set
    its values to GET, HEAD, OPTIONS, PUT, POST, PATCH, and DELETE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TTLs (minimum/maximum/default): You can optionally define how long you''d like
    objects to stay in CloudFront''s caches before expiring and being refetched from
    the origin. Again, we''ve opted to stick to CloudFront''s default values to keep
    this recipe simple, so we''ve omitted this parameter from our template. The defaults
    are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Minimum TTL: 0 seconds'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default TTL: 1 day'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Maximum TTL: 1 year'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Price Class: By default, CloudFront will serve your content from all of its
    edge locations, giving you the maximum performance possible. We''re going to deploy
    our distribution using the lowest possible price class, Price Class *100*. This
    corresponds to edge locations in the United States, Canada, and Europe. Users
    from Australia would not benefit too much from this Price Class, but you''re also
    paying less for it. Price Class *200* adds Asian regions, and Price Class *All*
    adds South America and Australia.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A comprehensive list and detailed explanation on which values can be specified
    when creating a CloudFront distribution can be found here at [http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first (and only) thing we need to do is configure a CloudFront distribution
    as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_03_003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new CloudFormation template and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the template we created above, go ahead and create your CloudFront distribution.
    Expect to wait around 20-25 minutes for this stack to finish creating. It takes
    a while for your distribution configuration to be pushed out to all the AWS CloudFront
    locations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Working with network storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the Amazon EFS to provide network-based storage
    to instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the benefits of using EFS compared to other AWS services are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Guaranteed write order between distributed clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic resizing—no need to preallocate and no need to downsize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You only pay for the space you use (per GB)—no transfer or extra costs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example works with the default VPC and subnets, present in all AWS accounts
    when they are created. Even if you have changed you network configuration, all
    you need is a working VPC with two or more subnets in different AZs for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your favorite text editor, and start a new CloudFormation template by
    defining the `AWSTemplateFormatVersion` and `Description`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a top-level `Parameters` section, and define the required parameters,
    `VpcId` and `SubnetIds`, inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Create a top-level `Resources` property, which will contain all the resources
    defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the `Resources` property, add the `EFS` filesystem resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Add mount target resources for connecting to the filesystem you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a security group to control access to the mount targets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a security group to access the mount target security group you created
    in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the ingress and egress rules for the mount target security group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the ingress and egress rules for the mount target access security group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Save your template with the name `03-working-with-network-storage.yaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch the CloudFormation stack with the following AWS CLI command, substituting
    your own VPC ID and subnet IDs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is what the created resources will look like at the end of the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_03_004.png)'
  prefs: []
  type: TYPE_IMG
- en: Working with network storage
  prefs: []
  type: TYPE_NORMAL
- en: We start by creating the standard CloudFormation template properties in step
    1.
  prefs: []
  type: TYPE_NORMAL
- en: In step 2, you define the template's parameters that will be used when configuring
    the resources.
  prefs: []
  type: TYPE_NORMAL
- en: Steps 3 and 4 are where the EFS resources are specified. They consist of an
    EFS filesystem and mount targets in each of the AZs that will access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create the security groups in steps 5 and 6: one for the mount targets
    and one for the instances that are allowed to connect to the mount targets.'
  prefs: []
  type: TYPE_NORMAL
- en: As these two security groups contain two-way (or circular) references to each
    other, we must define the rules between them in separate resources in steps 7
    and 8.
  prefs: []
  type: TYPE_NORMAL
- en: In step 9, you save the template with a specific filename so that it can be
    referenced in the command to launch the stack in step 10.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To confirm that your EFS filesystem, mount targets, and security groups are
    working, you can also provision some client instances to connect to them. Add
    the following resources and parameters to the template you have already created:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following parameters to your top-level `Parameters` section to configure
    your instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an `AutoScalingGroup` under the `Resources` section; regardless of which
    AZ your servers are provisioned to, they will have access to the `EFS` filesystem
    via the local mount point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in the `Resources` section, add a launch configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Launch the CloudFormation stack with the following AWS CLI command, substituting
    your own parameter values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Once the new stack is ready, you will be able to SSH to your instances and verify
  prefs: []
  type: TYPE_NORMAL
- en: that they have mounted the EFS filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up data for compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We work with a lot of companies (especially in the finance industry) that have
    strict rules around the minimum time data needs to be kept for. This can become
    quite onerous and expensive if you need to keep customer records for a minimum
    of 7 years, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Using S3, Glacier, and life cycle rules, we can create a flexible long-term
    backup solution while also automating the archiving and purging of backups and
    reducing costs.
  prefs: []
  type: TYPE_NORMAL
- en: We are also going to utilize *versioning* in order to mitigate the damaged caused
    by a file being accidentally deleted or overwritten in our backup bucket.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to define a few parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ExpirationInDays`: This is the maximum amount of time we want to have our
    files kept in backup for. We''ve set a default for this value of 2,555 days (7
    years).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TransitionToInfrequentAccessInDays`: After a backup has been copied to S3,
    we want to move it to the *infrequently accessed* class to reduce our costs. This
    doesn''t affect the durability of the backup, but it does have a small impact
    on its availability. We''ll set this to 30 days.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TransitionToGlacierInDays`: After the backup has been kept in the infrequently
    accessed class for a while, we want to move it to Glacier. This again helps us
    reduce our costs at the expense of retrieval times. If we need to fetch a backup
    from Glacier, the wait time will be approximately 3-5 hours. We''ll set the default
    for this to 60 days.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PreviousVersionsExpirationInDays`: Given that we will have versioning enabled
    on our bucket, we want to make sure old versions of files aren''t kept forever—we''re
    using this feature only to mitigate accidents. We''ll set this value to 60 days,
    which gives us more than enough time to identify and recover from an accidental
    deletion or overwrite.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PreviousVersionsToInfrequentAccessInDays`: Just like our other backup files,
    we want to move our old versions to the infrequently accessed class after a period
    of time in order to minimize costs. We''ll set this to 30 days:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll need to create the S3 bucket to store our backups in. Note that
    we''re omitting the `name` property for this bucket in order to avoid bucket name
    conflicts and maximize region portability. We''re also enabling versioning and
    adding our life cycle rules from our previous `Parameters`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add an output so we know which bucket to store our backups
    in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go ahead and launch this CloudFormation stack. If you''re happy with the default
    values for the parameters, you don''t need to provide them with the CLI command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Once the stack has been created, you'll be all set to start copying backups
    to the S3 bucket and to start worrying less about your backups' life cycle and
    management. If you decide that the expiry or transition times need to change after
    you've created the bucket, you can do this by simply updating the parameters for
    the stack.
  prefs: []
  type: TYPE_NORMAL
