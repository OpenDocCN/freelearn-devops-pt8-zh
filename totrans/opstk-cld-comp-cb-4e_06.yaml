- en: Chapter 6. Glance – OpenStack Image Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to OpenStack Image services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using image snapshots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using image metadata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deactivating images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to OpenStack Image services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenStack Image service, otherwise known as Glance, is a service that allows
    users to register, discover, and retrieve virtual machine images for use in an
    OpenStack cloud. Images made available through the OpenStack Image service can
    be stored in a variety of formats and backend locations, from local filesystem
    storage to distributed filesystems such as OpenStack Object Storage (Swift) and
    Ceph.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenStack Image service is composed of two major components: the `glance-api`
    service and the `glance-registry` service. Users interface with the `glance-api`
    service indirectly when performing commands to create, list, delete, or otherwise
    manage images using OpenStack clients. The `glance-registry` service is responsible
    for connecting to the backend database and storing or retrieving images.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Image management in an OpenStack environment can be achieved using the `openstack`
    command-line tool, the Horizon dashboard, or directly via the Glance REST-based
    API. Images can be sourced directly from the internet or created and manipulated
    with tools such as `virsh`, `virt-manager`, `growpart`, and `cloud-init`. Custom
    image creation will be covered later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating an image in OpenStack, one must provide attributes that describe
    the image. These attributes include the image name, the disk format, and the container
    format. Images can be public, private, or shared among multiple projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Images for the following examples can be downloaded from the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ubuntu: [https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img](https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CirrOS: [https://download.cirros-cloud.net/0.3.5/cirros-0.3.5-i386-disk.img](https://download.cirros-cloud.net/0.3.5/cirros-0.3.5-i386-disk.img)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Over time, image locations on the web can change and the URLs in this book may
    be unavailable. Feel free to replace any URL in these examples with a known, working
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: When uploading an image, ensure that you have properly sourced your credentials
    or are otherwise properly authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need the following details, at a minimum, when uploading an image:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disk format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our first example, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_CIRROS_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Disk format: `qcow2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image location: `/tmp/cirros-0.3.5-i386-disk.img`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our second example, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_UBUNTU_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Disk format: `qcow2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image location: `/tmp/xenial-server-cloudimg-amd64-disk1.img`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to upload
    an image with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the CirrOS image to the `/tmp` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upload the CirrOS image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will resemble the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00117.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Repeat the previous steps for the Ubuntu image:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Download the Ubuntu image to the `/tmp` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upload the Ubuntu image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Images are created with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating an image with the OpenStack client results in the specified file being
    uploaded to the OpenStack image repository. The repository can be a local directory
    or volume specified in the Glance configuration file, or even an object store
    served by Swift, Ceph, Rackspace Cloud Files, or others.
  prefs: []
  type: TYPE_NORMAL
- en: The `disk-format` parameter defines the format of the virtual disk used by the
    image. Options include `ami`, `ari`, `aki`, `vhd`, `vmdk`, `raw`, `qcow2`, `vhdx`,
    `vdi`, `iso`, and `ploop`. The `qcow2` format is popular among OpenStack-based
    clouds running QEMU/KVM hypervisors, and it supports smaller image file sizes,
    copy-on-write support, and various compression and encryption technologies. The
    default format is `raw`.
  prefs: []
  type: TYPE_NORMAL
- en: When uploading images to a Glance store backed by Ceph, the images must be in
    the `raw` format else they will fail to work properly. The `qemu-img` command
    can be used to identify the format of an image, and it can also be used to perform
    the conversion of an image from one format to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of converting an image in the `qcow2` format to the `raw` format
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Additional examples of using the `qemu-img` command can be found in the OpenStack
    documentation here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.openstack.org/image-guide/convert-images.html](https://docs.openstack.org/image-guide/convert-images.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The `file` parameter defines the local location of the image file respective
    to where the OpenStack client is being run. The OpenStack client uploads the image
    to the OpenStack image repository, where it is stored according to settings within
    Glance.
  prefs: []
  type: TYPE_NORMAL
- en: When specified, the `--public` option marks the image as accessible by all projects
    within the cloud. Alternatively, the `--private` option marks the image as accessible
    only by the project that created it. By default, all images created are marked
    as `shared` and are eligible to be shared with another project. At the time of
    creation, however, the image can only be seen by the project that created it.
    The `--shared` and `--community` options are discussed later in this chapter in
    the *Sharing images* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Listing images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list the images in the OpenStack Image service repository, use the following
    OpenStack client command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Listing images](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Viewing image details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The details of individual images can be queried using the following OpenStack
    client command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing image details](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Deleting images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Images can be deleted from the OpenStack image repository at any time. Keep
    in mind, however, that depending on the version of OpenStack installed, deleting
    an image can have an adverse effect on the ability to migrate an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenStack releases newer than Kilo should not be impacted by this issue.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When deleting an image, the following information will be necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete an image in OpenStack, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: No output is returned if the operation is successful. To verify that the image
    is no longer available, use the `openstack image list` or `openstack image show`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Images that exist in the OpenStack image repository can be downloaded at a later
    time and transferred to other systems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To download an image from the OpenStack image repository, you must have access
    to the image. You will need the following details, at a minimum, to download the
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination for downloaded file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our example, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_UBUNTU_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Download location: `/tmp/my_downloaded_ubuntu_image.qcow2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to download
    an image from the repository with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'No output is returned if the operation is successful. Use the `ls` command
    to list the downloaded file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Sharing images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an image is *private*, it is only available to the project from which that
    image was created or uploaded. On the other hand, when an image is *public*, it
    is available to all projects. The OpenStack Image service provides a mechanism
    whereby these private images can be shared between a subset of projects. This
    allows greater control over images that need to exist for different projects without
    making them available to all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sharing images among projects requires the following workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Tenant A updates an image's ability to be shared
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tenant A shares an image with Tenant B
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tenant B accepts or rejects the sharing attempt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When sharing an image, ensure that you are authenticated as an administrator
    or are the owner of the image. You will need the following details, at a minimum,
    to share the image:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our example, the `ADMIN` project will share an image with the `FINANCE`
    project. The following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_UBUNTU_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project name: `FINANCE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For instructions on how to create projects within OpenStack, refer to the [Chapter
    3](part0035_split_000.html#11C3M1-189e69df43a248268db97cde1b1a8e47 "Chapter 3. Keystone
    – OpenStack Identity Service"), *Keystone – OpenStack Identity Service*, chapter
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to share
    an image with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the environment with the credentials of a user in the `FINANCE` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As a user in the `FINANCE` project, view all available images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will resemble the following if no images are available:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00121.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In this environment, no images are available to the `FINANCE` project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, configure the environment with the credentials of a user in the ADMIN
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the Ubuntu image and make it available for sharing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: No output will be returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Share the Ubuntu image with the FINANCE project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will resemble the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00122.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, the user should notify the `FINANCE` project of the sharing attempt
    and provide the image ID. In this example, the image ID is `d120a923-5246-4dca-8f52-51a951bffce5`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reconfigure the environment with the credentials of a user in the `FINANCE`
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Accept the sharing attempt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: No output will be returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'View all available images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will resemble the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00123.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sharing images requires the use of the `openstack image add project` command
    on the part of the producer and the `openstack image set` command on the part
    of the consumer. The process involves communication between the producer and the
    consumer outside of the OpenStack API, as the image ID must be shared between
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Producers invoke the sharing process using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once shared, the consumer has the ability to accept or reject the attempt using
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Marking an image as `pending` makes the image unavailable to users in the consuming
    project, but leaves open the possibility of making it available at a later time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The producer can revoke the sharing of an image using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: An alternative to marking an image as shared would be to mark its visibility
    as `community` using the `--community` option. This allows a user to share an
    image with all projects, but still requires the consuming projects to accept the
    image before it is returned in an image list. This reduces the administrative
    overhead on the part of the user sharing the image without unnecessarily cluttering
    the entire image list for all projects.
  prefs: []
  type: TYPE_NORMAL
- en: For additional information regarding the sharing of images, visit [https://docs.openstack.org/image-guide/share-images.html](https://docs.openstack.org/image-guide/share-images.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using image snapshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In OpenStack, a snapshot is an image that reflects the state of an instance
    at a point in time. Snapshots are often used to backup instances or migrate instances
    from one cloud to another, and can even be shared with other projects like regular
    images.
  prefs: []
  type: TYPE_NORMAL
- en: Creating snapshots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Snapshots in OpenStack can be created using the `openstack server image create`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When creating a snapshot, ensure that you are authenticated as an administrator
    or are the owner of the instance. You will need the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: Instance name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our example, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instance name: `COOKBOOK_TEST_INSTANCE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image: `COOKBOOK_TEST_SNAPSHOT_20170824`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to create
    a snapshot with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Images snapshots are created with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The creation of a snapshot results in the system writing the instance's disk
    to a temporary file on the compute node and uploading it to the OpenStack Image
    service as a new image. When an instance's disk is located on a Ceph backend,
    the snapshot occurs on the backend itself and the compute node filesystem is not
    involved. The resulting snapshot/image can then be used to boot new instances
    within the same cloud, or it can be downloaded and copied to an offline storage
    system or another cloud.
  prefs: []
  type: TYPE_NORMAL
- en: The `name` parameter defines the name of the image when stored in the image
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: The `<server>` parameter defines the name or ID of the instance from which the
    snapshot is taken.
  prefs: []
  type: TYPE_NORMAL
- en: When specified, the `--wait` option forces OpenStack to perform the snapshot
    in the foreground, meaning the CLI will be unavailable until the task is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Using image metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Images have properties known as **metadata** that help describe the image and
    how it relates to other OpenStack components. The metadata that is applied to
    an image can be used to enable specific functionality in other OpenStack services
    or to determine the scheduling of an instance to a host based on CPU architectures
    or features, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Setting image metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image metadata in OpenStack can be manipulated using the `openstack image set`
    command. The `--property` argument can be used to set additional properties using
    the `key=value` pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When setting image metadata, ensure that you are authenticated as an administrator
    or are the owner of the image. You will need the following details, at a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Property name and value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our examples, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_UBUNTU_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Property name and value: `architecture=m68k, os_distro=ubuntu`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to set image
    metadata with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'No output is returned if the operation is successful. However, using `openstack
    image show` will reveal that the properties have been set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When image metadata is set in OpenStack, the properties have an impact on how
    the system handles instances using that image. Properties such as `hypervisor_type`
    and `architecture` affect how an instance is scheduled to a host, while other
    properties such as `hw_disk_bus` and `hw_cdrom_bus` affect how virtual devices
    are connected to the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to schedule instances based on image metadata, be sure to include the
    `'ImagePropertiesFilter'` filter in the `enabled_filters` list in `/etc/nova/nova.conf`.
    This is a default in most OpenStack installations, including the environment built
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this environment, booting an instance using the modified image requiring
    an architecture of `m68k` (Motorola 68000) should result in the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the image to require `x86_64` or removing the property altogether
    should allow the instance to be scheduled according to other defined metadata
    or environmental defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'A current list of image metadata properties at time of writing can be found
    at the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.openstack.org/python-glanceclient/latest/cli/property-keys.html](https://docs.openstack.org/python-glanceclient/latest/cli/property-keys.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Removing image metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image metadata in OpenStack can be removed using the `openstack image unset`
    command. The `--property` argument can be used to unset individual properties.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When removing image metadata, ensure that you are authenticated as an administrator
    or are the owner of the image. You will need the following details, at a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Property name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our examples, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_UBUNTU_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Property name: `architecture`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to unset
    image metadata with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: No output is returned if the operation is successful. To verify that the property
    has been removed, use the `openstack image show` command.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like other OpenStack objects, images and snapshots are susceptible to accidental
    deletion by users. By default, images are unprotected, meaning they can be deleted
    at any time by a user within a project. The following sections explain how an
    image can be protected to ensure its survival.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Images can be protected using the `openstack image set` command with the `--protected`
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When protecting an image, ensure that you are authenticated as an administrator
    or are the owner of the image. You will need the following details, at a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our examples, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_UBUNTU_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to protect
    an image with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'No output is returned if the operation is successful. Use the `openstack image
    show` command to reveal the status of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an image is protected in OpenStack, users are unable to delete the image.
    Attempting to delete a protected image results in an error similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Protecting an image is a useful step in ensuring that snapshots and other special
    images remain unharmed in a cloud shared by many users and projects.
  prefs: []
  type: TYPE_NORMAL
- en: Unprotecting an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Images can be unprotected using the `openstack image set` command with the `--unprotected`
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When unprotecting an image, ensure that you are authenticated as an administrator
    or are the owner of the image. You will need the following details, at a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our examples, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_UBUNTU_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to unprotect
    an image with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: No output is returned if the operation is successful. Use the `openstack image
    show` command to reveal the status of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Deactivating images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, images are available for use immediately upon completion of the
    uploading process. At times, it may be necessary to deactivate an image to prevent
    users from booting instances with the image, especially in cases where the image
    may be outdated but must be retained for archival purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Deactivating an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Images can be deactivated using the `openstack image set` command with the `--deactivate`
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When deactivating an image, ensure that you are authenticated as an administrator
    or are the owner of the image. You will need the following details, at a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our examples, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_UBUNTU_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to deactivate
    an image with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'No output is returned if the operation is successful. Use the `openstack image
    show` command to reveal the status of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an image is deactivated in OpenStack, users are unable to boot instances
    using the image. Attempting to boot an instance with a deactivated image results
    in an error similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Deactivating an image is a useful step in ensuring that images are retained
    but unusable. Existing instances using the image are not impacted.
  prefs: []
  type: TYPE_NORMAL
- en: Activating an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deactivated images can be activated using the `openstack image set` command
    with the `--activate` argument.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When activating an image, ensure that you are authenticated as an administrator
    or are the owner of the image. You will need the following details, at a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: Image name or ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our examples, the following will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image name: `COOKBOOK_UBUNTU_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the OpenStack client installed on our system, we are now able to activate
    an image with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: No output is returned if the operation is successful. Use the `openstack image
    show` command to reveal the status of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users can create custom images of various operating systems that can be used
    within an OpenStack environment. Tools such as `cloud-init` can be installed in
    the image to provide a method of bootstrapping an instance once it has been deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of `cloud-init` is beyond the scope of this book. More information can
    be found at [https://cloud-init.io](https://cloud-init.io).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, ensure that you are using an operating system that is not the OpenStack
    environment used throughout this book. Software packages and libraries needed
    to create images may conflict with the software currently installed, and could
    result in a broken environment. In this example, we will use a virtual machine
    configured with Ubuntu 16.04 LTS to create a custom CentOS 7 image.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configuring a virtual machine with the Ubuntu 16.04 LTS operating system is
    beyond the scope of this book. A physical server can be used in lieu of a virtual
    machine, if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following packages are prerequisites for the host building of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '`qemu-kvm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libvirt-bin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`virt-manager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using `apt`, install the packages with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps within the virtual machine to create a custom
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to your home directory and create a kickstart file named `ks.cfg` with
    the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an empty 10 GB virtual disk to be used by the CentOS virtual machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following commands to initiate an unattended installation of the
    CentOS operating system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the installation is being performed inside a virtual machine using nested
    virtualization, you may need to change `virt-type` to `qemu` from `kvm` for the
    machine to start properly. Use `kvm` for better performance if the image is being
    built without nested virtualization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output returned should resemble the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the host machine, console to the newly-created CentOS virtual machine
    and log in as the `root` user with the `openstack` password. To escape from the
    console session, press **Ctrl** + **]**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To refresh the console, press the **Enter** key. The output will resemble the
    following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00128.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The guest should be in the process of booting, and a live console log will be
    displayed. The installation process is automated and could take a while depending
    on the resources available to the host performing the build.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When the installation is complete, the output will resemble the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The console session should end, and you will be returned to a prompt on the
    host.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the VM with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the host machine, console to the CentOS virtual machine and log in as
    the `root` user with the `openstack` password. To escape from the console session,
    press **Ctrl** + **]**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To refresh the console, press the **Enter** key. The output will resemble the
    following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the guest, install the `epel-release` and `cloud-init` packages with the
    following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using a text editor, replace the guest''s `cloud.cfg` file at `/etc/cloud/cloud.cfg`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The contents of `cloud.cfg` are constructed in YAML, and are interpreted by
    `cloud-init` upon startup. In this example, the default username used to access
    the instance is `centos` and no password is set. Instead, an SSH key must be used
    and will be pushed to the instance via the OpenStack metadata service. Refer to
    [Chapter 5](part0062_split_000.html#1R42S1-189e69df43a248268db97cde1b1a8e47 "Chapter 5. Nova
    – OpenStack Compute"), *Nova – OpenStack Compute*, for more information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Ensure that the guest can communicate with the metadata service with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove persistent rules with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove machine-specific MAC address and UUID. Edit the `/etc/sysconfig/network-scripts/ifcfg-eth0`
    file and remove lines starting with `HWADDR` and `UUID`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After making the changes, ensure that the interface configuration file resembles
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you need IPv6 support, modify the interface file accordingly to ensure that
    instances using the image can procure their IPv6 address via DHCPv6 or SLAAC.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Clean up various files and directories using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From within the guest, cleanly shutdown the guest using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the guest is shutdown, the console session should end and you will be
    returned to a prompt on the host. Transfer the disk located at `/var/lib/libvirt/images/centos-7.qcow2`
    to your home directory, where it can be transferred out of the host and onto a
    client, where the OpenStack command-line utility is installed. Using the OpenStack
    client, upload the image to the OpenStack image repository:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should resemble the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00129.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: For more information on building custom images, visit [https://docs.openstack.org/image-guide/create-images-manually.html](https://docs.openstack.org/image-guide/create-images-manually.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
