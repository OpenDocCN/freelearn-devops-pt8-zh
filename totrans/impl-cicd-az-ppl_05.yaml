- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing the Build Pipeline Using Deployment Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created a pipeline using YAML, and we learned the
    process of creating jobs and tasks in the YAML format and exporting and importing
    a build pipeline. This chapter will dive deep into creating a pipeline using standard
    tasks. By the end of this chapter, you will have learned how to create a build
    pipeline for web application development, including Node.js, .NET Core, Docker,
    and Microsoft SQL Server, both on-premises and in Azure, using beginner-friendly
    tasks that make it easy to understand the concept.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Node.js and **Node Package Manager** (**NPM**) tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with .NET Core CLI tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Docker tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with SQL Server deployment tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by learning how to create a pipeline using Node.js and NPM tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Node.js and NPM tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to use Node.js and NPM commands to build and deploy Node.js applications.
    There are many predefined tasks to build such applications in an Azure pipeline.
    Follow these steps to create a pipeline using Node.js and NPM tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in to the Azure DevOps portal, select your organization, navigate
    to the **Pipelines** page, and click on **New pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.1 – A new pipeline](img/B18875_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – A new pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Azure Repos Git**, which is a source code repository for this demo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Selecting Azure Repos Git](img/B18875_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Selecting Azure Repos Git
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **PacktAzureDevOps** repository that we created in [*Chapter 2*](B18875_02.xhtml#_idTextAnchor034):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Selecting a repository](img/B18875_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Selecting a repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Show more**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Showing more tasks](img/B18875_05_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Showing more tasks
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Node.js** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Selecting Node.js](img/B18875_05_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Selecting Node.js
  prefs: []
  type: TYPE_NORMAL
- en: 'You can rename the default filename, which is `azure-pipelines-1.yml`, by clicking
    on it and changing it to `node.yml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Editing the name of the file](img/B18875_05_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Editing the name of the file
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Save and run** | **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Saving a pipeline file](img/B18875_05_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Saving a pipeline file
  prefs: []
  type: TYPE_NORMAL
- en: After you select a template of Node.js and NPM tasks, you can continue changing
    the default NPM command that matches your Azure pipeline, such as which version
    of Node.js you need. The following section will show you how to create tasks for
    .NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: Working with .NET Core CLI tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For .NET applications, you must use .NET Core CLI commands to build and deploy
    .NET applications. There are many predefined tasks to build .NET applications
    in an Azure pipeline. Follow these steps to create a pipeline using .NET Core
    CLI tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow *steps 1 to 3* from the previous section for Node.js and NPM tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Starter pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Selecting the Starter pipeline option](img/B18875_05_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Selecting the Starter pipeline option
  prefs: []
  type: TYPE_NORMAL
- en: 'Rename the file from the default name to make it easier to understand what
    the YAML file is for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Renaming a pipeline file](img/B18875_05_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – Renaming a pipeline file
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Use .NET Core** task and click **Add**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Selecting the Use .NET Core task](img/B18875_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Selecting the Use .NET Core task
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `version` property to use .NET 6:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Updating the .NET version](img/B18875_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Updating the .NET version
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **.NET Core** task and click on **Add**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Selecting the .NET Core task](img/B18875_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – Selecting the .NET Core task
  prefs: []
  type: TYPE_NORMAL
- en: 'Review the two predefined .NET tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`UseDotNet@2` is used to install the .NET compiler version 6.0.x'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DotNetCoreCLI@2` is the .NET command to run a specific command, which is the
    `build` command'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.13 – A view of the .NET Core build task](img/B18875_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – A view of the .NET Core build task
  prefs: []
  type: TYPE_NORMAL
- en: After you create a starter task for the .NET CLI command, you can continue to
    customize your tasks by using the `DotNetCoreCLI@2` command, which specifies the
    `build` command to be used to build the .NET application, from source code to
    the .NET binary files. The following section will show you how to work with Docker
    tasks for containerized applications.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Docker tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For cloud-native applications, you need to use Docker commands to build and
    deploy cloud-native applications. There are many predefined tasks for building
    cloud-native applications in an Azure pipeline. You can perform the following
    steps to create a pipeline using Docker tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow *steps 1 to 4* as described in the previous section for .NET Core CLI
    tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rename the file for the Docker pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Renaming the file](img/B18875_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Renaming the file
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `DockerInstaller@0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows you how to add a **Docker CLI installer** task
    and fill in the details on this task:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Adding a Docker CLI installer task](img/B18875_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – Adding a Docker CLI installer task
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Docker** task and click on **Add**, and you will see the following
    code. This is the Docker task to build and push images in one task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows you how to add a Docker task and fill in the
    details:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Adding a Docker task](img/B18875_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – Adding a Docker task
  prefs: []
  type: TYPE_NORMAL
- en: For easy error handling, you can replace the `buildAndPush` task with separate
    *build* and *push* tasks. In the *push* task, you set the `condition` value as
    `succeeded()`, which ensures that the task will only run if the previous steps
    (in this case, the build task) are completed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following code to replace the `buildAndPush` task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The difference is that the `buildAndPush` task will build and push the image
    in one task, which means if you need to add a task between building and pushing,
    you cannot do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select the **Command line** task and click **Add**. Update the command
    line, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows you how to add a **Command line** task and fill
    in the details:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Adding a Command line task](img/B18875_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – Adding a Command line task
  prefs: []
  type: TYPE_NORMAL
- en: After running this pipeline, you will see the Docker image on your Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Working with SQL Server deployment tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to use SQL Server commands to build and deploy SQL Server applications.
    There are many tasks that need to be completed to build SQL Server applications
    in Azure Pipelines; follow these steps to create a pipeline using SQL Server deployment
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: You can follow *steps 1 to 4* as described in the *Working with .NET Core CLI*
    *tasks* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rename the file as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Renaming the file](img/B18875_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.18 – Renaming the file
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for `SQL Server database`, select the **SQL Server database deploy**
    task, and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s look at each property in detail:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`TaskType`: This could be `dacpac`, `sqlQuery`, or `sqlInline`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dacpac` means this task will execute the SQL commands from the `dacpac` file'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlQuery` means this task will execute the SQL commands, such as the `SELECT`,
    `UPDATE`, `INSERT`, and `DELETE` commands, in a SQL file'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlInline` means this task will execute the SQL directly as a NOT value in
    the SQL file'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SqlFile`: This is the full name path for a SQL file'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExecuteInTransaction`: If this is set to `true`, the task will execute a SQL
    file under the transaction scope'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServerName`: This can be a database server name or an IP'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DatabaseName`: This is a database name for execution'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AuthScheme`: This could be `sqlServerAuthentication`, which will use authentication
    from SQL Server, or `windowsAuthentication`, which will use authentication from
    Windows'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SqlUsername`: This is a user from SQL Server'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SqlPassword`: This is a password from SQL Server'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows you how to add the SQL **Data-Tier Application
    Package** (**DACPAC**) deployment task and fill in the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Adding the SQL Server database deploy task](img/B18875_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.19 – Adding the SQL Server database deploy task
  prefs: []
  type: TYPE_NORMAL
- en: After you create a SQL Server database deploy task, you can proceed to further
    customize your tasks. For instance, you can specify the `ServerName` parameter,
    which represents the database hostname or the server name of the SQL Server that
    this task should connect to. After making these customizations, you can save the
    pipeline file.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter taught you how to build and release pipelines, using standard NPM,
    the .NET Core CLI, Docker, and SQL Server deployment tasks. These predefined tasks
    are popular for building and deploying Node.js and .NET applications. They reduce
    the time spent by developers creating manual commands when running a pipeline
    to build those applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn in depth about integrating testing and security
    tasks to make your code and applications more reliable.
  prefs: []
  type: TYPE_NORMAL
