["```\n# Application used instead of 'class' or 'define'\napplication 'example' (\n  $var,\n) {\n\n# app1 exports its database configuration items\n  example::app1 {\n    config => $var,\n    export => Database['app1'],\n  }\n\n# app2 both imports the previous database and exports its own type: Application\n  example::app2 {\n    config  => $var,\n    consume => Database['app1'],\n    export  => Application['app1'],\n  }\n```", "```\n#/etc/puppetlabs/code/environments/production/manifests/site.pp\nsite {\n  example {'app1':\n    var => 'config',\n    nodes => {\n      Node['database'] => [ Example::App1['app']],\n      Node['app']      => [ Example::App2['app']],\n    }\n  }\n}\n```", "```\nclass example::app2 (\n# $db_host is provided by the consume of the Database\n  $db_host,\n) {\n# Any resources, defined types or class calls in a regular manifest would be placed here.\n}\n# Note that the consume is outside of the class declaration\nExample::App2 consumes Database {\n  db_host => $host,\n}\n# Note that the produces is outside of both the class declaration, and above consume\nExample::App2 produces Http {\n  host => $::fqdn,\n  port => '80',\n}\n```", "```\n#lib/puppet/type/database.rb\n\n# Notice the :is_capability => true. This property creates this type as an\n# environment-wide service, to be produced and consumed.\nPuppet::Type.newtype :database, :is_capability => true do\n  newparam :host\nend\n```", "```\n[root@pe-puppet-master myapp]# puppet module install puppetlabs-mysql\nNotice: Preparing to install into /etc/puppetlabs/code/environments/production/modules ...\nNotice: Downloading from https://forgeapi.puppet.com ...\nNotice: Installing -- do not interrupt ...\n/etc/puppetlabs/code/environments/production/modules\n└─┬ puppetlabs-mysql (v5.4.0)\n ├── puppet-staging (v3.2.0)\n ├── puppetlabs-stdlib (v4.25.1)\n └── puppetlabs-translate (v1.1.0)\n[root@pe-puppet-master myapp]# puppet module install puppetlabs-apache\nNotice: Preparing to install into /etc/puppetlabs/code/environments/production/modules ...\nNotice: Downloading from https://forgeapi.puppet.com ...\nNotice: Installing -- do not interrupt ...\n/etc/puppetlabs/code/environments/production/modules\n└─┬ puppetlabs-apache (v3.1.0)\n ├── puppetlabs-concat (v4.2.1)\n └── puppetlabs-stdlib (v4.25.1)\n[root@pe-puppet-master myapp]# puppet module install hunner-wordpress\nNotice: Preparing to install into /etc/puppetlabs/code/environments/production/modules ...\nNotice: Downloading from https://forgeapi.puppet.com ...\nNotice: Installing -- do not interrupt ...\n/etc/puppetlabs/code/environments/production/modules\n└─┬ hunner-wordpress (v1.0.0)\n ├── puppetlabs-concat (v4.2.1)\n ├── puppetlabs-mysql (v5.4.0)\n └── puppetlabs-stdlib (v4.25.1)\n```", "```\nsite {\n  myapp { 'myapp':\n      nodes => {\n        Node['mysql'] => [ Myapp::Db['myapp']],\n        Node['appserver'] => [ Myapp::Web['myapp']],\n        Node['haproxy'] => [ Myapp::Lb['myapp']],\n    }\n  }\n}\n\nnode 'puppetmaster' {\n  include role::puppetmaster\n}\n\n# To keep the sample simple, firewalls have been disabled on all machines.\nservice {'firewalld': ensure => stopped }\nservice {'iptables':  ensure => stopped }\n```", "```\napplication myapp (\n  $dbuser = 'wordpress',\n  $dbpass = 'w0rdpr3ss!',\n  $webpath = '/var/www/wordpress',\n  $vhost = 'appserver',\n) {\n  myapp::db { $name:\n    dbuser => $dbuser,\n    dbpass => $dbpass,\n    export => Sql[$name],\n  }\n  myapp::web { $name:\n    webpath => $webpath,\n    consume => Sql[$name],\n    vhost => $vhost,\n  }\n}\n```", "```\n# lib/puppet/type/db.rb\n# Adding :is_capability to the custom type marks the resources as service resources\nPuppet::Type.newtype :db, :is_capability => true do\n  newparam :name, :is_namevar => true\n  newparam :user\n  newparam :password\n  newparam :port\n  newparam :host\nend\n```", "```\ndefine myapp::db (\n  $dbuser,\n  $dbpass,\n  $host = $::fqdn,\n){\n\n  class {'::mysql::server':\n    root_password => 'Sup3rp@ssword!',\n    override_options => {\n      'mysqld' => {\n        'bind-address' => '0.0.0.0'\n      }\n    }\n  }\n\n  mysql::db { $name:\n    user => $dbuser,\n    password => $dbpass,\n    host => '%',\n    grant => ['ALL PRIVILEGES'],\n  }\n}\nMyapp::Db produces Db {\n  dbuser => $dbuser,\n  dbpass => $dbpass,\n  dbhost => $host,\n  dbname => $name,\n}\n```", "```\ndefine myapp::web (\n  $webpath,\n  $vhost,\n  $dbuser,\n  $dbpass,\n  $dbhost,\n  $dbname,\n  ) {\n\n    package {['php',\n              'mysql',\n              'php-mysql',\n              'php-gd'\n             ]:\n      ensure => installed,\n    }\n\n    class {'apache':\n      default_vhost => false\n    }\n\n    include ::apache::mod::php\n\n    apache::vhost { $vhost:\n      port => '80',\n      docroot => $webpath,\n      require => File[$webpath],\n    }\n\n    file { $webpath:\n      ensure => directory,\n      owner => 'apache',\n      group => 'apache',\n      require => Package['httpd'],\n    }\n\n    class { '::wordpress':\n      db_user => $dbuser,\n      db_password => $dbpass,\n      db_host => $dbhost,\n      db_name => $dbname,\n      create_db => false,\n      create_db_user => false,\n      install_dir => $webpath,\n      wp_owner => 'apache',\n      wp_group => 'apache',\n    }\n  }\nMyapp::Web consumes Db { }\n```", "```\nmyapp\n├── lib\n│   └── puppet\n│       └── type\n│           ├── sql.rb\n├── manifests\n    ├── db.pp\n    ├── init.pp\n    └── web.pp\n```", "```\n[root@pe-puppet-master manifests]# puppet app show\nMyapp[myapp]\n Myapp::Db[myapp] => mysql\n + produces Sql[myapp]\n Myapp::Web[myapp] => appserver\n consumes Sql[myapp]\n```", "```\n[root@pe-puppet-master manifests]# puppet job plan --application Myapp --environment production\n\n+-------------------+------------+\n| Environment | production |\n| Target | Myapp |\n| Concurrency Limit | None |\n| Nodes | 2 |\n+-------------------+------------+\n\nApplication instances: 1\n - Myapp[myapp]\n\nNode run order (nodes in level 0 run before their dependent nodes in level 1, etc.):\n0 -----------------------------------------------------------------------\nmysql\n Myapp[myapp] - Myapp::Db[myapp]\n\n1 -----------------------------------------------------------------------\nappserver\n Myapp[myapp] - Myapp::Web[myapp]\n\nUse `puppet job run --application 'Myapp' --environment production` to create and run a job like this.\nNode catalogs may have changed since this plan was generated.\n```", "```\nUse `puppet job run --application 'Myapp' --environment production` to create and run a job like this.\nNode catalogs may have changed since this plan was generated.\n[root@pe-puppet-master manifests]# puppet job run --application 'Myapp' --environment production\nStarting deployment ...\n\n+-------------------+------------+\n| Job ID | 8 |\n| Environment | production |\n| Target | Myapp |\n| Concurrency Limit | None |\n| Nodes | 2 |\n+-------------------+------------+\n\nApplication instances: 1\n - Myapp[myapp]\n\nNode run order (nodes in level 0 run before their dependent nodes in level 1, etc.):\n0 -----------------------------------------------------------------------\nmysql\n Myapp[myapp] - Myapp::Db[myapp]\n\n1 -----------------------------------------------------------------------\nappserver\n Myapp[myapp] - Myapp::Web[myapp]\n\nNew job created: 8\nStarted puppet run on mysql ...\nFinished puppet run on mysql - Success!\n Resource events: 0 failed 4 changed 32 unchanged 0 skipped 0 noop\n Report: https://pe-puppet-master/#/run/jobs/8/nodes/mysql/report\nStarted puppet run on appserver ...\nFinished puppet run on appserver - Success!\n Resource events: 0 failed 3 changed 130 unchanged 0 skipped 0 noop\n Report: https://pe-puppet-master/#/run/jobs/8/nodes/appserver/report\n\nSuccess! 2/2 runs succeeded.\n```", "```\n[root@pe-puppet-master myapp]# puppet module install puppetlabs-haproxy\nNotice: Preparing to install into /etc/puppetlabs/code/environments/production/modules ...\nNotice: Downloading from https://forgeapi.puppet.com ...\nNotice: Installing -- do not interrupt ...\n/etc/puppetlabs/code/environments/production/modules\n└─┬ puppetlabs-haproxy (v2.1.0)\n ├── puppetlabs-concat (v4.2.1)\n └── puppetlabs-stdlib (v4.25.1)\n[root@pe-puppet-master myapp]# puppet module install puppetlabs/app_modeling\nNotice: Preparing to install into /etc/puppetlabs/code/environments/production/modules ...\nNotice: Downloading from https://forgeapi.puppet.com ...\nNotice: Installing -- do not interrupt ...\n/etc/puppetlabs/code/environments/production/modules\n└─┬ puppetlabs-app_modeling (v0.2.0)\n └── puppetlabs-stdlib (v4.25.1)\n```", "```\n# For the purposes of this demo, the next two lines can be used to ensure firewalls\n# are off for all CentOS nodes.\n\nservice {'iptables': ensure => stopped }\nservice {'firewalld': ensure => stopped }\n\nsite {\n  myapp { 'myapp':\n    dbpass => 'rarypass',\n    nodes => {\n      Node['mysql']       => [ Myapp::Db['myapp']],\n      Node['wordpress']   => [ Myapp::Web['myapp-1']],\n      Node['wordpress-2'] => [ Myapp::Web['myapp-2']],\n      Node['haproxy']     => [ Myapp::Lb['myapp-1']],\n      Node['haproxy-2']   => [ Myapp::Lb['myapp-2']],\n    }\n  }\n}\n```", "```\napplication myapp (\n  $dbuser = 'wordpress',\n  $dbpass = 'w0rdpr3ss!',\n  $dbname = 'wordpress',\n  $webpath = '/var/www/wordpress',\n  $webport = '80'\n) {\n\n  myapp::db { $name:\n    dbuser => $dbuser,\n    dbpass => $dbpass,\n    dbname => $dbname,\n    export => Database[\"db-${name}\"],\n  }\n\n# This section can be confusing, but here is essentially what's going on\n# $allwebs is an array full of every node assigned to Myapp::Web in our application\n# $https takes that $allwebs array of every node, creates a service resource,\n# adds myapp::web to each node providing values for that service resource, and then\n# returns all transformed service resource names back to the array.\n\n# We're transforming each node listed in our site.pp into an array of Http[<nodename>]\n# resource calls. And on each node we'll apply our defined type inside of the\n# same map.\n\n  $allwebs = collect_component_titles($nodes, Myapp::Web)\n\n  $https = $allwebs.map |$wordpress_name| {\n\n    $http = Http[\"web-${wordpress_name}\"]\n\n    myapp::web { \"$wordpress_name\":\n      dbuser => $dbuser,\n      dbpass => $dbpass,\n      dbname => $dbname,\n      webport => $webport,\n      webpath => $webpath,\n      consume => Database[\"db-${name}\"],\n      export => $http,\n    }\n\n    $http\n\n  }\n\n# We'll use an each statement here instead of a map, because we don't need\n# any Load balancer values returned. They're the end of the chain. Our each\n# statement covers each node, and $https from before is used to add nodes\n# to the load balancer\n\n  $alllbs = collect_component_titles($nodes, Myapp::Lb)\n\n  $alllbs.each |$load_balancer| {\n\n    myapp::lb { \"${load_balancer}\":\n      balancermembers => $https,\n      require => $https,\n      port => '80',\n      balance_mode => 'roundrobin',\n    }\n\n  }\n\n}\n```", "```\ndefine myapp::db (\n  $dbuser,\n  $dbpass,\n  $dbname,\n){\n\n  class {'::mysql::server':\n    root_password => 'Sup3rp@ssword!',\n    override_options => {\n      'mysqld' => {\n        'bind-address' => '0.0.0.0'\n      }\n    }\n  }\n\n  mysql::db { $dbname:\n    user => $dbuser,\n    password => $dbpass,\n    host => '%',\n    grant => ['ALL'],\n  }\n}\n# This produces line is producing 2 values: host and port. We'll use host directly\n# on Myapp::Web, but the port designator is used to pass the Resource Type test for\n# Database using puppetlabs/app_modeling. Without the port, the test will fail to find\n# the upstream Database and won't finish the agent run.\nMyapp::Db produces Database {\n  host => $::fqdn,\n  port => '3306',\n\n}\n```", "```\ndefine myapp::web (\n  $webpath,\n  $webport,\n  $dbuser,\n  $dbpass,\n  $dbhost,\n  $dbname,\n  ) {\n\n    package {['php','mysql','php-mysql','php-gd']:\n      ensure => installed,\n    }\n\n    class {'apache':\n      default_vhost => false\n    }\n\n    include ::apache::mod::php\n\n    apache::vhost { $::fqdn:\n      port => $webport,\n      docroot => $webpath,\n      require => [File[$webpath]],\n    }\n\n    file { $webpath:\n      ensure => directory,\n      owner => 'apache',\n      group => 'apache',\n      require => Package['httpd'],\n    }\n\n    class { '::wordpress':\n      db_user => $dbuser,\n      db_password => $dbpass,\n      db_host => $dbhost,\n      db_name => $dbname,\n      create_db => false,\n      create_db_user => false,\n      install_dir => $webpath,\n      wp_owner => 'apache',\n      wp_group => 'apache',\n    }\n  }\nMyapp::Web consumes Database {\n  dbhost => $host,\n}\nMyapp::Web produces Http {\n  host => $::clientcert,\n  port => $webport,\n  ip => $::networking['interfaces']['enp0s8']['ip'],\n  # Like the port parameter in the Database provider, we'll need to send the status_codes\n  # flag to the Http provider to ensure we don't only accept a 302 status code.\n  # A new wordpress application sends status code 200, so we'll let it through as well.\n  status_codes => ['302','200'],\n}\n```", "```\ndefine myapp::lb (\n  $balancermembers,\n  String $ipaddress = '0.0.0.0',\n  String $balance_mode = 'roundrobin',\n  String $port = '80',\n) {\n\n  include haproxy\n\n  haproxy::listen {\"wordpress-${name}\":\n    collect_exported => false,\n    ipaddress => $::networking['interfaces']['enp0s8']['ip'],\n    mode => 'http',\n    options => {\n      'balance' => $balance_mode,\n    },\n    ports => $port,\n  }\n\n  $balancermembers.each |$member| {\n    haproxy::balancermember { $member['host']:\n      listening_service => \"wordpress-${name}\",\n      server_names => $member['host'],\n      ipaddresses => $member['ip'],\n      ports => $member['port'],\n    }\n  }\n\n}\n```", "```\n[root@pe-puppet-master manifests]# puppet app show\nMyapp[myapp]\n Myapp::Db[myapp] => mysql\n + produces Database[db-myapp]\n Myapp::Web[myapp-1] => appserver\n + produces Http[web-myapp-1]\n consumes Database[db-myapp]\n Myapp::Web[myapp-2] => appserver2\n + produces Http[web-myapp-2]\n consumes Database[db-myapp]\n Myapp::Lb[myapp-1] => haproxy\n consumes Http[web-myapp-1]\n consumes Http[web-myapp-2]\n Myapp::Lb[myapp-2] => haproxy2\n consumes Http[web-myapp-1]\n consumes Http[web-myapp-2]\n```", "```\n[root@pe-puppet-master manifests]# puppet job plan --application Myapp --environment production\n\n+-------------------+------------+\n| Environment | production |\n| Target | Myapp |\n| Concurrency Limit | None |\n| Nodes | 5 |\n+-------------------+------------+\n\nApplication instances: 1\n - Myapp[myapp]\n\nNode run order (nodes in level 0 run before their dependent nodes in level 1, etc.):\n0 -----------------------------------------------------------------------\nmysql\n Myapp[myapp] - Myapp::Db[myapp]\n\n1 -----------------------------------------------------------------------\nwordpress\n Myapp[myapp] - Myapp::Web[myapp-1]\nwordpress2\n Myapp[myapp] - Myapp::Web[myapp-2]\n\n2 -----------------------------------------------------------------------\nhaproxy\n Myapp[myapp] - Myapp::Lb[myapp-1]\nhaproxy2\n Myapp[myapp] - Myapp::Lb[myapp-2]\n\nUse `puppet job run --application 'Myapp' --environment production` to create and run a job like this\n```", "```\n[root@pe-puppet-master production]# puppet job run --application Myapp --environment production --verbose\nStarting deployment ...\n\n+-------------------+------------+\n| Job ID | 42 |\n| Environment | production |\n| Target | Myapp |\n| Concurrency Limit | None |\n| Nodes | 5 |\n+-------------------+------------+\n\nApplication instances: 1\n - Myapp[myapp]\n\nNode run order (nodes in level 0 run before their dependent nodes in level 1, etc.):\n0 -----------------------------------------------------------------------\nmysql\n Myapp[myapp] - Myapp::Db[myapp]\n\n1 -----------------------------------------------------------------------\nwordpress\n Myapp[myapp] - Myapp::Web[myapp-1]\nwordpress-2\n Myapp[myapp] - Myapp::Web[myapp-2]\n\n2 -----------------------------------------------------------------------\nhaproxy\n Myapp[myapp] - Myapp::Lb[myapp-1]\nhaproxy-2\n Myapp[myapp] - Myapp::Lb[myapp-2]\n\nNew job created: 42\nStarted puppet run on mysql ...\nFinished puppet run on mysql - Success!\n Resource events: 0 failed 9 changed 27 unchanged 0 skipped 0 noop\n Report: https://pe-puppet-master/#/run/jobs/42/nodes/mysql/report\nStarted puppet run on wordpress-2 ...\nStarted puppet run on wordpress ...\nFinished puppet run on wordpress-2 - Success!\n Resource events: 0 failed 81 changed 66 unchanged 0 skipped 0 noop\n Report: https://pe-puppet-master/#/run/jobs/42/nodes/wordpress-2/report\nFinished puppet run on wordpress - Success!\n Resource events: 0 failed 81 changed 66 unchanged 0 skipped 0 noop\n Report: https://pe-puppet-master/#/run/jobs/42/nodes/wordpress/report\nStarted puppet run on haproxy-2 ...\nStarted puppet run on haproxy ...\nFinished puppet run on haproxy - Success!\n Resource events: 0 failed 4 changed 30 unchanged 0 skipped 0 noop\n Report: https://pe-puppet-master/#/run/jobs/42/nodes/haproxy/report\nFinished puppet run on haproxy-2 - Success!\n Resource events: 0 failed 4 changed 30 unchanged 0 skipped 0 noop\n Report: https://pe-puppet-master/#/run/jobs/42/nodes/haproxy-2/report\n\nSuccess! 5/5 runs succeeded.\nDuration: 58 sec\n```"]