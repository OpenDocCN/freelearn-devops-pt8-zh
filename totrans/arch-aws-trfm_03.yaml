- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Your First Terraform Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’re new to Terraform and looking to get started with your first project,
    this chapter is for you. In this chapter, we’ll cover the basics of building your
    first Terraform configuration for AWS. We’ll start by discussing how to install
    Terraform and prepare it for use with AWS. Then, we’ll guide you through the process
    of building your first Terraform configuration and template. We’ll also show you
    how to provision and test your first template so you can see your infrastructure
    come to life. By the end of this chapter, you’ll have the foundational knowledge
    and skills to build your own infrastructure with Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to install Terraform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install/prepare Terraform for AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your first Terraform configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your first Terraform template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning and testing your template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with Terraform, it’s important to understand how to properly
    install and manage the Terraform installation. Installing Terraform can be challenging,
    but there are many online resources available to guide you through the process,
    including the official Terraform documentation. Terraform is distributed as a
    binary package by HashiCorp, and it can also be installed using popular package
    managers. Installing Terraform is the first step to creating your first project
    on Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go over different installation methods next.
  prefs: []
  type: TYPE_NORMAL
- en: Manual installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For manual installation, you have the choice of downloading a pre-compiled binary
    from the Terraform **Downloads** page, or compiling a binary from the source.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-compiled binary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install Terraform, you need to download the correct package for your operating
    system in the form of a ZIP archive. The appropriate package can be found by selecting
    your operating system on the Terraform website: [https://www.terraform.io/downloads](https://www.terraform.io/downloads).'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have downloaded the appropriate Terraform package for your system,
    the next step is to unzip the package. Inside the package, you will find a single
    binary named `terraform`, which is the main executable for Terraform. You can
    safely remove any other files in the package, and Terraform will still function
    properly.
  prefs: []
  type: TYPE_NORMAL
- en: To use Terraform, you also need to ensure that the `terraform` binary is added
    to your system’s `PATH` environment variable so that it can be executed from any
    directory in the terminal. The process for setting this up varies depending on
    your operating system, but instructions can typically be found online or in the
    Terraform documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Mac or Linux PATH configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Print a colon-separated list of locations in your `PATH`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Move the Terraform binary to one of the listed locations. This command assumes
    that the binary is currently in your downloads folder and that your `PATH` includes
    `/usr/local/bin`, but you can customize it if your locations are different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Windows PATH configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `PATH` configuration is stored in the registry, which you can edit through
    the following interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Control Panel** | **System** | **System settings** | **Environment variables**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down through the system variables until you find `PATH`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **edit** and make the change accordingly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Be sure to include a semicolon at the end of the previous variable as these
    are used as delimiters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Launch a new console for the settings to take effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compiling from source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you wish to compile the Terraform binary from source, you can clone the
    HashiCorp Terraform repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the new directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, compile the binary. This command will compile the binary and store it
    in `$GOPATH/bin/terraform`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After installing Terraform, it is important to ensure that the `terraform` binary
    is added to your system’s `PATH` environment variable so that it can be executed
    from anywhere. This process may vary depending on your operating system, but typically
    involves adding the location of the `terraform` binary to the `PATH` variable
    using a command or by manually editing system files.
  prefs: []
  type: TYPE_NORMAL
- en: Popular package managers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several popular package managers that simplify the process of installing
    Terraform on different operating systems. These package managers allow you to
    manage and update multiple software packages from a single **Command-Line Interface**
    (**CLI**). In this section, we will explore some of the most popular package managers
    for Terraform, including Chocolatey for Windows, Homebrew for macOS, and APT and
    Yum for Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew on macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install Terraform on Mac macOS, you can utilize the free and open source
    package management system for Mac macOS known as Homebrew. Before installing Terraform
    itself, you need to install the HashiCorp `tap`, which is a repository that contains
    all the Homebrew packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, install Terraform with `hashicorp/tap/terraform`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This installs a signed binary and is automatically updated with every new official
    release.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update to the latest version of Terraform, first update Homebrew:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the `upgrade` command to download and use the latest Terraform version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Chocolatey on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install Terraform on Windows using Chocolatey, you can use the CLI. Chocolatey
    is a free and open source package manager for Windows that simplifies the process
    of installing and managing software on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Chocolatey and the Terraform package are *not* directly maintained by HashiCorp.
    The latest version of Terraform is always available for manual installation.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HashiCorp officially maintains and signs packages for Ubuntu/Debian, CentOS/RHEL,
    Fedora, and Amazon Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu/Debian
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Make sure that your system is up to date, and that you have the `gnupg`, `software-properties-common`,
    and `curl` packages installed. These packages are necessary to verify the GPG
    signature of HashiCorp and install its Debian package repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the HashiCorp GPG key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the official HashiCorp repository to your system by using the appropriate
    command for your system. The command uses `lsb_release -cs` to find the distribution
    release codename for your current system, such as `buster`, `groovy`, or `sid`,
    and adds it to the repository file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the package information from HashiCorp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Terraform from the new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: CentOS/RHEL
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Install `yum-config-manager` to manage your repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `yum-config-manager` to add the official HashiCorp Linux repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Terraform from the new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Fedora
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Install `dnf config-manager` to manage your repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `dnf config-manager` to add the official HashiCorp Linux repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Terraform from the new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Amazon Linux
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Install `yum-config-manager` to manage your repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `yum-config-manager` to add the official HashiCorp Linux repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Terraform from the new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Verifying the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have completed the installation process, it is essential to verify
    that Terraform is installed correctly. To do this, you can open a new terminal
    session and list Terraform’s available subcommands. This will help you ensure
    that Terraform is functioning correctly and that you can begin to create and manage
    infrastructure using Terraform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are getting a response similar to the following, that means your installation
    was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have covered how to install Terraform, let’s move on to preparing
    Terraform for AWS by configuring our AWS account to allow Terraform to interact
    with the AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: How to install/prepare Terraform for AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once Terraform is installed, you can create your first infrastructure in AWS.
    Terraform generates an execution plan outlining the necessary steps to reach the
    desired infrastructure state and then executes it. As you make changes to the
    configuration, Terraform can determine the differences and create incremental
    execution plans to apply the changes.
  prefs: []
  type: TYPE_NORMAL
- en: In the following steps, let’s create an S3 bucket in AWS. First of all, there
    are some prerequisites to provision AWS resources in Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After a successful Terraform installation, you need the following ready for
    the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The AWS CLI installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An AWS account and associated credentials with permissions to create resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CLI installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **AWS CLI** is a comprehensive tool that enables you to manage your AWS
    services from a single, unified interface. It simplifies the management of multiple
    AWS services and allows for automation through scripts. By using the AWS CLI,
    you can execute AWS commands directly from the command line, making it easier
    to manage your AWS resources efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install `aws-cli`, your system must have the capability to extract or unzip
    the downloaded package. If your operating system does not have the built-in `unzip`
    command, you can use an equivalent. The AWS CLI requires `glibc`, `groff`, and
    `less`. These components are typically included by default in most major distributions
    of Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the installation package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the installer by unzipping it. If your Linux distribution does not
    have a built-in `unzip` command, you can use an alternative to extract it. The
    following command is an example of unzipping the package and creating a directory
    called `aws` under the current directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the installation command using the install file located in the extracted
    AWS directory. The default installation path is `/usr/local/aws-cli` and a symbolic
    link will be created in `/usr/local/bin`. The command may require the use of `sudo`
    to grant write permissions to those directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm the installation with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive a response similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have `sudo`/admin permissions, you can install the AWS CLI for all users
    on the computer with the following commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the file using the `curl` command. The `-o` option specifies the filename
    that the downloaded package is written to. In this example, the file is written
    to `AWSCLIV2.pkg` in the current folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This process is different on macOS systems, where you can run the standard
    macOS installer program to install Terraform. You simply need to specify the downloaded
    `.pkg` file as the source using the `-pkg` parameter to specify the package name
    and the `-target /` parameter to specify the installation drive. During the installation
    process, the files are installed to `/usr/local/aws-cli`, and a symlink is automatically
    created in `/usr/local/bin`. However, to grant write permissions to those folders,
    you must include `sudo` in the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the shell can find and run the `aws` command in your `$PATH`,
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The response should be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the `PATH` configuration and version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The response should be like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If the `aws` command cannot be found, you might need to restart your terminal
    and re-verify.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You require admin rights to install `aws-cli` on your Windows system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and run the AWS CLI MSI installer for Windows (64-bit): [https://awscli.amazonaws.com/AWSCLIV2.msi](https://awscli.amazonaws.com/AWSCLIV2.msi)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can run the `msiexec` command to run the MSI installer from
    Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify whether the AWS CLI is installed on your Windows machine by
    opening a Command Prompt window and running the `aws --``version` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This will display the installed version of the AWS CLI, confirming its successful
    installation on your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The response should be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: If Windows is unable to find the program, you might need to close and reopen
    the Command Prompt window to refresh the path and re-verify.
  prefs: []
  type: TYPE_NORMAL
- en: AWS account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you do not have an AWS account, you can create one with the following steps;
    if you do already have one, please skip the AWS credentials configuration part:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AWS home page at [https://aws.amazon.com/](https://aws.amazon.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Create an** **AWS account**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you provide accurate account information, including your email address,
    and select **Continue**. Entering an incorrect email address can result in being
    unable to access your AWS account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Personal** or **Professional**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your company or personal information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read and accept the AWS Customer Agreement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Create Account** and **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide your payment information on the **Payment Information** page and select
    **Verify and Add** to proceed. It’s mandatory to provide a valid payment method
    to complete the sign-up process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After completing the payment information, you will be asked to verify your phone
    number. You need to select the country or REGION code from the list and provide
    a phone number that you can access in the next few minutes for verification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the code displayed in the CAPTCHA, and then submit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the automated system contacts you, you need to enter the PIN you receive
    and then choose the **Continue** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Select a Support Plan** page, choose one of the available AWS Support
    plans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, wait for your new account to be activated. This usually takes a few
    minutes but can take up to 24 hours.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your account is fully activated, AWS will send you a confirmation email.
    Be sure to check your email inbox and spam folder for the confirmation message.
    After receiving the email message, you will have full access to all AWS services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS credentials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to interact with AWS via programmatic methods, it’s required to supply
    your AWS access keys. These keys authenticate your identity when making programmatic
    requests. Access keys could be either temporary credentials that are valid for
    a short-term period or long-term credentials, such as those linked to an IAM user
    or the AWS account’s root user.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use Terraform with AWS, it is recommended to create a dedicated
    user with specific permissions and generate access keys for the AWS CLI and Terraform
    CLI to communicate and provision resources.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an IAM user and credentials for Terraform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating an IAM user is a standard practice in AWS for security and resource
    access management. It is possible to create multiple IAM users and provide them
    with specific permissions to AWS resources. The process of creating an IAM user
    is straightforward, and is typically done when new team members join the company
    or when a new application needs access to AWS resources. For Terraform, you need
    to create an IAM user and assign appropriate permissions to provision resources
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation pane, choose **Users** and then **Add users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `terraform` as the username for the new user. This is the sign-in name for
    AWS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the type of access this user will have. You can select programmatic access
    and access to the AWS Management Console; I recommend just selecting programmatic
    access so you do not need to maintain a programmatic user’s password life cycle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose **Next: Permissions**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `terraform` user to a group, copy permissions from an existing user,
    or attach policies directly. If you are planning to provision all resources with
    this user, you can attach the **AdministratorAccess** policy to the user, but
    this will provide broad permission to all resources in the account, so make sure
    to keep your credentials secret.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose **Next: Tags**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Optional) On the **Tags** page, add metadata to the user by attaching tags
    as key-value pairs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose **Next: Review**. Verify the user permissions to be added to the new
    user. When you are ready to proceed, choose **Create user**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can view the access keys for the user by selecting the **Show** option next
    to each password and access key. To save the access keys, select the **Download
    .csv** option and save the file to a secure location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you have a user and credentials for the next steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you have installed and prepared Terraform for AWS, it’s time to start
    building your first Terraform configuration. With your AWS access keys and user
    permissions in place, you can now begin to write your Terraform code to provision
    your infrastructure in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Building your first Terraform configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing Terraform and the AWS CLI, it is time to configure connectivity
    between them to be able to create resources with Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'To authenticate the Terraform AWS provider with your IAM credentials, you need
    to set the `AWS_ACCESS_KEY_ID` environment variable in your terminal by adding
    your key after the `=` sign:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add your secret key as follows, again after the `=` sign:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify your credentials and connectivity with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'And you should receive a similar output to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have successfully built your first Terraform configuration, let’s
    move on to building your first Terraform template.
  prefs: []
  type: TYPE_NORMAL
- en: Building your first Terraform template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created our AWS account and an IAM user and set up the necessary credentials
    for Terraform and the AWS CLI to communicate with AWS to provision infrastructure.
    Let’s now start developing our first Terraform template.
  prefs: []
  type: TYPE_NORMAL
- en: 'A dedicated working directory is required for each Terraform configuration.
    To begin with, create a new directory for your first Terraform project. Any code
    editor or terminal can be used for this purpose, and we will provide the terminal
    commands for your convenience:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Change into the directory so that we can start to create files in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an empty file to define your infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `main.tf` file in your preferred text editor and copy the following
    configuration into the file. Save the file once you have added the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Here we explicitly state that we are using the AWS provider plugin from Terraform
    and demanding a version greater than 4.0\. We do not provide the access key/secret
    from the user in IAM that we created, because they were already imported into
    the terminal, and you should never, ever hardcode your credentials in Terraform
    templates! We also supply the REGION in which we want to make all changes. In
    this example, we are using `us-east-1`.
  prefs: []
  type: TYPE_NORMAL
- en: We then use the `aws_vpc` resource identifier to state that we are trying to
    bring up a VPC instance, followed by the `example` name identifier. (This name
    can be anything you like.)
  prefs: []
  type: TYPE_NORMAL
- en: We provide the `cidr_block` information to give the VPC the cidr (IP address
    space) information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will run the `terraform init` command in the directory where we created
    our `main.tf` file to download and initialize the appropriate provider plugins.
    In this case, we are downloading the AWS provider plugin we specified in our `main.tf`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The providers are now installed and we have the project initialized. Let’s
    validate our template with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The output must be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: After verifying our configuration, we can use `terraform fmt` to format our
    configuration files to use the correct format and style. In Terraform’s newer
    versions, the introduction of new formatting rules in `terraform fmt` aren’t considered
    a breaking change. However, our objective is to keep changes to a minimum for
    configurations that already conform to the style guides provided in the Terraform
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning and testing your template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the validation, let’s run the `terraform plan` command. This will let
    us see what Terraform will do before we decide to apply it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Terraform provides a dependable and secure way to manage your infrastructure
    life cycle through the use of declarative configuration files. The largest hurdle
    encountered when handling **Infrastructure as Code** (**IaC**) is a phenomenon
    known as drift. Drift refers to the discrepancy between the actual state of your
    infrastructure and the state articulated in your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '`terraform plan` is a very important command to detect drift in Terraform-managed
    resources – you must be able to understand every output and change in the plan’s
    output, especially the line with the summary. In our example, this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'After investigating the changes and verifying that they are what we planned
    and intended, let’s proceed with `terraform apply`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'After running `apply`, Terraform will run another plan and ask us to verify
    and approve the predicted changes. The output should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You should carefully review the output, and if everything looks good, you can
    approve it by typing `yes`. Other than `yes`, infrastructure provisioning will
    be discarded, and `apply` will not provision anything in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'After your approval, `terraform-cli` will start to deploy the resources you
    have requested, and the additional output should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The last line gives the summary of your `terraform apply` command, allowing
    you to easily see what was deployed, added, changed, or destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: 'After verifying the resource from the AWS web console, you can destroy the
    example resources created in this exercise by running the `terraform` `destroy`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: When you use Terraform to manage your infrastructure, the `terraform destroy`
    command can be used to terminate resources created by your Terraform project.
    It is the opposite of the `terraform apply` command because it removes all the
    resources specified in your Terraform state. However, it’s important to note that
    the `terraform destroy` command does not destroy resources that are running elsewhere
    and are not managed by the current Terraform project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The `-` prefix in `terraform destroy` indicates that the instance will be destroyed.
    Similar to `apply`, Terraform shows its execution plan and waits for approval
    before making any changes. It’s important to carefully review all changes and
    approve them, as there is no way to recover the resources after approval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Answer `yes` to execute this plan and destroy the infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the `apply` command, Terraform will determine the order in which
    to destroy resources. If there are multiple resources with dependencies, Terraform
    will destroy them in the appropriate order with regard to those dependencies.
    In this case, Terraform identified a single VPC with no dependencies and destroyed
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install Terraform and prepare it for use
    with AWS. We covered various installation methods including downloading the binary,
    using a package manager, and compiling from source. Additionally, we discussed
    how to set up an AWS account and create an IAM user for Terraform. We then walked
    through the process of creating a directory for our first Terraform project, pasting
    in configuration code, and using the `terraform apply` command to provision resources.
    Finally, we learned how to use `terraform destroy` to tear down the resources
    created by our Terraform project. With the skills learned in this chapter, you
    should now be able to create and manage infrastructure on AWS using Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we will explore the utilization of Terraform in **IaC**
    projects.
  prefs: []
  type: TYPE_NORMAL
