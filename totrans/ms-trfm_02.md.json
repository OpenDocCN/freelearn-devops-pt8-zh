["```\n    resource \"random_string\" \"foobar\" {\n      length  = 4\n      upper   = false\n      special = false\n    }\n```", "```\n    resource \"azurerm_resource_group\" \"foobar\" {\n      name     = \"rg-${random_string.foobar.result}\"\n      location = var.location\n    }\n```", "```\n    resource \"azurerm_cosmosdb_account\" \"db\" {\n      name                = \"cosmos-foobar\"\n      location            = azurerm_resource_group.foobar.location\n      resource_group_name = azurerm_resource_group.foobar.name\n      offer_type          = \"Standard\"\n      kind                = \"MongoDB\"\n      consistency_policy {\n        consistency_level = \"Eventual\"\n      }\n      geo_location {\n        location          = \"westus\"\n        failover_priority = 0\n      }\n      geo_location {\n        location          = \"eastus\"\n        failover_priority = 1\n      }\n    }\n```", "```\n    data \"azurerm_resource_group\" \"bar\" {\n      name     = \"rg-foo\"\n      location = \"westus\"\n    }\n```", "```\nresource \"azurerm_storage_account\" \"fizzbuzz\" {\nname                     = \"stfizzbuzz\"\nresource_group_name      = data.azurerm_resource_group.bar.name\nlocation                 = data.azurerm_resource_group.bar.location\naccount_tier             = \"Standard\"\naccount_replication_type = \"GRS\"\n}\n```", "```\n    locals {\n      foo = \"bar\"\n    }\n```", "```\n    locals {\n      foo = \"foo\"\n      bar = \"bar\"\n      foobar = \"${local.foo}${local.bar}\"\n    }\n```", "```\n    resource \"aws_vpc\" \"main\" {\n      cidr_block       = \"10.0.0.0/16\"\n      tags {\n        Name = \"${var.application_name}-${var.environment_name}\"\n      }\n    }\n```", "```\n    locals {\n      name = \"${var.application_name}-${var.environment_name}\"\n    }\n```", "```\n    resource \"aws_vpc\" \"main\" {\n      cidr_block       = \"10.0.0.0/16\"\n      tags {\n        Name = local.name\n      }\n    }\n```", "```\n    locals {\n      shopping_list = <<EOT\n    apples\n    oranges\n    grapes\n    bananas\n    EOT\n    }\n```", "```\n    a = array[1]\n```", "```\n    networks = {\n      \"westus\" = \"10.0.0.0/16\"\n      \"eastus\" = \"10.1.0.0/16\"\n    }\n```", "```\n    a = networks[\"westus\"]\n```", "```\n    networks = {\n      \"westus\" = \"10.0.0.0/16\"\n      \"eastus\" = \"10.1.0.0/16\"\n      \"eastus\" = \"10.2.0.0/16\"\n    }\n```", "```\n    network_config = {\n      name    = \"westus\"\n      network = \"10.0.0.0/16\"\n    }\n```", "```\n    variable \"foo\" {\n      type        = string\n      description = \"This is the value for foo. It is needed because 'reasons'. Its value must be less than 6 characters.\"\n    }\n```", "```\n    variable \"super_secret_password\" {\n      type        = string\n      description = \"Password that I get from somewhere else\"\n      sensitive   = true\n    }\n```", "```\n    variable \"totally_optional_field\" {\n      type        = string\n      description = \"Yes, No, or Maybe\"\n      default     = null\n    }\n```", "```\n    variable \"person\" {\n      type = object({\n        first_name  = string\n        middle_name = string\n        last_name   = string\n      })\n    }\n```", "```\n    variable \"person\" {\n      type = object({\n        first_name  = string\n        middle_name = optional(string)\n        last_name   = string\n      })\n      default = null\n    }\n```", "```\nperson = null\n```", "```\n    person = {\n      first_name = \"Keyser\"\n      last_name  = \"Söze\"\n    }\n```", "```\n    person = {\n      first_name  = \"Keyser\"\n      middle_name = \"\"\n      last_name   = \"Söze\"\n    }\n```", "```\n    variable \"name\" {\n      type        = string\n      description = \"Name of the thing\"\n      validation {\n        condition     = length(name) < 30\n        error_message = \"Length of name must be less than 30\"\n      }\n    }\n```", "```\n    output \"foo\" {\n      value       = \"bar\"\n      description = \"This is my output for foo\"\n    }\n```", "```\n    output \"super_secret_password\" {\n      value        = \"NewEnglandClamChowder\"\n      is_sensitive = true\n    }\n```", "```\n    provider \"aws\" {\n      region = \"us-east-1\"\n    }\n    provider \"aws\" {\n      alias  = \"secondary\"\n      region = \"us-west-1\"\n    }\n```", "```\n    resource \"aws_instance\" \"foo\" {\n    }\n```", "```\n    resource \"aws_instance\" \"bar\" {\n      provider = aws.secondary\n    }\n```", "```\n    resource \"azurerm_key_vault\" \"top_secret\" {\n      name     = \"kv-top-secret\"\n      sku_name = \"standard\"\n    }\n    resource \"azurerm_key_vault_secret\" \"foo\" {\n      name         = \"foo\"\n      value        = \"bar\"\n      key_vault_id = azurerm_key_vault.top_secret.id\n    }\n```", "```\n    data \"azurerm_client_config\" \"current\" {}\n    resource \"azurerm_key_vault_access_policy\" \"terraform\" {\n      key_vault_id = azurerm_key_vault.top_secret.id\n      tenant_id    = data.azurerm_client_config.current.tenant_id\n      object_id    = data.azurerm_client_config.current.object_id\n      secret_permissions = [\n        \"Get\", \"List\", \"Set\"      ]\n    }\n```", "```\n    resource \"azurerm_key_vault_secret\" \"foo\" {\n      name         = \"foo\"\n      value        = \"bar\"\n      key_vault_id = azurerm_key_vault.top_secret.id\n      depends_on = [azurerm_key_vault_access_policy.terraform]\n    }\n```", "```\n    lifecycle {\n      ignore_changes = [\n        tags\n      ]\n    }\n```", "```\n    resource \"aws_instance\" \"node\" {\n      count = var.node_count\n      # the rest of the configuration\n    }\n```", "```\n    locals {\n      regions = {\n        westus = {\n          node_count = 5\n        }\n        eastus = {\n          node_count = 8\n        }\n      }\n    }\n```", "```\n    module \"regional_deployment\" {\n      for_each = local.regions\n      node_count = each.value.node_count\n      # the rest of the configuration\n    }\n```", "```\nregion_names_list = [\nfor s in var.regions : \nupper(\"${s.region}${s.country}\")]\n```", "```\n      region_array_from_map = [\n        for k, v in var.regions :\n        {\n          region        = k,\n          address_space = v.address_space\n          node_count    = v.node_count\n        }\n      ]\n```", "```\n    region_array_from_map = [\n      {\n        \"address_space\" = \"10.0.1.0/24\"\n        \"node_count\" = 5\n        \"region\" = \"eastus\"\n      },\n      {\n        \"address_space\" = \"10.0.0.0/24\"\n        \"node_count\" = 8\n        \"region\" = \"westus\"\n      },\n    ]\n```", "```\n    region_list = [for s in var.regions : \"${s.region}${s.country}\"]\n```", "```\n    region_list = [\n      \"westus\",\n      \"eastus\",\n    ]\n```", "```\n    locals {\n      region_config_object = {\n        for s in var.regions : \"${s.region}${s.country}\" =>\n        {\n          node_count = s.node_count\n        }\n      }\n    }\n```", "```\n    region_config_object = {\n      \"eastus\" = {\n        \"node_count\" = 8\n      }\n      \"westus\" = {\n        \"node_count\" = 8\n      }\n    }\n```", "```\n    locals {\n      foo_list = [\"A\", \"B\", \"C\"]\n      foo_map = {\n        for idx, element in local.foo_list : element => idx\n      }\n    }\n```", "```\n    if (x == 5) {\n      // do something\n    } else {\n      // do something else\n    }\n```", "```\n    y = x == 5 ? x * 10 : 0\n```", "```\n    int y;\n    if (x == 5) {\n      y = x * 10\n    } else {\n      y = 0\n    }\n```", "```\n    resource \"aws_instance\" \"node\" {\n      count = var.node_count\n      # the rest of the configuration\n    }\n```", "```\n    locals {\n      first_instance_id = aws_instance.node[0].id\n    }\n```", "```\n    locals {\n      all_instance_ids = aws_instance.node[*].id\n    }\n```", "```\n    resource \"azurerm_cosmosdb_account\" \"db\" {\n      name                = \"cosmos-foobar\"\n      location            = azurerm_resource_group.foobar.location\n      resource_group_name = azurerm_resource_group.foobar.name\n      offer_type          = \"Standard\"\n      kind                = \"MongoDB\"\n      geo_location {\n        location          = \"westus\"\n        failover_priority = 0\n      }\n      geo_location {\n        location          = \"eastus\"\n        failover_priority = 1\n      }\n    }\n```", "```\n    locals {\n      regions = {\n        westus = 0\n        eastus = 1\n      }\n    }\n```", "```\n    resource \"azurerm_cosmosdb_account\" \"db\" {\n      name                = \"cosmos-foobar\"\n      location            = azurerm_resource_group.foobar.location\n      resource_group_name = azurerm_resource_group.foobar.name\n      offer_type          = \"Standard\"\n      kind                = \"MongoDB\"\n      dynamic \"geo_location\" {\n        for_each = local.regions\n        content {\n          location          = geo_location.key\n          failover_priority = geo_location.value\n        }\n      }\n    }\n```", "```\n    locals {\n      foo = \"rg-${var.fizz}${var.buzz}${var.wizz}\"\n    }\n```", "```\n    locals {\n      foo = format(\"rg-%s%s%s, var.fizz, var.buzz, var.wizz)\n    }\n```", "```\n    locals {\n      full_name = \"foo-bar\"\n    }\n```", "```\n    locals {\n      storage_account_name = replace(local.full_name, \"-\", \"\")\n    }\n```", "```\n    locals {\n      fault_domains = [1, 2, 3, 4, 5]\n      fault_domain_count = length(local.fault_domains)\n    }\n```", "```\n    range(start, limit)\n```", "```\n    locals {\n      max_fault_domains = 5\n      fault_domains = range(1, local.max_fault_domains)\n    }\n```", "```\n    fault_domains = [1, 2, 3, 4, 5]\n```", "```\nlocals {\n  template_content = file(\"${path.module}/template.json\")\n}\n```", "```\nlocals {\n  template = jsondecode(\n    file(\"${path.module}/template.json\")\n  )\n}\n```", "```\nlocals {\n  template = jsondecode(\n    templatefile(\n      \"${path.module}/template.json\",\n      {\n        hostname   = \"foo\"\n        ip_address = \"10.0.1.8\"\n      }\n    )\n  )\n}\n```", "```\n2023-09-14T13:24:19Z\n```", "```\n{YYYY}-{MM}-{DD}T{HH}:{mm}:{ss}Z\n```", "```\ncidrsubnet(prefix, newbits, netnum)\n```", "```\nlocals {\n  cidr_block_start    = \"10.0.0.0/16\"\n  cidr_chunk_size     = 8\n  cidr_block_list     = range(0, 4)\n  dynamic_cidr_blocks = [for i in local.cidr_block_list :\ncidrsubnet(local.cidr_block_start, local.chunk_size, i)]\n}\n```", "```\nresource \"aws_subnet\" \"subnet\" {\n  count      = 4\n  cidr_block = cidrsubnet(var.cidr, local.chunk_size, count.index)\n}\n```"]