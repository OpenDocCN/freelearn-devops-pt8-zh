- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Making Decisions for Terraform Projects with AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the next chapter of our journey with AWS Terraform. By now, you’ve
    learned about the importance of Terraform modules and AWS providers and how to
    implement best practices for your Terraform code. In this chapter, we’ll be diving
    deeper into the fundamentals of the **Amazon Web Services** (**AWS**) infrastructure,
    network, and resources. With these essential skills, you’ll be better equipped
    to make informed decisions about your AWS Terraform projects.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also explore the decision-making process when using templates or modules
    and how to structure your projects using AWS environments, projects, and components.
    By the end of this chapter, you’ll have the knowledge and skills necessary to
    make sound infrastructure decisions for your AWS Terraform projects. So, let’s
    dive in!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the main topics we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS infrastructure and fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Organizations and network fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS resources fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS environments, projects, workloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS infrastructure and fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with Terraform to manage your infrastructure on AWS, it is essential
    to understand the basics of AWS infrastructure. In this section, we will cover
    the fundamentals of AWS infrastructure and how they relate to Terraform. We will
    explore the building blocks of AWS infrastructure, including AWS Regions, Availability
    Zones, and VPCs, and discuss how to design and plan your infrastructure using
    Terraform. With a strong understanding of AWS infrastructure, you will be better
    equipped to make informed decisions when creating and managing your infrastructure
    with Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: What is AWS infrastructure?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS is a comprehensive cloud computing platform that provides a wide range of
    services, such as storage, networking, analytics, machine learning, and much more.
    It is a highly scalable and reliable platform that caters to the needs of businesses
    of all sizes. The infrastructure fundamentals of AWS refer to the basic building
    blocks and underlying technology that support these services. These include servers,
    storage, networking, and data centers. AWS allows businesses and organizations
    to access scalable, reliable, and secure infrastructure services on a pay-as-you-go
    basis without the need for them to invest in and maintain their own physical infrastructures.
    This can help reduce costs and increase flexibility and agility.
  prefs: []
  type: TYPE_NORMAL
- en: What is infrastructure as a service?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the **infrastructure-as-a-service** (**IaaS**) cloud computing model, virtualized
    computing resources are provided over the internet. Providers such as AWS offer
    organizations access to infrastructure services such as servers, storage, networking,
    and data centers on a pay-as-you-go basis. This eliminates the need for businesses
    to invest in and maintain their own physical infrastructure, allowing them to
    access scalable, reliable, and secure infrastructure on demand.
  prefs: []
  type: TYPE_NORMAL
- en: What is platform as a service?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the cloud computing model of **platform as a service** (**PaaS**), providers
    such as AWS offer businesses and organizations a complete platform to develop,
    test, deploy, and manage software applications. The PaaS platform includes operating
    systems, middleware, databases, and other services, freeing businesses from the
    burden of managing and maintaining the underlying infrastructure. This enables
    organizations to focus on building and improving their applications while relying
    on the PaaS provider to manage the platform.
  prefs: []
  type: TYPE_NORMAL
- en: What is software as a service?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the **software as a service** (**SaaS**) cloud computing model, users can
    access software applications hosted and managed by a provider through the internet
    without needing to install or maintain the application themselves. This allows
    businesses and organizations to focus on using the software instead of managing
    it, and SaaS providers typically charge users on a subscription basis. This model
    has become increasingly popular due to its scalability, flexibility, and cost-effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS offers a range of IaaS, PaaS, and SaaS products and services. The following
    are some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: Some AWS IaaS services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Amazon Elastic Compute Cloud** (**EC2**): Offers flexible and scalable virtual
    servers in the cloud'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Elastic Container Service** (**ECS**): Enables Docker container management
    and orchestration on EC2 instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Elastic Container Service for Kubernetes**: Facilitates the deployment
    and management of Kubernetes clusters on AWS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Elastic Kubernetes Service** (**EKS**): Allows businesses to create
    and operate Kubernetes clusters on AWS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon LightSail**: Provides simple **virtual private servers** (**VPS**)
    for web development and small-scale applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Elastic Block Store** (**EBS**): Provides persistent block storage
    volumes for EC2 instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Elastic File System** (**EFS**): Offers scalable and shared file storage
    for use with EC2 instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon S3**: Provides highly scalable and durable object storage for data
    and files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Glacier**: Provides low-cost archival storage for data retention and
    retrieval'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon CloudFront**: Delivers content globally through a fast and secure
    **content delivery** **network** (**CDN**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Route 53**: Offers a scalable and reliable **domain name system**
    (**DNS**) service for managing DNS records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Virtual Private Cloud** (**VPC**): Allows businesses to create their
    own isolated virtual network in the AWS cloud'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Direct Connect**: Allows businesses to establish a dedicated network
    connection between their on-premises infrastructure and AWS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some AWS PaaS services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**AWS Elastic Beanstalk**: Simplifies the deployment and management of web
    applications on AWS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Lambda**: Enables developers to run code without managing servers or
    infrastructure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS CodePipeline**: Automates the build, test, and deployment of code changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS CodeBuild**: Offers a fully managed build service for compiling source
    code into deployable artifacts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS CodeDeploy**: Automates application deployments to compute instances,
    on-premises servers, or AWS Lambda'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS CodeStar**: Provides a unified interface for managing the entire application
    development lifecycle on AWS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS CloudFormation**: Allows organizations to define and manage AWS resources
    as code using templates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS CloudTrail**: Records API activity and delivers log files for auditing
    and compliance purposes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS X-Ray**: Facilitates the tracing, debugging, and analysis of distributed
    applications running on AWS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some AWS SaaS services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Amazon WorkSpaces**: Offers cloud-based virtual desktops that can be accessed
    by remote and mobile workers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Chime**: Provides a cloud-based platform for communication and collaboration
    through messaging, meetings, and video conferencing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Connect**: Offers a cloud-based contact center platform for businesses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon AppStream 2.0**: Enables businesses to stream desktop applications
    to users over the internet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon WorkDocs**: Provides a cloud-based content management and collaboration
    platform for businesses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon WorkMail**: Offers a cloud-based email and calendar service for businesses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Elasticsearch Service**: Enables businesses to deploy, operate, and
    scale Elasticsearch clusters easily in the cloud'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Kendra**: Provides a machine learning-powered enterprise search service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Managed Blockchain**: Enables businesses to easily create and manage
    scalable blockchain networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Quantum Ledger Database** (**QLDB**): Provides a fully managed ledger
    database for applications that need a central, trusted authority to maintain a
    complete and verifiable record of transactions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the main AWS product and service categories?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AWS provides a variety of cloud computing products and services organized into
    different resource categories. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compute**: Provides services for running and managing compute resources,
    such as virtual machines and containers. Examples include EC2, Amazon ECS, and
    AWS Lambda.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage**: Provides services for storing and managing data, such as files
    and objects. Examples include Amazon S3, EBS, and Amazon EFS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database**: Provides services for running and managing databases in the cloud.
    Examples include Amazon Aurora, Amazon DynamoDB, and Amazon Redshift.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Networking**: Provides services for networking, connectivity, and content
    delivery. Examples include Amazon VPC, Amazon Route 53, and Amazon CloudFront.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security and Identity**: Provides services for securing and managing access
    to AWS resources. Examples include AWS **Identity and Access Management** (**IAM**),
    AWS **Key Management Service** (**KMS**), and Amazon GuardDuty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analytics**: Provides services for collecting, processing, and analyzing
    data. Examples include Amazon EMR, Amazon Kinesis, and Amazon Athena.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine Learning**: Provides services for building and deploying machine
    learning models. Examples include Amazon SageMaker, Amazon Rekognition, and Amazon
    Lex.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Management Tools**: Provides services for managing and optimizing AWS resources.
    Examples include AWS CloudFormation, AWS CloudWatch, and AWS Trusted Advisor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These and other resource categories provided by AWS can help businesses and
    organizations access a wide range of cloud computing services to support their
    operations and goals.
  prefs: []
  type: TYPE_NORMAL
- en: How to make decisions to start a Terraform project in AWS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When deciding to use Terraform for an AWS project, there are a few key considerations
    to keep in mind. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The scope and scale of the project**: Terraform is designed for IaaC and
    can be used to manage infrastructure for large, complex projects. If your project
    involves multiple AWS services and resources, Terraform can help you manage them
    efficiently and reliably.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The level of automation and integration required**: Terraform allows you
    to automate the provisioning and management of your AWS infrastructure using configuration
    files and declarative syntax. This can help reduce manual errors and improve consistency
    across your environment. Terraform also integrates with other AWS services and
    tools, such as AWS CloudFormation, AWS CodePipeline, and AWS CodeBuild.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The level of collaboration and team size**: Terraform supports collaborative
    infrastructure management through the use of version control systems such as Git.
    This can help teams work together more efficiently and effectively, and it also
    enables you to track and roll back changes to your infrastructure. If you have
    a large team working on your project, Terraform can help you manage and coordinate
    their efforts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The level of support and documentation available**: Terraform is an open
    source tool with a large and active community. This means there is a wealth of
    documentation, tutorials, and other resources available to help you learn and
    use Terraform effectively. AWS also provides its own documentation and support
    for Terraform, including best practices and integration with other AWS services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to start designing your first AWS infrastructure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several key steps involved in designing AWS infrastructure, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify and define your business requirements and goals for the organization’s
    infrastructure. This will help you understand what your infrastructure needs to
    do and how it needs to support your business operations for your organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decide on the number and type of AWS accounts you need. This will likely depend
    on factors such as the size and complexity of your business, the number of teams
    and users who need access to AWS, and the level of security and compliance requirement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the appropriate AWS services and resources for your infrastructure. This
    will likely involve choosing from a range of compute, storage, and networking
    services based on your requirements and goals.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plan and design your infrastructure architecture. This will involve creating
    diagrams and other visualizations that show how the different AWS services and
    resources will be connected and configured to support your business needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement and deploy your infrastructure. This will involve using tools and
    services such as AWS CloudFormation, AWS CodePipeline, and AWS CodeBuild to automate
    the provisioning and configuration of your AWS resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor and maintain your infrastructure. This will involve using tools such
    as AWS CloudWatch and AWS Trusted Advisor to monitor the performance and health
    of your infrastructure to address any issues or potential improvements and using
    AWS Organizations, AWS **Single Sign-On** (**SSO**), and AWS IAM to manage and
    monitor the security, compliance, and usage of your AWS accounts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By following these steps, you can design a well-planned, scalable, and reliable
    AWS infrastructure that meets the needs of your business.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Organizations and network fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**AWS Organizations** is a service that allows businesses and organizations
    to manage and govern their AWS accounts in a centralized and scalable manner.
    AWS Organizations enables you to create and manage a hierarchy of AWS accounts
    and apply policies across your accounts to help ensure compliance with corporate
    standards and best practices. This can help you manage your AWS infrastructure
    and resources more efficiently, reduce the risk of errors and security vulnerabilities,
    and improve the visibility and control of your AWS usage. AWS Organizations is
    available through the AWS Management Console, the AWS CLI, or the AWS Organizations
    API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **AWS account** is a user-defined entity that provides access to the services
    and resources provided by AWS. An AWS account is the starting point for using
    AWS and is used to identify and authenticate users who want to access AWS services
    and resources. AWS accounts are created and managed through the AWS Management
    Console, which is the web-based interface for accessing and managing AWS services.
    AWS accounts are typically associated with an email address and a password and
    can be accessed using the AWS Management Console or the AWS **Command Line Interface**
    (**CLI**). AWS accounts can be used individually or as part of an AWS Organizations
    structure to manage and govern multiple AWS accounts in a centralized and scalable
    manner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **AWS Region** is a physical location around the world where AWS provides
    services and resources. AWS Regions are composed of multiple Availability Zones,
    which are isolated, fault-tolerant data centers that provide low-latency connectivity
    to end users. AWS Regions are designed to be redundant and highly available and
    are used to host and run the various services and resources provided by AWS. AWS
    customers can choose the AWS Region that best meets their performance, compliance,
    and other requirements and can access and use the services and resources in that
    region through the AWS Management Console, the AWS Command-Line Interface (**CLI**),
    or the AWS **application programming** **interface** (**API**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS **Availability Zones** are isolated, fault-tolerant data centers that provide
    low-latency connectivity to end users. AWS Availability Zones are located within
    AWS Regions, which are physical locations around the world where AWS provides
    services and resources. Each Availability Zone is composed of one or more data
    centers and is designed to be redundant and highly available. This means that
    if one data center in an Availability Zone goes down, the other data centers in
    the same Availability Zone will continue to operate, so users will not experience
    any interruption in service. AWS customers can use Availability Zones to run their
    applications and workloads with high availability and fault tolerance and can
    choose the Availability Zones that best meet their performance and compliance
    requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon VPC** is a cloud computing service provided by AWS that allows businesses
    and organizations to create and configure their own virtual private network in
    the AWS cloud. A VPC enables you to define and customize your own network settings,
    including the IP address range, subnets, route tables, and network gateways. This
    allows you to create a logically isolated and secure network environment that
    is separate from the rest of the AWS cloud. VPCs can be used to host and run AWS
    services and resources, such as Amazon EC2 instances, Amazon EBS volumes, and
    Amazon S3 buckets. VPCs can also be connected to your on-premises infrastructure
    using AWS Direct Connect or a VPN connection, allowing you to seamlessly extend
    your own network into the AWS cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **AWS subnet** is a range of IP addresses within an Amazon VPC that is associated
    with a specific Availability Zone. Subnets are used to organize and segment the
    network within a VPC and can be used to control the traffic between different
    groups of AWS resources. Each subnet is associated with a route table, which specifies
    the traffic flows within and between the subnet and other network destinations.
    Subnets can be public or private, depending on whether they have internet connectivity.
    Public subnets are connected to the internet through an internet gateway, while
    private subnets are not directly connected to the internet and can only access
    the internet through a NAT gateway or VPN connection. AWS customers can use subnets
    to design and implement a scalable and secure network architecture within their
    VPCs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 6.1 – AWS subnet](img/B18198_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – AWS subnet
  prefs: []
  type: TYPE_NORMAL
- en: AWS resources fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The AWS core principles refer to the fundamental values and beliefs that guide
    the design and operation of AWS. These principles include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer obsession**: AWS is focused on meeting the needs and exceeding the
    expectations of its customers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Innovation**: AWS is committed to continuous innovation and improvement in
    its products and services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global infrastructure**: AWS operates a global network of data centers and
    regions to provide customers with low-latency and high-availability services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responsiveness**: AWS is designed to be fast and responsive, allowing customers
    to quickly and easily access and use its services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operational excellence**: AWS is focused on delivering high-quality, reliable,
    and secure services to its customers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: AWS is committed to the security and privacy of its customers’
    data and resources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost-effectiveness**: AWS is designed to provide customers with a cost-effective
    and flexible way to access and use its services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By following these principles, AWS can deliver a wide range of cloud computing
    services that meet the needs of its customers and enable them to achieve their
    goals. While starting a new project, you should consider the same principles so
    you can deliver the best solution for your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: AWS shared responsibility model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AWS shared responsibility model is a framework that defines the roles and
    responsibilities of AWS and its customers with respect to the security and compliance
    of their AWS resources. Under the AWS shared responsibility model, AWS is responsible
    for the security of the cloud infrastructure, including the physical security
    of its data centers, the security of its network and hardware, and the security
    of its services and features. AWS customers, on the other hand, are responsible
    for the security of their own applications and data, as well as the configuration
    of their AWS resources. This means that customers are responsible for protecting
    their own data and applications from threats and vulnerabilities and for ensuring
    that their AWS resources are properly configured and used in compliance with their
    own security and compliance policies. The AWS shared responsibility model helps
    customers understand their own security and compliance responsibilities and enables
    them to design and implement a secure and compliant AWS environment that meets
    their business needs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – AWS shared responsibility model](img/B18198_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – AWS shared responsibility model
  prefs: []
  type: TYPE_NORMAL
- en: 'The shared responsibility model applies to all three types of cloud computing
    service models: IaaS, PaaS, and SaaS. Under the shared responsibility model, the
    cloud provider (such as AWS) is responsible for the security of the underlying
    infrastructure and infrastructure components, while the customer is responsible
    for the security of their own applications, data, and other resources that are
    built on top of the infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of IaaS, the cloud provider is responsible for the security of the
    physical infrastructure (e.g., servers, storage, and networking), the virtualization
    infrastructure (e.g., hypervisors and virtual machines), and the infrastructure
    services (e.g., identity and access management, and network security). The customer
    is responsible for the security of their own applications, data, and operating
    systems that run on the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of PaaS, the cloud provider is responsible for the security of the
    underlying infrastructure, as well as the platform components and services that
    are provided as part of the PaaS offering (e.g., databases, application runtime
    environments, and load balancers). The customer is responsible for the security
    of their own applications and data that are built on top of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of SaaS, the cloud provider is responsible for the security of the
    underlying infrastructure, the platform, and the SaaS application itself. The
    customer is responsible for the security of their own data and user access to
    the SaaS application.
  prefs: []
  type: TYPE_NORMAL
- en: In all cases, the shared responsibility model means that the cloud provider
    and the customer both have a role to play in ensuring the security and compliance
    of their AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: How to select AWS resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When selecting AWS resources, there are several key factors to consider, including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Consider the business requirements and goals of your project or workload. This
    will help you determine the type and quantity of resources you need, as well as
    the performance and availability requirements for those resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS offers a diverse array of services and features, each with its own strengths
    and limitations, that you can choose from to suit your specific requirements.
    It’s crucial to conduct thorough research and compare the various options to determine
    the best fit for your needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s essential to understand the various pricing options and models offered
    by AWS. AWS provides different pricing options such as on-demand pricing, reserved
    instances, and spot instances. It’s important to evaluate these pricing options
    and choose the most cost-effective one for your workload.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AWS regional and Availability Zone availability of the resources you need.
    AWS resources are distributed across multiple regions and Availability Zones around
    the world. You should choose the region and Availability Zone that best meet your
    performance, compliance, and other requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There may be AWS resource limits and quotas that apply to the resources you
    want to use. AWS imposes certain limits and quotas on the use of its services
    and resources to ensure the performance and availability of the AWS cloud for
    all customers. You should check the limits and quotas that apply to the resources
    you want to use and plan accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By considering these and other factors, you can select the appropriate AWS resources
    for your project or workload and use them effectively to support your business
    goals.
  prefs: []
  type: TYPE_NORMAL
- en: AWS environments, projects, workloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to effectively manage and organize infrastructure on AWS using Terraform,
    it’s important to understand the concept of environments, projects, and workloads.
    In this chapter, we will dive into the details of these concepts and explore best
    practices for implementing them in your Terraform code.
  prefs: []
  type: TYPE_NORMAL
- en: What is an environment?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Environments refer to the infrastructure and tools used to support the software
    development and deployment process in a DevOps model. DevOps is an approach to
    software development that prioritizes collaboration, automation, and continuous
    improvement in the development, testing, and deployment of software. DevOps environments
    are typically composed of a combination of on-premises and cloud-based resources
    and may include tools and services such as version control systems, **continuous
    integration and delivery** (**CI/CD**) tools, testing frameworks, and infrastructure
    automation tools. DevOps environments are designed to enable teams to rapidly
    and reliably develop, test, and deploy software, and support the continuous iteration
    and improvement of their software. By using DevOps environments, teams can improve
    the speed, quality, and reliability of their software development and deployment
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: How to define environments or projects in AWS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to define environments or projects in AWS depending
    on your specific requirements and goals. Some common approaches include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using AWS accounts**: You can create separate AWS accounts for each environment
    or project and use AWS Organizations to manage and govern the accounts. This approach
    provides a high degree of isolation and security between the different environments
    or projects and allows you to apply different policies and controls to each account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using VPCs**: You can create separate Amazon VPCs for each environment or
    project and configure the VPCs with different settings and resources (e.g., subnets,
    security groups, and route tables). This approach allows you to isolate the network
    and security settings for each environment or project and use different AWS resources
    in each VPC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using resource names and tags**: You can use unique names and tags for each
    resource in each environment or project and use AWS resource policies and IAM
    policies to control access to the resources based on their names and tags. This
    approach allows you to manage and access the resources in each environment or
    project independently and apply different access controls to each environment
    or project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using deployment environments**: You can use AWS CodePipeline to create and
    manage separate deployment environments for each environment or project (e.g.,
    development, staging, and production). This approach allows you to automate the
    deployment and release of your application code and resources and control the
    promotion of code and resources between environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using one or more of these approaches, you can effectively define and manage
    your environments or projects in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the fundamentals of AWS infrastructure, network,
    and resources, as well as how to decide when to use templates or modules. We also
    explored how to organize projects into environments, projects, and workloads.
    By the end of the chapter, we gained skills in AWS infrastructure decisions, AWS
    network fundamentals, and AWS resource fundamentals, and we learned how and when
    to develop modules and templates.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into implementing Terraform in projects, where
    we will explore how to structure Terraform code, manage state, and use remote
    backends. Stay tuned!
  prefs: []
  type: TYPE_NORMAL
