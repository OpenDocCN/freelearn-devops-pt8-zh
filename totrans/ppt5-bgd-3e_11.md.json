["```\n \"Resources\" : {\n    \"EC2Instance\" : {\n      \"Type\" : \"AWS::EC2::Instance\",\n      \"Properties\" : {\n        \"InstanceType\" : { \"Ref\" : \"InstanceType\" },\n        \"SecurityGroups\" : [ { \"Ref\" : \"InstanceSecurityGroup\" } ],\n        \"KeyName\" : { \"Ref\" : \"KeyName\" },\n        \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\n                          { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] }\n      }\n    },\n```", "```\nresource \"aws_instance\" \"web\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n\n  tags {\n    Name = \"HelloWorld\"\n  }\n}\n```", "```\n    mkdir /home/ubuntu/.aws\n\n    ```", "```\n    [default]\n    aws_access_key_id = AKIAINSZUVFYMBFDJCEQ\n    aws_secret_access_key = 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\n    ```", "```\n    chmod 600 ~/.ssh/pbg.pem\n\n    ```", "```\ncd /etc/puppetlabs/code/environments/pbg\nsudo r10k puppetfile install\n\n```", "```\nensure_packages([\n  'aws-sdk-core',\n  'retries'\n],\n  { provider => puppet_gem })\n```", "```\n    sudo puppet apply --environment pbg /examples/aws_sdk.pp\n\n    ```", "```\n    [default]\n    region=us-east-1\n    ```", "```\n    sudo vi /examples/aws_instance.pp\n    $ami = 'ami-26d6d131'\n    ```", "```\n    sudo puppet apply --environment pbg /examples/aws_instance.pp\n\n    ```", "```\n    Notice: /Stage[main]/Main/Ec2_securitygroup[pbg-sg]/ensure: created\n    Notice: /Stage[main]/Main/Ec2_instance[pbg-demo]/ensure: changed absent to running\n    ```", "```\n    ssh -i ~/.ssh/pbg.pem -l ubuntu YOUR_INSTANCE_IP\n    The authenticity of host 'YOUR_INSTANCE_IP (YOUR_INSTANCE_IP)' can't be established.\n    ECDSA key fingerprint is SHA256:T/pyWVJYWys2nyASJVHmDqOkQf8PbRGru3vwwKH71sk.\n    Are you sure you want to continue connecting (yes/no)? yes\n    Warning: Permanently added 'YOUR_INSTANCE_IP' (ECDSA) to the list of known hosts.\n    Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-1030-aws x86_64)\n    ```", "```\nec2_securitygroup { 'pbg-sg':\n  ensure      =>  present,\n  description => 'PBG security group',\n  region      => $region,\n  vpc         => 'default-vpc',\n  ingress     => [\n    {\n      description => 'SSH access from world',\n      protocol    => 'tcp',\n      port        => 22,\n      cidr        => '0.0.0.0/0',\n    },\n    {\n      description => 'Ping access from world',\n      protocol    => 'icmp',\n      cidr        => '0.0.0.0/0',\n    },\n  ],\n}\n```", "```\n{\n  description => 'SSH access from world',\n  protocol    => 'tcp',\n  port        => 22,\n  cidr        => '0.0.0.0/0',\n}\n```", "```\nec2_instance { 'pbg-demo':\n  ensure                      => present,\n  region                      => $region,\n  subnet                      => 'default-subnet',\n  security_groups             => 'pbg-sg',\n  image_id                    => $ami,\n  instance_type               => 't1.micro',\n  associate_public_ip_address => true,\n  key_name                    => 'pbg',\n}\n```", "```\n    sudo vi /examples/aws_vpc.pp\n    $ami = 'ami-26d6d131'\n    ```", "```\n    sudo puppet apply --environment pbg /examples/aws_vpc.pp\n\n    ```", "```\n    Notice: /Stage[main]/Main/Ec2_vpc[pbg-vpc]/ensure: created\n    Notice: /Stage[main]/Main/Ec2_vpc_internet_gateway[pbg-igw]/ensure: created\n    Notice: /Stage[main]/Main/Ec2_vpc_routetable[pbg-rt]/ensure: created\n    Notice: /Stage[main]/Main/Ec2_vpc_subnet[pbg-vpc-subnet]/ensure: created\n    Notice: /Stage[main]/Main/Ec2_securitygroup[pbg-vpc-sg]/ensure: created\n    Notice: /Stage[main]/Main/Ec2_instance[pbg-vpc-demo]/ensure: changed absent to running\n    ```", "```\nec2_vpc { 'pbg-vpc':\n  ensure     => present,\n  region     => $region,\n  cidr_block => '10.99.0.0/16',\n}\n```", "```\nec2_vpc_internet_gateway { 'pbg-igw':\n  ensure => present,\n  region => $region,\n  vpc    => 'pbg-vpc',\n}\n```", "```\nec2_vpc_routetable { 'pbg-rt':\n  ensure => present,\n  region => $region,\n  vpc    => 'pbg-vpc',\n  routes => [\n    {\n      destination_cidr_block => '10.99.0.0/16',\n      gateway                => 'local'\n    },\n    {\n      destination_cidr_block => '0.0.0.0/0',\n      gateway                => 'pbg-igw'\n    },\n  ],\n}\n```", "```\n{\n  destination_cidr_block => '10.99.0.0/16',\n  gateway                => 'local'\n}\n```", "```\n{\n  destination_cidr_block => '0.0.0.0/0',\n  gateway                => 'pbg-igw'\n}\n```", "```\nec2_vpc_subnet { 'pbg-vpc-subnet':\n  ensure            => present,\n  vpc               => 'pbg-vpc',\n  region            => $region,\n  cidr_block        => '10.99.0.0/24',\n  availability_zone => \"${region}a\",\n  route_table       => 'pbg-rt',\n}\n```", "```\nlookup('users2', Hash, 'hash').each | String $username, Hash $attrs | {\n  user { $username:\n    * => $attrs,\n  }\n}\n```", "```\n$aws_resources = lookup('aws_resources', Hash, 'hash')\n$aws_resources.each | String $r_type, Hash $resources | {\n  $resources.each | String $r_title, Hash $attrs | {\n    Resource[$r_type] { $r_title:\n      * => $attrs,\n    }\n  }\n}\n```", "```\n    sudo vi /etc/puppetlabs/code/environments/pbg/data/aws.yaml\n    ami: 'ami-26d6d131'\n    ```", "```\n    sudo puppet apply --environment pbg /examples/aws_hiera.pp\n\n    ```", "```\n$aws_resources = lookup('aws_resources', Hash, 'hash')\n$aws_resources.each | String $r_type, Hash $resources | {\n  ...\n  }\n}\n```", "```\n 'ec2_vpc':\n      ...\n\n```", "```\n'pbg-vpc':\n  ensure: present\n  region: \"%{lookup('region')}\"\n  cidr_block: '10.99.0.0/16'\n```", "```\n$resources.each | String $r_title, Hash $attrs | {\n  Resource[$r_type] { $r_title:\n    * => $attrs,\n  }\n}\n```", "```\nensure: present\nregion: \"%{lookup('region')}\"\ncidr_block: '10.99.0.0/16'\n```", "```\nec2_vpc { 'pbg-vpc':\n  ensure     => present,\n  region     => 'us-east-1',\n  cidr_block => '10.99.0.0/16',\n}\n```", "```\n$r_type = 'ec2_vpc'\n$r_type { 'pbg-vpc':\n  ...\n}\n```", "```\n$r_type = 'ec2_vpc'\nResource[$r_type] { 'pbg-vpc':\n  ...\n}\n```", "```\n'ec2_instance':\n  'pbg-vpc-demo':\n    ensure: absent\n    region: \"%{lookup('region')}\"\n    subnet: 'pbg-vpc-subnet'\n    security_groups: 'pbg-vpc-sg'\n    image_id: \"%{lookup('ami')}\"\n    instance_type: 't1.micro'\n    associate_public_ip_address: true\n    key_name: 'pbg'\n```"]