- en: Chapter 1. Proxmox VE Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Proxmox Virtual Environment** (**PVE**) is a mature, complete, well-supported,
    enterprise-class virtualization environment for servers. It is an open source
    tool—based in the Debian GNU/Linux distribution—that manages containers, virtual
    machines, storage, virtualized networks, and high-availability clustering through
    a well-designed, web-based interface or via the command-line interface.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Developers provided the first stable release of Proxmox VE in 2008; four years
    and eight point releases later, ZDNet''s Ken Hess boldly, but quite sensibly,
    declared Proxmox VE as *Proxmox: The Ultimate Hypervisor* ([http://www.zdnet.com/article/proxmox-the-ultimate-hypervisor/](http://www.zdnet.com/article/proxmox-the-ultimate-hypervisor/)).Four
    years later, PVE is on version 4.1, in use by at least 90,000 hosts, and more
    than 500 commercial customers in 140 countries; the web-based administrative interface
    itself is translated into 19 languages.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter explores the fundamental technologies underlying PVE''s hypervisor
    features: **LXC**, **KVM**, and **QEMU**. To do so, we will develop a working
    understanding of virtual machines, containers, and their appropriate use.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Proxmox VE in brief
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualization and containerization with PVE
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxmox VE virtual machines, KVM, and QEMU
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containerization with PVE and LXC
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxmox VE in brief
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Proxmox VE, Proxmox Server Solutions GmbH ([https://www.proxmox.com/en/about](https://www.proxmox.com/en/about))
    provides us with an enterprise-ready, open source *type* 2 *Hypervisor*. Later,
    you'll find some of the features that make Proxmox VE such a strong enterprise
    candidate.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The license for Proxmox VE is very deliberately the *GNU Affero General Public
    License (V3)* ([https://www.gnu.org/licenses/agpl-3.0.html](https://www.gnu.org/licenses/agpl-3.0.html)).
    From among the many free and open source compatible licenses available, this is
    a significant choice because it is "specifically designed to ensure cooperation
    with the community in the case of network server software."
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PVE is primarily administered from an integrated web interface, from the command
    line locally, or via SSH. Consequently, there is no need for a separate management
    server and the associated expenditure. In this way, Proxmox VE significantly contrasts
    with alternative enterprise virtualization solutions by vendors such as VMware.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxmox VE instances/nodes can be incorporated into PVE clusters, and centrally
    administered from a unified web interface.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxmox VE provides for live migration—the movement of a virtual machine or
    container from one cluster node to another without any disruption of services.
    This is a rather unique feature of PVE and not common in competing products.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Features** | **Proxmox VE** | **VMware vSphere** |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| **Hardware requirements** | Flexible | Strict compliance with HCL |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| **Integrated management interface** | Web- and shell-based (browser and SSH)
    | No. Requires dedicated management server at additional cost |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| **Simple subscription structure** | Yes; based on number of premium support
    tickets per year and CPU socket count | No |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| **High availability** | Yes | Yes |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| **VM live migration** | Yes | Yes |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| **Supports containers** | Yes | No |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| **Virtual machine OS support** | Windows and Linux | Windows, Linux, and
    Unix |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| **Community support** | Yes | No |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| **Live VM snapshots** | Yes | Yes |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '*Contrasting Proxmox VE and VMware vSphere features*'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a complete catalog of features, see the Proxmox VE datasheet at [https://www.proxmox.com/images/download/pve/docs/Proxmox-VE-Datasheet.pdf](https://www.proxmox.com/images/download/pve/docs/Proxmox-VE-Datasheet.pdf).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Like its competitors, PVE is a hypervisor: a typical hypervisor is software
    that creates, runs, configures, and manages virtual machines based on an administrator
    or engineer''s choices.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: PVE is known as a type 2 hypervisor because the virtualization layer is built
    upon an operating system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: As a type 2 hypervisor, Proxmox VE is built on the Debian project. Debian is
    a GNU/Linux distribution renowned for its reliability, commitment to security,
    and its thriving and dedicated community of contributing developers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Proxmox VE in brief](img/B01784_01_01.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: A type 2 hypervisor, such as PVE, runs directly over the operating system. In
    Proxmox VE's case, the operating system is Debian; since the release of PVE 4.0,
    the underlying operating system has been Debian "Jessie."
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: By contrast, a Type I Hypervisor (such as VMware's ESXi) runs directly on bare
    metal without the mediation of an operating system. It has no additional function
    beyond managing virtualization and the physical hardware.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![Proxmox VE in brief](img/B01784_01_02.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: A type I hypervisor runs directly on hardware, without the mediation of an operating
    system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debian-based GNU/Linux distributions are arguably the most popular GNU/Linux
    distributions for the desktop.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'One characteristic that distinguishes Debian from competing distributions is
    its release policy: Debian releases only when its development community can ensure its
    *stability*, *security*, and *usability*.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Debian does not distinguish between long-term support releases and regular releases
    as do some other distributions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Instead, all Debian releases receive strong support and critical updates throughout
    the first year following the next release. (Since 2007, a major release of Debian
    has been made about every two years. Debian 8, *Jessie*, was released just about
    on schedule in 2015.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Proxmox VE''s reliance on Debian is thus a testament to its commitment to these
    values: stability, security, and usability during scheduled releases that favor
    cutting-edge features.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'PVE provides its virtualization functionality through three open technologies
    managed through a unified web-based interface:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: LXC
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KVM
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QEMU
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand how this foundation serves Proxmox VE, we must first be able to
    clearly understand the relationship between virtualization (or, specifically,
    *hardware virtualization*) and containerization (*OS virtualization*). As we proceed,
    their respective use cases should become clear.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这一基础如何为 Proxmox VE 服务，我们首先需要清楚理解虚拟化（或更具体地说，*硬件虚拟化*）与容器化（*操作系统虚拟化*）之间的关系。随着讨论的深入，它们各自的使用场景应该变得更加清晰。
- en: Virtualization with Proxmox VE
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Proxmox VE 进行虚拟化
- en: It is correct to ultimately understand containerization as a type of virtualization.
    However, here, we'll look first to conceptually distinguish a virtual machine
    from a container by focusing on contrasting characteristics.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，容器化可以理解为一种虚拟化。然而，在此，我们首先通过对比虚拟机和容器的特点，概念上区分两者。
- en: Simply put, virtualization is a technique through which we provide fully-functional,
    computing resources without a demand for the resources' physical organization,
    locations, or relative proximity.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，虚拟化是一种技术，通过它我们可以提供功能齐全的计算资源，而不需要考虑资源的物理组织、位置或相对位置。
- en: Virtualization technology allows us to share and allocate the resources of a
    physical computer with multiple execution environments. Without context, virtualization
    is a vague term. It encapsulates the abstraction of such resources as storage,
    networks, servers, desktop environments, and even applications from their concrete
    hardware requirements through software implementation solutions called **hypervisors**.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化技术使我们能够将一台物理计算机的资源与多个执行环境共享和分配。若没有上下文，虚拟化是一个模糊的术语。它涵盖了通过名为**虚拟机管理程序**的软件实现解决方案，将存储、网络、服务器、桌面环境甚至应用程序等资源从其具体硬件需求中抽象出来。
- en: Virtualization thus affords us more flexibility, more functionality, and a significant
    positive impact on our budgets which are often realized with merely the resources
    we have at hand.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虚拟化为我们提供了更多的灵活性、更多的功能，并且对我们的预算产生了显著的正面影响，这些通常仅通过我们现有的资源便可实现。
- en: In terms of PVE, virtualization most commonly refers to the abstraction of all
    aspects of a discrete computing system from its hardware. In this context, virtualization
    is the creation, in other words, of a virtual machine or VM, with its own operating
    system and applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就 PVE 而言，虚拟化最常指将一个离散计算系统的所有方面从其硬件中抽象出来。在这个背景下，虚拟化是指创建一个虚拟机或 VM，它拥有自己的操作系统和应用程序。
- en: A VM may be initially understood as a computer that has the same functionality
    as a physical machine. Likewise, it may be incorporated and communicated with
    via a network exactly as a machine with physical hardware would. Put yet another
    way, from inside a VM, we will experience no difference from which we can distinguish
    it from a physical computer.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机可以最初理解为一台具有与物理机器相同功能的计算机。同样，它也可以像物理硬件机器一样通过网络进行集成和通信。换句话说，从虚拟机内部，我们将无法感知与物理计算机的区别。
- en: The virtual machine, moreover, hasn't the physical footprint of its physical
    counterparts. The hardware it relies on is, in fact, provided by software that
    borrows from the hardware resources of a host installed on a physical machine
    (or **bare metal**).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虚拟机并没有与其物理对应物相同的物理占地面积。它依赖的硬件实际上是通过借用安装在物理机器上的主机硬件资源的软件提供的（或称**裸金属**）。
- en: Nevertheless, the software components of the virtual machine, from the applications
    to the operating system, are distinctly separated from those of the host machine.
    This advantage is realized when it comes to allocating physical space for resources.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，虚拟机的软件组件，从应用程序到操作系统，与主机机器的组件是明显分开的。这个优势在分配物理空间用于资源时得以体现。
- en: For example, we may have a PVE server running a web server, database server,
    firewall, and log management system—all as discrete virtual machines. Rather than
    consuming physical space, resources, and labor of maintaining four physical machines,
    we simply make physical room for the single Proxmox VE server and configure an
    appropriate virtual LAN as necessary.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以有一台运行着 Web 服务器、数据库服务器、防火墙和日志管理系统的 PVE 服务器——这些都是作为离散的虚拟机存在。与其消耗四台物理机器的物理空间、资源和维护劳力，我们只需为单一的
    Proxmox VE 服务器腾出物理空间，并根据需要配置合适的虚拟局域网。
- en: 'In a white paper entitled *Putting Server Virtualization to Work*, AMD articulates
    well the benefits of virtualization to businesses and developers ([https://www.amd.com/Documents/32951B_Virtual_WP.pdf](https://www.amd.com/Documents/32951B_Virtual_WP.pdf)):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在一篇名为*将服务器虚拟化投入实际*的白皮书中，AMD 很好地阐述了虚拟化对企业和开发人员的好处 ([https://www.amd.com/Documents/32951B_Virtual_WP.pdf](https://www.amd.com/Documents/32951B_Virtual_WP.pdf))：
- en: '**Top 5 business benefits of virtualization:**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟化的前五大商业好处：**'
- en: '*Increases server utilization*'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*提高服务器利用率*'
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Improves service levels*'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*提高服务水平*'
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Streamlines manageability and security*'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*简化管理和提升安全性*'
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Decreases hardware costs*'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*降低硬件成本*'
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Reduces facility costs*'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*减少设施成本*'
- en: '**The benefits of virtualization with a development and test environment:**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用开发和测试环境进行虚拟化的好处：**'
- en: '*Lowers capital and space requirements*'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*降低资本和空间需求*'
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Lowers power and cooling costs*'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*降低电力和冷却成本*'
- en: ''
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Increases efficiencies through shorter test cycles*'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*通过更短的测试周期提高效率*'
- en: ''
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Faster time-to-market*'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*更快的上市时间*'
- en: 'To these benefits, let''s add portability and encapsulation: the unique ability
    to migrate a live VM from one PVE host to another—without suffering a service
    outage.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，让我们增加可移植性和封装性：独特的能力可以在不中断服务的情况下从一个 PVE 主机迁移实时虚拟机。
- en: 'Proxmox VE makes the creation and control of virtual machines possible through
    the combined use of two free and open source technologies: **Kernel-based Virtual
    Machine** (or **KVM**) and (**Quick Emulator (QEMU**). Used together, we refer
    to this integration of tools as **KVM-QEMU**.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Proxmox VE 通过两种自由开源技术的组合使虚拟机的创建和控制成为可能：**基于内核的虚拟机**（或者**KVM**）和（**Quick Emulator
    (QEMU)**）。这些工具的集成称为**KVM-QEMU**。
- en: KVM
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KVM
- en: KVM has been an integral part of the Linux kernel since February 2007\. This
    kernel module allows GNU/Linux users and administrators to take advantage of an
    architecture's hardware virtualization extensions; for our purposes, these extensions
    are AMD's **AMD-V** and Intel's**VT-X** for the x86_64 architecture.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 自2007年2月起，KVM 已成为 Linux 内核的一个重要部分。该内核模块允许 GNU/Linux 用户和管理员利用架构的硬件虚拟化扩展；对于我们的目的，这些扩展是
    AMD 的**AMD-V**和 Intel 的**VT-X**，适用于 x86_64 架构。
- en: To really make the most of Proxmox VE's feature set, you'll therefore want to
    install on an x86_64 machine with a CPU that has integrated virtualization extensions.
    For a full list of AMD and Intel processors supported by KVM, visit Intel at [http://ark.intel.com/Products/VirtualizationTechnology](http://ark.intel.com/Products/VirtualizationTechnology)
    or AMD at [http://support.amd.com/en-us/kb-articles/Pages/GPU120AMDRVICPUsHyperVWin8.aspx](http://support.amd.com/en-us/kb-articles/Pages/GPU120AMDRVICPUsHyperVWin8.aspx).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用 Proxmox VE 的功能集，因此建议在支持 x86_64 架构且具有集成虚拟化扩展的 CPU 的机器上安装。有关 KVM 支持的完整 AMD
    和 Intel 处理器列表，请访问 Intel 的 [http://ark.intel.com/Products/VirtualizationTechnology](http://ark.intel.com/Products/VirtualizationTechnology)
    或 AMD 的 [http://support.amd.com/en-us/kb-articles/Pages/GPU120AMDRVICPUsHyperVWin8.aspx](http://support.amd.com/en-us/kb-articles/Pages/GPU120AMDRVICPUsHyperVWin8.aspx)。
- en: QEMU
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QEMU
- en: QEMU provides an emulation and virtualization interface that can be scripted
    or otherwise controlled by a user.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU 提供了一个仿真和虚拟化接口，用户可以通过脚本或其他方式进行控制。
- en: '![QEMU](img/B01784_01_03.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![QEMU](img/B01784_01_03.png)'
- en: Visualizing the relationship between KVM and QEMU
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化 KVM 和 QEMU 之间的关系
- en: Without Proxmox VE, we could essentially define the hardware, create a virtual
    disk, and start and stop a virtualized server from the command line using QEMU.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 没有 Proxmox VE，我们基本上可以通过命令行定义硬件、创建虚拟磁盘，并启动和停止使用 QEMU 的虚拟化服务器。
- en: Alternatively, we could rely on any one of an array of GUI frontends for QEMU
    (a list of GUIs available for various platforms can be found at [http://wiki.qemu.org/Links#GUI_Front_Ends](http://wiki.qemu.org/Links#GUI_Front_Ends)).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以依赖于 QEMU 的各种 GUI 前端之一（各平台可用的 GUI 列表详见 [http://wiki.qemu.org/Links#GUI_Front_Ends](http://wiki.qemu.org/Links#GUI_Front_Ends)）。
- en: Of course, working with these solutions is productive only if you're interested
    in what goes on behind the scenes in PVE when virtual machines are defined. Proxmox
    VE's management of virtual machines, is itself, managing QEMU through its API.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，只有在你对 PVE 后台虚拟机定义过程感兴趣时，使用这些解决方案才是高效的。Proxmox VE 管理虚拟机本身通过其 API 管理 QEMU。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Managing QEMU from the command line can be tedious. The following is a line
    from a script that launched Raspbian, a Debian remix intended for the architecture
    of the Raspberry Pi, on an x86 Intel machine running Ubuntu. When we see how easy
    it is to manage VMs from Proxmox VE's administrative interfaces, we'll sincerely
    appreciate that relative simplicity:`qemu-system-arm -kernel kernel-qemu -cpu
    arm1176 -m 256 -M versatilepb -no-reboot -serial stdio -append "root=/dev/sda2
    panic=1" -hda ./$raspbian_img -hdb swap`
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行管理 QEMU 可能会很繁琐。以下是一个从在 x86 Intel 机器上运行 Ubuntu 的 Raspberry Pi 架构的 Debian
    重制版 Raspbian 的脚本中提取的行。当我们看到从 Proxmox VE 的管理界面管理虚拟机是多么简单时，我们会真诚地欣赏相对简单性：`qemu-system-arm
    -kernel kernel-qemu -cpu arm1176 -m 256 -M versatilepb -no-reboot -serial stdio
    -append "root=/dev/sda2 panic=1" -hda ./$raspbian_img -hdb swap`
- en: If you're familiar with QEMU's emulation features, it's perhaps important to
    note that we can't manage *emulation* through the tools and features Proxmox VE
    provides—despite its reliance on QEMU. From a bash shell provided by Debian, it's
    possible. However, the emulation can't be controlled through PVE's administration
    and management interfaces.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉 QEMU 的仿真功能，可能需要注意的是，尽管它依赖于 QEMU，但我们不能通过 Proxmox VE 提供的工具和功能管理 *仿真*。从 Debian
    提供的 bash shell 可能可以。但是，无法通过 PVE 的管理界面控制仿真。
- en: OS Virtualization with Proxmox VE
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Proxmox VE 的 OS 虚拟化
- en: '**Containers** are another type of virtualization. Synonymous with *OS virtualization*,
    containers have enjoyed a recent renaissance. In contrast to VMs, containers share operating
    system components, such as libraries and binaries, with the host operating system;
    a virtual machine does not.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器** 是另一种虚拟化类型。与 *OS 虚拟化* 同义，容器最近经历了复兴。与虚拟机相比，容器与主机操作系统共享操作系统组件，如库和二进制文件；而虚拟机则不会。'
- en: '![OS Virtualization with Proxmox VE](img/B01784_01_04.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Proxmox VE 的 OS 虚拟化](img/B01784_01_04.png)'
- en: Visually contrasting virtual machines with containers
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 用图示对比虚拟机和容器
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**The container advantage**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器的优势**'
- en: This arrangement potentially allows a container to run leaner and with fewer
    hardware resources borrowed from the host. For many authors, pundits, and users,
    containers also offer a demonstrable advantage in terms of speed and efficiency.
    (However, it should be noted here that as resources such as RAM and more powerful
    CPUs become cheaper, this advantage will diminish.)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这种安排可能使容器运行更轻便，并且占用更少的主机硬件资源。对于许多作者、专家和用户来说，容器在速度和效率方面也提供了显著优势。（然而，需要指出的是，随着内存和更强大的
    CPU 等资源变得更便宜，这种优势将会减弱。）
- en: The Proxmox VE container is made possible through LXC from version 4.0 onwards
    (it's made possible through OpenVZ in previous PVE versions). LXC is the third
    fundamental technology serving Proxmox VE's ultimate interest. Like KVM and QEMU,
    LXC (or Linux Containers) is an open source technology. It allows a host to run,
    and an administrator to manage, multiple operating system instances as isolated
    containers on a single physical host. Conceptually then, a container very clearly
    represents a class of virtualization, rather than an opposing concept. Nevertheless,
    it's helpful to maintain a clear distinction between a virtual machine and a container
    as we come to terms with PVE.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Proxmox VE 4.0 版本开始，Proxmox VE 容器由 LXC 实现（在之前的 PVE 版本中是通过 OpenVZ 实现的）。LXC
    是为 Proxmox VE 的最终利益服务的第三种基本技术。与 KVM 和 QEMU 类似，LXC（或 Linux 容器）是一种开源技术。它允许主机运行和管理员管理多个操作系统实例，作为单个物理主机上的隔离容器。因此，概念上，容器非常明确地代表一类虚拟化，而不是相对的概念。然而，对于理解
    PVE，保持虚拟机和容器之间的清晰区分是有帮助的。
- en: The ideal implementation of a Proxmox VE guest is contingent on our distinguishing
    and choosing between a virtual machine solution and a container solution.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Proxmox VE 的理想实现取决于我们区分并选择虚拟机解决方案和容器解决方案。
- en: Since Proxmox VE containers share components with the host operating system
    which offers advantages in terms of efficiency, this text will guide you through
    the creation of containers whenever the intended guest can be fully realized with
    Debian *Jessie* as our hypervisor's operating system without sacrificing features.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Proxmox VE 容器与主机操作系统共享组件，在效率方面具有优势，本文将指导您在预期的客户机可以完全实现为 Debian *Jessie* 作为我们的
    hypervisor 操作系统的情况下创建容器。
- en: When our intent is a guest running a Microsoft Windows operating system, for
    example, a Proxmox VE container ceases to be a solution. In such a case, we turn,
    instead, to creating a virtual machine. We must rely on a VM precisely because
    the operating system components that Debian can share with a Linux container are
    not components that a Microsoft Windows operating system can make use of.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的目标是运行微软 Windows 操作系统的客机时，Proxmox VE 容器便不再适用。在这种情况下，我们转而创建虚拟机。我们必须依赖虚拟机，因为
    Debian 与 Linux 容器共享的操作系统组件是微软 Windows 操作系统无法使用的组件。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we have come to terms with the three open source technologies
    that provide Proxmox VE''s foundational features: containerization and virtualization
    with LXC, KVM, and QEMU.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已熟悉为 Proxmox VE 提供基础功能的三种开源技术：LXC、KVM 和 QEMU，它们分别用于容器化和虚拟化。
- en: Along the way, we've come to understand that containers, while being a type
    of virtualization, have characteristics that distinguish them from virtual machines.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们理解到容器虽然是一种虚拟化方式，但其特性使它们与虚拟机有所不同。
- en: These differences will be crucial as we determine which technology to rely on
    for a virtual server solution with Proxmox VE.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些差异在我们决定依赖哪种技术来为 Proxmox VE 提供虚拟服务器解决方案时将至关重要。
- en: The next chapter will guide you through the installation and configuration of
    your first Proxmox VE server. It will thus introduce Proxmox VE hardware specifications
    and installation methods. Finally, it will provide a thorough walkthrough of the
    Proxmox Installer.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将指导你完成首次 Proxmox VE 服务器的安装和配置。它将介绍 Proxmox VE 的硬件规格和安装方法，最后还会提供一份完整的 Proxmox
    安装程序操作指南。
- en: Let's move forward and prepare our first PVE instance, which we will use to
    host both containers and virtual machines.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进，准备好我们的第一个 PVE 实例，我们将用它来托管容器和虚拟机。
