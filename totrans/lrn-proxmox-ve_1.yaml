- en: Chapter 1. Proxmox VE Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Proxmox Virtual Environment** (**PVE**) is a mature, complete, well-supported,
    enterprise-class virtualization environment for servers. It is an open source
    tool—based in the Debian GNU/Linux distribution—that manages containers, virtual
    machines, storage, virtualized networks, and high-availability clustering through
    a well-designed, web-based interface or via the command-line interface.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Developers provided the first stable release of Proxmox VE in 2008; four years
    and eight point releases later, ZDNet''s Ken Hess boldly, but quite sensibly,
    declared Proxmox VE as *Proxmox: The Ultimate Hypervisor* ([http://www.zdnet.com/article/proxmox-the-ultimate-hypervisor/](http://www.zdnet.com/article/proxmox-the-ultimate-hypervisor/)).Four
    years later, PVE is on version 4.1, in use by at least 90,000 hosts, and more
    than 500 commercial customers in 140 countries; the web-based administrative interface
    itself is translated into 19 languages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter explores the fundamental technologies underlying PVE''s hypervisor
    features: **LXC**, **KVM**, and **QEMU**. To do so, we will develop a working
    understanding of virtual machines, containers, and their appropriate use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Proxmox VE in brief
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualization and containerization with PVE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxmox VE virtual machines, KVM, and QEMU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containerization with PVE and LXC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxmox VE in brief
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Proxmox VE, Proxmox Server Solutions GmbH ([https://www.proxmox.com/en/about](https://www.proxmox.com/en/about))
    provides us with an enterprise-ready, open source *type* 2 *Hypervisor*. Later,
    you'll find some of the features that make Proxmox VE such a strong enterprise
    candidate.
  prefs: []
  type: TYPE_NORMAL
- en: The license for Proxmox VE is very deliberately the *GNU Affero General Public
    License (V3)* ([https://www.gnu.org/licenses/agpl-3.0.html](https://www.gnu.org/licenses/agpl-3.0.html)).
    From among the many free and open source compatible licenses available, this is
    a significant choice because it is "specifically designed to ensure cooperation
    with the community in the case of network server software."
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PVE is primarily administered from an integrated web interface, from the command
    line locally, or via SSH. Consequently, there is no need for a separate management
    server and the associated expenditure. In this way, Proxmox VE significantly contrasts
    with alternative enterprise virtualization solutions by vendors such as VMware.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxmox VE instances/nodes can be incorporated into PVE clusters, and centrally
    administered from a unified web interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxmox VE provides for live migration—the movement of a virtual machine or
    container from one cluster node to another without any disruption of services.
    This is a rather unique feature of PVE and not common in competing products.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Features** | **Proxmox VE** | **VMware vSphere** |'
  prefs: []
  type: TYPE_TB
- en: '| **Hardware requirements** | Flexible | Strict compliance with HCL |'
  prefs: []
  type: TYPE_TB
- en: '| **Integrated management interface** | Web- and shell-based (browser and SSH)
    | No. Requires dedicated management server at additional cost |'
  prefs: []
  type: TYPE_TB
- en: '| **Simple subscription structure** | Yes; based on number of premium support
    tickets per year and CPU socket count | No |'
  prefs: []
  type: TYPE_TB
- en: '| **High availability** | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **VM live migration** | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **Supports containers** | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| **Virtual machine OS support** | Windows and Linux | Windows, Linux, and
    Unix |'
  prefs: []
  type: TYPE_TB
- en: '| **Community support** | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| **Live VM snapshots** | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '*Contrasting Proxmox VE and VMware vSphere features*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a complete catalog of features, see the Proxmox VE datasheet at [https://www.proxmox.com/images/download/pve/docs/Proxmox-VE-Datasheet.pdf](https://www.proxmox.com/images/download/pve/docs/Proxmox-VE-Datasheet.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 'Like its competitors, PVE is a hypervisor: a typical hypervisor is software
    that creates, runs, configures, and manages virtual machines based on an administrator
    or engineer''s choices.'
  prefs: []
  type: TYPE_NORMAL
- en: PVE is known as a type 2 hypervisor because the virtualization layer is built
    upon an operating system.
  prefs: []
  type: TYPE_NORMAL
- en: As a type 2 hypervisor, Proxmox VE is built on the Debian project. Debian is
    a GNU/Linux distribution renowned for its reliability, commitment to security,
    and its thriving and dedicated community of contributing developers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Proxmox VE in brief](img/B01784_01_01.png)'
  prefs: []
  type: TYPE_IMG
- en: A type 2 hypervisor, such as PVE, runs directly over the operating system. In
    Proxmox VE's case, the operating system is Debian; since the release of PVE 4.0,
    the underlying operating system has been Debian "Jessie."
  prefs: []
  type: TYPE_NORMAL
- en: By contrast, a Type I Hypervisor (such as VMware's ESXi) runs directly on bare
    metal without the mediation of an operating system. It has no additional function
    beyond managing virtualization and the physical hardware.
  prefs: []
  type: TYPE_NORMAL
- en: '![Proxmox VE in brief](img/B01784_01_02.png)'
  prefs: []
  type: TYPE_IMG
- en: A type I hypervisor runs directly on hardware, without the mediation of an operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debian-based GNU/Linux distributions are arguably the most popular GNU/Linux
    distributions for the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'One characteristic that distinguishes Debian from competing distributions is
    its release policy: Debian releases only when its development community can ensure its
    *stability*, *security*, and *usability*.'
  prefs: []
  type: TYPE_NORMAL
- en: Debian does not distinguish between long-term support releases and regular releases
    as do some other distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, all Debian releases receive strong support and critical updates throughout
    the first year following the next release. (Since 2007, a major release of Debian
    has been made about every two years. Debian 8, *Jessie*, was released just about
    on schedule in 2015.
  prefs: []
  type: TYPE_NORMAL
- en: 'Proxmox VE''s reliance on Debian is thus a testament to its commitment to these
    values: stability, security, and usability during scheduled releases that favor
    cutting-edge features.'
  prefs: []
  type: TYPE_NORMAL
- en: 'PVE provides its virtualization functionality through three open technologies
    managed through a unified web-based interface:'
  prefs: []
  type: TYPE_NORMAL
- en: LXC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KVM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QEMU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand how this foundation serves Proxmox VE, we must first be able to
    clearly understand the relationship between virtualization (or, specifically,
    *hardware virtualization*) and containerization (*OS virtualization*). As we proceed,
    their respective use cases should become clear.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization with Proxmox VE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is correct to ultimately understand containerization as a type of virtualization.
    However, here, we'll look first to conceptually distinguish a virtual machine
    from a container by focusing on contrasting characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: Simply put, virtualization is a technique through which we provide fully-functional,
    computing resources without a demand for the resources' physical organization,
    locations, or relative proximity.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization technology allows us to share and allocate the resources of a
    physical computer with multiple execution environments. Without context, virtualization
    is a vague term. It encapsulates the abstraction of such resources as storage,
    networks, servers, desktop environments, and even applications from their concrete
    hardware requirements through software implementation solutions called **hypervisors**.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization thus affords us more flexibility, more functionality, and a significant
    positive impact on our budgets which are often realized with merely the resources
    we have at hand.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of PVE, virtualization most commonly refers to the abstraction of all
    aspects of a discrete computing system from its hardware. In this context, virtualization
    is the creation, in other words, of a virtual machine or VM, with its own operating
    system and applications.
  prefs: []
  type: TYPE_NORMAL
- en: A VM may be initially understood as a computer that has the same functionality
    as a physical machine. Likewise, it may be incorporated and communicated with
    via a network exactly as a machine with physical hardware would. Put yet another
    way, from inside a VM, we will experience no difference from which we can distinguish
    it from a physical computer.
  prefs: []
  type: TYPE_NORMAL
- en: The virtual machine, moreover, hasn't the physical footprint of its physical
    counterparts. The hardware it relies on is, in fact, provided by software that
    borrows from the hardware resources of a host installed on a physical machine
    (or **bare metal**).
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, the software components of the virtual machine, from the applications
    to the operating system, are distinctly separated from those of the host machine.
    This advantage is realized when it comes to allocating physical space for resources.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we may have a PVE server running a web server, database server,
    firewall, and log management system—all as discrete virtual machines. Rather than
    consuming physical space, resources, and labor of maintaining four physical machines,
    we simply make physical room for the single Proxmox VE server and configure an
    appropriate virtual LAN as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a white paper entitled *Putting Server Virtualization to Work*, AMD articulates
    well the benefits of virtualization to businesses and developers ([https://www.amd.com/Documents/32951B_Virtual_WP.pdf](https://www.amd.com/Documents/32951B_Virtual_WP.pdf)):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Top 5 business benefits of virtualization:**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Increases server utilization*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Improves service levels*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Streamlines manageability and security*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Decreases hardware costs*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Reduces facility costs*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**The benefits of virtualization with a development and test environment:**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lowers capital and space requirements*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Lowers power and cooling costs*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Increases efficiencies through shorter test cycles*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Faster time-to-market*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To these benefits, let''s add portability and encapsulation: the unique ability
    to migrate a live VM from one PVE host to another—without suffering a service
    outage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Proxmox VE makes the creation and control of virtual machines possible through
    the combined use of two free and open source technologies: **Kernel-based Virtual
    Machine** (or **KVM**) and (**Quick Emulator (QEMU**). Used together, we refer
    to this integration of tools as **KVM-QEMU**.'
  prefs: []
  type: TYPE_NORMAL
- en: KVM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: KVM has been an integral part of the Linux kernel since February 2007\. This
    kernel module allows GNU/Linux users and administrators to take advantage of an
    architecture's hardware virtualization extensions; for our purposes, these extensions
    are AMD's **AMD-V** and Intel's**VT-X** for the x86_64 architecture.
  prefs: []
  type: TYPE_NORMAL
- en: To really make the most of Proxmox VE's feature set, you'll therefore want to
    install on an x86_64 machine with a CPU that has integrated virtualization extensions.
    For a full list of AMD and Intel processors supported by KVM, visit Intel at [http://ark.intel.com/Products/VirtualizationTechnology](http://ark.intel.com/Products/VirtualizationTechnology)
    or AMD at [http://support.amd.com/en-us/kb-articles/Pages/GPU120AMDRVICPUsHyperVWin8.aspx](http://support.amd.com/en-us/kb-articles/Pages/GPU120AMDRVICPUsHyperVWin8.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: QEMU
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QEMU provides an emulation and virtualization interface that can be scripted
    or otherwise controlled by a user.
  prefs: []
  type: TYPE_NORMAL
- en: '![QEMU](img/B01784_01_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing the relationship between KVM and QEMU
  prefs: []
  type: TYPE_NORMAL
- en: Without Proxmox VE, we could essentially define the hardware, create a virtual
    disk, and start and stop a virtualized server from the command line using QEMU.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we could rely on any one of an array of GUI frontends for QEMU
    (a list of GUIs available for various platforms can be found at [http://wiki.qemu.org/Links#GUI_Front_Ends](http://wiki.qemu.org/Links#GUI_Front_Ends)).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, working with these solutions is productive only if you're interested
    in what goes on behind the scenes in PVE when virtual machines are defined. Proxmox
    VE's management of virtual machines, is itself, managing QEMU through its API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Managing QEMU from the command line can be tedious. The following is a line
    from a script that launched Raspbian, a Debian remix intended for the architecture
    of the Raspberry Pi, on an x86 Intel machine running Ubuntu. When we see how easy
    it is to manage VMs from Proxmox VE's administrative interfaces, we'll sincerely
    appreciate that relative simplicity:`qemu-system-arm -kernel kernel-qemu -cpu
    arm1176 -m 256 -M versatilepb -no-reboot -serial stdio -append "root=/dev/sda2
    panic=1" -hda ./$raspbian_img -hdb swap`
  prefs: []
  type: TYPE_NORMAL
- en: If you're familiar with QEMU's emulation features, it's perhaps important to
    note that we can't manage *emulation* through the tools and features Proxmox VE
    provides—despite its reliance on QEMU. From a bash shell provided by Debian, it's
    possible. However, the emulation can't be controlled through PVE's administration
    and management interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: OS Virtualization with Proxmox VE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Containers** are another type of virtualization. Synonymous with *OS virtualization*,
    containers have enjoyed a recent renaissance. In contrast to VMs, containers share operating
    system components, such as libraries and binaries, with the host operating system;
    a virtual machine does not.'
  prefs: []
  type: TYPE_NORMAL
- en: '![OS Virtualization with Proxmox VE](img/B01784_01_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Visually contrasting virtual machines with containers
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**The container advantage**'
  prefs: []
  type: TYPE_NORMAL
- en: This arrangement potentially allows a container to run leaner and with fewer
    hardware resources borrowed from the host. For many authors, pundits, and users,
    containers also offer a demonstrable advantage in terms of speed and efficiency.
    (However, it should be noted here that as resources such as RAM and more powerful
    CPUs become cheaper, this advantage will diminish.)
  prefs: []
  type: TYPE_NORMAL
- en: The Proxmox VE container is made possible through LXC from version 4.0 onwards
    (it's made possible through OpenVZ in previous PVE versions). LXC is the third
    fundamental technology serving Proxmox VE's ultimate interest. Like KVM and QEMU,
    LXC (or Linux Containers) is an open source technology. It allows a host to run,
    and an administrator to manage, multiple operating system instances as isolated
    containers on a single physical host. Conceptually then, a container very clearly
    represents a class of virtualization, rather than an opposing concept. Nevertheless,
    it's helpful to maintain a clear distinction between a virtual machine and a container
    as we come to terms with PVE.
  prefs: []
  type: TYPE_NORMAL
- en: The ideal implementation of a Proxmox VE guest is contingent on our distinguishing
    and choosing between a virtual machine solution and a container solution.
  prefs: []
  type: TYPE_NORMAL
- en: Since Proxmox VE containers share components with the host operating system
    which offers advantages in terms of efficiency, this text will guide you through
    the creation of containers whenever the intended guest can be fully realized with
    Debian *Jessie* as our hypervisor's operating system without sacrificing features.
  prefs: []
  type: TYPE_NORMAL
- en: When our intent is a guest running a Microsoft Windows operating system, for
    example, a Proxmox VE container ceases to be a solution. In such a case, we turn,
    instead, to creating a virtual machine. We must rely on a VM precisely because
    the operating system components that Debian can share with a Linux container are
    not components that a Microsoft Windows operating system can make use of.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have come to terms with the three open source technologies
    that provide Proxmox VE''s foundational features: containerization and virtualization
    with LXC, KVM, and QEMU.'
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, we've come to understand that containers, while being a type
    of virtualization, have characteristics that distinguish them from virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: These differences will be crucial as we determine which technology to rely on
    for a virtual server solution with Proxmox VE.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will guide you through the installation and configuration of
    your first Proxmox VE server. It will thus introduce Proxmox VE hardware specifications
    and installation methods. Finally, it will provide a thorough walkthrough of the
    Proxmox Installer.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move forward and prepare our first PVE instance, which we will use to
    host both containers and virtual machines.
  prefs: []
  type: TYPE_NORMAL
