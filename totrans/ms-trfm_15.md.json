["```\nresource \"google_storage_bucket\" \"frontend\" {\n  project  = google_project.main.project_id\n  name     = \"${var.application_name}-${var.environment_name}-frontend-${random_string.project_id.result}\"\n  location = \"US\"\n  website {\n    main_page_suffix = \"index.html\"\n    not_found_page   = \"404.html\"\n  }\n  cors {\n    origin          = [\"*\"]\n    method          = [\"GET\", \"HEAD\"]\n    response_header = [\"Authorization\", \"Content-Type\"]\n    max_age_seconds = 3600\n  }\n}\n```", "```\nresource \"google_storage_bucket_iam_binding\" \"frontend\" {\n  bucket = google_storage_bucket.frontend.name\n  role   = \"roles/storage.objectViewer\"\n  members = [\n    \"allUsers\"\n  ]\n}\n```", "```\nresource \"google_compute_backend_bucket\" \"frontend\" {\n  project = google_project.main.project_id\n  name        = \"${var.application_name}-${var.environment_name}-frontend-${random_string.project_id.result}\"\n  bucket_name = google_storage_bucket.frontend.name\n  enable_cdn  = true\n}\n```", "```\nresource \"google_cloudfunctions2_function\" \"backend\" {\n  project  = google_project.main.project_id\n  name = \"func-${var.application_name}-${var.environment_name}-backend-${random_string.project_id.result}\"\n  location = var.primary_region\n  description = \"a new function\"\n}\n```", "```\n  build_config {\n    runtime     = \"dotnet6\"\n    entry_point = \"FleetAPI.Function\"\n    source {\n      storage_source {\n        bucket = google_storage_bucket.backend.name\n        object = google_storage_bucket_object.deployment.name\n      }\n    }\n  }\n```", "```\n  service_config {\n    max_instance_count = 1\n    available_memory   = \"256M\"\n    timeout_seconds    = 60\n  }\n```", "```\n  service_config {\n    ...\n    environment_variables = {\n        SERVICE_CONFIG_TEST = \"config_test\"\n    }\n  }\n```", "```\nresource \"google_secret_manager_secret\" \"sauce\" {\n  secret_id = \"sauce\"\n  replication {\n    user_managed {\n      replicas {\n        location = var.primary_region\n      }\n    }\n  }\n}\n```", "```\nresource \"google_secret_manager_secret_version\" \"sauce\" {\n  secret = google_secret_manager_secret.secret.name\n  secret_data = \"secret\"\n  enabled = true\n}\n```", "```\n    secret_environment_variables {\n      key        = \"sauce\"\n      project_id = google_project.main.project_id\n      secret     = google_secret_manager_secret.sauce.secret_id\n      version    = \"latest\"\n    }\n```", "```\n    secret_volumes {\n      mount_path = \"/etc/secrets\"\n      project_id = google_project.main.project_id\n      secret     = google_secret_manager_secret.secret.secret_id\n    }\n```", "```\n      - name: Upload to Google Cloud Storage Bucket\n        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}/upload-staging\n        run: |\n          gsutil -o Credentials:gs_service_key_file=../gcp-terraform.json -m cp -r . gs://${{ needs.terraform.outputs.frontend_bucket_name }}\n```", "```\nresource \"google_storage_bucket\" \"backend\" {\n  project  = google_project.main.project_id\n  name     = \"${var.application_name}-${var.environment_name}-backend-${random_string.project_id.result}\"\n  location = \"US\"\n}\n```", "```\nresource \"google_storage_bucket_object\" \"deployment\" {\n  name   = \"deployment.zip\"\n  bucket = google_storage_bucket.backend.name\n  source = \"deployment.zip\"\n}\n```"]