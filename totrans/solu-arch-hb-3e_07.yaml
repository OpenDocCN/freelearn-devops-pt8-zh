- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Security Considerations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全性考虑
- en: Security is always at the center of architectural design. Many enterprises suffer
    financial losses due to security breaches when their customer data gets leaked.
    Organizations can, therefore, not only lose customer trust but also the entire
    business.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性始终是架构设计的核心。许多企业因安全漏洞导致客户数据泄露而遭受财务损失。因此，组织不仅可能失去客户信任，还可能失去整个业务。
- en: There are many industry-standard compliances and regulations out there to make
    sure your application is *secure* and protects customer-sensitive data. In the
    previous chapter, you learned about various aspects of performance improvement
    and technology choices for your architecture. In this chapter, you will gain an
    understanding of best practices to secure your application and make sure it is
    compliant with industry-standard regulations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多行业标准的合规性和法规，以确保您的应用程序是*安全的*并且保护客户敏感数据。在前一章中，您了解了关于架构性能改进和技术选择的各个方面。本章将帮助您了解如何采用最佳实践来保护您的应用程序，并确保它符合行业标准的法规要求。
- en: Security in architecture doesn’t only mean protecting the edge of your IT workload.
    It also includes making sure that different parts of your application infrastructure
    are safe from each other. For example, on a server, you can use a firewall to
    control which data can enter or leave and where it can go. This way, if one part
    has a security issue, it won’t affect the rest. You need to do the same for all
    parts, such as your data and programs. Security needs to be applied to every layer
    and every component of the architecture. This chapter also discusses different
    ways to keep your cloud system safe.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 架构中的安全性不仅仅是保护 IT 工作负载的边缘。它还包括确保应用程序基础设施的不同部分相互之间是安全的。例如，在服务器上，您可以使用防火墙来控制哪些数据可以进出以及可以去哪里。这样，如果某个部分存在安全问题，它不会影响其他部分。您需要对所有部分进行相同的操作，如数据和程序。安全性需要应用于架构的每一层和每个组件。本章还讨论了保持云系统安全的不同方法。
- en: 'You will learn about the following security practices in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下安全实践：
- en: Design principles for architectural security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构安全设计原则
- en: Selecting technology for architectural security
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择技术以实现架构安全
- en: Security and compliance certifications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性和合规性认证
- en: The cloud’s shared security responsibility model
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云的共享安全责任模型
- en: Security threat modeling
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全威胁建模
- en: Design principles for architectural security
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构安全设计原则
- en: Security is all about the ability to protect your system and information while
    delivering business value for your customers. Lack of good security can have a
    serious impact on your customers and business.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性关乎于在为客户提供业务价值的同时保护您的系统和信息。缺乏良好的安全性可能对您的客户和业务产生严重影响。
- en: You need to conduct an in-depth security risk assessment and plan a mitigation
    strategy for the continuous operation of your business. The following sections
    talk about standard design principles that will help you strengthen your architectural
    security.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要进行深入的安全风险评估，并规划出连续运营的缓解策略。接下来的章节将讨论标准设计原则，帮助您加强架构的安全性。
- en: Implementing authentication and authorization control
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施身份验证和授权控制
- en: The purpose of **authentication** is to determine whether a user can access
    the system with the provided credentials, while **authorization** determines what
    a user can do once they are inside the system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份验证**的目的是确定用户是否可以使用提供的凭据访问系统，而**授权**则决定用户进入系统后可以做什么。'
- en: You should create a centralized system to manage your users’ authentication
    and authorization. A centralized user management system helps you to keep track
    of users’ activity so you can deactivate them if they are no longer a part of
    the system or are no longer using it appropriately. You can define standard rules
    to onboard a new user and remove access for inactive users. A centralized system
    eliminates reliance on long-term credentials and allows you to configure other
    security methods, such as password rotation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该创建一个集中式系统来管理用户的身份验证和授权。集中式用户管理系统可以帮助您跟踪用户活动，以便在他们不再是系统的一部分或不再正确使用系统时停用他们。您可以定义标准规则来为新用户提供入职，并为不活跃的用户取消访问权限。集中式系统消除了对长期凭据的依赖，并允许您配置其他安全方法，例如密码轮换。
- en: For authorization, you should start with the **principle of least privilege**—this
    means users should not have any access to begin with and are assigned only the
    required access types according to their job role. Creating an access group according
    to job role helps to manage the authorization policy in one place and apply authorization
    restrictions across a large number of users. For example, you can restrict the
    development team to have full access to the development environment and read-only
    access to the production environment. If any new developer joins, they should
    be added to this dev group, where all authorization policies are managed centrally.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在授权方面，你应当遵循**最小权限原则**——这意味着用户初始时不应拥有任何权限，且仅根据其职位角色分配所需的访问权限。根据职位角色创建访问组，有助于在一个地方管理授权策略，并在大量用户中应用授权限制。例如，你可以限制开发团队仅能访问开发环境的全部权限，而只能以只读方式访问生产环境。如果有新的开发人员加入，他们应被添加到这个开发组，所有授权策略都在此集中管理。
- en: Enabling **single sign-on** (**SSO**) with a centralized user repository helps
    to reduce the hassle of remembering multiple passwords for your user base and
    eliminates any risk of password leakage. To further enhance security, integrating
    **multi-factor authentication** (**MFA**) with SSO adds an additional layer of
    protection. MFA requires users to provide two or more verification factors to
    gain access to a resource, such as a security token, a fingerprint, or facial
    recognition.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 启用**单点登录**（**SSO**）并使用集中的用户存储库，有助于减少用户群体记住多个密码的麻烦，并消除密码泄露的风险。为了进一步增强安全性，将**多因素认证**（**MFA**）与SSO结合，可以增加额外的保护层。MFA要求用户提供两个或更多的验证因素来访问资源，例如安全令牌、指纹或面部识别。
- en: Large organizations use centralized user management tools such as **Active Directory**
    (**AD**) for employee authentication and authorization to provide access to internal
    enterprise applications such as the HR system, the expense system, and the timesheet
    application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大型组织使用集中式用户管理工具，例如**Active Directory**（**AD**），对员工进行身份验证和授权，从而提供访问内部企业应用程序的权限，如人力资源系统、费用系统和考勤系统。
- en: In a customer-facing application, such as e-commerce and social media websites,
    you can use an OpenID authentication system to maintain a centralized system.
    OpenID is an open standard authentication protocol. You will learn about large-scale
    user management tools in more detail in the *OAuth and OpenID Connect* section
    of this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向客户的应用程序中，例如电子商务和社交媒体网站，你可以使用OpenID身份验证系统来维持一个集中的系统。OpenID是一种开放标准的身份验证协议。你将在本章的*OAuth和OpenID
    Connect*部分详细了解大规模用户管理工具。
- en: Applying security everywhere
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在各个层级应用安全
- en: Often, organizations primarily focus on ensuring the physical safety of their
    data center and protecting the outer networking layer from any attack. Instead
    of just focusing on a single outer layer, ensure that security is applied at every
    application layer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，组织主要关注确保数据中心的物理安全，并保护外部网络层免受任何攻击。与其仅专注于单一的外层防护，不如确保在每个应用层都实施安全措施。
- en: Apply the **defense-in-depth** (**DiD**) approach to layer security controls
    throughout an application; for example, a web application needs to be secured
    from external internet traffic by protecting the **Enhanced Data rates for Global
    Evolution** (**EDGE**) network and **Domain Name System** (**DNS**) routing. Apply
    security at the load balancer and network layers to block malicious traffic.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 运用**深度防御**（**DiD**）方法，将安全控制措施层层叠加在应用程序中；例如，Web应用程序需要通过保护**全球演进增强数据速率**（**EDGE**）网络和**域名系统**（**DNS**）路由来防止外部互联网流量的侵入。在负载均衡器和网络层面应用安全，阻止恶意流量。
- en: Secure every application instance by allowing only required incoming and outgoing
    traffic in the web application and database layer. Protect operating systems with
    antivirus software to safeguard against any malware attack. Apply both proactive
    and reactive measures of protection by putting an **intrusion detection system**
    (**IDS**) and **intrusion prevention system** (**IPS**) in front of your traffic
    flow and using a **web application firewall** (**WAF**) to protect your application
    from various kinds of attacks. You will learn more details about the various security
    tools to use in the *Selecting technology for architectural security* section
    of this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仅允许必要的进出流量来保护每个应用实例，在Web应用和数据库层面实施这一措施。使用杀毒软件保护操作系统，以防止任何恶意软件攻击。通过在流量流动前放置**入侵检测系统**（**IDS**）和**入侵防御系统**（**IPS**），以及使用**Web应用防火墙**（**WAF**）来保护应用免受各种攻击。你将在本章的*选择技术以确保架构安全*部分了解更多有关各种安全工具的细节。
- en: Reducing the blast radius
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减少爆炸半径
- en: While applying security measures at every layer, you should keep your system
    isolated in a small pocket to reduce the blast radius. If attackers get access
    to one part of the system, you should be able to limit a security breach to the
    smallest possible area of the application. For example, in a web application,
    keep your load balancer in a separate network from other layers of the architecture,
    as that will be internet-facing. Further more, apply network separation at the
    web, application, and database layers. If an attack happens in one layer, you
    should prevent it from expanding to other layers of the architecture.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一层应用安全措施时，你应该保持系统的隔离，将其分隔成较小的区域，以减少爆炸半径。如果攻击者访问了系统的某一部分，你应该能够将安全漏洞限制在应用程序的最小区域内。例如，在Web应用中，将负载均衡器放在与架构其他层分离的独立网络中，因为它是面向互联网的。此外，在Web、应用和数据库层之间应用网络隔离。如果一个层发生攻击，应该防止它扩展到架构的其他层。
- en: The same rules are applied to your authorization system, giving the least privilege
    to users and providing only the minimum required access. Implement MFA so that
    even if there’s a breach in user access, the attacker always needs a second level
    of authentication to get into the system.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的规则也适用于你的授权系统，给用户最小权限，只提供最低限度的必要访问权限。实施多因素认证（MFA），即使用户访问遭到突破，攻击者也始终需要第二级身份验证才能进入系统。
- en: Provide minimal access to the system to ensure that you are not exposing the
    entire system, and provide temporary credentials to make sure access is kept open
    for a short time. Take precautions when providing programmatic access by putting
    a secure token in place with frequent key rotation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 提供系统的最小访问权限，确保不暴露整个系统，并提供临时凭证以确保访问仅在短时间内开放。提供编程访问时，采取预防措施，通过使用安全令牌并频繁更换密钥来保证安全。
- en: Monitoring and auditing everything all the time
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时刻监控和审计一切
- en: You need a logging mechanism for every activity in your system, and you should
    conduct a regular audit. Audit capabilities are often required from various industry-compliance
    regulations. Collect logs from every component, including all transactions and
    each API call, to put centralized monitoring in place. It is a good practice to
    add a level of security and access limitations to a centralized logging account
    so that no one can tamper with it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要为系统中的每个活动设置日志机制，并应定期进行审计。审计功能通常是各种行业合规要求的一部分。收集来自每个组件的日志，包括所有交易和每次API调用，以实现集中监控。一个好的做法是对集中日志账户添加一层安全性和访问限制，以防止任何人篡改。
- en: Take a proactive approach and be ready to handle any incident before the user
    is affected. Alert capabilities with centralized monitoring help you take quick
    action and mitigate any incident. Monitor all user activity and application accounts
    to limit a security breach.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 采取积极主动的方法，做好准备在用户受到影响之前处理任何事件。通过集中监控的警报功能，帮助你迅速采取行动并减少任何事件的影响。监控所有用户活动和应用程序账户，以限制安全漏洞。
- en: Automating everything
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化一切
- en: Automation is essential for applying quick mitigation for any security-rule
    violation. You can use automation to revert changes against desired configurations
    and alert the security team—for example, if someone added admin users to your
    system and an open firewall to an unauthorized port or IP address. You can apply
    automation to remove such undesired changes in the system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化对于快速应对任何安全规则违规行为至关重要。你可以使用自动化来恢复与所需配置不符的更改，并向安全团队发出警报。例如，如果有人将管理员用户添加到你的系统，并将防火墙打开到未经授权的端口或IP地址，你可以应用自动化来删除这些不需要的系统更改。
- en: Applying automation to security systems has become popular with the concept
    of DevSecOps. DevSecOps is about adding security to every part of application
    development and operations. You will learn more about DevSecOps in *Chapter 11*,
    *DevOps and Solution Architecture Framework*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将自动化应用于安全系统已成为DevSecOps概念中的一部分。DevSecOps旨在将安全性融入应用开发和操作的每个部分。你将在*第11章*，*DevOps与解决方案架构框架*中进一步了解DevSecOps。
- en: Create secure architectures and implement security controls that are defined
    and managed as code. You can version-control your security as a code template
    and analyze changes as required. Automated security mechanisms as software code
    help you scale security operations more rapidly and cost-effectively.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建安全的架构并实施定义和管理为代码的安全控制。你可以对安全作为代码模板进行版本控制，并根据需要分析更改。作为软件代码的自动化安全机制帮助你更快速、更具成本效益地扩展安全操作。
- en: Protecting data
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据保护
- en: Data is at the center of your architecture, and it is essential to secure and
    protect it. Most of the compliance regulations in place are there to protect customer
    data and identity. Most attacks have the intention of stealing user data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是你架构的核心，保护和确保数据安全至关重要。大多数合规性法规的制定都是为了保护客户数据和身份。大多数攻击的目的是窃取用户数据。
- en: You should categorize your data by its sensitivity level and protect it accordingly.
    For example, customer credit card information should be the most sensitive data
    and should be handled with the utmost care. On the other hand, a customer’s first
    name may not be that sensitive, while the card number is sensitive information.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该根据数据的敏感性级别对其进行分类，并相应地进行保护。例如，客户的信用卡信息应为最敏感的数据，并应以极大的谨慎处理。另一方面，客户的名字可能不那么敏感，而卡号则属于敏感信息。
- en: 'Protecting data throughout its lifecycle is crucial for maintaining its confidentiality,
    integrity, and availability. Data can exist in three states, and each state requires
    specific security measures to ensure comprehensive protection:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据的整个生命周期中保护数据对维护其机密性、完整性和可用性至关重要。数据可以存在三种状态，每种状态都需要特定的安全措施来确保全面保护：
- en: '**Data at rest**: This refers to data stored on physical media, whether on
    a server’s hard drive, a laptop, a USB stick, or cloud storage. One protection
    mechanism for data at rest is encryption, which ensures that even if the storage
    device falls into the wrong hands, the data remains inaccessible without the encryption
    key. Additionally, you need to have access controls and regular audits in place
    to ensure that only authorized users can access or modify the data.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态数据**：指存储在物理介质上的数据，无论是在服务器的硬盘、笔记本电脑、USB闪存驱动器还是云存储中。保护静态数据的一个机制是加密，它确保即使存储设备落入不法之手，数据也无法访问，除非拥有加密密钥。此外，你还需要设置访问控制并定期审计，确保只有授权用户可以访问或修改数据。'
- en: '**Data in transit**: When data moves across a network—from a user’s computer
    to a server, between servers, or across the internet—it’s considered in transit.
    To protect data in transit, you can use encryption protocols such as **Transport
    Layer Security** (**TLS**). This ensures that even if the data is intercepted
    during transmission, it remains unreadable to the attacker.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传输中的数据**：当数据在网络中传输时——从用户的计算机到服务器、服务器之间，或通过互联网——它被视为处于传输中。为了保护传输中的数据，你可以使用加密协议，如**传输层安全性**（**TLS**）。这确保即使数据在传输过程中被拦截，它也对攻击者保持不可读。'
- en: '**Data in use**: This is often the most challenging state to protect because
    the data is being processed or used by applications. Encryption can protect data
    at rest and in transit, but once it’s loaded into memory and being used by an
    application, it’s in plaintext and potentially vulnerable. New technologies such
    as **trusted execution environments** (**TEEs**) and homomorphic encryption are
    emerging to secure data in use, allowing operations on encrypted data without
    needing to decrypt it first.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用中的数据**：这通常是保护最具挑战性的状态，因为数据正在被应用程序处理或使用。加密可以保护数据在静态和传输中的状态，但一旦加载到内存并被应用程序使用，数据就变成了明文，可能会有安全漏洞。新技术如**受信执行环境**（**TEEs**）和同态加密正在兴起，用于保护使用中的数据，允许在加密数据上执行操作而无需先解密。'
- en: Create mechanisms and tools that minimize the need for direct access to data.
    Avoid manual data processing by applying tool-based automation that eliminates
    human error, especially when handling sensitive data. Apply access restrictions
    to the data wherever possible to reduce the risk of data loss or data modification.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建最小化直接访问数据需求的机制和工具。通过应用基于工具的自动化，避免手动数据处理，从而消除人为错误，特别是在处理敏感数据时。在可能的情况下对数据应用访问限制，以减少数据丢失或数据修改的风险。
- en: Once you categorize data by sensitivity, you can use the appropriate encryption,
    tokenization, and access control to protect the data. Data needs to be protected
    not only at rest but also in motion—when being transmitted over the network—as
    well. You will learn about various mechanisms to protect data in the *Data security*
    section of this chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦按敏感性分类数据，您可以使用适当的加密、令牌化和访问控制来保护数据。数据不仅需要在静态状态下保护，还需要在传输过程中保护——即在网络上传输时。您将在本章的*数据安全*部分学习各种保护数据的机制。
- en: Responding to security incidents
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应安全事件
- en: Keep yourself ready for any security events. Create an incident management process
    as per your organizational policy requirements. Incident management can differ
    from one organization to another and from one application to another. For example,
    if your application handles the **personally identifiable information** (**PII**)
    of your customers, you need tighter security measures in your incident response.
    However, if the application is handling small amounts of sensitive data, such
    as an inventory management application, then it will have a different approach.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 保持随时准备应对任何安全事件。根据您的组织政策要求创建事故管理流程。事故管理因组织和应用程序而异。例如，如果您的应用程序处理客户的**个人身份信息**（**PII**），则需要在事故响应中采取更严格的安全措施。然而，如果应用程序处理的是少量敏感数据，如库存管理应用程序，则其处理方式将不同。
- en: Make sure to simulate the incident response to see how your security team would
    recover from a situation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保模拟响应安全事件，以查看您的安全团队如何从中恢复。
- en: Your team should use automation tools to speed up detection, investigation,
    and response to any security event. You will need to set up the alert, monitor,
    and audit mechanisms to do **root cause analysis** (**RCA**) to prevent such events
    from occurring again.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您的团队应使用自动化工具加速检测、调查和响应任何安全事件。您需要设置警报、监控和审计机制，进行**根本原因分析**（**RCA**），以防止类似事件再次发生。
- en: In this section, you learned about the general security principles to apply
    in your architecture for application security. In the next section, you will learn
    how to apply these principles using different tools and techniques.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了应用于应用程序安全架构中的一般安全原则。在下一节中，您将学习如何使用不同的工具和技术来应用这些原则。
- en: Selecting technology for architectural security
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择用于架构安全的技术
- en: 'The previous section focused on the general application security rules to consider
    while designing architecture. Still, the question is: *How do we apply these rules
    to make the application secure during implementation?* There are various tools
    and technologies available for each layer of your application to make it secure.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节专注于设计架构时考虑的一般应用程序安全规则，但问题是：*我们如何在实施过程中应用这些规则来确保应用程序安全？* 每个应用程序层都有各种工具和技术可用，用于使其安全。
- en: In this section, you will learn in detail about the multiple technology choices
    you have in the areas of user management and the protection of the web layer,
    infrastructure, and data of your application. Let’s start with the first area,
    user identity and access management.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，你将详细了解在用户管理以及应用程序的Web层、基础设施和数据保护领域中可用的多种技术选择。让我们从第一个领域——用户身份和访问管理开始。
- en: User identity and access management
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户身份和访问管理
- en: User identity and access management are vital parts of information security.
    This is because it’s best to ensure that only authenticated and authorized users
    can access your system resources in a defined manner.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 用户身份和访问管理是信息安全的关键部分。因为最好的做法是确保只有经过身份验证和授权的用户才能以特定方式访问你的系统资源。
- en: User management could be a daunting task as your organization grows and your
    product is more widely adopted. User access management should differentiate and
    manage access to an organization’s employees, vendors, and customers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 随着组织的发展和产品被广泛采用，用户管理可能成为一项艰巨的任务。用户访问管理应区分并管理组织员工、供应商和客户的访问权限。
- en: Enterprise or corporate users could be the organization’s employees, contractors,
    or vendors. They are specialist users with special privileges to develop, test,
    and deploy the application. In addition to that, they probably require access
    to other corporate systems to do their daily job—for example, an **Enterprise
    Resource System** (**ERP**), a payroll system, an HR system, a timesheet application,
    and so on. As your organization grows, the number of users can grow from hundreds
    to thousands.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 企业或公司用户可能是组织的员工、承包商或供应商。他们是拥有特殊权限的专家用户，负责开发、测试和部署应用程序。此外，他们可能需要访问其他企业系统以完成日常工作——例如，**企业资源系统**
    (**ERP**)、薪资系统、人力资源系统、工时表应用等。随着组织的扩展，用户数量可以从几百人增加到几千人。
- en: The end users are the customers who use your applications and have enough access
    to explore and utilize the desired feature of the application—for example, players
    of a gaming application, users of social media applications, or customers of an
    e-commerce website. The number of these users could be from thousands to millions
    as the popularity of your product or application grows. You need to take special
    care of security when exposing the application to external-facing internet traffic
    to protect it from various threats.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最终用户是指使用应用程序并拥有足够权限来探索和利用应用程序所需功能的客户——例如，游戏应用的玩家、社交媒体应用的用户，或电子商务网站的客户。随着你的产品或应用程序的普及，这些用户的数量可以从几千人到几百万不等。当应用程序面向外部互联网流量时，你需要特别注意安全性，以保护其免受各种威胁。
- en: Let’s talk about corporate user management first. You need to have a centralized
    repository to enforce security policies such as strong password creation, password
    rotation, and MFA for better user management. MFA provides another means of validating
    someone’s identity if a password may have already been compromised. Popular MFA
    providers include Google Authenticator, Gemalto, YubiKey, RSA SecurID, Duo, and
    Microsoft Authenticator.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来谈谈企业用户管理。你需要一个集中式的存储库来执行安全策略，如强密码创建、密码轮换和多因素认证（MFA），以便更好地进行用户管理。MFA提供了另一种验证身份的手段，如果密码可能已被泄露的话。常见的MFA提供商包括Google
    Authenticator、Gemalto、YubiKey、RSA SecurID、Duo和Microsoft Authenticator。
- en: 'From a user-access perspective, **role-based authentication** (**RBA**) simplifies
    user management; you can create user groups for the users’ roles and assign an
    appropriate access policy. As illustrated in the following diagram, you can have
    three groups—admin, developer, and tester—with the corresponding access policy
    applied to each group. For example, an admin can access any system, including
    production, while developer access is limited to the dev environment, and the
    tester can only access the test environment:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户访问的角度来看，**基于角色的认证** (**RBA**) 简化了用户管理；你可以根据用户的角色创建用户组，并为每个组分配适当的访问策略。如以下图示所示，你可以有三个组——管理员、开发者和测试人员，并为每个组应用相应的访问策略。例如，管理员可以访问任何系统，包括生产环境，而开发者的访问仅限于开发环境，测试人员只能访问测试环境：
- en: '![](img/B21336_07_01.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_07_01.png)'
- en: 'Figure 7.1: User group organization'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1：用户组组织
- en: As shown in the preceding diagram, when new users join the team, they get assigned
    to the appropriate group for their role. In this way, each user has a defined
    set of standard access. The user group can also update access in case a new development
    environment is introduced and all developers need to have access to it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，当新用户加入团队时，他们会被分配到适合其角色的组中。通过这种方式，每个用户都拥有一组定义好的标准访问权限。如果引入了新的开发环境，所有开发人员都需要访问它，用户组也可以更新访问权限。
- en: SSO is a standard process that helps to reduce security lapses and automate
    the system. SSO provides users with a login to the different corporate systems
    using a single user ID and password. **Federated Identity Management** (**FIM**)
    allows users to access the system without a password with a pre-authenticated
    mechanism. Let’s look at some more details.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: SSO是一个标准过程，有助于减少安全漏洞并自动化系统。SSO使得用户通过一个单一的用户ID和密码登录不同的企业系统。**联合身份管理**（**FIM**）允许用户通过预先认证的机制在没有密码的情况下访问系统。我们来看看更多的细节。
- en: Federated identity management and single sign-on
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 联合身份管理与单点登录
- en: '**FIM** provides a way to connect the identity management system when user
    information is stored in a third-party **identity provider** (**IdP**). With FIM,
    the user only provides authentication information to the IdP, which, in turn,
    already has a trusted relationship with the service.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIM**提供了一种连接身份管理系统的方式，当用户信息存储在第三方**身份提供者**（**IdP**）中时。通过FIM，用户仅向IdP提供认证信息，而IdP与服务之间已经建立了信任关系。'
- en: 'As illustrated in the following diagram, when a user logs in to access a service,
    the service provider gets credentials from the IdP rather than getting them directly
    from the user:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，当用户登录以访问服务时，服务提供者从IdP获取凭证，而不是直接从用户处获取：
- en: '![A picture containing text, screenshot, diagram, line  Description automatically
    generated](img/B21336_07_02.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、截图、图表、线条的图片，描述自动生成](img/B21336_07_02.png)'
- en: 'Figure 7.2: FIM authentication flow'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：FIM认证流程
- en: SSO allows the use of a single set of sign-on details with which the user can
    access multiple services. Here, the service provider could target an environment
    to which you want to log in—for example, a **Customer Relationship Management**
    (**CRM**) application or your cloud application. The IdP could be a corporate
    AD. Federation allows authentication similar to an SSO but without a password,
    as the federation server knows users and allows them to access information.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: SSO（单点登录）允许使用一组登录凭证来访问多个服务。在这里，服务提供者可以针对你想要登录的环境进行设置——例如，**客户关系管理**（**CRM**）应用程序或你的云应用程序。身份提供者（IdP）可以是公司内部的AD。联合身份认证类似于SSO，但无需密码，因为联合服务器知道用户信息，并允许他们访问相关信息。
- en: There are various ways to implement FIM and SSO. Let’s look at some of the popular
    **Identity and Access Management** (**IAM**) options.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 实现FIM和SSO的方式有很多种。我们来看一些流行的**身份与访问管理**（**IAM**）选项。
- en: Kerberos
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kerberos
- en: Kerberos is an authentication protocol that allows two systems to identify each
    other securely and implements SSO. It works on the client-server model and uses
    a ticket system for user identity.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Kerberos是一种身份验证协议，允许两个系统安全地识别对方，并实现SSO。它基于客户端-服务器模型，并使用票证系统来确认用户身份。
- en: Kerberos has a **Key Distribution Center** (**KDC**) that facilitates authentication
    between two systems. The KDC consists of two logical parts—the **Authentication
    Server** (**AS**) and the **Ticket-Granting Server** (**TGS**).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Kerberos具有一个**密钥分发中心**（**KDC**），它促进了两个系统之间的身份验证。KDC由两个逻辑部分组成——**认证服务器**（**AS**）和**票证授权服务器**（**TGS**）。
- en: 'Kerberos stores and maintains the secret keys of each client and server in
    the data store. It establishes a secure session between two systems during their
    communication and identifies them with the stored secret key. The following diagram
    illustrates the flow of Kerberos authentication:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Kerberos存储并维护每个客户端和服务器的密钥。在通信过程中，它在两个系统之间建立一个安全会话，并通过存储的密钥来识别它们。以下图示展示了Kerberos身份验证的流程：
- en: '![](img/B21336_07_03.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_07_03.png)'
- en: 'Figure 7.3: Kerberos authentication'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：Kerberos认证
- en: 'As shown in the preceding diagram, when you want to access a service, the following
    steps are involved:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，当你想要访问一个服务时，涉及以下步骤：
- en: When you want to access a service on your computer network, your computer (the
    client) asks a special server called the **Authentication Server** **AS** for
    a ticket.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你想要访问计算机网络上的某项服务时，你的计算机（客户端）会向一个名为**认证服务器**（**AS**）的特殊服务器请求一个票据。
- en: The AS checks if you’re in its database. If you are, it creates a **Ticket-Granting
    Ticket** (**TGT**) and a session key, then sends them back to your computer. You
    can unlock the session key with your password, but you can’t unlock the TGT because
    it’s locked with a key that only the **Ticket-Granting Server** has.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AS 会检查你是否在其数据库中。如果在，它会创建一个**票据授予票**（**TGT**）和会话密钥，并将它们发送回你的计算机。你可以用密码解锁会话密钥，但无法解锁
    TGT，因为它是用只有**票据授予服务器**可以解锁的密钥加密的。
- en: Your computer takes this TGT and asks another server, the TGS, for a service
    ticket to access the service you want.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的计算机将这个 TGT 提交给另一个服务器，即 TGS，申请一个服务票据，以访问你所需的服务。
- en: The TGS checks the TGT and, if everything looks good, sends back a service ticket
    that your computer can use to prove to the service that you have permission to
    access it.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TGS 检查 TGT，如果一切正常，则返回一个服务票据，你的计算机可以用它向服务证明你有权限访问该服务。
- en: Your computer shows this ticket to the service, and if the service agrees that
    the ticket is valid, you get access.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的计算机将此票据展示给服务，如果服务同意票据有效，你就能获得访问权限。
- en: While Kerberos can be beneficial, it is an open-source protocol, and generally,
    large enterprises like to use more managed software with robust support, such
    as AD. Let’s look at the working mechanism of one of the most popular user management
    tools, Microsoft AD, which is based on the **Lightweight Directory Access Protocol**
    (**LDAP**).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Kerberos 有其优势，但它是一个开源协议，通常，大型企业喜欢使用更多管理化的软件，且具有强大支持，例如 AD。接下来，我们来看一下最流行的用户管理工具之一，基于**轻量级目录访问协议**（**LDAP**）的微软
    AD 的工作机制。
- en: Microsoft Active Directory
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 微软活动目录
- en: '**AD** is an identity service developed by Microsoft for users and machines.
    AD has a domain controller, also known as **Active Directory Domain Services**
    (**AD DS**), which stores the user’s information, access credentials, and identity,
    as well as system information.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**AD** 是微软为用户和计算机开发的身份服务。AD 拥有一个域控制器，也称为**活动目录域服务**（**AD DS**），用于存储用户信息、访问凭据和身份，以及系统信息。'
- en: 'The following diagram illustrates a simple flow of the authentication process:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了身份验证过程的简单流程：
- en: '![A picture containing text, screenshot, font, line  Description automatically
    generated](img/B21336_07_04.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![A picture containing text, screenshot, font, line  Description automatically
    generated](img/B21336_07_04.png)'
- en: 'Figure 7.4: AD authentication flow'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：AD 认证流程
- en: As shown in the preceding diagram, the user login is managed by AD on the domain
    networks. Users first send the request to the domain controller with their credentials
    and communicate with the **Active Directory Authentication Library** (**ADAL**).
    The ADAL verifies the user credentials and sends back an access token with a continuous
    session for the requested service.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，用户登录由域网络上的 AD 管理。用户首先将请求发送到域控制器，并提供凭据，同时与**活动目录认证库**（**ADAL**）进行通信。ADAL
    验证用户凭据后，返回一个访问令牌，并为请求的服务创建一个持续会话。
- en: '**LDAP** is the standard protocol that handles the tree-like hierarchical structure
    of information stored in directories. **Active Directory Lightweight Directory
    Services** (**AD LDS**) provides an LDAP interface to the directory of users and
    systems. For file encryption and network traffic encryption, **Active Directory
    Certificate Services** (**AD CS**) provides the key infrastructure functionality.
    **Active Directory Federation Services** (**AD FS**) provides access mechanisms
    for external resources, such as web app logins for many users.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**LDAP** 是处理存储在目录中的信息的树形层次结构的标准协议。**活动目录轻量级目录服务**（**AD LDS**）为用户和系统的目录提供 LDAP
    接口。对于文件加密和网络流量加密，**活动目录证书服务**（**AD CS**）提供密钥基础设施功能。**活动目录联合服务**（**AD FS**）为外部资源提供访问机制，例如许多用户的
    Web 应用登录。'
- en: As many organizations have started using cloud services, let’s learn about the
    active directory service that AWS cloud provides.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 随着许多组织开始使用云服务，下面让我们了解一下 AWS 云提供的活动目录服务。
- en: Amazon Web Services Directory Service
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 亚马逊 Web 服务目录服务
- en: '**Amazon Web Services** (**AWS**) Directory Service connects AWS resources
    in your account with an existing on-premises user management tool such as AD.
    AWS Directory Service sets up a new user management directory in the AWS cloud.
    It facilitates a secure connection to the on-premises directory. After establishing
    the connection, all users can access cloud resources and on-premises applications
    with their existing credentials.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Web Services** (**AWS**) 目录服务将您账户中的 AWS 资源与现有的本地用户管理工具（如 AD）连接。AWS
    目录服务在 AWS 云中设置一个新的用户管理目录，并为本地目录提供安全连接。建立连接后，所有用户可以使用现有凭证访问云资源和本地应用程序。'
- en: AWS AD Connector is another service that helps you connect the existing Microsoft
    AD to the AWS cloud; you don’t need a specific directory synchronization tool.
    Admin users can manage AWS resources using AWS IAM.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: AWS AD Connector 是另一项服务，帮助您将现有的 Microsoft AD 连接到 AWS 云；您无需特定的目录同步工具。管理员用户可以使用
    AWS IAM 管理 AWS 资源。
- en: AD Connector helps to enable MFA by integrating with your existing MFA infrastructure,
    such as YubiKey, a Gemalto token, or an RSA token.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: AD Connector 通过与您现有的 MFA 基础设施（如 YubiKey、Gemalto 令牌或 RSA 令牌）集成，帮助启用 MFA。
- en: For a small user base (fewer than 5,000 users), AWS provides Simple AD, which
    is a managed directory powered by *Samba 4 Active Directory Compatible Server*.
    Simple AD has common features such as user account management, user group management,
    SSO based on Kerberos, and user group policies.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小规模用户群（少于 5000 个用户），AWS 提供了 Simple AD，这是一个由 *Samba 4 Active Directory 兼容服务器*
    提供支持的托管目录。Simple AD 具有常见功能，如用户账户管理、用户组管理、基于 Kerberos 的 SSO 和用户组策略。
- en: Other directory services provided by major technology companies include Okta,
    Centrify, Ping Identity, and Oracle **Identity Cloud Service** (**IDCS**).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 其他主要技术公司提供的目录服务包括 Okta、Centrify、Ping Identity 和 Oracle **身份云服务** (**IDCS**)。
- en: Security Assertion Markup Language
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全断言标记语言
- en: Earlier in this section, in the *Federated identity management and single sign-on*
    section, you learned about IdPs and service providers. To access a service, the
    user gets validated by the IdP, which, in turn, has a trusted relationship with
    the service provider. **Security Assertion Markup Language** (**SAML**) can be
    used to establish a trusted relationship between an IdP and a service provider
    through **Extensible Markup Language** (**XML**), which standardizes communication
    between an IdP and a service provider.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的 *联合身份管理与单点登录* 部分，您了解了 IdP 和服务提供商。要访问服务，用户通过 IdP 进行验证，而 IdP 与服务提供商之间建立了信任关系。**安全断言标记语言**
    (**SAML**) 可用于通过 **可扩展标记语言** (**XML**) 在 IdP 和服务提供商之间建立信任关系，从而标准化它们之间的通信。
- en: 'A SAML assertion is an XML document that the IdP sends to the service provider
    with user authorization. The following diagram illustrates the flow of the SAML
    assertion:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: SAML 断言是一个 XML 文档，IdP 将其发送给服务提供商，并包含用户授权信息。下图展示了 SAML 断言的流程：
- en: '![A diagram of a login screen  Description automatically generated with low
    confidence](img/B21336_07_05.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![登录界面图示  描述自动生成，可信度较低](img/B21336_07_05.png)'
- en: 'Figure 7.5: User authentication using SAML'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5：使用 SAML 进行用户认证
- en: 'As mentioned in the preceding diagram, the following steps are taken to implement
    user authentication using SAML:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的图所示，以下步骤用于通过 SAML 实现用户认证：
- en: A user sends a request to access the service—for example, the Salesforce CRM
    application—as a service provider.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户向服务请求访问权限——例如，Salesforce CRM 应用程序——作为服务提供商。
- en: The service provider (a CRM application) sends a SAML request with the user
    information to the SAML IdP.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务提供商（如 CRM 应用程序）向 SAML IdP 发送包含用户信息的 SAML 请求。
- en: The SAML IdP pops up the SSO login page, where users enter authentication information.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SAML IdP 会弹出 SSO 登录页面，用户在此输入认证信息。
- en: The user access credential goes to the user database, an identity store for
    validation. In this case, the user identity store is an *AD*.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户访问凭证发送到用户数据库，这是一个身份存储，用于验证。在此情况下，用户身份存储是一个 *AD*。
- en: The user identity store sends the user validation status to the SAML IdP, with
    whom the identity store has a trusted relationship.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户身份存储将用户验证状态发送给与其建立信任关系的 SAML IdP。
- en: The SAML IdP sends a SAML assertion to the service provider (a CRM application)
    with information about user verification.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SAML IdP 向服务提供商（如 CRM 应用程序）发送 SAML 断言，包含用户验证的信息。
- en: After receiving the SAML response, the service provider allows application access
    to the user.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在收到 SAML 响应后，服务提供商允许应用程序访问用户。
- en: Sometimes, a service provider can act as an IdP as well. SAML is very popular
    for establishing a relationship between any identity store and service provider.
    All modern identity store applications are SAML 2.0-compatible, which allows them
    to communicate with each other seamlessly. SAML allows user identity to be federated
    and enables SSO for enterprise users.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，服务提供商也可以充当身份提供者（IdP）。SAML 在建立身份存储和服务提供商之间的关系方面非常流行。所有现代身份存储应用程序都与 SAML 2.0
    兼容，这使得它们能够无缝地相互通信。SAML 允许用户身份被联合管理，并为企业用户启用单点登录（SSO）。
- en: For large user bases such as social media and e-commerce websites, **OAuth**
    (short for **Open Authorization**) and **OpenID** are more suitable than SAML.
    Let’s learn about OAuth and **OpenID Connect** (**OIDC**).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像社交媒体和电子商务网站这样的大型用户群体，**OAuth**（即**开放授权**）和 **OpenID** 比 SAML 更为适合。让我们来了解一下
    OAuth 和 **OpenID Connect**（**OIDC**）。
- en: OAuth
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OAuth
- en: OAuth is an open standard authorization protocol that provides secure access
    delegation to an application. OAuth doesn’t share password data but uses an authorization
    token to establish the identity between service providers and consumers. Users
    of an application provide access to their information without giving login credentials.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 是一种开放标准的授权协议，提供安全的访问委托给应用程序。OAuth 不共享密码数据，而是使用授权令牌在服务提供商和消费者之间建立身份。应用程序的用户在不提供登录凭据的情况下授权访问他们的信息。
- en: While OAuth is mainly for authorization, many organizations have started adding
    their own mechanisms for authentication.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 OAuth 主要用于授权，但许多组织已开始添加他们自己的身份验证机制。
- en: OIDC is a protocol that defines the authentication standard on top of the OAuth
    2.0 authorization framework. While OAuth 2.0 provides a framework for authorization
    (granting access to resources), OIDC adds an additional layer to handle user authentication.
    This means that OIDC not only helps applications know what resources a user can
    access but also verifies the identity of the user accessing the service. It’s
    a way for clients to verify a user’s identity based on the authentication performed
    by an authorization server, as well as to obtain basic profile information about
    the user in an interoperable and REST-like manner.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: OIDC 是一个协议，它在 OAuth 2.0 授权框架之上定义了身份验证标准。OAuth 2.0 提供了一个授权框架（授予访问资源的权限），而 OIDC
    添加了一个额外的层来处理用户身份验证。这意味着 OIDC 不仅帮助应用程序知道用户可以访问哪些资源，还验证访问服务的用户身份。它是一种基于授权服务器执行身份验证后，客户端验证用户身份，并以可互操作和类似
    REST 的方式获取用户基本资料信息的方法。
- en: 'Large technology companies such as Amazon, Facebook, Google, and X allow users
    to share information in their accounts with third-party applications. For example,
    you can log in to a new photo app using your Facebook login and authorize the
    new app to access only your Facebook photo information. The following diagram
    illustrates an OAuth access delegation flow, where a user requests the LinkedIn
    app to get their profile photo from Facebook:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊、Facebook、谷歌和 X 等大型科技公司允许用户与第三方应用共享其帐户中的信息。例如，您可以使用 Facebook 登录一个新的照片应用程序，并授权新应用程序仅访问您的
    Facebook 照片信息。下图说明了一个 OAuth 访问委托流，用户请求 LinkedIn 应用程序从 Facebook 获取其个人资料照片：
- en: '![](img/B21336_07_06.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_07_06.png)'
- en: 'Figure 7.6: User access delegation with OAuth 2.0'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6：使用 OAuth 2.0 的用户访问委托
- en: 'As shown in the preceding diagram, the authentication flow follows these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，身份验证流程遵循以下步骤：
- en: In this scenario, the user makes a request to the LinkedIn app to get your profile
    photo from Facebook.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此场景中，用户向 LinkedIn 应用程序发出请求，要求从 Facebook 获取个人资料照片。
- en: The LinkedIn app requests authorization to access Facebook profile photos.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LinkedIn 应用程序请求授权访问 Facebook 个人资料照片。
- en: The authorization server (which is your Facebook account in this case) creates
    and displays a consent screen to the user.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授权服务器（在本例中是您的 Facebook 帐户）创建并向用户展示同意屏幕。
- en: The user provides consent to the request for the LinkedIn app to access only
    their Facebook profile photos.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户同意 LinkedIn 应用程序仅访问其 Facebook 个人资料照片的请求。
- en: After getting user approval, the Facebook authorization server sends an authorization
    code back to the requesting LinkedIn app.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在获得用户批准后，Facebook 授权服务器将授权码发送回请求的 LinkedIn 应用程序。
- en: The LinkedIn app then requests an access token from the authorization server
    (Facebook account) using the authorization code.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LinkedIn 应用程序随后使用授权代码向授权服务器（Facebook 账户）请求访问令牌。
- en: The authorization server identifies the LinkedIn app and checks the validity
    of the authentication code. If the access token is validated, the server issues
    an access token to the LinkedIn app.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授权服务器识别 LinkedIn 应用程序并检查认证代码的有效性。如果访问令牌验证通过，服务器会向 LinkedIn 应用程序发放访问令牌。
- en: The LinkedIn app can now access resources such as Facebook profile photos using
    the access token.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LinkedIn 应用程序现在可以使用访问令牌访问资源，例如 Facebook 个人资料照片。
- en: OAuth 2.0, which is faster than OAuth 1.0 and more comfortable to implement,
    is now most commonly used.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: OAuth 2.0 比 OAuth 1.0 更快，且更容易实现，现在是最常用的版本。
- en: '**JSON Web Token** (**JWT**) is a simple and accessible token format that can
    be used with OAuth and is popular with OpenID; we look at this next.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON Web 令牌**（**JWT**）是一种简单且易于访问的令牌格式，可与 OAuth 一起使用，并且在 OpenID 中广受欢迎；我们接下来会讨论这个。'
- en: JWT
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JWT
- en: JWT is a compact and self-contained way for securely transmitting information
    between parties as a JSON object. This information can be verified and trusted
    because it is digitally signed. JWTs can be signed using a secret or a public/private
    key pair.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: JWT 是一种紧凑且自包含的方式，用于在各方之间以 JSON 对象的形式安全地传输信息。这些信息可以通过数字签名进行验证和信任。JWT 可以使用密钥或公/私钥对进行签名。
- en: 'A JWT has a JSON structure that has information about expiration time, issuer,
    subject, and so on. It is more robust than a **Simple Web Token** (**SWT**) and
    simpler than SAML 2.0\. You can see a JWT in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: JWT 具有 JSON 结构，其中包含关于过期时间、发行者、主题等的信息。它比**简单 Web 令牌**（**SWT**）更强大，比 SAML 2.0
    更简洁。你可以在以下截图中看到 JWT：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21336_07_07.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![一张计算机截图 描述自动生成，可信度中等](img/B21336_07_07.png)'
- en: 'Figure 7.7: Sample JWT'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7：JWT 示例
- en: The preceding screenshot depicts JWTs, which have three parts, each separated
    by a dot. The first part, the header, tells us the token type—JWT—and the algorithm
    it uses for signing, such as HS256 or RSA. The second part, the payload, holds
    claims, which are pieces of information about the user and other data. The last
    part is the signature, which makes sure the token hasn’t been altered and confirms
    who sent the JWT.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图展示了 JWT，它分为三个部分，每个部分之间由点分隔。第一部分是头部，告诉我们令牌类型——JWT——以及它使用的签名算法，例如 HS256 或
    RSA。第二部分是有效载荷，包含声明，即关于用户及其他数据的信息。最后一部分是签名，它确保令牌没有被篡改，并确认了发送 JWT 的人。
- en: JSON has a simpler structure than XML and is smaller, making JWT more compact
    than SAML. JWT is an excellent choice for passing information into HTML and HTTP
    environments. Due to their small size, JWTs are an ideal choice for passing the
    identity of authenticated users between services in a microservices architecture,
    or for providing access tokens that allow users to access resources. They’re used
    in various authentication and authorization scenarios, particularly in web and
    mobile applications.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 的结构比 XML 简单，而且更小，这使得 JWT 比 SAML 更紧凑。JWT 是将信息传递到 HTML 和 HTTP 环境中的绝佳选择。由于其小巧的体积，JWT
    是在微服务架构中在服务之间传递经过认证用户身份的理想选择，或者用来提供让用户访问资源的访问令牌。它们在各种身份验证和授权场景中都有应用，尤其是在 Web 和移动应用程序中。
- en: In this section, you learned about the most common user management tools and
    services. However, there are various other protocols and services available for
    user authentication and authorization. The implementation of the protocols mentioned
    previously can be complicated, and there is a large amount of packaged software
    available that makes the job easier.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了最常见的用户管理工具和服务。然而，还有许多其他协议和服务可用于用户身份验证和授权。前面提到的协议实现可能会很复杂，而且有大量打包软件可以简化这项工作。
- en: Amazon Cognito is a user access management service provided by AWS that includes
    standard-based authorization such as SAML 2.0, OIDC, and OAuth 2.0, along with
    an enterprise user directory that provides the ability to connect with AD. Okta
    and Ping Identity provide enterprise user management and the ability to communicate
    with various service provider tools in one place.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Cognito 是 AWS 提供的用户访问管理服务，包含基于标准的授权，如 SAML 2.0、OIDC 和 OAuth 2.0，并且提供一个企业用户目录，支持与
    AD 连接。Okta 和 Ping Identity 提供企业用户管理，并能在一个地方与各种服务提供商工具进行通信。
- en: Once your application is exposed to the internet, there are always various kinds
    of attacks that can happen. Let’s learn about some of the most common attacks
    and how to set up the first layer of defense for web-layer protection.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用程序暴露于互联网，始终会有各种类型的攻击可能发生。让我们学习一些最常见的攻击方式，以及如何为 Web 层保护设置第一层防御。
- en: Handling web security
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理 Web 安全
- en: As user demand is changing to require 24/7 availability of services, businesses
    are evolving to go into online mode, and to do so, they are adopting web application
    models. Web applications also help a company to gain a global customer base. Businesses
    such as online banking and e-commerce websites are always available, and they
    deal with sensitive customer data, such as payment information and payer identity.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 随着用户需求的变化，要求服务全天候 24/7 可用，企业正在向线上模式转型，为此，它们采用了 Web 应用程序模型。Web 应用程序还帮助企业获得全球客户群。像在线银行和电子商务网站这样的企业始终保持在线，并且处理敏感的客户数据，如支付信息和支付者身份。
- en: Now, web applications are central to any business, and these applications are
    exposed to the world. Web applications can have vulnerabilities, exposing them
    to cyberattacks and data breaches. Let’s explore some common types of cyberattack
    and how to mitigate them.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Web 应用程序已经成为任何企业的核心，这些应用程序暴露在全球互联网上。Web 应用程序可能存在漏洞，使其容易受到网络攻击和数据泄露的威胁。让我们来探讨一些常见的网络攻击类型，以及如何减轻这些风险。
- en: Cyberattacks
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络攻击
- en: Web applications are vulnerable to security breaches. Hackers orchestrate cyberattacks
    from different locations and by various methods. Just as you lock and protect
    a physical building, in the same way, your web application needs to be protected
    from illicit activity. Let’s explore some standard methods of attack that can
    cause security vulnerabilities in your web application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用程序容易受到安全漏洞的影响。黑客从不同的位置和使用各种方法协调网络攻击。就像您锁住并保护物理建筑一样，您的 Web 应用程序也需要防止非法活动。让我们探讨一些可能导致
    Web 应用程序安全漏洞的常见攻击方式。
- en: Denial of service and distributed denial of service attacks
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 拒绝服务和分布式拒绝服务攻击
- en: A **Denial of Service** (**DoS**) attack attempts to make your website unreachable
    to your users. To achieve a successful DoS attack, the attacker uses a variety
    of technologies that consume network and system resources, thus interrupting access
    for legitimate users. The attacker uses multiple hosts to orchestrate the attack
    against a single target.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**拒绝服务**（**DoS**）攻击试图使您的网站无法访问。为了成功实施 DoS 攻击，攻击者使用各种技术消耗网络和系统资源，从而中断合法用户的访问。攻击者使用多个主机来协调攻击一个单一的目标。'
- en: 'A **Distributed Denial of Service** (**DDoS**) attack involves using many hijacked
    systems, often infected with malware, to flood a single target system with requests.
    This overwhelms the target, causing service disruptions. The attacker remotely
    controls the compromised systems to conduct the assault. As illustrated in the
    following diagram, a DDoS attack happens when multiple systems exhaust the bandwidth
    of resources of a targeted system:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**分布式拒绝服务**（**DDoS**）攻击通过使用许多被劫持的系统，通常是被恶意软件感染的系统，向单一目标系统发送大量请求。这会使目标系统不堪重负，导致服务中断。攻击者远程控制被感染的系统发起攻击。如以下图所示，当多个系统消耗目标系统的带宽资源时，就会发生
    DDoS 攻击：'
- en: '![A diagram of a computer network  Description automatically generated with
    low confidence](img/B21336_07_08.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![计算机网络示意图 描述自动生成，信心较低](img/B21336_07_08.png)'
- en: 'Figure 7.8: DDoS attack'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8：DDoS 攻击
- en: The general concept of a DDoS attack is to leverage additional hosts to amplify
    the requests made to the target, rendering them overprovisioned and unavailable.
    A DDoS attack is often the result of multiple compromised systems, whereby a botnet
    puts a flood of traffic in the targeted system.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: DDoS 攻击的基本概念是利用额外的主机来放大对目标发出的请求，使其超载并无法使用。DDoS 攻击通常是由多个被感染的系统发起的，僵尸网络向目标系统发送大量流量。
- en: A botnet is a network of devices infected by and controlled through malware.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 僵尸网络是通过恶意软件感染并控制的设备网络。
- en: The most common DDoS attack happens at the application layer, using either a
    DNS flood or a **Secure Sockets Layer** (**SSL**) negotiation attack. In DNS floods,
    attackers exhaust the resources of a DNS server with too many requests. During
    SSL negotiations, attackers send a large amount of unintelligible data for computationally
    expensive SSL decryption. The attacker can perform other SSL-based attacks on
    the server fleet and overburden it with unnecessary task processing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的 DDoS 攻击发生在应用层，使用 DNS 洪水攻击或 **安全套接字层** (**SSL**) 协商攻击。在 DNS 洪水中，攻击者通过过多请求消耗
    DNS 服务器的资源。在 SSL 协商中，攻击者发送大量无法理解的数据，用于计算密集型的 SSL 解密。攻击者还可以对服务器集群执行其他基于 SSL 的攻击，使其不堪重负。
- en: 'At the infrastructure layer, a typical DDoS attack happens in the following
    form:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础设施层，典型的 DDoS 攻击以以下形式发生：
- en: '**User Datagram Protocol** (**UDP**) **reflection**: With UDP reflection, attackers
    spoof the target server’s IP address and make a request that returns amplified
    significant responses from a hacked reflector server.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户数据报协议** (**UDP**) **反射**：通过 UDP 反射，攻击者伪造目标服务器的 IP 地址，发起请求，从被黑的反射服务器返回放大的响应。'
- en: '**SYN floods**: With SYN floods, attackers exhaust the target server’s **Transmission
    Control Protocol** (**TCP**) service by creating and abandoning high numbers of
    connections, blocking legitimate users from accessing the server.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SYN 洪水**：通过 SYN 洪水，攻击者通过创建并放弃大量连接来耗尽目标服务器的 **传输控制协议** (**TCP**) 服务，从而阻止合法用户访问服务器。'
- en: Often, attackers try to get sensitive customer data, and for that purpose, they
    use a different kind of attack called **SQL injection** (**SQLi**). Let’s learn
    more about it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者通常试图窃取敏感的客户数据，为此他们使用一种称为 **SQL 注入** (**SQLi**) 的不同攻击方式。让我们了解更多关于它的信息。
- en: SQLi attacks
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SQLi 攻击
- en: As the name suggests, in a SQLi attack, attackers inject malicious **Structure
    Query Language** (**SQL**) to get control of a SQL database and fetch sensitive
    user data. The attacker uses SQLi to gain access to unauthorized information,
    take control of an application, add new users, and so on.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，在 SQLi 攻击中，攻击者注入恶意的 **结构化查询语言** (**SQL**)，以控制 SQL 数据库并获取敏感用户数据。攻击者利用 SQLi
    访问未经授权的信息，控制应用程序，添加新用户等。
- en: Take an example of a loan-processing web application. You have `loanId` as a
    field that customers can use to get all information related to their loan. If
    proper care is not taken, attackers can execute a query such as `SELECT * FROM
    loans WHERE loanId = 117 or '1=1'` and get access to the entire customer database,
    as this query will always return the true result.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以贷款处理的 Web 应用程序为例，你有一个 `loanId` 字段，客户可以用它来获取与其贷款相关的所有信息。如果没有采取适当的防护，攻击者可以执行如
    `SELECT * FROM loans WHERE loanId = 117 or '1=1'` 的查询，并获取整个客户数据库的访问权限，因为这个查询始终会返回真结果。
- en: The other common way to hack user data through script injection is **cross-site
    scripting** (**XSS**), where a hacker impersonates a legitimate user. Let’s learn
    more about it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种通过脚本注入来黑客入侵用户数据的常见方式是 **跨站脚本** (**XSS**)，黑客伪装成合法用户。让我们了解更多关于它的信息。
- en: XSS attacks
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: XSS 攻击
- en: You have probably encountered phishing emails that have links impersonating
    a website known to you. Clicking on these links may lead to compromised data through
    XSS. In an XSS attack, the attacker embeds their malicious code into a legitimate
    website. This code then executes when an unsuspecting user visits the web page.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能遇到过伪装成你熟悉网站的钓鱼邮件链接。点击这些链接可能导致通过 XSS 被泄露的数据。在 XSS 攻击中，攻击者将其恶意代码嵌入合法网站。当无辜用户访问网页时，这段代码就会执行。
- en: The attacker can introduce this code in various ways, such as embedding it directly
    into a URL string or by inserting a snippet of JavaScript code onto the web page.
    When you load the web page, this client-side JavaScript code gets executed and
    steals your browser cookies.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以通过多种方式引入此代码，例如将其直接嵌入 URL 字符串中，或者通过在网页上插入一段 JavaScript 代码。当你加载网页时，这段客户端
    JavaScript 代码会执行，并窃取你的浏览器 cookies。
- en: These cookies often contain sensitive information, such as the access token
    and authentication to your banking or e-commerce websites. Using these stolen
    cookies, the hacker can enter your bank account, among other accounts, and take
    your hard-earned money.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 cookies 通常包含敏感信息，例如你的银行或电子商务网站的访问令牌和身份验证。利用这些被窃取的 cookies，黑客可以进入你的银行账户，甚至其他账户，窃取你的辛苦钱。
- en: Cross-site request forgery attacks
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 跨站请求伪造攻击
- en: A **cross-site request forgery** (**CSRF**) attack takes advantage of user identity
    by creating confusion and tricking authenticated users into state-changing activities,
    for example, changing the password of a shopping website or requesting a money
    transfer to your bank.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站请求伪造**（**CSRF**）攻击利用用户身份，通过制造混乱并欺骗已认证的用户进行状态更改操作，例如，修改购物网站的密码或请求将钱转账到你的银行账户。'
- en: It is slightly different from an XSS attack as, with CSRF, the attacker tries
    to forge a request rather than insert a code script. For example, the attacker
    can forge a request to transfer a certain amount of money from the user’s bank
    and send that link in an email to the user. When users click on that link, the
    bank gets a request and transfers the money to the attacker’s account. CSRF can
    be particularly harmful if attackers can get into an admin account.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 它与 XSS 攻击略有不同，因为 CSRF 攻击者尝试伪造请求，而不是插入代码脚本。例如，攻击者可以伪造一个请求，要求从用户的银行账户转账一定金额，并将该链接通过电子邮件发送给用户。当用户点击这个链接时，银行收到请求并将钱转账到攻击者的账户。如果攻击者能够进入管理员账户，CSRF
    攻击会特别危险。
- en: Buffer overflow and memory corruption attacks
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓冲区溢出和内存损坏攻击
- en: A software program writes data in a temporary memory area for fast processing,
    which is called a **buffer**. With a buffer overflow attack, an attacker can overwrite
    a portion of the memory connected with the buffer, deliberately causing a buffer
    overflow and accessing connected memory, where an application executable may be
    stored. The attacker can replace the executable with the actual program and take
    control of the entire system. Looking at the overall application, more security
    threats exist in the infrastructure layer, network layer, and data layer. Let’s
    explore some standard ways to mitigate and prevent security risks at the web layer.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 软件程序会将数据写入一个临时内存区域，以便快速处理，这个区域叫做**缓冲区**。在缓冲区溢出攻击中，攻击者可以覆盖与缓冲区相关的内存部分，故意引发缓冲区溢出，并访问连接的内存区域，其中可能存储着应用程序的可执行文件。攻击者可以将可执行文件替换为实际的程序，从而控制整个系统。整体来看，基础设施层、网络层和数据层存在更多的安全威胁。接下来，我们将探讨一些标准方法来减轻和预防
    web 层的安全风险。
- en: Web security mitigation
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web 安全缓解
- en: Security needs to be applied to every layer of your application, and special
    attention is required for the web layer due to its exposure to the world. For
    web protection, necessary steps include keeping up with the latest security patches,
    following the best software development practices, and ensuring that proper authentication
    and authorization are carried out.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性需要应用到应用程序的每一层，特别需要关注 web 层，因为它直接暴露给外部世界。对于 web 的保护，必要的步骤包括跟进最新的安全补丁、遵循最佳的软件开发实践，并确保正确的身份验证和授权得以执行。
- en: Several methods exist to protect and secure web applications; let’s explore
    two common methods.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以保护和确保 web 应用的安全；我们来探讨两种常见的方法。
- en: Web application firewalls
  id: totrans-174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Web 应用防火墙
- en: WAFs are firewalls that apply specific rules to HTTP and HTTPS traffic (that
    is, ports `80` and `443`). WAFs inspect your web traffic and verify that it conforms
    to the norms of expected behavior. They provide an additional layer of protection
    from web attacks.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: WAF 是一种防火墙，它应用于 HTTP 和 HTTPS 流量（即端口 `80` 和 `443`）。WAF 会检查你的 web 流量，并验证它是否符合预期的行为规范。它们提供了一层额外的保护，防止
    web 攻击。
- en: WAF rate limiting is the ability to look at the amount or type of requests sent
    to your service and define a threshold that caps how many requests are allowed
    per user, session, or IP address. Approved and unapproved lists enable you to
    allow or block users explicitly.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: WAF 限速是通过查看发送到服务的请求数量或类型，并定义一个阈值，限制每个用户、会话或 IP 地址所允许的请求次数。通过批准和不批准列表，你可以明确地允许或阻止用户。
- en: AWS WAF is one example of a WAF that adds security to your web layer by creating
    and applying rules to filter web traffic. These rules are based on conditions
    that include HTTP headers, user geolocation, malicious IP addresses, custom **Uniform
    Resource Identifiers** (**URIs**), and so on. AWS WAF rules block common web exploits
    such as XSS and SQLi. You can create a single set of rules for an environment
    that has various websites and web applications running and you can reuse rules
    across applications instead of recreating them.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: AWS WAF 是一个 Web 应用防火墙（WAF）的例子，它通过创建并应用规则来过滤 Web 流量，从而为你的 Web 层增加安全性。这些规则基于诸如
    HTTP 头、用户地理位置、恶意 IP 地址、自定义 **统一资源标识符** (**URIs**) 等条件。AWS WAF 规则可以阻止常见的 Web 攻击，如
    XSS 和 SQL 注入。你可以为一个运行多个网站和 Web 应用程序的环境创建一组规则，并且可以跨应用重用规则，而无需重新创建它们。
- en: Overall, a WAF is a tool that applies a set of rules to HTTP traffic. It filters
    web requests based on data such as IP addresses, HTTP headers, HTTP bodies, or
    URI strings. It can mitigate DDoS attacks by offloading illegitimate traffic.
    Let’s learn more about DDoS mitigation.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，WAF 是一种应用规则集以处理 HTTP 流量的工具。它基于 IP 地址、HTTP 头、HTTP 正文或 URI 字符串等数据来过滤 Web
    请求。它可以通过卸载非法流量来缓解 DDoS 攻击。让我们进一步了解 DDoS 缓解。
- en: DDoS mitigation
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: DDoS 攻击缓解
- en: Resilient architecture can prevent or mitigate DDoS attacks. A fundamental principle
    in keeping your infrastructure secure is reducing the potential number of targets
    an attacker can hit. In short, if an instance doesn’t need to be public, then
    don’t make it public.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性架构可以防止或缓解 DDoS 攻击。保持基础设施安全的基本原则是减少攻击者可能攻击的目标数量。简而言之，如果某个实例不需要公开，就不要让它公开。
- en: 'You can apply various strategies to minimize the attack surface area:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以采用多种策略来最小化攻击面：
- en: Wherever possible, reduce the number of necessary internet entry points—for
    example, open incoming internet access to your load balancer, not web servers.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，减少必要的互联网入口点数量——例如，开放传入的互联网访问到你的负载均衡器，而不是到 Web 服务器。
- en: Identify and eliminate any unnecessary entry points to the internet. For instance,
    you can set up file-share storage for vendors to upload data, but restrict the
    access to a limited group instead of making it accessible to the entire global
    internet traffic.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别并消除任何不必要的互联网入口点。例如，你可以为供应商设置文件共享存储以上传数据，但应将访问权限限制在一个有限的群体中，而不是让全球互联网流量都能访问。
- en: Hide any required internet entry points from untrusted end users so that they
    cannot access them.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏任何必要的互联网入口点，以防止不受信任的终端用户访问它们。
- en: Isolate the access point and apply a specific restrictions policy for end user
    traffic compared to application management traffic.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离访问点，并对终端用户流量与应用管理流量应用特定的限制策略。
- en: Create a decoupled internet entry point to minimize the attack surface.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个解耦的互联网入口点，以最小化攻击面。
- en: 'Your primary goal is to mitigate DDoS attacks at the edge location of the CDN.
    It’s more challenging and costly to handle DDoS attacks if they get through to
    your application servers. The following diagram illustrates a DDoS mitigation
    example for an AWS cloud workload:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你的主要目标是在 CDN 的边缘位置缓解 DDoS 攻击。如果 DDoS 攻击渗透到你的应用服务器，处理起来会更具挑战性且成本更高。以下图示展示了 AWS
    云工作负载的 DDoS 缓解示例：
- en: '![A picture containing text, screenshot, diagram, font  Description automatically
    generated](img/B21336_07_09.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![A picture containing text, screenshot, diagram, font  Description automatically
    generated](img/B21336_07_09.png)'
- en: 'Figure 7.9: DDoS WAF sandwich mitigation strategy'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9：DDoS WAF 三明治缓解策略
- en: The preceding diagram illustrates a **WAF sandwich architecture**, where the
    WAF appliance is staged between two load balancers to handle a DDoS attack.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示展示了一个 **WAF 三明治架构**，其中 WAF 设备被放置在两个负载均衡器之间，以应对 DDoS 攻击。
- en: Frequent DDoS attacks come from strategies such as SYN floods and UDP reflection,
    which Amazon CloudFront prevents by only accepting well-formed connections before
    the attacking strategy can reach your application servers. CDNs such as Amazon
    CloudFront help to tackle DDoS attacks by isolating them in a geographically isolated
    location and preventing the traffic from affecting other locations. Network firewall
    security helps you to control incoming and outgoing traffic at the individual
    server level.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的 DDoS 攻击来自如 SYN 洪水和 UDP 反射等策略，Amazon CloudFront 通过只接受格式正确的连接，防止攻击策略在到达应用服务器之前进入。像
    Amazon CloudFront 这样的 CDN 通过将 DDoS 攻击隔离到地理上独立的地点，并防止流量影响其他位置，来帮助应对 DDoS 攻击。网络防火墙安全帮助你在单个服务器级别控制进出流量。
- en: As mentioned in the previous section, WAFs are used to protect web applications
    against exploit attacks such as XSS and SQLi attacks. In addition to this, WAFs
    also help to detect and prevent DDoS attacks at the web application layer.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如上一节所述，WAF（Web应用防火墙）用于保护 Web 应用免受 XSS 和 SQLi 等漏洞攻击。除此之外，WAF 还帮助检测和防止 Web 应用层的
    DDoS 攻击。
- en: 'To handle a DDoS attack, you can apply either horizontal or vertical scaling.
    You can take advantage of scaling in the following way:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要应对 DDoS 攻击，你可以应用水平或垂直扩展。你可以通过以下方式利用扩展：
- en: First, select the right server size and configuration for your web application.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，选择适合你 Web 应用程序的服务器大小和配置。
- en: Second, use a load balancer to distribute traffic among the fleet of servers
    and add auto-scaling to add/remove servers as required.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，使用负载均衡器将流量分配到服务器群集，并添加自动扩展功能，根据需要添加或移除服务器。
- en: Finally, use the CDN and DNS server, as they are built to handle traffic at
    scale.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 CDN 和 DNS 服务器，因为它们是为了处理大规模流量而设计的。
- en: Scaling for DDoS attacks is an excellent example of why it’s essential to set
    reasonable maximum counts for your servers. A DDoS attack could scale your servers
    out to a number that would be extremely costly while still potentially not being
    able to prevent the server from becoming unavailable. Having reasonable maximum
    limits for the expectations of regular traffic spikes would prevent a DDoS attack
    from costing your company too much money.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 针对 DDoS 攻击进行扩展是一个很好的例子，说明了为服务器设置合理的最大数量是非常必要的。DDoS 攻击可能会将你的服务器扩展到一个极为昂贵的数量，而仍然可能无法防止服务器变得不可用。为常规流量波动设定合理的最大限制，可以避免
    DDoS 攻击给公司带来过大的经济损失。
- en: In this section, you learned about various security risks and vulnerabilities
    at the web layer and some standard ways to protect them. As security needs to
    be applied to every layer, let’s explore protecting the infrastructure layer in
    more detail.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了 Web 层的各种安全风险和漏洞以及一些标准的保护方法。由于安全性需要应用于每一层，让我们更详细地探讨如何保护基础设施层。
- en: Securing an application and its infrastructure
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护应用程序及其基础设施
- en: In the previous section, you learned about securing the web layer. As security
    needs to be applied at every layer of your workload, let’s learn about securing
    the application and network layers of your architecture.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你了解了如何保护 Web 层。由于安全性需要应用于工作负载的每一层，让我们学习如何保护架构中的应用层和网络层。
- en: Application and operating system hardening
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序和操作系统加固
- en: It is impossible to eliminate vulnerabilities in your application entirely but
    you can limit system attacks by hardening your application’s operating system,
    filesystem, and directory. Once attackers can get into your application, they
    can get root access and orchestrate an attack on the entire infrastructure.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然无法完全消除应用程序中的漏洞，但你可以通过加固应用程序的操作系统、文件系统和目录来限制系统攻击。一旦攻击者能够进入你的应用程序，他们就可以获得 root
    权限，并对整个基础设施发起攻击。
- en: It is essential to limit attacks to the application level by restricting the
    directory by *hardening permission*. At the process level, restrict memory and
    CPU utilization to prevent a DoS attack.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 *加固权限* 来限制目录，以将攻击限制在应用程序级别是至关重要的。在进程级别，限制内存和 CPU 使用率，以防止 DoS 攻击。
- en: Set the right permission at the file, folder, and file partition levels. Avoid
    giving root privileges to the application or its users. You should create a separate
    directory containing only the required access for each application so that only
    the required user has application access. Only use common access for some applications.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件、文件夹和文件分区级别设置正确的权限。避免将 root 权限授予应用程序或其用户。你应该为每个应用程序创建一个包含所需访问权限的独立目录，这样只有需要的用户才能访问应用程序。对于某些应用程序，只使用公共访问权限。
- en: Automate application restart by using process tools such as **DAEMON Tools**
    and **Supervisord** to prevent a manual approach, whereby users need to log in
    to the server to start. For Linux operating systems, a utility such as **systemd**
    or **System V init** scripts can start/stop the application.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 **DAEMON Tools** 和 **Supervisord** 等进程工具来自动化应用程序重启，以避免人工操作，防止用户需要登录服务器进行启动。对于
    Linux 操作系统，像 **systemd** 或 **System V init** 脚本这样的工具可以启动/停止应用程序。
- en: Software vulnerability mitigation and secure code
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件漏洞缓解与安全编码
- en: It is always recommended to apply the latest security patch provided by your
    operating system vendor. This helps to fill any security holes in the system and
    protect your system from vulnerabilities where attackers can steal your security
    certificate or run arbitrary code.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 始终建议应用操作系统厂商提供的最新安全补丁。这有助于修补系统中的安全漏洞，保护系统免受攻击者窃取安全证书或执行任意代码的威胁。
- en: Keeping your system up to date with the latest security patches is very important.
    It is better to automate the process of the most recent patch installation as
    soon as it becomes available. However, running a security patch may sometimes
    break your working software, so it’s useful to set up a **Continuous Integration**
    **and** **Continuous Deployment** (**CI/CD**) pipeline with automated testing
    and deployment. You will learn more about the CI/CD process in *Chapter 11*, *DevOps
    and Solution Architecture Framework*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 保持系统更新，及时安装最新的安全补丁非常重要。最好是自动化处理最新补丁的安装，一旦补丁发布就能迅速应用。然而，运行安全补丁有时可能会导致现有软件出现问题，因此，设置一个**持续集成**（**CI**）和**持续部署**（**CD**）的自动化测试和部署管道非常有用。你将在*第11章*，*DevOps和解决方案架构框架*中深入了解CI/CD流程。
- en: The AWS cloud provides a system manager tool that allows you to apply security
    patches and monitor your server fleet in the cloud. You can use a tool such as
    **auto-updates** or **unattended upgrades** to automate security patch installation.
    When you opt for managed services from cloud providers, you essentially free yourself
    from the underlying infrastructure’s operational burden. The cloud provider takes
    care of the setup, management, operation, and optimization of the services. This
    includes regular maintenance tasks, such as patching, which is critical for security
    and performance.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: AWS云提供了一种系统管理工具，允许你在云中应用安全补丁并监控你的服务器群。你可以使用像**自动更新**或**无人值守升级**这样的工具来自动化安装安全补丁。当你选择云提供商的托管服务时，实际上是解放了你对底层基础设施的运维负担。云提供商负责服务的设置、管理、操作和优化。这包括定期的维护任务，如补丁安装，这对安全性和性能至关重要。
- en: 'Make sure to integrate secure coding best practices into your software development
    process, as recommended by the **Open Web Application Security Project** (**OWASP**),
    details about which can be found here: [owasp.org/www-project-secure-coding-practices-quick-reference-guide/stable-en/01-introduction/05-introduction](http://owasp.org/www-project-secure-coding-practices-quick-reference-guide/stable-en/01-introduction/05-introduction).'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将安全编码最佳实践整合到你的软件开发过程中，正如**开放网页应用安全项目**（**OWASP**）推荐的，更多信息请参考：[owasp.org/www-project-secure-coding-practices-quick-reference-guide/stable-en/01-introduction/05-introduction](http://owasp.org/www-project-secure-coding-practices-quick-reference-guide/stable-en/01-introduction/05-introduction)。
- en: Network security
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络安全
- en: When it comes to protecting your infrastructure, securing the network must be
    your first consideration. The physical security of your IT infrastructure in the
    data center must be taken care of by the data center providers. Let’s talk about
    ensuring network security, which is your responsibility as an application owner.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在保护基础设施时，确保网络安全应该是你的首要考虑。数据中心的物理安全由数据中心提供商负责。我们来谈谈如何确保网络安全，这部分是作为应用程序所有者的你需要负责的。
- en: Let’s take an example from a public cloud provider such as AWS to help you understand
    network security. You can apply the same example to your on-premises or private
    cloud network infrastructure as well.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以AWS等公有云服务提供商为例，帮助你理解网络安全。你可以将这个示例应用到你的本地或私有云网络基础设施中。
- en: 'As illustrated in the following diagram, security should be applied at every
    layer, and trusted boundaries around each layer with minimal access should be
    defined:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，安全性应该在每一层都得到应用，并且应该定义每一层的受信边界，确保最小化访问权限：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21336_07_10.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图 描述自动生成，具有中等置信度](img/B21336_07_10.png)'
- en: 'Figure 7.10: Network configuration for infrastructure security'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10：基础设施安全的网络配置
- en: In the preceding diagram, the load balancer is in a public subnet, which can
    accept internet traffic and distribute it to the application server fleet. WAF
    filter traffic is based on set rules and protects your application from various
    attacks, as you learned in the previous section. The application server fleet
    and database servers are in private subnets, which means direct internet access
    is not available.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s dive deep into the preceding architecture diagram and walk through each
    layer as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Virtual Private Cloud** (**VPC**) provides a logically isolated network
    for your cloud infrastructure. It serves as your personalized network environment
    within the cloud, hosting various resources. Designed for enhanced control, it
    allows the segregation of different environments and resources. You can set up
    multiple VPCs within each AWS account or region. When setting up a VPC, you define
    its range of IP addresses using **Classless Inter-Domain Routing** (**CIDR**)
    notation. This notation is a concise way to represent a specific span of IP addresses.
    For instance, the CIDR block `10.0.0.0/16` encompasses all IP addresses from `10.0.0.0`
    to `10.0.255.255`. This range includes a total of 65,535 IP addresses available
    for use.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subnets** are parts of a network, divided using CIDR ranges, that establish
    secure boundaries between private and public resources. Instead of organizing
    subnets by application or function (such as the web, app, or data tiers), it’s
    more effective to arrange them based on internet access. This setup enables clear
    isolation at the subnet level, differentiating between public-facing and private
    internal resources.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this setup, resources needing internet access, like public-facing load balancers,
    **network address translation** (**NAT**) instances, and bastion hosts, are placed
    in a **public subnet**. Other resources, such as databases and applications, reside
    in a private subnet. This creates distinct layers of separation between different
    resource tiers, with application instances and data resources each allocated to
    their own private subnets. On AWS, most resources can be hosted in **private subnets**,
    utilizing public subnets only when internet access is required. As a result, it’s
    advisable to allocate a larger number of IP addresses to your private subnets
    than to your public subnets, which ensures ample space for the majority of your
    resources that will reside in the private network. Subnets provide basic separation
    between resources with **Network Access Control List** (**NACL**) rules, but security
    groups provide a more detailed level of traffic management. This approach prevents
    overly complex infrastructure and the inefficient use of IP addresses.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A **routing table** consists of rules, known as routes, that dictate which application
    servers receive network traffic. For enhanced security, it’s recommended to use
    a distinct custom route table for each subnet.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security groups** function as virtual firewalls that manage both inbound
    and outbound traffic for one or more instances. These instances can be specified
    within a given CIDR block range or can be part of another designated security
    group. Following the principle of least privilege, security groups are set to
    deny all incoming traffic by default. You can then establish specific rules to
    filter traffic based on protocols such as TCP, UDP, and the **Internet Control
    Message Protocol** (**ICMP**). This setup ensures that only the necessary and
    authorized traffic can access your instances, enhancing the security of your network.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **NACL** is an optional layer of security in the form of a virtual firewall,
    controlling both inbound and outbound traffic at the subnet level within your
    network. Unlike a security group, which is stateful, an NACL operates in a stateless
    manner. This statelessness means that each request, whether incoming or outgoing,
    is treated independently. For example, even if an incoming request is allowed
    through, the corresponding outbound response must also be explicitly permitted
    by the rules set in the NACL. This requires you to define both inbound and outbound
    traffic rules meticulously to ensure proper traffic flow and security at the subnet
    level.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet traffic is routed through an **internet gateway** (**IGW**) to make
    a subnet public. By default, internet accessibility is denied for internet traffic
    in your environment. An IGW needs to be attached to your VPC, and the subnet’s
    route table should define the rules of the IGW.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A private subnet blocks all incoming and outgoing internet traffic but servers
    may need outgoing internet traffic for software and security patch installation.
    A **NAT gateway** enables instances in a private subnet to initiate outbound traffic
    to the internet and protects resources from incoming internet traffic.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **bastion host** acts like a jump server, which allows access to other resources
    in the private subnet. A bastion host needs to be hardened with tighter security
    so that only appropriate people can access it. To log in to the server, always
    use *public-key cryptography* for authentication rather than a regular user ID
    and password method.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizations often gather, store, and review network flow logs for multiple
    reasons. These include diagnosing connectivity problems, resolving security issues,
    and evaluating network access policies. You need to monitor traffic flow to your
    system VPC, which includes recording incoming and outgoing traffic information
    from your network. **VPC flow logs** enable you to capture that information, along
    with accepted and rejected traffic information for the designated resource, which
    helps you to understand traffic patterns better.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Flow logs serve as a security tool for monitoring traffic to instances. You
    can set up alarms for specific traffic types and create metrics to spot trends
    and patterns. Flow logs can be established for a VPC, a subnet, or a network interface.
    When created for a subnet or VPC, they monitor each network interface within that
    subnet or VPC. For example, consider a scenario where you have a VPC with multiple
    subnets. By setting up a flow log for the VPC, you can monitor all incoming and
    outgoing traffic across its network interfaces. If you notice unusual traffic
    patterns, like an unexpected spike in data requests from an unknown IP address,
    you can configure an alarm to alert you. This proactive monitoring helps to identify
    potential security threats or network inefficiencies early on.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 流日志作为监控流量到实例的安全工具。你可以为特定流量类型设置报警，并创建度量标准来发现趋势和模式。流日志可以为VPC、子网或网络接口创建。当为子网或VPC创建时，它们会监控该子网或VPC内的每个网络接口。例如，假设你有一个包含多个子网的VPC。通过为VPC设置流日志，你可以监控其网络接口上的所有进出流量。如果你注意到异常的流量模式，比如来自未知IP地址的数据请求突然激增，你可以配置报警来提醒你。这种主动监控有助于及早识别潜在的安全威胁或网络低效。
- en: As you can see, there are multiple layers of security available at the network
    layer that can help protect your infrastructure. Keeping resources in their isolated
    subnet helps to reduce the blast radius. If an attacker can penetrate one component,
    you should be able to restrict them to limited resources. You can use an IDS and
    an IPS in front of your infrastructure to detect and prevent any malicious traffic.
    Let’s learn about them next.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在网络层面有多层安全防护可用于保护你的基础设施。将资源保存在其独立的子网中有助于减少爆炸半径。如果攻击者能够突破一个组件，你应该能够将其限制在有限的资源中。你可以在基础设施前使用IDS和IPS来检测和阻止任何恶意流量。接下来我们来了解它们。
- en: Intrusion detection system and intrusion prevention system
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 入侵检测系统和入侵防御系统
- en: An IDS detects any cyber attack happening through network traffic by recognizing
    an attack pattern. An IPS goes a step further and proactively helps to stop malicious
    traffic.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: IDS通过识别攻击模式，检测通过网络流量发生的任何网络攻击。IPS则进一步主动帮助阻止恶意流量。
- en: 'An IPS provides critical analysis of potential threats, positioned behind the
    firewall. It identifies dangerous content, like malicious packets, and can block
    traffic or reset connections. The IPS uses two primary detection methods:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: IPS提供对潜在威胁的关键分析，位于防火墙后面。它可以识别危险的内容，如恶意数据包，并可以阻止流量或重置连接。IPS使用两种主要的检测方法：
- en: '**Signature-based detection**: This method relies on a growing database of
    unique patterns, or “signatures,” associated with each known exploit.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于特征的检测**：这种方法依赖于一个不断增长的数据库，其中包含与每个已知漏洞相关的唯一模式或“特征”。'
- en: '**Statistical anomaly-based detection**: This approach establishes a baseline
    for normal network performance and compares random samples of network traffic
    to this baseline. If traffic deviates significantly, the IPS intervenes.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于统计异常的检测**：这种方法建立正常网络性能的基准，并将网络流量的随机样本与此基准进行比较。如果流量偏离基准较大，IPS会介入。'
- en: You will need to determine the applicability of the IDS/IPS system to your application’s
    requirements. An IDS can be host-based or network-based.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要确定IDS/IPS系统是否适用于你的应用需求。IDS可以是基于主机的，也可以是基于网络的。
- en: Host-based IDS
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于主机的IDS
- en: A host- or agent-based IDS runs on each host of your environment. It can review
    the activity within that host to determine if an attack has occurred and has succeeded.
    It can do this by inspecting logs, monitoring the filesystem, monitoring network
    connections to the host, and so on. The software or agent then communicates with
    a central/command application about the health or security of the host it monitors.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 基于主机或代理的IDS在你环境中的每个主机上运行。它可以检查该主机内的活动，以确定是否发生了攻击并且攻击是否成功。它可以通过检查日志、监控文件系统、监控与主机的网络连接等方式来实现。然后，软件或代理与一个中央/指挥应用程序沟通，报告它所监控的主机的健康状况或安全性。
- en: The pros of host-based solutions include that they can deeply inspect the activity
    inside each host. They can scale horizontally as required (each host gets its
    own agent) and do not need to impact the performance of running applications.
    The cons include the additional configuration management overheads that can be
    introduced if agents are managed on many servers, which are burdensome for an
    organization.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: As each agent operates in isolation, widespread/coordinated attacks can be hard
    to detect. To handle coordinated attacks, the system should respond immediately
    across all hosts, which requires the host-based solution to cooperate with the
    other components, such as the operating system and the application interface,
    deployed on the host.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Network-based IDS
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A network-based IDS inserts an appliance into the network, through which all
    traffic is routed and inspected for attacks.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: The pros include a simple/single component that needs to be deployed and managed
    away from the application hosts. Also, it is hardened or monitored in a way that
    might be burdensome across all hosts. An individual/shared view of security exists
    in a single place so that the big picture can be inspected for anomalies/attacks.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: However, a network-based IDS includes the performance hit of adding a network
    hop to applications. Having to decrypt/re-encrypt traffic to inspect it is both
    a massive performance hit and a security risk that makes the network appliance
    an attractive target. Any traffic that the IDS cannot decrypt cannot inspect/detect
    anything.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: An IDS is a detection and monitoring tool and does not act on its own. An IPS
    detects, accepts, and denies traffic based on set rules. IDS/IPS solutions help
    to prevent DDoS attacks due to their anomaly-detection capabilities that make
    them able to recognize when valid protocols are used as an attack vehicle. An
    IDS and an IPS work by analyzing network packets and comparing their contents
    against a database of known threats. This process allows them to identify and
    respond to potential security risks. Continuous auditing and scanning are required
    for your infrastructure to secure it from any attack proactively.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned all about securing your infrastructure from various
    types of attacks. The goal of these attacks is to get hold of your data. You should
    secure your data in such a way that an attacker cannot acquire sensitive information
    even after getting hold of the data. Let’s learn about data protection using security
    at the data layer, encryption, and backup.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Data security
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In today’s digital world, every system revolves around data. Sometimes, this
    data may contain sensitive information such as customer health records, payment
    information, and government identity. Securing customer data to prevent any unauthorized
    access is highly important. Many industries place significant stress on data protection
    and security.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Before architecting any solution, you should define basic security practices
    that align with your objective, such as complying with regulatory requirements.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: There are several different approaches used to protect data. Let’s look at them
    in the upcoming sections.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Data classification
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the best practices is to classify your data, which provides a way to
    categorize and handle organizational data based on sensitivity levels.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: According to data sensitivity, you can plan data protection, data encryption,
    and data access requirements.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: By managing data classification as per your system’s workload requirements,
    you can create the data controls and level of access needed for the data. For
    example, content such as a user rating and review is often public, and it’s fine
    to provide public access, but user credit card information is highly sensitive
    data that needs to be encrypted and put under very restricted access.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'At a high level, you can classify data into the following categories:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '**Restricted data**: This contains information that could harm the customer
    directly if it got compromised. Mishandling of restricted data can damage a company’s
    reputation and impact a business adversely. Restricted data may include customer
    PII data, such as social security numbers, passport details, credit card numbers,
    and payment information.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private data**: Data can be categorized as private if it contains customer-sensitive
    information that an attacker can use to plan to obtain their restricted data.
    Private data may include customer email IDs, phone numbers, full names, and addresses.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Public data**: This is available and accessible to everyone and requires
    minimal protection—for example, customer ratings and reviews, customer location,
    and customer username if the user made it public.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can have a more granular category depending on the type of industry and
    the nature of the user data. Data classification needs to balance data usability
    versus data access. Setting different levels of access, as mentioned previously,
    helps to restrict only the necessary data and make sure sensitive data is not
    exposed. Always avoid giving direct human access to data and add some tools that
    can generate a read-only report for users to consume in a restrictive manner.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Data encryption at rest
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data at rest means data that is stored somewhere, such as a **storage area network**
    (**SAN**), a **network-attached storage** (**NAS**) drive, or in cloud storage.
    All sensitive data must be protected by applying symmetric or asymmetric encryption,
    explained in this section, with proper key management.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: In addition to encryption, there are other methods to protect data at rest,
    such as masking and tokenization. These methods provide additional layers of security
    and are particularly useful in situations where sensitive information needs to
    be used or shared without exposing the actual data.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Data encryption is a way of protecting your data whereby you convert your data
    from plaintext to encoded ciphertext format using an encryption key. This ciphertext
    needs to be decrypted using the decryption key before it can be read, and only
    authorized users will have access to the decryption key.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'Commonly used key-based encryption falls into one of two categories of cryptography:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '**Symmetric-key encryption**: With symmetric encryption algorithms, the same
    key is used to encrypt and decrypt the data. Each data packet is self-encrypted
    with a secret key. Data is encrypted while saving and decrypted during retrieval.
    Symmetric encryption used to be applied as per the **Data Encryption Standard**
    (**DES**), which used a 56-bit key. Now, the **Advanced Encryption Standard**
    (**AES**) is widely used for symmetric encryption, which is more reliable as it
    uses a 128-bit, 192-bit, or 256-bit key.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Asymmetric-key encryption**: With the help of asymmetric algorithms, two
    different keys can be used: one to encrypt data and one to decrypt data. In most
    cases, the encryption key is a public key and the decryption key is a private
    key. Asymmetric key encryption is also known as **public-key encryption**. The
    public and private keys are *unidentical* but they are paired together. The private
    key is only available to one user, while the public key can be distributed across
    multiple resources. Only the user who has a private key can decrypt the data.
    **Rivest–Shamir–Adleman** (**RSA**) is one of the first and most popular public
    key encryption algorithms used to secure data transmissions over a network.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data encryption and decryption come with a performance price as they add an
    additional layer of processing. You need to make a careful trade-off while choosing
    data for encryption. It might be best to use encryption only where it’s necessary
    to reduce performance and key management overheads.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: If you encrypt your data with an AES 256-bit security key, it is almost impossible
    to break the encryption. The only way to decrypt it is by getting your hands on
    the encryption key, which means you need to secure your code and keep it in a
    safe place. Let’s learn about some essential management methods to safeguard your
    encryption key.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Encryption key management
  id: totrans-269
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Key management is essential for effective encryption. It ensures that only authorized
    personnel can access and manage encryption keys. It involves the creation, storage,
    rotation, and deletion of keys, along with controlling who can access them. Envelope
    encryption is a specific key management technique used in symmetric encryption
    where a data key encrypts the plaintext, and a master key encrypts the data key.
    This method enhances security by requiring two keys for decryption, adding an
    extra layer of protection.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: AWS **Key Management Service** (**KMS**) provides envelope encryption functionality.
    It provides a secure environment where data keys encrypt customer data and master
    keys from KMS encrypt the data keys. This service provides centralized control
    over key management, including user access and key rotation.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: AWS KMS is a multitenancy key management module. Other cloud vendors provide
    a similar key management system, such as Cloud Key Management from GCP and Azure
    Key Vault from Microsoft.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, due to regulatory requirements, customers prefer a dedicated key
    management store that incorporates physical hardware security. They can choose
    to store their keys in a **hardware security module** (**HSM**) in this case.
    Cloud providers such as AWS also provide stores, such as AWS **CloudHSM**. You
    can choose your own HSM vendor as well.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: An HSM is a specialized device designed to safeguard cryptographic keys and
    operations, featuring robust physical and logical security mechanisms. Physically,
    it’s engineered to detect and respond to tampering by erasing keys to prevent
    breaches. Logically, it employs stringent access controls, allowing only authorized
    users specific roles and interactions with the device. To prevent data loss, it’s
    crucial to ensure the HSM’s high availability, typically by deploying multiple
    units in different locations.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Data encryption in transit
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data in transit means data being transferred over the network. You may encrypt
    data at rest in the source and destination but your data transfer pipeline needs
    to be secure when transferring data. When transferring data over an unencrypted
    protocol such as HTTP, it can be accessed through an attack such as an **eavesdropping
    attack** or **man-in-the-middle** (**MITM**) attack.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: In an eavesdropping attack, the attacker captures a small packet from a network
    and uses it to search for any other type of information. An MITM attack is a tampering-based
    attack where the attacker secretly alters the communication to start communicating
    on behalf of the receiver. These kinds of attacks can be prevented by transferring
    data over SSL using a strong protocol such as the **Transport Security Layer**
    (**TSL**).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: You will observe that most websites now use HTTPS for communication, which encrypts
    data using SSL. By default, HTTP traffic is unprotected. All web servers and browsers
    support SSL/TSL protection for HTTP traffic (HTTPS). HTTP traffic also applies
    to service-oriented architectures such as **Representational State Transfer**
    (**REST**) and **Simple Object Access Protocol** (**SOAP**)-based architectures.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'SSL/TSL handshakes use certificates to exchange a public key using asymmetric
    encryption and then use the public key to exchange a private key using symmetric
    encryption. A security certificate is issued by an acceptable **Certification
    Authority** (**CA**) such as Verisign. Procured security certificates need to
    be secured using a **Public Key Infrastructure** (**PKI**). Here’s an overview
    of the standard SSL handshake process using RSA key exchange:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '**Client Hello**: The client initiates the SSL communication by sending a message
    to the server. This message includes the SSL version number, preferred cipher
    settings, and data specific to the user’s session.'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Server Hello**: The server responds to the client, agreeing to communicate
    using SSL. It verifies the SSL version number and sends its certificate, which
    contains the public key.'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Authentication and pre-master secret generation**: The client authenticates
    the server’s certificate, checking its common name, validity period, and issuing
    authority. It then generates a pre-master secret based on the chosen cipher and
    encrypts it with the public key from the server before sending it.'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Decryption and master secret creation**: The server uses its private key
    to decrypt the pre-master secret. Both parties then use this pre-master secret
    to create a master secret, following steps defined by the selected cipher.'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Session key encryption**: Both the server and client send messages indicating
    that subsequent communications will be encrypted using the session key, also known
    as the shared secret. They confirm that message encryption and decryption are
    successful, ensuring that the rest of the session’s communication is securely
    encrypted.'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Non-web transmission of data over the network should also be encrypted, including
    **Secure Shell** (**SSH**) and **Internet Protocol Security** (**IPsec**) encryption.
    SSH is most prevalent while connecting to servers, and IPsec applies to secure
    corporate traffic transferred over a **virtual private network** (**VPN**). File
    transfer should be secured using **SSH File Transfer Protocol** (**SFTPS**) or
    **FTP Secure** (**FTPS**), and email server communication needs to be secured
    by **Simple Mail Transfer Protocol Secure** (**SMTPS**) or **Internet Message
    Access Protocol** (**IMAP**).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about various ways to secure data at rest and in
    motion with different cryptographic techniques.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Data backup and recovery is an essential aspect of protecting your data in the
    case of any unforeseen incidents. You will learn more about data backup in *Chapter
    8*, *Architectural Reliability Considerations*, in the *Disaster recovery planning*
    section.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Securing APIs
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Application Programming Interfaces** (**APIs**) are the connective tissue
    between different software systems. They facilitate seamless interactions and
    data transfers. Think of an API as a server in a restaurant; you (the software
    application) give the waiter (the API) your order (the request), and the waiter
    brings back the dish (the data/response) from the kitchen (another software system
    or database). Due to the critical role APIs play in modern software infrastructure,
    especially in cloud services and microservice architectures, they’ve become enticing
    targets for cyber attackers. As such, securing them has never been more crucial.
    APIs, by their very nature, expose a gateway to potentially sensitive application
    functions and data. When improperly secured, APIs can lead to various threats,
    such as unauthorized access to sensitive data, data corruption, denial of service,
    and sometimes full system compromises. Furthermore, given the interconnected nature
    of today’s software ecosystems, a vulnerability in one API could potentially compromise
    an entire suite of applications and services. As businesses increasingly rely
    on APIs to integrate third-party services and enable functionalities like payment
    gateways, the implications of an API breach can be severe, affecting revenue,
    brand reputation, and legal standing.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some best practices to ensure API security:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication and authorization**: Utilize strong authentication methods
    such as OAuth or JWTs to confirm the identities of entities attempting to access
    the API. Additionally, implement effective authorization protocols to manage access
    rights. This means that even authenticated users can only access the data and
    functions they are explicitly permitted to. A secure API knows who is making a
    request and what that entity is allowed to access.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A banking app uses an API to allow users to check account balances. The app
    uses OAuth to ensure only authenticated and authorized users can view their specific
    account details.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Rate limiting**: Implement rate limiting to prevent any form of abuse, including
    brute-force attacks. By limiting the number of requests a user or IP can make
    within a set timeframe, you can thwart potential attackers from overwhelming your
    system or trying numerous combinations in quick succession. An online store’s
    API could prevent users from making more than ten requests per minute to prevent
    system overloads and potential misuse.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input validation**: Always validate and sanitize data sent to your API. This
    can prevent various forms of attacks, including SQLi, where attackers send malicious
    data in the hopes of manipulating your systems. An online feedback form uses an
    API to submit user comments. The system checks to ensure that entries don’t contain
    malicious scripts that could compromise the website.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encryption**: Data in transit to and from your API should be encrypted using
    protocols such as TLS. This ensures that even if data packets are intercepted,
    they remain unintelligible to unauthorized parties. A messaging app ensures that
    the messages sent between users are encrypted. If someone intercepts the messages,
    they’ll only see jumbled characters rather than the actual content. Think of it
    as speaking in a coded language. Even if someone overhears your conversation,
    they will only understand it if they know the code.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regularly monitor and audit**: Continuously monitor API activity. Any unusual
    patterns, such as unexpected spikes in requests or anomalous data access patterns,
    can be early signs of an attack or vulnerability exploitation. Regular audits
    can also help identify any lingering security misconfigurations. A cloud storage
    provider monitors its APIs for unusual data transfer patterns, ensuring that large
    amounts of data aren’t being unexpectedly downloaded or uploaded, which could
    indicate a security breach. Consider security cameras in stores. They monitor
    activity and can catch and deter theft.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implement API gateways**: Using API gateways can act as an added layer of
    protection. They handle request routing, API composition, and other functions,
    ensuring only legitimate requests reach your back-end systems. An e-commerce site
    uses an API gateway to manage requests, ensuring that only legitimate and well-structured
    requests reach its database, filtering out potentially harmful ones. Consider
    a hotel concierge who checks and confirms your reservation before allowing you
    to proceed to your room.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error handling**: Avoid exposing sensitive information through error messages.
    A generic error message should be returned to the user, while detailed error logs
    should be maintained securely on the server side for diagnostic purposes. When
    a user tries to reset a password and their email isn’t recognized, the system
    doesn’t specify if the email is wrong or doesn’t exist. It simply prompts them
    to try again, preventing potential data phishing.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use web application firewalls**: WAFs can detect and block malicious requests
    to your API, providing another layer of defense against common web-based threats.
    For example, if you’re running an e-commerce platform, the WAF can scrutinize
    incoming traffic to your API endpoints, identifying and thwarting potentially
    harmful requests such as SQLi and XSS attacks. This ensures that only legitimate
    requests are processed, safeguarding your application from cyber threats.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Versioning**: Implement versioning in your APIs. If a security issue is detected
    in one API version, it can be addressed without affecting other versions, ensuring
    continuity of service for applications using the unaffected versions. For example,
    suppose you have a mobile application that relies on an API for fetching user
    data. By implementing versioning (e.g., v1, v2, v3), if a security vulnerability
    is discovered in v2, you can quickly address the issue in that version while older
    (v1) and newer (v3) versions continue to operate securely and without disruption.
    This approach allows your development team to patch or upgrade specific versions
    of the API, minimizing the impact on end users.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regular security testing**: Periodically subject your APIs to penetration
    testing and vulnerability assessments. This proactive approach can help identify
    and rectify potential weaknesses before they are exploited. A music streaming
    platform periodically tests its API to ensure that unauthorized users can’t access
    premium features without a valid subscription.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As APIs continue to be the linchpin of modern digital infrastructure, the necessity
    to secure them escalates. By adhering to industry best practices and maintaining
    a proactive security posture, businesses can safeguard their operations, customers,
    and reputation from any threats posed.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: There are many governing bodies that publish compliance about data security,
    which can take the form of a set of checklists to adhere to. Compliance also makes
    sure that organizations comply with industry and local government rules. Let’s
    learn more about various compliance measures in the next section.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Security and compliance certifications
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many compliance certifications to protect customer privacy and secure data
    depend on your industry and your geographical location. For any solution design,
    compliance requirements are among the critical criteria that need to be evaluated.
    The following are some of the most widely known geographical and industry-standard
    compliances:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Global compliance includes certifications that all organizations must adhere
    to, regardless of their region. These include ISO 9001, ISO 27001, ISO 27017,
    ISO 27018, SOC 1, SOC 2, SOC 3, and CSA STAR for cloud security.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The US government requires various kinds of compliance to handle the public
    sector workload. These include FedRAMP, DoD SRG Level-2, 4, and 5, FIPS 140, NIST
    SP 800, IRS 1075, ITAR, VPAT, and CJIS.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Industry-level compliance of an application applies to particular industries.
    These include PCI DSS, CDSA, MPAA, FERPA, CMS MARS-E, NHS IG Toolkit (in the UK),
    HIPAA, FDA, FISC (in Japan), FACT (in the UK), Shared Assessment, and GLBA.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regional compliance certification applies to a particular country or region.
    These include the EU GDPR, EU Model Clauses, UK G-Cloud, China DJCP, Singapore
    MTCS, Argentina PDPA, Australia IRAP, India MeitY, New Zealand GCIO, Japan CS
    Mark Gold, Spain ENS and DPA, Canada Privacy Law, and US Privacy Shield.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, there are many compliance certifications available from different
    regulatory bodies that relate to industry, region, and government policy. We are
    not going to go into compliance details but you must evaluate your application
    with compliance requirements before starting your solution design as compliance
    requirements influence the overall solution design heavily. You need to decide
    what kind of encryption is required, as well as the logging, auditing, and location
    of your workload based on your compliance needs.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Logging and monitoring help to ensure robust security and compliance and are
    essential. If an incident occurs, your team should be notified immediately and
    should be ready to respond. You will learn more about monitoring and alert methods
    in *Chapter 9*, *Operational Excellence Considerations*.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Several compliance industries depend on your application geolocation, industry,
    and government rules. You have learned about the various categories of compliance
    and some common compliance standards appropriate for each group. Many organizations
    are moving to the cloud, so it’s vital to understand security in the cloud.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: The cloud’s shared security responsibility model
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the cloud is becoming the norm and many organizations are moving their workload
    to a public cloud such as AWS, GCP, and Azure, the customer needs to understand
    the cloud security model.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Security in the cloud is a joint effort between the customer and the cloud provider.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: Customers are responsible for what they implement using cloud services and the
    applications connected to the cloud. In the cloud, customer responsibility for
    application security depends upon the cloud provider they are using and the complexity
    of their system.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates a cloud security model from one of the largest
    public cloud providers (AWS), and it’s pretty much applicable to any public cloud
    provider, such as Azure, GCP, Oracle, IBM, and Alibaba:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing text, screenshot, font, software  Description automatically
    generated](img/B21336_07_11.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.11: AWS Cloud shared security responsibility model'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: 'The customer handles the **security in the cloud**, which includes the following:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '**Server’s operating system**: The operating system installed on the server
    could be vulnerable to attacks. Patching and maintenance of the operating system
    is the customer’s responsibility, as software applications depend heavily upon
    it.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application**: Every application and its environments, such as dev, test,
    and prod, are maintained by the customer. So, handling password policies and access
    management is the customer’s responsibility.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating system/host-based firewalls**: Customers must protect their entire
    system from external attacks. The cloud provides security in that area, but customers
    should consider an IDS or an IPS to add an extra layer of security.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network configuration and security group**: The cloud provides tools to create
    a network firewall, but which traffic needs to be stopped or allowed to go through
    depends on the application requirements. Customers are responsible for setting
    up firewall rules to secure their systems from external and internal network traffic.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer data and encryption**: Data handling is the customer’s responsibility,
    as they are more aware of the level of data protection needed. The cloud provides
    tools for data protection by using various encryption mechanisms but it’s the
    customer’s responsibility to apply those tools and secure their data.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As shown in *Figure 7.11*, AWS and other public cloud providers are responsible
    for **securing the cloud**, specifically the physical infrastructure that hosts
    your resources. This security encompasses several key areas:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Centers**: AWS data centers are nondescript facilities that employ round-the-clock
    security guards. They implement strict access controls, including two-factor authentication,
    comprehensive access logging and regular review, and video surveillance. Additionally,
    AWS ensures the secure disposal of data storage devices through methods like disk
    degaussing and destruction.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hardware Infrastructure**: This includes servers, storage devices, and various
    other appliances that underpin AWS services. AWS ensures the security and integrity
    of this hardware.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software Infrastructure**: This refers to the host operating systems, service
    applications, and virtualization software used in AWS services. AWS maintains
    the security of this software layer, ensuring it is resilient to threats.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network Infrastructure**: AWS secures its network infrastructure, which comprises
    routers, switches, load balancers, firewalls, cabling, and more. Part of this
    security measure involves continuous monitoring of the network’s external boundaries.
    AWS also maintains secure access points and redundant network infrastructure to
    prevent disruptions and enhance security.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make your application with industry regulations like PCI-DSS for financial
    data security and GDPR for data protection in Europe, you need to handle and complete
    audits for application-level complaints. The public cloud provides various compliance
    certifications that apply to the hardware portions they manage. As a customer,
    you get an additional advantage by inheriting security and compliance provided
    by the cloud provider.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: The cloud provides all kinds of tools and services to secure your application
    in the cloud, along with built-in security at the IT infrastructure level. However,
    it’s up to the customer how they want to utilize those services and make their
    application secure in the cloud. The cloud offers enhanced visibility and centralized
    control over your IT inventory, aiding in the effective management and security
    of your systems.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Security is the priority for any solution, and a solutions architect must ensure
    their application is secure and protected from any attack. Aim to incorporate
    automated security best practices as much as possible. Utilizing software-based
    security mechanisms can significantly enhance your scalability, cost-effectiveness,
    and overall security. Start by creating a custom baseline image of a virtual server,
    which encapsulates your security standards. This image can then be used consistently
    for every new server you deploy, ensuring uniform security across your infrastructure.
    Additionally, design your entire infrastructure within a template that defines
    and manages it. This approach allows you to replicate your established security
    best practices in every new environment you create.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Security is a continuous effort. Each security incident should be treated as
    an improvement opportunity for the application. A robust security mechanism should
    have authentication and authorization controls. Organizations and applications
    should automate responses to security events and protect infrastructure at multiple
    levels.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Securing threat modeling
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threat modeling is a structured way to identify, assess, and prioritize potential
    threats to your application. By understanding the potential threats, you can design
    and implement appropriate countermeasures to prevent, detect, or mitigate the
    impact of these threats. Threat modeling is often used in software development
    but can also be applied to other areas, such as infrastructure and operations.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the components of threat modeling:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '**System representation**: Before analyzing threats, you need a clear understanding
    of the system. This often involves creating diagrams or models of the system’s
    architecture, components, data flows, and potential entry points. For a simple
    online e-commerce website, you might have a front-end for users, a back-end server
    handling requests, a database storing user credentials, and an external payment
    gateway for transactions. Before launching a new feature that allows users to
    save multiple delivery addresses, the development team wants to ensure there are
    no security loopholes. They create a data flow diagram showing how this new feature
    interacts with the existing system.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threat identification**: Enumerate potential threats based on the system’s
    representation. This can involve using techniques like **Spoofing, Tampering,
    Repudiation, Information Disclosure, Denial of Service, and Elevation of Privilege**
    (**STRIDE**) and attack trees. For our e-commerce site, threats could include
    SQL injection (to access the database), phishing attacks (to steal user credentials),
    or DoS attacks (to bring the site down). The team realizes that allowing users
    to save addresses might expose those addresses if there’s a data breach. They
    list this threat alongside others.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threat analysis**: Evaluate the potential impact and likelihood of each identified
    threat. This can help you to prioritize threats. While SQLi could expose a lot
    of sensitive user data, a phishing attack might target fewer users but is more
    likely to occur. The development team assesses that a data breach exposing saved
    addresses could lead to a loss of user trust and potential misuse. They give this
    threat a high severity rating.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mitigation strategy**: For each identified threat, determine the best course
    of action to reduce its risk. This can involve adding security controls, changing
    system architecture, or even accepting the risk if its potential impact is acceptable.
    To prevent SQL injection, the team could use parameterized queries. To combat
    phishing, they might introduce two-factor authentication. To safeguard user addresses,
    the team decides to encrypt them in the database. They also add alerts for any
    suspicious activity linked to address changes.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Documentation**: Document the findings, including potential threats, their
    severity, and the chosen mitigation strategies. A document is created detailing
    that user addresses are encrypted and the encryption method used. Six months later,
    there’s a requirement to shift to a different database. The documentation helps
    the new database team understand the security measures in place.'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review and update**: Threat modeling is not a one-time task. As systems evolve,
    new threats may emerge, while others may become less relevant. Regularly reviewing
    and updating the threat model ensures that it remains relevant. The e-commerce
    site decided to introduce a new chatbot feature. Before deploying the chatbot,
    the team refers to their threat model to see if introducing this new feature brings
    any new vulnerabilities or if existing threats have evolved.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In essence, threat modeling helps teams be proactive in their security efforts,
    addressing potential vulnerabilities before they become issues.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about various design principles to apply security
    best practices for your solution design. These principles include key considerations
    to protect your application by using appropriate access control, data protection,
    and monitoring.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: You need to apply security at every layer. Starting with user authentication
    and authorization, you learned about applying security at the web layer, application
    layer, infrastructure layer, and database layer. Each layer is vulnerable to different
    attacks, and you learned various methods to protect your application with the
    available technology choices.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: For user management, you learned how to use FIM and SSO to handle corporate
    users and various methods of implementing user authentication and authorization.
    These include enterprise management services like Microsoft AD and AWS Directory
    Service. You can also handle millions of users using OAuth 2.0.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: At the web layer, you learned about various attack types, such as **DDoS**,
    **SQLi**, and **XSS**. You learned how to protect against those attacks using
    different prevention techniques and network firewalls. You learned various techniques
    to protect code at the application layer and ensure the security of your infrastructure.
    You dove deep into different network components and methods to build trusted boundaries
    to limit the attack radius.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: You learned about data protection by putting proper data classification in place
    and tagging your data as confidential, private, or public. You learned about symmetric
    and asymmetric algorithms and how they differ. You looked at using key management
    to protect the public/private encryption key. Data can be in motion or sitting
    in storage, you learned about how to protect data in both modes. You explored
    API security and best practices to ensure all APIs exposing your applications
    are secure. You discovered various compliance and shared security responsibility
    models that are applicable to a cloud workload. In the end, you learned about
    building threat models.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: While this chapter was about applying security best practices, reliability is
    another essential aspect of any solution design. To make your business successful,
    you need to create a reliable solution that is always available and can handle
    workload fluctuation. In the next chapter, you will learn the best practices to
    make your application reliable with the available technologies. You will learn
    about various disaster recovery and data replication strategies to make your application
    more reliable.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: Leave a review!
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enjoying this book? Help readers like you by leaving an Amazon review. Scan
    the QR code below to get a free eBook of your choice.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image.png)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
