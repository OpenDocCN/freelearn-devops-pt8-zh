- en: Attaching Instances to Networks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将实例附加到网络
- en: In *[chapter 6](5a3df5cf-aebb-4c57-9f48-fa5419a5b2ae.xhtml), Building Networks
    with Neutron*, we created multiple networks that can be utilized by projects in
    the cloud. In this chapter, we will create instances that reside in those networks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *[第六章](5a3df5cf-aebb-4c57-9f48-fa5419a5b2ae.xhtml)，使用 Neutron 构建网络* 中，我们创建了多个可供云中项目使用的网络。在本章中，我们将创建居住在这些网络中的实例。
- en: 'I will guide you through the following tasks:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我将引导你完成以下任务：
- en: Creating and attaching instances to networks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并将实例附加到网络
- en: Adding additional interfaces to instances
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向实例添加额外接口
- en: Demonstrating DHCP and metadata services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示 DHCP 和元数据服务
- en: Attaching instances to networks
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将实例附加到网络
- en: Using the OpenStack command-line client, instances can be attached to networks
    in a couple of ways. When an instance is first created, it can be attached to
    one or more networks using the `openstack server create` command. Running instances
    can be attached to additional networks using the `openstack server add port` command.
    Both methods are explained in the following sections.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenStack 命令行客户端，实例可以通过几种方式附加到网络。实例首次创建时，可以通过 `openstack server create` 命令将其附加到一个或多个网络。正在运行的实例可以通过
    `openstack server add port` 命令附加到更多的网络。以下章节将解释这两种方法。
- en: If you're following along, the networks we created in the previous chapters
    have all been destroyed and recreated with similar names and segmentation IDs,
    but with new ID numbers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在跟着教程做，前几章中创建的网络都已被销毁并重新创建，名称和分段 ID 类似，但具有新的 ID 号。
- en: Attaching instances to networks at creation
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在创建时将实例附加到网络
- en: 'Instances are created using the `openstack server create` command, as you can
    see here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实例是通过 `openstack server create` 命令创建的，如下所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Nova attaches instances to virtual bridges and switches on the `compute` node
    via their virtual interfaces, or VIFs. Each VIF has a corresponding Neutron port
    in the database.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Nova 通过实例的虚拟接口（VIF）将实例连接到 `compute` 节点上的虚拟桥接器和交换机。每个 VIF 在数据库中都有一个对应的 Neutron
    端口。
- en: When using the Open vSwitch mechanism driver and Open vSwitch firewall driver,
    each VIF plugs into the integration bridge on the respective `compute` node hosting
    the instance. The virtual switch port is configured with a local VLAN ID that
    corresponds to the network associated with the Neutron port and VIF. When the
    `iptables_hybrid` firewall driver is used, the VIF is connected to a Linux bridge
    where iptables rules are applied.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Open vSwitch 机制驱动程序和 Open vSwitch 防火墙驱动程序时，每个 VIF 插入到各自 `compute` 节点上的集成桥接器中。虚拟交换机端口会配置一个本地
    VLAN ID，与 Neutron 端口和 VIF 关联的网络相对应。当使用 `iptables_hybrid` 防火墙驱动程序时，VIF 会连接到一个 Linux
    桥接器，iptables 规则会应用于该桥接器。
- en: When using the Linux bridge mechanism driver, each VIF connects to a Linux bridge
    that corresponds to the associated network. Every network has a corresponding
    bridge that is used to segregate traffic at Layer 2.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Linux 桥接机制驱动程序时，每个 VIF 会连接到一个与关联网络相对应的 Linux 桥接器。每个网络都有一个相应的桥接器，用于在第二层隔离流量。
- en: For a refresher on these concepts, refer to [*Chapter 4*](05786c3c-b24e-40dc-82a7-ed6072eca14f.xhtml), *Virtual
    Switching Infrastructure Using Linux Bridges,* and [*Chapter 5*](0763a131-4ab9-4b3e-8854-8646feae7937.xhtml),
    *Building a Virtual Switching Infrastructure Using Open vSwitch*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要复习这些概念，请参考 [*第4章*](05786c3c-b24e-40dc-82a7-ed6072eca14f.xhtml)，*使用 Linux
    桥接构建虚拟交换基础设施*，以及 [*第5章*](0763a131-4ab9-4b3e-8854-8646feae7937.xhtml)，*使用 Open
    vSwitch 构建虚拟交换基础设施*。
- en: Specifying a network
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定网络
- en: The `openstack server create` command provides a `--nic` argument that specifies
    the network or port to be attached to the instance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`openstack server create` 命令提供了 `--nic` 参数，用于指定要附加到实例的网络或端口。'
- en: 'Users can specify a network identified by the network''s ID by using the `net-id`
    key:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过使用 `net-id` 键，指定由网络 ID 标识的网络：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding example, Nova interfaces with the Neutron API to create a
    port using the network ID provided by the user. Neutron then returns details of
    the port back to Nova for use by the instance. Users can request a specific unused
    IPv4 or IPv6 address using the `v4-fixed-ip` and `v6-fixed-ip` keys, respectively,
    as shown here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，Nova 与 Neutron API 交互，通过用户提供的网络 ID 创建端口。然后，Neutron 将端口的详细信息返回给 Nova，供实例使用。用户可以分别使用`v4-fixed-ip`和`v6-fixed-ip`键请求特定的未使用
    IPv4 或 IPv6 地址，如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Specifying a port
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定端口
- en: 'Alternatively, users can specify a port that''s been identified by the port''s
    ID using the `port-id` key, as shown here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以使用 `port-id` 键，通过端口 ID 指定一个已经识别的端口，如下所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, Neutron associates the existing port with the instance and
    sets the port's `device_id` attribute accordingly. A port can later be detached
    from an instance and associated with a new instance using this method. Possible
    options include auto, none, or the ID of an existing port. The default is auto.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，Neutron 将现有端口与实例关联，并相应地设置该端口的`device_id`属性。以后可以使用这种方法将端口从实例中分离，并将其与新实例关联。可选项包括auto、none或现有端口的ID。默认值为auto。
- en: Attaching multiple interfaces
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加多个接口
- en: By passing the `--nic` argument multiple times, it is possible to attach multiple
    interfaces to an instance. The interfaces within the instance may then be enumerated
    as `eth0`, `eth1`, `eth2`, and so on, depending on the operating system.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过多次传递`--nic`参数，可以将多个网络接口附加到实例。实例中的接口随后可以按`eth0`、`eth1`、`eth2`等方式进行枚举，这取决于操作系统。
- en: Attaching multiple network interfaces to an instance is referred to as **multihoming**.
    When an instance is multihomed, neither Neutron nor the instance itself is aware
    of which network takes precedence over another. When attached networks and subnets
    have their own respective gateway addresses set, an instance's routing table can
    be populated with multiple default routes. This scenario can wreak havoc on the
    connectivity and routing behavior of an instance. This configuration is useful
    when connecting instances to multiple networks directly, however, care should
    be taken to avoid network issues in this type of design.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 向实例附加多个网络接口被称为**多宿主**。当一个实例是多宿主时，Neutron 或实例本身无法知道哪个网络优先于另一个。当附加的网络和子网有各自的网关地址时，实例的路由表可能会填充多个默认路由。这种情况可能会对实例的连接性和路由行为造成严重影响。此配置在直接将实例连接到多个网络时非常有用，但在这种设计中应注意避免网络问题。
- en: Para-virtualized devices, including network and storage devices that use the
    virtio drivers, are PCI devices. Virtual machine instances under KVM are currently
    limited to 32 total PCI devices. Some PCI devices are critical for operation,
    including the host bridge, the ISA/USB bridge, the graphics card, and the memory
    balloon device, leaving up to 28 PCI slots available for use. Every para-virtualized
    network or block device uses one slot. This means that users may have issues attempting
    to connect upwards of 20-25 networks to an instance depending on the characteristics
    of that instance.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用virtio驱动的网络和存储设备等准虚拟化设备是PCI设备。KVM下的虚拟机实例当前限制为最多32个PCI设备。一些PCI设备对操作至关重要，包括主机桥、ISA/USB桥、显卡和内存气球设备，因此最多可以使用28个PCI插槽。每个准虚拟化的网络或块设备使用一个插槽。这意味着用户在尝试将多达20-25个网络连接到实例时，可能会遇到问题，这取决于该实例的特性。
- en: 'The following `openstack server create` command demonstrates the basic procedure
    of connecting an instance to multiple networks when creating the instance:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`openstack server create`命令演示了在创建实例时将实例连接到多个网络的基本过程：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Inside the instance, the first attached NIC corresponds to `NETWORK1`, the second
    NIC corresponds to `NETWORK2`, and so on. For many cloud-ready images, a single
    interface within the instance is brought online automatically using DHCP. Modification
    of the network interface file(s) or use of the `dhclient` command within the instance
    may be required to activate and configure additional network interfaces once the
    instance is active.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例内部，第一张附加的网络接口卡（NIC）对应`NETWORK1`，第二张网络接口卡对应`NETWORK2`，依此类推。对于许多支持云的镜像，实例中的单一网络接口会通过DHCP自动上线。一旦实例启动，可能需要修改网络接口文件或在实例内使用`dhclient`命令来激活并配置其他网络接口。
- en: Attaching network interfaces to running instances
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向运行中的实例附加网络接口
- en: Using the `openstack server add port` or `openstack server add fixed ip` commands,
    you can attach an existing or new port to running instances.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`openstack server add port`或`openstack server add fixed ip`命令，可以将现有端口或新端口附加到运行中的实例。
- en: 'The `openstack server add port` command can be used as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`openstack server add port`命令可以如下使用：'
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The port argument specifies the port to be attached to the given server. The
    port must be one that is not currently associated with any other instance or resource.
    Otherwise, the operation will fail.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: port参数指定要附加到给定服务器的端口。该端口必须是当前未与任何其他实例或资源关联的端口，否则操作将失败。
- en: 'The `openstack server add fixed ip` command can be used as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`openstack server add fixed ip`命令可以如下使用：'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The network argument specifies the network to be attached to the given server.
    A new port that has a unique MAC address and an IP from the specified network
    will be created automatically.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 网络参数指定要附加到给定服务器的网络。将自动创建一个具有唯一 MAC 地址和来自指定网络的 IP 地址的新端口。
- en: The `--fixed-ip-address` argument can be used to specify a particular IP address
    in the given network rather than relying on an automatic assignment from Neutron.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`--fixed-ip-address` 参数可用于指定给定网络中的特定 IP 地址，而不是依赖 Neutron 的自动分配。'
- en: While additional network interfaces may be added to running instances using
    hot-plug technology, the interfaces themselves may need to be configured within
    the operating system before they can be used. You may use the `dhclient` command
    to configure the newly-connected interface using DHCP or configure the interface
    file manually.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以使用热插拔技术将额外的网络接口添加到运行中的实例，但这些接口可能需要在操作系统中进行配置才能使用。您可以使用 `dhclient` 命令通过 DHCP
    配置新连接的接口，或手动配置接口文件。
- en: Detaching network interfaces
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分离网络接口
- en: 'To detach an interface from an instance, use the `openstack server remove port`
    or `openstack server remove fixed ip` commands, as shown here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要从实例中分离接口，使用 `openstack server remove port` 或 `openstack server remove fixed
    ip` 命令，如下所示：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Interfaces detached from instances are removed completely from the Neutron port
    database.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从实例中分离的接口将完全从 Neutron 端口数据库中移除。
- en: Take caution when removing interfaces from running instances, as it may cause
    unexpected behavior within the instance.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从正在运行的实例中移除接口时需要小心，因为这可能导致实例内出现意外行为。
- en: Exploring how instances get their addresses
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索实例如何获取其地址
- en: When a network is created and DHCP is enabled on a subnet within the network,
    the network is scheduled to one or more DHCP agents in the environment. In most
    environments, DHCP agents are configured on `controllers` or dedicated `network`
    nodes. In more advanced environments, such as those utilizing network segments
    and leaf/spine topologies, DHCP agents may be needed on `compute` nodes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建网络并在子网中启用 DHCP 时，该网络将调度到环境中的一个或多个 DHCP 代理。在大多数环境中，DHCP 代理配置在 `controllers`
    或专用的 `network` 节点上。在更高级的环境中，如使用网络段和叶/脊拓扑的环境中，DHCP 代理可能需要配置在 `compute` 节点上。
- en: A DHCP agent is responsible for creating a local network namespace that corresponds
    to each network that has been scheduled to that agent. An IP address is then configured
    on a virtual interface inside the namespace, along with a `dnsmasq` process that
    listens for DHCP requests on the network. If a `dnsmasq` process already exists
    for the network and a new subnet is added, the existing process is updated to
    support the additional subnet.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP 代理负责为每个已调度到该代理的网络创建一个本地网络命名空间。然后，在命名空间内的虚拟接口上配置一个 IP 地址，并运行一个 `dnsmasq`
    进程，监听网络上的 DHCP 请求。如果网络上已有一个 `dnsmasq` 进程并且添加了新子网，则会更新现有进程以支持该子网。
- en: When DHCP is not enabled on a subnet, a `dnsmasq` process is not spawned. An
    IP address is still associated with the Neutron port that corresponds to the interface
    within the instance, however. Without DHCP services, it is up to the user to manually
    configure the IP address on the interface within the guest operating system through
    a console connection.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当子网未启用 DHCP 时，`dnsmasq` 进程不会启动。尽管如此，IP 地址仍然与实例内接口对应的 Neutron 端口关联。然而，在没有 DHCP
    服务的情况下，用户必须通过控制台连接手动配置客户操作系统中接口的 IP 地址。
- en: 'Most instances rely on DHCP to obtain their associated IP address. DHCP follows
    the following stages:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数实例依赖 DHCP 获取关联的 IP 地址。DHCP 遵循以下阶段：
- en: A DHCP client sends a `DHCPDISCOVER` broadcast packet that requests IP information
    from a DHCP server.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP 客户端发送一个 `DHCPDISCOVER` 广播包，请求 DHCP 服务器提供 IP 信息。
- en: A DHCP server responds to the request with a `DHCPOFFER` packet. The packet
    contains the MAC address of the instance that makes the request, the IP address,
    the subnet mask, lease duration, and the IP address of the DHCP server. A Neutron
    network can be scheduled to multiple DHCP agents simultaneously, and each DHCP
    server may respond with a `DHCPOFFER` packet. However, the client will only accept
    the first one.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP 服务器响应请求，发送一个 `DHCPOFFER` 包。该包包含发出请求的实例的 MAC 地址、IP 地址、子网掩码、租期和 DHCP 服务器的
    IP 地址。一个 Neutron 网络可以同时调度到多个 DHCP 代理，每个 DHCP 服务器都可能响应一个 `DHCPOFFER` 包。然而，客户端只会接受第一个响应。
- en: In response to the offer, the DHCP client sends a `DHCPREQUEST` packet back
    to the DHCP server, requesting the offered address.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应提供时，DHCP 客户端会向 DHCP 服务器发送一个`DHCPREQUEST`数据包，申请所提供的地址。
- en: In response to the request, the DHCP server will issue a `DHCPACK` packet or
    acknowledgement packet to the instance. At this point, the IP configuration is
    complete. The DHCP server sends other DHCP options such as name servers, routes,
    and so on to the instance.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应请求时，DHCP 服务器会向实例发出一个`DHCPACK`数据包或确认数据包。此时，IP 配置已完成。DHCP 服务器还会向实例发送其他 DHCP
    选项，例如名称服务器、路由等。
- en: Network namespaces associated with DHCP servers are prefixed with `qdhcp`, followed
    by the entire network ID. DHCP namespaces will only reside on hosts running the
    `neutron-dhcp-agent` service. Even then, the network must be scheduled to the
    DHCP agent for the namespace to be created on that host. In this example, the
    DHCP agent runs on the `controller01` node.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与 DHCP 服务器相关联的网络命名空间以`qdhcp`为前缀，后跟完整的网络 ID。DHCP 命名空间仅存在于运行`neutron-dhcp-agent`服务的主机上。即便如此，网络必须被调度到
    DHCP 代理上，才能在该主机上创建命名空间。在此示例中，DHCP 代理运行在`controller01`节点上。
- en: 'To view a list of namespaces on the `controller01` node, use the `ip netns list`
    command that''s shown here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`controller01`节点上的命名空间列表，请使用如下命令：`ip netns list`
- en: '![](img/df747da2-8aea-46e2-b625-346260a53d5d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df747da2-8aea-46e2-b625-346260a53d5d.png)'
- en: 'The two namespaces listed in the output directly correspond to two networks
    for which a subnet exists and DHCP is enabled:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中列出的两个命名空间直接对应于存在子网并启用 DHCP 的两个网络：
- en: '![](img/4736f8c8-97d5-44f8-80ed-0a19c5af85b8.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4736f8c8-97d5-44f8-80ed-0a19c5af85b8.png)'
- en: 'An interface exists within the qdhcp namespace for the network MyVLANNetwork,
    which is used to connect the namespace to the virtual network infrastructure:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`qdhcp`命名空间内存在一个接口，用于连接命名空间和虚拟网络基础设施，适用于网络`MyVLANNetwork`：
- en: '![](img/1c8aa000-409b-4c15-a105-dd10ad620a97.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c8aa000-409b-4c15-a105-dd10ad620a97.png)'
- en: The interface `ns-6c15d7b8-87` within the namespace is one end of a `veth` interface.
    The IP address assigned to the `ns-6c15d7b8-87` interface, `192.168.206.2/24`,
    has been automatically assigned by Neutron and was procured from the subnet's
    allocation pool.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在命名空间内的接口`ns-6c15d7b8-87`是`veth`接口的一个端点。分配给`ns-6c15d7b8-87`接口的IP地址`192.168.206.2/24`已由
    Neutron 自动分配，并从子网的分配池中获取。
- en: 'When using the Linux bridge driver, the other end of the interface, known as
    the peer, is connected to a bridge that corresponds to the network and is represented
    by the `tap6c15d7b8-87` interface, as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Linux 桥接驱动时，接口的另一端，即对端，连接到与网络对应的桥接，并由`tap6c15d7b8-87`接口表示，如下截图所示：
- en: '![](img/adb87c6a-32ef-4b46-9fa7-0ed4058371ce.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/adb87c6a-32ef-4b46-9fa7-0ed4058371ce.png)'
- en: In the preceding screenshot, the bridge labeled `brq7745a4a9-68` corresponds
    to the network `MyFlatNetwork`, as evidenced by the `untagged` interface `eth2`
    connected to the bridge. The interface `tapd1848f67-2e` is the other end of the
    `veth` interface which is connected to the DHCP namespace for the network `MyFlatNetwork`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，标签为`brq7745a4a9-68`的桥接网络对应于网络`MyFlatNetwork`，通过连接到桥接的`untagged`接口`eth2`可以看出。接口`tapd1848f67-2e`是`veth`接口的另一端，连接到网络`MyFlatNetwork`的
    DHCP 命名空间。
- en: Watching the DHCP lease cycle
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察 DHCP 租约周期
- en: 'In this example, an instance will be created with the following characteristics:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，将创建一个具有以下特征的实例：
- en: 'Name: `TestInstance1`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`TestInstance1`
- en: 'Flavor: `tiny`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Flavor: `tiny`'
- en: 'Image: `cirros-0.4.0`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '镜像: `cirros-0.4.0`'
- en: Network: `MyVLANNetwork`
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络：`MyVLANNetwork`
- en: 'Compute Node: `compute01`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算节点：`compute01`
- en: 'The command to create the instance is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 创建实例的命令如下：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The tiny flavor may not exist in your environment, but can be created and defined
    with 1 vCPU, 1 MB RAM, and 1 GB disk.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 可能在你的环境中没有`tiny` flavor，但可以创建并定义其配置为 1 vCPU、1 MB 内存和 1 GB 硬盘。
- en: 'To observe the instance requesting a DHCP lease, start a packet capture within
    the DHCP network namespace that corresponds to the instance''s network using the
    following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要观察实例请求 DHCP 租约，可以使用以下命令在与实例网络对应的 DHCP 网络命名空间内启动数据包捕获：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As an instance starts up, it will send broadcast packets that will be answered
    by the DHCP server within the namespace:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例启动时，它会发送广播数据包，DHCP 服务器将在命名空间内对其进行响应：
- en: '![](img/1c2a1f42-9a1b-40a3-82e0-428e6e690cbf.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c2a1f42-9a1b-40a3-82e0-428e6e690cbf.png)'
- en: 'In the preceding screenshot, all four stages of the DHCP lease cycle can be
    observed. A similar output can be observed by performing the capture on the tap
    interface of the instance on the `compute` node:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，可以观察到DHCP租约周期的所有四个阶段。通过在`compute`节点的实例tap接口上执行捕获，也可以观察到类似的输出：
- en: '![](img/af5967ce-8b85-44fe-bd49-3d46fde58c35.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af5967ce-8b85-44fe-bd49-3d46fde58c35.png)'
- en: 'Using the `dhcpdump` utility, we can observe more verbose output of the DHCP
    lease cycle. To install `dhcpdump`, issue the following command on all nodes:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`dhcpdump`工具，我们可以观察到更详细的DHCP租约周期输出。要安装`dhcpdump`，在所有节点上执行以下命令：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Within the network namespace hosting the DHCP server for the `MyVLANNetwork`
    network, run `dhcpdump`, as shown here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在托管`MyVLANNetwork`网络的DHCP服务器的网络命名空间内，运行`dhcpdump`，如下所示：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As the client makes its initial DHCP request, you will see a `DHCPDISCOVER`
    broadcast packet:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端发出初始DHCP请求时，你将看到一个`DHCPDISCOVER`广播包：
- en: '![](img/7a817e4d-6fb2-41e6-b383-01adee525e0f.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a817e4d-6fb2-41e6-b383-01adee525e0f.png)'
- en: 'Then, the `DHCP` server will send a `DHCPOFFER` unicast packet directly to
    the instance:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`DHCP`服务器将直接向实例发送一个`DHCPOFFER`单播包：
- en: '![](img/09da7ac5-cf60-4cea-b5be-d98a3516876d.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09da7ac5-cf60-4cea-b5be-d98a3516876d.png)'
- en: 'Next, the client will send a `DHCPREQUEST` broadcast packet:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，客户端将发送一个`DHCPREQUEST`广播包：
- en: '![](img/cad43158-4284-4f8f-a199-0f68c1037ad8.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cad43158-4284-4f8f-a199-0f68c1037ad8.png)'
- en: 'Lastly, the DHCP server will acknowledge the request with a `DHCPACK` unicast
    packet:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，DHCP服务器将通过一个`DHCPACK`单播包确认请求：
- en: '![](img/cbd6712f-7a93-475c-9240-29962f5a362e.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbd6712f-7a93-475c-9240-29962f5a362e.png)'
- en: Troubleshooting DHCP
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排查DHCP问题
- en: If an instance is unable to procure its address from DHCP, it may be helpful
    to run a packet capture from various points in the network to see where the request
    or reply is failing.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实例无法从DHCP获取其地址，可能有助于从网络中的不同位置进行数据包捕获，以查看请求或回复失败的原因。
- en: 'Using `tcpdump` or `dhcpdump`, one can capture DHCP request and response packets
    on UDP ports `67` and `68` from the following locations:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tcpdump`或`dhcpdump`，可以从以下位置捕获在UDP端口`67`和`68`上的DHCP请求和响应数据包：
- en: Within the DHCP namespace
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DHCP命名空间内
- en: On the physical interface of the `network` and/or `compute` nodes
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`network`和/或`compute`节点的物理接口上
- en: On the tap interface of the instance
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实例的tap接口上
- en: Within the guest operating system via the console
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过控制台在客户操作系统中
- en: Further investigation may be required once the node or interface responsible
    for dropping traffic has been identified.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦识别出负责丢包的节点或接口，可能需要进一步调查。
- en: Exploring how instances retrieve their metadata
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索实例如何检索其元数据
- en: 'In [*Chapter 3*](bf508e37-ce8a-4116-89db-e8f8a6abf0f4.xhtml), *Installing Neutron*,
    we briefly covered the process of instances accessing metadata over the network:
    either through a proxy in the router namespace or the DHCP namespace. The latter
    is described in the following section.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](bf508e37-ce8a-4116-89db-e8f8a6abf0f4.xhtml)，《安装 Neutron》中，我们简要介绍了实例通过网络访问元数据的过程：通过路由器命名空间或DHCP命名空间的代理。后者将在以下部分中描述。
- en: The DHCP namespace
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DHCP命名空间
- en: 'Instances access metadata at [http://169.254.169.254](http://169.254.169.254),
    followed by a URI that corresponds to the version of metadata, which is usually
    `/latest`. When an instance is connected to a network that does not utilize a
    Neutron router as the gateway, the instance must learn how to reach the metadata
    service. This can be accomplished in a few different ways, including the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 实例通过[http://169.254.169.254](http://169.254.169.254)访问元数据，后跟与元数据版本对应的URI，通常是`/latest`。当实例连接到不使用Neutron路由器作为网关的网络时，实例必须学会如何访问元数据服务。可以通过以下几种方式来实现：
- en: Setting a route manually on the instance
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实例上手动设置路由
- en: Allowing DHCP to provide a route
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许DHCP提供路由
- en: 'When `enable_isolated_metadata` is set to `True` in the DHCP configuration
    file at `/etc/neutron/dhcp_agent.ini`, each DHCP namespace provides a proxy to
    the metadata service running on the `controller` node(s). The proxy service listens
    directly on port `80`, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当在DHCP配置文件`/etc/neutron/dhcp_agent.ini`中将`enable_isolated_metadata`设置为`True`时，每个DHCP命名空间会为运行在`controller`节点上的元数据服务提供代理。代理服务直接在端口`80`上监听，如下图所示：
- en: '![](img/c579967e-3cc1-47a4-9440-5b8eb585d3bd.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c579967e-3cc1-47a4-9440-5b8eb585d3bd.png)'
- en: 'Using the `ps` command within the namespace, you can see the process associated
    with this listener is the Neutron metadata proxy:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在命名空间中使用`ps`命令，您可以看到与此监听器相关的进程是 Neutron 元数据代理：
- en: '![](img/75dc329b-811f-4b21-8948-0c96cfc0a299.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75dc329b-811f-4b21-8948-0c96cfc0a299.png)'
- en: Adding a manual route to 169.254.169.254
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加到 169.254.169.254 的手动路由
- en: Before an instance can reach the metadata service in the DHCP namespace at `169.254.169.254`,
    a route must be configured to use the DHCP namespace interface as the next hop
    rather than at the default gateway of the instance.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例能够到达位于`169.254.169.254`的 DHCP 命名空间中的元数据服务之前，必须配置一条路由，使用 DHCP 命名空间接口作为下一跳，而不是实例的默认网关。
- en: 'Observe the IP addresses within the following DHCP namespace:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下 DHCP 命名空间中的 IP 地址：
- en: '![](img/43ee6750-ad7d-4551-8e30-433dad2e4893.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43ee6750-ad7d-4551-8e30-433dad2e4893.png)'
- en: '`169.254.169.254/16` has been automatically configured as a secondary address
    on the interface inside the namespace. To reach `169.254.169.254` from an instance
    in the `192.168.206.0/24` network, the following `ip route` command can be used
    within the guest instance that sets `192.168.206.2` as the next hop:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`169.254.169.254/16`已自动配置为命名空间内部接口的二级地址。要从`192.168.206.0/24`网络中的实例访问`169.254.169.254`，可以在来宾实例中使用以下`ip
    route`命令，设置`192.168.206.2`为下一跳：'
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: While this method works, the process of adding a route to each instance does
    not scale well, especially when multiple DHCP agents exist in the environment.
    A single network can be scheduled to multiple agents that, in turn, have their
    own respective namespaces and IP addresses in the same subnet. Users will need
    prior knowledge of the IP to use in their route statement, and the address is
    subject to change. Allowing DHCP to inject the route automatically is the recommended
    method that will be discussed in the next section.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法可行，但将路由添加到每个实例的过程并不具有良好的扩展性，特别是当环境中存在多个 DHCP 代理时。一个网络可以调度到多个代理，而这些代理又有各自的命名空间和
    IP 地址，且都在同一子网中。用户需要提前了解在其路由语句中使用的 IP 地址，而且该地址可能会发生变化。允许 DHCP 自动注入路由是推荐的方法，下一节将讨论这种方法。
- en: Using DHCP to inject the route
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 DHCP 注入路由
- en: When `enable_isolated_metadata` is set to `True` and the gateway for a subnet
    is not set or is not a Neutron router, the DHCP service is capable of injecting
    a route to the metadata service via the classless-static-route DHCP option, also
    known as option 121.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当`enable_isolated_metadata`设置为`True`并且子网的网关未设置或不是 Neutron 路由器时，DHCP 服务能够通过无类静态路由
    DHCP 选项（也称为选项 121）注入到元数据服务的路由。
- en: Possible DHCP options, including those leveraged by Neutron for various tasks,
    can be found on the IANA website at the following URL: [https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml](https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 包括 Neutron 在内的多种任务所使用的可能 DHCP 选项，可以在 IANA 网站的以下 URL 找到：[https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml](https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml)。
- en: 'Once an instance connected to a subnet with the mentioned characteristics has
    been created, observe the following routes passed to the instance via DHCP:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了连接到具有上述特征的子网的实例，观察通过 DHCP 传递给实例的以下路由：
- en: '![](img/0080bbae-451a-4b8a-bc45-9afcac7b1547.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0080bbae-451a-4b8a-bc45-9afcac7b1547.png)'
- en: The next hop address for the metadata route is the IP address of the DHCP server
    that responded to the initial DHCP request from the client. If there were multiple
    DHCP agents in the environment and the same network was scheduled to all of them,
    it is possible that the next hop address would vary between instances, as any
    of the DHCP servers could have responded to the request.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据路由的下一跳地址是响应客户端初始 DHCP 请求的 DHCP 服务器的 IP 地址。如果环境中有多个 DHCP 代理并且相同的网络被调度到它们所有人，那么每个实例的下一跳地址可能会有所不同，因为任何一个
    DHCP 服务器都可能响应该请求。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, I demonstrated how to attach instances to networks and mapped
    out the process of an instance obtaining its IP address from an OpenStack-managed
    DHCP server. I also showed you how an instance reaches out to the metadata service
    when connected to a VLAN provider network. The same examples in this chapter can
    be applied to any recent OpenStack cloud and many different network topologies.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我演示了如何将实例连接到网络，并阐述了实例从 OpenStack 管理的 DHCP 服务器获取其 IP 地址的过程。我还向您展示了当实例连接到
    VLAN 提供商网络时，如何访问元数据服务。本章中的相同示例可以应用于任何最近的 OpenStack 云以及许多不同的网络拓扑。
- en: 'For additional details on deployment scenarios based on provider networks,
    refer to the following upstream documentation for the Pike release of OpenStack
    at the following locations:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有关基于提供者网络的部署场景的更多详细信息，请参阅以下 OpenStack Pike 版本的上游文档，位置如下：
- en: '**Open vSwitch**: [https://docs.openstack.org/neutron/pike/admin/deploy-ovs-provider.html](https://docs.openstack.org/neutron/pike/admin/deploy-ovs-provider.html)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**Open vSwitch**：[https://docs.openstack.org/neutron/pike/admin/deploy-ovs-provider.html](https://docs.openstack.org/neutron/pike/admin/deploy-ovs-provider.html)'
- en: '**Linux bridge**:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux 桥接**：'
- en: '[https://docs.openstack.org/neutron/pike/admin/deploy-lb-provider.html](https://docs.openstack.org/neutron/pike/admin/deploy-lb-provider.html)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.openstack.org/neutron/pike/admin/deploy-lb-provider.html](https://docs.openstack.org/neutron/pike/admin/deploy-lb-provider.html)'
- en: In the next chapter, we will learn how to leverage Neutron security group functionality
    to provide network-level security to instances.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何利用 Neutron 安全组功能为实例提供网络级安全。
