- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Monitoring Azure Pipelines
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控 Azure Pipelines
- en: So far, we have learned about most of the building blocks that are required
    to use Azure Pipelines for CI/CD needs. By the end of this chapter, you will have
    the skills to understand the operational aspects of running build and release
    pipelines efficiently, using built-in capabilities to measure the healthiness
    of agents, ensure timely execution of jobs, and validate that applications are
    running without issues after deployment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了使用 Azure Pipelines 进行 CI/CD 所需的大多数构建模块。在本章结束时，你将具备理解如何高效运行构建和发布流水线的操作能力，利用内置功能来衡量代理的健康状况，确保作业按时执行，并验证应用程序在部署后能够顺利运行。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding monitoring concepts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解监控概念
- en: Monitoring pipeline tasks and their performance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控流水线任务及其性能
- en: Monitoring pipeline agents
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控流水线代理
- en: Measuring application quality with monitoring
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用监控来衡量应用程序质量
- en: But first, let’s cover a few of the technical requirements for this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们讨论一下本章的一些技术要求。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter, you will need to install the *Build Quality Checks
    by Microsoft* Marketplace extension. Similar to the previous chapter, search for
    the extension in the Visual Studio Marketplace and install it in your Azure DevOps
    organization. You can find the extension at [https://marketplace.visualstudio.com/items?itemName=mspremier.BuildQualityChecks](https://marketplace.visualstudio.com/items?itemName=mspremier.BuildQualityChecks).
    You can find the code for this chapter at [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch07](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch07).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，你需要安装 *Microsoft 提供的构建质量检查* Marketplace 扩展。与上一章类似，在 Visual Studio Marketplace
    中搜索该扩展，并将其安装到你的 Azure DevOps 组织中。你可以在[https://marketplace.visualstudio.com/items?itemName=mspremier.BuildQualityChecks](https://marketplace.visualstudio.com/items?itemName=mspremier.BuildQualityChecks)找到该扩展。在[https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch07](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch07)中可以找到本章的代码。
- en: Now that we have covered the technical requirements, let’s cover the monitoring
    concepts you should be familiar with when working with Azure Pipelines.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讲解了技术要求，接下来让我们讨论在使用 Azure Pipelines 时你应该熟悉的监控概念。
- en: Understanding monitoring concepts
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解监控概念
- en: 'When using Azure Pipelines, there are different key concepts to keep in mind
    when thinking about monitoring:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Azure Pipelines 时，有几个关键概念需要在考虑监控时牢记：
- en: '**Pipeline status**: This ensures that pipelines are always running and without
    issues while checking for failed builds, failed tests, or errors during deployments.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流水线状态**：确保流水线始终在运行且没有问题，同时检查是否有构建失败、测试失败或部署过程中出现错误。'
- en: '**Code quality metrics**: This involves verifying metrics such as code coverage,
    code complexity, and code smells to identify potential performance or functionality
    issues before deploying applications.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码质量指标**：这涉及验证代码覆盖率、代码复杂度和代码异味等指标，以便在部署应用程序之前发现潜在的性能或功能问题。'
- en: '**Security vulnerabilities**: This involves assessing and measuring security
    vulnerabilities in the application code, dependencies, or pipeline configuration.
    This helps ensure that the pipeline is secure and security risks are not introduced
    in the application.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全漏洞**：这涉及评估和衡量应用程序代码、依赖项或流水线配置中的安全漏洞。这样有助于确保流水线的安全性，并避免在应用程序中引入安全风险。'
- en: '**Resource utilization**: This helps ensure that the build and release pipelines
    are not consuming high CPU or the memory of agents or executing the pipelines
    for extended periods, which diminishes their ability to run other jobs.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源利用率**：这有助于确保构建和发布流水线不会过度消耗代理的 CPU 或内存，也不会让流水线执行过长时间，避免影响其运行其他作业的能力。'
- en: '**Deployment health**: This involves monitoring the deployed application to
    ensure it is running correctly and without connectivity, availability, or functionality
    issues.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署健康状况**：这涉及监控已部署的应用程序，确保其正确运行，并且没有连接性、可用性或功能问题。'
- en: '**Release cycle time**: This involves monitoring the release cycle time to
    ensure the application deployment time is occurring on time and any delays are
    identified and fixed as quickly as possible. The release cycle time is the duration
    it takes to release a new version of the application from its initial development
    phase to its deployment in production.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布周期时间**：这包括监控发布周期时间，确保应用程序部署按时进行，并且任何延迟都能被尽快识别和修复。发布周期时间是指从应用程序的初始开发阶段到其在生产环境中部署所需的时间。'
- en: These concepts are critical to minimize the **time to detect** (**TTD**), **time
    to mitigate** (**TTM**), and **time to remediate** (**TTR**) metrics, which are
    used in the industry to measure the ability to deliver applications promptly and
    fix/recover from any issues that might occur at any time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些概念对于最小化**检测时间**（**TTD**）、**缓解时间**（**TTM**）和**修复时间**（**TTR**）等度量至关重要，这些度量在行业中用来衡量按时交付应用程序以及修复/恢复任何可能发生的问题的能力。
- en: In this chapter, we will focus on a few of these concepts, starting with pipeline
    tasks and their performance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍这些概念中的一些，首先从管道任务及其性能开始。
- en: Monitoring pipeline tasks and their performance
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控管道任务及其性能
- en: 'In this section, we will cover two different approaches to monitoring tasks
    and performance:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍两种监控任务和性能的方法：
- en: Using the pipeline’s user interface
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用管道的用户界面
- en: Using dashboards
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用仪表盘
- en: Let’s dig into the user interface first.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先深入了解用户界面。
- en: Using the pipeline’s user interface
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用管道的用户界面
- en: 'Metrics about the **duration** of your pipeline, jobs, and tasks are available
    throughout the user interface to emphasize the importance of execution time, as
    can be seen in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 关于管道、任务和工作流的**持续时间**的度量信息可以在整个用户界面中找到，以强调执行时间的重要性，如下图所示：
- en: '![Figure 7.1 – Duration metrics in the pipeline summary](img/B18875_07_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 管道摘要中的持续时间度量](img/B18875_07_01.jpg)'
- en: Figure 7.1 – Duration metrics in the pipeline summary
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 管道摘要中的持续时间度量
- en: 'These duration metrics help you immediately understand the duration of the
    pipeline and all the jobs that are executed within it. You can click on each job
    and see the individual step duration to determine whether there are any tasks
    that you might need to review and improve in any way possible, as shown in the
    following figure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些持续时间度量帮助你立即了解管道及其中所有任务的执行时长。你可以点击每个任务并查看单独的步骤时长，以判断是否有需要你审查并改善的任务，如下图所示：
- en: '![Figure 7.2 – Duration metrics in jobs](img/B18875_07_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 任务中的持续时间度量](img/B18875_07_02.jpg)'
- en: Figure 7.2 – Duration metrics in jobs
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 任务中的持续时间度量
- en: You want to always make sure the total time of execution for a build or release
    pipeline is the smallest possible. This ensures you are shipping software faster
    and deploying faster to any environment. A time increase in your pipelines can
    indicate that an issue has been introduced by recent changes and that you should
    review each task’s execution time to determine whether the increase is expected
    and justified or whetheryou need to fix something.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你总是要确保构建或发布管道的总执行时间尽可能小。这可以确保你能够更快速地发布软件，并将其更快速地部署到任何环境中。管道中的时间增加可能表明最近的更改引入了问题，你应该审查每个任务的执行时间，以确定增加是否是预期的并且有理由的，或者是否需要修复某些内容。
- en: 'You can also see the total execution time of all your pipelines by clicking
    the **Pipelines** option in the navigation menu and switching to the **Runs**
    tab, as shown in the following figure. Alternatively, you can use the filter options
    (highlighted in the following screenshot) to find a specific run:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过点击导航菜单中的**Pipelines**选项并切换到**Runs**标签页，查看所有管道的总执行时间，如下图所示。或者，你也可以使用筛选选项（在下图中突出显示）来查找特定的运行：
- en: '![Figure 7.3 – Elapsed time of your pipelines](img/B18875_07_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 你的管道的经过时间](img/B18875_07_03.jpg)'
- en: Figure 7.3 – Elapsed time of your pipelines
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 你的管道的经过时间
- en: 'Looking at these metrics over time can become tedious. For this purpose, Azure
    Pipelines provides an **Analytics** view for each pipeline that you can access
    by clicking on the elements highlighted as *1*, *2*, and *3* in the following
    screenshots. First, navigate to **Pipelines**. From the list of recently run pipelines,
    select **UnitTests-YAML**:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间推移查看这些指标可能会变得乏味。为此，Azure Pipelines 为每个管道提供了一个**分析**视图，您可以通过点击以下截图中标记为*1*、*2*和*3*的元素来访问。首先，导航到**管道**。从最近运行的管道列表中，选择**UnitTests-YAML**：
- en: '![Figure 7.4 – List of all pipelines](img/B18875_07_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 所有管道的列表](img/B18875_07_04.jpg)'
- en: Figure 7.4 – List of all pipelines
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 所有管道的列表
- en: 'Next, open the **Analytics** tab:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开**分析**选项卡：
- en: '![Figure 7.5 – Accessing the pipeline’s Analytics view](img/B18875_07_05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 访问管道的分析视图](img/B18875_07_05.jpg)'
- en: Figure 7.5 – Accessing the pipeline’s Analytics view
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 访问管道的分析视图
- en: 'Once the **Analytics** view loads, as shown in the following screenshot, you
    have three different reports that provide insights into the pipeline:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了**分析**视图，如以下截图所示，您将看到三个不同的报告，它们提供了管道的见解：
- en: '![Figure 7.6 – Pipeline analytics reports](img/B18875_07_06.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 管道分析报告](img/B18875_07_06.jpg)'
- en: Figure 7.6 – Pipeline analytics reports
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 管道分析报告
- en: 'Each of the reports provides different information that is aggregated over
    time and can be filtered to show the last 7, 14, 30, or 180 days. As shown in
    the preceding screenshot, the following reports are provided:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每个报告提供不同的信息，这些信息是随时间聚合的，并且可以过滤以显示过去的7天、14天、30天或180天。如前面的截图所示，提供以下报告：
- en: '**Pipeline pass rate**: This reports the success or failure of the execution
    of the pipeline over time'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管道通过率**：此报告显示管道执行的成功或失败随时间的变化'
- en: '**Test pass rate**: This reports the results of unit tests over time, with
    the ability to show all possible test result outcomes, such as passed, failed,
    and inconclusive'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试通过率**：此报告显示单元测试随时间的结果，能够显示所有可能的测试结果，如通过、失败和未结论'
- en: '**Pipeline duration**: This reports the total pipeline duration over time and
    the top 10 steps by duration, as shown in the following screenshot:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管道持续时间**：此报告显示管道的总持续时间及按持续时间排序的前10个步骤，如以下截图所示：'
- en: '![Figure 7.7 – Pipeline duration report](img/B18875_07_07.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 管道持续时间报告](img/B18875_07_07.jpg)'
- en: Figure 7.7 – Pipeline duration report
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 管道持续时间报告
- en: You can use these reports to make sure your pipelines are healthy and executing
    promptly. Constant and frequent revision of these reports is recommended, say
    weekly, to ensure that nothing unexpected has been added that has a detrimental
    effect on the execution time of the pipelines.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这些报告来确保您的管道健康且及时执行。建议定期频繁地修订这些报告，例如每周一次，以确保没有意外添加任何对管道执行时间有不利影响的内容。
- en: Using dashboards
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用仪表板
- en: Another way to monitor your pipelines is available through the **Dashboards**
    feature in the Azure DevOps **Overview** section of every project. You can create
    custom dashboards using several available widgets that display different data
    points that are useful at the macro level for every team member with easy and
    quick access.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 监控管道的另一种方式是通过 Azure DevOps 项目概览部分的**仪表板**功能。您可以使用多个可用小部件创建自定义仪表板，这些小部件显示不同的数据点，这些数据点对每个团队成员在宏观层面上非常有用，并且可以轻松快捷地访问。
- en: 'Azure DevOps includes three out-of-the-box widgets for Azure Pipelines:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 包含三个开箱即用的 Azure Pipelines 小部件：
- en: '**Build history**, which adds a tile to show a histogram of builds indicating
    success or failure and a link to each of them'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建历史**，它添加了一个瓷砖，显示构建的直方图，指示成功或失败，并提供每个构建的链接'
- en: '**Deployment status**, which adds a tile that shows a combined view of the
    deployment status and test pass rate across multiple environments'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署状态**，它添加了一个瓷砖，显示多个环境中部署状态和测试通过率的综合视图'
- en: '**Release Pipeline Overview**, which adds a tile that allows you to view and
    track the status of a release pipeline'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布管道概览**，该功能添加了一个瓷砖，允许您查看和跟踪发布管道的状态'
- en: 'The following screenshot shows a custom dashboard named **Pipelines** that’s
    created with all the widgets that we just discussed, showing information from
    different pipelines:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个名为**管道**的自定义仪表板，其中包含我们刚才讨论的所有小部件，显示来自不同管道的信息：
- en: '![Figure 7.8 – Custom Pipelines dashboard with widgets](img/B18875_07_08.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – 带小部件的自定义管道仪表板](img/B18875_07_08.jpg)'
- en: Figure 7.8 – Custom Pipelines dashboard with widgets
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 带小部件的自定义管道仪表板
- en: You can learn more about the widget catalog that’s included out of the box at
    [https://learn.microsoft.com/en-us/azure/devops/report/dashboards/widget-catalog](https://learn.microsoft.com/en-us/azure/devops/report/dashboards/widget-catalog)
    and you can find more widgets by searching for them in the Visual Studio Marketplace
    at [https://marketplace.visualstudio.com/search?term=widgets&target=AzureDevOps](https://marketplace.visualstudio.com/search?term=widgets&target=AzureDevOps).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://learn.microsoft.com/en-us/azure/devops/report/dashboards/widget-catalog](https://learn.microsoft.com/en-us/azure/devops/report/dashboards/widget-catalog)了解更多关于默认提供的小部件目录，并且你可以通过在Visual
    Studio Marketplace中搜索它们来找到更多小部件，搜索链接为[https://marketplace.visualstudio.com/search?term=widgets&target=AzureDevOps](https://marketplace.visualstudio.com/search?term=widgets&target=AzureDevOps)。
- en: Important note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Another effective way to monitor your pipelines is via the **Azure Pipelines
    Microsoft Teams app** marketplace extension, which you can find in the marketplace
    catalog; upon clicking it, you will be taken to **Microsoft App Source** store.
    This application is a Teams app and is installed in your Teams tenant, which is
    outside the scope of this book. After you have installed it, you can configure
    subscriptions to the pipelines you want to get notified on pipeline status or
    approvals.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有效的监控管道的方式是通过**Azure Pipelines Microsoft Teams应用**市场扩展，你可以在市场目录中找到它；点击后，它将带你进入**Microsoft
    App Source**商店。此应用是一个Teams应用，并且会安装在你的Teams租户中，安装过程超出了本书的范围。安装完成后，你可以配置订阅，以便在管道状态或审批时收到通知。
- en: Now, let’s learn how to monitor pipeline agents.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何监控管道代理。
- en: Monitoring pipeline agents
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控管道代理
- en: 'In Azure DevOps, pipeline agents provide some general reporting capabilities.
    They can be accessed by clicking **Organization settings**:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure DevOps中，管道代理提供了一些通用的报告功能。你可以通过点击**组织设置**来访问它们：
- en: '![Figure 7.9 – Accessing Organization settings](img/B18875_07_09.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9 – 访问组织设置](img/B18875_07_09.jpg)'
- en: Figure 7.9 – Accessing Organization settings
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 访问组织设置
- en: 'Once you are inside **Organization settings**, you will have access to the
    **Agent pools** option in the navigation menu under the **Pipelines** section:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入**组织设置**，你就可以在导航菜单中的**管道**部分访问**代理池**选项：
- en: '![Figure 7.10 – Agent pools](img/B18875_07_10.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图7.10 – 代理池](img/B18875_07_10.jpg)'
- en: Figure 7.10 – Agent pools
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10 – 代理池
- en: Let’s walk through each of the available reports.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一了解可用的报告。
- en: Job runs
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作业运行
- en: 'You can use the **job runs report** for each agent pool, which will show a
    summary of the jobs that are being executed, including their ID, pipeline name,
    project, agent specification, when they were queued, wait time, and duration:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用每个代理池的**作业运行报告**，它将显示正在执行的作业的摘要，包括它们的ID、管道名称、项目、代理规格、排队时间、等待时间和持续时间：
- en: '![Figure 7.11 – Job reports in an agent pool](img/B18875_07_11.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图7.11 – 代理池中的作业报告](img/B18875_07_11.jpg)'
- en: Figure 7.11 – Job reports in an agent pool
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11 – 代理池中的作业报告
- en: One of the most relevant pieces of data in this report is **Wait time**, which
    is highlighted in the preceding screenshot. This is something to pay close attention
    to. If this number starts increasing between jobs, it can be an indicator that
    you need to purchase concurrency and add additional agents.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此报告中最相关的数据之一是**等待时间**，如前面的截图中所突出显示的。这是需要密切关注的指标。如果这个数字在作业之间开始增加，可能是需要购买并发性并添加额外代理的信号。
- en: We will cover how to purchase concurrency and the approaches to increase the
    number of agents later in this section. For now, let’s continue to review the
    available reports.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本节稍后会介绍如何购买并发性以及增加代理数量的方法。现在，让我们继续查看可用的报告。
- en: Agent status
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理状态
- en: In the agent pool details, you have an **Agents** tab, which gives you details
    about each agent that’s running, such as its name, availability, last run, current
    status, version, and the ability to enable/disable it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在代理池详情中，你会看到一个**代理**标签页，显示了每个正在运行的代理的详细信息，例如其名称、可用性、最后运行、当前状态、版本，并且可以启用/禁用它。
- en: 'The following screenshot shows an unavailable or **Offline** agent:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个不可用的或**离线**代理：
- en: '![Figure 7.12 – Agent pool with an offline agent](img/B18875_07_12.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图7.12 – 带离线代理的代理池](img/B18875_07_12.jpg)'
- en: Figure 7.12 – Agent pool with an offline agent
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12 – 带离线代理的代理池
- en: 'The following screenshot shows an available or **Online** agent:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个可用的或**在线**代理：
- en: '![Figure 7.13 – Agent pool with an online agent](img/B18875_07_13.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图7.13 – 带在线代理的代理池](img/B18875_07_13.jpg)'
- en: Figure 7.13 – Agent pool with an online agent
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 具有在线代理的代理池
- en: You must ensure that self-hosted agents are online and enabled when the agent
    pool is in use in your projects. Otherwise, pipeline jobs will be queued and never
    be executed if there are no agents available.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用代理池时，必须确保自托管的代理处于在线并启用状态。否则，如果没有可用的代理，管道作业将被排队并永远不会执行。
- en: Pro tip
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 专业提示
- en: Always set up the agent to run as a service. This leverages the service manager
    of the operating system to ensure the life cycle of the agent is handled accordingly.
    It also improves the experience when auto-upgrading the agent.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 始终设置代理作为服务运行。这将利用操作系统的服务管理器来确保代理的生命周期得到适当管理，同时在自动升级代理时也能改善体验。
- en: Agent jobs
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理作业
- en: 'From the previous agent status report, you also have access to the **Jobs**
    report for a specific agent, as shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的代理状态报告中，你还可以查看特定代理的**作业**报告，如下图所示：
- en: '![Figure 7.14 – Agent jobs report](img/B18875_07_14.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 代理作业报告](img/B18875_07_14.jpg)'
- en: Figure 7.14 – Agent jobs report
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 代理作业报告
- en: This is useful if you are trying to determine whether a specific agent is acting
    erratically or is having intermittent failures when running jobs. In this case,
    an agent version upgrade might be needed, dependencies tooling installed in the
    agent might need attention, or as a last resort, the agent should be removed along
    with the infrastructure where it is running and replaced with a new one.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于判断某个特定代理是否存在异常行为或在运行作业时偶尔失败非常有用。在这种情况下，可能需要对代理进行版本升级，检查是否需要在代理中安装依赖工具，或者作为最后的手段，应该移除该代理及其运行所在的基础设施，并用新的代理替换它。
- en: 'Now, let’s look at the most important report available for agent pools: analytics.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看代理池最重要的报告之一：分析报告。
- en: Analytics
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析报告
- en: 'The **Analytics** report allows us to understand aggregated usage of the agents
    in the pool over time with histograms indicating concurrency, queued jobs, and
    running jobs, as shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析**报告可以帮助我们了解代理池中代理的聚合使用情况，图表中显示了并发、排队作业和运行作业的情况，如下图所示：'
- en: '![Figure 7.15 – Analytics report on an Azure Pipelines agent pool](img/B18875_07_15.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – Azure Pipelines 代理池的分析报告](img/B18875_07_15.jpg)'
- en: Figure 7.15 – Analytics report on an Azure Pipelines agent pool
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – Azure Pipelines 代理池的分析报告
- en: You will notice that the report includes two histograms – one for **Public hosted
    concurrency** and one for **Private hosted concurrency**. The public one refers
    to the allowance available in Azure Pipelines for public projects, which is 10
    and cannot be changed. Similarly, the private one is for private projects, for
    which you can purchase additional parallel jobs at an additional cost or take
    advantage of a self-hosted pipeline agent that’s included with every Microsoft
    Visual Studio Enterprise subscription.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到该报告包含两个直方图——一个是**公共托管并发**，另一个是**私人托管并发**。公共并发指的是 Azure Pipelines 为公共项目提供的并发配额，默认为
    10，并且无法更改。类似地，私有并发是针对私有项目的，你可以额外购买并发作业，或者利用每个 Microsoft Visual Studio Enterprise
    订阅中包括的自托管管道代理。
- en: This report helps us understand when there is a need for more agents when multiple
    jobs are queued.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 该报告帮助我们了解何时需要更多代理，特别是当多个作业排队时。
- en: 'The infrequent occurrence of queued jobs could be ignored, but when they start
    happening often, we must consider the following aspects:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作业排队的情况不频繁出现，可以忽略它，但当这种情况变得越来越常见时，我们必须考虑以下方面：
- en: Purchasing concurrency
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买并发
- en: Increasing the available agents
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加可用代理
- en: Let’s talk about purchasing concurrency first.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先讨论购买并发。
- en: Purchasing concurrency
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 购买并发
- en: 'Adding concurrency to your agent pools applies to both Microsoft-hosted and
    self-hosted agents and the decision to increase it relies on your business need
    to not have wait times between job executions. This can be done by following these
    steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 向代理池添加并发适用于 Microsoft 托管和自托管代理，决定是否增加并发取决于你是否希望作业执行之间没有等待时间。这可以通过以下步骤实现：
- en: 'First, set up billing at the organization level, as shown in the following
    figure:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，按照下图所示，在组织层面设置账单：
- en: '![Figure 7.16 – Setting up billing for the Azure DevOps organization](img/B18875_07_16.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – 为 Azure DevOps 组织设置账单](img/B18875_07_16.jpg)'
- en: Figure 7.16 – Setting up billing for the Azure DevOps organization
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 为 Azure DevOps 组织设置账单
- en: 'Clicking on the **Set up billing** button will open a dialog where you can
    link your Azure DevOps organization with an Azure subscription, which is used
    to pay for services in Azure DevOps. If you have access to an Azure subscription,
    select it and click **Save**:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**设置计费**按钮将打开一个对话框，你可以在其中将你的 Azure DevOps 组织与 Azure 订阅关联，这个订阅用于支付 Azure DevOps
    中的服务费用。如果你有 Azure 订阅访问权限，选择它并点击**保存**：
- en: '![Figure 7.17 – Selecting an existing Azure subscription for billing](img/B18875_07_17.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 选择现有的 Azure 订阅用于计费](img/B18875_07_17.jpg)'
- en: Figure 7.17 – Selecting an existing Azure subscription for billing
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 选择现有的 Azure 订阅用于计费
- en: It is important to mention the Active Directory tenant you are logged in to
    is used to find Azure subscriptions you have access to and link them to the organization.
    You must be a member of **Project Collation Administrators Group** to complete
    this step.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的是，你登录的 Active Directory 租户用于查找你可以访问的 Azure 订阅并将其链接到组织。你必须是**项目汇总管理员组**的成员才能完成此步骤。
- en: 'If you do not have an Azure subscription available, you will see a message
    similar to the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有可用的 Azure 订阅，你将看到类似以下的消息：
- en: '![Figure 7.18 – Adding a new Azure subscription for billing](img/B18875_07_18.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – 为计费添加新的 Azure 订阅](img/B18875_07_18.jpg)'
- en: Figure 7.18 – Adding a new Azure subscription for billing
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – 为计费添加新的 Azure 订阅
- en: 'You can then click on the **New Azure subscription** button to complete the
    steps for creating a new subscription and provide credit card details to be billed
    for purchases. Once billing has been configured, you will be able to purchase
    concurrency by going to the **Parallel jobs** option under **Project Settings**.
    You can increase/decrease the number of parallel jobs as needed:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你可以点击**新建 Azure 订阅**按钮，完成创建新订阅的步骤，并提供信用卡信息用于购买的计费。一旦计费配置完成，你就可以通过进入**项目设置**中的**并行作业**选项来购买并发执行。你可以根据需要增加/减少并行作业的数量：
- en: '![Figure 7.19 – Purchasing parallel jobs](img/B18875_07_19.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19 – 购买并行作业](img/B18875_07_19.jpg)'
- en: Figure 7.19 – Purchasing parallel jobs
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – 购买并行作业
- en: Now that we know how to purchase concurrency, let’s talk about how to increase
    the number of available agents.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何购买并发执行，我们来讨论如何增加可用代理的数量。
- en: Increasing the available agents
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加可用代理
- en: In the case of Microsoft-hosted agents, purchasing additional concurrency is
    all that is needed to immediately gain the ability to execute multiple jobs since
    there is no infrastructure to manage.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于微软托管的代理来说，购买额外的并发执行就是立即获得执行多个作业的能力所需要的，因为无需管理基础设施。
- en: 'In the case of self-hosted agents, you have some options:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自托管代理，你有一些选项：
- en: One option was discussed in the *Setting up agent pools* section in [*Chapter
    1*](B18875_01.xhtml#_idTextAnchor014), and it requires manually adding one agent
    to an agent pool.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[*第一章*](B18875_01.xhtml#_idTextAnchor014)的*设置代理池*部分中讨论了一个选项，它需要手动将一个代理添加到代理池中。
- en: 'Another option is to use an **Azure virtual machine scale set** pool type,
    which is an option that becomes available when you add a new agent pool, as shown
    in the following screenshot. This type of agent pool automatically adds additional
    agents when the capacity is needed by monitoring the state of the current agents
    and the number of jobs in the queue every 5 minutes. You can configure the maximum
    number of agents and other parameters that control how each agent is handled within
    the pool:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个选项是使用**Azure 虚拟机规模集**池类型，这是一个在添加新代理池时可用的选项，如下图所示。这种类型的代理池会在需要时自动添加额外的代理，方法是每隔
    5 分钟监控当前代理的状态和队列中作业的数量。你可以配置最大代理数量以及其他控制每个代理在池中处理方式的参数：
- en: '![Figure 7.20 – Azure virtual machine scale set agent pool type](img/B18875_07_20.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20 – Azure 虚拟机规模集代理池类型](img/B18875_07_20.jpg)'
- en: Figure 7.20 – Azure virtual machine scale set agent pool type
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – Azure 虚拟机规模集代理池类型
- en: 'The **Azure virtual machine scale set** agent pool type is very useful for
    the following reasons:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure 虚拟机规模集**代理池类型对于以下原因非常有用：'
- en: When you need more resources, such as CPU and memory, for the jobs to execute
    than the Microsoft-hosted ones and you don’t want to manage the underlying infrastructure
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你需要更多资源（例如 CPU 和内存）来执行作业，而不是使用微软托管的代理且你又不想管理底层基础设施时
- en: To simplify how the base images of these agents are maintained or the need to
    reimage the agents after every job execution, which this agent pool type will
    handle gracefully
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了简化这些代理的基础镜像如何维护，或每次执行任务后是否需要重新镜像代理，代理池类型将优雅地处理这些问题。
- en: One last option to consider is running a **self-hosted agent** in Docker containers,
    which allows you to run within any container orchestrator, such as your own self-managed
    Kubernetes cluster or cloud-managed services such as **Azure Kubernetes Service**
    (**AKS**) and Amazon **Elastic Kubernetes Service** (**EKS**). In this case, you
    would need a custom implementation to scale the number of agents in and out based
    on the metrics available in the Azure DevOps REST API.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个需要考虑的选项是在 Docker 容器中运行**自托管代理**，这使你可以在任何容器编排器中运行，例如你自己的自管理 Kubernetes 集群或云托管服务，如**Azure
    Kubernetes Service**（**AKS**）和 Amazon **Elastic Kubernetes Service**（**EKS**）。在这种情况下，你需要一个自定义实现，以根据
    Azure DevOps REST API 中可用的指标来扩展代理的数量。
- en: Now that we’ve learned how to monitor job runs, agent status, and task performance
    and increase concurrency and the number of agents, let’s learn how to use monitoring
    in our pipelines.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经学会了如何监控作业运行、代理状态和任务性能，并增加并发和代理数量，让我们了解如何在管道中使用监控。
- en: Measuring application quality with monitoring
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用监控来衡量应用程序质量
- en: Azure Pipelines provides many capabilities to measure the success of your build
    and release pipelines. First, we’ll learn how to improve the success of unit test
    results by measuring code quality metrics.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Pipelines 提供了许多功能来衡量构建和发布管道的成功。首先，我们将学习如何通过衡量代码质量指标来提高单元测试结果的成功率。
- en: Code quality metrics
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码质量指标
- en: Putting together a comprehensive unit tests pipeline includes analyzing every
    data point produced by the unit test runner framework and the tasks used to execute
    them in the pipeline. However, typically, there are limitations in terms of the
    metrics that are used by the task to determine failures on something other than
    the actual unit tests that are executed.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个全面的单元测试管道包括分析单元测试运行框架产生的每个数据点以及在管道中执行这些任务的任务。然而，通常情况下，任务用来确定失败的指标存在局限性，除了实际执行的单元测试之外，其他因素可能也会被考虑在内。
- en: For example, consider a development team that recently added unit tests to a
    project that has been developed for years and they are simply starting to implement
    tests to automate and reduce the need for manual tests.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设一个开发团队最近为一个已经开发多年的项目添加了单元测试，并且他们只是开始实施测试以实现自动化，减少手动测试的需求。
- en: In this scenario, the general practice is to start with a small number of automated
    tests and work your way up to always increase that number of tests. The only way
    to enforce this within your pipelines is to continually monitor the unit test
    results and have an automated gate to evaluate this to ensure that the number
    is increased on every run.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，通用做法是从少量自动化测试开始，并逐步增加测试数量。强制执行这一点的唯一方法是持续监控单元测试结果，并设置自动化门禁进行评估，以确保每次运行时测试数量都会增加。
- en: 'Assuming you completed the previous chapter, the following task will accomplish
    this scenario by adding it to the end of the YAML file for the unit test build
    pipeline:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经完成了前一章，接下来的任务将通过将其添加到单元测试构建管道的 YAML 文件末尾来实现此场景：
- en: '[PRE0]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can find the complete file at https:[https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch07/azure-pipelines.yml](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch07/azure-pipelines.yml)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接找到完整文件：[https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch07/azure-pipelines.yml](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch07/azure-pipelines.yml)
- en: 'Let’s break this down to understand what this task does:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下，理解这个任务的作用：
- en: 'The `checkCoverage: true` option enables the policy that requires code coverage
    results to be present.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkCoverage: true` 选项启用需要代码覆盖率结果存在的策略。'
- en: 'Next, `coverageFailOption: ''build''` indicates the build will fail if code
    coverage is not increased when compared to the previous build.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '接下来，`coverageFailOption: ''build''` 表示如果与上次构建相比，代码覆盖率没有增加，构建将会失败。'
- en: '`coverageType: ''blocks''` indicates that analysis will be done over the number
    of blocks of code. Other options include `lines`, `branches`, and `custom`.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coverageType: ''blocks''` 表示分析将基于代码块的数量进行。其他选项包括 `lines`、`branches` 和 `custom`。'
- en: '`forceCoverageImprovement: true` will enforce that the value of the code coverage
    metric is always higher than that of the previous run.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`forceCoverageImprovement: true` 将强制要求代码覆盖率指标的值始终高于上次运行的值。'
- en: 'Finally, `coverageUpperTreshold: ''80''` is the upper threshold for code coverage
    improvements. Typically, you will not strive for 100% code coverage as this implies
    every single line of code has a test associated with it, and in very large applications,
    this might not be realistic as it would require more development time. Once this
    value is reached, there will be no more enforcement for improvement.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '最后，`coverageUpperTreshold: ''80''`是代码覆盖率提升的上限阈值。通常，你不会追求 100% 的代码覆盖率，因为这意味着每一行代码都有相关的测试，而在非常大的应用中，这可能不现实，因为这需要更多的开发时间。一旦达到此值，就不再强制要求进一步改进。'
- en: 'Adding this to the previously configured `UnitTests-YAML` pipeline and making
    no additional changes will result in a failed execution because no tests are being
    added to increase the code coverage metric:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到之前配置的`UnitTests-YAML`管道，并且不做额外的更改，将导致执行失败，因为没有添加测试来增加代码覆盖率指标：
- en: '![Figure 7.21 – Failing a build with quality checks](img/B18875_07_21.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21 – 质量检查失败的构建](img/B18875_07_21.jpg)'
- en: Figure 7.21 – Failing a build with quality checks
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21 – 质量检查失败的构建
- en: Now that we’ve learned how to use code quality metrics to enhance our pipelines,
    let’s see how we can improve deployments.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了如何使用代码质量指标来增强我们的管道，让我们看看如何改进部署。
- en: Deployment health
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署健康
- en: CI/CD allows you to automate every aspect of the deployment process, including
    validating the application in the target environment after it has been deployed.
    This scenario provides a mechanism to ensure that no human intervention is required
    to verify that a new version of an application is working as expected and no new
    errors or bugs have been introduced by the developers or the environment configuration.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 允许你自动化部署过程的每个方面，包括在应用部署后验证目标环境中的应用。这种场景提供了一种机制，确保不需要人工干预来验证新版本的应用是否按预期工作，且开发人员或环境配置未引入新的错误或漏洞。
- en: Let’s look at a simple scenario first. Here, we’ll consider the **Jenkins Artifacts**
    release pipeline that we discussed in the previous chapter, in which we deployed
    an artifact from a Jenkins job.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看一个简单的场景。在这里，我们将考虑上一章中讨论过的 **Jenkins Artifacts** 发布管道，其中我们从 Jenkins 作业中部署了一个构件。
- en: 'We didn’t explicitly add a step to verify that the `artifact.txt` file we expected
    was copied and made available to the agent. This can be addressed by adding a
    command-line task with a customized script, as shown in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有显式添加一个步骤来验证预期的`artifact.txt`文件是否已被复制并提供给代理。可以通过添加带有自定义脚本的命令行任务来解决这个问题，正如下面的截图所示：
- en: '![Figure 7.22 – Validating a task in a release pipeline](img/B18875_07_22.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.22 – 验证发布管道中的任务](img/B18875_07_22.jpg)'
- en: Figure 7.22 – Validating a task in a release pipeline
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22 – 验证发布管道中的任务
- en: The script shown in the preceding screenshot works for an Ubuntu agent and verifies
    whether the `artifact.txt` file in the `_PacktFamily` directory exists; otherwise,
    it will print a message indicating that the file was not found and will exit with
    a return code of `1`. This will be interpreted as an error since the task is always
    expecting a return code of `0` to succeed.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上面截图中的脚本适用于 Ubuntu 代理，并验证`_PacktFamily`目录中的`artifact.txt`文件是否存在；如果不存在，它将打印一条消息，指示文件未找到，并且将以返回代码`1`退出。由于任务始终期望返回代码`0`来表示成功，因此这将被视为一个错误。
- en: Let’s look at another scenario, say the deployment of a web application or Web
    API, for which you can write scripts that can issue an HTTP/HTTPS request to the
    application, wait for the response, and validate the response code and content.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看另一个场景，比如部署一个 Web 应用或 Web API，在这种情况下，你可以编写脚本，发出 HTTP/HTTPS 请求到应用，等待响应，并验证响应代码和内容。
- en: 'An even better scenario would be to use a UI-automated test framework and execute
    them as part of the release pipeline after the application has been deployed,
    just like the unit tests that we explored in the previous chapter. The following
    UI automated test frameworks are a few options to consider:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的场景是使用 UI 自动化测试框架，并在应用部署后将其作为发布管道的一部分执行，就像我们在上一章中探讨的单元测试一样。以下是一些可以考虑的 UI
    自动化测试框架：
- en: '**Open source**:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源**：'
- en: '**Appium**: [https://github.com/appium/appium](https://github.com/appium/appium)'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Appium**: [https://github.com/appium/appium](https://github.com/appium/appium)'
- en: '**Robot** **Framework**: [https://robotframework.org/](https://robotframework.org/)'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Robot** **Framework**: [https://robotframework.org/](https://robotframework.org/)'
- en: '**Selenium**: [https://www.selenium.dev/](https://www.selenium.dev/)'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selenium**: [https://www.selenium.dev/](https://www.selenium.dev/)'
- en: '**Third-party**:'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三方**：'
- en: '**Cypress**: [https://www.cypress.io/](https://www.cypress.io/)'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cypress**: [https://www.cypress.io/](https://www.cypress.io/)'
- en: '**Sauce** **Labs**: [https://saucelabs.com/](https://saucelabs.com/)'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sauce** **Labs**: [https://saucelabs.com/](https://saucelabs.com/)'
- en: '**Telerik Test** **Studio**: [https://www.telerik.com/teststudio](https://www.telerik.com/teststudio)'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Telerik Test** **Studio**: [https://www.telerik.com/teststudio](https://www.telerik.com/teststudio)'
- en: In more advanced scenarios, you can use **gates** in Azure Pipelines, which
    give you the ability to introduce automated points of control to evaluate conditions
    defined based on the task used. When using release pipelines, gates are available
    as pre-deployment and post-deployment conditions, but when using multi-stage pipelines
    with environments, gates are only available as post-conditions attached to the
    environment.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高级的场景中，您可以在 Azure Pipelines 中使用 **gates**，这使您能够引入自动化的控制点，根据所使用的任务评估已定义的条件。在使用发布管道时，gates
    可用作部署前和部署后的条件，但在使用带有环境的多阶段管道时，gates 仅作为附加到环境的后置条件可用。
- en: We’ll explore one of these deployment gates using Azure Monitor next.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过 Azure Monitor 探索其中一个部署 gate。
- en: Integration with Azure Monitor
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 Azure Monitor 的集成
- en: '**Azure Monitor** is a monitoring solution for collecting, analyzing, and responding
    to logs and metrics from cloud and on-premises environments. This can help you
    understand how your applications and services are performing and provide the ability
    to manually and programmatically respond to conditions that require attention
    to ensure said applications keep working as expected.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Monitor** 是一个用于收集、分析和响应来自云端和本地环境日志与指标的监控解决方案。这可以帮助你了解应用程序和服务的性能，并提供手动或程序化响应需要关注的条件的能力，确保这些应用程序按预期工作。'
- en: The integration capability in Azure Pipelines is provided via an `AzureMonitor`
    task, which allows you to query rules for active alerts and determine whether
    the deployment of a new version of an application has triggered new alerts.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Pipelines 中的集成功能是通过一个 `AzureMonitor` 任务提供的，它允许你查询活动警报的规则，并确定应用程序新版本的部署是否触发了新的警报。
- en: In this section, you will use a readily available template for release pipelines
    to easily configure the Azure Monitor task.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将使用一个现成的发布管道模板，轻松配置 Azure Monitor 任务。
- en: 'To do this, perform the following steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请执行以下步骤：
- en: 'Create a new release pipeline, as shown in the following screenshot:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的发布管道，如下图所示：
- en: '![Figure 7.23 – Creating a new release pipeline](img/B18875_07_23.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – 创建新的发布管道](img/B18875_07_23.jpg)'
- en: Figure 7.23 – Creating a new release pipeline
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – 创建新的发布管道
- en: 'Find the `monitor` in the search field and clicking on the **Apply** button:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索字段中找到 `monitor`，然后点击 **应用** 按钮：
- en: '![Figure 7.24 – Creating a new release pipeline from a template](img/B18875_07_24.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.24 – 从模板创建新的发布管道](img/B18875_07_24.jpg)'
- en: Figure 7.24 – Creating a new release pipeline from a template
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – 从模板创建新的发布管道
- en: 'You will end up with a stage, as shown in the following screenshot, where you
    must fill out the **App Service name**, **Resource Group name for Application
    Insights**, and **Application Insights resource** **name** fields:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将得到一个阶段，如下图所示，您必须填写 **App Service 名称**、**应用程序洞察的资源组名称** 和 **应用程序洞察资源** **名称**
    字段：
- en: '![Figure 7.25 – Azure App Service deployment with continuous monitoring](img/B18875_07_25.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.25 – 带有持续监控的 Azure App Service 部署](img/B18875_07_25.jpg)'
- en: Figure 7.25 – Azure App Service deployment with continuous monitoring
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25 – 带有持续监控的 Azure App Service 部署
- en: 'The most important step is the `Availability_$(Release.DefinitionName)`, `FailedRequests_$(Release.DefinitionName)`,
    `ServerResponseTime_$(Release.DefinitionName),` and `ServerExceptions_$(Release.DefinitionName)`
    with some default thresholds. You can use these defaults, adjust them, or create
    new alert definitions based on what is important for your application:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最重要的一步是设置 `Availability_$(Release.DefinitionName)`、`FailedRequests_$(Release.DefinitionName)`、`ServerResponseTime_$(Release.DefinitionName)`
    和 `ServerExceptions_$(Release.DefinitionName)`，并设定一些默认阈值。您可以使用这些默认值，调整它们，或者根据应用程序的需求创建新的警报定义：
- en: '![Figure 7.26 – Application Insights Alerts](img/B18875_07_26.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.26 – 应用洞察警报](img/B18875_07_26.jpg)'
- en: Figure 7.26 – Application Insights Alerts
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26 – 应用洞察警报
- en: 'With this stage configured, you can switch to the pipeline view and click **Post-deployment
    conditions** to configure the gates, which in this case should already have **Query
    Azure Monitor** **alerts** enabled:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好这个阶段后，你可以切换到管道视图并点击**部署后条件**来配置门控，在这种情况下，应该已经启用了**查询 Azure Monitor** **警报**：
- en: '![Figure 7.27 – Release pipeline post-deployment conditions in Stages](img/B18875_07_27.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.27 – 阶段中的发布管道部署后条件](img/B18875_07_27.jpg)'
- en: Figure 7.27 – Release pipeline post-deployment conditions in Stages
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27 – 阶段中的发布管道部署后条件
- en: 'You can then adjust many of the settings related to the deployment gate accordingly,
    including the required **Azure subscription** and **Resource group** name and
    particularly **The delay** **before evaluation**:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你可以根据需要调整与部署门控相关的许多设置，包括所需的**Azure 订阅**和**资源组**名称，尤其是**评估前的延迟**：
- en: '![Figure 7.28 – The Query Azure Monitor alerts gate](img/B18875_07_28.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.28 – 查询 Azure Monitor 警报门控](img/B18875_07_28.jpg)'
- en: Figure 7.28 – The Query Azure Monitor alerts gate
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.28 – 查询 Azure Monitor 警报门控
- en: 'With this in place, you can rely on Azure Pipelines to execute the gate after
    the deployment steps are completed to verify that the monitoring alerts have been
    configured and provide a visual indicator:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完成后，你可以依赖 Azure Pipelines 在部署步骤完成后执行门控，以验证监控警报是否已配置，并提供一个可视化指示器：
- en: '![Figure 7.29 – Successful release with deployment gates](img/B18875_07_29.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.29 – 使用部署门控的成功发布](img/B18875_07_29.jpg)'
- en: Figure 7.29 – Successful release with deployment gates
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29 – 使用部署门控的成功发布
- en: In a complete scenario, you would combine automated tests in this release pipeline
    to ensure that the monitoring alerts are evaluated based on the tests being executed
    against the recently deployed application.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在完整的场景中，你需要将自动化测试与此发布管道结合起来，确保监控警报基于对最近部署的应用程序执行的测试进行评估。
- en: 'Finally, you could use third-party application performance monitoring tools
    with the corresponding available marketplace extensions:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以使用与之相应的第三方应用性能监控工具，并通过相应的市场扩展进行配置：
- en: '**Dynatrace**: [https://marketplace.visualstudio.com/items?itemName=AlmaToolBoxCE.DynatraceIntegration](https://marketplace.visualstudio.com/items?itemName=AlmaToolBoxCE.DynatraceIntegration)'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dynatrace**: [https://marketplace.visualstudio.com/items?itemName=AlmaToolBoxCE.DynatraceIntegration](https://marketplace.visualstudio.com/items?itemName=AlmaToolBoxCE.DynatraceIntegration)'
- en: '**Datadog**: [https://marketplace.visualstudio.com/items?itemName=Datadog.datadog-monitors](https://marketplace.visualstudio.com/items?itemName=Datadog.datadog-monitors)'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Datadog**: [https://marketplace.visualstudio.com/items?itemName=Datadog.datadog-monitors](https://marketplace.visualstudio.com/items?itemName=Datadog.datadog-monitors)'
- en: Now that you’ve learned about deployment gates, we’ve come to the end of this
    chapter. Let’s summarize what we’ve learned so far.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了部署门控，我们已经进入本章的总结部分。让我们回顾一下到目前为止所学的内容。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about monitoring concepts to consider for your
    CI/CD projects and different ways to monitor your pipeline tasks, their performance,
    and how to build dashboards with graphical widgets to understand behavior over
    time and even integrate with a collaboration tool to get real-time notifications.
    You also learned how to monitor your job runs, task performance, and agents, when
    to purchase concurrency, and different options on how to increase the number of
    agents to ensure that pipelines execute promptly. Lastly, you learned how to measure
    quality in your pipelines by taking advantage of code quality metrics, application
    runtime checks, and application monitoring tools.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了关于在 CI/CD 项目中需要考虑的监控概念，以及如何监控你的管道任务、任务性能，如何使用图形小组件构建仪表板来理解随时间变化的行为，甚至如何与协作工具集成以获取实时通知。你还学习了如何监控作业运行、任务性能和代理，何时购买并发性，以及如何增加代理数量以确保管道及时执行。最后，你学习了如何通过利用代码质量指标、应用程序运行时检查和应用程序监控工具来衡量管道中的质量。
- en: In the next chapter, we are going to learn how to deploy infrastructure automatically
    with automation using Azure Pipelines.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 Azure Pipelines 自动化部署基础设施。
