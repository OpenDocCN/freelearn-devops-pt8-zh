- en: SQL in Azure - Azure SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft SQL Server is one of the most popular databases and is often the core
    of many popular applications. Thanks to Azure, we can skip the whole cluster setup,
    installation, and maintenance by using Azure SQL—a cloud version of SQL Server
    with the same features available. Thanks to flexible pricing, we can select whichever
    option we want when it comes to both performance and available features. We don't
    have to worry about geo-replication and storing backups either—all these functionalities
    can be easily configured and automated in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Differences between Microsoft SQL Server and Azure SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Azure SQL in the Azure portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security features of Azure SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling and monitor Azure SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform the exercises in this chapter, you will need:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differences between Microsoft SQL Server and Azure SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Microsoft SQL Server** is a well-known and widely used SQL database server
    that has gained much popularity and is considered a default choice for many projects
    ranging from very simple websites to enterprise-class services that handle high
    load and are considered critical for a business. As cloud technologies gain more
    and more popularity, the natural consequence of such a situation is the expectation
    that by moving an application to Azure, it is also possible to move its database.
    To meet such needs, Microsoft has developed Azure SQLService—a PaaS version of
    Microsoft SQL Server that is managed and upgraded by their teams; the only things
    you are responsible for are configuration and data management. There is also one
    more offering from Azure called SQL Server VMs, which is one more option for using
    this database in the cloud. In this section, we will focus on the differences
    between these two offerings and try to identify different use cases for them.'
  prefs: []
  type: TYPE_NORMAL
- en: Azure SQL fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using PaaS services in the cloud, you are shifting responsibilities a little
    bit:'
  prefs: []
  type: TYPE_NORMAL
- en: You are no longer the maintainer of the infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are no longer responsible for different updates when software is considered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By signing SLA with you, your provider is responsible for making sure that a
    service is up and running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instead, you should focus on the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Properly configuring a service, so it meets your performance targets and legal
    requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating different services and applications, so they reflect the best practices
    when it comes to communicating with a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing HA/DR scenarios, so an outage or disaster in one region does not
    impact your systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By using Microsoft SQL Server, you are fully on your/leased machines, which
    you have to maintain and monitor. While such a case is valid in many scenarios
    (as there can be some legal requirements that disallow you from storing data outside
    your own data center or simply, for some reason, Azure does not provide you with
    the expected performance you seek), yet in many situations, having a PaaS instance
    of your SQL database is a big improvement. In fact, you are given a few different
    options when using this service:'
  prefs: []
  type: TYPE_NORMAL
- en: A single database with isolated resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pooled database in an elastic pool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managed instance, which is the closest model when it comes to comparing it with
    on-premise SQL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The important thing to know is that all new features and updates are deployed
    to SQL databases hosted within Azure. This gives you an advantage in comparison
    with traditional Microsoft SQL Server, as you are always up to date: you do not
    have to schedule updates on your servers on your own.'
  prefs: []
  type: TYPE_NORMAL
- en: The more servers and databases you have, the more complicated and difficult
    the process of updating them becomes. Take that into account when comparing these
    two offerings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another crucial thing when talking about Azure SQLis its purchasing model.
    Currently, you have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DTU-based**: A DTU is a mix of computing, memory, and I/O resources that
    are given to your database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vCore-based**: This one simply allows you to select all things on your own
    (including the number of vCores, the amount of memory, and storage performance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may wonder how a DTU reflects the actual hardware; there is a good article
    that tries to explain these metrics a little bit in the *Further reading*section
    for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, using DTU as the metric is the better choice—very often it is
    hard to predict the exact hardware requirements for your application. Use the
    vCore-based model when you are an advanced SQL server user and know how many cores
    or memory you really need.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may wonder, What are the scaling capabilities of Azure SQLService? While
    of course you can assign more (or fewer) resources to your database, there are
    scenarios when this makes things much more complicated (or simply your application
    has different demands when it comes to database performance, and such a model
    simply will not work). To cover those situations, you are given the option to
    use elastic pools. The concept is pretty simple—normally you allocate resources
    to a single database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/215e67c3-8b87-471c-a2fb-c381f4d57b89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With elastic pools, you change the model a little bit and instead your pool
    has resources allocated, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a9f1c64-8fac-476d-bc59-39df5876e062.png)'
  prefs: []
  type: TYPE_IMG
- en: What does that change? Well, this gives you much more flexibility; instead of
    hosting a huge single database (when it comes to resources allocated), you can
    easily scale it out, so it can share the load with other instances. What is more,
    it gives you better control when it comes to costs; you can scale your databases
    at the same time without the need to control what their individual needs are.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling Azure SQLis an important topic that requires initially much attention—we
    will come back to it at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides performance and different scaling capabilities, Azure SQLgives you
    many additional features that are very important when considering it as storage
    for your data. Because an application without information stored in a database
    is, in most cases, useless, availability considerations are also very important
    here. Fortunately, Azure SQLhas implemented many great features that make it a
    full-fledged storage option:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatic backups**: In the on-premise world, configuring and managing backups
    is much more complicated, as it requires you to know the server configuration
    and find a place to store them. In Azure, things are greatly simplified by integrating
    automatic backups for Azure Storage for performance and reliability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geo-replication**: Even if a single region fails, you can still serve data
    for your customers. With Azure SQL,you can configure a secondary read region that
    will make sure you can stay online until an outage is resolved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Failover groups**: Instead of implementing failover capabilities and logic
    on your own, you can rely on what Azure SQLcurrently provides. This makes creating
    globally distributed applications much easier as you care only about the configuration
    and not infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To know exactly what is different in Azure SQLin comparison with Microsoft SQL
    Server, you can refer to the following link : [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-features](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-features).
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Azure SQL features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides some basic functionalities that ensure Azure SQLis a full version of
    a relational database on which you can rely and build your system, there are plenty
    of additional features that make using this service real fun:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatic monitoring and tuning**: How many times, after using a database
    for several months, have you ended up with a database full of outdated indexes,
    procedures, and functions? Azure SQLmakes things much easier by actively monitoring
    how you use and maintain your database and advising you whenever an improvement
    is possible. I find this feature extremely helpful—nowadays, when development
    is especially rapid and focused on delivering new values to the market, it is
    really easy to get lost and lose track of what should be removed from a database.
    With the service recommendations for dropping indexes, schema improvements, and
    queries parameterization, I find my storage in much better shape for most of the
    time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adaptive query processing**: While this feature is also available for SQL
    Server, having it in Azure SQLis a great addition to other performance recommendations.
    Basically, when it is enabled, the server engine tries to find the best execution
    plan for your queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security and compliance features**: It is really important to ensure that
    the data you store is secure and all vulnerabilities are detected as quickly as
    possible. In Azure SQL,you are given plenty of additional features that try to
    analyze your data in terms of sensitivity and compliance. There are in-built tools
    which search for any kind of anomalies and threats that could affect data integrity
    or lead to their leak. Additionally, Azure SQLis integrated with the Azure **Active
    Directory** (**AD**)and allows for **multi-factor authentication** (**MFA**)—this
    makes things such as auditing and authorization much easier without additional
    effort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security features for Azure SQLwill be described later in this chapter so
    you have the whole picture of this service's capabilities that matter.
  prefs: []
  type: TYPE_NORMAL
- en: SQL Server on VMs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you do not want to go full PaaS, you can create a virtual machine with a
    SQL Server image already in-built. In that option, the performance of the service
    will rely on the performance of the VM—if you find the database running low on
    CPU or memory, the only thing you have to do is to scale up the machine. To create
    a VM in the portal, you have to search for a SQL Server running on an OS of your
    choice, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3594814b-b8c4-485f-a9fa-d050ee553bc1.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are free SQL Server licenses available and what is more,
    newer versions can run on Linux machines. Once you select the image you are interested
    in, you can click on the Createbutton to begin the machine's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, there are many fields which have
    to be filled in to be able to actually use the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/155147a0-85a0-43c8-aec8-fd4f17b8de8f.png)'
  prefs: []
  type: TYPE_IMG
- en: This is, of course, related to the IaaS model of that way of hosting SQL Server
    inside Azure. The configuration wizard will advise you about the default size
    of the VM and other parameters required for the machine. Once the configuration
    is completed, you will be able to connect to it either via RDP or a secured SSH
    tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to open the `1433` port if you want to connect to SQL Server remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring Azure SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading the beginning of this chapter, you should be able to sense how Azure
    SQLworks and what it offers for you. While some theory is always a good thing,
    it is practice which creates the full picture and allows you to fully understand
    the topic. In this section, we will focus on creating and configuring Azure SQLin
    the portal and trying to identify all the afore mentioned features. You will also
    see how managing this PaaS service is different from the on-premise version, especially
    when it comes to using its features.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure SQL instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Azure portal, when you search for `Azure SQL`, you will see plenty of
    different options such as SQL Database, SQL server (logical server), or SQL Elastic
    database pool. While they all allow you to create a database, the easiest way
    to get started with the service is to use** SQL Database**—this will require creating
    a server nonetheless. In the following screenshot, you can find a configuration
    for my server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8042750-0e51-4897-bd82-c59edca12788.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following shows the configuration for my database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f01983c7-8f69-4bba-85cf-b8ab5e3eb9aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The important thing here is to select the source—you have three options here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Blank database: In most cases this will be the first option you are interested
    in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sample: I used it so I already have data inside my database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Backup: A great option if you want to provision a database from an available
    backup'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the Blank databaseoption, you will also have the possibility to select
    a collation; in that dropdown, select the option that is correct for your data.
    We will also focus a little bit on the pricing configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1731cfc8-9ddf-4d6c-9aa5-fe1c39f731ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, when using the DTU model, you have available three different
    tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic: For smaller workloads'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Standard: This offers the best balance between cost and performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Premium: For all workloads which require massive performance capabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Depending on the tier, you will be offered either a fixed DTU amount (for Basic)
    or you will have to select the amount you are interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2456e246-2c66-4024-94e5-d622d4be616d.png)'
  prefs: []
  type: TYPE_IMG
- en: The important thing here is the fact that most of your database costs are resources-allocated—remember
    to select the biggest database size you can (for example, in the Standardtier
    and with 400 DTU selected, there is no difference in the pricing between 100 MB
    and 250 GB).
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you can also switch between a DTU-based model and vCores selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bf3db10-3cd1-4c2c-85ea-86b1d6136673.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When using vCores, selecting the Max data sizedoes affect the pricing. What
    is more, here you have two different tiers available:'
  prefs: []
  type: TYPE_NORMAL
- en: 'General Purpose: The best choice for most common scenarios without specific
    needs when it comes to resiliency and traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Business Critical: This tier offers better performance and lower latency (and
    is significantly more expensive)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you are satisfied with your configuration, you can click on the Createbutton,
    so the provisioning process will start. When it is finished, you can access your
    resource by going to the Overviewblade where basic info is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e58e2d2-82d0-4081-bb9f-bf894aa5e4f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we will try to go through most of the features, so you will have a better
    understanding of how to work with this service.
  prefs: []
  type: TYPE_NORMAL
- en: Azure SQL features in the portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start with the Configureblade—when you click on it, you will see that
    it allows you to set both the tier and the pricing model of your database. This
    option is especially helpful when you want to improve the performance of your
    database; you can easily change the amount of DTU or vCores allocated for it,
    so it can work with queries much quicker.
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned before, configuring a single database will work for simpler scenarios,
    where you can easily monitor it and the performance requirements do not rapidly
    change. In all other cases, the better option is to use elastic pools.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you go to the Geo-Replicationblade, you will see a similar map to the
    one you saw when testing Azure Cosmos DB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db6fcc21-0bb2-4f2a-9c8b-51fd114222a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From this screen, you can quickly create a secondary region, which allows you
    to perform a failover when you need it. To do so, click on the region you are
    interested in and that will display the Create secondaryscreen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfda0160-901b-4a58-bed4-455216f39554.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will have to once more create a server (if there are none already available
    inside a region) and the pricing tier (which of course can be different for a
    secondary). Additionally, from this blade, you can enable a failover group for
    your database—to do so, click on the following panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87381cd7-54c1-400e-89d2-a8ed885adcdb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By implementing a failover group, you can introduce an automatic failover for
    your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6abd4abb-de30-4c08-a25d-3e312ad18cde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, if you want to perform a forced failover, you can click on the secondary
    database, which will display a screen that allows that operation to be performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/901f610e-3677-4d25-a3c9-8b052bc75b95.png)'
  prefs: []
  type: TYPE_IMG
- en: Remember that performing a failover can take some time to fully propagate—make
    sure you are ready for that.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you proceed to the Connection stringsblade, you will see a template for
    a connection string for different environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bfa7bcec-a788-4508-ac4a-f6599c77c9da.png)'
  prefs: []
  type: TYPE_IMG
- en: You will also be able to download different drivers for ADO.NET, JDBC, ODBC, or
    PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the service presents only a template for your connection string—you
    will have to set your username and password to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, we are exploring SQL Database in Azure—let''s check exactly what
    SQL Server looks like currently. You can find it by clicking on the server nameon
    the Overviewblade. Initially, the screen will look the same, but you will quickly
    realize that it offers many different features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d89b59fa-d40e-4392-b377-4ddad5fda1b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Unfortunately, we will not able to go through all of the features, but I will
    try to describe most of them for you. When we look at the Settingssection, we
    can see the following blades:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Failover groups: As discussed previously, to introduce automatic failover you
    have to create a failover group. A group consists of a primary and secondary server,
    which have a defined failover policy and grace period—a setting which defines
    the time between outage detection and the actual failover.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Manage Backups: To configure backups for your server (for example – enable
    LTR) you can access this blade. It also displays all available backups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Active Directory admin: It is possible to set an admin for your server using
    a user which is defined within your Active Directory users. Of course, you can
    set more than a single user for that—the trick is to use a group instead of an
    individual account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SQL databases: To quickly access a database that is served by this particular
    server, use this blade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SQL elastic pools: Similarly to SQL Databases, this blade displays available
    elastic pools. To create a new pool, go to the Overviewblade and click on the +
    New poolbutton.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deleted databases: Even if a database is removed from a service, you will still
    have a chance to restore it. In such a scenario, consult that blade for all databases
    available to be restored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Import/Export history: All import and export operations on your databases will
    be displayed here. This is a great auditing tool, so you will not miss a situation
    when somebody exported your data without notice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DTU quota: If you are interested in seeing the quota for DTU/vCores for your
    server, you can access this blade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to Azure SQLfeatures, there are multiple different options you
    can use to make your solution secure. Things such as firewalls, full operation
    auditing, and data encryption are the common capabilities of this service and
    are available even for the Basic tier. In this section, we will focus on learning
    the afore mentioned capabilities, so your instance is secured and immune to most
    threats.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When browsing your SQL Database, you probably noticed the Set server firewallbutton
    that is available on the Overviewblade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4d54771-0e24-49d0-875b-4331568d1214.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the easiest way to set a firewall rule that allows traffic to Azure
    SQL.
  prefs: []
  type: TYPE_NORMAL
- en: In Azure SQL, initially all traffic is rejected—you have to whitelist all IPs
    of computers that should be allowed to communicate with the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start configuring the firewall, you have to understand why we really
    need it. Here is what happens if I try to connect to my server using Microsoft
    SQL Server Management Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6542c90-eff9-48bc-a508-def5927147b5.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it automatically detects that my IP is not whitelisted, hence
    the server refuses to communicate with me. What we need here is to add a particular
    IP address, so the communication will be allowed.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, the only machines allowed to communicate by default with Azure SQLare
    those that are hosted within Azure. If you want to connect to the server from
    a local computer, you have to set up a firewall rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the portal, you can add the rule by clicking on the Set server firewallbutton—it
    will display a screen, where you can explicitly set an IP address that should
    be able to communicate with the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91bec3cc-ea73-4682-bcd2-f5c903db9a93.png)'
  prefs: []
  type: TYPE_IMG
- en: From this screen, you can also prevent the Azure service from communicating
    with your instance of Azure SQL. Additionally, you can add a virtual network here—thanks
    to that feature, you can create the whole ecosystem with your applications and
    databases, so they are protected from accessing it with a very strict set of rules.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Threat Protection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Advanced Threat Protection** (**ATP**) is an advanced feature of Azure SQL
    that by default is not enabled in the service. Currently, it allows for a free
    trial of 60 days, during which you can test whether this capability is for you.
    You can enable it usingthe **Advanced Threat Protection **blade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b1a105b-68cd-4c6f-9df0-a00f35620093.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it consists of three separate features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data Discovery & Classification: For analyzing data in terms of sensitivity
    and legal classification (for example—GDPR requirements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vulnerability Assessment: This checks your database for possible vulnerabilities
    using the best practices for SQL Server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Threat Detection: A feature which actively monitors your database for suspicious
    activities and logs them for you'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following, you can see how Azure SQLclassifies example data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d542c0a-ad79-4cf2-951d-eede011ccd4a.png)'
  prefs: []
  type: TYPE_IMG
- en: It turns out that it automatically detected the information type and declares
    its sensitivity label. Then it displays a summary, which gives you the overall
    picture of the shape of the data stored in a database.
  prefs: []
  type: TYPE_NORMAL
- en: This feature is a great tool for analyzing big databases for compliance with
    the new regulations—use it when in doubt as to whether you are storing some sensitive
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to Vulnerability Assesment, the following are the results of
    the example scans from my database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5da7dc0-7280-4abf-8285-607a4d562881.png)'
  prefs: []
  type: TYPE_IMG
- en: Once a scan is finished, you are given the result of a security check – it checks
    things such as data classification, whether auditing is enabled, or who can access
    data. If, for example, you have many users with a wide range of permissions assigned,
    there will be an alert raised for that. There are almost 50 rules checked during
    a scan, which is a great addition on top of all other security features.
  prefs: []
  type: TYPE_NORMAL
- en: Even more security guides can be found in the relevant link in the *Further
    reading*section.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to know exactly what happens inside your server, you have to enable
    auditing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb671657-f490-4cf9-9e54-e085215afff0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will log all operations within the selected storage (if, of course, you
    selected the Storage option). Currently, there are three different options for
    storing auditing logs:'
  prefs: []
  type: TYPE_NORMAL
- en: Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log Analytics (Preview)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event Hub (Preview)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While Storage is a little bit of a static option, you can use the remaining
    two for more dynamic integrations (especially when using Azure Event Hub). Once
    auditing is enabled, you can see all logged operations as well when you click
    on the View audit logsbutton:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91ba7367-9473-4104-9187-5f9621e5abf4.png)'
  prefs: []
  type: TYPE_IMG
- en: Dynamic Data Masking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes you want to allow somebody to read data inside a database, yet at
    the same time you do not want him or her to read more sensitive data (such as
    birth date, addresses, or surnames). In Azure SQL,there is a feature for that
    named Dynamic Data Masking:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0de07043-4768-410f-8cd6-035a7c9251ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two ways to add a mask—either use the recommendation or click on
    the + Add Maskbutton to add it manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b1de14c-c57a-402b-b18b-90f69b47b8c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What you will have to do select Schema, Table, Column, and the Mask field format—once
    you configure these and save the rule, users who are not administrators will see
    the masked values instead. The following shows the values for an admin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67982b94-b052-4ffc-bf57-d7fea3723322.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following shows the values for a user without admin rights:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/780566ac-f8f2-4f0d-b48b-9b254869c20b.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, `LastName`and `Email`are masked for a non-admin user, as planned.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling Azure SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The required performance of your database may differ depending on the time
    and current state of your application. This is when scaling is all-important—you
    can adjust cost and available resources depending on the needs of your service.
    In Azure SQL,there are multiple different scenarios that you will consider: whether
    you use a single database or an elastic pool, whether you need to scale out reads,
    or whether you need all features available everywhere. In this short section,
    I will show you how to quickly proceed with your decision and where you can find
    scaling tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Single database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned previously, with a single database scaling is really simple—you
    just need to go to the Configureblade and select the new tier you are interested
    in. You can easily decide whether you need to scale a database up by watching
    its performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61c51afb-81d1-4eba-a451-f6d6a4876e89.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see constant spikes or simply utilization of the database is becoming
    dangerously close to the maximum values, it is always a good decision to give
    it a few more DTUs or other resources.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can set alerts when utilization hits upper limits, so there are
    some ways to automate the process.
  prefs: []
  type: TYPE_NORMAL
- en: Elastic pool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With elastic pool enabled, things change a little bit—instead of operating
    on, for example, a DTU for a single database, you can select an elastic pool,
    which introduces a slightly different model of an elastic DTU:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b56616ee-2f0b-4018-aceb-33580235aa24.png)'
  prefs: []
  type: TYPE_IMG
- en: In that model, you scale your database using elastic pool configuration instead.
    For a single database, you will be able to only change the maximum data size available
    (which is also limited to the value set by the pool).
  prefs: []
  type: TYPE_NORMAL
- en: Read scale-out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you only need to scale reads for your database. Such a situation occurs
    when you would rather serve content than modify it (for example, you have a very
    popular portal that is managed from a single place but is served globally). In Azure
    SQL,there is a possibility to scale out only a part of the service—the one responsible
    for managing reads for you.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you need the Premium/Business Critical tier to get this feature working.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable read scale-out on your database, you can use the REST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Sharding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last way to scale your database is to use sharding. As opposed to elastic
    pools, by using sharding you allocate individual resources to each of your databases.
    It is also one of the models for horizontal scaling (so you rather provision another
    database than scale up your existing one).
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can use sharding also for elastic pools by using the Elastic Database
    split-merge tool: [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-scale-overview-split-and-merge](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-scale-overview-split-and-merge).
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, you will use sharding if you:'
  prefs: []
  type: TYPE_NORMAL
- en: Have too much data to be able to handle it with an individual instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Want to load-balance requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Want to geo-distribute your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The important thing here is the requirement that the data structure for each
    shard has to be the same. You can find the full documentation on sharding in Azure
    SQLin the *Further reading*section for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring and tuning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last item we cover in this chapter will be the monitoring and tuning of Azure
    SQL. Because databases are often the heart of many applications, it is crucial
    to have a quick way to diagnose any issues regarding performance or usage, and
    easily tweak things if needed. Azure SQLuses multiple different features that
    you can leverage to get insights from your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To monitor your SQL Database, you can use alerts, which should be familiar
    to you (assuming you have read the previous chapter, [Chapter 15](43da05ef-8416-4ff0-a983-b8a1665b2976.xhtml),
    *Using Application Insights to Monitor Your Applications*). You can access this
    functionality by clicking on the Alertsblade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d381f7c-4f73-458f-b7f9-c933d62d1fc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here you have two types of alert available:'
  prefs: []
  type: TYPE_NORMAL
- en: Add metric alert (classic)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add activity log alert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The way they work is a little bit different—a metric alertis based on values
    such as CPU percentage, deadlocks, or total database size while an activity log alertis
    triggeredwhenever an event occurs. You can use them both simultaneously to cover
    the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Insufficient performance (metric)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invalid queries (metric)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration issues (metric)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall service health (metric)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incoming maintenance activities (activity log)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actual service issues (activity log)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service health recommendations (activity log)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a whole group of features, called Intelligent Performance, which allow
    you to monitor and tune your SQL Database performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b7e568c-040f-4f6d-b5c9-bd0b7970d603.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check Performance recommendationsfor now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/613aa4fb-558b-46b0-9c2f-227cc8ec1cec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While initially this feature is empty, it displays different recommendations
    while working with Azure SQL**.**The important thing here is that we can automate
    things—just click on the Automatebutton to display another screen where you can
    select what you are interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f271aeb-9e5a-479d-819a-e0c6252ae278.png)'
  prefs: []
  type: TYPE_IMG
- en: This screen is, in fact, the Automatic tuningblade presented earlier. You can
    use it to automate things such as managing indexes or forcing a query plan.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure SQLis a very complex and extended service that works in a similar way
    to its on-premise version, Microsoft SQL Server. While being a full PaaS Azure
    component, it still allows for many advanced operations such as sharding, multi-tenancy,
    AD integration or failover, and geo-replication. Besides being hosted within a
    cloud, you can still use it in the same way you would a standalone version of
    SQL Server. In the next chapter, we will cover the last PaaS service mentioned
    in this book, which is Azure Data Lake Storage.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is different in terms of update policy between Azure SQLand Microsoft SQL
    Server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is sharding?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You created a new SQL Database in Azure SQL, but the server refuses to connect
    to it. What could be the issue here?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two available purchasing models for Azure SQL?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an elastic pool?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between DTU and eDTU?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you mask a particular field in Azure SQL?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What audit log destinations are available?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How to understand DTU: [https://sqlperformance.com/2017/03/azure/what-the-heck-is-a-dtu](https://sqlperformance.com/2017/03/azure/what-the-heck-is-a-dtu)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance recommendations: [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-advisor](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-advisor)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adaptive query processing:[https://docs.microsoft.com/pl-pl/sql/relational-databases/performance/adaptive-query-processing?view=sql-server-2017](https://docs.microsoft.com/pl-pl/sql/relational-databases/performance/adaptive-query-processing?view=sql-server-2017)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing SQL Database: [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-security-overview](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-security-overview)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read scale-out:[https://docs.microsoft.com/en-us/azure/sql-database/sql-database-read-scale-out](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-read-scale-out)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharding:[https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-scale-introduction](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-scale-introduction)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
