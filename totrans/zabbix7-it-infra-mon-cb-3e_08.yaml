- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up Zabbix Proxies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can’t preach about Zabbix without actually preaching about the use of Zabbix
    **proxies** – a nice addition at first, but a no-brainer by now. Anyone who’s
    expecting to set up a Zabbix environment of a medium/larger size will need proxies.
    The main reason to use proxies is scalability, as Zabbix proxies offload the data
    collection and preprocessing load from the Zabbix server. This way, we can scale
    up our Zabbix environment further and with greater ease. Furthermore, proxies
    can provide an additional layer of security by collecting data in a local network
    and then sending it to the Zabbix server, splitting your data collection access
    requirements between hosts instead of consolidating it on a single Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will first learn how to set up a Zabbix proxy. We will then
    learn how to work with passive and active Zabbix proxies, and also how to monitor
    hosts with either form of the Zabbix proxy. Zabbix 7 also introduces the possibility
    of adding proxies in a load-balancing pool together, which we will also discover
    in this chapter. We will also cover some Zabbix network discovery using the proxies,
    and we’ll learn how to monitor Zabbix proxies to keep them healthy. After these
    recipes, you’ll have no more excuses for not setting up the proxies, as we’ll
    cover most of the possible forms of proxy use in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s go through the following recipes and check out how to work with Zabbix
    proxies:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Zabbix proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with passive Zabbix proxies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with active Zabbix proxies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring hosts with a Zabbix proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting your Zabbix proxy connection with pre-shared keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Zabbix proxy load balancing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using discovery with Zabbix proxies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring your Zabbix proxies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to need several new Linux hosts for this chapter, as we’ll be building
    them as Zabbix proxies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up two proxies by installing your preferred RHEL-based or Ubuntu Linux
    distribution on the following two new hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lar-book-proxy-passive**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lar-book-proxy-active**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You’ll also need the Zabbix server, with at least one monitored host. We’ll
    be using the following new host to monitor with a Zabbix agent installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a Zabbix proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a Zabbix proxy can be quite daunting if you don’t have a lot of experience
    with Linux, but the task is quite simple once you get the hang of it. We will
    install a Zabbix proxy on our `lar-book-proxy-passive` server; you can repeat
    the task on `lar-book-proxy-active`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure to have a new empty Linux host, with your distribution of choice ready
    and installed. We won’t need our Zabbix server in this recipe yet.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start by logging in to the **command-line interface** (**CLI**) of our
    new **lar-book-proxy-passive** host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, execute the following command to add the Zabbix repository. For RHEL-based
    systems, use the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, install the Zabbix proxy by executing the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'RHEL-based systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ubuntu systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: On RHEL-based servers, don’t forget to set **Security-Enhanced Linux** (**SELinux**)
    to permissive or allow Zabbix proxy in SELinux for production. For lab environments,
    it is fine to set SELinux to permissive, but in production, I would recommend
    leaving it enabled. For Ubuntu systems, in a lab environment, we can disable AppArmor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, edit the Zabbix proxy configuration by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ProxyMode=1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the following line to your Zabbix server address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When working with a Zabbix server in **high availability** (**HA**), make sure
    to add the Zabbix server IP addresses here for every single node in your cluster.
    The proxy will only be sending data to the active node. Keep in mind that HA nodes
    are delimited by a semi-colon (**;**) instead of a comma (**,**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the following line to your proxy hostname:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: DBName=/tmp/zabbix_proxy.sqlite3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now enable the Zabbix proxy and start it with the following two commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should want to check that the Zabbix proxy logs are not showing any errors,
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three versions of Zabbix proxy to work with:'
  prefs: []
  type: TYPE_NORMAL
- en: '**zabbix-proxy-mysql**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**zabbix-proxy-pgsql**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**zabbix-proxy-sqlite3**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve just done the setup for the `zabbix-proxy-sqlite3` package, which is the
    easiest method if you ask me. The `sqlite3` version of Zabbix proxy makes it possible
    for us to set up a Zabbix proxy with great ease as we don’t actually need to worry
    too much about database setup and maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: Please do note that the `sqlite3` versions might not be suited to Zabbix proxies
    with a very high load as `sqlite3` cannot be further scaled up. You get more options
    to scale a `mysql` or `postgresql` database when using Zabbix proxy by the fine-tuning
    mechanisms available in those database types. However, since the idea behind proxies
    in most cases is dividing the load between proxies, I find it easier to add the
    SQLite3 proxy once my database has reached its capacity.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Always pick the right type of Zabbix proxy for what you expect to need in the
    future. Although it is easy to switch proxies later, don’t go too easy on this
    choice as you might save yourself hours in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'The amazing part about the `sqlite3` version is that if we run into database
    issues, it’s very easy to just remove the database by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With this, the `sqlite3` Zabbix proxy then automatically creates a new database
    on startup, and we’re all ready to start collecting again. Do note that we might
    lose some information that is in the proxy database though, which functions as
    a cache that might contain data still to be sent to Zabbix. If the data hasn’t
    been sent to Zabbix yet and you delete the database, that’s when you will lose
    the metrics still in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Zabbix 7, however, the proxy database concept has been changed slightly,
    by the addition of an in-memory cache. By default, proxies in Zabbix 7 will now
    run in one of three modes:'
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid (default for new installations)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disk (default for existing installations)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can adjust this setting by editing `ProxyBufferMode=` in the Zabbix proxy
    configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: This means that a Zabbix proxy will now buffer metrics to be sent in memory
    instead of in the database by default. This is only in the case that the Zabbix
    proxy memory cache is full with the proxy start buffering data to the database.
  prefs: []
  type: TYPE_NORMAL
- en: One last thing to keep in mind is that, in hybrid mode, we can still restart
    the Zabbix proxy safely; however, upon restarting, the Zabbix proxy process data
    will be flushed into the database. In memory mode, however, this is not the cache
    and data will be lost upon restarting the Zabbix proxy process.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'More information about installing Zabbix proxies can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/current/manual/installation/install_from_packages](https://www.zabbix.com/documentation/current/manual/installation/install_from_packages)'
  prefs: []
  type: TYPE_NORMAL
- en: Choose the distribution you are using, and you can find the guides for all the
    different variants of proxy installations.
  prefs: []
  type: TYPE_NORMAL
- en: Working with passive Zabbix proxies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have installed our Zabbix proxy in the previous recipe, we can start
    working with it. Let’s start by setting up our passive Zabbix proxy in the frontend
    and see what we can do with it from the start.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need the `lar-book-proxy-passive` host for this recipe ready and installed
    with Zabbix proxy. We will also be using our Zabbix server in this recipe again.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by logging in to our Zabbix frontend and navigating to **Administration**
    | **Proxies**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Administration | Proxies page, without proxies](img/B18275_08_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Administration | Proxies page, without proxies
  prefs: []
  type: TYPE_NORMAL
- en: Our **Proxies** page is where we do all frontend proxy-related configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add a new proxy with the blue **Create proxy** button in the top-right
    corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will show us to the **Create proxy** popup, where we will fill out the
    following information:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: "![Figure 8.2 – Administration | Proxies, Create proxy popup, lar-book-proxy-passive\uFEFF\
    ](img/B19803_08_02.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Administration | Proxies, Create proxy popup, lar-book-proxy-passive
  prefs: []
  type: TYPE_NORMAL
- en: 'Before clicking the blue **Add** button, let’s take a look at the **Encryption**
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Administration | Proxies, Create proxy popup Encryption tab,
    lar-book-proxy-passive](img/B19803_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Administration | Proxies, Create proxy popup Encryption tab, lar-book-proxy-passive
  prefs: []
  type: TYPE_NORMAL
- en: By default, **No encryption** is checked here, which we’ll address in another
    recipe. For now, leave it set to **No encryption**.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'A lot of valuable information is exchanged between Zabbix servers and Zabbix
    proxies. If you are working with insecure networks or just need an extra layer
    of security, use Zabbix proxy encryption. You can find more information on Zabbix
    encryption here: [https://www.zabbix.com/documentation/current/en/manual/encryption](https://www.zabbix.com/documentation/current/en/manual/encryption).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, there’s one more tab in our Zabbix proxy creation popup
    that we need to have a look at – **Timeouts**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Administration | Proxies, Create proxy popup Timeouts tab, lar-book-proxy-passive](img/B19803_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Administration | Proxies, Create proxy popup Timeouts tab, lar-book-proxy-passive
  prefs: []
  type: TYPE_NORMAL
- en: We won’t change anything on the **Timeouts** tab here, but since Zabbix 7, it
    is possible to override global timeouts for various types of item checks, allowing
    us to significantly tweak our Zabbix setup to avoid timeout performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the blue **Add** button, which will take us back to our proxy overview
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Last seen (age)** part of your newly added proxy should now show a time
    value, instead of **Never**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.5 – Administration | Proxies page, Last see\uFEFF\uFEFFn (age)](img/B19803_08_05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Administration | Proxies page, Last seen (age)
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding proxies isn’t the hardest task after we’ve already done the installation
    part. After the steps we took in this recipe, we are ready to start monitoring
    with this proxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The proxy we just added is a `10051`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Diagram showing an active proxy connection](img/B19803_08_06.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Diagram showing an active proxy connection
  prefs: []
  type: TYPE_NORMAL
- en: Once the passive proxy knows what to monitor, every time the Zabbix server polls
    for data, data is sent back within the same TCP connection. This means that the
    connection is always initiated from the Zabbix server side. Once it’s set up,
    the Zabbix server will keep sending configuration changes and it will keep polling
    for new data.
  prefs: []
  type: TYPE_NORMAL
- en: Working with active Zabbix proxies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now know how to install and add proxies. Let’s set up our active proxy, like
    we did with the passive proxy in the previous recipe, and see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need the `lar-book-proxy-active` host for this recipe, ready and installed
    with Zabbix proxy, as set up in the first recipe of this chapter. We will also
    be using our Zabbix server in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by logging in to our Zabbix frontend and navigating to **Administration**
    | **Proxies**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Administration | Proxies page, no active proxies](img/B18275_08_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Administration | Proxies page, no active proxies
  prefs: []
  type: TYPE_NORMAL
- en: Our **Proxies** page is where we do all configurations that are proxy related.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add a new proxy by clicking the blue **Create proxy** button in the top-right
    corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open the **Create proxy** popup, where we will fill out the following
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Administration | Proxies, Create proxy popup, lar-book-proxy-active](img/B19803_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Administration | Proxies, Create proxy popup, lar-book-proxy-active
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The **Proxy address** field is actually optional for our active proxy. You do
    not have to add this for the Zabbix proxy to function, but it is recommended to
    keep things clear. Adding the **Proxy address** field also functions as a sort
    of whitelist in this case, as only the IP address listed will be allowed to connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before clicking the blue **Add** button, let’s take a look at the **Encryption**
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Administration | Proxies, Create proxy popup Encryption tab,
    lar-book-proxy-active](img/B19803_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Administration | Proxies, Create proxy popup Encryption tab, lar-book-proxy-active
  prefs: []
  type: TYPE_NORMAL
- en: By default, **No encryption** is checked here, which we’ll leave be for this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, there’s one more tab in our Zabbix proxy creation popup
    that we need to have a look at – **Timeouts**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Administration | Proxies, Create proxy popup Timeouts tab,
    lar-book-proxy-passive](img/B19803_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Administration | Proxies, Create proxy popup Timeouts tab, lar-book-proxy-passive
  prefs: []
  type: TYPE_NORMAL
- en: We won’t change anything on the **Timeouts** tab here, but since Zabbix 7, it
    is possible to override global timeouts for various types of item checks, allowing
    us to significantly tweak our Zabbix setup to avoid timeout performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the blue **Add** button, which will take us back to the proxy overview
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to the CLI and check the configuration with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ProxyMode=0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the following line to your proxy hostname:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, restart the proxy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The **Last seen (age)** part of your newly added proxy should now show a time
    value, instead of **Never**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Administration | proxies page, Last seen (age)](img/B19803_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Administration | proxies page, Last seen (age)
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your setting in the proxy configuration file, the **Last seen (age)**
    part may take a while to change.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you followed the *Working with passive Zabbix proxies* recipe from this chapter,
    the steps are about the same, except for the part where we add the proxy mode.
  prefs: []
  type: TYPE_NORMAL
- en: The proxy we just added is an active proxy that works by requesting a configuration
    from the Zabbix server on port `10051`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Diagram showing an active proxy connection](img/B19803_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Diagram showing an active proxy connection
  prefs: []
  type: TYPE_NORMAL
- en: The Zabbix proxy keeps requesting configuration changes, and it keeps sending
    any newly collected data to the Zabbix server every second or it sends out a heartbeat
    if no data is available.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to use active Zabbix proxies, as we can use them to reduce
    the load on our Zabbix server. Use the passive proxy only when you have a good
    reason to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring hosts with Zabbix proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have our `active` and `passive` Zabbix proxies ready to use, so it’s now
    time to add some hosts to them. Setting up the Zabbix frontend to monitor hosts
    with Zabbix proxies works in about the same way as monitoring directly from the
    Zabbix server. The backend and design change completely though, which I’ll explain
    in the *How it works…* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have your `lar-book-proxy-passive` passive proxy and your `lar-book-proxy-active`
    active proxy ready by following all of the previous recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need your Zabbix server and at least two hosts to monitor. We
    will be using `lar-book-agent_snmp` and `lar-book-agent` in the example, but any
    host with an active and passive Zabbix agent will work.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll configure a host on both our active and our passive proxies to show you
    what the difference is between these two. Let’s start with the passive proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Passive proxy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start this recipe by logging in to our Zabbix frontend and navigating
    to **Data collection** | **Hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s add the host with the passive agent to our passive proxy. In my case,
    this is the `lar-book-agent_snmp` host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `lar-book-agent_snmp` host and change the `lar-book-proxy-passive`,
    as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Configuration | Hosts, Edit host page for host lar-book-agent_snmp](img/B19803_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Configuration | Hosts, Edit host page for host lar-book-agent_snmp
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the blue **Update** button. Our host will now be monitored by
    the Zabbix proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Due to the configuration update interval and the fact we just switched the monitoring
    source to a proxy, we can see the SNMP icon turn gray temporarily.
  prefs: []
  type: TYPE_NORMAL
- en: Active proxy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s do the same for our other **lar-book-agent** host by navigating back to
    **Data** **collection|** **Hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **lar-book-agent** host and change the **Monitored by proxy**
    field to **lar-book-proxy-active**, as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Configuration | Hosts, Edit host page for host lar-book-agent](img/B19803_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Configuration | Hosts, Edit host page for host lar-book-agent
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the blue **Update** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the CLI of our monitored Linux host, the **lar-book-agent** host, execute
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When working with an active Zabbix agent, we need to make sure to add the proxy
    IP address to the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our host will now be monitored by the Zabbix proxy once the proxy has received
    its new configuration data and the agent has executed the checks.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Monitoring hosts with a Zabbix proxy in passive or active mode works in the
    same way from the frontend. We merely configure which host is monitored by which
    proxy in our Zabbix frontend, and it will be done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at how our **Simple Network Management Protocol** (**SNMP**)
    agent is now monitored by the passive proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – A completely passive Zabbix setup with proxy](img/B19803_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – A completely passive Zabbix setup with proxy
  prefs: []
  type: TYPE_NORMAL
- en: Our passive Zabbix proxy now collects data from our SNMP agent, and after this
    is collected, the Zabbix server collects this data from our Zabbix proxy. Sounds
    like a whole process already, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at our active Zabbix proxy setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – A completely active Zabbix setup with proxy](img/B19803_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – A completely active Zabbix setup with proxy
  prefs: []
  type: TYPE_NORMAL
- en: Our active Zabbix proxy receives data from our active Zabbix agent and then
    sends this data to our Zabbix server. We’ve eliminated the part where the passive
    proxy is waiting to be polled in this proxy setup altogether. Furthermore, we
    only have to allow firewall connections going toward the proxy or server, meaning
    this could provide additional security.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some of the reasons I would always recommend working with active
    proxies – and even active agents – as much as possible. If we look at the following
    screenshot, we can see a setup that you might see at a company:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – An active Zabbix proxy setup with different monitored types](img/B19803_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – An active Zabbix proxy setup with different monitored types
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, we have the option of using a lot of different combinations of
    setups. It is perfectly possible – and even logical – to combine your checks from
    a proxy, just as much as it would be with a Zabbix server. We can monitor all
    types from our proxy, whether it’s a Zabbix agent, SNMP, or even **Java Management
    Extensions** (**JMX**) and the **Intelligent Platform Management** **Interface**
    (**IPMI**).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When designing a new Zabbix hosting infrastructure, start with adding proxies
    to your design if possible. This way, you don’t have to change a lot later. It’s
    easy to add and change proxies, but it’s harder to go from just using the Zabbix
    server to using Zabbix proxies in your design.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have a solid setup with some proxies up and running. We’ve figured out
    the difference between active and passive proxies and how they affect monitoring.
    But why would we build a setup like this? Well, Zabbix proxies are great for many
    environments – not just the big ones, but even sometimes in the smallest ones.
  prefs: []
  type: TYPE_NORMAL
- en: We can use Zabbix proxies to offload polling and preprocessing from our main
    Zabbix server, thus keeping the server clear for handling data such as when writing
    to the Zabbix database.
  prefs: []
  type: TYPE_NORMAL
- en: We can use Zabbix proxies to monitor offsite locations, such as when you’re
    a **managed service provider** (**MSP**) and want to monitor a customer network.
    We simply place a proxy on-site and monitor it. We can use industry-standard techniques
    such as monitoring through a **virtual private network** (**VPN**) or simply set
    up a connection using built-in Zabbix proxy encryption.
  prefs: []
  type: TYPE_NORMAL
- en: When the connection to the remote site goes down, our proxy will keep collecting
    data on-site and send this to our Zabbix server when the connection comes back
    up. By default, Zabbix will keep the data on disk for one hour, which is specified
    by the `ProxyOfflineBuffer=` parameter in the Zabbix proxy configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the Zabbix proxy to bypass firewall complications. When we place
    a proxy behind a firewall in a monitored network, we only need one firewall rule
    between the Zabbix server and the Zabbix proxy. Our Zabbix proxy then monitors
    the different hosts and sends the collected data in one stream to the Zabbix server.
    This means we don’t have to poke holes for ports `161`, `162`, `10050`, and `10051`,
    Java, API ports, and many more through our firewall.
  prefs: []
  type: TYPE_NORMAL
- en: With this, you have loads of options to use Zabbix proxies already.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check out this interesting blog post about some more cool hidden benefits of
    Zabbix proxies: [https://blog.zabbix.com/hidden-benefits-of-zabbix-proxy/9359/](https://blog.zabbix.com/hidden-benefits-of-zabbix-proxy/9359/).'
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting your Zabbix proxy connection with pre-shared keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For additional security, it’s recommended to make sure your Zabbix proxy is
    connecting over the network encrypted. The simple reason for this is to make sure
    that any possible intruder on your network cannot see all the data sent between
    the Zabbix server and Zabbix proxy from your network in plain text.
  prefs: []
  type: TYPE_NORMAL
- en: Image you have macros configured with important passwords. These macros will
    flow over the network in plain text if you do not encrypt the connection between
    the Zabbix server and proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need our Zabbix server and a connected proxy of either
    the passive or active type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started on the CLI of our proxy, where we need to make some configuration
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first, let’s edit the Zabbix proxy configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will find the following and edit the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`TLSConnect` is used for active proxy connections and `TLSAccept` is used for
    passive proxy connections. It is smart, however, to set both parameters at all
    times, as then we will always ensure an encrypted connection.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In the example, I’m setting the identity to the hostname of the proxy for simplicity’s
    sake. If the PSK identity and PSK itself are a unique combination every time,
    you can use anything though. *Do not* use the same PSK with a different identity,
    as this will result in errors and the proxy won’t connect.
  prefs: []
  type: TYPE_NORMAL
- en: Save your proxy configuration file and exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will create a new file, the `/etc/zabbix` folder, which contains the PSK.
    To do that, execute the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will create the file with the new pre-shared key. You can make sure it
    was created correctly with the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Created proxy PSK file](img/B19803_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – Created proxy PSK file
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s make sure only the Zabbix proxy can read this PSK file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '3. Restart your Zabbix proxy to make the changes take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 4. Now, it’s time to move on to the frontend. Navigate to **Administration**
    | **Proxies**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will probably see that the proxy is no longer connected and the **Last
    seen (age)** value is getting higher. Edit the proxy on which you are adding encryption
    and go to the encryption tab. For an active proxy, it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19 – lar-book-proxy-active PSK settings](img/B19803_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – lar-book-proxy-active PSK settings
  prefs: []
  type: TYPE_NORMAL
- en: For a passive proxy, make sure **Connections to proxy** is set to **PSK**, and
    for the active proxy, select **PSK** as the option we’d like to use for **Connections**
    **from proxy**.
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the **PSK identity** and **PSK** as set up in *Steps 2* and *6* of this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 5. Now, click on **Update** and your proxy should connect again.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After setting up your active or passive Zabbix proxy encryption, not much will
    change. Your proxy will still connect to or be connected from the Zabbix server.
    The thing that changes is that the Zabbix server and proxy will now use encryption
    when communicating with each other.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Encrypted proxies connections](img/B19803_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Encrypted proxies connections
  prefs: []
  type: TYPE_NORMAL
- en: The method we have used utilizes a pre-shared key-based encryption method. Although
    this provides a relatively safe method of adding encryption to these connections,
    there’s always the chance of a pre-shared key leaking somehow. Since a pre-shared
    key never expires, that would create a permanent hole in your security that only
    patches whenever you are going to change the pre-shared key. In practice, this
    is usually never.
  prefs: []
  type: TYPE_NORMAL
- en: One of the benefits of utilizing certificate-based encryption methods is that
    certificates expire. This does mean for an added layer of security, but at the
    same time it means that you will be regularly forced to update your encryption
    settings or risk losing the connection between the Zabbix proxy and server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Zabbix proxy load balancing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Long awaited and finally implemented, Zabbix has finally introduced proxy high
    availability and load balancing. This completes all the required functionality
    to truly make Zabbix a product that is highly reliable even in cases of outages.
  prefs: []
  type: TYPE_NORMAL
- en: It also means that Zabbix is now a lot easier to scale, utilizing the load balancing
    on proxies to divide the load between available proxies.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will utilize the active and passive proxy we’ve set up in
    earlier recipes in this chapter. Besides that, all we need is the Zabbix setup
    and a host to monitor for which we will use a Zabbix agent in active mode.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started on the frontend, where we should already have two (or more)
    Zabbix proxies available:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **Proxies** and make sure you have two proxies
    available. It does not matter what the proxy mode is, as we can combine active
    and passive proxies in proxy load balancing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.21 – Administration | Proxies page with the two proxies we will
    use for load balancing](img/B19803_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – Administration | Proxies page with the two proxies we will use
    for load balancing
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s navigate to **Administration** | **Proxy groups** to define our
    first proxy load balancing and high availability group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-right corner, click on the **Create proxy group** button. This will
    open the following pop-up window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.22 – Administration | Proxy groups, New proxy group popup](img/B19803_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 – Administration | Proxy groups, New proxy group popup
  prefs: []
  type: TYPE_NORMAL
- en: Here, we basically just have to give the proxy group a name and we will be done
    for now. Let’s name this group **lar-proxy-group**. Then, we can press the **Add**
    button to finish adding this proxy group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate back to **Administration** | **Proxies**, and let’s add our two
    proxies to the new proxy group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on a proxy and add it to the proxy group by filling in the **Proxy group**
    parameter or by using the **Select** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.23 – Administration | Proxies, add proxy group to a proxy](img/B19803_08_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.23 – Administration | Proxies, add proxy group to a proxy
  prefs: []
  type: TYPE_NORMAL
- en: Do this for all proxies we want to add to the group.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure to fill in the **Address for active agents** parameter as when
    we work with active agents, we’ll need to know where to connect to on each proxy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We’ll do the same for our second proxy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.24 – Administration | Proxies, add proxy group to a proxy](img/B19803_08_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.24 – Administration | Proxies, add proxy group to a proxy
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add a new host to be monitored by this proxy group. I will use a
    new host called **lar-book-proxyha-test**. When creating the host, make sure to
    add the **Proxy group** parameter like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.25 – Data collection | Hosts, Edit or create host popup window](img/B19803_08_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.25 – Data collection | Hosts, Edit or create host popup window
  prefs: []
  type: TYPE_NORMAL
- en: 'In the agent configuration file for the host we are adding, let’s change some
    parameters. If it’s a Linux host, edit the configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit the following two parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With two proxies active and configured as part of a proxy group and a host monitored
    by that proxy, we are now done and ready to load balance our hosts between the
    proxies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, proxy load balancing and high availability is a pretty straightforward
    setup and there’s not much complexity to work with. We simply add our proxies
    to a group and Zabbix will take care of the rest for us.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we’ve added two proxies to the group, an active and a passive proxy.
    These two proxies will now work together, load balancing the load of the hosts
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.26 – Our proxy group working normally](img/B19803_08_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.26 – Our proxy group working normally
  prefs: []
  type: TYPE_NORMAL
- en: Our active agent `lar-book-proxyha-test` host will connect to one of the two
    proxies on the defined IP address under the `ServerActive=` parameter. Because
    we entered **Address for active agents** under the proxy configuration in the
    Zabbix frontend, all the proxies in the proxy group also know the address for
    redirecting checks to in case load balancing needs to be done.
  prefs: []
  type: TYPE_NORMAL
- en: Our Zabbix proxy group will now make sure to load balance the hosts, even if
    they are in active mode. In case there is an outage, the proxy group will need
    to recalculate the load balancing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.27 – Our proxy group after an outage](img/B19803_08_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.27 – Our proxy group after an outage
  prefs: []
  type: TYPE_NORMAL
- en: The host will now be redirected to a different proxy in the proxy group for
    further monitoring. This is why we do not even need any floating IPs or virtual
    IPs to redirect active agent checks, as our proxies can take care of it for us.
  prefs: []
  type: TYPE_NORMAL
- en: Do keep the proxy parameters in mind, however, to make sure our proxy group
    is functioning optimally. If you have 4 proxies in a proxy group and set `1`,
    make sure to configure every single proxy in the group to be able to handle the
    full load of all hosts in the proxy group. Otherwise, your monitoring performance
    will still be compromised.
  prefs: []
  type: TYPE_NORMAL
- en: This is also true the other way around; if we have a proxy group of 4 proxies
    and we set `3`, the whole proxy group will go down if we lose just two proxies.
    Make sure to find the correct balance between the number of proxies in a group
    and the minimum proxies required for the group to handle the full load of monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.28 – Our proxy group settings](img/B19803_08_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.28 – Our proxy group settings
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we can change the **Failover period** value to determine how fast
    a failover needs to happen.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that if you’re working with certain other checks, you might need
    to do some additional configuration with things such as floating IPs or virtual
    IPs. For a check with SNMP traps, for example, you might need to send your traps
    to all proxies in a group if supported by your device, adding additional load
    to the network.
  prefs: []
  type: TYPE_NORMAL
- en: Using discovery with Zabbix proxies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B19803_07.xhtml#_idTextAnchor1318), *Using Discovery for Automatic
    Creation*, we talked about Zabbix and discovery. It is a very good idea to edit
    your discovery rules if you followed along with that chapter. Let’s see how this
    would work in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ll need to have finished [*Chapter 7*](B19803_07.xhtml#_idTextAnchor1318),
    *Using Discovery for Automatic Creation*, or have some discovery rules and active
    agent autoregistration set up.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll be using the `lar-book-lnx-agent-auto`, `lar-book-disc-lnx`, and `lar-book-disc-win`
    hosts in this example. We will also need our Zabbix server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with editing our discovery rule and then move on to editing our
    active agent to autoregister to the proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Discovery rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Starting with Zabbix discovery rules, let’s look at how to make sure we do
    this from the Zabbix proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the CLI of **lar-book-disc-lnx** and edit the **/etc/zabbix/ zabbix_agent2.conf**
    file. Edit the following lines to include our Zabbix proxy address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart your Zabbix agent by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, make sure to log in to **lar-book-disc-win** and edit the **C:\Program
    Files\Zabbix agent\zabbix_agent2** file. Edit the following lines to include our
    Zabbix proxy address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: On the **ServerActive** lines in our configuration files, make sure to only
    include the Zabbix proxy we want to send data to. The Zabbix agent will actively
    try to send data to all our Zabbix proxies or Zabbix servers listed here, so we
    should only list the one we want to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart your Zabbix agent by executing the following commands in the Windows
    command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Or, use the Windows **Services** window to restart the agent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, navigate to **Data collection** | **Hosts** and delete the discovered
    hosts:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We do this to prevent duplicate hosts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, navigate to **Data collection** | **Discovery**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Discover Zabbix Agent hosts** and change the **Discovered by proxy**
    field, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.29 – Alerts | Actions, Discovery Actions by proxy lar-book-proxy-active](img/8.29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.29 – Alerts | Actions, Discovery Actions by proxy lar-book-proxy-active
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button, and that’s all there is to editing your
    discovery rule to be monitored by a proxy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now check out your newly discovered hosts under **Configuration** |
    **Hosts** and see that they are monitored by the proxy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.30 – Data collection | Hosts page with our discovered ho\uFEFFsts](img/B19803_08_30.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.30 – Data collection | Hosts page with our discovered hosts
  prefs: []
  type: TYPE_NORMAL
- en: Active agent autoregistration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Moving on to active agent autoregistration, let’s see how we can do this from
    our Zabbix proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by navigating to `lar-book-lnx-agent-auto` host CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the Zabbix agent configuration file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to edit the following line to the Zabbix proxy address instead of
    the Zabbix server address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the Zabbix agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now see our host autoregister to the Zabbix proxy instead of the Zabbix
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.31 – Data collection | Hosts\uFEFF\uFEFF page with our two auto\
    \ \uFEFFregistered hosts](img/B19803_08_30.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.31 – Data collection | Hosts page with our two auto registered hosts
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Discovery with a Zabbix proxy works the same as discovery with a Zabbix server.
    The only thing that changes is the location of where we are registering to or
    discovering from.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about the process of discovery and autoregistration,
    check out [*Chapter 7*](B19803_07.xhtml#_idTextAnchor1318), *Using Discovery for
    Automatic Creation*, if you haven’t already.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring your Zabbix proxies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of Zabbix users – or even monitoring users in general – forget a very
    important part of their monitoring. They forget to monitor the monitoring infrastructure.
    I want to make sure that when you set up Zabbix proxies, you also know how to
    monitor the health of these proxies.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s check out how to do so in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need our new `lar-book-proxy-active` Zabbix proxy.
    We will also need our Zabbix server to monitor the Zabbix proxy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to build some monitoring in our Zabbix frontend, but we’ll also
    check the integrated monitoring options for Zabbix proxies. Let’s start by building
    our own.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the proxy with Zabbix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can monitor our Zabbix proxy with the Zabbix proxy itself to make sure we
    know exactly what’s going on:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by logging in to our **lar-book-proxy-active** Zabbix proxy CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Issue the following command to install Zabbix agent 2 for RHEL-based systems:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu, issue this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the Zabbix agent configuration file by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the following lines to point toward **localhost**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, make sure to add the hostname to the Zabbix agent file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, log in to the Zabbix frontend and navigate to **Data collection** | **Hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Create host** button in the top-right corner and add the
    following host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.32 – Data collection | Hosts, Create host popup, lar-book-proxy-active](img/B19803_08_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.32 – Data collection | Hosts, Create host popup, lar-book-proxy-active
  prefs: []
  type: TYPE_NORMAL
- en: Take extra care at the **Monitored by proxy** field – we want to monitor from
    the proxy because we are doing Zabbix internal checks, which need to be handled
    by the Zabbix daemon that received this configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before clicking the blue **Add** button, make sure to add **Templates**. Add
    the following templates to the host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.33 – Data collection | Hosts, Create host popup temp\uFEFFlates\
    \ for host lar-book-proxy-active](img/B19803_08_33.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.33 – Data collection | Hosts, Create host popup templates for host
    lar-book-proxy-active
  prefs: []
  type: TYPE_NORMAL
- en: We can now click the blue **Add** button to create the host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, navigate to **Monitoring** | **Latest data** and add the following filters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.34 – Monitoring | Latest data page with filters, host lar-book-proxy-active](img/B19803_08_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.34 – Monitoring | Latest data page with filters, host lar-book-proxy-active
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now see our Zabbix proxy statistics, such as the number of processed
    values and utilization of certain internal processes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.35 – Monitoring | Latest data page with data from our Zabbix proxy](img/B19803_08_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.35 – Monitoring | Latest data page with data from our Zabbix proxy
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the proxy remotely from our Zabbix server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also monitor our Zabbix proxy remotely from our Zabbix server, so, let’s
    see how that works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by logging in to our **lar-book-proxy-active** host CLI and editing
    the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the following lines to match your Zabbix server address (every node in
    a Zabbix server HA cluster):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, edit the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the following line to match your Zabbix server address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, navigate to the Zabbix frontend and go to **Data collection** | **Hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the blue **Create host** button in the top-right corner and add the
    following host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.36 – Data collection | Hosts, Create host po\uFEFFpup, lar-book-proxy-active_remotely](img/B19803_08_36.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.36 – Data collection | Hosts, Create host popup, lar-book-proxy-active_remotely
  prefs: []
  type: TYPE_NORMAL
- en: 'Before clicking the blue **Add** button, make sure to add the right **Templates**.
    Add the following templates to the host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.37 – Data collection | Hosts, create new host popup templates, lar-book-proxy-active_
    remotely](img/B19803_08_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.37 – Data collection | Hosts, create new host popup templates, lar-book-proxy-active_
    remotely
  prefs: []
  type: TYPE_NORMAL
- en: We can now click the blue `lar-book-proxy-active_remotely` host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Macros** and add the following two macros:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.38 – Data collection | Hosts, Edit host popup, Macros tab, lar-book-proxy-active_remotely](img/B19803_08_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.38 – Data collection | Hosts, Edit host popup, Macros tab, lar-book-proxy-active_remotely
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the blue **Update** button, and that’s it for this host.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we navigate to **Monitoring** | **Latest data** and check the items for
    this host, we can see data coming in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.39 – Monitoring | Latest data page for host lar-book-proxy-active_remotely](img/B19803_08_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.39 – Monitoring | Latest data page for host lar-book-proxy-active_remotely
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the proxy from the Zabbix frontend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start this off by navigating to **Administration** | **Queue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the drop-down menu to go to **Queue overview** **by proxy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.40 – Administration | Queue menu](img/B19803_08_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.40 – Administration | Queue menu
  prefs: []
  type: TYPE_NORMAL
- en: 'This will bring us to the page shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.41 – Administration | Queue overview by proxy page](img/B19803_08_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.41 – Administration | Queue overview by proxy page
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how this works in the next section of our recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Monitoring your Zabbix proxies is an important task, thus we need to make sure
    that whenever we add a new Zabbix proxy, we are taking care of it like we would
    any other host.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the proxy with Zabbix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By adding the Zabbix proxy as a host, we can make sure the Linux system that
    is running our Zabbix proxy is healthy. We also make sure that the Zabbix proxy
    applications running on this server are in good health.
  prefs: []
  type: TYPE_NORMAL
- en: Besides having the right triggers in these templates, we also get a load of
    options to troubleshoot issues with the Zabbix proxy.
  prefs: []
  type: TYPE_NORMAL
- en: The Zabbix proxy works just like the Zabbix server when it comes to monitoring.
    This means that just as with the Zabbix server, we need to keep the proxies in
    great health by tweaking the Zabbix proxy configuration file to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling your proxies becomes a lot easier once you figure out what’s going on
    with them. So, this is why we make sure to always monitor them. We monitor them
    from the proxy itself to make sure that we get the right information with the
    Zabbix internal checks.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the proxy remotely from our Zabbix server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, when we monitor with **Remote Zabbix proxy health**, things go a little
    differently. Instead of doing our checks from the Zabbix proxy itself, we do them
    remotely from the Zabbix server by defining the Zabbix proxy address and port
    in the macros. The Zabbix internal check type will still be used for this, executing
    the checks from the Zabbix server to the Zabbix proxy remotely in this case.
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, it is of course still recommended that we also keep our Zabbix
    agent running in either passive or active mode.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.42 – Zabbix agent running on Zabbix proxy monitored by Zabbix server](img/B19803_08_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.42 – Zabbix agent running on Zabbix proxy monitored by Zabbix server
  prefs: []
  type: TYPE_NORMAL
- en: This way, our Zabbix server is the one requesting and receiving information.
    Even when the proxy is having issues, the checks will still be done by the Zabbix
    server.
  prefs: []
  type: TYPE_NORMAL
- en: We can use this template as a way to keep a closer eye on our proxy if we suspect
    issues with internal checks being performed locally, or we can use this template
    to bypass certain firewall setups. Both are valid reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the proxy from the Zabbix frontend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From the frontend, we can use the **Administration** | **Queue** page to monitor
    our proxies. The Zabbix **Queue** page is an important page, but a lot of new
    users neither know nor fully utilize this page.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a part of Zabbix starts performing poorly, such as our example Zabbix
    proxy here, that’s when we can see stuff happening in the queue. There are six
    options on the Zabbix **Queue** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '**5 seconds**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**10 seconds**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**30 seconds**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1 minute**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**5 minutes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More than** **10 minutes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the options in the **Queue** mean is that the Zabbix proxy has been waiting
    on receiving a value that’s configured more than expected. I would state that
    anything up to one minute doesn’t necessarily have to be an issue, but this depends
    on the type of check. The **5 minutes** or **More than 10 minutes** options can
    mean serious performance issues with your Zabbix proxy, and you would have to
    troubleshoot this issue. Make sure to keep a good eye on the Zabbix queue when
    you suspect issues, which are also included as triggers in the templates we added
    to monitor our Zabbix proxies.
  prefs: []
  type: TYPE_NORMAL
