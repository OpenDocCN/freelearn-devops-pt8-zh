- en: Chapter 3. Creating and Managing Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presents a number of recipes that show you how to get started with
    application development using the rhc command-line client. You will learn how
    to create your own OpenShift application using a single command, how to use application
    management operations such as start, stop, and delete, how to set up your own
    domain name for your application, and how to track and roll back deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The specific recipes within this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an OpenShift application using the rhc command-line client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying your own template Git repository URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting/stopping/restarting an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and managing add-on cartridges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a cron cartridge to an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using downloadable cartridges with OpenShift applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing application details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning the application Git repository using rhc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH into the application gear using rhc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a command in the application's SSH session using rhc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting application-specific environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking and restoring application backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking and rolling back application deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the default Git branch for deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing manual deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and doing binary deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using your own custom domain name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenShift (or any other **Platform as a Service** (**PaaS**)) is based on one
    core principle, in that it should simplify the application life cycle management,
    including application scaling to help developers build their business applications
    faster. They all help developers achieve higher productivity by provisioning,
    managing, and scaling the infrastructure as well as application stack for them.
    It enables software developers to take their ideas, write code on the local machine,
    and then deploy the application to the cloud in minutes. PaaS can take you a long
    way without requiring much work by providing a good foundation to your next big
    business idea. PaaS can also help enforce best practices, such as continuous integration,
    in your application from inception. In addition, PaaS can also help you get quick
    feedback from the customer, and you can iterate faster.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift provides application developers all the services and tools required
    to develop and deploy their applications. Apps running on OpenShift can leverage
    their managed stack, and they do not require system admins to manage the underlying
    platform in order to keep their apps secure and reliable. OpenShift provides commands
    that can help application developers take backups of their applications periodically.
    To understand how application developers can take backups, refer to the *Taking
    and restoring application backups* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `rhc` command-line tool provides all the commands required to work with
    your application. To view all the application-related commands, open a command-line
    terminal and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will cover all these commands in this chapter, so stay tuned!
  prefs: []
  type: TYPE_NORMAL
- en: 'Every OpenShift application runs inside a gear, which is a container built
    using SELinux, Control Groups, and pam_namespace Linux technologies. Let''s look
    at all these technologies one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SELinux**:**SELinux** (**Security Enhanced Linux**) is a Linux kernel security
    module originally developed by the United States National Security Agency. OpenShift
    uses SELinux to achieve gear isolation and a hardened security layer around gears.
    This limits application gears from accessing parts of the system they should not
    access, such as the lower-level system and other application gears running on
    the same node. In a multitenant environment, such as OpenShift, this behavior
    is very important to ensure security and reliability when running multiple applications
    on the same infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control Groups**: OpenShift uses **Control Groups** (**cgroups**), a Linux
    kernel feature, to allocate resources such as CPU time, memory, bandwidth, or
    a combination of these resources among process groups. The amount of RAM and disk
    space a gear is allocated depends on the gear size. In the free tier, you only
    have access to small gears, which have 512 MB RAM and 1 GB of disk space. We will
    look at gear size in the *Creating an OpenShift application using the rhc command-line
    client* recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pam_namespace**: pam_namespace is used to allow each user or session to maintain
    its own namespace for directory structures, keeping them from being able to view
    or impede upon each other''s namespace. By using this, OpenShift is able to provide
    the `/tmp` directory to each gear.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A gear runs different software components (or cartridges) for your application.
    A cartridge is what makes a gear useful, that is, it provides the software components
    that an application might need. Every OpenShift application requires one web cartridge
    and can have zero or more add-on and downloadable cartridges. There are three
    types of cartridges:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web cartridge**: These are used to serve web requests. You can''t create
    an OpenShift application without a web cartridge. You have to specify the web
    cartridge at application creation time. They are available for Java, PHP, Python,
    Ruby, Node.js, and Perl, where you can list all the web cartridges by running
    the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Add-on cartridge**: These are additional cartridges provided by OpenShift.
    You can add them depending on your requirement, that is, if you need a database
    in your application, you will need to add the MySQL, PostgreSQL, or MongoDB add-on
    cartridge. You can list all the add-on cartridges by running the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Downloadable cartridge**: This enables developers to write their own cartridges.
    They can write their own cartridges and make them available via a public Git repository.
    These can then be installed using the rhc add-cartridge command. We will cover
    these in the *Using downloadable cartridges with OpenShift applications* recipe
    in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every OpenShift application has at least a private Git repository and web cartridge.
    It may have zero or more add-on cartridges, with the possibility of zero or more
    downloadable cartridges. An OpenShift application has built-in support for the
    Git version control system, automated dependency management, persistent data directory
    for file upload or storing other files, and deployment rollback.
  prefs: []
  type: TYPE_NORMAL
- en: An application can be a scalable or nonscalable application. A **scalable**
    application runs on multiple gears and scales horizontally depending on the number
    of concurrent users. We will look at scalable applications in [Chapter 11](part0131_split_000.html#page
    "Chapter 11. Logging and Scaling Your OpenShift Applications"), *Logging and Scaling
    Your OpenShift Applications*. In the current chapter, we will cover nonscalable
    applications. A **nonscalable application** runs inside a single gear, and all
    the cartridges are added to that gear. These are good for development purposes,
    but for production, high-traffic applications, you should consider scalable applications.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an OpenShift application using the rhc command-line client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to create an OpenShift application using
    rhc. We will create a PHP 5.4 application just for demonstration. This chapter
    will be language-agnostic and will only cover concepts that apply to all the application
    types. Different programming languages supported by OpenShift will be covered
    later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. Also,
    you should set up your OpenShift account using rhc by following the *Setting up
    an OpenShift account using rhc* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a PHP 5.4 OpenShift application named `myapp`, open a new command-line
    terminal and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also avoid typing the `--app` and `--type` options where OpenShift
    will automatically figure them out, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also write the command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: All the rhc commands can take either the `rhc <noun>-<verb>` or `rhc <verb>-<noun>`
    form.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go through all the steps performed by the `rhc create-app` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `rhc create-app` command requires two mandatory options:`--app` and `--type`.
    You are not required to pass these options with the command, but you are required
    to provide their values as shown in the `rhc create-app myapp php-5.4` command.
    These two options specify the application name and the web cartridge the application
    will use. The OpenShift server checks whether the application name and web cartridge
    name are correct. A valid application name must contain only alphanumeric characters
    and can be, at the most, 32 characters in length. You can view all the available
    web cartridges using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After making sure the application name and web cartridge name are correct, it
    will check whether sufficient gears are available in your domain to create an
    application. In the free tier, you only have access to three gears, so if you
    try to create an application after you have consumed all three, you will receive
    an error response. For example, if you have already created three applications
    and you try to create the fourth application, you will get the error response,
    `user has already reached the gear limit of 3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have sufficient resources to create an application, rhc will make a `HTTP
    POST` request to create an application. The rhc command-line client is a wrapper
    around the OpenShift REST API. The OpenShift server will receive the POST request
    and allocate a gear for your application. The amount of RAM and disk space a gear
    is allocated depends on the gear size. In the free tier, you only have access
    to small gears, which have 512 MB of RAM and 1 GB of disk space. If you are in
    the paid tier, you can specify bigger gear sizes with the `--gear` option. The
    valid values for `--gear` at the time of writing are small, medium, and large.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, OpenShift will install the web cartridge required by your application.
    In the application created previously, it will install the PHP 5.4 language runtime
    and Apache web server to serve your web requests and perform the required configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The OpenShift server will also create a private Git repository for your application.
    The Git repository will have a template application depending on the web cartridge
    type. You can specify your own template application using `--from-code`. This
    is covered in the next recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the application is created with all the required cartridges, the OpenShift
    server will create a public URL for your application and register it with the
    DNS. The public URL is a combination of the application name and the domain name.
    For the application created previously, the URL will be `http://myapp-osbook.rhcloud.com`.
    Here, `myapp` is the application name, and `osbook` is the domain name. You can
    also use your own custom domain name with OpenShift applications. This is covered
    in the *Using your own custom domain name* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the application DNS name is available, rhc will use the Git command-line
    to clone the application Git repository on your local machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, you will be shown the details of your application. You can view the
    running application at `http://myapp-{domain-name}.rhcloud.com/`. Please replace
    `{domain-name}`with your account domain name. An example is shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s look at the `myapp` application directory on your local machine. After
    the application is created, a directory with a name that is identical to the application
    name is created on your local machine. It houses the source code of the template
    application created by OpenShift, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at each of these components one by one as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.git` directory stores the Git repository of the `myapp` application.
    This directory contains the complete history of the repository. The `.git/config`
    file contains the configuration for the repository. The rhc command-line tool
    also adds the application-specific metadata to the `.git/config` file. The application-specific
    metadata is under the rhc section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `.openshift` directory stores OpenShift-specific files. The `.openshift`
    directory has three subdirectories—`action_hooks`, `cron`, and `markers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `action_hooks` directory stores the executable scripts, which gives application
    developers an entry point into various applications and platform life cycle operations.
    An example of using an action hook would be to send an e-mail after the application
    is deployed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `cron` directory stores the executable scripts, which can be scheduled to
    run periodically. We will cover this in detail in the *Adding a cron cartridge
    to an application* recipe later in this chapter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `markers` directory allows a user to specify settings such as hot deployment,
    debugging, and the version of Java to be used. As these settings are specific
    to web cartridges, we will cover them in detail in web-cartridge-specific chapters.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `index.php` file contains a simple PHP application that you see when you
    visit the application URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing this book, applications in the free tier will idle out
    after 24 hours of inactivity. Inactivity means no HTTP request has been made to
    your application URL from outside the gear. When idling, it takes a few seconds
    for the gear to wake up and start processing web requests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rhc` command-line tool will raise an exception if the application creation
    takes more than 120 seconds. To overcome errors related to timeout, you can specify
    the `--timeout` option as shown in the following code. The timeout value is in
    seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also configure the timeout in the `~/.openshift/express.conf` file,
    as shown in the following code. This will apply to all the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a WordPress application using the web console* recipe in [Chapter
    1](part0014_split_000.html#page "Chapter 1. Getting Started with OpenShift"),
    *Getting Started with OpenShift*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Specifying your own template Git repository URL* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a cron cartridge to an application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Viewing application details* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using your own custom domain name* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying your own template Git repository URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Creating an OpenShift application using the rhc command-line client*
    recipe, we created an application that used a template source code provided by
    OpenShift. Let's suppose you want OpenShift to use your Git repository to populate
    the initial contents of the application. This can be accomplished using the `--from-code`
    option at application creation time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. You should
    also complete the setup on your OpenShift account using rhc by following the *Setting
    up an OpenShift account using rhc* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an application that uses initial content from your own Git repository,
    use the`--from-code` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Git repository URL should be a public Git repository; otherwise, application
    creation will fail as OpenShift cannot access the repository.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create an OpenShift application using the `--from-code` option, the
    OpenShift server will first clone the Git repository provided with the `--from-code`
    option and then use that repository source code to populate the initial contents
    of the application. The Git repository URL should be a public Git repository;
    otherwise, OpenShift will not be able to clone the repository and will instead
    raise an exception. Following this, OpenShift will build the source code, create
    an artifact, and then deploy the artifact to the server. An artifact is a by-product
    produced during the development of software, for example, in the case of Java
    applications, it could be either a **Java Archive** (**JAR**), **Web Archive**
    (**WAR**), or **Enterprise Archive** (**EAR**) file.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous command, we created a JBoss EAP application that used a public
    Git repository URL as its initial code. After the application is successfully
    created, you can view the application running at `http://javaapp-{domain-name}.rhcloud.com/`.
    The application is a simple demonstration of the article extraction library called
    Boilerpipe (which you can access at [https://code.google.com/p/boilerpipe/](https://code.google.com/p/boilerpipe/)).
    It takes a URL and gives you the title and relevant text from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a WordPress application using the web console* recipe in [Chapter
    1](part0014_split_000.html#page "Chapter 1. Getting Started with OpenShift"),
    *Getting Started with OpenShift*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting/stopping/restarting an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The rhc command-line client provides commands to start, stop, and restart an
    application. In this recipe, you will learn how to perform these commands using
    rhc.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start an application, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop an application, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To restart an application, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `--app` option is not required if you are running the command from within
    the application Git repository. When you run the command within the repository,
    rhc will find the domain name and the application name from the `.git/config`
    Git repository configuration file. It uses the `git config --get rhc.domain-name`
    command to find the domain name and `git config –get rhc.app-name` to find the
    application name.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The rhc start/stop/restart app commands allow you to manage the application
    using rhc. The rhc client makes a POST HTTP request to stop the application, which
    stops the web and add-on cartridges. Every OpenShift gear has an executable called
    the `gear` available on it. When the server receives the POST request, it executes
    the `gear stop` command to stop the PHP 5.4 cartridge. After the application has
    successfully stopped, the `curl` request to the application URL will return a
    503 error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `rhc start-app` command makes a POST HTTP request to start the application.
    The OpenShift server will receive the POST request and invoke the `gear start`
    command on the application gear. The `gear start` command will first start all
    the add-on cartridges before starting the web cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: The `rhc restart-app` command first stops the application by invoking the `gear
    stop` command on the application gear, and then starts the application by calling
    the `gear start` command on the application gear.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rhc stop-app` command only stops the web and add-on cartridge processes,
    but if you want to kill all the processes running in your application gear, you
    should use the `rhc force-stop-app` command. This command will kill all the processes
    running inside the gear. This is very useful when people start running their own
    processes inside the application. In those cases, the rhc app-stop command will
    not help:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Viewing application details* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and managing add-on cartridges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Creating an OpenShift application using the rhc command-line client*
    recipe, you learned how to create a new OpenShift application using a web cartridge.
    Apart from web cartridges, OpenShift also supports a number of add-on cartridges.
    These cartridges provide functionalities, such as databases, monitoring, cron
    jobs, database web clients, and others.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to install the MySQL 5.5 cartridge to the
    PHP 5.4 application that you created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the MySQL 5.5 cartridge to our application, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to start a cartridge, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop a cartridge, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To restart a cartridge, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also view a cartridge status using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to remove a cartridge, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `--confirm` option is used to confirm the cartridge removal. If you don't
    specify the`--confirm` option, OpenShift will ask you to confirm your action.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the cartridge-specific commands are available under `rhc cartridge`. To
    view all the actions you can perform on a cartridge, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The `rhc` `cartridge-add` command makes an HTTP POST request to add the MySQL
    5.5 cartridge to the `myapp` application. The command-line tool runs within the
    context of the current directory of your command line and interacts with OpenShift
    REST API. This helps you to get away with specifying the application name using
    the `--app` option with every command. The server receives the POST request and
    installs the MySQL binary on the application gear. After successfully creating
    the application, you will receive the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the commands are self-explanatory, so they require little discussion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please be aware that the `rhc remove-cartridge` command is an irreversible action,
    and you *cannot* recover data after removing the cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also view the details of a cartridge using the `rhc cartridge` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Viewing application details* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a cron cartridge to an application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a cron cartridge to an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to add the cron add-on cartridge to your
    application. The cron cartridge will write the output of the `quota` command to
    a file every hour. The database and other cartridges will be covered later in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a cron cartridge to your application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new command-line terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new file `quota.txt` in the application root directory and populate
    it with the following code. On a *nix machine, you can use the `cat` command,
    as shown in the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On Windows machines, you can use filesystem explorer to create a new file. After
    creating the file, write `# Quota File` to it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After adding the cron cartridge, create a new file named `quota.sh` in the
    `.openshift/cron/hourly` folder, and add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the `quota.sh` script executable by running the following command. On
    *nix machines, you can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On Windows machines, you have to use the following command as the chmod command
    is not available on them:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `quota.sh` script to the Git repository, and then commit the changes
    to the local Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Push the changes to OpenShift service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the changes are deployed, you will see the quota information at `http://myapp-{domain-name}.rhcloud.com/quota.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every OpenShift application has a cron directory under the `.openshift` directory.
    This directory is used to define jobs that should run every minute, hourly, daily,
    weekly, or monthly. Cron jobs are not invoked until you add the cron cartridge
    to the application using the `rhc add-cartridge` command. They are useful to automatically
    perform tasks in the background at regular intervals. You can use them to take
    database backups, clean up log files, send e-mails, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 1, you added the cron cartridge to the `myapp` application. Next, in
    step 3, you defined a `quota.sh` bash script that should run every hour. The `quota.sh`
    script appends the date and quota information to the `quota.txt` file in the `php`
    directory under the OpenShift repository location. `$OPENSHIFT_REPO_DIR` is an
    environment variable that points to the location of the application source code
    directory. In step 4, you made the `quota.sh` script executable, without which
    the OpenShift service would not be able to execute the script. In the next three
    steps, you committed the change to the local Git repository and then pushed the
    changes to your application Git repository hosted on the OpenShift application
    gear. OpenShift will first stop the entire cartridge, build the application, deploy
    it to the Apache server, and then finally start all the cartridges. After the
    cron cartridge is started, it will write to the `quota.txt` file every hour. You
    can view the quota details by going to `http://myapp-{domain-name}.rhcloud.com/quota.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default timeout for a cron job is 5 minutes, which means that your job should
    be complete within 5 minutes, or else it will be terminated.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run longer jobs in the background using `nohup`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenShift currently only supports scheduling jobs every minute, or at hourly,
    daily, weekly, or monthly intervals. To run a job at a specific time or specific
    intervals, such as running a daily job at 8:30 PM, create a job that runs every
    minute, and then add the following code. This job will execute itself only when
    the time is 8:30 PM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using downloadable cartridges with OpenShift applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use a third-party downloadable cartridge
    with OpenShift applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the Monit downloadable cartridge, use the `rhc add-cartridge` command
    as shown in the following command. Please replace `email@address.com` with your
    valid email address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `--env` option is used to set the environment variable required by this
    cartridge. The cartridge required the `MONIT_ALERT_EMAIL` environment variable,
    which is used to configure e-mail that would be used to send alert notifications.
    Environment variables will be covered in detail in the *Setting application-specific
    environment variables* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install a third-party downloadable cartridge to your application, you need
    to provide the rhc command-line client with the URL to its manifest file called
    `manifest.yml`. This file exists under the `metadata` directory in the cartridge
    source repository, and contains a URL pointing to the actual contents of the cartridge.
    The list of actively maintained third-party cartridges can be found at [https://www.openshift.com/developers/download-cartridges](https://www.openshift.com/developers/download-cartridges).
    Another good way to find downloadable cartridges is to search GitHub ([https://github.com/search?q=%22openshift+cartridge%22](https://github.com/search?q=%22openshift+cartridge%22)),
    as most cartridges are hosted on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can later remove the cartridge by running the `rhc remove-cartridge` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and managing add-on cartridges* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a cron cartridge to an application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing application details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to view all the details related to an application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rhc show-app` command can be used to view the information details about
    the application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `--app` option is not required if you are running the command within the
    application Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rhc show-app` command returns all the details about an application. The
    output of the command is shown as follows. The details include the application
    creation time, application name, public URL, Git repository URL, SSH URL, and
    details about all the cartridges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also view the state of the application by passing in the `--state`
    option, as shown in the following command. The valid application states are `started`,
    `stopped`, and `building`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'If you only want to view the SSH information and state of all the gears in
    the application, you can use the `--gears` option with the `rhc app-show` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The previous command is very useful when you are working with scalable applications,
    as it provides you with information about all the application gears with a single
    command.
  prefs: []
  type: TYPE_NORMAL
- en: See more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Cloning the application Git repository using rhc* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning the application Git repository using rhc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Cloning the application to the local machine* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*,
    you learned how to clone the Git repository using the Git command-line tool. This
    recipe had a couple of steps—first, to copy the Git repository URL from the web
    console and second, to use the `git-clone` command to clone the Git repository.
    The rhc command-line tool can help you save some keystrokes. In this recipe, you
    will learn how to use rhc to clone the Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will use the OpenShift application created in The *Creating an OpenShift application
    using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To clone the `myapp` application on your local machine using rhc, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `rhc git-clone` command first makes a HTTP GET request to fetch the details
    about the `myapp` application. The application details include the Git repository
    URL. The `rhc git-clone` command then uses the `git clone <GIT_REPOSITORY_URL>`
    command to clone the application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rhc git-clone` command requires Git to be installed on your machine to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also tell the `rhc git-clone` command to clone the repository to a
    specific directory using the `--repo` option. The following command will clone
    the repository inside the `tmp/myapp` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: See more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Cloning the application to the local machine* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH into the application gear using rhc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use rhc to SSH into the application gear.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to complete this recipe, you will need rhc installed on your machine.
    Also, you will need to make use of the OpenShift application created in The *Creating
    an OpenShift application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To SSH into the application gear, open a new command-line terminal and run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The `--app` option is not required if you are running the command within the
    application Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every OpenShift application gear acts and behaves like a virtual server that
    you can access using SSH. A gear is assigned a unique user ID and is associated
    with a SELinux context. When you run the `rhc ssh` command, a secure communication
    channel is opened between the node hosting the gear and the local machine where
    you are presented with a limited shell within the environment, as shown in the
    following command. I have removed part of the output for brevity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the `ls` command, you will only see all the directories available
    under your application user home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the SSH connection will timeout after 5 minutes of inactivity,
    and you will be logged out of the SSH session. You can turn off connection timeout
    by unsetting the TMOUT environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If other people access your machine and you don't want them to access your OpenShift
    application by just typing the `rhc ssh` command, I would recommend you use the
    SSH key passphrase to restrict access. We discussed SSH key passphrases in the
    *Working with the SSH key passphrases* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*.
  prefs: []
  type: TYPE_NORMAL
- en: See more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Uploading SSH keys using the web console* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with the SSH key passphrases* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a command in the application's SSH session using rhc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to view the gear directory listing without
    performing SSH into the server using rhc.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will use the OpenShift application created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the `ls` command without performing SSH into the application server,
    you should run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The `rhc ssh` command is a short hand for `rhc app-ssh`. Both these commands
    allow you to SSH into an application gear.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rhc app-ssh` command internally uses the SSH command-line client to connect
    with the application gear. With the SSH command-line client, you can specify the
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The rhc command-line client provides a `--command` option that allows you to
    specify a command you want to run on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to run the command on all the gears in your application, you should
    use the`--gears` option with the `rhc app-ssh` command. This would be useful when
    working with scalable applications. Have a look at the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: See more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *SSH into the application gear using rhc* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting application-specific environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very common that people deploy their application in multiple environments,
    such as testing, staging, and production. Usually, the configuration differs between
    these environments to ensure that you are using the right service for the right
    environment. Consider an example where you want to send e-mails in your application.
    In the production environment, you would like to use the cloud e-mail service,
    such as Sendmail (accessible at [https://www.sendmail.com/](https://www.sendmail.com/)),
    but in the development environment, you would like to use an open source version
    of Sendmail. Environment variables provide a programming language and operating-system-agnostic
    solution to these kinds of problems.
  prefs: []
  type: TYPE_NORMAL
- en: Hard coding configuration values in the source code is never a good idea, as
    it leads to strong coupling between your code and the values, compromising the
    security of your app if your code falls into the wrong hands. The environment
    variables allow you to use the same application code in different environments
    leading to portable code.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenShift also exposes some environment variables you should use in your application,
    rather than hard coding their values. For example, if you want to write a file
    in your OpenShift application, you should use the `OPENSHIFT_DATA_DIR` environment
    variable to access the location of the persistent directory. Every OpenShift cartridge
    also exposes its own set of environment variables. For example, the PostgreSQL
    cartridge exposes environment variables for the username, password, host, port,
    and so on. You should not hard code the database configuration properties in your
    source code but take advantage of environment variables. You can view all the
    OpenShift and cartridge-specific environment variables by running the following
    command. The `rhc ssh` command is a shorthand for `rhc app-ssh`. Both these commands
    allow you to SSH into an application gear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the result of the previous command, the list also includes
    environment variables specific to the cron cartridge that we added in the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how you can create application-specific environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need rhc installed on your machine. Also,
    you will need to use the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to set application-specific environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an application-specific environment variable, open a new command-line
    terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test the environment variable, open the`index.php` file in the `myapp` folder,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, make the following changes in the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, commit the changes and push it into application gear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a successful push, go to `http://myapp-osbook.rhcloud.com/` to view the
    change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rhc env-set` command allows a developer to set their application-specific
    environment variables. This is what happens when you run the `rhc env-set` command:'
  prefs: []
  type: TYPE_NORMAL
- en: The `rhc` command-line client makes an HTTP POST request with the environment
    variable data in the body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The OpenShift broker receives the request and performs some validation. If the
    validation check fails, the user would be presented with an error message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After passing the validation checks, the broker will create tasks to update
    all the application gears with a new environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once done, the user will be shown the success message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The environment variable will not be available until you restart the application.
    So, after setting the environment, restart the app using the `rhc app-restart`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not only can you set one environment variable at a time, but you can also set
    multiple environment variables in one go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'There is another alternative to setting up multiple environment variables that
    use a file to store environment variables and the passing of the file to the `rhc
    env-set` command. You should create a new file named `envs.txt` and enter one
    environment variable per line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can pass the `envs.txt` file to the `rhc env-set` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to view all the application-specific environment variables, run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To update the environment variable value, you should run the `rhc env-set`
    command with a new value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove an environment variable, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: See more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Viewing application details* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking and restoring application backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the real world, things can go wrong at any time, and you should always have
    a backup of your entire application that you can apply to restore the application
    to a happy state. An OpenShift application consists of a Git repository, one or
    more databases, environment variables, and a persistent data directory you should
    make a backup of. You can make database backups using command-line tools, such
    as `mysqldump`, `pg_dump`, and `mongoexport`, but those only make backups of the
    respective databases. We will cover database backups in later chapters. In this
    recipe, you will learn how to use rhc to make and restore backups.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to prepare yourself for this recipe, you will need rhc installed on
    your machine. Also, you will need to make use of the application created in the
    *Creating an OpenShift application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make a backup of your application, open a command-line terminal and run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make a change to `index.php` under the `php` directory. Change the header to
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit the change to the local repository and push the changes to the application''s
    remote Git repository to deploy the changes, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to `http://myapp-{domain-name}.rhcloud.com/` to view your change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To restore your application from the backup, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, after applying the backup, if you visit the application URL at `http://myapp-{domain-name}.rhcloud.com/`,
    you will notice that the change we made got reverted, as we applied the snapshot
    that was taken before making the change in step 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now understand what you did in the steps mentioned in the previous section.
    In step 1, you ran the `rhc snapshot-save` command to make the application backup.
    The `rhc` tool first retrieves the application details by making an HTTP GET request
    to the OpenShift broker. The application details include the SSH URL of the application.
    After getting the SSH URL, the `rhc` command-line client executes a `ssh <application_ssh_url>''snapshot''>../backup/myapp-backup.tar.gz`
    command to back up the application. This uses the SSH command-line functionality
    of running a command on a remote server. The output of the snapshot command is
    written to the `myapp-backup.tar.gz` file on your local machine. This `rhc snapshot-save`
    command does not require the`--filepath` option and will, by default, create a
    TAR file with a name as that of the application and write it to the current directory.
    This command first stops the application before creating a backup of all the directories
    under your application gear home directory. This includes the application Git
    repository, data directory, all the cartridges and their data, and environment
    variables. You can list the content of the `tar.gz` file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Through step 2 to step 4 of the previous list of steps to be performed, you
    made a small change in `index.php`, pushed the change to your application gear,
    and then viewed the change by going to your application URL. This is done in order
    to test the restore functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 restored the application backup you made in step 1 using the `rhc snapshot-restore`
    command. The rhc command-line client first makes the HTTP GET request to get the
    SSH URL of the application. After getting the SSH URL, the rhc command-line client
    executes the `cat '../backup/myapp-backup.tar.gz' | ssh <application_ssh_url>'restore
    INCLUDE_GIT'` command to restore the backup. The command pipes the standard output
    of the `cat` command to the standard input of the SSH command. The restore commands
    will stop the application before replacing all the directories in the application
    gear home directory with the one in the backup archive.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in step 6, you verified that the change you made in step 2 was reverted,
    because you applied a backup that didn't reflect the change made in step 2.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rhc snapshot` commands stop the application and then run the `save` or
    `restore` commands.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rhc snapshot` commands can also take another option, which is `--ssh`.
    This can be used to specify a different SSH client and/or to pass SSH options.
    Suppose you want to print SSH debug information; you can use the SSH client `-v`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print all the SSH debug information. For brevity, I am only showing
    part of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Tracking and rolling back application deployments* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking and rolling back application deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you deploy the source code using `git push`, OpenShift executes a new build,
    creates a deployment, deploys it to the respective server, and then starts your
    application container. By default, it will only track the last deployment of your
    application, which means you can't roll back to a previous deployment. In this
    recipe, you will learn how to configure your application to track multiple deployments
    and roll back to a particular deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need to have rhc installed on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to learn how to configure applications to track
    multiple deployments and roll back to a previous version:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new PHP 5.4 application just like we created in the *Creating an OpenShift
    application using the rhc command-line client* recipe, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To enable an OpenShift application to track 10 deployments (for instance),
    you should run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make a change to `index.php` in the application directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit the change and push the change to the application gear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: View the change at `http://myapp-{domai``n-name}.rhcloud.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'List all the deployments tracked by the application by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To roll back to the deployment with the ID `fbaa7582`, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can verify that rollback has happened by again running the `rhc deployment-list`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In step 1, you created a new PHP 5.4 application, and then in step 2, you configured
    the application to track 10 deployments using the `rhc app-configure` command.
    Then, from step 2 through to step 5, you made a simple change in `index.php` and
    deployed that change to the application gear. When you push the code to an application
    gear, a new deployment is created with the ID `ac5d6f39` and is stored in the
    `app-deployments` folder, under the application gear home directory. You can view
    the deployments stored under the `app-deployments` directory, as shown in the
    following command. Every deployment is stored inside a directory with its name
    as the current timestamp. The current active deployment is stored under the current
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: In step 6, you then listed all the deployments using the `rhc deployment-list`
    command. The `rhc deployment-list` command lists down all the deployments tracked.
    The first deployment with the ID `fbaa7582` is the initial deployment that happened
    when you created the application. The second deployment with the ID `ac5d6f39`
    is the deployment that happened after making a change in `index.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Step 7 involved rolling back the code to deployment with the ID `fbaa7582` using
    the `rhc deployment-activate` command. Under the hoods, the `rhc deployment-activate`
    command runs the `ssh <application_ssh_url> 'gear activate --all fbaa7582'` command
    on the application gear to activate the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in step 8, you ran the `rhc deployment-list` command to view the information
    about the rollback that happened in step 7.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also enable deployment tracking during application creation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also view application configuration details using the `rhc show-app`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Taking and restoring application backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the default Git branch for deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every OpenShift application has an associated remote Git repository. When you
    push the source code to an application gear using `git push`, you are pushing
    the source code to a Git remote named `origin` and branch named `master`. Every
    application is configured to autodeploy when code is pushed to the master branch
    on a remote origin. But it might so happen that you would like to use the master
    branch for development while using the production branch for deployment. In this
    recipe, you will learn how to configure an OpenShift application, where you will
    use a branch named `production` for deployment and a master for development.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to complete this recipe, you will need rhc installed on your machine.
    Also, you will need to make use of the OpenShift application created in the *Creating
    an OpenShift application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure a different branch for deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command-line terminal and change the directory to the location where
    `myapp` application exists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new branch with the name `production` using the Git command-line client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the `myapp` OpenShift application to use the `production` branch
    for deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `index.php` file in the application directory and change the header
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit the change to the local repository, and then push the changes to the
    master branch. As we have configured the application to deploy the production
    branch, only the code will be pushed, so autodeployment will not happen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, check out the production branch, and merge the master branch changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, push the changes to application gear, and the changes will get deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if you go to `http://myapp-{domain-name}.rhcloud.com`, you will view the
    changes made in step 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenShift leverages the Git action hooks for application deployment. By default,
    deployment occurs every time you push the source code to the master branch. In
    step 1, you changed the directory to the `myapp` application location on your
    command-line tool. Step 2 helped you to create a new branch named `production`
    for future deployments. You can list all the branches in your Git repository using
    the `git branch` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'In step 3, you configured the application to use the production branch for
    application deployment. You will get the following output upon successful completion
    of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The output shows that the deployment branch is changed to `production`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 4, you made a change to `index.php` in which you committed and pushed
    the changes to the master branch in step 5\. One thing you will notice is that
    the `git push` command only pushes the bits to the application gear, but it does
    not invoke the deployment. The application deployment does not happen, because
    in step 3, you configured the deployment of the application when to changes are
    pushed to the production branch. The output of the `git push` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'In step 6, you checked out the production branch and merged the changes that
    you made in the master branch. You pushed the changes to the production branch
    in step 7, which will invoke the autodeployment, and the changes will be deployed
    to the application. The `git push origin production` command is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you viewed that changes were actually deployed by visiting the application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if you want to turn off automatic deployment altogether, that is, if you
    do not want to deploy even on the production branch, this can be achieved using
    the `--no-auto-deploy` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: This will turn off autodeployment, and only code will be pushed to the Git repository
    hosted on the application gear. If you want to deploy code, you have to do manual
    deployment, as explained in the *Doing manual deployments* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Tracking and rolling back application deployments* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Doing manual deployments* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing manual deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Configuring the default Git branch for deployment* recipe, under the
    *There's more...* section, we looked at how to turn off autodeployment using the
    `--no-auto-deploy` option with the `rhc app-configure` command. What do you do
    if you want to deploy the application after switching off autodeployment? One
    solution would be to reconfigure the application to autodeploy by running the
    `rhc app-configure –auto-deploy` command. This solution is good if you want to
    perform autodeployment from now on, but if you want to manage deployment yourself,
    the `--auto-deploy` option is not a solution. In this recipe, you will learn how
    to manually deploy the application to OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need rhc installed on your machine. Also,
    you will need the application you created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to perform manual deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command-line terminal and change the directory to the `myapp` application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Disable autodeployment of the application using the `--no-auto-deploy` option
    with the rhc `configure-app` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make a change to the application''s `index.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit the change, and push it to the application gear. As autodeployment is
    turned off, the code will not be deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To manually deploy the change, use the `rhc deploy` command to deploy the master
    branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: View the change by visiting `http://myapp-{domain-name}.rhcloud.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In step 1, you changed the directory to the `myapp` application location. To
    disable autodeployment, you used the `rhc configure-app` command with the `--no-auto-deploy`
    option. You can view the application details by running the `rhc show-app` command
    with the `--configuration` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the previous command, the deployment has been set to manual.
    In steps 3 and 4, you made a change in `index.php` and then committed and pushed
    the change to the application gear. The autodeployment will not kick in, as we
    disabled it in step 2\. The output of the `git push` command is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'In step 5, you manually deployed the change using the `rhc deploy` command.
    The `rhc` `deploy` command needs a reference that can be either a Git tag, Git
    commit ID, or Git branch name. This step made use of the master branch for deployment.
    The `rhc deploy` command under the hood executed the `gear deploy master` command
    on the application gear. The output of step 5 is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the previous command, first cartridges are stopped, and then
    the application is built using the latest commit ID of the Git master branch before
    finally deploying the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can view the deployed application and verify that changes are deployed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of using the branch name, you can also use the Git commit ID or Git
    tag with the `rhc deploy` command. You can see how to use a commit ID with the
    `rhc deploy` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Viewing application details* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and doing binary deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have looked at how easy it is to perform Git-based deployments with
    OpenShift, where you perform a `git push` command, and OpenShift builds and deploys
    the application. This is ideal if you want to perform source-based deployments.
    It may be that you want OpenShift to also manage your source code using Git. But
    there are cases when developers do not want to push their source code to OpenShift
    servers. In those cases, you can use binary deployments to deploy your binary
    artifact. This is ideal when you want to deploy binary artifacts, such as a `.war`
    file, as Git is not an efficient means for storing binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need rhc installed on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to perform binary deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command-line terminal and change the directory to an appropriate location.
    Then, create a new JBoss EAP 6 application using rhc, as shown in the following
    command. Note that we are using the `--no-git` option, as we do not want to use
    Git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the application to use binary deployment. Also, switch off autodeploy,
    and configure the application to store two deployments. This will help if we want
    to roll back to a previous version later. Have a look at the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a directory structure, as shown in the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download or copy the WAR file to the `repo/deployments` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Package the folder structure to an archive. You can use the ZIP, TAR, tar.gz,
    or tar.bz formats:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Deploy the new binary artifact using the `rhc deploy` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you created a JBoss EAP 6 application named `javaapp`. You also specified
    the `--no-git` option with the `rhc app-create` command, as we do not want to
    clone the Git repository to the local machine. Next, in step 2, you configured
    the application to use binary deployment. OpenShift supports two types of deployment—Git
    and binary. The Git deployment type is the default deployment type and is invoked
    via a `git push` command. When you use this, the gear will build a deployment
    artifact and then deploy the artifact to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the binary deployment type, you have to provide the deployment archive,
    as the OpenShift gear will not be responsible for building the deployment. The
    binary deployment requires an archive that follows a specified directory format.
    In step 3, you created a directory structure specific to the JBoss EAP 6 application
    type. Have a look at the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'As we are performing binary deployment, you just downloaded the WAR file to
    the `repo/deployments` folder. Next, in step 5, you created a `tar.gz` archive
    with the repository structure. Finally, in step 6, you deployed the binary artifact
    using the `rhc deploy` command. You can also use the HTTP URL instead of the local
    file path, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can save a deployment snapshot anytime using the `rhc snapshot-save` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: This will save a `javaapp.tar.gz` archive on your local machine. Then, you can
    deploy this artifact at any point in time using the `rhc deploy` command.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Viewing application details* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using your own custom domain name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, all the applications created by OpenShift are subdomains of [rhcloud.com](http://rhcloud.com).
    In this recipe, you will learn how to use your own domain name with the `myapp`
    application you created in the *Creating an OpenShift application using the rhc
    command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to buy a domain name from a domain registration provider.
    I will use GoDaddy, as I have few domains registered there, but you can just as
    easily choose a different domain provider. I have bought the `openshift-cookbook.in`
    domain name for this demonstration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your domain registration provider's DNS manager console, and add a `CNAME`
    record. The `CNAME` record lets you point one domain name to another. You can
    create a new `CNAME` record that will point to `www.subdomain to myapp-osbook.rhcloud.com`,
    as shown in the following screenshot:![How to do it…](img/00021.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After creating the `CNAME` record, you have to map your OpenShift application
    with the custom name. This is done using the `rhc alias` command. To create an
    alias for `www.openshift-cookbook.in`, run the following command. Please use your
    own domain name with the `rhc alias` command. Have a look at the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 2, you created a new `CNAME` entry for the `www` subdomain. OpenShift
    allows you to do this by pointing the **Canonical Name** (**CNAME**) entry to
    your DNS provider's settings to provide an alias for your domain name. `CNAME`
    specifies that the domain name is an alias of another domain name. In the previous
    example, `www.openshift-cookbook.com` becomes an alias for `http://myapp-osbook.rhcloud.com`.
    In step 3, you ran the `rhc alias` command, which allows you to use your own domain
    names to run your apps. Technically, what OpenShift has done under the hood is
    to set up a Vhost in Apache to handle the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you go to your custom domain name, such as `http://www.openshift-cookbook.in`,
    you will see your OpenShift application home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'This configuration works fine if you use the `www` subdomain, but it will not
    work if we remove `www` from the `openshift-cookbook.in` URL. It is very common
    that developers would require both root and www URLs to work. To make it work,
    you have to use domain forwarding so that when a request comes to `openshift-cookbook.in`,
    it will be forwarded to `www.openshift-cookbook.in`. Open the DNS provider web
    console and go to the **Forward** tab. Forward the requests coming to `openshift-cookbook.in`
    to `http://www.openshift-cookbook.in`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It will take 30 minutes or so to reflect the forwarding change. After changes
    are propagated, go to `openshift-cookbook.in`, and you will be redirected to `http://www.openshift-cookbook.in`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also set an alias using the OpenShift web console. Please refer to the
    OpenShift blog at [https://www.openshift.com/blogs/how-to-configure-custom-domain-names-and-ssl-in-the-openshift-web-console](https://www.openshift.com/blogs/how-to-configure-custom-domain-names-and-ssl-in-the-openshift-web-console)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Viewing application details* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you start using OpenShift for application development, the different components,
    such as Git and cartridge log directories, which constitute an application, will
    start consuming disk space. In the OpenShift Online free tier, applications are
    allocated only 1 GB of disk space so that it becomes critical to use the disk
    space effectively to avoid disk quota errors. In this recipe, you will learn how
    to clean up your application periodically to avoid disk quota errors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will use the OpenShift application created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To clean up the application, open a command-line terminal and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rhc tidy-app` command helps to manage the application disk space. Under
    the hood, it performs three operations:'
  prefs: []
  type: TYPE_NORMAL
- en: To start off, the `rhc tidy-app` command stops the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, it clears out the application `tmp` directory. The location of the `tmp`
    directory can be found by fetching the `OPENSHIFT_TMP_DIR` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, it clears the log directory for each cartridge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, it clears up the application Git repository on the server. The Git repository
    cleanup is done using two Git commands—`git prune` and `git gc --aggressive`.
    The `git prune` command removes all the unreachable objects from the Git repository
    object database. The `git gc --aggressive` command deletes any loose objects and
    compresses objects to use the disk space more efficiently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, it starts the application. The application is started even if the `rhc
    tidy` command has any exceptions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also create a daily or weekly cron job that would run `git gc` periodically
    on the application gear. To do that, add the cron cartridge to the application.
    Refer to the *Adding a cron cartridge to an application* recipe. After adding
    the cartridge, create a new shell script named `gc_cleanup.sh` under the `.openshift/cron/daily`
    directory, and add the following contents to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Commit the files and push them to the application gear. The daily cron job will
    perform Git cleanup every day.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Viewing application details* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to delete an OpenShift application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    you will use the application created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete an application, open a command-line terminal and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rhc `-delete` command deletes the application and all its data on the OpenShift
    server. You cannot roll back this command, so use it with caution. Under the hood,
    the `rhc -delete` command makes an HTTP DELETE request to delete the application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Viewing application details* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
