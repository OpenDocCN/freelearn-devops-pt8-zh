- en: Chapter 3. Creating and Managing Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：创建与管理应用程序
- en: This chapter presents a number of recipes that show you how to get started with
    application development using the rhc command-line client. You will learn how
    to create your own OpenShift application using a single command, how to use application
    management operations such as start, stop, and delete, how to set up your own
    domain name for your application, and how to track and roll back deployments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一些示例，向你展示如何使用 rhc 命令行客户端开始应用程序开发。你将学习如何通过单个命令创建自己的 OpenShift 应用程序，如何使用应用程序管理操作（如启动、停止和删除），如何为应用程序设置自己的域名，以及如何跟踪和回滚部署。
- en: 'The specific recipes within this chapter are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的具体示例包括：
- en: Creating an OpenShift application using the rhc command-line client
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 rhc 命令行客户端创建 OpenShift 应用程序
- en: Specifying your own template Git repository URL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定自己的模板 Git 仓库 URL
- en: Starting/stopping/restarting an application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动/停止/重启应用程序
- en: Adding and managing add-on cartridges
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加和管理附加插件
- en: Adding a cron cartridge to an application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向应用程序添加 cron 插件
- en: Using downloadable cartridges with OpenShift applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可下载的插件与 OpenShift 应用程序集成
- en: Viewing application details
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看应用程序详情
- en: Cloning the application Git repository using rhc
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 rhc 克隆应用程序的 Git 仓库
- en: SSH into the application gear using rhc
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 rhc 通过 SSH 连接到应用程序设备
- en: Running a command in the application's SSH session using rhc
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 rhc 在应用程序的 SSH 会话中运行命令
- en: Setting application-specific environment variables
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置应用程序特定的环境变量
- en: Taking and restoring application backups
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行应用程序备份与恢复
- en: Tracking and rolling back application deployments
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪和回滚应用程序部署
- en: Configuring the default Git branch for deployment
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置默认的 Git 分支进行部署
- en: Doing manual deployments
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行手动部署
- en: Configuring and doing binary deployments
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置并执行二进制部署
- en: Using your own custom domain name
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义域名
- en: Cleaning up the application
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理应用程序
- en: Deleting the application
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除应用程序
- en: Introduction
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: OpenShift (or any other **Platform as a Service** (**PaaS**)) is based on one
    core principle, in that it should simplify the application life cycle management,
    including application scaling to help developers build their business applications
    faster. They all help developers achieve higher productivity by provisioning,
    managing, and scaling the infrastructure as well as application stack for them.
    It enables software developers to take their ideas, write code on the local machine,
    and then deploy the application to the cloud in minutes. PaaS can take you a long
    way without requiring much work by providing a good foundation to your next big
    business idea. PaaS can also help enforce best practices, such as continuous integration,
    in your application from inception. In addition, PaaS can also help you get quick
    feedback from the customer, and you can iterate faster.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift（或任何其他**平台即服务**（**PaaS**））基于一个核心原则，即它应该简化应用程序生命周期管理，包括应用程序的扩展，帮助开发人员更快地构建他们的业务应用程序。这些平台通过为开发人员提供基础设施和应用堆栈的配置、管理和扩展，帮助他们提高生产力。它使软件开发人员能够将自己的创意付诸实践，在本地机器上编写代码，然后在几分钟内将应用程序部署到云端。PaaS可以在不需要大量工作下，提供一个坚实的基础，帮助你实现下一个商业创意。PaaS
    还可以在应用程序从一开始就帮助执行最佳实践，如持续集成。此外，PaaS 还可以帮助你从客户那里获取快速反馈，进而加快迭代速度。
- en: OpenShift provides application developers all the services and tools required
    to develop and deploy their applications. Apps running on OpenShift can leverage
    their managed stack, and they do not require system admins to manage the underlying
    platform in order to keep their apps secure and reliable. OpenShift provides commands
    that can help application developers take backups of their applications periodically.
    To understand how application developers can take backups, refer to the *Taking
    and restoring application backups* recipe.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 为应用程序开发人员提供了开发和部署应用程序所需的所有服务和工具。运行在 OpenShift 上的应用程序可以利用它们的托管堆栈，并且不需要系统管理员来管理底层平台，从而确保应用程序的安全性和可靠性。OpenShift
    提供了可以帮助应用程序开发人员定期备份其应用程序的命令。要了解应用程序开发人员如何备份应用程序，请参考*应用程序备份与恢复*这一示例。
- en: 'The `rhc` command-line tool provides all the commands required to work with
    your application. To view all the application-related commands, open a command-line
    terminal and run the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc` 命令行工具提供了所有与应用程序相关的命令。要查看所有应用程序相关的命令，请打开命令行终端并运行以下命令：'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will cover all these commands in this chapter, so stay tuned!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中介绍所有这些命令，请继续关注！
- en: 'Every OpenShift application runs inside a gear, which is a container built
    using SELinux, Control Groups, and pam_namespace Linux technologies. Let''s look
    at all these technologies one by one:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 OpenShift 应用程序都运行在一个 gear 中，gear 是一个使用 SELinux、Control Groups 和 pam_namespace
    Linux 技术构建的容器。让我们一一了解这些技术：
- en: '**SELinux**:**SELinux** (**Security Enhanced Linux**) is a Linux kernel security
    module originally developed by the United States National Security Agency. OpenShift
    uses SELinux to achieve gear isolation and a hardened security layer around gears.
    This limits application gears from accessing parts of the system they should not
    access, such as the lower-level system and other application gears running on
    the same node. In a multitenant environment, such as OpenShift, this behavior
    is very important to ensure security and reliability when running multiple applications
    on the same infrastructure.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SELinux**：**SELinux**（**Security Enhanced Linux**）是一个由美国国家安全局（NSA）最初开发的 Linux
    内核安全模块。OpenShift 使用 SELinux 来实现 gear 隔离并在 gear 周围建立一个加固的安全层。这限制了应用程序 gear 访问它们不应访问的系统部分，比如低层次系统和同一节点上运行的其他应用程序
    gear。在多租户环境中，例如 OpenShift，这种行为对于确保在同一基础设施上运行多个应用程序时的安全性和可靠性非常重要。'
- en: '**Control Groups**: OpenShift uses **Control Groups** (**cgroups**), a Linux
    kernel feature, to allocate resources such as CPU time, memory, bandwidth, or
    a combination of these resources among process groups. The amount of RAM and disk
    space a gear is allocated depends on the gear size. In the free tier, you only
    have access to small gears, which have 512 MB RAM and 1 GB of disk space. We will
    look at gear size in the *Creating an OpenShift application using the rhc command-line
    client* recipe.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Control Groups**：OpenShift 使用 **Control Groups**（**cgroups**），这是 Linux 内核的一个特性，用于在进程组之间分配资源，如
    CPU 时间、内存、带宽，或者这些资源的组合。一个 gear 分配的 RAM 和磁盘空间取决于 gear 的大小。在免费层级中，你只能使用小型 gear，它们有
    512 MB 的 RAM 和 1 GB 的磁盘空间。我们将在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 食谱中介绍 gear 的大小。'
- en: '**pam_namespace**: pam_namespace is used to allow each user or session to maintain
    its own namespace for directory structures, keeping them from being able to view
    or impede upon each other''s namespace. By using this, OpenShift is able to provide
    the `/tmp` directory to each gear.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pam_namespace**：pam_namespace 用于允许每个用户或会话维护自己的目录结构命名空间，防止他们查看或干扰其他用户的命名空间。通过使用这个功能，OpenShift
    能够为每个 gear 提供 `/tmp` 目录。'
- en: 'A gear runs different software components (or cartridges) for your application.
    A cartridge is what makes a gear useful, that is, it provides the software components
    that an application might need. Every OpenShift application requires one web cartridge
    and can have zero or more add-on and downloadable cartridges. There are three
    types of cartridges:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 gear 运行你应用程序的不同软件组件（或 cartridge）。cartridge 是使 gear 有用的东西，它提供应用程序可能需要的软件组件。每个
    OpenShift 应用程序都需要一个 web cartridge，并且可以有零个或多个附加和可下载的 cartridge。cartridge 有三种类型：
- en: '**Web cartridge**: These are used to serve web requests. You can''t create
    an OpenShift application without a web cartridge. You have to specify the web
    cartridge at application creation time. They are available for Java, PHP, Python,
    Ruby, Node.js, and Perl, where you can list all the web cartridges by running
    the following command:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web cartridge**：这些用于处理网页请求。你不能在没有 Web cartridge 的情况下创建 OpenShift 应用程序。你必须在应用程序创建时指定
    Web cartridge。它们支持 Java、PHP、Python、Ruby、Node.js 和 Perl，你可以通过运行以下命令列出所有 Web cartridge：'
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Add-on cartridge**: These are additional cartridges provided by OpenShift.
    You can add them depending on your requirement, that is, if you need a database
    in your application, you will need to add the MySQL, PostgreSQL, or MongoDB add-on
    cartridge. You can list all the add-on cartridges by running the following command:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Add-on cartridge**：这些是 OpenShift 提供的附加 cartridge。你可以根据需要添加它们，也就是说，如果你的应用程序需要数据库，你将需要添加
    MySQL、PostgreSQL 或 MongoDB 附加 cartridge。你可以通过运行以下命令列出所有附加的 cartridge：'
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Downloadable cartridge**: This enables developers to write their own cartridges.
    They can write their own cartridges and make them available via a public Git repository.
    These can then be installed using the rhc add-cartridge command. We will cover
    these in the *Using downloadable cartridges with OpenShift applications* recipe
    in this chapter.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Downloadable cartridge**：这使开发人员能够编写自己的 cartridge。开发人员可以编写自己的 cartridge 并通过公共
    Git 仓库发布。然后，可以使用 rhc add-cartridge 命令安装它们。我们将在本章的 *使用可下载的 cartridge 与 OpenShift
    应用程序* 食谱中讨论这些内容。'
- en: Every OpenShift application has at least a private Git repository and web cartridge.
    It may have zero or more add-on cartridges, with the possibility of zero or more
    downloadable cartridges. An OpenShift application has built-in support for the
    Git version control system, automated dependency management, persistent data directory
    for file upload or storing other files, and deployment rollback.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 OpenShift 应用程序至少有一个私有 Git 仓库和一个 Web cartridge。它可能有零个或多个附加 cartridge，且可能有零个或多个可下载的
    cartridge。一个 OpenShift 应用程序内建支持 Git 版本控制系统、自动化依赖管理、用于文件上传或存储其他文件的持久化数据目录，以及部署回滚。
- en: An application can be a scalable or nonscalable application. A **scalable**
    application runs on multiple gears and scales horizontally depending on the number
    of concurrent users. We will look at scalable applications in [Chapter 11](part0131_split_000.html#page
    "Chapter 11. Logging and Scaling Your OpenShift Applications"), *Logging and Scaling
    Your OpenShift Applications*. In the current chapter, we will cover nonscalable
    applications. A **nonscalable application** runs inside a single gear, and all
    the cartridges are added to that gear. These are good for development purposes,
    but for production, high-traffic applications, you should consider scalable applications.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序可以是可扩展的或不可扩展的。**可扩展**应用程序运行在多个 gear 上，并根据并发用户数水平扩展。我们将在[第 11 章](part0131_split_000.html#page
    "第 11 章. 日志记录与 OpenShift 应用程序扩展")，*日志记录与 OpenShift 应用程序扩展*中讨论可扩展应用程序。本章我们将介绍不可扩展应用程序。**不可扩展应用程序**运行在单个
    gear 内，所有的 cartridges 都添加到该 gear 中。这些应用程序适合开发用途，但对于生产环境中的高流量应用程序，你应该考虑使用可扩展应用程序。
- en: Creating an OpenShift application using the rhc command-line client
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 rhc 命令行客户端创建 OpenShift 应用程序
- en: In this recipe, you will learn how to create an OpenShift application using
    rhc. We will create a PHP 5.4 application just for demonstration. This chapter
    will be language-agnostic and will only cover concepts that apply to all the application
    types. Different programming languages supported by OpenShift will be covered
    later in the book.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，你将学习如何使用 rhc 创建一个 OpenShift 应用程序。我们将创建一个 PHP 5.4 应用程序仅供演示使用。本章将不依赖于特定语言，仅涵盖所有应用程序类型通用的概念。后续章节会介绍
    OpenShift 支持的不同编程语言。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. Also,
    you should set up your OpenShift account using rhc by following the *Setting up
    an OpenShift account using rhc* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要逐步执行此教程，你需要在计算机上安装 rhc 命令行客户端。有关详细信息，请参阅[第 1 章](part0014_split_000.html#page
    "第 1 章. OpenShift 入门")，*OpenShift 入门*中的 *安装 OpenShift rhc 命令行客户端* 章节。此外，你还应该通过
    rhc 设置 OpenShift 账户，具体操作请参考[第 1 章](part0014_split_000.html#page "第 1 章. OpenShift
    入门")，*OpenShift 入门*中的 *使用 rhc 设置 OpenShift 账户* 章节。
- en: How to do it…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'To create a PHP 5.4 OpenShift application named `myapp`, open a new command-line
    terminal and run the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个名为 `myapp` 的 PHP 5.4 OpenShift 应用程序，打开一个新的命令行终端并运行以下命令：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also avoid typing the `--app` and `--type` options where OpenShift
    will automatically figure them out, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以避免输入 `--app` 和 `--type` 选项，因为 OpenShift 会自动推断它们，如下所示：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also write the command as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以这样写命令：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: All the rhc commands can take either the `rhc <noun>-<verb>` or `rhc <verb>-<noun>`
    form.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 rhc 命令都可以使用 `rhc <名词>-<动词>` 或 `rhc <动词>-<名词>` 的形式。
- en: How it works…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: 'Let''s go through all the steps performed by the `rhc create-app` command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解 `rhc create-app` 命令所执行的所有步骤：
- en: 'The `rhc create-app` command requires two mandatory options:`--app` and `--type`.
    You are not required to pass these options with the command, but you are required
    to provide their values as shown in the `rhc create-app myapp php-5.4` command.
    These two options specify the application name and the web cartridge the application
    will use. The OpenShift server checks whether the application name and web cartridge
    name are correct. A valid application name must contain only alphanumeric characters
    and can be, at the most, 32 characters in length. You can view all the available
    web cartridges using the following command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rhc create-app` 命令需要两个必选选项：`--app` 和 `--type`。虽然不要求你在命令中传递这些选项，但你需要提供其值，如
    `rhc create-app myapp php-5.4` 命令所示。这两个选项指定了应用程序名称和应用程序将使用的 Web 组件。OpenShift 服务器将检查应用程序名称和
    Web 组件名称是否正确。有效的应用程序名称必须仅包含字母数字字符，且长度最多为 32 个字符。你可以使用以下命令查看所有可用的 Web 组件：'
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After making sure the application name and web cartridge name are correct, it
    will check whether sufficient gears are available in your domain to create an
    application. In the free tier, you only have access to three gears, so if you
    try to create an application after you have consumed all three, you will receive
    an error response. For example, if you have already created three applications
    and you try to create the fourth application, you will get the error response,
    `user has already reached the gear limit of 3`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认应用程序名称和 Web 组件名称正确后，它将检查你的域名中是否有足够的资源来创建应用程序。在免费套餐中，你只能使用三个 gear，因此，如果你尝试在已用完三个
    gear 后创建应用程序，你将收到错误响应。例如，如果你已经创建了三个应用程序，并尝试创建第四个应用程序，你将收到错误响应 `user has already
    reached the gear limit of 3`。
- en: If you have sufficient resources to create an application, rhc will make a `HTTP
    POST` request to create an application. The rhc command-line client is a wrapper
    around the OpenShift REST API. The OpenShift server will receive the POST request
    and allocate a gear for your application. The amount of RAM and disk space a gear
    is allocated depends on the gear size. In the free tier, you only have access
    to small gears, which have 512 MB of RAM and 1 GB of disk space. If you are in
    the paid tier, you can specify bigger gear sizes with the `--gear` option. The
    valid values for `--gear` at the time of writing are small, medium, and large.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你有足够的资源来创建应用程序，rhc 将发出一个 `HTTP POST` 请求来创建应用程序。rhc 命令行客户端是 OpenShift REST
    API 的封装器。OpenShift 服务器将接收到该 POST 请求，并为你的应用程序分配一个 gear。gear 分配的内存和磁盘空间取决于 gear
    的大小。在免费套餐中，你只能使用小型 gear，它有 512 MB 的 RAM 和 1 GB 的磁盘空间。如果你在付费套餐中，你可以通过 `--gear`
    选项指定更大的 gear 大小。根据编写时的情况，`--gear` 的有效值为 small、medium 和 large。
- en: Next, OpenShift will install the web cartridge required by your application.
    In the application created previously, it will install the PHP 5.4 language runtime
    and Apache web server to serve your web requests and perform the required configuration.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，OpenShift 将安装你的应用程序所需的 Web 组件。在之前创建的应用程序中，它将安装 PHP 5.4 语言运行时和 Apache Web
    服务器来处理你的 Web 请求并执行所需的配置。
- en: The OpenShift server will also create a private Git repository for your application.
    The Git repository will have a template application depending on the web cartridge
    type. You can specify your own template application using `--from-code`. This
    is covered in the next recipe.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenShift 服务器还将为你的应用程序创建一个私有的 Git 仓库。该 Git 仓库将根据 Web 组件类型提供一个模板应用程序。你可以使用 `--from-code`
    指定自己的模板应用程序。有关内容，请参见下一个配方。
- en: Once the application is created with all the required cartridges, the OpenShift
    server will create a public URL for your application and register it with the
    DNS. The public URL is a combination of the application name and the domain name.
    For the application created previously, the URL will be `http://myapp-osbook.rhcloud.com`.
    Here, `myapp` is the application name, and `osbook` is the domain name. You can
    also use your own custom domain name with OpenShift applications. This is covered
    in the *Using your own custom domain name* recipe.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦应用程序创建了所有必需的组件，OpenShift 服务器将为你的应用程序创建一个公共 URL，并将其注册到 DNS 中。公共 URL 是应用程序名称和域名的组合。对于之前创建的应用程序，URL
    将是 `http://myapp-osbook.rhcloud.com`。其中，`myapp` 是应用程序名称，`osbook` 是域名。你也可以使用你自己的自定义域名与
    OpenShift 应用程序一起使用。有关内容，请参见 *使用自定义域名* 配方。
- en: After the application DNS name is available, rhc will use the Git command-line
    to clone the application Git repository on your local machine.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的 DNS 名称可用后，rhc 将使用 Git 命令行工具在你的本地机器上克隆应用程序的 Git 仓库。
- en: 'Finally, you will be shown the details of your application. You can view the
    running application at `http://myapp-{domain-name}.rhcloud.com/`. Please replace
    `{domain-name}`with your account domain name. An example is shown as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你将看到应用程序的详细信息。你可以在`http://myapp-{domain-name}.rhcloud.com/`查看运行中的应用程序。请将`{domain-name}`替换为你的账户域名。以下是一个示例：
- en: '[PRE7]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s look at the `myapp` application directory on your local machine. After
    the application is created, a directory with a name that is identical to the application
    name is created on your local machine. It houses the source code of the template
    application created by OpenShift, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下本地计算机上的`myapp`应用程序目录。应用程序创建后，本地计算机会创建一个与应用程序名称相同的目录，其中包含OpenShift创建的模板应用程序的源代码，如下所示：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s look at each of these components one by one as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看这些组件，如下所示：
- en: 'The `.git` directory stores the Git repository of the `myapp` application.
    This directory contains the complete history of the repository. The `.git/config`
    file contains the configuration for the repository. The rhc command-line tool
    also adds the application-specific metadata to the `.git/config` file. The application-specific
    metadata is under the rhc section:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.git`目录存储`myapp`应用程序的Git版本库。该目录包含版本库的完整历史记录。`.git/config`文件包含版本库的配置。rhc命令行工具还会将应用程序特定的元数据添加到`.git/config`文件中。应用程序特定的元数据位于rhc部分：'
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `.openshift` directory stores OpenShift-specific files. The `.openshift`
    directory has three subdirectories—`action_hooks`, `cron`, and `markers`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.openshift`目录存储OpenShift特定的文件。`.openshift`目录下有三个子目录——`action_hooks`、`cron`和`markers`：'
- en: The `action_hooks` directory stores the executable scripts, which gives application
    developers an entry point into various applications and platform life cycle operations.
    An example of using an action hook would be to send an e-mail after the application
    is deployed.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action_hooks`目录存储可执行脚本，为应用程序开发人员提供了进入各种应用程序和平台生命周期操作的入口点。使用action hook的一个例子是，在应用程序部署后发送电子邮件。'
- en: The `cron` directory stores the executable scripts, which can be scheduled to
    run periodically. We will cover this in detail in the *Adding a cron cartridge
    to an application* recipe later in this chapter.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cron`目录存储可执行脚本，可以按计划定期运行。我们将在本章稍后的*向应用程序添加cron模块*配方中详细讲解。'
- en: The `markers` directory allows a user to specify settings such as hot deployment,
    debugging, and the version of Java to be used. As these settings are specific
    to web cartridges, we will cover them in detail in web-cartridge-specific chapters.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`markers`目录允许用户指定设置，例如热部署、调试和要使用的Java版本。由于这些设置特定于Web模块，我们将在专门讲解Web模块的章节中详细说明它们。'
- en: The `index.php` file contains a simple PHP application that you see when you
    visit the application URL.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.php`文件包含一个简单的PHP应用程序，当你访问应用程序URL时会看到它。'
- en: Note
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this book, applications in the free tier will idle out
    after 24 hours of inactivity. Inactivity means no HTTP request has been made to
    your application URL from outside the gear. When idling, it takes a few seconds
    for the gear to wake up and start processing web requests.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本书时，免费层级中的应用程序在24小时不活跃后将会空闲。空闲意味着没有来自外部设备对你的应用程序URL的HTTP请求。当空闲时，设备需要几秒钟才能唤醒并开始处理Web请求。
- en: There's more
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'The `rhc` command-line tool will raise an exception if the application creation
    takes more than 120 seconds. To overcome errors related to timeout, you can specify
    the `--timeout` option as shown in the following code. The timeout value is in
    seconds:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序创建时间超过120秒，`rhc`命令行工具将抛出异常。为了解决与超时相关的错误，你可以指定`--timeout`选项，如下所示的代码所示。超时值为秒：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can also configure the timeout in the `~/.openshift/express.conf` file,
    as shown in the following code. This will apply to all the commands:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在`~/.openshift/express.conf`文件中配置超时设置，如下所示的代码所示。这将适用于所有命令：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a WordPress application using the web console* recipe in [Chapter
    1](part0014_split_000.html#page "Chapter 1. Getting Started with OpenShift"),
    *Getting Started with OpenShift*
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](part0014_split_000.html#page "第1章. 开始使用OpenShift")中的*使用Web控制台创建WordPress应用程序*
    配方，*开始使用OpenShift*'
- en: The *Specifying your own template Git repository URL* recipe
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*指定你自己的模板Git仓库URL* 配方'
- en: The *Adding a cron cartridge to an application* recipe
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*向应用程序添加cron模块* 配方'
- en: The *Viewing application details* recipe
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序详情* 配方'
- en: The *Using your own custom domain name* recipe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用自定义域名*配方'
- en: Specifying your own template Git repository URL
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定自己的模板Git仓库URL
- en: In the *Creating an OpenShift application using the rhc command-line client*
    recipe, we created an application that used a template source code provided by
    OpenShift. Let's suppose you want OpenShift to use your Git repository to populate
    the initial contents of the application. This can be accomplished using the `--from-code`
    option at application creation time.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在*使用rhc命令行客户端创建OpenShift应用*配方中，我们创建了一个使用OpenShift提供的模板源代码的应用。假设你希望OpenShift使用你的Git仓库来填充应用的初始内容。这可以通过在创建应用时使用`--from-code`选项来实现。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. You should
    also complete the setup on your OpenShift account using rhc by following the *Setting
    up an OpenShift account using rhc* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，你需要在机器上安装rhc命令行客户端。有关详细信息，请参阅[第1章](part0014_split_000.html#page "第1章.
    OpenShift入门")中的*安装OpenShift rhc命令行客户端*配方，*OpenShift入门*。你还应该通过按照[第1章](part0014_split_000.html#page
    "第1章. OpenShift入门")中的*使用rhc设置OpenShift账户*配方来完成OpenShift账户的设置。
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤……
- en: 'To create an application that uses initial content from your own Git repository,
    use the`--from-code` option:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 若要创建一个使用自己Git仓库初始内容的应用，请使用`--from-code`选项：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Git repository URL should be a public Git repository; otherwise, application
    creation will fail as OpenShift cannot access the repository.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Git仓库URL应该是一个公开的Git仓库；否则，应用创建将失败，因为OpenShift无法访问该仓库。
- en: How it works…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: When you create an OpenShift application using the `--from-code` option, the
    OpenShift server will first clone the Git repository provided with the `--from-code`
    option and then use that repository source code to populate the initial contents
    of the application. The Git repository URL should be a public Git repository;
    otherwise, OpenShift will not be able to clone the repository and will instead
    raise an exception. Following this, OpenShift will build the source code, create
    an artifact, and then deploy the artifact to the server. An artifact is a by-product
    produced during the development of software, for example, in the case of Java
    applications, it could be either a **Java Archive** (**JAR**), **Web Archive**
    (**WAR**), or **Enterprise Archive** (**EAR**) file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`--from-code`选项创建OpenShift应用时，OpenShift服务器将首先克隆提供的Git仓库，并使用该仓库的源代码填充应用的初始内容。Git仓库URL应该是一个公开的Git仓库；否则，OpenShift将无法克隆该仓库，且会抛出异常。接下来，OpenShift将构建源代码，创建一个工件，并将该工件部署到服务器上。工件是软件开发过程中产生的副产品，例如，在Java应用中，它可能是**Java归档文件**（**JAR**）、**Web归档文件**（**WAR**）或**企业归档文件**（**EAR**）文件。
- en: In the previous command, we created a JBoss EAP application that used a public
    Git repository URL as its initial code. After the application is successfully
    created, you can view the application running at `http://javaapp-{domain-name}.rhcloud.com/`.
    The application is a simple demonstration of the article extraction library called
    Boilerpipe (which you can access at [https://code.google.com/p/boilerpipe/](https://code.google.com/p/boilerpipe/)).
    It takes a URL and gives you the title and relevant text from the URL.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们创建了一个使用公开Git仓库URL作为初始代码的JBoss EAP应用。应用成功创建后，你可以在`http://javaapp-{domain-name}.rhcloud.com/`查看该应用。该应用是一个简单的演示，展示了名为Boilerpipe的文章提取库（你可以访问[https://code.google.com/p/boilerpipe/](https://code.google.com/p/boilerpipe/)）。它接受一个URL并提取该URL的标题和相关文本。
- en: See also
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a WordPress application using the web console* recipe in [Chapter
    1](part0014_split_000.html#page "Chapter 1. Getting Started with OpenShift"),
    *Getting Started with OpenShift*
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Web控制台创建WordPress应用*配方，见[第1章](part0014_split_000.html#page "第1章. OpenShift入门")，*OpenShift入门*'
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用rhc命令行客户端创建OpenShift应用*配方'
- en: Starting/stopping/restarting an application
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动/停止/重启应用
- en: The rhc command-line client provides commands to start, stop, and restart an
    application. In this recipe, you will learn how to perform these commands using
    rhc.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: rhc 命令行客户端提供了启动、停止和重启应用程序的命令。在本配方中，你将学习如何使用 rhc 执行这些命令。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本配方逐步操作，你需要在机器上安装 rhc。此外，我们将使用 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方中创建的 OpenShift
    应用程序。
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To start an application, run the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动应用程序，请运行以下命令：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To stop an application, run the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止应用程序，请运行以下命令：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To restart an application, run the following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要重启应用程序，请运行以下命令：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `--app` option is not required if you are running the command from within
    the application Git repository. When you run the command within the repository,
    rhc will find the domain name and the application name from the `.git/config`
    Git repository configuration file. It uses the `git config --get rhc.domain-name`
    command to find the domain name and `git config –get rhc.app-name` to find the
    application name.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在应用程序的 Git 仓库中运行命令，则 `--app` 选项不是必需的。当你在仓库中运行命令时，rhc 会从 `.git/config` Git
    仓库配置文件中找到域名和应用程序名称。它使用 `git config --get rhc.domain-name` 命令来找到域名，使用 `git config
    --get rhc.app-name` 来找到应用程序名称。
- en: How it works…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The rhc start/stop/restart app commands allow you to manage the application
    using rhc. The rhc client makes a POST HTTP request to stop the application, which
    stops the web and add-on cartridges. Every OpenShift gear has an executable called
    the `gear` available on it. When the server receives the POST request, it executes
    the `gear stop` command to stop the PHP 5.4 cartridge. After the application has
    successfully stopped, the `curl` request to the application URL will return a
    503 error:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: rhc 启动/停止/重启应用程序的命令让你可以使用 rhc 管理应用程序。rhc 客户端发出一个 POST HTTP 请求来停止应用程序，从而停止 Web
    插件和附加插件。每个 OpenShift gear 上都有一个可执行文件叫做 `gear`。当服务器接收到 POST 请求时，它会执行 `gear stop`
    命令来停止 PHP 5.4 插件。在应用程序成功停止后，向应用程序 URL 发出的 `curl` 请求将返回 503 错误：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `rhc start-app` command makes a POST HTTP request to start the application.
    The OpenShift server will receive the POST request and invoke the `gear start`
    command on the application gear. The `gear start` command will first start all
    the add-on cartridges before starting the web cartridge.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc start-app` 命令会发出一个 POST HTTP 请求来启动应用程序。OpenShift 服务器接收到 POST 请求后，会在应用程序
    gear 上调用 `gear start` 命令。`gear start` 命令会首先启动所有附加插件，然后才启动 Web 插件。'
- en: The `rhc restart-app` command first stops the application by invoking the `gear
    stop` command on the application gear, and then starts the application by calling
    the `gear start` command on the application gear.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc restart-app` 命令首先通过在应用程序 gear 上调用 `gear stop` 命令来停止应用程序，然后通过在应用程序 gear
    上调用 `gear start` 命令来启动应用程序。'
- en: There's more…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'The `rhc stop-app` command only stops the web and add-on cartridge processes,
    but if you want to kill all the processes running in your application gear, you
    should use the `rhc force-stop-app` command. This command will kill all the processes
    running inside the gear. This is very useful when people start running their own
    processes inside the application. In those cases, the rhc app-stop command will
    not help:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc stop-app` 命令仅停止 Web 插件和附加插件进程，但如果你想终止应用程序 gear 中运行的所有进程，你应该使用 `rhc force-stop-app`
    命令。这个命令会终止 gear 中运行的所有进程。当有人在应用程序中运行自己的进程时，这个命令非常有用。在这种情况下，rhc app-stop 命令无法起作用：'
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See also
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方'
- en: The *Viewing application details* recipe
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序详细信息* 配方'
- en: Adding and managing add-on cartridges
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和管理附加插件
- en: In the *Creating an OpenShift application using the rhc command-line client*
    recipe, you learned how to create a new OpenShift application using a web cartridge.
    Apart from web cartridges, OpenShift also supports a number of add-on cartridges.
    These cartridges provide functionalities, such as databases, monitoring, cron
    jobs, database web clients, and others.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方中，你学习了如何使用 Web 插件创建一个新的 OpenShift 应用程序。除了
    Web 插件，OpenShift 还支持多种附加插件。这些插件提供了数据库、监控、定时任务、数据库 Web 客户端等功能。
- en: In this recipe, you will learn how to install the MySQL 5.5 cartridge to the
    PHP 5.4 application that you created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，您将学习如何将 MySQL 5.5 插件安装到您在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方中创建的 PHP
    5.4 应用程序上。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To complete this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，您需要在您的机器上安装 rhc。同时，我们将使用在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方中创建的 OpenShift
    应用程序。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To add the MySQL 5.5 cartridge to our application, run the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 MySQL 5.5 插件添加到我们的应用程序，请运行以下命令：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you want to start a cartridge, run the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想启动插件，请运行以下命令：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To stop a cartridge, run the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止一个插件，请运行以下命令：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To restart a cartridge, run the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要重启一个插件，请运行以下命令：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can also view a cartridge status using the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用以下命令查看插件状态：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, to remove a cartridge, run the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要移除插件，请运行以下命令：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `--confirm` option is used to confirm the cartridge removal. If you don't
    specify the`--confirm` option, OpenShift will ask you to confirm your action.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`--confirm` 选项用于确认插件移除。如果您没有指定 `--confirm` 选项，OpenShift 会要求您确认操作。'
- en: How it works…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'All the cartridge-specific commands are available under `rhc cartridge`. To
    view all the actions you can perform on a cartridge, run the following command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所有与插件相关的命令都可以在 `rhc cartridge` 下找到。要查看您可以在插件上执行的所有操作，请运行以下命令：
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `rhc` `cartridge-add` command makes an HTTP POST request to add the MySQL
    5.5 cartridge to the `myapp` application. The command-line tool runs within the
    context of the current directory of your command line and interacts with OpenShift
    REST API. This helps you to get away with specifying the application name using
    the `--app` option with every command. The server receives the POST request and
    installs the MySQL binary on the application gear. After successfully creating
    the application, you will receive the following result:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc` `cartridge-add` 命令发出一个 HTTP POST 请求，将 MySQL 5.5 插件添加到 `myapp` 应用程序中。该命令行工具在当前命令行目录的上下文中运行，并与
    OpenShift REST API 进行交互。这样可以避免在每个命令中都使用 `--app` 选项指定应用程序名称。服务器接收到 POST 请求并在应用程序的
    gear 上安装 MySQL 二进制文件。成功创建应用程序后，您将收到以下结果：'
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The rest of the commands are self-explanatory, so they require little discussion.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的命令不言自明，因此不需要太多讨论。
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please be aware that the `rhc remove-cartridge` command is an irreversible action,
    and you *cannot* recover data after removing the cartridge.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`rhc remove-cartridge` 命令是不可逆操作，且您在移除插件后 *无法* 恢复数据。
- en: There's more…
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'You can also view the details of a cartridge using the `rhc cartridge` command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `rhc cartridge` 命令查看插件的详细信息：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See more
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看更多
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方'
- en: The *Viewing application details* recipe
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序详情* 配方'
- en: The *Adding a cron cartridge to an application* recipe
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*向应用程序添加 cron 插件* 配方'
- en: Adding a cron cartridge to an application
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向应用程序添加 cron 插件
- en: In this recipe, you will learn how to add the cron add-on cartridge to your
    application. The cron cartridge will write the output of the `quota` command to
    a file every hour. The database and other cartridges will be covered later in
    this book.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将学习如何将 cron 插件添加到您的应用程序中。cron 插件将每小时将 `quota` 命令的输出写入文件。数据库和其他插件将在本书后续部分进行讲解。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To prepare for this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备此配方，您需要在您的机器上安装 rhc。同时，我们将使用在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方中创建的 OpenShift
    应用程序。
- en: How to do it…
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to add a cron cartridge to your application:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将 cron 插件添加到您的应用程序：
- en: 'Open a new command-line terminal and run the following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令行终端并运行以下命令：
- en: '[PRE27]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a new file `quota.txt` in the application root directory and populate
    it with the following code. On a *nix machine, you can use the `cat` command,
    as shown in the following command line:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序根目录下创建一个新的 `quota.txt` 文件，并用以下代码填充它。在 *nix 系统上，你可以使用 `cat` 命令，如以下命令行所示：
- en: '[PRE28]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: On Windows machines, you can use filesystem explorer to create a new file. After
    creating the file, write `# Quota File` to it.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Windows 系统上，你可以使用文件资源管理器创建新文件。创建文件后，写入 `# Quota File`。
- en: 'After adding the cron cartridge, create a new file named `quota.sh` in the
    `.openshift/cron/hourly` folder, and add the following content to it:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 cron 插件后，在 `.openshift/cron/hourly` 文件夹中创建一个名为 `quota.sh` 的新文件，并将以下内容添加到其中：
- en: '[PRE29]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Make the `quota.sh` script executable by running the following command. On
    *nix machines, you can run the following command:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令使 `quota.sh` 脚本可执行。在 *nix 系统上，你可以运行以下命令：
- en: '[PRE30]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'On Windows machines, you have to use the following command as the chmod command
    is not available on them:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Windows 系统上，由于没有 chmod 命令，你必须使用以下命令：
- en: '[PRE31]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the `quota.sh` script to the Git repository, and then commit the changes
    to the local Git repository:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `quota.sh` 脚本添加到 Git 仓库中，然后将更改提交到本地 Git 仓库：
- en: '[PRE32]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Push the changes to OpenShift service:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到 OpenShift 服务：
- en: '[PRE33]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: After the changes are deployed, you will see the quota information at `http://myapp-{domain-name}.rhcloud.com/quota.txt`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署更改后，你将在 `http://myapp-{domain-name}.rhcloud.com/quota.txt` 查看配额信息。
- en: How it works…
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Every OpenShift application has a cron directory under the `.openshift` directory.
    This directory is used to define jobs that should run every minute, hourly, daily,
    weekly, or monthly. Cron jobs are not invoked until you add the cron cartridge
    to the application using the `rhc add-cartridge` command. They are useful to automatically
    perform tasks in the background at regular intervals. You can use them to take
    database backups, clean up log files, send e-mails, and much more.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 OpenShift 应用程序在 `.openshift` 目录下都有一个 cron 目录。这个目录用于定义每分钟、每小时、每天、每周或每月运行的作业。在你使用
    `rhc add-cartridge` 命令将 cron 插件添加到应用程序之前，cron 作业不会被触发。它们非常适用于定期在后台自动执行任务。你可以用它们来执行数据库备份、清理日志文件、发送电子邮件等等。
- en: 'In step 1, you added the cron cartridge to the `myapp` application. Next, in
    step 3, you defined a `quota.sh` bash script that should run every hour. The `quota.sh`
    script appends the date and quota information to the `quota.txt` file in the `php`
    directory under the OpenShift repository location. `$OPENSHIFT_REPO_DIR` is an
    environment variable that points to the location of the application source code
    directory. In step 4, you made the `quota.sh` script executable, without which
    the OpenShift service would not be able to execute the script. In the next three
    steps, you committed the change to the local Git repository and then pushed the
    changes to your application Git repository hosted on the OpenShift application
    gear. OpenShift will first stop the entire cartridge, build the application, deploy
    it to the Apache server, and then finally start all the cartridges. After the
    cron cartridge is started, it will write to the `quota.txt` file every hour. You
    can view the quota details by going to `http://myapp-{domain-name}.rhcloud.com/quota.txt`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 步中，你已将 cron 插件添加到 `myapp` 应用程序中。接下来，在第 3 步中，你定义了一个每小时运行的 `quota.sh` bash
    脚本。`quota.sh` 脚本会将日期和配额信息附加到 OpenShift 仓库位置下 `php` 目录中的 `quota.txt` 文件中。`$OPENSHIFT_REPO_DIR`
    是一个环境变量，指向应用程序源代码目录的位置。在第 4 步中，你使 `quota.sh` 脚本可执行，若没有此步骤，OpenShift 服务将无法执行该脚本。在接下来的三步中，你将更改提交到本地
    Git 仓库，然后将更改推送到托管在 OpenShift 应用程序 gear 上的应用程序 Git 仓库。OpenShift 会先停止整个插件，构建应用程序，将其部署到
    Apache 服务器上，然后最后启动所有插件。cron 插件启动后，它将每小时写入 `quota.txt` 文件。你可以通过访问 `http://myapp-{domain-name}.rhcloud.com/quota.txt`
    查看配额详情：
- en: '[PRE34]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default timeout for a cron job is 5 minutes, which means that your job should
    be complete within 5 minutes, or else it will be terminated.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，cron 作业的超时时间为 5 分钟，这意味着你的作业应该在 5 分钟内完成，否则将被终止。
- en: 'You can run longer jobs in the background using `nohup`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `nohup` 在后台运行更长时间的作业：
- en: '[PRE35]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: There's more…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'OpenShift currently only supports scheduling jobs every minute, or at hourly,
    daily, weekly, or monthly intervals. To run a job at a specific time or specific
    intervals, such as running a daily job at 8:30 PM, create a job that runs every
    minute, and then add the following code. This job will execute itself only when
    the time is 8:30 PM:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 当前只支持每分钟、每小时、每天、每周或每月间隔调度任务。如果你希望在特定时间或特定间隔运行任务，例如在每天晚上 8:30 运行一个任务，你可以创建一个每分钟运行的任务，然后添加以下代码。该任务只有在
    8:30 PM 时才会执行：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: See also
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用程序* 这篇教程'
- en: Using downloadable cartridges with OpenShift applications
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可下载插件与 OpenShift 应用程序
- en: In this recipe, you will learn how to use a third-party downloadable cartridge
    with OpenShift applications.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，你将学习如何将第三方可下载插件与 OpenShift 应用程序一起使用。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本教程进行操作，你需要在你的机器上安装 rhc。同时，我们将使用在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 这篇教程中创建的
    OpenShift 应用程序。
- en: How to do it…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'To add the Monit downloadable cartridge, use the `rhc add-cartridge` command
    as shown in the following command. Please replace `email@address.com` with your
    valid email address:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 Monit 可下载插件，请使用如下命令中的 `rhc add-cartridge` 命令。请将 `email@address.com` 替换为你有效的电子邮件地址：
- en: '[PRE37]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `--env` option is used to set the environment variable required by this
    cartridge. The cartridge required the `MONIT_ALERT_EMAIL` environment variable,
    which is used to configure e-mail that would be used to send alert notifications.
    Environment variables will be covered in detail in the *Setting application-specific
    environment variables* recipe.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`--env` 选项用于设置此插件所需的环境变量。该插件需要 `MONIT_ALERT_EMAIL` 环境变量，用于配置将用于发送警报通知的电子邮件。环境变量将在
    *设置应用程序特定环境变量* 这篇教程中详细介绍。'
- en: How it works…
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: To install a third-party downloadable cartridge to your application, you need
    to provide the rhc command-line client with the URL to its manifest file called
    `manifest.yml`. This file exists under the `metadata` directory in the cartridge
    source repository, and contains a URL pointing to the actual contents of the cartridge.
    The list of actively maintained third-party cartridges can be found at [https://www.openshift.com/developers/download-cartridges](https://www.openshift.com/developers/download-cartridges).
    Another good way to find downloadable cartridges is to search GitHub ([https://github.com/search?q=%22openshift+cartridge%22](https://github.com/search?q=%22openshift+cartridge%22)),
    as most cartridges are hosted on GitHub.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个第三方可下载的插件安装到你的应用程序中，你需要提供 `rhc` 命令行客户端该插件清单文件的 URL，该文件名为 `manifest.yml`。此文件位于插件源代码库中的
    `metadata` 目录下，并包含一个指向插件实际内容的 URL。可以在 [https://www.openshift.com/developers/download-cartridges](https://www.openshift.com/developers/download-cartridges)
    找到一个积极维护的第三方插件列表。另一种寻找可下载插件的好方法是搜索 GitHub ([https://github.com/search?q=%22openshift+cartridge%22](https://github.com/search?q=%22openshift+cartridge%22))，因为大多数插件托管在
    GitHub 上。
- en: 'You can later remove the cartridge by running the `rhc remove-cartridge` command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以稍后通过运行 `rhc remove-cartridge` 命令来移除插件：
- en: '[PRE38]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: See also
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用程序* 这篇教程'
- en: The *Adding and managing add-on cartridges* recipe
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和管理附加插件* 这篇教程'
- en: The *Adding a cron cartridge to an application* recipe
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将 cron 插件添加到应用程序* 这篇教程'
- en: Viewing application details
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看应用程序详细信息
- en: In this recipe, you will learn how to view all the details related to an application.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，你将学习如何查看与应用程序相关的所有详细信息。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本教程进行操作，你需要在你的机器上安装 rhc。同时，我们将使用在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 这篇教程中创建的
    OpenShift 应用程序。
- en: How to do it…
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'The `rhc show-app` command can be used to view the information details about
    the application, as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc show-app` 命令可以用来查看应用程序的详细信息，操作如下：'
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `--app` option is not required if you are running the command within the
    application Git repository.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在应用程序 Git 仓库内运行命令，则不需要 `--app` 选项。
- en: How it works…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'The `rhc show-app` command returns all the details about an application. The
    output of the command is shown as follows. The details include the application
    creation time, application name, public URL, Git repository URL, SSH URL, and
    details about all the cartridges:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc show-app`命令返回应用程序的所有详细信息。命令的输出如下所示。详细信息包括应用程序的创建时间、应用程序名称、公共URL、Git仓库URL、SSH
    URL以及所有cartridge的详细信息：'
- en: '[PRE40]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can also view the state of the application by passing in the `--state`
    option, as shown in the following command. The valid application states are `started`,
    `stopped`, and `building`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过传入`--state`选项来查看应用程序的状态，如下所示的命令。有效的应用程序状态包括`started`（启动）、`stopped`（停止）和`building`（构建中）：
- en: '[PRE41]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If you only want to view the SSH information and state of all the gears in
    the application, you can use the `--gears` option with the `rhc app-show` command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想查看应用程序中所有gear的SSH信息和状态，可以使用`--gears`选项与`rhc app-show`命令一起：
- en: '[PRE42]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The previous command is very useful when you are working with scalable applications,
    as it provides you with information about all the application gears with a single
    command.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令在处理可扩展应用程序时非常有用，因为它通过单个命令提供了所有应用程序gear的信息。
- en: See more
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看更多
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用rhc命令行客户端创建OpenShift应用程序*配方'
- en: The *Cloning the application Git repository using rhc* recipe
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用rhc克隆应用程序Git仓库*配方'
- en: Cloning the application Git repository using rhc
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用rhc克隆应用程序Git仓库
- en: In the *Cloning the application to the local machine* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*,
    you learned how to clone the Git repository using the Git command-line tool. This
    recipe had a couple of steps—first, to copy the Git repository URL from the web
    console and second, to use the `git-clone` command to clone the Git repository.
    The rhc command-line tool can help you save some keystrokes. In this recipe, you
    will learn how to use rhc to clone the Git repository.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](part0014_split_000.html#page "第1章. 开始使用OpenShift")中，*将应用程序克隆到本地机器*配方，*开始使用OpenShift*，你学习了如何使用Git命令行工具克隆Git仓库。这个配方有几个步骤——首先，从Web控制台复制Git仓库的URL，然后使用`git-clone`命令克隆Git仓库。rhc命令行工具可以帮助你节省一些按键。在这个配方中，你将学习如何使用rhc来克隆Git仓库。
- en: Getting ready
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will use the OpenShift application created in The *Creating an OpenShift application
    using the rhc command-line client* recipe.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，你需要在你的机器上安装rhc。此外，我们将使用在*使用rhc命令行客户端创建OpenShift应用程序*配方中创建的OpenShift应用程序。
- en: How to do it…
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To clone the `myapp` application on your local machine using rhc, run the following
    command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用rhc在本地机器上克隆`myapp`应用程序，运行以下命令：
- en: '[PRE43]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How it works…
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `rhc git-clone` command first makes a HTTP GET request to fetch the details
    about the `myapp` application. The application details include the Git repository
    URL. The `rhc git-clone` command then uses the `git clone <GIT_REPOSITORY_URL>`
    command to clone the application.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc git-clone`命令首先发送一个HTTP GET请求以获取关于`myapp`应用程序的详细信息。应用程序的详细信息包括Git仓库URL。然后，`rhc
    git-clone`命令使用`git clone <GIT_REPOSITORY_URL>`命令来克隆该应用程序。'
- en: Note
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `rhc git-clone` command requires Git to be installed on your machine to
    work.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc git-clone`命令需要在你的机器上安装Git才能正常工作。'
- en: There's more…
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'You can also tell the `rhc git-clone` command to clone the repository to a
    specific directory using the `--repo` option. The following command will clone
    the repository inside the `tmp/myapp` folder:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以告诉`rhc git-clone`命令使用`--repo`选项将仓库克隆到特定目录。以下命令将在`tmp/myapp`文件夹中克隆仓库：
- en: '[PRE44]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: See more
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看更多
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用rhc命令行客户端创建OpenShift应用程序*配方'
- en: The *Cloning the application to the local machine* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](part0014_split_000.html#page "第1章. 开始使用OpenShift")中，*将应用程序克隆到本地机器*配方，*开始使用OpenShift*。
- en: SSH into the application gear using rhc
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用rhc通过SSH连接到应用程序的gear
- en: In this recipe, you will learn how to use rhc to SSH into the application gear.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将学习如何使用rhc通过SSH连接到应用程序的gear。
- en: Getting ready
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to complete this recipe, you will need rhc installed on your machine.
    Also, you will need to make use of the OpenShift application created in The *Creating
    an OpenShift application using the rhc command-line client* recipe.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本食谱，你需要在你的机器上安装 rhc。此外，你还需要使用在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 食谱中创建的 OpenShift
    应用程序。
- en: How to do it…
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To SSH into the application gear, open a new command-line terminal and run
    the following command:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要 SSH 登录到应用程序 gear，请打开一个新的命令行终端并运行以下命令：
- en: '[PRE45]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `--app` option is not required if you are running the command within the
    application Git repository.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在应用程序 Git 仓库中运行命令，则无需使用 `--app` 选项。
- en: How it works…
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Every OpenShift application gear acts and behaves like a virtual server that
    you can access using SSH. A gear is assigned a unique user ID and is associated
    with a SELinux context. When you run the `rhc ssh` command, a secure communication
    channel is opened between the node hosting the gear and the local machine where
    you are presented with a limited shell within the environment, as shown in the
    following command. I have removed part of the output for brevity:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 OpenShift 应用程序 gear 都像一个虚拟服务器，你可以通过 SSH 访问它。每个 gear 都会分配一个唯一的用户 ID，并与 SELinux
    上下文相关联。当你运行 `rhc ssh` 命令时，会在托管 gear 的节点与本地机器之间打开一个安全通信通道，并在环境中提供一个有限的 shell，如下所示的命令。我已简化部分输出：
- en: '[PRE46]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'If you run the `ls` command, you will only see all the directories available
    under your application user home directory:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行 `ls` 命令，你将只看到应用程序用户主目录下所有可用的目录：
- en: '[PRE47]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: There's more…
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'By default, the SSH connection will timeout after 5 minutes of inactivity,
    and you will be logged out of the SSH session. You can turn off connection timeout
    by unsetting the TMOUT environment variable:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，SSH 连接将在 5 分钟的非活动后超时，你将被注销出 SSH 会话。你可以通过取消设置 TMOUT 环境变量来关闭连接超时：
- en: '[PRE48]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If other people access your machine and you don't want them to access your OpenShift
    application by just typing the `rhc ssh` command, I would recommend you use the
    SSH key passphrase to restrict access. We discussed SSH key passphrases in the
    *Working with the SSH key passphrases* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其他人访问你的机器，而你不希望他们仅通过输入 `rhc ssh` 命令来访问你的 OpenShift 应用程序，我建议你使用 SSH 密钥密码短语来限制访问。我们在
    [第 1 章](part0014_split_000.html#page "第 1 章. 开始使用 OpenShift") 的 *使用 SSH 密钥密码短语*
    食谱中讨论了 SSH 密钥密码短语，*开始使用 OpenShift*。
- en: See more
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看更多
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用程序* 食谱'
- en: The *Uploading SSH keys using the web console* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 1 章](part0014_split_000.html#page "第 1 章. 开始使用 OpenShift") 中的 *通过 Web 控制台上传
    SSH 密钥* 食谱，*开始使用 OpenShift*'
- en: The *Working with the SSH key passphrases* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 1 章](part0014_split_000.html#page "第 1 章. 开始使用 OpenShift") 的 *使用 SSH 密钥密码短语*
    食谱中，*开始使用 OpenShift*
- en: Running a command in the application's SSH session using rhc
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序的 SSH 会话中使用 rhc 运行命令
- en: In this recipe, you will learn how to view the gear directory listing without
    performing SSH into the server using rhc.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，你将学习如何在不使用 rhc 执行 SSH 登录服务器的情况下查看 gear 目录列表。
- en: Getting ready
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will use the OpenShift application created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此食谱，你需要在你的机器上安装 rhc。此外，我们将使用在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 食谱中创建的 OpenShift
    应用程序。
- en: How to do it…
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To run the `ls` command without performing SSH into the application server,
    you should run the following command:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要在不执行 SSH 登录到应用程序服务器的情况下运行 `ls` 命令，你应该运行以下命令：
- en: '[PRE49]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The `rhc ssh` command is a short hand for `rhc app-ssh`. Both these commands
    allow you to SSH into an application gear.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc ssh` 命令是 `rhc app-ssh` 的简写。这两个命令都允许你 SSH 登录到应用程序 gear。'
- en: How it works…
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `rhc app-ssh` command internally uses the SSH command-line client to connect
    with the application gear. With the SSH command-line client, you can specify the
    command:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc app-ssh` 命令内部使用 SSH 命令行客户端连接到应用程序 gear。通过 SSH 命令行客户端，你可以指定命令：'
- en: '[PRE50]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The rhc command-line client provides a `--command` option that allows you to
    specify a command you want to run on the server:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc` 命令行客户端提供了一个 `--command` 选项，允许你指定要在服务器上运行的命令：'
- en: '[PRE51]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: There's more…
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If you want to run the command on all the gears in your application, you should
    use the`--gears` option with the `rhc app-ssh` command. This would be useful when
    working with scalable applications. Have a look at the following command:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在应用的所有 gears 上运行命令，应该在 `rhc app-ssh` 命令中使用 `--gears` 选项。当处理可扩展应用时，这将非常有用。看看以下命令：
- en: '[PRE52]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: See more
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看更多
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用* 配方'
- en: The *SSH into the application gear using rhc* recipe
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc SSH 连接到应用 gear* 配方'
- en: Setting application-specific environment variables
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置特定于应用的环境变量
- en: It is very common that people deploy their application in multiple environments,
    such as testing, staging, and production. Usually, the configuration differs between
    these environments to ensure that you are using the right service for the right
    environment. Consider an example where you want to send e-mails in your application.
    In the production environment, you would like to use the cloud e-mail service,
    such as Sendmail (accessible at [https://www.sendmail.com/](https://www.sendmail.com/)),
    but in the development environment, you would like to use an open source version
    of Sendmail. Environment variables provide a programming language and operating-system-agnostic
    solution to these kinds of problems.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 很常见的情况是人们将他们的应用部署到多个环境中，如测试、预发布和生产环境。通常，这些环境之间的配置会有所不同，以确保在正确的环境中使用正确的服务。考虑一个例子：你想在应用中发送电子邮件。在生产环境中，你可能希望使用云邮件服务，如
    Sendmail（可通过 [https://www.sendmail.com/](https://www.sendmail.com/) 访问），而在开发环境中，你可能希望使用开源版本的
    Sendmail。环境变量为这些问题提供了与编程语言和操作系统无关的解决方案。
- en: Hard coding configuration values in the source code is never a good idea, as
    it leads to strong coupling between your code and the values, compromising the
    security of your app if your code falls into the wrong hands. The environment
    variables allow you to use the same application code in different environments
    leading to portable code.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 将配置值硬编码在源代码中永远不是一个好主意，因为这会导致你的代码和这些值之间的强耦合，若代码落入不法之手，还会危及应用的安全性。环境变量让你可以在不同环境中使用相同的应用代码，从而实现可移植的代码。
- en: 'OpenShift also exposes some environment variables you should use in your application,
    rather than hard coding their values. For example, if you want to write a file
    in your OpenShift application, you should use the `OPENSHIFT_DATA_DIR` environment
    variable to access the location of the persistent directory. Every OpenShift cartridge
    also exposes its own set of environment variables. For example, the PostgreSQL
    cartridge exposes environment variables for the username, password, host, port,
    and so on. You should not hard code the database configuration properties in your
    source code but take advantage of environment variables. You can view all the
    OpenShift and cartridge-specific environment variables by running the following
    command. The `rhc ssh` command is a shorthand for `rhc app-ssh`. Both these commands
    allow you to SSH into an application gear:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 还暴露了一些你应该在应用程序中使用的环境变量，而不是将其值硬编码。例如，如果你想在 OpenShift 应用中写入文件，你应该使用
    `OPENSHIFT_DATA_DIR` 环境变量来访问持久目录的位置。每个 OpenShift 卡带也会暴露自己的环境变量。例如，PostgreSQL 卡带暴露了用于用户名、密码、主机、端口等的环境变量。你不应将数据库配置属性硬编码在源代码中，而应利用环境变量。你可以通过运行以下命令查看所有
    OpenShift 和特定卡带的环境变量。`rhc ssh` 命令是 `rhc app-ssh` 的简写。这两个命令都允许你通过 SSH 连接到应用的 gear：
- en: '[PRE53]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: As you can see in the result of the previous command, the list also includes
    environment variables specific to the cron cartridge that we added in the previous
    recipe.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前一个命令的结果中看到的，列表中还包括我们在上一个配方中添加的 cron 卡带的特定环境变量。
- en: In this recipe, you will learn how you can create application-specific environment
    variables.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，你将学习如何创建特定于应用的环境变量。
- en: Getting ready
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To complete this recipe, you will need rhc installed on your machine. Also,
    you will need to use the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，你需要在机器上安装 rhc。此外，你还需要使用在 *使用 rhc 命令行客户端创建 OpenShift 应用* 配方中创建的 OpenShift
    应用。
- en: How to do it…
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to set application-specific environment variables:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来设置特定于应用程序的环境变量：
- en: 'To create an application-specific environment variable, open a new command-line
    terminal and run the following command:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个特定于应用程序的环境变量，打开一个新的命令行终端并运行以下命令：
- en: '[PRE54]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'To test the environment variable, open the`index.php` file in the `myapp` folder,
    as follows:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试环境变量，打开 `myapp` 文件夹中的 `index.php` 文件，如下所示：
- en: '[PRE55]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Then, make the following changes in the file:'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，在文件中进行以下更改：
- en: '[PRE56]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Finally, commit the changes and push it into application gear:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，提交更改并将其推送到应用程序 gear：
- en: '[PRE58]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: After a successful push, go to `http://myapp-osbook.rhcloud.com/` to view the
    change.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功推送后，访问 `http://myapp-osbook.rhcloud.com/` 来查看更改。
- en: How it works…
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `rhc env-set` command allows a developer to set their application-specific
    environment variables. This is what happens when you run the `rhc env-set` command:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc env-set` 命令允许开发者设置特定于应用程序的环境变量。运行 `rhc env-set` 命令时，会发生以下操作：'
- en: The `rhc` command-line client makes an HTTP POST request with the environment
    variable data in the body.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rhc` 命令行客户端会发出一个 HTTP POST 请求，环境变量数据包含在请求体中。'
- en: The OpenShift broker receives the request and performs some validation. If the
    validation check fails, the user would be presented with an error message.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenShift 经纪人接收到请求并进行一些验证。如果验证失败，用户将看到错误消息。
- en: After passing the validation checks, the broker will create tasks to update
    all the application gears with a new environment variable.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过验证检查后，经纪人将创建任务来更新所有应用程序 gear 的新环境变量。
- en: 'Once done, the user will be shown the success message:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，用户将看到成功消息：
- en: '[PRE59]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The environment variable will not be available until you restart the application.
    So, after setting the environment, restart the app using the `rhc app-restart`
    command.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量在你重新启动应用程序之前是不可用的。因此，在设置环境变量后，使用 `rhc app-restart` 命令重启应用程序。
- en: 'Not only can you set one environment variable at a time, but you can also set
    multiple environment variables in one go:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅可以一次设置一个环境变量，还可以一次设置多个环境变量：
- en: '[PRE60]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'There is another alternative to setting up multiple environment variables that
    use a file to store environment variables and the passing of the file to the `rhc
    env-set` command. You should create a new file named `envs.txt` and enter one
    environment variable per line:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 设置多个环境变量的另一种替代方法是使用文件存储环境变量，并将该文件传递给 `rhc env-set` 命令。你应该创建一个名为 `envs.txt` 的新文件，并在每一行输入一个环境变量：
- en: '[PRE61]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now, you can pass the `envs.txt` file to the `rhc env-set` command, as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将 `envs.txt` 文件传递给 `rhc env-set` 命令，如下所示：
- en: '[PRE62]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'If you want to view all the application-specific environment variables, run
    the following command:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看所有应用程序特定的环境变量，可以运行以下命令：
- en: '[PRE63]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: There's more…
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'To update the environment variable value, you should run the `rhc env-set`
    command with a new value, as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新环境变量的值，你应该运行 `rhc env-set` 命令并提供新值，如下所示：
- en: '[PRE64]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'To remove an environment variable, run the following command:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除环境变量，运行以下命令：
- en: '[PRE65]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: See more
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看更多
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用程序* 教程'
- en: The *Viewing application details* recipe
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序详细信息* 教程'
- en: Taking and restoring application backups
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份和恢复应用程序
- en: In the real world, things can go wrong at any time, and you should always have
    a backup of your entire application that you can apply to restore the application
    to a happy state. An OpenShift application consists of a Git repository, one or
    more databases, environment variables, and a persistent data directory you should
    make a backup of. You can make database backups using command-line tools, such
    as `mysqldump`, `pg_dump`, and `mongoexport`, but those only make backups of the
    respective databases. We will cover database backups in later chapters. In this
    recipe, you will learn how to use rhc to make and restore backups.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，事情随时可能出错，你应该始终备份整个应用程序，以便在出现问题时可以恢复应用程序到正常状态。一个 OpenShift 应用程序由 Git 仓库、一个或多个数据库、环境变量和一个你应该备份的持久化数据目录组成。你可以使用命令行工具，如
    `mysqldump`、`pg_dump` 和 `mongoexport` 来进行数据库备份，但这些工具仅备份各自的数据库。我们将在后面的章节中讨论数据库备份。在本教程中，你将学习如何使用
    rhc 进行备份和恢复。
- en: Getting ready
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to prepare yourself for this recipe, you will need rhc installed on
    your machine. Also, you will need to make use of the application created in the
    *Creating an OpenShift application using the rhc command-line client* recipe.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个配方，你需要在你的机器上安装 rhc。同时，你还需要利用在 *使用 rhc 命令行客户端创建 OpenShift 应用* 配方中创建的应用。
- en: How to do it…
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To make a backup of your application, open a command-line terminal and run
    the following command:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为应用创建备份，请打开命令行终端并运行以下命令：
- en: '[PRE66]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Make a change to `index.php` under the `php` directory. Change the header to
    the following:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改 `php` 目录下的 `index.php`，将标题更改为以下内容：
- en: '[PRE67]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Commit the change to the local repository and push the changes to the application''s
    remote Git repository to deploy the changes, as follows:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改提交到本地仓库，并将更改推送到应用的远程 Git 仓库以部署更改，如下所示：
- en: '[PRE68]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Go to `http://myapp-{domain-name}.rhcloud.com/` to view your change.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 `http://myapp-{domain-name}.rhcloud.com/` 查看你的更改。
- en: 'To restore your application from the backup, run the following command:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从备份中恢复应用，运行以下命令：
- en: '[PRE69]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Now, after applying the backup, if you visit the application URL at `http://myapp-{domain-name}.rhcloud.com/`,
    you will notice that the change we made got reverted, as we applied the snapshot
    that was taken before making the change in step 2.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在应用备份后，如果你访问 `http://myapp-{domain-name}.rhcloud.com/`，你会注意到我们所做的更改已被恢复，因为我们应用了在第2步更改之前所拍摄的快照。
- en: How it works…
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Let''s now understand what you did in the steps mentioned in the previous section.
    In step 1, you ran the `rhc snapshot-save` command to make the application backup.
    The `rhc` tool first retrieves the application details by making an HTTP GET request
    to the OpenShift broker. The application details include the SSH URL of the application.
    After getting the SSH URL, the `rhc` command-line client executes a `ssh <application_ssh_url>''snapshot''>../backup/myapp-backup.tar.gz`
    command to back up the application. This uses the SSH command-line functionality
    of running a command on a remote server. The output of the snapshot command is
    written to the `myapp-backup.tar.gz` file on your local machine. This `rhc snapshot-save`
    command does not require the`--filepath` option and will, by default, create a
    TAR file with a name as that of the application and write it to the current directory.
    This command first stops the application before creating a backup of all the directories
    under your application gear home directory. This includes the application Git
    repository, data directory, all the cartridges and their data, and environment
    variables. You can list the content of the `tar.gz` file using the following command:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来了解你在前面部分提到的步骤中做了什么。在第1步，你运行了 `rhc snapshot-save` 命令来创建应用备份。`rhc` 工具首先通过向
    OpenShift 经纪人发送 HTTP GET 请求来获取应用的详细信息。应用详细信息包括应用的 SSH URL。获取 SSH URL 后，`rhc` 命令行客户端执行了
    `ssh <application_ssh_url>'snapshot'>../backup/myapp-backup.tar.gz` 命令来备份应用。这使用了
    SSH 命令行功能在远程服务器上运行命令。快照命令的输出会写入本地机器上的 `myapp-backup.tar.gz` 文件。该 `rhc snapshot-save`
    命令不需要 `--filepath` 选项，默认会创建一个与应用同名的 TAR 文件，并写入当前目录。该命令首先停止应用，然后创建应用 Gear 主目录下所有目录的备份。这包括应用
    Git 仓库、数据目录、所有 cartridge 及其数据以及环境变量。你可以使用以下命令列出 `tar.gz` 文件的内容：
- en: '[PRE70]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Through step 2 to step 4 of the previous list of steps to be performed, you
    made a small change in `index.php`, pushed the change to your application gear,
    and then viewed the change by going to your application URL. This is done in order
    to test the restore functionality.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面列表中的第2步到第4步，你在 `index.php` 中做了一些小更改，将更改推送到应用的 Gear 上，然后通过访问应用 URL 查看更改。这是为了测试恢复功能。
- en: Step 5 restored the application backup you made in step 1 using the `rhc snapshot-restore`
    command. The rhc command-line client first makes the HTTP GET request to get the
    SSH URL of the application. After getting the SSH URL, the rhc command-line client
    executes the `cat '../backup/myapp-backup.tar.gz' | ssh <application_ssh_url>'restore
    INCLUDE_GIT'` command to restore the backup. The command pipes the standard output
    of the `cat` command to the standard input of the SSH command. The restore commands
    will stop the application before replacing all the directories in the application
    gear home directory with the one in the backup archive.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 第5步使用`rhc snapshot-restore`命令恢复了你在第1步中制作的应用备份。rhc命令行客户端首先发出HTTP GET请求以获取应用的SSH
    URL。获取到SSH URL后，rhc命令行客户端执行`cat '../backup/myapp-backup.tar.gz' | ssh <application_ssh_url>'restore
    INCLUDE_GIT'`命令来恢复备份。该命令将`cat`命令的标准输出通过管道传输到SSH命令的标准输入。恢复命令会在替换应用服务器主目录中的所有目录之前停止应用程序。
- en: Finally, in step 6, you verified that the change you made in step 2 was reverted,
    because you applied a backup that didn't reflect the change made in step 2.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第6步中，你验证了第2步所做的更改已经被撤销，因为你应用了一个不包含第2步更改的备份。
- en: Note
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `rhc snapshot` commands stop the application and then run the `save` or
    `restore` commands.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc snapshot`命令会停止应用程序，然后运行`save`或`restore`命令。'
- en: There's more…
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'The `rhc snapshot` commands can also take another option, which is `--ssh`.
    This can be used to specify a different SSH client and/or to pass SSH options.
    Suppose you want to print SSH debug information; you can use the SSH client `-v`
    option:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc snapshot`命令还可以接受另一个选项`--ssh`。该选项可以用来指定不同的SSH客户端和/或传递SSH选项。假设你想打印SSH调试信息，你可以使用SSH客户端的`-v`选项：'
- en: '[PRE71]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'This will print all the SSH debug information. For brevity, I am only showing
    part of the output:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印所有 SSH 调试信息。为了简洁起见，我只展示了部分输出：
- en: '[PRE72]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: See also
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用rhc命令行客户端创建OpenShift应用*教程'
- en: The *Tracking and rolling back application deployments* recipe
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*跟踪和回滚应用部署*教程'
- en: Tracking and rolling back application deployments
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪和回滚应用部署
- en: When you deploy the source code using `git push`, OpenShift executes a new build,
    creates a deployment, deploys it to the respective server, and then starts your
    application container. By default, it will only track the last deployment of your
    application, which means you can't roll back to a previous deployment. In this
    recipe, you will learn how to configure your application to track multiple deployments
    and roll back to a particular deployment.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`git push`部署源代码时，OpenShift 会执行一个新的构建，创建一个部署，将其部署到相应的服务器上，然后启动你的应用容器。默认情况下，它只会跟踪你应用的最后一次部署，这意味着你无法回滚到以前的部署。在这个教程中，你将学习如何配置你的应用来跟踪多个部署并回滚到某个特定的部署。
- en: Getting ready
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need to have rhc installed on your machine.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，你需要在机器上安装rhc。
- en: How to do it…
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to learn how to configure applications to track
    multiple deployments and roll back to a previous version:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以学习如何配置应用程序来跟踪多个部署并回滚到以前的版本：
- en: 'Create a new PHP 5.4 application just like we created in the *Creating an OpenShift
    application using the rhc command-line client* recipe, as follows:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 PHP 5.4 应用，就像我们在*使用rhc命令行客户端创建OpenShift应用*教程中创建的那样，步骤如下：
- en: '[PRE73]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'To enable an OpenShift application to track 10 deployments (for instance),
    you should run the following command:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要让一个OpenShift应用程序跟踪10个部署（例如），你应该运行以下命令：
- en: '[PRE74]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Make a change to `index.php` in the application directory:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用目录中对`index.php`进行更改：
- en: '[PRE75]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Commit the change and push the change to the application gear as follows:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改并将更改推送到应用服务器，步骤如下：
- en: '[PRE76]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: View the change at `http://myapp-{domai``n-name}.rhcloud.com`.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`http://myapp-{domai``n-name}.rhcloud.com`查看更改。
- en: 'List all the deployments tracked by the application by running the following
    command:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令列出所有由应用跟踪的部署：
- en: '[PRE77]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'To roll back to the deployment with the ID `fbaa7582`, run the following command:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要回滚到部署 ID 为`fbaa7582`的版本，运行以下命令：
- en: '[PRE78]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'You can verify that rollback has happened by again running the `rhc deployment-list`
    command:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过再次运行`rhc deployment-list`命令来验证回滚是否发生：
- en: '[PRE79]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: How it works…
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In step 1, you created a new PHP 5.4 application, and then in step 2, you configured
    the application to track 10 deployments using the `rhc app-configure` command.
    Then, from step 2 through to step 5, you made a simple change in `index.php` and
    deployed that change to the application gear. When you push the code to an application
    gear, a new deployment is created with the ID `ac5d6f39` and is stored in the
    `app-deployments` folder, under the application gear home directory. You can view
    the deployments stored under the `app-deployments` directory, as shown in the
    following command. Every deployment is stored inside a directory with its name
    as the current timestamp. The current active deployment is stored under the current
    directory:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 中，你创建了一个新的 PHP 5.4 应用程序，然后在步骤 2 中，你配置了该应用程序以使用`rhc app-configure`命令跟踪
    10 次部署。然后，从步骤 2 到步骤 5，你在`index.php`中进行了简单的更改，并将该更改部署到应用程序 gear。当你将代码推送到应用程序 gear
    时，会创建一个新的部署，ID 为`ac5d6f39`，并存储在`app-deployments`文件夹中，位于应用程序 gear 的主目录下。你可以通过以下命令查看存储在`app-deployments`目录中的部署。每个部署都存储在一个以当前时间戳命名的目录中。当前活动的部署存储在当前目录下：
- en: '[PRE80]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: In step 6, you then listed all the deployments using the `rhc deployment-list`
    command. The `rhc deployment-list` command lists down all the deployments tracked.
    The first deployment with the ID `fbaa7582` is the initial deployment that happened
    when you created the application. The second deployment with the ID `ac5d6f39`
    is the deployment that happened after making a change in `index.php`.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 6 中，你列出了所有的部署，使用了`rhc deployment-list`命令。`rhc deployment-list`命令列出了所有跟踪的部署。ID
    为`fbaa7582`的第一个部署是在你创建应用程序时发生的初始部署。ID 为`ac5d6f39`的第二个部署是在对`index.php`进行更改后发生的部署。
- en: Step 7 involved rolling back the code to deployment with the ID `fbaa7582` using
    the `rhc deployment-activate` command. Under the hoods, the `rhc deployment-activate`
    command runs the `ssh <application_ssh_url> 'gear activate --all fbaa7582'` command
    on the application gear to activate the deployment.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 7 涉及使用`rhc deployment-activate`命令将代码回滚到 ID 为`fbaa7582`的部署。在幕后，`rhc deployment-activate`命令在应用程序
    gear 上运行`ssh <application_ssh_url> 'gear activate --all fbaa7582'`命令来激活该部署。
- en: Finally, in step 8, you ran the `rhc deployment-list` command to view the information
    about the rollback that happened in step 7.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在步骤 8 中，你运行了`rhc deployment-list`命令来查看在步骤 7 中发生的回滚信息。
- en: There's more…
  id: totrans-391
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'You can also enable deployment tracking during application creation, as follows:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在应用程序创建过程中启用部署跟踪，方法如下：
- en: '[PRE81]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'You can also view application configuration details using the `rhc show-app`
    command:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`rhc show-app`命令查看应用程序的配置信息：
- en: '[PRE82]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: See also
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用程序*教程'
- en: The *Taking and restoring application backups* recipe
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*应用程序备份与恢复*教程'
- en: Configuring the default Git branch for deployment
  id: totrans-399
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置默认的 Git 分支用于部署
- en: Every OpenShift application has an associated remote Git repository. When you
    push the source code to an application gear using `git push`, you are pushing
    the source code to a Git remote named `origin` and branch named `master`. Every
    application is configured to autodeploy when code is pushed to the master branch
    on a remote origin. But it might so happen that you would like to use the master
    branch for development while using the production branch for deployment. In this
    recipe, you will learn how to configure an OpenShift application, where you will
    use a branch named `production` for deployment and a master for development.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 OpenShift 应用程序都有一个关联的远程 Git 仓库。当你使用`git push`将源代码推送到应用程序 gear 时，你实际上是将源代码推送到名为`origin`的
    Git 远程仓库，并且分支是`master`。每个应用程序都配置为在将代码推送到远程 origin 上的 master 分支时自动部署。但是，有时你可能希望使用
    master 分支进行开发，而使用生产分支进行部署。在本教程中，你将学习如何配置一个 OpenShift 应用程序，在该应用程序中，你将使用名为`production`的分支进行部署，使用`master`分支进行开发。
- en: Getting ready
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In order to complete this recipe, you will need rhc installed on your machine.
    Also, you will need to make use of the OpenShift application created in the *Creating
    an OpenShift application using the rhc command-line client* recipe.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成此教程，你需要在机器上安装 rhc。同时，你还需要使用*使用 rhc 命令行客户端创建 OpenShift 应用程序*这篇教程中创建的 OpenShift
    应用程序。
- en: How to do it…
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to configure a different branch for deployment:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以配置不同的分支用于部署：
- en: Open a command-line terminal and change the directory to the location where
    `myapp` application exists.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端，并将目录更改为`myapp`应用程序所在的位置。
- en: 'Create a new branch with the name `production` using the Git command-line client:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Git命令行客户端创建一个名为`production`的新分支：
- en: '[PRE83]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Configure the `myapp` OpenShift application to use the `production` branch
    for deployment:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`myapp` OpenShift应用程序使用`production`分支进行部署：
- en: '[PRE84]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Open the `index.php` file in the application directory and change the header
    to the following:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开应用程序目录中的`index.php`文件，并将头部更改为以下内容：
- en: '[PRE85]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Commit the change to the local repository, and then push the changes to the
    master branch. As we have configured the application to deploy the production
    branch, only the code will be pushed, so autodeployment will not happen:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改到本地仓库，然后将更改推送到主分支。由于我们已配置应用程序在部署生产分支时进行部署，所以只会推送代码，因此不会触发自动部署：
- en: '[PRE86]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Next, check out the production branch, and merge the master branch changes:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检出生产分支，并合并主分支的更改：
- en: '[PRE87]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Now, push the changes to application gear, and the changes will get deployed:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，推送更改到应用程序gear，变更将被部署：
- en: '[PRE88]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Now, if you go to `http://myapp-{domain-name}.rhcloud.com`, you will view the
    changes made in step 4.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你访问`http://myapp-{domain-name}.rhcloud.com`，你将看到在第4步中所做的更改。
- en: How it works…
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'OpenShift leverages the Git action hooks for application deployment. By default,
    deployment occurs every time you push the source code to the master branch. In
    step 1, you changed the directory to the `myapp` application location on your
    command-line tool. Step 2 helped you to create a new branch named `production`
    for future deployments. You can list all the branches in your Git repository using
    the `git branch` command:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift利用Git动作钩子进行应用程序部署。默认情况下，每次将源代码推送到主分支时，都会发生部署。在第1步中，你将目录更改为`myapp`应用程序所在的位置。第2步帮助你创建了一个名为`production`的新分支用于将来的部署。你可以使用`git
    branch`命令列出Git仓库中的所有分支：
- en: '[PRE89]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'In step 3, you configured the application to use the production branch for
    application deployment. You will get the following output upon successful completion
    of the command:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步中，你配置了应用程序使用生产分支进行应用程序部署。命令成功完成后，你将看到以下输出：
- en: '[PRE90]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The output shows that the deployment branch is changed to `production`.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示部署分支已更改为`production`。
- en: 'In step 4, you made a change to `index.php` in which you committed and pushed
    the changes to the master branch in step 5\. One thing you will notice is that
    the `git push` command only pushes the bits to the application gear, but it does
    not invoke the deployment. The application deployment does not happen, because
    in step 3, you configured the deployment of the application when to changes are
    pushed to the production branch. The output of the `git push` command is as follows:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步中，你更改了`index.php`，并在第5步中提交并推送了更改到主分支。你会注意到，`git push`命令只将数据推送到应用程序的gear上，但不会触发部署。应用程序部署不会发生，因为在第3步中，你已配置应用程序在推送到生产分支时进行部署。`git
    push`命令的输出如下：
- en: '[PRE91]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'In step 6, you checked out the production branch and merged the changes that
    you made in the master branch. You pushed the changes to the production branch
    in step 7, which will invoke the autodeployment, and the changes will be deployed
    to the application. The `git push origin production` command is shown as follows:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6步中，你检出了生产分支，并合并了在主分支中所做的更改。你在第7步中将更改推送到生产分支，这将触发自动部署，变更将被部署到应用程序。`git push
    origin production`命令如下所示：
- en: '[PRE92]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Finally, you viewed that changes were actually deployed by visiting the application.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你通过访问应用程序确认更改已经被部署。
- en: There's more…
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'What if you want to turn off automatic deployment altogether, that is, if you
    do not want to deploy even on the production branch, this can be achieved using
    the `--no-auto-deploy` option:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想完全关闭自动部署，也就是说，如果你即使在生产分支上也不想进行部署，可以使用`--no-auto-deploy`选项来实现：
- en: '[PRE93]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: This will turn off autodeployment, and only code will be pushed to the Git repository
    hosted on the application gear. If you want to deploy code, you have to do manual
    deployment, as explained in the *Doing manual deployments* recipe.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 这将关闭自动部署，且只会将代码推送到托管在应用程序gear上的Git仓库。如果你想部署代码，你必须手动部署，如*手动部署*食谱所示。
- en: See also
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用rhc命令行客户端创建OpenShift应用程序*食谱'
- en: The *Tracking and rolling back application deployments* recipe
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*跟踪和回滚应用程序部署*食谱'
- en: The *Doing manual deployments* recipe
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*进行手动部署*食谱'
- en: Doing manual deployments
  id: totrans-438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行手动部署
- en: In the *Configuring the default Git branch for deployment* recipe, under the
    *There's more...* section, we looked at how to turn off autodeployment using the
    `--no-auto-deploy` option with the `rhc app-configure` command. What do you do
    if you want to deploy the application after switching off autodeployment? One
    solution would be to reconfigure the application to autodeploy by running the
    `rhc app-configure –auto-deploy` command. This solution is good if you want to
    perform autodeployment from now on, but if you want to manage deployment yourself,
    the `--auto-deploy` option is not a solution. In this recipe, you will learn how
    to manually deploy the application to OpenShift.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在*为部署配置默认Git分支*食谱中的*更多...*部分，我们查看了如何使用`--no-auto-deploy`选项通过`rhc app-configure`命令关闭自动部署。如果你关闭了自动部署，想要部署应用程序该怎么办？一种解决方案是通过运行`rhc
    app-configure –auto-deploy`命令重新配置应用程序以进行自动部署。如果你希望从现在起进行自动部署，这个解决方案很好，但如果你想自己管理部署，`--auto-deploy`选项就不是一个解决方案。在这个食谱中，你将学习如何手动将应用程序部署到OpenShift。
- en: Getting ready
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: To complete this recipe, you will need rhc installed on your machine. Also,
    you will need the application you created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个食谱，你需要在你的机器上安装rhc。此外，你还需要在*使用rhc命令行客户端创建OpenShift应用程序*食谱中创建的应用程序。
- en: How to do it…
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Perform the following steps to perform manual deployments:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤进行手动部署：
- en: Open a command-line terminal and change the directory to the `myapp` application.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端并将目录更改为`myapp`应用程序。
- en: 'Disable autodeployment of the application using the `--no-auto-deploy` option
    with the rhc `configure-app` command:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用带有`--no-auto-deploy`选项的`rhc configure-app`命令禁用应用程序的自动部署：
- en: '[PRE94]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Make a change to the application''s `index.php`:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对应用程序的`index.php`进行更改：
- en: '[PRE95]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Commit the change, and push it to the application gear. As autodeployment is
    turned off, the code will not be deployed:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改并将其推送到应用程序插槽。由于禁用了自动部署，代码不会被部署：
- en: '[PRE96]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'To manually deploy the change, use the `rhc deploy` command to deploy the master
    branch:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要手动部署更改，请使用`rhc deploy`命令部署主分支：
- en: '[PRE97]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: View the change by visiting `http://myapp-{domain-name}.rhcloud.com`.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`http://myapp-{domain-name}.rhcloud.com`来查看更改。
- en: How it works…
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'In step 1, you changed the directory to the `myapp` application location. To
    disable autodeployment, you used the `rhc configure-app` command with the `--no-auto-deploy`
    option. You can view the application details by running the `rhc show-app` command
    with the `--configuration` option:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1步中，你将目录更改为`myapp`应用程序的位置。为了禁用自动部署，你使用了带有`--no-auto-deploy`选项的`rhc configure-app`命令。你可以通过运行带有`--configuration`选项的`rhc
    show-app`命令来查看应用程序的详细信息：
- en: '[PRE98]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'As you can see in the previous command, the deployment has been set to manual.
    In steps 3 and 4, you made a change in `index.php` and then committed and pushed
    the change to the application gear. The autodeployment will not kick in, as we
    disabled it in step 2\. The output of the `git push` command is shown as follows:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个命令所示，部署已设置为手动。在步骤3和4中，你在`index.php`中进行了更改，然后提交并推送更改到应用程序插槽。由于我们在第2步中禁用了自动部署，自动部署不会启动。`git
    push`命令的输出如下所示：
- en: '[PRE99]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'In step 5, you manually deployed the change using the `rhc deploy` command.
    The `rhc` `deploy` command needs a reference that can be either a Git tag, Git
    commit ID, or Git branch name. This step made use of the master branch for deployment.
    The `rhc deploy` command under the hood executed the `gear deploy master` command
    on the application gear. The output of step 5 is shown as follows:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5步中，你使用`rhc deploy`命令手动部署了更改。`rhc deploy`命令需要一个引用，可以是Git标签、Git提交ID或Git分支名称。此步骤使用了主分支进行部署。`rhc
    deploy`命令在底层执行了`gear deploy master`命令。第5步的输出如下所示：
- en: '[PRE100]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: As you can see in the previous command, first cartridges are stopped, and then
    the application is built using the latest commit ID of the Git master branch before
    finally deploying the changes.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个命令所示，首先停止了插槽，然后使用Git主分支的最新提交ID构建应用程序，最后部署更改。
- en: Finally, you can view the deployed application and verify that changes are deployed.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以查看已部署的应用程序并验证更改是否已部署。
- en: There's more…
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'Instead of using the branch name, you can also use the Git commit ID or Git
    tag with the `rhc deploy` command. You can see how to use a commit ID with the
    `rhc deploy` command:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用分支名称，您还可以在 `rhc deploy` 命令中使用 Git 提交 ID 或 Git 标签。您可以查看如何在 `rhc deploy` 命令中使用提交
    ID：
- en: '[PRE101]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: See also
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方'
- en: The *Viewing application details* recipe
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序详情* 配方'
- en: Configuring and doing binary deployments
  id: totrans-469
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和执行二进制部署
- en: So far, we have looked at how easy it is to perform Git-based deployments with
    OpenShift, where you perform a `git push` command, and OpenShift builds and deploys
    the application. This is ideal if you want to perform source-based deployments.
    It may be that you want OpenShift to also manage your source code using Git. But
    there are cases when developers do not want to push their source code to OpenShift
    servers. In those cases, you can use binary deployments to deploy your binary
    artifact. This is ideal when you want to deploy binary artifacts, such as a `.war`
    file, as Git is not an efficient means for storing binaries.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了如何在 OpenShift 中轻松执行基于 Git 的部署，您只需执行 `git push` 命令，OpenShift 会构建并部署应用程序。如果您想执行基于源代码的部署，这非常理想。可能您希望
    OpenShift 也通过 Git 来管理您的源代码。但有些情况下，开发人员不希望将源代码推送到 OpenShift 服务器。在这种情况下，您可以使用二进制部署来部署二进制工件。当您希望部署二进制工件（如
    `.war` 文件）时，这种方法特别理想，因为 Git 并不是存储二进制文件的高效方式。
- en: Getting ready
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To step through this recipe, you will need rhc installed on your machine.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行本教程，您需要在机器上安装 rhc。
- en: How to do it…
  id: totrans-473
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to perform binary deployment:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤进行二进制部署：
- en: 'Open a command-line terminal and change the directory to an appropriate location.
    Then, create a new JBoss EAP 6 application using rhc, as shown in the following
    command. Note that we are using the `--no-git` option, as we do not want to use
    Git:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端，切换到适当的位置。然后，使用 rhc 创建一个新的 JBoss EAP 6 应用程序，如下所示的命令。注意，我们使用了 `--no-git`
    选项，因为我们不想使用 Git：
- en: '[PRE102]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Configure the application to use binary deployment. Also, switch off autodeploy,
    and configure the application to store two deployments. This will help if we want
    to roll back to a previous version later. Have a look at the following command:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置应用程序使用二进制部署。同时，关闭自动部署，并配置应用程序存储两个部署版本。这将有助于我们以后回滚到先前的版本。请查看以下命令：
- en: '[PRE103]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Create a directory structure, as shown in the following commands:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录结构，如下所示的命令：
- en: '[PRE104]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Download or copy the WAR file to the `repo/deployments` folder:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载或复制 WAR 文件到 `repo/deployments` 文件夹：
- en: '[PRE105]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Package the folder structure to an archive. You can use the ZIP, TAR, tar.gz,
    or tar.bz formats:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件夹结构打包成归档文件。您可以使用 ZIP、TAR、tar.gz 或 tar.bz 格式：
- en: '[PRE106]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Deploy the new binary artifact using the `rhc deploy` command:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `rhc deploy` 命令部署新的二进制工件：
- en: '[PRE107]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: How it works…
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: In step 1, you created a JBoss EAP 6 application named `javaapp`. You also specified
    the `--no-git` option with the `rhc app-create` command, as we do not want to
    clone the Git repository to the local machine. Next, in step 2, you configured
    the application to use binary deployment. OpenShift supports two types of deployment—Git
    and binary. The Git deployment type is the default deployment type and is invoked
    via a `git push` command. When you use this, the gear will build a deployment
    artifact and then deploy the artifact to the server.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 步中，您创建了一个名为 `javaapp` 的 JBoss EAP 6 应用程序。您还使用了 `--no-git` 选项与 `rhc app-create`
    命令，因为我们不希望将 Git 仓库克隆到本地机器。接下来，在第 2 步中，您配置了应用程序使用二进制部署。OpenShift 支持两种部署类型——Git
    和二进制。Git 部署类型是默认的部署类型，通过 `git push` 命令触发。当您使用此方式时，系统会构建一个部署工件，并将其部署到服务器上。
- en: 'With the binary deployment type, you have to provide the deployment archive,
    as the OpenShift gear will not be responsible for building the deployment. The
    binary deployment requires an archive that follows a specified directory format.
    In step 3, you created a directory structure specific to the JBoss EAP 6 application
    type. Have a look at the following commands:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 使用二进制部署类型时，您需要提供部署归档文件，因为 OpenShift 环境不会负责构建部署。二进制部署需要一个符合指定目录格式的归档文件。在步骤 3
    中，您创建了一个特定于 JBoss EAP 6 应用程序类型的目录结构。请查看以下命令：
- en: '[PRE108]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'As we are performing binary deployment, you just downloaded the WAR file to
    the `repo/deployments` folder. Next, in step 5, you created a `tar.gz` archive
    with the repository structure. Finally, in step 6, you deployed the binary artifact
    using the `rhc deploy` command. You can also use the HTTP URL instead of the local
    file path, as shown in the following code:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在执行二进制部署，你刚刚将 WAR 文件下载到了 `repo/deployments` 文件夹。接下来，在第 5 步，你创建了一个带有仓库结构的
    `tar.gz` 存档。最后，在第 6 步，你使用 `rhc deploy` 命令部署了二进制构件。你也可以使用 HTTP URL 来代替本地文件路径，如以下代码所示：
- en: '[PRE109]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: There's more…
  id: totrans-493
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'You can save a deployment snapshot anytime using the `rhc snapshot-save` command:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时使用 `rhc snapshot-save` 命令保存一个部署快照：
- en: '[PRE110]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: This will save a `javaapp.tar.gz` archive on your local machine. Then, you can
    deploy this artifact at any point in time using the `rhc deploy` command.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把一个 `javaapp.tar.gz` 存档保存到本地计算机。然后，你可以随时使用 `rhc deploy` 命令部署这个构件。
- en: See also
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方'
- en: The *Viewing application details* recipe
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序详细信息* 配方'
- en: Using your own custom domain name
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用你自己的自定义域名
- en: By default, all the applications created by OpenShift are subdomains of [rhcloud.com](http://rhcloud.com).
    In this recipe, you will learn how to use your own domain name with the `myapp`
    application you created in the *Creating an OpenShift application using the rhc
    command-line client* recipe.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，OpenShift 创建的所有应用程序都是 [rhcloud.com](http://rhcloud.com) 的子域。在本配方中，你将学习如何将自己创建的
    `myapp` 应用程序与 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方中的自定义域名结合使用。
- en: Getting ready
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need rhc installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本配方，你需要在机器上安装 rhc。同时，我们将使用 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 配方中创建的 OpenShift
    应用程序。
- en: How to do it…
  id: totrans-504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: The first step is to buy a domain name from a domain registration provider.
    I will use GoDaddy, as I have few domains registered there, but you can just as
    easily choose a different domain provider. I have bought the `openshift-cookbook.in`
    domain name for this demonstration.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是从域名注册提供商处购买一个域名。我将使用 GoDaddy，因为我在那有一些域名，但你也可以选择其他域名提供商。我已购买了 `openshift-cookbook.in`
    域名用于此次演示。
- en: Open your domain registration provider's DNS manager console, and add a `CNAME`
    record. The `CNAME` record lets you point one domain name to another. You can
    create a new `CNAME` record that will point to `www.subdomain to myapp-osbook.rhcloud.com`,
    as shown in the following screenshot:![How to do it…](img/00021.jpeg)
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的域名注册提供商的 DNS 管理控制台，添加一个 `CNAME` 记录。`CNAME` 记录允许你将一个域名指向另一个域名。你可以创建一个新的 `CNAME`
    记录，将其指向 `www.subdomain to myapp-osbook.rhcloud.com`，如下图所示：![如何操作…](img/00021.jpeg)
- en: 'After creating the `CNAME` record, you have to map your OpenShift application
    with the custom name. This is done using the `rhc alias` command. To create an
    alias for `www.openshift-cookbook.in`, run the following command. Please use your
    own domain name with the `rhc alias` command. Have a look at the following command:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建 `CNAME` 记录后，你需要将 OpenShift 应用程序与自定义名称关联。这是通过 `rhc alias` 命令完成的。要为 `www.openshift-cookbook.in`
    创建别名，请运行以下命令。请使用你自己的域名与 `rhc alias` 命令。请看以下命令：
- en: '[PRE111]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: How it works…
  id: totrans-509
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In step 2, you created a new `CNAME` entry for the `www` subdomain. OpenShift
    allows you to do this by pointing the **Canonical Name** (**CNAME**) entry to
    your DNS provider's settings to provide an alias for your domain name. `CNAME`
    specifies that the domain name is an alias of another domain name. In the previous
    example, `www.openshift-cookbook.com` becomes an alias for `http://myapp-osbook.rhcloud.com`.
    In step 3, you ran the `rhc alias` command, which allows you to use your own domain
    names to run your apps. Technically, what OpenShift has done under the hood is
    to set up a Vhost in Apache to handle the URL.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 2 步，你为 `www` 子域创建了一个新的 `CNAME` 条目。OpenShift 通过将 **规范名称** (**CNAME**) 条目指向你的
    DNS 提供商的设置来允许你这样做，从而为你的域名提供别名。`CNAME` 指定该域名是另一个域名的别名。在前面的示例中，`www.openshift-cookbook.com`
    成为 `http://myapp-osbook.rhcloud.com` 的别名。在第 3 步，你运行了 `rhc alias` 命令，允许你使用自己的域名来运行应用程序。从技术上讲，OpenShift
    在后台所做的工作是设置了 Apache 中的 Vhost 来处理 URL。
- en: Now, if you go to your custom domain name, such as `http://www.openshift-cookbook.in`,
    you will see your OpenShift application home page.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你访问你的自定义域名，比如`http://www.openshift-cookbook.in`，你将看到你的OpenShift应用程序首页。
- en: 'This configuration works fine if you use the `www` subdomain, but it will not
    work if we remove `www` from the `openshift-cookbook.in` URL. It is very common
    that developers would require both root and www URLs to work. To make it work,
    you have to use domain forwarding so that when a request comes to `openshift-cookbook.in`,
    it will be forwarded to `www.openshift-cookbook.in`. Open the DNS provider web
    console and go to the **Forward** tab. Forward the requests coming to `openshift-cookbook.in`
    to `http://www.openshift-cookbook.in`, as follows:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`www`子域，这个配置可以正常工作，但如果从`openshift-cookbook.in`的URL中去除`www`，则无法正常工作。开发人员通常需要同时支持根域和`www`域名。为了让它正常工作，你必须使用域名转发，这样当请求到达`openshift-cookbook.in`时，它会被转发到`www.openshift-cookbook.in`。打开DNS提供商的Web控制台并进入**转发**标签。将请求从`openshift-cookbook.in`转发到`http://www.openshift-cookbook.in`，如下所示：
- en: '![How it works…](img/00022.jpeg)'
  id: totrans-513
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/00022.jpeg)'
- en: It will take 30 minutes or so to reflect the forwarding change. After changes
    are propagated, go to `openshift-cookbook.in`, and you will be redirected to `http://www.openshift-cookbook.in`.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 反映转发更改大约需要30分钟。更改传播后，访问`openshift-cookbook.in`，你将被重定向到`http://www.openshift-cookbook.in`。
- en: There's more…
  id: totrans-515
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: You can also set an alias using the OpenShift web console. Please refer to the
    OpenShift blog at [https://www.openshift.com/blogs/how-to-configure-custom-domain-names-and-ssl-in-the-openshift-web-console](https://www.openshift.com/blogs/how-to-configure-custom-domain-names-and-ssl-in-the-openshift-web-console)
    for more information.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用OpenShift Web控制台设置别名。有关更多信息，请参考OpenShift博客：[https://www.openshift.com/blogs/how-to-configure-custom-domain-names-and-ssl-in-the-openshift-web-console](https://www.openshift.com/blogs/how-to-configure-custom-domain-names-and-ssl-in-the-openshift-web-console)。
- en: See also
  id: totrans-517
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用rhc命令行客户端创建OpenShift应用程序*食谱'
- en: The *Viewing application details* recipe
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序详情*食谱'
- en: Cleaning up the application
  id: totrans-520
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理应用程序
- en: As you start using OpenShift for application development, the different components,
    such as Git and cartridge log directories, which constitute an application, will
    start consuming disk space. In the OpenShift Online free tier, applications are
    allocated only 1 GB of disk space so that it becomes critical to use the disk
    space effectively to avoid disk quota errors. In this recipe, you will learn how
    to clean up your application periodically to avoid disk quota errors.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始使用OpenShift进行应用程序开发时，构成应用程序的不同组件，如Git和cartridge日志目录，将开始消耗磁盘空间。在OpenShift
    Online免费套餐中，应用程序仅分配1 GB的磁盘空间，因此有效利用磁盘空间变得至关重要，以避免磁盘配额错误。在这个食谱中，你将学习如何定期清理你的应用程序，以避免磁盘配额错误。
- en: Getting ready
  id: totrans-522
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    we will use the OpenShift application created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此步骤，你需要在机器上安装rhc。同时，我们将使用*使用rhc命令行客户端创建OpenShift应用程序*中的OpenShift应用程序。
- en: How to do it…
  id: totrans-524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To clean up the application, open a command-line terminal and run the following
    command:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 要清理应用程序，请打开命令行终端并运行以下命令：
- en: '[PRE112]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: How it works…
  id: totrans-527
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `rhc tidy-app` command helps to manage the application disk space. Under
    the hood, it performs three operations:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '`rhc tidy-app`命令有助于管理应用程序的磁盘空间。底层执行了三个操作：'
- en: To start off, the `rhc tidy-app` command stops the application.
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，`rhc tidy-app`命令停止应用程序。
- en: Next, it clears out the application `tmp` directory. The location of the `tmp`
    directory can be found by fetching the `OPENSHIFT_TMP_DIR` environment variable.
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，它会清除应用程序的`tmp`目录。`tmp`目录的位置可以通过获取`OPENSHIFT_TMP_DIR`环境变量找到。
- en: Next, it clears the log directory for each cartridge.
  id: totrans-531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，它会清除每个cartridge的日志目录。
- en: Then, it clears up the application Git repository on the server. The Git repository
    cleanup is done using two Git commands—`git prune` and `git gc --aggressive`.
    The `git prune` command removes all the unreachable objects from the Git repository
    object database. The `git gc --aggressive` command deletes any loose objects and
    compresses objects to use the disk space more efficiently.
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它清理服务器上的应用程序Git仓库。使用两个Git命令完成Git仓库清理：`git prune`命令从Git仓库对象数据库中删除所有不可访问的对象。`git
    gc --aggressive`命令删除任何松散的对象，并压缩对象以更有效地使用磁盘空间。
- en: Finally, it starts the application. The application is started even if the `rhc
    tidy` command has any exceptions.
  id: totrans-533
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，它启动应用程序。即使`rhc tidy`命令出现任何异常，应用程序也会启动。
- en: There's more…
  id: totrans-534
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'You can also create a daily or weekly cron job that would run `git gc` periodically
    on the application gear. To do that, add the cron cartridge to the application.
    Refer to the *Adding a cron cartridge to an application* recipe. After adding
    the cartridge, create a new shell script named `gc_cleanup.sh` under the `.openshift/cron/daily`
    directory, and add the following contents to it:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建一个每日或每周运行`git gc`的定时任务，以定期处理应用程序的工作载荷。为此，请将定时任务插件添加到应用程序中。参考*将定时任务插件添加到应用程序*说明。在添加插件后，在`.openshift/cron/daily`目录下创建一个名为`gc_cleanup.sh`的新shell脚本，并将以下内容添加到其中：
- en: '[PRE113]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Commit the files and push them to the application gear. The daily cron job will
    perform Git cleanup every day.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 提交文件并将其推送到应用程序工作载荷。每天的定时任务将执行Git清理操作。
- en: See also
  id: totrans-538
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用rhc命令行客户端创建OpenShift应用程序*说明'
- en: The *Viewing application details* recipe
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序详细信息*说明'
- en: Deleting the application
  id: totrans-541
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除应用程序
- en: In this recipe, you will learn how to delete an OpenShift application.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 在此说明中，您将学习如何删除OpenShift应用程序。
- en: Getting ready
  id: totrans-543
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need rhc installed on your machine. Also,
    you will use the application created in the *Creating an OpenShift application
    using the rhc command-line client* recipe.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照此步骤进行操作，您需要在您的计算机上安装rhc。此外，您将使用*使用rhc命令行客户端创建OpenShift应用程序*说明中创建的应用程序。
- en: How to do it…
  id: totrans-545
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To delete an application, open a command-line terminal and run the following
    command:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个应用程序，请打开命令行终端并运行以下命令：
- en: '[PRE114]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: How it works…
  id: totrans-548
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The rhc `-delete` command deletes the application and all its data on the OpenShift
    server. You cannot roll back this command, so use it with caution. Under the hood,
    the `rhc -delete` command makes an HTTP DELETE request to delete the application.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: rhc `-delete`命令会删除应用程序及其在OpenShift服务器上的所有数据。您无法撤销此命令，因此请谨慎使用。在幕后，`rhc -delete`命令会发送HTTP
    DELETE请求以删除应用程序。
- en: See also
  id: totrans-550
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用rhc命令行客户端创建OpenShift应用程序*说明'
- en: The *Viewing application details* recipe
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序详细信息*说明'
