- en: Azure WebJobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure WebJobs are one of the underlying features of Azure App Service. They
    allow for the easy running of so-called "jobs" using different intervals, or even
    running them infinitely. They are very flexible and provide a special SDK, so
    users can work with them efficiently and quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create Azure WebJobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with different trigger types (continuous and triggered)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using different file types for WebJobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform exercises from this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to an Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2017 with Azure development workload installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating WebJobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Working with WebJobs is much simpler than working with App Services, as this
    is a much easier service to configure and use. In fact, there are two ways of
    working with them:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Azure Portal and deploying a job manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Visual Studio to develop and deploy it manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is more, you can leverage the WebJobs SDK to prepare an application triggered
    by an external service. This will be covered at the end of this chapter, and will
    be an excellent introduction to Azure Functions, described later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and deploying WebJobs in Azure Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest and quickest way to start working with WebJobs is to create a custom
    console application, perform an action, and then deploy it using Azure Portal.
    Thanks to this exercise, you will understand the main concepts of jobs hosted
    within App Services.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you open Visual Studio, go to File | New Project. In the New Projectwindow,
    select Windows Classic Desktopand then Console App (.NET Framework). Give your
    application a name and click on OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8e18e6f-3acd-4a91-8a92-e12e90f67f56.png)'
  prefs: []
  type: TYPE_IMG
- en: After a moment, you will see an empty project, which we can modify. We will
    try to trigger our job in intervals (let's say one minute), so we need to add
    code, which will finish within the given time.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the very beginning, let''s just display the current date. In the `Main()`method
    of your application, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now save and build your project—we will need the compiled version soon.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a WebJob in the Azure Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, when we have a code of our WebJob, we can try to put in the cloud. To
    do so we need App Service, which will host our code and execute it. You can either
    use one of your current Web Apps or create a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your App Service and find the WebJobs blade. (If you do not see it, scroll
    down a little bit—it can be found on the left in the Settings section.):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/697e65a2-7f5c-417e-a086-17ff9bf6ec81.png)'
  prefs: []
  type: TYPE_IMG
- en: If you do not know how to create App Service or configure it, please take a
    look at [Chapter 1](81d59e59-02b1-4973-95a0-9bf6a998e752.xhtml), *Azure App Service*,
    where I describe the process of working with this Azure service in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since you currently do not have any jobs, click on the + Addbutton. You will
    see a new screen, which allows you to configure a new WebJob:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/230a58a3-2009-4291-8c70-06e3286018f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Available fields differ a bit depending on the selected Type field value. If
    you have selected Triggered job, you will see the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: Triggers**:** If you select Scheduled, one additional field (CRON Expression)
    will appear. The other option is Manual, which ensures that a WebJob can be triggered
    only manually.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRON Expression: A CRON valid expression, which defines an interval at which
    a job runs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRON expressions are a quite complicated topic themselves, and we will not focus
    on them in this book. If you have not heard about them yet, those two links should
    be useful for you to get started: [https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-timer](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-timer).
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to set the Triggered field to Continuous. In that scenario,
    only one extra field is displayed: Scale. Decide whether you want to always have
    a Single Instanceof job or scale it across all instances of your App Service.
    This is helpful if you want, for instance, to implement a singleton pattern and
    never scale out a job. Note that you cannot change this option if you are using
    the Free or Shared tier as they do not support scaling.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we will create a Triggered job to see how App Service executes it.
    Give it a name and attach an executable file of the console application you created
    in the previous section. Here, you can find my configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/958d131b-1e92-41c5-8777-68c6144eb8f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I have decided to use the `0 */1 * * * *`CRON Expression to run my job each
    minute. Once you are satisfied with your configuration, click OK. After a moment,
    you should see a new WebJob added to App Service and deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca369b70-1270-4373-befb-64738d893c12.png)'
  prefs: []
  type: TYPE_IMG
- en: You do not have to deploy a single file as your WebJob. If your application
    has more files (such as additional dependencies or static files), you can archive
    them in a ZIP package and publish. After deployment, they will be unzipped and
    fully functional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when you click on a job, new options will be available in the menu above.
    We would like to see the output—for that, please click on Logs. On the new screen,
    you will see the list of jobs available in this particular App Service. Click
    on the one you have just added—a list of recent runs should be displayed, which
    you can analyze. You can click on any of the positions available—you will be able
    to see a full log of the running job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62f6cbca-dc5d-432a-97c2-984298cc2f51.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, a job was run and it displayed exactly what we have been expecting—the
    current date and time. Congratulations—you have just created and deployed your
    first WebJob!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that running continuous or triggered jobs require at least the Basic App
    Service Plan. If you use the Free or Shared tier, after some time, a WebJob will
    be cancelled and you will need to start it manually.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to deploy a WebJob directly from Visual
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying WebJobs from Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous part of this chapter, you saw how to create a simple WebJob and
    publish it from Azure Portal. Sometimes you would prefer not to leave your IDE
    and use it for deployments too. Fortunately, Visual Studio is integrated with
    Azure and makes such actions a piece of cake. Before, we started to create a brand
    new Console Applicationas we did in the beginning—this will be our starting point.
    You can add any code you would like to—I will use the one from the previous exercises,
    which will display the current date and time. Once you are satisfied with the
    provided functionality, right-click on your project icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the context menu, click on Publish as Azure WebJob...:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8e9a6a4-52b2-4bea-a7b6-577d8e7f1bb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see a new screen, where you can select a name for a new WebJob and
    its Run mode. This time, I also decided on a continuous job, so I selected Run
    continuously. When you click OK, this wizard will install missing packages for
    your project and display the Publish screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8d11873-eab5-4a89-81eb-e378da898c9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you can create or import Publish profile, which is needed to deploy WebJob.
    We would like to publish our job to a specific location, and that is why we select Microsoft
    Azure App Service. On the next screen, you can select the appropriate App Service by
    filtering it using subscription and resource group fields. Select the one you
    are interested in and then click OK. Now you will be able to change different
    properties if you want and deploy configuration. I recommend leaving the default
    values for now and clicking on Publish. After several seconds, you should see
    a success message in the output window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b66dbd5-9b3e-40f9-9723-69f0ddf34923.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now check whether our job is available in Azure. Go to the WebJobs blade
    in your App Service. You should be able to see your job among others (I used the
    same Web App as in the previous section, that is why I have two WebJobs available):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/364a3df1-956f-499e-b1d3-599f8c0eb2cf.png)'
  prefs: []
  type: TYPE_IMG
- en: It seems that everything is all right. I am sure you see one flaw of such an
    approach—we can define the Run modeof our job only as Run on demandor Run continuously.
    What we are missing here is running it on a schedule. In the next section, I will
    address this issue as we will start using the WebJobs SDK to have better control
    over our application.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it is possible to modify a continuous job to work in intervals. If
    you take a look at your project, you will see that now it contains a file called `webjob-publish-settings.json`.
    Its schema and description can be found here—[http://schemastore.org/schemas/json/webjob-publish-settings.json](http://schemastore.org/schemas/json/webjob-publish-settings.json).
  prefs: []
  type: TYPE_NORMAL
- en: Working with the WebJobs SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To simplify working with WebJobs in Azure and easily access their advanced
    features, you can use a framework called the WebJobs SDK. It is available out
    of the box in Visual Studio when an Azure workload is installed. To start, you
    can create a clean console application, or use the one used for the previous exercises—at
    this moment, it is up to you. You will need one more thing—the `Microsoft.Azure.WebJobs` package,
    which can be installed either using the command line or the NuGet package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93558c19-5ef8-4ca3-9b00-d8f693c5a5d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Please note that it is possible to develop .NET Core WebJob using the packages
    version 3.X. However, since they are still in the beta state, I will not cover
    them in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'When everything is set and ready, we can proceed and try to actually create
    a new application. Writing jobs using the WebJobs SDK is a bit different than
    creating them like we did in the previous exercises, but it gives you some interesting
    benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: You have an available set of triggers integrated with other Azure services such
    as queues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have an integrated logging framework, which eases the process of monitoring
    a job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a great start to developing Azure Functions, which will be covered later
    in this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get started you have to start a `JobHost` instance. It is a container for
    all of the jobs you will run within your application. (We can also call them `functions`,
    as described in the documentation.) The boilerplate code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Those three lines are the actual host of your job application, which will handle
    its functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to compile and run—unfortunately, there is something missing, as you will
    see an exception thrown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2575f617-8143-4409-9510-563998e082f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It tells us that we have a missing Azure Storage account connection string.
    Because we have not covered this topic yet, you will have to perform one more
    exercise before continuing. Go to [Chapter 11](6feb3822-0662-46c8-b889-c038672a1ad1.xhtml), *Using
    Azure Storage - Tables, Queues, Files, and Blobs*,and go through the very first
    section. It will guide you through the process of creating an Azure Storage account
    and tell where you can find the connection string to it. Once you have, we can
    proceed—add it to `App.config` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I already added two required connection strings—`AzureWebJobsDashboard `and `AzureWebJobsStorage`. Now,
    when you start the host, you should be able to see something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b896b350-1e5f-4d82-ac19-c8b9d23bf918.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we have no jobs added yet, none is found and enabled. Let's try to add
    one and see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: If you want, you can configure connection strings directly in your code by setting
    the `StorageConnectionString `and`DashboardConnectionString` properties of the `JobHostConfiguration `object
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: Calling a job manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you would like to trigger a job manually, you can use the `[NoAutomaticTrigger]` attribute
    to tell a host that this particular function is not triggered automatically. Here,
    you have an example of the one I created and named `Manual.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s see what happens if you call it from the main point of your program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be able to see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fccb9942-d36e-4f1f-9373-c216599e2647.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatic triggers in WebJobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the WebJobs SDK provides a limited set of triggers. Currently,
    it supports only the following ones:'
  prefs: []
  type: TYPE_NORMAL
- en: Blob storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queue storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these are connected to Azure Storage and will be covered in the chapter
    describing Azure Functions. Fortunately, we can install additional NuGet packages
    to extend the functionality of our host. For now, add the `Microsoft.Azure.WebJobs.Extensions` package
    so that we will be able to use `TimerTrigger`. When you have it, call the `UseTimers()`method
    on the `JobHostConfiguration `object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can create a new `Timer.cs`function, which will be triggered on schedule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When you start your project, `TimerFunction` should be discovered and called:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de72d02c-2333-441c-b850-83bf863362d6.png)'
  prefs: []
  type: TYPE_IMG
- en: You can install additional packages to leverage other bindings, such as `Http`,
    `Notification Hub`, or `SendGrid`. Search for packages with the `Microsoft.Azure.WebJobs.Extensions`
    prefix.
  prefs: []
  type: TYPE_NORMAL
- en: Publish a job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Publishing a job, which is written using the WebJobs SDK, is the same as in
    the previous exercises. Right-click on your project and click on Publish as Azure
    WebJob. You will be once more guided through the process of publishing a job package.
    At the end of it, you should be able to see a job available in your App Service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4332933-8c9e-4f54-a42e-010e632551bb.png)'
  prefs: []
  type: TYPE_IMG
- en: If you find that your job has problems running, make sure the required connection
    strings are available in App Service. To do so, go to the Application settingsblade
    and verify the contents of the Connection stringssection. If something is missing,
    add it manually by adding a name and its value and set its type as Custom.
  prefs: []
  type: TYPE_NORMAL
- en: Azure WebJobs limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As Azure WebJobs are based on Azure App Services and, what is more, there is
    no way to host them individually (you can use an extra App Service Plan to power
    them, but this often means that you pay the double price for your service), you
    may find some of their limitations quite serious in your projects. When using
    this particular service, remember the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: When co-hosting Web App and WebJobs, one may interfere with the performance
    of other. In other words, if your WebJob starts to utilize too much CPU/memory,
    it may affect your web application powered by the same App Service Plan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure WebJobs have a limited catalog of bindings that are offered—they are currently
    less popular than Azure Functions and are not so dynamically developed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no way to utilize the consumption model with Azure WebJobs; hence,
    you have to pay the full price, even if they do nothing 90% of the time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using different file types for WebJobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you are working with WebJobs, you are not limited to using EXE files.
    Currently, this service supports the following applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows executables (`.exe`, `.bat`, and `.cmd`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Powershell (`.ps1`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bash (`.sh`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python (`.py`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP (`.php`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js (`.js`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java (`.jar`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, the preceding list is quite similar to the supported languages
    in App Services. This should be understandable now, as you have learned that WebJobs are
    in fact an integral part of Web Apps in Azure. Let's try something practical—we
    will deploy a simple Node.js application, which will publish to Azure as a WebJob.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and deploying a Node.js application as a WebJob
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is one of the most popular programming languages around the world.
    The strength of Azure lies in the fact that it does not block you from using other,
    non-native to Microsoft technologies. Before we start, you have to remember one
    important piece of information.
  prefs: []
  type: TYPE_NORMAL
- en: The way in which the runtime executes WebJobs requires you to follow a specific
    convention. When searching for a job, the runtime will search for a file named `run.{job_type}`,
    where `job_type` is an extension representing a particular programming language
    (such as `.js` and `.py`). If that fails, it will try to find any file with a
    specific extension. If that also fails, a job will be skipped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a really simple code of my first WebJob written in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To create it, you can use any kind of application supporting JavaScript (it
    can be, for instance, notepad or Visual Studio Code). Name your file `run.js`and
    publish it in Azure Portal as described previously. Here you can find the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ec0ccac-c3c8-4dbc-b865-ba21548ca1e8.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it was discovered automatically—no additional configuration
    was required to run it using Node.js runtime. I strongly encourage you to take
    your time and test this feature a little bit using other file types.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if your application needs additional files (such as extra packages
    for a Node.js job), you will have to archive them as a ZIP package and then deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Node.js Azure WebJob from Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unfortunately, it is not currently possible to deploy an Azure WebJob directly
    from Visual Studio Code. However, if you have the **Azure App Service **extension
    installed, you can quickly navigate from within the IDE to the portal and upload
    the code manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, you have to right-click on the WebJobs section of your Azure App
    Service and select Open in Portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6957682-b8ca-45f5-88d0-21d7adfeda4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Doing so will route you directly to the instance of Azure App Service, where
    you can add a new WebJob by clicking on the + Addbutton:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6485b618-3220-45fb-9ee0-940c9f57a662.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen, Azure WebJobs are a really helpful and useful feature of App
    Services that let you quickly develop jobs running either continuously or triggered
    on schedule. They start to shine when you have a working web app, which could
    be used to host them and execute many different actions asynchronously (such as
    generating a report or reading a queue, which will feed your application's database
    later). Thanks to the support of different programming languages, you do not have
    to limit yourself to only one particular platform. Last but not least, they are
    a great introduction to Azure Functions, which are one of the most popular services
    in Azure and extend the current possibilities of WebJobs even further. In [Chapter
    3](51d6dd91-dc4f-4c18-af05-e6ddc1b552fc.xhtml), *Deploying Web Applications as
    Containers*, you will learn about deploying Web Apps as containers, what extends
    even more the capabilities of App Service when it comes to hosting web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can you run WebJobs using the Free or Shared tier?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What run modes does WebJobs currently supprt?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you run a Java application using WebJobs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you ensure that runtime will find your job starting file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you publish a WebJob containing more than only one file? If so, how can
    you do that?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you ensure that a WebJob will not be scaled out to multiple instances?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can a WebJob access the application settings of the App Service that hosts it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/app-service/webjobs-sdk-how-to](https://docs.microsoft.com/en-us/azure/app-service/webjobs-sdk-how-to)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
