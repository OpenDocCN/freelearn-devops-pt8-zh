- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenShift Plus – a Multi-Cluster Enterprise Ready Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we discussed in [*Chapter 1*](B18015_01.xhtml#_idTextAnchor016),
    *Hybrid Cloud Journey and Strategies*, the main challenges related to public cloud
    usage, such as keeping cloud costs under control and having consistent, secure,
    and compliant platforms, no matter which cloud provider is being used. We also
    introduced some of the tools that are helpful to work with multi-clusters and
    help to address those challenges, from a technology perspective.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 9*](B18015_09.xhtml#_idTextAnchor176), *OpenShift Pipelines – Tekton*,
    and [*Chapter 10*](B18015_10.xhtml#_idTextAnchor204), *OpenShift GitOps – ArgoCD*,
    we covered **CI/CD pipelines** and **GitOps** using OpenShift, including deployment
    into multiple clusters.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B18015_11.xhtml#_idTextAnchor229), *OpenShift Multi-Cluster
    GitOps and Management*, we saw how to use **Red Hat Advanced Cluster Management**
    to manage and observe several clusters from a single pane, deploy workloads into
    many clusters at once, and also use policies to ensure all your clusters are compliant.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the previous chapter – [*Chapter 12*](B18015_12.xhtml#_idTextAnchor251),
    *OpenShift Multi-Cluster Security* – we introduced the **Red Hat Advanced Cluster
    Security** tool, which helps to enhance the security of all your clusters, by
    implementing security policies, managing the known vulnerabilities, assessing
    the security risks and compliance, and managing the network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have two different focuses in this chapter, the first is to introduce
    the last important piece for the hybrid cloud strategy: **Red Hat Quay**, which
    will store all container images in a central image registry and makes your CI/CD
    process a bit easier and more robust; and the second is to discuss the **Red Hat
    OpenShift Plus** offering, which bundles all these pieces together to provide
    you a comprehensive and competitive solution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, you will find the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Red Hat Quay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Red Hat using the Quay Operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Red Hat Quay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is OpenShift Plus?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenShift Plus: A practical use-case'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start now then!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Red Hat Quay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Red Hat Quay is an enterprise container registry platform that runs on Red
    Hat Enterprise Linux or OpenShift, on-premise or in the cloud. Red Hat Quay provides
    great features for an image registry, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Image vulnerability scan**: Scan the images to find known vulnerabilities
    just after they are pushed to the registry using the Clair project. See more information
    about Clair in the *Further reading* section of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geo-replication**: Sync the image registry contents between two or more Quay
    instances, allowing multiple and geographically distributed Quay deployments to
    look like a single registry. This is especially helpful for environments spread
    over far distances and with high latency. Quay handles asynchronous data synchronization
    between the different instances to make images available transparently for the
    end user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repository mirroring**: This synchronizes one or more repositories between
    two Quay instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access control**: Granular permission control allows you to define who can
    read, write, and administer groups and repositories. You can also leverage robot
    accounts to allow automated access to organizations and repositories using the
    Quay API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Red Hat Quay** is available as a managed offering on the [quay.io](http://quay.io)
    portal or self-managed, where you deploy and maintain it.'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Red Hat Quay using the Quay Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different ways to deploy Quay, as you can see in the product’s official
    documentation link that you’ll find in the *Further reading* section of this chapter.
    For didactical reasons, we decided to deploy it using the Quay Operator with fully-managed
    components – a comfortable way to start using Quay.
  prefs: []
  type: TYPE_NORMAL
- en: Some prerequisites are necessary to install Quay as an enterprise container
    registry.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites to install Quay using the Operator are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: An OpenShift cluster with a privileged account to deploy and set up Quay.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Object storage: The supported object storage is Red Hat OpenShift Data Foundation,
    AWS S3, Google Cloud Storage, Azure Storage, Ceph/RadosGW Storage/Hitachi HCP
    storage, Swift storage, and NooBaa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cluster capacity to host the following services:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL or MySQL database. PostgreSQL is preferred due to enhanced features
    for Clair security scanning.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A proxy server.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A key-value database. Redis is the default option to store non-critical Red
    Hat Quay configuration.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Quay, the application service itself.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With all prerequisites met, we can install the Quay Operator. See next how to
    install it.
  prefs: []
  type: TYPE_NORMAL
- en: Operator installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process to deploy the Quay Operator is simple. Follow the instructions
    in the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `Red Hat Quay`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Seach for the Red Hat Quay Operator ](img/B18015_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Seach for the Red Hat Quay Operator
  prefs: []
  type: TYPE_NORMAL
- en: Click on the tile and then on the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Install Red Hat Quay ](img/B18015_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Install Red Hat Quay
  prefs: []
  type: TYPE_NORMAL
- en: Leave the default options and click on the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Operator installation ](img/B18015_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Operator installation
  prefs: []
  type: TYPE_NORMAL
- en: When the Operator is installed, access the **Quay Registry** tab and click on
    **Create instance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Creating a Quay Registry instance ](img/B18015_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Creating a Quay Registry instance
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, change the name in the proper field and leave all default options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Quay instance creation ](img/B18015_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Quay instance creation
  prefs: []
  type: TYPE_NORMAL
- en: Check the **Quay Registry** tab. You will see the **Status** column similar
    to the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Quay instance created ](img/B18015_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Quay instance created
  prefs: []
  type: TYPE_NORMAL
- en: As soon as it finishes, click on the registry that has been just created and
    inspect the **Registry Endpoint** URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Quay endpoint ](img/B18015_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Quay endpoint
  prefs: []
  type: TYPE_NORMAL
- en: Click on the registry endpoint address. The Quay Registry application will be
    shown to configure your multi-cluster registry.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Quay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the installation process finishes, you will have access to some important
    endpoints that are used to configure the integration between the Quay Operator,
    the Quay Registry instance, and OpenShift. To use them, you need to follow the
    next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the namespace in which you installed Quay (in our case, the `openshift-operators`
    namespace), navigate to `<objectInstanceName>-quay-config-editor-credentials-<randomPodId>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Check Quay config credentials ](img/B18015_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Check Quay config credentials
  prefs: []
  type: TYPE_NORMAL
- en: Click on it and choose **Reveal Values**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Quay credential values ](img/B18015_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – Quay credential values
  prefs: []
  type: TYPE_NORMAL
- en: Take note of the credentials and navigate back to **Config Editor Endpoint**
    in the Quay Registry Operator instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Quay config endpoint ](img/B18015_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – Quay config endpoint
  prefs: []
  type: TYPE_NORMAL
- en: Click the link to access **Config Editor Tool**. Use the credentials you got
    in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Quay UI config tool ](img/B18015_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – Quay UI config tool
  prefs: []
  type: TYPE_NORMAL
- en: On this page, you can change many Quay configurations, such as SSL certificates,
    and so on – in our example, we changed the **Time Machine** expiration time. Click
    on **Validate Configuration Changes** after you make your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.12 – Quay settings config tool ](img/B18015_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – Quay settings config tool
  prefs: []
  type: TYPE_NORMAL
- en: After the configurations are validated, choose **Reconfigure Quay**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Quay config tool validation ](img/B18015_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – Quay config tool validation
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: This step will restart the operator pods and Quay may become unavailable for
    a short period.
  prefs: []
  type: TYPE_NORMAL
- en: The Quay Config Editor tool will automatically update the `quay-config-bundle`
    secret, used to store the configuration parameters. To see it navigate to `quay-config-bundle`
    secret and click on **Reveal values**. The changes made previously must be reflected
    inside this secret.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.14 – Quay secret after config tool changes ](img/B18015_13_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – Quay secret after config tool changes
  prefs: []
  type: TYPE_NORMAL
- en: If everything appears correct, you will be able to start using your Quay instance.
    Proceed with the next section to see instructions on how to use Quay.
  prefs: []
  type: TYPE_NORMAL
- en: Using Red Hat Quay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Red Hat Quay usage is very simple. A user-friendly interface will help you
    to configure additional global and security settings. We recommend you create
    an *organization* to organize your Quay registry by departments, regions, or any
    other division you want:'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we created an organization named **multiclusterbook**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Quay organization ](img/B18015_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Quay organization
  prefs: []
  type: TYPE_NORMAL
- en: Next, we created a private repository to upload our images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.16 – Quay repository ](img/B18015_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – Quay repository
  prefs: []
  type: TYPE_NORMAL
- en: A very helpful way to learn how to use Red Hat Quay is using the tutorial. You’ll
    see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Running the tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Running the tutorial mentioned in the Quay UI is not required but it can be
    a good starting point to understanding Red Hat Quay as an enterprise container
    registry. The first step of this tutorial is to log in via the terminal to the
    Quay registry endpoint. We are using `docker login` instead of `podman login`,
    `docker run` instead of `podman run`, and so on):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You should have a successful login, otherwise, check the credentials used. After,
    try to run a **BusyBox** container image.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Quay tutorial ](img/B18015_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – Quay tutorial
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the following commands to create a sample container image for this
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Simple, right?! Now your instance of Quay Container Registry is configured,
    tested, and ready to use. Start exploring it in your CI/CD pipelines, pushing
    images to it, and using it as the enterprise container registry for your DevOps
    and DevSecOps pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve already covered Quay, let’s discuss a bit more about OpenShift
    Plus. Next, you’ll continue to discover why you should care about and consider
    OpenShift Plus in your hybrid or multi-cloud strategy.
  prefs: []
  type: TYPE_NORMAL
- en: What is OpenShift Plus?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenShift Plus is an offering from Red Hat that bundles the OpenShift platform
    with the products you can see in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.18 – OpenShift Plus products offering ](img/B18015_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – OpenShift Plus products offering
  prefs: []
  type: TYPE_NORMAL
- en: 'These products are included with this offering(besides OpenShift itself):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Advanced Cluster Management**: Provides features to manage several OpenShift
    and Kubernetes clusters. The features include cluster management, observability,
    policy and compliance, and workload deployment. We dove into this product in [*Chapter
    11*](B18015_11.xhtml#_idTextAnchor229), *OpenShift Multi-Cluster GitOps and Management*.
    If you haven’t seen that chapter yet, we highly encourage you to go back and walk
    through it now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced Cluster Security**: Enhance the security of your Kubernetes and
    OpenShift clusters with features such as Vulnerability Management, Network management,
    and others. This product was covered in [*Chapter 12*](B18015_12.xhtml#_idTextAnchor251),
    *OpenShift Multi-Cluster Security*. We also encourage you to check this chapter
    now if you haven’t done so yet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quay Enterprise Registry**: The global enterprise registry was covered at
    the beginning of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RWX` persistent volumes) using `RWO` persistent volumes) using **Ceph RBD**,
    and object storage provided by a solution named **Noobaa**. This product is not
    covered in this book. If you want to see more information about it, check the
    links we left in the *Further reading* section of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have followed this book from the beginning, this is not new information
    for you. We will focus now on giving additional information that can help you
    to understand the value proposition behind OpenShift Plus and why you should consider
    OpenShift Plus, instead of *just* the OpenShift platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Value proposition: benefits'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenShift Plus adds some great benefits to your multi-cluster strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consistency**: ACM provides the governance feature, which helps you to have
    consistent configurations among all your clusters. In terms of security, ACS also
    implements security policies you can define that will also help to keep all clusters
    compliant with them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portability**: Quay provides a global image registry that all clusters pull
    images from. ACM also can help you to deploy applications against many clusters
    at once and to inspect and monitor their status. By using it together with OpenShift
    GitOps, you can leverage **ArgoCD** to implement **GitOps** deployment practices
    and maintain the desired state of your applications, no matter in which OpenShift
    cluster and cloud provider you are running them. Of course, the portability between
    clusters also depends on the application, as the more decoupled the application
    is, the easier it will be to port between different OpenShift clusters and providers.
    The important thing to understand is that ACM and Quay help to make your applications
    portable much easier. OpenShift Data Foundation also helps to make stateful workloads
    easier to port, by providing a standard way for applications to have access to
    Persistent Volumes, regardless of the infrastructure or cloud providers the clusters
    are running on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Management**: Managing several clusters in different environments is not
    an easy task in general. Companies usually have many people focused only on doing
    that. You can turn this activity into a bit of an easier task and perhaps decrease
    the costs associated with it by using ACM. Features such as cluster management,
    observability, and governance (policies) are helpful to manage several clusters
    from a single pane.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: As we discussed in [*Chapter 12*](B18015_12.xhtml#_idTextAnchor251),
    *OpenShift Multi-Cluster Security*, making a few clusters secure and compliant
    in general is not a hard task, however, when we scale to several clusters it becomes
    more challenging. ACS adds the capability to easily enforce security policies,
    detect vulnerabilities, and plan actions to remediate them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Besides OpenShift Plus, Red Hat also provides some additional value-added products
    available in the Red Hat Hybrid Cloud portal ([cloud.redhat.com](http://cloud.redhat.com))
    for any OpenShift customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenShift Cluster Management**: This allows you to view high-level cluster
    information, create new clusters using the Assisted Installer, configure Red Hat
    subscriptions, basic level monitoring, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost Management**: Cost management is an interesting tool to track costs
    and usage of AWS, Google Cloud, Azure cloud providers, and OpenShift clusters
    as well. It helps you to have a consolidated view of the costs associated with
    multiple cloud accounts and also across your hybrid cloud infrastructure, to inspect
    cost trends, and to even use it as a basis for charging departments or teams by
    their usage. See the link for more information about this tool in the *Further
    reading* section of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next screenshot, you see an example of what the **Cost Management Overview**
    screen looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.19 – Cost Management feature ](img/B18015_13_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – Cost Management feature
  prefs: []
  type: TYPE_NORMAL
- en: '**Developer Sandbox**: This is a free OpenShift environment in a shared, multi-tenant
    OpenShift cluster pre-configured with a set of developer tools. Use it as a sandbox
    for your tests and as an environment to learn how to develop for OpenShift. You
    will find the link for it in the *Further reading* section of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides the items listed in the preceding list, OpenShift Plus may make sense
    from the subscription cost as well. Any package is usually priced better than
    buying individual pieces separately. That being said, if you are interested in
    any software that is part of the *Plus* stack mentioned in this chapter, it might
    make sense to buy OpenShift Plus, instead of OpenShift and the software only.
    Consult your Red Hat account team and ask for a quote for OpenShift Plus.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve already discussed some of the benefits of having the OpenShift
    Plus stack and considerations for when it is really compelling, let’s use a fictional
    use case as an example to make it more tangible.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift Plus – a practical use case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s consider the following use case. Try to use the concepts we covered in
    this book to identify which tool you could use to cover each requirement.
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case**: The company *HybridMyCloud* is developing an AI/ML application
    that has the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: The application life cycle is comprised of Development, QA, Pre-prod, and Production
    environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development and QA can share the same underlying platform. Pre-prod and Production
    need to be separated due to regulatory needs. Production application needs to
    be in a private subnet, with no public direct access from the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C-level and procurement department of *HybridMyCloud* signed a contract
    with AWS and, due to that, wants to host most resources there. However, they don’t
    want to be locked into it and want to have the ability to move the application
    to Azure when needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This AI/ML application is based on containers and stateless, however, it stores
    images in S3 object storage. It receives an X-Ray image, stores it in S3 object
    storage, and uses an ML-trained model to make a risk assessment of pneumonia.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This application handles **Protected Health Information** (**PHI**), therefore
    *HybridMyCloud* wants to be compliant with the **Health Insurance Portability
    and Accountability Act** (**HIPAA**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a mission-critical application, so the enterprise architects of *HybridMyCloud*
    decided to have this application deployed not only on multi-availability zones
    but also using multiple regions on AWS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other policies defined by *HybridMyCloud* are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All containers need to have resource requests and limits for CPU and memory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Never use the latest tag images.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All images used need to come from the enterprise registry. Pulling images from
    any other sources other than the enterprise registry and Red Hat certified image
    registries is strictly prohibited.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, how would you fulfill all these requirements? There are many different
    options to match these requirements; OpenShift Plus is definitely a good option
    that can comply with all of them. Let’s discuss what the infrastructure would
    look like and how OpenShift Plus tools would be used with this use case:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Several OpenShift clusters are required to fulfill these requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: One cluster for Development and QA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One cluster for Pre-prod
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two clusters for Production, each one in a different AWS region
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One spare cluster on Azure that can host the application at any given time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You could use the Cluster Lifecycle Management feature of **Advanced Cluster
    Management** first to deploy these clusters on AWS and Azure. For S3 storage,
    either the native cloud provider services can be used or, alternatively, use the
    **OpenShift Data Foundation** with *Multi-Cloud Object Gateway*, which would add
    the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Object Bucket Claims to create S3 volumes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the *Multi-Cloud Object Gateway* to mirror the volume between AWS and Azure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With clusters in place, **Advanced Cluster Management** can also be used for
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Advanced Cluster Management** in conjunction with **OpenShift GitOps** can
    be used to deploy the application in multiple clusters at the same time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policies can be created to set `allowedRegistries` field of the `image.config.openshift.io/cluster`
    custom resource to only allow images that come from the enterprise registry to
    run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the observability feature to monitor the application and cluster health.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quay can be used as the enterprise registry and the embedded image vulnerability
    scanning tool can be used as one of the sources to find known vulnerabilities.
    ACS can be used to detect known vulnerabilities in all clusters and assess them
    using HIPAA policies. It also can be used in the CI/CD pipeline to perform a static
    security analysis of manifests and to find anti-patterns, such as the usage of
    the latest tag image.
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few examples. Other tools we covered in this book can also
    be used, such as OpenShift Pipelines to implement CI/CD pipelines, Cost Management
    to track costs with cloud providers, and Red Hat Container Catalog to provide
    the best container base image, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we had a brief overview of Red Hat Quay, an interesting option
    for a container image registry. We discussed the main benefits of OpenShift Plus
    and why it makes sense to at least consider OpenShift Plus with your hybrid or
    multi-cloud strategy. Finally, we used a fictional use case to think about how
    the OpenShift Plus stack could be used in a practical scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wow, what a great journey so far! We have covered many things already in this
    book and we are so pleased that you have come along with us on this journey. We
    are almost at the end of our long journey here, but the best part is coming: in
    the next chapter, we will exercise most of what we have learned in this book using
    one practical example. We will have a comprehensive review of OpenShift Pipelines,
    GitOps, and all other tools we covered in this book using an example, practice
    with the concepts and tools from scratch, and have a real functional application
    deployed into multiple clusters in the end.'
  prefs: []
  type: TYPE_NORMAL
- en: We encourage you to move on to the next chapter and try the exercises we propose
    there.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking for more information? Check the following references to get more information
    about Red Hat Quay:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Quay product documentation:* [https://access.redhat.com/documentation/en-us/red_hat_quay/3.7](https://access.redhat.com/documentation/en-us/red_hat_quay/3.7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quay Object Storage prerequisite:* [https://access.redhat.com/documentation/en-us/red_hat_quay/3.7/html/deploy_red_hat_quay_on_openshift_with_the_quay_operator/operator-preconfigure#operator-storage-preconfig](https://access.redhat.com/documentation/en-us/red_hat_quay/3.7/html/deploy_red_hat_quay_on_openshift_with_the_quay_operator/operator-preconfigure#operator-storage-preconfig)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Clair – Vulnerability Static Analysis for Containers:* [https://github.com/quay/clair](https://github.com/quay/clair
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check the following references to get more information about Red Hat OpenShift
    Data Foundation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*OpenShift Data Foundation Smart Page:* [https://www.redhat.com/en/technologies/cloud-computing/openshift-data-foundation](https://www.redhat.com/en/technologies/cloud-computing/openshift-data-foundation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OpenShift Data Foundation Product Page:* [https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation](https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check the following references to get more information about Red Hat OpenShift
    Plus:'
  prefs: []
  type: TYPE_NORMAL
- en: '*OpenShift Plus Smart Page:* [https://www.redhat.com/en/technologies/cloud-computing/openshift/platform-plus](https://www.redhat.com/en/technologies/cloud-computing/openshift/platform-plus)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check the following references to get more information about Red Hat Cost Management:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Official documentation:* [https://access.redhat.com/documentation/en-us/cost_management_service/2022](https://access.redhat.com/documentation/en-us/cost_management_service/2022)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Upstream project:* [https://project-koku.github.io/](https://project-koku.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check the following references to get more information about OpenShift Developer
    Sandbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Getting started:* [https://developers.redhat.com/developer-sandbox](https://developers.redhat.com/developer-sandbox)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
