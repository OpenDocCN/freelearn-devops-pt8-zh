["```\n[FunctionName(\"QueueTrigger\")]\npublic static void Run(\n  [QueueTrigger(\"myqueue-items\")] string myQueueItem, \n  TraceWriter log)\n{\n  log.Info($\"C# function processed: {myQueueItem}\");\n}\n```", "```\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.Azure.WebJobs.Host;\n\nnamespace HandsOnAzure.Function\n{\n    public static class Function1\n    {\n        [FunctionName(\"Function1\")]\n        public static async Task<HttpResponseMessage> Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route = null)]\n            HttpRequestMessage req, TraceWriter log)\n        {\n        }\n    }\n}\n```", "```\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Host;\n\nnamespace HandsOnAzure.Function\n{\n    public static class Function2\n    {\n        [FunctionName(\"Function2\")]\n        public static void Run([QueueTrigger(\"myqueue-items\", Connection = \"connection-string\")]\n            string myQueueItem, TraceWriter log)\n        {\n        }\n    }\n}\n```", "```\nusing System.Net.Http;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.Azure.WebJobs.Host;\n\nnamespace HandsOnAzure.Function\n{\n    public static class Function3\n    {\n        [FunctionName(\"Function3\")]\n        public static HttpResponseMessage Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route = \"Function3/name/{name}\")]\n            HttpRequestMessage req, string name, TraceWriter log)\n        {\n        }\n    }\n}\n```", "```\n2018-07-22T09:15:36  Welcome, you are now connected to log-streaming service.\n2018-07-22T09:15:57.252 [Info] Function started (Id=63d9f8ff-b807-4805-8b24-5f90edfc0134)\n2018-07-22T09:15:57.377 [Info] JavaScript timer trigger function ran!: 2018-07-22T09:15:57.377Z\n2018-07-22T09:15:57.377 [Info] Function completed (Success, Id=63d9f8ff-b807-4805-8b24-5f90edfc0134, Duration=128ms)\n2018-07-22T09:17:36  No new trace in the past 1 min(s).\n2018-07-22T09:18:36  No new trace in the past 2 min(s).\n```", "```\nhttps://handsonazurefunctionapp.azurewebsites.net/api/HttpTriggerJS1?code=awKhkdPqyQvYUwzn6zle6V4hqk460YwOBs9RyaQUthX/AWGBMjtRIA==\n```", "```\nGET /api/HttpTriggerJS1 HTTP/1.1\nHost: handsonazurefunctionapp.azurewebsites.net\nContent-Type: application/json\nx-functions-key: awKhkdPqyQvYUwzn6zle6V4hqk460YwOBs9RyaQUthX/AWGBMjtRIA==\nCache-Control: no-cache\n```", "```\n{\n    \"aggregator\": {\n        \"batchSize\": 1000,\n        \"flushTimeout\": \"00:00:30\"\n    },\n    \"applicationInsights\": {\n        \"sampling\": {\n          \"isEnabled\": true,\n          \"maxTelemetryItemsPerSecond\" : 5\n        }\n    },\n    \"eventHub\": {\n      \"maxBatchSize\": 64,\n      \"prefetchCount\": 256,\n      \"batchCheckpointFrequency\": 1\n    },\n    \"functions\": [ \"QueueProcessor\", \"GitHubWebHook\" ],\n    \"functionTimeout\": \"00:05:00\",\n    \"healthMonitor\": {\n        \"enabled\": true,\n        \"healthCheckInterval\": \"00:00:10\",\n        \"healthCheckWindow\": \"00:02:00\",\n        \"healthCheckThreshold\": 6,\n        \"counterThreshold\": 0.80\n    },\n    \"http\": {\n        \"routePrefix\": \"api\",\n        \"maxOutstandingRequests\": 20,\n        \"maxConcurrentRequests\": 10,\n        \"dynamicThrottlesEnabled\": false\n    },\n    \"id\": \"9f4ea53c5136457d883d685e57164f08\",\n    \"logger\": {\n        \"categoryFilter\": {\n            \"defaultLevel\": \"Information\",\n            \"categoryLevels\": {\n                \"Host\": \"Error\",\n                \"Function\": \"Error\",\n                \"Host.Aggregator\": \"Information\"\n            }\n        }\n    },\n    \"queues\": {\n      \"maxPollingInterval\": 2000,\n      \"visibilityTimeout\" : \"00:00:30\",\n      \"batchSize\": 16,\n      \"maxDequeueCount\": 5,\n      \"newBatchThreshold\": 8\n    },\n    \"serviceBus\": {\n      \"maxConcurrentCalls\": 16,\n      \"prefetchCount\": 100,\n      \"autoRenewTimeout\": \"00:05:00\"\n    },\n    \"singleton\": {\n      \"lockPeriod\": \"00:00:15\",\n      \"listenerLockPeriod\": \"00:01:00\",\n      \"listenerLockRecoveryPollingInterval\": \"00:01:00\",\n      \"lockAcquisitionTimeout\": \"00:01:00\",\n      \"lockAcquisitionPollingInterval\": \"00:00:03\"\n    },\n    \"tracing\": {\n      \"consoleLevel\": \"verbose\",\n      \"fileLoggingMode\": \"debugOnly\"\n    },\n    \"watchDirectories\": [ \"Shared\" ],\n}\n```", "```\n[FunctionName(\"Orchestration\")]\npublic static async Task Orchestration_Start([OrchestrationTrigger] DurableOrchestrationContext context)\n{\n  var payload = context.GetInput<string>();\n  await context.CallActivityAsync(nameof(Activity), payload);\n}\n\n[FunctionName(\"Activity\")]\npublic static string Activity([ActivityTrigger] DurableActivityContext context)\n{\n  var payload = context.GetInput<string>();\n  return $\"Current payload is {payload}!\";\n}\n```", "```\n[FunctionName(\"Orchestration_Client\")]\npublic static async Task<string> Orchestration_Client(\n  [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = \"start\")] HttpRequestMessage input,\n  [OrchestrationClient] DurableOrchestrationClient starter)\n{\n  return await starter.StartNewAsync(\"Orchestration\", await input.Content.ReadAsStringAsync());\n}\n```", "```\n[FunctionName(\"Terminate\")]\npublic static async Task Terminate(\n  [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = \"terminate/{id}\")] HttpRequestMessage input,\n  string id,\n  [OrchestrationClient] DurableOrchestrationClient client)\n{\n  var reason = \"Manual termination\";\n  await client.TerminateAsync(id, reason);\n}\n```", "```\n[FunctionName(\"Orchestration_Client\")]\npublic static async Task<string> Orchestration_Client(\n  [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = \"start\")] HttpRequestMessage input,\n  [OrchestrationClient] DurableOrchestrationClient starter)\n{\n  return await starter.StartNewAsync(\"Orchestration\", null);\n}\n\n[FunctionName(\"Orchestration\")]\npublic static async Task Orchestration_Start([OrchestrationTrigger] DurableOrchestrationContext context, TraceWriter log)\n{\n  log.Info($\"Scheduled at {context.CurrentUtcDateTime}\");\n\n  await context.CreateTimer(context.CurrentUtcDateTime.AddHours(1), CancellationToken.None);\n  await context.CallActivityAsync(nameof(Activity), context.CurrentUtcDateTime);\n}\n\n[FunctionName(\"Activity\")]\npublic static void Activity([ActivityTrigger] DurableActivityContext context, TraceWriter log)\n{\n  var date = context.GetInput<DateTime>();\n  log.Info($\"Executed at {date}\");\n}\n```", "```\n[FunctionName(\"Orchestration_Raise\")]\npublic static async Task Orchestration_Raise(\n  [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = \"start_raise/{id}/{event}\")] HttpRequestMessage input,\n  string id,\n  string @event,\n  [OrchestrationClient] DurableOrchestrationClient starter)\n{\n  await starter.RaiseEventAsync(id, @event, await input.Content.ReadAsStringAsync());\n}\n```", "```\n[FunctionName(\"Orchestration\")]\npublic static async Task<string> Orchestration_Start([OrchestrationTrigger] DurableOrchestrationContext context)\n{\n  var @event = await context.WaitForExternalEvent<int>(\"Approved\");\n\n  if (@event == 1)\n  {\n    var result = await context.CallActivityAsync<string>(nameof(Activity), @event);\n    return result;\n  }\n\n  return \"Not Approved\";\n}\n```", "```\n{\n  \"generatedBy\": \"Microsoft.NET.Sdk.Functions-1.0.14\",\n  \"configurationSource\": \"attributes\",\n  \"bindings\": [\n    {\n      \"type\": \"httpTrigger\",\n      \"methods\": [\n        \"get\",\n        \"post\"\n      ],\n      \"authLevel\": \"function\",\n      \"name\": \"req\"\n    }\n  ],\n  \"disabled\": false,\n  \"scriptFile\": \"../bin/HandsOnAzure.Function.dll\",\n  \"entryPoint\": \"HandsOnAzure.Function.Function1.Run\"\n}\n```", "```\n[FunctionName(\"Function1\")]\npublic static async Task<HttpResponseMessage> Run(\n  [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route = null)]\n  HttpRequestMessage req, TraceWriter log)\n{\n}\n```", "```\n{\n  \"generatedBy\": \"Microsoft.NET.Sdk.Functions-1.0.0.0\",\n  \"configurationSource\": \"attributes\",\n  \"bindings\": [\n    {\n      \"type\": \"eventHubTrigger\",\n      \"path\": \"myhub\",\n      \"connection\": \"EhConnection\",\n      \"name\": \"myEventHubMessage\"\n    }\n  ],\n  \"disabled\": false,\n  \"scriptFile\": \"..\\\\bin\\\\FunctionsTest.dll\",\n  \"entryPoint\": \"FunctionsTest.Hub.Run\"\n}\n```", "```\n[FunctionName(\"BlobTriggerCSharp\")] \npublic static void Run([BlobTrigger(\"my-blobs/{name}\")] Stream myBlob, string name, TraceWriter log)\n{\n}\n```", "```\n[FunctionName(\"BlobInput\")]\npublic static void BlobInput(\n  [QueueTrigger(\"myqueue-items\")] string myQueueItem,\n  [Blob(\"samples-workitems/{queueTrigger}\", FileAccess.Read)] Stream myBlob,\n  TraceWriter log)\n{\n}\n```", "```\n[FunctionName(\"ResizeImage\")]\npublic static void ResizeImage_Run(\n  [BlobTrigger(\"sample-images/{name}\")] Stream image,\n  [Blob(\"sample-images-sm/{name}\", FileAccess.Write)] Stream imageSmall,\n  [Blob(\"sample-images-md/{name}\", FileAccess.Write)] Stream imageMedium)\n{\n  // There goes your code...\n}\n```", "```\n[FunctionName(\"QueueTrigger\")]\n[return: Blob(\"output-container/{id}\")]\npublic static string QueueTrigger_Run([QueueTrigger(\"myqueue\")] string input, TraceWriter log)\n{\n  return \"Some string...\";\n}\n```"]