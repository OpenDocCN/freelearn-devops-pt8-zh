- en: Chapter 5. Using PostgreSQL with OpenShift Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter presents a number of recipes that show you how to get started
    with the OpenShift PostgreSQL database cartridge. You will learn how to add and
    manage the PostgreSQL cartridge, how to take backups of a PostgreSQL database,
    how to list and install PostgreSQL extensions, and how to use the EnterpriseDB
    PostgreSQL Cloud Database service with OpenShift applications. The specific recipes
    within this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the PostgreSQL cartridge to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the PostgreSQL cartridge from your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to the PostgreSQL cartridge using pgAdmin from your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the PostgreSQL max_connections setting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the .psqlrc configuration file to configure the OpenShift application
    psql shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing scheduled PostgreSQL database backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using EnterpriseDB PostgreSQL Cloud Database with OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PostgreSQL extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PostgreSQL is a popular, open source relational database used by many web applications
    around the world. OpenShift supports a stock standard, security hardened version
    of PostgreSQL database. As you are using standard versions of databases, you are
    not locked inside OpenShift and can easily port your data if required.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will use the PHP 5.4 application we created in [Chapter 3](part0041_split_000.html#page
    "Chapter 3. Creating and Managing Applications"), *Creating and Managing Applications*.
    If you do not have any OpenShift application running, you can create a new OpenShift
    application by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can also use third-party database services, such as EnterpriseDB Cloud Database,
    if running your database in OpenShift is not possible or you have already invested
    in third-party services. Another reason why you might like to use a third-party
    database service is that the OpenShift PostgreSQL cartridge is not scalable. So,
    for applications where you need horizontally scalable and highly available PostgreSQL
    service, you can use a third-party provider, such as EnterpriseDB, with your application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the PostgreSQL cartridge to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of writing this book, OpenShift supports two versions of the PostgreSQL
    database. You can view all the supported PostgreSQL versions by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, you will learn how to add the PostgreSQL 9.2 cartridge to your
    OpenShift application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. Also,
    we will use the application created in the *Creating an OpenShift application
    using the rhc command-line client* recipe in [Chapter 3](part0041_split_000.html#page
    "Chapter 3. Creating and Managing Applications"), *Creating and Managing Applications*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the PostgreSQL 9.2 cartridge to the `myapp` application, open a
    new command-line terminal, change the directory to the `myapp` directory location,
    and then execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install a new instance of PostgreSQL server on your application gear.
    The `-c` option is used to specify the cartridge name, and the `--app` option
    is used to specify the application name. The `--app` option is not required if
    you are running the command within the application directory. The `-c` option
    is required, but you can get away from writing `-c`, as the rhc command-line client
    is intelligent enough to infer that PostgreSQL 9.2 is the cartridge name. The
    command can be as simple as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view the cartridge details using the `rhc show-cartridge` command as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can stop the PostgreSQL server using the `stop` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can restart the PostgreSQL server using the `restart` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to remove the PostgreSQL server from your application, you can
    use the `remove` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you run the `rhc cartridge-add` command, rhc will make a HTTP POST request
    to the OpenShift server. The OpenShift server will receive the request and install
    a new instance of the PostgreSQL database on your application gear. After provisioning
    the PostgreSQL server, the rhc client will show the database details on the command-line
    terminal as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view the PostgreSQL installation by performing SSH into your application
    gear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the `ls` command to view the gear directory structure, and you will
    see the `postgresql` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `postgresql` directory is the location of your PostgreSQL installation,
    and it is not shared with any other OpenShift application or user. It is only
    for your application, and only your application can access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also connect with your PostgreSQL server using the `psql` command-line
    client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can run SQL commands against your PostgreSQL server. To view all the
    databases, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `myapp` database corresponds to your application database. You can use
    this database for your application or create a new database using the `CREATE
    DATABASE` command. To view the uptime of your PostgreSQL server, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The output shows that the PostgreSQL server has been up for the last 12 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view all the available PostgreSQL command-line utilities available
    on the gear by typing `pg_` and pressing *Tab*. The *Tab* key enables the command-line
    completion functionality that allows the command-line program to automatically
    fill the rest of command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also add the PostgreSQL database from the OpenShift web console. Go
    to [https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications),
    and click on the `myapp` application for details. On the `myapp` application details
    web page, you will see the option to add the PostgreSQL database, as shown in
    the following screenshot. Click on **Add PostgreSQL 9.2** to add the PostgreSQL
    9.2 cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you will be directed to the page to add the PostgreSQL cartridge. Click
    on **Add Cartridge** to add a PostgreSQL database to your application. Have a
    look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After installing the PostgreSQL cartridge, you will be shown the PostgreSQL
    database details as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Accessing the PostgreSQL cartridge from your local machine* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the PostgreSQL cartridge from your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Adding the PostgreSQL cartridge to your application* recipe, you learned
    how to access the PostgreSQL database by performing SSH into the application gear.
    In this recipe, you will learn how to connect with the PostgreSQL database from
    your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to install the PostgreSQL cartridge. Also, you will
    need the `psql` command-line client on your machine. You can download the PostgreSQL
    server from the official website, [http://www.postgresql.org/download/](http://www.postgresql.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to access the PostgreSQL cartridge from your local
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command-line terminal and change the directory to the `myapp` application
    directory. Execute the following command to forward remote ports to the local
    machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Connect to the PostgreSQL server from the local machine using the `psql` command-line
    client as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please replace `<username>` with your PostgreSQL cartridge username and password.
    The host and port values can be found in the output of the `rhc port-forward`
    command. As you can see in step 1, PostgreSQL is available on the `127.0.0.1`
    host and port 5433\. You can view the username and password by running the `rhc
    show-app` or `rhc cartridge-show postgresql` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once connected, you can run any valid SQL command. The `\list` command shows
    the list of available databases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you used the `rhc port-forward` command to forward all the remote
    ports to the local machine. The `rhc port-forward` command is a wrapper around
    the SSH port forwarding that makes a port on the remote machine available on your
    local machine. A port on the remote machine that would otherwise be unavailable
    to you can be used just as if it's on your local machine. The command returns
    the list of ports that you can connect from your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in step 1, the `postgresql` process is available at port 5433
    on the `127.0.0.1` host.
  prefs: []
  type: TYPE_NORMAL
- en: In step 2, you connected to PostgreSQL from your local machine, passing in the
    username, password, host, and port of the database. After successful connection,
    you ran a SQL command in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: To terminate port forwarding, just press *Ctrl* + *C* on the command-line terminal
    where the `rhc port-forward` command is running.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Connecting to the PostgreSQL cartridge using pgAdmin from your local machine*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to the PostgreSQL cartridge using pgAdmin from your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Accessing the PostgreSQL cartridge from your local machine* recipe,
    you learned how to connect to the PostgreSQL cartridge from the `psql` command-line
    client from your local machine using port forwarding. In this recipe, you will
    learn how to connect to the PostgreSQL cartridge using pgAdmin from your local
    machine. pgAdmin is a comprehensive PostgreSQL database design and management
    system for Unix and Windows systems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to add the PostgreSQL cartridge to your application.
    Also, you will need pgAdmin on your local machine. You can download pgAdmin from
    the official website, [http://www.pgadmin.org/download/](http://www.pgadmin.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to connect the PostgreSQL cartridge using the pgAdmin
    client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command-line terminal, and change the directory to the `myapp` application
    directory. Execute the following command to forward remote ports to the local
    machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the pgAdmin application, and click on the socket icon to create a new
    connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a new connection by entering the PostgreSQL database details. You can
    get the username and password for the PostgreSQL cartridge using the `rhc show-app`
    or `rhc cartridge-show mysql` command. Have a look at the following screenshot:![How
    to do it…](img/00045.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to the PostgreSQL cartridge by clicking on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a connection listed in the left-hand side navigation pane, as shown
    in the following screenshot:![How to do it…](img/00046.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open the SQL editor by first clicking on the `myapp` database and then
    clicking on SQL icon. Have a look at the following screenshot:![How to do it…](img/00047.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following SQL query inside the SQL editor to check the database uptime:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you used the `rhc port-forward` command to forward all the remote
    ports to the local machine. This makes it possible to connect to the PostgreSQL
    database running inside your application gear. Step 2 through step 6, you created
    a new PostgreSQL connection and connected with the PostgreSQL cartridge from within
    pgAdmin. In step 7, you executed a SQL query using the SQL editor to verify that
    the connection is getting data from the PostgreSQL cartridge installed in your
    `myapp` application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Accessing the PostgreSQL cartridge from your local machine* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the PostgreSQL max_connections setting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenShift PostgreSQL cartridge is configured to allow 100 client connections
    at the most. If the number of clients connected to the PostgreSQL server goes
    over this threshold, PostgreSQL will start giving the `FATAL too many connections`
    error. In this recipe, you will learn how to update the PostgreSQL cartridge `max_connections`
    setting.
  prefs: []
  type: TYPE_NORMAL
- en: The number of maximum connections is dictated by the `max_connections` setting
    in the `postgresql.conf` configuration file. OpenShift does not allow users to
    modify the `postgresql.conf` configuration file. The recommended way to change
    the `max_connections` setting is by setting an environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to install PostgreSQL cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to update the PostgreSQL `max_connections` setting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the maximum connections to `200`, open a command-line terminal and run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After setting the environment variable, you have to restart the PostgreSQL
    cartridge for changes to take effect as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PostgreSQL database maintains its configuration in a file called `postgresql.conf`
    inside the `conf` directory of your installation. The `max_connections` configuration
    setting controls the maximum number of client connections allowed by the PostgreSQL
    server. You can view the `max_connection` setting by running a query against your
    PostgreSQL database. To see `max_connections` for your OpenShift PostgreSQL cartridge,
    SSH into the application gear, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'OpenShift does not allow users to modify the `postgresql.conf` file for security
    reasons. To allow users to modify the `max_connections` setting, OpenShift provides
    an environment variable called `OPENSHIFT_POSTGRESQL_MAX_CONNECTIONS`, which can
    be used to set the `max_connections` system variable. In step 1, you set the `OPENSHIFT_POSTGRESQL_MAX_CONNECTIONS`
    environment variable to `200`. The PostgreSQL server will not read the new value
    unless you restart the database. So, in step 2, you restarted the database using
    the `rhc cartridge-restart` command. To verify that `max_connections` value is
    updated, you can run the SQL command again as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `OPENSHIFT_POSTGRESQL_MAX_CONNECTIONS` variable is not the only configuration
    property supported by the PostgreSQL cartridge. You can set the following properties
    using environment variables. To learn about these settings, please refer to the
    following documentation: [https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server](https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server).'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Environment variable |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `shared_buffers` | `OPENSHIFT_POSTGRESQL_SHARED_BUFFERS` |'
  prefs: []
  type: TYPE_TB
- en: '| `datestyle` | `OPENSHIFT_POSTGRESQL_DATESTYLE` |'
  prefs: []
  type: TYPE_TB
- en: '| `ssl` | `OPENSHIFT_POSTGRESQL_SSL_ENABLED` |'
  prefs: []
  type: TYPE_TB
- en: '| `lc_messages` | `OPENSHIFT_POSTGRESQL_LOCALE` |'
  prefs: []
  type: TYPE_TB
- en: '| `lc_monetary` | `OPENSHIFT_POSTGRESQL_LOCALE` |'
  prefs: []
  type: TYPE_TB
- en: '| `lc_numeric` | `OPENSHIFT_POSTGRESQL_LOCALE` |'
  prefs: []
  type: TYPE_TB
- en: '| `lc_time` | `OPENSHIFT_POSTGRESQL_LOCALE` |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the .psqlrc configuration file to configure the OpenShift application
    psql shell* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Accessing the PostgreSQL cartridge from your local machine* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the .psqlrc configuration file to configure the OpenShift application
    psql shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PostgreSQL provides a startup file called `.psqrc`, which determines the behavior
    of the `psql` interactive command-line client. Just like `bashrc`, the psql client
    utility attempts to read and execute commands from the system-wide psqlrc file
    and the user's `~/.psqlrc` file before starting up. In this recipe, you will learn
    how you can use your own `.psqlrc` configuration file to configure your OpenShift
    application psql shell.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to install the PostgreSQL cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure the psql shell:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the directory to `myapp`, and then SSH into the application gear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new file in `$OPENSHIFT_DATA_DIR` named `.psqlrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s configure the psql shell to store the history of commands you have
    entered so that you can run them again. This is achieved by setting the `HISTFILE`
    location as shown in the following command. The `:DBNAME` variable allows psql
    to store a different history for each database. We will also enable psql to print
    the time taken to execute each command. This is done using the `\timing` option.
    To customize the psql shell, add the following content to the `.psqrc` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log out of the SSH session and create a new environment variable named `PSQLRC`
    to point to the new `.psqlrc` file location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Please replace `OPENSHIFT_DATA_DIR` with your `OPENSHIFT_DATA_DIR` location.
    You can get the location by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'SSH into the application gear again using the `rhc ssh` command, and then run
    the `psql` command. Run a query, and you will get the timing as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When psql is launched, it looks for a file called `psqlrc` and runs any command
    in the file to initialize the environment. On a *nix-based system, this file is
    called `.psqlrc` and is usually located under the user's home directory. From
    step 1 through step 3, you created a new file, `.psqlrc`, under `$OPENSHIFT_DATA_DIR`.
    We added a couple of configurations to the `.psqlrc` file. The first configuration
    makes sure that the SQL command history is stored in a file called `.psql_history`
    under `$OPENSHIFT_DATA_DIR`. The second configuration instructs psql to output
    the query execution time for each query.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, you created a new environment variable named `PSQLRC` that points
    to the `.psqlrc` location. Finally, in step 5, you logged in to the psql client
    and ran a query. After query execution, the psql client also showed the time taken
    to execute the query. As shown in the preceding command-line output, this query
    took approximately 86 ms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Accessing the PostgreSQL cartridge from your local machine* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing scheduled PostgreSQL database backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to perform a scheduled backup of your PostgreSQL
    database and upload it to Amazon S3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to add the PostgreSQL cartridge. Also, you need to
    have the Amazon AWS account. Go to [http://aws.amazon.com/](http://aws.amazon.com/),
    and sign up for a new account if you don't already have one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to perform daily scheduled backup of your PostgreSQL
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://console.aws.amazon.com/s3/home](https://console.aws.amazon.com/s3/home),
    and create a new bucket to store your database backups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the cron cartridge to your application by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'SSH into the application gear, and download the `s3-bash` utility in `$OPENSHIFT_DATA_DIR`.
    Extract it to the `s3-bash` directory. Have a look at the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file named `AWSSecretAccessKeyIdFile` in the `$OPENSHIFT_DATA_DIR/s3-bash`
    directory, and store your Amazon secret access key to it. This is required by
    `s3-bash` to communicate with Amazon S3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a script named `database_backup.sh` on your local machine in `.openshift/cron/minutely`,
    and add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous script will run every day at 23:50 and run the `pg_dump` command
    to create the data dump file. The file is then transferred to Amazon S3 using
    the s3-bash API. Finally, after uploading the file, it deletes the SQL dump file
    from the application gear.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we have to set the environment variables so that our script can talk with
    Amazon S3 as shown in the following commands. If you are not sure how to access
    your security credentials, please refer to the documentation at [http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html](http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html).
    Have a look at the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit the code, and push the code to the OpenShift gear. Every night at 23:50,
    a database backup would be done, and your backup would be uploaded to Amazon S3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous steps, you enabled daily backups of your PostgreSQL database
    cartridge. The recipe used the cron cartridge to upload database dumps to Amazon
    S3.
  prefs: []
  type: TYPE_NORMAL
- en: In step 1, you created a new Amazon S3 bucket to store your PostgreSQL database
    backups. Amazon S3 is widely used to store static files and is an ideal choice
    for this job. Next, you added the cron cartridge to the application. The cron
    cartridge will be used to perform daily backups at a particular time.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon S3 exposes its REST service that users can use to perform operations
    on S3 buckets. Amazon provides wrappers of many programming languages around its
    REST API to make it easy for developers to integrate with their application. As
    we wanted to keep this recipe language-agnostic, we used the Amazon S3 bash wrapper.
    Amazon does not officially support this wrapper, but it works very well. In step
    3, you downloaded `s3-bash` using `wget`. The `tar.gz` file was stored in `$OPENSHIFT_DATA_DIR`.
    You then extracted `tar.gz` to the `s3-bash` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in step 4, you created a file named `AWSSecretAccessKeyIdFile` to store
    the Amazon access key secret. The `s3-bash` wrapper uses a file for the AWS Secret
    Access Key ID so that it does not appear in the list of running processes with
    ps.
  prefs: []
  type: TYPE_NORMAL
- en: In step 5, you created a bash script that will be executed every night at 23:50\.
    The script first takes the database backup using the `pg_dump` command and then
    uploads the file to Amazon S3\. The filename is the current timestamp. Finally,
    after uploading the backup to S3, the script deletes the backup to save disk space.
  prefs: []
  type: TYPE_NORMAL
- en: In step 6, you created three environment variables required by the backup script.
    Finally, you committed the changes in step 7 and pushed them to the OpenShift
    application gear.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using EnterpriseDB PostgreSQL Cloud Database with OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use EnterpriseDB PostgreSQL Cloud Database
    with your OpenShift applications. You can also use the Amazon RDS PostgreSQL DB
    instance in the same way we used the Amazon RDS MySQL DB instance. EnterpriseDB
    Cloud Database allows you to set up a replicated, sharded, and highly available
    PostgreSQL cluster either on Amazon EC2 or the HP Cloud services. You can take
    periodic backups of your data and scale it horizontally without any administrative
    skills.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an OpenShift application. Refer to the
    *Creating an OpenShift application using the rhc command-line client* recipe in
    [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating and Managing Applications"),
    *Creating and Managing Applications*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to learn how to connect your OpenShift applications
    with the EnterpriseDB PostgreSQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://www.enterprisedb.com/cloud-database/amazon](http://www.enterprisedb.com/cloud-database/amazon),
    and click on **Get Started Now** in the free trial section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will be directed to the signup page. Enter the valid details, and
    click on the submit button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After successful signup, you will be redirected to the dashboard console as
    shown in the next screenshot. Here, you can launch a database cluster, see the
    resources you are consuming, or see the status update of the service. At the bottom
    of the dashboard, there are links to the tutorials and documentation about PostgreSQL
    CloudDB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will create our first DB cluster on EnterpriseDB Cloud by clicking on
    **Launch DB Cluster**. This will open a pop up where you need to provide details
    of your cluster, as shown in the following screenshot. The details include the
    name of the cluster, PostgreSQL version, instance size of Amazon, number of nodes,
    and the master username and password.![How to do it…](img/00048.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After entering cluster details, you can choose how many backups you want to
    keep and when you would like to take the backup. Use the default options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Launch** button. This will initiate the process of creating
    a replicated DB cluster, as shown in the following screenshot. It will take a
    couple of minutes to launch the cluster, so please be patient. From the **Clusters**
    tab, you can get information about the database clusters you own. In the **Details**
    tab, you can see the address where master and replica are running.![How to do
    it…](img/00049.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a replicated DB cluster
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To connect to the EnterpriseDB PostgreSQL Cloud DB, SSH into the application
    gear, and use the `psql` command to connect with Cloud DB. Every application gear
    has psql installed on it. The host address is the address of master that you can
    get from step 6.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Step 1 through step 6 helped you create a new instance of EnterpriseDB PostgreSQL
    Cloud DB instance. You are required to provide details related to your DB instance,
    and EnterpriseDB will provision a PostgreSQL DB instance based on the details
    you entered. By step 6, you had a running PostgreSQL DB instance that you could
    connect from the outside world. You can connect it from your local machine or
    from your OpenShift application gear.
  prefs: []
  type: TYPE_NORMAL
- en: In step 7, you used the database details to connect to the EnterpriseDB PostgreSQL
    instance using the psql command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PostgreSQL extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extensions are add-ons that you can install in a PostgreSQL database to extend
    the functionality beyond the basic offering. You can find a list of PostgreSQL
    extensions available on the PostgreSQL Extension Network website, [http://www.pgxn.org/](http://www.pgxn.org/).
    The OpenShift PostgreSQL cartridge comes in a bundle with a list of extensions.
    These extensions are not installed by default but are available to you if you
    need them. In this recipe, you will learn how to install an extension in your
    OpenShift PostgreSQL cartridge.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to add the PostgreSQL cartridge to your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to install an extension:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new command-line terminal, and SSH into the application gear using the
    `rhc ssh` command. Once logged in, run the psql command-line utility to connect
    with the PostgreSQL cartridge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From inside the psql shell, run the following command to view all the available
    extensions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, install the `fuzzystrmatch` extension by executing the following SQL
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can view all the installed extensions by running the `\dx` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can remove the extension from your psql cartridge by running the following
    SQL command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every OpenShift PostgreSQL cartridge has access to a list of extensions. These
    extensions are not installed by default, as not all the applications need these
    extensions. To view all the available extensions, you can use the `select * from
    pg_available_extensions` SQL command as shown in step 2\. At the time of writing
    this book, the PostgreSQL cartridge is prepackaged with 51 extensions. These extensions
    can be installed by running the `CREATE EXTENSION SQL` command as shown in step
    2\. The `CREATE EXTENSION` command compiles and installs the extension. In step
    3, you installed the `fuzzystrmatch` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fuzzystrmatch` extension provides several functions to determine similarities
    and differences between strings. To view the details of the `fuzzystrmatch` extension,
    you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You can drop an extension using the `DROP EXTENSION` command.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
