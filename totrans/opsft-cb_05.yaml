- en: Chapter 5. Using PostgreSQL with OpenShift Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章 使用 PostgreSQL 与 OpenShift 应用程序
- en: 'This chapter presents a number of recipes that show you how to get started
    with the OpenShift PostgreSQL database cartridge. You will learn how to add and
    manage the PostgreSQL cartridge, how to take backups of a PostgreSQL database,
    how to list and install PostgreSQL extensions, and how to use the EnterpriseDB
    PostgreSQL Cloud Database service with OpenShift applications. The specific recipes
    within this chapter are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一些教程，展示了如何开始使用 OpenShift PostgreSQL 数据库扩展模块。您将学习如何添加和管理 PostgreSQL 扩展模块，如何备份
    PostgreSQL 数据库，如何列出并安装 PostgreSQL 扩展，如何与 OpenShift 应用程序一起使用 EnterpriseDB PostgreSQL
    Cloud Database 服务。本章中的具体教程包括：
- en: Adding the PostgreSQL cartridge to your application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 PostgreSQL 扩展模块添加到您的应用程序
- en: Accessing the PostgreSQL cartridge from your local machine
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从本地计算机访问 PostgreSQL 扩展模块
- en: Connecting to the PostgreSQL cartridge using pgAdmin from your local machine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从本地计算机使用 pgAdmin 连接 PostgreSQL 扩展模块
- en: Updating the PostgreSQL max_connections setting
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 PostgreSQL 的 max_connections 设置
- en: Using the .psqlrc configuration file to configure the OpenShift application
    psql shell
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 .psqlrc 配置文件来配置 OpenShift 应用程序的 psql shell
- en: Performing scheduled PostgreSQL database backups
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行定期的 PostgreSQL 数据库备份
- en: Using EnterpriseDB PostgreSQL Cloud Database with OpenShift
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 OpenShift 中使用 EnterpriseDB PostgreSQL Cloud Database
- en: Installing PostgreSQL extensions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 PostgreSQL 扩展
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: PostgreSQL is a popular, open source relational database used by many web applications
    around the world. OpenShift supports a stock standard, security hardened version
    of PostgreSQL database. As you are using standard versions of databases, you are
    not locked inside OpenShift and can easily port your data if required.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 是一个流行的开源关系型数据库，全球许多 Web 应用程序都在使用它。OpenShift 支持一个标准化的、经过安全强化的 PostgreSQL
    数据库版本。由于您使用的是标准版本的数据库，因此不会被限制在 OpenShift 内，并且在需要时可以轻松地迁移您的数据。
- en: 'This chapter will use the PHP 5.4 application we created in [Chapter 3](part0041_split_000.html#page
    "Chapter 3. Creating and Managing Applications"), *Creating and Managing Applications*.
    If you do not have any OpenShift application running, you can create a new OpenShift
    application by running the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用我们在[第 3 章](part0041_split_000.html#page "第 3 章 创建与管理应用程序")中创建的 PHP 5.4
    应用程序，*创建与管理应用程序*。如果您没有运行任何 OpenShift 应用程序，可以通过运行以下命令来创建一个新的 OpenShift 应用程序：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can also use third-party database services, such as EnterpriseDB Cloud Database,
    if running your database in OpenShift is not possible or you have already invested
    in third-party services. Another reason why you might like to use a third-party
    database service is that the OpenShift PostgreSQL cartridge is not scalable. So,
    for applications where you need horizontally scalable and highly available PostgreSQL
    service, you can use a third-party provider, such as EnterpriseDB, with your application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 OpenShift 中运行数据库不可行，或者您已经投资于第三方服务，您还可以使用第三方数据库服务，如 EnterpriseDB Cloud Database。另一个您可能想使用第三方数据库服务的原因是，OpenShift
    PostgreSQL 扩展模块不具备可扩展性。因此，对于需要水平可扩展且高度可用的 PostgreSQL 服务的应用程序，您可以使用第三方提供商（如 EnterpriseDB）与您的应用程序一起使用。
- en: Adding the PostgreSQL cartridge to your application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 PostgreSQL 扩展模块添加到您的应用程序
- en: 'At the time of writing this book, OpenShift supports two versions of the PostgreSQL
    database. You can view all the supported PostgreSQL versions by running the following
    command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，OpenShift 支持两种版本的 PostgreSQL 数据库。您可以通过运行以下命令查看所有支持的 PostgreSQL 版本：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this recipe, you will learn how to add the PostgreSQL 9.2 cartridge to your
    OpenShift application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将学习如何将 PostgreSQL 9.2 扩展模块添加到您的 OpenShift 应用程序中。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. Also,
    we will use the application created in the *Creating an OpenShift application
    using the rhc command-line client* recipe in [Chapter 3](part0041_split_000.html#page
    "Chapter 3. Creating and Managing Applications"), *Creating and Managing Applications*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the PostgreSQL 9.2 cartridge to the `myapp` application, open a
    new command-line terminal, change the directory to the `myapp` directory location,
    and then execute the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will install a new instance of PostgreSQL server on your application gear.
    The `-c` option is used to specify the cartridge name, and the `--app` option
    is used to specify the application name. The `--app` option is not required if
    you are running the command within the application directory. The `-c` option
    is required, but you can get away from writing `-c`, as the rhc command-line client
    is intelligent enough to infer that PostgreSQL 9.2 is the cartridge name. The
    command can be as simple as the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can view the cartridge details using the `rhc show-cartridge` command as
    follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can stop the PostgreSQL server using the `stop` command as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can restart the PostgreSQL server using the `restart` command as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you want to remove the PostgreSQL server from your application, you can
    use the `remove` command as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you run the `rhc cartridge-add` command, rhc will make a HTTP POST request
    to the OpenShift server. The OpenShift server will receive the request and install
    a new instance of the PostgreSQL database on your application gear. After provisioning
    the PostgreSQL server, the rhc client will show the database details on the command-line
    terminal as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can view the PostgreSQL installation by performing SSH into your application
    gear:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, run the `ls` command to view the gear directory structure, and you will
    see the `postgresql` directory:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `postgresql` directory is the location of your PostgreSQL installation,
    and it is not shared with any other OpenShift application or user. It is only
    for your application, and only your application can access it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also connect with your PostgreSQL server using the `psql` command-line
    client:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now you can run SQL commands against your PostgreSQL server. To view all the
    databases, run the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `myapp` database corresponds to your application database. You can use
    this database for your application or create a new database using the `CREATE
    DATABASE` command. To view the uptime of your PostgreSQL server, run the following
    command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The output shows that the PostgreSQL server has been up for the last 12 minutes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view all the available PostgreSQL command-line utilities available
    on the gear by typing `pg_` and pressing *Tab*. The *Tab* key enables the command-line
    completion functionality that allows the command-line program to automatically
    fill the rest of command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看所有可用的 PostgreSQL 命令行实用程序，通过输入 `pg_` 然后按 *Tab* 键。 *Tab* 键启用命令行自动完成功能，允许命令行程序自动填写命令的剩余部分：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's more…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: You can also add the PostgreSQL database from the OpenShift web console. Go
    to [https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications),
    and click on the `myapp` application for details. On the `myapp` application details
    web page, you will see the option to add the PostgreSQL database, as shown in
    the following screenshot. Click on **Add PostgreSQL 9.2** to add the PostgreSQL
    9.2 cartridge.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以从 OpenShift Web 控制台添加 PostgreSQL 数据库。转到 [https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications)，并点击
    `myapp` 应用程序查看详细信息。在 `myapp` 应用程序详细信息页面上，您将看到添加 PostgreSQL 数据库的选项，如下截图所示。点击 **Add
    PostgreSQL 9.2** 添加 PostgreSQL 9.2 配置。
- en: '![There''s more…](img/00042.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多内容…](img/00042.jpeg)'
- en: 'Next, you will be directed to the page to add the PostgreSQL cartridge. Click
    on **Add Cartridge** to add a PostgreSQL database to your application. Have a
    look at the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将被引导到页面以添加 PostgreSQL 配置。点击 **Add Cartridge** 添加 PostgreSQL 数据库到您的应用程序。查看以下截图：
- en: '![There''s more…](img/00043.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多内容…](img/00043.jpeg)'
- en: 'After installing the PostgreSQL cartridge, you will be shown the PostgreSQL
    database details as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 PostgreSQL 配置后，将显示 PostgreSQL 数据库详细信息，如下：
- en: '![There''s more…](img/00044.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多内容…](img/00044.jpeg)'
- en: See also
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Accessing the PostgreSQL cartridge from your local machine* recipe
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本地机器访问 PostgreSQL 配置的方法
- en: Accessing the PostgreSQL cartridge from your local machine
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地机器访问 PostgreSQL 配置
- en: In the *Adding the PostgreSQL cartridge to your application* recipe, you learned
    how to access the PostgreSQL database by performing SSH into the application gear.
    In this recipe, you will learn how to connect with the PostgreSQL database from
    your local machine.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *将 PostgreSQL 配置添加到您的应用程序* 配方中，您学习了如何通过执行 SSH 到应用程序配置获取 PostgreSQL 数据库。在本配方中，您将学习如何从本地机器连接到
    PostgreSQL 数据库。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to install the PostgreSQL cartridge. Also, you will
    need the `psql` command-line client on your machine. You can download the PostgreSQL
    server from the official website, [http://www.postgresql.org/download/](http://www.postgresql.org/download/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，您需要一个带有 PostgreSQL 配置的应用程序。请参考本章的 *将 PostgreSQL 配置添加到您的应用程序* 配方，了解如何安装
    PostgreSQL 配置。此外，您还需要在您的机器上安装 `psql` 命令行客户端。您可以从官方网站 [http://www.postgresql.org/download/](http://www.postgresql.org/download/)
    下载 PostgreSQL 服务器。
- en: How to do it…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Perform the following steps to access the PostgreSQL cartridge from your local
    machine:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤访问本地机器上的 PostgreSQL 配置：
- en: 'Open a command-line terminal and change the directory to the `myapp` application
    directory. Execute the following command to forward remote ports to the local
    machine:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端，并切换到 `myapp` 应用程序目录。执行以下命令将远程端口转发到本地机器：
- en: '[PRE15]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Connect to the PostgreSQL server from the local machine using the `psql` command-line
    client as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `psql` 命令行客户端从本地机器连接到 PostgreSQL 服务器，操作如下：
- en: '[PRE16]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Please replace `<username>` with your PostgreSQL cartridge username and password.
    The host and port values can be found in the output of the `rhc port-forward`
    command. As you can see in step 1, PostgreSQL is available on the `127.0.0.1`
    host and port 5433\. You can view the username and password by running the `rhc
    show-app` or `rhc cartridge-show postgresql` command.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请将 `<username>` 替换为您的 PostgreSQL 配置用户名和密码。主机和端口值可以在 `rhc port-forward` 命令的输出中找到。如步骤
    1 所示，PostgreSQL 在 `127.0.0.1` 主机和端口 5433 上可用。您可以通过运行 `rhc show-app` 或 `rhc cartridge-show
    postgresql` 命令查看用户名和密码。
- en: 'Once connected, you can run any valid SQL command. The `\list` command shows
    the list of available databases:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接后，您可以运行任何有效的 SQL 命令。`\list` 命令显示可用数据库列表：
- en: '[PRE17]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In step 1, you used the `rhc port-forward` command to forward all the remote
    ports to the local machine. The `rhc port-forward` command is a wrapper around
    the SSH port forwarding that makes a port on the remote machine available on your
    local machine. A port on the remote machine that would otherwise be unavailable
    to you can be used just as if it's on your local machine. The command returns
    the list of ports that you can connect from your local machine.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1步中，你使用了`rhc port-forward`命令将所有远程端口转发到本地机器。`rhc port-forward`命令是SSH端口转发的一个封装，使远程机器上的端口可以在本地机器上使用。一个本来对你不可用的远程机器端口，可以像本地端口一样使用。该命令返回你可以从本地机器连接的端口列表。
- en: As you can see in step 1, the `postgresql` process is available at port 5433
    on the `127.0.0.1` host.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如第1步所示，`postgresql`进程在`127.0.0.1`主机的5433端口上可用。
- en: In step 2, you connected to PostgreSQL from your local machine, passing in the
    username, password, host, and port of the database. After successful connection,
    you ran a SQL command in step 3.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2步中，你从本地机器连接到PostgreSQL，传递了数据库的用户名、密码、主机和端口。成功连接后，你在第3步运行了SQL命令。
- en: To terminate port forwarding, just press *Ctrl* + *C* on the command-line terminal
    where the `rhc port-forward` command is running.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要终止端口转发，只需在运行`rhc port-forward`命令的命令行终端上按*Ctrl* + *C*。
- en: See also
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将PostgreSQL卡片添加到应用程序*的食谱'
- en: The *Connecting to the PostgreSQL cartridge using pgAdmin from your local machine*
    recipe
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从本地机器通过pgAdmin连接到PostgreSQL卡片*的食谱'
- en: Connecting to the PostgreSQL cartridge using pgAdmin from your local machine
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从本地机器通过pgAdmin连接到PostgreSQL卡片
- en: In the *Accessing the PostgreSQL cartridge from your local machine* recipe,
    you learned how to connect to the PostgreSQL cartridge from the `psql` command-line
    client from your local machine using port forwarding. In this recipe, you will
    learn how to connect to the PostgreSQL cartridge using pgAdmin from your local
    machine. pgAdmin is a comprehensive PostgreSQL database design and management
    system for Unix and Windows systems.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在*从本地机器访问PostgreSQL卡片*的食谱中，你学会了如何使用端口转发从本地机器的`psql`命令行客户端连接到PostgreSQL卡片。在本食谱中，你将学习如何使用pgAdmin从本地机器连接到PostgreSQL卡片。pgAdmin是一个综合性的PostgreSQL数据库设计与管理系统，适用于Unix和Windows系统。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to add the PostgreSQL cartridge to your application.
    Also, you will need pgAdmin on your local machine. You can download pgAdmin from
    the official website, [http://www.pgadmin.org/download/](http://www.pgadmin.org/download/).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本食谱，你需要一个包含PostgreSQL卡片的应用程序。请参考本章中的*将PostgreSQL卡片添加到应用程序*食谱，了解如何将PostgreSQL卡片添加到应用程序中。此外，你还需要在本地机器上安装pgAdmin。你可以从官方网站下载pgAdmin，[http://www.pgadmin.org/download/](http://www.pgadmin.org/download/)。
- en: How to do it…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'Perform the following steps to connect the PostgreSQL cartridge using the pgAdmin
    client:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，通过pgAdmin客户端连接PostgreSQL卡片：
- en: 'Open a command-line terminal, and change the directory to the `myapp` application
    directory. Execute the following command to forward remote ports to the local
    machine:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端，并将目录更改为`myapp`应用程序目录。执行以下命令，将远程端口转发到本地机器：
- en: '[PRE18]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Start the pgAdmin application, and click on the socket icon to create a new
    connection.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动pgAdmin应用程序，然后点击套接字图标以创建新的连接。
- en: Set up a new connection by entering the PostgreSQL database details. You can
    get the username and password for the PostgreSQL cartridge using the `rhc show-app`
    or `rhc cartridge-show mysql` command. Have a look at the following screenshot:![How
    to do it…](img/00045.jpeg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入PostgreSQL数据库的详细信息来设置新连接。你可以使用`rhc show-app`或`rhc cartridge-show mysql`命令获取PostgreSQL卡片的用户名和密码。请查看以下截图：![操作方法…](img/00045.jpeg)
- en: Connect to the PostgreSQL cartridge by clicking on the **OK** button.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**确定**按钮连接到PostgreSQL卡片。
- en: You will see a connection listed in the left-hand side navigation pane, as shown
    in the following screenshot:![How to do it…](img/00046.jpeg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会在左侧导航窗格中看到一个连接，如下图所示：![操作方法…](img/00046.jpeg)
- en: Next, open the SQL editor by first clicking on the `myapp` database and then
    clicking on SQL icon. Have a look at the following screenshot:![How to do it…](img/00047.jpeg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following SQL query inside the SQL editor to check the database uptime:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you used the `rhc port-forward` command to forward all the remote
    ports to the local machine. This makes it possible to connect to the PostgreSQL
    database running inside your application gear. Step 2 through step 6, you created
    a new PostgreSQL connection and connected with the PostgreSQL cartridge from within
    pgAdmin. In step 7, you executed a SQL query using the SQL editor to verify that
    the connection is getting data from the PostgreSQL cartridge installed in your
    `myapp` application.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Accessing the PostgreSQL cartridge from your local machine* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the PostgreSQL max_connections setting
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenShift PostgreSQL cartridge is configured to allow 100 client connections
    at the most. If the number of clients connected to the PostgreSQL server goes
    over this threshold, PostgreSQL will start giving the `FATAL too many connections`
    error. In this recipe, you will learn how to update the PostgreSQL cartridge `max_connections`
    setting.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: The number of maximum connections is dictated by the `max_connections` setting
    in the `postgresql.conf` configuration file. OpenShift does not allow users to
    modify the `postgresql.conf` configuration file. The recommended way to change
    the `max_connections` setting is by setting an environment variable.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to install PostgreSQL cartridge.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to update the PostgreSQL `max_connections` setting:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the maximum connections to `200`, open a command-line terminal and run
    the following command:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After setting the environment variable, you have to restart the PostgreSQL
    cartridge for changes to take effect as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PostgreSQL database maintains its configuration in a file called `postgresql.conf`
    inside the `conf` directory of your installation. The `max_connections` configuration
    setting controls the maximum number of client connections allowed by the PostgreSQL
    server. You can view the `max_connection` setting by running a query against your
    PostgreSQL database. To see `max_connections` for your OpenShift PostgreSQL cartridge,
    SSH into the application gear, and run the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'OpenShift does not allow users to modify the `postgresql.conf` file for security
    reasons. To allow users to modify the `max_connections` setting, OpenShift provides
    an environment variable called `OPENSHIFT_POSTGRESQL_MAX_CONNECTIONS`, which can
    be used to set the `max_connections` system variable. In step 1, you set the `OPENSHIFT_POSTGRESQL_MAX_CONNECTIONS`
    environment variable to `200`. The PostgreSQL server will not read the new value
    unless you restart the database. So, in step 2, you restarted the database using
    the `rhc cartridge-restart` command. To verify that `max_connections` value is
    updated, you can run the SQL command again as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: There's more…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `OPENSHIFT_POSTGRESQL_MAX_CONNECTIONS` variable is not the only configuration
    property supported by the PostgreSQL cartridge. You can set the following properties
    using environment variables. To learn about these settings, please refer to the
    following documentation: [https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server](https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server).'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Environment variable |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
- en: '| `shared_buffers` | `OPENSHIFT_POSTGRESQL_SHARED_BUFFERS` |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
- en: '| `datestyle` | `OPENSHIFT_POSTGRESQL_DATESTYLE` |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
- en: '| `ssl` | `OPENSHIFT_POSTGRESQL_SSL_ENABLED` |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
- en: '| `lc_messages` | `OPENSHIFT_POSTGRESQL_LOCALE` |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
- en: '| `lc_monetary` | `OPENSHIFT_POSTGRESQL_LOCALE` |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '| `lc_numeric` | `OPENSHIFT_POSTGRESQL_LOCALE` |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: '| `lc_time` | `OPENSHIFT_POSTGRESQL_LOCALE` |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: See also
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the .psqlrc configuration file to configure the OpenShift application
    psql shell* recipe
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Accessing the PostgreSQL cartridge from your local machine* recipe
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the .psqlrc configuration file to configure the OpenShift application
    psql shell
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PostgreSQL provides a startup file called `.psqrc`, which determines the behavior
    of the `psql` interactive command-line client. Just like `bashrc`, the psql client
    utility attempts to read and execute commands from the system-wide psqlrc file
    and the user's `~/.psqlrc` file before starting up. In this recipe, you will learn
    how you can use your own `.psqlrc` configuration file to configure your OpenShift
    application psql shell.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to install the PostgreSQL cartridge.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure the psql shell:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the directory to `myapp`, and then SSH into the application gear:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a new file in `$OPENSHIFT_DATA_DIR` named `.psqlrc`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now let''s configure the psql shell to store the history of commands you have
    entered so that you can run them again. This is achieved by setting the `HISTFILE`
    location as shown in the following command. The `:DBNAME` variable allows psql
    to store a different history for each database. We will also enable psql to print
    the time taken to execute each command. This is done using the `\timing` option.
    To customize the psql shell, add the following content to the `.psqrc` file:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Log out of the SSH session and create a new environment variable named `PSQLRC`
    to point to the new `.psqlrc` file location:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Please replace `OPENSHIFT_DATA_DIR` with your `OPENSHIFT_DATA_DIR` location.
    You can get the location by running the following command:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'SSH into the application gear again using the `rhc ssh` command, and then run
    the `psql` command. Run a query, and you will get the timing as well:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When psql is launched, it looks for a file called `psqlrc` and runs any command
    in the file to initialize the environment. On a *nix-based system, this file is
    called `.psqlrc` and is usually located under the user's home directory. From
    step 1 through step 3, you created a new file, `.psqlrc`, under `$OPENSHIFT_DATA_DIR`.
    We added a couple of configurations to the `.psqlrc` file. The first configuration
    makes sure that the SQL command history is stored in a file called `.psql_history`
    under `$OPENSHIFT_DATA_DIR`. The second configuration instructs psql to output
    the query execution time for each query.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, you created a new environment variable named `PSQLRC` that points
    to the `.psqlrc` location. Finally, in step 5, you logged in to the psql client
    and ran a query. After query execution, the psql client also showed the time taken
    to execute the query. As shown in the preceding command-line output, this query
    took approximately 86 ms.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Accessing the PostgreSQL cartridge from your local machine* recipe
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing scheduled PostgreSQL database backups
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to perform a scheduled backup of your PostgreSQL
    database and upload it to Amazon S3.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to add the PostgreSQL cartridge. Also, you need to
    have the Amazon AWS account. Go to [http://aws.amazon.com/](http://aws.amazon.com/),
    and sign up for a new account if you don't already have one.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to perform daily scheduled backup of your PostgreSQL
    database:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://console.aws.amazon.com/s3/home](https://console.aws.amazon.com/s3/home),
    and create a new bucket to store your database backups.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the cron cartridge to your application by running the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'SSH into the application gear, and download the `s3-bash` utility in `$OPENSHIFT_DATA_DIR`.
    Extract it to the `s3-bash` directory. Have a look at the following commands:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Create a new file named `AWSSecretAccessKeyIdFile` in the `$OPENSHIFT_DATA_DIR/s3-bash`
    directory, and store your Amazon secret access key to it. This is required by
    `s3-bash` to communicate with Amazon S3.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a script named `database_backup.sh` on your local machine in `.openshift/cron/minutely`,
    and add the following content to it:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The previous script will run every day at 23:50 and run the `pg_dump` command
    to create the data dump file. The file is then transferred to Amazon S3 using
    the s3-bash API. Finally, after uploading the file, it deletes the SQL dump file
    from the application gear.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we have to set the environment variables so that our script can talk with
    Amazon S3 as shown in the following commands. If you are not sure how to access
    your security credentials, please refer to the documentation at [http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html](http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html).
    Have a look at the following commands:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Commit the code, and push the code to the OpenShift gear. Every night at 23:50,
    a database backup would be done, and your backup would be uploaded to Amazon S3:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous steps, you enabled daily backups of your PostgreSQL database
    cartridge. The recipe used the cron cartridge to upload database dumps to Amazon
    S3.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: In step 1, you created a new Amazon S3 bucket to store your PostgreSQL database
    backups. Amazon S3 is widely used to store static files and is an ideal choice
    for this job. Next, you added the cron cartridge to the application. The cron
    cartridge will be used to perform daily backups at a particular time.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Amazon S3 exposes its REST service that users can use to perform operations
    on S3 buckets. Amazon provides wrappers of many programming languages around its
    REST API to make it easy for developers to integrate with their application. As
    we wanted to keep this recipe language-agnostic, we used the Amazon S3 bash wrapper.
    Amazon does not officially support this wrapper, but it works very well. In step
    3, you downloaded `s3-bash` using `wget`. The `tar.gz` file was stored in `$OPENSHIFT_DATA_DIR`.
    You then extracted `tar.gz` to the `s3-bash` directory.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Next, in step 4, you created a file named `AWSSecretAccessKeyIdFile` to store
    the Amazon access key secret. The `s3-bash` wrapper uses a file for the AWS Secret
    Access Key ID so that it does not appear in the list of running processes with
    ps.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: In step 5, you created a bash script that will be executed every night at 23:50\.
    The script first takes the database backup using the `pg_dump` command and then
    uploads the file to Amazon S3\. The filename is the current timestamp. Finally,
    after uploading the backup to S3, the script deletes the backup to save disk space.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: In step 6, you created three environment variables required by the backup script.
    Finally, you committed the changes in step 7 and pushed them to the OpenShift
    application gear.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using EnterpriseDB PostgreSQL Cloud Database with OpenShift
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use EnterpriseDB PostgreSQL Cloud Database
    with your OpenShift applications. You can also use the Amazon RDS PostgreSQL DB
    instance in the same way we used the Amazon RDS MySQL DB instance. EnterpriseDB
    Cloud Database allows you to set up a replicated, sharded, and highly available
    PostgreSQL cluster either on Amazon EC2 or the HP Cloud services. You can take
    periodic backups of your data and scale it horizontally without any administrative
    skills.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an OpenShift application. Refer to the
    *Creating an OpenShift application using the rhc command-line client* recipe in
    [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating and Managing Applications"),
    *Creating and Managing Applications*, for more information.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to learn how to connect your OpenShift applications
    with the EnterpriseDB PostgreSQL database:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://www.enterprisedb.com/cloud-database/amazon](http://www.enterprisedb.com/cloud-database/amazon),
    and click on **Get Started Now** in the free trial section.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will be directed to the signup page. Enter the valid details, and
    click on the submit button.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After successful signup, you will be redirected to the dashboard console as
    shown in the next screenshot. Here, you can launch a database cluster, see the
    resources you are consuming, or see the status update of the service. At the bottom
    of the dashboard, there are links to the tutorials and documentation about PostgreSQL
    CloudDB.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will create our first DB cluster on EnterpriseDB Cloud by clicking on
    **Launch DB Cluster**. This will open a pop up where you need to provide details
    of your cluster, as shown in the following screenshot. The details include the
    name of the cluster, PostgreSQL version, instance size of Amazon, number of nodes,
    and the master username and password.![How to do it…](img/00048.jpeg)
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After entering cluster details, you can choose how many backups you want to
    keep and when you would like to take the backup. Use the default options.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Launch** button. This will initiate the process of creating
    a replicated DB cluster, as shown in the following screenshot. It will take a
    couple of minutes to launch the cluster, so please be patient. From the **Clusters**
    tab, you can get information about the database clusters you own. In the **Details**
    tab, you can see the address where master and replica are running.![How to do
    it…](img/00049.jpeg)
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a replicated DB cluster
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To connect to the EnterpriseDB PostgreSQL Cloud DB, SSH into the application
    gear, and use the `psql` command to connect with Cloud DB. Every application gear
    has psql installed on it. The host address is the address of master that you can
    get from step 6.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Step 1 through step 6 helped you create a new instance of EnterpriseDB PostgreSQL
    Cloud DB instance. You are required to provide details related to your DB instance,
    and EnterpriseDB will provision a PostgreSQL DB instance based on the details
    you entered. By step 6, you had a running PostgreSQL DB instance that you could
    connect from the outside world. You can connect it from your local machine or
    from your OpenShift application gear.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: In step 7, you used the database details to connect to the EnterpriseDB PostgreSQL
    instance using the psql command-line client.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PostgreSQL extensions
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extensions are add-ons that you can install in a PostgreSQL database to extend
    the functionality beyond the basic offering. You can find a list of PostgreSQL
    extensions available on the PostgreSQL Extension Network website, [http://www.pgxn.org/](http://www.pgxn.org/).
    The OpenShift PostgreSQL cartridge comes in a bundle with a list of extensions.
    These extensions are not installed by default but are available to you if you
    need them. In this recipe, you will learn how to install an extension in your
    OpenShift PostgreSQL cartridge.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need an application with the PostgreSQL cartridge.
    Please refer to the *Adding the PostgreSQL cartridge to your application* recipe
    in this chapter to learn how to add the PostgreSQL cartridge to your application.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to install an extension:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Open a new command-line terminal, and SSH into the application gear using the
    `rhc ssh` command. Once logged in, run the psql command-line utility to connect
    with the PostgreSQL cartridge.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From inside the psql shell, run the following command to view all the available
    extensions:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, install the `fuzzystrmatch` extension by executing the following SQL
    command:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You can view all the installed extensions by running the `\dx` command:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You can remove the extension from your psql cartridge by running the following
    SQL command:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every OpenShift PostgreSQL cartridge has access to a list of extensions. These
    extensions are not installed by default, as not all the applications need these
    extensions. To view all the available extensions, you can use the `select * from
    pg_available_extensions` SQL command as shown in step 2\. At the time of writing
    this book, the PostgreSQL cartridge is prepackaged with 51 extensions. These extensions
    can be installed by running the `CREATE EXTENSION SQL` command as shown in step
    2\. The `CREATE EXTENSION` command compiles and installs the extension. In step
    3, you installed the `fuzzystrmatch` extension.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fuzzystrmatch` extension provides several functions to determine similarities
    and differences between strings. To view the details of the `fuzzystrmatch` extension,
    you can run the following command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You can drop an extension using the `DROP EXTENSION` command.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the PostgreSQL cartridge to your application* recipe
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
