- en: Chapter 10. Monitoring, Reporting, and Troubleshooting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 监控、报告和故障排除
- en: '|   | *"Show me a completely smooth operation and I''ll show you someone who''s
    covering mistakes. Real boats rock."* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *"展示一个完全顺利的操作，我就能向你展示一个掩盖错误的人。真正的船总是会摇晃的。"* |   |'
- en: '|   | --*Frank Herbert, Chapterhouse: Dune* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*弗兰克·赫伯特，《沙丘救世主》* |'
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下内容：
- en: 'Noop: the don''t change anything option'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Noop: 不做任何更改的选项'
- en: Logging command output
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录命令输出
- en: Logging debug messages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录调试信息
- en: Generating reports
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成报告
- en: Producing automatic HTML documentation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成自动HTML文档
- en: Drawing dependency graphs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制依赖关系图
- en: Understanding Puppet errors
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Puppet错误
- en: Inspecting configuration settings
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查配置设置
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: We've all had the experience of sitting in an exciting presentation about some
    new technology and rushing home to play with it. Of course, once you start experimenting
    with it, you immediately run into problems. What's going wrong? Why doesn't it
    work? How can I see what's happening under the hood? This chapter will help you
    answer some of these questions, and give you the tools to solve common Puppet
    problems.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都曾有过这样的经历：坐在一个令人兴奋的关于新技术的演讲中，迫不及待地回家玩它。当然，一旦你开始尝试它，你立刻会遇到问题。出了什么问题？为什么不行？我怎么知道底层发生了什么？本章将帮助你回答一些问题，并为你提供解决常见Puppet问题的工具。
- en: We'll also see how to generate useful reports on your Puppet infrastructure
    and how Puppet can help you monitor and troubleshoot your network as a whole.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到如何生成有用的报告，了解你的Puppet基础设施，以及Puppet如何帮助你监控和排查整个网络的问题。
- en: Noop – the don't change anything option
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Noop – 不做任何更改的选项
- en: Sometimes your Puppet manifest doesn't do exactly what you expected, or perhaps
    someone else has checked in changes you didn't know about. Either way, it's good
    to know exactly what Puppet is going to do before it does it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你的Puppet清单没有完全按预期工作，或者可能是别人提交了你不知道的更改。无论如何，提前知道Puppet将要做什么总是好的。
- en: When you are retrofitting Puppet into an existing infrastructure you might not
    know whether Puppet is going to update a `config` file or restart a production
    service. Any such change could result in unplanned downtime. Also, sometimes manual
    configuration changes are made on a server that Puppet would overwrite.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将Puppet集成到现有的基础设施中时，你可能不知道Puppet是否会更新`config`文件或重启生产服务。任何此类变更都可能导致计划外的停机时间。此外，有时会在服务器上手动进行配置更改，而这些更改可能会被Puppet覆盖。
- en: To avoid these problems, you can use Puppet's noop mode, which means no operation
    or do nothing. When run with the noop option, Puppet only reports what it would
    do but doesn't actually do anything. One caveat here is that even during a noop
    run, pluginsync still runs and any `lib` directories in modules will be synced
    to nodes. This will update external fact definitions and possibly Puppet's types
    and providers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这些问题，你可以使用Puppet的noop模式，它意味着不操作或什么都不做。运行带有noop选项时，Puppet只会报告它本来会做什么，但实际上什么也不做。这里有一个注意点，即即使在noop运行期间，pluginsync仍会运行，模块中的任何`lib`目录都会同步到节点。这将更新外部事实定义，并可能更新Puppet的类型和提供者。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: You may run noop mode when running `puppet agent` or `puppet apply` by appending
    the `--noop` switch to the command. You may also create a `noop=true` line in
    your `puppet.conf` file within the `[agent]` or `[main]` sections.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在运行`puppet agent`或`puppet apply`时添加`--noop`开关来运行noop模式。你也可以在`puppet.conf`文件的`[agent]`或`[main]`部分创建一行`noop=true`。
- en: 'Create a `noop.pp` manifest that creates a file as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`noop.pp`清单，生成一个如下的文件：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now run puppet agent with the `noop` switch:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行带有`noop`开关的puppet agent：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now run without the `noop` option to see that the file is created:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行不带`noop`选项，以查看文件是否已创建：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `noop` mode, Puppet does everything it would normally, with the exception
    of actually making any changes to the machine (the `exec` resources, for example,
    won't run). It tells you what it would have done, and you can compare this with
    what you expected to happen. If there are any differences, double-check the manifest
    or the current state of the machine.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在`noop`模式下，Puppet会做它通常会做的所有事情，除了实际对机器进行任何更改（例如，`exec`资源不会运行）。它会告诉你本来会做什么，你可以将其与预期的结果进行比较。如果存在任何差异，仔细检查清单或机器的当前状态。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that when we ran with `--noop`, Puppet warned us that it would have created
    the `/tmp/noop` file. This may or may not be what we want, but it's useful to
    know in advance. If you are making changes to the code applied to your production
    servers, it's useful to run puppet agent with the `--noop` option to ensure that
    your changes will not affect the production services.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当我们使用`--noop`运行时，Puppet警告我们将创建`/tmp/noop`文件。 这可能是我们想要的，也可能不是，但预先知道这一点很有用。
    如果您正在更改应用于生产服务器的代码，建议使用`--noop`选项运行 puppet agent，以确保您的更改不会影响生产服务。
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can also use noop mode as a simple auditing tool. It will tell you whether
    any changes have been made to the machine since Puppet last applied its manifest.
    Some organizations require all config changes to be made with Puppet, which is
    one way of implementing a change control process. Unauthorized changes to the
    resources managed by Puppet can be detected using Puppet in noop mode and you
    can then decide whether to merge the changes back into the Puppet manifest or
    undo them.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用noop模式作为简单的审计工具。 它会告诉你自 Puppet 上次应用其清单以来是否对机器进行了任何更改。 一些组织要求所有配置更改都必须使用
    Puppet 进行，这是实施变更控制流程的一种方式。 可以使用noop模式检测到 Puppet 管理的资源的未经授权的更改，然后您可以决定是否将更改合并回
    Puppet 清单或撤销它们。
- en: You can also use the `--debug` switch when running puppet agent to see the details
    of every change Puppet makes during an agent run. This can be helpful when trying
    to figure out how Puppet is applying certain exec resources or to see in what
    order things are happening.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 puppet agent 时，您还可以使用`--debug`开关查看 Puppet 在代理运行期间进行的每个更改的详细信息。 当试图弄清楚 Puppet
    如何应用某些 exec 资源或查看事情发生的顺序时，这可能会很有帮助。
- en: 'If you are running a master, you can compile the catalog for a node on the
    master with the `--trace` option in addition to `--debug`. If the catalog is failing
    to compile, this method will also fail to compile the catalog (if you have an
    old definition for the cookbook node that is failing, try commenting it out before
    running this test). This produces a lot of debugging output. For example, to compile
    the catalog for our cookbook host on our master and place the results into `/tmp/cookbook.log`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行主控，可以使用`--trace`选项编译节点的目录以及`--debug`。 如果目录编译失败，则此方法也将无法编译目录（如果您的 cookbook
    节点的旧定义失败，请尝试在运行此测试之前将其注释掉）。 这将生成大量的调试输出。 例如，为了为我们的 cookbook 主机在主控上编译目录并将结果放入`/tmp/cookbook.log`：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: After compiling the catalog, Puppet will print out the catalog to the command
    line. The log file (`/tmp/cookbook.log`) will have a lot of information on how
    the catalog was compiled.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 编译目录后，Puppet将在命令行上打印目录。 日志文件（`/tmp/cookbook.log`）将包含有关如何编译目录的大量信息。
- en: See also
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Auditing resources* recipe in [Chapter 6](ch06.html "Chapter 6. Managing
    Resources and Files"), *Managing Resources and Files*
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。管理资源和文件")中的*审计资源*食谱，*管理资源和文件*
- en: The *Automatic syntax checking with Git hooks* recipe in [Chapter 2](ch02.html
    "Chapter 2. Puppet Infrastructure"), *Puppet Infrastructure*
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。Puppet基础设施")中的*使用Git挂钩进行自动语法检查*食谱，*Puppet基础设施*
- en: The *Generating reports* recipe in this chapter
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章节中的*生成报告*食谱
- en: The *Testing your Puppet manifests with rspec-puppet* recipe in [Chapter 9](ch09.html
    "Chapter 9. External Tools and the Puppet Ecosystem"), *External Tools and the
    Puppet Ecosystem*
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章。外部工具和Puppet生态系统")中的*使用rspec-puppet测试您的Puppet清单*食谱，*外部工具和Puppet生态系统*
- en: Logging command output
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录命令输出
- en: 'When you use the `exec` resources to run commands on the node, Puppet will
    give you an error message such as the following if a command returns a non-zero
    exit status:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`exec`资源在节点上运行命令时，如果命令返回非零退出状态，Puppet将会给出如下错误消息：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see, Puppet not only reports that the command failed, but shows
    its output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Puppet不仅报告命令失败，还显示其输出：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is useful to figure out why the command didn't work, but sometimes the
    command actually succeeds (in that it returns a zero exit status) but still doesn't
    do what we wanted. In that case, how can you see the command output? You can use
    the `logoutput` attribute.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于弄清楚命令为何无法正常工作很有用，但有时命令实际上是成功的（即返回零退出状态），但仍未达到我们的预期。 在这种情况下，您如何查看命令输出？ 您可以使用`logoutput`属性。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps in order to log command output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 按顺序执行以下步骤以记录命令输出：
- en: 'Define an `exec` resource with the `logoutput` parameter as shown in the following
    code snippet:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个带有 `logoutput` 参数的 `exec` 资源，如下代码片段所示：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run Puppet:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Puppet：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see, even though the command succeeds, Puppet prints the output:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所看到的，即使命令成功，Puppet 仍然会打印输出：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'The `logoutput` attribute has three possible settings:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`logoutput` 属性有三种可能的设置：'
- en: '`false`: This never prints the command output'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`false`：这个选项永远不会打印命令输出。'
- en: '`on_failure`: This only prints the output if the command fails (the default
    setting)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on_failure`：只有在命令失败时才打印输出（默认设置）'
- en: '`true`: This always prints the output, whether the command succeeds or fails'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`true`：无论命令是否成功，这个选项总是会打印输出。'
- en: There's more...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'You can set the default value of `logoutput` to always display command output
    for all `exec` resources by defining the following in your `site.pp` file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 `site.pp` 文件中定义以下内容，设置 `logoutput` 的默认值，使所有 `exec` 资源都显示命令输出：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Resource defaults**: What''s this Exec syntax? It looks like an `exec` resource,
    but it''s not. When you use `Exec` with a capital E, you''re setting the resource
    default for exec. You may set the resource default for any resource by capitalizing
    the first letter of the resource type. Anywhere that Puppet see''s that resource
    within the current scope or a nested subscope, it will apply the defaults you
    define.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源默认值**：这是什么 `Exec` 语法？它看起来像是一个 `exec` 资源，但其实不是。当你使用大写的 `Exec` 时，你是在设置 `exec`
    的资源默认值。你可以通过将资源类型的首字母大写来设置任何资源的默认值。只要 Puppet 在当前作用域或嵌套子作用域中看到该资源，它就会应用你定义的默认值。'
- en: 'If you never want to see the command output, whether it succeeds or fails,
    use:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不希望看到命令输出，无论命令成功还是失败，请使用：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: More information is available at [https://docs.puppetlabs.com/references/latest/type.html#exec](https://docs.puppetlabs.com/references/latest/type.html#exec).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见 [https://docs.puppetlabs.com/references/latest/type.html#exec](https://docs.puppetlabs.com/references/latest/type.html#exec)。
- en: Logging debug messages
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志调试信息
- en: It can be very helpful when debugging problems if you can print out information
    at a certain point in the manifest. This is a good way to tell, for example, if
    a variable isn't defined or has an unexpected value. Sometimes it's useful just
    to know that a particular piece of code has been run. Puppet's `notify` resource
    lets you print out such messages.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当调试问题时，如果你能够在清单中的某个点打印出信息，那将非常有帮助。这是一种很好的方式，举个例子，可以用来检查一个变量是否未定义或有意外的值。有时候，仅仅知道某段代码已经被执行也是有用的。Puppet
    的 `notify` 资源让你能够打印出这样的消息。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何做的……
- en: 'Define a `notify` resource in your manifest at the point you want to investigate:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在你想要调试的地方，在清单中定义一个 `notify` 资源：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'When this resource is applied, Puppet will print out the message:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个资源应用时，Puppet 会打印出消息：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There's more...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: In addition to simple messages, we can output variables within our `notify`
    statements. Additionally, we can treat the `notify` calls the same as other resources,
    having them require or be required by other resources.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单的消息外，我们还可以在 `notify` 语句中输出变量。此外，我们可以将 `notify` 调用当作其他资源来处理，使它们依赖于其他资源或被其他资源依赖。
- en: Printing out variable values
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打印变量值
- en: 'You can refer to variables in the message:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在消息中引用变量：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Puppet will interpolate the values in the printout:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 会在输出中插入值：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The double colon (`::`) before the fact name tells Puppet that this is a variable
    in top scope (accessible to all classes) and not local to the class. For more
    about how Puppet handles variable scope, see the Puppet Labs article:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在事实名称前的双冒号 (`::`) 告诉 Puppet 这是一个在顶级作用域中的变量（所有类都能访问），而不是局部变量。关于 Puppet 如何处理变量作用域的更多信息，请参见
    Puppet Labs 文章：
- en: '[http://docs.puppetlabs.com/guides/scope_and_puppet.html](http://docs.puppetlabs.com/guides/scope_and_puppet.html)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.puppetlabs.com/guides/scope_and_puppet.html](http://docs.puppetlabs.com/guides/scope_and_puppet.html)'
- en: Resource ordering
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源顺序
- en: Puppet compiles your manifests into a catalog; the order in which resources
    are executed on the client (node) may not be the same as the order of the resources
    within your source files. When you are using a `notify` resource for debugging,
    you should use resource chaining to ensure that the `notify resource` is executed
    before or after your failing resource.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 会将你的清单编译成一个目录；资源在客户端（节点）上执行的顺序可能与源文件中的资源顺序不同。当你使用 `notify` 资源进行调试时，你应该使用资源链式调用，确保
    `notify` 资源在你的失败资源之前或之后执行。
- en: 'For example, if the exec `failing exec` is failing, you can chain a `notify
    resource` to run directly before the failed exec resource as shown here:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果 `failing exec` 执行失败，你可以将一个 `notify resource` 链接到失败的 exec 资源之前，正如下面所示：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you don't chain the resource or use a metaparameter such as `before` or `require`,
    there is no guarantee your `notify` statement will be executed near the other
    resources you are interested in debugging. More information on resource ordering
    can be found at [https://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html](https://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有将资源链接起来，或者没有使用像 `before` 或 `require` 这样的元参数，那么不能保证你的 `notify` 语句会在你关注的其他资源附近执行。关于资源排序的更多信息可以在
    [https://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html](https://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html)
    找到。
- en: 'For example, to have your `notify resource` run after `''failing exec''` in
    the preceding code snippet, use:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要让你的 `notify resource` 在前面的代码片段中 `'failing exec'` 后运行，使用：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note, however, that in this case the `notify resource` will fail to execute
    since the exec failed. When a resource fails, all the resources that depended
    on that resource are skipped:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，在这种情况下，由于 exec 失败，`notify resource` 将无法执行。当一个资源失败时，所有依赖于该资源的其他资源将被跳过：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When we run Puppet, we see that the `notify resource` is skipped:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 Puppet 时，我们看到 `notify resource` 被跳过：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Generating reports
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成报告
- en: If you're managing a lot of machines, Puppet's reporting facility can give you
    some valuable information on what's actually happening out there.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你管理着大量机器，Puppet 的报告功能可以为你提供一些关于实际发生情况的有价值信息。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To enable reports, just add this to a client''s `puppet.conf`: within the `[main]`
    or `[agent]` sections:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用报告，只需在客户端的 `puppet.conf` 中的 `[main]` 或 `[agent]` 部分添加以下内容：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小提示
- en: In recent versions (greater than 3.0) of Puppet, `report = true` is the default
    setting.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Puppet 的最新版本（大于 3.0）中，`report = true` 是默认设置。
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'With reporting enabled, Puppet will generate a report file, containing data
    such as:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 启用报告后，Puppet 会生成一个报告文件，其中包含以下数据：
- en: Date and time of the run
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行的日期和时间
- en: Total time for the run
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行的总时间
- en: Log messages output during the run
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行期间输出的日志消息
- en: List of all the resources in the client's manifest
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端清单中所有资源的列表
- en: Whether Puppet changed any resources, and how many
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet 是否更改了任何资源，以及更改了多少
- en: Whether the run succeeded or failed
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行是否成功或失败
- en: 'By default, these reports are stored on the node at `/var/lib/puppet/reports`
    in a directory named after the hostname, but you can specify a different destination
    using the `reportdir` option. You can create your own scripts to process these
    reports (which are in the standard YAML format). When we run puppet agent on `cookbook.example.com`,
    the following file is created on the master:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这些报告会保存在节点的 `/var/lib/puppet/reports` 目录中，并以主机名命名，你也可以使用 `reportdir` 选项指定不同的目标位置。你可以创建自己的脚本来处理这些报告（它们是标准的
    YAML 格式）。当我们在 `cookbook.example.com` 上运行 Puppet agent 时，以下文件会在主服务器上创建：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There's more...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: If you have more than one master server, you can have all your reports sent
    to the same server by specifying `report_server` in the `[agent]` section of `puppet.conf`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个主服务器，可以通过在 `puppet.conf` 的 `[agent]` 部分指定 `report_server`，将所有报告发送到同一服务器。
- en: 'If you just want one report, or you don''t want to enable reporting all the
    time, you can add the `--report` switch to the command line when you run Puppet
    agent manually:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想要一个报告，或者你不想始终启用报告功能，你可以在手动运行 Puppet agent 时，向命令行添加 `--report` 开关：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You won't see any additional output, but a report file will be generated in
    the `report` directory.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你不会看到任何额外的输出，但报告文件会在 `report` 目录中生成。
- en: 'You can also see some overall statistics about a Puppet run by supplying the
    `--summarize` switch:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过提供 `--summarize` 开关来查看 Puppet 运行的一些总体统计信息：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Other report types
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他报告类型
- en: Puppet can generate different types of reports with the reports option in the
    `[main]` or `[master]` section of `puppet.conf` on your Puppet master servers.
    There are several built-in report types listed at [https://docs.puppetlabs.com/references/latest/report.html](https://docs.puppetlabs.com/references/latest/report.html).
    In addition to the built-in report types, there are some community developed reports
    that are quite useful. The Foreman ([http://theforeman.org](http://theforeman.org)),
    for example, provides a Foreman report type that you can enable to forward your
    node reports to the Foreman.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet可以使用`puppet.conf`中的`[main]`或`[master]`部分的`reports`选项，在你的Puppet主服务器上生成不同类型的报告。内置报告类型可以在[https://docs.puppetlabs.com/references/latest/report.html](https://docs.puppetlabs.com/references/latest/report.html)中找到。除了内置报告类型外，还有一些社区开发的报告非常有用。例如，Foreman（[http://theforeman.org](http://theforeman.org)）提供了一种Foreman报告类型，可以启用并将节点报告转发到Foreman。
- en: See also
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Auditing resources* recipe in [Chapter 6](ch06.html "Chapter 6. Managing
    Resources and Files"), *Managing Resources and Files*
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章：管理资源和文件")中的*审计资源*配方，*管理资源和文件*'
- en: Producing automatic HTML documentation
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成自动HTML文档
- en: As your manifests get bigger and more complex, it can be helpful to create HTML
    documentation for your nodes and classes using Puppet's automatic documentation
    tool, `puppet doc`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 随着清单变得越来越大和复杂，使用Puppet的自动文档工具`puppet doc`为节点和类生成HTML文档是非常有帮助的。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: 'Follow these steps to generate HTML documentation for your manifest:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为清单生成HTML文档：
- en: 'Run the following command:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE23]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will generate a set of HTML files at `/tmp/puppet`. Open the top-level
    `index.html` file with your web browser (`file:///tmp/puppet/index.html`), and
    you'll see something like the following screenshot:![How to do it...](img/B03643_10_01.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成一组HTML文件到`/tmp/puppet`。用浏览器打开顶级`index.html`文件（`file:///tmp/puppet/index.html`），你将看到类似以下截图的内容：![如何执行...](img/B03643_10_01.jpg)
- en: Click the classes link on the left and select the Apache module, something similar
    to the following will be displayed:![How to do it...](img/B03643_10_02.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧的类链接并选择Apache模块，类似如下内容将被显示：![如何执行...](img/B03643_10_02.jpg)
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `puppet doc` command creates a structured HTML documentation tree similar
    to that produced by **RDoc**, the popular Ruby documentation generator. This makes
    it easier to understand how different parts of the manifest relate to one another.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`puppet doc`命令创建一个结构化的HTML文档树，类似于**RDoc**（流行的Ruby文档生成器）生成的文档。这使得理解清单的不同部分之间的关系变得更加容易。'
- en: There's more...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `puppet doc` command will generate basic documentation of your manifests
    as they stand, but you can include more useful information by adding comments
    to your manifest files, using the standard RDoc syntax. When we created our base
    class using puppet module generate, these comments were created for us:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`puppet doc`命令将生成当前清单的基础文档，但你可以通过在清单文件中添加注释，使用标准的RDoc语法来包括更多有用的信息。当我们使用`puppet
    module generate`创建基础类时，这些注释是自动为我们创建的：'
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After generating the HTML documentation, we can see the result for the base
    module as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 生成HTML文档后，我们可以看到基础模块的结果，如下图所示：
- en: '![There''s more...](img/B03643_10_03.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/B03643_10_03.jpg)'
- en: Drawing dependency graphs
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制依赖关系图
- en: Dependencies can get complicated quickly, and it's easy to end up with a circular
    dependency (where A depends on B, which depends on A) that will cause Puppet to
    complain and stop working. Fortunately, Puppet's `--graph` option makes it easy
    to generate a diagram of your resources and the dependencies between them, which
    can be a big help in fixing such problems.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖关系可能会迅速变得复杂，容易陷入循环依赖（例如A依赖B，而B又依赖A），这会导致Puppet报错并停止工作。幸运的是，Puppet的`--graph`选项可以轻松生成资源及其依赖关系的图表，这对于解决此类问题非常有帮助。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Install the `graphviz` package to view the diagram files:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`graphviz`包以查看图表文件：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: 'Follow these steps to generate a dependency graph for your manifest:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为清单生成依赖关系图：
- en: 'Create the directories for a new `trifecta` module:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为新的`trifecta`模块创建目录：
- en: '[PRE26]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create the file `modules/trifecta/manifests/init.pp` with the following code
    containing a deliberate circular dependency (can you spot it?):'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`modules/trifecta/manifests/init.pp`，并包含以下代码，代码中有一个故意的循环依赖（你能发现吗？）：
- en: '[PRE27]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a simple `ntp.conf` file:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的`ntp.conf`文件：
- en: '[PRE28]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Since we''ll be working locally on this problem, create a `trifecta.pp` manifest
    that includes the broken trifecta class:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们将本地处理此问题，创建一个`trifecta.pp`清单，其中包括已打破的三位一体类：
- en: '[PRE29]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Run Puppet:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Puppet：
- en: '[PRE30]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run Puppet with the `--graph` option as suggested:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照建议使用`--graph`选项运行Puppet：
- en: '[PRE31]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Check whether the graph files have been created:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查图形文件是否已创建：
- en: '[PRE32]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a graphic using the `dot` command as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方式创建图形：`dot`命令：
- en: '[PRE33]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The graphic will look something like the this:![How to do it...](img/B03643_10_04.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图形看起来像这样：![如何操作...](img/B03643_10_04.jpg)
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'When you run `puppet agent --graph` (or enable the `graph` option in `puppet.conf`),
    Puppet will generate three graphs in the DOT format (a graphics language):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行`puppet agent --graph`（或者在`puppet.conf`中启用`graph`选项）时，Puppet 将生成三张 DOT 格式的图（图形语言）：
- en: '`resources.dot`: This shows the hierarchical structure of your classes and
    resources, but without dependencies'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources.dot`：此文件展示了您的类和资源的层级结构，但没有依赖关系。'
- en: '`relationships.dot`: This shows the dependencies between resources as arrows,
    as shown in the preceding image'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`relationships.dot`：此文件展示了资源之间的依赖关系，用箭头表示，正如前面图像所示。'
- en: '`expanded_relationships.dot`: This is a more detailed version of the relationships
    graph'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expanded_relationships.dot`：这是一个更详细的关系图版本。'
- en: The `dot` tool (part of the `graphviz` package) will convert these to an image
    format such as PNG for viewing.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`dot`工具（`graphviz`包的一部分）将把这些转换为PNG等图像格式供查看。'
- en: In the relationships graph, each resource in your manifest is shown as a balloon
    (known as a vertex), with arrowed lines connecting them to indicate the dependencies.
    You can see that in our example, the dependencies between `File['/etc/ntp.conf']`
    and `Package['ntp']` are bidirectional. When Puppet tries to decide where to begin
    applying these resources, it can start at `File['/etc/ntp.conf']` and look for
    what depends on `File['/etc/ntp.conf']` and end up at `Package['ntp']`. When Puppet
    looks for the dependencies
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系图中，清单中的每个资源都显示为气球（称为顶点），并通过箭头连接以指示依赖关系。您可以看到在我们的例子中，`File['/etc/ntp.conf']`和`Package['ntp']`之间的依赖关系是双向的。当Puppet尝试决定从哪里开始应用这些资源时，它可以从`File['/etc/ntp.conf']`开始，查找哪些依赖于`File['/etc/ntp.conf']`，最终回到`Package['ntp']`。当Puppet查找依赖关系时
- en: of `Package['ntp']`, it will end up back at `File['/etc/ntp.conf']`, forming
    a circular path. This type of problem is known as a circular dependency problem;
    Puppet can't decide where to start because the two resources depend on each other.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Package['ntp']`，最终会回到`File['/etc/ntp.conf']`，形成一个循环路径。此类问题被称为循环依赖问题；Puppet
    无法决定从哪里开始，因为这两个资源相互依赖。
- en: 'To fix the circular dependency problem, all you need to do is remove one of
    the dependency lines and break the circle. The following code fixes the problem:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决循环依赖问题，您需要做的就是删除其中一行依赖关系并打破循环。以下代码解决了这个问题：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now when we run `puppet apply` or `agent` with the `--graph` option, the resulting
    graph does not have any circular paths (cycles):'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们使用`--graph`选项运行`puppet apply`或`agent`时，生成的图形不再有任何循环路径（环）：
- en: '![How it works...](img/B03643_10_05.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B03643_10_05.jpg)'
- en: In this graph it is easy to see that **Package[ntp]** is the first resource
    to be applied, then **File[/etc/ntp.conf]**, and finally **Service[ntp]**.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图中，很容易看到**Package[ntp]**是第一个应用的资源，然后是**File[/etc/ntp.conf]**，最后是**Service[ntp]**。
- en: Tip
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A graph such as that shown previously is known as a Directed Acyclic Graph (DAG).
    Reducing the resources to a DAG ensures that Puppet can calculate the shortest
    path of all the vertices (resources) in linear time. For more information on DAGs,
    look at [http://en.wikipedia.org/wiki/Directed_acyclic_graph](http://en.wikipedia.org/wiki/Directed_acyclic_graph).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示的图形被称为有向无环图（DAG）。将资源减少为DAG可以确保Puppet在线性时间内计算所有顶点（资源）的最短路径。有关DAG的更多信息，请查看[http://en.wikipedia.org/wiki/Directed_acyclic_graph](http://en.wikipedia.org/wiki/Directed_acyclic_graph)。
- en: There's more...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: Resource and relationship graphs can be useful even when you don't have a bug
    to find. If you have a very complex network of classes and resources, for example,
    studying the resources graph can help you see where to simplify things. Similarly,
    when dependencies become too complicated to understand from reading the manifest,
    the graphs can be a useful form of documentation. For instance, a graph will make
    it readily apparent which resources have the most dependencies and which resources
    are required by the most other resources. Resources that are required by a large
    number of other resources will have numerous arrows pointing at them.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在没有bug需要排查的情况下，资源和关系图也是非常有用的。例如，如果你有一个非常复杂的类和资源网络，研究资源图可以帮助你看到哪里可以简化。同样，当依赖关系变得过于复杂，无法从阅读清单中理解时，图形可以成为有用的文档形式。例如，一个图形会清晰地显示出哪些资源有最多的依赖关系，哪些资源被最多的其他资源所依赖。被大量资源依赖的资源会有许多箭头指向它们。
- en: See also
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Using run stages* recipe in [Chapter 3](ch03.html "Chapter 3. Writing Better
    Manifests"), *Writing Better Manifests*
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章. 写更好的清单")中的*使用运行阶段*配方，*写更好的清单*'
- en: Understanding Puppet errors
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Puppet错误
- en: Puppet's error messages can sometimes be a little confusing. Updated and increasingly
    helpful error messages are one reason to upgrade your Puppet installation if you
    are running any version prior to Version 3.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet的错误信息有时会让人感到困惑。如果你使用的是3.0版本之前的任何版本，更新和越来越有帮助的错误信息是升级Puppet安装的一个理由。
- en: Here are some of the most common errors you might encounter, and what to do
    about them.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些你可能遇到的最常见错误，以及如何处理它们。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何解决...
- en: 'Often the first step is simply to search the Web for the error message text
    and see what explanations you can find for the error, along with any helpful advice
    about fixing it. Here are some of the most common puzzling errors, with possible
    explanations:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，第一步就是搜索网络，查看错误信息文本，并找到可能的解释，以及一些修复建议。以下是一些最常见的难解错误及其可能的解释：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Where `XXX` is a file resource, you may have accidentally typed `puppet://modules...`
    in a file source instead of `puppet:///modules...` (note the triple slash):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在`XXX`是文件资源的情况下，你可能在文件源中不小心输入了`puppet://modules...`而不是`puppet:///modules...`（注意三斜杠）：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The source file may not be present or may not be in the right location in the
    Puppet repo:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件可能不存在，或者在Puppet仓库中位置不正确：
- en: '[PRE37]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The file path may specify a parent directory (or directories) that doesn''t
    exist. You can use separate file resources in Puppet to create these:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 文件路径可能指定了一个不存在的父目录（或多个目录）。你可以在Puppet中使用独立的文件资源来创建这些目录：
- en: '[PRE38]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This is often caused by Puppet trying to write a file to a directory that doesn''t
    exist. Check that the directory either exists already or is defined in Puppet,
    and that the file resource requires the directory (so that the directory is always
    created first):'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是由于Puppet尝试将文件写入一个不存在的目录。检查该目录是否已存在，或者在Puppet中已定义，并确保文件资源要求该目录（以便目录始终先被创建）：
- en: '[PRE39]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This unhelpful error message is roughly translated as *something went wrong*.
    It tends to be a catch-all error caused by many different problems, but you may
    be able to determine what is wrong from the name of the resource, the class, or
    the module. One trick is to add the `--debug` switch, to get more useful information:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这个不太有用的错误信息大致可以翻译为*出了点问题*。它往往是由许多不同问题引起的一个通用错误，但你可以通过资源、类或模块的名称来确定出问题的原因。一个技巧是添加`--debug`开关，以获取更有用的信息：
- en: '[PRE40]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If you check your Git history to see what was touched in the most recent change,
    this may be another way to identify what''s upsetting Puppet:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看Git历史记录，查看最近更改的内容，这可能是找出问题所在的另一种方法：
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This can be caused by mistyping command line options, for example, if you type
    `puppet -verbose` instead of `puppet --verbose`. This kind of error can be hard
    to see:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是由于命令行选项拼写错误造成的，例如，如果你输入了`puppet -verbose`而不是`puppet --verbose`。这种错误很难被发现：
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This one has caused me a bit of puzzlement in the past. Puppet's complaining
    about a duplicate definition, and normally if you have two resources with the
    same name, Puppet will helpfully tell you where they are both defined. But in
    this case, it's indicating the same file and line number for both. How can one
    resource be a duplicate of itself?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题曾让我困惑一阵子。Puppet 报告重复定义的错误，通常如果你有两个相同名称的资源，Puppet 会帮助你指出它们被定义的位置。但在这个例子中，它却显示了相同的文件和行号。那么，怎么可能有一个资源是它自己重复定义呢？
- en: 'The answer is, if it''s a defined type (a resource created with the `define`
    keyword). If you create two instances of a defined type you''ll also have two
    instances of all the resources contained within the definition, and they need
    to have distinct names. For example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是，如果它是一个已定义的类型（通过`define`关键字创建的资源）。如果你创建了一个已定义类型的两个实例，你将拥有所有资源的两个实例，而这些资源需要有不同的名称。例如：
- en: '[PRE43]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'When we run Puppet, the same error is printed twice:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 Puppet 时，出现了相同的错误两次：
- en: '[PRE44]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Because the `exec` resource is named `is-process-running?`, if you try to create
    more than one instance of the definition, Puppet will refuse because the result
    would be two `exec` resources with the same name. The solution is to include the
    name of the instance (or some other unique value) in the title of each resource:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`exec`资源被命名为`is-process-running?`，如果你尝试创建多个该定义的实例，Puppet 将拒绝，因为结果将是两个具有相同名称的`exec`资源。解决方案是在每个资源的标题中包含实例名称（或其他唯一值）：
- en: '[PRE45]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Every resource must have a unique name, and a good way to ensure this with
    a definition is to interpolate the `${name}` variable in its title. Note that
    we switched from using single to double quotes in the resource title:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 每个资源必须有一个唯一的名称，确保这一点的一个好方法是将`${name}`变量插入到标题中。注意，我们已经从单引号切换到双引号来定义资源标题：
- en: '[PRE46]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The double quotes are required when you want Puppet to interpolate the value
    of a variable into a string.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当你希望 Puppet 将变量的值插入字符串时，必须使用双引号。
- en: See also
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Generating reports* recipe in this chapter
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*生成报告*食谱
- en: 'The *Noop: the don''t change anything option* recipe in this chapter'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '本章中的*Noop: 不做任何更改选项*食谱'
- en: The *Logging debug messages* recipe in this chapter
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*记录调试信息*食谱
- en: Inspecting configuration settings
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查配置设置
- en: You probably know that Puppet's configuration settings are stored in `puppet.conf`,
    but there are many parameters, and those that aren't listed in `puppet.conf` will
    take a default value. How can you see the value of any configuration parameter,
    regardless of whether or not it's explicitly set in `puppet.conf`? The answer
    is to use the `puppet config print` command.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能知道 Puppet 的配置设置存储在`puppet.conf`中，但有很多参数，而那些没有在`puppet.conf`中列出的参数将采用默认值。那么，如何查看任何配置参数的值，无论它是否在`puppet.conf`中显式设置呢？答案是使用`puppet
    config print`命令。
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Run the following command. This will produce a lot of output (it may be helpful
    to pipe it through `less` if you''d like to browse the available configuration
    settings):'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令。这会产生大量输出（如果你希望浏览可用的配置设置，使用`less`进行分页可能会很有帮助）：
- en: '[PRE47]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Running `puppet config print` will output every configuration parameter and
    its current value (and there are lots of them).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`puppet config print`将输出每个配置参数及其当前值（并且它们非常多）。
- en: 'To see the value for a specific parameter, add it as an argument to `puppet
    config print` command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看特定参数的值，可以将其作为参数添加到`puppet config print`命令：
- en: '[PRE48]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: See also
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Generating reports* recipe in this chapter
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*生成报告*食谱
