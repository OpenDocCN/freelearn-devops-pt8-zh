- en: Chapter 10. Monitoring, Reporting, and Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"Show me a completely smooth operation and I''ll show you someone who''s
    covering mistakes. Real boats rock."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Frank Herbert, Chapterhouse: Dune* |'
  prefs: []
  type: TYPE_TB
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Noop: the don''t change anything option'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging command output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging debug messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Producing automatic HTML documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing dependency graphs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Puppet errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting configuration settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've all had the experience of sitting in an exciting presentation about some
    new technology and rushing home to play with it. Of course, once you start experimenting
    with it, you immediately run into problems. What's going wrong? Why doesn't it
    work? How can I see what's happening under the hood? This chapter will help you
    answer some of these questions, and give you the tools to solve common Puppet
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also see how to generate useful reports on your Puppet infrastructure
    and how Puppet can help you monitor and troubleshoot your network as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Noop – the don't change anything option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes your Puppet manifest doesn't do exactly what you expected, or perhaps
    someone else has checked in changes you didn't know about. Either way, it's good
    to know exactly what Puppet is going to do before it does it.
  prefs: []
  type: TYPE_NORMAL
- en: When you are retrofitting Puppet into an existing infrastructure you might not
    know whether Puppet is going to update a `config` file or restart a production
    service. Any such change could result in unplanned downtime. Also, sometimes manual
    configuration changes are made on a server that Puppet would overwrite.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid these problems, you can use Puppet's noop mode, which means no operation
    or do nothing. When run with the noop option, Puppet only reports what it would
    do but doesn't actually do anything. One caveat here is that even during a noop
    run, pluginsync still runs and any `lib` directories in modules will be synced
    to nodes. This will update external fact definitions and possibly Puppet's types
    and providers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may run noop mode when running `puppet agent` or `puppet apply` by appending
    the `--noop` switch to the command. You may also create a `noop=true` line in
    your `puppet.conf` file within the `[agent]` or `[main]` sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `noop.pp` manifest that creates a file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now run puppet agent with the `noop` switch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now run without the `noop` option to see that the file is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `noop` mode, Puppet does everything it would normally, with the exception
    of actually making any changes to the machine (the `exec` resources, for example,
    won't run). It tells you what it would have done, and you can compare this with
    what you expected to happen. If there are any differences, double-check the manifest
    or the current state of the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that when we ran with `--noop`, Puppet warned us that it would have created
    the `/tmp/noop` file. This may or may not be what we want, but it's useful to
    know in advance. If you are making changes to the code applied to your production
    servers, it's useful to run puppet agent with the `--noop` option to ensure that
    your changes will not affect the production services.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use noop mode as a simple auditing tool. It will tell you whether
    any changes have been made to the machine since Puppet last applied its manifest.
    Some organizations require all config changes to be made with Puppet, which is
    one way of implementing a change control process. Unauthorized changes to the
    resources managed by Puppet can be detected using Puppet in noop mode and you
    can then decide whether to merge the changes back into the Puppet manifest or
    undo them.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `--debug` switch when running puppet agent to see the details
    of every change Puppet makes during an agent run. This can be helpful when trying
    to figure out how Puppet is applying certain exec resources or to see in what
    order things are happening.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are running a master, you can compile the catalog for a node on the
    master with the `--trace` option in addition to `--debug`. If the catalog is failing
    to compile, this method will also fail to compile the catalog (if you have an
    old definition for the cookbook node that is failing, try commenting it out before
    running this test). This produces a lot of debugging output. For example, to compile
    the catalog for our cookbook host on our master and place the results into `/tmp/cookbook.log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After compiling the catalog, Puppet will print out the catalog to the command
    line. The log file (`/tmp/cookbook.log`) will have a lot of information on how
    the catalog was compiled.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Auditing resources* recipe in [Chapter 6](ch06.html "Chapter 6. Managing
    Resources and Files"), *Managing Resources and Files*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Automatic syntax checking with Git hooks* recipe in [Chapter 2](ch02.html
    "Chapter 2. Puppet Infrastructure"), *Puppet Infrastructure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating reports* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing your Puppet manifests with rspec-puppet* recipe in [Chapter 9](ch09.html
    "Chapter 9. External Tools and the Puppet Ecosystem"), *External Tools and the
    Puppet Ecosystem*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging command output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you use the `exec` resources to run commands on the node, Puppet will
    give you an error message such as the following if a command returns a non-zero
    exit status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, Puppet not only reports that the command failed, but shows
    its output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is useful to figure out why the command didn't work, but sometimes the
    command actually succeeds (in that it returns a zero exit status) but still doesn't
    do what we wanted. In that case, how can you see the command output? You can use
    the `logoutput` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps in order to log command output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define an `exec` resource with the `logoutput` parameter as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Puppet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you can see, even though the command succeeds, Puppet prints the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `logoutput` attribute has three possible settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`false`: This never prints the command output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`on_failure`: This only prints the output if the command fails (the default
    setting)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`true`: This always prints the output, whether the command succeeds or fails'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set the default value of `logoutput` to always display command output
    for all `exec` resources by defining the following in your `site.pp` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Resource defaults**: What''s this Exec syntax? It looks like an `exec` resource,
    but it''s not. When you use `Exec` with a capital E, you''re setting the resource
    default for exec. You may set the resource default for any resource by capitalizing
    the first letter of the resource type. Anywhere that Puppet see''s that resource
    within the current scope or a nested subscope, it will apply the defaults you
    define.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you never want to see the command output, whether it succeeds or fails,
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: More information is available at [https://docs.puppetlabs.com/references/latest/type.html#exec](https://docs.puppetlabs.com/references/latest/type.html#exec).
  prefs: []
  type: TYPE_NORMAL
- en: Logging debug messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It can be very helpful when debugging problems if you can print out information
    at a certain point in the manifest. This is a good way to tell, for example, if
    a variable isn't defined or has an unexpected value. Sometimes it's useful just
    to know that a particular piece of code has been run. Puppet's `notify` resource
    lets you print out such messages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define a `notify` resource in your manifest at the point you want to investigate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When this resource is applied, Puppet will print out the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to simple messages, we can output variables within our `notify`
    statements. Additionally, we can treat the `notify` calls the same as other resources,
    having them require or be required by other resources.
  prefs: []
  type: TYPE_NORMAL
- en: Printing out variable values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can refer to variables in the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Puppet will interpolate the values in the printout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The double colon (`::`) before the fact name tells Puppet that this is a variable
    in top scope (accessible to all classes) and not local to the class. For more
    about how Puppet handles variable scope, see the Puppet Labs article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.puppetlabs.com/guides/scope_and_puppet.html](http://docs.puppetlabs.com/guides/scope_and_puppet.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Resource ordering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Puppet compiles your manifests into a catalog; the order in which resources
    are executed on the client (node) may not be the same as the order of the resources
    within your source files. When you are using a `notify` resource for debugging,
    you should use resource chaining to ensure that the `notify resource` is executed
    before or after your failing resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the exec `failing exec` is failing, you can chain a `notify
    resource` to run directly before the failed exec resource as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you don't chain the resource or use a metaparameter such as `before` or `require`,
    there is no guarantee your `notify` statement will be executed near the other
    resources you are interested in debugging. More information on resource ordering
    can be found at [https://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html](https://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to have your `notify resource` run after `''failing exec''` in
    the preceding code snippet, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Note, however, that in this case the `notify resource` will fail to execute
    since the exec failed. When a resource fails, all the resources that depended
    on that resource are skipped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run Puppet, we see that the `notify resource` is skipped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Generating reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're managing a lot of machines, Puppet's reporting facility can give you
    some valuable information on what's actually happening out there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable reports, just add this to a client''s `puppet.conf`: within the `[main]`
    or `[agent]` sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In recent versions (greater than 3.0) of Puppet, `report = true` is the default
    setting.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With reporting enabled, Puppet will generate a report file, containing data
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Date and time of the run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total time for the run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log messages output during the run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of all the resources in the client's manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether Puppet changed any resources, and how many
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the run succeeded or failed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By default, these reports are stored on the node at `/var/lib/puppet/reports`
    in a directory named after the hostname, but you can specify a different destination
    using the `reportdir` option. You can create your own scripts to process these
    reports (which are in the standard YAML format). When we run puppet agent on `cookbook.example.com`,
    the following file is created on the master:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have more than one master server, you can have all your reports sent
    to the same server by specifying `report_server` in the `[agent]` section of `puppet.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you just want one report, or you don''t want to enable reporting all the
    time, you can add the `--report` switch to the command line when you run Puppet
    agent manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You won't see any additional output, but a report file will be generated in
    the `report` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see some overall statistics about a Puppet run by supplying the
    `--summarize` switch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Other report types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Puppet can generate different types of reports with the reports option in the
    `[main]` or `[master]` section of `puppet.conf` on your Puppet master servers.
    There are several built-in report types listed at [https://docs.puppetlabs.com/references/latest/report.html](https://docs.puppetlabs.com/references/latest/report.html).
    In addition to the built-in report types, there are some community developed reports
    that are quite useful. The Foreman ([http://theforeman.org](http://theforeman.org)),
    for example, provides a Foreman report type that you can enable to forward your
    node reports to the Foreman.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Auditing resources* recipe in [Chapter 6](ch06.html "Chapter 6. Managing
    Resources and Files"), *Managing Resources and Files*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Producing automatic HTML documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your manifests get bigger and more complex, it can be helpful to create HTML
    documentation for your nodes and classes using Puppet's automatic documentation
    tool, `puppet doc`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to generate HTML documentation for your manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate a set of HTML files at `/tmp/puppet`. Open the top-level
    `index.html` file with your web browser (`file:///tmp/puppet/index.html`), and
    you'll see something like the following screenshot:![How to do it...](img/B03643_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the classes link on the left and select the Apache module, something similar
    to the following will be displayed:![How to do it...](img/B03643_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `puppet doc` command creates a structured HTML documentation tree similar
    to that produced by **RDoc**, the popular Ruby documentation generator. This makes
    it easier to understand how different parts of the manifest relate to one another.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `puppet doc` command will generate basic documentation of your manifests
    as they stand, but you can include more useful information by adding comments
    to your manifest files, using the standard RDoc syntax. When we created our base
    class using puppet module generate, these comments were created for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'After generating the HTML documentation, we can see the result for the base
    module as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/B03643_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drawing dependency graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependencies can get complicated quickly, and it's easy to end up with a circular
    dependency (where A depends on B, which depends on A) that will cause Puppet to
    complain and stop working. Fortunately, Puppet's `--graph` option makes it easy
    to generate a diagram of your resources and the dependencies between them, which
    can be a big help in fixing such problems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Install the `graphviz` package to view the diagram files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to generate a dependency graph for your manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the directories for a new `trifecta` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `modules/trifecta/manifests/init.pp` with the following code
    containing a deliberate circular dependency (can you spot it?):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a simple `ntp.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we''ll be working locally on this problem, create a `trifecta.pp` manifest
    that includes the broken trifecta class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Puppet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Puppet with the `--graph` option as suggested:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the graph files have been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a graphic using the `dot` command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The graphic will look something like the this:![How to do it...](img/B03643_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you run `puppet agent --graph` (or enable the `graph` option in `puppet.conf`),
    Puppet will generate three graphs in the DOT format (a graphics language):'
  prefs: []
  type: TYPE_NORMAL
- en: '`resources.dot`: This shows the hierarchical structure of your classes and
    resources, but without dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`relationships.dot`: This shows the dependencies between resources as arrows,
    as shown in the preceding image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expanded_relationships.dot`: This is a more detailed version of the relationships
    graph'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `dot` tool (part of the `graphviz` package) will convert these to an image
    format such as PNG for viewing.
  prefs: []
  type: TYPE_NORMAL
- en: In the relationships graph, each resource in your manifest is shown as a balloon
    (known as a vertex), with arrowed lines connecting them to indicate the dependencies.
    You can see that in our example, the dependencies between `File['/etc/ntp.conf']`
    and `Package['ntp']` are bidirectional. When Puppet tries to decide where to begin
    applying these resources, it can start at `File['/etc/ntp.conf']` and look for
    what depends on `File['/etc/ntp.conf']` and end up at `Package['ntp']`. When Puppet
    looks for the dependencies
  prefs: []
  type: TYPE_NORMAL
- en: of `Package['ntp']`, it will end up back at `File['/etc/ntp.conf']`, forming
    a circular path. This type of problem is known as a circular dependency problem;
    Puppet can't decide where to start because the two resources depend on each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix the circular dependency problem, all you need to do is remove one of
    the dependency lines and break the circle. The following code fixes the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we run `puppet apply` or `agent` with the `--graph` option, the resulting
    graph does not have any circular paths (cycles):'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B03643_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this graph it is easy to see that **Package[ntp]** is the first resource
    to be applied, then **File[/etc/ntp.conf]**, and finally **Service[ntp]**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A graph such as that shown previously is known as a Directed Acyclic Graph (DAG).
    Reducing the resources to a DAG ensures that Puppet can calculate the shortest
    path of all the vertices (resources) in linear time. For more information on DAGs,
    look at [http://en.wikipedia.org/wiki/Directed_acyclic_graph](http://en.wikipedia.org/wiki/Directed_acyclic_graph).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Resource and relationship graphs can be useful even when you don't have a bug
    to find. If you have a very complex network of classes and resources, for example,
    studying the resources graph can help you see where to simplify things. Similarly,
    when dependencies become too complicated to understand from reading the manifest,
    the graphs can be a useful form of documentation. For instance, a graph will make
    it readily apparent which resources have the most dependencies and which resources
    are required by the most other resources. Resources that are required by a large
    number of other resources will have numerous arrows pointing at them.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using run stages* recipe in [Chapter 3](ch03.html "Chapter 3. Writing Better
    Manifests"), *Writing Better Manifests*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Puppet errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Puppet's error messages can sometimes be a little confusing. Updated and increasingly
    helpful error messages are one reason to upgrade your Puppet installation if you
    are running any version prior to Version 3.
  prefs: []
  type: TYPE_NORMAL
- en: Here are some of the most common errors you might encounter, and what to do
    about them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Often the first step is simply to search the Web for the error message text
    and see what explanations you can find for the error, along with any helpful advice
    about fixing it. Here are some of the most common puzzling errors, with possible
    explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Where `XXX` is a file resource, you may have accidentally typed `puppet://modules...`
    in a file source instead of `puppet:///modules...` (note the triple slash):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The source file may not be present or may not be in the right location in the
    Puppet repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The file path may specify a parent directory (or directories) that doesn''t
    exist. You can use separate file resources in Puppet to create these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This is often caused by Puppet trying to write a file to a directory that doesn''t
    exist. Check that the directory either exists already or is defined in Puppet,
    and that the file resource requires the directory (so that the directory is always
    created first):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This unhelpful error message is roughly translated as *something went wrong*.
    It tends to be a catch-all error caused by many different problems, but you may
    be able to determine what is wrong from the name of the resource, the class, or
    the module. One trick is to add the `--debug` switch, to get more useful information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'If you check your Git history to see what was touched in the most recent change,
    this may be another way to identify what''s upsetting Puppet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be caused by mistyping command line options, for example, if you type
    `puppet -verbose` instead of `puppet --verbose`. This kind of error can be hard
    to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This one has caused me a bit of puzzlement in the past. Puppet's complaining
    about a duplicate definition, and normally if you have two resources with the
    same name, Puppet will helpfully tell you where they are both defined. But in
    this case, it's indicating the same file and line number for both. How can one
    resource be a duplicate of itself?
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is, if it''s a defined type (a resource created with the `define`
    keyword). If you create two instances of a defined type you''ll also have two
    instances of all the resources contained within the definition, and they need
    to have distinct names. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run Puppet, the same error is printed twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the `exec` resource is named `is-process-running?`, if you try to create
    more than one instance of the definition, Puppet will refuse because the result
    would be two `exec` resources with the same name. The solution is to include the
    name of the instance (or some other unique value) in the title of each resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Every resource must have a unique name, and a good way to ensure this with
    a definition is to interpolate the `${name}` variable in its title. Note that
    we switched from using single to double quotes in the resource title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The double quotes are required when you want Puppet to interpolate the value
    of a variable into a string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Generating reports* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *Noop: the don''t change anything option* recipe in this chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Logging debug messages* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting configuration settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You probably know that Puppet's configuration settings are stored in `puppet.conf`,
    but there are many parameters, and those that aren't listed in `puppet.conf` will
    take a default value. How can you see the value of any configuration parameter,
    regardless of whether or not it's explicitly set in `puppet.conf`? The answer
    is to use the `puppet config print` command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following command. This will produce a lot of output (it may be helpful
    to pipe it through `less` if you''d like to browse the available configuration
    settings):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Running `puppet config print` will output every configuration parameter and
    its current value (and there are lots of them).
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the value for a specific parameter, add it as an argument to `puppet
    config print` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Generating reports* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
