- en: Using Amazon ECS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon ECS **Command Line Interface** (**CLI**) is a command-line tool used
    to create, update, and monitor ECS clusters and tasks. Amazon ECS CLI supports
    the Fargate launch type. To create a container application with ECS CLI, Docker
    Compose (v1 or v2) is required. In this chapter, we shall use ECS CLI to launch
    an ECS cluster of the Fargate launch type in Windows PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing ECS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing AWS Tools for Windows PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring ECS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up prerequisites for Fargate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering the task execution policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ECS cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a security group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Granting security group ingress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a compose file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring ECS specific parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the compose file to the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing the running containers on the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing the container logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling the tasks on the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the WordPress service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting the service and the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If PowerShell is not already installed, download and install PowerShell 3.0
    or a later version. Windows Management Framework 3.0 includes PowerShell 3.0:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to PowerShell as an Administrator for which right-click on PowerShell
    application, and select Run as administrator
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the version is 3.0 with the `get-host` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable script execution with the following command, which allows all user-created
    scripts to run, and all scripts downloaded from the internet would need to be
    signed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to obtain the AWS Security credentials represented with an Access
    Key, which consists of an Access Key ID and Secret Access Key:'
  prefs: []
  type: TYPE_NORMAL
- en: To obtain the security credentials, select My Security Credentials from the
    account dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the confirmation dialog, click on Continue to Security Credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Your Security Credentials page is displayed; select Access keys. Security
    credentials only display the Access Key ID and not the Secret Access Key. Unless
    the Access Key ID and the Secret Access Key were recorded earlier, create a new
    access key with Create New Access Key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Create Access Key dialog indicates that the access key has been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Show Access Key link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the Access Key ID and Secret Access Key. Set the environment variables `AWS_ACCESS_KEY_ID`
    and `AWS_SECRET_KEY`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing ECS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install ECS CLI on PowerShell, first run PowerShell as an administrator
    by right-clicking on Windows PowerShell and selecting Run as administrator:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Subsequently, run the following command to create a new item of type directory
    at the specified path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Download and install ecs-cli `ecs-cli-windows-amd64-latest.exe` to application
    `ecs-cli.exe` in directory `C:\Program Files\Amazon\ECSCLI\`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `C:\Program Files\Amazon\ECSCLI` to the `PATH` environment variable. Output
    the `ecs-cli` version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding commands run in PowerShell, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c56eaf03-de53-4f44-8bb4-67a778b0f6c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing AWS Tools for Windows PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, install AWS Tools for Windows PowerShell, which is used to manage AWS
    services, including ECS from PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the MSI Installer file (`AWSToolsAndSDKForNet_sdk-3.3.231.0_ps-3.3.225.1_tk-1.14.0.1`)
    for AWS Tools for Windows PowerShell from [https://aws.amazon.com/powershell/](https://aws.amazon.com/powershell/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the MSI Installer to launch the AWS Tools for Windows Setup
    wizard. Click on Next in the Welcome screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In End-User License Agreement, accept the agreement and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Custom Setup, select the default installation Location and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Read to install AWS Tools for Windows, click on Install. AWS Tools for Windows
    starts to get installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the AWS Tools for Windows installation has completed, click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring ECS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configuring the ECS CLI involves the following two configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure an ECS cluster with the Fargate launch type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure an ECS CLI profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we shall discuss each of these configurations. The syntax to configure
    a cluster is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The different command parameters in the `ecs-cli` configure command are discussed
    in this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command parameter** | **Description** | **Value to set** |'
  prefs: []
  type: TYPE_TB
- en: '| `--cluster` | Name of an existing ECS cluster or a new cluster to create
    | `hello-world` |'
  prefs: []
  type: TYPE_TB
- en: '| `--region` | AWS region | `us-east-1` |'
  prefs: []
  type: TYPE_TB
- en: '| `--default-launch-type` | Launch type | `FARGATE` |'
  prefs: []
  type: TYPE_TB
- en: '| `--config-name` | Configuration name | `hello-world` |'
  prefs: []
  type: TYPE_TB
- en: 'Run the following command in PowerShell to configure an ECS cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a directory, `C:\PowerShell`, for PowerShell and run the preceding command
    from the directory. As the command output indicates, the ECS CLI cluster configuration
    `hello-world` gets saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a CLI profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The command syntax to configure an ECS CLI profile is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The different command parameters in the `ecs-cli` configure profile command
    are discussed in this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command parameter** | **Description** | **Value to set** |'
  prefs: []
  type: TYPE_TB
- en: '| `--profile` | Name of an existing ECS cluster or a new cluster to create
    | `hello-world` |'
  prefs: []
  type: TYPE_TB
- en: '| `--access-key` | AWS access key ID | Value would be different for different
    users |'
  prefs: []
  type: TYPE_TB
- en: '| `--secret-key` | Secret access key | Value would be different for different
    users |'
  prefs: []
  type: TYPE_TB
- en: 'Create an ECS CLI profile, `hello-world`, in which the variables need to be
    substituted with the `AWS Access Key ID` and `Secret Access Key`, which would
    be different for different users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As the output from the command indicates, an ECS CLI profile gets saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As an alternative to creating a `hello-world` profile (or some other profile
    name), a default ECS profile may be created using the `-StoreAs` default parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Setting up prerequisites for Fargate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to configuring an ECS CLI profile, we need to set up the following
    prerequisites to create an ECS cluster with the FARGATE launch type:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a task execution role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register the task execution policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the task execution role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A task execution role is required to be created for a Fargate task to be able
    to download a Docker image and send and save container logs in CloudWatch. Create
    an IAM policy, `execution-assume-role.json`, in the `C:\PowerShell\` directory,
    and copy and save the following JSON listing to the policy file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the task execution role with the following command in PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As the output from the command indicates, a task execution role gets created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Registering the task execution policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, register the task execution policy with the following command in PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command does not generate any output, and the task execution policy
    gets registered.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ECS cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having configured the prerequisites, next we shall create an ECS Fargate cluster.
    Run the following command in PowerShell to create a cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As the command output indicates, a cluster gets created using the cluster configuration
    set up earlier. A VPC and two subnets also get created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Access the ECS Console in a web browser and the `hello-world` cluster gets
    listed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c515467a-8a5e-4310-8a96-3e0d9820aa45.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a security group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, create a Security group using the VPC created in the previous section
    on creating a cluster. The AWS region is required to be specified in the following
    command, if not configured in persisted/shell defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'List the EC2 security group with the following `Get-EC2SecurityGroup` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The EC2 security group gets listed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15a18143-b901-4d47-ad26-8b38ae6bce87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If required, the EC2 security group may be removed with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Granting security group Ingress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, add a security group rule to allow inbound access on port `80` with the
    `Grant-EC2SecurityGroupIngress` cmdlet, using the following commands run in the
    sequence listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Subsequently, run the `Get-EC2SecurityGroup` cmdlet again and, as the output
    here indicates, the Ingress permissions get set on the EC2 security group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/497f57e0-9984-419c-a153-97895e1aef83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We shall be creating an ECS task for WordPress only, but if a MySQL database
    is also to be configured in the same task, we would also need to add an ingress
    rule for port `3306`, which is exposed by the MySQL database. Run the following
    commands in the sequence listed to add ingress for port `3306`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Subsequently, run the `Get-EC2SecurityGroup` command. As the output here shows,
    ingress for port `3306` also gets added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4369591a-a470-4e9a-9bd0-9376ba10c7ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a compose file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ECS CLI supports Docker compose versions 1 and 2, and we have used version
    2 for the example compose file for WordPress. Create a `docker-compose.yml` file in
    the `C:/PowerShell` directory, and copy the following listing to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The Docker compose file specifies a `wordpress` service based on the `wordpress` Docker
    image and exposes port `80`. CloudWatch logging is configured using the `awslogs`
    driver, which is the only supported driver for the Fargate launch type.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ECS specific parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also need to create an **ECS specific parameters** file, `ecs-params.yml`,
    which defines resource (CPU and memory) settings for the task to create in addition
    to setting the Network Mode as `awsvpc`, which is the only supported Network Mode
    for the Fargate launch type. The run parameters include the network configuration
    for subnets, security groups, and setting the `Assign public IP` option for the
    task to `ENABLED`. The subnets are obtained from the output of the `ecs-cli up`
    command. The security group is obtained from the output of the `Get-EC2SecurityGroup
    -Region "us-east-1" -GroupId $groupid` command, as listed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Deploying the compose file to the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ecs-cli compose service up` command deploys a Docker compose file to a
    cluster. The command may optionally be parameterized with the command options
    discussed in this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** | **Default value** |'
  prefs: []
  type: TYPE_TB
- en: '| `--project-name` | Project name | The current directory |'
  prefs: []
  type: TYPE_TB
- en: '| `--ecs-params` | ECS params file to use | The `ecs-params.yml` in the current
    directory |'
  prefs: []
  type: TYPE_TB
- en: '| `--create-log-groups` | Creates CloudWatch Log groups for container logs
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| `--file` | Docker compose file | The `docker-compose.yml` file in the current
    directory |'
  prefs: []
  type: TYPE_TB
- en: 'Run the following command in which the `--project-name` and `--create-log-groups`
    options are used. We don’t need to use the other options, as the required files
    are in the current directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The Docker compose file gets deployed on the `hello-world` cluster. The output
    from the command is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6142489-39f8-4469-b257-0c1d7c2bb37d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `hello-world` cluster lists one running task, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aaac7d42-ef41-4d3c-bec3-9a5f8e52e863.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the `hello-world` cluster link to display its details. The service
    created is listed in the Services tab. Click on the service link as shown here
    to list the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea9cdc91-87ff-4676-82ce-7ea9e107cffc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The service Details, which include the name of the Cluster name, Status, Task
    definition, Launch type, Platform version, Desired count, Pending count, and Running
    count get displayed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ad86abb-a2f9-429b-9d48-23faa595e7c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To find the task details, select the Tasks tab and click on the task link as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bb4f32d-30a1-4b46-aac2-eb383fc490a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The task details get displayed, as shown in the following screenshot. The Public
    IP at which the task may be accessed is also listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b41d6f20-e96c-4347-9e62-0bd36b9c7b69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll down for the Containers. The `wordpress` container gets listed, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe723d13-e502-4e92-9a03-31f0609c7c65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Because we configured logs, Log Configuration is displayed in the container
    details, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bad4a640-9e11-4f1f-be41-dea8bcd09db0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the View logs in CloudWatch link to display the CloudWatch logs, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b585343-785d-431b-b66d-257ebf0a51ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Listing the running containers on the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To list the running containers on the cluster, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The one Docker container gets listed as shown in the following screenshot.
    The container''s State, Ports, and Task Definition also get listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce4c5985-0408-426b-9a13-0f78997e057a.png)'
  prefs: []
  type: TYPE_IMG
- en: Listing the container logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To list the container logs, copy the task ID (the task ID is the container
    name `substring` before the `/`) from the container name, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The container logs get displayed as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8a7e459-fc38-4ccf-aaf1-c2cbdb472190.png)'
  prefs: []
  type: TYPE_IMG
- en: Scaling the tasks on the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To scale the cluster to two tasks, as an example, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As the output here indicates, the `desiredCount` and `runningCount` get set
    to `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f876b9b-f14c-4466-9394-b4f9842bf202.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Subsequently, list the running tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Two tasks get listed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c87aaa2e-d6c8-4468-8315-a5d0874bf336.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Running tasks in the `hello-world` cluster are also listed as 2, as shown
    in the following screenshot. Click on the `hello-world` cluster link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/425c71b8-0787-4812-8a79-33e591f5aec8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Tasks tab and two tasks get listed, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0940f4a-a263-464b-bf74-3d66958b76e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing the WordPress service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To access the WordPress service, open the public IP of one of the tasks in
    a web browser. Select a language and click on Continue. The welcome page for the
    WordPress application gets displayed as shown in the following screenshot. Click
    on the Let’s go! button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9946534d-7ee8-4480-b98d-526478eae154.png)'
  prefs: []
  type: TYPE_IMG
- en: Specify the database connection details and click on Submit to access the WordPress
    dashboard. The connection details shown below may need to be modified from the
    default settings.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the service and the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete the service and the associated tasks, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'As the output shown here indicates, the running count and desired count for
    the tasks gets set to 0, and the `hello-world` service gets deleted. The service
    has to be scaled down to 0 before deleting the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0ae1964-d83d-4ec7-977d-ed11bcd95371.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Delete the cluster with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Select y at the command prompt Are you sure you want to delete your cluster?.
    The `hello-world` cluster and all associated resources get deleted. If the cluster
    does not get deleted due to timeout, or due to some of the resources not getting
    deleted as shown in the following screenshot, run the preceding command again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c36c429e-3a31-466f-adef-ac604a1973bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, delete the CloudFormation stack associated with the cluster
    directly by selecting Actions | Delete Stack in the AWS CloudFormation console,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e6777d6-0dc1-484f-bae7-6d0a2fab2c97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Delete Stack confirmation dialog, select the stack resources not yet
    deleted and click on Yes, Delete, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3782e02a-e3e1-4ba9-8a30-c8cb7a2fef1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `ecs-cli down -force` command again after deleting the CloudFormation
    stack directly and the cluster should get deleted, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49983bd6-8709-4165-aad0-a251b9561884.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed using the ECS CLI to create a cluster of the launch
    type Fargate. Subsequently, we deployed a Docker compose file on the cluster to
    run a task for the Docker `wordpress` image. We discussed listing logs and running
    containers, and also demonstrated scaling the service.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter brings to a conclusion the Amazon Fargate Quick Start guide. Amazon
    Fargate is a launch type for the Amazon **Elastic Container Service** (**ECS**). At
    the time of writing, there is no native AWS integration between Amazon **Elastic
    Kubernetes Service** (**EKS**) and AWS Fargate.
  prefs: []
  type: TYPE_NORMAL
