- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Architectural Reliability Considerations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构可靠性考虑因素
- en: Application reliability is an essential aspect of architecture design and vital
    for any business to be successful.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可靠性是架构设计中的关键方面，是任何企业成功的关键。
- en: '**Reliability** means the ability of the system to recover from failure. It’s
    about making your application fault-tolerant and able to recover from any infrastructure
    or server failure without impacting the customer experience. Your system should
    be prepared to handle any situation that could cause disruption.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**可靠性**意味着系统从故障中恢复的能力。这涉及使您的应用程序具有容错能力，能够从任何基础设施或服务器故障中恢复，而不会影响客户体验。您的系统应该做好准备，能够应对任何可能导致中断的情况。'
- en: As all kinds of businesses are now online, high availability has also become
    a mandatory criterion for online applications. Users want to browse your application
    anytime and complete tasks such as shopping and banking at their convenience.
    In this chapter, you will learn various design principles to make your solution
    reliable. When assessing reliability, you need to consider every component of
    the architecture. You will understand how to choose the right technology to ensure
    your architecture’s reliability at every layer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 随着各种企业现在都在线上，高可用性也成为在线应用程序的强制性标准。用户希望随时浏览您的应用程序，并在他们方便的时候完成购物和银行等任务。在本章中，您将学习各种设计原则，以使您的解决方案可靠。在评估可靠性时，您需要考虑架构的每个组件。您将了解如何选择合适的技术，以确保每一层架构的可靠性。
- en: 'You will learn the following best practices for reliability in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下最佳的可靠性实践：
- en: Design principles for architectural reliability
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构可靠性的设计原则
- en: Technology selection for architectural reliability
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构可靠性的技术选择
- en: Improving reliability with the cloud
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过云提升可靠性
- en: By the end of this chapter, you will have learned about various disaster recovery
    techniques and data replication methods to ensure the high availability of your
    application and the continuation of business processes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，您将了解各种灾难恢复技术和数据复制方法，以确保应用程序的高可用性和业务流程的持续性。
- en: Design principles for architectural reliability
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构可靠性的设计原则
- en: Reliability and **high availability** (**HA**) are foundational pillars for
    ensuring that applications and infrastructure can meet user demands without interruption.
    Reliability focuses on the system’s ability to operate correctly under specific
    conditions and for a particular period.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠性和**高可用性**（**HA**）是确保应用程序和基础设施能够满足用户需求、不中断地运行的基础支柱。可靠性侧重于系统在特定条件下和一定时间内正常运行的能力。
- en: It involves designing systems to contain and manage failures in the smallest
    scope possible, minimizing the impact on overall operations. This approach requires
    a comprehensive understanding of potential failure modes and implementing targeted
    mitigation strategies to either prevent these failures or recover gracefully from
    them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及到设计系统以在尽可能小的范围内容纳和管理故障，最大程度地减少对整体操作的影响。该方法需要全面理解潜在的故障模式，并实施针对性的缓解策略，以防止这些故障发生或在故障发生后优雅地恢复。
- en: HA, discussed in detail in *Chapter 2*, is closely related to reliability but
    with an emphasis on ensuring that services remain accessible at all times. HA
    strategies involve creating redundant systems and components to eliminate single
    points of failure, thereby allowing for seamless failover in case of an outage.
    The goal is to maintain service continuity even in the face of hardware failures,
    network disruptions, or software bugs. By integrating reliability and HA into
    the system design, organizations can ensure that their applications are robust
    against failures and capable of maintaining consistent service levels.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第2章*中详细讨论的HA与可靠性密切相关，但重点是确保服务始终可访问。HA策略涉及创建冗余系统和组件，以消除单点故障，从而在发生故障时实现无缝切换。其目标是在硬件故障、网络中断或软件漏洞的情况下，保持服务的连续性。通过将可靠性和HA集成到系统设计中，组织可以确保其应用程序能够抵御故障，并能够维持一致的服务水平。
- en: In this discussion are the standard design principles that help you to strengthen
    your system’s reliability. You will find that all reliability design principles
    are closely related and complement each other.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本讨论包含了有助于增强系统可靠性的标准设计原则。您会发现，所有的可靠性设计原则是密切相关的，并且相辅相成。
- en: Making systems self-healing by applying automation
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过应用自动化使系统具备自愈能力
- en: Integrating self-healing capabilities and automation into your system’s design
    enhances its reliability by allowing it to predict and recover from failures autonomously.
    A self-healing system proactively detects and rectifies failures across various
    system layers—be it hardware, network, or software—minimizing the impact on end
    users. This approach requires identifying critical **key performance indicators**
    (**KPIs**) relevant to your application and business operations, such as request
    handling capacity per second or web page load times. Infrastructure-level KPIs
    might include thresholds for CPU and memory utilization, ensuring they do not
    exceed predefined limits.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将自愈能力和自动化集成到系统设计中，可以通过让系统预测并自动从故障中恢复，增强其可靠性。自愈系统能够主动检测并修复硬件、网络或软件等各个系统层面的故障，最大限度地减少对终端用户的影响。这一方法要求识别与你的应用程序和业务运营相关的关键**关键绩效指标**（**KPI**），例如每秒请求处理能力或网页加载时间。基础设施级别的
    KPI 可能包括 CPU 和内存利用率的阈值，确保其不超过预定限制。
- en: To achieve a self-healing architecture, implement a robust monitoring system
    that tracks these KPIs and alerts you as they approach critical thresholds. This
    system should be backed by automation strategies that can, for example, spin up
    additional servers to manage increased load when CPU utilization nears its maximum
    allowable percentage. This level of proactive monitoring and automated response
    not only prevents potential failures but also supports the system in maintaining
    optimal performance levels without manual intervention.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现自愈架构，实施一个强大的监控系统，跟踪这些关键绩效指标（KPIs），并在它们接近临界阈值时发出警报。该系统应当有自动化策略支持，例如，当 CPU
    使用率接近其最大允许百分比时，自动启动额外的服务器来应对增加的负载。这种积极的监控和自动响应不仅能防止潜在的故障，还能帮助系统在无需人工干预的情况下保持最佳性能水平。
- en: Moreover, embracing automation across your application’s life cycle—from deployment
    and configuration to scaling the infrastructure—fosters a more agile and resilient
    environment. It enables your team to deploy new features rapidly, experiment more
    freely, and ensure consistent system performance regardless of fluctuating workloads.
    Automating the scaling of resources based on scheduled demands or unexpected spikes
    in traffic ensures that the application remains responsive and available. By leveraging
    automation for deploying independent jobs and aggregating their outcomes, you
    can achieve not only higher reliability and efficiency but also enhance the system’s
    ability to self-recover from incidents, making your infrastructure truly resilient
    and self-sustaining.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，贯穿应用程序生命周期的自动化—从部署和配置到基础设施扩展—能够促进一个更加敏捷和有弹性的环境。它使你的团队能够快速部署新特性，更自由地进行实验，并确保系统在负载波动时仍保持一致的性能。通过根据预定需求或意外流量激增来自动化资源扩展，可以确保应用程序保持响应能力和可用性。通过利用自动化部署独立任务并汇总其结果，你不仅可以实现更高的可靠性和效率，还可以增强系统自我恢复事件的能力，使基础设施真正具备弹性和自我维持能力。
- en: Quality assurance
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 质量保证
- en: Frequently, you need to apply the same configuration that you have on your development
    environment to **quality assurance** (**QA**) environments. There may be multiple
    QA environments for each testing stage, which includes functional testing, **user
    acceptance testing** (**UAT**), and stress testing environments.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 经常需要将你在开发环境中使用的相同配置应用于**质量保证**（**QA**）环境。每个测试阶段可能有多个 QA 环境，包括功能测试、**用户验收测试**（**UAT**）和压力测试环境。
- en: Often, a QA tester discovers a defect caused by wrongly configured resources,
    which could introduce a further delay in the test schedule. Most importantly,
    you cannot afford a configuration error in production servers, which can cause
    widespread outages, so better to test them in advance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，QA 测试人员会发现由于资源配置错误导致的缺陷，这可能会进一步延迟测试进度。最重要的是，你不能在生产服务器中出现配置错误，因为这可能会导致大规模的停机，因此最好提前进行测试。
- en: To reproduce precisely the same configuration as your development environment
    to your QA environment, you may need to document step-by-step configuration instructions.
    Repeating the same steps to configure each environment manually can be error-prone.
    There is always a chance of human error, such as a typo, for example, in a database
    name. The solution to this challenge is to automate these steps by creating a
    script. The automation script itself can be the documentation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在你的开发环境和QA环境中精确复现相同的配置，你可能需要编写一步一步的配置说明。手动重复相同的配置步骤容易出错。总是存在人为错误的可能性，比如在数据库名称中打错字。解决这个问题的方法是通过创建脚本来自动化这些步骤。自动化脚本本身就是文档。
- en: As long as the script is correct, it is more reliable than manual configuration.
    It is undoubtedly reproducible. Detecting unhealthy resources and launching replacement
    resources can be automated, and you can notify the IT operations team when resources
    are changed. Automation is a fundamental design principle that needs to be applied
    everywhere in your system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 只要脚本正确，它比手动配置更可靠。它无疑是可复制的。检测不健康的资源并启动替代资源可以实现自动化，当资源发生变化时，你可以通知IT运维团队。自动化是一个基础的设计原则，应该在系统的各个方面应用。
- en: Creating a distributed system
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个分布式系统
- en: Monolithic applications have low reliability regarding system uptime, as a tiny
    issue in a particular module can bring down the entire system. Dividing your application
    into multiple small services reduces the *impact area*. One part of the application
    shouldn’t impact the whole system, and the application can continue to serve critical
    functionality. For example, in an e-commerce website, an issue with the payment
    service should not affect the customer’s ability to place orders, as payment can
    be processed later.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 单体应用程序在系统正常运行时间方面的可靠性较低，因为某个模块的小问题可能会导致整个系统崩溃。将你的应用程序拆分成多个小服务可以减少*影响范围*。应用程序的一个部分不应该影响整个系统，且应用程序可以继续提供关键功能。例如，在电子商务网站上，支付服务出现问题不应影响客户下单的能力，因为支付可以稍后处理。
- en: At the service level, scale your application horizontally to increase system
    availability. Design a system to use multiple smaller components working together
    rather than a single monolithic system to reduce the impact area. In a distributed
    design, requests are handled by different system components, and the failure of
    one component doesn’t impact the functioning of other parts of the system. For
    example, on an e-commerce website, the failure of warehouse management components
    will not impact the customer placing the order.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务层面，水平扩展你的应用程序以提高系统的可用性。设计一个系统，使用多个较小的组件协同工作，而不是一个单一的整体系统，从而减少影响范围。在分布式设计中，请求由不同的系统组件处理，一个组件的故障不会影响系统其他部分的功能。例如，在一个电子商务网站上，仓库管理组件的故障不会影响客户下单。
- en: However, the communication mechanism can be complicated in a distributed system.
    This complexity arises from the need to ensure reliable data exchange across various
    networked computers, each possibly running different operating systems and located
    in different geographical areas. Challenges include dealing with network latency,
    handling message delivery guarantees, synchronizing data across nodes to ensure
    consistency, and implementing fault tolerance to withstand partial system failures.
    Additionally, the development and maintenance of a communication protocol that
    efficiently supports the diverse requirements of a distributed architecture add
    to the intricacy.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在分布式系统中，通信机制可能会变得复杂。这种复杂性源于确保在不同网络计算机之间可靠的数据交换的需求，每台计算机可能运行不同的操作系统，并且位于不同的地理区域。挑战包括应对网络延迟、处理消息传递保证、在各节点之间同步数据以确保一致性，以及实施容错机制以应对部分系统故障。此外，开发和维护一个高效支持分布式架构多样化需求的通信协议也增加了复杂性。
- en: The circuit breaker pattern can help here to handle system dependencies. As
    you learned regarding the circuit breaker pattern in *Chapter 4*, *Solution Architecture
    Design Patterns*, the basic idea is simple. You wrap a protected function call
    in a circuit breaker object, which monitors for failures and takes automated action
    to mitigate them.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 熔断器模式可以帮助处理系统依赖性。正如你在*第4章*《解决方案架构设计模式》中所学到的，基本概念很简单。你将一个受保护的函数调用包装在熔断器对象中，熔断器监控故障并采取自动化措施来减轻它们。
- en: Monitoring and adding capacity
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控和增加容量
- en: Resource saturation is the most common reason for application failure. Often,
    you will encounter the issue where your applications start rejecting requests
    due to CPU, memory, or hard disk overload.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 资源饱和是导致应用失败的最常见原因。通常，你会遇到因 CPU、内存或硬盘过载导致应用开始拒绝请求的问题。
- en: In a traditional on-premises environment, you must calculate server capacity
    based on the assumption in advance. Online traffic is very unpredictable and fluctuates
    heavily, driven by global trends. Usually, procuring hardware can take anywhere
    between 3 to 6 months, and it’s tough to guess capacity in advance. Ordering excess
    hardware will incur an extra cost as a resource is sitting idle, and a lack of
    resources will cause the loss of business due to application unreliability.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的本地环境中，你必须提前根据假设计算服务器容量。在线流量非常不可预测，且波动剧烈，受到全球趋势的驱动。通常，硬件采购需要 3 到 6 个月，而提前猜测容量非常困难。订购过多的硬件会导致额外成本，因为资源会闲置，而资源不足则会因为应用不可靠而导致业务损失。
- en: You need an environment where you don’t need to guess capacity, and your application
    can scale on demand.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个无需猜测容量的环境，且你的应用能够按需扩展。
- en: A public cloud provider such as **Amazon Web Services** (**AWS**) provides **infrastructure
    as a service** (**IaaS**), facilitating the on-demand availability of resources.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 像**亚马逊 Web 服务**（**AWS**）这样的公共云提供商提供**基础设施即服务**（**IaaS**），便于按需提供资源。
- en: In the cloud, you can monitor system supply and demand. You can automate the
    addition or removal of resources as needed. It allows you to maintain the level
    of resources that will satisfy demand without over-provisioning or under-provisioning.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在云环境中，你可以监控系统的供需情况。你可以根据需要自动添加或移除资源。这使你能够维持一个足够满足需求的资源水平，避免过度配置或资源不足的情况。
- en: Performing recovery validation
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行恢复验证
- en: When it comes to infrastructure validation, most of the time, organizations
    focus on validating a happy path where everything is working. Instead, you should
    validate how your system fails and how well your recovery procedures work. Validate
    your application, assuming everything fails all the time. Don’t just expect that
    your recovery and failover strategies will work. Make sure to test them regularly
    so you’re not surprised if something goes wrong.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础设施验证方面，大多数组织通常专注于验证一条顺利的路径，即一切都在正常运行。实际上，你应该验证系统是如何失败的，以及恢复过程的有效性。假设一切都可能失败，验证你的应用程序。不要仅仅依赖于你的恢复和故障转移策略能够正常工作，确保定期进行测试，以防万一出现问题时不会感到惊讶。
- en: A simulation-based validation helps you to uncover any potential risks. You
    can automate a possible scenario that could cause your system to fail and prepare
    an incident response accordingly. Your validation should improve application reliability
    so that nothing will fail in production.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 基于模拟的验证有助于发现潜在的风险。你可以自动化可能导致系统失败的场景，并相应准备事件响应。你的验证应当提高应用程序的可靠性，确保生产环境中不会发生故障。
- en: Recoverability is sometimes overlooked as a component of availability. To improve
    the system’s **recovery point objective** (**RPO**) and **recovery time objective**
    (**RTO**), you should back up data and applications and their configuration as
    a machine image. You will learn more about RTO and RPO in the next section. Suppose
    a natural disaster makes one or more components unavailable or destroys your primary
    data source. In that case, you should be able to restore the service quickly and
    without losing data. Let’s discuss specific disaster recovery strategies to improve
    application reliability and associated technology choices next.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复能力有时被忽视作为可用性的一部分。为了提高系统的**恢复点目标**（**RPO**）和**恢复时间目标**（**RTO**），你应该将数据、应用程序及其配置备份为机器镜像。在下一节中，你将了解更多关于
    RTO 和 RPO 的内容。假设自然灾害导致一个或多个组件不可用，或者摧毁了你的主要数据源。在这种情况下，你应该能够快速恢复服务，且不会丢失数据。接下来，我们将讨论特定的灾难恢复策略，以提高应用程序的可靠性以及相关的技术选择。
- en: Technology selection for architectural reliability
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构可靠性的技术选择
- en: Application reliability often looks at the availability of the application to
    serve users. Several factors go into making your application highly available.
    However, **fault tolerance** refers to the built-in redundancy of an application’s
    components. Your application may be highly available but not be 100% fault-tolerant.
    For example, if your application needs four servers to handle the user request,
    you divide them between two data centers for HA.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可靠性通常关注应用程序是否能够持续为用户提供服务。有多个因素决定了你的应用程序是否具备高度可用性。然而，**容错性**指的是应用程序组件的内建冗余。你的应用程序可能是高度可用的，但并不一定具备100%的容错能力。例如，如果你的应用程序需要四台服务器来处理用户请求，你可以将它们分配到两个数据中心以实现高可用性（HA）。
- en: If one site goes down, your system is still highly available at 50% capacity,
    but it may impact user performance expectations. However, if you create equal
    redundancy in both sites with four servers each, your application will not only
    be highly available but will also be 100% fault-tolerant.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个站点出现故障，你的系统仍然能在50%的容量下保持高可用性，但这可能会影响用户的性能预期。然而，如果你在两个站点之间创建相等的冗余，每个站点都有四台服务器，那么你的应用程序不仅将具有高度可用性，还将具备100%的容错能力。
- en: Suppose your application is not 100% fault-tolerant. In that case, you want
    to add automated scalability, defining how your application’s infrastructure will
    respond to increased capacity needs to ensure your application is available and
    performing within your required standards. To make your application reliable,
    you should be able to restore services quickly and without losing data. Going
    forward, we will address this recovery process as **disaster recovery** (**DR**).
    Before going into various DR scenarios, let’s learn more about the RTO/RPO and
    data replication as it is a key factor to measure when planning for DR.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用程序不是100%容错的。在这种情况下，你需要添加自动化的可扩展性，定义你的应用程序的基础设施如何响应容量需求的增加，以确保应用程序的可用性，并在你的标准要求内保持性能。为了让你的应用程序更加可靠，你应该能够快速恢复服务并且不丢失数据。接下来，我们将讨论这个恢复过程，即**灾难恢复**（**DR**）。在进入不同的灾难恢复场景之前，让我们先了解RTO/RPO以及数据复制，因为它们是灾难恢复规划中的关键因素。
- en: Planning the RPO and RTO
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划RPO和RTO
- en: Business applications need to define service availability in the form of a **service-level
    agreement** (**SLA**). Organizations define SLAs to ensure application availability
    and reliability for their users. For example, you might say in an SLA that your
    application should be 99.9% available in a given year, or that the organization
    can tolerate downtime of 43 minutes per month, and so on. The defined SLA primarily
    drives the RPO and RTO for an application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序需要以**服务水平协议**（**SLA**）的形式定义服务可用性。组织通过定义SLA来确保应用程序的可用性和可靠性。例如，你可以在SLA中声明你的应用程序在一年内应保持99.9%的可用性，或者组织可以容忍每月43分钟的停机时间，等等。定义的SLA主要驱动应用程序的RPO和RTO。
- en: The RPO is the amount of data loss an organization can tolerate in a given period.
    For example, my application is acceptable if it loses 15 minutes’ worth of data.
    In this case, if you are processing customer orders every 15 minutes for fulfillment,
    you can tolerate reprocessing that data in case of any system failure at the order
    fulfillment application. The RPO helps to define a data backup strategy.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: RPO是指组织在特定时间段内能够容忍的数据丢失量。例如，如果我的应用程序可以接受丢失15分钟的数据，那就没有问题。在这种情况下，如果你每15分钟处理一次客户订单，那么在订单履行应用程序发生系统故障时，你可以容忍重新处理这段数据。RPO有助于定义数据备份策略。
- en: 'The RTO is about application downtime and how long the application should take
    to recover and function normally after an incidence of failure. The following
    diagram illustrates the difference between the RTO and RPO:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: RTO是指应用程序停机时间以及在故障发生后，应用程序恢复并正常运行所需的时间。下图展示了RTO和RPO之间的区别：
- en: '![A picture containing text, screenshot, font, line  Description automatically
    generated](img/B21336_08_01.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![A picture containing text, screenshot, font, line  Description automatically
    generated](img/B21336_08_01.png)'
- en: 'Figure 8.1: RTO and RPO'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：RTO和RPO
- en: In the preceding diagram, suppose the failure occurs at 10 A.M. and you took
    the last backup at 9 A.M.; in the event of a system crash, you would lose 1 hour
    of data. When you restore your system, there is an hour’s worth of data loss,
    as you have been taking data backups every hour.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，假设故障发生在早上10点，而你最后一次备份是在早上9点；如果发生系统崩溃，你将丢失1小时的数据。当你恢复系统时，数据丢失的时间为一个小时，因为你每小时进行一次数据备份。
- en: In this case, your system RPO is 1 hour, as it can tolerate living with an hour’s
    worth of data loss. In this case, the RPO indicates that the maximum data loss
    that can be tolerated is 1 hour.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你的系统 RPO 是 1 小时，因为它可以容忍最多 1 小时的数据丢失。这里的 RPO 表示最大可容忍的数据丢失为 1 小时。
- en: If your system takes 30 minutes to restore to the backup and bring up the system,
    it defines your RTO as half an hour. This means the maximum downtime that can
    be tolerated is 30 minutes. The RTO is the time it takes to restore the entire
    system after a failure that causes downtime, which is 30 minutes in this case.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的系统需要 30 分钟才能恢复到备份并启动系统，那么 RTO 就定义为半小时。这意味着可以容忍的最大停机时间是 30 分钟。RTO 是指在系统故障导致停机后，恢复整个系统所需的时间，在这个案例中是
    30 分钟。
- en: An organization typically decides on an acceptable RPO and RTO based on the
    user experience and financial or reputational impact on the business in the case
    of system unavailability. Organizations plan solutions for effective system recovery
    per the defined RTO and RPO. Over time, you should aim to reduce the RTO/RPO,
    which will directly result in business benefits as the application will have more
    uptime. You can see now how data is the key to system recovery, so let’s learn
    some methods to minimize data loss.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 组织通常会根据用户体验以及系统不可用时对业务的财务或声誉影响，决定一个可接受的 RPO（恢复点目标）和 RTO（恢复时间目标）。组织会根据定义的 RTO
    和 RPO 规划有效的系统恢复解决方案。随着时间的推移，你应该致力于减少 RTO/RPO，这将直接带来业务上的好处，因为应用程序的正常运行时间会增加。现在你可以看到数据是系统恢复的关键，因此让我们学习一些方法来最小化数据丢失。
- en: Replicating data
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据复制
- en: Data replication and snapshots are the keys to DR and making your system reliable.
    Replication creates a copy of the primary data site on the secondary site. In
    the event of primary system failure, the system can fail over to the secondary
    system and keep working reliably. This could be your file data stored in a **NAS
    drive**, **database snapshot**, or **machine image snapshot**. Sites could be
    two geo-separated, on-premises systems, two separate devices on the same premises,
    or a physically separated public cloud.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 数据复制和快照是灾难恢复（DR）和确保系统可靠性的关键。复制会在备份站点创建主数据站点的副本。若主系统发生故障，系统可以故障转移到备份系统，继续可靠地运行。这可能是你存储在**NAS
    硬盘**中的文件数据，**数据库快照**或**虚拟机镜像快照**。站点可以是两个地理位置分离的本地系统，两个位于同一场所的独立设备，或是物理分隔的公共云。
- en: Data replication is not only helpful for disaster recovery but it can also speed
    up an organization’s agility by quickly creating a new environment for testing
    and development. Data replication can be synchronous or asynchronous.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 数据复制不仅有助于灾难恢复，还能通过快速创建新的测试和开发环境，提高组织的敏捷性。数据复制可以是同步的或异步的。
- en: Synchronous versus asynchronous replication
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同步与异步复制
- en: Synchronous replication creates a data copy in real time. Real-time data replication
    helps to reduce the RPO and increase reliability in the event of a disaster. However,
    it is expensive as it requires additional resources in the primary system for
    continuous data replication.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 同步复制会实时创建数据副本。实时数据复制有助于减少 RPO，并在灾难发生时提高可靠性。然而，它的成本较高，因为它需要额外的资源来进行持续的数据复制。
- en: Asynchronous replication creates copies of data with some lag or as per the
    defined schedule. However, asynchronous replication is less expensive as it uses
    fewer resources than synchronous replication. You may choose asynchronous replication
    if your system can work with a longer RPO.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 异步复制会在某些延迟的情况下，或者根据定义的时间表创建数据副本。然而，异步复制比同步复制成本低，因为它使用的资源较少。如果你的系统可以容忍较长的 RPO，你可以选择异步复制。
- en: Regarding database technology such as Amazon RDS, synchronous replication is
    applied if we create an RDS with multiple **Availability Zone** (**AZ**) failover.
    This setup ensures that your primary database and its replica in another AZ are
    always in sync, providing HA and data durability. If the primary database encounters
    issues, the service can automatically fail over to the replica with minimal disruption.
    For read replicas, there is asynchronous replication, and you can use that to
    serve reports and read requests.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 Amazon RDS 这样的数据库技术，当我们创建一个具有多个**可用区**（**AZ**）故障转移的 RDS 时，会应用同步复制。该配置确保你的主数据库和其在另一个可用区的副本始终保持同步，从而提供高可用性（HA）和数据持久性。如果主数据库遇到问题，服务可以自动故障转移到副本，且对业务的影响最小。对于只读副本，则使用异步复制，你可以用它来处理报告和读取请求。
- en: 'As illustrated in the following architecture diagram, in synchronous replication,
    there is no lag of data replication between the master and standby instance of
    the database, while, in the case of asynchronous replication, there could be some
    lag while replicating the data between the primary and replication instance:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，在同步复制中，主数据库实例和备用数据库实例之间的数据复制没有延迟，而在异步复制中，主数据库实例和复制实例之间可能会存在一些数据复制延迟：
- en: '![A picture containing text, screenshot, line, circle  Description automatically
    generated](img/B21336_08_02.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![A picture containing text, screenshot, line, circle  Description automatically
    generated](img/B21336_08_02.png)'
- en: 'Figure 8.2: Synchronous and asynchronous data replication'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：同步与异步数据复制
- en: Let’s explore some data replication methods for the synchronous and asynchronous
    approaches.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探索一些用于同步和异步方法的数据复制方式。
- en: Replication methods
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复制方法
- en: 'The replication method is an approach to extract data from the source system
    and create a copy for data recovery purposes. Different replication methods are
    available to store a copy of data per the storage type for business process continuation.
    Replications can be implemented in the following ways:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 复制方法是一种从源系统提取数据并创建副本以用于数据恢复的方式。根据存储类型，有不同的复制方法可以存储数据副本，以便业务流程的继续。复制可以通过以下方式实现：
- en: '**Array-based replication**: In this, built-in software automatically replicates
    data. However, the source and destination storage arrays should be compatible
    and homogeneous to replicate data. A storage array contains multiple storage disks
    in a rack.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于阵列的复制**：在这种方法中，内建的软件会自动进行数据复制。然而，源存储阵列和目标存储阵列必须兼容并且是同类的才能进行数据复制。存储阵列包含多个存储磁盘，在机架中进行安装。'
- en: Large enterprises use array-based replication due to the ease of deployment
    and reduced compute power of the host system. You can choose array-based replication
    products such as HP Storage, EMC SAN Copy, and NetApp SnapMirror.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大型企业通常使用基于阵列的复制，因为它易于部署，且能减少主机系统的计算负载。你可以选择像HP Storage、EMC SAN Copy和NetApp SnapMirror这样的基于阵列的复制产品。
- en: '**Network-based replication**: This can copy data between different kinds of
    heterogeneous storage arrays. It uses an additional switch or appliance between
    incompatible storage arrays to replicate data. In network-based replication, the
    cost of replication could be higher as multiple players come into the picture.
    You can choose from networked-based replication products such as NetApp Replication
    X and EMC RecoverPoint.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于网络的复制**：这可以在不同类型的异构存储阵列之间复制数据。它使用一个附加的交换机或设备，在不兼容的存储阵列之间复制数据。在基于网络的复制中，由于涉及到多个厂商，复制的成本可能较高。你可以选择像NetApp
    Replication X和EMC RecoverPoint这样的基于网络的复制产品。'
- en: '**Host-based replication**: In this, you install a software agent on your host
    that can replicate data to any storage system, such as NAS, SAN, or DAS. You can
    use a host-based software vendor, for example, Symantec, Commvault, CA, or Vision
    Solution.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于主机的复制**：在这种方法中，你需要在主机上安装一个软件代理，该代理可以将数据复制到任何存储系统，如NAS、SAN或DAS。你可以使用基于主机的软件供应商，例如Symantec、Commvault、CA或Vision
    Solution。'
- en: This is prevalent in **small and medium-sized businesses** (**SMBs**) due to
    lower upfront costs and heterogeneous device compatibility. However, it consumes
    more computing power as the agent needs to be installed on the host operating
    system.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于较低的前期成本和异构设备兼容性，这在**中小型企业**（**SMBs**）中很常见。然而，由于需要在主机操作系统上安装代理，它会消耗更多的计算资源。
- en: '**Hypervisor-based replication**: This is VM-aware, which means copying the
    entire virtual machine from one host to another. As organizations mostly use virtual
    machines, it provides a very efficient DR approach to reduce the RTO. Hypervisor-based
    replication is highly scalable and consumes fewer resources than host-based replication.
    It can be carried out by native systems built into VMware and Microsoft Windows.
    You can choose a product such as Zerto to perform hypervisor-based replication
    or another product from various vendors.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于虚拟化管理程序的复制**：这是虚拟机感知型的，意味着将整个虚拟机从一个主机复制到另一个主机。由于组织通常使用虚拟机，因此它提供了一种非常高效的灾难恢复方法，以减少恢复时间目标（RTO）。基于虚拟化管理程序的复制具有高度的可扩展性，并且比基于主机的复制消耗更少的资源。它可以通过VMware和Microsoft
    Windows中内建的本地系统执行。你可以选择像Zerto这样的产品来执行基于虚拟化管理程序的复制，或者选择其他供应商提供的产品。'
- en: Previously, in *Chapter 2*, *Principles of Solution Architecture Design*, you
    learned about scalability and fault tolerance. In *Chapter 4*, *Solution Architecture
    Design Patterns*, you learned about various design patterns to make your architecture
    highly available. Now, you will discover multiple ways to recover your system
    from failure and make it highly reliable.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第二章*中，*解决方案架构设计原则*，你学习了可扩展性和容错性。在*第四章*中，*解决方案架构设计模式*，你学习了多种设计模式，以使你的架构高度可用。现在，你将发现多种从故障中恢复系统并使其高度可靠的方法。
- en: Planning disaster recovery
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灾难恢复规划
- en: DR is about maintaining business continuation during system failure. It’s about
    preparing the organization for any possible system downtime and the ability to
    recover from it. DR planning covers multiple dimensions, including hardware and
    software failure.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 灾难恢复（DR）是关于在系统故障期间保持业务连续性。它是关于为任何可能的系统停机做好准备，并具备从中恢复的能力。DR 规划涉及多个维度，包括硬件和软件故障。
- en: While planning for DR, always ensure you consider operational losses such as
    power outages, network outages, heating and cooling system failures, physical
    security breaches, and other incidents, such as fires, floods, or human error.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行 DR 规划时，始终确保考虑到操作损失，例如停电、网络中断、供暖和制冷系统故障、物理安全漏洞以及其他事件，如火灾、洪水或人为错误。
- en: Organizations invest effort and money in DR planning as per system criticality
    and impact. A revenue-generating application needs to be up all the time as it
    significantly impacts company image and profitability. For such an application,
    the organization will invest lots of effort in creating their infrastructure and
    training their employees for a DR situation. DR is like an insurance policy that
    you have to invest in and maintain even when you don’t utilize it as, in the case
    of unforeseen events, a DR plan will be a lifesaver for your business.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 组织根据系统的重要性和影响，在 DR 规划上投入努力和资金。一个生成收入的应用程序需要始终保持在线，因为它对公司形象和盈利能力有重大影响。对于这样的应用程序，组织会投入大量精力来创建基础设施并培训员工应对
    DR 情况。DR 就像一份保险政策，即使你没有使用它，你也必须投资并保持它，因为在不可预见的事件发生时，DR 计划将是你业务的救命稻草。
- en: 'Bases of business criticality, such as software applications, can be placed
    on a *spectrum of complexity*. There are four DR scenarios, sorted from highest
    to lowest RTO/RPO as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 基于业务关键性的基础，例如软件应用程序，可以放置在一个*复杂性谱系*上。DR 有四种场景，按照 RTO/RPO 从高到低排序如下：
- en: Backup and restore
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份与恢复
- en: Pilot light
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引导灯
- en: Warm standby
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热备份
- en: Multi-site
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多站点
- en: 'As shown in the following diagram, in DR planning, as you progress with each
    option, your RTO and RPO will reduce while the cost of implementation increases.
    You need to make a suitable trade-off between RTO/RPO requirements and cost per
    your application reliability requirements:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，在 DR 规划中，随着每个选项的进展，RTO 和 RPO 会减少，而实施成本会增加。你需要根据应用程序的可靠性要求，在 RTO/RPO 要求和成本之间做出适当的权衡：
- en: '![](img/B21336_08_03.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_08_03.png)'
- en: 'Figure 8.3: The spectrum of DR options'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3：DR 选项的范围
- en: DR strategies are highly customized to each organization’s unique needs, with
    the decision to execute a complete site failover depending on various critical
    factors. The triggering point for such drastic action varies, ranging from minor
    disruptions to major catastrophes like data center destruction. For instance,
    in the event of a significant disaster, an organization may need to quickly assess
    and prioritize critical services—often those accounting for a substantial portion
    of its revenue. These priority services may have a predefined RTO, such as a 24-hour
    window to resume operations before the financial impact becomes too severe, considering
    potential losses like fines, SLA breaches, and decreased sales. On the other hand,
    for less catastrophic but still critical service disruptions, a company might
    set automatic failover protocols for a much shorter downtime tolerance, such as
    15 minutes. In both scenarios, the decision criteria for DR involve assessing
    the business impact analysis, understanding the RTO and RPO for essential services,
    evaluating the cost of downtime against the recovery process, and ensuring compliance
    with any regulatory requirements. Additionally, technical feasibility, including
    the availability and readiness of a secondary site, plays a crucial role in determining
    the appropriate response to ensure continuity and minimize operational disruptions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: DR策略高度定制化，根据每个组织的独特需求制定，执行完整站点故障转移的决定取决于多种关键因素。触发这种 dr 联合行动的点各不相同，范围从轻微的中断到数据中心的大灾难，如破坏。例如，在重大灾难事件中，组织可能需要迅速评估和优先考虑关键服务，通常这些服务占其收入的重要部分。这些优先服务可能有预定义的
    rto，例如在金融影响变得过于严重之前，需要在 24 小时窗口内恢复运营，考虑到罚款、sla 违规和减少销售等潜在损失。另一方面，对于不那么灾难性但仍然关键的服务中断，公司可能为更短的停机时间容忍度设置自动故障转移协议，如
    15 分钟。在这两种情况下，dr 的决策标准包括评估业务影响分析，了解关键服务的 rto 和 rpo，评估停机成本与恢复过程，以及确保遵守任何法规要求。此外，技术可行性，包括备用站点的可用性和准备情况，在确定适当响应以确保连续性和最小化运营中断方面起着至关重要的作用。
- en: Let’s explore each option mentioned above in detail with the technology choices
    involved. Note that public clouds such as AWS enable you to operate each of the
    preceding DR strategies cost-effectively and efficiently.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细探讨涉及的每个选项及其涉及的技术选择。请注意，像 AWS 这样的公共云能够以成本效益和高效的方式实现上述每种 dr 策略。
- en: Backup and restore
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备份和恢复
- en: Backup and restore is the lowest cost option resulting in a higher RPO and RTO.
    This method is simple to start and highly cost-effective as you only need backup
    storage space. This backup storage could be a tape drive, hard disk drive, or
    network access drive. As your storage needs increase, adding and maintaining more
    hardware across regions could be a daunting task. One of the most cost-effective
    and straightforward options is to use the cloud as backup storage. Amazon S3 is
    one example; it provides unlimited storage capacity at a low cost and with a pay-as-you-go
    model.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 备份和恢复是成本最低的选择，导致较高的 rpo 和 rto。这种方法易于启动，成本效益高，因为您只需要备份存储空间。这种备份存储可以是磁带驱动器、硬盘驱动器或网络访问驱动器。随着存储需求的增加，跨区域添加和维护更多硬件可能是一项艰巨的任务。使用云作为备份存储的最经济和简单的选择之一。Amazon
    S3 就是一个例子；它以低成本和按需付费模式提供无限的存储容量。
- en: 'The following diagram shows a basic DR system. In this diagram, the data is
    in a traditional data center, with backups stored in AWS. AWS Import/Export or
    Snowball kinds of physical hard drives in the size range of 8 TB to 100 TB are
    used to get the data into AWS, and the information is later stored in Amazon S3:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个基本的 dr 系统。在此图中，数据位于传统数据中心，备份存储在 AWS 中。使用 AWS Import/Export 或 Snowball
    类型的物理硬盘（8 TB 到 100 TB）将数据导入 AWS，并将信息存储在 Amazon S3 中：
- en: '![](img/B21336_08_04.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_08_04.png)'
- en: 'Figure 8.4: Data backup to Amazon S3 from on-premise infrastructure'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4：从本地基础设施备份数据到 Amazon S3
- en: You can use other third-party solutions available for backup and recovery. Some
    of the most popular choices are NetApp, VMware, Tivoli, and Commvault.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用其他备份和恢复的第三方解决方案。一些最流行的选择包括 NetApp、VMware、Tivoli 和 Commvault。
- en: 'When planning for DR in a cloud environment, it’s crucial to incorporate strategies
    that leverage the strengths of various cloud providers, such as AWS, **Google
    Cloud Platform** (**GCP**), and Microsoft Azure. This approach ensures flexibility
    and resilience across different platforms. Here’s a generalized procedure applicable
    across these cloud services:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在云环境中规划灾难恢复（DR）时，必须结合利用各种云服务提供商的优势，例如 AWS、**谷歌云平台**（**GCP**）和微软 Azure。此方法确保在不同平台之间具有灵活性和韧性。以下是适用于这些云服务的通用程序：
- en: '**Backup and storage solutions**: Utilize cloud storage services to keep backups
    of your systems. For AWS, Amazon S3 can serve as a reliable backup storage solution.
    In GCP, Google Cloud Storage offers durable and highly available object storage.
    Azure’s equivalent, Azure Blob Storage, provides a similar service for storing
    large amounts of unstructured data.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份和存储解决方案**：利用云存储服务来保存系统的备份。对于 AWS，Amazon S3 可作为可靠的备份存储解决方案；在 GCP 中，Google
    Cloud Storage 提供耐用且高度可用的对象存储；Azure 的等效服务 Azure Blob Storage 提供类似的存储服务，用于存储大量非结构化数据。'
- en: '**Machine images and configuration**: Prepare machine images that include your
    operating system, applications, and configurations. AWS uses **Amazon Machine
    Images** (**AMIs**), GCP utilizes Compute Engine images, and Azure offers Azure
    Virtual Machine images. These images can be customized and pre-configured with
    necessary software and security patches, ready to be deployed in case of a disaster.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器镜像和配置**：准备包含操作系统、应用程序和配置的机器镜像。AWS 使用 **亚马逊机器镜像**（**AMIs**），GCP 使用 Compute
    Engine 镜像，Azure 提供 Azure 虚拟机镜像。这些镜像可以根据需要进行定制和预配置，包含必要的软件和安全补丁，以便在灾难发生时进行部署。'
- en: '**System restoration documentation**: Clearly document the steps required to
    restore your system from the backups across different cloud platforms. This documentation
    should include how to deploy the stored machine images and how to restore databases
    and applications from backups.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统恢复文档**：明确记录从不同云平台的备份恢复系统所需的步骤。该文档应包括如何部署存储的机器镜像，以及如何从备份恢复数据库和应用程序。'
- en: '**Traffic routing and failover procedures**: Outline the process to reroute
    traffic from the primary site to the backup site in the cloud. AWS offers Route
    53 for DNS management and traffic routing, GCP has Cloud DNS and Traffic Director,
    and Azure provides Azure Traffic Manager and DNS Zone. Understanding how to utilize
    these services for failover scenarios is essential.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流量路由和故障切换程序**：概述将流量从主站点重新路由到云中的备份站点的过程。AWS 提供 Route 53 进行 DNS 管理和流量路由，GCP
    提供 Cloud DNS 和 Traffic Director，Azure 提供 Azure Traffic Manager 和 DNS Zone。了解如何利用这些服务进行故障切换场景至关重要。'
- en: '**Deployment runbook**: Develop a comprehensive runbook that details deployment
    configurations and potential issues along with their resolutions. This runbook
    should be cloud-agnostic and adaptable to the specifics of AWS, GCP, and Azure,
    ensuring teams are prepared regardless of the cloud platform used.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署运行手册**：制定一份详细的运行手册，说明部署配置、潜在问题及其解决方案。该手册应为云无关型，并可根据 AWS、GCP 和 Azure 的具体要求进行调整，确保团队无论使用何种云平台都能做好准备。'
- en: In the preparation phase, create and store custom machine images and backups
    in the respective cloud storage solutions—S3 for AWS, Cloud Storage for GCP, and
    Blob Storage for Azure. Also, prepare snapshots of databases, storage volumes,
    and any essential files. This proactive approach ensures that, regardless of the
    cloud provider, your organization can quickly recover from a disaster with minimal
    downtime and data loss.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备阶段，创建并存储自定义机器镜像和备份到各自的云存储解决方案——AWS 的 S3、GCP 的 Cloud Storage 和 Azure 的 Blob
    Storage。同时，准备数据库快照、存储卷以及任何重要文件。通过这种主动方式，确保无论使用哪个云服务提供商，组织都能在灾难发生时迅速恢复，最小化停机时间和数据丢失。
- en: This DR pattern is easy to set up and relatively inexpensive. However, in this
    scenario, both the RPO and RTO will be high; the RTO will be the downtime until
    the system gets restored from the backup and starts functioning, while the RPO
    that is lost depends on the system’s backup frequency. Let’s explore the next
    approach, pilot light, which improves your RTOs and RPOs further.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灾难恢复模式易于设置且相对便宜。然而，在这种情况下，RPO 和 RTO 都会较高；RTO 将是系统从备份恢复并开始运行的停机时间，而 RPO 则取决于系统的备份频率。接下来我们将探讨“灯塔模式”，它能够进一步提升你的
    RTO 和 RPO。
- en: Pilot light
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 灯塔模式
- en: The pilot light approach is the next lowest-cost DR method after backup and
    restore. Like the pilot light in your gas heater, a tiny flame that is always
    on that can quickly light the entire furnace to heat the house, with this DR method,
    you need to keep the minimum number of core services up and running in different
    regions. You can spin up additional resources quickly in the event of a disaster.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 试点灯方法是继备份和恢复之后的第二低成本灾难恢复方法。就像您家中气炉的试点灯一样，一个始终亮着的小火焰，能够迅速点燃整个炉子为房子加热，采用这种灾难恢复方法时，您需要保持最少数量的核心服务在不同区域内保持运行。在发生灾难时，您可以快速启动额外的资源。
- en: You could actively replicate the database tier, then spin up instances from
    a virtual machine image or build out infrastructure using infrastructure as code,
    such as CloudFormation, Terraform, Ansible, and so on.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以主动复制数据库层，然后从虚拟机镜像启动实例，或者使用基础设施即代码（如 CloudFormation、Terraform、Ansible 等）构建基础设施。
- en: 'The following diagram shows a pilot light DR pattern. In this case, the database
    is replicated into AWS, with Amazon EC2 instances of the web servers and application
    servers ready to go but not currently running:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了试点灯灾难恢复模式。在这种情况下，数据库已复制到 AWS，Web 服务器和应用程序服务器的 Amazon EC2 实例已准备好，但当前未运行：
- en: '![](img/B21336_08_05.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_08_05.png)'
- en: 'Figure 8.5: The pilot light data replication to DR site scenario'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5：试点灯数据复制到灾难恢复站点场景
- en: A pilot light scenario is similar to backup and restore, where you take a backup
    of most of the components and store them passively. However, you maintain active
    instances with a lower capacity for critical components such as a database or
    authentication server, which can take a significant time to spin up. You need
    to automatically start all required resources, including network settings, load
    balancers, and virtual machine images, as needed. As the core pieces are already
    running, recovery time is faster than the backup and restore method. The pilot
    light method is very cost-effective as you are running only some of the resources
    at full capacity.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 试点灯场景类似于备份和恢复，您将大部分组件进行备份并被动存储。然而，您为关键组件（如数据库或认证服务器）维护低容量的活动实例，这些组件可能需要较长时间才能启动。您需要根据需要自动启动所有必需的资源，包括网络设置、负载均衡器和虚拟机镜像。由于核心组件已经在运行，因此恢复时间比备份和恢复方法更快。试点灯方法非常具有成本效益，因为您仅以完全容量运行部分资源。
- en: You need to enable the replication of all critical data to the DR site—in this
    case, the AWS cloud. You can use the AWS Data Migration Service to replicate data
    between on-premises and cloud databases. For file-based data, you can use Amazon
    File Gateway.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要启用所有关键数据到灾难恢复站点（在本例中为 AWS 云）的复制。您可以使用 AWS 数据迁移服务在本地和云数据库之间复制数据。对于基于文件的数据，您可以使用
    Amazon File Gateway。
- en: Many other third-party-managed tools provide data replication solutions efficiently,
    such as Attunity, Quest, Syncsort, Alooma, and JumpMind.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他第三方管理工具提供高效的数据复制解决方案，例如 Attunity、Quest、Syncsort、Alooma 和 JumpMind。
- en: 'If the primary system fails, as shown in the following diagram, you can start
    up the Amazon EC2 instances with the latest copy of the data. Then, you redirect
    Amazon Route 53 to point to the new web server:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主系统发生故障，如下图所示，您可以启动带有最新数据副本的 Amazon EC2 实例。然后，您可以将 Amazon Route 53 重定向到新的
    Web 服务器：
- en: '![](img/B21336_08_06.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_08_06.png)'
- en: 'Figure 8.6: Recovery in the pilot light method'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6：试点灯方法中的恢复
- en: 'For the pilot light method, in the case of a disaster, you need to perform
    the following steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于试点灯方法，在灾难发生时，您需要执行以下步骤：
- en: Start the application and web servers that were in standby mode. Furthermore,
    scale out the application servers with horizontal scaling using a load balancer.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动处于待命模式的应用程序和 Web 服务器。此外，通过使用负载均衡器进行水平扩展，扩展应用程序服务器。
- en: Vertically scale up the database instance that was running at low capacity.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垂直扩展运行在低容量的数据库实例。
- en: Update the DNS record in your router to point to the new site.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新路由器中的 DNS 记录，指向新站点。
- en: In the pilot light method, you bring up the resources around the replicated
    core dataset automatically and scale the system as required to handle the current
    traffic. A pilot light DR pattern is relatively easy to set up and inexpensive.
    However, in this scenario, the RTO takes longer to automatically bring up a replacement
    system, while the RPO largely depends on the replication type. Let’s explore the
    next approach, warm standby, which further improves your RTOs and RPOs.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在引导灯方法中，你会自动启动围绕复制的核心数据集的资源，并根据需要扩展系统以处理当前流量。引导灯灾难恢复模式相对容易设置且成本低。然而，在这种情况下，RTO（恢复时间目标）需要更长的时间来自动启动替代系统，而
    RPO（恢复点目标）则主要取决于复制类型。让我们来探讨下一个方法，热备用，它进一步改善了 RTO 和 RPO。
- en: Warm standby
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 热备用
- en: Warm standby, or fully working low-capacity standby, represents an advanced
    approach to DR by leveraging the cloud’s flexibility to deliver a cost-effective
    DR solution. This method enhances the basic pilot light strategy by maintaining
    a subset of your environment’s services in a continuously running state, albeit
    at a lower capacity than your full production environment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 热备用，或完全运行的低容量备用，代表了一种通过利用云的灵活性提供成本效益灾难恢复解决方案的先进方法。这种方法通过保持环境服务的子集处于持续运行状态，尽管容量低于完整生产环境，从而增强了基础引导灯策略。
- en: The key advantage of a warm standby approach is its balance between cost savings
    and readiness for recovery. By having essential services already up and running,
    albeit on a smaller scale, the recovery time in the event of a disaster is significantly
    reduced compared to cold or pilot light strategies where resources need to be
    provisioned or scaled up during the recovery process.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 热备用方法的关键优势在于它在成本节约和恢复准备之间取得了平衡。通过让必要的服务已经启动并运行，尽管规模较小，但与冷备用或引导灯策略相比，灾难发生时的恢复时间显著缩短，因为冷备用或引导灯策略在恢复过程中需要配置或扩展资源。
- en: Organizations can tailor their warm standby environment to handle a specific
    percentage of their production traffic, such as 20%, 30%, or 50%, depending on
    their recovery objectives and budget considerations. This flexibility allows for
    a customized DR solution that aligns with business needs and risk tolerance levels.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 组织可以根据其恢复目标和预算考虑，将热备用环境量身定制为处理其生产流量的特定百分比，如 20%、30% 或 50%。这种灵活性使得灾难恢复解决方案能够根据业务需求和风险承受能力水平进行定制。
- en: Furthermore, the warm standby environment isn’t just limited to DR scenarios;
    it can also serve dual purposes by providing a platform for non-production uses
    such as testing, staging, or development work. This dual use of the warm standby
    environment maximizes the value of the DR investment by utilizing the infrastructure
    for additional purposes beyond mere standby readiness, thereby optimizing resource
    utilization and cost efficiency.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，热备用环境不仅仅局限于灾难恢复（DR）场景；它还可以通过提供一个非生产环境的平台，如测试、预发布或开发工作，发挥双重作用。这种热备用环境的双重使用通过将基础设施用于除单纯备用外的其他目的，最大化了灾难恢复投资的价值，从而优化了资源利用率和成本效益。
- en: 'The following diagram depicts two systems running in the warm standby method—the
    central system and a low-capacity system—on an AWS cloud. You can use a router
    such as Amazon Route 53 to distribute requests between the central system and
    the cloud system:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了两种系统在热备用方法下运行——中央系统和低容量系统——在 AWS 云上。你可以使用像 Amazon Route 53 这样的路由器来分配请求到中央系统和云系统：
- en: '![](img/B21336_08_07.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_08_07.png)'
- en: 'Figure 8.7: Warm standby scenario running an active-active workload with a
    low capacity'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7：热备用场景下，运行一个低容量的活动-活动负载
- en: When it comes to databases, warm standby takes a similar approach to pilot light,
    where data is continuously replicating from the main site to the DR site. However,
    in warm standby, you run all necessary components 24/7, but they do not scale
    up for production traffic.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库方面，热备用采取与引导灯（pilot light）类似的方法，即数据不断从主站点复制到灾难恢复站点。然而，在热备用中，你会全天候运行所有必要的组件，但它们并不会扩展以应对生产流量。
- en: Often, the organization chooses a warm standby strategy for more critical workloads,
    so you need to ensure there are no issues in the DR site using continuous testing.
    The best approach to take is A/B testing, where the leading site will handle more
    significant traffic. A small amount of traffic, approximately 1% to 5%, is routed
    to the DR site. This will make sure that the DR site is able to serve traffic
    when the primary site is down. Also, make sure to patch and update the software
    on the DR site regularly to keep in sync with the production environment.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，组织会选择热备份策略来处理更关键的工作负载，因此你需要通过持续测试确保灾难恢复站点没有问题。最佳做法是A/B测试，其中主站点将处理更多的流量。约1%到5%的流量将被路由到灾难恢复站点。这将确保在主站点发生故障时，灾难恢复站点能够提供流量服务。同时，确保定期修补和更新灾难恢复站点上的软件，以保持与生产环境的同步。
- en: 'As shown in the following diagram, during the unavailability of the primary
    environment, your router switches over to the secondary system, which is designed
    to automatically scale its capacity up in the event of a failover from the primary
    system:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，在主环境不可用时，路由器会切换到次级系统，次级系统设计为在主系统发生故障时自动扩展其容量：
- en: '![A picture containing text, screenshot, logo, font  Description automatically
    generated](img/B21336_08_08.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![一张包含文字、截图、标志、字体的图片，自动生成的描述](img/B21336_08_08.png)'
- en: 'Figure 8.8: Recovery phase in the warm standby scenario'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8：热备份场景中的恢复阶段
- en: 'Suppose a failure occurs in the primary site. In that case, you can take the
    following approach:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 假设主站点发生故障，在这种情况下，你可以采取以下方法：
- en: Perform an immediate transfer of the critical production workload traffic to
    the DR site by increasing traffic routing from 5% to 100% in the secondary site.
    For example, in a banking business, you must first bring up your customer-facing
    website to keep it functioning.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将流量从5%增加到100%，立即将关键生产工作负载的流量转移到灾难恢复站点。例如，在银行业务中，你必须首先启动面向客户的网站以保持其正常运行。
- en: Scale up the environment that was running on low capacity. You can apply vertical
    scaling for databases and horizontal scaling for servers.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展低容量运行的环境。你可以对数据库进行垂直扩展，对服务器进行水平扩展。
- en: As you scale up the environment, other non-critical workloads working in the
    background can now be transferred, such as warehouse management and shipping.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你扩展环境时，其他在后台运行的非关键工作负载也可以转移，例如仓库管理和发货。
- en: Tools you can use for warm standby such as Terraform, an open-source tool developed
    by HashiCorp, is renowned for its ability to build, change, and version infrastructure
    in a safe and efficient manner across various cloud providers. Alongside, Veeam
    stands out by offering comprehensive backup and replication solutions that cater
    to cloud, virtual, and physical environments, ensuring robust support for multi-cloud
    strategies. Zerto further complements these capabilities by providing disaster
    recovery, backup, and workload mobility software tailored for virtualized infrastructures
    and cloud settings.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于热备份的工具包括Terraform，这是一个由HashiCorp开发的开源工具，因其能够在各种云提供商之间以安全高效的方式构建、修改和版本化基础设施而闻名。与此同时，Veeam凭借其提供的全面备份和复制解决方案，在云环境、虚拟环境和物理环境中脱颖而出，确保对多云策略的强大支持。Zerto进一步补充了这些功能，提供了为虚拟化基础设施和云环境量身定制的灾难恢复、备份和工作负载迁移软件。
- en: A warm standby DR pattern is relatively complex to set up and expensive. The
    RTO is much quicker than the pilot light for the critical workload. However, for
    non-critical workloads, it depends on how quickly you can scale up the system,
    while the RPO largely depends on the replication type. Let’s explore the next
    approach, multi-site, which provides near-zero RTOs and RPOs.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 热备份灾难恢复（DR）模式相对较复杂且成本较高。关键工作负载的恢复时间目标（RTO）比备用灯模式要快得多。然而，对于非关键工作负载，它取决于你能够多快地扩展系统，而恢复点目标（RPO）则主要取决于复制类型。接下来我们将探讨下一种方法——多站点，它提供近乎零的RTO和RPO。
- en: Multi-site
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多站点
- en: Lastly, the multi-site strategy, also known as a hot standby, helps you achieve
    a near-zero RTO and RPO. With this method, your DR site is a replica of the primary
    site with continuous data replication and traffic flow between sites. It is known
    as multi-site architecture due to the automated load balancing of traffic across
    regions or between on-premises and the cloud.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，多站点策略，也称为热备份，帮助你实现接近零的恢复时间目标（RTO）和恢复点目标（RPO）。通过这种方法，你的灾难恢复站点是主站点的副本，且站点之间进行持续的数据复制和流量流动。由于自动化的流量负载均衡，跨区域或本地与云端之间的流量管理，这种方法被称为多站点架构。
- en: 'As shown in the following diagram, multi-site is the next level of DR, having
    a fully functional system running in the cloud at the same time as on-premises
    systems:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，多站点是灾难恢复的下一个层级，具有在云端与本地系统同时运行的完全功能系统：
- en: '![](img/B21336_08_09.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_08_09.png)'
- en: 'Figure 8.9: Multi-site scenario running an active-active workload with full
    capacity in AWS'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9：在 AWS 上运行全负载的活动-活动工作负载的多站点场景
- en: The advantage of the multi-site approach is that it is ready to take a full
    production load at any moment. It’s similar to warm standby but runs at full capacity
    on the DR site. If the primary site goes down, all traffic can immediately fail
    over to the DR site, which is an improvement over the loss in performance and
    time when switching over and scaling up the DR site in the case of a warm standby.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 多站点方法的优势在于它随时准备承载完全的生产负载。它类似于温备份，但灾难恢复站点在全负载运行。如果主站点出现故障，所有流量可以立即切换到灾难恢复站点，这相比温备份下切换和扩展灾难恢复站点时的性能损失和时间延迟要好得多。
- en: Implementing a multi-site strategy for DR requires a selection of advanced tools
    and technologies designed to automate and manage the seamless failover process,
    ensuring operational continuity with minimal performance loss. Cloud management
    platforms like VMware’s vRealize Automation and Microsoft Azure Site Recovery
    play a crucial role in orchestrating the replication of virtual machines and data,
    facilitating an immediate switch to the DR site when necessary. Load balancers
    and global traffic managers, including solutions such as F5 BIG-IP and AWS Route
    53, dynamically direct traffic based on site availability and load, ensuring the
    DR site can handle incoming requests instantly.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 实施多站点灾难恢复策略需要选择一些先进的工具和技术，这些工具和技术旨在自动化和管理无缝的故障转移过程，从而确保在最小性能损失的情况下保持操作连续性。像
    VMware 的 vRealize Automation 和 Microsoft Azure Site Recovery 等云管理平台，在协调虚拟机和数据的复制方面起着至关重要的作用，确保在必要时可以立即切换到灾难恢复站点。负载均衡器和全局流量管理器（包括
    F5 BIG-IP 和 AWS Route 53 等解决方案）会根据站点的可用性和负载动态地引导流量，确保灾难恢复站点能够瞬间处理传入的请求。
- en: '**Infrastructure-as-Code** (**IaC**) tools like Terraform and AWS CloudFormation
    enable rapid provisioning and scaling of necessary infrastructure, allowing the
    DR site to mirror the production environment’s capabilities swiftly. Additionally,
    network performance monitoring tools like SolarWinds and Nagios offer real-time
    insights into network health, aiding in the prompt detection of issues that could
    necessitate a failover.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即代码**（**IaC**）工具如 Terraform 和 AWS CloudFormation 使得必要的基础设施能够快速配置和扩展，从而使灾难恢复站点能够迅速复制生产环境的能力。此外，网络性能监控工具如
    SolarWinds 和 Nagios 提供实时的网络健康状况洞察，帮助快速检测可能需要故障转移的问题。'
- en: A multi-site DR pattern is the most expensive as it requires redundancy to be
    built for all components; however, for businesses that require HA and cannot afford
    any downtime, such as financial institutions, healthcare services, and e-commerce
    platforms, the investment in a multi-site setup can be justified by the high cost
    of potential downtime.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 多站点灾难恢复模式是最昂贵的，因为它要求为所有组件建立冗余；然而，对于那些需要高可用性（HA）且不能承受任何停机时间的企业，如金融机构、医疗服务和电子商务平台，投资多站点架构是合理的，因为潜在的停机成本非常高。
- en: The RTO is much quicker for all workloads in this scenario, while the RPO largely
    depends upon the replication type.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，所有工作负载的恢复时间目标（RTO）都要快得多，而恢复点目标（RPO）则主要取决于复制类型。
- en: Let’s explore some best practices around DR to make sure your system is running
    reliably.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨一些关于灾难恢复的最佳实践，确保你的系统可靠运行。
- en: Applying best practices for DR
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用灾难恢复的最佳实践
- en: 'As you start thinking about DR, here are some important considerations:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始考虑灾难恢复（DR）时，以下是一些重要的注意事项：
- en: '**Start small and build as needed**: Make sure you first bring up the critical
    workloads with the most business impact and build upon this to bring up less critical
    loads.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从小做起，按需扩展**：确保首先启动最关键的工作负载，这些工作负载对业务影响最大，然后再逐步扩展，启动那些影响较小的负载。'
- en: '**Apply the data backup life cycle**: Take backups of everything, whether it
    is your file server, machine image, or databases. Keeping lots of active backups
    could increase costs, however, so make sure to apply a life cycle policy to archive
    and delete data as per your business needs. For example, you can choose to keep
    a 90-day active backup and, after that period, store it in low-cost archive storage
    such as a tape drive or Amazon Glacier. After 1 or 2 years, you may want to set
    a life cycle policy to delete the data. Compliance with standards such as PCI-DSS
    may require you to store data for seven years, and in that case, you must opt
    for archival data storage to reduce costs.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用数据备份生命周期**：备份一切，无论是文件服务器、机器镜像还是数据库。保持大量的活动备份可能会增加成本，但一定要应用生命周期策略，根据你的业务需求归档并删除数据。例如，你可以选择保留90天的活动备份，在此之后将其存储在低成本的归档存储中，如磁带驱动器或Amazon
    Glacier。1到2年后，你可能想设定生命周期策略来删除数据。遵守像PCI-DSS这样的标准可能要求你存储数据7年，在这种情况下，你必须选择归档数据存储以减少成本。'
- en: '**Check your software licenses**: Managing software licenses can be a daunting
    task, especially in the current microservice architecture environment, where you
    have several services running independently on their virtual machines and databases.
    Software licenses could be associated with several installations, a number of
    CPUs, and several users. It becomes tricky when you go for scaling. It’s important
    to monitor and check these; you need to have enough licenses to support your scaling
    needs. Also ensure you don’t buy excessive licenses, which you may not utilize
    and will cost you more money. Overall, make sure to manage your license inventory,
    like your infrastructure or software.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查你的软件许可证**：管理软件许可证可能是一项艰巨的任务，尤其是在当前微服务架构环境中，你有多个独立运行的服务，每个服务都运行在虚拟机和数据库上。软件许可证可能与多个安装、多个CPU和多个用户相关联。当你进行扩展时，这会变得更加复杂。监控并检查这些许可证很重要；你需要确保有足够的许可证来支持扩展需求。同时确保不要购买过多的许可证，这些许可证可能不会被利用，反而会浪费更多的资金。总的来说，确保像管理基础设施或软件一样管理你的许可证库存。'
- en: '**Plan your scaling**: For horizontal scaling, add more instances with software
    installed, and in vertical scaling, add more CPU or memory. You need to understand
    your software licensing agreement and ensure you have enough licenses to fulfill
    system scaling.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规划你的扩展**：对于水平扩展，添加更多安装了软件的实例；对于垂直扩展，添加更多的CPU或内存。你需要了解你的软件许可协议，并确保你有足够的许可证来支持系统的扩展。'
- en: '**Test your solutions often**: DR sites are created for rare DR events and
    are often overlooked. You need to ensure your DR solution is working as expected
    to achieve high reliability in case of an incident. Compromising a defined SLA
    can violate contractual obligations and cause a loss of money and customer trust.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**经常测试你的解决方案**：灾难恢复（DR）站点是为罕见的灾难恢复事件创建的，常常被忽视。你需要确保你的灾难恢复解决方案能够按预期工作，以便在发生事故时实现高可靠性。妥协已定义的服务水平协议（SLA）可能会违反合同义务，并导致金钱和客户信任的流失。'
- en: '**Play gameday**: One way to test your solution often is by playing *gameday*.
    To play gameday, you choose a day when the production workload is small and gather
    all the team responsible for maintaining the production environment. You can simulate
    a disaster event by bringing down a portion of the production environment and
    letting the team handle the situation to keep the environment up and running.
    These events ensure you have working backups, snapshots, and machine images to
    handle disaster events.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行演练**：经常测试解决方案的一种方法是进行*演练*。进行演练时，你选择一个生产工作负载较小的日子，召集所有负责维护生产环境的团队成员。你可以通过关闭部分生产环境来模拟灾难事件，让团队处理情况以保持环境的正常运行。这些事件确保你有可用的备份、快照和机器镜像来应对灾难事件。'
- en: '**Continuously monitor resources**: Put a monitoring system in place to ensure
    automated failover to the DR site happens if an event occurs. Monitoring helps
    you to take a proactive approach and monitoring capacity saves you from resource
    saturation issues, which can impact your application’s reliability.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续监控资源**：建立监控系统，确保在发生事件时，能够自动切换到灾难恢复站点。监控帮助你采取主动的方法，监控容量可以避免资源饱和问题，这些问题可能会影响应用程序的可靠性。'
- en: Creating a DR plan and performing regular recovery validation helps to achieve
    the desired application reliability. Let’s learn more about improving reliability
    through the use of the public cloud next.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 创建灾难恢复计划并定期进行恢复验证，有助于实现预期的应用程序可靠性。接下来，让我们了解如何通过使用公共云来提高可靠性。
- en: Improving reliability with the cloud
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过云提高可靠性
- en: In previous sections, you have seen examples of a cloud workload for the DR
    site. Many organizations have started to choose the cloud for DR sites to improve
    application reliability. Also, cloud marketplaces from major providers like AWS,
    Azure, and GCP offer a wide range of third-party solutions that can be integrated
    into DR planning and execution. These offerings typically include tools for backup
    and replication, orchestration, monitoring, and security.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，您已经看到灾难恢复（DR）站点的云工作负载示例。许多组织已经开始选择云作为灾难恢复站点，以提高应用程序的可靠性。此外，像AWS、Azure和GCP等主要云服务提供商的云市场提供了各种第三方解决方案，可以集成到灾难恢复规划和执行中。这些服务通常包括备份和复制、编排、监控和安全工具。
- en: The cloud provides data centers that are available across geographic locations
    at your fingertips. You can create a reliable site on another continent without
    any hassle. With the cloud, you can easily create and track the availability of
    your infrastructure, such as backups and machine images.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 云提供了遍布地理位置的数据中心，随时触手可及。您可以轻松地在另一个大洲创建一个可靠的站点，毫不费力。借助云，您可以轻松创建和跟踪基础设施的可用性，例如备份和机器镜像。
- en: In the cloud, easy monitoring and tracking help make sure your application is
    highly available as per the business-defined SLA. The cloud gives you fine control
    over IT resources, cost, and handling trade-offs for RPO/RTO requirements.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中，轻松的监控和跟踪帮助确保您的应用程序根据业务定义的SLA保持高可用性。云为您提供对IT资源、成本的精细控制，以及在RPO/RTO需求方面的权衡处理能力。
- en: The cloud provides easy and effective testing of your DR plan. You inherit features
    available in the cloud, such as the logs and metrics for various cloud services.
    Built-in metrics are a powerful tool for gaining insight into the health of your
    system.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 云提供了轻松有效地测试您的灾难恢复计划的功能。您可以继承云中可用的特性，如各种云服务的日志和指标。内建的指标是深入了解系统健康状况的强大工具。
- en: With all available monitoring capabilities, you can notify the team of any threshold
    breach or trigger automation for system self-healing. For example, AWS provides
    CloudWatch, which collects logs and generates metrics while monitoring different
    applications and infrastructure components. It can trigger various automation
    to scale your application.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过所有可用的监控功能，您可以通知团队任何阈值突破，或触发自动化以实现系统自愈。例如，AWS提供了CloudWatch，它收集日志并生成指标，同时监控不同的应用程序和基础设施组件。它可以触发各种自动化来扩展您的应用程序。
- en: The cloud provides a built-in change management mechanism that helps to track
    provisioned resources. Cloud providers extend out-of-the-box capabilities to ensure
    applications and operating environments are running known software and can be
    patched or replaced in a controlled manner. For example, AWS provides AWS Systems
    Manager, which has the capability of patching and updating cloud servers in bulk.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 云提供了一个内建的变更管理机制，有助于跟踪配置的资源。云服务提供商扩展了开箱即用的功能，以确保应用程序和操作环境运行的是已知软件，并能够以受控方式进行修补或替换。例如，AWS提供了AWS
    Systems Manager，它具备批量修补和更新云服务器的功能。
- en: With the cloud, you can design a scalable system, providing flexibility to add
    and remove resources automatically to match the current demand. Data is one of
    the essential aspects of any application’s reliability. The cloud offers out-of-the-box
    data backup and replication tools, including machine images, databases, and files.
    In a disaster, all your data is backed up and appropriately saved in the cloud,
    which helps the system recover quickly.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用云，您可以设计一个可扩展的系统，提供灵活性，自动添加和删除资源以匹配当前需求。数据是任何应用程序可靠性的重要组成部分。云提供了开箱即用的数据备份和复制工具，包括机器镜像、数据库和文件。在灾难发生时，您的所有数据都被备份并妥善保存在云中，这有助于系统快速恢复。
- en: Regular interaction across the application development and operation team will
    help address and prevent known issues and design gaps, thereby reducing the risk
    of failures and outages. Continually architect your applications to achieve resiliency
    and distribute them to handle any outages.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序开发与运营团队之间的定期互动将有助于解决和防止已知问题以及设计漏洞，从而减少故障和停机的风险。不断架构您的应用程序，以实现弹性并分布式处理任何停机。
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about various principles to make your system reliable.
    These principles include making your system self-healing by applying automation
    rules and reducing the impact in the event of failure by designing a distributed
    system where the workload spans multiple resources.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了使系统可靠的各种原则。这些原则包括通过应用自动化规则使系统自我修复，并通过设计分布式系统来减少故障时的影响，在该系统中，工作负载跨多个资源分布。
- en: Overall system reliability heavily depends on your system’s availability and
    ability to recover from disaster events. You learned about synchronous and asynchronous
    data replication types and how they affect your system reliability. You learned
    about various data replication methods, including array-based, network-based,
    host-based, and hypervisor-based methods. Each replication method has its pros
    and cons. There are multiple vendors’ products available to achieve the desired
    data replication.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 整体系统的可靠性在很大程度上依赖于系统的可用性以及从灾难事件中恢复的能力。你已经学习了同步和异步数据复制类型，以及它们如何影响系统的可靠性。你还学习了各种数据复制方法，包括基于阵列、基于网络、基于主机和基于虚拟机监控程序的方法。每种复制方法都有其优缺点。市面上有多家供应商提供实现所需数据复制的产品。
- en: You learned about various disaster planning methods depending on the organization’s
    needs and the RTO and RPO. You learned about the backup and restore method, which
    has high RTO and RPO and is easy to implement. The pilot light method improves
    your RTO/RPO by keeping critical resources, such as databases, active in the DR
    site. The warm standby and multi-site methods maintain an active copy of a DR
    site’s workload and increase application reliability by lowering the system’s
    RTO/RTO and the system’s complexity and costs.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你了解了根据组织需求以及 RTO 和 RPO 来选择不同的灾难规划方法。你学习了备份和恢复方法，它具有较高的 RTO 和 RPO，且易于实施。引导灯方法通过在灾备站点保持关键资源（如数据库）的活跃，来提高你的
    RTO/RPO。热备份和多站点方法通过保持灾备站点工作负载的活跃副本，降低系统的 RTO/RPO，并通过降低系统复杂性和成本来提高应用程序的可靠性。
- en: You learned about utilizing the cloud’s built-in capability to ensure application
    reliability.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解了如何利用云平台的内建功能来确保应用程序的可靠性。
- en: Solution design and launch may only happen sometimes, but operational maintenance
    is an everyday task. In the next chapter, you will learn about the alerting and
    monitoring aspects of solution architecture, including various design principles
    and technology choices to make your application operationally efficient and achieve
    operational excellence.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案的设计和发布可能只是偶尔发生，但运营维护却是每日任务。在下一章中，你将学习解决方案架构中的警报和监控方面内容，包括各种设计原则和技术选择，以提升应用程序的运营效率，并实现卓越的运营。
- en: Join our book’s Discord space
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们书籍的 Discord 空间
- en: 'Join the book’s Discord workspace to ask questions and interact with the authors
    and other solution architecture professionals: [https://packt.link/SAHandbook](Chapter_8.xhtml)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 加入本书的 Discord 工作区，向作者和其他解决方案架构师提问并互动：[https://packt.link/SAHandbook](Chapter_8.xhtml)
- en: '![](img/QR_Code930022060277868125.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code930022060277868125.png)'
