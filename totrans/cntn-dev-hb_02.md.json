["```\nFROM debian:stable-slim\nRUN apt-get update -qq && apt-get install -qq package1 package2\nCOPY . /myapp\nRUN make /myapp\nCMD python /myapp/app.py\nEXPOSE 5000\n```", "```\n$ docker image pull debian:stable-slim\nstable-slim: Pulling from library/debian\nde661c304c1d: Pull complete\nDigest: sha256:f711bda490b4e5803ee7f634483c4e6fa7dae54102654f2c231ca58eb233a2f1\nStatus: Downloaded newer image for debian:stable-slim\ndocker.io/library/debian:stable-slim\n```", "```\n$ docker image ls --no-trunc\nREPOSITORY   TAG           IMAGE ID                                                                  CREATED      SIZE\ndebian       stable-slim   sha256:4ea5047878b3bb91d62ac9a99cdcf9e53f4958b01000d85f541004ba587c1cb1   9 days ago   80.5MB\n$ docker image inspect 4ea5047878b3bb91d62ac9a99cdcf9e53f4958b01000d85f541004ba587c1cb1 |grep -A1 -i repodigest\n        \"RepoDigests\": [\n            \"debian@sha256:f711bda490b4e5803ee7f634483c4e6fa7dae54102654f2c231ca58eb233a2f1\"\n```", "```\nFROM debian:stable-slim\nRUN apt-get update -qq && apt-get install -qq curl\n```", "```\n$ docker login --username <YOUR_USERNAME>\nPassword:\nLogin Succeeded\nLogging in with your password grants your terminal complete access to your account.\nFor better security, log in with a limited-privilege personal access token. Learn more at https://docs.docker.com/go/access-tokens/\n```", "```\nFROM scratch\nADD hello /\nCMD [\"/hello\"]\n```", "```\n$ docker image build –build-arg myvariable=myvalue –tag mynewimage:mytag context-directory –file myDockerfile\n```", "```\nARG CODE_VERSION=dev\nFROM base:${CODE_VERSION}\nCMD /code/run-app\n```", "```\nRUN apt-get update –qq \\\n&& apt-get install --no-install-recommends --no-install-suggests –qq \\\ncurl \\\nca-certificates \\\n&& apt-get clean\n```", "```\n$ docker image list\nREPOSITORY     TAG           IMAGE ID       CREATED        SIZE\nexample1       0.0           f7bba7eac35e   22 hours ago   9.51MB\npostfix        test          a8768bd1ec8f   2 days ago     169MB\nfour           latest        3de85feddb15   2 days ago     105MB\nthree          latest        55f07527310e   2 days ago     105MB\nfrjaraur/two   180223        8e64333d6033   2 days ago     105MB\nfrjaraur/one   180223        331ed31f8816   2 days ago     105MB\none            latest        331ed31f8816   2 days ago     105MB\n<none>         <none>        7ed6e7202eca   About a minute ago 72.8MB\nalpine         latest        b2aa39c304c2   10 days ago    7.05MB\ndebian         stable-slim   4ea5047878b3   12 days ago    80.5MB\n```", "```\n    $ docker image list --filter label=environment\n    REPOSITORY     TAG           IMAGE ID       CREATED        SIZE\n    frjaraur/two   180223        8e64333d6033   2 days ago     105MB\n    frjaraur/one   180223        331ed31f8816   2 days ago     105MB\n    $ docker image list --filter label=environment=production\n    REPOSITORY     TAG           IMAGE ID       CREATED        SIZE\n    --format works with *Go templates* to manipulate output for listing (and logs from containers). The container runtime and clients work with *JSON* streams; hence, using these templates will help us interpret objects’ data. For example, we can use table to obtain a table-like output, with the keys we need to review:\n\n    ```", "```\n\n    ```", "```\n    FROM alpine:3.17.2 as git # First stage, install git on small Alpine\n    RUN apk add git\n    FROM git as fetcher # Second stage, fetching repository\n    WORKDIR /src\n    RUN git clone https://gitlab.com/myrepo/mycode.git .\n    FROM nginx: 1.22.1-alpine as webserver\n    COPY --from=fetcher /src/html/ /usr/share/nginx/html\n    ```", "```\n    FROM python: 3.9.16-alpine3.17\n    COPY mycript.sh .\n    RUN --mount=type=secret,id=mysecret ./myscript.sh\n    ```", "```\n    $ SECRETVALUE=\"mysecretpass\" docker image buildx build --secret id= SECRETVALUE <CONTEXT>\n    ```", "```\n    FROM docker.io/node:18.14.2-alpine3.16\n    ENV APPDIR /APP\n    WORKDIR ${APPDIR}\n    COPY package.json package.json\n    RUN apk add --no-cache --update curl \\\n    && rm -rf /var/cache/apk \\\n    && npm install\n    COPY app.js app.js\n    COPY index.xhtml index.xhtml\n    CMD [\"node\",\"app.js\",\"3000\"]\n    EXPOSE 3000\n    ```", "```\n     $ time nerdctl build -t ch2lab1:one \\\n      --label nodejs=18.14.2 \\\n      --label=base=alpine3.16 \\\n      nodejs  --progress plain\n    #1 [internal] load .dockerignore\n    #1 transferring context: 2B done\n    #1 DONE 0.0s\n    #2 [internal] load build definition from Dockerfile\n    #2 transferring dockerfile: 311B done\n    #2 DONE 0.0s\n    #3 [internal] load metadata for docker.io/library/node:18.14.2-alpine3.16\n    #3 DONE 1.1s\n    #4 [internal] load build context\n    #4 transferring context: 90B done\n    #4 DONE 0.0s\n    ```", "```\n    #5 [1/6] FROM docker.io/library/node:18.14.2-alpine3.16@sha256:84b677af19caffafe781722d4bf42142ad765ac4233960e18bc526ce036306fe\n    #5 resolve docker.io/library/node:18.14.2-alpine3.16@sha256:84b677af19caffafe781722d4bf42142ad765ac4233960e18bc526ce036306fe 0.0s done\n    #5 DONE 0.1s\n    #5 [1/6] FROM docker.io/library/node:18.14.2-alpine3.16@sha256:84b677af19caffafe781722d4bf42142ad765ac4233960e18bc526ce036306fe\n    #5 sha256:aef46d6998490e32dcd27364100923d0c33b16165d2ee39c307b6d5b74e7a184 0B / 2.35MB 0.2s\n    ```", "```\n    #8 [4/6] RUN apk add --no-cache --update curl && rm -rf /var/cache/apk && npm install\n    #0 0.115 fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/main/x86_64/APKINDEX.tar.gz\n    #8 0.273 fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/community/x86_64/APKINDEX.tar.gz\n    #8 0.503 (1/5) Installing ca-certificates (20220614-r0)\n    ...\n    #8 0.601 (5/5) Installing curl (7.83.1-r6)\n    #8 0.618 Executing busybox-1.35.0-r17.trigger\n    #8 0.620 Executing ca-certificates-20220614-r0.trigger\n    #8 0.637 OK: 10 MiB in 21 packages\n    #8 3.247\n    #8 3.247 added 3 packages, and audited 4 packages in 2s\n    #8 3.247\n    #8 3.247 found 0 vulnerabilities\n    #8 3.248 npm notice\n    #8 3.248 npm notice New patch version of npm available! 9.5.0 -> 9.5.1\n    #8 3.248 npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.5.1>\n    #8 3.248 npm notice Run `npm install -g npm@9.5.1` to update!\n    #8 3.248 npm notice\n    #8 DONE 3.3s\n    Once all execution lines are concluded, a tar file is created with the layer where changes were made:\n    #11 sending tarball\n    #11 sending tarball 0.6s done\n    #11 DONE 0.8s\n    time command before nerdctl build:\n    ```", "```\n    real    0m12.588s\n    user    0m0.009s\n    nodejs/app.js file. Change var APP_VERSION=\"1.0\"; to any other value, such as the following:\n\n    ```", "```\n\n    Execute the first step again with a new tag, and note the `CACHED` lines in the output:\n\n    ```", "```\n    #7 [3/6] COPY package.json package.json\n    app.js file; hence, a new layer must be created:\n\n    ```", "```\n\n    All successive lines will also create new layers because we *broke the cache*. A new line of changes was created:\n\n    ```", "```\n\n    Finally, we obtained our new image:\n\n    ```", "```\n\n    ```", "```\n\n    ```", "```\n    FROM docker.io/node:18.14.2-alpine3.16\n    ENV APPDIR /APP\n    WORKDIR ${APPDIR}\n    COPY . .\n    RUN apk add --no-cache --update curl \\\n    && rm -rf /var/cache/apk \\\n    && npm install\n    CMD [\"node\",\"app.js\",\"3000\"]\n    EXPOSE 3000\n    ```", "```\n    $ time nerdctl build -t ch2lab1:three \\\n    --label nodejs=18.14.2 \\\n    --label=base=alpine3.16  nodejs  \\\n    --progress plain\n    …\n    …\n    #6 [2/4] WORKDIR /APP\n    #6 CACHED\n    …\n    COPY step, and no cache can be used:\n\n    ```", "```\n    $ time nerdctl build -t ch2lab1:four \\\n    --label nodejs=18.14.2 \\\n    --label=base=alpine3.16  nodejs  \\\n    --progress plain\n    #1 [internal] load build definition from Dockerfile\n    …\n    …\n    #6 [2/4] WORKDIR /APP\n    #6 CACHED\n    ```", "```\n    #7 [3/4] COPY . .\n    #7 DONE 0.0s\n    #8 [4/4] RUN apk add --no-cache --update curl && rm -rf /var/cache/apk && npm install\n    #0 0.084 fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/main/x86_64/APKINDEX.tar.gz\n    #8 0.172 fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/community/x86_64/APKINDEX.tar.gz\n    #8 0.307 (1/5) Installing ca-certificates (20220614-r0)\n    …\n    #8 0.376 OK: 10 MiB in 21 packages\n    …\n    #8 3.433 added 3 packages, and audited 4 packages in 3s\n    …\n    #8 DONE 3.5s\n    …\n    …\n    #9 DONE 0.8s\n    unpacking docker.io/library/ch2lab1:four (sha256:75ba902c55459593f792c816b8da55a673ffce3633f1504800c90ec9fd214d26)...\n    Loaded image: docker.io/library/ch2lab1:four\n    real    0m5.210s\n    user    0m0.007s\n    sys     0m0.000s\n    ```", "```\n\n    ```", "```\n    FROM golang:1.20-alpine3.17 AS builder\n    WORKDIR /src\n    COPY ./src/* .\n    RUN mkdir bin && go build -o bin/webserver /src/webserver.go\n    FROM scratch\n    WORKDIR /app\n    COPY --from=builder /src/bin/webserver .\n    CMD [\"/app/webserver\"]\n    USER 1000\n    EXPOSE 3000\n    ```", "```\n    $ nerdctl build -t ch2lab1:go.1 \\\n    --label golang=1.20 --label=base=alpine3.17  go  \\\n    --progress plain\n    #1 [internal] load .dockerignore\n    #1 transferring context: 2B done\n    ...\n    FROM key is reached and the image build process starts:\n\n    ```", "```\n    #10 [stage-1 2/2] COPY --from=builder /src/bin/webserver .\n    #10 DONE 0.0s\n    #11 exporting to oci image format\n    ...\n    ...\n    #11 sending tarball 0.1s done\n    #11 DONE 0.3s\n    unpacking docker.io/library/ch2lab1:go.1 (sha256:527a2d2f49c7ea0083f0ddba1560e0fc725eb26ade22c3990bb05260f1558b0b)...\n    Loaded image: docker.io/library/ch2lab1:go.1\n    ```", "```\n\n    ```", "```\n    $ nerdctl image ls\n    REPOSITORY    TAG       IMAGE ID        CREATED              PLATFORM       SIZE         BLOB SIZE\n    ch2lab1       one     7f63598f2144    2 hours ago          linux/amd64    186.6 MiB    51.7 MiB\n    ch2lab1       go.1      527a2d2f49c7    4 minutes ago        linux/amd64    6.3 MiB      3.6 MiB\n    ```", "```\n    $ docker buildx ls\n    NAME/NODE     DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS\n    default *     docker\n    arm64 architecture build:\n\n    ```", "```\n    #8 0.348 fetch https://dl-cdn.alpinelinux.org/alpine/v3.17/main/aarch64/APKINDEX.tar.gz\n    #8 0.753 fetch https://dl-cdn.alpinelinux.org/alpine/v3.17/community/aarch64/APKINDEX.tar.gz\n    #8 1.204 (1/5) Installing ca-certificates (20220614-r4)\n    …\n    …\n    #8 1.341 Executing busybox-1.35.0-r29.trigger\n    #8 1.366 Executing ca-certificates-20220614-r4.trigger\n    ...\n    …\n    #11 writing image sha256:2588e9451f156ca179694c5c5623bf1c80b9a36455e5f162dae6b111d8ee00fd done\n    #11 naming to docker.io/library/ch2lab1:six done\n    arm64 Alpine image was used, even though we used the same Dockerfile from previous labs.\n    ```", "```\n\n    ```", "```\n    $ docker image inspect ch2lab1:six \\\n    --format='{{.Architecture}}'\n    arm64 architectures and can be used in some QNAP NAS platforms.\n    ```"]