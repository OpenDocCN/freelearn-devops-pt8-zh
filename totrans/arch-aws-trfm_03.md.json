["```\necho $PATH\n```", "```\nmv ~/Downloads/terraform /usr/local/bin/\n```", "```\ngit clone https://github.com/hashicorp/terraform.git\n```", "```\ncd terraform\n```", "```\ngo install\n```", "```\nbrew tap hashicorp/tap\n```", "```\nbrew install hashicorp/tap/terraform\n```", "```\nbrew update\n```", "```\nbrew upgrade hashicorp/tap/terraform\n```", "```\nchoco install terraform\n```", "```\nsudo apt-get update && sudo apt-get install -y gnupg software-properties-common\n```", "```\ngpg --no-default-keyring \\\n    --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \\\n    --fingerprint\n```", "```\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \\\n    https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | \\\n    sudo tee /etc/apt/sources.list.d/hashicorp.list\n```", "```\nsudo apt update\n```", "```\nsudo apt-get install terraform\n```", "```\nsudo yum install -y yum-utils\n```", "```\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n```", "```\nsudo yum -y install terraform\n```", "```\nsudo dnf install -y dnf-plugins-core\n```", "```\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo\n```", "```\nsudo dnf -y install terraform\n```", "```\nsudo yum install -y yum-utils\n```", "```\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo\n```", "```\nsudo yum -y install terraform\n```", "```\nterraform -help\n```", "```\n> terraform -help\nUsage: terraform [-version] [-help] <command> [args]\nThe available commands for execution are listed below.\nThe most common, useful commands are shown first, followed by\nless common or more advanced commands. If you're just getting\nstarted with Terraform, stick with the common commands. For the\nother commands, please read the help and docs before usage.\n```", "```\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n```", "```\nunzip awscliv2.zip\n```", "```\nsudo ./aws/install\n```", "```\naws –version\n```", "```\naws-cli/2.7.24 Python/3.8.8 Linux/4.14.133-113.105.amzn2.x86_64 botocore/2.4.5\n```", "```\ncurl \"https://awscli.amazonaws.com/AWSCLIV2.pkg\" -o \"AWSCLIV2.pkg\"\n```", "```\nsudo installer -pkg ./AWSCLIV2.pkg -target /\n```", "```\nwhich aws\n```", "```\n/usr/local/bin/aws\n```", "```\naws –version\n```", "```\naws-cli/2.7.24 Python/3.8.8 Darwin/18.7.0 botocore/2.4.5\n```", "```\nmsiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi\n```", "```\naws –version\n```", "```\naws-cli/2.7.24 Python/3.8.8 Windows/10 exe/AMD64 prompt/off\n```", "```\nexport AWS_ACCESS_KEY_ID=\n```", "```\nexport AWS_SECRET_ACCESS_KEY=\n```", "```\naws sts get-caller-identity\n```", "```\n{\n    \"Account\": \"1234567890\",\n    \"UserId\": \"ABCDEFGHJIKLM\",\n    \"Arn\": \"arn:aws:iam:: 1234567890:user/erol_kavas\"\n}\n```", "```\nmkdir my-first-terraform-project\n```", "```\ncd my-first-terraform-project\n```", "```\ntouch main.tf\n```", "```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 4.0\"\n    }\n  }\n}\n# Configure the AWS Provider\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\nresource \"aws_vpc\" \"example\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n```", "```\nterraform init\n```", "```\nInitializing the backend...\nInitializing provider plugins...\n- Finding hashicorp/aws versions matching \"~> 4.0\"...\n- Installing hashicorp/aws v4.36.1...\n- Installed hashicorp/aws v4.36.1 (signed by HashiCorp)\nTerraform has created a lock file .terraform.lock.hcl to record the provider\nselections it made above. Include this file in your version control repository\nso that Terraform can guarantee to make the same selections by default when\nyou run \"terraform init\" in the future.\nTerraform has been successfully initialized!\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n```", "```\nterraform validate\n```", "```\nSuccess! The configuration is valid.\n```", "```\nterraform plan\n```", "```\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\nTerraform will perform the following actions:\n  # aws_vpc.example will be created\n  + resource \"aws_vpc\" \"example\" {\n      + arn                                  = (known after apply)\n      + cidr_block                           = \"10.0.0.0/16\"\n      + default_network_acl_id               = (known after apply)\n      + default_route_table_id               = (known after apply)\n      + default_security_group_id            = (known after apply)\n      + dhcp_options_id                      = (known after apply)\n      + enable_classiclink                   = (known after apply)\n      + enable_classiclink_dns_support       = (known after apply)\n      + enable_dns_hostnames                 = (known after apply)\n      + enable_dns_support                   = true\n      + enable_network_address_usage_metrics = (known after apply)\n      + id                                   = (known after apply)\n      + instance_tenancy                     = \"default\"\n      + ipv6_association_id                  = (known after apply)\n      + ipv6_cidr_block                      = (known after apply)\n      + ipv6_cidr_block_network_border_group = (known after apply)\n      + main_route_table_id                  = (known after apply)\n      + owner_id                             = (known after apply)\n      + tags_all                             = (known after apply)\n    }\nPlan: 1 to add, 0 to change, 0 to destroy.\n───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\nNote: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run \"terraform apply\" now.\n```", "```\nPlan: 1 to add, 0 to change, 0 to destroy.\n```", "```\nterraform apply\n```", "```\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\nTerraform will perform the following actions:\n  # aws_vpc.example will be created\n  + resource \"aws_vpc\" \"example\" {\n      + arn                                  = (known after apply)\n      + cidr_block                           = \"10.0.0.0/16\"\n      + default_network_acl_id               = (known after apply)\n      + default_route_table_id               = (known after apply)\n      + default_security_group_id            = (known after apply)\n      + dhcp_options_id                      = (known after apply)\n      + enable_classiclink                   = (known after apply)\n      + enable_classiclink_dns_support       = (known after apply)\n      + enable_dns_hostnames                 = (known after apply)\n      + enable_dns_support                   = true\n      + enable_network_address_usage_metrics = (known after apply)\n      + id                                   = (known after apply)\n      + instance_tenancy                     = \"default\"\n      + ipv6_association_id                  = (known after apply)\n      + ipv6_cidr_block                      = (known after apply)\n      + ipv6_cidr_block_network_border_group = (known after apply)\n      + main_route_table_id                  = (known after apply)\n      + owner_id                             = (known after apply)\n      + tags_all                             = (known after apply)\n    }\nPlan: 1 to add, 0 to change, 0 to destroy.\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n  Enter a value:\n```", "```\naws_vpc.example: Creating...\naws_vpc.example: Creation complete after 2s [id=vpc-xxxxxx]\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n```", "```\nterraform destroy\n```", "```\naws_vpc.example: Refreshing state... [id=vpc-xxxx]\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  - destroy\nTerraform will perform the following actions:\n  # aws_vpc.example will be destroyed\n  - resource \"aws_vpc\" \"example\" {\n      - arn                                  = \"arn:aws:ec2:us-east-1:xxxx:vpc/vpc-xxxx\" -> null\n      - assign_generated_ipv6_cidr_block     = false -> null\n      - cidr_block                           = \"10.0.0.0/16\" -> null\n      - default_network_acl_id               = \"acl-0cbfcf0156e3eec97\" -> null\n      - default_route_table_id               = \"rtb-0933253f8baad1cb2\" -> null\n      - default_security_group_id            = \"sg-09aa1459d60ec7939\" -> null\n      - dhcp_options_id                      = \"dopt-26ad5a5f\" -> null\n      - enable_classiclink                   = false -> null\n      - enable_classiclink_dns_support       = false -> null\n      - enable_dns_hostnames                 = false -> null\n      - enable_dns_support                   = true -> null\n      - enable_network_address_usage_metrics = false -> null\n      - id                                   = \"vpc-xxxx\" -> null\n      - instance_tenancy                     = \"default\" -> null\n      - ipv6_netmask_length                  = 0 -> null\n      - main_route_table_id                  = \"rtb-xxxx\" -> null\n      - owner_id                             = \"xx\" -> null\n      - tags                                 = {} -> null\n      - tags_all                             = {} -> null\n    }\nPlan: 0 to add, 0 to change, 1 to destroy.\nDo you really want to destroy all resources?\n  Terraform will destroy all your managed infrastructure, as shown above.\n  There is no undo. Only 'yes' will be accepted to confirm.\n  Enter a value:\n```", "```\naws_vpc.example: Destroying... [id=vpc-xxxx]\naws_vpc.example: Destruction complete after 1s\nDestroy complete! Resources: 1 destroyed.\n```"]