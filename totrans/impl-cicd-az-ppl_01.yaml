- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Azure Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will be one of your favorite books in the Microsoft DevOps world as
    it provides a comprehensive guide to learning all about **Azure Pipelines** and
    will allow you to become an experienced Azure DevOps engineer. An Azure DevOps
    engineer is an individual who is responsible for designing and implementing **continuous
    integration and continuous deployment** (**CI/CD**) pipelines using the Azure
    Pipelines service, which is a component of **Azure DevOps**. Azure DevOps is a
    group of Microsoft services that help a project team achieve the project’s goal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will be introduced to the CI/CD and Azure DevOps concepts
    in greater detail and will learn about the advantages of using Azure Pipelines
    to create CI/CD pipelines for the application deployment process. More specifically,
    in this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is CI/CD?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Azure Pipelines and its components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing Azure Pipelines with other CI/CD tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up agent pools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a **personal access** **token** (**PAT**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up and updating self-host agents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up deployment groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch01](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch01).
  prefs: []
  type: TYPE_NORMAL
- en: What is CI/CD?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CI/CD is the workflow process for automation development and deployment that
    developers should know about to improve their skills.
  prefs: []
  type: TYPE_NORMAL
- en: CI is the workflow process for automating the process of building and testing
    code whenever a team member commits changes to Git, which is a form of version
    control that’s run on a source control repository platform such as Azure Repos,
    GitHub, GitLab, and others. CI creates a modern culture for all developers to
    share their code, including unit tests, by merging all changes into a shared version
    control repository after finishing a small task. CI runs based on committing code
    triggers to grab the latest code from the shared version control repository to
    build, test, and validate any branch that they commit. Using CI allows you to
    rapidly discover error code issues and correct them to ensure all developer code
    is of good quality.
  prefs: []
  type: TYPE_NORMAL
- en: CD involves automating the process of building, testing, configuring, and deploying
    from the CI workflow process to specific environments, such as QA, staging, and
    production.
  prefs: []
  type: TYPE_NORMAL
- en: 'This workflow is illustrated in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – CI/CD diagram](img/B18875_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – CI/CD diagram
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD reduces human error and the routine operation of the manual build, test,
    and deploy stages for any developer. It helps the developer focus only on application
    development.
  prefs: []
  type: TYPE_NORMAL
- en: This book will focus on the CI/CD tool **Azure Pipelines**, which is a comprehensive
    service for DevOps and a part of the ecosystem of services in **Azure DevOps**.
    Before we look at this further, let’s introduce Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many CI/CD tools are used to support modern software development, such as Azure
    Pipelines, GitLab CI/CD, GitHub Actions, and Bitbucket Pipelines. One of the most
    widely used is Azure Pipelines; this is a part of **Azure DevOps**, which consists
    of the following five services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Boards** is an Azure DevOps sub-service that’s used to track all tasks
    related to a project conveniently in one place. It is suitable for teamwork. It
    helps with collaboration because it supports Kanban boards, backlogs, team dashboards,
    and custom reporting, which can create a connection between the tasks and source
    version repositories such as GitHub or Azure Repos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https://dev.azure.com/{your-organization}`). This book will focus on this
    service due to this benefit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Repos** is an Azure DevOps sub-service for controlling the version
    of the source code. It is easy to manage code in one place. Easy maintenance can
    also help you define rules so that you can deploy code safely to desired environments,
    such as merge checks or static code analysis after the team creates the pull request.
    The examples in this book will use Azure Repos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Test Plans** is an Azure DevOps sub-service that helps test or quality
    assurance teams write use case scenarios to easily deliver the test results to
    the customer. The tester or quality assurance team creates **system integration
    testing** (**SIT**) and **user acceptance testing** (**UAT**) on Azure Test Plans.
    It can display test results as dashboard reports and include comments or feedback.
    Azure Test Plans also helps the team understand the test process of the project
    on the same page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Artifacts** is an Azure DevOps sub-service that enables developers
    to share and manage all their packages that result from building code in one place.
    Developers can publish packages to their feeds and share them within the same
    team, organization, and even publicly. Developers can also load the packages from
    different public repositories such as [https://www.nuget.org/](https://www.nuget.org/)
    or [https://www.npmjs.com/](https://www.npmjs.com/). Azure Artifacts also supports
    multiple package types, such as NuGet, npm, Python, Maven, and Universal Packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these services fall under the umbrella of Azure DevOps, which covers the
    necessary development process for a project. You don’t need to use additional
    services for development.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure Pipelines and its components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Pipelines is a CI/CD platform for building, testing, and deploying your
    code to a live application. First, let’s take a look at its key components.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the key components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are some key concepts that you need to understand when creating an Azure
    pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: An **agent** is the software that runs a job within a server. It can be a Microsoft-hosted
    agent or a self-hosted agent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **pipeline** is a workflow process for CI/CD for your application development.
    It can define your idea of how to build, test, integrate, and deploy your project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **trigger** is an action that calls a pipeline to run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A **stage** is a flow of defined jobs in a pipeline, and each stage can have
    one or more jobs. The benefit of using a stage is that you can rerun job(s) under
    it. This means you do not need to rerun the whole pipeline. For example, let’s
    say the developer creates a pipeline containing two stages: the **build stage**
    and the **deployment stage**. If the deployment stage fails, then they can only
    rerun the failed job under the deployment stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **job** is a group of one or more steps set in a stage. It is useful when
    you need to run a set of steps in a different operating system environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A **step** can be a task or script and is the smallest piece of a pipeline:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **task** is a pre-defined script that your idea can define.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A **script** is an action that uses the **command-line interface** (**CLI**),
    PowerShell, or Bash. It depends on the operating system agent that you choose
    for a job. For example, if you use a command line to run on a Linux agent, it
    will use a bash script. PowerShell runs on a macOS agent and will use a PowerShell
    core for cross-platform scripts.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A **target** is a destination of the pipeline. It can be Azure Artifacts, an
    Azure resource service (such as Azure App Services, Azure Functions, Azure Container
    Apps, Azure Kubernetes Services, and so on), or invoke a REST API such as webhooks
    on Microsoft Teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s look at how these components interact with each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Key components](img/B18875_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Key components
  prefs: []
  type: TYPE_NORMAL
- en: This section described the meaning of and relationship between key objects.
    Before we take a more in-depth look at the different aspects of this platform,
    let’s learn how we can start using it.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up for Azure Pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Two methods can be used for signing up:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://dev.azure.com/{your-organization}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{your-organization}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you’ve signed up for an Azure Pipelines account, you are ready to create
    a new project for building your code and release the built code to the live application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating a new project is the first step after you sign up, before creating
    any CI/CD pipeline. Upon creating a project, you can set project visibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Creating a new project](img/B18875_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Creating a new project
  prefs: []
  type: TYPE_NORMAL
- en: You can enter a project name and select **Visibility**, then click **Create
    project**.
  prefs: []
  type: TYPE_NORMAL
- en: Inviting team members
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you need to work with a team, you must add a new member by inviting one
    or more team members. Follow these steps to invite a team member:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on your project’s name in the web portal and click **Project settings**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Project settings](img/B18875_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Project settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Teams** | **Add**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Adding a new team member](img/B18875_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Adding a new team member
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the email addresses of your team members and click **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Inviting team members](img/B18875_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Inviting team members
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve invited your collaborators to join your project, let’s delve
    into how we can start using this service.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Azure pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to create Azure pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the **Classic interface** (create Azure pipelines from the web Azure
    DevOps portal) while following these basic steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure Azure Pipelines to use your Azure Repos Git repository.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Azure Pipelines to create and configure your build and release pipeline
    using drag and drop from the Azure DevOps portal.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Push your code to your version control repository. The pipeline will be automatically
    initiated by the default trigger and the defined tasks will be executed.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `azure-pipelines.yml` file by defining your custom build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push your code to your version control repository. This action runs the default
    trigger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s illustrate the Azure Pipelines YAML method for ease of understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Azure Pipelines YAML steps](img/B18875_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Azure Pipelines YAML steps
  prefs: []
  type: TYPE_NORMAL
- en: There are different pipeline features available for both these methods, with
    some available for both and others only featuring in one. We’ll look at these
    in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Feature availability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some pipeline features are only available when using the classic interface
    or YAML. The following table displays which features are available for which of
    these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature** | **YAML** | **Classic** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Agents | Yes | Yes | To define the resource where the pipeline can run. |'
  prefs: []
  type: TYPE_TB
- en: '| Approvals | Yes | Yes | To define the validation steps for additional checking
    before completing a deployment stage. |'
  prefs: []
  type: TYPE_TB
- en: '| Artifacts | Yes | Yes | To define the library packages for publishing or
    consuming different package types. |'
  prefs: []
  type: TYPE_TB
- en: '| Caching | Yes | Yes | To define an additional task to reduce the build time
    by allowing outputs or downloaded dependencies to store them on the agents and
    reuse them again. |'
  prefs: []
  type: TYPE_TB
- en: '| Conditions | Yes | Yes | To define the specific conditions before running
    a job. |'
  prefs: []
  type: TYPE_TB
- en: '| Container jobs | Yes | No | To define the specific jobs to run in a container.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Demands | Yes | Yes | To define the specific pipeline to ensure requirements
    are met before a pipeline stage is run. |'
  prefs: []
  type: TYPE_TB
- en: '| Dependencies | Yes | Yes | To define specific requirements for validation
    before running the next job or stage. |'
  prefs: []
  type: TYPE_TB
- en: '| Deployment groups | No | Yes | To define a logical group for the code that
    will be deployed to the target machines. |'
  prefs: []
  type: TYPE_TB
- en: '| Deployment group jobs | Yes | Yes | To define a job to release to a deployment
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| Deployment jobs | Yes | No | To define the deployment steps. |'
  prefs: []
  type: TYPE_TB
- en: '| Environment | Yes | No | To define a collection of resources targeted for
    deployment. |'
  prefs: []
  type: TYPE_TB
- en: '| Gates | Yes | Yes | To support automatic collection and evaluation of external
    health signals before completing a release stage. Available with classic release
    only. |'
  prefs: []
  type: TYPE_TB
- en: '| Jobs | Yes | Yes | To define the execution sequence of a set of steps. |'
  prefs: []
  type: TYPE_TB
- en: '| Service connections | Yes | Yes | To define a connection to a remote service
    required to execute tasks in a job. |'
  prefs: []
  type: TYPE_TB
- en: '| Service containers | Yes | No | To define a service that you can use to manage
    the life cycle of a containerized service. |'
  prefs: []
  type: TYPE_TB
- en: '| Stages | Yes | Yes | To define flow jobs within a pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '| Task groups | No | Yes | To define a set of sequence tasks as a single reusable
    task. |'
  prefs: []
  type: TYPE_TB
- en: '| Tasks | Yes | Yes | To define the building blocks that construct a pipeline.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Templates | Yes | No | To define reusable content, logic, and parameters.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Triggers | Yes | Yes | To define a specific event that causes a pipeline
    to run. |'
  prefs: []
  type: TYPE_TB
- en: '| Variables | Yes | Yes | To define a value for data replacement and pass it
    to the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '| Variable groups | Yes | Yes | To define the storage of values that you want
    to control and make available across multiple pipelines. |'
  prefs: []
  type: TYPE_TB
- en: Table 1.1 – Pipeline features
  prefs: []
  type: TYPE_NORMAL
- en: Apart from these features, there are source version control repositories that
    Azure Pipelines can connect to. We’ll look at these in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Availability of source version control repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'YAML pipelines only support some version control repositories. The following
    table displays which version control repositories can support which method:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Repository** | **YAML** | **Classic Interface** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Azure Repos | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| GitHub | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| GitHub Enterprise Server | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Bitbucket Cloud | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Bitbucket Server | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Subversion | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: Table 1.2 – Comparing repositories
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed all the available features of Azure Pipelines.
    In the next section, we will convert the key components of Azure Pipelines into
    a YAML structure to manage it better.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the YAML structure of Azure Pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, creating a file called `azure-pipelines.yml` will help you remember
    which YAML file is used for `azure-pipelines` in the source code repository. The
    basic Azure Pipelines YAML structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – azure-pipelines.yml file](img/B18875_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – azure-pipelines.yml file
  prefs: []
  type: TYPE_NORMAL
- en: 'The `azure-pipelines.yml` file in this example contains a typical structure:'
  prefs: []
  type: TYPE_NORMAL
- en: There are two stages, `stage1` and `stage2`, and each stage contains a `job`
    step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Lines 1-2* show the pipeline runs when the developer pushes changes on the
    main (`master`) branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Lines 8-9* and *21-22* show the pipeline uses a Microsoft-hosted agent with
    the `windows-latest` operating system image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Line 11* is a pre-created script for using the NuGet library. You can access
    this script in the `ch1` folder in this book’s GitHub repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Line 12* is a pre-created script for using the NuGet command line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Line 15* is a command line to run the `echo` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Line 24* is a PowerShell Core script that is cross-platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, the basic YAML structure is rather simple to understand. Once
    you’ve prepared the YAML file, you can see the status for running it. We will
    discuss this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the Azure pipelines' status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Azure pipelines'' status is displayed on the Azure DevOps web portal under
    the running pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – The Azure pipelines'' status](img/B18875_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – The Azure pipelines' status
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the current pipeline status row will take you to the historical
    status of the pipeline. Two colors are used to indicate the status: green and
    red. These indicate successful and failed pipelines, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: This section described all the components and their relationships. In the next
    section, you will understand the key differences between Azure Pipelines and other
    commonly used CI/CD tools.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Azure Pipelines with other CI/CD tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure Pipelines has different features compared to other CI/CD services currently
    on the market. Let’s take a closer look:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Features** | **Azure Pipelines** | **GitHub Actions** | **GitLab CI** |
    **Bitbucket Pipelines** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `if` expression | X | X | - | - |'
  prefs: []
  type: TYPE_TB
- en: '| Loop statement | X | - | - | - |'
  prefs: []
  type: TYPE_TB
- en: '| Online service – CI/CD minutes free usage per month | 1,800 | 2,000 | 400
    | 50 |'
  prefs: []
  type: TYPE_TB
- en: '| Online service – free package storage (GB) | 2 | 0.5 | 5 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Self-hosted agents | X | X | X | X |'
  prefs: []
  type: TYPE_TB
- en: '| Free users | 5 | Unlimited | Unlimited | 5 |'
  prefs: []
  type: TYPE_TB
- en: Table 1.3 – CI/CD tools comparison
  prefs: []
  type: TYPE_NORMAL
- en: This will help you understand the important factors to consider when you’re
    trying to decide on the right tool for your CI/CD platform.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start to build a pipeline for application deployment, we must prepare
    the necessary agent pools, as demonstrated in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up agent pools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before using Azure Pipelines to build code and deploy code, you need at least
    one **build agent**. There are two build agent types: **Microsoft-hosted build
    agent**, which is included by default, and **self-hosted build agent**. Each agent
    type will be located under an **agent pool**, which is a collection of build and
    release agents.'
  prefs: []
  type: TYPE_NORMAL
- en: A Microsoft-hosted build agent will be located under an agent pool called **Azure
    Pipelines**. You can create a new agent pool for self-hosted build agents and
    assign them under it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create pools, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on your project name in the web portal and click **Project settings**
    | **Agent pools** | **Add pool**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Adding a pool](img/B18875_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Adding a pool
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the information shown in the following screenshot and then click **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Creating an agent pool](img/B18875_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Creating an agent pool
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you will see the new agent pool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Displaying the new agent pool](img/B18875_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Displaying the new agent pool
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve finished creating the new agent pool, you can start creating and
    setting up the self-hosted agent under a new agent pool. The following section
    will show you how to create a **personal access** **token** (**PAT**).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PAT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can create self-hosted agents on your server or machine, you must
    create a PAT. To do this, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Settings** menu under your personal icon and click on **Personal**
    **access tokens**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Creating PATs](img/B18875_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – Creating PATs
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **New Token**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.14 – New Token](img/B18875_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – New Token
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the required information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: Enter the name you need'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization**: Select an organization you will link to'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expiration (UTC)**: There are four choices – 30 days, 60 days, 90 days, and
    custom-defined but under 2 years'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scopes**: Select **Custom defined** | **Agents Pools** with **Read & manage**
    | **Auditing** with **Read** **Audit Log**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Entering the required information](img/B18875_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – Entering the required information
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the PAT before clicking on the **Close** button as you won’t be able to
    see it again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Copying the PAT](img/B18875_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – Copying the PAT
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are ready to set up a self-hosted agent.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up self-hosted agents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After you’ve created a PAT, you can create a new self-hosted agent under a
    new agent pool. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **PacktAzureDevOps** | **Agent pools** | **General**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Entering a new agent pool](img/B18875_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – Entering a new agent pool
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **New agent**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Entering a new agent](img/B18875_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – Entering a new agent
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download a self-hosted agent based on your operating system. Three
    operating system options will show you how to download and set them up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Windows users** can download build agent software from the **Windows** tab.
    There are two options, as shown in the following screenshot: Windows 64-bit (**x64**)
    and Windows 32-bit (**x86**):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.19 – The Windows agent for setting up a file](img/B18875_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – The Windows agent for setting up a file
  prefs: []
  type: TYPE_NORMAL
- en: To set up a Windows agent, you need to run on PowerShell as an administrator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mac users** can download build agent software from the **macOS** tab:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.20 – macOS agent](img/B18875_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – macOS agent
  prefs: []
  type: TYPE_NORMAL
- en: You don’t need to use the `bash` command in the administrator role to set up
    the macOS agent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux users** can download build agent software from the **Linux** tab. There
    are four options for computer architecture – **x64**, **ARM**, **ARM64**, and
    **RHEL6**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.21 – Linux agent](img/B18875_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 – Linux agent
  prefs: []
  type: TYPE_NORMAL
- en: You don’t need to use a `root` user for installation to set up a Linux agent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After configuring the agent in each operating system, you must enter the following
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.22 – The agent status dashboard](img/B18875_01_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – The agent status dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the **Online** status of the build agent that has already been
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.23 – The action menu of the agent](img/B18875_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – The action menu of the agent
  prefs: []
  type: TYPE_NORMAL
- en: You can delete the agent and **u**pdate to a new version of the agent by clicking
    on the button with the ellipses or three dots.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now ready to create the build and deployment on the `agent01` build
    agent. However, you need to set up the deployment group so that you can deploy
    your application on a local web server such as Microsoft **Internet and Information
    Services** (**IIS**). We’ll do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up deployment groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Deployment groups** are logical agent groupings for application deployment
    on target machines based on environments – they are typically named based on your
    project needs and promotion levels before they go to production. Agents are installed
    in each environment. Each agent under the deployment groups supports only Windows
    and Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These deployment groups can be divided based on environments, such as development
    (*Dev*), quality assurance (*QA*), user acceptance testing (*UAT*), and production
    (*Prod*), as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.24 – Deployment groups concept](img/B18875_01_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.24 – Deployment groups concept
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a deployment group, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Pipelines** | **Deployment groups** | **Groups** | **Add a**
    **deployment group**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.25 – Adding a deployment group](img/B18875_01_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.25 – Adding a deployment group
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the required information and click **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.26 – Entering deployment group information](img/B18875_01_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.26 – Entering deployment group information
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the deployment group, you must set up the deployment agent under
    your deployment group. There are two operating systems the deployment agents support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Windows users** can install an agent of the deployment group by copying the
    PowerShell script and running it with an administrator command prompt:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![  Figure 1.27 – Script to deploy an agent on Windows](img/B18875_01_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.27 – Script to deploy an agent on Windows
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux users** can install an agent of the deployment group by copying the
    bash shell script and running it with an administrator command prompt:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![  Figure 1.28 – Script to deploy an agent on Linux](img/B18875_01_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.28 – Script to deploy an agent on Linux
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting up the agent for deployment groups, you will see that the build
    agent of the deployment group is online:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.29 – The deployment agent is online](img/B18875_01_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.29 – The deployment agent is online
  prefs: []
  type: TYPE_NORMAL
- en: After setting up the build and deployment agent on a self-hosted computer, you
    are ready to create your first Azure pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the key concepts involved in CI/CD, which
    is a part of the Azure DevOps service from Microsoft. You learned about the basic
    structure of Azure Pipelines YAML and the difference between Azure Pipelines and
    other services currently on the market. You also learned about the fundamentals
    of Azure Pipelines, which will help you prepare your CI/CD pipelines for all real-world
    scenarios discussed later in this book. Finally, you learned how to set up agent
    pools, deployment groups, and self-hosted agents to prepare for the hands-on projects
    in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will apply the knowledge you’ve gained from this chapter
    to basic concepts and features and learn how to create a pipeline.
  prefs: []
  type: TYPE_NORMAL
