["```\n# modules/admins/manifests/infrastructure.pp\n# This manifest declares the virtual resource for my administrative user\nclass admins::infrastructure {\n  @user {'rrussellyates':\n    ensure => present,\n    comment => 'Ryan Russell-Yates',\n    groups => ['wheel']\n  }\n}\n```", "```\n# modules/profile/manifests/monitoring_support.pp\n# Assume I'm a member of a monitoring team, that monitors critical applications\nclass profile::monitoring_support {\n  include admins::infrastructure\n  include profile::nagios\n  include profile::monitoring_baseline\n\n  realize User['rrussellyates']\n}\n\n# modules/profile/manifests/team/baseline.pp\n# This profile combines our multiple required classes for the application\nclass profile::my_app\n {\n\n  include admins::infrastructure\n  include security\n  include ntp\n  include dns\n\n  realize User['rrussellyates']\n}\n```", "```\n# The role for our production application with special SLA monitoring\n# Notice that both my_app and monitoring support require me as an administrative\n# user. A development version of the application needs my support, as well as\n# anything with a production-level SLA for monitoring. If I attempted to declare\n# myself as a resource in both of these profiles, we'd have a duplicate resource\n# declaration.\nclass role::production_app {\n  include profile::my_app\n  include profile::monitoring_support\n}\n```", "```\n# site.pp\n\nnode 'appserver' {\n  include role::production_app\n}\n```", "```\n[root@wordpress vagrant]# puppet agent -t\nInfo: Using configured environment 'production'\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Retrieving locales\nInfo: Loading facts\nInfo: Caching catalog for wordpress\nInfo: Applying configuration version '1529120853'\nNotice: /Stage[main]/Admins::Infrastructure/User[rrussellyates]/ensure: created\nNotice: Applied catalog in 0.10 seconds\n```", "```\nclass admins::infrastructure {\n  @user {'rrussellyates':\n    ensure  => present,\n    comment => 'Ryan Russell-Yates',\n    groups  => ['wheel'],\n    tag     => ['infrastructure_admin','monitoring_support'],\n  }\n  @user {'jsouthgate':\n    ensure  => present,\n    comment => 'Jason Southgate',\n    groups  => ['wheel'],\n    tag     => ['infrastructure_admin'],\n  }\n  @user {'chuck':\n    ensure  => present,\n    comment => 'Our Intern',\n    groups  => ['wheel'],\n    tag     => ['monitoring_support'],\n  }\n}\n```", "```\nclass profile::my_app {\n  include admins::infrastructure\n  include security\n  include ntp\n  include dns\n\n  # This line calls in all Monitoring Support and Infrastructure Admin users.\n  User <| tag == 'monitoring_support' or tag == 'infrastructure_admin' |>\n}\n```", "```\n[root@wordpress vagrant]# puppet agent -t\nInfo: Using configured environment 'production'\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Retrieving locales\nInfo: Loading facts\nInfo: Caching catalog for wordpress\nInfo: Applying configuration version '1529120940'\nNotice: /Stage[main]/Admins::Infrastructure/User[jsouthgate]/ensure: created\nNotice: /Stage[main]/Admins::Infrastructure/User[chuck]/ensure: created\nNotice: Applied catalog in 0.11 seconds\n```", "```\nclass profile::fillsuptmp \n{\n  # Exported Resource. Virtual and Shared\n  # Notice that only the @@ is different!\n  @@file {\n\"/tmp/${::fqdn}\":\n    ensure  => present,\n    content => $::ipaddress,\n    tag     => ['Fillsuptmp']\n  }\n}\n```", "```\nclass profile::filltmp {\n# This simple declaration will call our file from above and place one from\n# each machine on the system. Notice the title containing $::fqdn, so a new\n# file in /tmp will be created with the FQDN of each machine known to PuppetDB.\n\n  include profile::fillsuptmp\n\n  File <<| tag == 'Fillsuptmp' |>>\n}\n```", "```\n# site.pp\n\ninclude profile::filltmp\n```", "```\n[root@wordpress vagrant]# puppet agent -t\nInfo: Using configured environment 'production'\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Retrieving locales\nInfo: Loading facts\nInfo: Caching catalog for wordpress\nInfo: Applying configuration version '1529121275'\nNotice: /Stage[main]/Profile::Fillsuptmp/File[/tmp/wordpress]/ensure: defined content as '{md5}c679836c51e9e0e92191c7d2d38f5fe5'\nNotice: /Stage[main]/Profile::Filltmp/File[/tmp/pe-puppet-master]/ensure: defined content as '{md5}c679836c51e9e0e92191c7d2d38f5fe5'\nNotice: Applied catalog in 0.10 seconds\n```", "```\nclass profile::etchosts {\n# A host record is made containing the FQDN and IP Address of the classified node\n  @@host {$::fqdn:\n    ensure => present,\n    ip     => $::ipaddress,\n    tag    => ['shoddy_dns'], }\n# The classified node collects every shoddy_dns host entry, including its own,\n# and adds it to the nodes host file. This even works across environments, as\n# we haven't isolated it to a single environment.\n  Host <<| tag == 'shoddy_dns' |>>\n}\n```", "```\n# site.pp\ninclude profile::etchosts\n# Provided so nodes don't fail to classify anything\nnode default { }\n```", "```\n[root@pe-puppet-master vagrant]# puppet agent -t\nInfo: Using configured environment 'production'\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Retrieving locales\nInfo: Loading facts\nInfo: Caching catalog for pe-puppet-master\nInfo: Applying configuration version '1529033713'\nNotice: /Stage[main]/Profile::Etchosts/Host[mysql]/ensure: created\nInfo: Computing checksum on file /etc/hosts\nNotice: /Stage[main]/Profile::Etchosts/Host[appserver]/ensure: created\nNotice: /Stage[main]/Profile::Etchosts/Host[haproxy]/ensure: created\nNotice: Applied catalog in 14.07 seconds\n\n[root@pe-puppet-master vagrant]# cat /etc/hosts\n# HEADER: This file was autogenerated at 2018-06-15 03:36:02 +0000\n# HEADER: by puppet. While it can still be managed manually, it\n# HEADER: is definitely not recommended.\n127.0.0.1 localhost\n10.20.1.3 pe-puppet-master\n10.20.1.6 mysql\n10.20.1.5 appserver\n10.20.1.4 haproxy\n```", "```\nclass profile::balancermember {\n  @@haproxy::balancermember { 'haproxy':\n    listening_service => 'myapp',\n    ports             => ['80','443'],\n    server_names      => $::hostname,\n    ipaddresses       => $::ipaddress,\n    options           => 'check',\n  }\n}\nclass profile::loadbalancer {\n  include haproxy\n\n  haproxy::listen {'myapp':\n    ipaddress => $::ipaddress,\n    ports => ['80','443']\n  }\n\n  Haproxy::Balancermember <<| listening_service == 'myapp' |>>\n}\n```", "```\n#site.pp\ninclude profile::etchosts\n\nnode 'haproxy' {\n  include profile::loadbalancer\n}\n\nnode 'appserver' {\n  include profile::balancermember\n}\n\n# Provided so nodes don't fail to classify anything\nnode default { }\n```", "```\nroot@haproxy vagrant]# puppet agent -t\nInfo: Using configured environment 'production'\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Retrieving locales\nInfo: Loading facts\nInfo: Caching catalog for haproxy\nInfo: Applying configuration version '1529036882'\nNotice: /Stage[main]/Haproxy/Haproxy::Instance[haproxy]/Haproxy::Config[haproxy]/Concat[/etc/haproxy/haproxy.cfg]/File[/etc/haproxy/haproxy.cfg]/content:\n--- /etc/haproxy/haproxy.cfg 2018-06-15 04:27:25.398339144 +0000\n+++ /tmp/puppet-file20180615-17937-6bt84x 2018-06-15 04:28:05.100339144 +0000\n@@ -27,3 +27,5 @@\n bind 10.0.2.15:443\n balance roundrobin\n option tcplog\n+ server appserver 10.0.2.15:80 check\n+ server appserver 10.0.2.15:443 check\n\nInfo: Computing checksum on file /etc/haproxy/haproxy.cfg\nInfo: /Stage[main]/Haproxy/Haproxy::Instance[haproxy]/Haproxy::Config[haproxy]/Concat[/etc/haproxy/haproxy.cfg]/File[/etc/haproxy/haproxy.cfg]: Filebucketed /etc/haproxy/haproxy.cfg to puppet with sum dd6721741c30fbed64eccf693e92fdf4\nNotice: /Stage[main]/Haproxy/Haproxy::Instance[haproxy]/Haproxy::Config[haproxy]/Concat[/etc/haproxy/haproxy.cfg]/File[/etc/haproxy/haproxy.cfg]/content: content changed '{md5}dd6721741c30fbed64eccf693e92fdf4' to '{md5}b819a3af31da2d0e2310fd7d521cbc76'\nInfo: Haproxy::Config[haproxy]: Scheduling refresh of Haproxy::Service[haproxy]\nInfo: Haproxy::Service[haproxy]: Scheduling refresh of Service[haproxy]\nNotice: /Stage[main]/Haproxy/Haproxy::Instance[haproxy]/Haproxy::Service[haproxy]/Service[haproxy]: Triggered 'refresh' from 1 event\nNotice: Applied catalog in 0.20 seconds\n```", "```\nclass profile::appserver (\n  $db_pass = lookup('dbpass')\n) {\n  @@mysql::db { \"appdb_${fqdn}\":\n    user     => 'appuser',\n    password => $db_pass,\n    host     => $::fqdn,\n    grant    => ['SELECT', 'UPDATE', 'CREATE'],\n    tag      => ourapp,\n  }\n}\n\nclass profile::appserver::database {\n\n  class {'::mysql::server':\n    root_password => 'suP3rP@ssw0rd!',\n  }\n\n  Mysql::Db <<| tag == 'ourapp' |>>\n}\n```", "```\n#site.pp\n\ninclude profile::etchosts\n\nnode 'haproxy' {\n  include profile::loadbalancer\n}\nnode 'appserver' {\n  include profile::balancermember\n  class {'profile::appserver': db_pass => 'suP3rP@ssw0rd!' }\n}\nnode 'mysql' {\n  include profile::appserver::database\n}\n# Provided so nodes don't fail to classify anything\nnode default { }\n```", "```\n[root@mysql vagrant]# puppet agent -t\nInfo: Using configured environment 'production'\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Retrieving locales\nInfo: Loading facts\nInfo: Caching catalog for mysql\nInfo: Applying configuration version '1529037526'\nNotice: /Stage[main]/Profile::Appserver::Database/Mysql::Db[appdb_appserver]/Mysql_database[appdb_appserver]/ensure: created\nNotice: /Stage[main]/Profile::Appserver::Database/Mysql::Db[appdb_appserver]/Mysql_user[appuser@appserver]/ensure: created\nNotice: /Stage[main]/Profile::Appserver::Database/Mysql::Db[appdb_appserver]/Mysql_grant[appuser@appserver/appdb_appserver.*]/ensure: created\nNotice: Applied catalog in 0.34 seconds\n```", "```\nclass files::hammer {\n\n  $osname = fact('os.name')\n  $osrelease = fact('os.release')\n\n  concat {'/tmp/hammer.conf':\n    ensure => present,\n  }\n\n  concat::fragment {'Hammer Time':\n    target => '/tmp/hammer.conf',\n    content => \"This file is managed by Puppet.It will be overwritten\",\n    order => '01',\n  }\n\n  @@concat::fragment {\"${::fqdn}-hammer\":\n    target => '/tmp/hammer.conf',\n    content => \"${::fqdn} - ${::ipaddress} - ${osname} ${osrelease}\",\n    order => '02',\n    tag => 'hammer',\n  }\n\n  Concat::Fragment <<| tag == 'hammer' |>>\n\n}\n```", "```\ninclude profile::etchosts\ninclude files::hammer\n\nnode 'haproxy' {\n  include profile::loadbalancer\n}\n\nnode 'appserver' {\n  include profile::balancermember\n  class {'profile::appserver': db_pass => 'suP3rP@ssw0rd!' }\n}\n\nnode 'mysql' {\n  include profile::appserver::database\n}\n\n# Provided so nodes don't fail to classify anything\nnode default { }\n```", "```\nroot@mysql vagrant]# puppet agent -t\nInfo: Using configured environment 'production'\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Retrieving locales\nInfo: Loading facts\nInfo: Caching catalog for mysql\nInfo: Applying configuration version '1529040374'\nNotice: /Stage[main]/Files::Hammer/Concat[/tmp/hammer.conf]/File[/tmp/hammer.conf]/ensure: defined content as '{md5}f3f0d7ff5de10058846333e97950a7b9'\nNotice: Applied catalog in 0.33 seconds\n\n# /tmp/hammer.conf\nThis file is managed by Puppet. It will be overwritten\nhaproxy - 10.0.2.15 - CentOS 7\nmysql - 10.0.2.15 - CentOS 7\npe-puppet-master - 10.0.2.15 - CentOS 7\nappserver - 10.0.2.15 - CentOS 7\n```", "```\nclass files::scalpel {\n\n  $arch = fact('os.architecture')\n  file {'/tmp/scalpel.conf':\n    ensure => file,\n    owner => 'root',\n    group => 'root',\n    content => 'This file is editable, with individually managed settings!',\n    replace => false,\n  }\n  @@file_line {\"$::fqdn - setting\":\n    path => '/tmp/scalpel.conf',\n    line => \"${::fqdn}: $arch - ${::kernel} - Virtual: ${::is_virtual}\",\n    match => \"^${::fqdn}:\",\n    require => File['/tmp/scalpel.conf'],\n    tag => 'scalpel',\n  }\n  File_line <<| tag == 'scalpel' |>>\n}\n```", "```\ninclude profile::etchosts\n\ninclude files::scalpel\n\nnode 'haproxy' {\n  include profile::loadbalancer\n}\n\nnode 'appserver' {\n  include profile::balancermember\n  class {'profile::appserver': db_pass => 'suP3rP@ssw0rd!' }\n}\n\nnode 'mysql' {\n  include profile::appserver::database\n}\n\n# Provided so nodes don't fail to classify anything\nnode default { }\n```", "```\n[root@haproxy vagrant]# puppet agent -t\nInfo: Using configured environment 'production'\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Retrieving locales\nInfo: Loading facts\nInfo: Caching catalog for haproxy\nInfo: Applying configuration version '1529041736'\nNotice: /Stage[main]/Files::Scalpel/File[/tmp/scalpel.conf]/ensure: defined content as '{md5}2d3ebc675ea9c8c43677c9513f820db0'\nNotice: /Stage[main]/Files::Scalpel/File_line[haproxy - setting]/ensure: created\nNotice: /Stage[main]/Files::Scalpel/File_line[mysql - setting]/ensure: created\nNotice: /Stage[main]/Files::Scalpel/File_line[appserver - setting]/ensure: created\nNotice: /Stage[main]/Files::Scalpel/File_line[pe-puppet-master - setting]/ensure: created\nNotice: Applied catalog in 0.18 seconds\n\n# /tmp/scalpel.conf\nThis file is editable, with individually managed settings!\nhaproxy: x86_64 - Linux - Virtual: true\nmysql: x86_64 - Linux - Virtual: true\nappserver: x86_64 - Linux - Virtual: true\npe-puppet-master: x86_64 - Linux - Virtual: true\n```", "```\n# Our comments now stay in this file, because we're not managing\n# The whole file, just individual lines. This methodology can\n# come in useful once in a great while. This is still configuration\n# drift, so make sure to use it sparingly!\nThis file is editable, with individually managed settings!\nhaproxy: x86_64 - Linux - Virtual: false\nmysql: x86_64 - Linux - Virtual: true\nappserver: x86_64 - Linux - Virtual: true\npe-puppet-master: x86_64 - Linux - Virtual: true\n```", "```\n[root@haproxy vagrant]# puppet agent -t\nInfo: Using configured environment 'production'\nInfo: Retrieving pluginfacts\nInfo: Retrieving plugin\nInfo: Retrieving locales\nInfo: Loading facts\nInfo: Caching catalog for haproxy\nInfo: Applying configuration version '1529042980'\nNotice: /Stage[main]/Files::Scalpel/File_line[haproxy - setting]/ensure:\ncreated\nNotice: Applied catalog in 0.15 seconds\n\n# Our comments now stay in this file, because we're not managing\n# The whole file, just individual lines. This methodology can\n# come in useful once in a great while. This is still configuration\n# drift, so make sure to use it sparingly!\n\nThis file is editable, with individually managed settings!\nhaproxy: x86_64 - Linux - Virtual: true\nmysql: x86_64 - Linux - Virtual: true\nappserver: x86_64 - Linux - Virtual: true\npe-puppet-master: x86_64 - Linux - Virtual: true\n```"]