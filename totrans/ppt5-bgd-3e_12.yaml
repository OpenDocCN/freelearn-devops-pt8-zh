- en: Chapter 12. Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *Manhood is patience. Mastery is nine times patience.* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Ursula K. Le Guin, ''A Wizard of Earthsea''* |'
  prefs: []
  type: TYPE_TB
- en: In this chapter, we will apply ideas from all the previous chapters to see what
    a complete, working Puppet infrastructure looks like, using a demonstration repo
    which illustrates all the principles explained in this book. You can use it as
    the basis of your own Puppet codebase, adapting and expanding it as needed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Putting it all together](img/8880_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting the demo repo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The demo repo is available on GitHub, and you can clone it in the same way
    as for the example repo for this book by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It contains everything you''ll need to manage nodes with Puppet:'
  prefs: []
  type: TYPE_NORMAL
- en: User accounts and SSH keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH and `sudoers` config
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time zone and NTP settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiera data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic Puppet update and apply scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap script for new nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also includes a Vagrantfile so you can try out the repo on a Vagrant virtual
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Copying the repo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are going to use the demo repo as the basis for your own Puppet repo,
    you need to make a copy of it so that you can edit and maintain it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do this in two ways. One is to *fork* the repo to your own GitHub account.
    To do this, log in to GitHub and browse to the demo repo URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/bitfield/control-repo-3.git](https://github.com/bitfield/control-repo-3.git)'
  prefs: []
  type: TYPE_NORMAL
- en: Look for the **Fork** button at the top right of the page and click it. This
    will create a new repo under your account that will contain all the code and history
    from the demo repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new repo in your GitHub account (name it `puppet`, `control-repo`,
    or whatever you prefer).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a note of the repo URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the demo repo to your personal machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rename the original repository remote (so you can get updates in future):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add your new repo as the `origin` remote (using the URL for your repo you noted
    earlier):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Push to the new remote:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your repo now contains a complete copy of the demo repo, which you can edit
    and customize just as you like.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the original repo is updated in the future, you will be able to pull these
    changes into your own version. To get changes from upstream, run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the demo repo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's now time to see how all the ideas from the previous chapters fit together.
    It should be helpful for you to see how a complete Puppet infrastructure works,
    and you can also use this repo as a basis for your own projects. We'll see how
    you can do that later in the chapter, but first, a word or two about the overall
    structure of the repo.
  prefs: []
  type: TYPE_NORMAL
- en: The control repo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **control repo** is a Puppet codebase which contains no modules, or only site-specific
    modules, and it's a good way to organize your Puppet code.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](ch07.html "Chapter 7. Mastering modules"), *Mastering modules*
    we learned about using the `r10k` tool to manage modules with a Puppetfile. The
    Puppetfile specifies which modules we use, with their exact versions, and their
    sources (usually Puppet Forge, but they can also come from remote Git repos).
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, our Puppet repo needs to contain only a Puppetfile, along with our
    Hiera data, and the `role` and `profile` modules.
  prefs: []
  type: TYPE_NORMAL
- en: Module management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because `r10k` expects to manage everything in the `modules/` directory using
    the Puppetfile, our **site-specific modules** are kept in a separate directory
    in the control repo named `site-modules/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this, we need to add the following setting to the `environment.conf`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This adds `site-modules/` to the list of places Puppet will look for modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'As detailed in [Chapter 7](ch07.html "Chapter 7. Mastering modules"), *Mastering
    modules*, we will be using `r10k` and a Puppetfile to manage all third-party modules.
    Accordingly, there is no `modules/` directory in the demo repo: `r10k` will create
    this when it installs the required modules.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the Puppetfile with the list of modules we need for the initial repo.
    Of course, as you adapt the repo to your own needs, you''ll be adding more modules
    to this list (`Puppetfile`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We'll see how these modules are used in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every so often, use the `generate-puppetfile` tool to automatically update
    your module versions and dependencies (see [Chapter 7](ch07.html "Chapter 7. Mastering
    modules"), *Mastering modules* for more about this). Run the following command
    in the repo directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Copy and paste the output back into your Puppetfile, replacing the existing
    `mod` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you may recall from [Chapter 8](ch08.html "Chapter 8. Classes, roles, and
    profiles"), *Classes, roles, and profiles*, we use Hiera data to determine which
    classes and resources should be applied to the node. The common classes are listed
    in `common.yaml`, and there is a per-node data file for the `demo` node which
    includes the `role::demo` class. These classes are included by the following line
    in `manifests/site.pp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Role classes** identify by name what the function of the node is, and define
    what profile classes should be included (see [Chapter 8](ch08.html "Chapter 8. Classes,
    roles, and profiles"), *Classes, roles, and profiles* for more about this).'
  prefs: []
  type: TYPE_NORMAL
- en: It's common practice to keep your role classes in a `role` module, and as this
    is a site-specific module, it's filed under `site-modules/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the `role::demo` role manifest (`site-modules/role/manifests/demo.pp`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Profiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **profile class** identifies by name some specific piece of software or functionality
    required for a role, and declares the necessary resources to manage it (refer
    to [Chapter 8](ch08.html "Chapter 8. Classes, roles, and profiles"), *Classes,
    roles, and profiles* for a more detailed explanation of profiles).
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, there are profiles which are common to all nodes: our user accounts,
    for example, and a few others. It''s logical to keep these in the `common.yaml`
    Hiera data file, so that these profiles will be included by all nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the classes included in `common.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We'll see what each of these profiles do in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the Hiera data, classes are listed in alphabetical order: this can be helpful
    when you have many classes included, and can make it easier to see whether or
    not a given class is already in the list. When you add new classes, make sure
    you keep the list in alphabetical order.'
  prefs: []
  type: TYPE_NORMAL
- en: Users and access control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `puppetlabs/accounts` module provides a standard way to handle user accounts
    with the `accounts::user` class. Accordingly, we will use this to manage our users
    in the `profile::users` class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you prefer to manage user accounts directly in Puppet using the `user` and
    `ssh_authorized_key` resources, see [Chapter 4](ch04.html "Chapter 4. Understanding
    Puppet resources"), *Understanding Puppet resources* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: You could just list the required users as literal resources in your Puppet manifest,
    of course. But instead let's take the data-driven approach described in [Chapter
    6](ch06.html "Chapter 6. Managing data with Hiera"), *Managing data with Hiera*,
    and define our users with Hiera data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the data structure looks like (`data/common.yaml`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the code in the `users` profile to read the data and create the corresponding
    `accounts::user` resources (`site-modules/profile/manifests/users.pp`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we fetch all the user data into a single `$users` hash with
    a call to `lookup()`. We iterate over the hash, declaring an `accounts::user`
    resource for each user, whose attributes are loaded from the hash data.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when using the `accounts::user` resource, the `sshkeys` attribute
    must contain an array of authorized SSH public keys for the user.
  prefs: []
  type: TYPE_NORMAL
- en: SSH configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's good security practice to restrict SSH logins to a set of named users,
    using the `AllowUsers` directive in `/etc/ssh/sshd_config`. We used a Puppet template
    to build this config file in [Chapter 9](ch09.html "Chapter 9. Managing files
    with templates"), *Managing files with templates*. In that example, we got the
    list of allowed users from Hiera, and we will do the same here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the template for the `sshd_config` file (`site-modules/profile/templates/ssh/sshd_config.epp`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We declare that the template takes an `$allow_users` parameter which is an Array
    of String values. Because the `AllowUsers` parameter in `sshd_config` expects
    a space-separated list of users, we call the `join()` function from the standard
    library to create this list from the Puppet array (see [Chapter 7](ch07.html "Chapter 7. Mastering
    modules"), *Mastering modules*, for more about this and other standard library
    functions).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the relevant Hiera data (`data/common.yaml`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We could have just constructed the list from the `$users` hash, which contains
    all known users, but we don't necessarily want everyone on that list to be able
    to log in to every node. Conversely, we may need to allow logins for some accounts
    which are not managed by Puppet. An example is the `ubuntu` account, which is
    required by Vagrant in order to manage the VM properly. If you're not using Vagrant
    boxes, you can remove the `ubuntu` user from this list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to read this Hiera data and populate the template is as follows (`site-modules/profile/manifests/ssh.pp`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This is a package-file-service pattern, which you may remember from [Chapter
    2](ch02.html "Chapter 2. Creating your first manifests"), *Creating your first
    manifests*.
  prefs: []
  type: TYPE_NORMAL
- en: First, we install the `openssh-server` package (this is usually already installed,
    but it's good style to declare the package anyway, since we rely on it for what
    follows).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we manage the `/etc/ssh/sshd_config` file with a template, which we populate
    using Hiera data from a call to `lookup('allow_users', Array[String], 'unique')`.
    This file notifies the `ssh` service whenever it changes.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we declare the `ssh` service and specify that it should be running
    and enabled at boot time.
  prefs: []
  type: TYPE_NORMAL
- en: Sudoers configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sudo` command is the standard Unix mechanism for controlling **user privileges**.
    It's usually used to allow normal users to run commands with the privileges of
    the `root` user.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using `sudo` is preferable to allowing people to log in and run a shell as `root`,
    and `sudo` also audits and records which user ran which commands. You can also
    specify very fine-grained permissions, such as allowing a user to run only a certain
    command as `root`, but no others.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most popular Forge module for managing `sudo` permissions is `saz/sudo`,
    and that''s what we''ll use here. Here''s the Hiera data listing the users with
    `sudo` access (`data/common.yaml`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're not using Vagrant, you can remove the `ubuntu` user from this list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the `profile` class which reads the data (`site-modules/profile/manifests/sudoers.pp`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This allows us to run commands like `sudo` puppet, as a normal user. That''s
    what this part of the manifest does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sudo::conf` resource, provided by the `saz/sudo` module, allows us to
    write arbitrary `sudoers` config as a string: in this case, setting the `secure_path`
    variable.'
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the profile is concerned with configuring passwordless `sudo`
    privileges for each user named in the Hiera array `sudoers`. As usual, we get
    the array from Hiera and proceed to iterate over it with `each`, creating a `sudo::conf`
    resource for each named user.
  prefs: []
  type: TYPE_NORMAL
- en: Time zone and clock synchronization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a handy Forge module for managing server time zones: `saz/timezone`.
    Here''s our `timezone` profile which uses that module to set all nodes to UTC
    (`site-modules/profile/manifests/timezone.pp`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It may seem tempting to set the node's time zone to your own local time zone,
    instead of UTC. However, this idea doesn't scale. When you have nodes in multiple
    time zones, or all over the world, they will all be in different time zones, this
    will lead to very confusing results when you try to compare timestamps from different
    log files. Always set the node's time zone to UTC, and then you'll never be confused
    (at least, not about that).
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we want to make sure that the clocks on all our nodes are synchronized,
    not only with each other, but with the global time standard as a whole. We will
    be using the `puppetlabs/ntp` module for this, and here is the relevant profile
    (`site-modules/profile/manifests/ntp.pp`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As it happens, there's no special configuration to do for NTP (though you could,
    if you wanted, specify a list of time servers to contact, for example).
  prefs: []
  type: TYPE_NORMAL
- en: Puppet configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to configure a regular cron job which pulls any updates from the Git
    repo and runs Puppet to apply the updated manifest.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `profile::puppet` class sets this up (`site-modules/profile/manifests/puppet.pp`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: There are a fair number of resources in this profile, so let's look at each
    of them in turn.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we stop and disable some of the services started by the Puppet package,
    which we won''t need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next follows the cron job which carries out the regular Git updates and Puppet
    runs. The `run-puppet` script looks like this (`site-modules/profile/files/run-puppet.s`h):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the `cron` resource which runs the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The job is set to run every 10 minutes, but you can adjust this if you need
    to.
  prefs: []
  type: TYPE_NORMAL
- en: This looks very much like the `run-puppet` script you may recall from [Chapter
    3](ch03.html "Chapter 3. Managing your Puppet code with Git"), *Managing your
    Puppet code with Git*. The only difference is the extra step to run `r10k puppetfile
    install` (in case you added any new external modules in to the Puppetfile) and
    the addition of the `--environment` switch to `puppet apply`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next resource in `profile::puppet` deploys a convenience script named `papply`,
    which saves you from having to type the whole `puppet apply` command manually
    (`site-modules/profile/files/papply.sh`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Just running `papply` from the command line will apply Puppet immediately, without
    pulling any Git changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to test Puppet changes from a different environment (for example,
    if you have a staging branch checked out at `/etc/puppetlabs/code/environments/staging`),
    you can control this with the `PUPPET_ENV` variable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that `papply` passes its command-line arguments on to Puppet (with `$*`),
    so you can add any arguments supported by the `puppet apply` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We also supply the flag `--strict=warning` to the `puppet apply` command, which
    will cause Puppet to alert you if any potentially problematic code is encountered
    (such as referencing a variable which has not yet been defined). If you want Puppet
    to be really strict, set `--strict=error` instead, which will prevent the manifest
    being applied until all such problems are fixed.
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrap process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to prepare a new node for Puppet management using the demo repo, we
    need to do a number of things:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone the Git repo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run Puppet for the first time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In [Chapter 3](ch03.html "Chapter 3. Managing your Puppet code with Git"),
    *Managing your Puppet code with Git*, we performed these steps manually, but the
    demo repo automates this process (usually known as **bootstrap**). Here is the
    bootstrap script (`scripts/bootstrap.sh`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'It expects to be run with three arguments (we''ll see how this is done in a
    moment): `PUPPET_REPO`, the Git URL for the Puppet repo to clone, `HOSTNAME`,
    the desired hostname for the node, and `BRANCH`, the branch of the Puppet repo
    to use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the script sets the specified hostname:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Next, it looks at the `/etc/lsb-release` file to find out the version of Ubuntu
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This script is Ubuntu-specific, but you can easily modify it to work with a
    different Linux distribution if you need to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The appropriate Puppet Labs APT repository package is downloaded with `wget`
    and installed. Then the `puppet-agent` package is installed along with `git`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step in the bootstrap process is to clone the Git repo into the place
    where Puppet expects to find its manifests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we install `r10k` (in Puppet''s gem context, using the Puppet-specific
    `gem` command) and run `r10k puppetfile install`, to install all the required
    modules listed in the `Puppetfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can run Puppet for the first time, which will configure everything else
    we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, in order to run this script on the target node, we have to copy
    it there first. This step is performed by the `puppify` script (`scripts/puppify`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'First, the script sets the URL of the Git repo to clone (you''ll need to change
    this to your own URL when you adapt the demo repo for your own use):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we specify the key file used to connect to the target node via SSH (again,
    modify this to use your own key):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'After the usage message and processing the command-line arguments, the script
    proceeds to copy the `bootstrap.sh` file to the target node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is to run the bootstrap script on the node, passing it the required
    command-line arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Adapting the repo for your own use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to change some of the data and settings in the demo repo to be
    able to use it yourself. To get you started, here is a table showing which files
    to change and what information you''ll need to supply, with more detailed explanations
    in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File | What to change |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `data/common.yaml` | `users`: Users and SSH keys common to all nodes`allow_users`:
    Users allowed to log in to all nodes`sudoers`: Users allowed to use `sudo` on
    all nodes`classes`: Classes included by all nodes |'
  prefs: []
  type: TYPE_TB
- en: '| `data/nodes/[NODE NAME].yaml` | `users`: Users and SSH keys that only exist
    on this node`allow_users`: Users allowed to log in to only this node`sudoers`:
    Users allowed to use `sudo` on only this node`classes`: Classes included only
    by this node |'
  prefs: []
  type: TYPE_TB
- en: '| `site-modules/role/manifests/` | Role classes for your nodes (include `profile::common`
    in each one) |'
  prefs: []
  type: TYPE_TB
- en: '| `scripts/puppify` | `PUPPET_REPO`: Git URL of your Puppet repo`IDENTITY`:
    Path to the SSH key for initial bootstrap of nodes, if you need one |'
  prefs: []
  type: TYPE_TB
- en: Configuring users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we saw earlier in this chapter, the user accounts managed by Puppet are
    configured from Hiera data. Edit the `data/common.yaml` file, which looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Replace the existing users with the user accounts you want to create on nodes
    (at first it may just be one account, for yourself). Add any SSH keys you want
    to use with them to the `sshkeys` array.
  prefs: []
  type: TYPE_NORMAL
- en: The list of allowed users on each node is controlled by the `allow_users` array.
    Replace the users listed there with your own users.
  prefs: []
  type: TYPE_NORMAL
- en: The list of users with `sudo` privileges is controlled by the `sudoers` array.
    Replace the users listed there with those of your own users which you want to
    have root privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Adding per-node data files and role classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Per-node Hiera data, including classes, is kept in the `data/nodes/` directory.
    When you add a new node, add a data file for it named `data/nodes/NODE_NAME.yaml`,
    replacing `NODE_NAME` with the node's hostname.
  prefs: []
  type: TYPE_NORMAL
- en: Include role classes suitable to the node (see [Chapter 8](ch08.html "Chapter 8. Classes,
    roles, and profiles"), *Classes, roles, and profiles* for more information about
    this). If you don't specify any classes in the per-node file, the node will just
    include the classes listed in `common.yaml`. This will be enough to set your node
    up with your SSH account and key, and validate that the bootstrap process works
    properly. Later, you can start adding role classes to the per-node file to get
    actual work done.
  prefs: []
  type: TYPE_NORMAL
- en: Add your role classes to the `site-modules/role/manifests/` directory, along
    the lines of `role::demo`.
  prefs: []
  type: TYPE_NORMAL
- en: If there are users which you only need on a specific node, and you don't want
    them to exist on all the nodes, list them under `users` in the per-node data file.
    If they need to log in via SSH, add them to `allow_users` too. Similarly, if you
    need a user to have `sudo` rights only on this node, list them under `sudoers`
    in the per-node data file.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the bootstrap credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `scripts/puppify` file, edit the `PUPPET_REPO` setting to the URL of
    your own Git repo. If you need an SSH key to connect to the target node (for example,
    if you're using Amazon EC2, in which case you'll have a `.pem` file containing
    your key which you downloaded from the AWS console), add its location to the `IDENTITY`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping a new node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you'd like to try out the demo repo on a Vagrant box, there is a suitable
    Vagrantfile included within the repo directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't have Vagrant installed, follow the instructions in the *Installing
    VirtualBox and Vagrant* section of [Chapter 1](ch01.html "Chapter 1. Getting started
    with Puppet"), *Getting Started with Puppet* first.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping a Vagrant VM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following command in the repo directory to start your Vagrant VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrapping physical or cloud nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alternatively, you can bootstrap a physical or cloud node using the repo. All
    you will need is the IP address or DNS name of the target node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the Puppet repo, replacing `TARGET_SERVER` with
    the address or name of the node, and `HOSTNAME` with the hostname that you want
    to set (for example `demo`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You will see some output related to copying the bootstrap script, installing
    the Puppet package, cloning the repo, installing the Forge modules, and running
    Puppet for the first time. Once this is completed, the node should be ready, and
    you can try logging in to it using your own SSH account.
  prefs: []
  type: TYPE_NORMAL
- en: Using other distributions and providers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `puppify` and `bootstrap` scripts included with the demo repo will work
    for an Ubuntu node on Amazon EC2, but you can modify them to work with any Linux
    distribution or server provider.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you're using a **Google Compute Engine** (**GCE**) instance,
    you can edit the `puppify` script to replace the `ssh` command with `gcloud compute
    ssh`. If you're using a Digital Ocean droplet, you can add your SSH key to the
    droplet when you provision it via the web interface, and you can modify the `puppify`
    script to log in as the `root` user instead of `ubuntu`.
  prefs: []
  type: TYPE_NORMAL
- en: If you're managing nodes on several different platforms, you may find it more
    convenient to use a customized `puppify` script for each one, naming them (for
    example) `puppify_ec2`, `puppify_linode`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: If you're not using Ubuntu or Debian, you may need to make some changes to the
    `bootstrap.sh` script. For example, if you're using Red Hat Linux or CentOS, you'll
    need to have the script install Puppet via `yum` instead of `apt`. Again, if you're
    managing nodes on multiple OS distributions, you may need to maintain a custom
    bootstrap script for each one.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we've introduced the example control repo and seen how to download
    it. We've explained the control repo pattern, and how it works with `r10k` and
    the Puppetfile to manage third-party and local modules. We've learned how to fork
    the repo and pull changes from upstream.
  prefs: []
  type: TYPE_NORMAL
- en: We've looked at the example role and profile classes, and seen how Puppet can
    use Hiera data to configure user accounts, SSH keys, allowed users, and `sudoers`
    privileges. We've covered the use of Forge modules to manage time zone setting
    and NTP synchronization. Additionally, we've explored the resources and scripts
    necessary to control automatic Puppet updates and runs.
  prefs: []
  type: TYPE_NORMAL
- en: The demo repo contains bootstrap scripts to help you put a freshly-provisioned
    node under Puppet control, and we've examined how these scripts work in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we've learned how to adapt the demo repo for your own site, and outlined
    how to add your own users and access settings, and your own common profiles, and
    per-node role classes. We 've seen how to plug in your own information to the
    bootstrap scripts and how to use them to bootstrap a new node.
  prefs: []
  type: TYPE_NORMAL
- en: The beginning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you've enjoyed this book and have learned something useful from it; I
    certainly learned a lot from writing it. However, there's only so much you can
    learn from books. As Proust wrote, "We don't receive wisdom; we must discover
    it for ourselves after a journey that no one can take for us or spare us."
  prefs: []
  type: TYPE_NORMAL
- en: It's good to have a friend point us in the right direction and come with us
    a little way for moral support, but then we need to walk on by ourselves. I hope
    that this book will be the beginning of your journey, not the end.
  prefs: []
  type: TYPE_NORMAL
- en: The world-famous classical guitarist John Williams was once asked how long it
    took him to learn to play the guitar. "I'm still learning," he said.
  prefs: []
  type: TYPE_NORMAL
