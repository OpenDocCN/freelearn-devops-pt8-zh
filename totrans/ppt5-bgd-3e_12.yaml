- en: Chapter 12. Putting it all together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 将一切汇集在一起
- en: '|   | *Manhood is patience. Mastery is nine times patience.* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *男人的气度是耐心。掌握之道是九分耐心。* |   |'
- en: '|   | --*Ursula K. Le Guin, ''A Wizard of Earthsea''* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*厄休拉·K·勒古恩，《地海巫师》* |'
- en: In this chapter, we will apply ideas from all the previous chapters to see what
    a complete, working Puppet infrastructure looks like, using a demonstration repo
    which illustrates all the principles explained in this book. You can use it as
    the basis of your own Puppet codebase, adapting and expanding it as needed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将应用前面所有章节中的思想，看看完整的、工作的 Puppet 基础设施是什么样子，使用一个展示所有本书中解释的原则的示例仓库。你可以将其作为自己
    Puppet 代码库的基础，并根据需要进行调整和扩展。
- en: '![Putting it all together](img/8880_12_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![将一切汇集在一起](img/8880_12_01.jpg)'
- en: Getting the demo repo
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取示例仓库
- en: 'The demo repo is available on GitHub, and you can clone it in the same way
    as for the example repo for this book by running this command:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 示例仓库可以在 GitHub 上找到，你可以像克隆本书示例仓库一样，通过运行以下命令来克隆它：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It contains everything you''ll need to manage nodes with Puppet:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含了你管理节点所需的一切内容：
- en: User accounts and SSH keys
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户账户和 SSH 密钥
- en: SSH and `sudoers` config
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH 和 `sudoers` 配置
- en: Time zone and NTP settings
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时区和 NTP 设置
- en: Hiera data
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hiera 数据
- en: Automatic Puppet update and apply scripts
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动 Puppet 更新和应用脚本
- en: Bootstrap script for new nodes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新节点的引导脚本
- en: It also includes a Vagrantfile so you can try out the repo on a Vagrant virtual
    machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包含一个 Vagrantfile，以便你可以在 Vagrant 虚拟机上尝试这个仓库。
- en: Copying the repo
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制仓库
- en: If you are going to use the demo repo as the basis for your own Puppet repo,
    you need to make a copy of it so that you can edit and maintain it yourself.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算将示例仓库作为自己 Puppet 仓库的基础，你需要将其复制一份，以便自己编辑和维护。
- en: 'You can do this in two ways. One is to *fork* the repo to your own GitHub account.
    To do this, log in to GitHub and browse to the demo repo URL:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过两种方式做到这一点。一种是将仓库 *fork* 到自己的 GitHub 账户中。为此，请登录 GitHub 并浏览到示例仓库 URL：
- en: '[https://github.com/bitfield/control-repo-3.git](https://github.com/bitfield/control-repo-3.git)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/bitfield/control-repo-3.git](https://github.com/bitfield/control-repo-3.git)'
- en: Look for the **Fork** button at the top right of the page and click it. This
    will create a new repo under your account that will contain all the code and history
    from the demo repo.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面右上角找到 **Fork** 按钮并点击它。这将会在你的账户下创建一个新仓库，包含示例仓库中的所有代码和历史。
- en: 'Alternatively, you can follow these steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以按照以下步骤操作：
- en: Create a new repo in your GitHub account (name it `puppet`, `control-repo`,
    or whatever you prefer).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 GitHub 账户中创建一个新仓库（命名为 `puppet`、`control-repo`，或其他你喜欢的名字）。
- en: Make a note of the repo URL.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记下仓库的 URL。
- en: 'Clone the demo repo to your personal machine:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例仓库克隆到你的个人机器上：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Rename the original repository remote (so you can get updates in future):'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名原始仓库的远程（以便将来能获得更新）：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add your new repo as the `origin` remote (using the URL for your repo you noted
    earlier):'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的新仓库添加为 `origin` 远程仓库（使用你之前记下的仓库 URL）：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Push to the new remote:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送到新的远程仓库：
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Your repo now contains a complete copy of the demo repo, which you can edit
    and customize just as you like.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的仓库包含了完整的示例仓库副本，你可以根据需要编辑和定制它。
- en: 'As the original repo is updated in the future, you will be able to pull these
    changes into your own version. To get changes from upstream, run the following
    commands:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 随着原始仓库未来的更新，你将能够将这些更改拉取到你自己的版本中。要从上游获取更改，请运行以下命令：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Understanding the demo repo
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解示例仓库
- en: It's now time to see how all the ideas from the previous chapters fit together.
    It should be helpful for you to see how a complete Puppet infrastructure works,
    and you can also use this repo as a basis for your own projects. We'll see how
    you can do that later in the chapter, but first, a word or two about the overall
    structure of the repo.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看前面章节中的所有思想如何结合起来了。了解完整的 Puppet 基础设施是如何工作的对你应该很有帮助，你也可以将这个仓库作为自己项目的基础。我们将在本章稍后介绍如何做到这一点，但首先，我们来简单了解一下仓库的整体结构。
- en: The control repo
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制仓库
- en: A **control repo** is a Puppet codebase which contains no modules, or only site-specific
    modules, and it's a good way to organize your Puppet code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制仓库**是一个 Puppet 代码库，它不包含模块，或者只包含特定站点的模块，是组织 Puppet 代码的好方法。'
- en: In [Chapter 7](ch07.html "Chapter 7. Mastering modules"), *Mastering modules*
    we learned about using the `r10k` tool to manage modules with a Puppetfile. The
    Puppetfile specifies which modules we use, with their exact versions, and their
    sources (usually Puppet Forge, but they can also come from remote Git repos).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第七章](ch07.html "第七章. 精通模块")，*精通模块*中，我们学习了如何使用 `r10k` 工具通过 Puppetfile 管理模块。Puppetfile
    指定我们使用哪些模块，及其确切版本和来源（通常是 Puppet Forge，也可以来自远程 Git 仓库）。
- en: Therefore, our Puppet repo needs to contain only a Puppetfile, along with our
    Hiera data, and the `role` and `profile` modules.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的 Puppet 仓库只需要包含一个 Puppetfile，以及我们的 Hiera 数据和 `role`、`profile` 模块。
- en: Module management
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块管理
- en: Because `r10k` expects to manage everything in the `modules/` directory using
    the Puppetfile, our **site-specific modules** are kept in a separate directory
    in the control repo named `site-modules/`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `r10k` 期望通过 Puppetfile 管理 `modules/` 目录中的所有内容，我们的 **站点特定模块** 保存在控制仓库中一个名为
    `site-modules/` 的单独目录下。
- en: 'To enable this, we need to add the following setting to the `environment.conf`
    file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用此功能，我们需要将以下设置添加到 `environment.conf` 文件中：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This adds `site-modules/` to the list of places Puppet will look for modules.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 `site-modules/` 添加到 Puppet 查找模块的路径列表中。
- en: 'As detailed in [Chapter 7](ch07.html "Chapter 7. Mastering modules"), *Mastering
    modules*, we will be using `r10k` and a Puppetfile to manage all third-party modules.
    Accordingly, there is no `modules/` directory in the demo repo: `r10k` will create
    this when it installs the required modules.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第七章](ch07.html "第七章. 精通模块")，*精通模块*中详细说明的那样，我们将使用 `r10k` 和 Puppetfile 来管理所有第三方模块。因此，演示仓库中没有
    `modules/` 目录：`r10k` 会在安装所需模块时创建此目录。
- en: 'Here''s the Puppetfile with the list of modules we need for the initial repo.
    Of course, as you adapt the repo to your own needs, you''ll be adding more modules
    to this list (`Puppetfile`):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们初始仓库所需模块列表的 Puppetfile。当然，随着你根据自己的需求调整仓库，你会将更多的模块添加到这个列表中（`Puppetfile`）：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We'll see how these modules are used in the following sections.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中看到这些模块的使用方式。
- en: 'Every so often, use the `generate-puppetfile` tool to automatically update
    your module versions and dependencies (see [Chapter 7](ch07.html "Chapter 7. Mastering
    modules"), *Mastering modules* for more about this). Run the following command
    in the repo directory:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 定期使用 `generate-puppetfile` 工具自动更新你的模块版本和依赖项（更多内容请参见[第七章](ch07.html "第七章. 精通模块")，*精通模块*）。在仓库目录中运行以下命令：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Copy and paste the output back into your Puppetfile, replacing the existing
    `mod` statements.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出复制并粘贴回你的 Puppetfile，替换现有的 `mod` 语句。
- en: Classes
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: 'As you may recall from [Chapter 8](ch08.html "Chapter 8. Classes, roles, and
    profiles"), *Classes, roles, and profiles*, we use Hiera data to determine which
    classes and resources should be applied to the node. The common classes are listed
    in `common.yaml`, and there is a per-node data file for the `demo` node which
    includes the `role::demo` class. These classes are included by the following line
    in `manifests/site.pp`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能还记得的，[第八章](ch08.html "第八章. 类、角色和配置文件")，*类、角色和配置文件*中，我们使用 Hiera 数据来确定哪些类和资源应该应用到节点。常见的类列在
    `common.yaml` 中，`demo` 节点有一个专门的数据文件，其中包括 `role::demo` 类。这些类通过 `manifests/site.pp`
    中的以下行包含：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Roles
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 角色
- en: '**Role classes** identify by name what the function of the node is, and define
    what profile classes should be included (see [Chapter 8](ch08.html "Chapter 8. Classes,
    roles, and profiles"), *Classes, roles, and profiles* for more about this).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**角色类**通过名称标识节点的功能，并定义应包含哪些配置文件类（更多内容请参见[第八章](ch08.html "第八章. 类、角色和配置文件")，*类、角色和配置文件*）。'
- en: It's common practice to keep your role classes in a `role` module, and as this
    is a site-specific module, it's filed under `site-modules/`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 常见做法是将角色类保存在一个 `role` 模块中，由于这是一个站点特定的模块，它被归档在 `site-modules/` 下。
- en: 'Here''s the `role::demo` role manifest (`site-modules/role/manifests/demo.pp`):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `role::demo` 角色清单（`site-modules/role/manifests/demo.pp`）：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Profiles
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件
- en: A **profile class** identifies by name some specific piece of software or functionality
    required for a role, and declares the necessary resources to manage it (refer
    to [Chapter 8](ch08.html "Chapter 8. Classes, roles, and profiles"), *Classes,
    roles, and profiles* for a more detailed explanation of profiles).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置文件类**通过名称标识角色所需的某个特定软件或功能，并声明管理该功能所需的资源（有关配置文件的更详细说明，请参见[第八章](ch08.html
    "第八章. 类、角色和配置文件")，*类、角色和配置文件*）。'
- en: 'Often, there are profiles which are common to all nodes: our user accounts,
    for example, and a few others. It''s logical to keep these in the `common.yaml`
    Hiera data file, so that these profiles will be included by all nodes.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，所有节点都会有一些公共的配置文件：例如我们的用户账户，还有一些其他的文件。将这些配置文件保存在`common.yaml`的Hiera数据文件中是合理的，这样所有节点都会包含这些配置文件。
- en: 'Here are the classes included in `common.yaml`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`common.yaml`中包含的类：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We'll see what each of these profiles do in the following sections.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中查看这些配置文件的作用。
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'In the Hiera data, classes are listed in alphabetical order: this can be helpful
    when you have many classes included, and can make it easier to see whether or
    not a given class is already in the list. When you add new classes, make sure
    you keep the list in alphabetical order.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hiera数据中，类按字母顺序列出：当你包含许多类时，这非常有帮助，能够让你更容易查看某个类是否已经在列表中。当你添加新的类时，请确保保持列表的字母顺序。
- en: Users and access control
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户和访问控制
- en: The `puppetlabs/accounts` module provides a standard way to handle user accounts
    with the `accounts::user` class. Accordingly, we will use this to manage our users
    in the `profile::users` class.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`puppetlabs/accounts`模块提供了一种标准方法，通过`accounts::user`类来处理用户账户。因此，我们将使用这个模块在`profile::users`类中管理我们的用户。'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you prefer to manage user accounts directly in Puppet using the `user` and
    `ssh_authorized_key` resources, see [Chapter 4](ch04.html "Chapter 4. Understanding
    Puppet resources"), *Understanding Puppet resources* for more information.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更倾向于直接在Puppet中使用`user`和`ssh_authorized_key`资源来管理用户账户，请参阅[第4章](ch04.html "第4章。理解Puppet资源")，*理解Puppet资源*，了解更多信息。
- en: You could just list the required users as literal resources in your Puppet manifest,
    of course. But instead let's take the data-driven approach described in [Chapter
    6](ch06.html "Chapter 6. Managing data with Hiera"), *Managing data with Hiera*,
    and define our users with Hiera data.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以直接在Puppet清单中列出所需的用户作为字面量资源。但我们将采用[第6章](ch06.html "第6章。使用Hiera管理数据")，*使用Hiera管理数据*中描述的数据驱动方法，通过Hiera数据定义用户。
- en: 'This is what the data structure looks like (`data/common.yaml`):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是数据结构的样子（`data/common.yaml`）：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s the code in the `users` profile to read the data and create the corresponding
    `accounts::user` resources (`site-modules/profile/manifests/users.pp`):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`users`配置文件中的代码，用于读取数据并创建相应的`accounts::user`资源（`site-modules/profile/manifests/users.pp`）：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, we fetch all the user data into a single `$users` hash with
    a call to `lookup()`. We iterate over the hash, declaring an `accounts::user`
    resource for each user, whose attributes are loaded from the hash data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们通过调用`lookup()`将所有用户数据提取到一个`$users`哈希表中。然后我们遍历这个哈希表，为每个用户声明一个`accounts::user`资源，其属性从哈希表数据中加载。
- en: Note that when using the `accounts::user` resource, the `sshkeys` attribute
    must contain an array of authorized SSH public keys for the user.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用`accounts::user`资源时，`sshkeys`属性必须包含一个用户的授权SSH公钥数组。
- en: SSH configuration
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SSH配置
- en: It's good security practice to restrict SSH logins to a set of named users,
    using the `AllowUsers` directive in `/etc/ssh/sshd_config`. We used a Puppet template
    to build this config file in [Chapter 9](ch09.html "Chapter 9. Managing files
    with templates"), *Managing files with templates*. In that example, we got the
    list of allowed users from Hiera, and we will do the same here.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 限制SSH登录仅允许特定用户使用是一个良好的安全实践，使用`/etc/ssh/sshd_config`中的`AllowUsers`指令。我们在[第9章](ch09.html
    "第9章。使用模板管理文件")，*使用模板管理文件*中使用了一个Puppet模板来构建此配置文件。在那个例子中，我们从Hiera获取了允许的用户列表，并且在这里我们也将使用相同的方法。
- en: 'Here''s the template for the `sshd_config` file (`site-modules/profile/templates/ssh/sshd_config.epp`):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`sshd_config`文件的模板（`site-modules/profile/templates/ssh/sshd_config.epp`）：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We declare that the template takes an `$allow_users` parameter which is an Array
    of String values. Because the `AllowUsers` parameter in `sshd_config` expects
    a space-separated list of users, we call the `join()` function from the standard
    library to create this list from the Puppet array (see [Chapter 7](ch07.html "Chapter 7. Mastering
    modules"), *Mastering modules*, for more about this and other standard library
    functions).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明模板接受一个`$allow_users`参数，该参数是一个字符串数组。由于`sshd_config`中的`AllowUsers`参数需要一个用空格分隔的用户列表，我们使用标准库中的`join()`函数从Puppet数组中创建这个列表（参见[第7章](ch07.html
    "第7章。掌握模块")，*掌握模块*，了解更多有关此及其他标准库函数的信息）。
- en: 'Here''s the relevant Hiera data (`data/common.yaml`):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相关的Hiera数据（`data/common.yaml`）：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We could have just constructed the list from the `$users` hash, which contains
    all known users, but we don't necessarily want everyone on that list to be able
    to log in to every node. Conversely, we may need to allow logins for some accounts
    which are not managed by Puppet. An example is the `ubuntu` account, which is
    required by Vagrant in order to manage the VM properly. If you're not using Vagrant
    boxes, you can remove the `ubuntu` user from this list.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以仅从`$users`哈希构建这个列表，`$users`哈希包含了所有已知的用户，但我们不一定希望列表中的每个人都能够登录到每个节点。相反，我们可能需要允许一些由Puppet未管理的帐户登录。例如，`ubuntu`账户是Vagrant所需的，以便正确管理虚拟机。如果你不使用Vagrant盒子，可以从这个列表中移除`ubuntu`用户。
- en: 'The code to read this Hiera data and populate the template is as follows (`site-modules/profile/manifests/ssh.pp`):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是读取Hiera数据并填充模板的代码（`site-modules/profile/manifests/ssh.pp`）：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is a package-file-service pattern, which you may remember from [Chapter
    2](ch02.html "Chapter 2. Creating your first manifests"), *Creating your first
    manifests*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包-文件-服务模式，你可能还记得来自[第二章](ch02.html "第2章 创建你的第一个清单")，*创建你的第一个清单*。
- en: First, we install the `openssh-server` package (this is usually already installed,
    but it's good style to declare the package anyway, since we rely on it for what
    follows).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们安装`openssh-server`包（通常它已经安装，但声明这个包仍然是好的做法，因为我们依赖它来完成接下来的操作）。
- en: Next, we manage the `/etc/ssh/sshd_config` file with a template, which we populate
    using Hiera data from a call to `lookup('allow_users', Array[String], 'unique')`.
    This file notifies the `ssh` service whenever it changes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用模板管理`/etc/ssh/sshd_config`文件，并通过调用`lookup('allow_users', Array[String],
    'unique')`从Hiera数据中填充该文件。每当文件发生更改时，它都会通知`ssh`服务。
- en: Finally, we declare the `ssh` service and specify that it should be running
    and enabled at boot time.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们声明`ssh`服务，并指定它应该在启动时运行并启用。
- en: Sudoers configuration
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sudoers配置
- en: The `sudo` command is the standard Unix mechanism for controlling **user privileges**.
    It's usually used to allow normal users to run commands with the privileges of
    the `root` user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo`命令是控制**用户权限**的标准Unix机制。它通常用于允许普通用户以`root`用户的权限运行命令。'
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Using `sudo` is preferable to allowing people to log in and run a shell as `root`,
    and `sudo` also audits and records which user ran which commands. You can also
    specify very fine-grained permissions, such as allowing a user to run only a certain
    command as `root`, but no others.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sudo`优于允许用户以`root`身份登录并运行shell，而且`sudo`还会审计并记录哪个用户运行了哪些命令。你还可以指定非常细粒度的权限，例如允许用户以`root`身份运行某个命令，但不允许运行其他命令。
- en: 'The most popular Forge module for managing `sudo` permissions is `saz/sudo`,
    and that''s what we''ll use here. Here''s the Hiera data listing the users with
    `sudo` access (`data/common.yaml`):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 管理`sudo`权限的最流行Forge模块是`saz/sudo`，我们将在这里使用它。以下是列出具有`sudo`访问权限的用户的Hiera数据（`data/common.yaml`）：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you're not using Vagrant, you can remove the `ubuntu` user from this list.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不使用Vagrant，可以从这个列表中移除`ubuntu`用户。
- en: 'Here''s the `profile` class which reads the data (`site-modules/profile/manifests/sudoers.pp`):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是读取数据的`profile`类（`site-modules/profile/manifests/sudoers.pp`）：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This allows us to run commands like `sudo` puppet, as a normal user. That''s
    what this part of the manifest does:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们以普通用户身份运行像`sudo puppet`这样的命令。这部分清单就是这么做的：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `sudo::conf` resource, provided by the `saz/sudo` module, allows us to
    write arbitrary `sudoers` config as a string: in this case, setting the `secure_path`
    variable.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo::conf`资源由`saz/sudo`模块提供，它允许我们将任意的`sudoers`配置作为字符串编写：在这种情况下，设置`secure_path`变量。'
- en: The remainder of the profile is concerned with configuring passwordless `sudo`
    privileges for each user named in the Hiera array `sudoers`. As usual, we get
    the array from Hiera and proceed to iterate over it with `each`, creating a `sudo::conf`
    resource for each named user.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件的其余部分负责为每个在Hiera数组`sudoers`中列出的用户配置无密码`sudo`权限。像往常一样，我们从Hiera获取数组，然后使用`each`遍历它，为每个命名的用户创建`sudo::conf`资源。
- en: Time zone and clock synchronization
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时区和时钟同步
- en: 'There is a handy Forge module for managing server time zones: `saz/timezone`.
    Here''s our `timezone` profile which uses that module to set all nodes to UTC
    (`site-modules/profile/manifests/timezone.pp`):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个方便的Forge模块可以用来管理服务器时区：`saz/timezone`。以下是我们的`timezone`配置文件，它使用该模块将所有节点设置为UTC（`site-modules/profile/manifests/timezone.pp`）：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It may seem tempting to set the node's time zone to your own local time zone,
    instead of UTC. However, this idea doesn't scale. When you have nodes in multiple
    time zones, or all over the world, they will all be in different time zones, this
    will lead to very confusing results when you try to compare timestamps from different
    log files. Always set the node's time zone to UTC, and then you'll never be confused
    (at least, not about that).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会让人很想将节点的时区设置为你自己的本地时区，而不是UTC。然而，这种做法无法扩展。当你的节点分布在多个时区，或者分布在世界各地时，它们会处于不同的时区，这将导致你在尝试比较来自不同日志文件的时间戳时产生非常混乱的结果。始终将节点的时区设置为UTC，这样你就不会感到困惑了（至少，不是关于这个问题）。
- en: 'Similarly, we want to make sure that the clocks on all our nodes are synchronized,
    not only with each other, but with the global time standard as a whole. We will
    be using the `puppetlabs/ntp` module for this, and here is the relevant profile
    (`site-modules/profile/manifests/ntp.pp`):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们希望确保所有节点的时钟不仅相互同步，而且与全球时间标准同步。我们将使用`puppetlabs/ntp`模块来实现这一点，这里是相关的配置文件（`site-modules/profile/manifests/ntp.pp`）：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As it happens, there's no special configuration to do for NTP (though you could,
    if you wanted, specify a list of time servers to contact, for example).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，NTP不需要进行特殊配置（尽管如果你愿意，你可以指定一个时间服务器的列表，例如）。
- en: Puppet configuration
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet配置
- en: We need to configure a regular cron job which pulls any updates from the Git
    repo and runs Puppet to apply the updated manifest.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要配置一个定期的cron任务，从Git仓库拉取更新并运行Puppet以应用更新后的清单。
- en: 'The `profile::puppet` class sets this up (`site-modules/profile/manifests/puppet.pp`):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`profile::puppet`类设置了这个配置（`site-modules/profile/manifests/puppet.pp`）：'
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There are a fair number of resources in this profile, so let's look at each
    of them in turn.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置文件中有相当多的资源，让我们逐一查看它们。
- en: 'First, we stop and disable some of the services started by the Puppet package,
    which we won''t need:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们停止并禁用Puppet包启动的一些不需要的服务：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next follows the cron job which carries out the regular Git updates and Puppet
    runs. The `run-puppet` script looks like this (`site-modules/profile/files/run-puppet.s`h):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是定期执行Git更新和Puppet运行的cron任务。`run-puppet`脚本如下所示（`site-modules/profile/files/run-puppet.sh`）：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here''s the `cron` resource which runs the script:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是运行该脚本的`cron`资源：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The job is set to run every 10 minutes, but you can adjust this if you need
    to.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务被设置为每10分钟运行一次，但你可以根据需要进行调整。
- en: This looks very much like the `run-puppet` script you may recall from [Chapter
    3](ch03.html "Chapter 3. Managing your Puppet code with Git"), *Managing your
    Puppet code with Git*. The only difference is the extra step to run `r10k puppetfile
    install` (in case you added any new external modules in to the Puppetfile) and
    the addition of the `--environment` switch to `puppet apply`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来很像你可能记得的`run-puppet`脚本，来自于[第3章](ch03.html "第3章：使用Git管理Puppet代码")，*使用Git管理Puppet代码*。唯一的区别是额外的步骤来运行`r10k
    puppetfile install`（如果你在Puppetfile中添加了新的外部模块），以及向`puppet apply`添加了`--environment`开关。
- en: 'The next resource in `profile::puppet` deploys a convenience script named `papply`,
    which saves you from having to type the whole `puppet apply` command manually
    (`site-modules/profile/files/papply.sh`):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`profile::puppet`中的下一个资源部署了一个名为`papply`的便利脚本，它能帮助你避免手动输入整个`puppet apply`命令（`site-modules/profile/files/papply.sh`）：'
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Just running `papply` from the command line will apply Puppet immediately, without
    pulling any Git changes.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 只需从命令行运行`papply`就会立即应用Puppet，而不需要拉取任何Git更改。
- en: 'If you want to test Puppet changes from a different environment (for example,
    if you have a staging branch checked out at `/etc/puppetlabs/code/environments/staging`),
    you can control this with the `PUPPET_ENV` variable, as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想从不同的环境中测试Puppet的更改（例如，如果你在`/etc/puppetlabs/code/environments/staging`中检出了一个staging分支），你可以通过以下方式使用`PUPPET_ENV`变量来控制这一点：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Note that `papply` passes its command-line arguments on to Puppet (with `$*`),
    so you can add any arguments supported by the `puppet apply` command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`papply`会将其命令行参数传递给Puppet（使用`$*`），因此你可以添加任何`puppet apply`命令支持的参数：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tip
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We also supply the flag `--strict=warning` to the `puppet apply` command, which
    will cause Puppet to alert you if any potentially problematic code is encountered
    (such as referencing a variable which has not yet been defined). If you want Puppet
    to be really strict, set `--strict=error` instead, which will prevent the manifest
    being applied until all such problems are fixed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为 `puppet apply` 命令提供了 `--strict=warning` 标志，这将导致 Puppet 在遇到潜在问题代码时发出警告（例如引用了尚未定义的变量）。如果你希望
    Puppet 更加严格，可以改为设置 `--strict=error`，这将阻止在所有问题解决之前应用清单。
- en: The bootstrap process
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导过程
- en: 'In order to prepare a new node for Puppet management using the demo repo, we
    need to do a number of things:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用示例仓库为 Puppet 管理准备新节点，我们需要做一些事情：
- en: Install Puppet
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Puppet
- en: Clone the Git repo
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆 Git 仓库
- en: Run Puppet for the first time
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一次运行 Puppet
- en: 'In [Chapter 3](ch03.html "Chapter 3. Managing your Puppet code with Git"),
    *Managing your Puppet code with Git*, we performed these steps manually, but the
    demo repo automates this process (usually known as **bootstrap**). Here is the
    bootstrap script (`scripts/bootstrap.sh`):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章：使用 Git 管理你的 Puppet 代码")，*使用 Git 管理你的 Puppet 代码*，我们手动执行了这些步骤，但示例仓库自动化了这个过程（通常称为**引导**）。这里是引导脚本（`scripts/bootstrap.sh`）：
- en: '[PRE29]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It expects to be run with three arguments (we''ll see how this is done in a
    moment): `PUPPET_REPO`, the Git URL for the Puppet repo to clone, `HOSTNAME`,
    the desired hostname for the node, and `BRANCH`, the branch of the Puppet repo
    to use.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 它期望通过三个参数运行（稍后我们将看到如何做到这一点）：`PUPPET_REPO`，要克隆的 Puppet 仓库的 Git URL，`HOSTNAME`，目标节点的主机名，和
    `BRANCH`，使用的 Puppet 仓库的分支。
- en: 'First, the script sets the specified hostname:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，脚本设置指定的主机名：
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Next, it looks at the `/etc/lsb-release` file to find out the version of Ubuntu
    installed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，它查看 `/etc/lsb-release` 文件以找出已安装的 Ubuntu 版本。
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This script is Ubuntu-specific, but you can easily modify it to work with a
    different Linux distribution if you need to.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本是专门针对 Ubuntu 的，但如果需要，你可以轻松修改它以适配其他 Linux 发行版。
- en: 'The appropriate Puppet Labs APT repository package is downloaded with `wget`
    and installed. Then the `puppet-agent` package is installed along with `git`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `wget` 下载适当的 Puppet Labs APT 仓库软件包并安装。然后安装 `puppet-agent` 包以及 `git`：
- en: '[PRE31]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The next step in the bootstrap process is to clone the Git repo into the place
    where Puppet expects to find its manifests:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 引导过程中的下一步是将 Git 仓库克隆到 Puppet 期望找到其清单的位置：
- en: '[PRE32]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we install `r10k` (in Puppet''s gem context, using the Puppet-specific
    `gem` command) and run `r10k puppetfile install`, to install all the required
    modules listed in the `Puppetfile`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们安装 `r10k`（在 Puppet 的 gem 环境中，使用 Puppet 特定的 `gem` 命令）并运行 `r10k puppetfile
    install`，以安装 `Puppetfile` 中列出的所有必要模块：
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now we can run Puppet for the first time, which will configure everything else
    we need:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以第一次运行 Puppet，它将配置我们所需的其他所有内容：
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Of course, in order to run this script on the target node, we have to copy
    it there first. This step is performed by the `puppify` script (`scripts/puppify`):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为了在目标节点上运行这个脚本，我们必须先将它复制到目标节点。这一步通过 `puppify` 脚本（`scripts/puppify`）完成：
- en: '[PRE35]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'First, the script sets the URL of the Git repo to clone (you''ll need to change
    this to your own URL when you adapt the demo repo for your own use):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，脚本设置要克隆的 Git 仓库的 URL（在调整示例仓库以供自己使用时，你需要更改为自己的 URL）：
- en: '[PRE36]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, we specify the key file used to connect to the target node via SSH (again,
    modify this to use your own key):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们指定用于通过 SSH 连接目标节点的密钥文件（再次，修改为你自己的密钥）：
- en: '[PRE37]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'After the usage message and processing the command-line arguments, the script
    proceeds to copy the `bootstrap.sh` file to the target node:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示使用信息并处理命令行参数之后，脚本继续将 `bootstrap.sh` 文件复制到目标节点：
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The final step is to run the bootstrap script on the node, passing it the required
    command-line arguments:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是，在节点上运行引导脚本，并传递所需的命令行参数：
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Adapting the repo for your own use
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将仓库调整为适合自己的使用
- en: 'You will need to change some of the data and settings in the demo repo to be
    able to use it yourself. To get you started, here is a table showing which files
    to change and what information you''ll need to supply, with more detailed explanations
    in the following sections:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要更改示例仓库中的一些数据和设置，以便能自己使用。为了帮助你入门，这里有一个表格，列出了需要更改的文件以及需要提供的信息，详细解释将在后续章节中提供：
- en: '| File | What to change |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 文件 | 需要更改的内容 |'
- en: '| --- | --- |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `data/common.yaml` | `users`: Users and SSH keys common to all nodes`allow_users`:
    Users allowed to log in to all nodes`sudoers`: Users allowed to use `sudo` on
    all nodes`classes`: Classes included by all nodes |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `data/common.yaml` | `users`: 所有节点通用的用户和SSH密钥`allow_users`: 允许登录所有节点的用户`sudoers`:
    允许在所有节点上使用`sudo`的用户`classes`: 所有节点包含的类 |'
- en: '| `data/nodes/[NODE NAME].yaml` | `users`: Users and SSH keys that only exist
    on this node`allow_users`: Users allowed to log in to only this node`sudoers`:
    Users allowed to use `sudo` on only this node`classes`: Classes included only
    by this node |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `data/nodes/[NODE NAME].yaml` | `users`: 仅在此节点上存在的用户和SSH密钥`allow_users`:
    仅允许登录此节点的用户`sudoers`: 仅允许在此节点上使用`sudo`的用户`classes`: 仅此节点包含的类 |'
- en: '| `site-modules/role/manifests/` | Role classes for your nodes (include `profile::common`
    in each one) |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `site-modules/role/manifests/` | 节点的角色类（在每个类中包括`profile::common`） |'
- en: '| `scripts/puppify` | `PUPPET_REPO`: Git URL of your Puppet repo`IDENTITY`:
    Path to the SSH key for initial bootstrap of nodes, if you need one |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `scripts/puppify` | `PUPPET_REPO`: 你的Puppet仓库的Git URL`IDENTITY`: 初始引导节点时使用的SSH密钥路径（如果需要的话）
    |'
- en: Configuring users
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置用户
- en: 'As we saw earlier in this chapter, the user accounts managed by Puppet are
    configured from Hiera data. Edit the `data/common.yaml` file, which looks like
    this:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章前面所看到的，Puppet管理的用户账户是通过Hiera数据进行配置的。编辑`data/common.yaml`文件，文件内容如下所示：
- en: '[PRE40]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Replace the existing users with the user accounts you want to create on nodes
    (at first it may just be one account, for yourself). Add any SSH keys you want
    to use with them to the `sshkeys` array.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 将现有的用户替换为你希望在节点上创建的用户账户（最开始可能只有一个账户，用于你自己）。将你希望与这些账户一起使用的任何SSH密钥添加到`sshkeys`数组中。
- en: The list of allowed users on each node is controlled by the `allow_users` array.
    Replace the users listed there with your own users.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点上允许的用户列表由`allow_users`数组控制。将列出的用户替换为你自己的用户。
- en: The list of users with `sudo` privileges is controlled by the `sudoers` array.
    Replace the users listed there with those of your own users which you want to
    have root privileges.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有`sudo`权限的用户列表由`sudoers`数组控制。将那里列出的用户替换为你希望拥有root权限的用户。
- en: Adding per-node data files and role classes
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加每个节点的数据文件和角色类
- en: Per-node Hiera data, including classes, is kept in the `data/nodes/` directory.
    When you add a new node, add a data file for it named `data/nodes/NODE_NAME.yaml`,
    replacing `NODE_NAME` with the node's hostname.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点的Hiera数据，包括类，保存在`data/nodes/`目录下。当你添加一个新节点时，为其添加一个名为`data/nodes/NODE_NAME.yaml`的数据文件，将`NODE_NAME`替换为该节点的主机名。
- en: Include role classes suitable to the node (see [Chapter 8](ch08.html "Chapter 8. Classes,
    roles, and profiles"), *Classes, roles, and profiles* for more information about
    this). If you don't specify any classes in the per-node file, the node will just
    include the classes listed in `common.yaml`. This will be enough to set your node
    up with your SSH account and key, and validate that the bootstrap process works
    properly. Later, you can start adding role classes to the per-node file to get
    actual work done.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 包括适合该节点的角色类（详见[第8章](ch08.html "第8章：类、角色和配置文件")，*类、角色和配置文件*，了解更多信息）。如果你在每个节点的文件中没有指定任何类，节点将仅包括`common.yaml`中列出的类。这将足以通过你的SSH账户和密钥设置节点，并验证引导过程是否正常工作。之后，你可以开始将角色类添加到每个节点的文件中，以完成实际的工作。
- en: Add your role classes to the `site-modules/role/manifests/` directory, along
    the lines of `role::demo`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的角色类添加到`site-modules/role/manifests/`目录中，类似`role::demo`。
- en: If there are users which you only need on a specific node, and you don't want
    them to exist on all the nodes, list them under `users` in the per-node data file.
    If they need to log in via SSH, add them to `allow_users` too. Similarly, if you
    need a user to have `sudo` rights only on this node, list them under `sudoers`
    in the per-node data file.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某些用户只需要在特定节点上存在，而不希望它们出现在所有节点上，请将它们列在每个节点的数据文件中的`users`下。如果这些用户需要通过SSH登录，也请将它们添加到`allow_users`中。同样，如果你只希望某个用户在此节点上拥有`sudo`权限，请将他们列在每个节点数据文件中的`sudoers`下。
- en: Modifying the bootstrap credentials
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改引导凭据
- en: In the `scripts/puppify` file, edit the `PUPPET_REPO` setting to the URL of
    your own Git repo. If you need an SSH key to connect to the target node (for example,
    if you're using Amazon EC2, in which case you'll have a `.pem` file containing
    your key which you downloaded from the AWS console), add its location to the `IDENTITY`
    variable.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在`scripts/puppify`文件中，编辑`PUPPET_REPO`设置为你自己Git仓库的URL。如果你需要SSH密钥来连接目标节点（例如，如果你使用的是Amazon
    EC2，此时你会有一个`.pem`文件，其中包含你从AWS控制台下载的密钥），请将其位置添加到`IDENTITY`变量中。
- en: Bootstrapping a new node
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动新节点
- en: If you'd like to try out the demo repo on a Vagrant box, there is a suitable
    Vagrantfile included within the repo directory.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在Vagrant盒子中尝试演示仓库，可以在仓库目录中找到适用的Vagrantfile。
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't have Vagrant installed, follow the instructions in the *Installing
    VirtualBox and Vagrant* section of [Chapter 1](ch01.html "Chapter 1. Getting started
    with Puppet"), *Getting Started with Puppet* first.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装Vagrant，请先按照[第1章](ch01.html "Chapter 1. Getting started with Puppet")中*安装VirtualBox和Vagrant*部分的说明进行操作，完成Puppet的初步设置。
- en: Bootstrapping a Vagrant VM
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Vagrant虚拟机
- en: 'Run the following command in the repo directory to start your Vagrant VM:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在仓库目录中运行以下命令以启动你的Vagrant虚拟机：
- en: '[PRE41]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Bootstrapping physical or cloud nodes
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动物理或云节点
- en: Alternatively, you can bootstrap a physical or cloud node using the repo. All
    you will need is the IP address or DNS name of the target node.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以使用仓库来引导物理或云节点。你只需要目标节点的IP地址或DNS名称。
- en: 'Run the following command from the Puppet repo, replacing `TARGET_SERVER` with
    the address or name of the node, and `HOSTNAME` with the hostname that you want
    to set (for example `demo`):'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在Puppet仓库中运行以下命令，将`TARGET_SERVER`替换为目标节点的地址或名称，将`HOSTNAME`替换为你希望设置的主机名（例如`demo`）：
- en: '[PRE42]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You will see some output related to copying the bootstrap script, installing
    the Puppet package, cloning the repo, installing the Forge modules, and running
    Puppet for the first time. Once this is completed, the node should be ready, and
    you can try logging in to it using your own SSH account.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一些与复制引导脚本、安装Puppet包、克隆仓库、安装Forge模块以及首次运行Puppet相关的输出。完成后，节点应该已经准备好，你可以尝试使用自己的SSH账户登录。
- en: Using other distributions and providers
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用其他发行版和提供者
- en: The `puppify` and `bootstrap` scripts included with the demo repo will work
    for an Ubuntu node on Amazon EC2, but you can modify them to work with any Linux
    distribution or server provider.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 演示仓库中包含的`puppify`和`bootstrap`脚本适用于Amazon EC2上的Ubuntu节点，但你可以修改它们以适用于任何Linux发行版或服务器提供者。
- en: For example, if you're using a **Google Compute Engine** (**GCE**) instance,
    you can edit the `puppify` script to replace the `ssh` command with `gcloud compute
    ssh`. If you're using a Digital Ocean droplet, you can add your SSH key to the
    droplet when you provision it via the web interface, and you can modify the `puppify`
    script to log in as the `root` user instead of `ubuntu`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你使用的是**Google计算引擎**（**GCE**）实例，可以编辑`puppify`脚本，将`ssh`命令替换为`gcloud compute
    ssh`。如果你使用的是Digital Ocean的Droplet，可以在通过Web界面配置时将你的SSH密钥添加到Droplet，并修改`puppify`脚本以使用`root`用户而不是`ubuntu`用户登录。
- en: If you're managing nodes on several different platforms, you may find it more
    convenient to use a customized `puppify` script for each one, naming them (for
    example) `puppify_ec2`, `puppify_linode`, and so on.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在多个不同平台上管理节点，可能会发现为每个平台使用定制的`puppify`脚本更为方便，命名方式可以是（例如）`puppify_ec2`、`puppify_linode`等。
- en: If you're not using Ubuntu or Debian, you may need to make some changes to the
    `bootstrap.sh` script. For example, if you're using Red Hat Linux or CentOS, you'll
    need to have the script install Puppet via `yum` instead of `apt`. Again, if you're
    managing nodes on multiple OS distributions, you may need to maintain a custom
    bootstrap script for each one.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是使用Ubuntu或Debian，可能需要对`bootstrap.sh`脚本做一些修改。例如，如果你使用的是Red Hat Linux或CentOS，你需要让脚本通过`yum`而不是`apt`安装Puppet。同样，如果你管理多个操作系统节点，可能需要为每个操作系统维护一个自定义的引导脚本。
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we've introduced the example control repo and seen how to download
    it. We've explained the control repo pattern, and how it works with `r10k` and
    the Puppetfile to manage third-party and local modules. We've learned how to fork
    the repo and pull changes from upstream.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了示例控制仓库，并演示了如何下载它。我们解释了控制仓库模式，以及它如何与`r10k`和Puppetfile一起使用来管理第三方和本地模块。我们还学习了如何分叉仓库并从上游拉取更新。
- en: We've looked at the example role and profile classes, and seen how Puppet can
    use Hiera data to configure user accounts, SSH keys, allowed users, and `sudoers`
    privileges. We've covered the use of Forge modules to manage time zone setting
    and NTP synchronization. Additionally, we've explored the resources and scripts
    necessary to control automatic Puppet updates and runs.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了示例角色和配置文件类，了解了Puppet如何使用Hiera数据来配置用户帐户、SSH密钥、允许的用户和`sudoers`权限。我们还介绍了使用Forge模块来管理时区设置和NTP同步。此外，我们探索了控制自动Puppet更新和运行所需的资源和脚本。
- en: The demo repo contains bootstrap scripts to help you put a freshly-provisioned
    node under Puppet control, and we've examined how these scripts work in detail.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 演示仓库包含了启动脚本，帮助你将新配置的节点纳入Puppet控制范围，我们已经详细研究了这些脚本是如何工作的。
- en: Finally, we've learned how to adapt the demo repo for your own site, and outlined
    how to add your own users and access settings, and your own common profiles, and
    per-node role classes. We 've seen how to plug in your own information to the
    bootstrap scripts and how to use them to bootstrap a new node.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经学会了如何调整演示仓库以适应你自己的网站，概述了如何添加自己的用户和访问设置，如何添加自己的常用配置文件和每个节点的角色类。我们还看到如何将自己的信息插入到启动脚本中，以及如何使用它们启动一个新节点。
- en: The beginning
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: I hope you've enjoyed this book and have learned something useful from it; I
    certainly learned a lot from writing it. However, there's only so much you can
    learn from books. As Proust wrote, "We don't receive wisdom; we must discover
    it for ourselves after a journey that no one can take for us or spare us."
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这本书，并从中学到了一些有用的东西；我在写这本书时也学到了很多。然而，从书本中你能学到的东西是有限的。正如普鲁斯特所写，“我们并非接受智慧，而是必须在一场无人能代替的旅程中自己发现它。”
- en: It's good to have a friend point us in the right direction and come with us
    a little way for moral support, but then we need to walk on by ourselves. I hope
    that this book will be the beginning of your journey, not the end.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个朋友指引我们走上正确的道路并在旁边给予一些精神支持是好的，但最终我们还需要自己独立前行。我希望这本书能成为你旅程的开始，而不是结束。
- en: The world-famous classical guitarist John Williams was once asked how long it
    took him to learn to play the guitar. "I'm still learning," he said.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 世界著名的古典吉他演奏家约翰·威廉姆斯曾被问到学会弹吉他花了多长时间。他回答：“我还在学习。”
