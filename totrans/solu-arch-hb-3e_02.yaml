- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Principles of Solution Architecture Design
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案架构设计原则
- en: This chapter throws light on the most important and common design principles
    and attributes of solution architecture. While the focus in this chapter is on
    the most pivotal design elements, it’s worth noting that additional design aspects
    might arise, contingent on the complexity of the product and the specific industry
    domain. As you advance on your journey toward becoming a solutions architect through
    this book, you’ll see these foundational principles and attributes applied in
    more depth, including in the crafting of various design patterns tailored to diverse
    scenarios and challenges.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章阐明了解决方案架构中最重要和最常见的设计原则和特性。尽管本章的重点是最关键的设计元素，但值得注意的是，随着产品复杂度的增加和特定行业领域的不同，可能会出现其他设计方面。随着你在本书中逐步成为解决方案架构师，你将看到这些基础原则和特性在更深层次的应用，包括在制定针对不同场景和挑战的各种设计模式时。
- en: In this chapter, you will learn the principles of designing architectures that
    are scalable, resilient, and optimized for performance, while ensuring robust
    security measures are in place to safeguard your application. You will explore
    strategies to navigate architectural constraints and embrace change through testing
    and automation, emphasizing a data-driven approach. By understanding and applying
    these principles, you’ll be equipped to think critically and make informed decisions
    that enhance the effectiveness and reliability of your architectural designs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习设计可扩展、具备弹性且性能优化的架构的原则，同时确保有可靠的安全措施来保护你的应用程序。你将探索如何通过测试和自动化来应对架构限制并接受变化，强调数据驱动的方法。通过理解和应用这些原则，你将能够批判性地思考并做出明智的决策，从而提高架构设计的有效性和可靠性。
- en: 'You will learn about the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下内容：
- en: Building scalable architecture design
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建可扩展架构设计
- en: Building a highly available and resilient architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建高度可用且具备弹性的架构
- en: Design for performance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为性能设计
- en: Creating immutable architecture
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建不可变架构
- en: Think loose coupling
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思考松耦合
- en: Think service, not server
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思考服务，而非服务器
- en: Think data-driven design
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思考数据驱动设计
- en: Adding security everywhere
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个地方增加安全性
- en: Making applications usable and accessible
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让应用程序更易用和可访问
- en: Building future-proof extendable architecture
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建面向未来、可扩展的架构
- en: Ensuring architectural interoperability and portability
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保架构的互操作性和可移植性
- en: Applying automation everywhere
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到处应用自动化
- en: Design for operation
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为操作设计
- en: Overcoming architectural constraints
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克服架构限制
- en: Let’s embark on exploring the foundational elements of architectural design.
    By the end of this chapter, you’ll have gained insights into various essential
    design aspects to consider when constructing an architecture. This knowledge will
    serve as a crucial stepping stone on your journey to understanding and implementing
    effective and robust architectural solutions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始探索架构设计的基础要素。到本章结束时，你将深入了解在构建架构时需要考虑的各种设计方面。这些知识将成为你理解和实施有效且强大的架构解决方案的重要基石。
- en: Building scalable architecture design
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建可扩展架构设计
- en: Scalability has always been a primary factor while designing a solution. If
    you ask any enterprise about their solutions, scalability will be one of the key
    considerations. **Scalability** refers to allowing your system to handle growing
    workloads, which can apply to multiple layers, such as the application server,
    web app, and database. Scalability helps you fulfill user demand without impacting
    application performance, resulting in higher business returns.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性一直是设计解决方案时的一个关键因素。如果你问任何企业关于他们的解决方案，可扩展性将是一个重要的考虑因素。**可扩展性**指的是使你的系统能够处理日益增长的工作负载，这适用于多个层面，如应用服务器、Web
    应用程序和数据库。可扩展性帮助你在不影响应用性能的情况下满足用户需求，从而实现更高的业务回报。
- en: As most applications nowadays are web-based, let’s also talk about **elasticity**.
    This is about growing your system by adding more capabilities and shrinking it
    to save on unnecessary costs. With the adoption of the public cloud, it has become
    easy to quickly grow and shrink your workload, with elasticity now replacing scalability.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现在大多数应用程序都是基于 Web 的，让我们也谈谈**弹性**。这意味着通过增加更多的功能来扩展系统，或者缩小它以节省不必要的成本。随着公共云的采用，快速扩展和收缩工作负载变得更加容易，弹性现在取代了可扩展性。
- en: 'Traditionally, there are two modes of scaling:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，有两种扩展模式：
- en: '**Horizontal scaling**: Horizontal scaling is becoming increasingly popular
    as computing power has become an exponentially cheaper commodity in the last decade.
    In horizontal scaling, the team adds more servers to handle increasing workloads,
    as in *Figure 2.1*:![](img/B21336_02_01.png)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**：由于过去十年中计算能力已成为一种指数级更便宜的商品，水平扩展变得越来越流行。在水平扩展中，团队通过增加更多的服务器来处理增加的工作负载，如*图
    2.1*所示：![](img/B21336_02_01.png)'
- en: 'Figure 2.1: Horizontal scaling'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.1：水平扩展
- en: Let’s say your application can handle *1,000 requests per second* with *two
    server instances*, for example. As your user base grows, the application receives
    *2,000 requests per second*, which means you may want to double your application
    instances to four to handle the increased load.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 比如说，你的应用可以处理*每秒1,000个请求*，并且是*两台服务器实例*。随着用户基础的增长，应用每秒收到*2,000个请求*，这意味着你可能需要将应用实例增加到四个，以应对增加的负载。
- en: '**Vertical scaling**: This has been around for a long time. It is a practice
    in which the team adds additional computer storage capacity and memory power to
    the same server to handle increasing workloads. As shown in *Figure 2.2*, during
    vertical scaling, you will get a larger server—rather than adding more servers—to
    handle the increased workload:![](img/B21336_02_02.png)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直扩展**：这种方式已经存在很长时间了。这是一种做法，其中团队通过向同一台服务器增加额外的计算存储和内存能力，以应对日益增加的工作负载。如*图
    2.2*所示，在垂直扩展过程中，你将获得一台更强大的服务器——而不是增加更多的服务器——来处理增加的工作负载：![](img/B21336_02_02.png)'
- en: 'Figure 2.2: Vertical scaling'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.2：垂直扩展
- en: The vertical scaling model may be less cost-effective, however; when you purchase
    hardware with more computing power and memory capacity, the cost increases exponentially.
    You want to avoid vertical scaling after a certain threshold unless it is required
    to handle an increasing workload due to high costs and limitations on server capacity.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 垂直扩展模型可能成本效益较低；然而，当你购买具有更强计算能力和更大内存容量的硬件时，成本会呈指数级增长。除非需要应对由于高成本和服务器容量限制而增加的工作负载，否则你希望避免在达到某个阈值后继续进行垂直扩展。
- en: Vertical scaling is most commonly used to scale relational database servers.
    However, you need to think about database sharding here as if your server hits
    the limits of vertical scaling, it cannot grow beyond a specific memory and computing
    capacity.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直扩展最常用于扩展关系数据库服务器。然而，你需要考虑数据库分片问题，因为如果服务器达到了垂直扩展的极限，它无法超越特定的内存和计算能力。
- en: Sharding is a technique used to scale databases by dividing and distributing
    data across multiple servers. Data is partitioned based on a shard key, which
    determines how data is distributed across the shards. In vertical sharding, the
    shard key can be a specific column or a set of columns in a table.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 分片是一种通过将数据划分并分布到多个服务器上来扩展数据库的技术。数据基于分片键进行分区，分片键决定了数据如何在各个分片之间分布。在垂直分片中，分片键可以是表中的某一列或一组列。
- en: Scaling could be predictive if you are aware of your workload, which is often
    the case, or it could be reactive if you get a sudden spike or if you have never
    handled that kind of load before.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展可以是预测性的，如果你了解你的工作负载，这通常是有可能的；也可以是反应性的，如果你遇到突发流量或以前从未处理过这种负载。
- en: '**Predictive scaling** is an advanced approach to managing application workloads,
    particularly useful for scenarios with predictable traffic patterns, like those
    seen on e-commerce websites. By analyzing historical data, organizations can forecast
    traffic trends and adjust their resources accordingly.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**预测性扩展**是一种先进的应用工作负载管理方法，特别适用于具有可预测流量模式的场景，如电子商务网站上常见的流量模式。通过分析历史数据，组织可以预测流量趋势，并相应地调整资源。'
- en: For instance, an e-commerce site might experience varying traffic based on the
    day of the week, time of day, or specific shopping holidays, necessitating a scaling
    strategy that preemptively adjusts resources to handle expected load increases.
    This approach not only optimizes resource usage but also enhances user experience
    by reducing latency and preventing outages, which is especially important during
    traffic spikes when resource allocation might lag behind demand.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，电子商务网站可能会根据星期几、一天中的时间或特定购物假期经历不同的流量，迫使其采取预先调整资源的扩展策略，以应对预期的负载增加。这种方法不仅优化了资源使用，还通过减少延迟和防止故障，提升了用户体验，这在流量激增时尤其重要，因为资源分配可能滞后于需求。
- en: '**Reactive scaling**, on the other hand, is essential for dealing with unforeseen
    traffic surges, which might be significantly higher than the norm and could be
    triggered by events like flash sales. Understanding the unique traffic patterns
    for different pages of a website, as well as the user navigation path, is crucial
    for effectively managing these spikes. By identifying which pages can be cached
    or which queries are read-intensive, organizations can strategically offload traffic
    from the web layer, utilizing content distribution networks to manage static content.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，**反应式扩展**对于应对突发的流量激增至关重要，这种流量通常远高于常规水平，可能由闪购等事件触发。了解网站不同页面的独特流量模式以及用户的导航路径，对于有效管理这些流量激增非常重要。通过识别哪些页面可以缓存，或者哪些查询是读密集型的，组织可以策略性地将流量从Web层卸载，利用内容分发网络来管理静态内容。
- en: This combination of predictive and reactive scaling ensures that applications
    remain resilient and responsive, regardless of traffic fluctuations. For example,
    the following **Auto Scaling group** has a maximum of six instances and a minimum
    size of three instances. During regular user traffic, three servers will be up
    and running to handle the workload, but the number of servers can reach six to
    handle a traffic spike. Your server fleet will increase based on the scaling policies
    you define to adjust the number of instances. For example, you can add one server
    when CPU utilization exceeds 60% in the existing servers’ fleet but doesn’t spin
    up more than six servers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种预测性和反应性扩展的结合确保了应用程序在流量波动的情况下仍然保持弹性和响应性。例如，下面的**自动扩展组**的最大实例数为六个，最小实例数为三个。在正常的用户流量下，三个服务器将运行并处理工作负载，但在流量激增时，服务器数量可以增加到六个。您的服务器集群将根据您定义的扩展策略增加实例数量。例如，当现有服务器集群中的CPU利用率超过60%时，您可以增加一台服务器，但不会超过六台服务器。
- en: '![A picture containing text, screenshot, number, font  Description automatically
    generated](img/B21336_02_03.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![一张包含文字、截图、数字、字体的图片，描述自动生成](img/B21336_02_03.png)'
- en: 'Figure 2.3: Server Auto Scaling'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：服务器自动扩展
- en: Regardless of scaling being reactive or predictive, you need to monitor the
    application and collect data to plan for your scaling needs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 无论扩展是反应式的还是预测性的，您都需要监控应用程序并收集数据，以规划扩展需求。
- en: Scaling static content
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展静态内容
- en: Static content, such as images and videos, plays a crucial role in engaging
    users on your website. However, if not managed properly, these elements can significantly
    slow down your application’s performance. To maintain optimal speed and user experience,
    it’s essential to scale and distribute static content efficiently.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 静态内容，如图片和视频，在吸引用户访问网站时发挥着至关重要的作用。然而，如果管理不当，这些元素可能会显著降低应用程序的性能。为了保持最佳的速度和用户体验，有效地扩展和分发静态内容至关重要。
- en: Let’s take the example of an e-commerce website. Each product will likely have
    multiple images—and perhaps even videos—to show a product’s texture and demos,
    which means the website will have a significant amount of static content with
    a read-heavy workload since, most of the time, users will be browsing products.
    In addition, users may upload multiple images and videos for product review.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以一个电子商务网站为例。每个产品可能有多张图片——甚至可能有视频——展示产品的质地和演示，这意味着网站将有大量的静态内容，并且负载主要是读取型的，因为大部分时间用户都在浏览产品。此外，用户可能会上传多个图片和视频来进行产品评价。
- en: Storing static content in a web server means consuming lots of storage space,
    and as product listings grow, you have to worry about storage scalability. The
    other problem is that static content requires large file sizes, which may cause
    significant load latency on the user’s end. The web architectural tier must utilize
    the **Content Distribution Network** (**CDN**) to solve this issue. CDNs help
    cache this content closer to the users, reducing latency and speeding up loading
    times. Properly scaling static content ensures that your application remains fast
    and responsive, providing a seamless experience for your users even as traffic
    volumes increase.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将静态内容存储在Web服务器中意味着会消耗大量存储空间，随着产品列表的增长，您必须担心存储的可扩展性。另一个问题是，静态内容通常需要较大的文件尺寸，这可能会在用户端造成显著的加载延迟。Web架构层必须利用**内容分发网络**（**CDN**）来解决这个问题。CDN帮助将内容缓存到离用户更近的位置，减少延迟并加快加载速度。合理地扩展静态内容确保您的应用程序在流量增加时仍然保持快速和响应，提供无缝的用户体验。
- en: CDN providers (such as Akamai, Amazon CloudFront, Microsoft Azure CDN, and Google
    CDN) provide locations across the globe where static content can be cached from
    the web server near the user’s location, reducing latency. *Chapter 4*, *Solution
    Architecture Design Patterns*, will teach you more about caching.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: CDN 提供商（如 Akamai、Amazon CloudFront、Microsoft Azure CDN 和 Google CDN）在全球范围内提供静态内容缓存的位置，可以从靠近用户位置的
    Web 服务器中缓存静态内容，从而减少延迟。*第 4 章*，*解决方案架构设计模式*，将向你介绍更多关于缓存的内容。
- en: To scale static content storage, it is recommended to use object storage, such
    as Amazon S3, or an on-premises custom origin, which can grow independently of
    memory and computer capabilities. Additionally, scaling storage independently
    with popular object storage services saves on cost. These storage solutions can
    hold static HTML pages to reduce the load of web servers and enhance the user
    experience by reducing latency through the CDN.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展静态内容存储，建议使用对象存储，如 Amazon S3，或本地自定义源，这样可以独立于内存和计算能力进行扩展。此外，使用流行的对象存储服务独立扩展存储可以节省成本。这些存储解决方案可以存放静态
    HTML 页面，减少 Web 服务器的负担，并通过 CDN 降低延迟，从而提高用户体验。
- en: Session management for application server scaling
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用服务器扩展的会话管理
- en: The application architectural tier collects user requests from the web tier
    and performs the heavy lifting of calculating business logic and talking to the
    database. When user requests increase, the application tier needs to scale to
    handle them and then shrink back as demands decrease. In such scenarios, users
    are tied to the session, where, for example, they may browse from their mobile
    and purchase from their desktop. Performing horizontal scaling without handling
    user sessions may cause a bad user experience, as it will reset the user’s shopping
    progress.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 应用架构层从 Web 层收集用户请求，执行复杂的业务逻辑计算并与数据库进行交互。当用户请求量增加时，应用层需要进行扩展以应对这些请求，然后在需求减少时缩减规模。在这种情况下，用户会与会话绑定，例如，他们可能会在手机上浏览并在桌面上购买。如果在不处理用户会话的情况下进行水平扩展，可能会导致糟糕的用户体验，因为会重置用户的购物进度。
- en: Here, the first step is to take care of user sessions by decoupling them from
    the application server instance, which means you should consider maintaining the
    user session in an independent layer, such as a NoSQL database where you can store
    semi-structured data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，第一步是通过将用户会话与应用服务器实例解耦来处理用户会话，这意味着你应该考虑将用户会话保存在独立的层中，例如 NoSQL 数据库，在那里你可以存储半结构化的数据。
- en: NoSQL databases are best suited for semi-structured data where data entries
    vary in their schema. For example, one user can enter their name and address while
    setting up a user profile. In contrast, another user can enter more attributes,
    such as phone number, gender, marital status, name, and address. As users have
    different attributes, NoSQL data can accommodate them and provide fast searches.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL 数据库最适合存储半结构化数据，其中数据项的模式可能会有所不同。例如，一个用户在设置用户资料时可能输入姓名和地址，而另一个用户则可以输入更多的属性，如电话号码、性别、婚姻状况、姓名和地址。由于用户具有不同的属性，NoSQL
    数据可以适应它们并提供快速搜索。
- en: NoSQL databases such as Amazon DynamoDB or MongoDB offer exceptional partitioning
    capabilities, enabling effortless horizontal scaling at levels that surpass the
    scalability of other database types.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL 数据库，如 Amazon DynamoDB 或 MongoDB，提供卓越的分区能力，使得水平扩展变得轻松，并且能够超越其他数据库类型的可扩展性。
- en: Once you start storing your user session in NoSQL databases, your instance can
    scale horizontally without impacting the user experience. You can add a load balancer
    in front of a fleet of application servers, which can distribute the load among
    instances; with the help of autoscaling, you can automate adding or removing instances
    on demand.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始将用户会话存储在 NoSQL 数据库中，你的实例就可以进行水平扩展，而不会影响用户体验。你可以在一组应用服务器前添加负载均衡器，负载均衡器可以将负载分配到各个实例上；借助自动扩展功能，你可以根据需求自动增加或删除实例。
- en: Database scaling
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库扩展
- en: Most applications use relational databases to store their transactional data.
    These have been around for decades and provide the robust transactional consistency
    required for many applications. However, the main problem with relational databases
    is that they cannot scale horizontally until you plan for other techniques, such
    as sharding, and modify your application accordingly. This will be a lot of work.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序使用关系型数据库来存储其事务数据。这些数据库已经存在了几十年，并提供许多应用程序所需的强大事务一致性。然而，关系型数据库的主要问题是，除非你计划使用其他技术（如分片），并相应地修改应用程序，否则它们无法水平扩展。这将是一个繁重的工作。
- en: For databases, taking preventive care and reducing their load is better. Using
    a combination of storage methods, such as storing user sessions in separate NoSQL
    databases, storing static content in an object store, and applying an external
    cache, helps to offload the master database. It’s better to keep the master database
    node for writing and updating data and use an additional read replica for all
    read requests. For example, Amazon RDS for MySQL provides up to 15 read replicas
    for relational databases. Read replicas may have milliseconds of delay while syncing
    with the leader node, and you need to plan for that while designing your application.
    Using a caching engine such as Memcached or Redis is recommended to cache frequent
    queries and thus reduce the load on the leader node.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库来说，采取预防措施并减少其负载是更好的做法。使用多种存储方法的组合，如将用户会话存储在单独的NoSQL数据库中，将静态内容存储在对象存储中，并应用外部缓存，有助于减轻主数据库的负担。最好将主数据库节点保留用于写入和更新数据，并使用额外的只读副本来处理所有读取请求。例如，Amazon
    RDS for MySQL为关系数据库提供最多15个只读副本。只读副本在与主节点同步时可能会有毫秒级的延迟，在设计应用程序时需要考虑这一点。建议使用缓存引擎，如Memcached或Redis，来缓存频繁的查询，从而减少主节点的负担。
- en: If your database starts growing beyond its current capacity, you need to redesign
    and divide it into shards by applying partitions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库的增长超出了当前容量，你需要通过应用分区将其重新设计并分割成多个分片。
- en: Each shard can grow independently, and the application needs to determine a
    partition key to store user data in a respective shard. For example, if the partition
    key is `user_name`, then usernames from `A` to `E` can be stored in one shard,
    names from `F` to `I` can be stored in a second shard, and so on. The application
    needs to direct user records to the correct partition per their name’s first letter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分片可以独立增长，应用程序需要确定一个分区键来将用户数据存储在相应的分片中。例如，如果分区键是`user_name`，那么`A`到`E`的用户名可以存储在一个分片中，`F`到`I`的用户名可以存储在第二个分片中，依此类推。应用程序需要根据用户名的首字母将用户记录定向到正确的分区。
- en: So, as you can see, scalability is a significant factor while designing a solution
    architecture, and it can impact the overall project budget and user experience
    significantly if it’s not planned correctly. A solutions architect always needs
    to consider elasticity while designing applications and optimizing workloads for
    the best performance and least cost.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，扩展性是设计解决方案架构时的一个重要因素，如果规划不当，它会显著影响整体项目预算和用户体验。解决方案架构师在设计应用程序并优化工作负载以实现最佳性能和最低成本时，始终需要考虑弹性。
- en: A solutions architect needs to evaluate different options, such as CDNs for
    static content scaling and load balancing, autoscaling options for server scaling,
    and various data storage options for caching, object stores, NoSQL stores, read
    replicas, and sharding.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案架构师需要评估不同的选项，如用于静态内容扩展和负载均衡的CDN，服务器扩展的自动扩展选项，以及用于缓存、对象存储、NoSQL存储、只读副本和分片的各种数据存储选项。
- en: Building elastic architecture
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建弹性架构
- en: While focusing on scalability to enhance application performance, it is crucial
    to construct a cost-aware architectural design. This implies that as you expand
    your server infrastructure to meet rising user demand, the system should also
    contract when the server load diminishes. Elasticity is required to right-size
    your architecture, which involves scaling your server infrastructure to match
    the current demand accurately. It’s a balancing act between ensuring there’s enough
    capacity to handle peak loads efficiently without over-provisioning resources
    that would lie idle during off-peak times.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在专注于扩展性以提升应用性能的同时，构建一个成本意识的架构设计至关重要。这意味着，随着你扩展服务器基础设施以满足不断增长的用户需求，系统也应该在服务器负载减少时进行收缩。弹性是正确调整架构大小所必需的，它涉及将服务器基础设施扩展到准确匹配当前需求。它是一种平衡行为，确保有足够的容量高效处理峰值负载，同时避免在非高峰时段过度配置资源，导致资源闲置。
- en: 'Let’s continue with the e-commerce website example by considering a modern
    three-tier architecture and see how we can achieve elasticity at a different Application
    Layer. Here, we only target the elasticity and scalability aspects of architecture
    design. *Figure 2.4* shows a three-tier architecture diagram of the AWS cloud
    tech stack:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续以电子商务网站为例，考虑一种现代的三层架构，并看看如何在不同的应用层实现弹性。在这里，我们仅关注架构设计中的弹性和扩展性方面。*图2.4*展示了AWS云技术栈的三层架构图：
- en: '![](img/B21336_02_04.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_02_04.png)'
- en: 'Figure 2.4: Scaling three-tier architecture'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：扩展三层架构
- en: This diagram depicts a three-tier architecture designed for elasticity and high
    availability, focusing on building an elastic server fleet to manage variable
    loads efficiently.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该图描绘了一个三层架构，旨在实现弹性和高可用性，重点是构建一个弹性的服务器集群，以高效地管理可变负载。
- en: 'The following are the architectural components:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是架构组件：
- en: Elastic Load Balancing automatically distributes incoming application traffic
    across multiple targets, such as Amazon **Elastic Compute Cloud** (**EC2**) instances,
    containers, IP addresses, etc., in multiple Availability Zones. This increases
    the fault tolerance of the e-commerce application.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性负载均衡自动将传入的应用流量分配到多个目标上，如 Amazon **弹性计算云**（**EC2**）实例、容器、IP 地址等，跨多个可用区进行分配。这增加了电子商务应用的容错能力。
- en: The web layer consists of an Auto scaling group of EC2 instances designed to
    serve the application’s dynamic content. This fleet can automatically scale out
    (add instances) or scale in (remove instances) based on defined criteria like
    CPU utilization, ensuring that the fleet can adapt to the incoming traffic and
    maintain consistent performance.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 层由一个 EC2 实例的自动扩展组组成，旨在为应用提供动态内容。这个实例组可以根据定义的标准（如 CPU 利用率）自动扩展（增加实例）或收缩（移除实例），确保它能够适应传入的流量并保持一致的性能。
- en: The Application Layer also has an autoscaling group of EC2 instances responsible
    for executing the business logic of the application. Like the web layer, this
    layer can dynamically adjust its size to meet the demands of the application workload.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用层还具有一个 EC2 实例的自动扩展组，负责执行应用的业务逻辑。与 Web 层类似，这一层可以根据应用负载的需求动态调整其大小。
- en: At the bottom, the Database Layer includes Amazon **Relational Database System**
    (**RDS**) instances, which provide managed relational databases. The setup includes
    a primary DB instance and a read replica to handle read-heavy operations, improving
    performance and reducing load on the primary instance. There is also a standby
    instance in a different Availability Zone for high availability and failover support.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在底部，数据库层包括 Amazon **关系型数据库系统**（**RDS**）实例，这些实例提供托管的关系型数据库。设置包括一个主数据库实例和一个只读副本，用于处理读取密集型操作，提高性能并减少主实例的负载。还有一个位于不同可用区的备用实例，用于高可用性和故障转移支持。
- en: This architecture allows for a flexible, scalable application environment that
    can handle variable workloads with high availability across multiple zones. It’s
    designed to expand and contract automatically in response to the application’s
    needs, ensuring users experience consistent, responsive performance.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该架构允许灵活、可扩展的应用环境，可以跨多个可用区处理可变的工作负载并保持高可用性。它设计成能够根据应用需求自动扩展和收缩，确保用户体验一致、响应迅速的性能。
- en: When users access and interact to the application using website or mobile application.
    Their requests are routed through Amazon Route 53, which is a highly available
    and scalable **Domain Name System** (**DNS**) web service. Amazon CloudFront,
    a CDN, is used to distribute static content like images, stylesheets, and JavaScript
    files efficiently. This reduces the load on the web servers and improves the user
    experience by decreasing latency.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过网站或移动应用访问并与应用互动时，他们的请求将通过 Amazon Route 53 路由，它是一个高度可用且可扩展的 **域名系统**（**DNS**）Web
    服务。Amazon CloudFront 作为 CDN 被用来高效地分发静态内容，如图片、样式表和 JavaScript 文件。这减少了 Web 服务器的负载，并通过降低延迟提升了用户体验。
- en: In this section, you have discovered the various scaling methods and how to
    inject elasticity into the different layers of your architecture. Scalability
    is an essential factor in ensuring that there is high application availability
    to make your application resilient. We will learn more about high availability
    and resiliency in the next section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你已经了解了各种扩展方法，以及如何将弹性注入到架构的不同层级。可扩展性是确保应用高可用性的关键因素，进而使应用具备弹性。我们将在下一部分学习更多关于高可用性和弹性的内容。
- en: Building a highly available and resilient architecture
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建高度可用且具有弹性的架构
- en: Creating a highly available and resilient architecture involves designing systems
    that can tolerate failures of individual components without disrupting the overall
    system functionality.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建高度可用和具有弹性的架构需要设计能够容忍单个组件故障而不影响整体系统功能的系统。
- en: Highly available architecture
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高可用架构
- en: The one thing an organization wants to avoid is *downtime*. Application downtime
    can cause a loss of business and user trust, making **high availability** a primary
    factor while designing the solution architecture. The principle of high availability
    is “design for failure, and nothing will fail.”
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织想要避免的事情就是 *停机时间*。应用的停机时间会导致业务损失和用户信任度下降，使得 **高可用性** 成为设计解决方案架构时的首要因素。高可用性的原则是“设计时考虑故障，任何故障都无法发生。”
- en: The requirement for application uptime varies from application to application.
    If you have an external-facing application with a large user base, such as an
    e-commerce website or social media platform, 100% uptime becomes critical. In
    the case of an internal application (accessed by an employee, such as an HR system
    or a company intranet), it can likely tolerate some downtime. Achieving high availability
    is directly associated with cost, so a solutions architect must always plan for
    high availability per the application requirements to avoid over-architecting.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的正常运行时间需求因应用而异。如果你有一个面向外部的大型用户群体的应用，例如一个电子商务网站或社交媒体平台，100% 的正常运行时间变得至关重要。对于一个内部应用（由员工访问，如人力资源系统或公司内网），它可能能够容忍一些停机时间。实现高可用性与成本直接相关，因此解决方案架构师必须根据应用需求始终规划高可用性，以避免过度设计。
- en: To achieve a high-availability architecture, it is better to plan workloads
    in an isolated physical location so that, should an outage occur in one place,
    your application replica can operate from another location. The high-availability
    architecture goes hand in hand with self-healing, where you can ensure your application
    is up and running, but you also need a quick recovery to maintain the desired
    user experience.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现高可用架构，最好将工作负载规划在一个孤立的物理位置，这样，如果一个地方发生故障，应用的副本可以从另一个位置运行。高可用架构与自愈能力密切相关，你可以确保应用始终运行，但你还需要快速恢复以保持期望的用户体验。
- en: Resilient architecture
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹性架构
- en: A resilient architecture means your application should be available for customers
    while recovering from failure. Making your architecture resilient includes applying
    best practices to recover your application from increased loads due to more user
    requests, malicious attacks, and architectural component failure. Resiliency needs
    to be used in all architectural layers, including infrastructure, application,
    database, security, and networking. A resilient architecture should recover from
    failure within a desired amount of time.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性架构意味着你的应用应该在恢复故障时仍能为客户提供服务。让你的架构具有弹性包括应用最佳实践来应对由于更多用户请求、恶意攻击和架构组件故障而导致的负载增加。弹性需要在所有架构层面上应用，包括基础设施、应用、数据库、安全和网络。一个弹性架构应该在预定的时间内从故障中恢复。
- en: 'To make your architecture resilient, you need to define the time of recovery
    and address the following points:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你的架构具备弹性，你需要定义恢复时间，并解决以下几点：
- en: Identify and implement redundant architectural components wherever required.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在需要的地方识别并实现冗余的架构组件。
- en: Understand when to fix versus when to replace architectural components. For
    example, fixing a server issue might take longer than replacing it with the same
    machine image.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解何时修复与何时替换架构组件。例如，修复服务器问题可能比用相同的机器镜像替换它更耗时。
- en: Achieving redundancy
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现冗余
- en: Redundancy is a crucial aspect of building resilient systems. Building a resilient
    architecture requires a multi-layered redundancy strategy. It involves deploying
    server clusters across different racks within a single data center, extending
    to multiple data centers within the same region, and further, across various geographic
    regions. This geographical distribution ensures protection against localized and
    regional disasters and reduces latency for a global user base.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 冗余是构建弹性系统的一个关键因素。构建弹性架构需要多层次的冗余策略。这包括在单一数据中心内跨不同机架部署服务器集群，扩展到同一区域内的多个数据中心，甚至跨多个地理区域进行部署。这种地理分布确保了抵御局部和区域性灾难的能力，并为全球用户群体降低延迟。
- en: Incorporating intelligent load balancing and global traffic management, such
    as DNS-based routing with health checks, ensures that users are always served
    from the optimal location. Database resiliency is achieved through strategic replication,
    with automated failover mechanisms to maintain database availability and integrity.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 结合智能负载均衡和全球流量管理，例如基于DNS的路由和健康检查，确保用户始终从最优位置获取服务。通过战略性复制实现数据库的韧性，并配备自动故障转移机制，以保持数据库的可用性和完整性。
- en: If servers are spread across different physical locations, the first level of
    traffic routing can be handled using the DNS server before it reaches the load
    balancer. This way, in the case of an entire region failure, your application
    can still run.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器分布在不同的物理位置，则流量路由的第一层可以通过DNS服务器处理，直到流量到达负载均衡器。这样，在整个区域发生故障时，您的应用程序仍然可以继续运行。
- en: '![](img/B21336_02_05.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_02_05.png)'
- en: 'Figure 2.5: Application architecture resiliency using a DNS server'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5：使用DNS服务器的应用架构韧性
- en: 'As you can see in the preceding architecture, resiliency must be applied in
    all the critical layers that affect the application’s availability in order to
    implement a design that can sustain failure. To achieve resiliency, in addition
    to using a DNS server to route traffic between different physical locations, the
    following best practices need to be applied to create a redundant environment:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前述架构中所看到的，韧性必须应用于所有影响应用可用性的关键层，以实现能够承受故障的设计。为了实现韧性，除了使用DNS服务器在不同的物理位置之间路由流量外，还需要应用以下最佳实践来创建冗余环境：
- en: Use the CDN to distribute and cache static content such as videos, images, and
    static web pages near the user’s location so that your application will still
    be available.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CDN将视频、图像和静态网页等静态内容分发并缓存到靠近用户位置的地方，这样您的应用程序仍然可以保持可用。
- en: Once traffic reaches a region, use a load balancer to route traffic to a fleet
    of servers so that your application can still run even if one location fails within
    your region.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦流量到达某个区域，使用负载均衡器将流量路由到一组服务器，这样即使该区域的一个位置发生故障，您的应用程序仍然可以运行。
- en: Use autoscaling to add or remove servers based on user demand. As a result,
    your application should not be impacted by individual server failures.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动伸缩根据用户需求添加或移除服务器。因此，您的应用程序不应受到单个服务器故障的影响。
- en: Create a standby database to ensure the high availability of the database, meaning
    that your application should be available in the event of a database failure.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建备用数据库以确保数据库的高可用性，这意味着在数据库故障时，您的应用程序应该仍然可用。
- en: Addressing component failure
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决组件故障
- en: If any components fail, you should have a backup to recover them and achieve
    architecture resiliency. The load balancer and routers at the DNS server perform
    a health check to ensure that the traffic is only routed to healthy application
    instances. You can configure this to perform a shallow health check, which monitors
    local host failures, or a deep health check, which can also take care of dependency
    failure. However, a deep health check takes more time and is more resource-intensive
    than a shallow health check. You will learn more about resilient architecture
    in *Chapter 8*, *Architectural Reliability Considerations*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某些组件发生故障，您应该有备份以恢复它们，并实现架构的韧性。DNS服务器上的负载均衡器和路由器执行健康检查，确保流量仅路由到健康的应用实例。您可以配置它执行浅层健康检查，监控本地主机故障，或者执行深度健康检查，这也能处理依赖项故障。然而，深度健康检查需要更多的时间，并且比浅层健康检查更消耗资源。您将在*第8章*，*架构可靠性考虑*中了解更多关于韧性架构的内容。
- en: 'At the application level, it is essential to avoid **cascade failure**, where
    the failure of one component can bring down the entire system. To mitigate the
    risk of cascading failures in a system, various mechanisms can be employed:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用层面，必须避免**级联故障**，即一个组件的故障可能导致整个系统瘫痪。为减少系统中级联故障的风险，可以采取多种机制：
- en: '**Timeouts**: Setting a maximum time limit for operations and requests can
    prevent waiting indefinitely for a response, which can lead to resource exhaustion.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超时**：为操作和请求设置最大时间限制可以防止无限等待响应，从而避免资源耗尽。'
- en: '**Traffic rejection**: When the system is overwhelmed, it can proactively reject
    new requests to prevent overload and maintain stability for existing processes.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流量拒绝**：当系统负载过重时，它可以主动拒绝新请求，以防止过载，并保持现有进程的稳定性。'
- en: '**Idempotent operations**: Ensuring that operations can be repeated without
    causing unintended effects can help recover from intermediate failures without
    duplicating actions or causing inconsistencies.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**幂等操作**：确保操作可以重复执行而不会造成意外效果，可以帮助从中间故障中恢复而无需重复操作或引起不一致。'
- en: '**Circuit breakers**: Implementing a circuit breaker pattern can detect failure
    patterns and open the “circuit” to stop further requests to a failing service,
    allowing it to recover and preventing the failure from spreading to other parts
    of the system.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断路器**：实施断路器模式可以检测故障模式并打开“电路”，停止对故障服务的进一步请求，使其恢复并防止故障扩散到系统的其他部分。'
- en: By incorporating these strategies, systems can become more resilient, maintaining
    functionality in the face of individual component failures and preventing those
    failures from escalating into widespread system outages.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用这些策略，系统可以变得更加弹性，保持在单个组件故障的情况下的功能性，并防止这些故障升级为广泛的系统故障。
- en: While high availability and resiliency ensure your system is up and available
    for users, it is also essential to maintain performance where fault tolerance
    comes into play. Let us now turn to the subject of fault tolerance.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管高可用性和弹性确保系统对用户可用，但在保持性能的同时，容错性也至关重要。现在让我们转向容错的主题。
- en: Making your architecture fault-tolerant
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使架构具有容错性
- en: High availability means your application is available to the user but it can
    result in degraded performance. Suppose you need four servers to handle users’
    traffic. For this, you put two servers in two different physically isolated data
    centers. If there is an outage in one data center, user traffic can be served
    from another. But now you have only two servers, which means only 50% of the original
    capacity is available, and users may experience performance issues. In this scenario,
    your application has 100% high availability but is only 50% fault tolerant.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 高可用性意味着您的应用程序对用户可用，但可能会导致性能下降。假设您需要四台服务器来处理用户流量。为此，您将两台服务器放置在两个物理隔离的数据中心中。如果一个数据中心出现故障，用户流量可以从另一个中心提供服务。但现在您只有两台服务器，这意味着只有原始容量的50%可用，用户可能会遇到性能问题。在这种情况下，您的应用程序具有100%的高可用性，但只有50%的容错能力。
- en: As shown in *Figure 2.6*, to achieve 100% fault tolerance, you need full redundancy
    and have to maintain the double count of the servers so that the user doesn’t
    encounter any performance issues during the outage of one zone.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图2.6*所示，要实现100%的容错能力，您需要完全的冗余，并且必须保持双倍的服务器数量，以便在一个区域发生故障时，用户不会遇到任何性能问题。
- en: '![](img/B21336_02_06.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_02_06.png)'
- en: 'Figure 2.6: Fault tolerance architecture'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：容错架构
- en: Fault tolerance is handling workload capacity if an outage occurs without compromising
    system performance. A fully fault-tolerant architecture involves high costs due
    to increased redundancy. Whether your user base can live with degraded performance
    for the period of application recovery depends on your application’s criticality.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 容错性是在不影响系统性能的情况下处理工作负载容量。全面容错的架构由于增加的冗余而带来高昂的成本。您的用户群体能否接受应用程序恢复期间的性能降级取决于应用程序的关键性。
- en: While designing the application architecture, a solutions architect needs to
    determine the nature of the application’s users and whether a fault tolerance
    of 100% is required, which will inevitably come with a cost implication. For example,
    an e-commerce website may need 100% fault tolerance, as degraded performance directly
    impacts business revenue. At the same time, an internal payroll system, which
    employees use at the end of the month to check their salary slips, can tolerate
    reducing performance for a short period. Let’s dive deep into building high-performance
    architecture next.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计应用程序架构时，解决方案架构师需要确定应用程序用户的性质以及是否需要100%的容错能力，这必然会带来成本影响。例如，电子商务网站可能需要100%的容错能力，因为性能降低直接影响业务收入。同时，内部的工资单系统，员工在月底检查其工资单时使用，可以容忍短时间内的性能降低。让我们深入探讨构建高性能架构的问题。
- en: Designing for performance
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为性能设计
- en: With the availability of fast internet, customers are seeking high-performance
    applications with minimal load time. Organizations have noticed that a direct
    revenue impact is proportional to application performance, and slowness in application
    load time can significantly impact customer engagement. Modern companies are setting
    high expectations when it comes to performance, resulting in high-performance
    applications becoming necessary to stay relevant in the market.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 随着快速互联网的普及，客户正在寻求具有最低加载时间的高性能应用程序。组织已经注意到，直接的收入影响与应用程序性能成正比，而应用程序加载时间的慢速会显著影响客户参与度。现代公司在性能方面设定了高期望，这导致高性能应用程序成为在市场中保持竞争力的必要条件。
- en: Like resiliency, the solutions architect needs to consider performance at every
    layer of architecture design. The DevOps team needs to put monitoring in place
    to check that the solution continues to perform effectively and work to improve
    it continuously. Better performance means increased user engagement and return
    on investment.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与弹性一样，解决方案架构师需要在架构设计的每一层考虑性能。DevOps 团队需要实施监控，以检查解决方案是否持续有效地运行，并不断改进。更好的性能意味着更高的用户参与度和投资回报率。
- en: High-performance applications are designed to handle application slowness due
    to external factors such as a slow internet connection. For example, you may have
    designed your blog web page to load within 500 milliseconds where there is good
    internet availability. However, where the internet is slow, you can have it load
    text first and engage the user with this content while images and videos are still
    loading.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 高性能应用程序设计用于应对因外部因素（如慢速互联网连接）导致的应用程序缓慢。例如，您可能已经设计了一个博客网页，在良好的互联网环境下加载时间为 500
    毫秒。然而，在互联网较慢的地方，您可以先加载文本并通过这些内容吸引用户，同时图像和视频仍在加载中。
- en: In an ideal environment, as your application workload increases, automated scaling
    mechanisms start handling additional requests without impacting application performance.
    But in the real world, your application latency goes down for a short duration
    when scaling takes effect. To understand how it will behave in a real-world situation,
    it’s better to test your application for performance by increasing the load and
    understanding whether you can achieve the desired concurrency and user experience.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想环境下，随着应用程序工作负载的增加，自动扩展机制开始处理额外的请求，而不会影响应用程序性能。但在现实世界中，随着扩展生效，您的应用程序延迟会在短时间内下降。为了了解它在实际情况中的表现，最好通过增加负载来测试应用程序的性能，并了解是否能够实现预期的并发性和用户体验。
- en: You need to choose the right kind of server at the server level, depending on
    your workload. For example, choose the right amount of memory and compute to handle
    the workload, as memory congestion can slow down application performance and,
    eventually, the server may crash. You should choose the correct **input/output
    operations per second** (**IOPS**) for storage. You need high IOPS for write-intensive
    applications to reduce latency and increase disk write speed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要根据工作负载选择正确类型的服务器。例如，选择合适的内存和计算能力来处理工作负载，因为内存拥塞可能会减慢应用程序性能，并最终导致服务器崩溃。您还应选择正确的**每秒输入/输出操作数**（**IOPS**）用于存储。对于写密集型应用程序，您需要高
    IOPS 以减少延迟并提高磁盘写入速度。
- en: IOPS is a performance measurement used to benchmark the speed at which storage
    devices like hard drives, solid-state drives, and storage area networks can read
    and write data. Each input or output operation could be a data read or a data
    write.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: IOPS 是一种性能衡量标准，用于基准测试存储设备（如硬盘、固态硬盘和存储区域网络）读取和写入数据的速度。每个输入或输出操作可能是一次数据读取或数据写入。
- en: To achieve higher performance, apply caching at every layer of your architecture
    design. Caching makes your data locally available to users or keeps data in memory
    to serve an ultra-fast response.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现更高的性能，请在架构设计的每一层应用缓存。缓存使您的数据可以本地提供给用户，或将数据保存在内存中以提供超快速响应。
- en: 'The following are considerations for adding caching to various layers of your
    application design:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在您的应用程序设计的各个层面添加缓存时需要考虑的事项：
- en: Use the browser cache on the user’s system to load frequently requested web
    pages.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户系统上的浏览器缓存来加载经常请求的网页。
- en: Use the DNS cache for quick website lookup.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 DNS 缓存以快速查找网站。
- en: Use the CDN cache for high-resolution images and videos that are near the user’s
    location.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CDN 缓存来存储靠近用户位置的高分辨率图像和视频。
- en: At the server level, maximize the memory cache to serve user requests.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器级别，最大化内存缓存以服务用户请求。
- en: Use cache engines such as Redis and Memcached to serve frequent queries from
    the caching engine.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缓存引擎，如 Redis 和 Memcached，从缓存引擎提供频繁查询服务。
- en: Use the database cache to serve frequent queries from memory.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库缓存从内存中为频繁查询提供服务。
- en: Take care of cache expiration, which is the process by which data stored in
    the cache becomes outdated and is marked for update or removal. Cache eviction,
    on the other hand, is the process by which data is removed from the cache, typically
    to make room for new data.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意缓存过期问题，缓存过期是指存储在缓存中的数据变得过时，并被标记为更新或移除。而缓存淘汰则是指将数据从缓存中移除，通常是为了为新数据腾出空间。
- en: As you can see, keeping your application performant is an essential design aspect
    and is directly related to organizational profitability. The solutions architect
    needs to think about performance when creating a solution design and should work
    relentlessly to keep improving the performance of the application. In *Chapter
    6*, *Performance Considerations*, you will dive deeper into this and learn techniques
    to optimize your application for better performance.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，保持应用程序的高性能是一个至关重要的设计方面，且直接与组织的盈利能力相关。解决方案架构师在创建解决方案设计时需要考虑性能，并应不懈努力提升应用程序的性能。在*第六章*，*性能考虑*中，你将深入了解这一点，并学习优化应用程序以提高性能的技术。
- en: Creating immutable architecture
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建不可变架构
- en: Organizations make a significant capital investment in hardware and develop
    the practice of regularly refreshing it with a new version of the application
    and configuration. Over time, this can lead to different servers running in varied
    configurations, and troubleshooting them becomes tedious. Sometimes organizations
    must keep running unnecessary resources when they are not needed, as they are
    unsure which server to shut down, which may cause application failure. The inability
    to replace servers makes rolling out and testing any new updates in your server
    fleet challenging. These problems can be solved by treating your server as a replaceable
    resource, which enables you to move more quickly to accommodate changes, such
    as upgrading applications and underlying software, resulting in less downtime
    and fixing application issues quickly. That is why, while designing your application,
    you should always think of immutable infrastructure. This means that, during application
    upgrades, you will not only replace software but hardware, too.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 组织在硬件上进行大量资本投入，并养成定期用新版本的应用程序和配置来刷新硬件的做法。随着时间推移，这可能导致不同的服务器运行不同的配置，排查问题变得繁琐。有时，组织可能不得不继续运行不必要的资源，因为不确定该关闭哪个服务器，这可能会导致应用程序失败。无法替换服务器使得在你的服务器集群中推出和测试任何新更新变得具有挑战性。这些问题可以通过将服务器视为可替换资源来解决，从而更快速地适应变化，如升级应用程序和底层软件，减少停机时间，并快速修复应用问题。因此，在设计应用程序时，你应该始终考虑不可变基础设施。这意味着，在应用程序升级过程中，你不仅会替换软件，还会替换硬件。
- en: Adopting a mindset where servers are treated like cattle, not pets, is fundamental
    in modern cloud architecture. This approach means that individual servers are
    not meticulously maintained or customized to the point where they become irreplaceable.
    Instead, servers are designed to be provisioned quickly, managed consistently,
    and disposed of or replaced without significant impact on the overall system.
    This methodology enhances scalability and resiliency, as it allows for rapid adaptation
    to changes in demand or recovery from failures.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代云架构中，采用将服务器视为牲畜而非宠物的思维方式是至关重要的。这种方法意味着，个别服务器不会被精心维护或定制到无法替代的程度。相反，服务器被设计为可以快速配置、一致管理，并在不对整体系统造成重大影响的情况下被处置或替换。这种方法提高了可扩展性和弹性，因为它允许快速适应需求变化或从故障中恢复。
- en: To create replaceable servers, making your application stateless to retain user
    experience and avoiding the hardcoding of any server IP or database DNS name is
    advisable to avoid failures during replacement. You need to apply the idea of
    treating your infrastructure as code instead of hardware, and not apply updates
    to the live system.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建可替换的服务器，建议使你的应用程序无状态，以保持用户体验，并避免硬编码任何服务器 IP 或数据库 DNS 名称，以防止在替换过程中出现故障。你需要应用将基础设施视为代码而非硬件的理念，并避免对在线系统进行更新。
- en: Creating immutable infrastructure becomes more viable with a virtual machine.
    You can create a golden image of your virtual machine and deploy it with the new
    version of your infrastructure rather than trying to update an existing version.
    You should always spin up new server instances from the golden machine image,
    which acts as a template and has all the necessary security and software in place.
    This deployment strategy is also beneficial for server troubleshooting, where
    you can dispose of the server with an issue and spin up a new server from a golden
    image.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用虚拟机创建不可变基础设施变得更加可行。你可以创建虚拟机的黄金镜像，并使用它来部署新版本的基础设施，而不是尝试更新现有版本。你应始终从黄金镜像启动新的服务器实例，该镜像作为模板，已包含所有必要的安全性和软件。这种部署策略对于服务器故障排除也很有帮助，你可以丢弃出现问题的服务器，并从黄金镜像启动新服务器。
- en: You should take a backup of logs for root cause analysis before disposing of
    the server with issues. This approach also ensures consistency across the environment,
    as you use the same baseline server image to create all your environments.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在丢弃有问题的服务器之前，你应该备份日志以进行根本原因分析。这种方法还能确保环境的一致性，因为你使用相同的基准服务器镜像来创建所有环境。
- en: Loose coupling is another critical design principle that complements the “cattle
    not pets” approach. It involves designing system components so they interact with
    each other through well-defined interfaces and are independent enough that changes
    in one component do not necessitate changes in others. This separation enhances
    flexibility and scalability, allowing individual components to evolve, scale,
    or recover from failures independently. Let’s learn more about loose coupling.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 松耦合是另一个关键的设计原则，它与“牛群而非宠物”方法相辅相成。它涉及设计系统组件，使其通过明确定义的接口进行交互，并且独立性足够强，组件之间的变化不会导致其他组件的变化。这样的分离增强了灵活性和可扩展性，使得各个组件能够独立演化、扩展或从故障中恢复。让我们更深入了解松耦合。
- en: Think loose coupling
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 思考松耦合
- en: A traditional application is deployed on a tightly integrated server fleet where
    each server has a specific responsibility. Often, applications depend on multiple
    servers for completeness of functionality.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的应用程序部署在紧密集成的服务器队列上，其中每台服务器都有特定的责任。通常，应用程序依赖多个服务器来实现功能的完整性。
- en: 'As shown in the following diagram, in a tightly coupled architecture, the web
    server fleet has a direct dependency on all application servers, and vice versa:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，在紧耦合架构中，网页服务器队列直接依赖于所有应用服务器，反之亦然：
- en: '![](img/B21336_02_07.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_02_07.png)'
- en: 'Figure 2.7: Tightly coupled architecture'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：紧耦合架构
- en: In the preceding architecture diagram, if one application server goes down,
    then all web servers will start receiving errors, as the request will route to
    an unhealthy application server, which may cause a complete system failure. With
    tightly coupled architecture, if you want to scale by adding and removing servers,
    it requires lots of work, as all connections need to be set up appropriately.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的架构图中，如果某个应用服务器出现故障，所有的网页服务器将开始接收错误请求，因为请求会被路由到不健康的应用服务器，这可能导致整个系统的故障。在紧耦合架构下，如果你想通过添加或移除服务器来进行扩展，那么需要做很多工作，因为所有的连接都需要适当设置。
- en: With loose coupling, you can add an intermediate layer, such as a load balancer
    or a queue, which automatically handles failures or scaling for you.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用松耦合，你可以添加一个中间层，例如负载均衡器或队列，它会自动处理故障或扩展问题。
- en: 'In the following architecture diagram, there is a load balancer between the
    web server and the application server fleet, which makes sure that user requests
    are always served from a healthy application server:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图的架构中，网页服务器和应用服务器队列之间有一个负载均衡器，它确保用户请求始终由健康的应用服务器提供服务：
- en: '![](img/B21336_02_08.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_02_08.png)'
- en: 'Figure 2.8: Load balancer-based, loosely coupled architecture'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8：基于负载均衡器的松耦合架构
- en: If one of the application servers goes down, the load balancer will automatically
    start directing all the traffic to the other three healthy servers. Loosely coupled
    architecture also helps you to scale your servers independently and replace unhealthy
    instances gracefully. It makes your application more fault-tolerant as an error
    radius is limited to a single instance only.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个应用服务器出现故障，负载均衡器会自动将所有流量引导到其他三个健康的服务器上。松耦合架构还帮助你独立扩展服务器，并优雅地替换不健康的实例。它使得你的应用更具容错性，因为错误的范围仅限于单个实例。
- en: Loosely coupled architecture can also be queue-based; take the example of an
    image-processing website, where you need to store an image and then process it
    for encoding, thumbnails, and copyright. The following architecture diagram has
    queue-based decoupling. With this, loose coupling of systems is achieved by using
    queues between systems and exchanging messages that transfer jobs through these.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 松耦合架构也可以是基于队列的；以一个图像处理网站为例，你需要存储一张图片，然后对其进行编码、生成缩略图和版权处理。以下架构图展示了基于队列的解耦。通过在系统之间使用队列并交换消息，将工作通过这些队列传递，从而实现了系统的松耦合。
- en: '![A picture containing screenshot, text, diagram, line  Description automatically
    generated](img/B21336_02_09.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![一张包含截图、文本、图表、线条的图片  描述自动生成](img/B21336_02_09.png)'
- en: 'Figure 2.9: Queue-based, loosely coupled architecture'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9：基于队列的松耦合架构
- en: Queue-based decoupling enables the asynchronous linking of systems, where one
    server is not waiting for a response from another server and is working independently.
    This method lets you increase the number of virtual servers that receive and process
    the messages in parallel. You can configure autoscaling to terminate the excess
    servers if, for example, there is no image to process.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 基于队列的解耦实现了系统的异步连接，其中一个服务器不会等待另一个服务器的响应，而是独立工作。这种方法让你可以增加接收和处理消息的虚拟服务器数量，并行工作。如果没有需要处理的图像，例如，你可以配置自动扩展来终止多余的服务器。
- en: In a complex system, a loosely coupled architecture is achieved by creating
    a microservice architecture where independent services contain a complete set
    of functionalities and communicate with each other over a standard protocol. In
    modern design, event-driven design like this is becoming highly popular, facilitating
    the decoupling of an application component. The loosely coupled design has many
    benefits, from scalability and high availability to ease of integration.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个复杂的系统中，通过创建微服务架构来实现松耦合架构，其中独立的服务包含一整套功能，并通过标准协议彼此通信。在现代设计中，这种事件驱动的设计变得非常流行，有助于应用程序组件的解耦。松耦合设计具有许多优点，从可扩展性、高可用性到易于集成。
- en: Think service, not server
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 想想服务，而不是服务器
- en: In the previous section, you learned about loose coupling and how important
    it is for our architecture to be loosely coupled for scalability and fault tolerance.
    Developing service-oriented thinking will help to achieve a loosely coupled architecture
    (as opposed to server-oriented thinking, which can lead to hardware dependency
    and a tightly coupled architecture). Microservice-based event-driven architecture
    helps us to achieve ease of deployment and maintenance for our solution design.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你了解了松耦合以及为什么架构的松耦合对可扩展性和容错性如此重要。培养面向服务的思维将有助于实现松耦合架构（与面向服务器的思维相对，后者可能导致硬件依赖和紧耦合架构）。基于微服务的事件驱动架构帮助我们实现了解决方案设计的易部署和易维护。
- en: In a RESTful architecture, you can format a message in XML, JSON, or plain text
    and send it over Internet using a simple HTTP protocol. RESTful architecture is
    popular as it is very lightweight. Microservices are based on RESTful architecture
    and are independently scalable, which makes it easier to expand or shrink one
    component of your application without impacting others.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在RESTful架构中，你可以将消息格式化为XML、JSON或纯文本，并通过简单的HTTP协议将其发送到互联网。RESTful架构之所以受欢迎，是因为它非常轻量。微服务基于RESTful架构，并且可以独立扩展，这使得你可以在不影响其他组件的情况下，轻松扩展或缩减应用程序的某个组件。
- en: 'As you can see in the following diagram, in a monolithic architecture, all
    components are built into a single service, thus deployed in a single server and
    tied up with a single database, which creates a hard dependency. In contrast,
    in a microservice architecture, each component is independent, with its framework
    and database, which allows them to be scaled independently:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在以下图表中看到的，在单体架构中，所有组件都构建为一个服务，因此部署在单一服务器上，并与单一数据库绑定，造成了硬依赖。相比之下，在微服务架构中，每个组件都是独立的，拥有自己的框架和数据库，从而允许它们独立扩展：
- en: '![A picture containing text, screenshot, diagram, circle  Description automatically
    generated](img/B21336_02_10.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![一张包含文本、截图、图表、圆形的图片  描述自动生成](img/B21336_02_10.png)'
- en: 'Figure 2.10: Monolithic and microservice architectures'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10：单体架构与微服务架构
- en: In the preceding diagram, you can see an example of an e-commerce website as
    both a monolithic architecture and a microservice architecture, where customers
    can log in and place an order, assuming the items they want are available, by
    adding items to the cart.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，你可以看到一个电子商务网站的例子，展示了单体架构和微服务架构，在这个架构中，客户可以登录并下单，假设他们想要的商品有货，通过将商品添加到购物车来完成。
- en: To convert a monolithic architecture in to a microservice-based architecture,
    you can create applications made of small, independent components, which constitute
    smaller parts to iterate.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要将单体架构转换为基于微服务的架构，你可以创建由小型、独立组件组成的应用程序，这些组件是构成更小部分并进行迭代的基础。
- en: The *modularization approach* reduces the *cost*, *size*, *and risk of change*.
    In the preceding case, each component is created as a service. Here, the **Login**
    service can independently scale to handle more traffic, as the customer may log
    in frequently to explore the product catalog and order status. In comparison,
    the **Order** and **Cart** services may have less traffic, as a customer may not
    place an order very often.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*模块化方法*减少了*成本*、*规模*和*变更风险*。在前述案例中，每个组件都作为服务独立创建。这里，**登录**服务可以独立扩展以处理更多流量，因为客户可能会频繁登录以浏览产品目录和订单状态。相比之下，**订单**和**购物车**服务的流量可能较少，因为客户不太可能频繁下单。'
- en: Solutions architects need to think of microservices while designing a solution.
    The clear advantage of services is that you have a smaller surface area of code
    to maintain, and services are self-contained. However, monitoring microservices
    involves a more granular approach compared to traditional monolithic applications
    due to the distributed nature of microservices. Each microservice functions independently,
    which means monitoring must be implemented at the individual service level as
    well as the system level to ensure a comprehensive view of the application’s health
    and performance.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案架构师在设计解决方案时需要考虑微服务。服务的明显优势是，代码的维护面更小，而且服务是自包含的。然而，监控微服务需要比传统单体应用更为细致的方法，因为微服务的分布式特性。每个微服务独立运行，这意味着监控必须在单个服务层级以及系统层级进行，以确保对应用程序健康和性能的全面视图。
- en: You can build microservices with no external dependencies. All prerequisites
    are included in the service, which enables loose coupling and scaling, and reduces
    the blast radius in case of failure.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以构建没有外部依赖的微服务。所有的前置条件都包含在服务中，这使得松耦合和扩展成为可能，同时在发生故障时可以减少冲击范围。
- en: Any application design revolves around data, and working backward from data
    helps to build the best architecture. Let’s learn more about data-driven design.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 任何应用程序设计都围绕数据展开，从数据出发来反推设计有助于构建最佳架构。让我们进一步了解数据驱动的设计。
- en: Think data-driven design
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 思考数据驱动设计
- en: Any software solution revolves around the collection and management of data.
    Take the example of an e-commerce website; the software application is built to
    showcase product data on the website and encourage the customers to buy the products.
    It starts by collecting customer data when they create a login, adding a payment
    method, storing order transactions, and maintaining inventory data as the product
    gets sold. Another example is a banking application, which stores customer financial
    information and handles all financial transaction data with integrity and consistency.
    The most important thing for any application is handling, storing, and securing
    data appropriately. Data heavily influences solution design, and by keeping data
    in mind, you can apply the right design-driven solution for your needs.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 任何软件解决方案都围绕数据的收集和管理展开。以电子商务网站为例，软件应用程序的构建旨在展示网站上的产品数据，并鼓励客户购买产品。它从收集客户数据开始，当客户创建账户、添加支付方式、存储订单交易以及在产品销售时维护库存数据。另一个例子是银行应用程序，它存储客户的财务信息，并确保所有金融交易数据的完整性和一致性。对于任何应用程序来说，最重要的是适当地处理、存储和保护数据。数据在很大程度上影响着解决方案的设计，通过始终关注数据，你可以为自己的需求应用合适的设计驱动解决方案。
- en: It’s not just application design that revolves around data but operational maintenance
    and business decisions, too. You need to add monitoring capabilities to ensure
    that your application and your business are running without any issues. For example,
    for application monitoring, you collect log data from the server and create a
    dashboard to visualize the metrics. Continuous data monitoring and sending alerts
    in the case of issues help you to recover quickly from failure by triggering the
    auto-healing mechanism.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是应用设计围绕数据展开，运营维护和商业决策也同样如此。你需要增加监控功能，确保你的应用和业务能够顺利运行。例如，在应用监控中，你需要从服务器收集日志数据并创建仪表板以可视化指标。持续的数据监控和在出现问题时发送警报可以帮助你通过触发自动修复机制快速从故障中恢复。
- en: As a solutions architect, you are thinking about application design and the
    overall business value proposition, including ways to collect data and utilize
    it around the application, which can help to increase customer satisfaction and
    maximize the return on your investment. Data is gold, and getting insights into
    data can significantly impact an organization’s profitability.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决方案架构师，你需要考虑应用设计和整体商业价值主张，包括如何收集数据并在应用程序中加以利用，这有助于提高客户满意度并最大化投资回报。数据就是金矿，深入洞察数据能够显著影响组织的盈利能力。
- en: Adding security everywhere
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在各个方面添加安全性
- en: Security is one of the essential aspects of solution design; any gap in security
    can have a devastating effect on a business or organization’s future. Many organizations
    are compromised by security breaches, resulting in a loss of customer trust and
    damaging businesses’ reputations. Industry-standard regulations, such as **PCI**
    (**Payment Card Industry**), **HIPAA** (**Health Insurance Portability and Accountability
    Act**), **GDPR** (**General Data Protection Regulation**), and **SOC** (**System
    and Organization Controls**) compliance are pivotal frameworks securing data across
    distinct domains. PCI secures credit card information in finance, HIPAA safeguards
    patient data in healthcare, GDPR enhances data privacy in the EU, and SOC ensures
    data management security in service organizations, enforce security safeguards
    to protect consumer data while providing standard guidance to the organization.
    Depending on your industry and region, you must comply with local legislation
    by adhering to compliance needs such as these.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是解决方案设计中至关重要的方面；任何安全上的漏洞都可能对企业或组织的未来造成灾难性的影响。许多组织因安全漏洞而遭受损害，导致客户信任丧失并损害企业声誉。行业标准的规定，如**PCI**（**支付卡行业**）、**HIPAA**（**健康保险流通与问责法案**）、**GDPR**（**通用数据保护条例**）和**SOC**（**系统与组织控制**）合规性，都是确保数据在不同领域安全的关键框架。PCI保护金融行业的信用卡信息，HIPAA保护医疗行业的患者数据，GDPR增强欧盟地区的数据隐私，而SOC确保服务组织中的数据管理安全，执行安全保护措施以保护消费者数据，同时为组织提供标准化的指导。根据你的行业和地区，你必须遵守本地法规，满足诸如这些合规需求。
- en: Security can significantly impact solution design, so you need to understand
    your security needs before starting your design. Security needs to be included
    in platform readiness at the hardware level and in application development at
    the software level.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性会显著影响解决方案设计，因此在开始设计之前，你需要了解你的安全需求。安全性需要在硬件层面进行平台准备，同时在软件层面进行应用开发。
- en: 'The following are the security aspects that need to be considered during the
    design phase:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在设计阶段需要考虑的安全方面：
- en: '**Physical security of data center**: All IT resources in data centers should
    be secure from unauthorized access.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据中心物理安全**：数据中心中的所有IT资源应防止未经授权的访问。'
- en: '**Network security**: The network should be secure to prevent any unauthorized
    server access.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络安全**：网络应保持安全，防止任何未经授权的服务器访问。'
- en: '**Identity and Access Management** (**IAM**): Only authenticated users should
    have access to the application, and they can do the activity as per their authorization.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份与访问管理**（**IAM**）：只有经过身份验证的用户才能访问应用程序，并且他们可以根据授权进行相应的操作。'
- en: '**Data security in transit**: Data should be secure while traveling over the
    network or the internet.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据传输中的安全**：数据在通过网络或互联网传输时应保持安全。'
- en: '**Data security at rest**: Data should be secure while stored in the database
    or any other storage.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态数据安全**：数据在数据库或任何其他存储介质中存储时应保持安全。'
- en: '**Security monitoring**: Any security incident should be captured, and the
    team should be alerted to act.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全监控**：任何安全事件都应被捕捉，团队应收到警报并采取行动。'
- en: Application design needs to balance security requirements, such as encryption,
    and other factors, such as performance and latency. Data encryption always has
    a performance impact as it adds a layer of additional processing because data
    needs to be decrypted to be utilized. Your application needs to accommodate the
    overhead of additional encryption processing without impacting overall performance,
    so consider use cases where encryption is required while designing your application.
    For example, if the data is confidential, you need to encrypt it.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序设计需要平衡安全要求（如加密）与其他因素（如性能和延迟）。数据加密始终会对性能产生影响，因为它增加了额外的处理层，因为数据需要解密才能被使用。您的应用程序需要在不影响整体性能的情况下适应额外加密处理的开销，因此在设计应用程序时要考虑需要加密的使用场景。例如，如果数据是机密的，您需要对其进行加密。
- en: The other aspect of application design to consider related to security is regulatory
    compliance for adherence to local law. Compliance is essential if your application
    belongs to a regulated industry such as healthcare, finance, or the federal government.
    Each type of compliance has its requirements, which commonly include data protection
    and recording each activity for audit purposes. Your application design should
    include comprehensive logging and monitoring, which will fulfill the audit requirement.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 与安全相关的应用程序设计的另一个方面是遵守当地法律的合规性。如果您的应用程序属于受监管行业（如医疗、金融或联邦政府），合规性至关重要。每种合规性都有其要求，通常包括数据保护和记录每项活动以供审计。您的应用程序设计应包括全面的日志记录和监控，以满足审计要求。
- en: Security is one of the most important aspects of application resiliency. From
    a security perspective, a **Distributed Denial of Service** (**DDoS**) attack
    can potentially impact the availability of services and applications. A DDoS attack
    usually puts fake traffic in your server and makes it busy, meaning legitimate
    users cannot access your application. This can happen at the network layer or
    the Application Layer. It’s essential to take a proactive approach to prevent
    DDoS attacks. Keep as much of the application workload as possible in the private
    network and avoid exposing your application endpoints to the internet wherever
    possible.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是应用程序弹性最重要的方面之一。从安全角度来看，**分布式拒绝服务**（**DDoS**）攻击可能会影响服务和应用程序的可用性。DDoS攻击通常会在服务器上产生虚假流量，使其忙碌，这意味着合法用户无法访问您的应用程序。这种攻击可能发生在网络层或应用层。采取积极的预防措施来防止DDoS攻击至关重要。尽可能将应用程序的工作负载保留在私有网络中，并避免将应用程序端点暴露在互联网上。
- en: Security automation is another factor you should consistently implement along
    with your design to reduce and mitigate any security incidents. Automation in
    security involves utilizing technology to perform security tasks without human
    intervention, streamlining the detection, analysis, and remediation of security
    incidents. By integrating automated security measures, you can achieve continuous
    monitoring and real-time threat detection, enabling quicker responses to vulnerabilities
    and breaches.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 安全自动化是您应始终与设计一起实施的另一个因素，以减少和缓解任何安全事件。安全自动化涉及利用技术执行安全任务，而无需人工干预，从而简化安全事件的检测、分析和修复。通过集成自动化的安全措施，您可以实现持续监控和实时威胁检测，从而更快响应漏洞和安全漏洞。
- en: In this section, you have learned how to apply security thinking while designing
    and considering any regulatory needs. However, you have a high-level overview
    here. You will learn more details in *Chapter 7*, *Security Considerations*.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您已经学习了如何在设计过程中应用安全思维，并考虑任何监管需求。然而，您在这里得到的是一个高层次的概述。您将在*第7章*，*安全性考虑*中学习更多细节。
- en: You might create a feature-rich product, but it may not appeal broadly to users
    until they find it easy to navigate and access. Your application’s usability and
    accessibility play a significant role in product success. Let’s learn more about
    this in the next section.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会创建一个功能丰富的产品，但只有当用户发现它易于导航和访问时，才会广泛吸引用户。应用程序的可用性和可访问性在产品成功中起着至关重要的作用。让我们在下一部分了解更多内容。
- en: Making applications usable and accessible
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使应用程序易用且可访问
- en: Ensuring applications are both usable and accessible is a critical aspect of
    design that impacts the user experience significantly. Usability refers to how
    easy and intuitive an application is for users to interact with, which involves
    a user-friendly interface, clear navigation, and efficient task-completion processes.
    Accessibility, on the other hand, ensures that applications are usable by people
    with various disabilities. Let’s learn more about these.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 确保应用既可用又可访问是设计中的一个关键方面，直接影响用户体验。可用性指的是用户与应用交互时的易用性和直观性，这涉及到用户友好的界面、清晰的导航以及高效的任务完成流程。另一方面，可访问性确保应用可以被各种有不同障碍的用户使用。我们来了解更多相关内容。
- en: Achieving usability
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现可用性
- en: You want your users to have a seamless experience browsing through the application.
    It should be so smooth that they don’t even notice how easily they can find things
    without any difficulties. You can do this by making your application highly usable.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望用户在浏览应用时能够拥有无缝的体验。它应该顺畅到让用户甚至不注意到他们是如何轻松找到所需内容的，而没有遇到任何困难。你可以通过提高应用的可用性来实现这一点。
- en: Usability is how quickly the user can learn navigation logic when using your
    application for the first time. It’s about how quickly they can bounce back if
    they make a mistake and whether they can perform the task efficiently. Complex
    and feature-rich applications have no meaning if they can’t be used effectively.
    The goal is to create an intuitive and user-friendly interface that enhances the
    user experience, ensuring that the application’s functionality is accessible and
    straightforward for all users.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性是指用户第一次使用应用时能够多快学习到导航逻辑。它关乎用户如果犯错后能多快恢复，并且是否能高效完成任务。如果应用功能复杂且功能丰富，但不能有效使用，那么它就没有意义。目标是创建一个直观且用户友好的界面，提升用户体验，确保应用的功能对于所有用户都可访问且易于理解。
- en: User research and testing are essential to defining usability that can satisfy
    user experience.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 用户研究和测试对于定义能够满足用户体验的可用性至关重要。
- en: Achieving accessibility
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现可访问性
- en: When designing your application, you often want to target a global audience
    or significant geographic region. Your user base will be diverse regarding technical
    amenities and physical abilities. Accessibility is about inclusion; you want your
    application to be accessible to everyone, regardless of whether a user has a slow
    internet connection, uses an old device, or has physical limitations.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计应用时，你通常希望面向全球用户或重要的地理区域。你的用户群体在技术设施和身体能力方面会有很大的差异。可访问性关乎包容性；你希望你的应用对每个人都可访问，无论用户是否有慢速的互联网连接、使用旧设备，还是有身体限制。
- en: While designing an application, a solutions architect must ensure that accessibility
    is considered. Sometimes, a different version of the application may need to be
    created altogether to achieve that.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计应用时，解决方案架构师必须确保考虑到可访问性。有时，可能需要完全创建应用的不同版本来实现这一目标。
- en: Accessibility design should include design components, such as voice recognition
    and voice-based navigation, screen magnifiers, and the ability to read content
    aloud to aid those who cannot easily access and use applications due, for example,
    to vision or hearing impairment.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 可访问性设计应包括设计组件，例如语音识别与语音导航、屏幕放大器，以及能将内容大声朗读出来的功能，以帮助那些因视力或听力障碍而无法轻松访问和使用应用的用户。
- en: Localization helps the application become available in a language that’s specific
    to a region (for example, Spanish, Mandarin, German, Hindi, or Japanese), enabling
    global users across the world to navigate your application in their local languages.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化帮助应用以特定地区的语言（例如西班牙语、普通话、德语、印地语或日语）提供服务，使全球用户能够以自己的母语浏览应用。
- en: As shown in *Figure 2.11*, customer satisfaction is a key component of usability
    and accessibility.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图2.11*所示，客户满意度是可用性和可访问性的重要组成部分。
- en: '![](img/B21336_02_11.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_02_11.png)'
- en: 'Figure 2.11: Customer satisfaction with usability and accessibility'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11：客户对可用性和可访问性的满意度
- en: You must know your users to achieve usability and accessibility—where accessibility
    is a component of usability—as they go hand in hand. Before starting the solution
    design process, a solutions architect should work alongside a product owner to
    research users by conducting interviews and surveys and gathering feedback on
    the mock frontend design. You need to understand the users’ limitations and empower
    them with supporting features during application development.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现可用性和可访问性，你必须了解你的用户——其中可访问性是可用性的一个组成部分——它们是密切相关的。在开始解决方案设计过程之前，解决方案架构师应与产品负责人一起，通过访谈和调查研究用户，并收集对前端设计原型的反馈。你需要了解用户的限制，并在应用开发过程中通过支持性功能赋能用户。
- en: When the product is launched, the team should plan for A/B testing by routing
    a small portion of user traffic to new features and understanding user reactions.
    A/B testing involves comparing two versions of an application to evaluate their
    performance and determine the superior option. After launch, the application must
    have a mechanism to collect continuous feedback (by providing a feedback form
    or by launching customer support) to make the design better.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当产品上线时，团队应该规划 A/B 测试，将一小部分用户流量引导到新功能上，并了解用户的反应。A/B 测试涉及对比应用的两个版本，评估其表现，并确定哪个版本更优。上线后，应用程序必须具备收集持续反馈的机制（例如提供反馈表单或启动客户支持），以不断优化设计。
- en: As your users keep evolving, your architecture should be able to keep up with
    increasing demands. For that, you need to design extendable and future-proof architecture.
    Let’s learn how to make your architecture future-proof.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 随着用户不断变化，架构应能够跟上不断增长的需求。为此，你需要设计可扩展且具有未来保障的架构。让我们学习如何使你的架构具备未来保障。
- en: Building future-proof extendable and reusable architecture
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建具有未来保障的可扩展和可重用架构
- en: Businesses evolve as they grow; applications scale to handle an increased user
    base and add more features to stay ahead and attain a competitive edge. A solution
    design needs to be extendable and flexible enough to modify an existing feature
    or add new functionality.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 随着企业的成长，业务也在不断演变；应用程序需要扩展以应对日益增加的用户群体，并增加更多功能，以保持领先地位并获得竞争优势。解决方案设计需要具备足够的可扩展性和灵活性，以便修改现有功能或添加新功能。
- en: To achieve solution extensibility, a solutions architect must use a loosely
    coupled architecture wherever possible. At a high level, creating a RESTful or
    queue-based architecture can help develop loosely coupled communication between
    different modules or across applications. You will learn more about the other
    kinds of architecture in *Chapter 4*, *Solution Architecture Design Patterns*.
    In this section, we will take a simple example to explain the concept of architectural
    flexibility.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现解决方案的可扩展性，解决方案架构师必须尽可能使用松耦合架构。总体而言，创建 RESTful 或基于队列的架构有助于在不同模块或跨应用程序之间开发松耦合的通信。你将在*第4章*、*解决方案架构设计模式*中学习到更多关于其他类型架构的内容。在本节中，我们将通过一个简单的例子来解释架构灵活性的概念。
- en: To modularize their application, organizations often want to build a platform
    with a group of features and launch them as separate applications. This is only
    possible with a reusable design.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模块化他们的应用程序，组织通常希望构建一个包含一组功能的平台，并将其作为独立的应用程序发布。这只有通过可重用的设计才能实现。
- en: '*Figure 2.12* shows an API-based architecture in an e-commerce application.
    Here, you have independent services, such as product catalog, order, payment,
    and shipping, utilized by an end user application in a pick-and-choose manner.
    The customer uses mobile and browser applications to place an online order. These
    applications need a product catalog service to allow the customer to browse the
    products on the web, an order service to allow them to place an order, and a payment
    service to process a payment.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.12* 显示了一个电商应用中的基于 API 的架构。在这里，你有独立的服务，如产品目录、订单、支付和配送，最终用户应用程序可以按需选择使用这些服务。客户通过移动端和浏览器应用程序下单。这些应用程序需要一个产品目录服务，让客户浏览网页上的产品，一个订单服务让他们下单，以及一个支付服务处理支付。'
- en: In turn, the product catalog and order service communicate with the shipping
    service to send ordered items to the customer’s doorstep. On the other hand, brick-and-mortar
    stores use point-of-sale systems, where a customer representative scans barcodes,
    places orders on behalf of the customer, and takes payment. No shipping service
    is required here, as the customer picks up the item in-store.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来，产品目录和订单服务与配送服务进行通信，将已订购的商品送到客户的家门口。另一方面，实体店使用销售点系统，客户代表扫描条形码、代为下单并收取付款。在这里不需要配送服务，因为顾客可以到店内领取商品。
- en: '![](img/B21336_02_12.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21336_02_12.png)'
- en: 'Figure 2.12: Extensible API-based architecture'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12：基于 API 的可扩展架构
- en: In *Figure 2.12*, you can see the Reward API used for third-party API integration.
    This architecture allows you to extend the current design to integrate the Reward
    API for customer retention and to attract new customers by providing benefits
    when they purchase an item. Here, you can see how payment services are reutilized
    by both online and store ordering. Another service can resue payment service if
    the organization wants to take payments for a gift card service, food services,
    and so on.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 2.12*中，您可以看到用于第三方 API 集成的 Reward API。这种架构允许您扩展当前设计，以集成 Reward API，从而通过在客户购买商品时提供优惠来提高客户保持率，并吸引新客户。在这里，您可以看到支付服务被在线和店内订单共同重用。如果组织希望为礼品卡服务、餐饮服务等收取付款，另一个服务也可以重用支付服务。
- en: Extensibility and reusability are not limited to the service design level—they
    go deep into the actual API framework level, where software architects should
    use **object-oriented analysis and design** (**OOAD**) concepts, such as inheritance,
    to create an API framework. This can be extended and reutilized to add more features
    to the same service.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性和可重用性不仅限于服务设计层面——它们深入到实际的 API 框架层面，软件架构师应该使用**面向对象分析与设计**（**OOAD**）的概念，如继承，来创建一个可扩展和可重用的
    API 框架，为同一服务添加更多功能。
- en: OOAD is a foundational approach in software engineering that helps developers
    plan and model applications more effectively, ensuring that the software is modular,
    scalable, and maintainable.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: OOAD 是软件工程中的一种基础性方法，帮助开发人员更有效地规划和建模应用程序，确保软件具有模块化、可扩展和可维护的特性。
- en: In order to extend your application feature, it needs to work seamlessly with
    other products where it can extend data and transactions. Making your application
    interoperable to the ecosystem helps to add new features by utilizing other adjacent
    applications. Let’s learn more about making compatible architecture.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展应用程序功能，它需要与其他产品无缝对接，以便扩展数据和事务。使应用程序与生态系统互操作有助于通过利用其他相关应用程序来添加新功能。让我们进一步了解如何构建兼容的架构。
- en: Ensuring architectural interoperability and portability
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保架构的互操作性和可移植性
- en: Architectural interoperability and portability are crucial aspects of modern
    software architecture, ensuring that applications can work across different environments
    and interact seamlessly with other systems. Let’s look at these concepts.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 架构的互操作性和可移植性是现代软件架构中至关重要的方面，确保应用程序能够在不同环境中运行，并与其他系统无缝地互动。让我们来看一下这些概念。
- en: Making applications interoperable
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使应用程序具备互操作性
- en: Interoperability is the ability of one application to work with others through
    a standard format or protocol. Often, an application must communicate with various
    upstream systems to consume data and downstream systems to supply data, so it
    is essential to establish that communication seamlessly.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 互操作性是指一个应用程序通过标准格式或协议与其他应用程序协同工作的能力。通常，一个应用程序需要与多个上游系统进行通信以获取数据，并与下游系统进行通信以提供数据，因此，确保这种通信无缝进行至关重要。
- en: An e-commerce application, for example, needs to work with other applications
    in the supply chain management ecosystem. This includes enterprise resource planning
    applications to record all transactions, transportation life cycle management,
    shipping companies, order management, warehouse management, and labor management.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个电子商务应用程序需要与供应链管理生态系统中的其他应用程序协同工作。这包括企业资源规划应用程序，用于记录所有交易，运输生命周期管理、运输公司、订单管理、仓库管理和劳动管理。
- en: All applications should be able to exchange data seamlessly to achieve an end-to-end
    feature from customer order to delivery. You will encounter similar use cases
    everywhere, whether it is a healthcare application, manufacturing application,
    or telecom application.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 所有应用程序应该能够无缝交换数据，以实现从客户订单到交付的端到端功能。无论是在医疗保健应用、制造应用，还是电信应用中，您都会遇到类似的使用案例。
- en: A solutions architect needs to consider application interoperability during
    design by identifying and working with various system dependencies. An interoperable
    application saves a lot in terms of cost, as it depends on systems that can communicate
    in the same format without any data messaging effort.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案架构师在设计时需要考虑应用程序的互操作性，通过识别并处理各种系统依赖关系。一个互操作的应用程序在成本方面能够节省很多，因为它依赖于可以以相同格式进行通信的系统，无需任何数据消息传输工作。
- en: Each industry has its standard data exchange size that needs to be understood
    and adhered to. In general, for software design, the architect may choose a popular
    format, such as JSON or XML, for different applications so that they can communicate
    with each other. Both formats are supported out of the box in modern RESTful API
    design and microservice architecture.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 每个行业都有其标准的数据交换大小，需要了解并遵守。一般来说，在软件设计中，架构师可以为不同的应用选择一种流行的格式，如 JSON 或 XML，以便它们能够相互通信。现代
    RESTful API 设计和微服务架构都原生支持这两种格式。
- en: Making applications portable
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使应用程序具备可移植性
- en: System portability allows your application to work across different environments
    without or with only minimal changes. Any software application must work across
    various operating systems and hardware to achieve higher usability.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 系统可移植性允许您的应用在不同环境中运行，且只需最小的更改或不需要更改。任何软件应用都必须能够在各种操作系统和硬件上运行，以实现更高的可用性。
- en: Since technology changes rapidly, you will often see that a new version of a
    software language, development platform, or operating system is released and you
    will need to ensure your application can adapt to these changes. Today, mobile
    applications are an integral part of any system design, and your mobile apps need
    to be compatible with major mobile operating system platforms, such as iOS and
    Android.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 由于技术变化迅速，您经常会看到新的软件语言、开发平台或操作系统版本发布，您需要确保您的应用程序能够适应这些变化。如今，移动应用程序是任何系统设计中不可或缺的一部分，您的移动应用需要与主要的移动操作系统平台兼容，例如
    iOS 和 Android。
- en: During the design phase, the solutions architect needs to choose a technology
    that can achieve the desired portability of the application. For example, if you
    aim to deploy your application across different operating systems, programming
    languages such as Java may be a good choice, as all operating systems often support
    it, and your application will work on a different platform without needing to
    be ported across. For mobile applications, an architect may choose a JavaScript-based
    framework such as React Native, which can provide cross-platform mobile app development.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计阶段，解决方案架构师需要选择一种可以实现应用程序所需可移植性的技术。例如，如果您的目标是将应用程序部署到不同的操作系统上，像 Java 这样的编程语言可能是一个不错的选择，因为几乎所有操作系统都支持它，您的应用将能够在不同平台上运行，而无需进行移植。对于移动应用，架构师可能会选择一个基于
    JavaScript 的框架，如 React Native，它可以提供跨平台的移动应用开发。
- en: Interoperability enriches system extensibility, and portability increases the
    usability of an application. Both are critical attributes of architecture design
    and may add exponential costs if not addressed during solution design. A solutions
    architect must carefully consider both aspects per industry requirements and system
    dependencies.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 互操作性丰富了系统的扩展性，而可移植性增加了应用程序的可用性。两者都是架构设计的关键属性，如果在解决方案设计时没有得到解决，可能会带来成倍的成本。解决方案架构师必须根据行业需求和系统依赖关系仔细考虑这两个方面。
- en: Automation is key to reducing errors and improving efficiency. We will look
    at this next.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化是减少错误和提高效率的关键。我们接下来会讨论这个。
- en: Applying automation everywhere
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在各处应用自动化
- en: Most accidents happen due to human error, which can be avoided using **automation**.
    Automation not only handles jobs efficiently but also increases productivity and
    saves costs. Anything identified as a repeatable task can be automated to free
    up valuable human resources so team members can spend their time on more exciting
    work and focus on solving a real problem. It also helps to increase team morale.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数事故发生是由于人为错误，而这些错误可以通过**自动化**避免。自动化不仅能够高效处理任务，还能提高生产力并节省成本。任何被认为是可重复的任务都可以进行自动化，从而释放宝贵的人力资源，让团队成员将时间用于更有趣的工作，并专注于解决实际问题。这也有助于提高团队士气。
- en: 'When designing a solution, think about what can be automated. Think about automating
    any repeatable task. Consider the following components to be automated in your
    solution:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计解决方案时，要考虑可以自动化的部分。思考哪些可重复的任务可以被自动化。考虑以下组件是否可以在你的解决方案中自动化：
- en: '**Application testing**: You need to test your application every time you make
    any changes to ensure nothing breaks. Also, manual testing is very time-consuming
    and requires lots of resources. Automating repeatable test cases is better to
    speed up deployment and product launch. Automate your testing on a production
    scale and use rolling deployment techniques, such as canary and A/B testing, to
    release changes. Canary testing involves releasing changes to a small group of
    users to assess the impact and detect issues before a full rollout, acting as
    an early warning system for potential problems. A/B testing, or split testing,
    compares two versions of an application to determine which one performs better
    with users, guiding decisions based on data.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用测试**：每次对应用程序进行更改时，都需要进行测试，以确保没有破坏任何功能。此外，手动测试非常耗时并且需要大量资源。自动化可重复的测试用例更有利于加速部署和产品发布。你应该在生产规模上自动化测试，并使用滚动部署技术，如金丝雀发布和A/B测试，来发布更改。金丝雀测试涉及将更改发布给一小部分用户，以评估影响并在全面推出之前发现问题，充当潜在问题的早期警告系统。A/B测试，或称为分流测试，比较应用程序的两个版本，以确定哪个版本在用户中表现更好，基于数据做出决策。'
- en: '**IT infrastructure**: You can automate your infrastructure by using *infrastructure
    as code* scripting, for example, Ansible, Terraform, and Amazon CloudFormation.
    The automation of infrastructure allows environments to be created in minutes
    compared to days. Automating infrastructure as code helps avoid configuration
    errors and creates a replica of the environment.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IT基础设施**：你可以通过使用*基础设施即代码*脚本来自动化你的基础设施，例如Ansible、Terraform和Amazon CloudFormation。基础设施的自动化使得环境的创建能够从几天缩短到几分钟。将基础设施作为代码进行自动化可以避免配置错误，并创建环境的副本。'
- en: '**Logging, monitoring, and alerting**: Monitoring is critical, and you want
    to monitor everything every time to make sure all parts of your application are
    functioning properly and you can take proactive measures to fix any issues. You
    can only monitor the vast system by using automation. You need to automate all
    activity monitoring and logs to ensure that your application is running smoothly
    and functioning as desired. Also, based on monitoring, you should take automated
    action, such as scaling up your system or alerting your team to act.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录、监控和警报**：监控至关重要，你需要时刻监控一切，以确保应用程序的各个部分都正常运行，并能主动采取措施解决任何问题。只有通过自动化才能有效监控庞大的系统。你需要自动化所有活动监控和日志记录，以确保你的应用程序平稳运行并按预期工作。此外，基于监控，你应该采取自动化措施，如扩展系统或向团队发出警报以采取行动。'
- en: '**Deployment automation**: Deployment is a repeatable task that is very time-consuming
    and delays the last-minute launch in many real-time scenarios. Automating your
    deployment pipeline by applying **continuous integration and continuous deployment**
    (**CI/CD**) helps you to be agile and iterate quickly on product features with
    frequent launches. CI/CD helps you make small, incremental changes to your application.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署自动化**：部署是一个可重复的任务，非常耗时，并且在许多实时场景中会导致最后时刻的发布延迟。通过应用**持续集成和持续部署**（**CI/CD**）自动化部署管道，能够帮助你更灵活，快速迭代产品特性，并进行频繁的发布。CI/CD帮助你对应用程序进行小规模、增量式的更改。'
- en: '**Security automation**: While automating everything, remember to add automation
    for security. If someone tries to hack your application, you want to know immediately
    and act quickly.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全自动化**：在自动化一切时，记得加入安全自动化。如果有人试图攻击你的应用程序，你需要立即知道并迅速采取行动。'
- en: You want to take preventive action by automating any incoming or outgoing traffic
    in your system boundary and setting alerts for suspicious activity.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要通过自动化任何进出系统边界的流量，并设置警报以监控可疑活动，从而采取预防措施。
- en: Automation provides peace of mind by helping to ensure the product functions
    without a glitch. When designing an application, always think from an automation
    perspective and consider that as a critical component. You will learn more about
    automation in *Chapter 9*, *Operational Excellence Considerations*.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化通过帮助确保产品无故障运行，提供了安心感。在设计应用程序时，总是从自动化的角度思考，并将其视为一个关键组件。你将在*第9章*，*运营卓越的考虑因素*中深入了解自动化。
- en: Plan for business continuity
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务连续性规划
- en: There may be a situation when the entire region where your data center is located
    goes down due to massive power grid outages, earthquakes, floods, or a security
    attack but your global business should continue running. In such situations, you
    must have a disaster recovery plan in which you will plan your business continuity
    by preparing sufficient IT resources in an entirely different region, perhaps
    even in different continents or countries, so that your business can get back
    up and running quickly or experience no downtime at all.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会出现这样的情况：由于大规模电网故障、地震、洪水或安全攻击，数据中心所在的整个区域出现停机，但你的全球业务应该继续运行。在这种情况下，你必须有一个灾难恢复计划，通过在完全不同的地区，甚至不同的大陆或国家，准备足够的IT资源来规划业务连续性，以便在出现问题时，业务能够迅速恢复或完全没有停机。
- en: When planning disaster recovery, a solutions architect must understand an organization’s
    **Recovery Time Objective** (**RTO**) and **Recovery Point Objective** (**RPO**).
    RTO measures how much downtime a business can sustain without significant impact;
    RPO indicates how much data loss a business can tolerate. Reducing RTO and RPO
    means incurring higher costs, so it is essential to understand whether the business
    is mission-critical and needs minimal RTO and RPO. For example, a stock trading
    application cannot afford to lose a single data point, and a railway signaling
    application cannot be down for a single second, as human life depends on it.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划灾难恢复时，解决方案架构师必须了解组织的**恢复时间目标**（**RTO**）和**恢复点目标**（**RPO**）。RTO衡量业务可以承受多长时间的停机而不会造成重大影响；RPO则表示业务可以容忍多少数据丢失。减少RTO和RPO意味着需要更高的成本，因此了解业务是否是关键任务并需要最小的RTO和RPO非常重要。例如，股票交易应用不能承受丢失任何数据点，而铁路信号系统应用不能有一秒钟的停机，因为人的生命安全依赖于此。
- en: The architecture diagram in *Figure 2.13* shows a multi-site disaster recovery
    architecture. The primary data center location is in Ireland, Europe, and the
    disaster recovery site is in Virginia, USA, hosted on the AWS public cloud. In
    this case, a business can continue operating even if something happens to the
    European region or the public cloud. The fact that the disaster recovery plan
    is based on a multi-site model to achieve minimal RTO and RPO means minimal to
    no outage and no data loss.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.13*中的架构图展示了一个多站点灾难恢复架构。主要数据中心位于欧洲爱尔兰，灾难恢复站点位于美国弗吉尼亚州，托管在AWS公有云上。在这种情况下，即使发生了欧洲地区或公有云的故障，企业仍然可以继续运营。基于多站点模型的灾难恢复计划，能够实现最小的RTO和RPO，这意味着几乎没有停机时间和数据丢失。'
- en: '![A diagram of a server  Description automatically generated with low confidence](img/B21336_02_13.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![服务器示意图  描述自动生成，置信度较低](img/B21336_02_13.png)'
- en: 'Figure 2.13: Hybrid multi-site disaster recovery architecture'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13：混合多站点灾难恢复架构
- en: 'The following are the most common disaster recovery plans, all of which you
    will learn about in *Chapter 11*, *DevOps and Solution Architecture Framework*:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最常见的灾难恢复计划，所有这些你将在*第11章*，*DevOps与解决方案架构框架*中了解：
- en: '**Backup and Store**: This plan is the least costly but has the maximum RTO
    and RPO. In this plan, all the server’s machine images and database snapshots
    should be stored in the disaster recovery site. The team will try to restore the
    disaster site from a backup in a disaster.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份与存储**：这是成本最低的方案，但具有最大的RTO和RPO。在该方案中，所有服务器的机器镜像和数据库快照应存储在灾难恢复站点。团队将在灾难发生时尝试从备份中恢复灾难站点。'
- en: '**Pilot lite**: In this plan, all the server’s machine images are stored as
    a backup, and a small database server is maintained in the disaster recovery site
    with continual data synchronization from the leading site. Other critical services,
    such as Active Directory, may be running in small instances. In a disaster, the
    team will try to bring up the server from the machine image and scale up a database.
    Pilot lite is more costly but has lower RTO and RPO than Backup and Store.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pilot lite**：在此计划中，所有服务器的机器镜像都会被存储为备份，并且在灾难恢复站点维护一个小型数据库服务器，与主站点进行持续的数据同步。其他关键服务，如
    Active Directory，可能会在小型实例中运行。在灾难发生时，团队将尝试从机器镜像中启动服务器，并扩展数据库。Pilot lite 方案比备份和存储更昂贵，但具有较低的
    RTO 和 RPO。'
- en: '**Warm standby**: In this plan, all the application and database server (running
    at low capacity) instances in the disaster recovery site continue to sync up with
    the leading site. In a disaster, the team will try to scale up all the servers
    and databases. Warm standby is costlier than the pilot lite option but has lower
    RTO and RPO.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Warm standby**：在此计划中，灾难恢复站点中的所有应用程序和数据库服务器（以低容量运行）实例继续与主站点同步。在灾难发生时，团队将尝试扩展所有服务器和数据库。Warm
    standby 方案比 Pilot lite 更昂贵，但具有更低的 RTO 和 RPO。'
- en: '**Multi-site**: This plan is the most expensive and has a near-zero RTO and
    RPO. This plan maintains a replica of the leading site in a disaster recovery
    site with equal capacity that actively serves user traffic. In a disaster, all
    traffic will be routed to an alternate location.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Multi-site**：此计划是最昂贵的，具有接近零的 RTO 和 RPO。此计划在灾难恢复站点中保持主站点的副本，并拥有相同的容量，能够主动服务用户流量。在灾难发生时，所有流量将被路由到备用位置。'
- en: Often, organizations choose a less costly option for disaster recovery, but
    it is essential to perform regular testing to ensure the failover works. The team
    should make operational excellence a routine checkpoint to ensure business continuity
    during disaster recovery. Running your application in production and maintaining
    it for years is very important. Let’s learn about the principles of making your
    application maintainable and operational.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，组织会选择成本较低的灾难恢复方案，但必须定期进行测试以确保故障切换能够正常工作。团队应将操作卓越性作为常规检查点，以确保在灾难恢复期间保持业务连续性。将应用程序投入生产并维护多年非常重要。让我们了解如何使应用程序具有可维护性和操作性的原则。
- en: Design for operation
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为运营设计
- en: Operational excellence can be a great differentiator for your application by
    providing a high-quality service to customers with minimal outages. Applying operational
    excellence proactively also helps support and engineering teams increase productivity.
    Maintainability goes hand in hand with operational excellence. Easily maintainable
    applications help reduce costs, avoid errors, and let you gain a competitive edge.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 操作卓越性可以成为您应用程序的巨大差异化因素，通过提供高质量的服务给客户，减少停机时间。主动应用操作卓越性还帮助支持和工程团队提高生产力。可维护性与操作卓越性密切相关。易于维护的应用程序有助于降低成本，避免错误，并使您获得竞争优势。
- en: A solutions architect needs to design for operation, including how the workload
    will be deployed, updated, and operated in the long term. Planning for logging,
    monitoring, and alerting is essential to capture all incidents and take quick
    action for the best user experience. Apply automation wherever possible, whether
    deploying infrastructures or changing the application code, to avoid human error.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案架构师需要为运营设计，包括工作负载如何部署、更新和长期运营。规划日志记录、监控和警报至关重要，以捕捉所有事件并采取快速行动以确保最佳的用户体验。在可能的情况下应用自动化，无论是部署基础设施还是更改应用程序代码，以避免人为错误。
- en: Including deployment methods and automation strategy in your design is very
    important, as this can accelerate the time to market for any new changes without
    impacting existing operations. Operational excellence planning should consider
    security and compliance elements, as regulatory requirements may change over time,
    and your application must adhere to them to operate.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计中包括部署方法和自动化策略非常重要，因为这可以加速任何新变更的上市时间，而不影响现有的运营。操作卓越性规划应考虑安全性和合规性因素，因为监管要求可能会随时间变化，您的应用程序必须遵守这些要求才能正常运行。
- en: Maintenance can be proactive or reactive; for example, once a new version of
    an operating system becomes available, you can modernize your application to switch
    platforms immediately or monitor system health and wait until the end of the life
    of the software before making any changes. In any case, changes should be made
    in small increments with a rollback strategy. To apply these changes, you can
    automate the entire process by setting up a CI/CD pipeline. For the launch, you
    can plan for A/B testing or blue-green deployment.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 维护可以是主动的，也可以是被动的；例如，一旦有新版本的操作系统发布，你可以立即更新你的应用程序以切换平台，或者监控系统健康状况，直到软件生命周期结束才进行任何更改。在任何情况下，变更都应该以小的增量进行，并且有回滚策略。为了应用这些变更，你可以通过设置CI/CD流水线来自动化整个过程。在发布时，你可以计划A/B测试或蓝绿部署。
- en: For operational readiness, architecture design should include the appropriate
    documents and knowledge-sharing mechanisms—for example, creating and maintaining
    a runbook to document routine activity and creating a playbook to guide your system
    process through issues. This allows you to act quickly in the event of an incident.
    You should use *root cause analysis* for post-incident reporting to determine
    why the issue occurred and ensure it doesn’t happen again.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对于运营准备，架构设计应包括适当的文档和知识共享机制——例如，创建并维护运行手册以记录日常活动，并创建操作手册以指导你的系统过程应对问题。这使得你在发生事故时能够迅速采取行动。你应该使用*根本原因分析*进行事后报告，以确定问题发生的原因，并确保不会再发生。
- en: Operational excellence and maintenance are ongoing; every operational event
    and failure is an opportunity to improve your operation by learning from previous
    mistakes. You must analyze the operation’s activities and failures, experiment,
    and improve. You will learn more about operational excellence in *Chapter 9*,
    *Operational Excellence Considerations*.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 运营卓越和维护是持续进行的；每一次操作事件和故障都是通过从以往的错误中学习来改善操作的机会。你必须分析操作活动和故障，进行实验，并不断改进。你将在*第9章*，*运营卓越的考虑因素*中学到更多关于运营卓越的内容。
- en: In *Chapter 1*, *Solutions Architects in Organizations*, you learned about the
    various constraints a solution architecture needs to handle and balance. It is
    a key architectural principle to take care of constraints, and we will look at
    this next.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第1章*，*组织中的解决方案架构师*中，你学习了一个解决方案架构需要处理和平衡的各种约束。处理约束是一个关键的架构原则，我们接下来会详细讨论这个问题。
- en: Overcoming architectural constraints
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克服架构约束
- en: When designing an application architecture, the significant limitations are
    cost, time, budget, scope, schedule, and resources. Overcoming these constraints
    is a significant factor that must be considered while designing a solution. You
    should look at the limitations as challenges that can be overcome rather than
    obstacles, as challenges always push you to the limit of innovation.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计应用架构时，主要的限制因素是成本、时间、预算、范围、计划和资源。克服这些约束是设计解决方案时必须考虑的重要因素。你应该将这些限制视为可以克服的挑战，而不是障碍，因为挑战总是推动你达到创新的极限。
- en: A solutions architect needs to make suitable trade-offs while considering the
    constraints. For example, a high-performance application results in more cost
    when you need to add additional caching in multiple layers of architecture. However,
    sometimes, cost is more important than performance, primarily if a system is used
    by internal employees, which may not directly impact revenue. Sometimes, the market
    is more important than launching a fully featured product, and you need to make
    the trade-off between scope versus speed. In such scenarios, you can take the
    **minimum viable product** (**MVP**) approach; you will learn more about this
    in the next section.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案架构师需要在考虑约束的同时做出适当的权衡。例如，高性能应用需要在架构的多个层次中添加额外的缓存，这会导致更多的成本。然而，有时，成本比性能更重要，特别是当一个系统被内部员工使用时，这可能不会直接影响收入。有时，市场的需求比推出一个功能全面的产品更为重要，在这种情况下，你需要在范围和速度之间做出权衡。在这种情况下，你可以采用**最小可行产品**（**MVP**）的方法；你将在下一节中学到更多关于这一点的内容。
- en: Technology constraints become evident in a large organization, as bringing changes
    across hundreds of systems will be challenging. When designing applications, you
    need to use the most common technique across the organization. You also need to
    make sure that the application is upgradable to adopt new technology and be able
    to plug in components built on a different platform.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型组织中，技术约束变得尤为明显，因为在数百个系统中进行变更将是一个巨大的挑战。在设计应用程序时，需要使用组织内最常见的技术。还需要确保应用程序能够升级，以便采用新技术，并能够插入在不同平台上构建的组件。
- en: A RESTful service model is popular when teams are free to use any technology
    for their development. They only need to provide a URL with which their services
    can be accessed. Even legacy systems such as mainframes can be integrated into
    the new system using an API wrapper around it, and this can help overcome technology
    challenges.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当团队可以自由选择任何技术进行开发时，RESTful服务模型非常受欢迎。它们只需要提供一个URL，客户就可以通过该URL访问他们的服务。即使是旧的系统，如大型主机，也可以通过围绕其构建的API封装器集成到新系统中，这有助于克服技术挑战。
- en: Throughout this book, you will learn more about handling various architectural
    constraints. An MVP approach helps you overcome constraints and build a customer-centric
    product.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将学习如何处理各种架构约束。MVP方法帮助您克服这些约束，构建以客户为中心的产品。
- en: Taking the MVP approach
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采取MVP方法
- en: For a successful solution, always put the customer first, think backward from
    the customer’s needs, determine what is critical for them, and plan your solution
    delivery in an agile way.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 对于成功的解决方案，始终将客户放在首位，从客户的需求出发进行反向思考，确定他们的关键需求，并以敏捷的方式规划解决方案交付。
- en: MVP is a development strategy used to build a new product or website with the
    minimum amount of features necessary to satisfy early adopters and validate a
    product idea early in the product development cycle. In this approach, the initial
    version of the product includes only the core features that allow the product
    to be deployed and no more. The goal is to provide immediate value, minimize development
    costs, and gather feedback from customers as quickly as possible to iterate and
    improve the product over time.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: MVP是一种开发策略，用于构建一个新的产品或网站，只包含满足早期用户需求和在产品开发周期初期验证产品想法所必需的最少功能。在这种方法中，产品的初始版本仅包含允许产品部署的核心功能，其他一切都不包含。目标是提供即时价值，最小化开发成本，并尽可能快速地收集客户反馈，以便不断迭代和改进产品。
- en: 'One popular method of prioritizing customer requirements is **MoSCoW**, where
    you divide requirements into the following categories:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 优先排序客户需求的一个流行方法是**MoSCoW**，您可以将需求划分为以下几类：
- en: '**Mo (must have)**: Requirements that are critical for your customers, without
    which the product cannot launch'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mo (必须具备的)**：对客户至关重要的需求，没有这些需求，产品无法发布'
- en: '**S (should have)**: Requirements that are the most desirable to the customer
    once they start utilizing the application'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S (应该具备的)**：一旦客户开始使用应用程序后，最希望具备的需求'
- en: '**Co (could have)**: Requirements that are nice to have, but their absence
    will not impact the desired functionality of the application'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Co (可以具备的)**：需要的需求是非常理想的，但其缺失不会影响应用程序所需的功能'
- en: '**W (won’t have)**: Requirements that customers may not notice if they are
    not there'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**W (不需要的)**：如果客户没有注意到，可能不会觉得缺少的需求'
- en: You need to plan an MVP for your customer with must-have requirements and go
    for the next delivery iteration with must-have requirements. With this phased
    delivery approach, you can thoroughly utilize your resources and overcome the
    challenges of time, budget, scope, and resources. The MVP approach helps you to
    determine customer needs. You are not trying to build everything without knowing
    if your features have added value for the customer. This customer-focused approach
    helps to utilize resources wisely and reduces the waste of resources.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为客户规划一个MVP，确保具备必须具备的需求，并进行下一次交付迭代，确保具备必须具备的需求。通过这种分阶段交付的方法，您可以充分利用资源，克服时间、预算、范围和资源的挑战。MVP方法帮助您确定客户需求。您不是在尝试构建一切，而是知道您的功能是否为客户带来价值。这种以客户为中心的方法有助于明智地利用资源，减少资源浪费。
- en: 'In the following diagram, you can see the MVP evaluation for a truck manufacturing
    delivery, where the customer wants a delivery truck that gets delivered initially,
    and you evolve the process based on the customer’s requirements and feedback:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，您可以看到一个卡车制造交付的MVP评估，其中客户最初需要交付的卡车，并根据客户的需求和反馈逐步演变这个过程：
- en: '![](img/B21336_02_14.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: MVP approach to building the solution'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Once a customer gets the first delivery truck, which is fully functioning, they
    can determine if they need a stronger or larger truck to handle a more significant
    load. Based on that, the manufacturer can build a 6-wheel, a 10-wheel, and an
    18-wheel truck trailer. This stepwise approach provides working products with
    essential features that the customers can use, and the team can build upon them
    as per customer requirements.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: You can see how the MVP approach helps to utilize limited resources in an efficient
    way, which helps to buy more time for quality product development and clarify
    the scope, in comparison to an approach where we turn up the first time with an
    18-wheel truck only to find out we only needed a 6-wheeler. Putting the working
    product in the customer’s hands early gives you an idea of where to invest. As
    your application has already started generating revenue, you can present use cases
    to ask for more resources as required.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you explored an in-depth overview of design principles required
    to architect effective and efficient systems. Initially, we delved into scalable
    architecture design, detailing predictive and reactive scaling strategies, and
    discussing techniques for scaling architecture, including strategies for static
    content, session management for application server scaling, and database scaling.
    We also looked at the importance of elasticity.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: The chapter then explored constructing a highly available and resilient architecture,
    emphasizing the necessity of fault tolerance and using replaceable resources for
    robust system design. A separate section was dedicated to performance, underscoring
    how to build systems that perform optimally under various conditions.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: The principle of loose coupling was discussed next, highlighting its importance
    in modern design, followed by the approach of “services, not servers,” which is
    central to the serverless computing paradigm. The chapter also underscored the
    importance of data-driven design, using data to make informed decisions about
    system architecture, and explored the need for robust security throughout the
    architecture. The importance of usability and accessibility in application design
    was also covered.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Building future-proof, extendable architecture was next on the agenda, focusing
    on architectural interoperability and portability to guarantee that systems can
    evolve and adapt to changing needs. The application of automation in all aspects
    of system architecture was discussed as a means to improve efficiency and reduce
    error rates.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Designing for operation was emphasized, emphasizing ease of system maintenance
    and updates. Lastly, the chapter addressed the challenge of overcoming architectural
    constraints, providing strategies to identify and mitigate the limitations of
    a given system design. The MVP approach was also explored as a tool for rapidly
    validating architectural choices.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll delve into various strategies and methodologies
    essential for cloud migration, highlighting how businesses transition their infrastructure,
    applications, and data to the cloud. Additionally, the chapter will cover the
    intricacies of designing and implementing hybrid cloud architecture, which combines
    on-premises infrastructure with cloud services, offering a flexible and scalable
    solution.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将深入探讨云迁移所必需的各种策略和方法，重点介绍企业如何将其基础设施、应用程序和数据迁移到云端。此外，本章还将涵盖设计和实施混合云架构的复杂性，混合云架构将本地基础设施与云服务结合，提供灵活且可扩展的解决方案。
- en: Leave a review!
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 留下评论！
- en: Enjoying this book? Help readers like you by leaving an Amazon review. Scan
    the QR code below to get a free eBook of your choice.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这本书吗？通过在亚马逊上留下评论，帮助像你一样的读者。扫描下面的二维码，获取你选择的免费电子书。
- en: '![](img/Image.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image.png)'
