- en: Tips and Tricks for Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's always more than only one way to do a particular thing. This statement
    is especially true in the Azure ecosystem, where we're given multiple tools and
    shortcuts when provisioning resources, configuring services, and developing applications.
    This chapter will show the reader how to enhance productivity even more, and shorten
    the time needed to deliver a working solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Shell and the Azure CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locks on resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proper naming conventions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources in Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform exercises from this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure CLI, available at [https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure CLI and Cloud Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the Azure portal to perform all actions, such as provisioning a resource,
    changing its configuration, or finding a particular value, is indeed one of the
    easiest ways of managing both your subscription and deployed services. However,
    it may become cumbersome when you have tens or hundreds of different subscriptions,
    resource groups, and instances. In such scenarios, it is always better to have
    access to scripts and commands that speed things up and allow for automation,
    if needed. In this section, we will cover two basic tools available in Azure:
    the Azure CLI and Cloud Shell, which you can use when just the portal is not enough.'
  prefs: []
  type: TYPE_NORMAL
- en: The Azure CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Azure CLI is a cross-platform command-line tool, which you can install
    locally to manage Azure resources. In general, a command looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you can use the Azure CLI to create a function app like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The instruction for installing the Azure CLI can be found in the *Technical
    requirements*section. It points to an article that describes the process for multiple
    different platforms, such as Windows, macOS, and Linux. Once the Azure CLI is
    installed, open your command line terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After a moment, you should see a result similar to mine, where you are asked
    to authenticate the Azure CLI locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To authenticate the tool, go to the displayed web page and enter the displayed
    code. If everything is correct, the command will end successfully, and as a result,
    it will display information about all subscriptions attached to the account. When
    using the Azure CLI, you do not have to remember all the commands—to find the
    one you are looking for, you can use the following, which will find all related
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s assume that you want to work with Azure Functionsnow. To interrogate
    all the commands related to that service, I can use the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it is super easy—you can quickly provision new resources without
    even touching the Azure portal. Here you can find a full example of instruction
    for creating a function app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, I skipped the process of creating a resource group. If
    you want to create a new one, just use the `az group create` command.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An alternative to using the Azure CLI is a tool named Cloud Shell. You can
    access it directly within the Azure portal by clicking on the Cloud Shell button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3684be71-9a64-49d1-98cb-51f668dcd541.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you open Cloud Shell, a welcome screen will be displayed at the bottom
    of the portal, asking you to select a shell you are interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a190688-e3aa-4f17-8f3a-3f3be418aec8.png)'
  prefs: []
  type: TYPE_IMG
- en: The choice does not really matter as you can change the selected option anytime.
    As I personally prefer PowerShell over Bash, the default option in my case is
    the former.
  prefs: []
  type: TYPE_NORMAL
- en: Both Bash and PowerShell scripts are aligned with each other when it comes to
    functionalities. You should select a shell that you prefer to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is your first time with Cloud Shell, you will also be asked to mount
    a storage account that can be used with the feature. Cloud Shell uses it to persist
    files between your sessions. You have two options here; either you let it create
    a storage account for you, or you can select particular options by clicking on
    the Show advanced settingsbutton:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41bc8dff-d081-4b72-abcf-7b213f65b6d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once everything is configured correctly, Azure will attempt to initialize your
    Cloud Shell account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Using Cloud Shell is similar to browsing a file system. Your Azure resources
    are presented as directories, which can be accessed by common command-line commands such
    as `dir `or `cd`. You can select a subscription you would like to work with by
    entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then it is easy to browse all resources within it by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that there is a limit on resources you can access via Cloud Shell—currently
    you can use it to operate on the following services:'
  prefs: []
  type: TYPE_NORMAL
- en: Resources groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, to obtain a connection string for Azure Files, you can use something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, inside Cloud Shell, you can use both Azure Powershell commands and
    the Azure CLI. If you enter the `az`command in the command line, you will see
    the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f120a7a0-6b20-4e1b-a48f-7a3dd88b50a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Basically, all you have learned in the previous section can be applied here.
    This is a great tool that will enhance your productivity once you get used to
    using commands instead of browsing the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: Locks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating and managing Azure resources is much easier when leveraging the various
    commands available that allow you to work faster and enable you to automate processes.
    However, when you have hundreds of resources provisioned, mistakes may happen—you
    can accidentally move, rename, or even delete a resource, which should not even be
    touched. To prevent such scenarios, it is possible to use locks—a simple feature
    that stops you from performing a forbidden action. In this section, you will learn
    how to create them, and use them for your own purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and managing locks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Locks are available on almost every resource available in the Portal. You access
    them by simply clicking on the Locks blade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1190707f-404c-46f7-8fc8-d7c846140e9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding example, let''s assume that I want to secure my resource group
    and disallow deleting it. To do so, I have to click on the + Addbutton and the
    appropriate lock type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b957699-95d8-491b-9d6b-bc2c640f4728.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if I try to delete a resource group, I will get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1473626f-1c5c-4558-a0c5-f37d622c00e9.png)'
  prefs: []
  type: TYPE_IMG
- en: As you probably noticed, there are two types of lock; delete and read-only.
  prefs: []
  type: TYPE_NORMAL
- en: 'The read-only lock prevents me from introducing changes to the resource—for
    a resource group, I cannot, for example, add a new service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cbb7fcf-fd17-4e92-8de3-3eb605fc5681.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, read-only locks work differently for different resources. If I introduce
    one to my Azure Storage Account, it will prevent me from making any changes to
    the service configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9322fef-30d3-4065-8a14-d99197cdeab5.png)'
  prefs: []
  type: TYPE_IMG
- en: Locks are also Azure resources, meaning that you can manage them by Azure Powershell
    commands (such as `Get-AzureRmResourceLock`), or ARM templates.
  prefs: []
  type: TYPE_NORMAL
- en: Naming conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Governing and managing resources in Azure can become a challenge if you do not
    introduce a proper naming convention that is simple, intuitive, and easy to follow.
    In the world of software development, proper naming for services is especially
    difficult as you have to take into account different regions, environments, and
    instances. In this section, we will try to discover different concepts for naming
    conventions, which you will able to apply or adjust to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the best naming convention
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Azure, you have to consider the following aspects of a resource:'
  prefs: []
  type: TYPE_NORMAL
- en: A region where it is provisioned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A resource type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A resource name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A resource instance type/environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will start from a resource group. By default you can name it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The rule of thumb is to select a name that will be self-explanatory. While
    selecting a name such as `MyNewService` should be fine, it does not give you the
    following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Where the resource group is located
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What environment (test/production/staging/and so on) it represents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What is more, if you, for example, list resources inside your subscription,
    you will not know which resource type `MyNewService` is, without selecting its
    type. While, of course, commands such as `az group list`give you the full information
    about a resource, you will need to include an additional field if you want to
    export only a resource name. In such cases, it would be worth annotating the resource
    group name with the resource type as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'So far so good—the name of the resource looks much better now. Let''s now consider
    adding a location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Things look much better now—we immediately know what resource type we are considering
    and where it is located. With that information it much easier to browse through
    different services. The last thing that could be added is the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now the information is complete. Of course, everything depends on your personal
    setup, as you may decide that all environments are stored inside a single resource
    group. Even then it is worth including the rest of the data so that you will have
    cohesive names for all provisioned resources.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that different Azure resources have different limits when it comes
    to their names. While Azure App Servicesmay be quite liberated about this, Azure
    Storagedisallows you from using characters other than letters and numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, your requirements for the naming convention will imply what really
    has to be included in the resource name, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether you deploy resources in different regions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether you use multiple environments for developing your applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether you use a single resource group for multiple environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The general rule is to use a convention that you both like, and is flexible
    enough to cover services deployed to Azure after a few years. The worst thing
    here is having to change it after some time because it cannot reflect the changes
    in your business.
  prefs: []
  type: TYPE_NORMAL
- en: Resources in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Azure is all about resources—you manage them directly or indirectly,
    but nonetheless most of what you touch is a resource of some kind. Whether it
    is a particular service (such as Azure Functions or Azure Traffic Manager), a
    part of it (such as the application settings available for Azure App Services),
    or a distinct feature (such as locks, as discussed in this chapter), you can manage
    all of them using Azure Resource Manager (which is often referred to as Azure
    RM). In the last section of this chapter, we will discuss how to access properties
    of Azure resources, so you can use them to investigate the configuration and automate
    processes, such as deployment or monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Resource Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to access Azure resources is to use **Azure Resource Explorer**.
    You can access it by going to [https://resources.azure.com/](https://resources.azure.com/)[.](https://resources.azure.com/)
  prefs: []
  type: TYPE_NORMAL
- en: 'Your default screen will look similar to mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3cfbc77-7da7-4d25-98fd-a4c682ea99a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To browse your resources, you have to expand nodes available on the left. Initially,
    you have access to two different node types:'
  prefs: []
  type: TYPE_NORMAL
- en: 'providers: Those are related to a specific Azure service, such as Azure Cosmos
    DBor Azure Storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subscription:As a subscription is also an Azure resource, you can browse it
    using Azure Resource Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These two node types give you access to different kinds of operation; providers
    are a high-level representation of a specific Azure service, while subscription
    contains information regarding resources provisioned within it. What is more,
    it gives you the possibility to directly check the parameters of your resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b32bae21-eeea-42e9-83e6-4fd81bcd9bba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The gathered information can be used to enter the required information in ARM
    templates. You can always consult them with the visible results from Azure Resource
    Explorer. This tool allows you to also directly edit the resource parameters (by
    clicking on the Edit button), and generates a PowerShell/Ansible script, which
    can be used to manage it. In the following, you can find an example of a PowerShell
    command, generated for my Azure Storageaccount:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, you do not have to write such scripts on your own, you can just
    use Azure Resource Manager, copy them, and potentially adjust them to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this, the last chapter of this book, we covered topics not related to a specific
    service, but rather extending your current knowledge, and allowing you to become
    a better user, developer, and architect of solutions based on Microsoft Azure.
    You have learned how to use the Azure CLI and Cloud Shell to ease management operations,
    how to leverage locks to secure all fragile resources, and how to read an Azure
    service configuration. We also discussed the pros for adopting proper naming conventions
    and how they affect your applications deployed in Azure. This was an exciting
    journey through the Azure cloud, where you discovered many different PaaS offerings
    from this particular platform. Azure is a fantastic ecosystem and allows you to
    build both small web pages and complex, enterprise-level platforms. What is more,
    it is also incredibly dynamic—this is why I strongly encourage you to take a look
    at the *Further reading*sections detailed in this book, so you can get more experience
    with it and become familiar with the more advanced concepts. The important thing
    here is also to constantly update your knowledge, whether through reading blogs,
    going to meetups, or conferences, and of course reading articles and books. As
    cloud computing is one of the major topics in recent years when it comes to software
    development, it is crucial to become familiar with it and build your skill set,
    which you can use in your daily work.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the two different types of lock for resources in Azure, and how do
    they work?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use the Azure CLI inside Cloud Shell?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can you obtain detailed information about your provisioned resources in
    Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What pros can a proper naming convention give you?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why does Cloud Shell require the provisioning of a storage account?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please refer to the Azure blog at [https://azure.microsoft.com/en-us/blog/](https://azure.microsoft.com/en-us/blog/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
