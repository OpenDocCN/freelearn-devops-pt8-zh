- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Patterns and Antipatterns of IaC and Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an ever-evolving digital landscape, the seamless integration of development
    and operations has become a necessity for organizations seeking to achieve unparalleled
    efficiency and agility. The opening chapter of this book delves into the fascinating
    world of **Infrastructure as Code** (**IaC**) and **Terraform**, unraveling the
    key principles, patterns, and anti-patterns that underpin this transformative
    approach. With a keen focus on idempotency, immutability, and an array of best
    practices, this chapter illuminates the path to robust, secure, and compliant
    infrastructure management. As we embark on this captivating journey, we’ll explore
    the intricacies of IaC projects, examine the challenges they present, and unearth
    invaluable strategies to conquer them. By the end of this chapter, you’ll possess
    a solid foundation to make informed decisions about the life cycle of your infrastructure
    and harness the true potential of IaC and Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover these main topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing IAC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patterns and practices of IaC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to handle IaC projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make decisions about IaC projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing IaC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IaC refers to the process of managing and provisioning computing infrastructure
    through machine-readable definition files instead of relying on interactive configuration
    tools or physical hardware setups.
  prefs: []
  type: TYPE_NORMAL
- en: IaC leverages coding techniques that have been tried and tested in software
    systems, extending their application to infrastructure. It is one of the key DevOps
    practices that enable teams to deliver infrastructure and software rapidly and
    reliably at scale. Having a fast and dependable infrastructure provisioning mechanism
    is essential for organizations that want to achieve continuous delivery for their
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: In IaC, a declarative language is typically used to describe the desired state
    of a system, as well as the steps required to bring it into compliance with that
    state. The IaC tool then uses these descriptions to construct and manage the necessary
    steps automatically, transitioning the system from one state to another. As a
    result, IaC enables organizations to automate processes such as resource installation,
    configuration, deployment, scaling, updating, and deletion in their IT infrastructures.
  prefs: []
  type: TYPE_NORMAL
- en: Key principles of IaC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two key principles of IaC, which we will gain an understanding of
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Idempotency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Idempotency is a characteristic of certain operations in mathematics, programming
    languages, and computer science. It refers to the property where applying these
    operations multiple times produces the same result without altering it except
    for generating identical copies.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of IaC, idempotency means that regardless of the starting state
    and the number of times the IaC is executed, the end state remains the same. This
    simplifies the infrastructure provisioning process and minimizes the likelihood
    of inconsistent outcomes. This property offers several advantages for operations,
    such as the capability to roll back changes and retry them in case of failure.
  prefs: []
  type: TYPE_NORMAL
- en: One way to achieve idempotency is by using a stateful tool such as Terraform.
    With Terraform, you can specify the desired end state of the infrastructure, and
    the tool will handle the process of reaching that state.
  prefs: []
  type: TYPE_NORMAL
- en: Immutability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configuration change management is an important topic for infrastructure provisioning.
    For success, we need a powerful change management recording system that records
    all changes made to the infrastructure, and it includes details about why those
    changes were made, who was responsible for them, when they were implemented, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration drift can pose a significant challenge to infrastructure management.
    It arises when changes are made to the infrastructure without proper documentation,
    causing different environments to diverge in ways that are difficult to replicate.
    This problem is particularly prevalent in mutable infrastructures that are active
    for extended periods.
  prefs: []
  type: TYPE_NORMAL
- en: The consequence of configuration drift can be severe, leading to inconsistent
    performance and stability and security issues in the infrastructure. Since it
    is difficult to reproduce the exact conditions that led to the drift, troubleshooting
    such problems can be time-consuming and error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: Immutable infrastructure is a technique for constructing and managing infrastructure
    in a dependable, repeatable, and foreseeable manner. This approach offers several
    advantages over traditional IT environment management methods. Rather than altering
    the existing infrastructure, immutable infrastructure involves replacing it with
    a new one. By provisioning fresh infrastructure each time, the approach ensures
    that the infrastructure remains reproducible and free from configuration drift
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: Immutable infrastructure also provides scalability when provisioning infrastructure
    in cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what IaC is and what its key principles are, let’s look at
    the patterns of IaC.
  prefs: []
  type: TYPE_NORMAL
- en: Patterns and practices of IaC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Diving into the world of IaC, it is essential to uncover the patterns and practices
    that form the backbone of efficient and reliable implementations. In this section,
    we will explore the fundamental building blocks that contribute to the success
    of IaC, ensuring a comprehensive understanding of its best practices and a solid
    foundation for your IaC journey.
  prefs: []
  type: TYPE_NORMAL
- en: Source control and VCS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is crucial to keep all aspects of your infrastructure, including the smallest
    scripts and pipeline configurations, in source control or **version control systems**
    (**VCSs**). A version control system is a tool that manages and tracks changes
    to documents, programs, and other collections of information, often used in software
    development to maintain a history of code changes.
  prefs: []
  type: TYPE_NORMAL
- en: This practice ensures that you have a record of all changes made to your infrastructure,
    regardless of how minor they may be. It also simplifies the process of tracking
    ownership and the history of changes to your infrastructure configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, it is important to make the infrastructure code accessible to all
    members of your organization, including those who do not directly work on the
    IaC code base. This visibility provides a better understanding of how the infrastructure
    is provisioned and enables quick troubleshooting of any issues that arise. By
    reviewing the code, users can gain a deeper understanding of how the infrastructure
    operates, and even contribute to the development of the infrastructure if they
    choose to do so.
  prefs: []
  type: TYPE_NORMAL
- en: The visibility and understanding of the applications running on your infrastructure
    are crucial for managing a successful IT infrastructure. By having a good grasp
    of how the applications function, you can optimize their performance and ensure
    that they operate efficiently. By keeping the infrastructure code accessible to
    all, you can ensure that your entire organization can contribute to maintaining
    and improving the infrastructure, ultimately leading to better outcomes for your
    business.
  prefs: []
  type: TYPE_NORMAL
- en: Modules and versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating reusable modules in IaC tools helps with maintenance, readability,
    and ownership. It keeps changes small and independently deployable and reduces
    the effect radius.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring IaC is difficult compared to application development, particularly
    for critical pieces such as DNS records, network configurations, databases, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: In many organizations, team structures and responsibilities are different, so
    it will make more sense to separate multiple layers of infrastructure and assign
    governance to the respective teams. In some cases, there might be some more separated
    layers needed for cross-functional teams managing both infrastructure and application
    development.
  prefs: []
  type: TYPE_NORMAL
- en: The following diagram illustrates an example of Amazon EKS deployments, featuring
    multiple modules for each infrastructure layer and their respective governors.
    It is important to note that the modules and layers depicted in this diagram may
    differ depending on your specific setup.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – EKS deployment workflow](img/B18198_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – EKS deployment workflow
  prefs: []
  type: TYPE_NORMAL
- en: Versioning for modules is quite important to provide support for multiple versions
    of services that can operate without breaking the existing production resources.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IaC minimizes the need for extensive documentation for infrastructure since
    everything is codified and stated as a declarative manifest. However, some documentation
    is needed for better infrastructure provisioning so that consumers can understand
    and improve the current modules and templates.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation can be challenging to manage, much like code. It is critical to
    provide sufficient documentation to convey the intended message effectively. However,
    having more documentation does not necessarily equate to better-quality documentation.
    In fact, outdated documentation can be more detrimental than having no documentation
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: IaC documentation must live close to the code. Keep it close so that everyone
    can update the documentation without unnecessary effort and difficult steps. If
    you can build good governance automation, documentation creation or updates can
    be easily tracked and enforced.
  prefs: []
  type: TYPE_NORMAL
- en: An effective approach to managing documentation for IaC is to include a `README`
    file within the same repository as the code, rather than using an external platform
    such as Confluence or a wiki. This approach facilitates updating the documentation
    during the same commit as the code changes, which is particularly useful as a
    reminder during the pull request process.
  prefs: []
  type: TYPE_NORMAL
- en: It is also ideal to leverage automated tools to generate documentation from
    the code or use tests as documentation. By doing so, you can ensure that the documentation
    stays in sync with the code, reducing the likelihood of inconsistencies and outdated
    information. This approach can also streamline the documentation process, reducing
    the need for manual documentation efforts and enabling faster iterations.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Software testing is the process of executing a program or application with the
    intent of finding errors. Testing can be done at various levels, from unit testing
    to integration testing to system testing and acceptance testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'IaC development is not an easy task. There are many different aspects and considerations
    that need to be taken into account before, during, and after the development process.
    One of these considerations is how to test your IaC. Let’s provide you with a
    basic understanding of the various levels of testing that you need to think about
    when developing your IaC:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static code** **and analysis**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running quick tests as frequently as possible is crucial for obtaining prompt
    feedback during the development process. This approach is especially effective
    when performed on your local machine. There are various integrations available
    that can automate this process and trigger tests automatically when you save a
    file in your text editor or IDE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To perform static analysis, you can use specialized tools such as Terraform
    Validate or TFLint. These tools enable you to identify issues in your code and
    configurations promptly, reducing the likelihood of errors and inconsistencies
    in your infrastructure. By incorporating quick testing and static analysis into
    your development process, you can streamline the testing process and improve the
    reliability of your infrastructure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Unit testing**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since many IaC tools, such as Terraform and Ansible, operate on a declarative
    model, unit testing may not always be necessary. However, in some cases, unit
    tests can be beneficial, particularly when conditionals or loops are involved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While unit testing may not always be required for IaC, incorporating it where
    necessary can help to catch potential issues early on in the development process,
    improving the overall quality of your infrastructure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Integration testing**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One essential step in ensuring the reliability of your infrastructure is to
    perform validation testing. This involves provisioning resources in a test environment
    and verifying whether specific requirements are met. It is crucial to avoid writing
    tests for things that are already covered by your IaC tool, particularly when
    working with declarative code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, instead of verifying whether the policies specified in IaC were
    applied, you should write automated tests to ensure that none of your S3 buckets
    are public. Similarly, you can test that only specific ports are open across all
    of your EC2 instances. To perform these tests, you can provision an ephemeral
    environment that you can later tear down.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Depending on the duration of these tests, you may want to run them after every
    commit or as nightly builds. By incorporating validation testing into your development
    process, you can catch potential issues early on, reduce the risk of errors, and
    ensure the overall reliability of your infrastructure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Smoke tests**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An additional approach to testing is to provision an environment, deploy a dummy
    application, and run quick smoke tests to verify that the application has been
    deployed correctly. Using a dummy application can be helpful in testing scenarios
    that your actual application may encounter but are not configured for production.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, if your application connects to an externally hosted database,
    you should attempt to connect to it in your dummy application. By doing so, you
    can gain confidence that the infrastructure you are provisioning is capable of
    supporting the applications you intend to run on it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As these tests can be time-consuming, it is advisable to run them after provisioning
    a new environment and periodically thereafter. By leveraging this testing approach,
    you can ensure that your infrastructure is capable of supporting your application’s
    requirements and minimize the risk of errors or issues arising during deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Security and compliance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The definition of IaC is to provide an abstraction layer between the physical
    infrastructure and the applications that run on top of it. This is done by separating
    the hardware from the software and by abstracting out all of the tasks that are
    required to manage the hardware.
  prefs: []
  type: TYPE_NORMAL
- en: IaC can be used by companies for compliance purposes, such as HIPAA, SOX, PCI
    DSS, and so on. It can also be used for security purposes, such as preventing
    unauthorized access to data or preventing hackers from accessing sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at important details of security and compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Identity and access management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Implementing a strong **Identity and Access Management** (**IAM**) strategy
    is essential for safeguarding both your IaC and the infrastructure it provisions.
    One effective approach is to use **Role-Based Access Control** (**RBAC**) for
    IaC, which can significantly reduce the overall attack surface.
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging RBAC, you can grant just enough permission to your IaC to perform
    the necessary operations while preventing unauthorized access. This approach helps
    to minimize the risk of errors or malicious activity, improving the overall security
    of your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When working with IaC, it is common to require secrets to provision infrastructure.
    For example, if you are provisioning resources in AWS, you will need valid AWS
    credentials to connect to it. It is crucial to ensure that you use a reliable
    secret management tool, such as HashiCorp Vault or AWS Secrets Manager, to manage
    these sensitive credentials.
  prefs: []
  type: TYPE_NORMAL
- en: In cases where you need to store or output secrets in the state file (although
    it is advisable to avoid doing so), it is essential to encrypt them to prevent
    unauthorized access. By encrypting secrets stored in the state file, you can mitigate
    the risk of exposure in the event of a security breach or unauthorized access.
  prefs: []
  type: TYPE_NORMAL
- en: Security scanning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Performing security scans after provisioning or making changes to infrastructure
    in a lower or ephemeral environment can help mitigate potential security issues
    in production. Leveraging tools such as CIS Benchmarks and Amazon Inspector can
    be effective in identifying common vulnerabilities or exposures and ensuring adherence
    to security best practices.
  prefs: []
  type: TYPE_NORMAL
- en: By conducting security scans, you can catch potential security issues early
    on in the development process and prevent them from being carried over to production.
    This approach helps to minimize the risk of security breaches and protect sensitive
    data and infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Compliance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compliance requirements are a critical consideration for many organizations,
    particularly in highly regulated industries such as healthcare or finance. These
    industries are subject to stricter requirements, including HIPAA, PCI, GDPR, and
    SOX, to name a few. Traditionally, compliance teams conducted manual checks and
    filled in paperwork to ensure adherence to these requirements.
  prefs: []
  type: TYPE_NORMAL
- en: However, automation tools such as Chef InSpec or HashiCorp Sentinel can help
    streamline compliance requirements and improve efficiency. By automating compliance
    checks, you can run them more frequently and identify issues much faster. For
    instance, you can incorporate compliance tests into your IaC pipeline by provisioning
    an ephemeral environment and running tests every time you modify your IaC code.
    This approach enables you to catch potential compliance issues early on and rectify
    them before they impact production systems.
  prefs: []
  type: TYPE_NORMAL
- en: How to handle IaC projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In today’s fast-paced digital landscape, IaC has become a critical consideration
    for organizations of all sizes. With IaC, developers can create the machines or
    resources required to run their applications easily, saving time and effort in
    the process. As your organization scales, IaC can help your developers focus on
    solving more complex problems, rather than getting bogged down in manual resource
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: However, it can be challenging to ensure identical, error-free, secure, and
    compliant configurations across different environments. This is where IaC comes
    in. By defining your infrastructure as code, you can make changes or add new resources
    by updating a piece of code, and the IaC tool will handle the configuration for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: By adopting IaC, organizations can improve agility, speed, and consistency in
    resource provisioning and configuration. This enables developers to focus on delivering
    high-quality applications, while operations teams can manage infrastructure at
    scale with greater ease and efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s have a look at the challenges we can face.
  prefs: []
  type: TYPE_NORMAL
- en: IaC principles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the heart of IaC is the concept of defining your infrastructure in code.
    By using a declarative syntax, you define the desired final state of your infrastructure,
    and the IaC tool takes care of the underlying dependency resolution and resource
    launching steps.
  prefs: []
  type: TYPE_NORMAL
- en: To keep track of changes made to your infrastructure, you can store this code
    in a VCS. This not only provides you with an audit trail of who made changes but
    also enables you to revert to a previous version if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Automated quality, compliance, and security tests can also be run on your infrastructure,
    allowing you to verify its compliance without investing days or weeks of effort.
  prefs: []
  type: TYPE_NORMAL
- en: By adopting IaC, your developers can avoid the tedious and error-prone task
    of manually defining steps or scripts to launch and configure resources. Tools
    such as Terraform and CloudFormation are widely used to achieve these tasks, enabling
    organizations to achieve greater agility, scalability, and consistency in infrastructure
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Version control systems for IaC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to store your IaC in a VCS alongside your application code.
    This allows for easy collaboration among developers and a clear understanding
    of the entire code base.
  prefs: []
  type: TYPE_NORMAL
- en: VCSs also offer a simple way to track and audit changes made to the code base,
    including infrastructure changes. By using pipeline features within a VCS, such
    as those available in GitHub or GitLab, you can enforce policies and ensure that
    changes meet the necessary criteria before they are deployed to production.
  prefs: []
  type: TYPE_NORMAL
- en: Some common use cases of IaC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IaC is commonly used to launch infrastructure across various cloud providers,
    as well as for provisioning machines upon launch. Popular tools for provisioning
    with IaC include Chef, Ansible, and Puppet, while Terraform and CloudFormation
    are commonly used for infrastructure provisioning.
  prefs: []
  type: TYPE_NORMAL
- en: IaC can also be used to deploy applications, such as with Kubernetes, by leveraging
    tools such as Jenkins or Ansible. In upcoming chapters, we will delve further
    into using IaC with Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges and best practices with IaC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IaC provides great benefits in terms of operability and maintainability, but
    it also brings challenges that need to be addressed to ensure the security and
    stability of your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Adoption within the team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integrating IaC into your organization can present a learning curve and a change
    in processes. Your team may need to become familiar with the language used to
    write IaC code and develop pipelines to execute the code. If your team is accustomed
    to making changes from cloud consoles and is operation-centric, transitioning
    to IaC can be a significant shift for them.
  prefs: []
  type: TYPE_NORMAL
- en: You can see huge, powerful resistance to learning new technologies or practices.
    Be ready to fight, and always be an evangelist of infrastructure automation, security,
    and compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration drift
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the start of an IaC journey, developers may not always know what changes
    are required for infrastructure provisioning and may opt to make changes manually
    via the console. This can lead to configuration drift, where the deployed infrastructure
    does not match the code definition, potentially causing outages or issues with
    future updates. To prevent this, it is important to educate the team on the consequences
    of manual changes and discourage their use.
  prefs: []
  type: TYPE_NORMAL
- en: To further mitigate the risk of configuration drift, you can build automation
    to detect drifts and ensure that only authorized personnel have access to make
    changes in critical environments. This can help ensure that your infrastructure
    remains consistent and secure.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using open source modules in your IaC pipeline, it is important to ensure
    that they are secure and free of vulnerabilities. Before using any open source
    project, it is recommended to verify that it is safe to use.
  prefs: []
  type: TYPE_NORMAL
- en: To maintain a high level of security, it is essential to establish static code
    analysis pipelines and continuously scan open source modules. This way, any vulnerabilities
    can be detected and addressed promptly.
  prefs: []
  type: TYPE_NORMAL
- en: Human factors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To prevent misconfigurations from entering production, it is crucial to catch
    validation errors that may be introduced when a developer makes changes. With
    Terraform, you can easily implement a validation step using the Terraform plan
    functionality. It is essential to have a full understanding of the plan outputs
    before applying them to ensure that no unexpected changes are made to your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Side effects of automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In IaC, a lot of code will be reused as you automate infrastructure creation.
    However, any small misconfiguration can propagate across a large set of resources
    very easily. Therefore, it’s crucial to catch these errors during the pipeline
    verification stage.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent unexpected changes to existing resources, always use versioning when
    updating modules.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping up to date with cloud providers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes to cloud providers’ APIs and policies can affect your existing infrastructure,
    which means that you need to update your tools and code. This can be especially
    difficult if you’re using open source tools, as updates may not be immediately
    available. If there is a delay in releasing changes, it can result in incorrect
    permissions or issues with provisioning access to machines if the RBAC API changes.
    Therefore, it’s essential to keep your tools and code up to date with the latest
    API changes and policies to ensure your infrastructure continues to function properly.
  prefs: []
  type: TYPE_NORMAL
- en: Maintainability and traceability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having a well-defined procedure for promoting infrastructure changes to the
    production environment and assigning responsibilities is crucial to ensure that
    all changes are properly verified. This helps to avoid chaos and maintainability
    issues on the VCS side.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, traceability is an added advantage of using VCSs as all changes
    are logged and can be easily tracked. For instance, Git provides the Git log command
    and commit history to view all changes made to the code.
  prefs: []
  type: TYPE_NORMAL
- en: RBAC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many IaC tools, including Terraform, lack an intrinsic RBAC feature, a crucial
    element that governs who has permission to access, manage, and execute specific
    resources and operations. In the absence of native RBAC, these tools are dependent
    on the underlying platform or VCS where the code resides. Consequently, it’s assumed
    that individuals executing the code possess the requisite permissions, transferring
    the onus of managing and enforcing RBAC to the VCS. This can involve setting up
    specific access controls, permissions, and restrictions within the VCS to ensure
    that sensitive and critical infrastructure configurations are only accessible
    and executable by authorized personnel, thereby maintaining security and compliance
    standards.
  prefs: []
  type: TYPE_NORMAL
- en: VCS and proper approval flows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is essential to implement version control in your IaC workflow to maintain
    control of your code, track changes, and facilitate auditing. It is also important
    to establish a process where changes cannot be merged into production without
    proper approval and validation. One option is to incorporate validations into
    the **Continuous Integration** (**CI**) process of GitHub or GitLab. By treating
    your IaC code like any other application code, you can ensure that your infrastructure
    is an integral part of your overall system.
  prefs: []
  type: TYPE_NORMAL
- en: Handling secrets properly
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You need to manage two types of secrets in your IaC pipeline. The first type
    of secret is used to create resources in the cloud, and only the admin of the
    repository should have access to them. For this purpose, you can use a secret
    variable in GitHub or GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: The second type of secret is generated when the code is executed, such as the
    password for an IAM user in AWS. It’s crucial to ensure that these secrets are
    not getting logged anywhere and are securely transmitted to users.
  prefs: []
  type: TYPE_NORMAL
- en: Immutable infrastructure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Consider applying the principle of immutable infrastructure if you need to make
    changes to your infrastructure. This approach involves creating a new machine
    with the required changes and replacing the old machine with the new one, instead
    of modifying the existing machine. By doing so, you can ensure that your changes
    are in line with the code, and there are no snowflake server states. The concept
    behind immutable infrastructure is to manage machines entirely through code, and
    no manual changes should be made.
  prefs: []
  type: TYPE_NORMAL
- en: Validations and checks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By implementing checks and validations in the CI pipeline, you can catch security
    issues and misconfigurations on the left side of the pipeline. This helps increase
    the frequency of the development cycle and maintain the security of each release.
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure as code and Kubernetes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using the same principles as IaC, you can deploy your application on Kubernetes.
    Kubernetes objects are declarative files that can be defined and stored in a code
    repository. These files can then be applied to a Kubernetes cluster using a controller
    to deploy your application.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Despite the many advantages of IaC, there are also several challenges that must
    be addressed to ensure the success of the implementation. These include the need
    for proper validations and checks, as well as a well-established process to avoid
    security lapses that can lead to increased costs and compromised environments.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the emerging practice of GitOps combined with IaC enables faster
    and safer rollout of changes, resulting in quicker deployment cycles and large-scale
    auditing. IaC is not only the present but also the future of managing infrastructure,
    applications, and tooling, and its adoption is highly recommended for reducing
    operational costs.
  prefs: []
  type: TYPE_NORMAL
- en: By using IaC tools, organizations can achieve the same level of productivity
    and efficiency with fewer personnel, making it an attractive option for businesses
    looking to optimize their resources.
  prefs: []
  type: TYPE_NORMAL
- en: How to make decisions about IaC projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IaC is a set of best practices for developers to document and configure their
    software infrastructure in a repeatable way.
  prefs: []
  type: TYPE_NORMAL
- en: IaC is not just about configuration management and deployment; it also provides
    the ability to manage infrastructure with code. The code can be used to automate
    activities such as application deployment, configuration management, and continuous
    delivery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few plus points to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: It is easy for developers to get started with IaC because the documentation
    is available in a single place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows for more efficient collaboration between development teams by providing
    an easy way to share configurations with other members of the team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It reduces errors in configuration management by making them easier to reproduce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s have a look at the decision points that will improve the maturity level
    of IaC projects.
  prefs: []
  type: TYPE_NORMAL
- en: The decision about where to store your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storing IaC files using a VCS is essential for tracking changes and collaboration.
    While any cloud storage system can be used, Git has become the de facto standard
    for IaC versioning. Originally designed for storing code, Git can be used as the
    primary source for deploying infrastructure code. Several solutions, such as GitHub,
    GitLab, and Bitbucket, offer free SaaS for public repositories, while community
    editions can be self-hosted. Using Git should be a basic skill set for any developer
    or cloud or DevOps engineer looking to start an IaC project successfully.
  prefs: []
  type: TYPE_NORMAL
- en: The decision about how to structure your code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have chosen where to store your IaC code, the next step is deciding
    on how to structure it. The structure you choose will depend on the complexity
    of your organization and IT environment. There are several options, including
    using a mono-repo for all your IaC code, having a separate repository for each
    tool or language used, or having a repository for each application server or infrastructure
    type.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you need to determine a branching strategy that works well for
    your team. It’s essential to discuss and agree on this with your team to ensure
    everyone is on the same page.
  prefs: []
  type: TYPE_NORMAL
- en: It’s recommended to start with a simple structure and evolve it over time based
    on your needs. Alternatively, you can put more thought into the structure beforehand
    to prevent potential rework later. Whatever structure you choose, make sure it’s
    easily adoptable by all team members. Create clear documentation on the structure
    and decision-making process so that new team members can quickly understand and
    start contributing effectively.
  prefs: []
  type: TYPE_NORMAL
- en: The decision about how to run your code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To gain better control over your infrastructure, it is recommended to use a
    CI/CD tool such as Jenkins, GitLab CI, or GitHub Actions to run your IaC. With
    these tools, you can trigger jobs manually, via webhooks or on a schedule, and
    have a record of every job that has run. Additionally, the jobs run from an agent
    can be pre-configured with the necessary tools, reducing the chances of errors
    due to different tool versions. It is important to choose the right tool that
    fits your needs and configure it properly to ensure its effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: The decision about how to handle your secrets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When provisioning automated infrastructure, it is crucial to store secrets such
    as database passwords and logins securely. It is not advisable to store them in
    your repositories, even if the repository is only accessible within your own network
    and protected with multi-factor authentication.
  prefs: []
  type: TYPE_NORMAL
- en: When using Git tools, all the credentials are copied to your machines and the
    machines of your team members when they clone the repository, making them vulnerable
    to security breaches.
  prefs: []
  type: TYPE_NORMAL
- en: A better solution is to use a vault system that can encrypt your secrets and
    inject them as environment variables during the runtime of your pipeline. It is
    ideal to have security enabled on multiple layers, so even if one layer is breached,
    there is a second line of defense to protect your sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: The decision about a common set of tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To kickstart IaC projects effectively, it’s important for the team to agree
    on a consistent set of tools. While there may be several ways to achieve the same
    objective, it’s beneficial to explore simpler, quicker, or more cost-effective
    methods. Using a common toolset makes it easier to share and reuse building blocks.
    Striking a balance between granting engineers the freedom to experiment with new
    tools and standardizing on a common set of tools is crucial. Certain tools work
    well in tandem, while others don’t, and paying for redundant licenses is generally
    not a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: The decision about the level of pipelines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using pipelines to run your IaC, there are various methods to achieve the
    same outcome. It’s essential to use a naming convention and provide clear descriptions
    to help others understand the purpose of a pipeline. You can consider dividing
    a pipeline into multiple stages, so you have the flexibility to rerun or skip
    a stage depending on the type of deployment. Then, decide whether you want to
    enforce mandatory reviews, require approval from a manager, or give developers
    the liberty to deploy themselves during go-live.
  prefs: []
  type: TYPE_NORMAL
- en: The decision about the life cycle of your infrastructure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The level of testing and validation required for a proof-of-concept script versus
    code developed for large-scale deployment is significantly different. Robust code
    requires more comprehensive testing and validation efforts, which requires additional
    time and resources.
  prefs: []
  type: TYPE_NORMAL
- en: In an ever-evolving world, infrastructure must also be adaptable to changes
    such as security updates, service improvements, and new service types. While using
    SaaS/PaaS services can reduce the maintenance workload, it comes at a cost. Furthermore,
    even these services will evolve over time, necessitating engineering efforts to
    keep up. There are various strategies and practices available to simplify this
    process, each with its own benefits and drawbacks. It’s important to determine
    the approach that works best for your specific situation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This first chapter on understanding patterns of IaC and Terraform covered the
    key principles of IaC, such as idempotency and immutability. The chapter also
    discussed various patterns and practices of IaC, including source control, modules,
    versions, documentation, and testing. The chapter also covered security and compliance
    concerns, such as IAM, RBAC, secret management, security scanning, and compliance.
  prefs: []
  type: TYPE_NORMAL
- en: It also provided guidance on how to handle IaC projects and the decisions involved
    in starting IaC projects. Additionally, the chapter highlighted the challenges
    and best practices of IaC, including the importance of standardizing toolsets,
    naming conventions, and clear descriptions, and the need for a proper process
    for approvals and validation in the CI pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, this chapter provided a comprehensive overview of the principles and
    best practices of IaC and highlighted the importance of adopting these practices
    to improve the agility, efficiency, and security of infrastructure management.
  prefs: []
  type: TYPE_NORMAL
