["```\n      Resources: \n        ApexBucket: \n          Type: AWS::S3::Bucket \n          Properties: \n            BucketName: !Ref DomainName \n        WWWBucket: \n          Type: AWS::S3::Bucket \n          Properties: \n            BucketName: !Sub \n              - www.${Domain} \n              - Domain: !Ref DomainName\n\n```", "```\n aws s3 website s3://example.org/ \n                  --index-document index.html --error-document error.html\n\n```", "```\n      { \n        \"Version\":\"2012-10-17\", \n        \"Statement\": [{ \n          \"Sid\": \"Allow Public Access to everything in our bucket\", \n          \"Effect\": \"Allow\", \n          \"Principal\": \"*\", \n          \"Action\": \"s3:GetObject\", \n          \"Resource\": \"arn:aws:s3:::example.org/*\" \n        } \n       ] \n      }\n\n```", "```\n        ApexBucket: \n          Type: AWS::S3::Bucket \n          Properties: \n            BucketName: \n              Ref: DomainName \n            AccessControl: PublicRead \n            WebsiteConfiguration: \n              IndexDocument: index.html \n              ErrorDocument: error.html \n        WWWBucket: \n          Type: AWS::S3::Bucket \n          Properties: \n            BucketName: \n              Fn::Join: [ ., [ www, Ref: DomainName ] ]\n            AccessControl: BucketOwnerFullControl \n            WebsiteConfiguration: \n              RedirectAllRequestsTo: \n                HostName: \n                  Ref: ApexBucket\n\n```", "```\nDNSHostedZone: \n  Type: \"AWS::Route53::HostedZone\" \n  Properties: \n    Name: \n      Ref: DomainName\n\n```", "```\n        us-east-1: \n          S3HostedZoneID: Z3AQBSTGFYJSTF \n          S3AliasTarget: s3-website-us-east-1.amazonaws.com \n        us-east-2: \n          S3HostedZoneID: Z2O1EMRO9K5GLX \n          S3AliasTarget: s3-website.us-east-2.amazonaws.com\n\n```", "```\n        DNSRecords: \n          Type: \"AWS::Route53::RecordSetGroup\" \n          Properties: \n            HostedZoneId: \n              Ref: DNSHostedZone \n            RecordSets: \n              - Name: \n                  Ref: DomainName \n                Type: A \n                AliasTarget: \n                  HostedZoneId: \n                    Fn::FindInMap: [ RegionMap, Ref: \"AWS::Region\",\n                      S3HostedZoneID ]\n                  DNSName: \n                    Fn::FindInMap: [ RegionMap, Ref: \"AWS::Region\",\n                      S3AliasTarget ]\n              - Name: \n                  Fn::Join: [ ., [ www, Ref: DomainName ] ] \n                Type: CNAME \n                TTL: 300 \n                ResourceRecords: \n                  - Fn::GetAtt: WWWBucket.DomainName\n\n```", "```\n aws cloudformation create-stack \\ \n --stack-name static-website-1 \\ \n --template-body file://03-hosting-a-static-website.yaml \\ \n --parameters \\\n ParameterKey=DomainName,ParameterValue=<your-domain-name>\n\n```", "```\n      <html> \n        <head> \n          <title>Welcome to exmaple.org</title> \n        </head> \n        <body> \n          <h1>example.org</h1> \n          <p>Hello World!</p> \n        </body> \n      </html>\n\n```", "```\n      <html> \n        <head> \n          <title>Error</title> \n        </head> \n        <body> \n          <h1>example.org</h1> \n          <p>Something went wrong!</p> \n        </body> \n      </html>\n\n```", "```\n  ApexBucket: \n    Type: AWS::S3::Bucket \n    Properties: \n      BucketName: !Ref DomainName \n      AccessControl: PublicRead \n      WebsiteConfiguration: \n        IndexDocument: index.html \n        ErrorDocument: error.html \n      CorsConfiguration: \n        CorsRules: \n        - AllowedOrigins: \n            - example.net \n            - www.example.net \n            - example.com \n            - www.example.com \n          AllowedMethods: \n            - GET \n          MaxAge: 3000 \n          AllowedHeaders: \n            - Content-* \n            - Host\n\n```", "```\n      AWSTemplateFormatVersion: '2010-09-09'\n      Parameters:\n        OriginDomainName:\n          Description: The hostname of your origin\n           (i.e. www.example.org.s3-website-ap-southeast-2.amazonaws.com)\n          Type: String\n        Aliases:\n          Description: Comma delimited list of aliases\n           (i.e. example.org,www.example.org)\n          Type: CommaDelimitedList\n      Resources:\n        DistributionALogBucket:\n          Type: AWS::S3::Bucket\n        DistributionA:\n          Type: AWS::CloudFront::Distribution    \n          Properties:\n            DistributionConfig:\n              Origins:\n              - DomainName:\n                  Ref: OriginDomainName\n                Id: OriginA\n                CustomOriginConfig:\n                  OriginProtocolPolicy: http-only\n              Enabled: true\n              Logging:\n                IncludeCookies: false\n                Bucket:\n                  Fn::GetAtt: DistributionALogBucket.DomainName\n                Prefix: cf-distribution-a\n              Aliases:\n                Ref: Aliases\n              DefaultCacheBehavior:\n                TargetOriginId: OriginA\n                ForwardedValues:\n                  QueryString: false\n                ViewerProtocolPolicy: allow-all\n              PriceClass: PriceClass_100\n      Outputs:\n        DistributionDomainName:\n          Description: The domain name of the CloudFront Distribution\n          Value:\n            Fn::GetAtt: DistributionA.DomainName\n        LogBucket:\n          Description: Bucket where CloudFront logs will be stored\n          Value:\n            Ref: DistributionALogBucket\n\n```", "```\n aws cloudformation create-stack \\ \n --stack-name cloudfont-cache-1 \\ \n --template-body file://03-caching-a-website.yaml \\ \n --parameters \\ \n ParameterKey=OriginDomainName,ParameterValue=<your-domain-name> \\ \n ParameterKey=Aliases,ParameterValue='<alias-1>\\,<alias-2>'\n\n```", "```\n        AWSTemplateFormatVersion: \"2010-09-09\" \n        Description: Create an EFS file system and endpoints.\n\n```", "```\n        VpcId: \n          Description: VPC ID that contains the subnets that will \n            access the file system \n          Type: AWS::EC2::VPC::Id \n        SubnetIds: \n          Description: Subnet IDs allowed to access the EFS file system \n          Type: List<AWS::EC2::Subnet::Id>\n\n```", "```\n        FileSystem: \n          Type: AWS::EFS::FileSystem \n          Properties: \n            FileSystemTags: \n              - Key: Name \n                Value: \n                  Fn::Sub: \"${AWS::StackName} EFS File System\" \n            PerformanceMode: generalPurpose\n\n```", "```\n      MountTargetA: \n        Type: AWS::EFS::MountTarget \n        Properties: \n          FileSystemId: \n            Ref: FileSystem \n          SecurityGroups: \n            - Fn::GetAtt: MountTargetSecurityGroup.GroupId \n          SubnetId: \n            Fn::Select: [ 0, Ref: SubnetIds  ] \n      MountTargetB: \n        Type: AWS::EFS::MountTarget \n        Properties: \n          FileSystemId: \n            Ref: FileSystem \n          SecurityGroups: \n            - Fn::GetAtt: MountTargetSecurityGroup.GroupId \n          SubnetId: \n            Fn::Select: [ 1, Ref: SubnetIds  ]           \n\n```", "```\n      MountTargetSecurityGroup: \n        Type: AWS::EC2::SecurityGroup \n        Properties: \n          GroupDescription: EFS endpoint security group \n          Tags: \n            - Key: Name \n              Value: MountTargetSecurityGroup \n          VpcId: \n            Ref: VpcId\n\n```", "```\n      MountTargetAccessSecurityGroup: \n        Type: AWS::EC2::SecurityGroup \n        Properties: \n          GroupDescription: EFS endpoint access security group \n        Tags: \n          - Key: Name \n            Value: MountTargetAccessSecurityGroup \n        VpcId: \n          Ref: VpcId\n\n```", "```\n      MountTargetIngress: \n        Type: AWS::EC2::SecurityGroupIngress \n        Properties: \n          FromPort: 2049 \n          GroupId: \n            Fn::GetAtt: MountTargetSecurityGroup.GroupId \n          IpProtocol: tcp \n          SourceSecurityGroupId: \n            Fn::GetAtt: MountTargetAccessSecurityGroup.GroupId \n          ToPort: 2049 \n      MountTargetEgress: \n        Type: AWS::EC2::SecurityGroupEgress \n        Properties: \n          DestinationSecurityGroupId: \n            Fn::GetAtt: MountTargetAccessSecurityGroup.GroupId \n          FromPort: 2049 \n          GroupId: \n            Fn::GetAtt: MountTargetSecurityGroup.GroupId \n          IpProtocol: tcp \n          ToPort: 2049\n\n```", "```\n      MountTargetAccessIngress: \n        Type: AWS::EC2::SecurityGroupIngress \n        Properties: \n          FromPort: 22 \n          GroupId: \n            Fn::GetAtt: MountTargetAccessSecurityGroup.GroupId \n          IpProtocol: tcp \n          CidrIp: 0.0.0.0/0 \n          ToPort: 22 \n      MountTargetAccessEgress: \n        Type: AWS::EC2::SecurityGroupEgress \n        Properties: \n          DestinationSecurityGroupId: \n            Fn::GetAtt: MountTargetSecurityGroup.GroupId \n          FromPort: 2049 \n          GroupId: \n            Fn::GetAtt: MountTargetAccessSecurityGroup.GroupId \n          IpProtocol: tcp \n          ToPort: 2049\n\n```", "```\n aws cloudformation create-stack \\\n --stack-name wwns1 \\\n --template-body file://03-working-with-network-storage.yaml \\\n --parameters \\\n ParameterKey=VpcId,ParameterValue=<your-vpc-id> \\ \n ParameterKey=SubnetIds,ParameterValue=\"<subnet-id-1>\\, \\\n          <subnet-id-2>\"\n\n```", "```\n      MountPoint: \n        Description: The path on disk to mount the EFS file system \n        Type: String \n        Default: /mnt/efs \n      KeyName: \n        Description: The SSH key pair allowed to connect to the client \n          instance \n        Type: AWS::EC2::KeyPair::KeyName\n\n```", "```\n      AutoScalingGroup: \n        Type: AWS::AutoScaling::AutoScalingGroup \n        DependsOn: MountTargetA \n        Properties: \n          MinSize: 2 \n          MaxSize: 2 \n          LaunchConfigurationName: \n            Ref: LaunchConfiguration \n          Tags: \n            - Key: Name \n              Value: \n                Fn::Sub: \"${AWS::StackName} EFS Client\" \n              PropagateAtLaunch: true \n          VPCZoneIdentifier: \n            Ref: SubnetIds\n\n```", "```\n      LaunchConfiguration: \n        Type: AWS::AutoScaling::LaunchConfiguration \n        DependsOn: FileSystem \n        Properties: \n          ImageId: ami-1e299d7e \n        SecurityGroups: \n          - Ref: MountTargetAccessSecurityGroup \n        InstanceType: t2.micro \n        KeyName: \n          Ref: KeyName \n        UserData: \n          Fn::Base64: \n          Fn::Sub: |\n            #!/bin/bash -xe\n            mkdir -p ${MountPoint}\n            echo 'Waiting for mount target DNS to propagate'\n            sleep 90\n            echo '${FileSystem}.efs.${AWS::Region}.amazonaws.com:/\n            ${MountPoint} nfs4\n            nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,\n            retrans=2 0 0' >> \n            /etc/fstab\n            mount -a\\nchown ec2-user: ${MountPoint}\\n\"\n\n```", "```\n aws cloudformation create-stack \\ \n --stack-name wwns1 \\\n --template-body file://03-working-with-network-storage.yaml \\\n --parameters \\\n ParameterKey=VpcId,ParameterValue=<vpc-id> \\\n ParameterKey=SubnetIds,ParameterValue='<subnet-id-1>\\, \\\n          <subnet-id-1>' \\ \n ParameterKey=MountPoint,ParameterValue=<local-path-to-mount-efs> \\\n ParameterKey=KeyName,ParameterValue=<existing-key-pair-name>\n\n```", "```\n               AWSTemplateFormatVersion: '2010-09-09'\n               Parameters:\n                 ExpirationInDays:\n                   Description: The maximum amount of time to keep files\n                     for\n                   Type: Number\n                   Default: 2555\n                 TransitionToInfrequentAccessInDays:\n                   Description: How many days until files are moved to\n                     the Infrequent Access class\n                   Type: Number\n                   Default: 30\n                 TransitionToGlacierInDays:\n                   Description: How many days until files are moved\n                     to Glacier\n                   Type: Number\n                   Default: 60\n                 PreviousVersionsExpirationInDays:\n                   Description: The maximum amount of time to keep previous\n                     versions of files for\n                   Type: Number\n                   Default: 60\n                 PreviousVersionsToInfrequentAccessInDays:\n                   Description: How many days until previous versions\n                     of files are moved to the Infrequent Access class\n                   Type: Number\n                   Default: 30\n\n```", "```\n      Resources: \n        BackupBucket: \n          Type: AWS::S3::Bucket \n          Properties: \n            VersioningConfiguration: \n              Status: Enabled \n            LifecycleConfiguration: \n              Rules: \n                - Status: Enabled \n                  ExpirationInDays: \n                    Ref: ExpirationInDays \n                  Transitions: \n                    - StorageClass: STANDARD_IA \n                      TransitionInDays: \n                        Ref: TransitionToInfrequentAccessInDays \n                    - StorageClass: GLACIER \n                      TransitionInDays: \n                        Ref: TransitionToGlacierInDays \n                    NoncurrentVersionExpirationInDays: \n                      Ref: PreviousVersionsExpirationInDays \n                    NoncurrentVersionTransitions: \n                    - StorageClass: STANDARD_IA \n                      TransitionInDays: \n                        Ref: PreviousVersionsToInfrequentAccessInDays\n\n```", "```\n      Outputs: \n        BackupBucket: \n          Description: Bucket where backups are stored \n          Value: \n            Ref: BackupBucket\n\n```", "```\naws cloudformation create-stack \\\n --stack-name backup-s3-glacier-1 \\\n --template-body file://03-backing-up-data-for-compliance.yaml\n\n```"]