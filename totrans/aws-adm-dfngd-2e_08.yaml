- en: Messaging in the Cloud Using Amazon SNS and Amazon SQS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we briefly explored the AWS code suite of services,
    namely AWS CodeCommit, AWS CodeDeploy, and AWS CodePipeline, and how they tie
    into the continuous integration and continuous delivery life cycle of an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be learning and exploring yet another group of AWS
    services that are extremely useful when it comes to developing modern cloud-ready
    applications, as well as for the general housekeeping of your AWS accounts: Amazon
    **Simple Notification Services**, or **SNS**, and Amazon **Simple Queue Service**,
    or **SQS**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping this in mind, let''s have a quick look at the various topics that we
    will be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the various messaging services provided by AWS, along with an insight
    into which service to use for what purpose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Amazon SNS and Amazon SQS, along with their core concepts and terminologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own SNS topics and subscriptions, and leveraging them for your
    AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring SNS notifications using Amazon CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Amazon SNS with Slack for a richer, user notification experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with standard and FIFO queues, and integrating Amazon SNS with
    Amazon SQS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, without any further ado, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the AWS messaging services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We all know by now that AWS provides a plethora of services designed to help
    you with developing a rich set of cloud-ready applications; but with so many different
    services to choose from, how do you make the right set of choices to begin with?
    That''s exactly what we will be learning and exploring in this section, starting
    with a brief understanding and comparison of a few commonly used AWS messaging
    services, as depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ceb42aa-aaf7-419e-ab19-6b469fcf27dc.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Amazon SNS:** Amazon **SNS**, or **Simple Notification Service**, is a synchronous,
    managed service that provides the end user with the ability to deliver or send
    messages to one or more endpoints or clients. This works by using a **Publisher–****Subscriber**-like
    model, as depicted in the following diagram:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2967ae78-1d27-44d0-8ce9-3cf53823afc0.png)'
  prefs: []
  type: TYPE_IMG
- en: One or more publishers or producers post a message to a corresponding SNS **topic** without
    knowing which subscribers or consumers will ultimately consume the message. The
    producer also doesn't wait for a response back from the consumers, thus making
    SNS a loosely-coupled service. It is the consumer's task to subscribe to the topic
    and get notified of the incoming messages. SNS supports a variety of consumer
    implementation options, such as email, mobile push notifications or SMS, HTTP/HTTPS
    notifications, and even Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon SQS:** Amazon **SQS**, or **Simple Queue Service**, on the other hand,
    is an asynchronous managed service that provides users with the ability to push
    and pull messages from a queue. Here too, one or more producers can be used to
    push messages into the queue, which a corresponding set of consumers on the other
    end consume and process the messages one at a time. An important point to note
    here is that, unlike its counterpart, SNS, where the consumers are notified of
    a new message, here, the consumers have to poll the queue in short intervals of
    time for newer messages. Once a message is found, the consumer has to process
    it and then delete it from the queue. The process is shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/031e540b-e8d8-4646-9645-803989fd882c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Amazon Kinesis**: Amazon Kinesis functions a lot like Amazon SQS; however,
    it is fundamentally designed and optimized for high-throughput data writes and
    reads. Here, instead of a queue, you are provided with a stream that consumers
    can use to read from multiple times. The stream is automatically trimmed after
    a span of 24 hours, so, unlike your consumers from the queue, here you are not
    required to delete the messages once they are processed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/60bab0ac-5337-495e-8d73-fa98b952294e.png)'
  prefs: []
  type: TYPE_IMG
- en: Similar to Amazon Kinesis, AWS also provides a streaming functionality with
    DynamoDB as well, called DynamoDB streams. Using this feature, you can basically
    enable real-time changes to certain items within your tables in the form of a
    stream. And, finally, you also get the standard request–reply model of messaging
    using a combination of Amazon API Gateway, ELBs, AWS Lambda, and other services.
    This mode of communication is also synchronous in nature and can be used to fit
    a variety of use cases, as per your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping these basic differences in mind, let's now move forward and learn more
    about SNS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Amazon Simple Notification Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed briefly earlier, SNS is a managed web service that you, as an end
    user, can leverage to send messages to various subscribing endpoints. SNS works
    in a publisher–subscriber or producer and consumer model, where producers create
    and send messages to a particular topic, which is in turn consumed by one or more
    subscribers over a supported set of protocols. At the time of writing this book,
    SNS supports HTTP, HTTPS, email, push notifications in the form of SMS, as well
    as AWS Lambda and Amazon SQS, as the preferred modes of subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: SNS is a really simple and yet extremely useful service that you can use for
    a variety of purposes, the most common being pushing notifications or system alerts
    to cloud administrators whenever a particular event occurs. We have been using
    SNS throughout this book for this same purpose; however, there are many more features
    and use cases that SNS can be leveraged for. For example, you can use SNS to send
    out promotional emails or SMS to a large group of targeted audiences, or even
    use it as a mobile push notification service where the messages are pushed directly
    to your Android or IOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind, let''s quickly go ahead and create a simple SNS topic of
    our own:'
  prefs: []
  type: TYPE_NORMAL
- en: To do so, first log in to your AWS Management Console and, from the Filter option,
    filter out `SNS` service. Alternatively, you can also access the SNS dashboard
    by selecting [https://console.aws.amazon.com/sns](https://console.aws.amazon.com/sns).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If this is your first time with SNS, simply select the Get Started option to
    begin. Here, at the SNS dashboard, you can start off by selecting the Create topic option,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ab61416-e32b-4a10-a48a-88887bbf394f.png)'
  prefs: []
  type: TYPE_IMG
- en: Once selected, you will be prompted to provide a suitable Topic name and its
    corresponding Display name. Topics form the core functionality for SNS. You can
    use topics to send messages to a particular type of subscribing consumer. Remember,
    a single topic can be subscribed by more than one consumer. Once you have typed
    in the required fields, select the Create topic option to complete the process.
    That's it! Simple, isn't it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having created your topic, you can now go ahead and associate it with one or
    more subscribers. To do so, first we need to create one or more subscriptions.
    Select the Create subscription option provided under the newly created topic,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9775190b-9918-4ccf-97ea-d049457aaad2.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, in the Create subscription dialog box, select a suitable Protocol that
    will subscribe to the newly created topic. In this case, I've selected Email as
    the Protocol. Next, provide a valid email address in the subsequent Endpoint field.
    The Endpoint field will vary based on the selected protocol. Once completed, click
    on the Create subscription button to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the subscription created, you will now have to validate the subscription.
    This can be performed by launching your email application and selecting the Confirm
    subscription link in the mail that you would have received.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the subscription is confirmed, you will be redirected to a confirmation
    page where you can view the subscribed topic''s name as well as the subscription
    ID, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f674ccdd-a2e4-46e9-b3ac-3396b17e2806.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use the same process to create and assign multiple subscribers to the
    same topic. For example, select the Create subscription option, as performed earlier,
    and from the Protocol drop-down list, select SMS as the new protocol. Next, provide
    a valid phone number in the subsequent Endpoint field. The number can be prefixed
    by your country code, as shown in the following screenshot. Once completed, click
    on the Create subscription button to complete the process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c9bbe421-b9b7-4540-8605-b2beea459f1d.png)'
  prefs: []
  type: TYPE_IMG
- en: With the subscriptions created successfully, you can now test the two by publishing
    a message to your topic. To do so, select the Publish to topic option from your
    topics page. Once a message is published here, SNS will attempt to deliver that
    message to each of its subscribing endpoints; in this case, to the email address
    as well as the phone number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in a suitable Subject name followed by the actual message that you wish
    to send. Note that if your character count exceeds 160 for an SMS, SNS will automatically
    send another SMS with the remainder of the character count. You can optionally
    switch the Message format between Raw and JSON to match your requirements. Once
    completed, select Publish Message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check your email application once more for the published message. You should
    receive an mail, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40f8b3ed-8ae2-441c-b5d1-4920f43e199e.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, you can create and associate one or more such subscriptions to each
    of the topics that you create. In the next section, we will look at how you can
    leverage SNS to send SMS messages or text messages to one or multiple phone numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Sending text messages using SNS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Amazon SNS also provides users with a really easy-to-use interface which allows
    you to send text messages or SMS messages to one or multiple phone numbers. It
    also provides you with the ability to classify and send messages based on their
    criticality, as well as specify the maximum amount that you wish to spend on sending
    SMS messages each month. So, without wasting any time, let''s get straight to
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: To send SMS messages using SNS, first log in to the SNS dashboard by selecting [https://console.aws.amazon.com/sns/](https://console.aws.amazon.com/sns/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged in, select the Text messaging (SMS) option from the navigation pane.
    This will bring up the Text messaging (SMS) dashboard, where you can set your
    SMS preferences as well as send messages to one or more phone numbers. First up,
    let's set some preferences by selecting the Manage text messaging preferences option
    from the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the following preference fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Default message type: SNS provides two message types: Promotional and Transactional.
    The Promotional option can be selected if the messages that you wish to send require
    less criticality, for example, simple marketing messages, and so on. On the other
    hand, Transactional messages are ideally suited for critical messages, such as
    one-time passwords, transaction details, and so on. SNS optimizes the message
    delivery for Transactional messages to achieve the best reliability.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: At the time of writing this book, sending SMS messages is supported in the countries
    listed at [https://docs.aws.amazon.com/sns/latest/dg/sms_supported-countries.html](https://docs.aws.amazon.com/sns/latest/dg/sms_supported-countries.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this particular scenario, I''ve selected the Promotional option, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd797451-30a0-46e5-99af-d992c876b9b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Account spend limit: The maximum amount you wish to spend, in USD, for sending
    messages in a month. By default, the limit is set to USD 1.00\. For this scenario,
    we are not going to change this value.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Both Promotional and Transactional message types have different costs based
    on the specified country or region. You can look up the prices at [https://aws.amazon.com/sns/sms-pricing/](https://aws.amazon.com/sns/sms-pricing/).
  prefs: []
  type: TYPE_NORMAL
- en: 'IAM role for CloudWatch Logs access: This option is used to create an IAM role
    that basically allows Amazon SNS to write its logs to CloudWatch. Since this is
    the first time we are configuring this feature, select the Create IAM role option.
    This will redirect you to a new page where you should select the Allow option
    to grant SNS the necessary rights. Here is a snippet of the rights that are provided
    for your IAM role:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Default percentage of success to sample: This option is used to specify the
    percentage of successful SMS messages delivered, based on which SNS will write
    logs into CloudWatch. To write only logs for failed message deliveries, set this
    value to `0`. By default, SNS will write logs for all successful deliveries (100%).'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default sender ID: This option is used to specify the name of the message''s
    sender. You can provide any meaningful name here.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reports storage: Use this option to configure an S3 bucket that will store
    daily SMS usage reports from Amazon SNS. If you are providing an existing bucket
    as your Reports storage then ensure that it has the necessary access rights to
    interact with the SNS service.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the required fields are filled in, select the Update preferences option
    to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To send the SMS messages, simply select the Send a text message (SMS) option
    from the Text messaging (SMS) dashboard. This will bring up the Send text message
    (SMS) dialog box, as shown in the following screenshot. Provide a valid phone
    Number and a Message. Remember to prefix your country code in the phone number
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96b04b21-cc91-4e2a-9f24-9f66b624aa28.png)'
  prefs: []
  type: TYPE_IMG
- en: You can optionally even overwrite the Sender ID field here, however, for this
    case, we have left it to the default value that was configured in the preferences
    stage. After the required fields are filled in, simply select Send text message to
    complete the message-sending process. You can also verify the delivery status
    of each message sent, either Transactional or Promotional, by using the Account
    stats section provided in the Text messaging (SMS) page.
  prefs: []
  type: TYPE_NORMAL
- en: Using Amazon SNS as triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key benefits of having a service such as SNS is that it can also
    be used as a trigger mechanism for a variety of use cases. Messages sent by SNS
    can be used to trigger simple Lambda functions that in turn perform some action
    over another AWS service, or simply process the message from SNS and forward its
    contents to another application. In this section, we will be exploring a really
    simple use case where an SNS topic is used as a trigger mechanism for a Lambda
    function to push CloudWatch alerts over to Slack! The alerts will be sent out
    to a custom-made Slack channel that your IT team can use to track alerts and other
    important notifications with regards to your AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'At a broader level, here are the list of things that we plan to do for this
    activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an SNS topic that will act as the Lambda trigger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a CloudWatch alarm for one of our EC2 machines, say, if CPU utilization
    goes higher than 80% then trigger the alarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CloudWatch alarm will post the notification to an SNS topic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SNS topic will act as a trigger to our Lambda function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As soon as the Lambda function gets a trigger, it will post the notification
    to our Slack channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sounds simple? Let''s get down to implementing it then:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will need to create a simple SNS topic which will act as a trigger
    for the Lambda function. Go ahead and create a simple SNS topic as we did in our
    earlier steps. Once completed, make a note of the SNS topic's ARN from the topics
    dashboard. In this case, our SNS is configured to send notifications to an email
    subscriber in the form of an IT admin email alias.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next up, we create our CloudWatch alarm. To do so, select the CloudWatch service
    from the AWS Management Console and click on Alarms in the navigation panel. Select Create
    alarm to get started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this scenario, we will be monitoring the EC2 instances in our environment,
    so I''ve gone ahead and selected the EC2 Metrics option. Alternatively, you can
    select any other Metrics, as per your requirements. In our case, we have gone
    ahead and configured a simple CPUUtilization alarm, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/108e1972-18e0-4f59-bf71-afaa0c1c8952.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Make sure that you set up a notification for the alerts and point it to the
    newly created SNS topic, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa361d85-1ba4-49c8-914f-4ece2ddce92f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the SNS topic and CloudWatch alarm in place, we now need to configure
    a Slack channel where the alert notifications will be posted. For that, we will
    need an incoming webhook to be set and a hook URL that will be used to post the
    notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your Slack team''s settings page and select the Apps & integrations option,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ae85fcd-290c-4028-a7c6-499ed8ede6f4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can sign up for a free Slack account at [https://slack.com/get-started](https://slack.com/get-started).
  prefs: []
  type: TYPE_NORMAL
- en: Once you click on Apps & integrations, it will take you to a new page which
    lists a variety of pre-configured apps. Search for `Incoming` and select the Incoming
    Webhooks from the options that appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on Add Configuration. It will ask you to select the Channel to post,
    along with a few other necessary parameters. Make sure that you copy and save
    the Webhook URL before you proceed any further with the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have our Slack hook URL ready, we can finally get started with
    deploying our Lambda function. For this exercise, we will be using an existing
    AWS Lambda function blueprint designed for Slack integration, using the Node.js
    4.3 version:'
  prefs: []
  type: TYPE_NORMAL
- en: From the AWS Management dashboard, filter the service Lambda using the Filter option,
    or alternatively, select [https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the AWS Lambda landing page, select the Create a function option to get
    started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For working with Lambda functions, you can choose to create your own function
    from scratch, or alternatively, filter and use a function from a list of predefined
    and configured blueprints. In this case, select the Blueprints option and use
    the adjoining blueprints filter to search for the following function: Blueprint
    name: cloudwatch-alarm-to-slack (as shown in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/48fa3787-c106-4faf-b468-c848188bde69.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the blueprint and fill out the necessary information for your function,
    such as its name, role name, and so on. Once done, from the SNS section, select
    the newly created SNS topic from the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember to select the Enable trigger checkbox before proceeding with the next
    steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, in the Environment variables section, provide the appropriate values
    for the `slackChannel` and `kmsEncryptedHookUrl` parameters, as shown in the following
    screenshot. Remember, the `kmsEncryptedHookUrl` is nothing but the Slack hook
    URL that we created a while back:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21efa3ea-75cf-4419-bc3b-0cff721aee5f.png)'
  prefs: []
  type: TYPE_IMG
- en: With the values filled in, simply select the Create function option and let
    the magic begin!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the selected CloudWatch metric for your alarm, go ahead and create
    some synthetic load for your EC2 instance. Once the load crosses the set threshold
    in the alarm, it triggers a corresponding message to the SNS topic, which in turn
    triggers the Lambda function to post the alert over on the Slack channel. In this
    way, you can also use the same SNS topic for subscribing to various other services,
    such as Amazon SQS, for other processing requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Amazon SNS using Amazon CloudWatch metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Amazon SNS automatically collects and sends various metrics about message deliveries
    to Amazon CloudWatch. You can view these metrics and assign them with alarms to
    alert you, in case a message delivery rate drops beyond a certain threshold. You
    can additionally view the message delivery logs, as well using the CloudWatch
    Logs page:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started, first ensure that you have assigned an IAM role that allows
    SNS to write SMS delivery logs over to CloudWatch. To do so, from the navigation
    pane, select the Text messaging (SMS) option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the Manage text messaging preferences option, ensure that you have
    a valid IAM role provided under the IAM role for CloudWatch Logs access field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the IAM role is created, log in to your CloudWatch dashboard by selecting
    [https://console.aws.amazon.com/cloudwatch/home](https://console.aws.amazon.com/cloudwatch/home).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, select the Logs option from the navigation pane to bring up the CloudWatch
    Log Groups page. You should see a default Log Group created here, by the name
    of `DirectPublishToPhoneNumber`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Log Group to view the SMS delivery log messages. The logs will either
    show a `SUCCESS` or `FAILURE` in the `status` field, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c1357dd-ed17-45dd-844f-cb32dde6274e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can additionally create and associate CloudWatch alarms with your monitored
    SNS metrics. To do so, from the CloudWatch dashboard, select the Metrics option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the All metrics tab, filter and select the SNS option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the requirements, you can now select between viewing the metrics based
    on the PhoneNumber, or Country, SMSType, and so on. In this case, we have selected
    the PhoneNumber option to view the NumberOfNotificationsFailed and NumberOfNotificationsDelivered metrics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the Graphed metrics tab to view the two metrics and their associated
    actions. Using the Actions column, select the Create alarm option for the metric
    that you wish to monitor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the respective details and configure the alarm's threshold values based
    on your requirements. Once completed, click on Create Alarm to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this way, you can leverage Amazon CloudWatch to create and view logs and
    alerts generated by the SNS service. In the next section, we will be exploring
    and learning a bit about the second part of the AWS messaging services: SQS.'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Amazon Simple Queue Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon SQS is a managed, highly scalable, and durable service that provides
    developers with a mechanism to store messages that can be later consumed by one
    or more applications. In this section, we will be exploring a few of the concepts
    and terminologies offered by SQS along with an understanding of which SQS, queue
    to use for what scenarios, so let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: 'To start off with, SQS is provided in two different modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard queue**: Standard queues are the default selection when it comes
    to working with SQS. Here, the queues created offer a nearly-unlimited **transaction
    per second** (**TPS**) rate coupled with an *at-least-once* delivery model. What
    this model means is that a message can be delivered at least once, but occasionally
    there is a good probability that more than one copy of that same message can be
    delivered as well. This is due to the fact that SQS is designed and built on a
    highly distributed system that is known to create copies of the same message in
    order to maintain a high-availability scenario. As a result, you may end up with
    the same message more than once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard queues also work on a *best-effort ordering* model, in which case,
    messages might be delivered in a different order to the one in which they were
    sent. It is up to your application to sort the messages into the right order in
    which the messages should be received. So, when is the standard queue an ideal
    choice for decoupling your applications? Well, if your application has a high
    throughput requirement, for example, processing of batch messages, decoupling
    incoming user requests from an intense background processing work, and so on,
    then standard queues are the right way to go.
  prefs: []
  type: TYPE_NORMAL
- en: Standard queues are available across all AWS regions.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIFO queues**: When working with standard queues, there is a problem of maintaining
    the order of the messages and also ensuring that each message is processed only
    once. To solve this issue, AWS introduced the FIFO queue that provides developers
    with a guaranteed order of delivery of messages, as well as the assurance that
    each message is delivered only once, where no duplicates or copies are ever sent
    out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FIFO queues, on the other hand, do not offer an unlimited throughput capacity,
    unlike their predecessor. At the time of writing this book, FIFO queues support
    up to 300 messages sent per second, with an additional 3,000 messages per second
    capacity if a batch of 10 messages per operation is performed.
  prefs: []
  type: TYPE_NORMAL
- en: Such queues are really useful when the order of the messages is of critical
    importance, for example, ensuring that a user follows the correct order of events
    while registering or purchasing of a product, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: FIFO queues are currently only available in the US East (N. Virginia), US East
    (Ohio), US West (Oregon), and EU (Ireland) regions.
  prefs: []
  type: TYPE_NORMAL
- en: With this basic understanding, let's look at some simple steps to get you started
    with your very own queue in a matter of minutes!
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first queue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting started with your own SQS queue is a fairly straightforward process.
    In this section, we will be looking at how you can create your very own standard
    queue using the AWS Management Console:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, log in to your AWS Management Console and filter out the SQS service
    using the Filter option provided. Alternatively, you can also access the SQS dashboard
    by selecting [https://console.aws.amazon.com/sqs/home](https://console.aws.amazon.com/sqs/home).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since this is our first time configuring the SQS queue, select the Get started
    now option to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, in the Create New Queue page, start off by providing a suitable name for
    your queue by filling in the Queue Name field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are building a FIFO queue, you will need to suffix `.fifo` after your
    queues name, for example: `myQueue.fifo`.'
  prefs: []
  type: TYPE_NORMAL
- en: With the queue name filled out, the next step is to select the type of queue
    you wish to set up. In this case, let's first start off by selecting the `Standard
    Queue` option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the Configure Queue option to go through some of the queue's configuration
    parameters. Alternatively, you can also select the Quick-Create Queue option to
    select all the default parameters for your queue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Queue Attributes section, feel free to modify the following set of parameters
    for your queue, based on your requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Default Visibility Timeout: Amazon SQS does not automatically delete messages
    from the queue, even if they are processed by the consumers. Hence, it is the
    consumer''s duty to delete the respective message from the queue after it has
    been received and processed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: However, due to the distributed nature of SQS, there is no guarantee that other
    consumers may not try to read from a copy of the same message. To prevent such
    scenarios from occurring, SQS sets a small *Visibility Timeout* period on a message
    once it is received by a consumer. This prevents other consumers from reading
    that message until the timeout expires.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the Visibility Timeout can be set to a minimum of 30 seconds to
    a maximum of 12 hours. If, by chance, the consumer is not able to process the
    message in the allocated timeout window, then the message will be delivered to
    another consumer and the process will continue until the message is not deleted
    from the queue by a consumer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Message Retention Period: The amount of time Amazon SQS retains a message in
    case it is not deleted. The accepted values here are a minimum of 1 minute and
    a maximum of 14 days.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Maximum Message Size: The maximum message size in bytes accepted by Amazon
    SQS. The maximum limit is 256 KB.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delivery Delay: Amazon SQS allows you to temporarily delay the delivery of
    new messages in a queue for a specified amount of seconds. This is achieved by
    placing the new messages in a Delay queue which is completely managed by AWS itself.
    Although it seems similar to the concept of Visibility Timeouts, a delay queue
    hides a message when it is first added to the queue, unlike the latter where the
    message is hidden when it is picked up by a consumer. The accepted values here
    are between 0 seconds and 15 minutes:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2d065b21-0899-4674-8f26-45c3deaf9c82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Receive Message Wait Time: Amazon SQS periodically queries a small subset of
    the servers to determine if any new messages are available for consumption. This
    method is called **short polling** and is generally enabled by default when the
    Receive Message Wait Time is set to `0`. This method, however, results in a lot
    of empty responses as well, as sometimes messages just may not be present in the
    queue for consumption. In that case, SQS also provides a concept of **long polling**, whereby
    Amazon SQS waits until a message is available in the queue before sending a response.
    This drastically reduces the number of empty responses and is helpful in reducing
    the overall running costs of your system. To enable long polling, simply change
    the value of Receive Message Wait Time to a value between 0 and 20 seconds.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: With these basic settings configured, you can now go ahead and create your very
    own queue. Note, however, that there are a few additional settings that you can
    configure, such as a **dead letter queue** and a **server-side encryption**. However,
    we will park these out for the time being. Select Create Queue once done.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the new queue created, you can now start using it by simply copying the
    queue''s URL (`https://sqs.us-east-1.amazonaws.com/<ACCOUNT_ID>/<QUEUE_NAME>`)
    and providing the same to your applications or consumers to consume from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/199544a4-05a7-4e81-a907-c7513676c523.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also test the functionality of your queue by sending a test message
    to it using the SQS dashboard itself. Select the newly-created queue from the
    SQS dashboard, and from the Queue Actions drop-down menu select the Send a Message option.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will bring up the Send a Message dialog box, as shown in the following
    screenshot. Next, type in a test message in the Message Body section and click
    on Send Message to complete the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68d86778-b486-446b-b12c-50068c08d23c.png)'
  prefs: []
  type: TYPE_IMG
- en: You can optionally also change the delivery delay of this individual message
    by enabling the Delay delivery of this message by option and providing a value
    between 0 and 15 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: With the message sent, you will be notified of the message's *identifier* along
    with an *MD5 checksum* of the body. Click on Close to close the Send a Message dialog
    box. With this, the status of the Messages Available column should change to 1
    as the new message is now waiting to be read or consumed. To read the message
    from the SQS dashboard, once again select the Queue Actions drop-down menu and
    select the View/Delete Messages option.
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings up the View/Delete Messages dialog box, as shown in the following
    screenshot. Here, the dialog will poll the queue once every 2 seconds until you
    have specified the polling to run using the Poll queue for option. You can also
    change the maximum number of messages viewed by modifying the View up to field.
    Once done, select the Start Polling for Messages option to get things underway:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3eda1805-0997-4578-81c5-2e7b4f9b915c.png)'
  prefs: []
  type: TYPE_IMG
- en: With the polling started, you should see your test message in the display area,
    shortly. You can also verify the validity of the message by selecting the More
    Details option adjoining the message and verifying the MD5 checksum from the earlier
    recorded one.
  prefs: []
  type: TYPE_NORMAL
- en: Once completed, select the message and click on the Delete Messages option to
    remove the message from the queue. Remember, this is a permanent action and it
    cannot be undone. With the message deleted, your queue should once again show
    zero messages in flight or available.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a FIFO queue using the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Working with the AWS Management Console is easy enough, but the AWS CLI makes
    things even simpler! In this section, we will look at a few simple AWS CLI commands
    that you can use to create and work on your first FIFO queue:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started, we require a server or instance with the latest version of the
    AWS CLI installed and configured. If you don't already have this working, you
    might want to have a quick look at the detailed steps provided at [https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the AWS CLI installed and prepped, you can now use the following command
    to create your first FIFO queue. First, create a simple JSON file that will store
    the necessary list of attributes that we wish to pass to our new FIFO queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, most of the values are probably known to you already, such as the `VisibilityTimeout`,
    the `MaximumMessageSize`, `DelaySeconds`, and so on. The two new attributes listed
    here specifically for the FIFO queue are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FifoQueue`: Used to designate a queue as a FIFO queue. Note that you cannot
    change an existing standard queue to a FIFO queue. You will have to create a new
    FIFO queue altogether. Additionally, when you set this attribute for your queue,
    you must also provide the `MessageGroupId` for your messages explicitly.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContentBasedDeduplication`: It enables each message to be processed exactly
    one time from the queue. Once `ContentBasedDeduplication` is enabled, messages
    with identical content sent within the deduplication interval are treated as duplicates
    and only one copy of the message is actually delivered.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the JSON file is created, run the following command to create your FIFO
    queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive the new FIFO queues endpoint URL in the output, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c6a8f93-0439-4e1f-86af-cf23ca7a77d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the queue created, you can additionally use the CLI to pass messages to
    the queue as well. This is also accomplished by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `send-message` command accepts the queue URL as one of the input parameters,
    along with the actual message that has to be sent. The message can be raw, JSON,
    or XML formatted. In addition to this, the `send-message` command also uses the
    `--message-group-id` parameter that essentially tags the message to belong to
    a specific message group. Messages that belong to the same message group are processed
    in a FIFO manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7722207c-e8b1-4a19-9a26-b46e9b381cd7.png)'
  prefs: []
  type: TYPE_IMG
- en: The `--message-id-group` parameter is mandatory when working with FIFO queues.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the message now sent to the queue, you can use the AWS CLI to receive
    the message as well. Use the following command to fetch the messages from your
    FIFO queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also additionally use the `--max-number-of-messages` attribute to list
    up to 10 messages that are currently available in the queue. Here is a snippet
    of the output that you may get with the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can similarly use the AWS CLI to list the available queues in your environment,
    modify their parameters, push and poll for new messages, delete messages, and
    much more! Remember, the messages will persist in the queue unless you manually
    delete them or the validity of the queue's `MessageRetentionPeriod` has expired.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Amazon SNS and Amazon SQS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the key features of Amazon SQS is that it can easily be integrated with
    other AWS services, such as Amazon SNS. Why would I need something like that?
    To begin with, let us quickly recap the things we have learned so far about both
    SNS and SQS:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Amazon SNS** | **Amazon SQS** |'
  prefs: []
  type: TYPE_TB
- en: '| Leverages the push mechanism | Leverages the polling mechanism |'
  prefs: []
  type: TYPE_TB
- en: '| Amazon SNS messages can push messages to mobile devices or other subscribers
    directly | Amazon SQS needs a worker to poll the messages |'
  prefs: []
  type: TYPE_TB
- en: '| Persistence of messages is not supported | Amazon SQS supports message persistence
    which can come in really handy if you can''t reach your consumers due to a network
    failure |'
  prefs: []
  type: TYPE_TB
- en: From the table, it is easy to see that both the services offer their own pros
    and cons when it comes to working with them. However, when we join the two services,
    you can actually leverage them to design and build massively scalable yet decoupled
    applications. One common architectural pattern that you can leverage by combining
    both SNS and SQS is called the **fan out pattern**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this pattern, a single message published to a particular SNS topic can be
    distributed to a number of SQS queues in parallel. Thus, you can build highly-decoupled
    applications that take advantage of parallel and asynchronous processing. Consider
    a simple example to demonstrate this pattern. A user uploads an image to his S3
    bucket, which triggers an SNS notification to be sent to a particular SNS topic.
    This topic can be subscribed by a number of SQS queues, each running a completely
    independent process from the other. For example, one queue can be used to process
    the image''s metadata while the other can be used to resize the image to a thumbnail,
    and so on. In this pattern, the queues can work independently of each other without
    even having to worry about whether or not the other completed its processing or
    not. Here is a representational figure of this pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1dd28266-9131-4304-ab7e-7df08ab1fc94.png)'
  prefs: []
  type: TYPE_IMG
- en: To integrate both the SNS and SQS services, you will first be required to create
    a simple SNS topic of your own. Go ahead and create a new SNS topic using the
    AWS Management Console, as performed earlier in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the topic is ready, the next step involves the creation of an associated
    subscription. To do so, from the SNS dashboard, select the Subscriptions option
    from the navigation pane and click on Create subscription to get started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Create subscription dialog box, copy and paste the newly created topic''s
    ARN in the Topic ARN field, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/668d026c-465c-40a1-a6cf-9897b35a6038.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the Topic ARN is pasted, select the Amazon SQS option from the Protocol drop-down
    list, followed by pasting a queue's ARN in the Endpoint field. In this case, I'm
    using the standard queue's endpoint that we created a while back in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the required fields filled out, select Create subscription to complete
    the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, from the SQS dashboard, select the queue that you have identified for
    this integration and, from the Permissions tab, select Add a Permission to allow
    the SNS service to send messages to the queue. To do so, provide the following
    set of permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Effect: Allow'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Principal: Everybody'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Actions: SendMessage'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once done, click on Add Permission to grant the SNS service the required set
    of permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now ready to test the integration! To do so, simply fire a sample message
    using the Publish to Topic option from the SNS dashboard. Once the message is
    successfully sent, cross over to the SQS dashboard and poll the queue using the
    View/Delete Messages option from under the Queue Actions drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a snippet of the Message Body obtained after long polling the queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/520433e2-0bb8-4b01-a086-64f1b96777df.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, you can use such a fan out pattern to design and build your very
    own highly scalable and decoupled cloud-ready applications.
  prefs: []
  type: TYPE_NORMAL
- en: Planning your next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, that was really quite a lot to learn and try out, but we are not done
    yet! There are still a few things that you ought to try on your own with SNS,
    as well as with SQS. First up, Amazon SNS mobile push notifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already touched upon the fact that Amazon SNS can be used to send notifications
    to a variety of subscribers, including HTTP, HTTPS endpoints, Amazon SQS, and
    AWS Lambda, but one other key feature recently added is SNS'' ability to push
    notifications directly to your applications on mobile devices. This is called
    **SNS mobile push notifications** and, as of now, SNS supports the following push
    notification services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Device Messaging** (**ADM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apple Push Notification Service** (**APNS**) for both iOS and macOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Baidu Cloud Push** (**Baidu**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Cloud Messaging** (**GCM**) for Android'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Push Notification Service** (**MPNS**) for Windows Phone'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Push Notification Services** or **Windows Notification Service**
    (**WNS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's pretty easy and straightforward to get started with mobile push notifications.
    All you need is a set of credentials for connecting to one of the supported push
    notification services, a device token or registration ID for the mobile application
    and device itself, and an Amazon SNS configured to send push notification messages
    to the mobile endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about SNS mobile push notification services at [https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html).
  prefs: []
  type: TYPE_NORMAL
- en: The other important feature worth trying out is the configuration of server-side
    encryption for your Amazon SQS queue. You can leverage SSE to encrypt and protect
    data stored in your queue, however, this feature is only available in the US East
    (N. Virginia), US East (Ohio), and US West (Oregon) regions at present.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting the queue can be done at the time of the queue's creation, as well
    as after the queue has been created. Old messages present in the queue, however,
    are not encrypted if the SSE is switched on in an existing queue.
  prefs: []
  type: TYPE_NORMAL
- en: You can configure SSE for an existing queue simply by selecting it from the
    SQS dashboard and selecting the Configure Queue option present in the Queue Actions drop-down
    menu. Here, check the Use SSE checkbox to enable the server-side encryption on
    your queue. At this time, you will be prompted to select a **customer master key**
    (**CMK**) ID which you can leave to the default value if you do not have an CMK
    of your own. Once done, set a duration for the Data key reuse period of between
    1 minute and 24 hours. Click on Save changes to apply the recent modifications
    to the queue.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about SSE and how to enable it on a new queue, at [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-create-queue-sse.html](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-create-queue-sse.html).
  prefs: []
  type: TYPE_NORMAL
- en: Last, but not the least, I also recommend that you try out the *dead letter
    queue* feature provided by Amazon SQS. Dead letter queues are nothing more than
    queues that you create for storing messages that could not be processed by your
    application's main processing queue. This comes in really handy when you need
    to debug issues in your application or the messaging system. However, it is very
    important to note that the dead letter queue of a standard queue is always a standard
    queue, and the same applies for a FIFO-based queue as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can configure any queue within your account to be a dead letter queue for
    another queue by simply configuring the Redrive Policy of your application's main
    queue. To know more about dead letter queues and how they work, check out [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, this has been a really insightful chapter indeed. Before we move on to
    the next chapter, here's a quick look at the things we have learned so far!
  prefs: []
  type: TYPE_NORMAL
- en: First up, we started with a quick look at the various messaging services that
    are provided by AWS. Next, we deep dived into the amazing world of Amazon SNS,
    created our very first topic, and subscribed to both email and phone subscriptions.
    We also looked at how to configure and leverage SNS' text messaging service.
  prefs: []
  type: TYPE_NORMAL
- en: Once we had the basics of SNS covered, we moved on to the next messaging service,
    SQS, and learned a bit about its concepts and terminologies as well. We created
    our first queues using both the AWS Management Console and the AWS CLI, and finally
    we looked at a really useful integration of the two services that you can use
    to design and build scalable and decoupled cloud applications. We finally topped
    it all off with a handy next steps guide that you ought to try out in your free
    time!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be learning and exploring two really awesome analytics
    services, in the form of Amazon Elastic MapReduce and Amazon Redshift, so stay
    tuned!
  prefs: []
  type: TYPE_NORMAL
