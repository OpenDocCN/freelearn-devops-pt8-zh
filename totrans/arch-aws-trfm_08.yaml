- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying Serverless Projects with Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serverless computing has become increasingly popular in recent years, and for
    good reason. With AWS Lambda and AWS Fargate, you can develop and deploy your
    applications without the need to manage servers or infrastructure. Terraform makes
    it easy to design, deploy, and manage your serverless infrastructure on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore the concepts of AWS landing zones and foundations,
    and how they can help you set up and manage your AWS accounts and infrastructure.
    We will cover the different options available for implementing landing zones and
    how to select the best design for your needs. Additionally, we will explore the
    use of AWS Organizations with Terraform to manage your AWS infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will dive into the world of serverless computing, exploring what it
    is and when to use it. We will cover AWS Lambda and AWS Fargate, and how to use
    them to build and deploy your applications. We will also explore different deployment
    patterns and how to use Terraform to design and deploy your serverless infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a solid understanding of AWS landing
    zones and foundations, as well as how to design and deploy serverless infrastructure
    using Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: What are landing zones and why do we need them?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A landing zone is a reference architecture for a multi-account AWS environment.
    It provides a set of foundational resources and best practices that you can use
    as a starting point for your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'A landing zone typically includes the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A core account**: This is the primary account that contains the shared resources
    for the environment, such as the landing zone itself and the **Identity and Access
    Management** (**IAM**) resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**One or more member accounts**: These are the accounts that contain the resources
    for your applications and workloads. The member accounts are linked to the core
    account and inherit the shared resources and policies from the core account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A networking layer**: This includes the **Virtual Private Clouds** (**VPCs**)
    and other networking resources that are shared across the accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A security layer**: This includes the IAM policies and other security resources
    that are shared across the accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A governance layer**: This includes the policies and controls that are used
    to enforce compliance and manage the environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A landing zone can help you manage a multi-account environment more effectively
    and efficiently by providing a consistent set of resources and practices across
    all accounts. It can also help you onboard new accounts and applications more
    quickly by providing a standard framework to follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several reasons why you might want to use a landing zone in your
    AWS environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Improved security and compliance**: A landing zone provides a set of shared
    security and compliance resources, such as IAM policies and network controls,
    that are applied consistently across all accounts. This can help you improve the
    security and compliance of your environment by enforcing best practices and reducing
    the risk of misconfigurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved efficiency and automation**: A landing zone can help you automate
    the setup and management of your multi-account environment by providing a standard
    set of resources and practices to follow. This can save you time and effort and
    reduce the risk of errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved scalability and flexibility**: A landing zone can help you scale
    your environment more easily by providing a flexible, modular architecture that
    can accommodate new accounts and applications as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved governance and control**: A landing zone can help you enforce governance
    and control over your environment by providing a central location for managing
    shared resources and policies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Foundations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Foundations is a set of best practices and recommended configurations for
    building and managing infrastructure on AWS. It provides guidance on how to set
    up your AWS accounts, networking, security, and governance in a way that is scalable,
    secure, and compliant.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS Foundations includes recommendations for the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account structure**: This includes guidance on how to set up and organize
    your AWS accounts and how to use AWS Organizations to manage them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Networking**: This includes guidance on how to set up your VPCs, subnets,
    and routing to create a scalable and secure network architecture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: This includes guidance on how to secure your AWS resources using
    IAM, encryption, and other security controls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Governance**: This includes guidance on how to enforce compliance and manage
    your AWS environment using policies, controls, and monitoring'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Foundations is intended to provide a set of best practices and recommendations
    that you can use as a starting point for building and managing your infrastructure
    on AWS. It is not a one-size-fits-all solution, and you may need to tailor the
    recommendations to fit the specific needs of your organization.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Foundations is not a product or a service offered by AWS, but rather a set
    of guidelines and recommendations that you can use to build your infrastructure
    on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Foundations includes recommendations for setting up and organizing your
    AWS accounts, creating a scalable and secure networking architecture, securing
    your AWS resources, and enforcing compliance and governance in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Foundations is intended to be a living document that is regularly updated
    with new best practices and recommendations as they become available.
  prefs: []
  type: TYPE_NORMAL
- en: How to build landing zones with Terraform in AWS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Control Tower Account Factory is a feature of AWS Control Tower that allows
    you to automate the creation of member accounts in your multi-account AWS environment.
    With Account Factory, you can use Terraform templates to define the resources
    and configuration for your member accounts and then use the AWS Control Tower
    API to create the accounts and provision the resources automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some key features of AWS Control Tower Account Factory:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automated account creation**: With Account Factory, you can use Terraform
    templates to define the resources and configuration for your member accounts and
    then use the AWS Control Tower API to create the accounts and provision the resources
    automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standardized account setup**: Account Factory allows you to enforce a standard
    set of resources and configuration for your member accounts, helping you ensure
    consistency and compliance across your environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customization options**: You can use variables in your Terraform templates
    to customize the resources and configuration for your member accounts. This allows
    you to create accounts that are tailored to the specific needs of your organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration with AWS Control Tower**: Account Factory is integrated with
    AWS Control Tower, allowing you to use the AWS Control Tower dashboard to monitor
    and manage your member accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is an informative tutorial from Terraform on how to utilize Account Factory
    for Terraform (AFT): [https://developer.hashicorp.com/terraform/tutorials/aws/aws-control-tower-aft](https://developer.hashicorp.com/terraform/tutorials/aws/aws-control-tower-aft).'
  prefs: []
  type: TYPE_NORMAL
- en: What is serverless?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serverless computing is a cloud computing execution model that allows the cloud
    provider to dynamically allocate resources to run the userâ€™s code, with the user
    only paying for the resources consumed. This model frees the user from the hassle
    of provisioning, scaling, and maintaining the underlying infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: In a serverless model, the user creates and deploys code in the form of functions,
    which are executed in response to events or invocations. The cloud provider automatically
    allocates the necessary resources to run the function, and the user only pays
    for the actual execution of the function.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless computing can provide several benefits, including reduced operational
    overhead, scalability, and cost-efficiency. It is particularly well suited for
    applications that have intermittent or unpredictable workloads, as the user only
    pays for the resources used to run the code.
  prefs: []
  type: TYPE_NORMAL
- en: AWS offers several serverless computing services, including AWS Lambda, which
    allows you to run code in response to events or invocations, and AWS Fargate,
    which allows you to run containerized applications in a serverless environment.
  prefs: []
  type: TYPE_NORMAL
- en: What are AWS serverless patterns?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS serverless patterns are templates for common ways to build and deploy applications
    using serverless technologies on **Amazon Web Services** (**AWS**). These patterns
    provide guidance on how to design and architect your applications to take advantage
    of the benefits of serverless computing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many different serverless patterns that you can use, depending on
    the requirements of your application. Some common serverless patterns include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event-driven architecture**: This pattern involves building applications
    that respond to events, such as a user uploading a file or a sensor sending data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microservices**: This pattern involves breaking up a large application into
    smaller, independent services that can be developed, deployed, and scaled independently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data processing**: This pattern involves using serverless technologies to
    process large amounts of data, such as converting data from one format to another
    or aggregating data from multiple sources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web applications**: This pattern involves using serverless technologies to
    build and deploy web applications, such as static websites or dynamic web applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a few examples of the types of serverless patterns that are available.
    There are many other patterns that you can use to build and deploy your applications
    on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS serverless resources are resources that are used to build and deploy applications
    using serverless technologies on AWS. These resources can include a variety of
    different services and tools, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Lambda**: A service that lets you run code without provisioning or managing
    servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon API Gateway**: A service that makes it easy to create, publish, maintain,
    monitor, and secure APIs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Fargate**: A service that lets you run containers without having to manage
    the underlying EC2 instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Step Functions**: A service that makes it easy to coordinate the functions
    of distributed applications and microservices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS App Runner**: A service that makes it easy to build and deploy containerized
    applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is AWS Lambda?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Lambda is a fully managed serverless compute service that allows you to
    execute your code in response to various events, such as changes to data in an
    Amazon S3 bucket or a new item being added to a DynamoDB table. It automatically
    manages the underlying compute resources for you, so you donâ€™t need to worry about
    provisioning or maintaining any servers. This enables you to focus on writing
    and deploying your code, without any administrative overhead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some common use cases for AWS Lambda include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Running backend logic for web and mobile applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing data streams and event triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating maintenance and administration tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Lambda, you write your code and then upload it to the service. When an event
    occurs that triggers your code, Lambda executes it and automatically scales the
    underlying infrastructure to run your code. You only pay for the compute time
    that you consume, so you can run your code without having to worry about managing
    servers or infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda supports a variety of programming languages, including Node.js, Python,
    Java, C#, and Go, and you can use it in conjunction with other AWS services to
    build powerful and scalable applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s look at some key features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lambda functions**: In Lambda, you create functions that contain your code.
    These functions are triggered by events, such as a user uploading a file to Amazon
    S3 or a request to an API Gateway endpoint. You can specify the events that trigger
    your functions, and Lambda automatically executes the function when these events
    occur.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execution environment**: AWS Lambda provides a fully managed execution environment
    for your functions. This includes the infrastructure and operating system, as
    well as the language runtime (e.g., Node.js, Python, Java, etc.). When you create
    a function, you can specify the runtime and the amount of memory that you want
    to allocate to your function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scaling**: One of the benefits of using AWS Lambda is that it automatically
    scales to meet the needs of your application. When your function is invoked, Lambda
    allocates the necessary compute resources to run your code. If your function is
    invoked more frequently, Lambda automatically scales up to meet the increased
    demand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrations**: AWS Lambda integrates with a wide variety of other AWS services,
    allowing you to build powerful and scalable applications. For example, you can
    use Lambda with Amazon S3 to automatically process files as they are uploaded
    to the bucket, or with Amazon DynamoDB to automatically update records in the
    database as they are added or modified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is AWS Fargate?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Fargate is a fully managed service that makes it easier to run containerized
    applications on AWS. AWS Fargate removes the need to manage the underlying infrastructure,
    so you can focus on building and running your applications.
  prefs: []
  type: TYPE_NORMAL
- en: With AWS Fargate, you simply specify the number and type of resources that you
    want to allocate to your applications, and AWS Fargate takes care of the rest.
    It automatically allocates the necessary compute resources, such as Amazon **Elastic
    Compute Cloud** (**EC2**) instances, and ensures that your containers are running
    in a highly available and scalable manner.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Fargate is a good choice for developers who want to run containerized applications
    on AWS without the overhead of managing the underlying infrastructure. It is especially
    well suited for applications that require rapid scaling or that have unpredictable
    workloads, as AWS Fargate can automatically scale your resources up or down as
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Fargate is a fully managed service, which means that AWS takes care of the
    underlying infrastructure for you. This includes provisioning and managing the
    EC2 instances that run your tasks, as well as handling any infrastructure maintenance
    or patching.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Fargate is available in all regions where Amazon ECS is available, and you
    can use it to run tasks on both Amazon ECS and Amazon **Elastic Kubernetes** **Service**
    (**EKS**).
  prefs: []
  type: TYPE_NORMAL
- en: AWS Fargate supports all of the same features as Amazon ECS, including the ability
    to use Amazon ECS task definitions to define your tasks, integration with other
    AWS services such as Amazon CloudWatch and AWS IAM, and support for Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Fargate is well suited for use cases where you want to run containers but
    donâ€™t want to worry about the underlying infrastructure. It can be a good choice
    for developers who want to focus on building and deploying applications rather
    than managing infrastructure, or for organizations that want to run containerized
    applications but donâ€™t have the in-house expertise to manage the underlying infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: You can use AWS Fargate with Amazon **Elastic Container Service** (**ECS**)
    or Amazon EKS to run your containerized applications. It is also integrated with
    other AWS services, such as Amazon CloudWatch and AWS IAM, which you can use to
    monitor and secure your applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to design a serverless infrastructure with Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are general steps you can follow to design a serverless infrastructure
    using Terraform:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the components of your infrastructure that can be implemented as serverless
    resources. This might include things such as APIs, backend workers, and data processing
    pipelines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine which serverless platforms and services you will use to implement
    these components. This might include services such as AWS Lambda, Amazon API Gateway,
    and Amazon DynamoDB, or managed services such as AWS Fargate or AWS AppSync.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the required IAM roles and permissions for your serverless resources.
    This will typically involve creating IAM policies and attaching them to IAM roles
    that your resources can assume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Terraform to create the necessary infrastructure resources, such as VPCs,
    security groups, and subnets. You can also use Terraform to create and configure
    the serverless resources themselves.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define any dependencies between your resources using Terraformâ€™s dependencies
    syntax. This will ensure that resources are created in the correct order and that
    any necessary connections are established between them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Terraformâ€™s testing and validation features to ensure that your infrastructure
    is configured correctly and adheres to best practices. This might include things
    such as running `terraform plan` to preview changes, or running `terraform validate`
    to check for syntax errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Terraformâ€™s version control integration to manage changes to your infrastructure
    over time. This will allow you to track changes, roll back to previous versions
    if necessary, and collaborate with other team members.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Moreover, here are some additional points to consider for designing the serverless
    infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: Decide on a deployment strategy that works for your organization. This might
    include using Terraformâ€™s `apply` command to deploy changes directly or using
    a **continuous integration/continuous deployment** (**CI/CD**) platform such as
    AWS CodePipeline to automate the deployment process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider the scalability and availability requirements of your serverless resources.
    You can use Terraform to specify things like the number of replicas for an Amazon
    ECS service, or the number of function instances for an AWS Lambda function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Terraformâ€™s output values to expose important information about your infrastructure
    to other tools and processes. For example, you might output the URL of an API
    Gateway endpoint so that it can be used by other parts of your infrastructure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Terraformâ€™s workspaces feature to manage multiple environments, such as
    production, staging, and development. This will allow you to easily switch between
    environments and apply changes to the appropriate environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider using Terraform modules to encapsulate reusable pieces of infrastructure.
    This can help you reduce duplication and make it easier to manage and maintain
    your infrastructure over time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to develop a serverless infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To develop a serverless infrastructure, you can follow these general steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the components of your infrastructure that can be implemented as serverless
    resources. This might include things such as APIs, backend workers, and data processing
    pipelines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine which serverless platforms and services you will use to implement
    these components. This might include services such as AWS Lambda, Amazon API Gateway,
    and Amazon DynamoDB, or managed services such as AWS Fargate or AWS AppSync.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the required IAM roles and permissions for your serverless resources.
    This will typically involve creating IAM policies and attaching them to IAM roles
    that your resources can assume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the relevant tools and APIs to create and configure your serverless resources.
    This might include using the AWS Management Console, the AWS CLI, or the AWS SDKs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define any dependencies between your resources, such as connections between
    an API Gateway and a Lambda function, or between a Lambda function and a DynamoDB
    table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test your infrastructure to confirm that everything is working as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use monitoring and logging tools to track the performance and health of your
    serverless resources. This might include using Amazon CloudWatch to monitor resource
    metrics and logs or using AWS X-Ray to trace requests as they flow through your
    infrastructure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to deploy a serverless infrastructure using Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy a serverless infrastructure using Terraform, you can follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Write Terraform configuration files to define the desired state of your infrastructure.
    These configuration files can use the **HashiCorp Configuration Language** (**HCL**)
    to specify the resources that you want to create, as well as the properties of
    those resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are following an event-driven architecture, you should consider carving
    all triggers and resources into the same Terraform project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `terraform init` command to initialize your working directory and download
    any necessary plugins or dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `terraform plan` command to preview the changes that Terraform will
    make to your infrastructure. This will allow you to see what resources will be
    created, modified, or destroyed, and to confirm that the changes are what you
    expect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `terraform apply` command to apply the changes to your infrastructure.
    This will create or update the resources according to your configuration files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test your infrastructure to confirm that everything is working as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Terraformâ€™s version control integration to manage changes to your infrastructure
    over time. This will allow you to track changes, roll back to previous versions
    if necessary, and collaborate with other team members.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a separate S3 bucket with relevant permissions to move your Terraform
    state file to secure and make it easy for collaboration with other team members.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider creating a pipeline in your CI/CD system to execute your Terraform
    templates for security and observability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Avoid provisioning manual resources; utilize Terraform to cover all your resources,
    configurations, and environments. Any existing or legacy resources can easily
    be imported to Terraform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about deploying serverless projects with Terraform.
    We covered the basics of serverless computing, AWS Lambda, and AWS Fargate, and
    how to design and deploy serverless infrastructure with Terraform. We also explored
    the importance of AWS landing zones and how to select and implement them. Additionally,
    we discussed AWS Organizations and how to use them with Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore deploying containers in AWS with Terraform.
    We will cover the basics of containers, AWS ECS, Amazon EKS, and how to deploy
    containers with Terraform. We will also discuss best practices for deploying containers
    in AWS and how to use Terraform to manage container deployments.
  prefs: []
  type: TYPE_NORMAL
