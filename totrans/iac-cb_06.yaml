- en: Chapter 6. Fundamentals of Managing Servers with Chef and Puppet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started (notions and tools)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Chef Development kit and Puppet Collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a free hosted server Chef account and a Puppet server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically bootstrapping a Chef client and a Puppet agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing files, directories, and templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More dynamic code using notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centrally sharing data using a Chef data bag and Hiera with Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating functional roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing external Chef cookbooks and Puppet modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chef is an open source tool used to automate the configuration of systems and
    it integrates well with most IaaS such as Amazon Web Services, OpenStack, or Google
    Cloud. Using Chef, we write infrastructure code in Ruby that describes how every
    aspect of the system is expected to behave according to a number of conditions,
    then apply it through various client tools to ensure the defined state is applied.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll discover the essentials of managing servers using Chef
    code with the **Chef Development Kit** (**Chef DK**). You'll learn how to bootstrap
    a working Chef environment on a new server, how to install packages and manage
    services, how easy it is to generate dynamic configurations through files and
    templates, create useful functional roles, centrally share data to dynamically
    generate content, and show how to articulate dependencies between services while
    helping them notify each other of their state, so the whole deployment chain works
    in order. We'll also have an introduction on easily managing those dependencies,
    that will give an insight of how to deal with more complex infrastructures managed
    by Chef.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate all those features, throughout the chapter we will build a classic
    **LAMP** (**Linux**, **Apache**, **MySQL**, **PHP**) server on CentOS 7.x, from
    scratch, 100% automated with Chef. This way, we'll go through all the features
    while progressively building our end project—a working LAMP server with external
    dependencies on the latest community MySQL 5.7 release, and more features.
  prefs: []
  type: TYPE_NORMAL
- en: All recipes are based on Chef. However, when possible, we'll try to show how
    things work similarly with Puppet, Chef's direct alternative.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started (notions and tools)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chef is a very complex system, with a lot of notions and vocabulary that can
    be very discouraging at first. In this chapter, we'll go through all the most
    important notions, so it can also serve as a quick cheat sheet or reminder.
  prefs: []
  type: TYPE_NORMAL
- en: Running Chef
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Chef can be used in multiple ways, the most important are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client/server mode**: An agent runs on every managed client, regularly getting
    updates from the server, and applying them. In this mode, all Chef code is distributed
    from the Chef server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chef-Solo: In this mode, the need for a Chef server is removed at the cost
    of less features, including important ones such as search, API, persistent storage
    of nodes information, and more. All Chef code needs to be sent over in some way
    to be applied manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other modes exist, such as Chef Zero, but they are beyond the scope of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: The multi-platform client is written in Ruby, while its server counterpart is
    written in Erlang. The Chef server is open source (Apache License at the time
    of this writing) and everyone can host it, and the company behind Chef is also
    proposing their own hosted version, with added features and support.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Chef server is a combination of many technologies such as PostgreSQL, RabbitMQ,
    Redis, Nginx, and so on. Think about maintenance, backup, and performance before
    deploying your own.
  prefs: []
  type: TYPE_NORMAL
- en: Chef plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chef is also highly modular, with a great number of plugins available either
    directly from Chef, vendors, or the community. Plugins range from IaaS support
    such as AWS, OpenStack, VMware, or Digital Ocean to hardware management from Dell,
    HP, or IPMI interfaces, team workflow integration, or system-related concerns
    such as logs handling, security, and other similar features.
  prefs: []
  type: TYPE_NORMAL
- en: Chef organizations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the very top of a Chef hierarchy, we find an *organization*. Nothing can
    be shared between organizations and this is usually where is defined a *company*,
    different *business units*, or even deliberately isolated corporate *departments*.
    It's really up to everyone to know what has to be shared with whom to know what
    the Chef organization will be.
  prefs: []
  type: TYPE_NORMAL
- en: Chef nodes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A node, in Chef terminology, is anything managed by Chef, be it physical or
    virtual, and every node has a number of characteristics or parameters that we'll
    set or change during the lifetime of the node.
  prefs: []
  type: TYPE_NORMAL
- en: Chef environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every node runs inside an environment. Environments are usually matching notions
    such as *development*, *staging*, or *production*, but it's not uncommon to see
    creative uses to manage different applications or other groups of interest. Environments
    also have a set of characteristics set.
  prefs: []
  type: TYPE_NORMAL
- en: Chef roles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Roles are usually functional and generic, more than centered around a product.
    For example, we'll see a *database* role way more often than a *MySQL* role. Other
    roles can be *monitoring-server* or *loadbalancer*.
  prefs: []
  type: TYPE_NORMAL
- en: Chef resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the single most important notion in Chef: a resource is any part of
    a system to be set in a desired state. This includes a package to be installed
    or removed, a service to be enabled or started, a file to be generated from a
    template, a user to be created or banned, and other expected elements of a system.'
  prefs: []
  type: TYPE_NORMAL
- en: Chef recipes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recipes are simply plain Ruby files including a number of Chef resources describing
    a coherent desired state, such as a package to be installed, its configuration
    file written, and a service to be restarted.
  prefs: []
  type: TYPE_NORMAL
- en: Chef cookbooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chef cookbooks are used to group many recipes under a coherent set, as well
    as every other file required to make it work. An example cookbook can be *mysql*,
    and two recipes from this cookbook can be *mysql::server* to manage the server,
    and *mysql::client* to manage a client.
  prefs: []
  type: TYPE_NORMAL
- en: Chef run list
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *run list* is a list of roles or recipes that a node has to apply. This is
    sent by the Chef server by request from the chef client.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Puppet is a configuration tool published by Puppet Labs, and is an alternative
    to Chef.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet can also work in a standalone mode like Chef, but we will focus on a
    client/server architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Puppet infrastructure is mainly composed of:'
  prefs: []
  type: TYPE_NORMAL
- en: A Puppet server acting as a main configuration server, which contains all the
    configuration code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Puppet agent running on all infrastructure nodes, applying configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication between agents and the server is done through HTTPS, and Puppet
    has its own PKI for the server certificate and for client certificates (client
    certificates are used to authenticate nodes to the server).
  prefs: []
  type: TYPE_NORMAL
- en: Puppet has its own **Domain Specific Language** (**DSL**). As for Chef, Puppet
    is using resources for installing packages, managing services, creating files,
    and more. A Puppet piece of code is called a **manifest**, and is a file with
    a `.pp` extension. The code is structured using modules. For example, we can imagine
    an `apache` module containing resources for Apache installation and service management.
    We can also have a `mysql` module for the MySQL server, with its own resources.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a main manifest, outside any module, which is the list of nodes
    of the infrastructure. For each node, we can specify which module(s) to use to
    perform the complete node installation. When a node is requesting its configuration
    from the server, the server compiles a *catalog* of this node, and the Puppet
    agent applies this catalog.
  prefs: []
  type: TYPE_NORMAL
- en: We can write our own modules or use existing modules from GitHub of Puppet Forge.
    Puppet Forge hosts a lot of community modules, and some of them are supported
    by Puppet Labs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will first write our own code in order to learn some basics
    of the Puppet DSL. We will then use a module from Puppet Forge.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Chef Development kit and Puppet Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Chef ecosystem is as rich as Chef itself is complex; there's a myriad of
    tools filling almost every imaginable task we can think of. Chef being written
    in Ruby, a lot of those tools are also written in Ruby and over the years, the
    usual dependency hell between tools, plugins, code, and various Ruby versions
    led to a simple solution—the Chef DK. The Chef DK also brings a nice selection
    of the best tools and environments that work well together.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see how to install the Chef DK and quickly describe what it includes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The current Chef DK version is 1.1.16.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A physical or virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef DK can be downloaded from [https://downloads.chef.io/chef-dk/](https://downloads.chef.io/chef-dk/).
    There''re versions for most platforms: Debian, Red Hat-based systems, Ubuntu,
    and Windows. Simply download the package corresponding to your platform and install
    it. For example, using a recent Fedora, and installing the Red Hat package, the
    installation goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the installation worked as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That's it! Everything we need to start coding Chef recipes is there.
  prefs: []
  type: TYPE_NORMAL
- en: Chef DK contents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Chef DK includes a selection of the best tools, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chef**: A workflow tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Berkshelf**: A cookbook dependency manager that does a lot more than that'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test Kitchen**: A full featured integration tests framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ChefSpec**: easy unit testing of Chef code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FoodCritic**: static code analysis for quality and consistency'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef DK also includes all the standard Chef commands (`chef-solo` or `chef-client`
    to apply cookbooks on nodes, or `knife` to manipulate Chef resources on the developer's
    workstation, among other tools).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The whole Chef environment, as well as its dependencies is deployed under `/opt/chefdk`.
    The package we installed created symlinks from this directory to `/usr/bin` which
    is on the `$PATH`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This way of packaging software includes all its dependencies, and as Chef relies
    heavily on Ruby, the Chef DK ships with an embedded version that does not conflict
    with a Ruby version that might already be installed on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starting from Puppet 4.x, Puppet Labs is providing repositories for both agent
    and server packages. These repositories are called **Puppet Collections**. As
    for Chef, provided packages are shipped with an Embedded Ruby version.
  prefs: []
  type: TYPE_NORMAL
- en: All examples from this book have been developed with Puppet 4.8 (open source
    edition). Packages can be downloaded from [https://docs.puppet.com/puppet/4.8/puppet_collections.html](https://docs.puppet.com/puppet/4.8/puppet_collections.html).
  prefs: []
  type: TYPE_NORMAL
- en: First of all you need to install the `puppet-agent` package from *Puppet Collections*
    on your workstation. Even if we won't be managing it using Puppet, these packages
    will install some commands necessary for upcoming examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the package is installed, all files are deployed under `/opt/puppetlabs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For an easier use of the Embedded Ruby version, you need to add `/opt/puppetlabs/puppet/bin`
    to the `$PATH` environment variable. For example, on Linux systems, this can be
    done by appending the following line in the `.bashrc` file located in your home
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef documentation on installing the Chef DK: [https://docs.chef.io/install_dk.html](https://docs.chef.io/install_dk.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Chef documentation on the Chef DK: [https://docs.chef.io/release/devkit/](https://docs.chef.io/release/devkit/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a free hosted server Chef account and a Puppet server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preferred Chef client/server mode, we need a Chef server to centralize
    all the information and action. We can build our own, either for testing purposes
    or for production use (with the maintenance overhead that goes with it), or we
    can use *Hosted Chef*, the Chef server hosted by the company who wrote Chef. You'll
    learn here how to create a free Hosted Chef account, so we can start coding with
    Chef as soon as possible and not worry about the server part. After this first
    step, we'll download the Chef *Start Kit*, an archive containing a fully working
    Chef repository, with a sample role and cookbook we can use right away—and that's
    what we'll do by sending this sample cookbook to the server using our first `knife`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Remember: `knife` is the command to use from the developer''s workstation to
    manipulate information and resources on the Chef server. The `knife` command is
    never used on a Chef node.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps for Creating a free hosted server Chef account and a Puppet
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://manage.chef.io/signup](https://manage.chef.io/signup).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the details, use a valid e-mail address, and validate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the link in the e-mail to validate your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a password you remember.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Chef organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the *Starter Kit*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Uncompress the Starter Kit somewhere safe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the connection to Hosted Chef using the `knife` command and request,
    for example, the list of the users (this will return you user):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upload the initial `starter` cookbook, still using the `knife` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There''s no hosted Puppet server offering. We need to deploy our own Puppet
    server. To simulate a small infrastructure, we will use Vagrant with Ubuntu boxes
    (for more information about Vagrant, please refer to [Chapter 1](ch01.html "Chapter 1. Vagrant
    Development Environments"), Vagrant Development Environment). Let''s start with
    a single node infrastructure, with only a Puppet server. Here is our Vagrantfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This Vagrant file relies on the `vagrant-hostmaster` plugin. If you don't already
    have it, you will need to install it manually using `vagrant plugin install vagrant-hostmanager`.
    This Vagrant plugin is used to create host entries in `/etc/hosts` in managed
    boxes and in your workstation. A shared folder will be used to edit code directly
    from your workstation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `puppet_master.sh` provisioning script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we are using a bundled Puppet server from the *Puppet Collections*
    repository provided by Puppet Labs. For simplicity and following recipes in this
    chapter, the auto-signing feature has been enabled. This means that when a Puppet
    node is contacting the server for the first time, a CSR is generated on the node
    and the Puppet server automatically signs it: subsequent requests will be authenticated
    and secured.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the shared folder and start Vagrant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We now have an Ubuntu Puppet server listening on `192.168.50.10`, with FQDN
    `puppet.pomes.pro`. A short name puppet is also available, and has been populated
    by the `vagrant-hostmanager` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on your `sudo` configuration, Vagrant may ask you for your password.
    This is requested by the `vagrant-hostmanager` plugin in order to create entries
    in the `/etc/hosts` file of your workstation.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically bootstrapping a Chef client and a Puppet agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we want to do when working with Chef is to get the Chef client
    actually bootstrapped on the targeted remote server. For the Chef client to be
    able to apply Chef code, it first needs to be configured and registered on the
    Chef server. Thankfully, this can be very easily done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A remote server, with a user with SSH access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s say we already have a server running somewhere available with a user.
    The minimal command line we can build is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The IP or FQDN of the host we want to configure (`1.2.3.4`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name under which to register the node on the Chef server (`my_node_hostname`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The username to use to connect to the server (`sudoer` if not root).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Navigate to the Chef repository on your workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s remotely install the Chef client on the remote host from your workstation,
    using an example `vagrant` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will first download the latest available Chef version and install it. Then
    it will execute an initial `chef-client` run to register the node on the Chef
    server under the specified name. Here it will stop.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to run a cookbook right after bootstrap (and we probably want to),
    just use the `-r` option to add cookbooks to the run list, so they are executed
    right away. Let's use the `starter` cookbook we uploaded earlier in this chapter,
    but feel free to use any other cookbook you may have already synchronized on the
    Chef server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Puppet, we need to install the Puppet agent, once our node is created.
    Let''s add a new node into the Vagrantfile we previously used for the Puppet server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there is now another shell script `puppet_node.sh` used for
    the provisioning of this new node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We now also have an Ubuntu Puppet node with FQDN `web.pomes.pro` with IP `192.168.50.11`.
    By default, the Puppet agent is looking for a server named puppet—that's why this
    name has been defined as an alias to the puppet server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Puppet agent has been explicitly stopped; during examples, we will start
    it on demand to see all changes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need some packages for our server. Now our server is configured to use Chef
    and talk to a Chef server, let's install a few packages such as the Apache server,
    PHP, and MariaDB to build a classic LAMP server on a CentOS 7.2 server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install a package on a Red Hat-based system, we''d use either `yum` (until
    CentOS 7) or `dnf` (for Fedora after version 22). As we''re using a CentOS 7 server,
    the Apache2 HTTP server package name is `httpd`, (it''s `apache2` on Debian-based
    systems). Manually, we would have typed the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Let's see how this translates into a repeatable process with a Chef cookbook.
  prefs: []
  type: TYPE_NORMAL
- en: Generating an empty Apache cookbook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start by creating an empty cookbook from inside the Chef repository
    `cookbooks` folder to install Apache2 using the `chef` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to tell Chef to install a package using the `package` resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open that `apache/recipes/default.rb` file and type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s the most basic way we can tell Chef to install a package. This will
    do the `install` action by default. To be a little bit more comprehensive, we
    can use the full block to do the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Uploading the cookbook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Still from inside the Chef repository, we now need to upload this new `apache`
    cookbook to the Chef server, so our servers can access it. To do this, we use
    the `knife` command on our workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We just uploaded our first cookbook on the Chef server!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm the cookbook is available remotely on the Chef server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Applying the cookbook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we have the `apache` cookbook remotely available, let''s tell the Chef
    server that our particular node has to run it. Two options here are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Chef server UI, select the host and click on **Edit** on the **Run
    List** box, then drag and drop the correct cookbook name on the **Current Run
    List** column:![Applying the cookbook](img/B05671_06_01.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From the `knife` CLI on the workstation, run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Either way, we just told the Chef server to apply the `apache` cookbook on
    this particular server. Let''s launch the Chef client on our remote node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Chef just installed the Apache HTTP server package for us! If we launch the
    Chef client, it won''t install it again, as it knows it''s already there (look
    at the largely different execution times):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify if the package is really installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Creating a MariaDB cookbook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s use our knowledge to create a MariaDB cookbook the same way we just
    deployed Apache, from the Chef repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to install two packages: `mariadb` for the client and the libraries,
    and `mariadb-server` for the server. Add the following on the `mariadb/recipes/default.rb`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, as we''re writing plain Ruby, let''s rewrite it in a more idiomatic
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload the cookbook from your workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `mariadb` cookbook to the remote node''s run list from your workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Chef client on the remote host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the MariaDB package is correctly installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Creating a PHP cookbook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s reuse our knowledge to create a cookbook that will install the packages
    needed for PHP support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add our Chef code that will install the following three packages: the
    `php`, `php-cli`, and `php-mysql` packages (respectively for PHP support, command
    line, and PHP/MySQL support) in the `cookbooks/php/recipes/default.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload this new `php` cookbook from your workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `php` cookbook to the remote node''s run list from your workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Chef client on the remote node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We now know the very basics of deploying cookbooks and installing packages on
    a remote node, using Chef!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Puppet, a package installation is done using the `package` resource directive.
    The following example shows how to install an Apache 2.x server on Ubuntu systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To deploy a LAMP server on the box `web.pomes.pro`, we need Apache2, PHP, and
    the MariaDB server. In order to do a real example, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start Vagrant with the Vagrantfile from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go into the `puppetcode` directory, which is the shared folder between your
    workstation and the Puppet server: `cd puppetcode`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are about to create three modules (`apache`, `php`, and `mariadb`), so let''s
    create a minimalist module layout for them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `module/apache/manifests/init.pp` manifest file with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `module/php/manifests/init.pp` manifest file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `module/mariadb/manifests/init.pp` manifest file with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create the main manifest `manifests/site.pp`, with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it! With a few lines of code, all necessary binaries will be installed.
    We can now apply changes, using `puppet agent --test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike what you might think, the `--test` option does apply changes. This option
    is used to test code immediately after a change and implies other options such
    as `--no-daemonize`, `--onetime`, and `--verbose`. If you need to do only a dry-run,
    you can use the `--noop` option combined with `–test`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef `package` resource documentation: [https://docs.chef.io/resource_package.html](https://docs.chef.io/resource_package.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Puppet package resource documentation: [https://docs.puppet.com/puppet/4.8/types/package.html](https://docs.puppet.com/puppet/4.8/types/package.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to install system packages using the `package` resource. In this
    section, you'll discover how to manage system services, using a resource named
    `service`. We'll continue to build the LAMP server we started in the previous
    section by managing the Apache HTTP and MariaDB services right from Chef. This
    way we'll be able to manage any available service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef code from the previous recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The structure of the service resource is very similar to the `package` resource.
    We want to do two actions with our services: **enable** them at boot and **start**
    them right away. This translates into a simple Chef resource with an array of
    actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Enabling and starting Apache service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add this `service` resource to the `apache/recipes/default.rb` file, just after
    the `package` resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Bump the cookbook version number on the `apache/metatada.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: This way, the Chef server will always keep version `0.1.0` with only the package
    installation, and a new version `0.2.0`, with the service support. We'll also
    be able to easily rollback to a previously running version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the Chef client runs, it always downloads and applies the latest version
    by default. It's advised to fix (or pin) versions where appropriate—especially
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upload the new cookbook version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have both versions of the cookbook available on the Chef server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply on the remote host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the Apache service is indeed running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: You can also navigate to the site's IP address in HTTP to see the default page
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling and starting the MariaDB service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Do exactly the same for MariaDB''s `mariadb` service in `mariadb/recipes/default.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to also bump the cookbook version in `mariadb/metadata.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Send the updated cookbook to the Chef server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the new cookbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm the MariaDB service is now running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm we can access the MariaDB server from the node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We've just covered how to handle a system service using Chef, so you now know
    how to easily and repeatedly deploy packages and manage the corresponding service.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Puppet, services are also managed with a dedicated resource directive.
    Using the previous example, we now need to ensure that the corresponding services
    are running.
  prefs: []
  type: TYPE_NORMAL
- en: 'This resource needs to be added on both Apache and MariaDB modules. The new
    manifest for the Apache module is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The new manifest for the MariaDB module is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The `ensure=>running` property is used to check the service is running (and
    will start it if needed), and `enable=>true` is used to start the service at boot.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name of the service used in the service resource is the same as used in
    a root shell to stop/start/reload the service.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef `service` resource documentation: [https://docs.chef.io/resource_service.html](https://docs.chef.io/resource_service.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Chef `metadata.rb` resource documentation: [https://docs.chef.io/config_rb_metadata.html](https://docs.chef.io/config_rb_metadata.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Puppet `service` resource documentation: [https://docs.puppet.com/puppet/4.8/types/service.html](https://docs.puppet.com/puppet/4.8/types/service.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing files, directories, and templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very useful Chef feature is the ability to manage files right from the Chef
    code. Either plain files can be copied or dynamic files can be generated through
    templates. We'll leverage this feature to create an example PHP test file and
    dynamically generate Apache VirtualHosts for our LAMP server, so you'll know how
    to reuse it anywhere else.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, the Chef code from the previous recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll manage two different kinds of files in two different ways: a static
    file and a dynamic file generated from a template, so the most common usage is
    covered.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing a simple static file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s begin by creating a basic PHP file that will only display the `phpinfo()`
    result. This is done using the simple `file` resource with the file path as argument,
    giving its content inline. Other optional properties of the `file` resource include
    ownership information or the file mode. Add a `file` resource to the `php/recipes/default.rb`
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to bump the version in `php/metadata.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload the new cookbook from your workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy using the Chef client on the remote node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: If you now navigate to [http://node-hostname/phpinfo.php](http://node-hostname/phpinfo.php),
    you'll see the PHP information displayed.
  prefs: []
  type: TYPE_NORMAL
- en: This is the most static way of shipping a plain file.
  prefs: []
  type: TYPE_NORMAL
- en: Managing dynamic files and directories from a template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's now create a generic Apache virtual host to fully control what we'll do
    with our LAMP server, and not just live with the default configuration shipped
    with our Linux distribution. We want the website's root folder to be `/var/www/<sitename>`
    and the configuration file will live under `/etc/httpd/conf.d/<sitename>.conf`.
    We'll ship a sample HTML index file as well, to validate we're running the correct
    virtual host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by generating a new recipe in the Apache cookbook using the `chef` command,
    to manage a default Virtual Host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: A new file named `apache/recipes/virtualhost.rb` is now created.
  prefs: []
  type: TYPE_NORMAL
- en: 'To store the name of our virtual host, let''s create an `attribute`. An attribute
    is similar to a persisting node setting, declared in a cookbook in a file under
    the `attribute` directory, and can then be overridden by many mechanisms that
    we''ll later discover. Start by generating an attributes file using the `chef`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a new file under `apache/attributes/default.rb`. To set the
    `sitename` attribute with default value of `defaultsite`, add the following in
    this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a new directory, let''s use a resource named `directory` in the `apache/recipes/virtualhost.rb`
    file, with standard access rights. Note the Ruby `#{node["sitename"]}` syntax
    to access a node attribute from inside a string that will be recurring from now
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s reuse the `file` resource to create a basic `index.html` file with a
    simple string such as `Hello from Chef!` or whatever you find more appealing,
    in the `apache/recipes/virtualhost.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s once again use the `chef` generator to create a new template for our
    Apache virtual host configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This will create a template under `apache/templates/` named `virtuahost.erb`.
    This is a standard **ERB** (short for **Embedded Ruby**) template. This template
    file will contain the virtual host Apache configuration for our site.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by populating the content of this ERB with a minimal Apache configuration
    file, using a new `website` variable that we'll set in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A variable in an ERB template is prefixed with the `@` character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: This way, the whole configuration is dynamic; we'll be able to instantiate this
    cookbook for any site name of our choice and it will be dedicated to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s use the `template` resource to generate a file from the template
    we just created, in the `apache/recipes/virtualhost.rb` file. This resource takes
    a `source` parameter, which is the template file we just created, and the variables
    to be injected. In our case, we want to inject the value of the `sitename` attribute,
    so it can be accessed by the template as `@website`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to bump the cookbook version in `apache/metadata.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload the cookbook to Chef server from the workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the newly-created recipe to the remote node run list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the new cookbook on the remote host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the Apache server manually to take the changes into account (be sure
    we''ll automate that in the next pages):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the served page is the one we added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Good job! We've just covered how to manage files, directories, as well as dynamic
    templates, using pure Ruby code with Chef.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a LAMP server with Puppet, let''s create a virtual host! Our
    goals are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Removing the default virtual host provided by Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our own virtual host, with a specific `DocumentRoot` and dedicated
    log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a simple PHP page displaying the result of the function `phpinfo()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These three operations will be done using the `file` directive.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu, we need to remove the default website in order to have virtual hosting
    up and running. This can be done easily in the Apache manifest; a `file` directive
    for the deletion of `/etc/apache2/site-enabled/000-default.conf` will remove the
    symlink and will disable the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create the code for the virtual host generation. The creation of
    a new virtual host must be done in `/etc/apache2/sites-available`, and will be
    generated from a template. Two languages are available:'
  prefs: []
  type: TYPE_NORMAL
- en: ERB for Embedded Ruby.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EPP for Embedded Puppet (Puppet 4 and higher). Let's choose this one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our EPP template will use two parameters: the site name and the document root.
    Let''s create a `vhost.epp` file in the `modules/apache/templates` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to instantiate this template. The best way is to think about something
    we could reuse as many times as needed (in case we would like to add more sites).
  prefs: []
  type: TYPE_NORMAL
- en: We previously used a class statement, but each `class` in Puppet can be used
    only once per catalog (remember, a catalog is the result of the compilation for
    a node). Fortunately, the `define` statement is used to define a block of code
    that can be used multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s define a file, `module/apache/manifest/vhost.pp` that will use such
    a statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: The website name and the document root are the two parameters for our `apache::vhost`
    statement and are passed to the `epp` function along with the template file name
    in the first `file` directive.
  prefs: []
  type: TYPE_NORMAL
- en: On Ubuntu, to enable a site, a link must be created in `/etc/apache2/site-enabled`;
    the second `file` directive will handle it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to deploy our PHP file under the `DocumentRoot` directory.
    This can be done directly in the main manifest using `file` directives to create
    the `DocumentRoot` directory and the file itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now run the Puppet agent again. For now, we need to restart Apache manually
    in order to have our virtual host running (as for Chef, we''ll automate this in
    the next pages):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Now you should see the phpinfo page on `http://web.pomes.pro`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef documentation on attributes: [https://docs.chef.io/attributes.html](https://docs.chef.io/attributes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Chef documentation on the directory resource: [https://docs.chef.io/resource_directory.html](https://docs.chef.io/resource_directory.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Chef documentation on the file resource: [https://docs.chef.io/resource_file.html](https://docs.chef.io/resource_file.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Chef documentation on the template resource: [https://docs.chef.io/resource_template.html](https://docs.chef.io/resource_template.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Puppet `file` resource documentation: [https://docs.puppet.com/puppet/4.8/types/file.html](https://docs.puppet.com/puppet/4.8/types/file.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using templates with Puppet: [https://docs.puppet.com/puppet/4.8/lang_template.html](https://docs.puppet.com/puppet/4.8/lang_template.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very nifty feature of Chef is the ability to include recipes from one cookbook
    with another. This way, we can create cookbooks with a purpose, like a product
    or an end result. An example of such a cookbook could be an application cookbook
    named *MyCloudApp*, with calls to, or inclusions of, other cookbooks such as Apache,
    MySQL, or any other cookbook it might need.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, we added recipe after recipe to the run list of our host. This is
    not optimal, and less than desirable when managing a lot of nodes. The idea here
    is to create a new cookbook dedicated to an imaginary MySite application, that
    will reference and depend on all the other recipes, so we can only load this MySite
    cookbook and be done with it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, the Chef code from the previous recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We know we want to create a new cookbook named `mysite` so we can centralize
    everything related to making this application work in the same place. Let''s use
    the `chef` command to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'To include a recipe from another cookbook with our default recipe, we''ll use
    the `include_recipe` method in `mysite/recipes/default.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: This is telling Chef to load and execute the content of each recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Chef to know where this is to be found, we need to create a dependency
    to those cookbooks. This is done in the `mysite/metadata.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, our MySite cookbook has a nice dependency graph: to fully work, it needs
    Apache, MariaDB, and PHP. The recipe details what exactly to run.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have a dedicated cookbook for our app, let''s try to add some customization
    to it. Remember the default `sitename` attribute in the `apache` cookbook? Let''s
    override it to match our own value by adding the following at the top of the file,
    just before the apache recipes inclusion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload the cookbook to the Chef server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove previous recipes from our node''s run list using `knife node run_list
    remove <node name> <recipe name>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The node''s run list is now empty. Simply add the new `mysite` cookbook that
    includes everything it needs to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The next Chef client run won't change anything, but it will be much easier to
    manage in the future!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using puppet, a module can be used in other modules. Based on previous examples,
    we could think about a `mysite` module, with the following manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'The main manifest of our node would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef documentation on attributes: [https://docs.chef.io/attributes.html](https://docs.chef.io/attributes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Chef cookbook `metadata.rb` documentation: [https://docs.chef.io/config_rb_metadata.html](https://docs.chef.io/config_rb_metadata.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More dynamic code using notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wouldn't it be great if Chef knew how and what to restart automatically when
    a change arises? In a previous example, we added a new virtual host to our node,
    and we had to manually restart Apache to take the change into account. Luckily,
    there's a mechanism named *notifications* in Chef, that helps trigger an action,
    when a resource changes. This way, changing a virtual host can trigger a restart
    of the Apache HTTP server automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef code from the previous recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start from the `apache` cookbook we''ve left in its 0.3.0 version. Bump
    it right now to `0.4.0` so we''re starting fresh in `apache/metadata.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Every resource can notify another resource to do something when its state changes,
    and any resource can also subscribe to a change of state from another resource.
    In our case, we''d like our `template` resource to notify the `httpd` system service
    to restart when the Virtual Host template changes, so we''re sure the change is
    automatically taken into account. The httpd service is coming from the default
    Apache recipe, so it’s better to include it right now in the `apache/recipes/virtualhost.rb`
    file, so we’re sure this particular recipe works alone and not by side-effect
    of a previous inclusion:'
  prefs: []
  type: TYPE_NORMAL
- en: include_recipe 'apache::default'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `apache/recipes/virtualhost.rb` file, add the following highlighted
    notification section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, actions are *delayed* at the end of the Chef run. If we need an
    action to take place immediately, at the risk of breaking the state of the system,
    we can add the `:immediately` timer at the end of the line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To validate it''s working, we need to change something in our Virtual Host
    template in `apache/templates/virtualhost.erb`. For this example, I simply set
    the local IP the node is listening to, but feel free to adapt to your own case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now upload the updated cookbook (we''ve already bumped it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Chef client on the node and see the magic happen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The cool thing is we can even see a diff of the change in the logs so we always
    know what's changed, as well as see the `httpd` service being reloaded after the
    change happened.
  prefs: []
  type: TYPE_NORMAL
- en: Our system is now perfectly dynamic and can reload its configuration at will
    at every change.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Puppet has exactly the same feature, using the `notify` attribute. When the
    content of `/etc/apache2/sites-enabled` is modified, Apache configuration needs
    to be reloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change our Apache manifest to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache configuration needs to be reloaded when the default vhost is removed,
    so we need to modify `modules/apache/manifests/init.pp` with the corresponding
    `notify` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'The same logic applies for the virtual host creation (`modules/apache/manifests/vhost.pp`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to run the Puppet agent on fresh Vagrant boxes, we will see that
    the two modifications will schedule a configuration reload, that will be done
    at the end of the Puppet Agent run. (refer to the lines with `Scheduling refresh
    of Service[apache2]` and `Triggered ''refresh'' from 2 events`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Now we can access the phpinfo page at `http://web.pomes.pro` without manually
    restarting Apache.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef documentation for notifications: [https://docs.chef.io/resource_common.html#notifications](https://docs.chef.io/resource_common.html#notifications)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Chef documentation for subscribes: [https://docs.chef.io/resource_common.html#subscribes](https://docs.chef.io/resource_common.html#subscribes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Puppet notify resource documentation: [https://docs.puppet.com/puppet/4.8/types/notify.html](https://docs.puppet.com/puppet/4.8/types/notify.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centrally sharing data using a Chef data bag and Hiera with Puppet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have the basics of our LAMP infrastructure up and running, let's secure
    it a little by creating an `htaccess` file with a few authorized users in it.
    To achieve this, we could use different techniques, but the *data bag* feature
    in Chef is pretty convenient for our objective. A data bag is simply data in a
    JSON file stored on the Chef server, that can be searched from the cookbooks.
    It's especially useful for storing data that need to be accessed globally from
    a central point (such as users, service credentials, version numbers, URLs, even
    feature flags, and other similar features depending on your usage).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef code from the previous recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our objective is to create two users—John and Mary. Here''s a table of the
    required information:'
  prefs: []
  type: TYPE_NORMAL
- en: '| User | Password | Hash |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| John | `p4ssw0rd` | `$apr1$AUI2Y5pj$0v0PaSlLfc6QxZx1Vx5Se` |'
  prefs: []
  type: TYPE_TB
- en: '| Mary | `s3cur3` | `$apr1$eR7H0C5r$OrhOQUTXfUEIdvWyeGGGy/` |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To generate the encrypted passwords, you can use the simple `htpasswd` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to store that piece of information (username and password), inside
    a single entity: this is the data bag. Let''s name it `webusers`, and we''ll store
    our users under this directory.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create this directory inside our Chef repository for our revision control
    system (RCS, like git):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create the data bag entry on the Chef server, use the following `knife`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As we know, an entry is simple JSON structured data. Let''s write the content
    of our data bag for our user John, in `data_bags/webusers/john.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's do the same for Mary in `data_bags/webusers/mary.json`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s send this data on the Chef server using the `knife` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can see the current entries in the data bag using the knife command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Now the data is globally available from the Chef server, how do we access it
    dynamically from inside our code? This is where the `search` feature in Chef is
    useful to create dynamically generated content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting any work in the `mysite` cookbook, let''s bump the version
    in `mysite/metadata.rb` so we''re sure not to break anything:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a new recipe named `htaccess.rb` under the `mysite` cookbook
    so we can create both the `htaccess` file under `/etc/httpd/htaccess` (this is
    an arbitrary location, adaptable to your needs) and the Apache configuration file
    under the web root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To have our entries automatically populated in the `htaccess` file, we''ll
    have to iterate through all existing entries. This is done using the `search`
    in Chef, specifying the data bag, and the scope to search (in our case, everything).
    This is simply added in the `mysite/recipes/htaccess.rb` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This variable, `users`, will then be passed to the template file to generate
    the content, like we did previously—except this time we have multiple entries,
    not just one. We''re using the `htpasswd.erb` file as a source, that we''ll create
    in a moment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a new template for the `htpasswd` file, using the `chef` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside this ERB file in `mysite/templates/htpasswd.erb`, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `.each` method loops around the `users` variable that we passed through
    the template, iterates on `user`, and extracts our two values of interest: `id`
    and `htpasswd`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'While we''re at it, let''s create the template for the `.htaccess` file under
    our web root folder:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Its content is the most basic we can find:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There's currently no variable in this template. As I know, files most often
    end up being dynamic, I always prefer to start them as templates, even if content
    is currently static. It's very likely that in the near future we'll want to use
    a variable for `AuthUserFile`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Back to our `mysite/recipes/htaccess.rb` recipe, let''s add the template we
    just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Don''t forget the last step: we have to call this new recipe from our main,
    `default.rb` recipe! In `mysite/recipes/default.rb`, include our new recipe, so
    it gets picked up by the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Just upload the new version of the cookbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: After you've run `chef-client` on your node, the site will be protected and
    users `mary` and `john` will be able to use basic HTTP authentication.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Puppet, we can do it using Hiera. Hiera can be seen as datastore keeping
    site information out of manifests. Hiera can be customized in the way data is
    stored, but this will be out of the scope of this chapter; we will use default
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to define the data in Hiera. This will be done by creating
    `web.pomes.pro.yaml` in the Hiera tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: This file now contains an array of hashes for authorized users, for the node
    `web.pomes.pro`.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the main manifest, we need to look up our Hiera data using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s easy to generate the password file using a new `apache::htpasswd`
    `define` statement, that we need to create in `modules/apache/manifests/htpasswd.pp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'For the corresponding template, this time, let''s try an ERB template in `modules/apache/templates/htpasswd.erb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'From the main manifest, we can now create the password file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to create a `.htaccess` file. Let''s create a new `apache::htaccess`
    statement in `modules/apache/manifests/htaccess.pp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated template in `modules/apache/templates/htaccess.erb` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'From the main manifest, we can now create the `.htaccess` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, here is the main manifest of the `web.pomes.pro` node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: After running the Puppet agent, `http://web.pomes.pro` will now ask you for
    a login/password.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef documentation on data bags: [https://docs.chef.io/data_bags.html](https://docs.chef.io/data_bags.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Puppet Hiera: [https://docs.puppet.com/hiera/3.2/](https://docs.puppet.com/hiera/3.2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating functional roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have created cookbooks based on a particular technology. We created
    a cookbook for MariaDB, one for Apache HTTPd, and one for our app (including all
    the dependencies). What about the role of each of those infrastructure elements?
    A *database* role can include what is now running our database (MariaDB), but
    maybe tomorrow it can run something else (migrate back to MySQL, or switch to
    PostgreSQL). As roles in Chef have a dedicated run list, it's common to see a
    role include the product recipes, and everything related to it, think monitoring
    for example. Roles can do a lot more, like overriding attributes or have different
    run lists for each environment. Here, we'll create two generic *database* and
    *webserver* roles that might be simply reused later for another project that just
    need those services and a *mysite* role, that will include the two other roles.
    A role can include other roles as well as recipes. This way, the role for mysite
    will be enough to run our infrastructure, from a functional point of view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef code from the previous recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps for creating functional roles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write roles in plain JSON or in Ruby. Let''s try Ruby for our `webserver`
    role in `roles/webserver.rb`. It requires a name, a description, and a run list.
    That''s the bare minimum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s do the same for our `database` role; we currently want to use our `mariadb`
    cookbook. So let''s write it in `roles/database.rb`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let''s write the `mysite` role, that will include a webserver, a database,
    as well as its own cookbook, in `roles/mysite.rb`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the roles to the Chef server using the `knife` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, either edit your current node''s run list (if you have one) to use only
    this role (`role[mysite]`), or if you''re about to bootstrap the server; adding
    the `-r "role[mysite]"` option will bootstrap Chef on the node as well as execute
    Chef with this run list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We'll now be free to add more complex features to our role in the future!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Puppet does not provide a role feature. However, this can be done by adding
    a level of abstraction using the *role and profile* design pattern. In this pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: A *role* is a class defining a behavior (For example, a web server). This class
    needs to include all needed *profiles* to create the role.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *profile* is a class used to manage the underlying technology (For example,
    by installing Apache)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the main manifest, nodes are only using *roles*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using this pattern, it is easier to refactor only *profiles* classes when the
    technology needs to be changed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef documentation on roles: [https://docs.chef.io/roles.html](https://docs.chef.io/roles.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing external Chef cookbooks and Puppet modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up till now, we''ve written our own cookbooks, which are fairly simple in their
    current state. Chances are, we''ll expect a lot more complicated setups in our
    real life infrastructure. To help us, there''re two kinds of external cookbooks
    we can use: community-backed cookbooks and *official* cookbooks, written and maintained
    by the Chef team directly. To browse available cookbooks, navigate to the Chef
    Supermarket (think of it as a store for cookbooks): [https://supermarket.chef.io/](https://supermarket.chef.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: The thing is, our life will become increasingly complicated with all those cookbooks
    downloaded here and there, each of them having dependencies of their own. Fortunately,
    the Chef DK ships with a superb utility for this use case—Berkshelf.
  prefs: []
  type: TYPE_NORMAL
- en: Berkshelf allows us to declare cookbook dependencies, versions and locations
    in a single file, and in a single command, upload everything needed to run our
    cookbook.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll migrate away from our distribution's MariaDB default
    and unconfigured package, to a fully configured MySQL 5.7—and that workflow is
    pretty close to everyday life using Chef in production.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Chef DK installation on the workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working Chef client configuration on the remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chef code from the previous recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by discovering how Berkshelf works. Under the `cookbooks/mysite/`
    directory, we find a file named `Berksfile` (if you didn''t create the cookbook
    with the `chef` utility, create the file manually). As Berkshelf works per cookbook,
    we''ll declare all our cookbook dependencies to run this particular cookbook here,
    which in our case, happens to be currently all local. In this `Berksfile`, enter
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells us three important things:'
  prefs: []
  type: TYPE_NORMAL
- en: Where to find unknown cookbooks (on the official supermarket, we can replace
    with our own internal supermarket if we run one)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Where to find dependencies: in our cookbook''s metadata file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Where each of those cookbooks reside: in our case, the local relative path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bump the `mysite` cookbook version in `metadata.rb` so we don''t mess with
    our previous work, and, from the `mysite` cookbook directory, upload all our cookbook''s
    dependencies at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Now we start to realize how faster it is than manual uploading all the cookbooks
    one by one!
  prefs: []
  type: TYPE_NORMAL
- en: Using the official MySQL cookbook and its dependencies with Berkshelf
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we already know, we didn''t make any special configuration with MariaDB;
    we just installed it from our distribution''s repositories. This needs to change!
    We want a full-fledged MySQL deployment. Looking at the Chef Supermarket, we notice
    an official MySQL cookbook maintained by the Chef team, currently at version 8.0.4:
    [https://supermarket.chef.io/cookbooks/mysql](https://supermarket.chef.io/cookbooks/mysql).
    It seems to do wonders; there are many configuration options, and many other things.
    Pages and pages of tested, reliable code ready to use! Good.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By reading the README file, it is stated that it needs two other cookbooks
    as dependencies—`selinux` and `yum-mysql-community`. The first one to work around
    SELinux temporarily, and the second one to manage the official MySQL community
    repository for RHEL. We could solve those dependencies by hand, but we have a
    better idea: use the `Berksfile`!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by replacing our dependency on our own `mariadb` cookbook with
    this cookbook, in `mysite/Berksfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: This way, we ensure we'll ever only run this particular cookbook version (8.0.4)
    and not a new one that might break things in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then add the following two dependencies from the `mysql` cookbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, we declared a dependency on any version of the `selinux` cookbook,
    the latest being the default, and a loose constraint on any minor revision of
    the `yum-mysql-community` 1.0 cookbook.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the cookbooks `mysite/metadata.rb` file, do the same and replace the `mariadb`
    dependency with the three new ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `berks` command from inside the cookbook directory to grab the new
    cookbook dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Great! It automatically downloaded our dependencies. Upload them all now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s now create a new recipe named `mysql` under our `mysite` cookbook, so
    we can deploy the MySQL we need for our application. In our case, we want the
    latest and greatest MySQL 5.7 with the admin password: `super_secure_password`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by bumping the cookbook''s version in `metadata.rb` to a minor version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now generate the new `mysql` recipe so we can use it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the newly-created `mysite/recipes/mysql.rb` file, start by including the
    new recipes described as needed by the documentation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, still following the documentation, just add the following block to fully
    deploy MySQL 5.7 on the default port (TCP/`3306`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: What happened here is that the official `mysql` cookbook didn't make anything
    inside the cookbooks. It, in fact, extended Chef functionalities by offering a
    `mysql_service` resource. In Chefspeak, it is called **LWRP** (**Lightweight Resources
    and Providers**).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, remove the reference to the `mariadb` recipe from the default `mysite`
    recipe in `mysite/recipe/default.rb`, and replace it with a call to the new `mysql`
    recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Including dependencies in a role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To fully match our environment with what we just did in the cookbook, let''s
    remove the call to the old `mariadb` cookbook from the `database` role, and as
    there''s no recipe to call (as we said, this cookbook is just extending Chef functionality),
    let''s instead add the two cookbook dependencies as stated in the documentation
    in `roles/database.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload the updated role using the `knife` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Our node running the `mysite` role, calling the database role will be alright.
    If we did choose to run only nodes with a call to the `mysite::default` recipe,
    it will also work.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading cookbook dependencies using Berkshelf
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now navigate to the `mysite` cookbook directory and use the `upload` feature
    from Berkshelf, so it will upload all necessary cookbooks at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With Berkshelf, dependencies of the dependencies are uploaded as well!
  prefs: []
  type: TYPE_NORMAL
- en: Testing MySQL deployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Run the chef-client on the node, and when the process is done, ensure we can
    connect to the local MySQL server using the supplied password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With Puppet, there is also a lot of code ready to use. We can use modules from
    Puppet Forge or GitHub for example. Modules hosted on Puppet Forge can be searched
    using the `puppet module search` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'We can install one of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: By default, installation is done in a hidden folder under the home directory.
    We can see that the MySQL module from Puppet Labs depends on two other modules.
  prefs: []
  type: TYPE_NORMAL
- en: Several tools can be used to manage packages; r10k is one of them. It can also
    manage environments (such as staging, development, production), but we will focus
    on package management in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need is to install r10k. In previous examples, we edited
    code directly on our workstation in a shared folder used by Vagrant, so we need
    to install r10k directly on our workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'r10k is using a file named `Puppetfile` in which we declare all necessary modules.
    Here is an example of `Puppetfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately at the time of writing, r10k does not support dependencies, so
    we need to discover and add them in the `Puppetfile`. We can discover dependencies
    manually by installing modules using `puppet module install` as we did earlier.
    However, this is not very handy, and fortunately we can use external tools such
    as [https://github.com/rnelson0/puppet-generate-puppetfile](https://github.com/rnelson0/puppet-generate-puppetfile).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'So now, let''s discover dependencies for the Puppet Labs MySQL module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: We now have all dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Now suppose we want to use our previous example, using the code we made for
    Apache, and the official Puppet Labs MySQL package.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, let''s adjust the `Puppetfile` in order to download the official
    Mysql module from Puppet Labs and keep our existing modules. We need to inform
    r10k which modules are *local*. If we don''t, r10k will perform a complete installation
    after removing all the content in the modules directory. Here is the `Puppetfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to run r10k to install packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify the main manifest to use the official MySQL package; we need
    to remove the reference to our MariaDB module, and use the class provided by the
    official MySQL package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start a fresh Vagrant setup. After applying Puppet, we can now use the
    MySQL server with the root credentials we specified in the main manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: If needed, you can browse the online documentation of this module to create
    custom databases and grants.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Chef documentation on roles: [https://docs.chef.io/roles.html](https://docs.chef.io/roles.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Chef Supermarket: [https://supermarket.chef.io/](https://supermarket.chef.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Berkshelf documentation: [http://berkshelf.com/](http://berkshelf.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL cookbook source on GitHub: [https://github.com/chef-cookbooks/mysql](https://github.com/chef-cookbooks/mysql)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Puppet r10k: [https://github.com/puppetlabs/r10k](https://github.com/puppetlabs/r10k)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Puppet Labs MySQL module on Puppet Forge: [https://forge.puppet.com/puppetlabs/mysql](https://forge.puppet.com/puppetlabs/mysql)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
