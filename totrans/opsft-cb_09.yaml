- en: Chapter 9. OpenShift for Node.js Developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter presents a number of recipes that will help you get started with
    Node.js web application development on OpenShift. The specific recipes of this
    chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first Node.js application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Node supervisor options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Node.js application dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the use_npm marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling hot deployment for Node.js applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and deploying Express web applications using Node.js and MongoDB cartridges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Web Sockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CoffeeScript with OpenShift Node.js applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js is a server-side JavaScript platform built on top of Google's Chrome
    V8 JavaScript engine that developers can use to write applications. These applications
    can be web applications, command-line utilities, or scripts to automate tasks.
    Node.js is a very popular choice for web application development, as it allows
    web developers to use a single programming language, such as JavaScript, on both
    the client side and the server side. It is suitable for building highly concurrent,
    data-intensive, real-time web applications because of its asynchronous, event-driven,
    non-blocking I/O nature. Node has a small core that provides the basic building
    block APIs to write higher-level frameworks. The developers can then use the web
    frameworks to build their awesome web applications.
  prefs: []
  type: TYPE_NORMAL
- en: There are many web frameworks, such as Express ([http://expressjs.com/](http://expressjs.com/)),
    Sails.js ([http://sailsjs.org/](http://sailsjs.org/)), Restify ([http://mcavage.me/node-restify/](http://mcavage.me/node-restify/)),
    and Geddy ([http://geddyjs.org/](http://geddyjs.org/)), developed by the Node
    community that developers can use for their web applications. Many big tech giants,
    such as LinkedIn, Walmart ([http://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/](http://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/)),
    and Yahoo, are using Node.js for their production applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenShift provides web developers a hosting platform to deploy their Node.js
    web applications. You can run applications built using any of the Node.js web
    frameworks, such as Express or Geddy, on OpenShift. At the time of writing this
    book, OpenShift supports two versions of Node.js—0.6 and 0.10\. The following
    command shows the currently supported Node.js versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Node Version 0.6 cartridge will get deprecated in the future, so you are
    advised not to use it for your web applications. This book will only cover Version
    0.10.
  prefs: []
  type: TYPE_NORMAL
- en: The *Creating your first Node.js application* recipe will walk you through creating
    your first OpenShift Node.js web application. We will look into the template application
    created by OpenShift and then write a simple HTTP server using Node's HTTP module
    and deploy it to OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js web applications are very different from the traditional web applications
    that you might have written so far. The web applications themselves are web servers,
    so you do not need Apache or any other web server to host your web application.
    There are various ways to fire up Node applications, such as using the commands
    `node <app script file>` and `npm start`, `supervisor <app script file>`. OpenShift
    uses a Node module called **node-supervisor** to run your application. The node-supervisor
    module ([https://github.com/isaacs/node-supervisor](https://github.com/isaacs/node-supervisor))
    runs the Node application and watches for any changes. Once it detects changes,
    it restarts the application. In the *Configuring Node supervisor options* recipe,
    you will learn how to customize a few supervisor options to take advantage of
    the hot reloading behavior. The alternative to using supervisor is to use the
    `npm start` command to run Node applications. You can configure OpenShift Node.js
    applications to use `npm start` instead of `supervisor` by using a marker file.
    This will be covered in the *Using the use_npm marker* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Managing Node.js application dependencies* recipe, you will learn how
    OpenShift uses `npm` to install and manage your application dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The example application in this chapter will be developed using the Express
    web framework and MongoDB database. The *Creating and deploying Express web applications
    using Node.js and MongoDB cartridges* recipe will walk you through all the steps
    required to build and deploy Express web applications on OpenShift. All the source
    code for this chapter is available on the OpenShift Cookbook GitHub organization
    ([https://github.com/OpenShift-Cookbook](https://github.com/OpenShift-Cookbook)).
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is very popular for building real-time web applications using Web Sockets.
    In the *Working with Web Sockets* recipe, you will build a simple, real-time application
    using the Node Socket.IO library.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using JavaScript to write Node applications, developers can also
    use CoffeeScript to write their Node applications. CoffeeScript compiles to JavaScript
    and is a popular choice among developers who don't like to use JavaScript. The
    *Using CoffeeScript with OpenShift Node.js applications* recipe will cover this
    in detail.
  prefs: []
  type: TYPE_NORMAL
- en: To run the example applications that you will develop in this chapter on your
    local machine, you will need to install Node on your operating system. You can
    get the latest installer of Node.js for your operating system from the official
    website, [http://nodejs.org/download/](http://nodejs.org/download/). The installer
    will also install npm for you. This chapter will also use the MongoDB database.
    You can get the latest installer of MongoDB for your operating system from their
    official website ([http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)).
  prefs: []
  type: TYPE_NORMAL
- en: This chapter assumes that you are comfortable with Node web development basics,
    OpenShift application basics, and how to work with OpenShift database cartridges.
    If you are not comfortable with these topics, I recommend you first read [Chapter
    3](part0041_split_000.html#page "Chapter 3. Creating and Managing Applications"),
    *Creating and Managing Applications*, and [Chapter 6](part0079_split_000.html#page
    "Chapter 6. Using MongoDB and Third-party Database Cartridges with OpenShift Applications"),
    *Using MongoDB and Third-party Database Cartridges with OpenShift Applications*,
    before continuing with this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first Node.js application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to create your first OpenShift Node.js application
    using the rhc command-line tool. After understanding the template application
    created by OpenShift, you will write a `Hello World` Node.js application using
    Node's HTTP module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete-app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from the official website, [http://nodejs.org/download/](http://nodejs.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create your first OpenShift Node.js application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new command-line terminal, and change the directory to a convenient
    location where you want to create the application. To create a Node.js 0.10 application,
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open your favorite web browser, and go to `http://myapp-{domain-name}.rhcloud.com`
    to view the application. Please replace `{domain-name}` with your OpenShift account
    domain name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The template application created by OpenShift is an Express web framework application.
    You can use your own template application by specifying your public Git repository
    using the `--from-code` option. This was covered in the *Specifying your own template
    Git repository URL* recipe in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications"), *Creating and Managing Applications*. In this recipe,
    you don't need the template code generated by OpenShift, so delete all the files
    and directories created by OpenShift except the `.openshift` directory. On the
    *nix machine, you can use the `rm` command to delete the files as shown in the
    following command. On Windows, you can use file explorer or the command-line equivalent
    to delete these files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new empty file named `server.js` in the application root directory.
    On *nix machines, you can use the `touch` command to create a new file. On Windows
    machines, you can use file explorer to create the new file. Run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the file in your favorite editor, and populate it with the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run the application on your local machine, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To see the application in action, open the `http://127.0.0.1:3000` in your favorite
    browser. You will see the **Hello World!!** message rendered in your browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To deploy the application on OpenShift, commit the code to the local Git repository,
    and then push the changes to the application gear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After successful deployment, open the `http://myapp-{domain-name}.rhcloud.com`
    in your favorite browser. The browser will render **Hello World!!**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous steps, you created a `Hello World` Node.js application from
    scratch and deployed it on OpenShift. The `Hello World` application that you wrote
    in the aforementioned steps is no different from the one you will write if you
    want to run this application on your local machine or elsewhere. There is no OpenShift-specific
    apart from the environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 1, you created an OpenShift Node.js 0.10 application using the rhc
    command-line tool. The `rhc create-app` command will make an HTTP POST request
    to the OpenShift broker. The OpenShift broker will accept the request and then
    initiate the application creation process. You specified that OpenShift should
    create a Node.js 0.10 application with `myapp` as the application name. OpenShift
    will use these details along with a few defaults to create the `myapp` application.
    The defaults include small gear size, non-scalable application, and using the
    current directory to clone the Git repository. OpenShift behind the scenes did
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift created a new application gear with the Node.js cartridge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It created a private Git repository for your application and populated it with
    a template application. The template application that OpenShift creates is an
    Express web framework application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It installed a Git action hook that will build the application. During the application
    build phase, it will download all the dependencies mentioned in `package.json`
    using the `npm install` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It created a public DNS for your application so that it is accessible from the
    outside world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After successful application creation, you will have the `myapp` directory inside
    the current directory. You can view the application by opening the application
    URL in your browser as mentioned in step 2\. The application creation process
    was explained in detail in the *Creating an OpenShift application using the rhc
    command-line client* recipe in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications"), *Creating and Managing Applications*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the template application created by OpenShift:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The template application has five files—`README.md`, `index.html`, `package.json`,
    `deplist.txt`, and `server.js`—and the `node_modules` directory apart from the
    `.openshift` and `.git` directories. We have already talked about `.openshift`
    and `.git` in the *Creating an OpenShift application using the rhc command-line
    client* recipe in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications"), *Creating and Managing Applications*, so I will not
    cover them here. Let''s talk about the others one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '`README.md`: This is a standard Git repository markdown file where you can
    summarize your project. GitHub uses `README.md` to generate the HTML summary of
    the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: This file contains the HTML markup that you will see when you
    view the application in the browser. This is an HTML 5 file with Twitter Bootstrap
    styling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This is your Node application descriptor. This is a JSON document
    that contains all the information about your application, such as name, description,
    version, and libraries, that this application depends on. The full documentation
    is available at [https://www.npmjs.org/doc/json.html](https://www.npmjs.org/doc/json.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deplists.txt`: This is a deprecated method to specify application dependencies
    in OpenShift Node.js applications. It is recommended not to use it, as this may
    get removed in the future. This file only exists for backward compatibility so
    that the application that uses it keeps running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server.js`: This file houses the template Express web framework application
    created by OpenShift. This application exposes a couple of routes, `/` and `/asciimo`.
    The `/` route renders `index.html`, and the second route renders an HTML page
    with images. The Express application will be covered in detail in the *Creating
    and deploying Express web applications using Node.js and MongoDB cartridges* recipe,
    so we will not cover it in this recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node_modules`: This directory houses all the application dependencies you
    specify in `package.json`. The `npm install` command will download all the dependencies
    in the `node_modules` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The template application generated by OpenShift is a standard Express web application.
    To run this application on your local machine, you can run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The application will be running at `http://127.0.0.1:8080/`. The previous two
    commands did the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `npm install` command downloads all the dependencies mentioned in the `package.json`
    file. The template application mentions `express` as its dependency, so the `npm
    install` command will download Express and all its transitive dependencies in
    the `node_modules` directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned in the introduction section, in Node, the server and the application
    are the same. So, you used the `node server.js` command to fire up the application's
    server. This starts the HTTP server, and you can start making requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `node server.js` command is one way to fire up the application. The other
    alternatives to start the application are the `npm start` and `supervisor server.js`
    commands. The `npm start` command will run the package start script if one was
    provided. The start script can be mentioned in the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If the `package.json` file does not contain the start script, the `npm start`
    command will use the `node server.js` command as the default start script.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift, by default, does not use the `npm start` or `node <server script>`
    command to run your application. It uses a module called node-supervisor to run
    the application. You can configure OpenShift Node applications to use the `npm
    start` command instead of node-supervisor. This will be covered in the *Using
    the use_npm marker* recipe. The main advantage of using the supervisor is that
    it can restart the application when they crash. Also, you can use the supervisor
    to achieve the hot reloading behavior. It can monitor a set of directories and
    files and restart the application when code changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use node-supervisor on your local machine, you can install the
    node-supervisor module using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now you can start the application using the `supervisor server.js` command.
    This will restart the application every time you make changes to your source code.
    This can be very useful during the development time, as it will save the time
    required to restart the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 3, you deleted the template source code generated by OpenShift so that
    you can write a simple HTTP server from scratch. In step 4, you created a new
    file named `server.js` and populated it with the `Hello World` Node.js code. The
    code listing in step 4 does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You imported the Node HTTP module using the `require()` function. This will
    be used to write the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, you created two variables to hold the IP address and port. If the application
    runs on a local machine, OpenShift-specific environment variables will not be
    available. Hence, the IP and port will be `127.0.0.1` and 3000 respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, you created the HTTP server using the HTTP module `createServer()` function.
    You passed a callback that will be fired whenever a request happens. The callback
    function accepts two arguments—request and response—and writes `Hello World` to
    the response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you instructed the server to listen on the IP and port variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In step 5, you tested the `Hello World` application on the local machine by
    running the `node server.js` command. To deploy the application on OpenShift,
    you committed the code to the local Git repository and pushed the changes to the
    application gear in step 6.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you push the source code to the OpenShift Node.js application Git repository,
    OpenShift will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: First, all the bits are pushed to the application Git repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, if the `package.json` file is present, and this is the first time you
    are pushing the source code, it will download all the dependencies mentioned in
    `package.json`. On every subsequent push, only new dependencies that are already
    not present will be downloaded. All existing node modules will be cached.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift will run the application using one of the three commands mentioned
    in the subsequent list. This will change when the `use_npm` marker file is present
    and will be covered in the *Using the use_npm marker* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `package.json` is not present, OpenShift will run the `supervisor server.js`
    command.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `package.json` is present and the name of the main file in the application
    is `server.js`, OpenShift will run the `supervisor server.js` command. The name
    of the main file is mentioned in the `package.json` main element.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `package.json` is present and the name of the main file in the application
    is something other than `server.js` (like app.js), OpenShift will run the `supervisor
    app.js` command.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As you did not include `package.json`, OpenShift will run the application using
    the `supervisor server.js` command. Once the application is started, you can open
    the application URL in the browser, and you will be greeted with **HelloWorld!!**
    as shown in step 7.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Configuring Node supervisor options* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling hot deployment for Node.js applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing Node.js application dependencies* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Node supervisor options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the *Creating your first Node.js application* recipe, OpenShift
    uses the node-supervisor module to run your programs. In this recipe, you will
    learn how you can configure node-supervisor options. If you have the node-supervisor
    module installed on your machine, you can see all the supported options by running
    the following command. You can install node-supervisor by executing the `npm install
    supervisor -g` command. The help option can be viewed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: OpenShift allows you to configure the node-supervisor watch and poll-interval
    options. The watch option allows you to specify a comma-delimited list of folders
    or JavaScript files that the supervisor watches for changes. The poll-interval
    option allows you to specify how often the supervisor should poll for changes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from the official website, [http://nodejs.org/download/](http://nodejs.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure supervisor options:'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't already have a Node.js application running, create a new application
    by executing the following command. This will create the application you created
    in the *Creating your first Node.js application* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the directory to `myapp`, and create two environment variables to configure
    the supervisor poll interval and directories to watch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `$OPENSHIFT_REPO_DIR` variable with the value of your application''s
    `$OPENSHIFT_REPO_DIR` environment variable. You can get the value of `$OPENSHIFT_REPO_DIR`
    by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the application to allow it to pick the new environment variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The node-supervisor module helps OpenShift to restart Node applications when
    they die. This is very helpful for developers, as they do not have to restart
    the application themselves if applications can recover after restart. Another
    useful feature of node-supervisor is its support for hot reload. You can tell
    node-supervisor to watch directories or files, and when they change, the application
    will be restarted. This gives the hot reloading behavior.
  prefs: []
  type: TYPE_NORMAL
- en: In step 2, you created two environment variables that OpenShift exposes to configure
    the hot reloading behavior. The `OPENSHIFT_NODEJS_WATCH` environment variable
    allows you to specify a comma-delimited list of folders or JavaScript files that
    the supervisor should watch for changes. You told the supervisor to monitor the
    `$OPENSHIFT_REPO_DIR` variable. The `OPENSHIFT_NODEJS_POLL_INTERVAL` environment
    variable allows you to specify in milliseconds how often the supervisor should
    poll for changes. The default value for polling is 10 seconds. You told the supervisor
    to poll `$OPENSHIFT_REPO_DIR` every 60 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'The node-supervisor hot reloading behavior is not suitable for the `git push`
    deployment model but can be useful if you use OpenShift SFTP support ([https://www.openshift.com/blogs/getting-started-with-sftp-and-openshift](https://www.openshift.com/blogs/getting-started-with-sftp-and-openshift)).
    The reason it is not suitable for the `git push` deployment model is that you
    are already pushing the code to application gear, which will update the `$OPENSHIFT_REPO_DIR`
    variable with new code and restart the application. The preferred way to use hot
    deployment with `git push` is by using the `hot_deploy` marker file. This is explained
    in the *Enabling hot deployment for Node.js applications* recipe. To see hot reload
    in action, we will SSH into the application gear and change the source code as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH into the OpenShift application gear using the `rhc ssh` command. Instead
    of SSH, you can also use the SFTP client to connect with the application gear,
    as mentioned in the following blog: [https://www.openshift.com/blogs/using-filezilla-and-sftp-on-windows-with-openshift](https://www.openshift.com/blogs/using-filezilla-and-sftp-on-windows-with-openshift).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once connected, change the directory to the `app-root/repo` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `server.js` file using `vim` and change `"Hello World!!"` to `"Hello
    OpenShift User!!"` and save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next polling cycle, the supervisor will detect the change and restart
    the application. You can view your change by opening the application URL in your
    favorite browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating your first Node.js application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling hot deployment for Node.js applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing Node.js application dependencies* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Node.js application dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, you didn't have to use any third-party library. The
    applications that you developed were simple `Hello World` applications that didn't
    require any third-party library to do their work. In real applications, you have
    to use libraries written by others. Node makes it very easy for developers to
    consume third-party libraries using npm. npm is the package manager for Node.js
    that comes bundled with Node. It is a command-line tool that allows you to publish
    new modules, downloads existing modules from the npm registry, and installs third-party
    modules. In this recipe, you will write another simple application, but that will
    use the Express framework. The goal of the recipe was to introduce you to the
    Node dependency management without getting bogged down by the application details.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from the official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, you will create a `Hello World` Express framework web application
    from scratch. Perform the following steps to create the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recreate the application created in the *Creating your first Node.js application*
    recipe by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file in the application root directory named `package.json`. The
    `package.json` file is an application descriptor file that you can use to define
    application metadata and its dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The application will use the Express web framework, so install the express
    dependency using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will download the Express framework module and its dependencies in the
    `node_modules` directory and populate the `package.json` file with express dependency,
    as shown in the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the code in `server.js` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `node_modules` directory to the `.gitignore` file. We are adding the
    `node_modules` directory to `.gitignore` to allow OpenShift to download all the
    dependencies using npm. If you don''t add `node_modules` to `.gitignore`, OpenShift
    will not download the dependencies but use dependencies from your `node_modules`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit the code, and push the changes to the application gear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the application is successfully built and deployed, you will see the application
    running at `http://myapp-{domain-name}.rhcloud.comhttp://myapp-{domain-name}.rhcloud.com`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the *Creating your first Node.js application* recipe, I mentioned that when
    you push the changes to the OpenShift application gear, OpenShift checks for the
    existence of the `package.json` file. If the `package.json` file exists, OpenShift
    uses the value of the main field as the primary entry point to your application.
    As you didn''t define the main field in `package.json`, OpenShift will use `server.js`
    as the default entry point. Let''s suppose you renamed the `server.js` to `app.js`.
    Then, to make this run on OpenShift, you will have to create an entry for the
    main field, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating your first Node.js application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the use_npm marker* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the use_npm marker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenShift uses the node-supervisor module to run your Node apps, but you can
    also tell OpenShift to use the `npm start` command to run the application. In
    this recipe, you will learn how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from their official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to use the `npm start` command to run your applications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new command-line terminal, and recreate the application you created
    in the *Managing Node.js application dependencies* recipe as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a marker file named `use_npm` inside the `.openshift/markers` directory.
    On the *nix machine, you can use the `touch` command as shown in the following
    code. On Windows, you can use file explorer to create an empty file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit the code, and push the changes to the application gear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `git push` logs will clearly mention that the application is started using
    the `npm start` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 1, you created an Express framework web application that we created
    in the *Managing Node.js application dependencies* recipe. The application just
    has two files—`server.js` and `package.json`. The `server.js` file contains the
    application source code, and `package.json` contains the application metadata
    and its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in step 2, you created a marker file, `use_npm`. The presence of the
    `use_npm` marker file tells OpenShift that you want to use the `npm start` command
    to run the application instead of the `node-supervisor` module. The `npm start`
    command gives developers more flexibility to run their applications. It allows
    developers to specify their own start script in `package.json`, which OpenShift
    will use to run their application. The `package.json` is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the previous listing, it does not mention any start script.
    When there is no start script in the `package.json` file, OpenShift will fall
    back to `node server.js` as the start script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This is the reason the application successfully started in step 4 after `git
    push`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s suppose that you want to rename `server.js` to `app.js`. If you
    commit the source code now and push the changes, the application will fail to
    start. You will see the following message in the `git push` logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To make this application run again, you have to specify the start script as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating and deploying Express web applications using Node.js and MongoDB
    cartridges* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing Node.js application dependencies* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling hot deployment for Node.js applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how you can enable hot deployment for Node.js
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to enable hot deployment for your application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Node.js application using the source code developed in the previous
    recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To enable hot deployment, create an empty file named `hot_deploy` under the
    `.openshift/markers` directory. This file is called the marker file, as this does
    not contain any content. On the *nix machine, you can use the `touch` command
    to create the file. On Windows, you can use file explorer to create a new file.
    If you are not in the `myapp` directory, first change directory to `myapp`. Have
    a look at the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the file to the Git index, commit the file to the local Git repository,
    and then push changes to the application gear by typing the commands as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `git push` logs, you will see a message that cartridges are not stopped
    because hot deployment is enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every time you make a change and push it to the OpenShift application gear,
    OpenShift first stops your gear (that is, all cartridges), copies the source code
    from your application Git repo to `app-root/runtime/repo`, performs a build, prepares
    the artifact, and finally starts your gear (that is, all cartridges). This process
    takes time and does not suit rapid development and deployment. To enable rapid
    development and faster deployments, OpenShift supports hot deployment. Hot deployment
    means that you can deploy your changes without the need to restart all the application
    cartridges.
  prefs: []
  type: TYPE_NORMAL
- en: The presence of the `hot_deploy` marker file informs OpenShift that you want
    to do hot deployment. Before stopping and starting the application cartridges,
    OpenShift checks for the existence of the `hot_deploy` marker file. If the `hot_deploy`
    marker file exists, OpenShift will not stop the cartridges, and changes will be
    deployed without cartridges restart. Hot deployment is ideal for development,
    and I recommend that you always use it during development.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you set new environment variables with hot deployment enabled or install
    new cartridges, you have to restart the application to allow the server to pick
    the new environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating and deploying Express web applications using Node.js and MongoDB
    cartridges* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Configuring Node supervisor options* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and deploying Express web applications using Node.js and MongoDB cartridges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will build a Node.js application from scratch using the
    Express web framework and MongoDB. I have chosen Express because it is very easy
    to use and is a popular web framework in the Node community. You can run any other
    web framework, such as Geddy, on OpenShift as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will develop a job store application that will allow users to post job
    openings for a company. The application will be a single-page web application
    ([http://en.wikipedia.org/wiki/Single-page_application](http://en.wikipedia.org/wiki/Single-page_application))
    built using the Backbone.js ([http://backbonejs.org/](http://backbonejs.org/))
    frontend. The application can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: When a user goes to the `/` URL of the application, the user will see a list
    of companies stored in the MongoDB database. Behind the scenes, the Backbone.js-based
    frontend will make a REST HTTP GET (`'/api/v1/companies'`) call to fetch all the
    companies:![Creating and deploying Express web applications using Node.js and
    MongoDB cartridges](img/00105.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can create a new company by visiting `http://jobstore-{domain-name}.rhcloud.com/#companies/new`
    or by clicking on the **+** icon. This will render a form where users can enter
    details about the new company, as shown in the following screenshot. When a user
    submits the form, the Backbone.js-based frontend will make an HTTP POST call to
    the REST backend and data related to a company is stored in MongoDB:![Creating
    and deploying Express web applications using Node.js and MongoDB cartridges](img/00106.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a user clicks on any company, they will see a list of job openings for
    that company. Behind the scenes, the Backbone.js-based frontend will make an HTTP
    GET (`'/api/v1/companies/company_id/jobs'`) call to fetch all the available jobs
    for the selected company using its ID. Have a look at the following screenshot:![Creating
    and deploying Express web applications using Node.js and MongoDB cartridges](img/00107.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can post new jobs for a company by clicking on the **New Job** link. This
    will render a web form where users can enter their details. The Backbone.js-based
    frontend will make an HTTP POST call to the REST backend and data related to a
    job is stored in the MongoDB database:![Creating and deploying Express web applications
    using Node.js and MongoDB cartridges](img/00108.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code for the application is available on GitHub at [https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node and MongoDB installed on your machine. You can get the latest installer
    of Node.js for your operating system from their official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
    You can get the latest installer of MongoDB for your operating system from their
    official website ([http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new command-line terminal, and navigate to a convenient location where
    you want to create the application. Run the command shown as follows to create
    the job store application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will create an application named `jobstore` that uses Node.js and
    MongoDB cartridges.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As the application will be built from scratch, we will delete the template source
    code generated by OpenShift. Change the directory to `jobstore`, and delete the
    following files and directories using the `rm` command on *nix machines. On Windows,
    you can use file explorer to delete the files and directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `node_modules` directory to the `.gitignore` file by executing the
    following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Express team provides a project generator that you can use to create an
    Express template application. This generator will create an application skeleton
    using the latest Express version, that is, 4.2.0\. It makes it easy for developers
    to get started with Express application development. You can install the `express-generator`
    package globally by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please make sure you install express-generator Version 4.2.0 or above. This
    recipe was written using express-generator Version 4.2.0\. You can check the version
    by typing the `express --version` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the generator is installed globally, you can use the `express` command-line
    tool to generate projects anywhere on your machine. Please make sure you are in
    the `jobstore` directory, and create the project by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run this application on your local machine, you will have to first install
    all the dependencies using npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, to run the application, use the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can view the application in your favorite browser by visiting `http://127.0.0.1:3000/`.
    The generated application exposes two routes as specified in `app.js`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When a user makes a GET request to `/`, the index route callback, `routes`,
    is invoked. The `routes` callback is defined in `routes/index.js`. The callback
    renders the `index.ejs` view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When a user makes a HTTP GET request to '/users', the users callback function
    is invoked. The default implementation just writes `respond with a resource` in
    the response body.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In our single-page web application, when a user makes an HTTP GET request to
    the application root URL, the Backbone.js-based frontend is rendered. Replace
    the content of `index.ejs` with `index.js` in the project's GitHub repository,
    [https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/blob/master/views/index.ejs](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/blob/master/views/index.ejs).
    Also, copy the `css` ([https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/css](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/css))
    and `js` ([https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/js](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/js))
    directory from the application's GitHub repository, [https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express),
    and place them inside the public directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the application, and you will see the index route in action. This time
    it will render the application user interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The application does not need the `users.js` file in the `routes` directory,
    so delete it. After removing `routes/users.js`, remove its reference in the `app.js`
    file. You need to remove the following two lines from the `app.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file named `api.js` inside the `routes` directory. This file will
    house the REST backend of our application. On *nix machines, you can create a
    new file using the `touch` command. On Windows, you can use file explorer to create
    the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The application will use the MongoDB database for storing data. To work with
    MongoDB, you need to use a third-party library. For this application, you will
    use the `mongojs` module. Install the module using the npm command, as shown in
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is configuring the MongoDB database so that our REST API can
    talk with MongoDB. Place the following code in `api.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As mentioned in this recipe introduction, there are two company-related operations—get
    all companies and store a company in the MongoDB database. These will be exposed
    as two routes in the `app.js` file, as shown in the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the HTTP GET request is made to `/api/v1/companies`, the `api.companies`
    callback will be called. The `api.companies` callback is defined in the `api.js`
    route file. This callback will make a `find` call on the `companies` collection.
    It will find all the companies in the MongoDB database and write them to the response
    object. Have a look at the following commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, when the HTTP POST request is made to the `/api/v1/companies` URL,
    the `api.saveCompany` callback will be called. The `api.saveCompany` callback
    is defined in the `api.js` route file. The callback will create a `company` object
    from the request object and then persist the `company` object in the MongoDB database:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you will write REST endpoints to store and list the jobs data. There
    are two REST endpoints related to jobs—listing all jobs for a company and saving
    a job for a company. These will be exposed as two routes in `app.js`. Have a look
    at the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the HTTP GET request is made to `/api/v1/companies/:companyId/jobs`, the
    `jobsForCompany` callback will be called. This callback will find the company
    corresponding to `companyId` and then return the jobs embedded in the array:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When a user makes the HTTP POST request to `/api/v1/companies/:companyId/jobs`,
    the `postJobForCompany` callback function will be called. This callback will be
    defined in the `api.js` routes file. This route will update the company document
    with the embedded job document. Finally, it will return the updated company document:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test the application on your local machine, start the MongoDB database server,
    and then restart the Node application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make this application run on OpenShift, you have to update the `bin/www`
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code sets the correct IP address and port values so that the application
    can work on OpenShift.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `node_modules` directory to the `.gitignore` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `package.json` main field value. This is required, because, otherwise,
    OpenShift will look for the `server.js` file. As this application does not have
    a `server.js` file, the application will not start. This was explained in the
    *Creating your first Node.js application* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the changes to the Git index, commit the code to the local Git repository,
    and then finally push the changes to the application gear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a successful build, changes will be deployed, and your application will
    be available at `http://jobstore-{domain-name}.rhcloud.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's now understand what we did in the previous steps. In step 3, you installed
    the **express-generator** module. In the previous version of Express, express-generator
    package was part of the Express module itself. Now, in the latest versions, you
    will have to install express-generator separately. This recipe was written using
    4.2.0\. This module is installed globally using the `-g` option to run the Express
    executable from any directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in step 4, you generated the project inside the `jobstore` directory
    using the `express . --ejs --force` command. The command instructs Express to
    create the template in the current directory. The `--ejs` option tells Express
    to configure the app with the `ejs` template engine. Express supports almost all
    the template engines built for Node, but express-generator only supports `hogan`,
    `jade`, and `ejs`. The `--force` option instructs Express to forcefully create
    the project template inside a non-empty directory. If you don''t use the `--force`
    option, the generator will ask you for confirmation, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The `express` command generates a folder structure suitable for the Express
    web development as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The `package.json` file is an application descriptor file based on CommonJS
    ([http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS)).
    It contains application metadata and its dependencies. The `npm install` command
    parses the dependencies mentioned in `package.json` and installs them in the `node_modules`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `app.js` file configures the Express framework along with Connect middleware
    components. The application server startup boilerplate is defined inside the `bin/www`
    script. This is a Node script that creates an Express web server and binds it
    to a 3000 port number. To run the application, you can use either the `./bin/www`
    or `npm start` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Express command creates three other subdirectories apart from `bin`—`public`,
    `routes`, and `views`. The `public` directory houses all the static resources
    of the application. The `app.js` file configures the Express application to use
    the `public` directory for static files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: In step 6, you copied the `css` and `js` directories from the project's GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: The `routes` directory has two files—`index.js` and `users.js`. Both these files
    are used by `app.js`. These files define callbacks that will be invoked when the
    user makes requests to the `http://jobstore-{domain-name}.rhcloud.com` and `http://jobstore-{domain-name}.rhcloud.com/users`
    URLs.
  prefs: []
  type: TYPE_NORMAL
- en: The `views` directory holds the template files that will be shown to the user.
    In step 6, you updated `index.ejs` with the one from the project's GitHub repository.
    As mentioned before, the view of the application is built using Backbone.js and
    will not be covered as it is outside the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: From steps 7 through step 12, you defined the REST backend for the application.
    The application exposes a REST call backed by the MongoDB database, which is consumed
    by the Backbone.js frontend. You created a new file named `api.js` to define all
    the API callbacks. You installed the `mongojs` package so that you can work with
    the MongoDB database. You defined four methods in `api.js`—`companies`, `saveCompany`,
    `jobsForCompany`, and `postJobForCompany`. All the methods work on the MongoDB
    database asynchronously and write the database result to the response object.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app.js`, you defined four routes for the REST endpoints. The callbacks
    are defined in `api.js` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: After writing the backend logic, you updated the `bin/www` script so that it
    can bind and listen to the correct IP address and port when running on OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you committed the code and pushed the changes to the application gear.
    This will download all the dependencies mentioned in the `node_modules` directory
    and then restart the application with the updated code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating your first Node.js application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling hot deployment for Node.js applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Web Sockets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Web Sockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP was designed to be half-duplex, which means it allows transmission of data
    in just one direction at a time. This makes it unsuitable for building real-time
    applications that need an open, persistent connection always. To overcome this
    limitation of HTTP, developers have created some workarounds or hacks. Some of
    these workarounds are polling, long polling, and streaming.
  prefs: []
  type: TYPE_NORMAL
- en: Web Sockets provide an asynchronous, bidirectional, full-duplex messaging implementation
    over a single TCP connection. In this recipe, you will learn how you can use Socket.IO
    and Express to create a simple echo application. The application simply reverses
    the message and echoes it back to the user browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from their official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an application that uses Web Sockets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new command-line terminal, and navigate to a convenient location where
    you want to create the application. Run the following command to create the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the directory to `reverseecho`, and delete the template application
    source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `node_modules` directory to the `.gitignore` file by executing the
    following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `express` and `socket.io` modules as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new file named `server.js` in the app root directory and populate
    it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this code, you first created the Express server application instance. Then,
    you imported the Socket.IO library and started the Socket.IO server, providing
    it with the already-created Express server so that it can share the same TCP/IP
    address and port. You defined a couple of event listeners using the `io.sockets.on()`
    function. The `io.sockets.on()` function takes two arguments—the event name and
    a callback function. The event name can be any string, such as `'connection'`
    and `'message'`. The callback function defines work to perform when an event is
    received.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create `index.html` in the `app` root directory, and populate it with the following
    code. This page has one textbox where the user can enter any text and submit it
    to the server by pressing a button. The data is transferred to the server using
    Web Sockets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This JavaScript code in the `index.html` file opens a Web Socket connection
    with the backend Node server deployed on OpenShift. In OpenShift, Web Sockets
    are not available over standard 80 and 443 ports because of the reasons outlined
    in the official OpenShift blog, [https://www.openshift.com/blogs/paas-websockets](https://www.openshift.com/blogs/paas-websockets),
    so you will have to use port numbers 8000 and 8443.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the code to the Git index, commit the code to the local Git repository,
    and then finally push the changes to the application gear by executing the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the code is deployed, you can see the application running at `http://reverseecho-{domain-name}.rhcloud.com`.
    If you type `OpenShift` and click on the **Reverse Echo** button, you will see
    **tfihSnepO** as the result. This is shown in the following screenshot:![How to
    do it…](img/00109.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous steps, you built an echo server that will reverse the message
    sent by the user and send it back to the user. To build this application, you
    installed two modules —Socket.IO and Express as covered in step 3\. Socket.IO
    provides an API abstraction over the Web Sockets and other transports for the
    Node.js and client-side JavaScript. It will fall back to other alternatives transparently
    if Web Sockets is not implemented in a web browser while keeping the same API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code listing shown in step 4 does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It first imports the Express library using the `require()` function and then
    creates the server using the Express application object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, it imports the Socket.IO library and starts the Socket.IO server using
    the `listen()` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, you defined a route for the root URL, which will render `index.html` (created
    in the next step).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, you added event handlers for connection and message events. On the connection
    event, you will write a message in the server logs. On the message event, you
    will reverse the message and emit the `rev-message` event. The client will listen
    for the `rev-message` event and will render the user interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the listing shown in step 5, you created an `index.html` file using Twitter
    Bootstrap styling. The script tag does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: On page load, you connected with the Web Socket backend using the backend Web
    Socket URL. In OpenShift, Web Sockets are not available over standard 80 and 443
    ports because of the reasons outlined in this blog, so you will have to use port
    numbers 8000 and 8443\. You constructed the correct URL and then connected with
    Socket.IO backend.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You added listeners for the `connect` and `rev-message` events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the `rev-message` event is received, you write the message in `results
    div`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You added a jQuery event listener, which will emit the message event when the
    button is pressed. This message will be received by the Socket.IO server backend,
    and that will emit the `rev-message` event.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In step 7, you committed the code and pushed the changes to the application
    gear. This will download all the dependencies and restart the application with
    the updated code. Finally, in step 8, you tested the reverse echo functionality
    in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating and deploying Express web applications using Node.js and MongoDB
    cartridges* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating your first Node.js application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CoffeeScript with OpenShift Node.js applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last recipe of this chapter, you will learn how to use CoffeeScript with
    OpenShift Node.js applications. You will develop an Express web application in
    CoffeeScript and deploy it to OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from their official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a CoffeeScript Express application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new command-line terminal, and navigate to a convenient location where
    you want to create the application. Run the following command to create the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the directory to `myapp`, and delete the template application source
    code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `node_modules` directory to the `.gitignore` file by executing the
    following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `package.json` file to store your application metadata and dependencies
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install CoffeeScript and Express modules using npm as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new file, `app.coffee`, and place the following contents in it. This
    is the `Hello World` Express web application written in CoffeeScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `use_npm` marker file to tell OpenShift that you want to use the
    `npm start` command to run the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `package.json` file with the start script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This start script makes use of the `coffee` executable in the `node_modules
    .bin` directory. The `node_modules` directory is available inside the `$OPENSHIFT_REPO_DIR`
    directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the code to the Git index, commit the code to the local Git repository,
    and then finally push the changes to the application gear by executing the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CoffeeScript is a programming language that transcompiles to JavaScript. The
    Python programming language inspires the CoffeeScript syntax. As a result, the
    code written using CoffeeScript tends to be clean and readable inspires its syntax.
    Many developers that do not like JavaScript syntax prefer to use CoffeeScript
    to build their Node applications. From steps 1 through 5, you built a `Hello World`
    Express web application in CoffeeScript. To run the CoffeeScript code, you will
    need `coffee` executables from the `coffee-script` package. The `coffee` executable
    is inside the `node_modules/.bin` directory.
  prefs: []
  type: TYPE_NORMAL
- en: To run CoffeeScript applications on the local machine, you can install the `coffee-script`
    module globally using the `npm install coffee-script -g` command. This will install
    the `coffee` executable globally, allowing you to run the `coffee` command anywhere
    on your machine. This does not work with OpenShift. If you push the code after
    step 5, the supervisor will fail to start the application, as it will not be able
    to find the `coffee` executable. The `use_npm` marker can solve this problem.
    As explained in the *Using the use_npm marker* recipe, with the `use_npm` marker,
    you can specify your own start script. OpenShift will use the start script in
    `package.json` to run your application. In step 7, you defined the start script
    that will use the `coffee` executable from the `$OPENSHIFT_REPO_DIR/node_modules/.bin`
    directory to run the application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating and deploying Express web applications using Node.js and MongoDB
    cartridges* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating your first Node.js application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
