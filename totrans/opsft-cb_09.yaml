- en: Chapter 9. OpenShift for Node.js Developers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章：Node.js 开发者的 OpenShift
- en: 'This chapter presents a number of recipes that will help you get started with
    Node.js web application development on OpenShift. The specific recipes of this
    chapter are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一些食谱，帮助你开始在 OpenShift 上进行 Node.js Web 应用程序开发。本章的具体食谱包括：
- en: Creating your first Node.js application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个 Node.js 应用程序
- en: Configuring Node supervisor options
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Node 监控选项
- en: Managing Node.js application dependencies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理 Node.js 应用程序的依赖
- en: Using the use_npm marker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `use_npm` 标记
- en: Enabling hot deployment for Node.js applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Node.js 应用程序启用热部署
- en: Creating and deploying Express web applications using Node.js and MongoDB cartridges
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 MongoDB Cartridge 创建和部署 Express Web 应用程序
- en: Working with Web Sockets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Web Socket
- en: Using CoffeeScript with OpenShift Node.js applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 OpenShift Node.js 应用程序中使用 CoffeeScript
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Node.js is a server-side JavaScript platform built on top of Google's Chrome
    V8 JavaScript engine that developers can use to write applications. These applications
    can be web applications, command-line utilities, or scripts to automate tasks.
    Node.js is a very popular choice for web application development, as it allows
    web developers to use a single programming language, such as JavaScript, on both
    the client side and the server side. It is suitable for building highly concurrent,
    data-intensive, real-time web applications because of its asynchronous, event-driven,
    non-blocking I/O nature. Node has a small core that provides the basic building
    block APIs to write higher-level frameworks. The developers can then use the web
    frameworks to build their awesome web applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是一个基于 Google Chrome V8 JavaScript 引擎的服务器端 JavaScript 平台，开发人员可以利用它编写应用程序。这些应用程序可以是
    Web 应用程序、命令行工具或用于自动化任务的脚本。Node.js 是 Web 应用程序开发中的一个非常流行的选择，因为它允许 Web 开发人员在客户端和服务器端都使用相同的编程语言，例如
    JavaScript。由于其异步、事件驱动、非阻塞的 I/O 特性，Node.js 非常适合构建高并发、数据密集型、实时的 Web 应用程序。Node.js
    具有一个小巧的核心，提供基本的构建块 API，用于编写更高层次的框架。开发人员可以利用这些 Web 框架来构建他们的精彩 Web 应用程序。
- en: There are many web frameworks, such as Express ([http://expressjs.com/](http://expressjs.com/)),
    Sails.js ([http://sailsjs.org/](http://sailsjs.org/)), Restify ([http://mcavage.me/node-restify/](http://mcavage.me/node-restify/)),
    and Geddy ([http://geddyjs.org/](http://geddyjs.org/)), developed by the Node
    community that developers can use for their web applications. Many big tech giants,
    such as LinkedIn, Walmart ([http://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/](http://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/)),
    and Yahoo, are using Node.js for their production applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多 Web 框架，如 Express（[http://expressjs.com/](http://expressjs.com/)）、Sails.js（[http://sailsjs.org/](http://sailsjs.org/)）、Restify（[http://mcavage.me/node-restify/](http://mcavage.me/node-restify/)）和
    Geddy（[http://geddyjs.org/](http://geddyjs.org/)），这些框架是 Node 社区开发的，开发人员可以用它们来构建
    Web 应用程序。许多大型科技公司，如 LinkedIn、Walmart（[http://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/](http://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/)）和
    Yahoo，都在生产应用程序中使用 Node.js。
- en: 'OpenShift provides web developers a hosting platform to deploy their Node.js
    web applications. You can run applications built using any of the Node.js web
    frameworks, such as Express or Geddy, on OpenShift. At the time of writing this
    book, OpenShift supports two versions of Node.js—0.6 and 0.10\. The following
    command shows the currently supported Node.js versions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 为 Web 开发人员提供了一个托管平台，用于部署他们的 Node.js Web 应用程序。你可以在 OpenShift 上运行使用任何
    Node.js Web 框架（如 Express 或 Geddy）构建的应用程序。写这本书时，OpenShift 支持两个版本的 Node.js——0.6
    和 0.10。以下命令显示当前支持的 Node.js 版本：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Node Version 0.6 cartridge will get deprecated in the future, so you are
    advised not to use it for your web applications. This book will only cover Version
    0.10.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Node 版本 0.6 的 Cartridge 将在未来被弃用，因此建议不要在 Web 应用程序中使用它。本书将仅覆盖版本 0.10。
- en: The *Creating your first Node.js application* recipe will walk you through creating
    your first OpenShift Node.js web application. We will look into the template application
    created by OpenShift and then write a simple HTTP server using Node's HTTP module
    and deploy it to OpenShift.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*创建你的第一个 Node.js 应用程序* 这部分将引导你创建你的第一个 OpenShift Node.js Web 应用程序。我们将了解 OpenShift
    创建的模板应用程序，然后使用 Node 的 HTTP 模块编写一个简单的 HTTP 服务器，并将其部署到 OpenShift。'
- en: The Node.js web applications are very different from the traditional web applications
    that you might have written so far. The web applications themselves are web servers,
    so you do not need Apache or any other web server to host your web application.
    There are various ways to fire up Node applications, such as using the commands
    `node <app script file>` and `npm start`, `supervisor <app script file>`. OpenShift
    uses a Node module called **node-supervisor** to run your application. The node-supervisor
    module ([https://github.com/isaacs/node-supervisor](https://github.com/isaacs/node-supervisor))
    runs the Node application and watches for any changes. Once it detects changes,
    it restarts the application. In the *Configuring Node supervisor options* recipe,
    you will learn how to customize a few supervisor options to take advantage of
    the hot reloading behavior. The alternative to using supervisor is to use the
    `npm start` command to run Node applications. You can configure OpenShift Node.js
    applications to use `npm start` instead of `supervisor` by using a marker file.
    This will be covered in the *Using the use_npm marker* recipe.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js Web 应用程序与你可能曾经编写过的传统 Web 应用程序有很大不同。Web 应用程序本身就是 Web 服务器，因此你不需要 Apache
    或任何其他 Web 服务器来托管 Web 应用程序。有多种方法可以启动 Node 应用程序，例如使用命令 `node <app script file>`
    和 `npm start`，`supervisor <app script file>`。OpenShift 使用一个名为 **node-supervisor**
    的 Node 模块来运行你的应用程序。node-supervisor 模块（[https://github.com/isaacs/node-supervisor](https://github.com/isaacs/node-supervisor)）运行
    Node 应用程序并监控任何更改。一旦检测到更改，它会重新启动应用程序。在*配置 Node 监督程序选项*的教程中，你将学习如何自定义一些监督程序选项，以利用热重载行为。使用监督程序的替代方法是使用
    `npm start` 命令运行 Node 应用程序。你可以通过使用标记文件配置 OpenShift Node.js 应用程序，使用 `npm start`
    而不是 `supervisor`。这一点将在*使用 use_npm 标记*的教程中讲解。
- en: In the *Managing Node.js application dependencies* recipe, you will learn how
    OpenShift uses `npm` to install and manage your application dependencies.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在*管理 Node.js 应用程序依赖*的教程中，你将学习 OpenShift 如何使用 `npm` 来安装和管理应用程序依赖。
- en: The example application in this chapter will be developed using the Express
    web framework and MongoDB database. The *Creating and deploying Express web applications
    using Node.js and MongoDB cartridges* recipe will walk you through all the steps
    required to build and deploy Express web applications on OpenShift. All the source
    code for this chapter is available on the OpenShift Cookbook GitHub organization
    ([https://github.com/OpenShift-Cookbook](https://github.com/OpenShift-Cookbook)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例应用程序将使用 Express Web 框架和 MongoDB 数据库进行开发。*使用 Node.js 和 MongoDB 卡片创建和部署
    Express Web 应用程序*的教程将引导你完成在 OpenShift 上构建和部署 Express Web 应用程序所需的所有步骤。本章的所有源代码都可以在
    OpenShift Cookbook GitHub 组织中找到（[https://github.com/OpenShift-Cookbook](https://github.com/OpenShift-Cookbook)）。
- en: Node.js is very popular for building real-time web applications using Web Sockets.
    In the *Working with Web Sockets* recipe, you will build a simple, real-time application
    using the Node Socket.IO library.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 在构建实时 Web 应用程序方面非常流行，特别是使用 Web Sockets。在*使用 Web Sockets*的教程中，你将使用 Node
    的 Socket.IO 库构建一个简单的实时应用程序。
- en: Instead of using JavaScript to write Node applications, developers can also
    use CoffeeScript to write their Node applications. CoffeeScript compiles to JavaScript
    and is a popular choice among developers who don't like to use JavaScript. The
    *Using CoffeeScript with OpenShift Node.js applications* recipe will cover this
    in detail.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员除了使用 JavaScript 编写 Node 应用程序外，还可以使用 CoffeeScript 编写 Node 应用程序。CoffeeScript
    会编译成 JavaScript，且在不喜欢使用 JavaScript 的开发人员中非常流行。*在 OpenShift Node.js 应用程序中使用 CoffeeScript*的教程将详细介绍这一点。
- en: To run the example applications that you will develop in this chapter on your
    local machine, you will need to install Node on your operating system. You can
    get the latest installer of Node.js for your operating system from the official
    website, [http://nodejs.org/download/](http://nodejs.org/download/). The installer
    will also install npm for you. This chapter will also use the MongoDB database.
    You can get the latest installer of MongoDB for your operating system from their
    official website ([http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地机器上运行本章中开发的示例应用程序，你需要在操作系统上安装 Node。你可以从官方网页获取适用于你操作系统的最新 Node.js 安装程序，[http://nodejs.org/download/](http://nodejs.org/download/)。安装程序还会为你安装
    npm。本章还将使用 MongoDB 数据库。你可以从其官方网站获取适用于你操作系统的最新 MongoDB 安装程序（[http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)）。
- en: This chapter assumes that you are comfortable with Node web development basics,
    OpenShift application basics, and how to work with OpenShift database cartridges.
    If you are not comfortable with these topics, I recommend you first read [Chapter
    3](part0041_split_000.html#page "Chapter 3. Creating and Managing Applications"),
    *Creating and Managing Applications*, and [Chapter 6](part0079_split_000.html#page
    "Chapter 6. Using MongoDB and Third-party Database Cartridges with OpenShift Applications"),
    *Using MongoDB and Third-party Database Cartridges with OpenShift Applications*,
    before continuing with this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设你已经掌握了 Node Web 开发基础、OpenShift 应用程序基础以及如何使用 OpenShift 数据库 Cartridge。如果你不熟悉这些主题，我建议你先阅读[第3章](part0041_split_000.html#page
    "第3章. 创建与管理应用程序")，*创建与管理应用程序*，以及[第6章](part0079_split_000.html#page "第6章. 在 OpenShift
    应用程序中使用 MongoDB 和第三方数据库 Cartridge")，*在 OpenShift 应用程序中使用 MongoDB 和第三方数据库 Cartridge*，然后再继续本章内容。
- en: Creating your first Node.js application
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个 Node.js 应用程序
- en: In this recipe, you will learn how to create your first OpenShift Node.js application
    using the rhc command-line tool. After understanding the template application
    created by OpenShift, you will write a `Hello World` Node.js application using
    Node's HTTP module.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将学习如何使用 rhc 命令行工具创建你的第一个 OpenShift Node.js 应用程序。在了解了 OpenShift 创建的模板应用程序后，你将使用
    Node 的 HTTP 模块编写一个 `Hello World` Node.js 应用程序。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete-app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from the official website, [http://nodejs.org/download/](http://nodejs.org/download/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，你需要在你的机器上安装 rhc 命令行客户端。详情请参考[第1章](part0014_split_000.html#page "第1章.
    OpenShift 入门")中*安装 OpenShift rhc 命令行客户端*的配方，*OpenShift 入门*。此应用程序将消耗一个 gear，因此，如果你没有额外的
    gear 可用于这个配方，请使用`rhc delete-app <app_name> --confirm`命令删除现有应用程序。要在本地机器上运行此应用程序，你需要在机器上安装
    Node。你可以从官方网站获取适用于你操作系统的最新 Node.js 安装程序，网址是[http://nodejs.org/download/](http://nodejs.org/download/)。
- en: How to do it…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行…
- en: 'Perform the following steps to create your first OpenShift Node.js application:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来创建你的第一个 OpenShift Node.js 应用程序：
- en: 'Open a new command-line terminal, and change the directory to a convenient
    location where you want to create the application. To create a Node.js 0.10 application,
    run the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令行终端，并将目录更改为你想创建应用程序的合适位置。要创建一个 Node.js 0.10 应用程序，请运行以下命令：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Open your favorite web browser, and go to `http://myapp-{domain-name}.rhcloud.com`
    to view the application. Please replace `{domain-name}` with your OpenShift account
    domain name.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你最喜欢的 web 浏览器，访问 `http://myapp-{domain-name}.rhcloud.com` 查看应用程序。请将 `{domain-name}`
    替换为你的 OpenShift 账户域名。
- en: The template application created by OpenShift is an Express web framework application.
    You can use your own template application by specifying your public Git repository
    using the `--from-code` option. This was covered in the *Specifying your own template
    Git repository URL* recipe in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications"), *Creating and Managing Applications*. In this recipe,
    you don't need the template code generated by OpenShift, so delete all the files
    and directories created by OpenShift except the `.openshift` directory. On the
    *nix machine, you can use the `rm` command to delete the files as shown in the
    following command. On Windows, you can use file explorer or the command-line equivalent
    to delete these files.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenShift 创建的模板应用程序是一个 Express Web 框架应用程序。你可以通过使用 `--from-code` 选项指定自己的公共 Git
    仓库来使用你自己的模板应用程序。这在[第3章](part0041_split_000.html#page "第3章. 创建与管理应用程序")的*指定自己的模板
    Git 仓库 URL*配方中已介绍，*创建与管理应用程序*。在这个配方中，你不需要 OpenShift 生成的模板代码，所以请删除 OpenShift 创建的所有文件和目录，除了
    `.openshift` 目录。在 *nix 系统上，你可以使用 `rm` 命令删除文件，如下所示。Windows 系统上，你可以使用文件资源管理器或命令行等效命令删除这些文件。
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new empty file named `server.js` in the application root directory.
    On *nix machines, you can use the `touch` command to create a new file. On Windows
    machines, you can use file explorer to create the new file. Run the following
    command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序根目录中创建一个名为 `server.js` 的新空文件。 在 *nix 系统中，你可以使用 `touch` 命令创建一个新文件。 在 Windows
    系统中，你可以使用文件资源管理器创建新文件。 运行以下命令：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open the file in your favorite editor, and populate it with the following code:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你喜欢的编辑器中打开文件，并使用以下代码填充它：
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To run the application on your local machine, run the following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在本地计算机上运行应用程序，请运行以下命令：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To see the application in action, open the `http://127.0.0.1:3000` in your favorite
    browser. You will see the **Hello World!!** message rendered in your browser.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要查看应用程序的实际效果，请在你喜欢的浏览器中打开 `http://127.0.0.1:3000`。 你将在浏览器中看到呈现的 **Hello World!!**
    消息。
- en: 'To deploy the application on OpenShift, commit the code to the local Git repository,
    and then push the changes to the application gear:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将应用程序部署到 OpenShift，请将代码提交到本地 Git 仓库，然后将更改推送到应用程序齿轮：
- en: '[PRE6]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After successful deployment, open the `http://myapp-{domain-name}.rhcloud.com`
    in your favorite browser. The browser will render **Hello World!!**.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署成功后，在你喜欢的浏览器中打开 `http://myapp-{domain-name}.rhcloud.com`。 浏览器将呈现 **Hello World!!**。
- en: How it works…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理如下…
- en: In the previous steps, you created a `Hello World` Node.js application from
    scratch and deployed it on OpenShift. The `Hello World` application that you wrote
    in the aforementioned steps is no different from the one you will write if you
    want to run this application on your local machine or elsewhere. There is no OpenShift-specific
    apart from the environment variables.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，你从头开始创建了一个 `Hello World` Node.js 应用程序，并将其部署到 OpenShift 上。 在上述步骤中编写的
    `Hello World` 应用程序与如果要在本地计算机或其他地方运行此应用程序时将要编写的应用程序没有任何不同。 除了环境变量外，没有 OpenShift
    特定的内容。
- en: 'In step 1, you created an OpenShift Node.js 0.10 application using the rhc
    command-line tool. The `rhc create-app` command will make an HTTP POST request
    to the OpenShift broker. The OpenShift broker will accept the request and then
    initiate the application creation process. You specified that OpenShift should
    create a Node.js 0.10 application with `myapp` as the application name. OpenShift
    will use these details along with a few defaults to create the `myapp` application.
    The defaults include small gear size, non-scalable application, and using the
    current directory to clone the Git repository. OpenShift behind the scenes did
    the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，你使用了 `rhc` 命令行工具创建了一个 OpenShift Node.js 0.10 应用程序。 `rhc create-app` 命令将向
    OpenShift 代理发送 HTTP POST 请求。 OpenShift 代理将接受请求，然后启动应用程序创建过程。 你指定 OpenShift 应该创建一个名为
    `myapp` 的 Node.js 0.10 应用程序。 OpenShift 将使用这些细节以及一些默认设置来创建 `myapp` 应用程序。 默认设置包括小型齿轮大小，不可扩展应用程序，并使用当前目录克隆
    Git 仓库。 在幕后，OpenShift 完成了以下操作：
- en: OpenShift created a new application gear with the Node.js cartridge.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift 创建了一个带有 Node.js 载体的新应用程序齿轮。
- en: It created a private Git repository for your application and populated it with
    a template application. The template application that OpenShift creates is an
    Express web framework application.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为你的应用程序创建了一个私有 Git 仓库，并使用模板应用程序填充了它。 OpenShift 创建的模板应用程序是一个 Express Web 框架应用程序。
- en: It installed a Git action hook that will build the application. During the application
    build phase, it will download all the dependencies mentioned in `package.json`
    using the `npm install` command.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它安装了一个 Git 操作钩子，用于构建应用程序。 在应用程序构建阶段，它将使用 `npm install` 命令下载 `package.json` 中提到的所有依赖项。
- en: It created a public DNS for your application so that it is accessible from the
    outside world.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为你的应用程序创建了一个公共 DNS，以便从外部世界访问。
- en: After successful application creation, you will have the `myapp` directory inside
    the current directory. You can view the application by opening the application
    URL in your browser as mentioned in step 2\. The application creation process
    was explained in detail in the *Creating an OpenShift application using the rhc
    command-line client* recipe in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications"), *Creating and Managing Applications*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建应用程序后，你将在当前目录中拥有 `myapp` 目录。 你可以按照第 2 步中提到的在浏览器中打开应用程序 URL 的方式查看应用程序。 应用程序创建过程在
    [第 3 章](part0041_split_000.html#page "第 3. 创建和管理应用程序") 的 *使用 rhc 命令行客户端创建 OpenShift
    应用程序* 配方中详细说明了。
- en: 'Now, let''s look at the template application created by OpenShift:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看 OpenShift 创建的模板应用程序：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The template application has five files—`README.md`, `index.html`, `package.json`,
    `deplist.txt`, and `server.js`—and the `node_modules` directory apart from the
    `.openshift` and `.git` directories. We have already talked about `.openshift`
    and `.git` in the *Creating an OpenShift application using the rhc command-line
    client* recipe in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications"), *Creating and Managing Applications*, so I will not
    cover them here. Let''s talk about the others one by one:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 模板应用有五个文件——`README.md`、`index.html`、`package.json`、`deplist.txt` 和 `server.js`——以及
    `node_modules` 目录，除此之外还有 `.openshift` 和 `.git` 目录。我们已经在 *使用 rhc 命令行客户端创建 OpenShift
    应用* 这一食谱中讲解了 `.openshift` 和 `.git`，可以参考 [第 3 章](part0041_split_000.html#page "Chapter 3. Creating
    and Managing Applications")，*创建和管理应用*，所以这里不再赘述。接下来我们逐一讲解其他文件：
- en: '`README.md`: This is a standard Git repository markdown file where you can
    summarize your project. GitHub uses `README.md` to generate the HTML summary of
    the project.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`：这是一个标准的 Git 仓库 Markdown 文件，用于总结你的项目。GitHub 使用 `README.md` 来生成项目的
    HTML 概述。'
- en: '`index.html`: This file contains the HTML markup that you will see when you
    view the application in the browser. This is an HTML 5 file with Twitter Bootstrap
    styling.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：此文件包含当你在浏览器中查看应用时看到的 HTML 标记。它是一个 HTML 5 文件，使用了 Twitter Bootstrap
    样式。'
- en: '`package.json`: This is your Node application descriptor. This is a JSON document
    that contains all the information about your application, such as name, description,
    version, and libraries, that this application depends on. The full documentation
    is available at [https://www.npmjs.org/doc/json.html](https://www.npmjs.org/doc/json.html).'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`：这是你的 Node 应用描述文件。它是一个 JSON 文档，包含关于应用的所有信息，例如名称、描述、版本和应用所依赖的库。完整的文档可以在
    [https://www.npmjs.org/doc/json.html](https://www.npmjs.org/doc/json.html) 查阅。'
- en: '`deplists.txt`: This is a deprecated method to specify application dependencies
    in OpenShift Node.js applications. It is recommended not to use it, as this may
    get removed in the future. This file only exists for backward compatibility so
    that the application that uses it keeps running.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deplists.txt`：这是 OpenShift Node.js 应用中用于指定应用依赖的过时方法。建议不要使用它，因为未来可能会删除此方法。该文件仅存在于向后兼容的情况下，以便使用它的应用继续运行。'
- en: '`server.js`: This file houses the template Express web framework application
    created by OpenShift. This application exposes a couple of routes, `/` and `/asciimo`.
    The `/` route renders `index.html`, and the second route renders an HTML page
    with images. The Express application will be covered in detail in the *Creating
    and deploying Express web applications using Node.js and MongoDB cartridges* recipe,
    so we will not cover it in this recipe.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.js`：此文件包含由 OpenShift 创建的模板 Express Web 框架应用。该应用暴露了两个路由，`/` 和 `/asciimo`。`/`
    路由呈现 `index.html`，第二个路由呈现带有图像的 HTML 页面。Express 应用将在 *使用 Node.js 和 MongoDB 插件创建和部署
    Express Web 应用* 这一食谱中详细介绍，因此我们在本食谱中不再讲解。'
- en: '`node_modules`: This directory houses all the application dependencies you
    specify in `package.json`. The `npm install` command will download all the dependencies
    in the `node_modules` directory.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_modules`：此目录包含你在 `package.json` 中指定的所有应用依赖项。`npm install` 命令会将所有依赖项下载到
    `node_modules` 目录中。'
- en: 'The template application generated by OpenShift is a standard Express web application.
    To run this application on your local machine, you can run the following commands:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 生成的模板应用是一个标准的 Express Web 应用。要在本地机器上运行此应用，你可以运行以下命令：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The application will be running at `http://127.0.0.1:8080/`. The previous two
    commands did the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用将在 `http://127.0.0.1:8080/` 运行。前两个命令执行了以下操作：
- en: The `npm install` command downloads all the dependencies mentioned in the `package.json`
    file. The template application mentions `express` as its dependency, so the `npm
    install` command will download Express and all its transitive dependencies in
    the `node_modules` directory.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm install` 命令会下载 `package.json` 文件中列出的所有依赖项。模板应用提到将 `express` 作为其依赖项，因此
    `npm install` 命令将下载 Express 及其所有传递性依赖项，并将其存放在 `node_modules` 目录中。'
- en: As mentioned in the introduction section, in Node, the server and the application
    are the same. So, you used the `node server.js` command to fire up the application's
    server. This starts the HTTP server, and you can start making requests.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如介绍部分所述，在 Node 中，服务器和应用是同一个。因此，你使用 `node server.js` 命令启动了应用的服务器。这个命令启动了 HTTP
    服务器，你可以开始发起请求。
- en: 'The `node server.js` command is one way to fire up the application. The other
    alternatives to start the application are the `npm start` and `supervisor server.js`
    commands. The `npm start` command will run the package start script if one was
    provided. The start script can be mentioned in the `package.json` file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`node server.js` 命令是一种启动应用程序的方式。启动应用程序的其他替代方式是 `npm start` 和 `supervisor server.js`
    命令。如果提供了启动脚本，`npm start` 命令将运行该脚本。启动脚本可以在 `package.json` 文件中指定：'
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If the `package.json` file does not contain the start script, the `npm start`
    command will use the `node server.js` command as the default start script.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `package.json` 文件中没有包含启动脚本，`npm start` 命令将默认使用 `node server.js` 命令作为启动脚本。
- en: OpenShift, by default, does not use the `npm start` or `node <server script>`
    command to run your application. It uses a module called node-supervisor to run
    the application. You can configure OpenShift Node applications to use the `npm
    start` command instead of node-supervisor. This will be covered in the *Using
    the use_npm marker* recipe. The main advantage of using the supervisor is that
    it can restart the application when they crash. Also, you can use the supervisor
    to achieve the hot reloading behavior. It can monitor a set of directories and
    files and restart the application when code changes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，OpenShift 不使用 `npm start` 或 `node <server script>` 命令来运行应用程序。它使用一个名为 node-supervisor
    的模块来运行应用程序。你可以配置 OpenShift 的 Node 应用程序使用 `npm start` 命令，而不是 node-supervisor。这将在
    *使用 use_npm 标记* 这一部分中进行讲解。使用 supervisor 的主要优势是，当应用程序崩溃时，它可以重启应用程序。此外，你还可以使用 supervisor
    实现热重载功能。它可以监视一组目录和文件，并在代码发生变化时重新启动应用程序。
- en: 'If you want to use node-supervisor on your local machine, you can install the
    node-supervisor module using the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在本地机器上使用 node-supervisor，你可以使用以下命令安装 node-supervisor 模块：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now you can start the application using the `supervisor server.js` command.
    This will restart the application every time you make changes to your source code.
    This can be very useful during the development time, as it will save the time
    required to restart the application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用 `supervisor server.js` 命令启动应用程序。每当你对源代码进行更改时，这将重新启动应用程序。这在开发过程中非常有用，因为它节省了重新启动应用程序所需的时间。
- en: 'In step 3, you deleted the template source code generated by OpenShift so that
    you can write a simple HTTP server from scratch. In step 4, you created a new
    file named `server.js` and populated it with the `Hello World` Node.js code. The
    code listing in step 4 does the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 3 步中，你删除了 OpenShift 生成的模板源代码，以便从头开始编写一个简单的 HTTP 服务器。在第 4 步中，你创建了一个名为 `server.js`
    的新文件，并用 `Hello World` 的 Node.js 代码填充了它。第 4 步中的代码执行以下操作：
- en: You imported the Node HTTP module using the `require()` function. This will
    be used to write the server.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你通过 `require()` 函数导入了 Node HTTP 模块。这个模块将用于编写服务器。
- en: Then, you created two variables to hold the IP address and port. If the application
    runs on a local machine, OpenShift-specific environment variables will not be
    available. Hence, the IP and port will be `127.0.0.1` and 3000 respectively.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，你创建了两个变量来保存 IP 地址和端口。如果应用程序运行在本地机器上，OpenShift 特定的环境变量将不可用。因此，IP 和端口将分别设置为
    `127.0.0.1` 和 3000。
- en: Next, you created the HTTP server using the HTTP module `createServer()` function.
    You passed a callback that will be fired whenever a request happens. The callback
    function accepts two arguments—request and response—and writes `Hello World` to
    the response.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，你使用 HTTP 模块的 `createServer()` 函数创建了 HTTP 服务器。你传递了一个回调函数，该函数将在每次请求发生时被触发。回调函数接受两个参数——请求和响应，并将
    `Hello World` 写入响应中。
- en: Finally, you instructed the server to listen on the IP and port variables.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，你指示服务器监听 IP 和端口变量。
- en: In step 5, you tested the `Hello World` application on the local machine by
    running the `node server.js` command. To deploy the application on OpenShift,
    you committed the code to the local Git repository and pushed the changes to the
    application gear in step 6.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 5 步中，你通过运行 `node server.js` 命令在本地机器上测试了 `Hello World` 应用程序。为了将应用程序部署到 OpenShift，你将代码提交到本地
    Git 仓库，并在第 6 步中将更改推送到应用程序的 gear。
- en: 'When you push the source code to the OpenShift Node.js application Git repository,
    OpenShift will do the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将源代码推送到 OpenShift Node.js 应用程序的 Git 仓库时，OpenShift 将执行以下操作：
- en: First, all the bits are pushed to the application Git repository.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，所有的代码都被推送到应用程序的 Git 仓库。
- en: Then, if the `package.json` file is present, and this is the first time you
    are pushing the source code, it will download all the dependencies mentioned in
    `package.json`. On every subsequent push, only new dependencies that are already
    not present will be downloaded. All existing node modules will be cached.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，如果 `package.json` 文件存在，并且这是你第一次推送源代码，OpenShift 会下载 `package.json` 中提到的所有依赖项。每次后续推送时，只有尚未存在的新增依赖项会被下载，所有现有的节点模块将被缓存。
- en: OpenShift will run the application using one of the three commands mentioned
    in the subsequent list. This will change when the `use_npm` marker file is present
    and will be covered in the *Using the use_npm marker* recipe.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift 将使用后续列表中提到的三种命令之一来运行应用。当 `use_npm` 标记文件存在时，运行方式会有所变化，具体内容将在 *使用 use_npm
    标记* 方案中介绍。
- en: If `package.json` is not present, OpenShift will run the `supervisor server.js`
    command.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `package.json` 不存在，OpenShift 将运行 `supervisor server.js` 命令。
- en: If `package.json` is present and the name of the main file in the application
    is `server.js`, OpenShift will run the `supervisor server.js` command. The name
    of the main file is mentioned in the `package.json` main element.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `package.json` 存在且应用的主文件名是 `server.js`，OpenShift 将运行 `supervisor server.js`
    命令。主文件名在 `package.json` 的 main 元素中指定。
- en: If `package.json` is present and the name of the main file in the application
    is something other than `server.js` (like app.js), OpenShift will run the `supervisor
    app.js` command.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `package.json` 存在且应用的主文件名不是 `server.js`（例如 app.js），OpenShift 将运行 `supervisor
    app.js` 命令。
- en: As you did not include `package.json`, OpenShift will run the application using
    the `supervisor server.js` command. Once the application is started, you can open
    the application URL in the browser, and you will be greeted with **HelloWorld!!**
    as shown in step 7.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你未包含 `package.json`，OpenShift 将使用 `supervisor server.js` 命令来运行应用。应用启动后，你可以在浏览器中打开应用的
    URL，你将看到 **HelloWorld!!**，如第 7 步所示。
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Configuring Node supervisor options* recipe
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置节点监督员选项* 方案'
- en: The *Enabling hot deployment for Node.js applications* recipe
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为 Node.js 应用启用热部署* 方案'
- en: The *Managing Node.js application dependencies* recipe
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*管理 Node.js 应用依赖* 方案'
- en: Configuring Node supervisor options
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置节点监督员选项
- en: 'As mentioned in the *Creating your first Node.js application* recipe, OpenShift
    uses the node-supervisor module to run your programs. In this recipe, you will
    learn how you can configure node-supervisor options. If you have the node-supervisor
    module installed on your machine, you can see all the supported options by running
    the following command. You can install node-supervisor by executing the `npm install
    supervisor -g` command. The help option can be viewed using the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *创建你的第一个 Node.js 应用* 方案中所述，OpenShift 使用 node-supervisor 模块来运行你的程序。在本方案中，你将学习如何配置
    node-supervisor 选项。如果你在机器上已安装 node-supervisor 模块，可以通过运行以下命令查看所有支持的选项。你可以通过执行 `npm
    install supervisor -g` 命令来安装 node-supervisor。帮助选项可以通过以下命令查看：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: OpenShift allows you to configure the node-supervisor watch and poll-interval
    options. The watch option allows you to specify a comma-delimited list of folders
    or JavaScript files that the supervisor watches for changes. The poll-interval
    option allows you to specify how often the supervisor should poll for changes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 允许你配置 node-supervisor 的 watch 和 poll-interval 选项。watch 选项允许你指定一个以逗号分隔的文件夹或
    JavaScript 文件列表，监督员将监视这些文件的变化。poll-interval 选项允许你指定监督员检查变化的频率。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from the official website, [http://nodejs.org/download/](http://nodejs.org/download/).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此步骤，你需要在机器上安装rhc命令行客户端。请参考[第1章](part0014_split_000.html#page "Chapter 1.
    Getting Started with OpenShift")，*OpenShift入门*中的*安装OpenShift rhc命令行客户端*步骤获取详细信息。此应用程序将消耗一个gear，因此如果你没有额外的gear可用，可以使用`rhc
    delete app <app_name> --confirm`命令删除现有应用程序。要在本地机器上运行此应用程序，你需要安装Node。你可以从官方网站[http://nodejs.org/download/](http://nodejs.org/download/)获取适合你操作系统的最新Node.js安装程序。
- en: How to do it…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Perform the following steps to configure supervisor options:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以配置监视器选项：
- en: If you don't already have a Node.js application running, create a new application
    by executing the following command. This will create the application you created
    in the *Creating your first Node.js application* recipe.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有运行Node.js应用程序，可以执行以下命令创建一个新应用程序。这将创建你在*创建你的第一个Node.js应用程序*步骤中创建的应用程序。
- en: '[PRE12]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Change the directory to `myapp`, and create two environment variables to configure
    the supervisor poll interval and directories to watch.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`myapp`目录，并创建两个环境变量来配置监视器的轮询间隔和需要监视的目录。
- en: '[PRE13]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Replace the `$OPENSHIFT_REPO_DIR` variable with the value of your application''s
    `$OPENSHIFT_REPO_DIR` environment variable. You can get the value of `$OPENSHIFT_REPO_DIR`
    by running the following command:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`$OPENSHIFT_REPO_DIR`变量替换为你的应用程序的`$OPENSHIFT_REPO_DIR`环境变量的值。你可以通过运行以下命令获取`$OPENSHIFT_REPO_DIR`的值：
- en: '[PRE14]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Restart the application to allow it to pick the new environment variables:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启应用程序，以便它能够识别新的环境变量：
- en: '[PRE15]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: The node-supervisor module helps OpenShift to restart Node applications when
    they die. This is very helpful for developers, as they do not have to restart
    the application themselves if applications can recover after restart. Another
    useful feature of node-supervisor is its support for hot reload. You can tell
    node-supervisor to watch directories or files, and when they change, the application
    will be restarted. This gives the hot reloading behavior.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: node-supervisor模块帮助OpenShift在Node应用程序崩溃时自动重启应用程序。这对开发人员非常有用，因为如果应用程序可以在重启后恢复，开发人员就不必手动重启应用程序。node-supervisor的另一个有用特性是它支持热重载。你可以告诉node-supervisor监视某些目录或文件，当这些文件发生变化时，应用程序会被重启，从而实现热重载行为。
- en: In step 2, you created two environment variables that OpenShift exposes to configure
    the hot reloading behavior. The `OPENSHIFT_NODEJS_WATCH` environment variable
    allows you to specify a comma-delimited list of folders or JavaScript files that
    the supervisor should watch for changes. You told the supervisor to monitor the
    `$OPENSHIFT_REPO_DIR` variable. The `OPENSHIFT_NODEJS_POLL_INTERVAL` environment
    variable allows you to specify in milliseconds how often the supervisor should
    poll for changes. The default value for polling is 10 seconds. You told the supervisor
    to poll `$OPENSHIFT_REPO_DIR` every 60 seconds.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤2中，你创建了两个环境变量，OpenShift会暴露这些环境变量来配置热重载行为。`OPENSHIFT_NODEJS_WATCH`环境变量允许你指定一个用逗号分隔的文件夹或JavaScript文件列表，监视器应监视这些文件的变化。你告诉监视器监视`$OPENSHIFT_REPO_DIR`变量。`OPENSHIFT_NODEJS_POLL_INTERVAL`环境变量允许你指定以毫秒为单位的轮询频率，监视器应多长时间检查一次变化。轮询的默认值是10秒。你告诉监视器每60秒轮询一次`$OPENSHIFT_REPO_DIR`。
- en: 'The node-supervisor hot reloading behavior is not suitable for the `git push`
    deployment model but can be useful if you use OpenShift SFTP support ([https://www.openshift.com/blogs/getting-started-with-sftp-and-openshift](https://www.openshift.com/blogs/getting-started-with-sftp-and-openshift)).
    The reason it is not suitable for the `git push` deployment model is that you
    are already pushing the code to application gear, which will update the `$OPENSHIFT_REPO_DIR`
    variable with new code and restart the application. The preferred way to use hot
    deployment with `git push` is by using the `hot_deploy` marker file. This is explained
    in the *Enabling hot deployment for Node.js applications* recipe. To see hot reload
    in action, we will SSH into the application gear and change the source code as
    follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: node-supervisor热重载行为不适用于`git push`部署模型，但如果你使用OpenShift的SFTP支持（[https://www.openshift.com/blogs/getting-started-with-sftp-and-openshift](https://www.openshift.com/blogs/getting-started-with-sftp-and-openshift)），它会很有用。它不适用于`git
    push`部署模型的原因是，你已经将代码推送到应用程序环境中，这会更新`$OPENSHIFT_REPO_DIR`变量并重启应用程序。与`git push`一起使用热部署的首选方式是使用`hot_deploy`标记文件。这在*为Node.js应用程序启用热部署*食谱中有解释。为了看到热重载的实际效果，我们将通过SSH连接到应用程序环境并按如下方式修改源代码：
- en: 'SSH into the OpenShift application gear using the `rhc ssh` command. Instead
    of SSH, you can also use the SFTP client to connect with the application gear,
    as mentioned in the following blog: [https://www.openshift.com/blogs/using-filezilla-and-sftp-on-windows-with-openshift](https://www.openshift.com/blogs/using-filezilla-and-sftp-on-windows-with-openshift).'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`rhc ssh`命令SSH连接到OpenShift应用程序环境。除了SSH，你还可以使用SFTP客户端连接到应用程序环境，如以下博客所述：[https://www.openshift.com/blogs/using-filezilla-and-sftp-on-windows-with-openshift](https://www.openshift.com/blogs/using-filezilla-and-sftp-on-windows-with-openshift)。
- en: 'Once connected, change the directory to the `app-root/repo` directory:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦连接成功，切换到`app-root/repo`目录：
- en: '[PRE16]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Open the `server.js` file using `vim` and change `"Hello World!!"` to `"Hello
    OpenShift User!!"` and save the file.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`vim`打开`server.js`文件，将`"Hello World!!"`更改为`"Hello OpenShift User!!"`，然后保存文件。
- en: In the next polling cycle, the supervisor will detect the change and restart
    the application. You can view your change by opening the application URL in your
    favorite browser.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个轮询周期中，supervisor将检测到变化并重启应用程序。你可以通过在你喜欢的浏览器中打开应用程序URL来查看你的更改。
- en: See also
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating your first Node.js application* recipe
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建你的第一个Node.js应用程序*食谱'
- en: The *Enabling hot deployment for Node.js applications* recipe
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为Node.js应用程序启用热部署*食谱'
- en: The *Managing Node.js application dependencies* recipe
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*管理Node.js应用程序依赖*食谱'
- en: Managing Node.js application dependencies
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理Node.js应用程序依赖
- en: So far in this chapter, you didn't have to use any third-party library. The
    applications that you developed were simple `Hello World` applications that didn't
    require any third-party library to do their work. In real applications, you have
    to use libraries written by others. Node makes it very easy for developers to
    consume third-party libraries using npm. npm is the package manager for Node.js
    that comes bundled with Node. It is a command-line tool that allows you to publish
    new modules, downloads existing modules from the npm registry, and installs third-party
    modules. In this recipe, you will write another simple application, but that will
    use the Express framework. The goal of the recipe was to introduce you to the
    Node dependency management without getting bogged down by the application details.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，你不需要使用任何第三方库。你开发的应用程序是简单的`Hello World`应用程序，不需要任何第三方库就能完成工作。在实际应用中，你需要使用别人编写的库。Node.js使得开发人员通过npm非常容易地使用第三方库。npm是Node.js的包管理器，随Node.js一起捆绑提供。它是一个命令行工具，允许你发布新模块、从npm注册表中下载现有模块，并安装第三方模块。在这个食谱中，你将编写另一个简单的应用程序，但它将使用Express框架。这个食谱的目标是让你了解Node.js的依赖管理，而不被应用程序的细节所困扰。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from the official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，你需要在你的机器上安装 rhc 命令行客户端。有关详细信息，请参阅[第 1 章](part0014_split_000.html#page
    "第 1 章：开始使用 OpenShift")中的 *安装 OpenShift rhc 命令行客户端* 配方， *开始使用 OpenShift*。此应用程序将消耗一个
    gear，因此，如果你没有额外的 gear 可用于此配方，请使用 `rhc delete app <app_name> --confirm` 命令删除现有的应用程序。要在本地机器上运行此应用程序，你需要在机器上安装
    Node。你可以从官方网页获取适用于你的操作系统的 Node.js 最新安装程序（[http://nodejs.org/download/](http://nodejs.org/download/)）。
- en: How to do it…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现……
- en: 'In this recipe, you will create a `Hello World` Express framework web application
    from scratch. Perform the following steps to create the application:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将从零开始创建一个 `Hello World` Express 框架 Web 应用程序。请执行以下步骤来创建该应用程序：
- en: 'Recreate the application created in the *Creating your first Node.js application*
    recipe by executing the following command:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令重新创建在 *创建你的第一个 Node.js 应用程序* 配方中创建的应用程序：
- en: '[PRE17]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a new file in the application root directory named `package.json`. The
    `package.json` file is an application descriptor file that you can use to define
    application metadata and its dependencies.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序根目录下创建一个名为 `package.json` 的新文件。`package.json` 文件是一个应用程序描述文件，你可以用它来定义应用程序的元数据及其依赖项。
- en: '[PRE18]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The application will use the Express web framework, so install the express
    dependency using the following command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该应用程序将使用 Express Web 框架，因此使用以下命令安装 express 依赖项：
- en: '[PRE19]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will download the Express framework module and its dependencies in the
    `node_modules` directory and populate the `package.json` file with express dependency,
    as shown in the following code:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将下载 Express 框架模块及其依赖项到 `node_modules` 目录，并在 `package.json` 文件中添加 express 依赖项，如下所示的代码：
- en: '[PRE20]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Replace the code in `server.js` with the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `server.js` 中的代码替换为以下代码：
- en: '[PRE21]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the `node_modules` directory to the `.gitignore` file. We are adding the
    `node_modules` directory to `.gitignore` to allow OpenShift to download all the
    dependencies using npm. If you don''t add `node_modules` to `.gitignore`, OpenShift
    will not download the dependencies but use dependencies from your `node_modules`
    directory:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `node_modules` 目录添加到 `.gitignore` 文件中。我们将 `node_modules` 目录添加到 `.gitignore`
    中，以允许 OpenShift 使用 npm 下载所有依赖项。如果你不将 `node_modules` 添加到 `.gitignore`，OpenShift
    将不会下载依赖项，而是使用你 `node_modules` 目录中的依赖项：
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Commit the code, and push the changes to the application gear:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交代码，并将更改推送到应用程序 gear：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After the application is successfully built and deployed, you will see the application
    running at `http://myapp-{domain-name}.rhcloud.comhttp://myapp-{domain-name}.rhcloud.com`.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在应用程序成功构建并部署后，你将看到应用程序在 `http://myapp-{domain-name}.rhcloud.comhttp://myapp-{domain-name}.rhcloud.com`
    上运行。
- en: How it works…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There's more…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'In the *Creating your first Node.js application* recipe, I mentioned that when
    you push the changes to the OpenShift application gear, OpenShift checks for the
    existence of the `package.json` file. If the `package.json` file exists, OpenShift
    uses the value of the main field as the primary entry point to your application.
    As you didn''t define the main field in `package.json`, OpenShift will use `server.js`
    as the default entry point. Let''s suppose you renamed the `server.js` to `app.js`.
    Then, to make this run on OpenShift, you will have to create an entry for the
    main field, as shown in the following code snippet:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在*创建你的第一个 Node.js 应用程序*配方中，我提到过，当你将更改推送到 OpenShift 应用程序的 gear 时，OpenShift 会检查是否存在
    `package.json` 文件。如果 `package.json` 文件存在，OpenShift 会使用 main 字段的值作为应用程序的主要入口点。由于你没有在
    `package.json` 中定义 main 字段，OpenShift 将默认使用 `server.js` 作为入口点。假设你将 `server.js`
    重命名为 `app.js`，那么为了在 OpenShift 上运行，你需要为 main 字段创建一个条目，如下所示的代码片段所示：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating your first Node.js application* recipe
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建你的第一个 Node.js 应用程序* 配方'
- en: The *Using the use_npm marker* recipe
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 use_npm 标记* 配方'
- en: Using the use_npm marker
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 use_npm 标记
- en: OpenShift uses the node-supervisor module to run your Node apps, but you can
    also tell OpenShift to use the `npm start` command to run the application. In
    this recipe, you will learn how to do that.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 使用 node-supervisor 模块来运行你的 Node 应用程序，但你也可以告诉 OpenShift 使用 `npm start`
    命令来运行该应用程序。在本教程中，你将学习如何实现这一点。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from their official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，你需要在你的计算机上安装 rhc 命令行客户端。有关详细信息，请参阅 [第1章](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift") 中的 *安装 OpenShift rhc 命令行客户端* 部分，*OpenShift
    入门*。此应用程序将消耗一个 gear，如果你没有额外的 gear 可以用于本教程，可以使用 `rhc delete app <app_name> --confirm`
    命令删除现有的应用程序。为了在本地机器上运行此应用程序，你需要在你的计算机上安装 Node。你可以从 Node.js 官方网站（[http://nodejs.org/download/](http://nodejs.org/download/)）获取适合你操作系统的最新安装程序。
- en: How to do it…
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to use the `npm start` command to run your applications:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，使用 `npm start` 命令来运行你的应用程序：
- en: 'Open a new command-line terminal, and recreate the application you created
    in the *Managing Node.js application dependencies* recipe as follows:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令行终端，重新创建你在 *管理 Node.js 应用程序依赖* 部分中创建的应用程序，操作如下：
- en: '[PRE27]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Create a marker file named `use_npm` inside the `.openshift/markers` directory.
    On the *nix machine, you can use the `touch` command as shown in the following
    code. On Windows, you can use file explorer to create an empty file.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `.openshift/markers` 目录中创建一个名为 `use_npm` 的标记文件。在 *nix 系统中，你可以使用如下代码的 `touch`
    命令。在 Windows 系统中，你可以使用文件资源管理器创建一个空文件。
- en: '[PRE28]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Commit the code, and push the changes to the application gear:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交代码并推送更改到应用程序的 gear：
- en: '[PRE29]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `git push` logs will clearly mention that the application is started using
    the `npm start` command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`git push` 的日志中会清楚地提到应用程序是通过 `npm start` 命令启动的：'
- en: '[PRE30]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In step 1, you created an Express framework web application that we created
    in the *Managing Node.js application dependencies* recipe. The application just
    has two files—`server.js` and `package.json`. The `server.js` file contains the
    application source code, and `package.json` contains the application metadata
    and its dependencies.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1步中，你创建了一个 Express 框架的 Web 应用程序，这是我们在 *管理 Node.js 应用程序依赖* 部分中创建的应用程序。该应用程序只有两个文件——`server.js`
    和 `package.json`。`server.js` 文件包含应用程序的源代码，`package.json` 包含应用程序的元数据和依赖项。
- en: 'Then, in step 2, you created a marker file, `use_npm`. The presence of the
    `use_npm` marker file tells OpenShift that you want to use the `npm start` command
    to run the application instead of the `node-supervisor` module. The `npm start`
    command gives developers more flexibility to run their applications. It allows
    developers to specify their own start script in `package.json`, which OpenShift
    will use to run their application. The `package.json` is shown as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第2步中，你创建了一个标记文件 `use_npm`。`use_npm` 标记文件的存在告诉 OpenShift 你希望使用 `npm start`
    命令来运行该应用程序，而不是使用 `node-supervisor` 模块。`npm start` 命令为开发者提供了更多的灵活性来运行他们的应用程序。它允许开发者在
    `package.json` 中指定自己的启动脚本，OpenShift 会使用这个脚本来运行应用程序。`package.json` 如下所示：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As you can see in the previous listing, it does not mention any start script.
    When there is no start script in the `package.json` file, OpenShift will fall
    back to `node server.js` as the start script:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上面的清单中所看到的，它没有提到任何启动脚本。当 `package.json` 文件中没有启动脚本时，OpenShift 会回退到使用 `node
    server.js` 作为启动脚本：
- en: '[PRE32]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is the reason the application successfully started in step 4 after `git
    push`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在第4步中，执行 `git push` 后应用程序能够成功启动的原因。
- en: 'Now let''s suppose that you want to rename `server.js` to `app.js`. If you
    commit the source code now and push the changes, the application will fail to
    start. You will see the following message in the `git push` logs:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你想将 `server.js` 重命名为 `app.js`。如果你现在提交源代码并推送更改，应用程序将无法启动。你将在 `git push` 的日志中看到以下信息：
- en: '[PRE33]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To make this application run again, you have to specify the start script as
    shown:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此应用程序重新运行，你必须指定如下的启动脚本：
- en: '[PRE34]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: See also
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating and deploying Express web applications using Node.js and MongoDB
    cartridges* recipe
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Node.js 和 MongoDB 模块创建并部署 Express Web 应用程序*教程'
- en: The *Managing Node.js application dependencies* recipe
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*管理 Node.js 应用依赖*教程'
- en: Enabling hot deployment for Node.js applications
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用 Node.js 应用的热部署
- en: In this recipe, you will learn how you can enable hot deployment for Node.js
    applications.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你将学习如何为 Node.js 应用启用热部署。
- en: How to do it…
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Perform the following steps to enable hot deployment for your application:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以启用应用的热部署：
- en: 'Create a new Node.js application using the source code developed in the previous
    recipe:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一个教程中开发的源代码创建一个新的 Node.js 应用程序：
- en: '[PRE35]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To enable hot deployment, create an empty file named `hot_deploy` under the
    `.openshift/markers` directory. This file is called the marker file, as this does
    not contain any content. On the *nix machine, you can use the `touch` command
    to create the file. On Windows, you can use file explorer to create a new file.
    If you are not in the `myapp` directory, first change directory to `myapp`. Have
    a look at the following commands:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用热部署，请在 `.openshift/markers` 目录下创建一个名为 `hot_deploy` 的空文件。这个文件被称为标记文件，因为它不包含任何内容。在
    *nix 系统中，你可以使用 `touch` 命令来创建该文件。在 Windows 中，你可以通过文件资源管理器创建一个新文件。如果你不在 `myapp`
    目录下，首先切换到 `myapp` 目录。请查看以下命令：
- en: '[PRE36]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the file to the Git index, commit the file to the local Git repository,
    and then push changes to the application gear by typing the commands as shown:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件添加到 Git 索引，提交到本地 Git 仓库，然后通过输入如下命令将更改推送到应用环境：
- en: '[PRE37]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the `git push` logs, you will see a message that cartridges are not stopped
    because hot deployment is enabled:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `git push` 日志中，你将看到一条消息，表明由于启用了热部署，模块未被停止：
- en: '[PRE38]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works…
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Every time you make a change and push it to the OpenShift application gear,
    OpenShift first stops your gear (that is, all cartridges), copies the source code
    from your application Git repo to `app-root/runtime/repo`, performs a build, prepares
    the artifact, and finally starts your gear (that is, all cartridges). This process
    takes time and does not suit rapid development and deployment. To enable rapid
    development and faster deployments, OpenShift supports hot deployment. Hot deployment
    means that you can deploy your changes without the need to restart all the application
    cartridges.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你做出更改并推送到 OpenShift 应用环境时，OpenShift 首先会停止你的环境（即所有模块），将应用程序 Git 仓库中的源代码复制到`app-root/runtime/repo`，执行构建，准备好工件，最后启动环境（即所有模块）。这个过程需要一些时间，并不适合快速开发和部署。为了支持快速开发和更快的部署，OpenShift
    支持热部署。热部署意味着你可以在不需要重启所有应用模块的情况下部署你的更改。
- en: The presence of the `hot_deploy` marker file informs OpenShift that you want
    to do hot deployment. Before stopping and starting the application cartridges,
    OpenShift checks for the existence of the `hot_deploy` marker file. If the `hot_deploy`
    marker file exists, OpenShift will not stop the cartridges, and changes will be
    deployed without cartridges restart. Hot deployment is ideal for development,
    and I recommend that you always use it during development.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`hot_deploy` 标记文件的存在告知 OpenShift 你希望执行热部署。在停止并启动应用模块之前，OpenShift 会检查 `hot_deploy`
    标记文件是否存在。如果该标记文件存在，OpenShift 将不会停止模块，并且更改会在不重启模块的情况下部署。热部署非常适合开发，我建议你在开发过程中始终使用它。'
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you set new environment variables with hot deployment enabled or install
    new cartridges, you have to restart the application to allow the server to pick
    the new environment variables.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你启用了热部署并设置了新的环境变量，或安装了新的模块，你必须重新启动应用程序以便服务器能够识别新的环境变量。
- en: See also
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating and deploying Express web applications using Node.js and MongoDB
    cartridges* recipe
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Node.js 和 MongoDB 模块创建并部署 Express Web 应用程序*教程'
- en: The *Configuring Node supervisor options* recipe
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置 Node supervisor 选项*教程'
- en: Creating and deploying Express web applications using Node.js and MongoDB cartridges
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 MongoDB 模块创建并部署 Express Web 应用程序
- en: In this recipe, you will build a Node.js application from scratch using the
    Express web framework and MongoDB. I have chosen Express because it is very easy
    to use and is a popular web framework in the Node community. You can run any other
    web framework, such as Geddy, on OpenShift as well.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，你将从零开始构建一个 Node.js 应用程序，使用 Express Web 框架和 MongoDB。我选择了 Express，因为它非常易于使用，并且是
    Node 社区中流行的 Web 框架。你也可以在 OpenShift 上运行其他任何 Web 框架，比如 Geddy。
- en: 'You will develop a job store application that will allow users to post job
    openings for a company. The application will be a single-page web application
    ([http://en.wikipedia.org/wiki/Single-page_application](http://en.wikipedia.org/wiki/Single-page_application))
    built using the Backbone.js ([http://backbonejs.org/](http://backbonejs.org/))
    frontend. The application can do the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你将开发一个职位存储应用程序，允许用户为公司发布职位空缺。该应用将是一个单页 Web 应用（[http://en.wikipedia.org/wiki/Single-page_application](http://en.wikipedia.org/wiki/Single-page_application)），使用
    Backbone.js 前端（[http://backbonejs.org/](http://backbonejs.org/)）构建。该应用可以执行以下操作：
- en: When a user goes to the `/` URL of the application, the user will see a list
    of companies stored in the MongoDB database. Behind the scenes, the Backbone.js-based
    frontend will make a REST HTTP GET (`'/api/v1/companies'`) call to fetch all the
    companies:![Creating and deploying Express web applications using Node.js and
    MongoDB cartridges](img/00105.jpeg)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户访问应用的 `/` URL 时，用户将看到存储在 MongoDB 数据库中的公司列表。在后台，基于 Backbone.js 的前端将发起一个 REST
    HTTP GET 请求 (`'/api/v1/companies'`) 来获取所有的公司：![创建和部署使用 Node.js 和 MongoDB 托管的 Express
    Web 应用](img/00105.jpeg)
- en: Users can create a new company by visiting `http://jobstore-{domain-name}.rhcloud.com/#companies/new`
    or by clicking on the **+** icon. This will render a form where users can enter
    details about the new company, as shown in the following screenshot. When a user
    submits the form, the Backbone.js-based frontend will make an HTTP POST call to
    the REST backend and data related to a company is stored in MongoDB:![Creating
    and deploying Express web applications using Node.js and MongoDB cartridges](img/00106.jpeg)
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以通过访问 `http://jobstore-{domain-name}.rhcloud.com/#companies/new` 或点击 **+**
    图标来创建新公司。这将呈现一个表单，用户可以在其中输入新公司详细信息，如下图所示。当用户提交表单时，基于 Backbone.js 的前端将向 REST 后端发起一个
    HTTP POST 请求，并将与公司相关的数据存储在 MongoDB 中：![创建和部署使用 Node.js 和 MongoDB 托管的 Express Web
    应用](img/00106.jpeg)
- en: When a user clicks on any company, they will see a list of job openings for
    that company. Behind the scenes, the Backbone.js-based frontend will make an HTTP
    GET (`'/api/v1/companies/company_id/jobs'`) call to fetch all the available jobs
    for the selected company using its ID. Have a look at the following screenshot:![Creating
    and deploying Express web applications using Node.js and MongoDB cartridges](img/00107.jpeg)
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户点击任何一家公司时，他们将看到该公司职位空缺的列表。在后台，基于 Backbone.js 的前端将发起一个 HTTP GET 请求 (`'/api/v1/companies/company_id/jobs'`)
    来获取所选公司所有可用的职位，使用其 ID。请查看以下截图：![创建和部署使用 Node.js 和 MongoDB 托管的 Express Web 应用](img/00107.jpeg)
- en: Users can post new jobs for a company by clicking on the **New Job** link. This
    will render a web form where users can enter their details. The Backbone.js-based
    frontend will make an HTTP POST call to the REST backend and data related to a
    job is stored in the MongoDB database:![Creating and deploying Express web applications
    using Node.js and MongoDB cartridges](img/00108.jpeg)
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以通过点击 **New Job** 链接来发布公司的新职位。这将呈现一个网页表单，用户可以在其中输入职位的详细信息。基于 Backbone.js
    的前端将向 REST 后端发起一个 HTTP POST 请求，并将与职位相关的数据存储在 MongoDB 数据库中：![创建和部署使用 Node.js 和
    MongoDB 托管的 Express Web 应用](img/00108.jpeg)
- en: The source code for the application is available on GitHub at [https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用的源代码可以在 GitHub 上找到，地址为 [https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express)。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node and MongoDB installed on your machine. You can get the latest installer
    of Node.js for your operating system from their official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
    You can get the latest installer of MongoDB for your operating system from their
    official website ([http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本指南，你需要在机器上安装rhc命令行客户端。有关详细信息，请参考[第1章](part0014_split_000.html#page "Chapter
    1. Getting Started with OpenShift")中的*安装OpenShift rhc命令行客户端*部分。此应用程序将消耗一个gear，因此如果你没有额外的gear来进行此指南，请使用`rhc
    delete app <app_name> --confirm`命令删除现有应用程序。要在本地机器上运行此应用程序，你需要在机器上安装Node和MongoDB。你可以从其官方网站获取适用于你操作系统的Node.js最新安装程序（[http://nodejs.org/download/](http://nodejs.org/download/)）。你可以从MongoDB官方网站获取适用于你操作系统的最新安装程序（[http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)）。
- en: How to do it…
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行操作…
- en: 'Open a new command-line terminal, and navigate to a convenient location where
    you want to create the application. Run the command shown as follows to create
    the job store application:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令行终端，导航到你希望创建应用程序的合适位置。运行如下命令以创建jobstore应用程序：
- en: '[PRE39]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This command will create an application named `jobstore` that uses Node.js and
    MongoDB cartridges.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将创建一个名为`jobstore`的应用程序，该应用程序使用Node.js和MongoDB组件。
- en: As the application will be built from scratch, we will delete the template source
    code generated by OpenShift. Change the directory to `jobstore`, and delete the
    following files and directories using the `rm` command on *nix machines. On Windows,
    you can use file explorer to delete the files and directories.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于该应用程序将从零开始构建，我们将删除OpenShift生成的模板源代码。将目录更改为`jobstore`，并使用`rm`命令删除以下文件和目录（适用于*nix机器）。在Windows上，你可以使用文件资源管理器删除文件和目录。
- en: '[PRE40]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add the `node_modules` directory to the `.gitignore` file by executing the
    following command:'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过执行以下命令将`node_modules`目录添加到`.gitignore`文件中：
- en: '[PRE41]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The Express team provides a project generator that you can use to create an
    Express template application. This generator will create an application skeleton
    using the latest Express version, that is, 4.2.0\. It makes it easy for developers
    to get started with Express application development. You can install the `express-generator`
    package globally by running the following command:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Express团队提供了一个项目生成器，你可以用它来创建一个Express模板应用程序。该生成器将使用最新的Express版本（即4.2.0）创建一个应用程序框架。它使开发者能够轻松开始Express应用程序的开发。你可以通过运行以下命令全局安装`express-generator`包：
- en: '[PRE42]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please make sure you install express-generator Version 4.2.0 or above. This
    recipe was written using express-generator Version 4.2.0\. You can check the version
    by typing the `express --version` command.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请确保安装express-generator 4.2.0或更高版本。此指南是基于express-generator 4.2.0编写的。你可以通过输入`express
    --version`命令来检查版本。
- en: 'Once the generator is installed globally, you can use the `express` command-line
    tool to generate projects anywhere on your machine. Please make sure you are in
    the `jobstore` directory, and create the project by running the following command:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦生成器全局安装完成，你可以使用`express`命令行工具在机器上的任何位置生成项目。请确保你位于`jobstore`目录，并通过运行以下命令创建项目：
- en: '[PRE43]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'To run this application on your local machine, you will have to first install
    all the dependencies using npm:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在本地机器上运行此应用程序，首先需要使用npm安装所有依赖项：
- en: '[PRE44]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, to run the application, use the following command:'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，运行应用程序，请使用以下命令：
- en: '[PRE45]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You can view the application in your favorite browser by visiting `http://127.0.0.1:3000/`.
    The generated application exposes two routes as specified in `app.js`:'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以通过访问`http://127.0.0.1:3000/`在你喜欢的浏览器中查看应用程序。生成的应用程序公开了`app.js`中指定的两个路由：
- en: '[PRE46]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: When a user makes a GET request to `/`, the index route callback, `routes`,
    is invoked. The `routes` callback is defined in `routes/index.js`. The callback
    renders the `index.ejs` view.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当用户发出对`/`的GET请求时，`routes`回调会被触发。`routes`回调定义在`routes/index.js`中。该回调渲染`index.ejs`视图。
- en: When a user makes a HTTP GET request to '/users', the users callback function
    is invoked. The default implementation just writes `respond with a resource` in
    the response body.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当用户向 `/users` 发起 HTTP GET 请求时，将调用 users 回调函数。默认实现只会在响应体中写入 `respond with a resource`。
- en: In our single-page web application, when a user makes an HTTP GET request to
    the application root URL, the Backbone.js-based frontend is rendered. Replace
    the content of `index.ejs` with `index.js` in the project's GitHub repository,
    [https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/blob/master/views/index.ejs](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/blob/master/views/index.ejs).
    Also, copy the `css` ([https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/css](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/css))
    and `js` ([https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/js](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/js))
    directory from the application's GitHub repository, [https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express),
    and place them inside the public directory.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的单页面 web 应用中，当用户向应用根 URL 发起 HTTP GET 请求时，将渲染基于 Backbone.js 的前端。将 `index.ejs`
    的内容替换为项目 GitHub 仓库中的 `index.js`，链接为 [https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/blob/master/views/index.ejs](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/blob/master/views/index.ejs)。此外，还需从应用的
    GitHub 仓库 [https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express)
    中复制 `css` ([https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/css](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/css))
    和 `js` ([https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/js](https://github.com/OpenShift-Cookbook/chapter9-jobstore-nodejs-express/tree/master/public/js))
    目录，并将它们放入公共目录中。
- en: Restart the application, and you will see the index route in action. This time
    it will render the application user interface.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重启应用程序后，你将看到索引路由正在运行。这一次，它将渲染应用程序的用户界面。
- en: 'The application does not need the `users.js` file in the `routes` directory,
    so delete it. After removing `routes/users.js`, remove its reference in the `app.js`
    file. You need to remove the following two lines from the `app.js` file:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该应用不再需要 `routes` 目录中的 `users.js` 文件，因此将其删除。删除 `routes/users.js` 后，还需在 `app.js`
    文件中移除其引用。你需要从 `app.js` 文件中删除以下两行：
- en: '[PRE47]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Create a new file named `api.js` inside the `routes` directory. This file will
    house the REST backend of our application. On *nix machines, you can create a
    new file using the `touch` command. On Windows, you can use file explorer to create
    the file.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `routes` 目录下创建一个名为 `api.js` 的新文件。该文件将包含我们应用的 REST 后端。在 *nix 系统中，你可以使用 `touch`
    命令创建新文件。在 Windows 系统中，可以通过文件资源管理器创建该文件。
- en: '[PRE48]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The application will use the MongoDB database for storing data. To work with
    MongoDB, you need to use a third-party library. For this application, you will
    use the `mongojs` module. Install the module using the npm command, as shown in
    the following command:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该应用将使用 MongoDB 数据库存储数据。为了与 MongoDB 交互，你需要使用一个第三方库。对于这个应用，你将使用 `mongojs` 模块。使用以下
    npm 命令安装该模块：
- en: '[PRE49]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The next step is configuring the MongoDB database so that our REST API can
    talk with MongoDB. Place the following code in `api.js`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是配置 MongoDB 数据库，以便我们的 REST API 可以与 MongoDB 进行交互。在 `api.js` 文件中放入以下代码：
- en: '[PRE50]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'As mentioned in this recipe introduction, there are two company-related operations—get
    all companies and store a company in the MongoDB database. These will be exposed
    as two routes in the `app.js` file, as shown in the following commands:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如本食谱介绍中提到的，有两个与公司相关的操作——获取所有公司和将公司存储到 MongoDB 数据库中。这些操作将作为两个路由暴露在 `app.js`
    文件中，如下所示：
- en: '[PRE51]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'When the HTTP GET request is made to `/api/v1/companies`, the `api.companies`
    callback will be called. The `api.companies` callback is defined in the `api.js`
    route file. This callback will make a `find` call on the `companies` collection.
    It will find all the companies in the MongoDB database and write them to the response
    object. Have a look at the following commands:'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当向 `/api/v1/companies` 发起 HTTP GET 请求时，将调用 `api.companies` 回调函数。`api.companies`
    回调在 `api.js` 路由文件中定义。该回调将在 `companies` 集合上执行 `find` 操作，查找 MongoDB 数据库中所有公司并将其写入响应对象。请看以下命令：
- en: '[PRE52]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Similarly, when the HTTP POST request is made to the `/api/v1/companies` URL,
    the `api.saveCompany` callback will be called. The `api.saveCompany` callback
    is defined in the `api.js` route file. The callback will create a `company` object
    from the request object and then persist the `company` object in the MongoDB database:'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似地，当 HTTP POST 请求发送到 `/api/v1/companies` URL 时，`api.saveCompany` 回调函数将被调用。`api.saveCompany`
    回调在 `api.js` 路由文件中定义。该回调将从请求对象中创建一个 `company` 对象，并将其持久化到 MongoDB 数据库中：
- en: '[PRE53]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Next, you will write REST endpoints to store and list the jobs data. There
    are two REST endpoints related to jobs—listing all jobs for a company and saving
    a job for a company. These will be exposed as two routes in `app.js`. Have a look
    at the following code:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将编写 REST 端点来存储和列出作业数据。有两个与作业相关的 REST 端点——列出某公司所有作业和保存某公司作业。这些将作为两个路由暴露在
    `app.js` 中。请看下面的代码：
- en: '[PRE54]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'When the HTTP GET request is made to `/api/v1/companies/:companyId/jobs`, the
    `jobsForCompany` callback will be called. This callback will find the company
    corresponding to `companyId` and then return the jobs embedded in the array:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 HTTP GET 请求发送到 `/api/v1/companies/:companyId/jobs` 时，`jobsForCompany` 回调函数将被调用。此回调将查找与
    `companyId` 对应的公司，然后返回嵌入在数组中的作业：
- en: '[PRE55]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'When a user makes the HTTP POST request to `/api/v1/companies/:companyId/jobs`,
    the `postJobForCompany` callback function will be called. This callback will be
    defined in the `api.js` routes file. This route will update the company document
    with the embedded job document. Finally, it will return the updated company document:'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当用户向`/api/v1/companies/:companyId/jobs`发起 HTTP POST 请求时，`postJobForCompany`
    回调函数将被调用。此回调将在 `api.js` 路由文件中定义。此路由将更新公司文档并嵌入作业文档。最后，它将返回更新后的公司文档：
- en: '[PRE56]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: To test the application on your local machine, start the MongoDB database server,
    and then restart the Node application.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在本地机器上测试应用程序，启动 MongoDB 数据库服务器，然后重新启动 Node 应用程序。
- en: 'To make this application run on OpenShift, you have to update the `bin/www`
    script:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使该应用程序在 OpenShift 上运行，你必须更新 `bin/www` 脚本：
- en: '[PRE57]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This code sets the correct IP address and port values so that the application
    can work on OpenShift.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码设置了正确的 IP 地址和端口值，以便应用程序可以在 OpenShift 上运行。
- en: 'Add the `node_modules` directory to the `.gitignore` file as follows:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `node_modules` 目录添加到 `.gitignore` 文件中，方法如下：
- en: '[PRE58]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Update the `package.json` main field value. This is required, because, otherwise,
    OpenShift will look for the `server.js` file. As this application does not have
    a `server.js` file, the application will not start. This was explained in the
    *Creating your first Node.js application* recipe:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `package.json` 中的 main 字段值。这是必要的，因为否则 OpenShift 会查找 `server.js` 文件。由于该应用程序没有
    `server.js` 文件，应用程序将无法启动。这一点在 *创建你的第一个 Node.js 应用程序* 的教程中已做解释：
- en: '[PRE59]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Add the changes to the Git index, commit the code to the local Git repository,
    and then finally push the changes to the application gear:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改添加到 Git 索引，提交代码到本地 Git 仓库，然后最终将更改推送到应用程序服务器：
- en: '[PRE60]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: After a successful build, changes will be deployed, and your application will
    be available at `http://jobstore-{domain-name}.rhcloud.com`.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功构建后，更改将被部署，并且你的应用程序将可以通过 `http://jobstore-{domain-name}.rhcloud.com` 访问。
- en: How it works…
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Let's now understand what we did in the previous steps. In step 3, you installed
    the **express-generator** module. In the previous version of Express, express-generator
    package was part of the Express module itself. Now, in the latest versions, you
    will have to install express-generator separately. This recipe was written using
    4.2.0\. This module is installed globally using the `-g` option to run the Express
    executable from any directory.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来理解一下我们在前面的步骤中做了什么。在第 3 步中，你安装了 **express-generator** 模块。在 Express 的早期版本中，express-generator
    包是 Express 模块的一部分。现在，在最新版本中，你需要单独安装 express-generator。此教程使用的是 4.2.0 版本。该模块是通过
    `-g` 选项全局安装的，以便能够从任何目录运行 Express 可执行文件。
- en: 'Next, in step 4, you generated the project inside the `jobstore` directory
    using the `express . --ejs --force` command. The command instructs Express to
    create the template in the current directory. The `--ejs` option tells Express
    to configure the app with the `ejs` template engine. Express supports almost all
    the template engines built for Node, but express-generator only supports `hogan`,
    `jade`, and `ejs`. The `--force` option instructs Express to forcefully create
    the project template inside a non-empty directory. If you don''t use the `--force`
    option, the generator will ask you for confirmation, as shown in the following
    code:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在第4步中，你使用`express . --ejs --force`命令在`jobstore`目录下生成了项目。该命令指示Express在当前目录创建模板。`--ejs`选项告诉Express使用`ejs`模板引擎来配置应用。Express支持几乎所有为Node构建的模板引擎，但express-generator仅支持`hogan`、`jade`和`ejs`。`--force`选项指示Express强制在非空目录中创建项目模板。如果不使用`--force`选项，生成器会要求你确认，如下所示：
- en: '[PRE61]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The `express` command generates a folder structure suitable for the Express
    web development as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`express`命令生成了一个适合Express Web开发的文件夹结构，如下所示：'
- en: '[PRE62]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The `package.json` file is an application descriptor file based on CommonJS
    ([http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS)).
    It contains application metadata and its dependencies. The `npm install` command
    parses the dependencies mentioned in `package.json` and installs them in the `node_modules`
    directory.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`文件是基于CommonJS的应用描述文件 ([http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS))。它包含应用元数据及其依赖项。`npm
    install`命令解析`package.json`中提到的依赖项，并将它们安装到`node_modules`目录中。'
- en: The `app.js` file configures the Express framework along with Connect middleware
    components. The application server startup boilerplate is defined inside the `bin/www`
    script. This is a Node script that creates an Express web server and binds it
    to a 3000 port number. To run the application, you can use either the `./bin/www`
    or `npm start` command.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.js`文件配置了Express框架以及Connect中间件组件。应用服务器启动的模板定义在`bin/www`脚本中。这是一个Node脚本，用于创建一个Express
    Web服务器并将其绑定到3000端口。要运行应用程序，你可以使用`./bin/www`或`npm start`命令。'
- en: 'The Express command creates three other subdirectories apart from `bin`—`public`,
    `routes`, and `views`. The `public` directory houses all the static resources
    of the application. The `app.js` file configures the Express application to use
    the `public` directory for static files:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Express命令除了`bin`之外，还创建了另外三个子目录——`public`、`routes`和`views`。`public`目录存放了应用程序的所有静态资源。`app.js`文件配置Express应用以使用`public`目录中的静态文件：
- en: '[PRE63]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: In step 6, you copied the `css` and `js` directories from the project's GitHub
    repository.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6步中，你从项目的GitHub仓库复制了`css`和`js`目录。
- en: The `routes` directory has two files—`index.js` and `users.js`. Both these files
    are used by `app.js`. These files define callbacks that will be invoked when the
    user makes requests to the `http://jobstore-{domain-name}.rhcloud.com` and `http://jobstore-{domain-name}.rhcloud.com/users`
    URLs.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`routes`目录包含两个文件——`index.js`和`users.js`。这两个文件都被`app.js`使用。这些文件定义了当用户请求`http://jobstore-{domain-name}.rhcloud.com`和`http://jobstore-{domain-name}.rhcloud.com/users`
    URL时将调用的回调函数。'
- en: The `views` directory holds the template files that will be shown to the user.
    In step 6, you updated `index.ejs` with the one from the project's GitHub repository.
    As mentioned before, the view of the application is built using Backbone.js and
    will not be covered as it is outside the scope of this book.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`views`目录存放了将展示给用户的模板文件。在第6步中，你将`index.ejs`更新为来自项目GitHub仓库的版本。如前所述，应用程序的视图是使用Backbone.js构建的，关于视图部分的内容不在本书的讨论范围内。'
- en: From steps 7 through step 12, you defined the REST backend for the application.
    The application exposes a REST call backed by the MongoDB database, which is consumed
    by the Backbone.js frontend. You created a new file named `api.js` to define all
    the API callbacks. You installed the `mongojs` package so that you can work with
    the MongoDB database. You defined four methods in `api.js`—`companies`, `saveCompany`,
    `jobsForCompany`, and `postJobForCompany`. All the methods work on the MongoDB
    database asynchronously and write the database result to the response object.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 从第7步到第12步，你定义了该应用程序的REST后台。该应用程序暴露了一个由MongoDB数据库支持的REST调用，供Backbone.js前端使用。你创建了一个名为`api.js`的新文件，用于定义所有的API回调。你安装了`mongojs`包，以便可以与MongoDB数据库进行交互。你在`api.js`中定义了四个方法——`companies`、`saveCompany`、`jobsForCompany`和`postJobForCompany`。所有方法都异步操作MongoDB数据库，并将数据库结果写入响应对象。
- en: 'In `app.js`, you defined four routes for the REST endpoints. The callbacks
    are defined in `api.js` as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.js`中，你定义了四个REST端点的路由。回调函数在`api.js`中定义，如下所示：
- en: '[PRE64]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: After writing the backend logic, you updated the `bin/www` script so that it
    can bind and listen to the correct IP address and port when running on OpenShift.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写完后端逻辑后，你更新了`bin/www`脚本，以便在OpenShift上运行时能够绑定并监听正确的IP地址和端口。
- en: Finally, you committed the code and pushed the changes to the application gear.
    This will download all the dependencies mentioned in the `node_modules` directory
    and then restart the application with the updated code.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你提交了代码并将更改推送到应用的gear。这将下载`node_modules`目录中提到的所有依赖项，并使用更新后的代码重新启动应用。
- en: See also
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating your first Node.js application* recipe
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建你的第一个Node.js应用*示例'
- en: The *Enabling hot deployment for Node.js applications* recipe
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用Node.js应用的热部署*示例'
- en: The *Working with Web Sockets* recipe
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Web Sockets*示例'
- en: Working with Web Sockets
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Web Sockets
- en: HTTP was designed to be half-duplex, which means it allows transmission of data
    in just one direction at a time. This makes it unsuitable for building real-time
    applications that need an open, persistent connection always. To overcome this
    limitation of HTTP, developers have created some workarounds or hacks. Some of
    these workarounds are polling, long polling, and streaming.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP被设计为半双工，这意味着它一次只允许一个方向的数据传输。这使得它不适用于构建需要始终保持打开的持久连接的实时应用程序。为了克服HTTP的这一局限性，开发者创建了一些解决方法或变通方法。这些变通方法包括轮询、长轮询和流式传输。
- en: Web Sockets provide an asynchronous, bidirectional, full-duplex messaging implementation
    over a single TCP connection. In this recipe, you will learn how you can use Socket.IO
    and Express to create a simple echo application. The application simply reverses
    the message and echoes it back to the user browser.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Web Sockets提供了一个异步、双向、全双工的消息传递实现，所有通信都通过单一的TCP连接进行。在这个示例中，你将学习如何使用Socket.IO和Express来创建一个简单的回显应用。该应用简单地反转消息并将其回显到用户的浏览器。
- en: Getting ready
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from their official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，你需要在你的机器上安装rhc命令行客户端。详情请参考[第1章](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift")中的*安装OpenShift rhc命令行客户端*示例，*OpenShift入门*。此应用将消耗一个gear，因此如果你没有额外的gear可用，请使用`rhc
    delete app <app_name> --confirm`命令删除一个现有应用。要在本地机器上运行此应用，你需要在机器上安装Node。你可以从Node.js的官方网站（[http://nodejs.org/download/](http://nodejs.org/download/)）获取适合你操作系统的最新安装程序。
- en: How to do it…
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Perform the following steps to create an application that uses Web Sockets:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来创建一个使用Web Sockets的应用：
- en: 'Open a new command-line terminal, and navigate to a convenient location where
    you want to create the application. Run the following command to create the application:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令行终端，并导航到你希望创建应用的方便位置。运行以下命令以创建应用：
- en: '[PRE65]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Change the directory to `reverseecho`, and delete the template application
    source code:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`reverseecho`目录，并删除模板应用的源代码：
- en: '[PRE66]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Add the `node_modules` directory to the `.gitignore` file by executing the
    following command:'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过执行以下命令，将`node_modules`目录添加到`.gitignore`文件中：
- en: '[PRE67]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Create a `package.json` file:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`package.json`文件：
- en: '[PRE68]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Install the `express` and `socket.io` modules as follows:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式安装`express`和`socket.io`模块：
- en: '[PRE69]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Create a new file named `server.js` in the app root directory and populate
    it with the following code:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用根目录创建一个名为`server.js`的新文件，并填充以下代码：
- en: '[PRE70]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: In this code, you first created the Express server application instance. Then,
    you imported the Socket.IO library and started the Socket.IO server, providing
    it with the already-created Express server so that it can share the same TCP/IP
    address and port. You defined a couple of event listeners using the `io.sockets.on()`
    function. The `io.sockets.on()` function takes two arguments—the event name and
    a callback function. The event name can be any string, such as `'connection'`
    and `'message'`. The callback function defines work to perform when an event is
    received.
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这段代码中，首先创建了一个Express服务器应用实例。然后，导入了Socket.IO库并启动了Socket.IO服务器，提供已经创建的Express服务器，使其可以共享相同的TCP/IP地址和端口。你使用`io.sockets.on()`函数定义了一些事件监听器。`io.sockets.on()`函数接受两个参数——事件名称和回调函数。事件名称可以是任何字符串，例如`'connection'`和`'message'`。回调函数定义了在接收到事件时要执行的操作。
- en: Create `index.html` in the `app` root directory, and populate it with the following
    code. This page has one textbox where the user can enter any text and submit it
    to the server by pressing a button. The data is transferred to the server using
    Web Sockets.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`根目录下创建`index.html`，并用以下代码填充它。此页面有一个文本框，用户可以在其中输入任何文本，并通过按下按钮将其提交到服务器。数据通过Web
    Socket传输到服务器。
- en: '[PRE71]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This JavaScript code in the `index.html` file opens a Web Socket connection
    with the backend Node server deployed on OpenShift. In OpenShift, Web Sockets
    are not available over standard 80 and 443 ports because of the reasons outlined
    in the official OpenShift blog, [https://www.openshift.com/blogs/paas-websockets](https://www.openshift.com/blogs/paas-websockets),
    so you will have to use port numbers 8000 and 8443.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`index.html`文件中的这段JavaScript代码打开了与部署在OpenShift上的后端Node服务器的Web Socket连接。在OpenShift中，由于官方OpenShift博客中提到的原因，[https://www.openshift.com/blogs/paas-websockets](https://www.openshift.com/blogs/paas-websockets)，Web
    Socket不能通过标准的80和443端口使用，因此你需要使用端口号8000和8443。'
- en: 'Add the code to the Git index, commit the code to the local Git repository,
    and then finally push the changes to the application gear by executing the following
    commands:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码添加到Git索引，提交代码到本地Git仓库，然后通过执行以下命令将更改推送到应用程序环境：
- en: '[PRE72]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: After the code is deployed, you can see the application running at `http://reverseecho-{domain-name}.rhcloud.com`.
    If you type `OpenShift` and click on the **Reverse Echo** button, you will see
    **tfihSnepO** as the result. This is shown in the following screenshot:![How to
    do it…](img/00109.jpeg)
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署代码后，你可以看到应用运行在`http://reverseecho-{domain-name}.rhcloud.com`。如果你输入`OpenShift`并点击**Reverse
    Echo**按钮，你将看到**tfihSnepO**作为结果。如下所示的屏幕截图：[How to do it…](img/00109.jpeg)
- en: How it works…
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the previous steps, you built an echo server that will reverse the message
    sent by the user and send it back to the user. To build this application, you
    installed two modules —Socket.IO and Express as covered in step 3\. Socket.IO
    provides an API abstraction over the Web Sockets and other transports for the
    Node.js and client-side JavaScript. It will fall back to other alternatives transparently
    if Web Sockets is not implemented in a web browser while keeping the same API.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，你构建了一个回显服务器，该服务器会反转用户发送的消息并将其发送回用户。为了构建这个应用，你安装了两个模块——Socket.IO和Express，正如第3步所讲的那样。Socket.IO为Node.js和客户端JavaScript提供了Web
    Socket及其他传输的API抽象。如果Web Socket在浏览器中没有实现，它会透明地回退到其他替代方案，同时保持相同的API。
- en: 'The code listing shown in step 4 does the following:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步中显示的代码清单执行以下操作：
- en: It first imports the Express library using the `require()` function and then
    creates the server using the Express application object.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它首先使用`require()`函数导入Express库，然后使用Express应用对象创建服务器。
- en: Then, it imports the Socket.IO library and starts the Socket.IO server using
    the `listen()` function.
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，它导入了Socket.IO库，并使用`listen()`函数启动Socket.IO服务器。
- en: Next, you defined a route for the root URL, which will render `index.html` (created
    in the next step).
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，定义了根URL的路由，该路由将渲染`index.html`（在下一步中创建）。
- en: Lastly, you added event handlers for connection and message events. On the connection
    event, you will write a message in the server logs. On the message event, you
    will reverse the message and emit the `rev-message` event. The client will listen
    for the `rev-message` event and will render the user interface.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，添加了连接和消息事件的事件处理程序。在连接事件中，你将在服务器日志中写入一条消息。在消息事件中，你将反转消息并触发`rev-message`事件。客户端将监听`rev-message`事件，并渲染用户界面。
- en: 'In the listing shown in step 5, you created an `index.html` file using Twitter
    Bootstrap styling. The script tag does the following:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 5 步所示的列表中，你创建了一个使用 Twitter Bootstrap 样式的 `index.html` 文件。该 script 标签的作用如下：
- en: On page load, you connected with the Web Socket backend using the backend Web
    Socket URL. In OpenShift, Web Sockets are not available over standard 80 and 443
    ports because of the reasons outlined in this blog, so you will have to use port
    numbers 8000 and 8443\. You constructed the correct URL and then connected with
    Socket.IO backend.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面加载时，你使用后端 Web Socket URL 连接到 Web Socket 后端。在 OpenShift 中，由于本文博客中所述的原因，Web
    Sockets 无法通过标准的 80 和 443 端口使用，因此你必须使用端口号 8000 和 8443。你构建了正确的 URL，然后与 Socket.IO
    后端建立了连接。
- en: You added listeners for the `connect` and `rev-message` events.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你添加了 `connect` 和 `rev-message` 事件的监听器。
- en: When the `rev-message` event is received, you write the message in `results
    div`.
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当接收到 `rev-message` 事件时，你会将消息写入 `results div` 中。
- en: You added a jQuery event listener, which will emit the message event when the
    button is pressed. This message will be received by the Socket.IO server backend,
    and that will emit the `rev-message` event.
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你添加了一个 jQuery 事件监听器，当按钮被按下时，它会触发消息事件。该消息将被 Socket.IO 服务器后端接收，然后触发 `rev-message`
    事件。
- en: In step 7, you committed the code and pushed the changes to the application
    gear. This will download all the dependencies and restart the application with
    the updated code. Finally, in step 8, you tested the reverse echo functionality
    in your browser.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 7 步中，你提交了代码并将更改推送到应用程序 gear。这将下载所有依赖项，并用更新的代码重启应用程序。最后，在第 8 步中，你在浏览器中测试了反向回显功能。
- en: See also
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating and deploying Express web applications using Node.js and MongoDB
    cartridges* recipe
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Node.js 和 MongoDB 卡片创建和部署 Express Web 应用程序* 配方'
- en: The *Creating your first Node.js application* recipe
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建你的第一个 Node.js 应用程序* 配方'
- en: Using CoffeeScript with OpenShift Node.js applications
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 OpenShift Node.js 应用程序中使用 CoffeeScript
- en: In the last recipe of this chapter, you will learn how to use CoffeeScript with
    OpenShift Node.js applications. You will develop an Express web application in
    CoffeeScript and deploy it to OpenShift.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一个配方中，你将学习如何在 OpenShift Node.js 应用程序中使用 CoffeeScript。你将开发一个使用 CoffeeScript
    编写的 Express Web 应用程序，并将其部署到 OpenShift。
- en: Getting ready
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need the rhc command-line client installed
    on your machine. Please refer to the *Installing the OpenShift rhc command-line
    client* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*, for details. This
    application will consume one gear, so if you don't have an extra gear available
    for this recipe, use the `rhc delete app <app_name> --confirm` command to delete
    an existing application. To run this application on your local machine, you will
    need Node installed on your machine. You can get the latest installer of Node.js
    for your operating system from their official website ([http://nodejs.org/download/](http://nodejs.org/download/)).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 为完成此配方，你需要在你的机器上安装 rhc 命令行客户端。详细信息请参见 [第 1 章](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift")中的 *安装 OpenShift rhc 命令行客户端* 配方，*OpenShift 入门*。此应用程序将消耗一个
    gear，因此如果你没有额外的 gear 可用来完成此配方，请使用 `rhc delete app <app_name> --confirm` 命令删除现有应用程序。要在本地机器上运行此应用程序，你需要在机器上安装
    Node。你可以从 Node.js 的官方网站获取适用于你的操作系统的最新安装程序（[http://nodejs.org/download/](http://nodejs.org/download/)）。
- en: How to do it…
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to create a CoffeeScript Express application:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个 CoffeeScript Express 应用程序：
- en: 'Open a new command-line terminal, and navigate to a convenient location where
    you want to create the application. Run the following command to create the application:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令行终端，导航到你希望创建应用程序的位置。运行以下命令来创建应用程序：
- en: '[PRE73]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Change the directory to `myapp`, and delete the template application source
    code.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `myapp` 目录，并删除模板应用程序源代码。
- en: '[PRE74]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Add the `node_modules` directory to the `.gitignore` file by executing the
    following command:'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过执行以下命令将 `node_modules` 目录添加到 `.gitignore` 文件中：
- en: '[PRE75]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Create a `package.json` file to store your application metadata and dependencies
    as follows:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `package.json` 文件来存储你的应用程序元数据和依赖项，如下所示：
- en: '[PRE76]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Install CoffeeScript and Express modules using npm as follows:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 npm 安装 CoffeeScript 和 Express 模块，如下所示：
- en: '[PRE77]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Create a new file, `app.coffee`, and place the following contents in it. This
    is the `Hello World` Express web application written in CoffeeScript:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件 `app.coffee`，并在其中放入以下内容。这是使用 CoffeeScript 编写的 `Hello World` Express
    Web 应用程序：
- en: '[PRE78]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Create the `use_npm` marker file to tell OpenShift that you want to use the
    `npm start` command to run the application:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`use_npm`标记文件，以告知OpenShift你希望使用`npm start`命令来运行应用程序：
- en: '[PRE79]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Update the `package.json` file with the start script:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用启动脚本更新`package.json`文件：
- en: '[PRE80]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: This start script makes use of the `coffee` executable in the `node_modules
    .bin` directory. The `node_modules` directory is available inside the `$OPENSHIFT_REPO_DIR`
    directory.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该启动脚本利用了`node_modules/.bin`目录中的`coffee`可执行文件。`node_modules`目录位于`$OPENSHIFT_REPO_DIR`目录内。
- en: 'Add the code to the Git index, commit the code to the local Git repository,
    and then finally push the changes to the application gear by executing the following
    commands:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码添加到Git索引中，将代码提交到本地Git仓库，然后通过执行以下命令将更改推送到应用程序设备：
- en: '[PRE81]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: How it works…
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: CoffeeScript is a programming language that transcompiles to JavaScript. The
    Python programming language inspires the CoffeeScript syntax. As a result, the
    code written using CoffeeScript tends to be clean and readable inspires its syntax.
    Many developers that do not like JavaScript syntax prefer to use CoffeeScript
    to build their Node applications. From steps 1 through 5, you built a `Hello World`
    Express web application in CoffeeScript. To run the CoffeeScript code, you will
    need `coffee` executables from the `coffee-script` package. The `coffee` executable
    is inside the `node_modules/.bin` directory.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: CoffeeScript是一种编程语言，它将代码转译成JavaScript。CoffeeScript的语法灵感来自于Python编程语言。因此，使用CoffeeScript编写的代码往往简洁易读。许多不喜欢JavaScript语法的开发者更倾向于使用CoffeeScript来构建他们的Node应用程序。从第1步到第5步，你使用CoffeeScript构建了一个`Hello
    World` Express Web应用程序。要运行CoffeeScript代码，你需要来自`coffee-script`包的`coffee`可执行文件。`coffee`可执行文件位于`node_modules/.bin`目录中。
- en: To run CoffeeScript applications on the local machine, you can install the `coffee-script`
    module globally using the `npm install coffee-script -g` command. This will install
    the `coffee` executable globally, allowing you to run the `coffee` command anywhere
    on your machine. This does not work with OpenShift. If you push the code after
    step 5, the supervisor will fail to start the application, as it will not be able
    to find the `coffee` executable. The `use_npm` marker can solve this problem.
    As explained in the *Using the use_npm marker* recipe, with the `use_npm` marker,
    you can specify your own start script. OpenShift will use the start script in
    `package.json` to run your application. In step 7, you defined the start script
    that will use the `coffee` executable from the `$OPENSHIFT_REPO_DIR/node_modules/.bin`
    directory to run the application.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地机器上运行CoffeeScript应用程序，你可以使用`npm install coffee-script -g`命令全局安装`coffee-script`模块。这将全局安装`coffee`可执行文件，使你能够在任何地方运行`coffee`命令。但这在OpenShift中不起作用。如果你在第5步后推送代码，管理进程将无法启动应用程序，因为它找不到`coffee`可执行文件。`use_npm`标记可以解决这个问题。正如*使用use_npm标记*中的说明，通过`use_npm`标记，你可以指定自己的启动脚本。OpenShift将使用`package.json`中的启动脚本来运行应用程序。在第7步中，你定义了启动脚本，它将使用`$OPENSHIFT_REPO_DIR/node_modules/.bin`目录中的`coffee`可执行文件来运行应用程序。
- en: See also
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating and deploying Express web applications using Node.js and MongoDB
    cartridges* recipe
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Node.js和MongoDB组件创建并部署Express Web应用程序*食谱'
- en: The *Creating your first Node.js application* recipe
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建你的第一个Node.js应用程序*食谱'
