- en: Exploring Azure AD Identity Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll explore the different Azure AD identity services and
    AD FS as an on-premise identity service. We'll look at the Azure AD B2B and B2C
    functionality and explain the main concepts behind these technologies. Furthermore,
    we'll look at and extend the Azure AD Domain Services that we configured in [Chapter
    1](54c375d9-b7d0-4478-8777-33935239254b.xhtml), *Building and Managing Azure Active
    Dire**ctory*. To get the whole picture, we'll also view the different capabilities
    of the Active Directory Federation Services, and how they support different authentication
    scenarios. You will learn how to use the Azure AD B2B and B2C services for your
    projects, in order to provide suitable access to your applications for customers,
    partners, and internal employees. Particularly, you can use Azure AD B2C as a
    complete identity platform for your developed applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will be divided into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your lab environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Azure AD **Business to Business** (**B2B**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Azure AD **Business to Customer** (**B2C**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending Active Directory solutions with Azure AD Domain Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AD FS as an on-premise identity service for the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first section, we start preparing our lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your lab environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will need to have an additional Azure AD, configured with
    Office 365, to test the different features. You already know how to create this
    configuration from [Chapter 1](54c375d9-b7d0-4478-8777-33935239254b.xhtml), *Building
    and Managing Azure Active Directory**. *Build this additional tenant with a minimum
    set of configurations. Basically, you''ll need to have a custom domain verified
    and registered, and nothing else. Furthermore, you will need to install Visual
    Studio 2017 Community with the ASP.NET and web development workload on your administrative
    workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f186b00-0296-4ea8-a9d2-2f16fd0ba48d.png)'
  prefs: []
  type: TYPE_IMG
- en: Lab environment overview
  prefs: []
  type: TYPE_NORMAL
- en: To configure the Azure AD Domain Services LDAPS use case, you need to provide
    a public SSL certificate. You can use the procedure from [Chapter 7](468509fa-856c-411d-abdb-e9a39c266750.xhtml),
    *Deploying Solutions on Azure AD and AD FS*, to generate certificates for your
    needs with Let's Encrypt solution. We'll start with the Azure AD B2B functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Azure AD B2B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure AD B2B solves the problem of collaboration between business partners.
    It allows users to share business applications between partners, without going
    through inter-company federation relationships and internally-managed partner
    identities. With Azure AD B2B, you can create cross-company relationships by inviting
    and authorizing users from partner companies to access your resources. With this
    process, each company federates once, with Azure AD, and each user is then represented
    by a single Azure AD account. This option also provides a higher security level,
    because if a user leaves the partner organization, access is automatically disallowed.
    Inside of Azure AD, the user will be handled as a guest, and they won't be able
    to traverse other users in the directory. Permissions of the invited user will
    be provided over the correct associated group membership.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the process of enabling business partners to access
    your applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/adca06a2-b987-4aef-816d-4581782a6ca4.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD B2B invitation flows
  prefs: []
  type: TYPE_NORMAL
- en: In the case of **FLOW 1**, the user will be able to sign in to the partner organization
    after they accept, and consent to, the invitation.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of **FLOW 2**, the user signs up for their own Azure Active Directory
    and will be added to the Azure AD from which the invitation process was started.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the service at [https://docs.microsoft.com/en-us/azure/active-directory/b2b/what-is-b2b](https://docs.microsoft.com/en-us/azure/active-directory/b2b/what-is-b2b).
    In [Chapter 11](c2cd3ca9-8110-49fe-893e-3f4078ee9e26.xhtml), *Creating Identity
    Life Cycle Management on Azure*, we'll provide the configuration tasks for the
    complete guest-management life cycle, which includes the Azure AD B2B portal,
    using Azure MFA, conditional access, and access reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Providing resource access to external partners (on-premise)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the following on-premise configuration, we can provide resource access
    to external partners. You can use AD FS for this task, to allow employees and
    customers or partners to access your claims-aware applications. We can achieve
    the goal of providing federated B2B access by configuring federation partners.
  prefs: []
  type: TYPE_NORMAL
- en: 'The design and the traffic flow are shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80a6590d-7671-4c16-9dfe-317c0af3a41b.png)'
  prefs: []
  type: TYPE_IMG
- en: ADFS B2B configuration
  prefs: []
  type: TYPE_NORMAL
- en: Another capability of Active Directory Federation Service is the ability to
    support active clients using the **WS-Trust** specifications. This allows your
    client software to interact with the different players in such a scenario, without
    relying on browser redirects to locate the claims provider, resource provider,
    or other relevant components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The flow runs in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Requesting Service** (software on client) queries the **Target Service**
    and requests a list of policy requirements. This includes a list of required claims
    and the STS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TheRequesting Service queries the **Relying Party STS** for policies. This includes
    the list of claims providers that the STS trusts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TheRequesting Service queries the **Claims Provider STS** for the list of policies.
    This includes the required authentication method and other information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TheRequesting Service receives all of the policy information; the client will
    request a token from the **C****laims Provider** (**CP**). This is a direct connection
    to the CP using **SOAP over HTTPS**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **CP** authenticates the user and returns a token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TheRequesting Service receives the token; a token will be directly requested
    from the **Relying Party** (**RP**) using SOAP over HTTPS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Relying Party Federation** Server signs the token and sends it back to
    the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Requesting Service receives** the token that has been issued and signed
    by the **Relying Party STS**. It submits the token to the target services and
    receives a response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8051c144-6f62-44b9-91f0-67254195437d.png)'
  prefs: []
  type: TYPE_IMG
- en: WS-trust flow
  prefs: []
  type: TYPE_NORMAL
- en: Remember that this on-premise extension can always be supported and used with
    Azure Identity and Access Management services.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Azure AD B2C
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure AD B2C builds a complete identity-management framework for developers
    and supports signing in to your application using social networks, such as Facebook,
    Google, or LinkedIn, and creating developed accounts with usernames and passwords
    specifically for your company-owned application. Self-service password management
    and profile management are also provided. Additionally, Azure MFA introduces a
    higher grade of security to the solution. Principally, this feature allows for
    small, medium, and large companies to hold their customers in a separate Azure
    Active Directory, with all the capabilities, and more, in a similar way to the
    corporate-managed Azure Active Directory. With different verification options,
    you are also able to provide the necessary identity assurance required for more
    sensible transactions. Azure AD B2C takes care of all of the IAM tasks for your
    own development activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, the minimum architecture with the usage of Azure AD B2C looks like
    the following example. As we already mentioned, Azure AD B2C provides the identity-management
    framework for your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a291032e-0aa6-4c8d-a7eb-56d00f615397.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD B2C basic concepts
  prefs: []
  type: TYPE_NORMAL
- en: To get a better understanding of Azure AD B2C, we'll build an example application
    from Microsoft that provides a small web application, including a web API. This
    application is a good starting point to get deeper into Azure AD B2C. We highly
    recommend building it in your lab environment. The application can also run against
    a predefined demo environment. You will find the source at [https://github.com/Azure-Samples/active-directory-b2c-dotnet-webapp-and-webapi#Using-the-demo-environment](https://github.com/Azure-Samples/active-directory-b2c-dotnet-webapp-and-webapi#Using-the-demo-environment).
  prefs: []
  type: TYPE_NORMAL
- en: We recommend working through the following Azure AD B2C introduction before
    you start the lab activities: [https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-overview](https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-overview)
  prefs: []
  type: TYPE_NORMAL
- en: Let's start our journey and log in to our administrative workstation.
  prefs: []
  type: TYPE_NORMAL
- en: We'll do all of the Azure AD B2C tasks on the first full-blown Azure AD that
    we created.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will create the Azure AD B2C tenant.
  prefs: []
  type: TYPE_NORMAL
- en: Azure AD B2C tenant creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know the basic concept of Azure AD B2C, we will start our configuration
    for the test application that uses Azure AD B2C to provide the identity platform:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a shell or command line in your Visual Studio project folder, in my case
    `C:\Users\jochen.nickel\Documents\Visual Studio 2017\Projects`, and execute the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create the **Azure AD B2C directory**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Azure Portal ([https://portal.azure.com](https://portal.azure.com))
    with global administrator credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the search option to find the Azure AD B2C blade to view the service that
    we''ll create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ccf4d5eb-89e7-424c-aa44-7458ee85ad15.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD B2C creation procedure
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create a resource in the top-left corner of the Azure portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Identity and choose Azure Active Directory B2C:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/037e5dda-3095-4a09-9b32-26d9a3a952ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose Azure AD B2C
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Create a new Azure AD B2C Tenant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0693f86b-8923-424e-aa3b-f3c988aa827b.png)'
  prefs: []
  type: TYPE_IMG
- en: Create the new Azure AD B2C tenant
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `YOURDOMAIN1` and `YOURDOMAINB2C` values for your demo environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/087afe05-7684-44dc-97ba-be18e038d85a.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD B2C properties
  prefs: []
  type: TYPE_NORMAL
- en: 'Link the new Azure AD B2C to our Azure subscription:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8624929-7cf3-471a-8a8b-f41c4aedddd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Linking the Azure AD B2C tenant
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch the directory to use the new Azure AD B2C tenant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f5392e27-b426-4096-951a-00f80e413d32.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD directory switching
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the Azure AD B2C directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e512e211-6e95-4429-85fe-0382b2efffba.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose the newly created Azure AD B2C tenant
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Azure AD B2C blade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21a2b993-cc5e-4a99-a301-51be0ddb5b63.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD B2C overview page
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will configure the demo application in Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: Demo app registration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we''ll register the new `Demo Web App` and the Web AppAPI under application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the web app, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94e7d831-7d91-4953-8417-2350e7bfdfda.png)'
  prefs: []
  type: TYPE_IMG
- en: Provide the app properties
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an app key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3e47636-fdbc-4e25-94b5-d91544aa759f.png)'
  prefs: []
  type: TYPE_IMG
- en: App key generation process
  prefs: []
  type: TYPE_NORMAL
- en: Copy the key value to a notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the app ID under the properties section to the notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the second app for the Web App API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the values, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36fa302a-7db7-4f93-a277-6105bbc65cae.png)'
  prefs: []
  type: TYPE_IMG
- en: Register the second application with properties
  prefs: []
  type: TYPE_NORMAL
- en: Copy the App ID URI (optional) to the notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the Published scopes of the web API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hello.Write | Write access to hello
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hello.Read | Read access to hello:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/235e4f28-b3db-401d-9486-8a36dfcfd5df.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining scopes
  prefs: []
  type: TYPE_NORMAL
- en: Change to the Web App and API access section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Add and select the Demo Web API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ddfd61d-9465-4362-89ff-45dfd4e8b050.png)'
  prefs: []
  type: TYPE_IMG
- en: Define the app access
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be presented with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/979fd52b-2f60-4b45-a26e-df8f5f8d8712.png)'
  prefs: []
  type: TYPE_IMG
- en: API access result
  prefs: []
  type: TYPE_NORMAL
- en: 'You should have a notepad with the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can start the user flow creation in Azure AD B2C.
  prefs: []
  type: TYPE_NORMAL
- en: User flow creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following section, we will configure the first user flow in Azure AD
    B2C to get a user sign-up process to the demo application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create our first user flow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to user flows (policies) and create your first flow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7dca4889-7a6c-48f0-ba48-b762825e6171.png)'
  prefs: []
  type: TYPE_IMG
- en: New user flow creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the Sign up and sign in option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/659bdb77-c731-4682-b813-ba5198d50056.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the Sign up and sign in option
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following values for the flow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90bfcf98-1fe3-4cd9-99fc-270c3ad8ad23.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining the flow properties
  prefs: []
  type: TYPE_NORMAL
- en: 'And the following attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e8c9318f-1941-432c-a0cc-f322cb464beb.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the attributes that will be collected and will also return a claim
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have prepared the Sign up and sign in options, we can start to modify
    the demo application code.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio code modification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the newly created user flow, we need to modify the demo application code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `TaskWebApp` project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `web.config` file from `TaskWebApp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the following keys and replace them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ida:Tenant`, with your tenant name, `yourdomainb2c.onmicrosoft.com`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ida:ClientId`, with the app ID from the notepad'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ida:ClientSecret`, with your key from the notepad'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ida:SignUpSignInPolicyId`, with `b2c_1_SiUpIn`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Comment out the following entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncomment the following entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the `api:ApiIdentifier` key value to the app ID URI of the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a81ab074-d9f1-449d-8ac8-f49ef4f90dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Modified code reference
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `TaskService` project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Web.config` file from the `TaskService` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the following keys and replace them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ida:Tenant`, with your `yourdomainb2c.onmicrosoft.com`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ida:ClientId`, with the application ID from your web API'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ida:SignUpSignInPolicyId`, with `b2c_1_SiUpIn`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api:ReadScope`, with `Hello.Read`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api:WriteScope`, with `Hello.Write`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61e626ca-3091-43f2-aa04-ed2a500eab1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Modified code reference
  prefs: []
  type: TYPE_NORMAL
- en: 'The Visual Studio Startup Project modification is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Solution Explorer and right-click on Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Common Properties, go to Startup Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b127c982-4376-485b-b007-68240eb25fc0.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the project start up options
  prefs: []
  type: TYPE_NORMAL
- en: 'Press *F5* in Visual Studio to start both the Web App and the Web App API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/532bda90-6f96-453a-aa5d-49599549c63b.png)'
  prefs: []
  type: TYPE_IMG
- en: Started applications view
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Sign up/Sign In on the web app, and Azure AD B2C will come into the
    game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0fe711b8-1ff2-46ce-91e4-101892114ed2.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing the user flow
  prefs: []
  type: TYPE_NORMAL
- en: Click on Sign up now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter your details and click on Send verification code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2780ae59-f3cb-4022-9145-c905d5132f80.png)'
  prefs: []
  type: TYPE_IMG
- en: Providing the required data
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll receive an email with the verification code, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22634846-deb7-4c57-902b-9d38de834654.png)'
  prefs: []
  type: TYPE_IMG
- en: Get your verification code
  prefs: []
  type: TYPE_NORMAL
- en: Verify and create the account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Azure MFA will now come into the game; provide your preferred verification
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f57a770-f6be-4faa-8975-ef3ec3c8b407.png)'
  prefs: []
  type: TYPE_IMG
- en: Providing your verification
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ve successfully signed in, and you can view your claims:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53f10f96-6cda-4947-b2c7-4f71a86c8c8a.png)'
  prefs: []
  type: TYPE_IMG
- en: Successful login on the demo app, including the provided claims
  prefs: []
  type: TYPE_NORMAL
- en: Yeah! Well done. You can dive deeper into Azure AD B2C at [https://docs.microsoft.com/en-us/azure/active-directory-b2c/](https://docs.microsoft.com/en-us/azure/active-directory-b2c/)[.](https://bit.ly/2AVqifY)
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Azure AD B2B and B2C
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basically, both of the Azure AD services allow you to work with external users.
    Azure AD B2B focuses on the business to simplify the collaboration process with
    the secure sharing of information and resources. It takes care of the federation
    between the organizations and allows for a simple invitation-and-redemption process
    with different account types, such as school and work accounts, or simply an email
    account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure AD B2C focuses on developers that create customer-facing apps. Developers
    get a full-featured identity system for their applications. Azure AD B2C provides
    a local repository and the sign-in experience with many other identity providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Azure AD B2B** | **Azure AD B2C** |'
  prefs: []
  type: TYPE_TB
- en: '| Authentication of users from partner organizations | Customer access with
    mobile and web apps |'
  prefs: []
  type: TYPE_TB
- en: '| Partner life cycle = host and inviting organizations, including access reviews
    | Customer life cycle = self-service or application-managed |'
  prefs: []
  type: TYPE_TB
- en: '| Supports work or school accounts, or any email address | Supports local user
    application accounts or supported identity providers |'
  prefs: []
  type: TYPE_TB
- en: '| Supports SSO to all Azure AD connected applications | Supports SSO to customer-owned
    applications within the Azure AD B2C tenants |'
  prefs: []
  type: TYPE_TB
- en: '| Security policy managed by both organizations | Security policy managed by
    the application |'
  prefs: []
  type: TYPE_TB
- en: '| Branding managed by both organizations | Branding managed by the application
    |'
  prefs: []
  type: TYPE_TB
- en: '| Partner users are included in the same Azure AD, by default, with the guest
    user type | Managed separately from the organization or partner Azure AD |'
  prefs: []
  type: TYPE_TB
- en: In the next section, we'll compare AD FS against the two services, to provide
    you with a global view.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing AD FS with Azure B2B and B2C
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll provide you with some helpful information so that you
    can differentiate between AD FS and the Azure AD B2B and B2C functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with the main differences between AD FS and the Azure B2B scenario.
    With Azure AD B2B comes the capability to invite users from partner organizations
    to access applications on your own Azure AD instance. With AD FS, you can provide
    the same functionality, with CP trusts, to any partner organization that's based
    on AD FS.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you will hit the following differences:'
  prefs: []
  type: TYPE_NORMAL
- en: With AD FS, you have a lot of flexibility, and can run any customized scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following requirements need to be fulfilled:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Partner requires the Federation Service
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate handling
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Administrative overhead
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With **Azure AD B2B**, there is an easy invitation process. The feature is available
    for free, or by using a **5.1 ratio** if basic or premium features are used, and
    the partner doesn't need to fulfill any requirements—invitations for Azure AD
    and locally-based directory users, including social identities, are possible.
  prefs: []
  type: TYPE_NORMAL
- en: The admin controls all of the access to your corporate apps through your Azure
    AD directory. When collaboration is terminated, partner users can be removed from
    your Azure AD, and their access to your apps will immediately be revoked. Access
    reviews can be used to manage the life cycles of guest users. Additionally, when
    a partner user leaves the partner organization, access is automatically lost if
    the partner organizations uses a native Azure AD and not an AdHoc (unmanaged Azure
    AD tenant).
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that if you still want to use AD FS for B2B, you will need to manage
    the whole life cycle of the guest user's account.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing that we will discuss is the difference between AD FS and Azure
    AD B2C. You have two main scenarios that you can run. First, you can handle customer
    accounts and an on-premise identity store, and the authentication can be managed
    by AD FS. This scenario is helpful if you want to have full control in your own
    environment. But you also need to provide several processes and technologies to
    support such a scenario—and this is for the whole year.
  prefs: []
  type: TYPE_NORMAL
- en: The other option is that customers can sign up or bring their own consumer identities
    with Azure AD B2C, so you will receive a fully-manageable solution with high availability
    and the most common processes and support functionalities already implemented.
  prefs: []
  type: TYPE_NORMAL
- en: AD FS delivers a very flexible and customizable solution in your own environment,
    but you have to integrate social media providers and build trust relationships,
    so that the users can bring their own identities. As we already mentioned, user
    management and self-servicing have to be built and provided with high availability.
  prefs: []
  type: TYPE_NORMAL
- en: With Azure AD B2C, you receive a fully-packed solution, which allows for the
    developer of a business application to use the whole identity framework of Azure
    AD and the B2C extensions. Sign-up pages are ready to use, or users can bring
    their own identities (Google, Live, Facebook, and so on), and you can enable self-servicing
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Active Directory solutions with Azure AD Domain Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure AD Domain Services helps you to move your on-premise applications, depending on
    traditional authentication methods, such as Kerberos and NTLM, to the cloud. This
    cloud-based service allows you to join your IaaS virtual machines to a managed
    domain without the need to provide domain controllers on virtual machines. With
    this solution, you can integrate your applications directly in your Azure Active
    Directory services and benefit from the rich feature set. With the synchronization
    of the Azure AD users to Azure AD DS, you can use identities to provide authentication
    and authorization. You're also able to connect by **Lightweight Directory Access
    Protocol** (**LDAP/S**) to the directory service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the integration scenario, from the perspective
    of an application installed on an IaaS virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5847465d-3676-4d90-b74c-7ac1ffbfadb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure AD Domain Services overview
  prefs: []
  type: TYPE_NORMAL
- en: This service provides you with a flat organizational unit structure and group
    policies, by default, for managing the domain-joined server systems. Generally,
    it's not a good idea to join client computers in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The service is used to help you with the integration of the following systems:'
  prefs: []
  type: TYPE_NORMAL
- en: NAS systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Print solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also lifts your on-premise services to Azure if they aren't claims-enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration shows you how to extend the solution from [Chapter
    1](54c375d9-b7d0-4478-8777-33935239254b.xhtml), *Building and Managing Azure Active
    Directory*, where we first enabled the service. To configure this solution, you
    will need to have a certificate. Refer to [Chapter 8](efbe1917-c755-4449-b29e-fa4a21e819fd.xhtml),
    *Using the Azure AD App Proxy and the Web Application Proxy*, to find instructions
    for creating a certificate for this purpose. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://portal.azure.com](https://portal.azure.com) on the Azure
    AD Domain Services blade.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose Secure LDAP and Enable the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/075ad8cb-9748-4433-8fe2-56c43e90856f.png)'
  prefs: []
  type: TYPE_IMG
- en: Secure LDAP activation procedure
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the Allow secure LDAP access over the internet, and upload the certificate,
    including the private key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0b938e07-5335-40d2-8723-00ac17b530eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Providing the certificate
  prefs: []
  type: TYPE_NORMAL
- en: Create a new LDAPS security rule in the network security group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a rule with your source IP and the Azure AD DS destination network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4cc813b5-6bb4-4581-bd3e-0aa1db006843.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the firewall rules to allow LDAPS
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the LDAPS service with your preferred LDAP browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a2aaad63-c812-44bf-98a9-6e205e107014.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing the LDAPS connection
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the LDAPS configuration at [https://docs.microsoft.com/en-us/azure/active-directory-domain-services/active-directory-ds-admin-guide-configure-secure-ldap](https://docs.microsoft.com/en-us/azure/active-directory-domain-services/active-directory-ds-admin-guide-configure-secure-ldap).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll discuss how to use AD FS as an on-premise identity
    service for the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: AD FS as an on-premise identity service for the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authenticating users in multi-forest environments is just a bit more complex
    than doing it in a typical single-forest deployment. You should already be aware
    of the basics of the different authentication protocols and AD FS, thanks to previous
    chapters. The configuration of the integration with Office 365 is a straightforward
    process; with the `Convert-MsolDomainToFederated` command, you can create everything
    that's needed in your AD FS configuration. With the `SupportMultipleDomain` switch,
    you can define whether you're using a multi-forest scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll start with the supported and possible scenarios in the case of using
    multiple forests and Office 365\. We'll focus on the AD FS server deployment.
    Furthermore, you can always attach an AD FS proxy/WAP to these scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will cover the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: A typical single-forest deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two or more Active Directory forests running separate AD FS instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running one AD FS instance for multiple trusted forests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting one AD FS instance for multiple Active Directory forests without
    an AD trust relationship
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a local CP trust to support multiple Active Directory forests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a shared Active Directory environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Cloud Solution Provider summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typical single-forest deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This scenario is a commonly seen configuration in smaller and medium-sized
    organizations; it''s a one-forest scenario with AD FS authentication to Office
    365\. You can use one or more UPNs with the related verified UPN domains:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca657763-f2a0-4807-92bd-d109585a725d.png)'
  prefs: []
  type: TYPE_IMG
- en: Single-forest deployment
  prefs: []
  type: TYPE_NORMAL
- en: We will follow up with the multiple AD forest scenarios in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Two or more Active Directory forests running separate AD FS instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This scenario is commonly used if there are no Active Directory trust relationships
    and CP trusts are in place. Every Active Directory forest holds its own AD FS server
    and responds to their own UPN. The administrator only needs to configure a unique
    UPN suffix. Azure AD Connect will do the relevant identity synchronization for
    the different forests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cb52f5b-59dc-4540-b4ab-a9194563d270.png)'
  prefs: []
  type: TYPE_IMG
- en: Two or more Active Directory forests running separate AD FS instances
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss a one-instance ADFS scenario for multiple
    forests.
  prefs: []
  type: TYPE_NORMAL
- en: Running one AD FS instance for multiple trusted forests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many organizations run several Active Directory forests. If a single authentication
    point is provided, one option is to work with an Active Directory **Trust Relationship**.
    With this design solution, every forest can use one AD FS environment, and all
    UPNs are running against this environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee4bce0d-e147-4884-aab1-db2a2983a05c.png)'
  prefs: []
  type: TYPE_IMG
- en: One AD FS instance for multiple trusted forests
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss the one ADFS instance approach for multiple forests without
    trust relationships.
  prefs: []
  type: TYPE_NORMAL
- en: One AD FS instance for multiple Active Directory forests without an AD trust
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another option for supporting multiple forests is to work with a CP trust,
    if Active Directory trust relationships can''t be used. In this scenario, the
    AD FS server works, by default, against its own Active Directory forest. The AD
    FS server will also be configured to ask another AD FS for specific UPNs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d91cbfe2-c7d8-4025-a736-2afc2c17bd0b.png)'
  prefs: []
  type: TYPE_IMG
- en: One AD FS instance for multiple Active Directory forests without an AD trust
  prefs: []
  type: TYPE_NORMAL
- en: In the next steps, we will discuss using the local claims provider trust to
    connect multiple AD forests.
  prefs: []
  type: TYPE_NORMAL
- en: Using a local CP trust to support multiple Active Directory forests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Beginning with AD FS 2016, you have the option of using a local CP trust to
    integrate additional forests. The only thing that you need to know is that you
    will lose automatic home-realm discovery for internal users. You can only provide
    a custom solution to do this for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4656d3b-ed3a-4db2-8ee0-0f211ec4eb27.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a local CP trust to support multiple Active Directory forests
  prefs: []
  type: TYPE_NORMAL
- en: 'You can configure the scenario with the following procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the credentials for the service account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the `HostName` to your domain controller, and use Port `636` if configured
    for a secure connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure your own identifier, like `urn:example`, and define your root user
    container, like `DC=EXAMPLE,DC=COM`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure additional claim rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the newly defined claim rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the display name of the Active Directory IDP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the relying party claims issuance policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will discuss using a shared AD environment.
  prefs: []
  type: TYPE_NORMAL
- en: Using a shared Active Directory environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In recent months, we've had several discussions about using a single forest
    environment with two Azure Active Directory tenants, including Office 365 services
    and an AD FS and Web Application Proxy combination. We often get these questions
    if the organization wants to use a separate Office 365 tenant, operated by 21Vianet
    or service providers that want to use a shared Active Directory infrastructure
    for small customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following solution design is based on the following supported AAD Connect
    topology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ffcf133-1f05-48d6-840b-f5800de65047.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a shared Active Directory environment
  prefs: []
  type: TYPE_NORMAL
- en: You can only use this option with AD FS or an equivalent product. Pass-Through
    Authentication won't work for this use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this topology, an AAD Connect instance is configured for a mutually-exclusive
    set of objects; for example, an organizational unit or domain. Furthermore, different
    domains and user principle names need to be used for this scenario, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A DNS name can only be registered in one Azure Active Directory (custom domains)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-to-one relationships between an Azure AD Connect synchronization server
    and one Azure Active Directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory instances are, by design, isolated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The requirement for a mutually-exclusive set of objects also applies to write-back.
    Some write-back features aren''t supported with this topology, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Group write-back with a default configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device write-back
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The solution''s design is based on the following key features:'
  prefs: []
  type: TYPE_NORMAL
- en: One single Active Directory forest, with organizational units based on regions
    or customers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users in the organizational units have the associated user principle names configured;
    for example, **OU APAC** uses the `@apac.inovitdemos.ch` UPN suffix or the **specific
    customer suffix**, such as `@azureid.ch`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two Azure AD Connect instances configured with the container filter, based on
    the organizational units.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One AD FS and Web Application Proxy combination, with the `login.inovit.ch`
    STS name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One Azure Active Directory Tenant with Office 365 services, called **Customer
    Tenant 1**, and the following registered custom domain name: `inovitdemos.ch`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One Azure Active Directory Tenant with Office 365 services, called **Customer
    Tenant 2**, and the `apac.inovitdemos.ch` or `azureid.ch` registered custom domain
    name:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/19526e2c-f61b-4ae4-86d4-62096af9f8d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Federation configuration overview
  prefs: []
  type: TYPE_NORMAL
- en: 'The following description provides the main configuration steps to implement
    this scenario in your environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration of the Federation Trust for Customer Tenant 1**: This task
    is a very common one, because you just need to open an evaluated PowerShell on
    the AD FS server and type the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Configuration of the Federation Trust for** **Customer Tenant 2**: You can''t
    use the same PowerShell command for the second tenant''s configuration. If you
    try, you''ll change the configuration completely to the second tenant. In this
    case, we need to use the `Set-MsolDomainAuthentication` command to configure the
    trust to the second tenant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Set-MsolDomainAuthentication` is typically used to configure Federation Trusts
    with other Identity Providers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the second Federation Trust, you need to export the AD FS token-signing
    certificate from the AD FS farm configuration. You can do this with the AD FS
    management console or the following PowerShell commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have exported the token-signing certificate, we can start to configure
    the Federation Trust for **Customer Tenant 2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: With this solution, you're also ready to solve other scenarios with the same
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Cloud Solution Provider summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following figure provides an overview of the best way to integrate and
    connect cloud services for Microsoft Cloud Service Providers. The most supported
    way is to use one Active Directory for the customer and connect a single Azure
    AD tenant, or move a small customer to a cloud-only scenario. Azure AD DS can
    be very helpful in such a scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f3e8f5d-1413-4742-bf31-aa29ae93b980.png)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft Cloud Solution Provider overview
  prefs: []
  type: TYPE_NORMAL
- en: The shared local Active Directory scenario can still be used, but with great
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you worked through the different Azure AD identity services,
    such as Azure AD B2B/B2C and the Domain Services. You also explored different
    options with AD FS as an identity service, in order to get the whole picture of
    a hybrid identity and the access-management world.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll dive into different application types and deployment
    methods, including more details about conditional access and other features that
    we can use.
  prefs: []
  type: TYPE_NORMAL
