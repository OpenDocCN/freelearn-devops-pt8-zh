["```\n    file {'/tmp/noop':\n      content => 'nothing',\n      mode    => 0644,\n    }\n    ```", "```\n    t@mylaptop ~/puppet/manifests $ puppet apply noop.pp --noop\n    Notice: Compiled catalog for mylaptop in environment production in 0.41 seconds\n    Notice: /Stage[main]/Main/File[/tmp/noop]/ensure: current_value absent, should be file (noop)\n    Notice: Class[Main]: Would have triggered 'refresh' from 1 events\n    Notice: Stage[main]: Would have triggered 'refresh' from 1 events\n    Notice: Finished catalog run in 0.02 seconds\n\n    ```", "```\n    t@mylaptop ~/puppet/manifests $ puppet apply noop.pp\n    Notice: Compiled catalog for mylaptop in environment production in 0.37 seconds\n    Notice: /Stage[main]/Main/File[/tmp/noop]/ensure: defined content as '{md5}3e47b75000b0924b6c9ba5759a7cf15d'\n\n    ```", "```\nroot@puppet: ~#puppet master --compile cookbook.example.com --debug --trace --logdest /tmp/cookbook.log\nDebug: Executing '/etc/puppet/cookbook.sh cookbook.example.com'\nDebug: Using cached facts for cookbook.example.com\nInfo: Caching node for cookbook.example.com\nDebug: importing '/etc/puppet/environments/production/modules/enc/manifests/init.pp' in environment production\nDebug: Automatically imported enc from enc into production\nNotice: Compiled catalog for cookbook.example.com in environment production in 0.09 seconds\nInfo: Caching catalog for cookbook.example.com\nDebug: Configuring PuppetDB terminuses with config file /etc/puppet/puppetdb.conf\nDebug: Using cached certificate for ca\nDebug: Using cached certificate for puppet\nDebug: Using cached certificate_revocation_list for ca\nInfo: 'replace catalog' command for cookbook.example.com submitted to PuppetDB with UUIDe2a655ca-bd81-4428-b70a-a3a76c5f15d1\n{\n \"metadata\": {\n \"api_version\": 1\n },\n \"data\": {\n \"edges\": [\n {\n \"target\": \"Class[main]\",\n \"source\": \"Stage[main]\"\n...\n\n```", "```\nNotice: /Stage[main]/Main/Exec[/bin/cat /tmp/missing]/returns: /bin/cat: /tmp/missing: No such file or directory\nError: /bin/cat /tmp/missing returned 1 instead of one of [0]\nError: /Stage[main]/Main/Exec[/bin/cat /tmp/missing]/returns: change from notrun to 0 failed: /bin/cat /tmp/missing returned 1 instead of one of [0]\n\n```", "```\n/bin/cat: /tmp/missing: No such file or directory\n\n```", "```\n    exec { 'exec with output':\n      command   => '/bin/cat /etc/hostname',\n    logoutput => true,\n    }\n    ```", "```\n    t@mylaptop ~/puppet/manifests $ puppet apply exec.pp\n    Notice: Compiled catalog for mylaptop in environment production in 0.46 seconds\n    Notice: /Stage[main]/Main/Exec[exec with outout]/returns: mylaptop\n    Notice: /Stage[main]/Main/Exec[exec with outout]/returns: executed successfully\n    Notice: Finished catalog run in 0.06 seconds\n\n    ```", "```\n    mylaptop\n\n    ```", "```\nExec {\nlogoutput => true,\n```", "```\nlogoutput => false,\n```", "```\nnotify { 'Got this far!': }\n\n```", "```\nnotice: Got this far!\n\n```", "```\nnotify { \"operatingsystem is ${::operatingsystem}\": }\n```", "```\nNotice: operatingsystem is Fedora\n\n```", "```\nnotify{\"failed exec on ${hostname}\": }->\nexec {'failing exec':\n  command   => \"/bin/grep ${hostname} /etc/hosts\",\nlogoutput => true,\n}\n```", "```\nnotify { 'Resource X has been applied':\n  require => Exec['failing exec'],\n}\n```", "```\nnotify {'failed exec failed': \n  require => Exec['failing exec']\n}\n```", "```\nt@mylaptop ~/puppet/manifests $ puppet apply fail.pp\n...\nError: /bin/grepmylaptop /etc/hosts returned 1 instead of one of [0]\nError: /Stage[main]/Main/Exec[failing exec]/returns: change from notrun to 0 failed: /bin/grepmylaptop /etc/hosts returned 1 instead of one of [0]\nNotice: /Stage[main]/Main/Notify[failed exec failed]: Dependency Exec[failing exec] has failures: true\nWarning: /Stage[main]/Main/Notify[failed exec failed]: Skipping because of failed dependencies\nNotice: Finished catalog run in 0.06 seconds\n\n```", "```\nreport = true\n```", "```\n/var/lib/puppet/reports/cookbook.example.com/201411230717.yaml\n```", "```\n[root@cookbook ~]# puppet agent -t --report\nNotice: Finished catalog run in 0.34 seconds\n\n```", "```\n[root@cookbook ~]# puppet agent -t --report --summarize\nNotice: Finished catalog run in 0.35 seconds\nChanges:\n Total: 2\nEvents:\n Total: 2\n Success: 2\nResources:\n Total: 10\n Changed: 2\n Out of sync: 2\nTime:\nFilebucket: 0.00\n Schedule: 0.00\n Notify: 0.00\nConfig retrieval: 0.94\n Total: 0.95\n Last run: 1416727357\nVersion:\nConfig: 1416727291\n Puppet: 3.7.3\n\n```", "```\n    t@mylaptop ~/puppet $ puppet doc --all --outputdir=/tmp/puppet --mode rdoc --modulepath=modules/\n\n    ```", "```\n# == Class: base\n#\n# Full description of class base here.\n#\n# === Parameters\n#\n# Document parameters here.â€©#\n# [*sample_parameter*]\n#   Explanation of what this parameter affects and what it defaults to.\n#   e.g. \"Specify one or more upstream ntp servers as an array.\"\n#\n# === Variables\n#\n# Here you should define a list of variables that this module would require.\n#\n# [*sample_variable*]\n#   Explanation of how this variable affects the funtion of this class and if\n#   it has a default. e.g. \"The parameter enc_ntp_servers must be set by the\n#   External Node Classifier as a comma separated list of hostnames.\" (Note,\n#   global variables should be avoided in favor of class parameters as\n#   of Puppet 2.6.)\n#\n# === Examples\n#\n#  class { base:\n#    servers => [ 'pool.ntp.org', 'ntp.local.company.com' ],\n#  }\n#\n# === Authors\n#\n# Author Name <author@domain.com>\n#\n# === Copyright\n#\n# Copyright 2014 Your name here, unless otherwise noted.\n#\nclass base {\n```", "```\nt@mylaptop ~ $ sudo puppet resource package graphviz ensure=installed\nNotice: /Package[graphviz]/ensure: created\npackage { 'graphviz':\n ensure => '2.34.0-9.fc20',\n}\n\n```", "```\n    ubuntu@cookbook:~/puppet$ mkdir modules/trifecta\n    ubuntu@cookbook:~/puppet$ mkdir modules/trifecta/manifests\n    ubuntu@cookbook:~/puppet$ mkdir modules/trifecta/files\n\n    ```", "```\n    class trifecta {\n      package { 'ntp':\n        ensure  => installed,\n        require => File['/etc/ntp.conf'],\n      }\n\n      service { 'ntp':\n        ensure  => running,\n        require => Package['ntp'],\n      }\n\n      file { '/etc/ntp.conf':\n        source  => 'puppet:///modules/trifecta/ntp.conf',\n        notify  => Service['ntp'],\n        require => Package['ntp'],\n      }\n    }\n    ```", "```\n    t@mylaptop~/puppet $ cd modules/trifecta/files\n    t@mylaptop~/puppet/modules/trifecta/files $ echo \"server 127.0.0.1\" >ntp.conf\n\n    ```", "```\n    include trifecta\n    ```", "```\n    t@mylaptop ~/puppet/manifests $ puppet apply trifecta.pp\n    Notice: Compiled catalog for mylaptop in environment production in 1.32 seconds\n    Error: Could not apply complete catalog: Found 1 dependency cycle:\n    (File[/etc/ntp.conf] => Package[ntp] => File[/etc/ntp.conf])\n    Try the '--graph' option and opening the resulting '.dot' file in OmniGraffle or GraphViz\n\n    ```", "```\n    t@mylaptop ~/puppet/manifests $ puppet apply trifecta.pp --graph\n    Notice: Compiled catalog for mylaptop in environment production in 1.26 seconds\n    Error: Could not apply complete catalog: Found 1 dependency cycle:\n    (File[/etc/ntp.conf] => Package[ntp] => File[/etc/ntp.conf])\n    Cycle graph written to /home/tuphill/.puppet/var/state/graphs/cycles.dot.\n    Notice: Finished catalog run in 0.03 seconds\n\n    ```", "```\n    t@mylaptop ~/puppet/manifests $ cd ~/.puppet/var/state/graphs\n    t@mylaptop ~/.puppet/var/state/graphs $ ls -l\n    total 16\n    -rw-rw-r--. 1 thomasthomas  121 Nov 23 23:11 cycles.dot\n    -rw-rw-r--. 1 thomasthomas 2885 Nov 23 23:11 expanded_relationships.dot\n    -rw-rw-r--. 1 thomasthomas 1557 Nov 23 23:11 relationships.dot\n    -rw-rw-r--. 1 thomasthomas 1680 Nov 23 23:11 resources.dot\n\n    ```", "```\n    ubuntu@cookbook:~/puppet$ dot -Tpng -o relationships.png /var/lib/puppet/state/graphs/relationships.dot\n\n    ```", "```\nclass trifecta {\n  package { 'ntp':\n    ensure  => installed,\n  }\n\n  service { 'ntp':\n    ensure  => running,\n    require => Package['ntp'],\n  }\n\n  file { '/etc/ntp.conf':\n    source  => 'puppet:///modules/trifecta/ntp.conf',\n    notify  => Service['ntp'],\n    require => Package['ntp'],\n  }\n}\n```", "```\nCould not retrieve file metadata for XXX: getaddrinfo: Name or service not known\n\n```", "```\nCould not evaluate: Could not retrieve information from environment production source(s) XXX\n\n```", "```\nError: Could not set 'file' on ensure: No such file or directory XXX\n\n```", "```\nchange from absent to file failed: Could not set 'file on ensure: No such file or directory\n\n```", "```\nundefined method 'closed?' for nil:NilClass\n\n```", "```\n[root@cookbook ~]# puppet agent -t --debug\n\n```", "```\nCould not parse for environment --- \"--- production\": Syntax error at end of file at line 1\n\n```", "```\nDuplicate definition: X is already defined in [file] at line Y; cannot redefine at [file] line Y\n\n```", "```\ndefine check_process() {\n  exec { 'is-process-running?':\n    command => \"/bin/ps ax |/bin/grep ${name} >/tmp/pslist.${name}.txt\",\n  }\n}\n\ncheck_process { 'exim': }\ncheck_process { 'nagios': }\n```", "```\nt@mylaptop ~$ puppet apply duplicate.pp\nError: Duplicate declaration: Exec[is-process-running?] is already declared in file duplicate.pp:4; cannot redeclare at duplicate.pp:4 on node cookbook.example.com\nError: Duplicate declaration: Exec[is-process-running?] is already declared in file duplicate.pp:4; cannot redeclare at duplicate.pp:4 on node cookbook.example.com\n\n```", "```\nexec { \"is-process-${name}-running?\":\n  command => \"/bin/ps ax |/bin/grep ${name} >/tmp/pslist.${name}.txt\",\n}\n```", "```\n\"is-process-${name}-running?\"\n```", "```\n[root@cookbook ~]# puppet config print |head -25\nreport_serialization_format = pson\nhostcsr = /var/lib/puppet/ssl/csr_cookbook.example.com.pem\nfiletimeout = 15\nmasterhttplog = /var/log/puppet/masterhttp.log\npluginsignore = .svn CVS .git\nldapclassattrs = puppetclass\ncertdir = /var/lib/puppet/ssl/certs\nignoreschedules = false\ndisable_per_environment_manifest = false\narchive_files = false\nhiera_config = /etc/puppet/hiera.yaml\nreq_bits = 4096\nclientyamldir = /var/lib/puppet/client_yaml\nevaltrace = false\nmodule_working_dir = /var/lib/puppet/puppet-module\ntags = \ncacrl = /var/lib/puppet/ssl/ca/ca_crl.pem\nmanifest = /etc/puppet/manifests/site.pp\ninventory_port = 8140\nignoreimport = false\ndbuser = puppet\npostrun_command = \ndocument_all = false\nsplaylimit = 1800\ncertificate_expire_warning = 5184000\n\n```", "```\n[root@cookbook ~]# puppet config print modulepath\n/etc/puppet/modules:/usr/share/puppet/modules\n\n```"]