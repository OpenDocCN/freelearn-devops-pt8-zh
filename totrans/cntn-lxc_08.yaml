- en: Chapter 8. Using LXC with OpenStack
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章：在 OpenStack 中使用 LXC
- en: In previous chapters, we looked at examples of common design patterns that help
    autoscale services running inside LXC containers by leveraging tools such as Jenkins,
    custom REST-based APIs, and monitoring tools. In this chapter, we'll explore a
    fully automated way of provisioning LXC containers on a set of servers, using
    OpenStack.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们探讨了利用 Jenkins、自定义 REST API 和监控工具等工具帮助自动扩展 LXC 容器中运行的服务的常见设计模式示例。在本章中，我们将探讨一种通过使用
    OpenStack 在一组服务器上完全自动化地配置 LXC 容器的方法。
- en: OpenStack is a cloud operating system that allows for the provisioning of virtual
    machines, LXC containers, load balancers, databases, and storage and network resources
    in a centralized, yet modular and extensible way. It's ideal for managing a set
    of compute resources (servers) and selecting the best candidate target to provision
    services on, based on criteria such as CPU load, memory utilization, and VM/container
    density, to name just a few.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 是一个云操作系统，允许以集中但模块化和可扩展的方式配置虚拟机、LXC 容器、负载均衡器、数据库以及存储和网络资源。它非常适合管理一组计算资源（服务器），并根据
    CPU 负载、内存使用率、虚拟机/容器密度等标准，选择最佳的目标来配置服务。
- en: 'In this chapter, we''ll cover the following OpenStack components and services:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下 OpenStack 组件和服务：
- en: Deploying the Keystone identity service, which will provide a central directory
    of users and services, and a simple way to authenticate using tokens
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 Keystone 身份服务，该服务将提供一个集中式的用户和服务目录，并提供一种使用令牌进行身份验证的简单方法
- en: Installing the Nova compute controller, which will manage a pool of servers
    and provision LXC containers on them
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Nova 计算控制器，它将管理一池服务器并在其上配置 LXC 容器
- en: Configuring the Glance image repository, which will store the LXC images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Glance 镜像仓库，该仓库将存储 LXC 镜像
- en: Provisioning the Neutron networking service that will manage DHCP, DNS, and
    the network bridging on the compute hosts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Neutron 网络服务，它将管理计算主机上的 DHCP、DNS 和网络桥接
- en: Finally, we'll provision an LXC container using the libvirt OpenStack driver
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将使用 libvirt OpenStack 驱动程序配置一个 LXC 容器
- en: Deploying OpenStack with LXC support on Ubuntu
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上部署支持 LXC 的 OpenStack
- en: 'An OpenStack deployment may consist of multiple components that interact with
    each other through exposed APIs, or a message bus such as RabbitMQ, as shown in
    the following figure:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 部署可能由多个组件组成，这些组件通过暴露的 API 或像 RabbitMQ 这样的消息总线相互作用，如下图所示：
- en: '![Deploying OpenStack with LXC support on Ubuntu](img/image_08_001.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![在 Ubuntu 上部署支持 LXC 的 OpenStack](img/image_08_001.jpg)'
- en: In this chapter, we'll deploy a minimum set of those components - Keystone,
    Glance, Nova, and Neutron - which will be sufficient to provision LXC containers
    and still take advantage of the scheduler logic and scalable networking that OpenStack
    provides.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将部署这些组件的最小集——Keystone、Glance、Nova 和 Neutron——这些组件足以配置 LXC 容器，并且仍然能够利用
    OpenStack 提供的调度逻辑和可扩展的网络。
- en: For this tutorial, we are going to be using Ubuntu Xenial, and as of the time
    of this writing, the latest Newton OpenStack release. What is the name of that
    OpenStack release?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 Ubuntu Xenial，并且截至本写作时间，使用最新的 Newton OpenStack 版本。那个 OpenStack 版本的名称是什么？
- en: Preparing the host
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备主机
- en: To simplify things, we are going to use a single server to host all services
    with a minimum of 16 GB of RAM. In production environments, it's a common approach
    to separate each service into its own set of servers, for scalability and high
    availability. By following the steps in this chapter, you can easily deploy on
    multiple hosts by replacing the IP addresses and hostnames as needed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，我们将使用单个服务器托管所有服务，最小内存为 16 GB。在生产环境中，常见的做法是将每个服务分离到自己的服务器组中，以便于扩展和高可用性。按照本章中的步骤，您可以通过根据需要更换
    IP 地址和主机名，轻松地在多个主机上进行部署。
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If using multiple servers, you need to make sure the time is synchronized on
    all hosts using services such as `ntpd`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用多个服务器，您需要确保所有主机的时间已同步，可以使用 `ntpd` 等服务。
- en: 'Let''s begin by ensuring we have the latest packages, and installing the repository
    that contains the Newton OpenStack release:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先确保我们拥有最新的包，并安装包含 Newton OpenStack 版本的仓库：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure to add the name of the server, in this example, `controller`, to `/etc/hosts`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将服务器名称（在此示例中为`controller`）添加到`/etc/hosts`。
- en: Installing the database service
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装数据库服务
- en: 'The services we are going to deploy use a MariaDB database as their backend
    store. Install it by running the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要部署的服务使用 MariaDB 数据库作为其后端存储。通过运行以下命令来安装它：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A minimal configuration file should look like the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最小的配置文件应类似于以下内容：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Replace the IP address the service binds to with whatever is on your server,
    then start the service and run the script that will secure the installation:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将服务绑定的 IP 地址替换为您服务器上的地址，然后启动服务并运行将保护安装的脚本：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding command will prompt for a new root password. For simplicity, we'll
    use `lxcpassword` as a password for all services, for the rest of the chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将提示输入新 root 密码。为简便起见，我们将在本章其余部分使用 `lxcpassword` 作为所有服务的密码。
- en: 'Verify that MySQL is set up correctly and that you can connect to it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 验证 MySQL 是否正确设置并能够连接：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing the message queue service
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装消息队列服务
- en: 'OpenStack supports the following message queues - RabbitMQ, Qpid, and ZeroMQ -
    which facilitate interprocess communication between services. We are going to
    use RabbitMQ:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 支持以下消息队列——RabbitMQ、Qpid 和 ZeroMQ——它们促进了服务之间的进程间通信。我们将使用 RabbitMQ：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a new user and password:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新用户和密码：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Also, grant permissions for that user:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，授予该用户权限：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Installing the caching service
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装缓存服务
- en: 'The identity service Keystone caches authentication tokens using Memcached.
    To install it, execute the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Keystone 身份服务使用 Memcached 来缓存身份验证令牌。要安装它，请执行以下命令：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Replace the localhost address with the IP address of your server:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将本地主机地址替换为您服务器的 IP 地址：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The config file should look similar to the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件应类似于以下内容：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Installing and configuring the identity service
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置身份服务
- en: The Keystone identity service provides a centralized point for managing authentication
    and authorization for the rest of the OpenStack components. Keystone also keeps
    a catalog of services and the endpoints they provide, which the user can locate
    by querying it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Keystone 身份服务为管理其余 OpenStack 组件的身份验证和授权提供了集中式的管理点。Keystone 还维护着一个服务目录，记录了各个服务及其提供的端点，用户可以通过查询该目录来定位这些服务。
- en: 'To deploy Keystone, first create a database and grant permissions to the `keystone`
    user:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署 Keystone，首先创建一个数据库并授予 `keystone` 用户权限：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, install the identity service components:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装身份服务组件：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is a minimal working configuration for Keystone:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Keystone 的最小工作配置：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you are using the same hostname and password as in this tutorial, no changes
    are required.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是与本教程相同的主机名和密码，则无需更改。
- en: 'Next, populate the `keystone` database by running the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令填充 `keystone` 数据库：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Keystone uses tokens to authenticate and authorize users and services. There
    are different token formats available, such as UUID, PKI, and Fernet tokens. For
    this example deployment, we are going to use the Fernet tokens, which, unlike
    the other types, do not need to be persisted in a backend. To initialize the Fernet
    key repositories, run the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Keystone 使用令牌来验证和授权用户及服务。提供了不同的令牌格式，例如 UUID、PKI 和 Fernet 令牌。在这个示例部署中，我们将使用 Fernet
    令牌，它与其他类型不同，不需要在后端持久化。要初始化 Fernet 密钥库，请运行以下命令：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the available identity tokens, refer to [http://docs.openstack.org/admin-guide/identity-tokens.html](http://docs.openstack.org/admin-guide/identity-tokens.html).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解有关可用身份令牌的更多信息，请参阅 [http://docs.openstack.org/admin-guide/identity-tokens.html](http://docs.openstack.org/admin-guide/identity-tokens.html)。
- en: 'Perform the basic bootstrap process by executing the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令进行基本的引导过程：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We are going to use Apache with the WSGI module to drive Keystone. Add the
    following stanza in the Apache config file and restart it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Apache 和 WSGI 模块来驱动 Keystone。在 Apache 配置文件中添加以下配置段并重新启动：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Delete the default SQLite database that Keystone ships with:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 Keystone 默认随附的 SQLite 数据库：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s create the administrative account by defining the following environment
    variables:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过定义以下环境变量来创建管理员账户：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Time to create our first project in Keystone. Projects represent a unit of
    ownership, where all resources are owned by a project. The `service` project we
    are going to create next will be used by all the services we are going to deploy
    in this chapter:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在 Keystone 中创建我们的第一个项目了。项目代表一个所有权单位，其中的所有资源都归项目所有。我们接下来要创建的 `service` 项目将用于我们在本章中将要部署的所有服务：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To list the available projects, run the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出可用的项目，请运行以下命令：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s create an unprivileged project and user, which can be used by regular
    users instead of the OpenStack services:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个普通的项目和用户，普通用户可以使用该项目，而不是 OpenStack 服务：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, create a `user` role, and associate it with the `lxc` project and the
    user we created in the previous two steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 `user` 角色，并将其与我们在前两步中创建的 `lxc` 项目和用户关联：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use the following file to configure  the **Web Service Gateway Interface**
    (**WSGI**) middleware pipeline for Keystone:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下文件来配置 Keystone 的 **Web 服务网关接口** (**WSGI**) 中间件管道：
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s test the configuration so far, by requesting a token for the `admin`
    and the `lxc` users:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试到目前为止的配置，通过请求 `admin` 用户和 `lxc` 用户的令牌：
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can create two files, which will contain the `admin` and `user` credentials
    we configured earlier:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建两个文件，分别包含我们之前配置的 `admin` 和 `user` 凭证：
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To use the `admin` user, for example, source the file as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用 `admin` 用户，请按如下方式加载文件：
- en: '[PRE27]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Notice the new environment variables:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意新的环境变量：
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'With the admin credentials loaded, let''s request an authentication token that
    we can use later with the other OpenStack services:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载了管理员凭证后，让我们请求一个认证令牌，之后可以与其他 OpenStack 服务一起使用：
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Installing and configuring the image service
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置镜像服务
- en: The image service provides an API for users to discover, register, and obtain
    images for virtual machines, or images that can be used as the root filesystem
    for LXC containers. Glance supports multiple storage backends, but for simplicity
    we are going to use the file store that will keep the LXC image directly on the
    filesystem.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像服务为用户提供一个 API，用于发现、注册和获取虚拟机镜像，或可作为 LXC 容器根文件系统的镜像。Glance 支持多种存储后端，但为了简便起见，我们将使用文件存储，它将
    LXC 镜像直接保存在文件系统中。
- en: 'To deploy Glance, first create a database and a user, like we did for Keystone:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署 Glance，首先创建一个数据库和一个用户，就像我们为 Keystone 所做的那样：
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, create the `glance` user and add it to the `admin` role:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建 `glance` 用户并将其添加到 `admin` 角色中：
- en: '[PRE31]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now it''s time to create the `glance` service record:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建 `glance` 服务记录的时候了：
- en: '[PRE32]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create the Glance API endpoints in Keystone:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Keystone 中创建 Glance API 端点：
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'OpenStack supports multiregion deployments for achieving high availability;
    however, for simplicity, we are going to deploy all services in the same region:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 支持多区域部署以实现高可用性；然而，为了简单起见，我们将所有服务部署在同一区域：
- en: '[PRE34]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now that Keystone knows about the `glance` service, let''s install it:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 既然 Keystone 已经知道了 `glance` 服务，让我们安装它：
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Use the following two minimal configuration files, replacing the password and
    hostname as needed:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下两个最小配置文件，根据需要替换密码和主机名：
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Populate the `glance` database by running the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令填充 `glance` 数据库：
- en: '[PRE37]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Start the Glance services:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Glance 服务：
- en: '[PRE38]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can build an image for the LXC containers by hand, as we saw in [Chapter
    2](ch02.html "Chapter 2. Installing and Running LXC on Linux Systems"), *Installing
    and Running LXC on Linux Systems*, or download a prebuilt image from an Ubuntu
    repository. Let''s download an image and extract it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第2章](ch02.html "第2章. 安装和运行 LXC 在 Linux 系统上") *安装和运行 LXC 在 Linux 系统上* 中看到的，我们可以手动为
    LXC 容器构建镜像，或者从 Ubuntu 仓库下载预构建的镜像。让我们下载一个镜像并提取它：
- en: '[PRE39]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The file that contains the root filesystem has the `.img` extension. Let''s
    add it to the image service:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 包含根文件系统的文件具有 `.img` 扩展名。让我们将其添加到镜像服务中：
- en: '[PRE40]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: Note that LXC uses the `raw` disk and `bare` container formats.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，LXC 使用 `raw` 磁盘和 `bare` 容器格式。
- en: 'The image is now stored at the location defined in the `glance-api.conf` as
    the `filesystem_store_datadir` parameter, as we saw in the preceding configuration
    example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像现在存储在 `glance-api.conf` 中定义的 `filesystem_store_datadir` 位置，如我们在前面的配置示例中看到的：
- en: '[PRE41]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Let''s list the available images in Glance:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出 Glance 中可用的镜像：
- en: '[PRE42]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Installing and configuring the compute service
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置计算服务
- en: The OpenStack compute service manages a pool of compute resources (servers)
    and various virtual machines, or containers running on said resources. It provides
    a scheduler service that takes a request for a new VM or container from the queue
    and decides on which compute host to create and start it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 计算服务管理一个计算资源池（服务器）和在这些资源上运行的各种虚拟机或容器。它提供一个调度服务，接收来自队列的创建新虚拟机或容器的请求，并决定在哪个计算主机上创建并启动它。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: 'For more information on the various Nova services, refer to: [http://docs.openstack.org/developer/nova/](http://docs.openstack.org/developer/nova/).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有关各种Nova服务的更多信息，请参考：[http://docs.openstack.org/developer/nova/](http://docs.openstack.org/developer/nova/)。
- en: 'Let''s begin by creating the `nova` database and user:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建`nova`数据库和用户开始：
- en: '[PRE43]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Once the database is created and the user permissions granted, create the `nova`
    user and add it to the `admin` role in the identity service:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据库创建并授权了用户权限，创建`nova`用户并将其添加到身份服务中的`admin`角色：
- en: '[PRE44]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Next, create the `nova` service and endpoints:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建`nova`服务和端点：
- en: '[PRE45]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'It''s time to install the Nova packages that will provide the API, the conductor,
    the console, and the scheduler services:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候安装提供API、调度器、控制台和调度服务的Nova软件包了：
- en: '[PRE46]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The Nova packages we just installed provide the following services:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚安装的Nova软件包提供以下服务：
- en: '`nova-api`: This service accepts and responds to user requests through a RESTful
    API. We use that for creating, running, and stopping instances, and so on.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nova-api`：该服务通过RESTful API接受并响应用户请求。我们使用它来创建、运行和停止实例等等。'
- en: '`nova-conductor`: This service sits between the `nova` database we created
    earlier and the `nova-compute` service, which runs on the compute nodes and creates
    the VMs and containers. We are going to install that service later in this chapter.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nova-conductor`：该服务位于我们之前创建的`nova`数据库与运行在计算节点上的`nova-compute`服务之间，后者负责创建虚拟机和容器。我们将在本章后续部分安装该服务。'
- en: '`nova-consoleauth`: This service authorizes tokens for users that want to use
    various consoles to connect to the VMs or containers.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nova-consoleauth`：该服务为希望通过各种控制台连接到虚拟机或容器的用户授权令牌。'
- en: '`nova-novncproxy`: This service grants access to instances running VNC.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nova-novncproxy`：该服务提供对运行VNC的实例的访问。'
- en: '`nova-scheduler`: This service, as mentioned previously, makes decisions on
    where to provision a VM or LXC container.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nova-scheduler`：如前所述，该服务负责决定在哪里部署虚拟机或LXC容器。'
- en: 'The following is a minimal functioning Nova configuration:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个最小功能的Nova配置：
- en: '[PRE47]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'With the config file in place, we can now populate the `nova` database:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件就绪后，我们现在可以填充`nova`数据库：
- en: '[PRE48]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Finally, start the compute services:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，启动计算服务：
- en: '[PRE49]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Since we are going to use a single node for this OpenStack deployment, we need
    to install the `nova-compute` service. In production, we usually have a pool of
    compute servers that only run that service.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用单节点进行此OpenStack部署，因此需要安装`nova-compute`服务。在生产环境中，我们通常有一个计算服务器池，只运行该服务。
- en: '[PRE50]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Use the following minimal configuration file, which will allow running `nova-compute`
    and the rest of the Nova services on the same server:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下最小配置文件，该文件允许在同一服务器上运行`nova-compute`及其余Nova服务：
- en: '[PRE51]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Notice under the `libvirt` section how we specify LXC as the default virtualization
    type we are going to use. To enable LXC support in Nova, install the following
    package:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`libvirt`部分下，我们如何指定LXC作为默认的虚拟化类型。要在Nova中启用LXC支持，安装以下软件包：
- en: '[PRE52]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The package provides the following configuration file:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 该软件包提供以下配置文件：
- en: '[PRE53]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Restart the `nova-compute` service and list all available Nova services:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 重启`nova-compute`服务并列出所有可用的Nova服务：
- en: '[PRE54]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Be sure to verify that all four services are `enabled` and `up`. With all the
    Nova services configured and running, now it's time to move to the networking
    part of the deployment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 确保验证所有四个服务都已`启用`并处于运行状态。配置并运行所有Nova服务后，现在是时候进入部署的网络部分了。
- en: Installing and configuring the networking service
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置网络服务
- en: The networking component of OpenStack, codenamed Neutron, manages networks,
    IP addresses, software bridging, and routing. In the previous chapters, we had
    to create the Linux bridge, add ports to it, configure DHCP to assign IPs to the
    containers, and so on. Neutron exposes all of these functionalities through a
    convenient API and libraries that we can use.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack的网络组件，代号Neutron，管理网络、IP地址、软件桥接和路由。在前面的章节中，我们需要创建Linux桥接，向其添加端口，配置DHCP为容器分配IP地址等等。Neutron通过方便的API和库暴露了所有这些功能，我们可以利用它们。
- en: 'Let''s start by creating the database, user, and permissions:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建数据库、用户和权限开始：
- en: '[PRE55]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Next, create the `neutron` user and add it to the `admin` role in Keystone:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建`neutron`用户并将其添加到Keystone中的`admin`角色：
- en: '[PRE56]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create the `neutron` service and endpoints:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`neutron`服务和端点：
- en: '[PRE57]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'With all the services and endpoints defined in the identity service, install
    the following packages:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在身份服务中定义了所有服务和端点后，安装以下软件包：
- en: '[PRE58]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The Neutron packages that we installed earlier provide the following services:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前安装的 Neutron 包提供以下服务：
- en: '`neutron-server`: This package provides API to dynamically request and configure
    virtual networks'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`neutron-server`：该包提供 API，用于动态请求和配置虚拟网络'
- en: '`neutron-plugin-ml2`: This is a framework that enables the use of various network
    technologies, such as the Linux bridge, Open vSwitch, GRE, and VXLAN, which we
    saw in earlier chapters'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`neutron-plugin-ml2`：这是一个框架，允许使用各种网络技术，如 Linux 桥接、Open vSwitch、GRE 和 VXLAN，这些我们在前面的章节中已看到'
- en: '`neutron-linuxbridge-agent`: This provides the Linux bridge plugin agent'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`neutron-linuxbridge-agent`：该服务提供 Linux 桥接插件代理'
- en: '`neutron-l3-agent`: This performs forwarding and NAT functionality between
    software-defined networks by creating virtual routers'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`neutron-l3-agent`：通过创建虚拟路由器，该服务在软件定义的网络之间执行转发和 NAT 功能'
- en: '`neutron-dhcp-agent`: This controls the DHCP service that assigns IP addresses
    to the instances running on the compute nodes'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`neutron-dhcp-agent`：该服务控制分配 IP 地址给运行在计算节点上的实例的 DHCP 服务'
- en: '`neutron-metadata-agent`: This is a service that passes instance metadata to
    Neutron'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`neutron-metadata-agent`：这是一个将实例元数据传递给 Neutron 的服务'
- en: 'The following is a minimal working configuration file for Neutron:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Neutron 的最小工作配置文件：
- en: '[PRE59]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We need to define what network extension we are going to support and the type
    of network. All this information is going to be used when creating the LXC container
    and its configuration file, as we''ll see later:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义将要支持的网络扩展和网络类型。所有这些信息将在创建 LXC 容器及其配置文件时使用，稍后我们将看到：
- en: '[PRE60]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Define the interface that will be added to the software bridge and that the
    IP the bridge will be bound to. In this case, we are using the `eth1` interface
    and its IP address:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 定义将添加到软件桥接中的接口，以及该桥接将绑定的 IP 地址。在本例中，我们使用 `eth1` 接口及其 IP 地址：
- en: '[PRE61]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We specify the bridge driver for the L3 agent as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 L3 代理指定桥接驱动程序如下：
- en: '[PRE62]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The configuration file for the DHCP agent should look similar to the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP 代理的配置文件应类似于以下内容：
- en: '[PRE63]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Finally, the configuration for the metadata agent is as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，元数据代理的配置如下：
- en: '[PRE64]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We need to update the configuration file for the Nova services. The new complete
    files should look as follows this; replace the IP address as needed:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新 Nova 服务的配置文件。新的完整文件应如下所示；根据需要替换 IP 地址：
- en: '[PRE65]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Populate the `neutron` database:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 填充 `neutron` 数据库：
- en: '[PRE66]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Finally, start all networking services and restart `nova-compute`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，启动所有网络服务并重新启动 `nova-compute`：
- en: '[PRE67]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Let''s verify the Neutron services are running:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证 Neutron 服务是否正在运行：
- en: '[PRE68]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Defining the LXC instance flavor, generating a key pair, and creating security
    groups
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义 LXC 实例规格，生成密钥对，并创建安全组
- en: 'Before we can create an LXC instance, we need to define its flavour - CPU,
    memory, and disk size. The following creates a flavor named `lxc.medium` with
    one virtual CPU, 1 GB RAM, and 5 GB disk:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建 LXC 实例之前，需要定义其规格 - CPU、内存和磁盘大小。以下命令创建一个名为 `lxc.medium` 的规格，包含一个虚拟 CPU、1
    GB 内存和 5 GB 磁盘：
- en: '[PRE69]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In order to SSH to the LXC containers, we can have the SSH keys managed and
    installed during the instance provisioning, if we don''t want them to be baked
    inside the actual image. To generate the SSH key pair and add it to OpenStack,
    run the following command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够通过 SSH 访问 LXC 容器，我们可以在实例配置期间管理和安装 SSH 密钥，如果我们不希望它们被嵌入到实际镜像中。要生成 SSH 密钥对并将其添加到
    OpenStack，请运行以下命令：
- en: '[PRE70]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Enter the file in which to save the key (`/root/.ssh/id_rsa`):'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 输入要保存密钥的文件（`/root/.ssh/id_rsa`）：
- en: '[PRE71]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'To list the new key pair we just added, execute the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出我们刚刚添加的新密钥对，请执行以下命令：
- en: '[PRE72]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'By default, once a new LXC container is provisioned, iptables will disallow
    access to it. Let''s create two security groups that will allow ICMP and SSH,
    so we can test connectivity and connect to the instance:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，一旦新的 LXC 容器被配置，iptables 会禁止访问它。我们将创建两个安全组，允许 ICMP 和 SSH，以便我们可以测试连接并连接到实例：
- en: '[PRE73]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Creating the networks
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建网络
- en: 'Let''s start by creating a new network called `nat` in Neutron:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先在 Neutron 中创建一个名为`nat`的新网络：
- en: '[PRE74]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Next, define the DNS server, the default gateway, and the subnet range that
    will be assigned to the LXC container:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义将分配给 LXC 容器的 DNS 服务器、默认网关和子网范围：
- en: '[PRE75]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Update the subnet''s information in Neutron:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 Neutron 中子网的信息：
- en: '[PRE76]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'As the `lxc` user, create a new software router:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 `lxc` 用户，创建一个新的软件路由器：
- en: '[PRE77]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'As the admin user, add the subnet we created earlier as an interface to the
    router:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员用户，将我们之前创建的子网添加为路由器的接口：
- en: '[PRE78]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Let''s list the network namespaces that were created:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出创建的网络命名空间：
- en: '[PRE79]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'To show the ports on the software router and the default gateway for the LXC
    containers, run the following command:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示软件路由器上的端口以及 LXC 容器的默认网关，请运行以下命令：
- en: '[PRE80]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Provisioning LXC container with OpenStack
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 OpenStack 提供 LXC 容器
- en: Before we launch our LXC container with OpenStack, let's double-check we have
    all the requirements in place.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动我们的 LXC 容器之前，让我们再三检查一下是否满足所有要求。
- en: 'Start by listing the available networks:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 首先列出可用的网络：
- en: '[PRE81]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Display the compute flavors we can choose from:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 显示我们可以选择的计算实例规格：
- en: '[PRE82]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Next, list the available images:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，列出可用的镜像：
- en: '[PRE83]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Also, display the default security group we created earlier:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，显示我们之前创建的默认安全组：
- en: '[PRE84]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Now load the **Network Block Device** (**NBD**) kernel module, as Nova expects
    it:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在加载 **网络块设备**（**NBD**）内核模块，因为 Nova 期望它：
- en: '[PRE85]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Finally, to provision LXC container with OpenStack, we execute the following
    command:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要使用 OpenStack 提供 LXC 容器，请执行以下命令：
- en: '[PRE86]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Notice how we specified the instance flavor, the image name, the ID of the network,
    the security group, the key-pair name, and the name of the instance.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何指定实例规格、镜像名称、网络 ID、安全组、密钥对名称和实例名称。
- en: Make sure to replace the IDs with the output returned on your system.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 确保用系统返回的输出替换这些 ID。
- en: 'To list the LXC container, its status, and assigned IP address, run the following
    command:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出 LXC 容器、其状态以及分配的 IP 地址，请运行以下命令：
- en: '[PRE87]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'As we saw earlier in this chapter, OpenStack uses the libvirt driver to provision
    LXC containers. We can use the `virsh` command we used in [Chapter 2](ch02.html
    "Chapter 2. Installing and Running LXC on Linux Systems")*, Installing and Running
    LXC on Linux Systems*, to list the LXC containers on the host:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章前面看到的，OpenStack 使用 libvirt 驱动程序来提供 LXC 容器。我们可以使用在[第 2 章](ch02.html "第
    2 章：在 Linux 系统上安装和运行 LXC")*，安装和运行 LXC 在 Linux 系统上* 中使用过的 `virsh` 命令，列出主机上的 LXC
    容器：
- en: '[PRE88]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'If we list the processes on the host, we can see that the `libvirt_lxc` parent
    process spawned the init process for the container:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们列出主机上的进程，可以看到 `libvirt_lxc` 父进程启动了容器的初始化进程：
- en: '[PRE89]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The location of the container''s configuration file and disk is as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的配置文件和磁盘的位置如下：
- en: '[PRE90]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Let''s examine the container''s configuration file:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下容器的配置文件：
- en: '[PRE91]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: We've seen similar configuration files for the libvirt containers we built in
    earlier chapters.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过之前章节中为 libvirt 容器构建的类似配置文件。
- en: 'With the networking managed by Neutron, we should see the bridge and the container''s
    interface added as a port:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Neutron 管理的网络环境下，我们应该能够看到桥接和容器的接口作为端口被添加：
- en: '[PRE92]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Let''s configure an IP address on the bridge interface and allow NAT connectivity
    to the container:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在桥接接口上配置一个 IP 地址，并允许容器使用 NAT 连接：
- en: '[PRE93]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'To connect to the LXC container using SSH and the key pair we generated earlier,
    execute the following command:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 SSH 和我们之前生成的密钥对连接到 LXC 容器，请执行以下命令：
- en: '[PRE94]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Finally, to delete the LXC container using OpenStack, run the following commands:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要使用 OpenStack 删除 LXC 容器，请运行以下命令：
- en: '[PRE95]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Summary
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at an example of a basic OpenStack deployment using
    only the identity service Keystone for storing a catalog of services, and authentication
    and authorization, the Nova compute services for provisioning the LXC instance,
    the image service Glance, which stores the LXC container images, and the networking
    services with Neutron that created the bridge and assigned the IP address to our
    container.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们查看了一个基本的 OpenStack 部署示例，使用身份服务 Keystone 存储服务目录，以及进行身份验证和授权，使用 Nova 计算服务为
    LXC 实例提供服务，使用 Glance 镜像服务存储 LXC 容器镜像，并通过 Neutron 网络服务创建桥接并为我们的容器分配 IP 地址。
- en: A full production-ready deployment would consist of multiple controller nodes
    that run the aforementioned services, along with a pool of compute servers to
    provision the containers on.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的生产就绪部署将包括多个控制节点，这些节点运行前述服务，并配备一组计算服务器来提供容器。
- en: OpenStack with LXC is a great way to create and manage multitenant cloud environments,
    running various software applications in a centralized and highly scalable way.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenStack 和 LXC 是创建和管理多租户云环境的好方法，可以以集中式和高度可扩展的方式运行各种软件应用。
