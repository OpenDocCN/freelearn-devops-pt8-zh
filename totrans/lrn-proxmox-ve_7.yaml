- en: Chapter 7. Securing Proxmox VE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | "Abstraction may be discovered or produced, may be material or immaterial,
    but abstraction is what every hack produces and affirms....To hack is to produce
    or apply the abstract to information and the possibility of new worlds" |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *A Hacker Manifesto, McKenzie Wark* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *"Putting it bluntly, virtualization is deception."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *Data Center Virtualization Essentials, Gustavo Alessandro Andrade
    Santana* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *"The enemy knows the system being used..."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *Shannon''s Maxim* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *"Security through obscurity is not an answer."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *Information Security: Principles and Practices, Merkow and Breithaupt*
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | *"Containers have quickly become a popular cloud-optimization strategy
    for enterprises, however, what do we really know about the security implications?"*
    |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *Kowsik Guruswamy* |'
  prefs: []
  type: TYPE_TB
- en: The end goal of this chapter is to support you in mitigating threats to the
    security of your Proxmox VE infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: We start by enumerating and articulating the potential benefits of virtualization
    on infrastructure security.
  prefs: []
  type: TYPE_NORMAL
- en: However, these benefits must not be relied on unconditionally or discussed uncritically;
    we must qualify them here.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, we must expose the potential security risks virtualization can inject
    into the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, this chapter commits to providing strategies for mitigating security
    threats to our Proxmox VE hosts and guests.
  prefs: []
  type: TYPE_NORMAL
- en: Security assurance is, of course, a sprawling field, and often includes not
    only threat mitigation, but also policy making, monitoring, incident response,
    and forensics. Our focus here is exclusively on mitigating vulnerabilities specific to
    Proxmox VE hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Towards that end, then, the goals of security are defined here in accordance
    with tradition:'
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining the *confidentiality* of a system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assuring its *integrity*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing consistent *availability* of services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Securing Proxmox VE](img/B01784_07_01-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Security triad
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding illustration suggests that these three points are not isolated:
    the whole picture consists of three mutual relationships: one between confidentiality
    and integrity; one between confidentiality and availability; and, finally, one
    between integrity and availability. Too much or too little emphasis on one point
    distorts our Platonic triangle, a symbolic representation of our impossible ideal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given our end goal—mitigating threats—this chapter proceeds along the following
    vector:'
  prefs: []
  type: TYPE_NORMAL
- en: Examining the potential security rewards of virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interrogating those rewards and exploring the potential vulnerabilities virtualization
    introduces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acting directly to mitigate threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security benefits of virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing well-planned, deliberate, and well-executed virtualization into
    an infrastructure delivers some very compelling security benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '|   | "The abstraction of IT resources that masks the physical nature and boundaries
    of those resources..." |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *Virtualization as defined by Gartner''s IT Glossary ([http://www.gartner.com/it-glossary/virtualization](http://www.gartner.com/it-glossary/virtualization)).*
    |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s be clear about one thing with regard to this common trope representing
    virtualization as a deceptive masquerade: security through obscurity does not
    work. The use of secrecy for the design or implementation of a system to provide
    security is a failing proposition.'
  prefs: []
  type: TYPE_NORMAL
- en: In enumerating the security benefits of virtualization, this section purposefully
    avoids suggesting that abstraction and the obfuscation it permits are an effective
    security strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll see as the chapter develops that none of the security rewards promised
    by virtualization advocates can be realized without a good understanding of networking,
    systems administration, type 2 hypervisors, VMs, and containers. The following
    is also required:'
  prefs: []
  type: TYPE_NORMAL
- en: Rigorous planning based in part on defense in depth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flawless realization of those plans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excellent management throughout the lifecycle of all guests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Given all of the preceding, there are very clear security benefits to virtualization
    with Proxmox VE:'
  prefs: []
  type: TYPE_NORMAL
- en: Reduction of the physical attack surface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VM isolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to restore to prior states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware abstraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network segmentation support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encapsulation and portability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fine privilege control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated firewalls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attack surface reduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Moving to a virtual infrastructure reduces your physical attack surface in accordance
    with your virtual machine density. The more physical servers we convert to Proxmox
    VE guests, in conjunction with how densely we pack guests onto our Proxmox VE
    hosts, the fewer servers there are to ensure protection from potentially devastating
    physical attacks, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization has an inherent potential to reduce the attack surface of an
    infrastructure in several ways; we'll focus here on how it reduces the number
    of physical hosts providing services.
  prefs: []
  type: TYPE_NORMAL
- en: '![Attack surface reduction](img/B01784_07_02-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing attack vectors and the attack surface
  prefs: []
  type: TYPE_NORMAL
- en: Where we were once protecting, say, 15 machines from physical attack, there
    might be one or two physical Proxmox VE hosts to protect, for example.
  prefs: []
  type: TYPE_NORMAL
- en: We have to be critical here and realize this can open up new vulnerabilities
    and frustrating problems to resolve.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Proxmox VE host becomes monolithic, so:'
  prefs: []
  type: TYPE_NORMAL
- en: If there's an unpatched vulnerability in Debian 8, PVE, or KVM and QEMU, the
    confidentiality, integrity, and availability of all the virtual machines hosted
    by that instance are also threatened.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an attacker gains physical access to the PVE host or hosts, the security
    and sanctity of all guests, both containers and virtual machines, are most certainly
    in doubt. If that's troubling, consider too that your snapshots and backups may
    have disappeared.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's no doubt virtualization reduces the overall attack surface of your infrastructure,
    and in several ways; however, as articulated previously, this does not relieve
    us of any burdens, it just gives those burdens higher stakes while making them
    less complex to address.
  prefs: []
  type: TYPE_NORMAL
- en: Isolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtualization encourages isolation. One VM doesn't naturally affect another
    VM, even if it is on the same host.
  prefs: []
  type: TYPE_NORMAL
- en: This tendency toward isolation suggests that destructive malware infecting a
    virtual server won't necessarily escape and spread to other virtual servers, even
    when they share a host.
  prefs: []
  type: TYPE_NORMAL
- en: If there's an oversight however, such as naively sharing data between two guests,
    or (worse) sharing data between a guest and the host, attacks can be devastating. Therefore,
    resist the temptation to create file shares among VMs on PVE; for the sake of
    security, do not share files between a Proxmox VE host and any of its guests.
  prefs: []
  type: TYPE_NORMAL
- en: Here the importance of documenting your infrastructure and writing a well-deliberated
    and well-enforced security policy is clear.
  prefs: []
  type: TYPE_NORMAL
- en: Availability of prior states
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the event an attack against a Proxmox VE guest succeeds, the guest can be
    rolled back to a prior state via backups or snapshots, effectively minimizing
    the time it takes to recover from an attack. (Note, however, that any data or
    information that changed between the time of the selected backup and the moment
    it is restored will be lost during a rollback.)
  prefs: []
  type: TYPE_NORMAL
- en: '![Availability of prior states](img/B01784_07_03-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Rolling back involves applying a former version of a guest's storage file to
    the virtual machine or container
  prefs: []
  type: TYPE_NORMAL
- en: So, it's logical that the ability to restore to a prior state isn't an unconditional
    advantage of virtualization, even if it's an integrated feature of Proxmox VE;
    snapshots and backups must be integral to the well-thought out and executed lifecycle
    of the PVE guests and part of a well-defined and enforced policy.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware abstraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A fundamentally compelling characteristic of full virtualization is the abstraction
    of a computer from the physical hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that a Proxmox VE guest with a well-organized trove of information collected
    over months is compromised and its hard drive destroyed in an attack that would
    have rendered physical storage unsalvageable—destruction of storage on a virtual
    disk does no damage to the physical storage that hosted it. When prior states
    are available to restore from, a snapshot or a backup can be restored onto the
    same hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Without condition, damage dealt to virtual components has no effect on the physical
    host. This is an inherent reward for abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: Segmentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If an infrastructure is to be virtualized with Proxmox VE, take advantage of
    the network segmentation technologies it supports, such as VLAN tags, bridges,
    IPs masquerading with NAT, and per-guest firewalls. Use these technologies to
    make VMs or containers available to a limited population of users with legitimate
    business needs that call for a limited level of access.
  prefs: []
  type: TYPE_NORMAL
- en: '![Segmentation](img/B01784_07_04-4.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing segmentation and trust zones with Proxmox VE
  prefs: []
  type: TYPE_NORMAL
- en: To make the most of this valuable potential, think rigorously about sufficient
    trust zones as you plan your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A trust zone is a network segment within which data flows relatively unrestricted,
    while data flowing in and out of the trust zone is subject to stronger restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Open vSwitch**'
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to the bridges, bonds, and VLAN interfaces native to Linux,
    Proxmox VE supports Open vSwitch.
  prefs: []
  type: TYPE_NORMAL
- en: Open vSwitch is an open source, software implementation of a distributed, multilayer
    switch. It's production-ready and designed with virtualization specifically in
    mind.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Open vSwitch, including features and potential drawbacks,
    visit its website at [http://openvswitch.org](http://openvswitch.org). To learn
    more about Proxmox VE's support of Open vSwitch, visit the Proxmox wiki at [https://pve.proxmox.com/wiki/Open_vSwitch](https://pve.proxmox.com/wiki/Open_vSwitch).
  prefs: []
  type: TYPE_NORMAL
- en: Encapsulation and portability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As described in [Chapter 5](ch05.html "Chapter 5. Working with Virtual Disks"), *Working
    with Virtual Disks*, with full virtualization all information on virtual servers,
    including boot disks, is saved as a file; this is an example of encapsulation.
  prefs: []
  type: TYPE_NORMAL
- en: Invaluably, encapsulation serves the portability of the VM; even as an attacker
    works to compromise a PVE host, its guests can be moved, without halting, to another
    host in a cluster. Live migration—migrating an active guest from one PVE host
    to another in the same cluster—helps assure availability even in the case of an
    ongoing attack against a host.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**On Clustering and High Availability**'
  prefs: []
  type: TYPE_NORMAL
- en: For more on these topics, see *Mastering Proxmox, Proxmox High Availability*,
    and *Proxmox Cookbook* from Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Physical security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an attacker gains access to a physical server, the availability, confidentiality,
    and integrity it should demonstrate are absolutely in doubt.
  prefs: []
  type: TYPE_NORMAL
- en: To put it bluntly (and to appropriate a phrase from Scott Culp), if an attacker
    has physical access to your Proxmox VE host, it's not your host anymore.
  prefs: []
  type: TYPE_NORMAL
- en: As described previously, a very powerful benefit of virtualization is that the
    number of physical hosts decreases as the services they provided move to VMs or
    containers, effectively reducing the attack vectors, since the fewer machines
    there are to find physical space for, the fewer there are to gain illegitimate
    access to.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, include in your policy the procedures by which the PVE hosts,
    the storage, and the intermediate distribution frame (that is, the wiring closet)
    are to be physically secured against illegitimate access, and enforce the policy
    consistently and without exception; this means you've mitigated a potentially
    devastating threat.
  prefs: []
  type: TYPE_NORMAL
- en: Fine privilege control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With defense in depth and the principle of least-privilege in mind, consider
    the fine control of user access and restrictions that's realized when each service
    is moved to a discrete VM or container—in contrast to keeping multiple services
    running on a single physical server.
  prefs: []
  type: TYPE_NORMAL
- en: In a virtual infrastructure, a user privileged to access one service is not
    explicitly privileged to another as we can imagine they would be if the services
    were shared on a single hardware server. We can restrict access to Debian, finely
    define a user's role in relation to each VM and container via the PVE web interface,
    and further refine privileges on the guest OS level and the application level.
  prefs: []
  type: TYPE_NORMAL
- en: '![Fine privilege control](img/B01784_07_06-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Some layers to consider in the practice of "defense in depth"
  prefs: []
  type: TYPE_NORMAL
- en: By default, the Proxmox VE management interface is authorized through GNU/Linux's
    default authentication system (**PAM**), and root is the only user. However, the
    authentication system for the web interface can be changed from PAM to PVE's system,
    to Active Directory, or to LDAP.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever the authentication mechanism, specific users can be assigned different
    roles, or privileges, for each individual VM or container.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**PVE User Management**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about PVE''s user management features, see the user management
    page of the Proxmox wiki: [https://pve.proxmox.com/wiki/User_Management](https://pve.proxmox.com/wiki/User_Management).'
  prefs: []
  type: TYPE_NORMAL
- en: There are a host of predefined roles for users or groups that ship with PVE;
    and we can create new roles with different privileges and restrictions as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: PVE firewall features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Proxmox VE provides flexible firewall features based on iptables.
  prefs: []
  type: TYPE_NORMAL
- en: These features can be configured via the administration interface or the command
    line to provide several layers of protection, as this allows rulesets to accept
    and reject traffic per guest server, per PVE host, and for an entire cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the Proxmox VE firewall, visit the official documentation
    at [https://pve.proxmox.com/wiki/Proxmox_VE_Firewall](https://pve.proxmox.com/wiki/Proxmox_VE_Firewall),
    where detailed configuration examples are available.
  prefs: []
  type: TYPE_NORMAL
- en: It's rather critical that PVE be protected by a firewall.
  prefs: []
  type: TYPE_NORMAL
- en: 'Proxmox VE 3.4 relies on the following ports:'
  prefs: []
  type: TYPE_NORMAL
- en: 8006 (web interface)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 85 (pvedaemon—configured to listen only on 127.0.0.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5900-5999 (VNC web console)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 22 (sshd; used for cluster actions as well as a means to access a remote shell)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5404, 5405 UDP (CMAN multicast—if you run a cluster)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Proxmox VE 4.0 saw some changes to Proxmox VE''s port usage:'
  prefs: []
  type: TYPE_NORMAL
- en: 8006 (web interface)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 85 (pvedaemon-configured to listen only on 127.0.0.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5900-5999 (VNC web console)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3128 (SPICE console)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 22 (SSH access-now optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 111 (rpcbind)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5404, 5405 UDP (corosync multicast if you run a cluster)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use your firewall experience to restrict access to these ports from subnets
    and IP ranges that don't have a legitimate need to access them.
  prefs: []
  type: TYPE_NORMAL
- en: Aggravated vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtualization's potential security benefits are certainly compelling, but many
    are quite conditional and altogether they are certainly no panacea.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, virtualization introduces new threats to an infrastructure—threats
    that otherwise either wouldn't be a concern at all or are exacerbated by virtualization.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section calls attention to vulnerabilities that are historically problematic
    for virtual infrastructures:'
  prefs: []
  type: TYPE_NORMAL
- en: Denial of service attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VM escape and hyper jumping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server sprawl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Growing complexity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial of service attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Denial of service** (**DoS**) attacks come in a wide variety of flavors.
    However, the immediate intent is the same: overwhelming a network, and its administrators,
    by generating large amounts of illegitimate traffic.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Distributed denial of service** (**DDoS**) and DoS attacks are cheap, effective,
    and increasingly common. On the surface, they seem to be most effective at rendering
    services unavailable or unusable. More insidious, perhaps, is that, by keeping
    administrators'' hands full as they cope with illegitimate traffic, other attacks
    can be launched without attracting their immediate attention.'
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, DoS attacks are particularly powerful against virtual infrastructures,
    wherein overwhelmed virtual hosts will certainly threaten the availability of
    virtual guests and the services they provide.
  prefs: []
  type: TYPE_NORMAL
- en: '![Denial of service attacks](img/B01784_07_07-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing a DDoS attack
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, research published in 2013 found that DoS attacks are significantly
    more potent where virtual machines are involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"[Under] DoS attack, the performance of a web server hosted in a VM
    can degrade by up to 23%, while that of a nonvirtualized server hosted on the
    same hardware degrades by only 8%. Even with relatively light attacks, the file
    system and memory access performance of hypervisor-based virtualization degrades
    at a much higher rate than their nonvirtualized counterparts."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *Performance of Virtual Machines Under Networked Denial of Service
    Attacks: Experiments and Analysis, Shea and Liu, [http://www.cs.sfu.ca/~jcliu/Papers/PerformanceofVirtualMachines.pdf](http://www.cs.sfu.ca/~jcliu/Papers/PerformanceofVirtualMachines.pdf)*
    |'
  prefs: []
  type: TYPE_TB
- en: Clearly, in some areas, we may take solace in some security benefits of virtualization;
    however, DoS and DDoS attacks are one threat we cannot turn away from.
  prefs: []
  type: TYPE_NORMAL
- en: When migrating services from physical machines to Proxmox VE guests, work to
    define and deploy not only preventative measures, but also rapid response protocols.
    This calls for the implementation of monitoring and alert systems, as well as
    a firewall configuration that deliberately takes such attacks into consideration.
  prefs: []
  type: TYPE_NORMAL
- en: Each type of DoS attack has its own array of detection and mitigation strategies.
    To mitigate against SYN flooding attacks, for example, see section three of [http://tools.ietf.org/html/rfc4987](http://tools.ietf.org/html/rfc4987).
  prefs: []
  type: TYPE_NORMAL
- en: VM escape and hyper jumping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Virtual machine escape** occurs when an attacker successfully "breaks out"
    of a virtual machine and interacts with the host operating system.'
  prefs: []
  type: TYPE_NORMAL
- en: In a similar vein, **VM jumping**, or hyper jumping as it is sometimes referred
    to, is the process of gaining illegitimate access to a virtual machine via another
    virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Presumably encapsulated and isolated environments, virtual machines run operating
    systems that shouldn't know that they are virtualized; there should be no way
    to break out of the virtual machine to interact directly with the parent hypervisor.
    For the same reasons, it should be impossible to illegitimately access a virtual
    machine through another virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: VM escape exploits are particularly devastating since the hypervisor controls
    the execution of all of the virtual machines and containers on the host. Consequently,
    an attacker that can gain access to the hypervisor can then win control over every
    guest running on the PVE host; since the hypervisor is between the physical hardware
    and the guest operating system, a successful VM escape will enable attackers to
    simply circumvent security controls implemented on the virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: VM escapes and hyper jumping should be an intellectual exercise, a fascinating
    theoretical problem. Unfortunately, that's simply not the case.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the production of this book, for example, several VM escape vulnerabilities
    have emerged. Perhaps the vulnerability that captured the most attention was the
    one dubbed *VENOM* by researchers ([http://venom.crowdstrike.com/](http://venom.crowdstrike.com/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"VENOM, CVE-2015-3456, is a security vulnerability in the virtual floppy drive
    code used by many computer virtualization platforms. This vulnerability may allow
    an attacker to escape from the confines of an affected virtual machine (VM) guest
    and potentially obtain code-execution access to the host. Absent mitigation, this
    VM escape could open access to the host system and all other VMs running on that
    host, potentially giving adversaries significant elevated access to the host''s
    local network and adjacent systems.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*"Exploitation of the VENOM vulnerability can expose access to corporate intellectual
    property (IP), in addition to sensitive and personally identifiable information
    (PII), potentially impacting the thousands of organizations and millions of end
    users that rely on affected VMs for the allocation of shared computing resources,
    as well as connectivity, storage, security, and privacy."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![VM escape and hyper jumping](img/B01784_07_09-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Venom attack scenario
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the many "computer virtualization platforms" invoked by the disclosure
    included all QEMU-based platforms; this includes Proxmox VE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of VENOM, a patch was available from Debian the same day the vulnerability
    was disclosed. A PVE administrator simply had to upgrade, in Debian fashion, and
    then restart guest virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After a shutdown and restart of all VMs on the Proxmox VE host, the vulnerability
    was gone. There was no need to even reboot the PVE host.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The bug was introduced unknowingly in the QEMU source when the QEMU Floppy Drive
    Controller was introduced in 2004.
  prefs: []
  type: TYPE_NORMAL
- en: So it seems virtualization's celebrated isolation is not absolute.
  prefs: []
  type: TYPE_NORMAL
- en: 'From VENOM, we can learn some direct preventative actions that can be taken
    to mitigate emerging VM escape vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep Proxmox VE and Debian routinely patched. There are a variety of ways to
    automate the patching process; we'll walk through one method in the next section.
    Since Proxmox VE is patched through the same mechanism as Debian, patches to both
    are applied simultaneously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patch operating systems and applications running on virtual machines and containers.
    On Debian and Ubuntu guests, use the apt tool; on Microsoft Windows and Server
    guests, set a reasonable Windows Update policy to ensure urgent updates are applied.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Don''t* install virtual machine features you do not need. Doing so increases
    your attack surface unnecessarily. Be particularly attentive to what virtual devices
    are attached to your VM; if you don''t need a virtual optical drive or floppy
    disk drive on the VM, either deliberately avoid installing them or remove them
    from the VM when you no longer need them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid running software and services that are not essential to your guests' primary
    roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, weigh the benefits of running endpoint security software on a virtual
    machine; in his September 2015 article, "The Curious Case of the Escaping Virtual
    Machine," Bunmi Sowandi suggests that such software will detect malicious code
    trying to run in a VM before it has a chance to "escape". ([http://vmturbo.com/about-virtualization/the-curious-case-of-the-escaping-virtual-machine/](http://vmturbo.com/about-virtualization/the-curious-case-of-the-escaping-virtual-machine/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we learned from VENOM, the best protection against VM escape and hyper jumping
    exploits is routine and well-thought out patch management.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization sprawl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the context of virtual infrastructure, sprawl refers to the tendency of virtual
    servers to proliferate faster than administrators can properly manage. Sprawl
    encourages poor management decisions, hasty undeliberated action, sloppy configuration
    mistakes, and missed opportunities to mitigate threats.
  prefs: []
  type: TYPE_NORMAL
- en: From a security perspective, therefore, virtualization sprawl presents dire
    problems as administrators miss security patches, fail to harden services, and
    perhaps expose the network, the hypervisors, and storage nodes unnecessarily.
  prefs: []
  type: TYPE_NORMAL
- en: 'A helpful article on the Hewlett Packard site suggests some best practices
    to reduce the impact of sprawl effectively. Like many security issues explored
    in this chapter, the suggested solution is excellent planning, deliberated deployment,
    and writing and enforcing a security policy that includes VM lifecycle management.
    The article ([http://h30499.www3.hp.com/t5/Grounded-in-the-Cloud/5-ways-to-get-control-of-virtualization-sprawl/ba-p/6170959](http://h30499.www3.hp.com/t5/Grounded-in-the-Cloud/5-ways-to-get-control-of-virtualization-sprawl/ba-p/6170959))
    puts particular emphasis on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever possible, create VMs and containers from "golden images" that include
    patches, patch policy, audit policies, software, and software policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Virtualization sprawl](img/B01784_07_10-3.png)'
  prefs: []
  type: TYPE_IMG
- en: End-to-end lifecycle and policy management for VMs and VM template
  prefs: []
  type: TYPE_NORMAL
- en: Proactively update policy-based enforcement on VMs as well as VM templates (and
    containers and container templates)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Virtualization sprawl](img/B01784_07_11-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Systematically manage the lifecycle and compliance of virtual servers from end
    to end (including, for example, routine snapshots or backups, and applying patches
    and upgrades)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The article is insistent on conveying two messages successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: A well-thought-out security policy, which administrators can realistically comply
    with, is absolutely essential for keeping sprawl in check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks that can be automated must be automated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualization sprawl encourages disorder; tame it with automation driven by
    a well-thought-out policy that's followed in the practice of daily administration.
  prefs: []
  type: TYPE_NORMAL
- en: At war with complexity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '|   | *"A network architecture should be as clean and simple to understand
    as it can be. It should be possible to briefly...draw a few simple pictures to
    illustrate that design...."**"Having a clear understanding of the traffic flow
    on your network puts you in control of it. Not understanding the network puts
    you at the mercy of its vagaries."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- *The Practice of System and Network Administration, 2E 2007* |'
  prefs: []
  type: TYPE_TB
- en: Given that virtualization encourages sprawl and given that secure virtual infrastructures
    demand segmentation, it's not entirely surprising that virtualization encourages
    problematic network complexity.
  prefs: []
  type: TYPE_NORMAL
- en: As network complexity goes up, so too does the pain that administrators suffer,
    since they must keep accurate documentation, troubleshoot connectivity problems
    on the fly, and sometimes provide actionable information for third-party support
    providers.
  prefs: []
  type: TYPE_NORMAL
- en: The "chaos approach" encouraged by infrastructure virtualization is not a reliable
    model to use in a network where the availability of every component matters (*The
    Practice of System and Network Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: To limit network complexity, consider that the campus' network architects, engineers,
    and administrators should all be able to sketch, without aids, the key features
    and basic structure of the network topology.
  prefs: []
  type: TYPE_NORMAL
- en: According to Limoncelli, Hogan, and Chalup, the network architecture is neither
    clean enough, comprehensible enough, nor simple enough if this network map can't
    be relatively easily rendered. Maps of the physical and logical networks should
    absolutely be part of the system documentation and revised to reflect any modifications
    from the previous topology.
  prefs: []
  type: TYPE_NORMAL
- en: Taking the risk of sounding redundant squarely in the face, the best way to
    tame network complexity is to ensure the network can be explained and diagrammed,
    logically and physically, without the support of additional resources. If that's
    not the case, re-evaluate the architecture and see where it can be simplified
    without sacrificing security.
  prefs: []
  type: TYPE_NORMAL
- en: Taking action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re not yet virtualizing infrastructure, or you''re not otherwise in
    a position to develop a strategic security policy, there''re tactics you can take
    in the meantime to mitigate some threats to your Proxmox virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure the bootloader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If possible, lock down the BIOS/UEFI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Absolutely prohibit remote access to Proxmox VE's user interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable root access via SSH; consider prohibiting sudo access as well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Fail2ban to prevent brute-force attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rely on key-based SSH authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain security patches for Proxmox VE and its guests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider an enterprise support subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The practical procedures that follow are a strong (and immediate) complement
    to the less concrete strategies articulated previously.
  prefs: []
  type: TYPE_NORMAL
- en: This concluding section thus walks through these immediate tactical mitigation
    objectives to provide immediate support as you come to terms with Proxmox VE.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting the boot process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we work to assure that OS and application-level authentication
    isn't rendered useless by an attacker with physical access who can thoroughly
    bypass these mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can think of booting as a four-stage process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Protecting the boot process](img/B01784_07_12-3.png)'
  prefs: []
  type: TYPE_IMG
- en: A generic boot process
  prefs: []
  type: TYPE_NORMAL
- en: 'During this process, the system can be vulnerable:'
  prefs: []
  type: TYPE_NORMAL
- en: An unsecured BIOS can be directed to boot from an attacker's storage device,
    allowing them to compromise the confidentiality and integrity of data stored on
    the Proxmox VE host and interfere with the availability of the services and virtual
    servers the host has intended to provide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By manipulating an unsecured bootloader, attackers can gain root access to a
    machine and compromise its confidentiality, integrity, and availability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using either method, the attacker effectively owns the machine. Let's do our
    best to lock down the BIOS/UEFI on our hosts and GRUB 2.0, the bootloader for
    Proxmox VE 3.4 and 4.1.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the Debian bootstrap process, visit [https://www.debian.org/doc/manuals/debian-reference/ch03.en.html#_an_overview_of_the_boot_strap_process](https://www.debian.org/doc/manuals/debian-reference/ch03.en.html#_an_overview_of_the_boot_strap_process).
  prefs: []
  type: TYPE_NORMAL
- en: Locking down the bootloader
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'OS-level authentication restrictions can be very simply defeated on an otherwise
    secure Proxmox VE machine by manipulating GRUB 2, Proxmox VE''s bootloader. See,
    for example, [http://linuxconfig.org/ubuntu-14-04-lost-password-recovery](http://linuxconfig.org/ubuntu-14-04-lost-password-recovery),
    wherein the process is fully articulated. The gist of an attack looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Reboot and enter the GRUB 2 menu immediately after startup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the boot options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Boot the system based on your modifications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the root password of the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shutdown and restart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Login with the new password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For an experienced GNU/Linux administrator, it's likely a familiar process;
    it's identical to how we reset a lost root password.
  prefs: []
  type: TYPE_NORMAL
- en: GRUB 2 offers extensive customization, and with it, the power to disable access
    to GRUB 2 options generally, as well as to specific menu options.
  prefs: []
  type: TYPE_NORMAL
- en: We will walk through the universal protection of GRUB 2 menu entries to enable
    access by a single superuser with an unencrypted password. This will prohibit
    attackers as well as sloppy or disgruntled colleagues from editing a GRUB entry
    or accessing a GRUB command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To follow this procedure, you must:'
  prefs: []
  type: TYPE_NORMAL
- en: Have root privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine a superuser name and password to be used (we will use the name `admin`
    and the password `pve`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit GRUB configuration files from the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the GRUB 2 configuration with the update-grub command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log into a shell on your Proxmox VE host; if PVE is configured with an IP address
    of 192.168.1.200, access a shell via SSH from a workstation on the same network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `/etc/grub.d/00_header` using a plaintext editor; this example uses `nano`
    as the editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following lines to the bottom of the text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the document and exit the editor; in `nano`, use  *Ctrl* +*X*, then *Y*,
    and then  *Enter* to return to a shell prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `/etc/grub.d/10_linux` in `nano`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Seek the following group of lines in `/etc/grub.d/10_linux`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the last line, insert `--unrestricted` between `${CLASS}` and `\$menuentry;`
    the resultant line appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the revised document and exit the editor; in `nano`, use  **Ctrl** +  **X**
    to exit, press  **Y** to confirm, and then press  **Enter** to return to a shell
    prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, prompt GRUB 2 to reconfigure itself based on the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When you reboot, you should find that PVE will start normally if left uninterrupted.
    However, if you try to edit a menu entry, boot from a submenu, or access a GRUB
    command line, you should find that you're required to authenticate.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more on GRUB security, visit the following links:[https://help.ubuntu.com/community/Grub2/Passwords](https://help.ubuntu.com/community/Grub2/Passwords)
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.gnu.org/software/grub/manual/grub.html#Security](http://www.gnu.org/software/grub/manual/grub.html#Security)'
  prefs: []
  type: TYPE_NORMAL
- en: As the article at [http://opensourceforu.efytimes.com/2013/03/playing-hide-and-seek-with-passwords/](http://opensourceforu.efytimes.com/2013/03/playing-hide-and-seek-with-passwords/)
    points out, this password can still be bypassed by configuring BIOS/UEFI to boot
    from the attacker's boot device. If your hardware allows, you probably want to
    secure this first stage of the boot process so would-be malefactors won't be able
    to finagle the Proxmox VE host to boot from their own devices.
  prefs: []
  type: TYPE_NORMAL
- en: Locking down BIOS/UEFI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By securing the bootloader, GRUB 2, we can prevent a user from bypassing OS
    security and gaining root privileges on the Proxmox VE host.
  prefs: []
  type: TYPE_NORMAL
- en: However, attackers can still simply bypass even the bootloader's security by
    booting instead from their own media. From there, they can mount the machine's
    secondary storage and make immediate decisions for you about its confidentiality
    and integrity. If an attacker is particularly deliberate, he/she can install a
    cunning means to access the machine remotely at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate this threat, we can, depending on our firmware, password protect
    the boot device settings in either the BIOS or UEFI.
  prefs: []
  type: TYPE_NORMAL
- en: Since there's an unwieldy array of BIOS and UEFI firmware vendors, we'll articulate
    a vision for what we'd like to do, and then hope our systems will cooperate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The objective is to manipulate the BIOS/UEFI so it operates as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Allows the system to cold-boot without any interruption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires authentication to change the boot device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prohibits entering the setup manager without authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This configuration can be tricky and is largely contingent on the BIOS/UEFI
    vendor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, a machine with BIOS will allow you to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the BIOS configuration when starting your PC. After power on, press the
    prompted key to enter **BIOS Setup Utility**; sometimes, it's the F key, **Delete**,or **ESC**.
    On some Lenovo machines, it's **Enter**. In the case of VMWare's PhoenixBIOS, **F2**
    is used to access the setup utility (access to this interface is what we want
    to make impossible or frustrating for an attacker):![Locking down BIOS/UEFI](img/image_07_012.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PhoenixBIOS, included with VMware Workstation, uses F2 to enter setup, F12 for
    network boot, and ESC for the boot menu.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you enter **SETUP**, navigate to a security tab. On the machines I've accessed,
    setting the administrator password will require the same credentials of anyone
    trying to enter the setup utility. On the PhoenixBios for VMware Workstation virtual
    machines, I can still boot without authenticating. So far so good.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, when the preceding screenshot invites users to press  *F12* for network
    boot or *Esc* for the boot menu, they'll find these are unrestricted. In this
    case, any attempt to lock down BIOS for security is really quite devastated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If available, navigate to the boot settings in the SETUP utility. If the option
    is available in the Boot menu, disable devices that aren't used and that you don't
    want to use, such as network boot and boot from optical drives or USB devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, depending on availability, navigate to boot priority and set the boot
    priority of the remaining devices. Some systems allow you to use the  **D** key
    to disable devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ideally, your BIOS setup tool allows you to disable boot devices or password
    protect the boot device menu as well as the SETUP tool itself. Furthermore, it'll
    hopefully let you set a supervisor password without prompting you to authenticate
    to boot. If the boot process is interrupted to ask for authentication, there's
    the potential for a lot of unnecessary, and perhaps unplanned, down-time for the
    services users are relying on.
  prefs: []
  type: TYPE_NORMAL
- en: The settings recommended previously were possible in about half of the physical
    machines I surveyed for the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If your machine does provide for this ideal scenario, realize that, at best,
    losing the BIOS passwords means you've lost your license to reconfigure or troubleshoot
    the physical machine. In case of a lost password, you'll need to research how
    to bypass the security that you once felt was keeping bad guys out. The reset
    process is awkward, inconsistent, a time sink, and may not work.
  prefs: []
  type: TYPE_NORMAL
- en: It's essential, therefore, to keep a safe copy of any credentials you use to
    restrict access to BIOS or UEFI.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about securing the specific BIOS/UEFI system for your Proxmox
    VE host, look for the documentation from the computer or BIOS manufacturers or
    from community users on the Web.
  prefs: []
  type: TYPE_NORMAL
- en: If protecting the boot process to your satisfaction is not possible with the
    BIOS or UEFI you're stuck with, compensate by making sure access to the physical
    host is absolutely secure with alarmed door locks, key passes that log ingress
    and egress, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Secure Boot and Proxmox**'
  prefs: []
  type: TYPE_NORMAL
- en: Proxmox VE does not support the Secure Boot feature of UEFI.
  prefs: []
  type: TYPE_NORMAL
- en: Hardening the OS and hypervisor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The objective here is to ensure the security of both Proxmox VE (3.4 and 4.0)
    and Debian, its underlying operating system. Because Proxmox VE and Debian are
    inextricably bound, it's appropriate to address them together.
  prefs: []
  type: TYPE_NORMAL
- en: Prohibit remote access to the hypervisor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Pundits specifically committed to secure virtual infrastructures are insistent
    on this point: remote access to the hypervisor must be forbidden.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This directive must be qualified: it''s absolutely appropriate it''s absolutely
    appropriate to run a Proxmox VE host heedlessly (sans display) and to access it
    from another workstation on the same LAN via both SSH and the web-based administration
    interface.'
  prefs: []
  type: TYPE_NORMAL
- en: What you want to avoid at all costs is making PVE ports, particularly 22 and
    8006, public-facing and accessible to the Internet. Unless VPN is configured,
    Proxmox VE absolutely should not be available from outside the LAN.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenVPN is an open-source package for providing VPN services; if you're considering
    a VPN solution, read more about OpenVPN at [https:///wiki.debian.org/OpenVPN](https://wiki.debian.org/OpenVPN).
  prefs: []
  type: TYPE_NORMAL
- en: Harden SSH
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Proxmox VE is designed to have two access alternatives:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to a command line interface via SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access via the Web-based administrative interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH must be an available option so administrators can make configuration changes
    to the underlying operating system. Moreover, as we saw in [Chapter 3](ch03.html
    "Chapter 3. Creating Containers"), *Creating Containers* and [Chapter 4](ch04.html
    "Chapter 4. Creating Virtual Machines"), *Creating Virtual Machines*, we may choose
    to take care of a significant amount of Proxmox VE administrative tasks via the
    command line.
  prefs: []
  type: TYPE_NORMAL
- en: So SSH can't be disabled outright in the name of security. However, in the name
    of security assurance, we must fine-tune the configuration of SSH to mitigate
    threats, whether from disgruntled or sloppy colleagues or outside attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our objectives here are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Disabling direct root account access via SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mitigating brute-force password attacks against SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting access by IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using encrypted keys rather than passwords to authenticate over SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling root account access via SSH
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This procedure is critical and absolutely necessary. First, let's create our
    own accounts with which to log in. We'll then use the new account to log in, escalate
    privileges using the `su -` command, and then follow a simple procedure to disable
    the root from logging in through SSH.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this procedure is complete, we''ll log in using the new account for the
    foreseeable future; to perform a procedure that requires root''s privileges, we''ll
    simply use the `su -` command to temporarily escalate the privileges of this user
    account, by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose a username and password you intend to use to administer Proxmox VE via
    SSH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Via SSH, log in as the root using the credentials you created during the installation
    of Proxmox VE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the adduser command, followed by the username you''ve chosen, to create
    a new account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow the prompts to create and confirm the new account's password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the full name you'd like associated with the new account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may choose to ignore the remaining prompts for additional information, such
    as office number, address, and telephone number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Y* and *Enter* to confirm the creation of the new user.![Disabling root
    account access via SSH](img/image_07_013.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new user within a command line prompt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the `exit` command to close the SSH session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reconnect to Proxmox VE using the new account name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `su -` command to escalate privileges and enter the root's password
    to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `/etc/ssh/sshd_config` using `nano`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Seek the following section using the arrow keys or the  **PageDown** key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this file, the `#` symbol signifies that the line is a comment and is not
    to be considered as part of the SSH daemon''s configuration. Let''s remove the `#`
    symbol from the second line to enable the directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and exit the revised configuration file:  *Ctrl* + *X*, *Y*, *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can restart the SSH daemon without it affecting our session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's test to ensure root can no longer log in. Start by entering `exit`
    to leave the `su` mode, and `exit` again to close SSH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start a new SSH session as the root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Access should be denied, without the opportunity to enter a password.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing brute-force attacks against SSH
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As long as SSH daemon is configured to use password authentication, it's vulnerable
    to brute-force password attacks. One mitigation strategy is to install and configure
    Fail2ban, a powerful tool designed to detect attacks on a service and ban the
    offending IP address from which the attacks originate for a predefined period.
    Fail2ban effectively increases the cost in resources and the time attackers have
    to invest to continue a brute force password attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make use of Fail2ban, follow this procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: Login via SSH and your new user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Escalate privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Fail2ban:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the default configuration called `jail.conf` to a new file called `jail.local`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the new file in an editor such as `nano`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Cofirm Fail2ban''s configuration for SSH in the following stanza:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit `nano` with  *Ctrl* + *X*, *Y*,  *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If any changes were necessary, restart Fail2ban:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fail2ban can also be configured to protect PVE's web-based administration interface
    from brute-force attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the following to `/etc/fail2ban/jail.local`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Then, create the filter by entering `nano /etc/fail2ban/filter.d/proxmox.conf`
    at the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Save the file and exit `nano` with  *Ctrl* +*X*, *Y*, *Enter*. *Restart* Fail2ban
    to activate the new configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With Fail2ban configured as described previously, failure to authenticate successfully
    three times in a row in the web interface will prohibit the client from connecting
    again for a full hour:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preventing brute-force attacks against SSH](img/B01784_07_15.png)'
  prefs: []
  type: TYPE_IMG
- en: After three unsuccessful attempts to log in to the PVE web interface
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More on Fail2ban**'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Fail2ban and how it works, visit [http://www.fail2ban.org/wiki/index.php/Main_Page](http://www.fail2ban.org/wiki/index.php/Main_Page).
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Fail2ban and Proxmox VE, visit the Proxmox Wiki at [https://pve.proxmox.com/wiki/Fail2ban](https://pve.proxmox.com/wiki/Fail2ban).
  prefs: []
  type: TYPE_NORMAL
- en: Relying on key-based authentication
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another way to secure SSH access to a Proxmox VE server is to rely on key-based
    authentication instead of password authentication. The advantage to this authentication
    method is that you can disable password authentication altogether and not have
    to worry about the strength of legitimate users' passwords. Another benefit is
    that you can use the same key to authenticate to any number of SSH servers.
  prefs: []
  type: TYPE_NORMAL
- en: To make use of this feature, we'll start by generating an SSH key pair. Once
    you have a public and private key that can be used to authenticate, we'll place
    the public key on the PVE host so that we can use SSH key authentication to log
    in. Once these two procedures are complete, you'll check to see whether you can
    log in to your PVE host.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the examples that follow, `rgoldman` is used as a placeholder for the username,
    while 192.168.1.200 is used as a placeholder for PVE's IP address. Please replace
    each as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a workstation on the same LAN as the PVE host, generate an SSH key pair:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Confirm the key location at the first prompt by pressing  **Enter**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the next prompts, you may choose to create and confirm an optional passphrase;
    using a passphrase will prevent an attacker from accessing the PVE host from your
    workstation. On the other hand, you''ll have to enter the passphrase every time
    you wish to authenticate with the key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Look for confirmation that the key has been created—you should see an output
    to the terminal similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An output similar to the preceding example confirms that you have a public and
    private key that you can use to authenticate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, let's place the public key on the PVE host so that you can use the SSH
    key authentication to login.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Confirm the presence of the keys by listing the contents of `~/.ssh/`; ensure
    that both `id_rsa` and `id_rsa.pub` are present in the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, push the new public key to the PVE host using the `ssh-copy-id` tool
    with the following syntax (assuming the username is `rgoldman` and the PVE host
    is at `192.168.1.200`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it. Now confirm you can login without a password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you were able to login to your PVE account using SSH without a password,
    you have successfully configured SSH key-based authentication for your account.
  prefs: []
  type: TYPE_NORMAL
- en: 'The image that follows illustrates the transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Relying on key-based authentication](img/B01784_07_16-3.png)'
  prefs: []
  type: TYPE_IMG
- en: SSH key authentication
  prefs: []
  type: TYPE_NORMAL
- en: Note, however, that your password-based authentication mechanism is still active;
    the SSH server is still exposed to brute-force or social engineering attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will disable password-based authentication on your server.
    Certainly, don''t proceed here if you plan to access PVE from other hosts but
    haven''t copied the key yet (or if you are not yet confident with key-based authentication):'
  prefs: []
  type: TYPE_NORMAL
- en: Using SSH, log in to the PVE host from a local workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Escalate privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the SSH daemon configuration using `nano` or another plaintext editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Browse the contents of the file for the following directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the directive so it is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and close the editor with  *Ctrl* + *X*, *Y* , *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the SSH daemon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now access Proxmox VE via SSH without worrying about the strength of
    our passwords or being vulnerable to brute force attacks or social engineering
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Note, however, it's imperative when we rely on key-based authentication that
    we keep our keys absolutely secure. This means, in part, remembering consistently
    to lock our workstations and protect our workstation accounts with strong passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Learn more about SSH**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about SSH and authentication, consider visiting the following
    resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.debian-administration.org/article/530/SSH_with_authentication_key_instead_of_password](https://www.debian-administration.org/article/530/SSH_with_authentication_key_instead_of_password)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server](https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://debian-handbook.info/browse/stable/sect.remote-login.html](https://debian-handbook.info/browse/stable/sect.remote-login.html)'
  prefs: []
  type: TYPE_NORMAL
- en: For additional hardening strategies for SSH, visit [http://howto.biapy.com/en/debian-gnu-linux/system/security/harden-the-ssh-access-security-on-debian](http://howto.biapy.com/en/debian-gnu-linux/system/security/harden-the-ssh-access-security-on-debian).
  prefs: []
  type: TYPE_NORMAL
- en: Managing patches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we discovered, the patch for the VENOM exploit was available for Debian the
    same day the exploit was made public; PVE administrators simply had to update
    and upgrade and restart PVE guests to eliminate the threat. This should drive
    home the importance of applying security patches not only for the Proxmox VE host,
    but also for its guests, whether they are containers or virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: However, routinely applying patches for several machines is tedious no matter
    the assurance it provides.
  prefs: []
  type: TYPE_NORMAL
- en: For the PVE hosts and Ubuntu or Debian guests, there are several tools to relieve
    the tedium. Finding the sweet spot between fully automated upgrades with minimal
    interactivity and doing due diligence to ensure patch candidates won't disrupt
    operations is where the magic happens.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll configure a tool called **unattended-upgrades** to routinely
    apply only security upgrades. We'll leave other patches to our best judgement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the APT tool to install unattended-upgrades:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, configure the automated security upgrades:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default configuration file for the unattended-upgrades package is at `/etc/apt/apt.conf.d/50unattended-upgrades`;
    let''s take a look at it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Look for the following stanza (the `//` characters preceding some lines effectively
    comment out directives so they are ignored):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that the line with "`${distro_id}:${distro_codename}-security`"; is not
    commented out. This directive signals the utility to allow unattended-upgrades
    from security repositories, and only from security repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exit the configuration file by pressing  *Ctrl* +  *X* ,  *Y* , and  *Enter*
    to preserve any changes you may have made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s check the configuration of `/etc/apt/apt.conf.d/20auto-upgrade`
    to ensure that Debian is configured to periodically update package lists and that
    unattended-upgrades are enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that the following lines appear in the file as they do here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With unattended-upgrades configured, de-escalate privileges by entering `exit`
    in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes made by the unattended-upgrades utility are logged in `/var/log/unattended-upgrades/unattended-upgrades.log`.
  prefs: []
  type: TYPE_NORMAL
- en: The same package can be used to automate security patch applications for Proxmox
    VE guests running Ubuntu, Debian, or LinuxMint.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the unattended-upgrades package, see the following documentation:[https://wiki.debian.org/UnattendedUpgrades](https://wiki.debian.org/UnattendedUpgrades)
  prefs: []
  type: TYPE_NORMAL
- en: '[https://debian-handbook.info/browse/stable/sect.regular-upgrades.html](https://debian-handbook.info/browse/stable/sect.regular-upgrades.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise subscriptions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Though PVE may be open source, Proxmox Server Solutions (the company behind
    Proxmox VE) very strongly encourages users to invest in subscriptions for Proxmox
    VE ([https://www.proxmox.com/en/proxmox-ve/support](https://www.proxmox.com/en/proxmox-ve/support)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"A Proxmox VE subscription is the easy and affordable solution to get access
    to the Proxmox VE Enterprise repository, to stable software updates and security
    enhancements, as well as to technical support services. A subscription helps you
    to run Proxmox VE with confidence in your company."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*"By combining great open source software with quality-assured services and
    support the Proxmox VE Subscription helps you to deploy and maintain the best
    stable and secure open source virtualization environment"*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Security wise, there is a strong advantage to obtaining a subscription: Proxmox
    Server Solutions provides subscribers with access to the enterprise repository,
    which provides stable and "enhanced" security updates.'
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, users of the `pve-no-subscription` repositories have access to
    patches that are perhaps more cutting-edge, but also less stable.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another benefit of a Proxmox subscription is access to dedicated, professional
    support. This is far from a commentary on community support, which has in all
    cases been fantastic in my experience. However, subscription support will track
    a ticket and promise prompt solutions. In a production environment, this can certainly
    make a critical difference.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four subscription plans available: premium, standard, basic, and
    community (this last plan does not offer a support plan, but it does offer access
    to the enterprise repository). Plans are priced per month per CPU socket ([https://www.proxmox.com/en/proxmox-ve/pricing](https://www.proxmox.com/en/proxmox-ve/pricing)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Subscriptions are licensed per physical server and CPU socket. In a Proxmox
    VE Cluster, you need to have the same subscription level for all your servers.
    Subscription period is one year from purchase date."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Technical support is provided to subscribers via a web and email-based customer
    portal (in English or German).
  prefs: []
  type: TYPE_NORMAL
- en: Community support, by contrast, is available via the public support forum ([https://forum.proxmox.com](https://forum.proxmox.com))
    or via IRC (the `##proxmox` channel on the Freenode network).
  prefs: []
  type: TYPE_NORMAL
- en: '![Enterprise subscriptions](img/image_07_016.png)'
  prefs: []
  type: TYPE_IMG
- en: Proxmox community support forum
  prefs: []
  type: TYPE_NORMAL
- en: A video tutorial is available to guide subscribers in uploading a subscription
    key to Proxmox VE and installing new updates at [https://www.proxmox.com/en/training/video-tutorials/item/install-updates](https://www.proxmox.com/en/training/video-tutorials/item/install-updates).
  prefs: []
  type: TYPE_NORMAL
- en: From a security perspective then, the `pve-no-subscription` repository is characterized
    on the site as offering patches that are not quite stable enough for production,
    while the enterprise repository promises enhanced security patches. You'll have
    to make a deliberate choice for your use case.
  prefs: []
  type: TYPE_NORMAL
- en: If you're moving services that are not mission-critical to a virtual infrastructure
    with Proxmox VE, perhaps community support and the `pve-no-subscription` options
    will work well for you. Otherwise, give all due consideration to an appropriate
    subscription option.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The security and information that assurance administrators can realistically
    provide is clearly never as exhaustive as it is exhausting.
  prefs: []
  type: TYPE_NORMAL
- en: In the first section of this chapter, you learned that hardware virtualization
    has inherent security benefits.
  prefs: []
  type: TYPE_NORMAL
- en: However, you also learned that many promising benefits are undermined if they're
    not supported by thorough planning of the virtual infrastructure, explicit policy-making
    up front, and a flawless deployment, all followed by unflagging policy enforcement
    and ongoing virtual server lifecycle management.
  prefs: []
  type: TYPE_NORMAL
- en: We then outlined threats that are either unique to virtualized infrastructures
    or aggravated in the context of virtualization. Each point was followed by either
    concrete action to mitigate the threat or links to resources for more details
    on addressing a potential problem.
  prefs: []
  type: TYPE_NORMAL
- en: We concluded with concrete, step-by-step remedies that could be initiated immediately,
    even as you continue to explore and assess Proxmox VE.
  prefs: []
  type: TYPE_NORMAL
