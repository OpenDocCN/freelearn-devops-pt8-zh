["```\n# hello_world.pp\nnotify { 'Hello, world!':\n} \n```", "```\nroot@puppetmaster:~# puppet apply hello_world.pp\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.45 seconds\nNotice: Hello, world!\nNotice: /Stage[main]/Main/Notify[Hello, world!]/message: defined 'message' as 'Hello, world!'\nNotice: Applied catalog in 0.03 seconds \n```", "```\n# puppet_service.pp\nservice { 'puppet':\n  ensure => 'stopped',\n  enable => false,\n}\n```", "```\nroot@puppetmaster:~# puppet apply puppet_service.pp\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.61 seconds\nNotice: /Stage[main]/Main/Service[puppet]/ensure: ensure changed 'running' to 'stopped'\nNotice: Applied catalog in 0.15 seconds \n```", "```\nroot@puppetmaster:~# puppet apply puppet_service.pp\nNotice: Compiled catalog for puppetmaster.example.net in environment \nproduction in 0.62 seconds\nNotice: Applied catalog in 0.07 seconds \n```", "```\nservice { 'puppet':\n  ensure   => 'stopped',\n  enable   => false,\n  provider => 'upstart',\n}\n```", "```\nroot@puppetmaster:~# puppet resource user root\nuser { 'root':\n ensure           => 'present',\n comment          => 'root',\n gid              => '0',\n home             => '/root',\n password         => '$6$17/7FtU/$TvYEDtFgGr0SaS7xOVloWXVTqQxxDUgH.\n eBKJ7bgHJ.hdoc03Xrvm2ru0HFKpu1QSpVW/7o.rLdk/9MZANEGt/',\n password_max_age => '99999',\n password_min_age => '0',\n shell            => '/bin/bash',\n uid              => '0',\n} \n```", "```\nroot@puppetmaster:~# puppet apply puppet_service.pp\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.48 seconds\nNotice: Applied catalog in 0.05 seconds\n```", "```\n# puppet apply -e'service { \"puppet\": enable => true, }'\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.62 seconds\nNotice: /Stage[main]/Main/Service[puppet]/enable: enable changed 'false' to 'true'\nNotice: Applied catalog in 0.12 seconds. \n```", "```\nroot@puppetmaster:~# puppet apply puppet_service.pp --noop\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.63 seconds\nNotice: /Stage[main]/Main/Service[puppet]/enable: current_value true, should be false (noop)\nNotice: Class[Main]: Would have triggered 'refresh' from 1 events\nNotice: Stage[main]: Would have triggered 'refresh' from 1 events\nNotice: Applied catalog in 0.06 seconds \n```", "```\n$download_server = 'img2.example.net'\n$url = \"https://${download_server}/pkg/example_source.tar.gz\" \n```", "```\n$a_bool = true\n$a_string = 'This is a string value'\n$an_array = [ 'This', 'forms', 'an', 'array' ]\n$a_hash = { \n  'subject'   => 'Hashes',\n  'predicate' => 'are written',\n  'object'    => 'like this',\n  'note'      => 'not actual grammar!',\n  'also note' => [ 'nesting is',\n{ 'allowed'   => ' of course' } ], \n}\n```", "```\n$x = $a_string\n$y = $an_array[1]\n$z = $a_hash['object'] \n```", "```\npackage { $apache_package:\n  ensure => 'installed'\n}\n```", "```\n$packages = [\n  'apache2',\n  'libapache2-mod-php5',\n  'libapache2-mod-passenger',\n ]\npackage { $packages:\n  ensure => 'installed'\n}\n```", "```\nif 'mail_lda' in $needed_services {\n  service { 'dovecot': enable => true }\n} else {\n  service { 'dovecot': enable => false }\n}\n```", "```\ncase $role {\n  ‘imap_server’: {\n    package { ‘dovecot’: ensure => installed, }\n    service { ‘dovecot’: ensure => running, }\n  }\n  /_webservers$/: {\n    service { [‘apache’, ‘ssh’]: ensure => running, }\n  }\n  default: {\n    service { ‘ssh’: ensure => running, }\n  }\n}\n```", "```\ncase $role {\n  Array: {\n    include $role[0]\n  }\n  String: {\n    include $role\n  }\n  default: {\n    notify { 'This nodes $role variable is neither an \n    Array nor a String':}\n  }\n}\n```", "```\npackage { 'dovecot':\n  ensure => $role ? {\n    'imap_server' => 'installed',\n    /desktop$/    => 'purged',\n    default       => 'removed',\n  },\n}\n```", "```\npackage { 'dovecot':\n  ensure  => $role ? {\n    Boolean => 'installed',\n    String  => 'purged',\n    default => 'removed',\n  },\n}\n```", "```\npackage { 'haproxy':\n  ensure => 'installed',\n}\nfile {'/etc/haproxy/haproxy.cfg':\n  ensure => file,\n  owner  => 'root',\n  group  => 'root',\n  mode   => '0644',\n  source => 'puppet:///modules/haproxy/etc/haproxy/haproxy.cfg',\n}\nservice { 'haproxy':\n  ensure  => 'running',\n}\n```", "```\nordering = manifest\n```", "```\npackage { 'haproxy':\n  ensure => 'installed',\n}\n->\nfile { '/etc/haproxy/haproxy.cfg':\n  ensure => file,\n  owner  => 'root',\n  group  => 'root',\n  mode   => '0644',\n  source => 'puppet:///modules/haproxy/etc/haproxy/haproxy.cfg',\n}\n->\nservice {'haproxy':\n  ensure => 'running',\n}\n```", "```\nType['title']\ne.g.\nPackage['haproxy'] \n```", "```\npackage { 'haproxy':\n  ensure  => 'installed',\n}\nfile {'/etc/haproxy/haproxy.cfg':\n  ensure  => file,\n  owner   => 'root',\n  group   => 'root',\n  mode    => '0644',\n  source  => 'puppet:///modules/haproxy/etc/haproxy/haproxy.cfg',\n  require => Package['haproxy'],\n}\n service {'haproxy':\n  ensure  => 'running',\n  require => File['/etc/haproxy/haproxy.cfg'],\n}\n```", "```\npackage { 'haproxy':\n  ensure => 'installed',\n  before => File['/etc/haproxy/haproxy.cfg'],\n}\nfile { '/etc/haproxy/haproxy.cfg':\n  ensure => file,\n  owner  => 'root',\n  group  => 'root',\n  mode   => '0644',\n  source => 'puppet:///modules/haproxy/etc/haproxy/haproxy.cfg',\n  before => Service['haproxy'],\n}\nservice { 'haproxy':\n  ensure => 'running',\n}\n```", "```\nfile { '/etc/apache2/apache2.conf':\n  ensure => file,\n  before => Service['apache2'],\n}\nfile { '/etc/apache2/httpd.conf':\n  ensure => file,\n  before => Service['apache2'],\n}\nservice { 'apache2':\n  ensure => running,\n  enable => true,\n}\n```", "```\nfile { '/etc/apache2/apache2.conf':\n  ensure => file,\n}\nfile { '/etc/apache2/httpd.conf':\n  ensure => file,\n}\nservice { 'apache2':\n  ensure => running,\n  enable => true,\n require => [\n    File['/etc/apache2/apache2.conf'],\n    File['/etc/apache2/httpd.conf'],\n  ],\n}\n```", "```\nif $os_family == 'Debian' {\n  file { '/etc/apt/preferences.d/example.net.prefs':\n    content => '...',\n    before  => Package['apache2'],\n  }\n}\npackage { 'apache2':\n  ensure    => 'installed',\n} \n```", "```\nfile { '/etc/haproxy/haproxy.cfg':\n  ensure => file,\n  source => 'puppet:///modules/haproxy/etc/haproxy.cfg',\n}  \n```", "```\nroot@puppetmaster:~# puppet apply typo.pp\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.62 seconds\nError: /Stage[main]/Main/File[/etc/haproxy/haproxy.cfg]: Could not evaluate: Could not retrieve information from environment production source(s) puppet:///modules/haproxy/etc/haproxy.cfg\nNotice: /Stage[main]/Main/Service[haproxy]: Dependency File[/etc/haproxy/haproxy.cfg] has failures: true\nWarning: /Stage[main]/Main/Service[haproxy]: Skipping because of failed dependencies\nNotice: Applied catalog in 0.06 seconds \n```", "```\nfile { '/etc/haproxy':\n  ensure  => 'directory',\n  owner   => 'root',\n  group   => 'root',\n  mode    => '0644',\n}\nfile { '/etc/haproxy/haproxy.cfg':\n  ensure  => file,\n  owner   => 'root',\n  group   => 'root',\n  mode    => '0644',\n  source  => 'puppet:///modules/haproxy/etc/haproxy/haproxy.cfg',\n}\nservice { 'haproxy':\n  ensure  => 'running',\n  require => File['/etc/haproxy/haproxy.cfg'],\n  before  => File['/etc/haproxy'],\n}\n```", "```\nroot@puppetmaster:~# puppet apply circle.pp\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.62 seconds\nError: Failed to apply catalog: Found 1 dependency cycle:\n(File[/etc/haproxy/haproxy.cfg] => \n               Service[haproxy] => \n             File[/etc/haproxy] => File[/etc/haproxy/haproxy.cfg])\nTry the '--graph' option and opening the resulting '.dot' file in OmniGraffle or GraphViz\n```", "```\ndigraph Resource_Cycles {\nlabel = \"Resource Cycles\"\n\"File[/etc/haproxy/haproxy.cfg]\" ->\"Service[haproxy]\" ->\"File[/etc/haproxy]\" ->\"File[/etc/haproxy/haproxy.cfg]\"\n}  \n```", "```\nroot@puppetmaster:~# puppet apply puppet_service.pp --noop\nNotice: Compiled catalog for puppetmaster.example.net in environment production in 0.62 seconds\nNotice: /Stage[main]/Main/Service[puppet]/ensure: current_value running, should be stopped (noop)\nNotice: Class[Main]: Would have triggered 'refresh' from 1 events\nNotice: Stage[main]: Would have triggered 'refresh' from 1 events\nNotice: Applied catalog in 0.05 seconds \n```", "```\nfile { '/etc/haproxy/haproxy.cfg':\n  ensure  => file,\n  owner   => ‘root’,\n  group   => ‘root’\n  mode    => ‘0644’\n  source  => ‘puppet:///modules/haproxy/etc/haproxy/haproxy.cfg',\n  require => Package['haproxy'],\n}\nservice { 'haproxy':\n  ensure    => 'running',\n  subscribe => File['/etc/haproxy/haproxy.cfg'],\n}\n```", "```\nfile { '/etc/haproxy/haproxy.cfg':\n  ensure  => file,\n  owner   => 'root',\n  group   => 'root',\n  mode    => '0644',\n  source  => 'puppet:///modules/haproxy/etc/haproxy/haproxy.cfg',\n  require => Package['haproxy'],\n  notify  => Service['haproxy'],\n}\nservice { 'haproxy':\n  ensure  => 'running',\n}\n```", "```\nfile { '/etc/haproxy/haproxy.cfg': … }\n~>\nservice { 'haproxy': … }\n```", "```\nfile { '/etc/modules':\n  ensure  => file,\n  content => \"# Managed by Puppet!\\n\\ndrbd\\n\",\n}\n```", "```\nfile { '/etc/apache2/sites-enabled/001-puppet-lore.org':\n  ensure => 'link',\n  target => '../sites-available/puppet-lore.org',\n}\n```", "```\nfile { '../demo.txt':\n  ensure => file,\n}\npuppet apply file_error.pp\nNotice: Compiled catalog for puppetmaster.demo.example42.com in environment production in 0.09 seconds\nError: Parameter path failed on File[../demo.txt]: File paths must be fully qualified, not '../demo.txt' at /root/file_error.pp:1\n```", "```\npackage { 'haproxy':\n  ensure   => present,\n  provider => 'dpkg',\n  source   => '/opt/packages/haproxy-1.5.1_amd64.dpkg',\n}\n```", "```\nservice { 'count-logins':\n  provider    => 'base',\n  ensure      => 'running',\n  enable      => true,\n  binary      => '/usr/local/bin/cnt-logins',\n  start       => '/usr/local/bin/cnt-logins –daemonize',\n  has_status  => true,\n  has_restart => true,\n  subscribe   => File['/usr/local/bin/cnt-logins'],\n}\n```", "```\ngroup { 'proxy-admins':\n  ensure     => present,\n  gid        => 4002,\n}\nuser { 'john':\n  ensure     => present,\n  uid        => 2014,\n  home       => '/home/john',\n  managehome => true, # <- adds -m to useradd\n  gid        => 1000,\n  shell      => '/bin/zsh',\n  groups     => [ 'proxy-admins' ],\n}\n```", "```\nexec { 'tar cjf /opt/packages/homebrewn-3.2.tar.bz2':\n  cwd     => '/opt',\n  path    => '/bin:/usr/bin',\n  creates => '/opt/homebrewn-3.2',\n}\n```", "```\nexec { 'perl -MCPAN -e \"install YAML\"':\n  path   => '/bin:/usr/bin',\n  unless => 'cpan -l | grep -qP ^YAML\\\\b',\n}\n```", "```\nexec { 'apt-get update':\n  path        => '/bin:/usr/bin',\n  subscribe   => File['/etc/apt/sources.list.d/jenkins.list'],\n  refreshonly => true,\n}\n```", "```\ncron { 'clean-files':\n  ensure      => present,\n  user        => 'root',\n  command     => '/usr/local/bin/clean-files',\n  minute      => '1',\n  hour        => '3',\n  weekday     => [ '2', '6' ],\n  environment => 'MAILTO=felix@example.net',\n}\n```", "```\nmount { '/media/gluster-data':\n  ensure  => 'mounted',\n  device  => 'gluster01:/data',\n  fstype  => 'glusterfs',\n  options => 'defaults,_netdev',\n  dump    => 0,\n  pass    => 0,\n}\n```"]