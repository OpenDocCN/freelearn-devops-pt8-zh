- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Provisioning Infrastructure Using Infrastructure as Code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基础设施即代码进行基础设施配置
- en: Previously we covered CI/CD topics related to building, testing, packaging,
    and deploying applications. In this chapter, we will learn how to provision and
    configure the destination where deployment will be taking place using automation,
    the benefits of such a process, and a few tips and tricks while we’re at it. You
    will understand why this is important, and even required, in these times when
    we need to deliver fast and with quality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们讨论了与构建、测试、打包和部署应用程序相关的 CI/CD 主题。在本章中，我们将学习如何使用自动化来配置部署目标及其配置过程，理解这种过程的好处，并在过程中提供一些提示和技巧。你将明白为什么在当前快速交付且要求高质量的时代，这一点至关重要，甚至是必需的。
- en: 'In this chapter, we will dive into this by covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨以下主题：
- en: Understanding **Infrastructure as** **Code** (**IaC**)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解**基础设施即代码**（**IaC**）
- en: Working with **Azure Resource Manager** (**ARM**) **templates**
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Azure 资源管理器**（**ARM**）**模板**
- en: Working with **AWS CloudFormation**
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**AWS CloudFormation**
- en: Working with **Terraform**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Terraform**
- en: Let’s take care of the technical requirements first.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先处理技术要求。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Depending on which section you are interested in completing in this chapter,
    you will need the following software installed on your workstation. You will find
    the code for this chapter in the GitHub repository at [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch08](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch08).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你在本章中感兴趣的部分，你需要在工作站上安装以下软件。你可以在 GitHub 仓库 [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch08](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch08)
    找到本章的代码。
- en: Installing Azure tools
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Azure 工具
- en: The Azure CLI is a cross-platform command-line tool to connect to Microsoft
    Azure and execute commands to create, update, or destroy resources. Depending
    on the **operating system** (**OS**) of your workstation, you can choose the appropriate
    installation method at [https://learn.microsoft.com/en-us/cli/azure/install-azure-cli](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli).
    Since the instructions for each OS are different, it’s up to you to complete the
    installation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Azure CLI 是一个跨平台命令行工具，用于连接 Microsoft Azure 并执行命令来创建、更新或销毁资源。根据你工作站的**操作系统**（**OS**），你可以选择适合的安装方法，详情请见
    [https://learn.microsoft.com/en-us/cli/azure/install-azure-cli](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli)。由于每个操作系统的安装指南不同，具体安装过程需要你自己完成。
- en: 'Once installed, run the `az version` command and you’ll see a response like
    this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，运行 `az version` 命令，你会看到类似这样的响应：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can choose any text editor you wish to work with. However, we recommend
    **Visual Studio Code** (**VS Code** for short), as it is one of the most popular
    editors in the community; it’s free and provides a large number of community-supported
    extensions for many programming languages and other tools, especially supporting
    **ARM templates**, **AWS CloudFormation**, and **Terraform**, as we will see in
    the following sections.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择任何你喜欢的文本编辑器来工作。然而，我们推荐使用**Visual Studio Code**（简称**VS Code**），因为它是社区中最流行的编辑器之一；它是免费的，并提供了大量社区支持的扩展，支持多种编程语言和工具，尤其是支持**ARM
    模板**、**AWS CloudFormation**和**Terraform**，正如我们在接下来的章节中将看到的那样。
- en: To install VS Code, proceed to [https://code.visualstudio.com/](https://code.visualstudio.com/).
    From there, you will see options to install it based on your workstation’s OS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 VS Code，请前往 [https://code.visualstudio.com/](https://code.visualstudio.com/)。在那里，你将看到根据你工作站的操作系统安装的选项。
- en: Additionally, you must install the ARM Tools VS Code extension from [https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools](https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还需要从 [https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools](https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools)
    安装 ARM Tools VS Code 扩展。
- en: Installing AWS tools
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 AWS 工具
- en: The AWS CLI is a cross-platform command-line tool to connect to **Amazon Web
    Services** (**AWS**) and execute commands to create, update, or destroy resources.
    Instructions to install it based on your OS can be found at [https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.xhtml](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.xhtml).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI 是一个跨平台的命令行工具，用于连接 **Amazon Web Services**（**AWS**）并执行命令来创建、更新或销毁资源。根据你的操作系统，安装指南可以在[https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.xhtml](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.xhtml)找到。
- en: 'Once installed, run the `aws --version` command in a shell and you’ll see a
    response like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，在终端运行`aws --version`命令，你将看到类似以下的响应：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Additionally, you must install the **AWS Toolkit** VS Code extension from[https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode](https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还必须安装 **AWS Toolkit** 的 VS Code 扩展，下载地址为[https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode](https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode)。
- en: Installing Terraform tools
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Terraform 工具
- en: 'The Terraform CLI is a cross-platform command-line tool to execute a variety
    of subcommands such as `plan`, `apply`, or `destroy`, which we will cover later
    in this chapter. You can install it using the instructions provided at [https://developer.hashicorp.com/terraform/tutorials/azure-get-started/install-cli#install-terraform](https://developer.hashicorp.com/terraform/tutorials/azure-get-started/install-cli#install-terraform).
    Once installed, run `terraform version` in a shell and you’ll see a response like
    the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform CLI 是一个跨平台的命令行工具，用于执行各种子命令，如`plan`、`apply`或`destroy`，这些我们将在本章后续部分介绍。你可以按照[https://developer.hashicorp.com/terraform/tutorials/azure-get-started/install-cli#install-terraform](https://developer.hashicorp.com/terraform/tutorials/azure-get-started/install-cli#install-terraform)中的说明进行安装。安装完成后，在终端运行`terraform
    version`，你将看到类似以下的响应：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Additionally, you can install the HashiCorp Terraform VS Code extension from
    [https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform](https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以从[https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform](https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform)安装
    HashiCorp Terraform 的 VS Code 扩展。
- en: Installing the Terraform Marketplace extension
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Terraform Marketplace 扩展
- en: The **Terraform Marketplace extension** for Azure DevOps must be installed.
    You can find it at [https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks](https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 必须安装 **Terraform Marketplace 扩展**，适用于 Azure DevOps。你可以在[https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks](https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks)找到它。
- en: Access to an Azure account
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问 Azure 账户
- en: You must have access to an Azure account to complete the steps in this chapter.
    If you don’t have one, you can create a free one at [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须拥有一个 Azure 账户才能完成本章中的步骤。如果你没有账户，可以在[https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)创建一个免费的账户。
- en: Access to an AWS account
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问 AWS 账户
- en: You must have access to an AWS account to complete the steps in this chapter.
    If you don’t have one, you can create a free one at [https://aws.amazon.com/free](https://aws.amazon.com/free).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须拥有一个 AWS 账户才能完成本章中的步骤。如果你没有账户，可以在[https://aws.amazon.com/free](https://aws.amazon.com/free)创建一个免费的账户。
- en: Now that we have taken care of all the technical requirements, let’s walk through
    what it means to automate infrastructure using code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经处理了所有技术要求，接下来让我们一步步了解如何使用代码自动化基础设施。
- en: Understanding IaC
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解基础设施即代码（IaC）
- en: In the past, infrastructure was typically provisioned and configured manually
    with manually documented steps and/or a combination of scripts. This made the
    whole process error-prone and slow.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，基础设施通常是通过手动配置和记录的步骤以及/或脚本组合来完成的。这使得整个过程容易出错且速度较慢。
- en: In the same way that you use a rigorous process for your application code, you
    should practice that for your infrastructure. The purpose of this approach is
    to make deployments repeatable and immutable, reduce the chances of error, and
    accelerate the deployment process by avoiding/eliminating any human interaction
    whenever possible.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你对应用程序代码使用严格的流程一样，你也应该对基础设施采取相同的做法。这样做的目的是使部署过程可重复、不可变，减少错误的机会，并通过尽可能避免/消除人工干预，加速部署过程。
- en: IaC is the practice of codifying and storing in source control a descriptive
    model that defines and deploys all the infrastructure needed to run your applications
    and any supporting dependencies. It can encompass network configuration, load
    balancers, virtual machines, and any other application or data services your application
    architecture requires to operate and is applicable to on-premises data centers
    and cloud provider platforms.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 是一种将描述模型编写为代码并存储在源控制中的实践，该模型定义并部署运行应用程序和任何支持依赖项所需的所有基础设施。它可以包含网络配置、负载均衡器、虚拟机以及应用架构运行所需的任何其他应用程序或数据服务，适用于本地数据中心和云平台。
- en: 'The best way to picture all this working together is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最好将这一切工作流程想象成如下所示：
- en: '![Figure 8.1 – CI/CD incorporating IaC](img/B18875_08_1.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 融合 IaC 的 CI/CD](img/B18875_08_1.jpg)'
- en: Figure 8.1 – CI/CD incorporating IaC
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 融合 IaC 的 CI/CD
- en: Let’s jump into working with ARM templates now and see how we can do this on
    the Microsoft Azure cloud platform.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在开始使用 ARM 模板，并看看如何在 Microsoft Azure 云平台上进行操作。
- en: Working with ARM templates
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ARM 模板
- en: ARM templates are one of the IaC options available to deploy infrastructure
    in Azure, Microsoft’s cloud platform available in many regions around the world.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ARM 模板是 Azure 中可用的 IaC 部署基础设施的选项之一，Microsoft 的云平台在全球多个地区提供。
- en: Microsoft also provides other tools such as the Azure CLI, Azure PowerShell,
    and a newer, domain-specific language called Bicep that uses a declarative syntax
    to deploy resources. You can also use the Azure portal, a web-based UI that provides
    access to all your resources in Azure and the ability to create, update, and delete
    resources.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 微软还提供了其他工具，如 Azure CLI、Azure PowerShell 和一种更新的、特定领域的语言 Bicep，Bicep 使用声明式语法来部署资源。你还可以使用
    Azure 门户，一个基于 Web 的 UI，提供访问你在 Azure 中的所有资源的功能，并允许你创建、更新和删除资源。
- en: 'ARM templates are JSON files with the following structure:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ARM 模板是具有以下结构的 JSON 文件：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ARM templates can define required and optional input **parameters**, **variables**
    that can be calculated for use within the template, user-defined **functions**
    that you can use within the template in addition to built-in ones, **resources**
    that define all properties to configure for one or more resources, and **outputs**
    that can contain properties or values calculated from the deployed resources.
    ARM templates can also be nested to logically separate your services.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ARM 模板可以定义必需和可选的输入**参数**、可以计算供模板中使用的**变量**、用户定义的**函数**（除了内置函数外，还可以在模板中使用），**资源**（定义要配置的一个或多个资源的所有属性）以及**输出**（可以包含从已部署资源中计算出来的属性或值）。ARM
    模板还可以嵌套，以逻辑上分离你的服务。
- en: In this section, we will focus on how to deploy ARM templates using Azure Pipelines,
    without getting into the details of how to create them, as that is outside the
    scope of this book.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于如何使用 Azure Pipelines 部署 ARM 模板，而不涉及如何创建它们的细节，因为这超出了本书的范围。
- en: 'Deploying ARM templates comes down to the following steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 ARM 模板的步骤如下：
- en: Creating a service principal in Azure
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 中创建服务主体
- en: Creating a service connection to Azure
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Azure 的服务连接
- en: Creating an ARM template
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 ARM 模板
- en: Validating the ARM template
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 ARM 模板
- en: Deploying the ARM template
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署 ARM 模板
- en: Let’s start by creating a service principal in Azure.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 Azure 中创建服务主体开始。
- en: Creating a service principal in Azure
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Azure 中创建服务主体
- en: A **service principal** is a type of identity in Azure used by applications,
    services, and automation tools to provide fine-grained control to access resources
    and perform actions based on roles.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务主体**是 Azure 中的一种身份类型，由应用程序、服务和自动化工具使用，用于提供精细化控制，以根据角色访问资源并执行操作。'
- en: Important note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This section assumes that you are logged in to Azure using the `az` `login`
    command.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假设你已经使用 `az` `login` 命令登录到 Azure。
- en: 'We can create a service principal with the following Azure CLI command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下 Azure CLI 命令创建一个服务主体：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You would replace `<subscription-id>`, which should be a GUID-like value from
    the Azure portal. Setting the scope at the subscription level is fine for testing
    purposes, but in your ideal setup, you will want to restrict it further – say,
    to a resource group:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要替换 `<subscription-id>`，它应该是来自 Azure 门户的类似 GUID 的值。将作用域设置为订阅级别在测试过程中是可以的，但在理想的设置中，你可能希望进一步限制它——比如说，限制到一个资源组：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once you execute this command, you should get a response similar to the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你执行这个命令，你应该会得到类似于以下的响应：
- en: '![Figure 8.2 – Service principal details](img/B18875_08_2.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 服务主体详情](img/B18875_08_2.jpg)'
- en: Figure 8.2 – Service principal details
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 服务主体详情
- en: You must handle the service principal details as a secret. This is sensitive
    information that provides access to your Azure environment. You will need this
    for the next steps.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须将服务主体详情视为密钥。这是敏感信息，提供对您的 Azure 环境的访问权限。您将需要这些信息来完成接下来的步骤。
- en: Now let’s see how to create the service connection to Azure using the service
    principal.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用服务主体创建 Azure 服务连接。
- en: Creating a service connection to Azure
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Azure 服务连接
- en: 'As seen in previous chapters, integrating with external services in Azure Pipelines
    requires a service connection. This can be done by following these steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前几章所见，Azure Pipelines 中与外部服务集成需要一个服务连接。您可以通过以下步骤完成此操作：
- en: 'Navigate to **Project Settings** | **Pipelines** | **Service connections**,
    where you will click on the **New service** **connection** button:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**项目设置** | **管道** | **服务连接**，然后点击**新建服务** **连接**按钮：
- en: '![Figure 8.3 – New service connection](img/B18875_08_3.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 新建服务连接](img/B18875_08_3.jpg)'
- en: Figure 8.3 – New service connection
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 新建服务连接
- en: 'From here, you will select the **Azure Resource Manager** option and click
    the **Next** button:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此，您将选择**Azure 资源管理器**选项并点击**下一步**按钮：
- en: '![Figure 8.4 – Selecting the service connection type](img/B18875_08_4.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 选择服务连接类型](img/B18875_08_4.jpg)'
- en: Figure 8.4 – Selecting the service connection type
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 选择服务连接类型
- en: 'Next, select an authentication method, using the **Service principal (manual)**
    option, and click the **Next** button:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择认证方法，使用**服务主体（手动）**选项，并点击**下一步**按钮：
- en: '![Figure 8.5 – Select an authentication method for the Azure service connection](img/B18875_08_5.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 为 Azure 服务连接选择认证方法](img/B18875_08_5.jpg)'
- en: Figure 8.5 – Select an authentication method for the Azure service connection
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 为 Azure 服务连接选择认证方法
- en: Although the preceding screenshot shows **Service principal (automatic)** as
    **Recommended**, this is only from the standpoint of a user just getting started
    with Azure and Azure Pipelines. When you have many Azure subscriptions and resource
    groups, that authentication method makes it difficult to complete the setup.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管上面的截图显示**服务主体（自动）**作为**推荐**，但这仅适用于刚开始使用 Azure 和 Azure Pipelines 的用户。当您有多个
    Azure 订阅和资源组时，这种认证方法会使设置过程变得困难。
- en: 'The next step allows you to enter the details for the following parameters:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步让您输入以下参数的详细信息：
- en: '`appId` from the previous section, as shown in *Figure 8.2*'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自上一节的`appId`，如*图 8.2*所示
- en: '`password` from the previous section, as shown in *Figure 8.2*'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自上一节的`password`，如*图 8.2*所示
- en: '`tenant` from the previous section, as shown in *Figure 8.2*'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自上一节的`tenant`，如*图 8.2*所示
- en: '`azure-packt-rg`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`azure-packt-rg`'
- en: Once you have entered all these values, you have the option to click on the
    **Verify and save** button, which will test that a connection to Azure can be
    established and store the service connection details.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦输入了所有这些值，您可以选择点击**验证并保存**按钮，这将测试是否可以建立到 Azure 的连接，并保存服务连接的详细信息。
- en: Now that we have a service connection, let’s move on to creating an ARM template.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了服务连接，让我们继续创建一个 ARM 模板。
- en: Creating an ARM template
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 ARM 模板
- en: 'There are many ways to create ARM templates:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以创建 ARM 模板：
- en: From scratch, by following the reference documentation at [https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code](https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始，通过参考文档 [https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code](https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code)
- en: From the Azure portal, by downloading a template before deployment from the
    Marketplace or an existing resource group, as described at [https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/export-template-portal](https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/export-template-portal)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Azure 门户，您可以在部署前从市场或现有资源组下载模板，具体操作可参考 [https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/export-template-portal](https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/export-template-portal)
- en: Modifying an existing sample template at [https://learn.microsoft.com/en-us/samples/browse/?expanded=azure&products=azure-resource-manager](https://learn.microsoft.com/en-us/samples/browse/?expanded=azure&products=azure-resource-manager)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改现有的示例模板，链接：[https://learn.microsoft.com/en-us/samples/browse/?expanded=azure&products=azure-resource-manager](https://learn.microsoft.com/en-us/samples/browse/?expanded=azure&products=azure-resource-manager)
- en: In this chapter, for simplicity, we will use a modified version of an existing
    sample that deploys an Azure App Service resource. You can find the template at
    [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch08/azure/azuredeploy.json](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch08/azure/azuredeploy.json)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，为了简便，我们将使用一个修改版的现有示例，该示例部署了一个 Azure 应用服务资源。您可以在此链接找到模板：[https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch08/azure/azuredeploy.json](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch08/azure/azuredeploy.json)
- en: 'This ARM template will deploy two resources:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此 ARM 模板将部署两个资源：
- en: An **Azure App Service plan**, which defines the pricing tier, OS, and other
    platform-level capabilities
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 **Azure 应用服务计划**，它定义了定价层、操作系统以及其他平台级功能。
- en: An **Azure App Service web app**, which defines the application-level stack,
    such as the PHP runtime and version
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 **Azure 应用服务 web 应用**，它定义了应用程序级堆栈，如 PHP 运行时及版本。
- en: Now let’s see how we can validate this template using Azure Pipelines.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用 Azure Pipelines 验证这个模板。
- en: Validating the ARM template
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证 ARM 模板
- en: 'In your build or CI pipelines, you should consider validating your templates
    to ensure the format is correct. For this purpose, the **ARM** template deployment
    task is available, as shown in the following code snippet:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的构建或 CI 管道中，您应该考虑验证您的模板，以确保格式正确。为此，提供了 **ARM** 模板部署任务，如下所示的代码片段：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Important note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: YAML is a very strict language that is whitespace-sensitive and case-sensitive.
    When working with YAML files, make sure that you are using an editor that properly
    handles these requirements and make sure you are aware of any issues when formatting
    the content.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 是一种非常严格的语言，区分空格和大小写。在处理 YAML 文件时，请确保使用一个能正确处理这些要求的编辑器，并确保在格式化内容时注意任何潜在问题。
- en: 'Let’s break this down to the different parameters:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其拆解为不同的参数：
- en: '`deploymentScope` dictates the layer to which this will be applied. Possible
    values are `Management Group`, `Resource Group`, and `Subscription`. These are
    different types of governance layers within the Azure platform and the templates
    follow different schemas.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploymentScope` 决定了此操作适用的层级。可能的值有 `Management Group`、`Resource Group` 和 `Subscription`。这些是
    Azure 平台中的不同治理层次，模板遵循不同的架构。'
- en: '`azureResourceManagerConnection` is a reference to an existing service connection
    of type `Azure` `Resource Manager`.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`azureResourceManagerConnection` 是指向现有 `Azure` `Resource Manager` 类型服务连接的引用。'
- en: '`subscriptionId` is the GUID value for the Azure subscription ID. In this case,
    you can see it as being a reference from a variable using the `$(AzureSubscriptionId)`
    notation. We will see how to create this in the next section, *Creating a* *pipeline
    variable*.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subscriptionId` 是 Azure 订阅 ID 的 GUID 值。在这种情况下，您可以通过 `$(AzureSubscriptionId)`
    表示法看到它作为变量引用。我们将在下一节中看到如何创建这个，*创建一个* *管道变量*。'
- en: '`action` indicates whether a resource group will be created, updated, or deleted.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action` 表示将创建、更新或删除资源组。'
- en: '`resourceGroupName` is the name of the resource group in the Azure target for
    the deployment. If the action is set to `create` or `update` and the resource
    group does not exist, it will be created by the task.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resourceGroupName` 是 Azure 目标中的资源组名称。如果操作设置为 `create` 或 `update` 且资源组不存在，它将由任务创建。'
- en: '`location` is any of the existing Azure regions available for deployment.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`location` 是任何现有的 Azure 区域，可用于部署。'
- en: '`templateLocation` indicates whether the ARM template file will be available
    as `Linked artifact` or `URL of the file`. In the latter case, it must be a fully
    qualified URL.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templateLocation` 表示 ARM 模板文件是作为 `Linked artifact` 还是 `URL of the file` 提供。在后者情况下，它必须是一个完全合格的
    URL。'
- en: '`csmFile` is the path to the ARM template file, required when `templateLocation
    = ''Linked artifact''` is set. Otherwise, you would use `csmFileLink`.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csmFile` 是指向 ARM 模板文件的路径，当 `templateLocation = ''Linked artifact''` 设置时是必需的。否则，您将使用
    `csmFileLink`。'
- en: Finally, `deploymentMode` indicates how to treat the deployment. In this case,
    the `Validation` value will only perform validation of the file format. We will
    talk about the other values this accepts in the next section.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`deploymentMode` 表示如何处理部署。在这种情况下，`Validation` 值将仅执行文件格式验证。我们将在下一节讨论此属性接受的其他值。
- en: Creating a pipeline variable
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建流水线变量
- en: 'To create the variable used in this task, perform the following tasks:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建此任务中使用的变量，请执行以下任务：
- en: 'Click on the **Variables** button on the Azure Pipelines edit screen:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Azure Pipelines 编辑页面上的**变量**按钮：
- en: '![Figure 8.6 – Accessing pipeline variables](img/B18875_08_6.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 访问流水线变量](img/B18875_08_6.jpg)'
- en: Figure 8.6 – Accessing pipeline variables
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 访问流水线变量
- en: 'Click on the **New variable** button to define your first variable:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新变量**按钮定义您的第一个变量：
- en: '![Figure 8.7 – Adding a new variable](img/B18875_08_7.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 添加新变量](img/B18875_08_7.jpg)'
- en: Figure 8.7 – Adding a new variable
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 添加新变量
- en: 'You then proceed to fill in `AzureSubscriptionId` and the subscription ID you
    obtained from the Azure portal, respectively. Also make sure to check the **Keep
    this value secret** option, to store it securely and make it impossible for it
    to be visible during pipeline execution. Clicking **OK** on this screen stores
    the value temporarily:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您继续分别填写 `AzureSubscriptionId` 和从 Azure 门户获取的订阅 ID。同时确保勾选**保持此值为秘密**选项，以便安全地存储它并确保在流水线执行过程中无法看到它。在此页面上点击**确定**会暂时存储该值：
- en: '![Figure 8.8 – New variable with secret value](img/B18875_08_8.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – 带有秘密值的新变量](img/B18875_08_8.jpg)'
- en: Figure 8.8 – New variable with secret value
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 带有秘密值的新变量
- en: 'You must click **Save** on the next screen to ensure the variable is stored
    in the pipeline:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个页面上，您必须点击**保存**，以确保变量已存储在流水线中：
- en: '![Figure 8.9 – Saving pipeline variables](img/B18875_08_9.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 保存流水线变量](img/B18875_08_9.jpg)'
- en: Figure 8.9 – Saving pipeline variables
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 保存流水线变量
- en: Once you have all of this in place, the pipeline should run and validate the
    ARM template successfully.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成所有设置，流水线应该能够成功运行并验证 ARM 模板。
- en: Important note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'When deploying ARM templates for the first time, you must ensure that the corresponding
    Azure resource providers have been registered in the subscription or you will
    get an error. For the template used in this section, you must have the `Microsoft.Web`
    resource provider registered. You can accomplish this by running the following
    Azure CLI command and waiting for it to complete:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次部署 ARM 模板时，必须确保相应的 Azure 资源提供程序已经在订阅中注册，否则会出现错误。对于本节中使用的模板，必须注册 `Microsoft.Web`
    资源提供程序。您可以通过运行以下 Azure CLI 命令并等待其完成来实现此操作：
- en: '`az provider register –namespace` `Microsoft.Web --wait`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`az provider register –namespace` `Microsoft.Web --wait`'
- en: Now that we have learned how to validate the template, let’s see how to deploy
    it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何验证模板，接下来让我们看看如何部署它。
- en: Deploying ARM templates
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署 ARM 模板
- en: Switching from validation to deployment requires changing the value of the `deploymentMode`
    property to either `Incremental` or `Complete`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从验证模式切换到部署模式需要将 `deploymentMode` 属性的值更改为 `Incremental` 或 `Complete`。
- en: The `Incremental` deployment mode tells ARM that the resources in the template
    will be created if they don’t exist or updated to match the template if already
    present. Any other resources in the resource group not defined in the template
    will be ignored.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`Incremental` 部署模式告诉 ARM，如果模板中的资源不存在，则会创建这些资源；如果已存在，则会更新这些资源以匹配模板。资源组中未在模板中定义的其他资源将被忽略。'
- en: Likewise, if the `Complete` deployment mode is used, ARM will ensure that the
    resource group only contains the resources defined in the template, create those
    that don’t exist, update the existing ones to match, and delete any not defined
    in the template.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果使用 `Complete` 部署模式，ARM 会确保资源组仅包含模板中定义的资源，创建不存在的资源，更新现有资源以匹配，并删除模板中未定义的资源。
- en: 'Here is what that looks like:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是它的样子：
- en: '[PRE7]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Important note
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The `Complete` deployment mode must be used with caution, and ensure you have
    a rigorous process where resources are only being created via templates. Otherwise,
    you could have destructive results that you were not expecting, such as services
    or applications not working anymore or loss of data.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`Complete` 部署模式必须谨慎使用，并确保您有严格的流程，确保资源仅通过模板创建。否则，可能会导致意外的破坏性结果，例如服务或应用程序停止工作或数据丢失。'
- en: 'Once the pipeline has been executed, you can validate the resources in the
    Azure portal:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦管道执行完毕，您可以在 Azure 门户中验证资源：
- en: '![Figure 8.10 – Azure resources deployed via Azure Pipelines](img/B18875_08_10.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – 通过 Azure Pipelines 部署的 Azure 资源](img/B18875_08_10.jpg)'
- en: Figure 8.10 – Azure resources deployed via Azure Pipelines
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 通过 Azure Pipelines 部署的 Azure 资源
- en: If you want to learn more, head to [https://aka.ms/arm-syntax](https://aka.ms/arm-syntax).
    Now let’s see how we can do something similar in AWS.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多信息，请访问[https://aka.ms/arm-syntax](https://aka.ms/arm-syntax)。现在，让我们看看如何在
    AWS 中做类似的事情。
- en: Working with AWS CloudFormation
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS CloudFormation
- en: '**AWS Cloud Formation** is a service that allows you to define a template that
    describes a set of resources to be deployed together using JSON or YAML syntax.
    The templates follow this structure in the JSON format:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS CloudFormation**是一项服务，它允许您定义一个模板，描述一组将一起部署的资源，使用 JSON 或 YAML 语法。这些模板遵循
    JSON 格式的结构：'
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Deploying with AWS CloudFormation comes down to the following steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS CloudFormation 部署包括以下步骤：
- en: Creating an IAM user with the AWS CLI
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 AWS CLI 创建 IAM 用户
- en: Creating a service connection to AWS
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建到 AWS 的服务连接
- en: Creating an AWS CloudFormation template
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 AWS CloudFormation 模板
- en: Validating the AWS CloudFormation template
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 AWS CloudFormation 模板
- en: Deploying the AWS CloudFormation template
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署 AWS CloudFormation 模板
- en: Let’s start with discussing how to create an IAM user.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从讨论如何创建 IAM 用户开始。
- en: Creating an IAM user with the AWS CLI
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AWS CLI 创建 IAM 用户
- en: An **IAM user** is a user defined in the **Identity and Access Management**
    (**IAM**) service in AWS and provides fine-grained access control to create, update,
    or delete resources in AWS, but is also used to grant/deny permissions to interact
    with other services.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**IAM 用户**是定义在 AWS 的**身份和访问管理**（**IAM**）服务中的用户，并提供精细化的访问控制，用于创建、更新或删除 AWS 中的资源，也用于授予/拒绝与其他服务交互的权限。'
- en: Important note
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: This section assumes you have already configured your AWS credentials using
    the `aws` `configure` command.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假设您已经使用`aws` `configure`命令配置了您的 AWS 凭据。
- en: 'Execute the following commands:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE9]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'These commands will do the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将执行以下操作：
- en: Create a user group called `resources-admin`
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`resources-admin`的用户组
- en: Attach a security policy to the user group
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为用户组附加安全策略
- en: Create a user called `azure-pipelines`
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`azure-pipelines`的用户
- en: Add the `azure-pipelines` user to the `resources-admin` user group
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`azure-pipelines`用户添加到`resources-admin`用户组
- en: Create access keys for the `azure-pipelines` user
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`azure-pipelines`用户创建访问密钥
- en: 'After executing these commands, you should have an output like that shown in
    the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些命令后，您应该会看到类似于以下截图的输出：
- en: '![Figure 8.11 – AWS access keys for the azure-pipelines user](img/B18875_08_11.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – `azure-pipelines`用户的 AWS 访问密钥](img/B18875_08_11.jpg)'
- en: Figure 8.11 – AWS access keys for the azure-pipelines user
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – `azure-pipelines`用户的 AWS 访问密钥
- en: The `AccessKeyId` and `SecretAccessKey` values will be needed in the next step.
    Make sure to save them in a secure place as they provide programmatic access to
    AWS.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccessKeyId`和`SecretAccessKey`值将在下一步中使用。请确保将它们保存在安全的地方，因为它们提供了对 AWS 的编程访问权限。'
- en: Important
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: The `arn:aws:iam::aws:policy/AdministratorAccess` policy used in this step is
    very permissive. It provides the highest level of access to the AWS console. This
    is not recommended for your environments. Instead, you should always provide access
    following a least-privilege approach and add more permissions when needed.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中使用的`arn:aws:iam::aws:policy/AdministratorAccess`策略权限非常宽松。它提供了最高级别的 AWS
    控制台访问权限。这不推荐在您的环境中使用。相反，您应该始终按照最小权限原则提供访问，并在需要时增加更多权限。
- en: Let’s now see how we create a service connection from Azure Pipelines to AWS.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何从 Azure Pipelines 创建到 AWS 的服务连接。
- en: Creating a service connection to AWS
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建到 AWS 的服务连接
- en: 'As seen in previous chapters, integrating with external services in Azure Pipelines
    requires a service connection, which is done within **Project Settings** | **Pipelines**
    | **Service connections**, where you will click on the **New service connection**
    button and select the **AWS** option:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所示，Azure Pipelines 中的外部服务集成需要服务连接，这可以在**项目设置**|**管道**|**服务连接**中完成，在此您将点击**新建服务连接**按钮并选择**AWS**选项：
- en: '![Figure 8.12 – AWS service connection type](img/B18875_08_12.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – AWS 服务连接类型](img/B18875_08_12.jpg)'
- en: Figure 8.12 – AWS service connection type
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – AWS 服务连接类型
- en: 'The next step allows you to enter the following details:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步允许您输入以下详细信息：
- en: '`the AccessKeyId value` from the previous step'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`the AccessKeyId value` 来自前一步'
- en: '`the SecretAccessKey value` from the previous step'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`the SecretAccessKey value` 来自前一步'
- en: '`aws-packt`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws-packt`'
- en: Now that we have a service connection, let’s proceed to define the AWS CloudFormation
    template.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了服务连接，接下来让我们定义 AWS CloudFormation 模板。
- en: Creating an AWS CloudFormation template
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 AWS CloudFormation 模板
- en: You can create these templates from scratch following the reference documentation.
    Start from a sample template or use AWS CloudFormation Designer, a graphical tool
    that helps you create, visualize, and modify a template without worrying about
    all the formatting aspects. To learn more, go to [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-guide.xhtml](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-guide.xhtml).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照参考文档从头创建这些模板。可以从示例模板开始，或使用 AWS CloudFormation Designer，这是一个图形化工具，帮助你创建、可视化并修改模板，无需担心格式问题。欲了解更多信息，请访问
    [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-guide.xhtml](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-guide.xhtml)。
- en: 'In this chapter, we will use a modified version of an existing sample that
    deploys a virtual machine using the **Elastic Compute Cloud** (**EC2**) service.
    You can find the template at [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch08/aws/template.json](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch08/aws/template.json):'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个修改版的现有示例，该示例通过 **弹性计算云** (**EC2**) 服务部署虚拟机。你可以在 [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch08/aws/template.json](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/blob/main/ch08/aws/template.json)
    找到该模板：
- en: An EC2 key pair – a set of security credentials used to connect to Linux instances
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 EC2 密钥对 —— 用于连接到 Linux 实例的安全凭证集
- en: An EC2 instance, which depends on the key pair and uses an Amazon Linux OS base
    image
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 EC2 实例，依赖于密钥对，并使用 Amazon Linux OS 基础镜像
- en: Now let’s see how we can validate the template.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看如何验证模板。
- en: Validating the AWS CloudFormation template
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证 AWS CloudFormation 模板
- en: 'In your build or CI pipelines, you should consider validating your templates
    to ensure the format is correct. For this purpose, the AWS CLI task is available:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的构建或 CI 管道中，你应该考虑验证你的模板，以确保格式正确。为此，AWS CLI 任务是可用的：
- en: '[PRE10]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s break down the parameters in the code:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来逐步分析代码中的参数：
- en: '`awsCredentials` is a reference to the service connection.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`awsCredentials` 是对服务连接的引用。'
- en: '`regionName` is any of the available AWS Regions. Typically, you want to set
    this to the same region where the template would be deployed, to ensure it validates
    correctly based on the availability of services in that region.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`regionName` 是任何可用的 AWS 区域。通常，你会将其设置为与模板部署所在的相同区域，以确保根据该区域中服务的可用性进行正确验证。'
- en: '`awsCommand` is the top-level command in the AWS CLI that provides AWS CloudFormation
    operations.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`awsCommand` 是 AWS CLI 中的顶级命令，提供 AWS CloudFormation 操作。'
- en: '`awsSubcommand` indicates that you want to perform a template validation.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`awsSubcommand` 表示你想执行模板验证操作。'
- en: '`awsArguments` includes the options needed for the template validation to be
    completed. In this case, since the file was placed in the root folder of the repository,
    the template body is provided by passing the `file:` operator to read the contents
    of the file and perform the validation.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`awsArguments` 包含完成模板验证所需的选项。在这种情况下，由于文件被放置在仓库的根文件夹中，因此通过传递 `file:` 操作符读取文件内容并执行验证。'
- en: 'Once executed, the validation should show a message like that shown in the
    following screenshot:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，验证应该会显示如下截图中所示的消息：
- en: '![Figure 8.13 – AWS CloudFormation template successful validation](img/B18875_08_13.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – AWS CloudFormation 模板成功验证](img/B18875_08_13.jpg)'
- en: Figure 8.13 – AWS CloudFormation template successful validation
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – AWS CloudFormation 模板成功验证
- en: 'If there were an error, you would see a different message and task failure,
    as shown in the following screenshot, where a resource type was purposely mistyped:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误，你会看到不同的消息和任务失败，如下图所示，其中故意输入错误的资源类型：
- en: '[PRE11]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we know how to validate the template, let’s see how to deploy it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何验证模板了，让我们看看如何部署它。
- en: Deploying the AWS CloudFormation template
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署 AWS CloudFormation 模板
- en: Deploying the AWS CloudFormation template is known as creating an **AWS CloudFormation
    stack**, which is a service in AWS that allows you to group all resources in the
    template logically and has some additional benefits such as tracking drift, implementing
    a rollback strategy in case of errors, and the ability to delete the stack and
    all related resources.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'In Azure Pipelines, you have two options to deploy the template:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: An AWS CLI task with the `aws cloudformation` `create-stack` command
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the `Cloud Formation Create or Update Stack` task, as shown in this code
    block:'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s break the preceding code down:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '`awsCredentials` is a reference to the service connection.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`regionName` is any of the AWS regions available.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stackName` is a name to identify this stack in the AWS console and must be
    unique.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templateSource` in this case is `file`; however, it could also be a `url`
    to a template, perhaps outside of Azure Pipelines; `s3`, which refers to a storage
    service in AWS, and you would provide a bucket and object key; or `usePrevious`,
    which indicates you want to use the template in an existing stack.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templateFile` is used to provide the location of the file with the template
    and is only needed because `file` has been set to `templateSource`.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `capibilityIAM` and `capabilityNamedIAM` parameters are set to `false`.
    These are additional properties needed for some type of deployment where IAM changes
    would be applied. In the case of the template used in this example, they are not
    required.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the `onFailure` property indicates what to do with the stack if something
    goes wrong. With the `DELETE` value, it would be deleted and any resources that
    might have been deployed successfully would be deleted as well. The `DO_NOTHING`
    value would simply stop applying the template and you would be able to see in
    the AWS console what had happened so far. Lastly, the `ROLLBACK` value, which
    is the default, would revert any changes made prior to applying the template.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the deployment completed successfully, you should be able to see the status
    in the AWS console, as shown in the following screenshot:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – AWS CloudFormation stack deployed successfully](img/B18875_08_14.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – AWS CloudFormation stack deployed successfully
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also be able to see the resources deployed as part of the CloudFormation
    stack, as shown in the following screenshot:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – AWS CloudFormation stack resources](img/B18875_08_15.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – AWS CloudFormation stack resources
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have learned about Azure and AWS cloud platform-specific IaC capabilities;
    however, these only work for each of these platforms. If you want to do IaC in
    a generic way and aim for multiple types of targets – say, on-premises and other
    cloud providers, there are other tools on the market that can accomplish this.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Some other IaC tools are Ansible, Chef, Pulumi, Puppet, SaltStack, and Terraform,
    to name a few. In this chapter, we will focus on **Terraform** because it is one
    of the most popular choices among the open source community due to its versatility
    and declarative nature. Let’s next learn how to use Terraform for IaC.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Working with Terraform
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s first learn about how Terraform works and then we will walk through using
    it within Azure Pipelines.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: How does Terraform work?
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Terraform is a tool that allows you to write IaC and define resources for both
    cloud and on-premises resources using a domain-specific language. It uses providers
    as a means to encapsulate the resource definition for supported targets.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram depicts the high-level architecture of Terraform:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Terraform architecture](img/B18875_08_16.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Terraform architecture
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'It works by way of the following three steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '**Write**: You define the resources in templates to deploy all the resources
    you need, across the targets required. There could be more than one.'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Plan**: Terraform creates an execution plan to determine the changes that
    need to be made to match the definition, calculating the sequential order of operations
    and understanding any resource dependencies. This could mean creating resources,
    updating them, or destroying them.'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Apply**: Once you agree with the plan, Terraform performs the necessary operations
    in the sequence calculated by the plan.'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Part of the process Terraform follows involves calculating the state of the
    target in comparison to the plan. This is called the **Terraform state file**.
    This file will contain details about the resources, their metadata in the target
    destination, and their dependencies.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the edition of Terraform you are using, you might be responsible
    for managing the location of this file or use built-in features to manage the
    state file for you.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Managing the location of the state file is critical in Terraform. It can be
    stored locally or remotely via a **backend** configuration. When you are getting
    started, you will likely use the **local backend**; however, as you evolve your
    configuration to support multiple environments, you will switch to a **remote
    backend**. To read more about remote backends, go to [https://developer.hashicorp.com/terraform/language/settings/backends/remote](https://developer.hashicorp.com/terraform/language/settings/backends/remote).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Terraform works in absolutes, meaning it expects to control every resource defined
    in the templates you create by comparing them with the current state file every
    time. This means that no changes should be made without the use of Terraform in
    the environment. Otherwise, these changes will be lost the next time you run the
    `terraform` `apply` command.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Terraform comes in three editions:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '**Open source**: Free, downloadable, and flexible to use with your existing
    source control and CI/CD tools'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud**: A SaaS application that allows you to run it in a stable and remote
    environment, with secure storage of the state files and secrets'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise**: Allows you to set up a private Terraform Cloud instance or
    self-hosted distribution with customizable resource limits and tighten security.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s now look at how to create a simple Terraform template.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Terraform template
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Terraform templates are usually written in what is called configuration syntax,
    which is a pseudo-JSON format. All files have the `.tf` extension and typically
    you will have the following files:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '`providers.tf`: Defines the base configuration and providers to use'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.tf`: The entry point of your template – say, your starting point'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`variables.tf`: Defines values to be used throughout the templates that can
    be overridden when planning/applying the configuration'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outputs.tf`: Values to extract from the resources deployed'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will use a simple set of templates targeting the Azure cloud
    platform, creating a resource group, and using the `azurerm` backend. See the
    templates at [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch08/terraform](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch08/terraform).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: For more details on the Terraform configuration language, head to [https://developer.hashicorp.com/terraform/language](https://developer.hashicorp.com/terraform/language).
    For tutorials and training material, head to [https://developer.hashicorp.com/tutorials/library?product=terraform](https://developer.hashicorp.com/tutorials/library?product=terraform).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned the Terraform basics for creating templates, let’s
    put together a pipeline to validate them.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Managing the Terraform state file
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can put together a build pipeline, we need to ensure that the **state
    file** is managed accordingly – in this case, remotely. Since our template will
    target Azure, we will need to set up the corresponding backend for it.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, you can execute the following Azure CLI commands, once logged in:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'These commands perform the following operations:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Create a resource group in Azure named `tfstate` in the `eastus` region
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a storage account in Azure named `tfstate` in the `tfstate` resource
    group in the `eastus` region with the `Standard_LRS` pricing tier
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a blob container named `tfstate` in the `tfstate` storage account
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: The storage account name in the previous commands must be unique globally, so
    you will have to adjust the name in these commands and any following sections
    for everything to work correctly.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have set up the state file management, let’s put together a pipeline
    to validate the template.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Validating a Terraform template
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your build or CI pipelines, you should consider validating your templates
    to ensure the format is correct. For this purpose, tasks are available in the
    Terraform Marketplace extension:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now let’s break this code down:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: The `TerraformInstaller@0` task installs the Terraform CLI in the agent if necessary.
    This is required if you need to ensure a specific version of the tool is required
    for your templates. Microsoft-hosted agents typically have a version of Terraform
    installed, but if you want to use an older or newer version, this task will allow
    you to use the version of Terraform that you need.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `TerraformTask@4` task allows you to run any of the Terraform CLI commands.
    For the first task with `displayName: init`, it will correspondingly execute the
    `terraform init` command with the following parameters:'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backendServiceArm` indicating the name of the ARM service connection to use'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backendAzureRmResourceGroupName` indicating the resource group in Azure where
    the state file will be stored'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backendAzureRmStorageAccountName` with the name of the Azure storage account
    where the state file will be stored'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backendAzureRmContainerName` with the blob container name in the Azure storage
    account where the state file will be stored'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backendAzureRmKey` indicating the name of the state file'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the last task with `displayName: validate` will execute the `terraform`
    `validate` command.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the pipeline runs, the validation should complete successfully and you
    should see a message similar to the following for the validation task:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Successful Terraform template validation](img/B18875_08_17.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Successful Terraform template validation
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve learned how to validate the template, let’s proceed to deploy
    resources with Terraform.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Terraform template
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned previously, deploying resources with Terraform is a two-step process,
    requiring you to execute the `plan` and `apply` commands:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s break this code down:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: The `TerraformInstaller@0` task installs the Terraform CLI in the agent if necessary
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `TerraformTask@4` task with `displayName: init` initializes Terraform as
    explained in the previous section'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `TerraformTask@4` task with `displayName: plan` executes the `terraform
    plan` command, performing the comparison necessary and updating the state file
    accordingly with changes to be made'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `TerraformTask@4` task with `displayName: apply` executes the `terraform
    apply` command and performs the changes necessary in Azure'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We covered a lot of ground in this chapter. Let’s finish off with a summary
    of what we learned.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about different tools available to create, update,
    and delete resources on the Microsoft Azure and AWS cloud platforms.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to create, validate, and deploy ARM templates, the role of service
    principals in Azure, and the security considerations of deploying with automation.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about AWS CloudFormation templates and stacks, and how to create
    them and update them from Azure Pipelines. At the same time, we learned how AWS
    has a similar security model to Azure and about the security implications of credentials.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned about Terraform as an abstraction language to define IaC
    for on-premises and cloud platforms such as Azure and AWS, and how to validate
    templates in Azure Pipelines and deploy resources with it.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of which IaC tool you choose to use, they are important because
    they will allow you to do the following:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Have a repeatable and immutable process for deployments
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accelerate deployments
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce or eliminate errors while deploying with Azure Pipelines
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recover from issues easily
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spend more time working on your application code
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will be putting everything we have learned together
    for end-to-end pipeline building and packaging applications to deploy them on
    different Microsoft Azure cloud platform services.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Part 3:CI/CD for Real-World Scenarios
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, in the last part of this book, we will compile everything we’ve learned
    so far to create end-to-end scenarios typically found in the real world, using
    cloud platforms, and we will walk through some best practices.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18875_09.xhtml#_idTextAnchor135), *Implementing CI/CD for Azure
    Services*'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18875_10.xhtml#_idTextAnchor153), *Implementing CI/CD for AWS*'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18875_11.xhtml#_idTextAnchor168), *Automating CI/CD for Cross-Mobile
    Applications by Using Flutter*'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18875_12.xhtml#_idTextAnchor181), *Navigating Common Pitfalls
    and Future Trends in Azure Pipelines*'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
