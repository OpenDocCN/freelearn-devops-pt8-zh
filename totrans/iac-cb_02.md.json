["```\nvariable \"aws_access_key\" {\n  description = \"AWS Access Key\"\n}\n\nvariable \"aws_secret_key\" {\n  description = \"AWS Secret Key\"\n}\n\nvariable \"aws_region\" {\n  default     = \"eu-west-1\"\n  description = \"AWS Region\"\n}\n```", "```\naws_access_key = \"< your AWS_ACCESS_KEY >\"\naws_secret_key = \"< your AWS_SECRET_KEY >\"\n```", "```\nprovider \"aws\" {\n  access_key = \"${var.aws_access_key}\"\n  secret_key = \"${var.aws_secret_key}\"\n  region     = \"${var.aws_region}\"\n}\n```", "```\n$ terraform apply\n\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\n\n```", "```\nvariable \"aws_access_key\" { }\n```", "```\n${var.variable_name}\n```", "```\n$ terraform apply\nvar.aws_region\n AWS Region\n\n Enter a value:\n\n```", "```\n$ echo ${AWS_ACCESS_KEY_ID}\n<your AWS_ACCESS_KEY_ID>\n$ echo ${AWS_SECRET_ACCESS_KEY}\n<your AWS_SECRET_ACCESS_KEY>\n$ echo ${AWS_DEFAULT_REGION}\neu-west-1\n\n```", "```\n$ export AWS_ACCESS_KEY_ID=\"123\"\n$ export AWS_SECRET_ACCESS_KEY=\"456\"\n$ export AWS_DEFAULT_REGION=\"eu-west-1\"\n\n```", "```\nprovider \"aws\" { }\n```", "```\n    $ mkdir keys\n    $ ssh-keygen -q -f keys/aws_terraform -C aws_terraform_ssh_key -N ''\n\n    ```", "```\nresource \"aws_key_pair\" \"admin_key\" {\n  key_name   = \"admin_key\"\n  public_key = \"ssh-rsa AAAAB3[…]\"\n}\n```", "```\n$ terraform apply\naws_key_pair.admin_key: Creating...\n fingerprint: \"\" => \"<computed>\"\n key_name:    \"\" => \"admin_key\"\n public_key:  \"\" => \"ssh-rsa AAAAB3[…]\"\naws_key_pair.admin_key: Creation complete\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n\n```", "```\nvariable \"aws_ssh_admin_key_file\" { }\n```", "```\naws_ssh_admin_key_file = \"keys/aws_terraform\"\n```", "```\nresource \"aws_key_pair\" \"admin_key\" {\n  key_name   = \"admin_key\"\n  public_key = \"${file(\"${var.aws_ssh_admin_key_file}.pub\")}\"\n}\n```", "```\n├── keys\n│   ├── aws_terraform\n│   └── aws_terraform.pub\n├── main.yml\n└── roles\n └── ec2_keys\n └── tasks\n └── main.yml\n\n```", "```\n---\n- hosts: localhost\n  roles:\n  - ec2_keys\n```", "```\n---\n  - name: ec2 admin key\n    ec2_key:\n      name: admin_key\n      key_material: \"{{ item }}\"\n    with_file: './keys/aws_terraform.pub'\n```", "```\n$ ansible-playbook -i localhost main.yml\nTASK [ec2_keys : ec2 admin key] ************************************************\nok: [localhost] => (item=ssh-rsa AAAA[…] aws_terraform_ssh)\n\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=2    changed=0    unreachable=0    failed=0\n\n```", "```\nresource \"aws_security_group\" \"base_security_group\" {\n  name        = \"base_security_group\"\n  description = \"Base Security Group\"\n\n  ingress { }\n\n  egress { }\n\n}\n```", "```\ningress {\n  from_port   = 22\n  to_port     = 22\n  protocol    = \"tcp\"\n  cidr_blocks = [\"1.2.3.4/32\"]\n }\n\negress {\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n```", "```\ntags {\n  Name = \"base_security_group\"\n}\n```", "```\n$ terraform apply\naws_security_group.base_security_group: Creating...\n[…]\naws_security_group.base_security_group: Creation complete\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n\n```", "```\n$ aws ec2 describe-security-groups --group-names base_security_group\n{...}\n\n```", "```\n---\n  - name: base security group\n    ec2_group:\n      name: base_security_group\n      description: Base Security Group\n      rules:\n        - proto: tcp\n          from_port: 22\n          to_port: 22\n          cidr_ip: 1.2.3.4/32\n```", "```\nvariable \"ami\" {\n  default = \"ami-ee6b189d\"\n}\n```", "```\nvariable \"aws_instance_type\" {\n  default = \"t2.micro\"\n}\n```", "```\nresource \"aws_instance\" \"dev\" {\n  ami                         = \"${var.ami}\"\n  instance_type               = \"${var.aws_instance_type}\"\n  key_name                    = \"${aws_key_pair.admin_key.key_name}\"\n  security_groups             = [\"${aws_security_group.base_security_group.name}\"]\n  associate_public_ip_address = true\n\n  tags {\n    Name = \"Ubuntu launched by Terraform\"\n  }\n}\n```", "```\n$ terraform apply\naws_key_pair.admin_key: Creating...\n[…]\naws_security_group.base_security_group: Creating...\n[…]\naws_instance.dev: Creating...\n[…]\n```", "```\n$ ssh -i keys/aws_terraform ubuntu@52.210.12.27\nWelcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-36-generic x86_64)\nubuntu@ip-172-31-18-156:~$\n```", "```\ncount = 2\n```", "```\n$ terraform apply\naws_key_pair.admin_key: Refreshing state... (ID: admin_key)\naws_security_group.base_security_group: Refreshing state... (ID: sg-d3dbd8b4)\naws_instance.dev.0: Refreshing state... (ID: i-0018b1044953371ae)\naws_instance.dev.1: Creating...\n[...]\naws_instance.dev.1: Creation complete\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n\n```", "```\n---\n  - name: dev instance\n    ec2:\n      key_name: admin_key\n      group: base_security_group\n      instance_type: t2.micro\n      image: ami-ee6b189d\n      wait: yes\n```", "```\noutput \"login\" {\n  value = \"ssh ubuntu@${aws_instance.dev.public_ip} -i ${var.aws_ssh_admin_key_file}\"\n}\n```", "```\nlogin = ssh ubuntu@52.51.242.17 -i keys/aws_terraform\n```", "```\noutput \"security_groups\" {\n  value = \"${formatlist(\"%v\", aws_instance.dev.security_groups)}\"\n}\n```", "```\nsecurity_groups = [\n    base_security_group\n]\n```", "```\noutput \"instance_information\" {\n  value = \"${formatlist(\"instance: %v public: %v private: %v\", aws_instance.dev.*.id, aws_instance.dev.*.public_ip, aws_instance.dev.*.private_ip)}\"\n}\n```", "```\nvariable \"ami\" {\n  default = \"ami-ee6b189d\"\n}\n```", "```\nami = \"${var.ami}\"\n```", "```\nvariable \"ami\" {\n  default = {\n    eu-west-1 = \"ami-ee6b189d\"\n  }\n}\n```", "```\nami = \"${var.ami[\"eu-west-1\"]}\"\n```", "```\nvariable \"ami\" {\n  default = {\n    eu-west-1 = \"ami-ee6b189d\"\n    us-east-1 = \"ami-4f680658\"\n    us-west-1 = \"ami-68a9e408\"\n  }\n}\n```", "```\nami = \"${var.ami[\"us-east-1\"]}\"\n```", "```\nvariable \"aws_region\" {\n  default = \"eu-west-1\"\n}\n```", "```\nprovider \"aws\" {\n  region = \"${var.aws_region}\"\n}\n```", "```\nami = \"${var.ami[\"${var.aws_region}\"]}\"\n```", "```\nami = \"${lookup(var.ami, var.aws_region)}\"\n```", "```\nresource \"aws_s3_bucket\" \"iac_book\" {\n  bucket = \"iac-book\"\n  acl    = \"public-read\"\n\n  tags {\n    Name = \"IAC Book Bucket in ${var.aws_region}\"\n  }\n}\n```", "```\nresource \"aws_s3_bucket_object\" \"index\" {\n  bucket = \"${aws_s3_bucket.iac_book.bucket}\"\n  key = \"index.html\"\n  content = \"<h1>Hello Infrastructure-as-Code Cookbook!</h1>\"\n  content_type = \"text/html\"\n  acl    = \"public-read\"\n}\n```", "```\nsource = \"index.html\"\n```", "```\noutput \"S3\" {\n  value = \"http://s3-${aws_s3_bucket.iac_book.region}.amazonaws.com/${aws_s3_bucket.iac _book.id}/${aws_s3_bucket_object.index.key}\"\n}\n```", "```\nwebsite {\n  index_document = \"index.html\"\n}\n```", "```\noutput \"S3 Endpoint\" {\n  value = \"${aws_s3_bucket.iac_book.website_endpoint}\"\n}\n```", "```\n---\n- name: create iac-book bucket\n  s3:\n    bucket: iac-book\n    mode: create\n    permission: public-read\n```", "```\n- name: create index.html file\n  s3:\n    bucket: iac-book\n    object: index.html\n    src: index.html\n    mode: put\n    permission: public-read\n```", "```\nresource \"aws_ecr_repository\" \"myapp\" {\n  name = \"myapp\"\n}\n```", "```\noutput \"ECR\" {\n  value = \"${aws_ecr_repository.myapp.repository_url}\"\n}\n```", "```\n$ aws ecr get-login --region eu-west-1\ndocker login -u AWS -p AQECAHh... -e none https://<account_number>.dkr.ecr.eu-west-1.amazonaws.com\n\n```", "```\nvariable \"rds_identifier\" {\n  default = \"db\"\n}\n\nvariable \"rds_instance_type\" {\n  default = \"db.t2.micro\"\n}\nvariable \"rds_storage_size\" {\n  default = \"5\"\n}\n\nvariable \"rds_engine\" {\n  default = \"postgres\"\n}\n\nvariable \"rds_engine_version\" {\n  default = \"9.5.2\"\n}\n\nvariable \"rds_db_name\" {\n  default = \"iac_book_db\"\n}\n\nvariable \"rds_admin_user\" {\n  default = \"dbadmin\"\n}\n\nvariable \"rds_admin_password\" {\n  default = \"super_secret_password\"\n}\n\nvariable \"rds_publicly_accessible\" {\n  default = \"true\"\n}\n```", "```\nresource \"aws_security_group\" \"rds_security_group\" {\n  name        = \"rds_security_group\"\n  description = \"RDS Security Group\"\n\n  ingress {\n    from_port   = 5432\n    to_port     = 5432\n    protocol    = \"tcp\"\n    cidr_blocks = [\"1.2.3.4/32\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags {\n    Name = \"rds_security_group\"\n  }\n}\n```", "```\nresource \"aws_db_instance\" \"db\" {\n  engine            = \"${var.rds_engine}\"\n  engine_version    = \"${var.rds_engine_version}\"\n  identifier        = \"${var.rds_identifier}\"\n  instance_class    = \"${var.rds_instance_type}\"\n  allocated_storage = \"${var.rds_storage_size}\"\n  name              = \"${var.rds_db_name}\"\n  username          = \"${var.rds_admin_user}\"\n  password          = \"${var.rds_admin_password}\"\n  publicly_accessible    = \"${var.rds_publicly_accessible}\"\n  vpc_security_group_ids = [\"${aws_security_group.rds_security_group.id}\"]\n  tags {\n    Name = \"IAC Database in ${var.aws_region}\"\n  }\n}\n```", "```\noutput \"RDS\" {\n  value = \"address: ${aws_db_instance.db.address}\"\n}\n```", "```\n# psql -h <your_db_address> -d iac_book_db -U dbadmin\nPassword for user dbadmin:\npsql (9.5.4, server 9.5.2)\n[...]\n\niac_book_db=> \\l\n List of databases\n Name     |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges\n-------------+----------+----------+-------------+-------------+-----------------------\n iac_book_db | dbadmin  | UTF8     | en_US.UTF-8 | en_US.UTF-8 |\n postgres    | dbadmin  | UTF8     | en_US.UTF-8 | en_US.UTF-8 |\n rdsadmin    | rdsadmin | UTF8     | en_US.UTF-8 | en_US.UTF-8 | rdsadmin=CTc/rdsadmin\n template0   | rdsadmin | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/rdsadmin          +\n |          |          |             |             | rdsadmin=CTc/rdsadmin\n template1   | dbadmin  | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/dbadmin           +\n |          |          |             |             | dbadmin=CTc/dbadmin\n(5 rows)\n\n```", "```\n---\n- name: create RDS PgSQL\n  rds:\n    command: create\n    instance_name: db\n    db_engine: postgres\n    engine_version: 9.5.2\n    db_name: iac_book_db\n    size: 5\n    instance_type: db.t2.micro\n    username: dbadmin\n    password: super_secure_password\n    publicly_accessible: yes\n    tags:\n      Name: IAC Database\n```", "```\nvariable \"log_group_name\" {\n  default = \"docker_logs\"\n}\n\nvariable \"log_retention_days\" {\n  default = \"7\"\n}\n```", "```\nresource \"aws_cloudwatch_log_group\" \"docker_logs\" {\n  name              = \"${var.log_group_name}\"\n  retention_in_days = \"${var.log_retention_days}\"\n}\n```", "```\n$ docker run -it --rm -p 80:80 --log-driver=awslogs --log-opt awslogs-region=eu-west-1 --log-opt awslogs-group=docker_logs --log-opt awslogs-stream=nginx nginx:stable\n\n```", "```\n$ curl -IL http://localhost\nHTTP/1.1 200 OK\n\n```", "```\nresource \"aws_iam_user\" \"mary\" {\n  name = \"mary\"\n  path = \"/team/\"\n}\n```", "```\nresource \"aws_iam_access_key\" \"mary\" {\n  user = \"${aws_iam_user.mary.name}\"\n}\n```", "```\nresource \"aws_iam_user_policy_attachment\" \"mary_s3full\" {\n  user = \"${aws_iam_user.mary.name}\"\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n}\n```", "```\noutput \"mary\" {\n  value = \"ACCESS_KEY: ${aws_iam_access_key.mary.id}, SECRET: ${aws_iam_access_key.mary.secret}\"\n}\n```", "```\n[...]\nOutputs:\nmary = ACCESS_KEY: AKIAJPQB7HBK2KLAARRQ, SECRET: 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\n```", "```\n$ s3cmd --access_key=<mary_access_key> --secret_key=<mary_secret_key> mb s3://iacbook-iam-bucket\nBucket 's3://iacbook-iam-bucket/' created\n\n```", "```\n$ aws --profile iacbook-mary ec2 describe-hosts\nAn error occurred (UnauthorizedOperation) when calling the DescribeHosts operation: You are not authorized to perform this operation.\n\n```", "```\nresource \"aws_iam_user\" \"joe\" {\n  name = \"joe\"\n  path = \"/team/\"\n}\n\nresource \"aws_iam_access_key\" \"joe\" {\n  user = \"${aws_iam_user.joe.name}\"\n}\n\nresource \"aws_iam_user_policy_attachment\" \"joe_ec2ro\" {\n  user = \"${aws_iam_user.joe.name}\"\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess\"\n}\n```", "```\noutput \"joe\" {\n  value = \"ACCESS_KEY: ${aws_iam_access_key.joe.id}, SECRET: ${aws_iam_access_key.joe.secret}\"\n}\n```", "```\n$ s3cmd --access_key=<joe_access_key> --secret_key=<joe_secret_key> ls\nERROR: S3 error: 403 (AccessDenied): Access Denied\n\n```", "```\n$ aws --profile iacbook-joe ec2 describe-hosts\n{\n  \"Hosts\": []\n}\n```", "```\nresource \"aws_iam_user\" \"logs\" {\n  name = \"logs\"\n  path = \"/apps/\"\n}\n\nresource \"aws_iam_access_key\" \"logs\" {\n  user = \"${aws_iam_user.logs.name}\"\n}\n\nresource \"aws_iam_user_policy_attachment\" \"logs_cloudwatch_full\" {\n  user = \"${aws_iam_user.logs.name}\"\n  policy_arn = \"arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\"\n}\n```", "```\noutput \"logs\" {\n  value = \"ACCESS_KEY: ${aws_iam_access_key.logs.id}, SECRET: ${aws_iam_access_key.logs.secret}\"\n}\n```", "```\n[...]\nOutputs:\n\njoe = ACCESS_KEY: AKIAJQPSXBKSD3DY47BQ, SECRET: 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\nlogs = ACCESS_KEY: AKIAISIUXTG5RIJZAEYA, SECRET: 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\nmary = ACCESS_KEY: AKIAJPQB7HBK2KLAARRQ, SECRET: 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\n```", "```\n---\n- name: create mary user\n  iam:\n    iam_type: user\n    name: mary\n    state: present\n    access_key_state: create\n    path: /team/\n```", "```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```", "```\n- name: Assign a AmazonS3FullAccess policy to mary\n  iam_policy:\n    iam_type: user\n    iam_name: mary\n    policy_name: AmazonS3FullAccess\n    state: present\n    policy_document: AmazonS3FullAccess.json\n```"]