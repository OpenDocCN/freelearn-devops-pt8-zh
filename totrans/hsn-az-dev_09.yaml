- en: Swiss Army Knife - Azure Cosmos DB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 瑞士军刀 - Azure Cosmos DB
- en: When it comes to storage, we often have to store multiple schemas of data using
    multiple databases. Due to the need for using multiple services, managing our
    solution becomes cumbersome and requires a lot of skill to do it in the right
    fashion. Thanks to Azure Cosmos DB, we can both store records using different
    database models (such as MongoDB, Table Storage, or Gremlin), and pay only for
    what we agreed on—throughput, latency, availability, and consistency, all thanks
    to the serverless model.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储方面，我们经常需要使用多个数据库存储多个数据模式。由于需要使用多个服务，管理我们的解决方案变得繁琐，并且需要具备相当的技能才能以正确的方式进行。感谢
    Azure Cosmos DB，我们可以使用不同的数据库模型（如 MongoDB、表存储或 Gremlin）存储记录，同时仅为我们商定的内容付费——吞吐量、延迟、可用性和一致性，这一切都得益于无服务器模型。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What Azure Cosmos DB is, and how it looks compared to other storage systems
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Cosmos DB 是什么，它与其他存储系统相比如何
- en: Partitioning, throughput, and consistency
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分区、吞吐量和一致性
- en: Different Azure Cosmos DB database models
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的 Azure Cosmos DB 数据库模型
- en: Security features
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全功能
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To perform the exercises in this chapter, you will need the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行本章中的练习，您需要以下内容：
- en: Microsoft Visual Studio or Visual Studio Code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio 或 Visual Studio Code
- en: Azure subscription
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 订阅
- en: Understanding Cosmos DB
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Cosmos DB
- en: When working with storage, you have probably heard about different kinds; relational
    databases, NoSQL databases, graph databases, document databases. There are plenty
    of different models available, with different characteristics, when it comes to
    storing data. If you need to easily maintain relationships between tables, in
    most cases you will choose something such as SQL Server. On the other hand, maybe
    you would like to save each record in the JSON file format, where the best solution
    would be an instance of MongoDB. While the choice is all yours, the biggest problem
    is that you need to have a different kind of service to serve the same purpose—storing
    data. This is where Azure Cosmos DB comes into play. With its multi-model capabilities,
    flexibility, and scalability it is a great choice for globally distributed and
    highly responsive applications. In this section, you will learn how to start working
    with this service and what its main functionalities are.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理存储时，您可能听说过不同种类的存储：关系型数据库、NoSQL 数据库、图数据库、文档数据库。存储数据时，有很多不同的模型可供选择，每种模型具有不同的特点。如果您需要轻松地维护表之间的关系，通常情况下您会选择像
    SQL Server 这样的数据库。另一方面，也许您想将每个记录保存为 JSON 文件格式，那么最合适的解决方案就是 MongoDB 实例。虽然选择完全取决于您，但最大的问题是，您需要有不同种类的服务来实现相同的目的——存储数据。这就是
    Azure Cosmos DB 发挥作用的地方。凭借其多模型功能、灵活性和可扩展性，它是全球分布式和高响应应用的理想选择。在本节中，您将学习如何开始使用此服务及其主要功能。
- en: Creating a Cosmos DB instance in the portal
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在门户中创建 Cosmos DB 实例
- en: 'We will start our journey with Azure CosmosDB by creating it in the Azure portal:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在 Azure 门户中创建 Azure Cosmos DB 开始我们的旅程：
- en: 'When you click on + Create a resourceand search for `Azure Cosmos DB`, you
    will see a simple form that allows you to select the basic features of the service:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您点击 + 创建资源并搜索 `Azure Cosmos DB` 时，您将看到一个简单的表单，允许您选择该服务的基本功能：
- en: '![](img/eef48642-0d4b-48da-92bd-37a50979efe7.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eef48642-0d4b-48da-92bd-37a50979efe7.png)'
- en: 'There are, however, some not-so-obvious features, which will require a little
    bit of explaining:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也有一些不太明显的功能，需要稍微解释一下：
- en: '**API**: As mentioned earlier, Azure Cosmos DB enables you to use one of a
    few different APIs during creation. Currently, there are five available APIs:
    SQL, MongoDB, Cassandra, Azure Table, and Gremlin. Depending on the API selected,
    you will have different capabilities available (and what is more, different packages
    will be required for communicating with your database in the application''s code).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API**：如前所述，Azure Cosmos DB 允许您在创建时使用几种不同的 API。目前，有五种可用的 API：SQL、MongoDB、Cassandra、Azure
    Table 和 Gremlin。根据所选择的 API，您将拥有不同的功能（而且更重要的是，应用程序代码中与数据库通信时需要不同的软件包）。'
- en: 'Enable geo-redundancy: By selecting this option, your data will be distributed
    between two paired regions (depending on the one you selected in the Location drop-down),
    for example, West Europe and North Europe or Central US and East US 2.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用地理冗余：通过选择此选项，您的数据将分布在两个配对区域之间（取决于您在位置下拉菜单中选择的区域），例如西欧和北欧，或美国中部和美国东部 2。
- en: 'Enable Multi Master: This is a new (and currently in preview) feature, where
    instead of having only a single master, you can have multiple master databases
    all around the globe. This greatly lowers latency when it comes to reading already
    saved data (as you do not have to wait for data propagation), and increases consistency
    and data integrity (as you have the possibility to write data to a master instance
    in a specific region).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用多主模式：这是一个新的（目前处于预览阶段）功能，你可以在全球范围内拥有多个主数据库，而不仅仅是单一的主数据库。这大大减少了读取已保存数据时的延迟（因为你不必等待数据传播），并提高了一致性和数据完整性（因为你可以将数据写入特定区域的主实例）。
- en: 'Virtual networks:Depending on the model you choose, you may be able to restrict
    access to an instance of Azure Cosmos DB by putting it into a specific virtual
    network and subnet. Currently, this is possible for two database models: SQL and
    MongoDB.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟网络：根据你选择的模型，你可以通过将 Azure Cosmos DB 实例放入特定的虚拟网络和子网中，来限制对其的访问。目前，这对于两种数据库模型是可行的：SQL
    和 MongoDB。
- en: 'When you are satisfied with all the entered data, you can create it by clicking
    on the Create button. Once your service is created, you can access the Overview blade
    to see how it works initially:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你对所有输入的数据感到满意时，可以点击“创建”按钮来创建它。服务创建完成后，你可以访问“概览”面板，查看它的初始工作状态：
- en: '![](img/5d0b4b56-f433-4249-8e9a-02d106e47757.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d0b4b56-f433-4249-8e9a-02d106e47757.png)'
- en: 'As you can see, it displays a map in the center that tells you how your data
    is replicated across regions. If you click on the map, you will be able to reconfigure
    the initial settings. If you click on the Add new regionbutton, you will be able
    to search for a particular one and select it as an additional read region. Alternatively,
    you can just click on a region icon:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，中心显示了一个地图，告诉你数据在不同区域是如何复制的。如果你点击地图，你将能够重新配置初始设置。如果你点击“添加新区域”按钮，你将能够搜索特定区域并将其选择为额外的读取区域。或者，你可以直接点击一个区域图标：
- en: '![](img/ed8e4a92-228e-483c-b54e-0aa5a3b9a7cd.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed8e4a92-228e-483c-b54e-0aa5a3b9a7cd.png)'
- en: In the current setup, you are unable to add additional write regions. To be
    able to do so, you have to use the multi-master feature I described previously.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前设置中，你无法添加额外的写入区域。要做到这一点，你必须使用我之前提到的多主模式功能。
- en: Once you save additional regions, both Manual Failoverand Automatic Failoverwill
    become active. The concept for failover is simple—if your write region goes down
    and becomes unavailable, another available read region can take its place. The
    only difference is whether you want to perform such failover manually or automatically.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦保存了额外的区域，**手动故障转移**和**自动故障转移**将会变为激活状态。故障转移的概念很简单——如果你的写入区域出现故障并变得不可用，另一个可用的读取区域可以代替它。唯一的区别是，你是希望手动执行故障转移，还是自动执行。
- en: If you opt for automatic failover, you can decide on the order of switching
    between read and write regions. If you want, for example, to switch from North
    Europe to West Europe in the first place, West Europe has to be the very first
    priority in the list.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了自动故障转移，你可以决定读取和写入区域之间的切换顺序。如果你想，比如，首先从北欧切换到西欧，那么西欧必须在列表中成为最高优先级。
- en: 'If you go back to the Overview blade, you will notice some additional features:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你返回到“概览”面板，你会注意到一些额外的功能：
- en: 'Monitoring: Here you can easily find all requests to your database and their
    status.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控：在这里，你可以轻松找到所有对数据库的请求及其状态。
- en: 'Enable geo-redundancy: If you did not enable this feature when creating an
    instance of Azure Cosmos DB, you may do this now.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用地理冗余：如果你在创建 Azure Cosmos DB 实例时没有启用此功能，你现在可以启用。
- en: 'Data Explorer: By clicking on this button you can easily access an explorer,
    which allows you to insert and modify data.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据浏览器：点击此按钮，你可以轻松访问一个浏览器，允许你插入和修改数据。
- en: 'Additionally, you can go to the Quick start blade, where you will be able to
    start developing applications using this Azure service:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以前往“快速入门”面板，在那里你将能够开始使用此 Azure 服务开发应用程序：
- en: '![](img/069d2761-adae-4f90-a18f-afcc76a422a3.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/069d2761-adae-4f90-a18f-afcc76a422a3.png)'
- en: Depending on the selected model of a database, you will have access to different
    initial configurations. Additionally, as you can see, you have a choice as to
    whether you would like to use .NET, Node.js, Java, or Python—all these languages
    can easily integrate with Azure Cosmos DB, making it an even better choice when
    it comes to creating a multi-platform application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 根据所选的数据库模型，您将能够访问不同的初始配置。此外，如您所见，您可以选择是否使用 .NET、Node.js、Java 或 Python——这些语言都可以轻松与
    Azure Cosmos DB 集成，使其在创建多平台应用程序时成为一个更好的选择。
- en: Using Azure Cosmos DB in Visual Studio
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中使用 Azure Cosmos DB
- en: 'Besides controlling Azure Cosmos DB in the portal, you are able to access it
    directly in your code and IDE, such as Visual Studio. Like many other services,
    you can use Cloud Explorerto browse all available instances of this database available
    within your subscription:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在门户中控制 Azure Cosmos DB，您还可以直接在您的代码和 IDE 中访问它，例如 Visual Studio。像许多其他服务一样，您可以使用
    Cloud Explorer 浏览您的订阅中所有可用的数据库实例：
- en: '![](img/f6e91c8e-ea8f-471d-9470-d37ce4371171.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6e91c8e-ea8f-471d-9470-d37ce4371171.png)'
- en: Now let's try to communicate with it from a simple application. While initially
    an instance of Cosmos DB is empty, we can quickly add a table to it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试通过一个简单的应用程序与它进行通信。虽然 Cosmos DB 的实例最初是空的，但我们可以迅速为其添加一个表。
- en: In this section, we will work with the table API in Cosmos DB. If you would
    like to work with any other type, you will have to consult tutorials in the *Further
    reading*section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Cosmos DB 中的表 API。如果您想使用其他类型，您需要查看 *进一步阅读* 部分的教程。
- en: 'Consider the following code snippet:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下代码片段：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding code, we are creating an empty table, which should be immediately
    available within an instance of Cosmos DB. Now if I check Cloud Exploreronce more,
    I see that, in fact, it is true:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在创建一个空表，该表应该会在 Cosmos DB 实例中立即可用。现在，如果我再次检查 Cloud Explorer，我看到实际上它是正确的：
- en: '![](img/1f0a5e35-91dc-46ac-ba88-283742d706fd.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f0a5e35-91dc-46ac-ba88-283742d706fd.png)'
- en: 'Now we can add a record to it. We slightly modify our code as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以向其中添加一条记录。我们稍微修改代码如下：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We now consult Data Explorerin the portal to see the difference between Visual
    Studio and the Azure portal. We should be able to see the entity we have just
    inserted:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过门户中的 Data Explorer 来查看 Visual Studio 和 Azure 门户之间的差异。我们应该能够看到我们刚刚插入的实体：
- en: '![](img/2c3adb3f-1415-424f-8e49-502ed27d37ce.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c3adb3f-1415-424f-8e49-502ed27d37ce.png)'
- en: As you can see, all you need to start working with a database with multiple
    database models, which can be quickly configured for geo-redundancy and scaled
    across the globe, is just several lines of code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，开始使用具有多种数据库模型的数据库，且能够快速配置以实现地理冗余并在全球范围内进行扩展，只需几行代码。
- en: Pricing in Azure Cosmos DB
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Cosmos DB 的定价
- en: 'Azure Cosmos DB is part of the serverless services available in Azure. This
    means that the chances of configuring and provisioning servers to run it are either
    maximally limited or not available. As you probably noticed, we were not able
    to define how many instances of a service we would like to run (or nodes or clusters).
    Instead, we have to define throughput for each collection individually:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB 是 Azure 中的一部分无服务器服务。这意味着配置和提供服务器以运行它的机会要么极为有限，要么不可用。如您所见，我们无法定义希望运行多少实例的服务（或节点或集群）。相反，我们必须为每个集合单独定义
    **吞吐量**：
- en: '![](img/17c2f81b-fe7d-4097-9d5f-8162bde5b368.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17c2f81b-fe7d-4097-9d5f-8162bde5b368.png)'
- en: A simple calculator display also estimates the costs of a collection per hour
    and day. The unit of throughput in Azure Cosmos DB is **request units** (**RUs**).
    During the creation of a container (or a collection—you can use both definitions),
    you specify also its type—whether it has fixed capacity or unlimited.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的计算器显示屏还估算了每小时和每天的集合成本。Azure Cosmos DB 中的吞吐量单位是 **请求单位**（**RUs**）。在创建容器（或集合——您可以使用这两种定义）时，您还需要指定其类型——是
    **固定** 容量还是 **无限制**。
- en: Once the type of collection is defined, you cannot change it later.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了集合类型，您无法再更改它。
- en: 'By selecting different options, you can select different limits for RUs:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择不同的选项，您可以为 RUs 选择不同的限制：
- en: For fixed, you can select between 400 to 10,000 RUs
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 **固定**，您可以选择从 400 到 10,000 的 RUs。
- en: For unlimited, you can go from 1,000 to a maximum of 100,000 RUs
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 **无限制**，您可以从 1,000 RUs 到最多 100,000 RUs 之间进行选择。
- en: Regarding pricing, you are paying both for the amount of data stored ($0.25
    GB/month), and reserved RUs ($.008/hour per every 100 RUs). Having those values,
    we can quickly calculate the smallest bill possible—it is around $23\. Now there
    is a very important caveat. You are paying per each collection/table/container.
    That means that, if you have, for example, 20 different tables in your database,
    you will pay 20 * $23 = $462\. In such a scenario, it is sometimes better to model
    your database in such a way that it will be possible to store all data within
    a single container.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 关于定价，你支付的是存储的数据量（$0.25 GB/月）和预留的 RUs（每 100 RUs 每小时 $0.008）。有了这些值，我们可以迅速计算出最小账单金额——大约是
    $23。现在有一个非常重要的警告：你是按每个集合/表/容器收费的。这意味着，如果你有例如 20 个不同的表，你需要支付 20 * $23 = $462。在这种情况下，有时最好将数据库建模为可以将所有数据存储在一个容器中的方式。
- en: While Azure Cosmos DB seems like a quite an expensive service, please do remember
    that it does many things for you, such as geo-redundancy, multiple read regions,
    multi-master models, and many more. You always have to calculate the best options
    for you (and if you are able to do the same with the similar results). To do so,
    take a look at the Capacity Planner described in the *Further Reading* section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Azure Cosmos DB 看起来是一项相当昂贵的服务，但请记住，它为你做了很多事情，比如地理冗余、多个读取区域、多主模式等。你始终需要计算出最适合你的选项（并且如果能通过类似的方式获得相同的结果）。为此，可以查看
    *进一步阅读* 部分中的容量规划器。
- en: Partitioning, throughput, and consistency
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分区、吞吐量和一致性
- en: Now we have learned something about Azure Cosmos DB—how it works and its most
    common features—we can focus a little bit on three really important topics in
    this service; partitioning, throughput, and consistency. Those factors are crucial
    when selecting a database engine to power your application. They directly tell
    you how it will be performing, how many requests it will be able to handle, and
    what guarantees apply when it comes to your data integrity.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了有关 Azure Cosmos DB 的一些基本知识——它是如何工作的以及其最常见的功能——接下来我们可以稍微关注一下这个服务中的三个非常重要的主题：分区、吞吐量和一致性。这些因素在选择数据库引擎来支持你的应用程序时至关重要。它们直接告诉你系统的性能表现、能够处理多少请求以及在数据完整性方面适用的保证。
- en: Partitions in Azure Cosmos DB
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Cosmos DB 中的分区
- en: 'Partitioning is directly connected with scaling in Azure Cosmos DB as it allows
    for load-balancing incoming requests. In fact, there are two different types of
    partition in this service:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 分区与 Azure Cosmos DB 中的扩展性密切相关，因为它可以为传入请求进行负载均衡。事实上，在此服务中有两种不同类型的分区：
- en: '**Physical**: These are a combination of fixed storage and a variable amount
    of computing resources. This type of partition is fully managed by Cosmos DB—you
    cannot directly affect how your data is physically partitioned and how a service
    handles those partitions. In fact, you are also unaware of how many of those partitions
    are currently in use. Therefore, you should not design your containers against
    that specific concept.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理**：这些是固定存储和可变计算资源的组合。这种类型的分区由 Cosmos DB 完全管理——你无法直接影响数据是如何物理分区的，也无法控制服务如何处理这些分区。实际上，你也不知道当前有多少分区正在被使用。因此，你不应该针对这个特定概念设计容器。'
- en: '**Logical**: This kind of partition holds data that has the same partition
    key. Because you are able to define that key (by specifying it in each entity),
    you are able to control how your data is partitioned.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑**：这种分区包含具有相同分区键的数据。因为你可以定义该键（通过在每个实体中指定它），所以你可以控制数据的分区方式。'
- en: Remember that a logical partition has a limit of 10 GB. Additionally, all data
    for a logical partition has to be stored within one physical partition.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，逻辑分区的最大限制为 10 GB。此外，所有属于一个逻辑分区的数据必须存储在同一个物理分区内。
- en: 'Now you may wonder how partitioning works in Azure Cosmos DB. This can be described
    in a few steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会想知道 Azure Cosmos DB 中的分区是如何工作的。这可以通过几个步骤来描述：
- en: Each time a new container is provisioned (and you are providing a number of
    RUs), Cosmos DB has to provision physical partitions, which will be able to serve
    the number of requests specified in the number of RUs.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次创建一个新容器时（并且你提供了若干 RUs），Cosmos DB 都需要创建物理分区，这些分区将能够处理指定数量的请求。
- en: It may turn out that the specified amount of RUs exceeds the maximum number
    of requests per second served by a partition. In that case, Cosmos DB will provision
    the number of partitions it needs to satisfy your requirements.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果可能是指定的RUs数量超过了每个分区每秒处理的最大请求数。在这种情况下，Cosmos DB将预配所需的分区数量，以满足你的要求。
- en: The next thing to do is to allocate space for partition key hashes. All provisioned
    partitions have to have the same space allocated (so it is distributed evenly).
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来需要做的是为分区键哈希分配空间。所有已预配的分区都必须分配相同的空间（以便均匀分配）。
- en: Now, if after some time any partition reaches its storage limit, it is split
    into two new partitions, and data is distributed evenly between them.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果某个分区在一段时间后达到了存储限制，它将被拆分为两个新的分区，数据将在它们之间均匀分配。
- en: Of course, the partition key used for partitioning differs for each database
    model—for a table it is partition key, for SQL it will be a custom path. In general,
    this operation is slightly different depending on the database type, yet the overall
    concept remains the same.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，用于分区的分区键因数据库模型而异——对于表来说，它是分区键，对于SQL，它将是一个自定义路径。一般而言，这个操作根据数据库类型略有不同，但整体概念是相同的。
- en: Remember that if your container has only one partition key for all the entities
    in it, then Cosmos DB will not be able to split a partition. That means that you
    could hit the maximum of 10 GB per partition and not be able to add any more data.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你的容器对其中所有实体只有一个分区键，那么Cosmos DB将无法对该分区进行拆分。这意味着，你可能会达到每个分区最大10GB的限制，并且无法再添加更多数据。
- en: The best value for the partition key depends solely on your application data
    specification. In general, you have to choose a value that is quite differential
    (so partitioning can actually happen). On the other hand, you should not create
    a unique partition key for each record (while it is possible, it will be quite
    expensive). There is no one solution to that problem—you always have to analyze
    each scenario and select what suits you the most.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 分区键的最佳值完全取决于你的应用数据规范。通常，你需要选择一个具有较大差异性的值（这样才可以进行分区）。另一方面，你不应为每个记录创建唯一的分区键（尽管可能做到，但成本非常高）。对于这个问题没有统一的解决方案——你总是需要分析每个场景，并选择最适合你的方案。
- en: In most cases, it is worth including a partition key while filtering data, as
    it allows for high concurrency.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，值得在过滤数据时包括分区键，因为它可以支持高并发。
- en: Throughput in Azure Cosmos DB
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Cosmos DB中的吞吐量
- en: In the *Further reading*section, you will find a capacity calculator—a tool
    that enables you to plan your Cosmos DB instance and estimate the required RUs.
    As mentoned previously, in this particular service you are not defining the number
    of instances or clusters. Instead, while creating a container, you have to state
    your expected throughput for that specific collection (or a set of collections).
    Thanks to an **Service Level Agreement** (**SLA**) for Azure Cosmos DB, that value
    will be guaranteed for you. Additionally, even if you replicate a database to
    another region, you can expect that problems in one region will not affect others.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在*进一步阅读*部分，你将找到一个容量计算器——这是一种工具，可以帮助你规划你的Cosmos DB实例并估算所需的RUs。如前所述，在这个特定服务中，你并不需要定义实例或集群的数量。相反，在创建容器时，你需要指定该特定集合（或一组集合）期望的吞吐量。得益于Azure
    Cosmos DB的**服务水平协议**（**SLA**），该值将得到保障。此外，即使你将数据库复制到另一个区域，你也可以预期一个区域的问题不会影响其他区域。
- en: There is one important definition of 1 request unit—it is the processing capacity,
    that enables you to read a 1 KB entity using, for example, a simple GET request.
    The same is not true for operations such as inserting or deleting, as those require
    more computing power to be performed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 1个请求单位有一个重要的定义——它是处理能力，允许你使用简单的GET请求读取1KB的实体。对于插入或删除等操作则不同，因为这些操作需要更多的计算能力来执行。
- en: 'If you would like to know exactly how many RUs a specific operation consumes,
    you have to consult the `x-ms-request-charge` header in a response from a Cosmos
    DB instance. This will tell you the cost of this operation—of course, you have
    to remember that it may differ depending on the number of records returned. In
    the documentation you can find the following table:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道一个特定操作消耗了多少RUs，你需要查看来自Cosmos DB实例的响应中的`x-ms-request-charge`头部。它将告诉你此操作的成本——当然，你需要记住，这个成本可能会根据返回的记录数量而有所不同。在文档中，你可以找到以下表格：
- en: '| Operation | Request unit charge |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 请求单位费用 |'
- en: '| --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Create item | ~15 RU |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 创建项 | ~15 RU |'
- en: '| Read item | ~1 RU |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 读取项 | ~1 RU |'
- en: '| Query item by ID | ~2.5 RU |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 按ID查询项 | ~2.5 RU |'
- en: Those are values for executing an operation against an entity 1 KB in size.
    As you can see, the values are completely different depending on the operation
    type. You also can see, that it is crucial to carefully check all operations requirements—if
    you fail to do so, you may face an HTTP 429 response, which tells you that you
    have exceeded the reserved throughput limits. In such a scenario, you should honor
    the `x-ms-retry-after-ms` header response, which allows for an easy retry policy.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是针对大小为1 KB的实体执行操作时的值。如你所见，值会根据操作类型的不同而完全不同。你还可以看到，仔细检查所有操作要求是至关重要的——如果你没有做到这一点，可能会遇到HTTP
    429响应，表示你已经超过了预留的吞吐量限制。在这种情况下，你应该遵守`x-ms-retry-after-ms`头响应，这样可以轻松实施重试策略。
- en: Consistency in Azure Cosmos DB
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Cosmos DB中的一致性
- en: Besides different models of a database, Azure Cosmos DB offers also a different
    level of consistency. You may wonder what consistency is and how it affects your
    data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了不同的数据库模型外，Azure Cosmos DB还提供了不同级别的一致性。你可能会想知道一致性是什么，它如何影响你的数据。
- en: 'We can define it as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下定义它：
- en: Consistency is a parameter of a database system, which reflects the way a transaction
    affects data. It defines the rules that are applied when different constraints
    or/and triggers affect data written to a database.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性是数据库系统的一个参数，反映了事务如何影响数据。它定义了当不同的约束或/和触发器影响写入数据库的数据时所应用的规则。
- en: 'So basically it tells you what are the guarantees that, if your data becomes
    affected by a set of operations, it will not be malformed and you will be able
    to rely on it. The following are the available consistency models in Cosmos DB:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，它告诉你，如果一组操作影响了你的数据，它将不会被损坏，你可以依赖它。以下是Cosmos DB中可用的一致性模型：
- en: STRONG
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STRONG
- en: BOUNDED STATELESS
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BOUNDED STATELESS
- en: SESSION
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SESSION
- en: CONSISTENT PREFIX
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CONSISTENT PREFIX
- en: EVENTUAL
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EVENTUAL
- en: 'In the above list, each level below STRONGgives you less consistency. This
    is especially true for EVENTUAL, which could be familiar to you thanks to a topic
    known as eventual consistency. In general, you are setting the default consistency
    level for your account—then it is possible to override it per each request (of
    course, if you want to). If you want to know how exactly each consistency level
    works, please refer to the *Further reading*section. To set a particular level
    in your Cosmos DB instance, click on the Default consistencyblade:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述列表中，每个低于STRONG的一致性级别都会给你带来较少的一致性。这对于EVENTUAL尤其如此，你可能通过一个名为“最终一致性”的主题有所了解。一般来说，你为你的账户设置默认的一致性级别——然后可以针对每个请求覆盖它（当然，如果你愿意的话）。如果你想了解每个一致性级别具体如何工作，请参阅*进一步阅读*部分。要在你的Cosmos
    DB实例中设置特定级别，请点击“默认一致性”选项卡：
- en: '![](img/f2f6e600-c9ec-43f2-8d6f-df1417e8691f.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2f6e600-c9ec-43f2-8d6f-df1417e8691f.png)'
- en: 'As you can see, it allows you to easily switch to another consistency level
    depending on your needs. What is more, it displays a nice animation, which describes
    how reads/writes in multiple regions will work for this particular level. The
    following screenshot shows the animation for eventual consistency:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它允许你根据需求轻松切换到另一个一致性级别。更重要的是，它显示了一个漂亮的动画，描述了在多个区域中读取/写入如何适应这个特定级别。下面的截图展示了最终一致性的动画：
- en: '![](img/0a21d58f-400e-4c64-93d7-ad1e0ca31e47.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a21d58f-400e-4c64-93d7-ad1e0ca31e47.png)'
- en: In this screenshot, each individual note represents an individual read or write
    in a particular region. Additionally, on this screen, you are able to set Maximum
    Lag (Time)when the BOUNDED STALENESSlevel is selected.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在此截图中，每个单独的节点代表在特定区域中的单次读取或写入操作。此外，在这个界面中，你还可以在选择了BOUNDED STALENESS级别时设置最大延迟（时间）。
- en: CosmosDB data models and APIs
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CosmosDB数据模型和API
- en: As mentioned earlier, Azure Cosmos DB offers five different database models,
    all sharing the same infrastructure and concepts. This is a great feature, that
    makes this service really flexible and able to serve multiple different purposes.
    In this section, I will briefly describe each database model, so you will be able
    to select one that best serves your purposes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Azure Cosmos DB提供了五种不同的数据库模型，它们共享相同的基础设施和概念。这是一个很棒的特点，使得该服务非常灵活，可以服务于多种不同的目的。在本节中，我将简要描述每个数据库模型，以便你能够选择最适合你需求的模型。
- en: SQL
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'If you think about SQL, you probably see a relational database with tables,
    relations, and stored procedures. When working with **SQL API **in Cosmos DB,
    in fact you will work with documents that can be queried using the SQL syntax.
    Let us assume you want to query documents using the following call:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想到SQL，你可能会想到一个包含表格、关系和存储过程的关系型数据库。当你使用 Cosmos DB 中的**SQL API**时，实际上你会使用可以通过SQL语法查询的文档。假设你想使用以下调用查询文档：
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here you can find an example of a query written in C#:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个用C#编写的查询示例：
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, it is all about a simple LINQ query, which allows you to use
    a specific property to filter data. Because all records in Cosmos DB are stored
    as JSON documents, you can easily transform them from table to document representations
    (and possibly denormalize them).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这完全是通过一个简单的LINQ查询，它允许你使用特定的属性来过滤数据。由于所有 Cosmos DB 中的记录都是以JSON文档的形式存储的，你可以轻松地将它们从表格形式转换为文档表示（并可能进行非规范化处理）。
- en: Using document databases is completely different from storing data in relational
    databases. Always remember to model your data appropriately in line with database
    capabilities.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文档数据库与存储关系型数据库中的数据完全不同。始终记住要根据数据库的能力恰当地建模你的数据。
- en: MongoDB
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB
- en: 'As Cosmos DB implements the MongoDB wire protocol, you can easily use all your
    applications that currently use that document database with new instances of Azure
    Cosmos DB, without changing anything (besides the connection string, of course).
    While it cannot mimic MongoDB completely yet (the full list of supported operations
    can be found in the *Further reading*section), in most cases you will be able
    to use it seamlessly. As Cosmos DB has a strict requirement regarding security,
    you will have to use SSL when communicating with it:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Cosmos DB 实现了MongoDB的协议，你可以轻松将当前使用MongoDB文档数据库的所有应用程序迁移到新的 Azure Cosmos DB实例，而无需更改任何内容（除了连接字符串）。虽然它目前还无法完全模拟MongoDB（支持的操作的完整列表可以在*进一步阅读*部分找到），但在大多数情况下，你将能够无缝地使用它。由于 Cosmos
    DB 在安全性方面有严格要求，因此你在与其通信时必须使用SSL：
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here you can see a template for a connection string, where `ssl=true`is present—it
    is required when communicating with this Azure service. What is more, you will
    not be able to set a communication without authenticating a request.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你可以看到一个连接字符串的模板，`ssl=true`已经包含在其中——它是在与此Azure服务通信时必需的。而且，你将无法在未认证请求的情况下设置通信。
- en: Graph
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形
- en: 'Azure Cosmos DB supports Gremlin as a graph database model. If you are not
    familiar with graph databases, you may think about them as a structure composed
    of vertices and edges. They can very easily show you relations between different
    elements of a graph as you can quickly traverse the connections and see that element
    A knows something about element B indirectly, thanks to element C. To be more
    specific, Cosmos DB supports a more specific model of a graph database known as
    a **property graph**. The following is an example query for Gremlin:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB 支持Gremlin作为图形数据库模型。如果你不熟悉图形数据库，你可以将其看作由顶点和边组成的结构。它们能够非常方便地展示图形中不同元素之间的关系，因为你可以迅速遍历这些连接，发现元素A通过元素C间接了解了元素B。更具体地说， Cosmos
    DB 支持一种被称为**属性图**的更具体的图形数据库模型。以下是Gremlin查询的示例：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding example is taken from the documentation and literally answers
    the question: What operating systems do relations of the user of the `thomas.1` ID
    use?. Graph databases are great for applications such as social media portals
    or IoT hubs.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例取自文档，直观地回答了这个问题：用户ID为 `thomas.1`的关系使用了哪些操作系统？图形数据库非常适用于社交媒体门户或物联网中心等应用。
- en: Table
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表格
- en: 'While you can use Azure Storage Table for your applications (which will be
    covered in upcoming chapters), it is possible to also take advantage of Cosmos
    DB''s Table API and consider more advanced scenarios with that service. There
    are some differences between both services:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以将 Azure Storage Table 用于你的应用程序（这一部分将在接下来的章节中讲解），你也可以利用 Cosmos DB的Table
    API，并考虑使用该服务处理更复杂的场景。这两种服务之间存在一些差异：
- en: While the current maximum limit for operations in Azure Storage Tables is 20,000
    operations/sec, with Cosmos DB you can achieve millions of them
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前， Azure Storage Tables 的最大操作限制为每秒20,000次操作，而 Cosmos DB 则能够达到数百万次操作
- en: You cannot initiate failover for Storage Table
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能为 Storage Table 启动故障转移
- en: In Cosmos DB, data is indexed on all properties, not only on the partition key
    and row key
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Cosmos DB中，数据会根据所有属性进行索引，而不仅仅是分区键和行键
- en: Different pricing (storage versus throughput)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的定价（存储与吞吐量）
- en: Different consistency levels
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的一致性级别
- en: 'Developing against Cosmos DB Table API is the same as working with Azure Table
    Storage. The following is an example of code in C# retrieving entities from a
    table:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Cosmos DB Table API进行开发与使用Azure Table Storage是相同的。以下是一个C#代码示例，从表中检索实体：
- en: '[PRE6]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Cassandra
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cassandra
- en: The last available model in Azure Cosmos DB is Cassandra. Cassandra is a scalable,
    durable, and decentralized database for storing massive amounts of data. Now,
    if you use it with Cosmos DB, you can focus on development rather than on operations
    or performance management, and choice of consistency. While currently this model
    is in preview, you can test it and check what advantages it gives to you. Under
    the hood, it uses the Cassandra API, so it is possible to use Cassandra Query
    Language to communicate and interact with data. This model has the same feel as
    MongoDB—you can use the same tools you used for your current Cassandra instances
    and should not notice any difference.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure Cosmos DB中，最后一个可用的模型是Cassandra。Cassandra是一个可扩展、持久化和去中心化的数据库，用于存储海量数据。现在，如果你将其与Cosmos
    DB一起使用，你可以专注于开发，而不是操作、性能管理或一致性选择。虽然当前此模型处于预览阶段，但你可以进行测试，并查看它带给你的优势。底层使用Cassandra
    API，因此可以使用Cassandra查询语言与数据进行交互。此模型与MongoDB相似——你可以使用与当前Cassandra实例相同的工具，且不应注意到任何差异。
- en: Different features of CosmosDB
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cosmos DB的不同功能
- en: Azure Cosmos DB has multiple different features that can be used to lower your
    bills, secure an instance, or integrate with other services. In this section,
    we will quickly take a look at most of them, so you will fully understand the
    basics of this service and will be able to progress on your own.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB具有多个不同的功能，可以帮助你降低费用、保障实例安全或与其他服务集成。在本节中，我们将快速浏览其中的大部分功能，帮助你全面理解此服务的基础知识，并能自主推进。
- en: Account level throughput
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 账户级吞吐量
- en: 'Instead of defining throughput per each collection, sometimes you would like
    to set a fixed value for the whole account. This is a great addition if you have
    many different containers and instead of paying for each individually (as you
    remember—it was over $20 per month), you can go to Account level throughputand
    set a throughput for the whole account:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能希望为整个账户设置一个固定的吞吐量值，而不是为每个集合单独定义吞吐量。如果你有许多不同的容器，且不希望为每个容器单独付费（正如你记得的——每月超过$20），你可以选择账户级吞吐量并为整个账户设置吞吐量：
- en: '![](img/9f751068-bbf5-4766-922d-5bec4effbc33.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f751068-bbf5-4766-922d-5bec4effbc33.png)'
- en: The only limitation of this feature is you can no tables currently in the account.
    If you enable it, all your requests to all tables will share the same amount of
    throughput (so you can pay less, but in the case of "greedy" collections you can
    run out of RUs). The downside of that functionality is that you will pay for the
    provisioned throughput, whether you have created collections or not.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能的唯一限制是，你目前不能在账户中创建表。如果启用此功能，所有对所有表的请求将共享相同数量的吞吐量（这样你可以支付更少的费用，但如果遇到“贪婪”的集合，你可能会耗尽RUs）。该功能的缺点是，无论是否创建了集合，你都将为已配置的吞吐量付费。
- en: Note that the aforementioned feature is available only for the Table API.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述功能仅适用于Table API。
- en: Database level throughput
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库级吞吐量
- en: 'In Azure Cosmos DB it is also possible to provision throughput directly on
    the database. To do so, you need to select the Provision throughput checkbox during
    database creation:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure Cosmos DB中，也可以直接为数据库配置吞吐量。为此，你需要在创建数据库时选中“配置吞吐量”复选框：
- en: '![](img/46f2bcf5-8708-4699-9272-2098d9bc4794.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46f2bcf5-8708-4699-9272-2098d9bc4794.png)'
- en: With that feature on, all provisioned RUs will be shared across all collection
    available for a database.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 启用该功能后，所有配置的RUs将跨数据库中所有可用的集合共享。
- en: Firewall and virtual networks
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防火墙和虚拟网络
- en: If you configured the virtual network feature during Cosmos DB creation, in
    this blade you will be able to configure it further. What is more, it is also
    possible to configure a firewall—so you can restrict access to a specific range
    of IPs or disallow connections from other Azure data centers. In general, you
    do not want to have a database that can be accessed by everyone, so if this feature
    is available, I strongly recommend you use it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在创建Cosmos DB时配置了虚拟网络功能，在此面板中你将能够进一步配置它。更重要的是，还可以配置防火墙——因此你可以限制特定IP范围的访问或禁止来自其他Azure数据中心的连接。一般来说，你不希望数据库被任何人访问，因此如果此功能可用，我强烈建议你使用它。
- en: Note that currently firewalls and VNets are available only for the SQL API and
    Mongo API. Support for other APIs should be available soon.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can easily integrate Azure Cosmos DB with Azure Functions by using the Add
    Azure Functionblade:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0154b628-5612-42f5-b34d-150a53842fc8.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: 'Creating a function from Cosmos DB will add the following code to your Function
    App:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is CSX code, which we did not cover—however, besides slight changes in
    syntax, it is pure C#. This function will listen to changes to a collection you
    selected during creation—it is up to you what it will do next. In general, it
    is a quick and easy way to integrate these two services. What is more, you can
    have more than just one Azure Function generated for your collection or table.
    Now if I add a document, I can see it triggers a function:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Stored procedures
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Cosmos DB allows for creating stored procedures that can be executed individually
    and can hold extra logic, which you do not want to share.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to your collection in Data Explorer,you will see the New Stored Proceduretab
    and the ability to create one:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00ad3946-c75e-4b1d-91fe-7b3b5966ef94.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: 'Stored procedures are written in JavaScript—this allows you to easily access
    the document''s schema (as they are all JSON). What is more, they are registered
    per collection. Here you can find an example of the easiest stored procedure:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: User-defined functions and triggers
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To extend the query language, you can write your own **user-defined function**
    (**UDF**) and in your queries. Note that you cannot use these in Stored Procedures.
    UDFs are used to extend the SQL query language in Azure Cosmos DB and can be only
    called from inside queries. Triggers, however, are divided into two categories:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Pre-triggers
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-triggers
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, you can select an operation that this trigger refers to:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: All
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here you can find an example of a trigger that updates a timestamp in a document
    before it is created:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Triggers, of course, are also available from Data Explorer:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43a704b5-66c8-495d-9bc9-ebae4e0079f4.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about another serverless Azure component named Azure
    Cosmos DB. You saw multiple database models that this service supports, and also
    multiple different features, such as geo-redundancy and the ability to easily
    scale up and introduce new read regions, where data will be replicated. What is
    more, you are now aware of multiple consistency models and how to change them
    in the Azure portal.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, you will learn about another hot topic: reactive architecture
    with Azure Event Grid.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which APIs does Azure Cosmos DB support currently?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are there any differences between the capabilities of Azure Table Storage and Table
    API in Cosmos DB?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the available consistency models?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which consistency model is more consistent—bounded, staleness, or eventual?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to restrict access to Azure Cosmos DB to only a single IP?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is SQL API the same as SQL Server?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SQL API 和 SQL Server 是一样的吗？
- en: What is the reason for using stored procedures?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用存储过程的原因是什么？
- en: Is it possible to provision throughput in Azure Cosmos DB for the whole account
    instead of per collection?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否可以为整个账户而不是每个集合单独配置 Azure Cosmos DB 的吞吐量？
- en: Further reading
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Partitioning data in Azure Cosmos DB: [https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data](https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在 Azure Cosmos DB 中分区数据: [https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data](https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data)'
- en: 'Capacity planner: [https://www.documentdb.com/capacityplanner](https://www.documentdb.com/capacityplanner)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '容量规划器: [https://www.documentdb.com/capacityplanner](https://www.documentdb.com/capacityplanner)'
- en: 'Azure Cosmos DB RUs: [https://docs.microsoft.com/en-us/azure/cosmos-db/request-units](https://docs.microsoft.com/en-us/azure/cosmos-db/request-units)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure Cosmos DB RUs: [https://docs.microsoft.com/en-us/azure/cosmos-db/request-units](https://docs.microsoft.com/en-us/azure/cosmos-db/request-units)'
- en: 'Consistency levels: [https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels](https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一致性级别: [https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels](https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels)'
- en: 'Mongo DB support: [https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-feature-support#mongodb-protocol-support](https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-feature-support#mongodb-protocol-support)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Mongo DB 支持: [https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-feature-support#mongodb-protocol-support](https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-feature-support#mongodb-protocol-support)'
- en: Graph API and Gremlin: [http://tinkerpop.apache.org/docs/current/reference/#intro](http://tinkerpop.apache.org/docs/current/reference/#intro)
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '图形 API 和 Gremlin: [http://tinkerpop.apache.org/docs/current/reference/#intro](http://tinkerpop.apache.org/docs/current/reference/#intro)'
