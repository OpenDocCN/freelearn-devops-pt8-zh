["```\nFROM debian:stable-slim\nLABEL name=\"apache\"\nLABEL maintainer=\"John Doe <john@doe.com>\"\nLABEL version=1.0\nRUN apt-get update -y \\\n    && apt-get install -y --no-install-recommends apache2=2.4.10-10+deb8u7 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\nEXPOSE 80\nENTRYPOINT [\"/usr/sbin/apache2ctl\"]\nCMD [\"-D\", \"FOREGROUND\"]\n```", "```\nversion: '2'\n\nservices:\n  http:\n    build: .\n    image: demo-httpd\n    ports:\n      - \"80:80\"\n```", "```\n$ docker-compose build\n\n```", "```\n$ mkdir test\n\n```", "```\n$ apache2ctl -v\nServer version: Apache/2.4.10 (Debian)\n\n```", "```\n$ docker run --rm demo-httpd:latest -v\nServer version: Apache/2.4.10 (Debian)\n\n```", "```\n$ docker run --rm demo-httpd:latest -v | grep 2.4.10\nServer version: Apache/2.4.10 (Debian)\n\n```", "```\n$ echo $?\n0\n\n```", "```\n@test \"test title\" {\n  run <some command>\n  [ $status -eq 0 ]\n}\n```", "```\n@test \"Apache version is correct\" {\n  run docker run --rm demo-httpd:latest -v \\| grep 2.4.10\n  [ $status -eq 0 ]\n}\n```", "```\n$ bats test\n\nÂŸ\n Apache version is correct\n\n1 test, 0 failures \n\n```", "```\n$ ls -1 /var/lib/apt/lists | wc -l\n\n```", "```\n@test \"apt lists are empty\" {\n  run docker run --rm --entrypoint=\"/bin/sh\" demo-httpd:latest -c \"ls -1 /var/lib/apt/lists | wc -l\"\n  [ $status -eq 0 ]\n  [ \"$output\" = \"0\" ]\n}\n```", "```\n$ bats test\n apt lists are empty\n Apache version is correct\n\n2 tests, 0 failures\n```", "```\ntest: bats\n\nbats: build\n  bats test\n\nbuild:\n  docker-compose build\n```", "```\n$ make test\ndocker-compose build\nBuilding http\nStep 1 : FROM debian:stable-slim\n ---> d2103c196fde\n[...]\nSuccessfully built 1c4f46316f19\nbats test\n\n. apt lists are empty\n. Apache version is correct\n 2 tests, 0 failures\n\n```", "```\nsource 'https://rubygems.org'\n\ngroup :test do\n  gem 'serverspec'\n  gem 'docker-api'\nend\n```", "```\n$ bundle install\nUsing docker-api 1.33.0\nUsing serverspec 2.37.2\n[...]\nBundle complete! 2 Gemfile dependencies, 18 gems now installed.\n\n```", "```\n$ bundle exec rspec\n\n```", "```\nrequire \"serverspec\"\nrequire \"docker\"\n\ndescribe \"Docker NGINX image\" do\n  before(:all) do\n    @image = Docker::Image.build_from_dir('.')\n\n    set :os, family: :debian\n    set :backend, :docker\n    set :docker_image, @image.id\n  end\nend\n```", "```\n$ cat /etc/debian_version\n8.6\n\n```", "```\ndescribe \"Docker NGINX image\" do\n[...]\n  def debian_version\n    command(\"cat /etc/debian_version\").stdout\n  end\nend\n```", "```\n  it \"installs Debian Jessie\" do\n    expect(debian_version).to include(\"8.\")\n  end\n```", "```\n$ bundle exec rspec --color --format documentation\nDocker image\n installs Debian Jessie (FAILED - 1)\n\nFailures:\n\n 1) Docker image installs Debian Jessie\n Failure/Error: @image = Docker::Image.build_from_dir('.')\n Docker::Error::ServerError:\n No image was generated. Is your Dockerfile empty?\n\n```", "```\nFROM debian:stable-slim\n```", "```\n$ bundle exec rspec --color --format documentation\nDocker NGINX image\n installs Debian Jessie\n\nFinished in 0.72234 seconds (files took 0.29061 seconds to load)\n1 example, 0 failures\n\n```", "```\ndescribe \"Docker NGINX image\" do\n[...]\n  describe package('nginx') do\n    it { should be_installed }\n  end\nend\n```", "```\n$ bundle exec rspec --color --format documentation\nDocker NGINX image\n installs Debian Jessie\n Package \"nginx\"\n should be installed (FAILED - 1)\n\n```", "```\nRUN apt-get update -y \\\n    && apt-get install -y --no-install-recommends nginx=1.6.2-5+deb8u4 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n```", "```\n$ bundle exec rspec --color --format documentation\nDocker NGINX image\n installs Debian Jessie\n Package \"nginx\"\n should be installed\n\nFinished in 51.89 seconds (files took 0.3032 seconds to load)\n2 examples, 0 failures\n\n```", "```\ndescribe \"Docker NGINX image\" do\n[...]\n  describe 'Running the NGINX container' do\n    before(:all) do\n      @container = Docker::Container.create(\n        'Image'      => @image.id\n        )\n      @container.start\n    end\n  end\nend\n```", "```\n    describe process(\"nginx\") do\n      it { should be_running }\n    end \n```", "```\n    after(:all) do\n      @container.kill\n      @container.delete(:force => true)\n    end\n```", "```\n$ bundle exec rspec --color --format documentation\nDocker NGINX image\n installs Debian Jessie\n Package \"nginx\"\n should be installed\n Running the NGINX container\n Process \"nginx\"\n should be running (FAILED - 1)\n\n```", "```\nEXPOSE 80\nENTRYPOINT [\"/usr/sbin/nginx\"]\nCMD [\"-g\", \"daemon off;\"]\n```", "```\n$ bundle exec rspec --color --format documentation\nDocker NGINX image\n installs Debian Jessie\n Package \"nginx\"\n should be installed\n Running the NGINX container\n Process \"nginx\"\n should be running\n\nFinished in 1.94 seconds (files took 0.30853 seconds to load)\n3 examples, 0 failures\n\n```", "```\ntest: rspec\nrspec:\n  bundle exec rspec --color --format documentation\n```", "```\nLABEL name=\"demo-nginx\"\nLABEL version=1.0\n```", "```\n$ git add Dockerfile\n$ git commit -m \"added some missing labels\"\n[master f20017b] added some missing labels\n 1 file changed, 2 insertions(+)\n$ git push\n\n```", "```\n$ docker pull sjourdan/nginx-docker-demo\n\n```", "```\n$ git tag 1.0\n$ git push --tags\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/sjourdan/nginx-docker-demo.git\n * [new tag]         1.0 -> 1.0 \n\n```", "```\n$ docker pull sjourdan/nginx-docker-demo:1.0\n\n```", "```\nFROM sjourdan/nginx-docker-demo:1.0\n```", "```\n    sudo: required\n    language: ruby\n    dist: trusty\n    services:\n     - docker\n    script: make test\n\n    ```", "```\n    $ git add .travis.yml\n    $ git commit -m \"added travis.yml\"\n    $ git push\n\n    ```", "```\n$ docker tag sjourdan/nginx-docker-demo:1.0 quay.io/sjourdan/nginx-docker-demo:1.0\n$ docker push quay.io/sjourdan/nginx-docker-demo:1.0\nThe push refers to a repository [quay.io/sjourdan/nginx-docker-demo]\n82819c620e5d: Pushed\nd07a4f6d2067: Pushed\n\n```", "```\n[Service]\nEnvironment=\"AWS_ACCESS_KEY_ID=AKIAJ...\"\nEnvironment=\"AWS_SECRET_ACCESS_KEY=SW+jdHKd..\"\n```", "```\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n\n```", "```\n$ sudo docker run -d -p 80:8080 --log-driver=\"awslogs\" --log-opt awslogs-region=\"us-east-1\" --log-opt awslogs-group=\"docker_logs\" --log-opt awslogs-stream=\"www\" tomcat:9\n\n```", "```\nversion: '2'\n\nservices:\n  tomcat:\n    image: tomcat:9\n    logging:\n      driver: 'awslogs'\n      options:\n        awslogs-region: 'us-east-1'\n        awslogs-group: 'docker_logs'\n        awslogs-stream: 'tomcat'\n```", "```\n$ sudo docker-compose up\nCreating network \"ubuntu_default\" with the default driver\n[...]\ntomcat_1  | WARNING: no logs are available with the 'awslogs' log driver\n\n```", "```\n[Unit]\nDescription=Tomcat Container Service\nAfter=docker.service\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nExecStartPre=/usr/bin/docker pull tomcat:9\nExecStartPre=-/usr/bin/docker kill %n\nExecStartPre=-/usr/bin/docker rm %n\nExecStart=/usr/bin/docker run --rm -p 80:8080 --log-driver=awslogs --log-opt awslogs-region=us-east-1 --log-opt awslogs-group=docker_logs --log-opt awslogs-stream=%n --name %n tomcat:9\nExecStop=/usr/bin/docker stop %n\n\n[Install]\nWantedBy=multi-user.target\n```", "```\n$ sudo systemctl daemon-reload\n$ sudo systemctl start tomcat\n\n```", "```\n$ docker stats\nCONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O               BLOCK I/O             PIDS\nc2904d5b5c89        0.01%               892.9 MB / 8.326 GB   10.72%              258.2 GB / 10.27 GB   374 MB / 0 B          16\n0641790f1b30        3.36%               894.4 MB / 8.326 GB   10.74%              258.2 GB / 11.12 GB   419.1 MB / 0 B        16\nbc8d85e05be8        112.65%             891.4 MB / 8.326 GB   10.71%              179.6 GB / 536.5 GB   326.6 MB / 0 B        10\na7be664792b3        0.02%               45.37 MB / 8.326 GB   0.54%               17.85 GB / 17.72 GB   18.78 MB / 110.6 kB   18\nab2d4e922949        2.37%               70.34 MB / 8.326 GB   0.84%               83.15 MB / 550 MB     459.7 MB / 143.4 kB   17\n08e685124dfd        0.01%               192 MB / 8.326 GB     2.31%               8.76 MB / 42.11 MB    1.499 MB / 14.05 MB   3\n5893c5d6f43f        0.74%               546.1 MB / 8.326 GB   6.56%               46.74 MB / 40.22 MB   160.7 MB / 317.9 MB   74\n7f21e405bdee        5.23%               8.184 MB / 8.326 GB   0.10%               30.14 GB / 30.28 GB   8.192 kB / 0 B        7\n\n```", "```\n$ docker stats $(docker ps --format '{{.Names}}')\nCONTAINER                   CPU %               MEM USAGE / LIMIT     MEM %               NET I/O               BLOCK I/O             PIDS\nsm_streammachine-slave_2    18.34%              889.4 MB / 8.326 GB   10.68%              258.2 GB / 10.27 GB   374 MB / 0 B          16\nsm_streammachine-slave_1    28.39%              900.1 MB / 8.326 GB   10.81%              258.2 GB / 11.12 GB   419.1 MB / 0 B        16\nsm_streammachine-master_1   1.89%               890.4 MB / 8.326 GB   10.69%              179.6 GB / 536.5 GB   326.6 MB / 0 B        10\nsm_proxy_1                  0.02%               45.37 MB / 8.326 GB   0.54%               17.85 GB / 17.72 GB   18.78 MB / 110.6 kB   18\nsm_cadvisor_1               1.62%               70.34 MB / 8.326 GB   0.84%               83.16 MB / 550 MB     459.7 MB / 143.4 kB   17\nsm_analytics_1              0.01%               192 MB / 8.326 GB     2.31%               8.76 MB / 42.11 MB    1.499 MB / 14.05 MB   3\nsm_elasticsearch_1          0.72%               546.1 MB / 8.326 GB   6.56%               46.74 MB / 40.22 MB   160.7 MB / 317.9 MB   74\nsm_streamer_1               8.17%               8.184 MB / 8.326 GB   0.10%               30.15 GB / 30.29 GB   8.192 kB / 0 B        7\n\n```", "```\n$ sudo docker run \\\n --volume=/:/rootfs:ro \\\n --volume=/var/run:/var/run:rw \\\n --volume=/sys:/sys:ro \\\n --volume=/var/lib/docker/:/var/lib/docker:ro \\\n --publish=8080:8080 \\\n --detach=true \\\n --name=cadvisor \\\n google/cadvisor:latest\n\n```", "```\n  cadvisor:\n    volumes:\n      - /:/rootfs:ro\n      - /var/run:/var/run:rw\n      - /sys:/sys:ro\n      - /var/lib/docker/:/var/lib/docker:ro\n    ports:\n      - \"8080:8080\"\n    image: google/cadvisor:latest\n    restart: always\n```", "```\n$ curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | sudo bash\n\n```", "```\n$ sudo csysdig --view=containers\n\n```"]