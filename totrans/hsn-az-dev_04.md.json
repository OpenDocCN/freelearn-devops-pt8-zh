["```\nFROM python:2.7-slim\nWORKDIR /app\nADD . /app\nRUN pip install -r requirements.txt\nEXPOSE 80\nENV NAME World\nCMD [\"python\", \"app.py\"]\n```", "```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n\n    return 'This is my first Service Fabric app!'\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=80)\n```", "```\ndocker build -t handsonservicefabricapp .\n```", "```\ndocker run -d -p 4000:80 --name handsonsf handsonservicefabricapp\n```", "```\ndocker login handsonazureregistry.azurecr.io -u {USERNAME} -p {PASSWORD}\ndocker tag handsonservicefabricapp handsonazureregistry.azurecr.io/sf/handsonservicefabricapp\ndocker push handsonazureregistry.azurecr.io/sf/handsonservicefabricapp\n```", "```\nnpm install -g yo\nnpm install -g generator-azuresfcontainer\n```", "```\naz acr login --name {REGISTRY_NAME}\naz acr credential show -n {REGISTRY_NAME} --query passwords[0].value\n```", "```\n<ServiceManifestImport>\n  <ServiceManifestRef ServiceManifestName=\"HandsOnServicePkg\" ServiceManifestVersion=\"1.0.0\" />\n  <Policies>\n    <ContainerHostPolicies CodePackageRef=\"Code\">\n      <PortBinding ContainerPort=\"80\" EndpointRef=\"HandsOnServiceEndpoint\"/>\n      <RepositoryCredentials AccountName=\"{LOGIN}\" Password=\"{PASSWORD}\" PasswordEncrypted=\"false\"/>\n    </ContainerHostPolicies>\n  </Policies>\n</ServiceManifestImport>\n```", "```\nsfctl cluster select --endpoint https://{ENDPOINT}:19000 --pem {CERTIFICATE}.pem --no-verify\n```", "```\nprotected override async Task RunAsync(CancellationToken cancellationToken)\n{\n  long iterations = 0;\n\n  while (true)\n  {\n    cancellationToken.ThrowIfCancellationRequested();\n\n    ServiceEventSource.Current.ServiceMessage(this.Context, \"Working-{0}\", ++iterations);\n\n    await Task.Delay(TimeSpan.FromSeconds(1), cancellationToken);\n  }\n}\n```", "```\nprotected override async Task RunAsync(CancellationToken cancellationToken)\n{\n  var myDictionary = await this.StateManager.GetOrAddAsync<IReliableDictionary<string, long>>(\"myDictionary\");\n\n  while (true)\n  {\n    cancellationToken.ThrowIfCancellationRequested();\n\n    using (var tx = this.StateManager.CreateTransaction())\n    {\n      var result = await myDictionary.TryGetValueAsync(tx, \"Counter\");\n\n      ServiceEventSource.Current.ServiceMessage(this.Context, \"Current Counter Value: {0}\",\n        result.HasValue ? result.Value.ToString() : \"Value does not exist.\");\n\n      await myDictionary.AddOrUpdateAsync(tx, \"Counter\", 0, (key, value) => ++value);\n\n      // If an exception is thrown before calling CommitAsync, the transaction aborts, all changes are\n      // discarded, and nothing is saved to the secondary replicas.\n      await tx.CommitAsync();\n    }\n\n    await Task.Delay(TimeSpan.FromSeconds(1), cancellationToken);\n  }\n}\n```", "```\n[assembly: FabricTransportActorRemotingProvider(RemotingListener = RemotingListener.V2Listener, RemotingClient = RemotingClient.V2Client)]\nnamespace ReliableActor.Interfaces\n{\n    /// <summary>\n    /// This interface defines the methods exposed by an actor.\n    /// Clients use this interface to interact with the actor that implements it.\n    /// </summary>\n    public interface IReliableActor : IActor\n    {\n        /// <summary>\n        /// TODO: Replace with your own actor method.\n        /// </summary>\n        /// <returns></returns>\n        Task<int> GetCountAsync(CancellationToken cancellationToken);\n\n        /// <summary>\n        /// TODO: Replace with your own actor method.\n        /// </summary>\n        /// <param name=\"count\"></param>\n        /// <returns></returns>\n        Task SetCountAsync(int count, CancellationToken cancellationToken);\n    }\n}\n```", "```\nnamespace ReliableActor\n{\n    [StatePersistence(StatePersistence.Persisted)]\n    internal class ReliableActor : Actor, IReliableActor\n    {\n        public ReliableActor(ActorService actorService, ActorId actorId) \n            : base(actorService, actorId)\n        {\n        }\n\n        protected override Task OnActivateAsync()\n        {\n            ActorEventSource.Current.ActorMessage(this, \"Actor activated.\");\n            return this.StateManager.TryAddStateAsync(\"count\", 0);\n        }\n\n        Task<int> IReliableActor.GetCountAsync(CancellationToken cancellationToken)\n        {\n            return this.StateManager.GetStateAsync<int>(\"count\", cancellationToken);\n        }\n\n        Task IReliableActor.SetCountAsync(int count, CancellationToken cancellationToken)\n        {\n            return this.StateManager.AddOrUpdateStateAsync(\"count\", count, (key, value) => count > value ? count : value, cancellationToken);\n        }\n    }\n}\n```", "```\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.ServiceFabric.Actors;\nusing Microsoft.ServiceFabric.Actors.Client;\nusing ReliableActor.Interfaces;\n\nnamespace ReliableActor.Client\n{\n    class Program\n    {\n        static void Main()\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        static async Task MainAsync()\n        {\n            IReliableActor actor = ActorProxy.Create<IReliableActor>(ActorId.CreateRandom(), new Uri(\"fabric:/ReliableActors/ReliableActorService\"));\n            while (true)\n            {\n                var count = await actor.GetCountAsync(CancellationToken.None);\n                Console.Write($\"Current count is: {count}\\r\\n\");\n                await actor.SetCountAsync(++count, CancellationToken.None);\n\n                Thread.Sleep(1000);\n            }\n        }\n    }\n}\n```", "```\npublic interface ICommunicationListener\n{\n    Task<string> OpenAsync(CancellationToken cancellationToken);\n    Task CloseAsync(CancellationToken cancellationToken);\n    void Abort();\n}\n```", "```\nprotected override IEnumerable<ServiceInstanceListener> CreateServiceInstanceListeners()\n{\n  return new ServiceInstanceListener[0];\n}\n```", "```\nprotected override IEnumerable<ServiceInstanceListener> CreateServiceInstanceListeners()\n{\n  return new[]\n  {\n    new ServiceInstanceListener(serviceContext =>\n      new HttpSysCommunicationListener(serviceContext, \"ServiceEndpoint\", (url, listener) =>\n        new WebHostBuilder()\n          .UseHttpSys()\n          .ConfigureServices(\n            services => services\n              .AddSingleton<StatelessServiceContext>(serviceContext))\n          .UseContentRoot(Directory.GetCurrentDirectory())\n          .UseServiceFabricIntegration(listener, ServiceFabricIntegrationOptions.None)\n          .UseStartup<Startup>()\n          .UseUrls(url)\n          .Build()))\n  };\n}\n```", "```\npublic class Startup\n{\n  public Startup(IHostingEnvironment env)\n  {\n  }\n\n  public Startup(IApplicationBuilder appenv, IHostingEnvironment env, ILoggerFactory loggerFactory)\n  {\n  }\n\n  public void ConfigureServices(IServiceCollection services)\n  {\n  }\n\n  public void Configure(IApplicationBuilder app)\n  {\n    app.Run(context => {\n      return context.Response.WriteAsync(\"Hello From Service Fabric!\");\n    });\n  }\n}\n```", "```\n<Resources>\n  <Endpoints>\n    <Endpoint Name=\"ServiceEndpoint\" Protocol=\"http\" Port=\"80\" />\n  </Endpoints>\n</Resources>\n```", "```\n\"azureActiveDirectory\": {\n  \"tenantId\": \"<guid>\",\n  \"clusterApplication\": \"<guid>\",\n  \"clientApplication\": \"<guid>\"\n}\n```", "```\nhttp://{CLUSTER}:19080/EventsStore/Cluster/Events?api-version=6.2-preview&StartTimeUtc=2018-04-03T18:00:00Z&EndTimeUtc=2018-07-04T18:00:00Z\n```"]