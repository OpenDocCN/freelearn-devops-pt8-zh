["```\nnpm init --yes\n```", "```\n...\n\"scripts\": {\n\"start\": \"node index.js\",\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n...\n```", "```\nnpm install express\nnpm install util\nnpm install child-process\n```", "```\nconst {promisify} = require('util');\nconst exec = promisify(require('child_process').exec);\nconst express = require('express');\nconst app = express();\nconst port = process.env.PORT || 8080;\n\napp.listen(port, () => {\n  console.log('Listening on port', port);\n});\n```", "```\napp.get('/', async (req, res) => {\n  try {\n    let message = req.query.message;\n    console.log ('Message: ' + message);\n    const cmd='echo ' + message + ' | boxes -d boy';\n    const {stdout, stderr} = await exec(cmd);\n    if (stderr) {\n      throw stderr;\n    }\n    res.status(200).send(\"<pre>\" + stdout + \"</pre>\");\n  }\n  catch (ex) {\n    console.log(`${ex}`);\n    res.status(500);\n  }\n});\n\n```", "```\nFROM node:12-slim\nLABEL MAINTAINER Rich Rose\nRUN apt-get update -y && apt-get install -y boxes && apt-get clean\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install --only=production\nCOPY . .\nCMD [ \"npm\", \"start\" ]\n```", "```\ngcloud builds submit --tag gcr.io/$GOOGLE_CLOUD_PROJECT/announce-service:1.0\n```", "```\ndocker run -d -p 8080:8080 gcr.io/$GOOGLE_CLOUD_PROJECT/announce-service:1.0\n```", "```\ncurl 127.0.0.1:8080\n```", "```\ncurl 127.0.0.1:8080/?message=cloud+run+on+anthos\n```", "```\ndocker stop $(docker ps -aq)\n```", "```\ngcloud container clusters get-credentials hos-cluster-1 --zone us-central1-a --project $GOOGLE_CLOUD_PROJECT\n```", "```\ngcloud run deploy announce-service \\\n--platform gke \\\n--cluster hos-cluster-1 \\\n--cluster-location us-central1-a \\\n--image gcr.io/$GOOGLE_CLOUD_PROJECT/announce-service\n```", "```\nANNOUNCE_URL=$(gcloud beta run services describe announce-service --platform gke --cluster hos-cluster-1 --cluster-location us-central1-a --format \"value(status.url)\")\n```", "```\nkubectl get svc istio-ingress -n gke-system\n```", "```\nISTIO_INGRESS=$(kubectl get svc istio-ingress -n gke-system -o json | jq -r '.status.loadBalancer.ingress[0].ip') \n```", "```\ncurl -v http://announce-service.default.[EXTERNAL_IP].xip.io\n```", "```\nkubectl patch configmap config-domain --namespace knative-serving --patch \\\n '{\"data\": {\"example.com\": null, \"[EXTERNAL-IP].xip.io\": \"\"}}'\n```", "```\nSERVICE-URL=$(gcloud beta run services describe password-service --platform gke --cluster hos-cluster-1 --cluster-location us-central1-a --format \"value(status.url)\")\n```", "```\nkubectl get svc istio-ingress -n gke-system\n```", "```\nISTIO_INGRESS=$(kubectl get svc istio-ingress -n gke-system -o json | jq '.status.loadBalancer.ingress[0].ip')\n```", "```\nkubectl patch configmap config-domain --namespace knative-serving --patch \\\n '{\"data\": {\"example.com\": null, \"[EXTERNAL_IP].xip.io\": \"\"}}'\n```", "```\nwget https://dl.eff.org/certbot-auto\nchmod a+x ./certbot-auto\n./certbot-auto --help\n```", "```\n./certbot-auto certonly --manual --preferred-challenges dns -d '*.default.[EXTERNAL_IP].xip.io'\n```", "```\nmkdir simple-form && cd $_\n```", "```\nnpm init --yes\n```", "```\nâ€¦\n\"scripts\": {\n\"start\": \"node index.js\",\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n...\n```", "```\nnpm install pug\nnpm install express\n```", "```\nconst express = require('express');\nconst pug = require('pug');\nconst app = express();\nconst port = process.env.PORT || 8080;\n\napp.get(\"/\", function(req, res) {\n  const pugTemplate = pug.compileFile('./views/index.pug');\n  res.status(200).send(pugTemplate({\n    service_url: 'http://do.com'}));\n});\n\napp.listen(port, () => {\n  console.log('Listening on port', port);\n});\n```", "```\nmkdir views && cd $_\n```", "```\nhtml\nhead\nstyle.\n\n  input[type=text], select {\n    width: 100%;\n    padding: 12px 20px;\n    margin: 8px 0;\n    display: inline-block;\n  }\n\n  input[type=submit] {\n    width: 20%;\n    padding: 14px 20px;\n    border-radius: 4px;\n  }\n```", "```\n\nbody\n  div.header Cloud Run for Anthos:\n  p\n  div.card\n    p.\n    Add the text you want to see displayed in the boxes application.\n    form(action=\"[ANNOUNCE_URL]/?message\" method=\"get\" target=\"_blank\")\n      label Message to display: <input type=\"text\" name=\"message\"><br>\n      p\n      input(type='submit', value='Submit')\n```", "```\nsteps:\n# Build the container image\n- name: 'gcr.io/cloud-builders/docker'\nargs: ['build', '-t', 'gcr.io/$PROJECT_ID/hello-node', '.']\n# push the container image to Container Registry\n- name: 'gcr.io/cloud-builders/docker'\nargs: ['push', 'gcr.io/$PROJECT_ID/hello-node']\n# Deploy container image to Cloud Run\n- name: 'gcr.io/cloud-builders/gcloud'\nargs: ['beta', 'run', 'deploy', 'hello-node', '--image', 'gcr.io/$PROJECT_ID/hello-node', '--platform', 'managed', '--region', 'us-central1', '--quiet']\nimages:\n- 'gcr.io/$PROJECT_ID/hello-node'\ntimeout: \"600s\"\n```"]