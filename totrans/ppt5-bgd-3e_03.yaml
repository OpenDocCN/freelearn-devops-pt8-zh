- en: Chapter 3. Managing your Puppet code with Git
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *We define ourselves by our actions. With each decision, we tell ourselves
    and the world who we are.* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
- en: '|   | --*Bill Watterson* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
- en: In this chapter, you'll learn how to use the Git version control system to manage
    your Puppet manifests. I'll also show you how to use Git to distribute the manifests
    to multiple nodes, so that you can start managing your whole network with Puppet.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing your Puppet code with Git](img/B08880_03_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: What is version control?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're already familiar with Git, you can save some reading by skipping ahead
    to the *Creating a Git repo* section. If not, here's a gentle introduction.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Even if you're the only person who works on a piece of source code (for example,
    Puppet manifests), it's still useful to be able to see what changes you made,
    and when. For example, you might realize that you introduced a bug at some point
    in the past, and you need to examine exactly when a certain file was modified
    and exactly what the change was. A version control system lets you do that, by
    keeping a complete history of the changes you've made to a set of files over time.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Tracking changes
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you''re working on code with others, you also need a way to communicate
    with the rest of the team about your changes. A version control tool such as Git
    not only tracks everyone''s changes, but lets you record a **commit message**,
    explaining what you did and why. The following example illustrates some aspects
    of a good commit message:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This example is taken from Chris Beams'' excellent blog post on *How to Write
    a Git Commit Message*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[https://chris.beams.io/posts/git-commit/](https://chris.beams.io/posts/git-commit/)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you won't often need such a long and detailed message; most of the
    time, a single line will suffice. However, it's better to give more information
    than less.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Git also records when the change happened, who made it, what files were changed,
    added, or deleted, and which lines were added, altered, or removed. As you can
    imagine, if you're trying to track down a bug, and you can see a complete history
    of changes to the code, that's a big help. It also means you can, if necessary,
    roll back the state of the code to any point in history and examine it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: You might think this introduces a lot of extra complication. In fact, it's very
    simple. Git keeps out of your way until you need it, and all you have to do is
    write a commit message when you decide to record changes to the code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Sharing code
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A set of files under Git version control is called a **repository**, which is
    usually equivalent to a project. A Git repository (from now on, just **repo**)
    is also a great way to distribute your code to others, whether privately or publicly,
    so that they can use it, modify it, contribute changes back to you, or develop
    it in a different direction for their own requirements. The public GitHub repo
    for this book which we looked at in [Chapter 1](ch01.html "Chapter 1. Getting
    started with Puppet"), *Getting started with Puppet* is a good example of this.
    You'll be able to use this repo for working through examples throughout the book,
    but you can also use it for help and inspiration when building Puppet manifests
    for your own infrastructure.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一组受 Git 版本控制的文件叫做 **仓库**，通常等同于一个项目。一个 Git 仓库（从现在开始简称为 **仓库**）也是一个很好的方式来分发你的代码，无论是私有的还是公开的，这样别人可以使用、修改、向你提交更改，或者根据他们自己的需求朝着不同的方向发展它。本书在[第
    1 章](ch01.html "第 1 章：入门 Puppet")中提到的公开 GitHub 仓库，*Puppet 入门* 就是一个很好的例子。你将能够使用这个仓库来完成书中的示例，但你也可以在为自己的基础设施构建
    Puppet 清单时，使用它来获得帮助和灵感。
- en: Because Git is so important for managing Puppet code, it's a good idea to get
    familiar with it, and the only way to do that is to use it for real. So let's
    start a new Git repo we can use to experiment with.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Git 对于管理 Puppet 代码非常重要，所以最好熟悉它，而唯一的办法就是实际使用它。那么我们就从创建一个新的 Git 仓库开始，用来做实验。
- en: Creating a Git repo
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Git 仓库
- en: 'It''s very easy to create a Git repo. Follow these steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 Git 仓库非常容易。按照以下步骤操作：
- en: 'Make a directory to hold your versioned files using the following commands:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个目录来保存你的版本化文件：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now run the following commands to turn the directory into a Git repo:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行以下命令将该目录转换为 Git 仓库：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Making your first commit
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做你的第一次提交
- en: You can change the files in your repo as much as you like, but Git will not
    know about the changes until you make what's called a **commit**. You can think
    of a commit as being like a snapshot of the repo at a particular moment, but it
    also stores information about what changed in the repo since the previous commit.
    Commits are stored forever, so you will always be able to roll back the repo to
    the state it was in at a certain commit, or show what files were changed in a
    past commit and compare them to the state of the repo at any other commit.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随意更改仓库中的文件，但 Git 直到你进行所谓的 **提交** 后，才会知道这些更改。你可以将提交看作是仓库在某个特定时刻的快照，它还存储了自上次提交以来仓库发生的变化。提交会永久存储，所以你总是可以将仓库回滚到某个提交时的状态，或者查看过去提交中更改了哪些文件，并与任何其他提交时仓库的状态进行比较。
- en: 'Let''s make our first commit to the new repo:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对这个新仓库做第一次提交：
- en: 'Because Git records not only changes to the code, but also who made them, it
    needs to know who you are. Set your identification details for Git (use your own
    name and email address, unless you particularly prefer mine) using the following
    commands:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为 Git 不仅记录代码的更改，还记录是谁做的更改，所以它需要知道你的身份。通过以下命令设置你的 Git 个人信息（除非你特别喜欢我的设置，使用你自己的姓名和邮箱地址）：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It''s traditional for Git repos to have a `README` file, which explains what''s
    in the repo and how to use it. For the moment, let''s just create this file with
    a placeholder message:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 仓库通常会有一个 `README` 文件，用来说明仓库的内容及如何使用它。目前，让我们先创建这个文件，并放置一个占位符消息：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Because we''ve added a new file to the repo, changes to it won''t be tracked
    by Git unless we explicitly tell it to. We do this by using the `git add` command,
    as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们向仓库添加了一个新文件，在我们明确告诉 Git 之前，它不会追踪对这个文件的更改。我们通过使用 `git add` 命令来做到这一点，如下所示：
- en: '[PRE6]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Git now knows about this file, and changes to it will be included in the next
    commit. We can check this by running `git status` again:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 现在知道了这个文件，并且对它的更改将包含在下一次提交中。我们可以通过再次运行 `git status` 来检查：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The file is listed under `Changes to be committed`, so we can now actually
    make the commit:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该文件列在 `Changes to be committed` 下，所以我们现在可以实际进行提交：
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can always see the complete history of commits in a repo by using the `git
    log` command. Try it now to see the commit you just made:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以随时使用 `git log` 命令查看仓库的完整提交历史。现在试试看，查看你刚才做的提交：
- en: '[PRE9]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How often should I commit?
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我应该多频繁提交一次？
- en: 'A common practice is to commit when the code is in a consistent, working state,
    and have the commit include a set of related changes made for some particular
    purpose. So, for example, if you are working to fix bug number 75 in your issue-tracking
    system, you might make changes to quite a few separate files and then, once you''re
    happy the work is complete, make a single commit with a message such as:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: On the other hand, if you are making a large number of complicated changes and
    you are not sure when you'll be done, it might be wise to make a few separate
    commits along the way, so that if necessary you can roll the code back to a previous
    state. Commits cost nothing, so when you feel a commit is needed, go ahead and
    make it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Branching
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git has a powerful feature called **branching**, which lets you create a parallel
    copy of the code (a branch) and make changes to it independently. At any time,
    you can choose to merge those changes back into the master branch. Or, if changes
    have been made to the master branch in the meantime, you can incorporate those
    into your working branch and carry on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: This is extremely useful when working with Puppet, because it means you can
    switch a single node to your branch while you're testing it and working on it.
    The changes you make won't be visible to other nodes which aren't on your branch,
    so there's no danger of accidentally rolling out changes before you're ready.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Once you're done, you can merge your changes back into master and have them
    roll out to all nodes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, two or more people can work independently on their own branches,
    exchanging individual commits with each other and with the master branch as they
    choose. This is a very flexible and useful way of working.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about Git branching, and indeed about Git in general, I
    recommend the excellent book '*Pro Git*', by *Scott Chacon* and *Ben Straub*,
    published by *Apress*. The whole book is available for free at [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Distributing Puppet manifests
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book we've only applied Puppet manifests to one node, using `puppet
    apply` with a local copy of the manifest. To manage several nodes at once, we
    need to distribute the Puppet manifests to each node so that they can be applied.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to do this, and as we saw in [Chapter 1](ch01.html "Chapter 1. Getting
    started with Puppet"), *Getting started with Puppet*, one approach is to use the
    **agent/master** architecture, where a central Puppet master server compiles your
    manifests and distributes the **catalog** (the desired node state) to all nodes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Another way to use Puppet is to do without the master server altogether, and
    use Git to distribute manifests to client nodes, which then runs `puppet apply`
    to update their configuration. This **stand-alone** Puppet architecture doesn't
    require a dedicated Puppet master server, and there's no single point of failure.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Both agent/master and stand-alone architectures are officially supported by
    Puppet, and it's possible to change from one to the other if you decide you need
    to. The examples in this book were developed with the stand-alone architecture,
    but will work just as well with agent/master if you prefer it. There is no difference
    in the Puppet manifests, language, or structure; the only difference is in the
    way the manifests are applied.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: All you need for a stand-alone Puppet architecture is a Git server which each
    node can connect to and clone the repo. You can run your own Git server if you
    like, or use a public Git hosting service such as GitHub. For ease of explanation,
    I'm going to use GitHub for this example setup.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we'll create a GitHub account, push our new Puppet
    repo to GitHub, and then set up our virtual machine to automatically pull any
    changes from the GitHub repo and apply them with Puppet.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GitHub account and project
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you already have a GitHub account, or you're using another Git server, you
    can skip this section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Browse to [https://github.com/](https://github.com/)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username you want to use, your email address, and a password.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Unlimited public repositories for free** plan.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GitHub will send you an email to verify your email address. When you get the
    email, click on the verification link.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Start a project**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for your repo (I suggest `puppet`, but it doesn't matter).
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Free GitHub accounts can only create public repos, so select **Public**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful what information you put into a public Git repo, because it can be
    read by anybody. Never put passwords, login credentials, private keys, or other
    confidential information into a repo like this unless it is encrypted. We'll see
    how to encrypt secret information in your Puppet repo in [Chapter 6](ch06.html
    "Chapter 6. Managing data with Hiera"), *Managing data with Hiera*.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Create repository**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GitHub will show you a page of instructions about how to initialize or import
    code into your new repository. Look for the `https` URL which identifies your
    repo; it will be something like this (`https://github.com/pbgtest/puppet.git`):![Creating
    a GitHub account and project](img/B08880_03_02.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pushing your repo to GitHub
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You're now ready to take the Git repo you created locally earlier in this chapter
    and push it to GitHub so that you can share it with other nodes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'In your repo directory, run the following commands. After `git remote add origin`,
    specify the URL to your GitHub repo:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'GitHub will prompt you for your username and password:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can check that everything has worked properly by visiting the repo URL in
    your browser. It should look something like this:![Pushing your repo to GitHub](img/B08880_03_03.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloning the repo
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to manage multiple nodes with Puppet, you will need a copy of the repo
    on each node. If you have a node you'd like to manage with Puppet, you can use
    it in this example. Otherwise, use the Vagrant box we've been working with in
    previous chapters.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands (replace the argument to `git clone` with the URL
    of your own GitHub repo, but don''t lose the `production` at the end):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How does this work? The standard place for Puppet manifests in a production
    environment is the `/etc/puppetlabs/code/environments/production/` directory,
    so that's where our cloned repo needs to end up. However, the Puppet package installs
    some sample manifests in that directory, and Git will refuse to clone into a directory
    that already exists, so we move that directory out of the way with the `mv production
    production.sample` command. The `git clone` command then recreates that directory,
    but this time it contains our manifests from the repo.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Fetching and applying changes automatically
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a stand-alone Puppet architecture, each node needs to automatically fetch
    any changes from the Git repo at regular intervals, and apply them with Puppet.
    We can use a simple shell script for this, and there''s one in the example repo
    (`/examples/files/run-puppet.sh`):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will need to install this script on the node to be managed by Puppet, and
    create a cron job to run it regularly (I suggest every 15 minutes). Of course,
    we could do this work manually, but isn''t this book partly about the advantages
    of automation? Very well, then: let''s practice what we''re preaching.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Writing a manifest to set up regular Puppet runs
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we''ll create the necessary Puppet manifests to install the
    `run-puppet` script on a node and run it regularly from cron:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to create the required directories in your Puppet
    repo:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the following command to copy the `run-puppet` script from the `examples/`
    directory:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the following command to copy the `run-puppet` manifest from the `examples/`
    directory:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add and commit the files to Git with the following commands:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Your Git repo now contains everything you need to automatically pull and apply
    changes on your managed nodes. In the next section, we'll see how to set up this
    process on a node.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might have noticed that every time you push files to your GitHub repo,
    Git prompts you for your username and password. If you want to avoid this, you
    can associate an SSH key with your GitHub account. Once you''ve done this, you''ll
    be able to push without having to re-enter your credentials every time. For more
    information about using an SSH key with your GitHub account see this article:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/](https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Applying the run-puppet manifest
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having created and pushed the manifest necessary to set up automatic Puppet
    runs, we now need to pull and apply it on the target node.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'In the cloned copy of your repo in `/etc/puppetlabs/code/environments/production`,
    run the following commands:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can see from Puppet's output that it has created the `/usr/local/bin/run-puppet`
    script and the `run-puppet` cron job. This will now run automatically every 15
    minutes, pull any new changes from the Git repo, and apply the updated manifest.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: The run-puppet script
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `run-puppet` script does the following two things in order to automatically
    update the target node:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Pull any changes from the Git server (`git pull`).
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the manifest (`puppet apply`).
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our Puppet manifest in `run-puppet.pp` deploys this script to the target node,
    using a `file` resource, and then sets up a cron job to run it every 15 minutes,
    using a `cron` resource. We haven't met the `cron` resource before, but we will
    cover it in more detail in [Chapter 4](ch04.html "Chapter 4. Understanding Puppet
    resources"), *Understanding Puppet resources*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: For now, just note that the `cron` resource has a name (`run-puppet`), which
    is just for the benefit of us humans, to remind us what it does, and it also has
    a `command` to run and `hour` and `minute` attributes to control when it runs.
    The value `*/15` tells `cron` to run the job every 15 minutes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Testing automatic Puppet runs
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To prove that the automatic Puppet run works, make a change to your manifest
    which creates a file (`/tmp/hello.txt`, for example). Commit and push this change
    to Git. Wait 15 minutes, and check your target node. The file should be present.
    If not, something is broken. To troubleshoot the problem, try running `sudo run-puppet`
    manually. If this works, check that the cron job is correctly installed by running
    `sudo crontab -l`. It should look something like the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Managing multiple nodes
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You now have a fully automated stand-alone Puppet infrastructure. Any change
    that you check in to your Git repo will be automatically applied to all nodes
    under Puppet management. To add more nodes to your infrastructure, follow these
    steps for each new node:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Install Puppet (not necessary if you're using the Vagrant box).
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone your Git repo (as described in the *Cloning the repo* section).
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the manifest (as described in the *Applying the run-puppet manifest* section).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You might be wondering how to tell Puppet how to apply different manifests to
    different nodes. For example, you might be managing two nodes, one of which is
    a web server and the other a database server. Naturally, they will need different
    resources.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: We'll learn more about nodes and how to control the application of resources
    to different nodes in [Chapter 8](ch08.html "Chapter 8. Classes, roles, and profiles"),
    *Classes, roles, and profiles*, but first, we need to learn about Puppet's resources
    and how to use them. We'll do that in the next chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced the concepts of version control, and the essentials
    of Git in particular. We set up a new Git repo, created a GitHub account, pushed
    our code to it, and cloned it on a node. We wrote a shell script to automatically
    pull and apply changes from the GitHub repo on any node, and a Puppet manifest
    to install this script and run it regularly from `cron`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了版本控制的概念，特别是 Git 的基本内容。我们创建了一个新的 Git 仓库，注册了一个 GitHub 账户，将代码推送到 GitHub，并在一个节点上克隆了它。我们编写了一个
    shell 脚本，用于自动从 GitHub 仓库拉取并应用更改，并编写了一个 Puppet 清单，安装这个脚本并通过 `cron` 定期运行它。
- en: 'In the next chapter, we''ll explore the power of Puppet resources, going into
    more detail about the Puppet `file`, `package`, and `service` resources we''ve
    already encountered, and introducing three more important resource types: `user`,
    `cron`, and `exec`.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索 Puppet 资源的强大功能，深入了解我们已经接触过的 Puppet `file`、`package` 和 `service`
    资源，并介绍另外三种重要的资源类型：`user`、`cron` 和 `exec`。
