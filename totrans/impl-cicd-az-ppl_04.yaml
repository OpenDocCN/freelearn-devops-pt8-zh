- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Extending Advanced Azure Pipelines Using YAML
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 YAML 扩展高级 Azure Pipelines
- en: We created a build pipeline in the previous chapter by creating jobs, tasks,
    and triggers. This chapter will teach you how to customize the Azure pipeline
    using YAML, such as by creating condition statements with variable groups when
    setting some complex conditions. It also helps to create a flexible pipeline rather
    than the classic online version. For instance, YAML can do that when you need
    to deploy mobile applications to both the Google Play Console and the App Store
    connect simultaneously.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过创建作业、任务和触发器创建了构建管道。本章将教您如何使用 YAML 自定义 Azure 管道，例如，在设置复杂条件时通过变量组创建条件语句。这也有助于创建一个灵活的管道，而不是经典的在线版本。例如，当您需要同时将移动应用程序部署到
    Google Play 控制台和 App Store Connect 时，YAML 可以做到这一点。
- en: By the end of this chapter, you will have learned about creating a build and
    release pipeline using YAML. You will also have learned how to clone, export,
    and import YAML from the classic editor in the Azure DevOps portal.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将学会如何使用 YAML 创建构建和发布管道。您还将学会如何从 Azure DevOps 门户的经典编辑器中克隆、导出和导入 YAML。
- en: 'We will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Creating a build pipeline using YAML
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 YAML 创建构建管道
- en: Creating a release pipeline using YAML
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 YAML 创建发布管道
- en: Cloning, exporting, and importing a YAML pipeline
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆、导出和导入 YAML 管道
- en: Complex YAML configurations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂的 YAML 配置
- en: Advantages and limitations of YAML-based pipelines
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 YAML 的管道的优点和局限性
- en: Let’s start by creating a pipeline using the YAML syntax.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从使用 YAML 语法创建一个管道开始。
- en: Creating a build pipeline using YAML
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 YAML 创建构建管道
- en: 'In this section, you will learn how to build a pipeline using YAML. You will
    also learn how to view YAML on the Azure DevOps portal and save the YAML file
    in Azure Repos. To create a build pipeline using YAML, follow these steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用 YAML 构建一个管道。您还将学习如何在 Azure DevOps 门户中查看 YAML，并将 YAML 文件保存到 Azure
    Repos。要使用 YAML 创建构建管道，请按照以下步骤操作：
- en: 'After logging in via the Azure DevOps portal, please select your organization
    and then navigate to the **Pipelines** page. Click on **New pipeline**:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在通过 Azure DevOps 门户登录后，请选择您的组织，然后导航到 **管道** 页面。点击 **新建管道**：
- en: '![Figure 4.1 – New pipeline](img/B18875_04_1.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 新建管道](img/B18875_04_1.jpg)'
- en: Figure 4.1 – New pipeline
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 新建管道
- en: 'Click on **Azure Repos Git**, which is a source code repository for the demo:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Azure Repos Git**，这是演示的源代码仓库：
- en: '![Figure 4.2 – Azure Repos Git](img/B18875_04_2.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – Azure Repos Git](img/B18875_04_2.jpg)'
- en: Figure 4.2 – Azure Repos Git
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – Azure Repos Git
- en: 'Click on the **PacktAzureDevOps** repository:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **PacktAzureDevOps** 仓库：
- en: '![Figure 4.3 – Select a repository](img/B18875_04_3.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 选择一个仓库](img/B18875_04_3.jpg)'
- en: Figure 4.3 – Select a repository
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 选择一个仓库
- en: 'If you have existing YAML, you will have to select **Existing Azure Pipelines
    YAML file**. However, as we are creating a new one here, we will click on **Starter
    pipeline**:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经有现有的 YAML 文件，您需要选择 **现有的 Azure Pipelines YAML 文件**。但是，由于我们在这里创建一个新的文件，我们将点击
    **启动管道**：
- en: '![Figure 4.4 – Selecting a starter pipeline](img/B18875_04_4.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 选择一个启动管道](img/B18875_04_4.jpg)'
- en: Figure 4.4 – Selecting a starter pipeline
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 选择一个启动管道
- en: 'Click on **Save**, and you can review a new pipeline in YAML format:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **保存**，然后您可以查看以 YAML 格式的新管道：
- en: '![Figure 4.5 – Save pipeline YAML](img/B18875_04_5.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 保存管道 YAML](img/B18875_04_5.jpg)'
- en: Figure 4.5 – Save pipeline YAML
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 保存管道 YAML
- en: 'Enter a commit message that helps you remember what you did in the file and
    select the **Commit directly to the main branch** option. This option will save
    your file in the main branch:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个提交信息，以帮助您记住在文件中所做的更改，并选择 **直接提交到主分支** 选项。此选项将把您的文件保存在主分支中：
- en: '![Figure 4.6 – Commit YAML to Azure Repos Git](img/B18875_04_6.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 提交 YAML 到 Azure Repos Git](img/B18875_04_6.jpg)'
- en: Figure 4.6 – Commit YAML to Azure Repos Git
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 提交 YAML 到 Azure Repos Git
- en: If you would like to save your file in a new branch, then select **Create a
    new branch for this commit**. Click on **Save**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望将文件保存在新分支中，请选择 **为此提交创建一个新分支**。点击 **保存**。
- en: 'After you click **Save**, you will be taken back to the main dashboard result
    of the build pipeline:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **保存** 后，您将返回到构建管道的主仪表板结果：
- en: '![Figure 4.7 – A build pipeline dashboard](img/B18875_04_7.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 构建管道仪表板](img/B18875_04_7.jpg)'
- en: Figure 4.7 – A build pipeline dashboard
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 构建管道仪表板
- en: 'Click on **Run pipeline**:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **运行管道**：
- en: '![Figure 4.8 – Run a build pipeline](img/B18875_04_8.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 运行构建管道](img/B18875_04_8.jpg)'
- en: Figure 4.8 – Run a build pipeline
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 运行构建管道
- en: 'After that, you can see a summary of the build pipeline results:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，你可以看到构建管道结果的摘要：
- en: '![Figure 4.9 – A build pipeline result](img/B18875_04_9.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 构建管道结果](img/B18875_04_9.jpg)'
- en: Figure 4.9 – A build pipeline result
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 构建管道结果
- en: 'You can edit the pipeline by clicking on the ellipses (**…**) next to the **Run
    new** button shown in the following screenshot and then **Edit pipeline**:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击以下截图中 **Run new** 按钮旁边的省略号 (**…**)，然后选择 **Edit pipeline** 来编辑管道：
- en: '![Figure 4.10 – Edit pipeline](img/B18875_04_10.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 编辑管道](img/B18875_04_10.jpg)'
- en: Figure 4.10 – Edit pipeline
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 编辑管道
- en: 'You can now view the starter of the YAML file structure. Let’s look at the
    structure of the example YAML and describe each part:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以查看 YAML 文件结构的初始部分。让我们来看看示例 YAML 的结构，并描述每个部分：
- en: The **main** branch of Azure Repos keeps the YAML file.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Repos 的 **main** 分支保存 YAML 文件。
- en: This is a repository name.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个仓库名称。
- en: This is a YAML filename.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个 YAML 文件名。
- en: A build pipeline will run on any changes in the main branch.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建管道将在主分支的任何更改上运行。
- en: A build pipeline will run on the Ubuntu operating system.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建管道将在 Ubuntu 操作系统上运行。
- en: A script task contains a single line.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本任务包含一行代码。
- en: A script task contains multiple lines.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本任务包含多行代码。
- en: 'These components are shown in the following screenshot:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图展示了这些组件：
- en: '![Figure 4.11 – YAML file structure](img/B18875_04_11.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – YAML 文件结构](img/B18875_04_11.jpg)'
- en: Figure 4.11 – YAML file structure
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – YAML 文件结构
- en: 'You can see the result after running the pipeline based on the YAML file in
    the previous screenshot by clicking on a job:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击作业来查看运行管道后的结果，该作业基于之前截图中的 YAML 文件：
- en: '![Figure 4.12 – Display job result details](img/B18875_04_12.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 显示作业结果详情](img/B18875_04_12.jpg)'
- en: Figure 4.12 – Display job result details
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 显示作业结果详情
- en: 'Click on **Run a one-line script**, which will display the **Hello, world!**
    Text. This is an example of when you would like to display the message inside
    the task of the Azure pipeline:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Run a one-line script**，这将显示 **Hello, world!** 文本。这个示例展示了当你希望在 Azure 管道任务中显示消息时：
- en: '![Figure 4.13 – Job steps with results](img/B18875_04_13.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – 作业步骤及其结果](img/B18875_04_13.jpg)'
- en: Figure 4.13 – Job steps with results
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 作业步骤及其结果
- en: You learned how to create a simple build pipeline using a YAML file for this
    section. Azure Repos keeps the YAML file, and you can view its history with the
    help of Git. In the next section, you will learn how to create a release pipeline
    using a YAML file that contains stages, jobs, and tasks.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中你学会了如何使用 YAML 文件创建一个简单的构建管道。Azure Repos 保存了 YAML 文件，并且你可以通过 Git 查看其历史记录。在下一节中，你将学习如何使用包含阶段、作业和任务的
    YAML 文件创建发布管道。
- en: Creating a release pipeline using YAML
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 YAML 创建发布管道
- en: 'This section will teach you how to create a release pipeline using YAML. You
    will also learn how to create stages, jobs, and tasks in YAML format. To do this,
    follow these steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将教你如何使用 YAML 创建发布管道。你还将学习如何在 YAML 格式中创建阶段、作业和任务。为此，请按照以下步骤进行：
- en: 'Edit the existing pipeline by clicking on the ellipses (**…**) next to it and
    then click on **Edit pipeline**:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击省略号 (**…**) 并选择 **Edit pipeline**，可以编辑现有管道：
- en: '![Figure 4.14 – Editing an existing pipeline](img/B18875_04_14..jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 编辑现有管道](img/B18875_04_14..jpg)'
- en: Figure 4.14 – Editing an existing pipeline
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 编辑现有管道
- en: 'Replace all contents of the existing `azure-pipelines.yml` file, as shown in
    the following screenshot:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，替换现有 `azure-pipelines.yml` 文件的所有内容：
- en: '![Figure 4.15 – Advanced pipeline with two stages](img/B18875_04_15..jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – 带有两个阶段的高级管道](img/B18875_04_15..jpg)'
- en: Figure 4.15 – Advanced pipeline with two stages
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 带有两个阶段的高级管道
- en: 'There are two stages, as shown in the preceding screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面截图所示，有两个阶段：
- en: The first stage will display `Build` `stage job`
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个阶段将显示 `Build` `stage job`
- en: The second stage will display `Release stage`
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二阶段将显示 `Release stage`
- en: This scenario displays build and release stages suitable for building the application
    (the `Build` stage) and deploying the application (the `Release` stage). It is
    easy to find errors or issues because if the build stage fails, it will not continue
    to run the release stage.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该场景展示了适用于构建应用程序（`Build` 阶段）和部署应用程序（`Release` 阶段）的构建和发布阶段。如果构建阶段失败，发布阶段将不会继续运行，因此很容易找到错误或问题。
- en: 'You can validate the syntax of the YAML file by clicking on **…** next to **Save**
    and clicking **Validate**:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击 **…** 在 **保存** 旁边并点击 **验证** 来验证 YAML 文件的语法：
- en: '![Figure 4.16 – Validate the YAML file](img/B18875_04_16..jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – 验证 YAML 文件](img/B18875_04_16..jpg)'
- en: Figure 4.16 – Validate the YAML file
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 验证 YAML 文件
- en: 'You will see the following message if the YAML file is valid:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 YAML 文件有效，你将看到以下消息：
- en: '![Figure 4.17 – Valid YAML file](img/B18875_04_17..jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 有效的 YAML 文件](img/B18875_04_17..jpg)'
- en: Figure 4.17 – Valid YAML file
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 有效的 YAML 文件
- en: 'If the YAML file is invalid, you will see the following error message explaining
    which line has a problem:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 YAML 文件无效，你将看到以下错误消息，说明哪个行出现了问题：
- en: '![Figure 4.18 – Invalid YAML file](img/B18875_04_18..jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 无效的 YAML 文件](img/B18875_04_18..jpg)'
- en: Figure 4.18 – Invalid YAML file
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 无效的 YAML 文件
- en: 'Click **Save** | **Run pipeline**. You can see the result of a pipeline contains
    two stages:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存** | **运行管道**。你可以看到一个包含两个阶段的管道结果：
- en: '![Figure 4.19 – Stage details](img/B18875_04_19..jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 阶段详情](img/B18875_04_19..jpg)'
- en: Figure 4.19 – Stage details
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 阶段详情
- en: 'You can rerun a specific stage by expanding it and clicking on **Rerun stage**:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过展开某个阶段并点击 **重新运行阶段** 来重新运行特定的阶段：
- en: '![Figure 4.20 – Rerun stage](img/B18875_04_20..jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – 重新运行阶段](img/B18875_04_20..jpg)'
- en: Figure 4.20 – Rerun stage
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – 重新运行阶段
- en: You have learned how to create a release pipeline with two stages containing
    a job. You have also learned about the benefit of using stages because you can
    rerun the stage you have a problem with and don’t need to rerun the whole pipeline.
    The following section will teach you how to clone, export, and import YAML to
    create a new pipeline.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何创建一个包含两个阶段的发布管道，并且包含一个作业。你还了解了使用阶段的好处，因为你可以重新运行有问题的阶段，而不需要重新运行整个管道。接下来的章节将教你如何克隆、导出和导入
    YAML 来创建一个新管道。
- en: Cloning, exporting, and importing a YAML pipeline
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克隆、导出和导入 YAML 管道
- en: 'This section will teach you how to clone, export, and import a YAML pipeline
    from the Azure DevOps portal. These actions will help you save time when you need
    to duplicate the same template and adjust it. If you need to make a new Azure
    pipeline, you can do so by cloning it from an existing one. Let’s look at the
    steps that are to be followed to perform these tasks:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将教你如何从 Azure DevOps 门户中克隆、导出和导入 YAML 管道。这些操作将帮助你节省时间，当你需要复制相同的模板并进行调整时。如果你需要创建新的
    Azure 管道，可以通过克隆现有的管道来完成。让我们看看执行这些任务所需遵循的步骤：
- en: '**Clone**: You can clone a pipeline using copy and paste, which is the easy,
    fast way to clone a pipeline.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**克隆**：你可以通过复制和粘贴克隆管道，这是克隆管道的简单快捷方式。'
- en: '**Export and import**: The following steps show you can export an entire YAML
    file from a pipeline:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导出和导入**：以下步骤展示了如何从管道中导出整个 YAML 文件：'
- en: 'You can export a YAML pipeline by clicking on **Edit**:'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击 **编辑** 来导出 YAML 管道：
- en: '![Figure 4.21 – Edit pipeline](img/B18875_04_21..jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 编辑管道](img/B18875_04_21..jpg)'
- en: Figure 4.21 – Edit pipeline
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 编辑管道
- en: 'Click on **…** | **Download full YAML** to download a file:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **…** | **下载完整 YAML** 下载文件：
- en: '![Figure 4.22 – Download the complete YAML](img/B18875_04_22..jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – 下载完整 YAML 文件](img/B18875_04_22..jpg)'
- en: Figure 4.22 – Download the complete YAML
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 下载完整的 YAML 文件
- en: Open a downloaded file and copy and paste it into the new pipeline you created.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开已下载的文件，复制并粘贴到你创建的新管道中。
- en: In the section, you learned how easy it is to download, copy, and paste a YAML
    file into the new pipeline. Now let’s look at some advantages and drawbacks of
    using YAML-based pipelines.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了如何轻松下载、复制并粘贴 YAML 文件到新的管道中。现在，让我们来看一下使用基于 YAML 的管道的一些优点和缺点。
- en: Complex YAML configurations
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂的 YAML 配置
- en: The YAML syntax supports several complex configurations that allow for the modularization
    and reuse of YAML files. Some examples of these are template reuse and the implementation
    of template expressions. We’ll explore how these features work in the following
    sections.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 语法支持几种复杂的配置，允许 YAML 文件的模块化和重用。比如模板重用和模板表达式的实现。接下来的章节将探讨这些功能是如何工作的。
- en: YAML template reuse
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YAML 模板重用
- en: When working with large projects and several applications being developed by
    the same members of a team, it is helpful to define common templates to reuse
    instead of writing everything from scratch for the CI/CD needs of every application.
    For this purpose, Azure Pipelines supports making references to templates to reuse
    steps, jobs, and stages. This is particularly helpful in reducing the duplication
    of YAML because all applications or deployment processes are the same within the
    project. It is also possible to include parameters in the templates, to pass values
    that can be used in the referenced template to customize the behavior.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大型项目以及由同一团队成员开发的多个应用程序时，定义通用模板以便重用，而不是为每个应用程序的 CI/CD 需求从头开始编写所有内容，这非常有帮助。为此，Azure
    Pipelines 支持引用模板来重用步骤、作业和阶段。这在减少 YAML 重复性方面尤其有用，因为项目中的所有应用程序或部署过程都是相同的。还可以在模板中包含参数，以传递可用于被引用模板中的值，从而自定义行为。
- en: 'Let’s look at the following scenario where an Azure pipeline builds the same
    application twice with two different build configurations in the .NET language.
    The file shown in the following screenshot defines one parameter, `buildConfiguration`,
    and three steps to perform the installation of the NuGet tool (`NuGetToolInstaller@1`),
    a NuGet restore of dependencies (`NuGetCommand@2`), and building the solution
    with the VS build utility (`VSBuild@1`):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看以下场景，其中一个 Azure 管道使用两种不同的构建配置两次构建相同的应用程序，采用 .NET 语言。以下截图显示的文件定义了一个参数 `buildConfiguration`，以及执行
    NuGet 工具安装（`NuGetToolInstaller@1`）、NuGet 依赖项恢复（`NuGetCommand@2`）和使用 VS 构建工具（`VSBuild@1`）构建解决方案的三个步骤：
- en: '![Figure 4.23 – dotnet-build-steps template with parameters](img/B18875_04_23..jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.23 – 带参数的 dotnet-build-steps 模板](img/B18875_04_23..jpg)'
- en: Figure 4.23 – dotnet-build-steps template with parameters
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.23 – 带参数的 dotnet-build-steps 模板
- en: 'You can see in the following example how the same `dotnet-build-steps.yml`
    file can now be used to build the same application in two different agents, `linux-latest`
    and `windows-latest`, with the same exact steps and having the possibility to
    add other tasks before and after:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，你可以看到相同的 `dotnet-build-steps.yml` 文件现在可以在两个不同的代理 `linux-latest` 和 `windows-latest`
    上使用相同的步骤构建相同的应用程序，并且可以在前后添加其他任务：
- en: '![Figure 4.24 – Azure pipeline with template references](img/B18875_04_24..jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.24 – 带有模板引用的 Azure 管道](img/B18875_04_24..jpg)'
- en: Figure 4.24 – Azure pipeline with template references
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.24 – 带有模板引用的 Azure 管道
- en: This feature allows for great flexibility, reducing duplicate code in your YAML
    pipelines, and standardization across pipelines, which helps reduce the chances
    of errors.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能提供了极大的灵活性，减少了 YAML 管道中的重复代码，并实现了管道的标准化，这有助于减少出错的几率。
- en: 'More complex configurations can also include having all templates in a separate
    repository, where another team is responsible for putting together these building
    blocks to help the teams in charge of CI/CD pipelines, as shown in the following
    screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的配置还可以包括将所有模板放在一个单独的存储库中，由另一个团队负责将这些构建块整合在一起，帮助负责 CI/CD 管道的团队，正如以下截图所示：
- en: '![Figure 4.25 – Template reference from another repository](img/B18875_04_25..jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.25 – 来自另一个存储库的模板引用](img/B18875_04_25..jpg)'
- en: Figure 4.25 – Template reference from another repository
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.25 – 来自另一个存储库的模板引用
- en: Let’s look now at how we can use template expressions next.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下如何使用模板表达式。
- en: YAML template expressions
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YAML 模板表达式
- en: '**Expressions** are a custom syntax capability in Azure Pipelines that allows
    you to dynamically resolve values during runtime. Think of this as control logic
    in the execution of your templates. There are too many expression types to cover
    in this chapter, but it is important to know that it is possible to do the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**表达式** 是 Azure Pipelines 中的一种自定义语法功能，允许你在运行时动态解析值。可以把它看作是模板执行中的控制逻辑。本章无法涵盖所有表达式类型，但了解以下几点是很重要的：'
- en: Evaluate literals and variables
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估字面量和变量
- en: Use built-in functions such as `coalesce`, `contains`, `eq`, `format`, and many
    others to evaluate logical conditions or transform values
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置函数，如 `coalesce`、`contains`、`eq`、`format` 等，来评估逻辑条件或转换值
- en: Use built-in functions to evaluate the job status
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置函数来评估作业状态
- en: Use conditions to conditionally insert variable values or tasks
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用条件来有条件地插入变量值或任务
- en: Loop through parameters with the `each` keyword
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `each` 关键字遍历参数
- en: Evaluate dependencies on previous jobs or stages, such as status or output variables
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估对前置作业或阶段的依赖关系，如状态或输出变量。
- en: 'The following screenshot shows an example of how expressions can support performing
    the building and testing of an application using two different sets of tools (the
    `msbuild` or `dotnet` CLI tools) and picking the tool based on a parameter:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了如何使用两种不同工具集（`msbuild` 或 `dotnet` CLI 工具）来支持执行应用程序的构建和测试，并根据参数选择工具的示例：
- en: '![Figure 4.26 – Template expressions example](img/B18875_04_26..jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.26 – 模板表达式示例](img/B18875_04_26..jpg)'
- en: Figure 4.26 – Template expressions example
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – 模板表达式示例
- en: With expressions, you have full control of how to define your pipelines and
    dynamically execute steps based on progress, not just simply defining a static
    set of steps.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用表达式时，您可以完全控制如何定义管道，并根据进度动态执行步骤，而不仅仅是简单地定义一组静态步骤。
- en: Now that you have understood these complex configurations, let’s talk about
    the advantages and limitations of YAML-based pipelines.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经理解了这些复杂的配置，让我们来讨论基于 YAML 的管道的优缺点。
- en: Advantages and limitations of YAML-based pipelines
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于 YAML 的管道的优缺点
- en: 'First, let’s look at the benefits of using YAML-based pipelines:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看使用基于 YAML 的管道的好处：
- en: YAML pipelines are stored as code in your version control system, such as Azure
    Repos. This means they can be versioned, branched, and reviewed like any other
    code, providing better collaboration and traceability.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML 管道作为代码存储在您的版本控制系统中，如 Azure Repos。这意味着它们可以像其他代码一样进行版本控制、分支和审查，从而提供更好的协作和可追溯性。
- en: YAML pipelines allow you to introduce changes in a controlled way when implementing
    a branch strategy that isolates work from different team members. This ensures
    changes are tested without affecting other members of the team until completed.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML 管道允许在实施分支策略时以受控方式引入变更，分支策略将不同团队成员的工作隔离开来。这确保了变更在完成之前不会影响其他团队成员，从而进行充分测试。
- en: YAML pipelines make reproducing the build and release process consistently across
    different environments easy. This helps reduce configuration drift and ensures
    consistent results.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML 管道使得在不同环境中一致地重现构建和发布过程变得容易。这有助于减少配置漂移，并确保一致的结果。
- en: You can control your build and release processes. You can define the steps,
    dependencies, and conditions, enabling you to customize pipelines to meet your
    specific needs.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以控制构建和发布过程。您可以定义步骤、依赖关系和条件，使您能够根据特定需求定制管道。
- en: 'Despite these benefits, using these pipelines may have drawbacks such as the
    following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些好处，使用这些管道可能会有以下缺点：
- en: YAML-based pipelines require knowledge of the YAML language and Azure Pipelines
    syntax, which can be a learning curve for everyone unfamiliar with Azure Pipelines
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 YAML 的管道需要掌握 YAML 语言和 Azure Pipelines 语法，对于不熟悉 Azure Pipelines 的人来说，这可能是一个学习曲线。
- en: The YAML-based pipelines syntax only works in Azure Pipelines and cannot be
    migrated as is to a different CI/CD tool
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 YAML 的管道语法仅适用于 Azure Pipelines，无法直接迁移到其他 CI/CD 工具。
- en: YAML-based pipelines have a limit of 4 MB for the size of the extended YAML,
    which could make it difficult for extremely complex CI/CD processes to be defined
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 YAML 的管道对扩展的 YAML 文件大小有 4 MB 的限制，这可能使得极其复杂的 CI/CD 过程难以定义。
- en: Validating YAML pipelines in release stages beyond the initial developer environment
    might be difficult or impossible due to the inability to deploy to such environments
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于无法将其部署到此类环境中，在发布阶段验证 YAML 管道可能会变得困难或不可能。
- en: Now that you’re familiar with YAML-based pipelines, let’s wrap up this chapter.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经熟悉了基于 YAML 的管道，让我们结束本章内容。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter taught you how to build and release pipelines using YAML. Using
    this method is more powerful for developers than using the classic editor on the
    Azure DevOps portal. Developers can save YAML files in their Azure Repos, which
    will help them review each revision’s pipeline. With YAML-based pipelines, you
    can deliver more efficient, transparent, and developer-centric CI/CD processes.
    You also learned about complex scenarios and how to reduce YAML, reuse templates,
    and add dynamic behavior through expressions. Finally, you learned about the pros
    and cons of YAML-based pipelines.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讲解了如何使用YAML构建和发布管道。与在Azure DevOps门户上使用经典编辑器相比，这种方法对开发人员来说更具优势。开发人员可以将YAML文件保存在他们的Azure
    Repos中，这有助于他们查看每个版本的管道。使用基于YAML的管道，你可以提供更高效、透明和以开发者为中心的CI/CD流程。你还学习了复杂场景以及如何简化YAML、重用模板，并通过表达式添加动态行为。最后，你了解了基于YAML的管道的优缺点。
- en: In the next chapter, you will learn in depth about implementing a build and
    release pipeline using YAML and how to reuse build tasks using Node.js, NPM, .NET,
    and Docker to build a pipeline.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将深入学习如何使用YAML实现构建和发布管道，以及如何使用Node.js、NPM、.NET和Docker重用构建任务来构建管道。
- en: Part 2:Azure Pipelines in Action
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2部分：Azure Pipelines的实际应用
- en: Now that we have learned the basics, it’s time to learn how to use our pipelines
    for build and deployment purposes, from applications to automated provisioning
    and configuration of infrastructure, including the testing and security tools
    involved in these processes.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了基础知识，是时候学习如何使用我们的管道进行构建和部署工作，从应用程序到基础设施的自动化配置和管理，包括这些过程中涉及的测试和安全工具。
- en: 'This part has the following chapters:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 5*](B18875_05.xhtml#_idTextAnchor063), *Implementing the Build Pipeline
    Using Deployment Tasks*'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B18875_05.xhtml#_idTextAnchor063)，*使用部署任务实现构建管道*'
- en: '[*Chapter 6*](B18875_06.xhtml#_idTextAnchor070), *Integrating Testing, Security
    Tasks, and Other Tools*'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B18875_06.xhtml#_idTextAnchor070)，*集成测试、安全任务和其他工具*'
- en: '[*Chapter 7*](B18875_07.xhtml#_idTextAnchor086), *Monitoring Azure Pipelines*'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B18875_07.xhtml#_idTextAnchor086)，*监控Azure Pipelines*'
- en: '[*Chapter 8*](B18875_08.xhtml#_idTextAnchor103), *Provisioning Infrastructure
    Using Infrastructure as Code*'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B18875_08.xhtml#_idTextAnchor103)，*使用基础设施即代码（Infrastructure as Code）进行基础设施配置*'
