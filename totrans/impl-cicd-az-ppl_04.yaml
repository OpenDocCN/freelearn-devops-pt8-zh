- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extending Advanced Azure Pipelines Using YAML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created a build pipeline in the previous chapter by creating jobs, tasks,
    and triggers. This chapter will teach you how to customize the Azure pipeline
    using YAML, such as by creating condition statements with variable groups when
    setting some complex conditions. It also helps to create a flexible pipeline rather
    than the classic online version. For instance, YAML can do that when you need
    to deploy mobile applications to both the Google Play Console and the App Store
    connect simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned about creating a build and
    release pipeline using YAML. You will also have learned how to clone, export,
    and import YAML from the classic editor in the Azure DevOps portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a build pipeline using YAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a release pipeline using YAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning, exporting, and importing a YAML pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex YAML configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advantages and limitations of YAML-based pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by creating a pipeline using the YAML syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a build pipeline using YAML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to build a pipeline using YAML. You will
    also learn how to view YAML on the Azure DevOps portal and save the YAML file
    in Azure Repos. To create a build pipeline using YAML, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in via the Azure DevOps portal, please select your organization
    and then navigate to the **Pipelines** page. Click on **New pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.1 – New pipeline](img/B18875_04_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – New pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Azure Repos Git**, which is a source code repository for the demo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Azure Repos Git](img/B18875_04_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Azure Repos Git
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **PacktAzureDevOps** repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Select a repository](img/B18875_04_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Select a repository
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have existing YAML, you will have to select **Existing Azure Pipelines
    YAML file**. However, as we are creating a new one here, we will click on **Starter
    pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Selecting a starter pipeline](img/B18875_04_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Selecting a starter pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Save**, and you can review a new pipeline in YAML format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Save pipeline YAML](img/B18875_04_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Save pipeline YAML
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter a commit message that helps you remember what you did in the file and
    select the **Commit directly to the main branch** option. This option will save
    your file in the main branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Commit YAML to Azure Repos Git](img/B18875_04_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Commit YAML to Azure Repos Git
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to save your file in a new branch, then select **Create a
    new branch for this commit**. Click on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you click **Save**, you will be taken back to the main dashboard result
    of the build pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – A build pipeline dashboard](img/B18875_04_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – A build pipeline dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Run pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Run a build pipeline](img/B18875_04_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Run a build pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you can see a summary of the build pipeline results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – A build pipeline result](img/B18875_04_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – A build pipeline result
  prefs: []
  type: TYPE_NORMAL
- en: 'You can edit the pipeline by clicking on the ellipses (**…**) next to the **Run
    new** button shown in the following screenshot and then **Edit pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Edit pipeline](img/B18875_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Edit pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now view the starter of the YAML file structure. Let’s look at the
    structure of the example YAML and describe each part:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **main** branch of Azure Repos keeps the YAML file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This is a repository name.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This is a YAML filename.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A build pipeline will run on any changes in the main branch.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A build pipeline will run on the Ubuntu operating system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A script task contains a single line.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A script task contains multiple lines.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These components are shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.11 – YAML file structure](img/B18875_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – YAML file structure
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the result after running the pipeline based on the YAML file in
    the previous screenshot by clicking on a job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Display job result details](img/B18875_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – Display job result details
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Run a one-line script**, which will display the **Hello, world!**
    Text. This is an example of when you would like to display the message inside
    the task of the Azure pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Job steps with results](img/B18875_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Job steps with results
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to create a simple build pipeline using a YAML file for this
    section. Azure Repos keeps the YAML file, and you can view its history with the
    help of Git. In the next section, you will learn how to create a release pipeline
    using a YAML file that contains stages, jobs, and tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a release pipeline using YAML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will teach you how to create a release pipeline using YAML. You
    will also learn how to create stages, jobs, and tasks in YAML format. To do this,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the existing pipeline by clicking on the ellipses (**…**) next to it and
    then click on **Edit pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Editing an existing pipeline](img/B18875_04_14..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Editing an existing pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace all contents of the existing `azure-pipelines.yml` file, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Advanced pipeline with two stages](img/B18875_04_15..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Advanced pipeline with two stages
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two stages, as shown in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: The first stage will display `Build` `stage job`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second stage will display `Release stage`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This scenario displays build and release stages suitable for building the application
    (the `Build` stage) and deploying the application (the `Release` stage). It is
    easy to find errors or issues because if the build stage fails, it will not continue
    to run the release stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can validate the syntax of the YAML file by clicking on **…** next to **Save**
    and clicking **Validate**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Validate the YAML file](img/B18875_04_16..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – Validate the YAML file
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following message if the YAML file is valid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Valid YAML file](img/B18875_04_17..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – Valid YAML file
  prefs: []
  type: TYPE_NORMAL
- en: 'If the YAML file is invalid, you will see the following error message explaining
    which line has a problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Invalid YAML file](img/B18875_04_18..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – Invalid YAML file
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Save** | **Run pipeline**. You can see the result of a pipeline contains
    two stages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Stage details](img/B18875_04_19..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – Stage details
  prefs: []
  type: TYPE_NORMAL
- en: 'You can rerun a specific stage by expanding it and clicking on **Rerun stage**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Rerun stage](img/B18875_04_20..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – Rerun stage
  prefs: []
  type: TYPE_NORMAL
- en: You have learned how to create a release pipeline with two stages containing
    a job. You have also learned about the benefit of using stages because you can
    rerun the stage you have a problem with and don’t need to rerun the whole pipeline.
    The following section will teach you how to clone, export, and import YAML to
    create a new pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning, exporting, and importing a YAML pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will teach you how to clone, export, and import a YAML pipeline
    from the Azure DevOps portal. These actions will help you save time when you need
    to duplicate the same template and adjust it. If you need to make a new Azure
    pipeline, you can do so by cloning it from an existing one. Let’s look at the
    steps that are to be followed to perform these tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clone**: You can clone a pipeline using copy and paste, which is the easy,
    fast way to clone a pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Export and import**: The following steps show you can export an entire YAML
    file from a pipeline:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can export a YAML pipeline by clicking on **Edit**:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Edit pipeline](img/B18875_04_21..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Edit pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **…** | **Download full YAML** to download a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Download the complete YAML](img/B18875_04_22..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – Download the complete YAML
  prefs: []
  type: TYPE_NORMAL
- en: Open a downloaded file and copy and paste it into the new pipeline you created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the section, you learned how easy it is to download, copy, and paste a YAML
    file into the new pipeline. Now let’s look at some advantages and drawbacks of
    using YAML-based pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Complex YAML configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The YAML syntax supports several complex configurations that allow for the modularization
    and reuse of YAML files. Some examples of these are template reuse and the implementation
    of template expressions. We’ll explore how these features work in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: YAML template reuse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with large projects and several applications being developed by
    the same members of a team, it is helpful to define common templates to reuse
    instead of writing everything from scratch for the CI/CD needs of every application.
    For this purpose, Azure Pipelines supports making references to templates to reuse
    steps, jobs, and stages. This is particularly helpful in reducing the duplication
    of YAML because all applications or deployment processes are the same within the
    project. It is also possible to include parameters in the templates, to pass values
    that can be used in the referenced template to customize the behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the following scenario where an Azure pipeline builds the same
    application twice with two different build configurations in the .NET language.
    The file shown in the following screenshot defines one parameter, `buildConfiguration`,
    and three steps to perform the installation of the NuGet tool (`NuGetToolInstaller@1`),
    a NuGet restore of dependencies (`NuGetCommand@2`), and building the solution
    with the VS build utility (`VSBuild@1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.23 – dotnet-build-steps template with parameters](img/B18875_04_23..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – dotnet-build-steps template with parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see in the following example how the same `dotnet-build-steps.yml`
    file can now be used to build the same application in two different agents, `linux-latest`
    and `windows-latest`, with the same exact steps and having the possibility to
    add other tasks before and after:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24 – Azure pipeline with template references](img/B18875_04_24..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 – Azure pipeline with template references
  prefs: []
  type: TYPE_NORMAL
- en: This feature allows for great flexibility, reducing duplicate code in your YAML
    pipelines, and standardization across pipelines, which helps reduce the chances
    of errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'More complex configurations can also include having all templates in a separate
    repository, where another team is responsible for putting together these building
    blocks to help the teams in charge of CI/CD pipelines, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.25 – Template reference from another repository](img/B18875_04_25..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – Template reference from another repository
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look now at how we can use template expressions next.
  prefs: []
  type: TYPE_NORMAL
- en: YAML template expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Expressions** are a custom syntax capability in Azure Pipelines that allows
    you to dynamically resolve values during runtime. Think of this as control logic
    in the execution of your templates. There are too many expression types to cover
    in this chapter, but it is important to know that it is possible to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate literals and variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use built-in functions such as `coalesce`, `contains`, `eq`, `format`, and many
    others to evaluate logical conditions or transform values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use built-in functions to evaluate the job status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use conditions to conditionally insert variable values or tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loop through parameters with the `each` keyword
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluate dependencies on previous jobs or stages, such as status or output variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of how expressions can support performing
    the building and testing of an application using two different sets of tools (the
    `msbuild` or `dotnet` CLI tools) and picking the tool based on a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.26 – Template expressions example](img/B18875_04_26..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 – Template expressions example
  prefs: []
  type: TYPE_NORMAL
- en: With expressions, you have full control of how to define your pipelines and
    dynamically execute steps based on progress, not just simply defining a static
    set of steps.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have understood these complex configurations, let’s talk about
    the advantages and limitations of YAML-based pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages and limitations of YAML-based pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let’s look at the benefits of using YAML-based pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: YAML pipelines are stored as code in your version control system, such as Azure
    Repos. This means they can be versioned, branched, and reviewed like any other
    code, providing better collaboration and traceability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YAML pipelines allow you to introduce changes in a controlled way when implementing
    a branch strategy that isolates work from different team members. This ensures
    changes are tested without affecting other members of the team until completed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YAML pipelines make reproducing the build and release process consistently across
    different environments easy. This helps reduce configuration drift and ensures
    consistent results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can control your build and release processes. You can define the steps,
    dependencies, and conditions, enabling you to customize pipelines to meet your
    specific needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Despite these benefits, using these pipelines may have drawbacks such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: YAML-based pipelines require knowledge of the YAML language and Azure Pipelines
    syntax, which can be a learning curve for everyone unfamiliar with Azure Pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The YAML-based pipelines syntax only works in Azure Pipelines and cannot be
    migrated as is to a different CI/CD tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YAML-based pipelines have a limit of 4 MB for the size of the extended YAML,
    which could make it difficult for extremely complex CI/CD processes to be defined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating YAML pipelines in release stages beyond the initial developer environment
    might be difficult or impossible due to the inability to deploy to such environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you’re familiar with YAML-based pipelines, let’s wrap up this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter taught you how to build and release pipelines using YAML. Using
    this method is more powerful for developers than using the classic editor on the
    Azure DevOps portal. Developers can save YAML files in their Azure Repos, which
    will help them review each revision’s pipeline. With YAML-based pipelines, you
    can deliver more efficient, transparent, and developer-centric CI/CD processes.
    You also learned about complex scenarios and how to reduce YAML, reuse templates,
    and add dynamic behavior through expressions. Finally, you learned about the pros
    and cons of YAML-based pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn in depth about implementing a build and
    release pipeline using YAML and how to reuse build tasks using Node.js, NPM, .NET,
    and Docker to build a pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Part 2:Azure Pipelines in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned the basics, it’s time to learn how to use our pipelines
    for build and deployment purposes, from applications to automated provisioning
    and configuration of infrastructure, including the testing and security tools
    involved in these processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18875_05.xhtml#_idTextAnchor063), *Implementing the Build Pipeline
    Using Deployment Tasks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18875_06.xhtml#_idTextAnchor070), *Integrating Testing, Security
    Tasks, and Other Tools*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18875_07.xhtml#_idTextAnchor086), *Monitoring Azure Pipelines*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18875_08.xhtml#_idTextAnchor103), *Provisioning Infrastructure
    Using Infrastructure as Code*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
