- en: Managing Authentication Protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will provide you with an overview about the important authentication
    protocols you need to know in order to handle your configurations and projects
    in that field.
  prefs: []
  type: TYPE_NORMAL
- en: 'We see a lot of confusion in the usage of authentication protocols in our projects.
    It''s very important to understand the different protocols, that you can discuss
    with application providers about the correct implementation tasks and requirements.
    We see very often that a lot of time is used for discussing authentication methods
    and solutions. It''s clearly impossible to put all the material about the different
    authentication methods in only one chapter, as that would fill a complete book
    in the real world. We decided to provide you with essential summaries with extensive
    and working external examples. We will deploy many of the different authentication
    methods in the labs of this book. You will find specific labs to adapt your knowledge
    of technical configurations in the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](468509fa-856c-411d-abdb-e9a39c266750.xhtml), *Deploying* *Solutions
    on Azure AD and ADFS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 8](efbe1917-c755-4449-b29e-fa4a21e819fd.xhtml), *Using the Azure AD
    App Proxy and the Web Application Proxy*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 9](0cb2c20e-ca96-41ce-b555-24f63e63b9bf.xhtml), *Deploying additional
    applications on Azure AD*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 10](6b29475f-7917-49bf-91d4-3024835d0278.xhtml), *Exploring Azure
    AD identity services*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The focus of this chapter will be to get you acquainted with some experiences
    and decision paths that can assist you with authentication protocols. We will
    divide the chapter into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft identity platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common token standards in a federated world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security Assertion Markup Language** (**SAML**) 2.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WS-Federation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenID Connect** (**OIDC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass-through authentication and seamless **single sign-on** (**SSO**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-factor authentication** (**MFA**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start working through this authentication reference to kick off your journey.
  prefs: []
  type: TYPE_NORMAL
- en: We highly recommend that you work through all the references in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with an overview of the Microsoft identity platform.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft identity platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft provides an identity platform with two endpoints called V1.0 and
    V2.0 with two sets of client libraries to work with these endpoints. The following
    libraries are used: Azure **AD Authentication Library** (**ADAL**) SDK and the
    **Microsoft Authentication Library** (**MSAL**). In the Azure AD portal, we will
    find how to include applications built with ADAL or MSAL over the app registrations
    (preview), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4da5681-7ca3-42fe-979d-9349eacd13c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft identity platform overview
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list describes the main use cases of the two endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: The V1.0 endpoint allows only work and school accounts to sign in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The V2.0 endpoint allows work and school accounts from Azure AD and **Microsoft
    Accounts** (**MSA**) to sign in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The v2.0 endpoint does not support SAML or WS-Federation—only OIDC and OAuth
    2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The v2.0 endpoint doesn't support the SAML assertion grant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both endpoints accept sign-ins from guest users for single-tenant or multi-tenant
    applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have an overview on the available endpoints, we will jump into the
    token formats.
  prefs: []
  type: TYPE_NORMAL
- en: Common token standards in a federated world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a digital identity is transferred across a network, it's only a collection
    of bytes. It's common to refer to a set of bytes containing identity information
    as a security token or just a token. In a claims-based world, a token contains
    one or more claims, each of which carries some piece of information about the
    user it identifies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, the tokens come in different flavors, including the following token
    formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security Assertion Markup Language** (**SAML**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML-based
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Very descriptive metadata
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON Web Token** (**JWT**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easily readable by humans
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller token size
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simple Web Token** (**SWT**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form-encoded attribute/value pairs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not very common
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kerberos**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the following protocol specifications, we recommend a good basic knowledge
    of claims-based authentication. You can download the Microsoft claims-based authentication
    handbook to prepare yourself. Use the following download link to get the book: [https://www.microsoft.com/en-us/download/details.aspx?id=28362](https://www.microsoft.com/en-us/download/details.aspx?id=28362).
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss SAML 2.0 in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Security Assertion Markup Language (SAML) 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SAML is the foundation for much of the current identity federation activity.
    SAML 2.0 is preceded by SAML 1.0 and 1.1\. SAML 1.1 was released in 2003 and had
    just two scenarios (also known as profiles), and both were IdP-initiated. Shibboleth
    1.3 and Liberty Alliance—WS-FF 1.2 extended SAML 1.1, and SAML 2.0 was released
    by OASIS in 2005.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the SAML core principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Assertions** | **Protocols** | **Bindings** |'
  prefs: []
  type: TYPE_TB
- en: '| **Package of identity** **information** | Request/response based | Associates
    a message (protocol) with transport (communication'
  prefs: []
  type: TYPE_NORMAL
- en: mechanism) |
  prefs: []
  type: TYPE_NORMAL
- en: '| **Synonym token** | Defines the messaging requirements | Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP Redirect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP POST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP Artifact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SOAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **XML-based** | Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single logout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifact resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|  |'
  prefs: []
  type: TYPE_TB
- en: In the next section, we will talk about the key facts of the SAML 2.0 protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Key facts about SAML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SAML standard provides accurate messages for the transfer of requests and
    assertions (claims). SAML offers several options for the transfer of information,
    such as the use of SOAP. The SAML standard defines identity information as assertions.
    A large part of the standard flows into the definition of assertions and attribute
    profiles. A session timeout is not considered. When logging off, an attempt is
    made to reach a large circle of recipients. SAML 2.0 uses profiles, which describe
    how assertions, protocols, and bindings combine to form a federation scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a web SSO profile will be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication Request Protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP Redirect binding at IdP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP POST Binding at SP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are many different SSO profiles available that are defined in the specification:'
  prefs: []
  type: TYPE_NORMAL
- en: Web Browser SSO profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enhanced Client or Proxy** (**ECP**) profile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity provider discovery profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single logout profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name identifier management profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifact resolution profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assertion query/request profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name identifier mapping profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Shibboleth administrators, we highly recommend the following source: [https://bit.ly/2DnG5pQ](https://bit.ly/2DnG5pQ)[.](https://bit.ly/2DnG5pQ)
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also SAML attribute profiles, such as the following, available for
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic attribute profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X.500/LDAP attribute profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UUID attribute profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DCE PAC attribute profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XACML attribute profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To give an example, we use the typical SAML web SSO profile in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99f4c4a4-ba4c-489f-a5bc-45cb738629ac.png)'
  prefs: []
  type: TYPE_IMG
- en: SAML web SSO profile
  prefs: []
  type: TYPE_NORMAL
- en: 'The following description explains the different steps in the authentication
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: Trust is established between the **Web Application** and the **SAML Issuer**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user browses to the **Web Application**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Web Application** detects that the user is not authenticated and redirects
    him to the ****SAML Issuer****
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user automatically browses to the **SAML Issuer**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user authenticates to the **SAML Issuer**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **SAML Issuer** builds the token and passes it back to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user POSTs the token to the **Web Application**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We highly recommend you work through the following Azure AD SAML 2.0 article:[ https://docs.microsoft.com/en-us/azure/active-directory/develop/single-sign-on-saml-protocol](https://docs.microsoft.com/en-us/azure/active-directory/develop/single-sign-on-saml-protocol)[.](https://bit.ly/2VYK2Z8)
  prefs: []
  type: TYPE_NORMAL
- en: 'For debugging SAML-based SSO, work through the following articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://social.technet.microsoft.com/wiki/contents/articles/31247.azure-active-directory-how-to-debug-saml-based-single-sign-on-to-applications.aspx](https://bit.ly/2MpiDLK) -
    How to debug SAML-based single sign-on to applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-v1-debug-saml-sso-issues](https://bit.ly/2U45UR8) - Debug
    SAML-based single sign-on to applications in Azure Active Directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In conclusion, we can say that SAML 2.0, which was released in 2005 by OASIS,
    is now commonly used in web sign-in scenarios, particularly for web applications
    with an XML token format.
  prefs: []
  type: TYPE_NORMAL
- en: WS-Federation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WS-Federation was developed by an industry consortium and was released in December 2006,
    with Microsoft being a key contributor. WS-Federation is also part of a larger framework,
    WS-Security, and builds on the work of WS-Trust from February 2005, defining the
    following two key principles:'
  prefs: []
  type: TYPE_NORMAL
- en: The protocol for requesting/receiving security tokens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How trust should be brokered between parties using an **Security Token Service**
    (**STS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It also defines two profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: Active Requestor Profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive Requestor Profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WS-* Federation Suite consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: WS-Trust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WS-Federation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WS-Policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will describe the key elements of the WS-Federation
    specification.
  prefs: []
  type: TYPE_NORMAL
- en: Key facts about WS-Federation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In **WS-Federation**, in contrast to SAML, the token can be anything. Basically
    no defined messages are used. On the other hand, a suggestion is made for the
    use of a web service. The WS-Federation standard uses SOAP and makes the tunneling
    of SOAP available via the Web browser. The token for this standard is not subject
    to any concrete specification. WS-Federation can use a security token that is
    a SAML assertion. This means that WS-Federation can also use components from the
    SAML standard. As with SAML, there is no session timeout and an application must
    explicitly register to receive the information about a logoff.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also some relationships regarding SAML-P with the WS-Federation and
    the passive requestor profile, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to **SAML WebSSO** profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following parts are incompatible:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different request and response messages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No IdP-initiated use case
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No Assertion Query profile
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the following source to gather more information about the topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-federation-metadata](https://bit.ly/2AOnwcD)'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following sample, you can test and analyze WS-Federation with Azure
    AD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/Azure-Samples/active-directory-dotnet-webapp-wsfederation](https://bit.ly/2TYiyRu)'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusively, we can say that WS-Federation, which was established in 2006,
    is now commonly used for web sign-in scenarios, and .NET web applications. The
    token format is agnostic, like SAML, JWT, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In simple words, authentication is the act of proving who you are, whereas authorization
    is the act of determining what you can do. OAuth 2.0 is about delegated authorization
    and not about authentication. It is not a protocol, it's an authorization framework
    defined in the RFC 6749, *The OAuth 2.0 Authorization Framework*. This can be
    confusing because there are many cases in which you use OAuth 2.0 to log in to
    a client web application.
  prefs: []
  type: TYPE_NORMAL
- en: The authentication process must end by figuring out and validating the identity
    of the end user, but OAuth doesn't do that. OAuth provides time-based tokens,
    which can be used to access a resource on behalf of the end user without providing
    any identity information about the end user.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth 2.0 is the existing standard for API security and is a major breakthrough
    in identity delegation.
  prefs: []
  type: TYPE_NORMAL
- en: Key facts about OAuth 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the principal facts concerning OAuth 2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: It is an internet protocol/specification for creating and managing application identity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a cross-platform mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has delegated authorization to APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its main purpose is to get the client an access token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is not an authentication protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is preceded by OAuth 1.0 and OAuth **Web Resource Authorization Profiles** (**WRAP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is an internet standard used by Facebook, Google, and Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The OAuth framework differs between two client (application) types when accessing
    a service on behalf of a user. The two types of application can be described as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public**: Runs locally on a device. Not trusted to hold a secret.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private**: Runs behind firewalls. Can be trusted with secrets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram gives an example of the roles in the OAuth framework
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a1f0bb5-0be6-42fd-9efe-0720c511d6ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Roles in the OAuth framework
  prefs: []
  type: TYPE_NORMAL
- en: 'The provided list of roles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization Server**: Issues the access token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Server**: Verifies and accepts the access token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client**: The application that requests the access token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User (Resource Owner)**: Is the end user, who grants the permission to access
    the resource server with an access token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, you will find an example consent, which is used
    with Cloud App Security that requires access to Salesforce:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/323e10ca-4f77-44a6-8ef5-7ee6d43e8455.png)'
  prefs: []
  type: TYPE_IMG
- en: Typical OAuth 2.0 consent
  prefs: []
  type: TYPE_NORMAL
- en: You will find more information about the Azure AD consent framework at: [https://docs.microsoft.com/en-us/azure/active-directory/develop/consent-framework](https://docs.microsoft.com/en-us/azure/active-directory/develop/consent-framework).
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to understand the flows in OAuth 2.0 that define the process
    for obtaining an access token.
  prefs: []
  type: TYPE_NORMAL
- en: Main OAuth 2.0 flow facts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four flows defined in the specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization code** **flow**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-time code issued to client
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Client redeems code for access token
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Access and ID token
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Used for server-side apps
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization code flow with proof key for code exchange** (**PKCE**) for native/mobile
    applications'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client credentials** **flow**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticates the client, not the user
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Client receives an access token for itself
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not support refresh tokens
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommended for client applications with no end user (machine-to-machine communication)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource owner password** **flow**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client collects username/password from user
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Exchange username/password for access token
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Used if you control the client application and the resource
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically used in online services, where the online service client app talks
    with the own service
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implicit** **flow**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client is untrusted (public)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No refresh token issued
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommended to use for **Single Page Applications** (**SPA**)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the following resources to deploy several OAuth 2.0 examples with
    your on-premise ADFS infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/development/enabling-oauth-confidential-clients-with-ad-fs](https://bit.ly/2S3gxqc)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/development/native-client-with-ad-fs](https://bit.ly/2HnAlAt)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Work through the following examples with Azure AD to get deeper into the different
    flow types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OAuth 2.0 implicit grant flow**: [https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-oauth2-implicit-grant-flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-oauth2-implicit-grant-flow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OAuth 2.0 auth code grant flow**: [https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-protocols-oauth-code](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-protocols-oauth-code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OAuth 2.0 On-Behalf-Of flow**: [https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-oauth2-on-behalf-of-flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-oauth2-on-behalf-of-flow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OAuth 2.0 client credentials flow**: [https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-oauth2-client-creds-grant-flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-oauth2-client-creds-grant-flow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next section provides you with information about the authorization code
    flow.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization code flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main concept of this flow is that the client gets an authorization code
    first and uses the code to redeem the access token. It's recommended for private
    clients (web apps or native mobile applications) that have the capability to spawn
    a web browser. In that case, private clients establish a secret with the OAuth
    server. The secret will be used to authenticate the client during the access token
    redemption.
  prefs: []
  type: TYPE_NORMAL
- en: The access tokens expire and need to be refreshed with refresh tokens, and each
    of them has their own lifetime and can be stored for a longer term. A refresh
    token can also be used to redeem a new access token later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows an example of the authorization code grant type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a14a60e-1151-4a1c-a298-f12bdcb68250.png)'
  prefs: []
  type: TYPE_IMG
- en: Authorization code grant type flow
  prefs: []
  type: TYPE_NORMAL
- en: 'The flow works in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: The **User** clicks the button to post this purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Client** redirects the user to OAuth server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **User** authenticates and grants consent
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The OAuth server redirects the **User** to the **Client** with the authorization
    code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Client** requests an access token from the **Authorization Server**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The OAuth server returns the access token to the **Client**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Client** uses the access token to authorize to the resource
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Client credential flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main concept of this flow is application authentication and not user authorization, where
    the application establishes a secret. The application authenticates with the secret
    and receives an access token. Users are not involved in this flow and the client
    can perform this flow out of band.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the client credential grant type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66508e4a-5bfb-4bb3-95c1-61e5c67e1ec3.png)'
  prefs: []
  type: TYPE_IMG
- en: Client credential grant flow
  prefs: []
  type: TYPE_NORMAL
- en: 'The flow runs in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: The **User** uses the client (through the address book app)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client authenticates to the OAuth server (**Azure AD**)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The OAuth server provides an access token to the client
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client calls resource (web service) with the access token in the header
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implicit grant flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While acquiring an access token, this flow is mostly used by JavaScript clients
    running in the web browser. Also, important to note is that there is no authentication
    requirement for the JavaScript client. The difference between this and the authorization
    code flow is that the access token will be received in the grant request.
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows an example of the implicit grant type.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1dfc699-ea9f-4422-b391-043cfeafd691.png)'
  prefs: []
  type: TYPE_IMG
- en: Implicit grant flow
  prefs: []
  type: TYPE_NORMAL
- en: 'The flow in the main points runs as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Client** **Application** opens a browser to send the user to the **Authorization
    Server**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The authorization prompt appears to the user and approves the application request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A redirect for the user goes back to the application with an **Access Token**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resource owner password credentials flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main concept in this flow is that the resource owner must trust the client
    application. This means that the resource owner has to give its credentials directly
    to the client application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the resource owner password credentials grant type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a6eb768-6001-463f-a4b2-3e1b24a13740.png)'
  prefs: []
  type: TYPE_IMG
- en: Resource owner password credential flow
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, we can say that the specification of OAuth 2.0, which was published in
    October 2012, is now commonly used in rich client and modern application scenarios
    and with **RESTful Web API** access. The token format is agnostic but **JWT**
    is primarily used.
  prefs: []
  type: TYPE_NORMAL
- en: OpenID Connect (OIDC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OIDC was established as a standard by its membership in February 2014\. OIDC provides
    a lightweight framework for identity interactions in a RESTful manner. The specification
    was developed under the OpenID Foundation and has its roots in OpenID; it was
    greatly affected by OAuth 2.0, because that specification was not intended for
    authentication. Microsoft was also a co-author of the OIDC specification.
  prefs: []
  type: TYPE_NORMAL
- en: Key facts about OIDC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It defines the following identity layers on top of OAuth 2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It uses two OAuth 2.0 flows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorization code flow
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implicit flow
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds an ID token to OAuth 2.0 exchange
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds the ability to request claims using an OAuth 2.0 access token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following roles are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenID Connect Provider** (**OP**): Authorization server issues the ID token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relying Party**: Client application that requests the ID token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID token**: Issued by the OP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Claim**: Information about the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows the OpenID Connect flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d1fdfdf-c1ae-4063-86c0-c97ef28266b7.png)'
  prefs: []
  type: TYPE_IMG
- en: OpenID Connect flow
  prefs: []
  type: TYPE_NORMAL
- en: 'The flow runs with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: A client registers with the OP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user browses to the web app and initiates login
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web app redirects the user to the OP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user authenticates to the OP and gives consent for the web app to use his
    identity
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OP builds the authorization code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OP redirects the user back to the web app with the authorization code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web app sends the authorization code to OP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OP creates the ID token and access token and sends back to the web app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web app verifies the ID token
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The specification also uses a UserInfo EndPoint with the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Returns additional claims about a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST-based endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticates with access token received from OPx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Response returned in JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about OIDC and Azure AD is available at: [https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc).
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the following sample applications with an on-premise ADFS infrastucture:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enabling ****OIDC**: [https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/development/enabling-openid-connect-with-ad-fs](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/development/enabling-openid-connect-with-ad-fs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single logout for** **OIDC**:[ https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/development/ad-fs-logout-openid-connect](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/development/ad-fs-logout-openid-connect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the examples with Azure AD to dive further into the OIDC implementation.
    These are covered here: [https://docs.microsoft.com/en-us/azure/active-directory/develop/sample-v2-code](https://docs.microsoft.com/en-us/azure/active-directory/develop/sample-v2-code)
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, we can say that the specification was released in February 2014,
    was co-authored by Microsoft, and is used for web sign-in when consent is needed.
    The token format is JWT.
  prefs: []
  type: TYPE_NORMAL
- en: Pass-through authentication and seamless SSO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure AD pass-through authentication provides an alternative to the Azure AD
    password hash synchronization and a local ADFS infrastructure if all claims-based
    applications are connected to the Azure AD. Microsoft offers with this service
    the capabilities to reduce the on-premise complexity and operations of ADFS. Furthermore,
    in combination with the password hash synchronization, customers get a redundant
    and flexible authentication environment. You are also able to include password
    protection features for your local Active Directory.
  prefs: []
  type: TYPE_NORMAL
- en: Pass-through authentication supports the Azure AD conditional access policies,
    Azure MFA, and the blocking of legacy authentications to secure your organization's
    or customer environment. The communication of the on-premise agent and the Azure
    AD service is protected with certificate authentication. The feature can support
    multi forest infrastructures if forest trusts are enabled and the UPN-suffix routing
    is configured correctly. In combination with seamless SSO, users get a native
    SSO experience and are automatically signed into on-premise and cloud-based applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following components are involved in the user sign-in process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure AD STS**: **Stateless security token service** (**STS**) for processing
    sign-in requests and security token issuance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Service Bus**: Communication component between cloud and on-premise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure AD Connect Authentication Agent**: Listener and responder to password
    validation requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure SQL Database**: Storage for tenant associated authentication agents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Directory**: Store for local user accounts and passwords'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at the following diagram to understand the functionality accessing
    the Outlook web app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b67aa456-062a-478f-b62f-516ab62a6463.png)'
  prefs: []
  type: TYPE_IMG
- en: Path-through authentication flow
  prefs: []
  type: TYPE_NORMAL
- en: Deep dive information about the service can be found at the following source: [https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-pta-security-deep-dive](https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-pta-security-deep-dive)
  prefs: []
  type: TYPE_NORMAL
- en: 'The flow runs with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: User tries to access Outlook web app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user is not signed in, he will be redirected to the Azure AD sign-in
    page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User enters his username, and selects Next
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User enters his password, and selects Sign In
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Azure AD receives the sign in request and puts the username/password encrypted
    with the public key of the authentication agents in a queue
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The on-premise authentication agent retrieves the encrypted credentials from
    the queue
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The agent retrieves requests over a pre-established and persistent connection.
  prefs: []
  type: TYPE_NORMAL
- en: The agent decrypts the password with his private key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The agent validates the username and credential against the local Active Directory,
    like ADFS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Domain Controller evaluates the request and responds with the result the
    agent
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The agent responds back to Azure AD
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure AD validates the answer—the user will be signed in or Azure MFA will be
    executed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all works fine, the user is signed in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To choose the best option for your hybrid authentication solution, you can use
    the following source to help you with your decision [https://docs.microsoft.com/en-us/azure/security/azure-ad-choose-authn](https://docs.microsoft.com/en-us/azure/security/azure-ad-choose-authn).
  prefs: []
  type: TYPE_NORMAL
- en: Multi-factor authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Protecting sensitive information or application access with additional authentication
    is an important task, not just in the on-premise world. In particular, it needs
    to be extended to every sensitive cloud service used. There are a lot of variations
    for providing this level of security and additional authentication, such as certificates,
    smart cards, or biometric options. For example, smart cards depend on special
    hardware used to read the smart card and cannot be used in every scenario without
    limiting the access to a special device or hardware. The following table gives
    you an overview of different attacks and how they can be mitigated with a well-designed
    and implemented security solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Attacker** | **Possible security solution** |'
  prefs: []
  type: TYPE_TB
- en: '| Password brute force | Strong password policies |'
  prefs: []
  type: TYPE_TB
- en: '| Shoulder surfing Key or screen logging | One-time password solution |'
  prefs: []
  type: TYPE_TB
- en: '| Phishing or pharming | Server authentication (HTTPS) |'
  prefs: []
  type: TYPE_TB
- en: '| Man-in-the-Middle Whaling (Social engineering) | Two-factor authentication
    Certificate or one-time password solution |'
  prefs: []
  type: TYPE_TB
- en: '| Certificate authority corruption Cross Channel Attacks (CSRF) | Transaction
    signature and verification Non repudiation |'
  prefs: []
  type: TYPE_TB
- en: '| Man-in-the-Browser Key loggers | Secure PIN entry Secure messaging'
  prefs: []
  type: TYPE_NORMAL
- en: Browser (read only)
  prefs: []
  type: TYPE_NORMAL
- en: Push button (token)
  prefs: []
  type: TYPE_NORMAL
- en: Three-factor authentication |
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft provides the Azure MFA functionality to address exactly the attacks
    described in the previous table. With a one-time password solution, you can build
    a very capable security solution to access information or applications from devices
    that cannot use smart cards as the additional authentication method. Otherwise,
    for small or medium business organizations, a smart card deployment, including
    the appropriate management solution, will be too costly, and the Azure MFA solution
    can be a good alternative for reaching the expected higher security level.
  prefs: []
  type: TYPE_NORMAL
- en: Azure MFA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure MFA provides the security of a two-step verification. The user gets many
    options to verify his identity, like phone calls, text messages, the mobile app
    with notifications, and created codes. Also, the integration of OATH hardware
    tokens is in the actual preview. To roll out the feature, you can use the following
    sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/active-directory/authentication/tutorial-mfa-applications](https://bit.ly/2Mjdbdj)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/active-directory/authentication/howto-mfa-getstarted](https://bit.ly/2McMo1B)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure MFA includes the capabilities to integrate on-premise components with
    the following two agents:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Active Directory Federation Services** (**ADFS**) 2016 and higher'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network Policy Server** (**NPS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you need to integrate older versions of ADFS or third-party RADIUS servers,
    the only option is to deploy the on-premise Azure MFA server. With this integration
    there are some limitations, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: No synchronization of the registration information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of two registration and user portals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional MFA infrastructure to manage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will discuss the certificate authentication option.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure AD supports the use of certificate-based authentication. Devices can
    use a client certificate to connect. This feature eliminates the need to enter
    a username/password combination to access your mail and Microsoft applications
    on your mobile device. You can use the following two sources to gather more information
    on the specific platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android**: [https://docs.microsoft.com/en-us/azure/active-directory/authentication/active-directory-certificate-based-authentication-android](https://docs.microsoft.com/en-us/azure/active-directory/authentication/active-directory-certificate-based-authentication-android)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS**: [https://docs.microsoft.com/en-us/azure/active-directory/authentication/active-directory-certificate-based-authentication-ios](https://docs.microsoft.com/en-us/azure/active-directory/authentication/active-directory-certificate-based-authentication-ios)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, you can use the device authentication as an alternative method. We
    describe the device authentication in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Device authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The other method that Microsoft includes in the multi-factor solution framework
    is the device authentication. The device authentication can be used with the following
    registration or join method of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure AD registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workplace Join
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure AD Join
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid Azure AD Join
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will find more information about all the different options at the following
    source: [https://docs.microsoft.com/en-us/azure/active-directory/devices/overview](https://docs.microsoft.com/en-us/azure/active-directory/devices/overview).
    You can use these states for conditional access in your on-premise ADFS or your
    Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: To deploy on-premise conditional access with your ADFS infrastructure, you can
    use the following source: [https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/configure-device-based-conditional-access-on-premises](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/configure-device-based-conditional-access-on-premises).
    For cloud environments, we recommend the following source to start your journey
    into conditional access: [https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/overview](https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/overview)[.](https://bit.ly/2W2nV4h)
  prefs: []
  type: TYPE_NORMAL
- en: Biometric authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Hello is another authentication solution that uses biometric user information
    like the fingerprint, face, or iris recognition. The functionality is available
    for personal or enterprise-grade security to provide authentication. You also
    can use this feature against your on-premise ADFS and your Azure AD. Use the following
    source to plan and deploy **Windows Hello** in your organization: [https://docs.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/hello-planning-guide](https://docs.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/hello-planning-guide)[.](https://bit.ly/2ELPBoL)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working through the chapter and the given references, you have worked through
    many aspects and practical examples of the most important authentication protocols.
    We have tried to provide you with a very crisp reference card with much valid
    additional information about this topic. You should be able to use WS-Federation,
    SAML, OAuth 2.0, and OIDC in your design or configuration work for customers or
    your own organization. As already mentioned at the beginning of the chapter, we
    will use the knowledge in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next [Chapter 7](468509fa-856c-411d-abdb-e9a39c266750.xhtml), *Deploying
    Solutions on Azure AD and ADFS*, we start to work on it directly!
  prefs: []
  type: TYPE_NORMAL
