- en: Using Azure Storage - Tables, Queues, Files, and Blobs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure 存储 - 表格、队列、文件和 Blob
- en: PaaS in Azure is not only about App Services or containers. This particular
    cloud offers much more, especially when talking about different options for storage,
    messaging solutions, or monitoring. With services such as Event Hub, Azure Storage,
    or Application Insights, we're given a complete set of cloud components that offer
    great flexibility and simplify developing complete, scalable, and easy-to-maintain
    applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 中的 PaaS 不仅仅是关于应用服务或容器。这个云平台提供了更多功能，尤其是在存储、消息传递解决方案或监控方面。通过 Event Hub、Azure
    存储或 Application Insights 等服务，我们得到了一个完整的云组件集，它们提供了极大的灵活性，并简化了开发完整、可扩展且易于维护的应用程序。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using Azure Storage solutions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 存储解决方案
- en: Storing structured data with Azure Storage Tables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 存储表格存储结构化数据
- en: Implementing fully managed file shares with Azure Storage Files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 Azure 存储文件的完全托管文件共享
- en: Using queues with Azure Storage Queues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 存储队列的队列
- en: Using Azure Storage Blobs for object storage
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 存储 Blob 进行对象存储
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To perform the exercises in this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行本章的练习，您需要以下内容：
- en: An Azure subscription
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Azure 订阅
- en: Visual Studio 2017
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2017
- en: Azure Storage Explorer, available at [https://azure.microsoft.com/en-us/features/storage-explorer/](https://azure.microsoft.com/en-us/features/storage-explorer/)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 存储资源管理器，网址：[https://azure.microsoft.com/en-us/features/storage-explorer/](https://azure.microsoft.com/en-us/features/storage-explorer/)
- en: Azure Storage Emulator, available at [https://azure.microsoft.com/en-us/downloads/](https://azure.microsoft.com/en-us/downloads/)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 存储模拟器，网址：[https://azure.microsoft.com/en-us/downloads/](https://azure.microsoft.com/en-us/downloads/)
- en: Using Azure Storage in a solution
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在解决方案中使用 Azure 存储
- en: Most applications cannot work without a storage solution. This can be any kind
    of database—relational, document, file, or graph. Most of them require some skills
    to be able to configure and start working with them. For now, we have covered
    one storage solution available in Azure, namely Azure Cosmos DB, which is a serverless
    database, where the only thing needed was to set a correct throughput value. Of
    course, Azure offers much more in the way of storage services, of which the most
    common is Azure Storage. It is a PaaS cloud component (though some define it as serverless,
    mostly because of a lack of servers) which can be used in four different ways.
    In this chapter, we will cover all of them, so you will be familiar with their
    capabilities and features.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序在没有存储解决方案的情况下无法工作。存储解决方案可以是任何类型的数据库——关系型、文档型、文件型或图形型。大多数情况下，它们都需要一些技能来配置并开始使用它们。目前，我们已经介绍了
    Azure 中的一种存储解决方案，即 Azure Cosmos DB，它是一个无服务器数据库，唯一需要做的就是设置正确的吞吐量值。当然，Azure 提供了更多存储服务，其中最常见的是
    Azure 存储。它是一个 PaaS 云组件（虽然有些人将其定义为无服务器，主要是因为没有服务器），可以通过四种不同的方式使用。在本章中，我们将覆盖所有这些方式，帮助您熟悉它们的功能和特点。
- en: Different Azure Storage services
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的 Azure 存储服务
- en: 'Azure Storage is consists of four different services:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 存储由四个不同的服务组成：
- en: Table Storage
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格存储
- en: Queue Storage
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 队列存储
- en: Blob Storage
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blob 存储
- en: Azure Files
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 文件
- en: They all serve different purposes and offer different capabilities and limits.
    While their names are self-explanatory, you will see that each is a completely
    different service, and though they can be used in connection with each other,
    they require a different set of skills to be able to do this efficiently, and
    you need to use best practices. Additionally, Azure Storage offers an additional
    service called disk storage, which is a feature used by virtual machines. Because
    of that, it will not be covered in this book. Nonetheless, you can find a link
    to documentation in the *Further reading *section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它们各自有不同的用途，提供不同的功能和限制。虽然它们的名称直观易懂，但您会发现每个服务都是完全不同的，虽然它们可以互相配合使用，但需要不同的技能才能高效地做到这一点，并且必须遵循最佳实践。此外，Azure
    存储还提供了一个额外的服务——磁盘存储，这是虚拟机使用的功能。由于这个原因，本书将不涉及此部分内容。不过，您可以在*进一步阅读*部分找到相关文档的链接。
- en: Different types of storage account
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同类型的存储账户
- en: 'Azure Storage offers three different types of storage account:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 存储提供三种不同类型的存储账户：
- en: '**General-purpose Standard**: Supporting tables, blobs, files, and queues,
    and three different types of blob: block blobs, page blobs, and append blobs'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用标准型**：支持表格、Blob、文件和队列，且支持三种不同类型的 Blob：块 Blob、页 Blob 和追加 Blob'
- en: '**General-purpose Premium**: Limited to blobs only, and supporting page blobs'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用高级**：仅限于块存储，支持页块存储'
- en: '**Blob storage with hot/cool access tiers**: Limited to blobs only and supporting
    block blobs and append blobs'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持热/冷访问层的 Blob 存储**：仅限于块存储，并支持块存储和追加块'
- en: 'You will learn more about different kinds of blob in the next sections. The
    question, for now, is: what is the difference between the standard and premium accounts—besides
    pricing of course? You can define them as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在接下来的章节中学习更多关于不同种类块存储的内容。目前的问题是：标准帐户和高级帐户之间的区别是什么——当然，除了定价之外？你可以这样定义它们：
- en: 'Standard: The most common choice with reasonable performance and support for
    all types of data. These accounts use magnetic disks for storage.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准：最常见的选择，具有合理的性能并支持所有类型的数据。这些帐户使用磁盘存储。
- en: Premium: Accounts with better performance, thanks to the use of SSD disks—recommended
    for VMs and when you require quick access to data stored on them.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级：性能更好的帐户，得益于使用 SSD 硬盘——推荐用于虚拟机以及当你需要快速访问存储在其中的数据时。
- en: 'If you would like to compare performance for both types of accounts, here is
    a comparison for 128 GB disks:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想比较两种帐户的性能，以下是 128 GB 磁盘的对比：
- en: Standard: 500 I/O operations / sec, throughput 50 MB / sec, €3,78 per month
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准：500 I/O 操作/秒，吞吐量 50 MB/秒，月费 €3,78
- en: Premium: 500 I/O operations / sec, throughput 100 MB / sec, €15,12 per month
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级：500 I/O 操作/秒，吞吐量 100 MB/秒，月费 €15,12
- en: So, as you can see, the Premium option offers roughly twice the throughput over Standard.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如你所见，高级选项的吞吐量大约是标准选项的两倍。
- en: Securing Azure Storage
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护 Azure 存储
- en: 'In general, there are two ways of securing access to your Storage Accounts:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，有两种方法可以保护对存储帐户的访问：
- en: Azure AD with RBAC
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure AD 与 RBAC
- en: SAS tokens
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SAS 令牌
- en: 'Additionally, blobs can be accessed publicly (of course, only if you decide
    to do so). Depending on your needs, one option or another may cover your requirements—this,
    of course, depends on the characteristics of your application. The following is
    the difference between those two methods of securing Azure Storage:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，块存储可以公开访问（当然，前提是你决定这么做）。根据你的需求，某个选项可能更符合你的要求——这当然取决于你的应用程序特点。以下是这两种保护 Azure
    存储的方法的区别：
- en: '**RBAC**: This method is used to secure management operations on your accounts.
    You can restrict access to specific features of a service to only a specific group
    defined in Azure AD. However, you are unable to use this method to secure a blob
    or a table (although you can do it indirectly by securing access to an SAS token).'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RBAC**：此方法用于保护对帐户的管理操作。你可以限制对服务特定功能的访问，仅限于 Azure AD 中定义的特定组。然而，你无法使用此方法保护块存储或表存储（尽管你可以通过保护对
    SAS 令牌的访问间接做到这一点）。'
- en: '**SAS tokens**:These are long strings, which store different parameters describing
    access to a resource. They specify a service type, permissions, and the lifetime
    of a token, or restrict access to an IP address.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SAS 令牌**：这些是长字符串，存储描述访问资源的不同参数。它们指定服务类型、权限和令牌的有效期，或限制对 IP 地址的访问。'
- en: 'Here is an example of an SAS token:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 SAS 令牌的示例：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, it restricts access to a `blob.txt`file stored as a blob in the`securecontainer` container.
    It defines parameters, such as service version (`sv`), expiry time (`se`), or
    the actual signature of a token (`sig`).In general, with SAS tokens, you are able
    to restrict access to either an account or a service (and thanks to that also,
    for example, to a range of entities in Table Storage).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它限制了对存储在 `securecontainer` 容器中的 `blob.txt` 文件的访问。它定义了诸如服务版本（`sv`）、过期时间（`se`）或令牌的实际签名（`sig`）等参数。一般来说，使用
    SAS 令牌，你可以限制对帐户或服务的访问（因此，也可以限制对表存储中一系列实体的访问）。
- en: Replication
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制
- en: 'When using a cloud, you have to expect that any service can be down at anytime.
    Although Azure Storage is considered one of the most durable services (because
    many services in Azure rely on it), it is possible that it will face an outage.
    To mitigate problems related to such failures, it offers four different kinds
    of replication:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用云服务时，你必须预期任何服务都可能随时宕机。尽管 Azure 存储被认为是最耐用的服务之一（因为许多 Azure 服务依赖于它），但它仍然可能会发生故障。为了缓解与此类故障相关的问题，它提供了四种不同的复制方式：
- en: '**Locally-redundant storage (LRS)**: Three copies of your data within the same
    data center'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地冗余存储 (LRS)**：在同一数据中心内有三份数据副本'
- en: '**Zone-redundant storage (ZRS)**: Three copies of your data within the same
    region'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域冗余存储 (ZRS)**：在同一区域内有三份数据副本'
- en: '**Geo-redundant storage (GRS)**: Three copies of your data within the same
    data center plus three copies in another region'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理冗余存储（GRS）**：在同一数据中心内存储三份数据，再加上在另一区域内存储三份数据'
- en: '**Read-access geo-redundant storage (RA-GRS)**: Three copies of your data within
    the same data center plus three copies in another region with the ability to read
    from that region'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取访问地理冗余存储（RA-GRS）**：在同一数据中心内存储三份数据，再加上在另一区域内存储三份数据，并且可以从该区域进行读取'
- en: When architecting an application using Azure Storage, you have to carefully
    design its availability requirements. Depending on your expectations, a different
    model may suit you better.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Azure Storage构建应用时，你必须仔细设计其可用性要求。根据你的期望，可能需要选择不同的模型。
- en: When using a model that replicates data to another data center (basically GRS
    and RA-GRS), take into account the cost of transferring data between different
    regions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用将数据复制到另一个数据中心的模型时（基本上是GRS和RA-GRS），需要考虑不同区域之间传输数据的成本。
- en: You may wonder how durable LRS is compared to other replication models. To define
    that, you have to understand how data is stored within a single data center. In
    fact, disks for Azure Storage are installed within racks, which build a bigger
    concept known as a stamp. Stamps are configured in such a way that they use different
    power lines and networks, and thanks to such a setup, it is possible to store
    copies of your data in different fault domains, ensuring that if one fails, the
    other two will still work. Microsoft states that LRS is designed to provide at
    least 99.999999999% durability. If that is not enough, you may consider other
    models.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道LRS与其他复制模型相比有多耐用。要了解这一点，你需要理解数据是如何在单个数据中心内存储的。实际上，Azure Storage的磁盘被安装在机架内，这些机架构成了一个更大的概念，叫做stamp。Stamps被配置成使用不同的电源线和网络，正因为如此的设置，数据可以存储在不同的故障域中，确保如果一个故障，其他两个仍然能工作。微软表示，LRS的设计目标是提供至少99.999999999%的耐用性。如果这还不够，你可以考虑其他模型。
- en: When using RA-GRS, do not take for granted the ability to easily write to the
    secondary region if an outage occurs. It is Microsoft's responsibility to initiate
    a failover (as opposed to, for instance, Azure Cosmos DB, where it was your decision),
    so **r****ecovery time objective** (**RTO**) consists of both time for Microsoft
    to make a decision, and time to change DNS entries to point to another region.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RA-GRS时，不要轻视如果发生故障时轻松写入备用区域的能力。启动故障转移是微软的责任（与Azure Cosmos DB不同，后者由你来决定），因此**恢复时间目标**（**RTO**）包括微软做出决策的时间和更改DNS条目以指向另一区域的时间。
- en: Storing data with Azure Storage Tables
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure Storage Tables存储数据
- en: We will start our journey with Azure Storage capabilities by learning something
    about Table Storage. If you want to store unstructured data with almost limitless
    capacity and with high demands regarding availability and durability, this service
    is for you. In this section, you will learn how to start developing applications
    using Table Storage and the best practices for storing data and achieving the
    best performance for both writing and reading it. You will also see how to efficiently
    query it, and what is important when designing services using this Azure Storage capability.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过了解Table Storage开始我们的Azure Storage能力之旅。如果你希望存储几乎无限容量的非结构化数据，并且对可用性和耐用性有很高的要求，那么这个服务适合你。在这一部分，你将学习如何开始使用Table
    Storage开发应用程序，并了解存储数据和实现最佳性能的最佳实践，无论是写入还是读取。你还将学习如何高效地查询数据，以及在设计使用此Azure Storage功能的服务时需要注意的事项。
- en: Creating an Azure Storage service
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Azure Storage服务
- en: 'To get started, we have to actually create an instance of Azure Storage. To
    do so, please following these steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，首先我们需要实际创建一个Azure Storage实例。为此，请按照以下步骤操作：
- en: Go to Azure Portal and click on + Create a resource.Search for `storage account`and
    click on the Create button.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入Azure门户并点击+创建资源。搜索`storage account`，然后点击创建按钮。
- en: 'You will see a typical form, where you have to configure a new instance of
    a service. The following is an example of what I chose:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到一个典型的表单，你需要在其中配置一个新的服务实例。以下是我选择的一个示例：
- en: '![](img/a3843f54-4e7d-423a-aa0e-b724dfe360b5.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3843f54-4e7d-423a-aa0e-b724dfe360b5.png)'
- en: 'Now I would like to describe some more mystique options available here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我想介绍一些这里提供的更神秘的选项：
- en: 'Deployment model: You can select a different deployment model depending on
    your current requirements. In general, for almost every new storage account, you
    will select Resource manageras the default option. Classic mode is designed for
    legacy deployments, which use classic virtual networks. This choice also limits
    available options when it comes to selecting Account kindand some additional features
    such as Performance tier.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署模型：根据当前需求，您可以选择不同的部署模型。一般来说，几乎每个新的存储账户，默认选项是使用**资源管理器**。`经典`模式设计用于传统部署，使用经典虚拟网络。这个选择还限制了在选择`账户种类`和一些额外功能，如`性能`层时可用的选项。
- en: 'Account kind: You have three options available here (general purpose, V1/V2,
    and blob). If you would like to use your storage account with multiple capabilities
    (tables, queues, blobs), select storage. Selecting V2 gives you the possibility
    to define an access tier (cool or hot), which is directly connected to the frequency
    of accessing data stored within an account.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户种类：这里有三个选项可用（通用、V1/V2和Blob）。如果想要使用包括表、队列、Blob在内的多种功能的存储账户，请选择存储。选择`V2`允许您定义访问层（冷或热），这直接关联到访问账户内数据的频率。
- en: 'Secure transfer required: With Azure Storage it is possible to require a secure
    connection if this option is enabled. Turn it on for your production workloads,
    so no-one will be able to access data stored within an account using, for example,
    HTTP instead of HTTPS.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要安全传输：使用**Azure存储**可以要求启用安全连接选项。为了您的生产工作负载，务必打开此选项，以防止任何人通过例如HTTP而非HTTPS访问存储在账户中的数据。
- en: 'Performance: It is possible to select either the Standard or Premium performance
    tier. As mentioned previously, this impacts hardware used to provision your service
    with common magnetic disks for the Standard tier and SSDs for Premium.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能：可以选择`标准`或`高级`性能层。正如前面提到的，这会影响使用的硬件，标准层使用常规磁盘，而高级层使用SSD。
- en: 'Virtual networks: As in many other services, Azure Storage can be provisioned
    within a virtual network, limiting access to it even more.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟网络：与许多其他服务一样，可以在虚拟网络中配置**Azure存储**，以进一步限制对其的访问。
- en: When everything is set and ready, you can click on the Create button and wait
    a moment—your account will be created and soon you will be able to start working
    with it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪后，您可以点击`创建`按钮并稍等片刻——您的账户将被创建，并很快您将能够开始使用它。
- en: Managing Table Storage
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理表存储
- en: 'When you go to the Overview blade, you will see a dashboard with basic information
    available regarding your account:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当您转到`概述`刀片时，您将看到一个包含有关您账户的基本信息的仪表板：
- en: '![](img/8c59ccb6-4783-4420-8643-b67536590506.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8c59ccb6-4783-4420-8643-b67536590506.png)'
- en: 'As you can see, it displays the information you defined while creating it,
    such as location, performance tier, or replication type. Additionally, when you
    scroll down, you will see the Monitoring section, where you can see how the whole
    service works:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，它显示了您在创建时定义的信息，如位置、性能层或复制类型。此外，当您向下滚动时，还将看到`监视`部分，其中显示整个服务的运行情况：
- en: '![](img/d7c6d840-3b9d-485f-90bd-6431d6bbc62f.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d7c6d840-3b9d-485f-90bd-6431d6bbc62f.png)'
- en: 'In this section, we are covering Table Storage, so find the Tables blade on
    the left and click on it. Initially, you should see no tables at all—of course,
    this is something we expected as this instance of a service has been just provisioned.
    Nonetheless, this is one of the methods to check what is actually stored within
    an account:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍表存储，因此请在左侧找到`表`刀片并点击。最初，您可能根本看不到任何表——当然，这是我们预期的情况，因为此服务的实例刚刚被配置。尽管如此，这是一种检查账户内实际存储内容的方法之一：
- en: '![](img/4192d265-7acd-4613-b5d8-2bb2a954734b.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4192d265-7acd-4613-b5d8-2bb2a954734b.png)'
- en: 'To create a new table, simply click on the + Tablebutton—you will be asked
    to provide a table name, which is all that is needed to get started. As you probably
    remember, I described Table Storage as the capability for storing unstructured
    data. This is the reason why there are no other options for starting with a table—you
    simply rely on the internal specification of how this service works. The following
    shows what it looks like when a new container is created:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新表，只需点击`+表`按钮——您将被要求提供表名，这是开始的全部内容。也许您还记得，我描述过表存储作为存储非结构化数据的能力。这就是为什么在开始一个表时没有其他选项的原因——您只需依赖此服务工作的内部规范。以下展示了创建新容器时的情况：
- en: '![](img/9e23615b-2b65-4680-b3ee-424c792f4a30.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9e23615b-2b65-4680-b3ee-424c792f4a30.png)'
- en: The preceding screenshot shows an `orders` table and its URL—you may wonder
    what this URL is all about. As there are multiple ways to manage and use Azure
    services, Azure Storage allows you to use its capabilities using different methods,
    such as REST, Powershell, Azure CLI, or Azure Portal. When using SDKs and reading
    their source code, you could find that they are just wrappers around simple a
    REST API. This makes this particular service superbly easy to get started and
    work with on a daily basis. We have talked a little bit about Tables basics—now
    it is time to describe their schema.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图展示了一个`orders`表及其URL——你可能会想知道这个URL到底是什么。由于有多种方式来管理和使用Azure服务，Azure存储允许你通过不同的方法使用其功能，如REST、Powershell、Azure
    CLI或Azure门户。当你使用SDK并阅读其源代码时，你会发现它们实际上只是对简单REST API的封装。这使得该服务非常容易入门并在日常工作中使用。我们已经谈了些关于表存储的基础知识——现在是时候描述它们的架构了。
- en: Storing data in Table Storage
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表存储中存储数据
- en: 'Each record in Table Storage has a row structure with multiple columns. Each
    row has the following base columns:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 表存储中的每条记录都有一个包含多个列的行结构。每一行有以下基本列：
- en: '`PartitionKey`: Identifier of a partition of a row'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PartitionKey`：行分区的标识符'
- en: '`RowKey`: The row''s identifier'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RowKey`：行的标识符'
- en: '`Timestamp`: This column tells you when a row was recently modified'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Timestamp`：此列表示行最近被修改的时间'
- en: '`ETag`: Table Storage implements the optimistic concurrency model and uses
    ETags to control whether an entity should be modified or not'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ETag`：表存储实现了乐观并发控制模型，并使用ETag来控制是否修改实体'
- en: 'Of course, you are not limited to the columns listed above—you can create any
    additional columns you want and give each a specified type. However, before we
    go any further, you have to fully understand the implications of such a design.
    Here you can find an example of entities stored within a single table:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你并不局限于上述列——你可以创建任何额外的列，并为每个列指定类型。然而，在进一步进行之前，你需要完全理解这种设计的含义。这里有一个例子，展示了存储在同一个表中的实体：
- en: '2018-07-13T11:56:11.108Z'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '2018-07-13T11:56:11.108Z'
- en: '| `PartitionKey` | `RowKey` | `Timestamp` | `Name` | `Price` | `Created` |
    `CustomerId` | **Quantity** |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `PartitionKey` | `RowKey` | `Timestamp` | `Name` | `Price` | `Created` |
    `CustomerId` | **Quantity** |'
- en: '| Order | 16Hbs6gs8s | 2018-07-13T11:56:11.108Z |  |  | 2018-07-13T11:36:11.108Z
    | customer-001 |  |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 订单 | 16Hbs6gs8s | 2018-07-13T11:56:11.108Z |  |  | 2018-07-13T11:36:11.108Z
    | customer-001 |  |'
- en: '| 16Hbs6gs8s | 1 | 2018-07-13T11:57:17.108Z | Sponge | 3.00 | 2018-07-13T11:36:11.108Z
    |  | 3 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 16Hbs6gs8s | 1 | 2018-07-13T11:57:17.108Z | 海绵 | 3.00 | 2018-07-13T11:36:11.108Z
    |  | 3 |'
- en: In the preceding example, you data is stored within multiple partitions and
    though a single table is used, multiple schemas still can work, so there is no
    need to use additional containers. Additionally, I used a simple pattern, which
    allows you to introduce 1:n relationship—each order has a unique `RowKey`, which
    can be used as a partition key for entities related to it (allowing for really
    easy querying of data).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你的数据存储在多个分区中，尽管只使用了一个表，但仍然可以使用多个架构，因此无需使用额外的容器。此外，我使用了一个简单的模式，这使你能够引入1:n关系——每个订单都有一个唯一的`RowKey`，可以用作与之相关的实体的分区键（这使得查询数据变得非常简单）。
- en: PartitionKey
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PartitionKey
- en: Table Storage uses partitions to distribute, load, and handle requests. The
    number of partition keys within a table impacts the ability to balance them. It
    is possible to use a single partition per table, but in most cases, this is an
    invalid approach, which will lower the performance of your storage account. Partition
    keys are limited to 1 KB in size and have to be unique within a table (so once
    an entity is assigned a partition key, all others that use the same value will
    be stored in the same storage). They also have to be strings.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 表存储通过分区来分配、加载和处理请求。表中分区键的数量会影响它们的平衡能力。虽然可以为每个表使用单个分区，但在大多数情况下，这是一种无效的方法，会降低存储帐户的性能。分区键的大小限制为1
    KB，并且在表中必须唯一（因此，一旦实体分配了分区键，所有使用相同值的实体将存储在同一存储中）。它们也必须是字符串类型。
- en: RowKey
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RowKey
- en: Each row key is a unique identifier of a row within a partition (so you can
    have rows using the same `RowKey` column value as long they have a different `PartitionKey`).
    More importantly, each table is sorted in ascending using values of row keys.
    This requires a smart design when you need, for example, to read only a selection
    of the top rows and do not want to provide their row keys (we will cover that
    later in this chapter). Like `PartitionKey`, `RowKey` is also limited to 1 KB
    and has to be a string.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个行键是分区内一行的唯一标识符（因此，只要它们有不同的`PartitionKey`，你可以拥有使用相同`RowKey`列值的多行）。更重要的是，每个表按行键值升序排序。这要求你在设计时要聪明，例如，当你只需要读取部分顶端行而不想提供它们的行键时（我们将在本章后面讲到）。像`PartitionKey`一样，`RowKey`也有1
    KB的限制，并且必须是字符串。
- en: Timestamp
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间戳
- en: This column is maintained server-side and is a `DateTime` value that is changed
    each time an entity is modified. It is also internally used to provide optimistic
    concurrency, and cannot be modified. Even if you set it, the value will be ignored.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列是由服务器端维护的，并且是一个`DateTime`值，每次实体被修改时都会更改。它也被内部用于提供乐观并发控制，并且不能被修改。即使你设置了它，值也会被忽略。
- en: General rules for entities
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体的一般规则
- en: 'Table Storage has some hard limitations when it comes to storing data:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 表存储在存储数据时有一些硬性限制：
- en: The maximum number of columns is 255
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大列数为255
- en: The maximum size of an entity is 1 MB
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体的最大大小为1 MB
- en: By default, each entity column is created as a type string—this can be overridden
    when it is created
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，每个实体列被创建为字符串类型——在创建时可以覆盖这个默认值
- en: It is not possible to store null as a value—if you do not provide a column value,
    an entity will be considered as if it does not have it at all
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可能存储`null`值——如果你没有提供列的值，实体会被认为没有这个列
- en: Querying data in Table Storage
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询表存储中的数据
- en: To query data in Table Storage, you will need a simple application (it can be
    a console application) and an SDK for this service. You will also need an instance
    of Azure Storage—it can be either the one provisioned in Azure, or a local one,
    if you installed Storage Emulator.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表存储中查询数据，你需要一个简单的应用程序（可以是控制台应用程序）和该服务的SDK。你还需要一个Azure存储实例——它可以是Azure中配置的存储实例，也可以是本地的存储实例（如果你已安装存储模拟器）。
- en: To get started with Storage Emulator, simply search for an executable (for example, Start
    | type `Storage Emulator`) and run it. It will initially create a database for
    storing data and run in the background, so you will not have to worry about accidentally
    closing it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用存储模拟器，只需搜索可执行文件（例如，`开始` | 输入`Storage Emulator`）并运行它。它会初步创建一个用于存储数据的数据库，并在后台运行，所以你不必担心意外关闭它。
- en: 'To get started, we have to install the `WindowsAzure.Storage` package using
    NuGet Package Manager. It has everything that is needed to start working with Azure
    Storage in .NET. Here you can find an example of code for creating a table:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们需要使用NuGet包管理器安装`WindowsAzure.Storage`包。它包含了开始在.NET中使用Azure存储所需的所有内容。这里有一个创建表的代码示例：
- en: '[PRE1]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can briefly describe what this code does:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简要描述一下这段代码的作用：
- en: It parses a connection string so it can be used in the following methods
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它解析连接字符串，以便在接下来的方法中使用
- en: It creates an instance of `CloudTableClient`class, which is the main class for
    working with Table Storage
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它创建了一个`CloudTableClient`类的实例，这是与表存储交互的主要类
- en: It gets a reference to a table `order`, whether it exists or not
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它获取到一个`order`表的引用，无论它是否存在
- en: Finally, it creates an `orders` table, if does not exist already
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，它会创建一个`orders`表（如果表尚不存在的话）
- en: You could also use the `Create()`method instead of `CreateIfNotExists()`, although,
    it could break if a table has been already created.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`Create()`方法来代替`CreateIfNotExists()`，不过如果表已经创建，使用`Create()`方法可能会出错。
- en: 'Now we need to get a connection string, so depending on the storage account
    you would like to use you either:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要获取连接字符串，具体取决于你想要使用的存储账户，你可以：
- en: Have to go to Azure Portal, find your storage account, and copy a connection
    string from Access keysblade
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要进入Azure门户，找到你的存储账户，然后从`Access keys`选项卡中复制连接字符串
- en: Use the `UseDevelopmentStorage=true`value for connecting with Storage Emulator
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`UseDevelopmentStorage=true`值来连接存储模拟器
- en: 'When you execute an application, a table should be created without a problem.
    Now, when we have a table, we would like to actually insert something in it. To
    do so, you will need the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行一个应用程序时，表应该能够顺利创建。现在，当我们有了表后，我们希望实际往表中插入一些数据。为此，你需要以下代码：
- en: '[PRE2]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here we are creating a new `TableOperation`, which accepts one argument that
    is an instance of `TableEntity`. `TableEntity` is a base class that contains all
    row properties, and has to be passed to a table (like `PartitionKey` or `RowKey`).
    Of course, instead of using `DynamicTableEntity`, you can derive from `TableEntity`and
    introduce a custom entity class.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个新的`TableOperation`，它接受一个参数，即`TableEntity`的实例。`TableEntity`是一个包含所有行属性的基类，必须传递给表（如`PartitionKey`或`RowKey`）。当然，除了使用`DynamicTableEntity`，你还可以从`TableEntity`派生并引入自定义实体类。
- en: In the preceding example, we used the `Insert()`operation, which may not be
    the best choice for concurrent requests. In such a scenario, it is sometimes better
    to use `InsertOrReplace()`or `InsertOrMerge()`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了`Insert()`操作，但对于并发请求来说，这可能不是最好的选择。在这种情况下，有时更好的做法是使用`InsertOrReplace()`或`InsertOrMerge()`。
- en: 'The last thing to do is to query a table. To do so in .NET, you will need something
    like this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要做的是查询表格。要在.NET中执行此操作，你将需要像这样的一些代码：
- en: '[PRE3]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We just executed a basic query, which will return all rows from a table. While
    it works now, it is not the best idea to query all data within a table using such
    a query—in most cases, you will use something like the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚执行了一个基本查询，这将返回表中的所有行。虽然它现在能够工作，但使用这样的查询来查询表中的所有数据并不是最佳选择——在大多数情况下，你将使用以下类似的查询：
- en: '[PRE4]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding query will return all rows in a table that have an `orders` partition
    key. Such queries can be extended as you wish by generating further filter conditions.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将返回表中所有具有`orders`分区键的行。你可以通过生成进一步的过滤条件，按照自己的需求扩展这些查询。
- en: Remember that to achieve the best performance, your queries should include both
    `PartitionKey` and `RowKey`. Using `PartitionKey` only leads to worse results,
    but is still acceptable. Using only `RowKey` will result in reading the whole
    partition anyway. Not using those columns will result in reading the whole table.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，为了获得最佳性能，你的查询应该同时包括`PartitionKey`和`RowKey`。仅使用`PartitionKey`会导致结果较差，但仍然是可以接受的。仅使用`RowKey`将导致读取整个分区。没有使用这些列将导致读取整个表。
- en: 'You can also check what is stored in a table using Azure Storage Explorer:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用Azure Storage Explorer查看表中存储的内容：
- en: '![](img/3480ecc7-bd3c-4579-9a09-89352ee0fc39.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3480ecc7-bd3c-4579-9a09-89352ee0fc39.png)'
- en: Table API in Azure Cosmos DB
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Cosmos DB中的表API
- en: 'It is possible to leverage the premium offering for Table Storage using Azure
    Cosmos DB. Using that option has the following advantages:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Azure Cosmos DB来利用表存储的高级服务。使用这个选项有以下优点：
- en: Automatic and manual failovers.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动和手动故障转移。
- en: Secondary indexes (the ability to index against all properties inside a row).
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二级索引（对行内所有属性进行索引的能力）。
- en: Independent scaling across multiple regions.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨多个区域的独立扩展。
- en: Different consistency levels.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的一致性级别。
- en: Dedicated throughput per table.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个表的专用吞吐量。
- en: While failover can be achieved using Table Storage only, the rest of the presented
    features are available only for Azure Cosmos DB, and can be a great solution when
    you like the simplicity of this service and still want to challenge it against
    more complicated scenarios.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然仅使用表存储也可以实现故障转移，但其余的功能仅适用于Azure Cosmos DB，并且当你喜欢这个服务的简易性，同时希望面对更复杂的场景时，它将是一个很好的解决方案。
- en: Implementing fully managed file shares with Azure Files
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure Files实现完全托管的文件共享
- en: When in need of creating a file share, which can be accessed by different people,
    you often have to either buy some hardware, which will be set up and configured
    for such functionality, or use third-party solutions, which can be hard to customize,
    or expensive. With Azure Storage, you can quickly develop a solution that is almost
    limitless in terms of capacity, offers industry standard protocols, and can be
    quickly provisioned, and ready to use.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要创建一个可以供不同人访问的文件共享时，你通常需要购买一些硬件，这些硬件将为这种功能进行设置和配置，或者使用第三方解决方案，这些解决方案可能难以定制或者价格昂贵。使用Azure
    Storage，你可以快速开发一个几乎无限制容量、提供行业标准协议、并且可以快速配置和投入使用的解决方案。
- en: Azure Files concepts
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Files概念
- en: 'Azure Files has some basic concepts that create the whole picture of a service.
    In fact, it is designed to replace current on-premise file servers in terms of
    functionality and performance. The main difference between Azure Files and the
    "old" solution is accessibility (as you can set the access token and make the
    URL private). What is more, it is OS-agnostic, allowing you to use the very same
    file share mounted on different machines using Linux, Windows, or macOS. It, of
    course, shares other Azure Storage concepts, so you can use it with the same reliability
    and durability assurance. The main feature of Azure Files is support for the SMB
    protocol. This is a very common protocol (and a mature one, as it was designed
    in the mid-1980s) for sharing computer resources, and used also for printers,
    and other network devices. We could summarize Azure Files as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Files有一些基本概念，构成了整个服务的框架。实际上，它旨在取代当前的本地文件服务器，在功能和性能方面表现优异。Azure Files与“传统”解决方案的主要区别在于可访问性（因为您可以设置访问令牌并将URL设置为私有）。此外，它是操作系统无关的，允许您在不同的机器上使用相同的文件共享，无论是Linux、Windows还是macOS。当然，它还继承了其他Azure存储的概念，因此您可以以同样的可靠性和耐用性来使用它。Azure
    Files的主要特点是支持SMB协议。这是一种非常常见的协议（也是一个成熟的协议，因其设计于1980年代中期），用于共享计算机资源，也用于打印机和其他网络设备。我们可以这样总结Azure
    Files：
- en: '**Fully managed**: This is a full cloud service, where you do not have to worry
    about the OS or its configuration.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完全托管**：这是一项完整的云服务，您无需担心操作系统或其配置。'
- en: '**Durability ****and resiliency**: With Azure Files you do not have to worry
    about not having access to data stored and securing your resources against power
    failures, and other outages.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**耐用性和弹性**：使用Azure Files，您无需担心无法访问存储的数据，或担心电力故障等停机事件对资源的安全性造成影响。'
- en: '**Common dev tools**: Accessing Azure Files is easy, thanks to the system I/O
    APIs, appropriate SDKs, or even REST APIs.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常用开发工具**：由于系统I/O API、适当的SDK，甚至REST API，访问Azure Files变得非常简单。'
- en: Working with Azure Files
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure Files
- en: 'When you go to Azure Portal and open your Azure Storage instance, you can find
    the Files blade. It is very similar to the one that will be discussed for Blob
    Storage. It displays a list of available file shares, as seen in the following
    screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当您进入Azure门户并打开您的Azure存储实例时，您可以找到“文件”刀片。它与将要讨论的Blob存储非常相似，显示了可用的文件共享列表，如下图所示：
- en: '![](img/e4d8165d-ecc6-4010-8cb5-97b5386923ba.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4d8165d-ecc6-4010-8cb5-97b5386923ba.png)'
- en: From this screen, you have the ability to create a new one by clicking on the +
    File sharebutton. The important thing here is the value of the Quota field—it
    determines the maximum capacity of a file share.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕上，您可以通过点击+文件共享按钮来创建新的文件共享。这里最重要的是“配额”字段的值，它决定了文件共享的最大容量。
- en: The maximum value for the quota of a file share is 5,120 GB.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 文件共享的配额最大值为5,120 GB。
- en: 'To get information about how to connect to a file share, you can click on the
    more button on the right and select Connect:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关如何连接到文件共享的信息，您可以点击右侧的更多按钮并选择连接：
- en: '![](img/ef04fe98-5092-4c54-9679-888d21ea26e5.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef04fe98-5092-4c54-9679-888d21ea26e5.png)'
- en: 'It will display some short instructions about how it is possible to quickly
    connect from your computer to a specific file share. Here you can find an example
    of a command for Windows written in PowerShell:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 它会显示一些简短的指令，说明如何快速从计算机连接到特定的文件共享。这里您可以看到一个在PowerShell中为Windows编写的命令示例：
- en: '[PRE5]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can specify the letter of a drive using the `-Name`parameter (in the preceding
    example it is `Z`).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`-Name`参数指定驱动器的字母（在前面的示例中，它是`Z`）。
- en: Mapping a drive is an operation that may require additional permissions—make
    sure you are running all these commands as an administrator.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 映射驱动器是一项可能需要额外权限的操作——请确保以管理员身份运行所有这些命令。
- en: 'Now I can compare the contents of my file share displayed in Azure portal:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我可以比较在Azure门户中显示的文件共享内容：
- en: '![](img/d6487b6f-934d-4d69-b010-676d194e71a7.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6487b6f-934d-4d69-b010-676d194e71a7.png)'
- en: 'With my mounted disk on a virtual machine:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我在虚拟机上挂载的磁盘：
- en: '![](img/695b1b20-a5df-42a2-b0e5-3ab4ecee9f02.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/695b1b20-a5df-42a2-b0e5-3ab4ecee9f02.png)'
- en: The whole setup took only a few minutes—this is the strength of this service,
    as normally I would need many hours to set everything up and achieve the same
    level of portability and reliability. It also gives you unlimited storage capacity—nothing
    blocks you from attaching multiple Azure Files shares and storing all your files
    on them.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Blob Storage versus Azure Files
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In fact, both Azure Blob Storage and Azure Files have a similar purpose—you
    create them to store and share files. There are, however, some fundamental differences
    between them when it comes to use cases, for example:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: If you want to create a common file share space for your company, you will use
    Azure Files
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to have a space for files uploaded by your users via, for example,
    your website, you will use Blob Storage
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to have your files completely private, you will use Azure Files
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to configure security on a blob or a containers level, you will
    use Blob Storage
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both services also have different pricing models (for example, Azure Files is
    much more expensive when it comes to paying for each GB of data).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Queues in Azure Queue Storage
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Storage—besides being a service for storing many different kinds of data—can
    be used also as a queue. Queue Storage is another capability that allows you to
    quickly develop a solution that requires a simple queue solution, and additionally
    is able to store in a queue millions of messages without affecting performance.
    In this section, you will see how to develop applications using Queue Storage
    and what is important when using this feature. Additionally, I assume that you
    already have a storage account. If not, take a look at the **Storing data with
    Azure Storage Tables **section, where I described the process of creating an account.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Queue Storage features
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In general, Queue Storage has two use cases:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Processing messages asynchronously
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exchanging communications between different services (Azure Functions, legacy
    Web roles/Worker roles)
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a very simple queue solution, which can store and process messages in
    any format that are limited to 64 KB. The retention time of a message is seven
    days—after that, it is lost. The capacity of a queue is basically equal to the
    capacity of your storage account. In general, you should not worry that you will
    run out of available space. Queue Storage shares many addition features, such
    as virtual networks, SAS tokens, and many more, with other Azure Storage capabilities.
    Therefore, we will not reintroduce them in this section.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Developing an application using Queue Storage
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the purpose of presenting Queue Storage, I created two applications:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Producer
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consumer
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Producer will create and push messages, which will then be consumed by Consumer.
    Here you can find the code of the `Producer`app:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And, of course the `Consumer` app:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you publish a message to a queue, you can retrieve it at any time—as mentioned
    previously, you have seven days to fetch it from a queue. Here you can find how
    a message looks like when stored in a queue:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0dba0131-21e1-425d-952a-e4c890c5919c.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: Object storage solution – Azure Storage Blobs
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last capability of Azure Storage is Blob Storage. In the previous sections,
    we were using this service to store unstructured data using Table Storage, push
    messages to a queue with Queue Storage, and create file shares, thanks to File
    Storage. In the last section of this chapter, we will focus on developing solutions
    that store so-called blobs. You may wonder what exactly a blob is—well, there
    is no single definition for that. In general. blobs are files of different types,
    such as text files, images, or audio. You will see how to use them in your applications,
    how to secure them, and how you can achieve the maximum performance.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Blob Storage concepts
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we go deeper into the service, you will have to understand the basic
    concepts of Blob Storage. Here you can find a diagram that clearly defines three
    main topics:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91943c42-c9e8-41ea-aca9-fd880be20ff3.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we have three different concepts:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '**Account**: Which is basically your Storage Account and stores all data within
    a Blob Storage.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container**: Which is a logical entity holding an unlimited amount of blobs
    inside it. An account can have an unlimited amount of containers.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blob**: A file stored within a container.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, there are three different types of blob:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '**Block blob**: Text or binary data with a maximum size of 4.7 TB. Such a blob
    is made of smaller blocks.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Append blobs**: A more specific type of blob, which is the best for scenarios
    such as logging data, or storing events or transactional logs. They are optimized
    for append operations.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page blobs**: Designed for storing VHD files used by VMs.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the newest version of Storage Accounts (v2), it is possible to use the
    latest features of this service. One of the most interesting additions is access
    tiers. Now it is possible to select whether you would like to use a hot or cool tier.
    The choice depends on the frequency of accessing your data—if you would like to
    read it often, hot will be the best choice, otherwise, it is better to use the
    cool tier or a general-purpose account.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: The tiers aforementioned are available when you select Blob as your storage
    account type. They are not available for general-purpose accounts.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also one more tier; Archive—designed for storing blobs that are rarely
    accessed—although it is available only on the blob level. You probably wonder
    about the differences between these tiers. Here you can find a table that defines
    their pricing:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Hot** | **Archive** | **Cool** |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
- en: '| First 50 TB/month | $0.0184 per GB | $0.01 per GB | $0.002 per GB |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
- en: '| Next 450 TB/month | $0.0177 per GB | $0.01 per GB | $0.002 per GB |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
- en: '| Over 500 TB/month | $0.017 per GB | $0.01 per GB | $0.002 per GB |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
- en: 'In terms of storage, you can see that the hottier is the most expensive and
    the rest are much cheaper, especially archive. Now let us check the price for
    10,000 read operations:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '**Hot**: $0.004'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cool**: $0.01'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Archive**: $5'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ouch—the difference is huge here! This is why selecting the correct tier is
    so important—you may end up with a solution that costs many, many dollars, only
    because you misused the Blob Storage tier.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Inserting data into Blob Storage
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will try to actually add something to our Blob Storage. Here you can
    find a piece of code that allows you to upload a single file to a container:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As in the previous examples, this one looks pretty similar. You will need to
    follow these steps:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Firstly you have to create an instance of `CloudStorageAccount`
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then you need to obtain a reference to a container, and create it if it does
    not exist
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you have to get a reference to a blob, and upload some contents
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If I open Azure Storage Explorer, I can see that a new blob was uploaded to
    a container:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/984feda9-76bc-48c1-b707-84ca85263ea0.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
- en: 'Of course, if I open the file, I will see that it contains the text that I
    uploaded:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c88f981d-9174-4377-ac5c-80d51ebc730c.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
- en: Containers and permissions
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is possible to select a proper access level when it comes to accessing a
    container stored within Blob Storage. If you go to Azure Portal and open your
    Azure Storage service, you can find the Blobs blade. Inside it, you can click
    on the + Containerbutton, which will open a small window:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/081f7f18-611f-4311-a615-42f8d9025b0a.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, besides providing a name for a container, you can select Public
    access level. Currently, you have three different options available:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Private: For no anonymous access'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blob: Anonymous access on a blob level
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container: Anonymous access on a container level
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can click on a container you created to see another screen, where you can
    manage it. I will use it to actually upload a file to see what other options become
    available. Here you can find what it will look in the portal when a file is uploaded
    and I click on it:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45bd6c11-2d52-4c9e-8842-a556438b9df2.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: Now I can see additional metadata regarding a file, manage like acquiring leases,
    or generate an SAS token.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: If you want to make a file read-only, click on the Acquire leasebutton—while
    it will still be possible to change it, such an action will require providing
    a lease ID.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'What is more, there is a URL property available, which can be used to access
    a blob directly, for example, using a browser. Here you can find how it looks
    like in my case:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '`https://handsonazurestore.blob.core.windows.net/blob/11047_01_01.PNG`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you may wonder what the difference is between Blob and Container access.
    To find out, we will use the following code:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'I already created two different containers—one with Blob access, one with Container.
    If I execute the preceding code for a container with full public access, the following
    is what I will see:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36fd3500-e727-4b41-9f2f-6c6f26bd4c53.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: 'Now let us run it for a container, which has public access for blobs only:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6135bf3-10fe-4ad2-b5ae-202df734164a.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, container-level operations are unavailable when its access
    level is blob or private. Of course, if you authorize using, for instance, an
    access key, you will list all blobs within a container, even if it is private.
    Of course, it is also possible to set a container-level permission directly from
    your code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Blob Storage: additional features'
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the newest and coolest features of Blob Storage is the Soft deletefeature.
    It allows you to perform an operation called a soft delete. What does this mean?
    In some cases, you may want to delete a file, but have the ability to easily revert
    the deletion within a fixed time period. In Blob Storage, that option is available
    via the Soft deleteblade:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea110677-c180-478e-9e60-f086e5ce6dbf.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
- en: 'If you turn it on, any deleted blob will still be available within storage
    (but not for retrieval or modification) for a set number of days. Blob Storage also has
    two additional features, which can be used with two other Azure services:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Azure CDN: A Content Delivery Network service for serving static content to
    your customers—we will cover this later in the book.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Search: As already discussed, here you can easily set your Blob Storage
    as a data source for a search engine.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So as you can see, this is a very flexible and useful Azure Storage capability, which
    can be used for file storage, as an Azure Search document store, a logs database,
    and much, much more.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned some basics regarding one of the most important
    services in Azure—Azure Storage. We developed a few solutions for Tables, Queues,
    Files, and Blobs—each enabling you to do different things, from asynchronous message
    processing to creating file shares. You also read about different redundancy models
    and how reliable and durable this particular service is. In the *Further reading*section,
    you will find plenty of additional resources, which will allow you to build even
    more skills for working with this Azure service, such as Table Storage patterns,
    performance targets, and a REST API reference. In the following chapters, you
    will learn something about data processing services, such as Azure Event Hub and Azure
    Stream Analytics.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What tiers are available during account creation when selecting Blob as an account
    type?
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What must you include in a query against Table Storage to achieve the maximum
    performance?
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the available redundancy models for storage accounts?
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between blob and file storage?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you store binary files using Blob Storage?
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How long does a message in Queue Storage live before it is removed?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the maximum size of a message in Queue Storage?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Queue 存储中消息的最大大小是多少？
- en: What is the maximum size of the `PartitionKey` column value?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PartitionKey` 列值的最大大小是多少？'
- en: What concurrency model is implemented in Table Storage?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表存储中实现了什么并发模型？
- en: What is the difference between Azure Files storage and on-premise filesystem?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Files 存储和本地文件系统之间有什么区别？
- en: Further reading
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: Disk storage: [https://docs.microsoft.com/en-us/azure/virtual-machines/windows/about-disks-and-vhds](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/about-disks-and-vhds)
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘存储: [https://docs.microsoft.com/en-us/azure/virtual-machines/windows/about-disks-and-vhds](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/about-disks-and-vhds)
- en: SAS token reference: [https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1](https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1)
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SAS 令牌参考: [https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1](https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1)
- en: ARM vs classic deployment: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-deployment-model](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-deployment-model)
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARM 与经典部署: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-deployment-model](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-deployment-model)
- en: Table Storage data model: [https://docs.microsoft.com/en-us/rest/api/storageservices/Understanding-the-Table-Service-Data-Model](https://docs.microsoft.com/en-us/rest/api/storageservices/Understanding-the-Table-Service-Data-Model)
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表存储数据模型: [https://docs.microsoft.com/en-us/rest/api/storageservices/Understanding-the-Table-Service-Data-Model](https://docs.microsoft.com/en-us/rest/api/storageservices/Understanding-the-Table-Service-Data-Model)
- en: Blob Storage pricing: [https://azure.microsoft.com/en-us/pricing/details/storage/blobs/](https://azure.microsoft.com/en-us/pricing/details/storage/blobs/)
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blob 存储定价: [https://azure.microsoft.com/en-us/pricing/details/storage/blobs/](https://azure.microsoft.com/en-us/pricing/details/storage/blobs/)
- en: File Storage performance targets: [https://docs.microsoft.com/en-us/azure/storage/files/storage-files-scale-targets](https://docs.microsoft.com/en-us/azure/storage/files/storage-files-scale-targets)
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件存储性能目标: [https://docs.microsoft.com/en-us/azure/storage/files/storage-files-scale-targets](https://docs.microsoft.com/en-us/azure/storage/files/storage-files-scale-targets)
- en: Guidelines for Table Storage: [https://docs.microsoft.com/en-us/azure/storage/tables/table-storage-design-guidelines](https://docs.microsoft.com/en-us/azure/storage/tables/table-storage-design-guidelines)
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表存储指南: [https://docs.microsoft.com/en-us/azure/storage/tables/table-storage-design-guidelines](https://docs.microsoft.com/en-us/azure/storage/tables/table-storage-design-guidelines)
