- en: Big Data Pipeline - Azure Event Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Event Hub is one of the best solutions for introducing an entry point
    with almost limitless throughput. It's designed for big data workloads and is
    able to process millions of messages per second. It offers a very simple configuration,
    and thanks to the available SDK, you can easily adjust it to almost any solution
    developed in the cloud. It also integrates natively with other Azure components,
    making creating a whole platform hosted in the cloud a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Working efficiently with Azure Event Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different concepts such as publishers, partitions, throughput units, or consumer
    groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Event Hub security concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Event Hubcapture feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform the exercises in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Event Hub service and concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, we gather more and more data, which has to be aggregated, processed,
    and stored somewhere. This implies using services that can handle increasing loads,
    scale to growing demands, and offer the smallest latency available. All these
    requirements are often mentioned when building so-called big data pipelines—parts
    of a system designed to process as much data as possible, so it is later accessible
    by tools such as Hadoop, Spark, ML, AI, and so on. If you are looking for a service
    in Azure that can handle millions of messages per second, Azure Event Hubis the
    right choice. In this chapter, you will learn the basics of this Azure component
    and get familiar with messaging solutions in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Hub concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In general, Azure Event Hubis a simple service that is built on top of two
    concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Event publishers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event processor hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Of course, these are not the only topics we will cover here. However, before
    we proceed, I would like to focus a little bit on the distinction between a publisherand
    a processor:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Publisher**:This is an entity that sends data to an instance of Azure Event
    Hub. It can use one of the two available protocols (HTTP or AMQP) and is unaware
    of the current Event Hub capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Processor**: An entity that reads events from Azure Event Hubas they become
    available. It uses AMQP for communication and relies on additional concepts such
    as consumer groupsand partitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following shows how Azure Event Hubworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/020778c9-5eea-4c0a-8286-0e047871a8a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, there are an additional two concepts mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Partition**: Each partition is an independent event log that stores data
    separately. In general, it is Event Hub''s responsibility to ensure that each
    event sharing the same partition key is stored within the same partition in order.
    Of course, you can set this value by yourself—in such a scenario you have to make
    sure you are not overloading one specific partition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consumer group**: If you would like to allow separate processors to consume
    events separately, you have to use different consumer groups to do so.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see, Azure Event Hubdoes not use things such as instance topics
    for distributing data—instead it acts as a single event pipeline that you can
    read anytime with high throughput. To define this value, Event Hub uses a concept
    named **throughput units** (**TU**). 1 TUis defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Up to 1 MB/s or 1,000 events for ingress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Up to 2 MB/s or 4,096 events for egress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that Azure Event Hubshares TUs for all consumer groups you are using. If
    you have 1 TU and 5 consumer groups, the maximum egress will be divided among
    all consumers (so when all 5 read events at the same time, a maximum of 400 events
    per second will be available).
  prefs: []
  type: TYPE_NORMAL
- en: If you happen to exceed the available limit, Event Hub will start throttling
    your requests, finally returning `ServerBusyException`. This is, however, true
    only for incoming events—for egress you just cannot read more than the current
    TU value allows.
  prefs: []
  type: TYPE_NORMAL
- en: By default, you cannot have more than 20 TUs per Event Hub namespace. However,
    this is just a soft limit—you can extend it by contacting Azure support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s focus a little bit on partitions. Each hub in Event Hub can have
    a maximum number of 32 partitions. You may wonder what this implies—in fact, this
    gives some additional options:'
  prefs: []
  type: TYPE_NORMAL
- en: Because each partition can have a corresponding consumer, by default, you can
    process messages in parallel using 32 consumers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because you cannot change the number of partitions after the hub's creation,
    you have to carefully design it at the very beginning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the maximum number of partitions by default is not always the best option—it
    should reflect the number of readers you are planning to support. If you choose
    too many, they will start to race to acquire a lease on a partition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following shows globally how data could be stored among different partitions
    within a hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1406bcad-2d1c-4a99-9673-8da1f54b1241.png)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned earlier, each partition can grow independently—what is more, each
    one has an individual offsetvalue. What is an offsetvalue? You could think about
    it as a pointer to some specific point within a log—if it stores events numbered
    from 1 to 10,000 and you have read 1,000, an offsetvalue will be 1,001\. In such
    a case, it means that a reader should start reading data from the 1,001^(st) event.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, offset and consumer groups are connected with each other conceptually—each
    consumer group has an individual offset value; that is why,by introducing it,
    you can read all available logs once more.
  prefs: []
  type: TYPE_NORMAL
- en: However, remember that to set an offset, a consumer has to perform a checkpoint.
    If it fails to do so, the next time it connects, it will read all the data once
    more. This is very important if you want to avoid processing duplicates—either
    you have to implement a very durable process for processing events, so you can
    be sure that a checkpoint will be performed even if something fails, or you need
    to have a mechanism for detecting duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: If you have to do so, you can easily read previous events by providing the offsetvalue
    you are interested in when starting a processor.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to consider for now is Azure Event Hub'sretention policy for
    stored events. By default (or in other words, by using the Basictier), events
    can be stored only for 24 hours to be consumed; after that period, they are lost.
    Of course, it is possible to extend it by using the Standard tier; you will have
    an option to do so up to a maximum of 7 days from event retention. In general,
    you should avoid using this service as some kind of a standard queue or cache—its
    main purpose is to provide functionality for aggregating thousands of messages
    per second and pushing them further.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Hub durability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In many scenarios, Azure Event Hubis one of the main entry points to the system,
    making it a critical component that should be replicated and highly available.
    In this particular service, the geo-disaster recovery feature is available when
    selecting the standardtier and requires you to set up and configure the appropriate environment.
    To do so, you need to understand the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alias**: Instead of providing multiple connection strings, you can use an
    alias to make a connection with a single stable one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Failover**: This is the process of initiating a switch between namespaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Primary/secondary namespace**: When using the Azure Event Hubgeo-disaster
    recovery feature, you have to define which namespace is the primary and which
    is the secondary one. The important thing here is that you can send events to
    both namespaces, but the second one remains passive—that means events from an activenamespace
    are not transferred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, to implement the feature in Event Hub, you can to do two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitor your primary namespace to detect any anomalies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initiate failover
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, if a disaster occurs, you will have to create a new pairing after
    finishing a failover.
  prefs: []
  type: TYPE_NORMAL
- en: You have to know the difference between outage, when there are temporary problems
    within a data center, and a disaster, which often means permanent damage and possible
    loss of data. The geo-disaster recovery feature is designed for disasters; in
    the case of an outage, you should implement another way of dealing with it, such
    as caching data locally.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Azure Event Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that  you are familiar with some basic concepts, we can proceed and start
    working with a real instance of Azure Event Hub. In this section, you will learn
    both how to create and access Event Hub in the Azure portal and work with it using
    its SDK. In fact, using this service is possible both from the portal (as many
    Azure components seamlessly integrate with it and no additional configuration
    is required) and by providing custom implementations of consumers that read and
    process data further.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure Event Hub in the Azure portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create an Azure Event Hub, we will start, as in most cases, by clicking
    on the + Create a resourcebutton. Enter `Event Hub`and select the service from
    the search results. Here, you can see an example of a configuration of my Event
    Hub instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/408532ce-f5f1-44f9-b893-6cac51801016.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s globally now focus on what we actually have here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: This is the unique name of your Event Hub instance. Note, it has to be
    unique among all others supported by Azure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pricing tier: You can choose between Basic and Standard tiers. In fact, there
    is also one additional tier – Dedicated, which is, however, available only if
    you ask for it directly. The difference between Basic and Standard is quite huge
    in terms of capabilities and throughput; we will cover it in a second.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enable Kafka: This is a new feature, which allows you to use Azure Event Hubas
    if it was an **Apache Kafka** instance. Thanks to that, you are able to switch
    to this Azure service without the need to reconfigure applications communicating
    with your Kafka instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make this namespace zone redundant: If you wish, you can leverage availability
    zones for Event Hub and make the whole namespace zone redundant. This improves
    the availability of your instance of a service with no additional cost (you still
    have to pay for an additional instance, though). Currently, this feature is enabled
    for three locations – Central US, East US 2, and France Central.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subscription: A subscription where an instance will be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resource group: In which RG, an instance of Event Hub, will be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Location: In which region Azure Event Hubwill be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Throughput Units: This setting defines the throughput of the whole namespace.
    In Azure, each instance of Event Hub shares available TUs between all other hubs
    in a namespace. You can change the value later, depending on your needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enable Auto-Inflate: Instead of manually scaling the throughput of your namespace,
    you can enable Auto-Inflate. This feature scales up your namespace automatically 
    as the load grows. Note, however, that it will not scale it down automatically. By
    enabling it, you can also define  the maximum value of TUs, so you will not be
    charged more than you are supposed to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that you are charged for each TU—that means that if you selected  the
    Basictier and require 10 TUs, you will pay 9.41 EUR * 10 = 94.1 EUR per month!
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the Createbutton, Azure will take care of creating an instance
    of Azure Event Hubfor you.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Azure Event Hub in the portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following screenshot shows a brand-new instance of Azure Event Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2ec64a0-7943-4741-beaf-c4a2216673a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it contains some basic info such as metrics, metadata, and
    access to connection strings. Of course, this is a view of a namespace—we have
    not created any Event Hub yet. Before we do so, I would like to focus a little
    on what we have available now. On the left, you can find the SETTINGSsection,
    which contains additional features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Shared access policies: In Azure Event Hub,access policies have two levels—they
    are assigned either for a namespace or for a hub. With them, you are able to share
    an access key with a combination of three permissions—Manage**,** Listen, and Send.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scale: If you feel that you need more throughput, you can go to this blade
    and scale a namespace up (or down if you need fewer TUs). From that screen, you
    can also change the tier – for example, select Standardto be able to use Auto-Inflate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Geo-recovery: If you have a requirement to make your Event Hub highly available
    and you selected Standardtier, from this blade you will able to initiate pairing
    with another region.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let''s create a hub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Event Hubsblade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f4bf125-2d3e-4d43-b076-90d66a9048d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the + Event Hubbutton to see a form that enables you to configure
    a new instance of a hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ebcc7a02-b91e-4ad4-8850-4f2a592fa6f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that some fields are currently grayed out. This is because I used the Basictier
    for this example; both Message Retention (which enables you to extend the period
    an event is available to a maximum of seven days) and Capture(which will be described
    later) are features of the Standardtier.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Createbutton to initiate the creation of a hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once a hub is created, you are able to click on it and access it, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74bf99fa-ea1f-4be0-ac72-8f7e6901a73e.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that this view is a bit different from the view of a namespace; while it
    also contains some metadata and metrics, available additional features are limited.
  prefs: []
  type: TYPE_NORMAL
- en: Note that for the Basictier, consumer groupsare also unavailable. With that
    tier, only the default group—named `$Default`—can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Developing applications with Azure Event Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We created and configured our instance of Azure Event Hubin the Azure portal;
    now it is time to work with a concept I mentioned at the very beginning—Event
    Processor Host. In this section, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to send events to Azure Event Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to receive events by implementing your own Event Processor Host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we start writing some code, however, you have to understand what really
    underlies such a concept. As opposed to competing consumers, where each consumer
    uses the same messaging channel, Azure Event Hubuses the idea of an Event Processor
    Host, which is an intelligent agent able to distribute events between different,
    partitioned consumers. You may wonder how this idea works when implemented; to
    get an understanding, here you can see a diagram of the first scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7358c913-7106-468a-8eb0-551446eebd73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this diagram, you can see that there is a single **producer** and four different
    **consumers**. Each consumer implements `IEventProcessor`—an interface that is
    provided by the SDK and makes receiving events possible. Each **consumer** covers
    one **partition** and acquires a lease on it. Now let''s check another scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec3b8ad8-0a6d-408f-8dc7-5958735f33ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The only change here is the number of **partitions**—now the Event Hub has
    eight. Event Processor Hostmakes sure that the load will be distributed equally,
    each **consumer** will consume two **partitions**. To make things even more complicated,
    there is a third scenario to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e7e7e64-56d5-4391-9cba-081f6bf19e9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This time, we have more **consumers** than **partitions** available. In that
    case, you will notice a situation where one **consumer** does not work as there
    is no **partition** it can process. There is also one more caveat in that scenario;
    because lease duration (the time during which a partition is attached to a specific
    **consumer**) is not infinite, at some point currently an idle **consumer** can
    expropriate others and take control over a partition. Now, when the concept of Event
    Processor Hostis described, we can check how to write some code that can interact
    with Azure Event Hub. The following code is for an event producer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this code example, you will need a connection string. To get it, I accessed
    my hub instance, went to the Shared access policiesblade, and created a new policy
    with only the Sendpermission:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a0b3a67-6501-40f6-8f0b-92eb0953bc49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when I execute my application, I will see that it sends events successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a producer, now we need a consumer! I created an access policy once
    more, this time only for Listen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f49ddcb8-e621-42f8-bece-d9a0e8ef17fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a consumer you will need the `Microsoft.Azure.ServiceBus.EventProcessorHost`NuGet
    package. Once you install it, you will be able to implement `IEventProcessor`
    just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it has three methods: `OpenAsync`, `ProcessEventsAsync`,and `CloseAsync`.
    To be able to actually use such a processor, you have to initiate the whole event
    processing host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now when you run your application, you should be able to see incoming events.
  prefs: []
  type: TYPE_NORMAL
- en: Note that Event Processor Hostrequires you to create a Storage Account instance.
    It uses it to internally manage leases and offsets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can see the log coming from my processor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Note how a single receiver handles all 16 partitions I used for this particular
    hub. Now you can check what happens if I introduce another consumer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, `Partition 0` has been taken by another receiver, which will
    start processing events from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It will gradually take control of half of the available partitions until the
    load is balanced.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Hub security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered some topics regarding working with and developing applications
    using Azure Event Hub – now it is time to learn something more about the security
    features of this service. In the previous part of this chapter, you used shared
    access policies, which are the easiest options when you want to restrict access
    to a hub to some predefined operations (such as listening to events, sending them,
    or managing Event Hub). Now I will show you something more about the security
    model and restricting access to the whole namespace by IP filtering.
  prefs: []
  type: TYPE_NORMAL
- en: Event publishers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When creating an Event Hub namespace instance, you had to choose a tier – you
    could choose between Basicand Standardtier. Besides features such as consumer
    groups or message retention, Standardtier offers one more thing—the ability to
    create event publishers. An event publisheracts as a virtual endpoint for sending
    messages to a hub. In fact, it enhances security by combining an SAS token with
    the identity of a sender. To generate a token, you have to use the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute it correctly, you will need:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key name**: the name of an SAS policy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared access key**: the key generated for a policy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource**: the URL to a namespace in the following format: `sb://<NAMESPACE>.servicebus.windows.net/<EVENT_HUB_NAME>/publishers/<PUBLISHER_NAME>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Token lifetime**: how long a token will be valid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that `PUBLISHER_NAME` should be unique for each client.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you generate a token, it will be in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To be able to actually use it, you will have to use `EventHubSender`instead
    of `EventHubClient`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is because when using event publishers you can only send events—they cannot
    be used for other Event Hub operations.
  prefs: []
  type: TYPE_NORMAL
- en: Note that clients, in general, should not be aware of additional features that
    such generated SAS tokens supply. The most important thing is that they should
    not be generated by them; instead, you should introduce a service in which they
    can ask for a full connection string and use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when you have control over who or what can access Azure Event Hub, there
    is one more thing you can do—revoke publisher, so it cannot access a hub anymore.
    To do so, you will need the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once you revoke a publisher, when it tries to send an event, it will receive `PublisherRevokedException`.
  prefs: []
  type: TYPE_NORMAL
- en: IP filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is possible to restrict access to Azure Event Hub by introducing IP filters;
    this feature (as shown next) allows you to secure the whole namespace by knowing
    which IP addresses should be rejected. By default, the IP filter is empty, that
    means that Event Hub accepts any connection (so this is equivalent to setting
    it as approve `0.0.0.0/0` IP address):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18b13256-40f1-4c9f-b8b8-37c5c8e295f2.png)'
  prefs: []
  type: TYPE_IMG
- en: You can easily create a rule by clicking on + Add IP Filter Rule**:**
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bef7ea13-87d1-40e3-a7b2-b51279992be2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When I restrict access to my computer''s IP, I will get the following message
    when I try to send an event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can choose to either restrict access from some specific IP addresses or
    allow a particular subset.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Hub Capture feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is one feature of Azure Event Hub that requires an individual section
    itself to describe it in depth. It is capture, a functionality which allows you
    to automatically store events using a predefined storage solution (such as Azure
    Storageor Azure Data Lake) and process it further. Unfortunately, this particular
    feature is often misused as its use cases are not so obvious; additionally, the
    way it works might sometimes be unclear.
  prefs: []
  type: TYPE_NORMAL
- en: How Azure Event Hub Capture works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In common use cases for Event Hub, you need a **producer** and a **consumer**
    to fetch data and process it. Let''s consider the following scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b9ba131-0184-4ac7-a17e-72c044383b8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this scenario, we have two consumers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consumer 1 **for some generic processing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consumer 2 **for archiving events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also introduced **storage **for storing a log of events. As you can see,
    the downside of that solution is the fact that you need to maintain both consumers—two
    code bases and two instances. With Event Hub Capture, the scenario we are considering
    now will change a little bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c77fb58-5762-4e54-8616-b16b9ae0e3b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we no longer require additional consumers as it will be Event Hub Capture's
    responsibility to store data. You may wonder how storing data works in that scenario;
    in general, it is based on a time window which, when it ends, triggers a capture
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: It can be easily described using an example. Suppose you set your time window
    to 10 minutes; after that interval, all data which is stored within Azure Event
    Hubwill be captured and stored inside a selected database using **Apache Avro**
    format.
  prefs: []
  type: TYPE_NORMAL
- en: An important thing is Capture pricing; it costs € 0.085/hour per each throughput
    unit. It means that if you haveAzure Event Hubwith 1 TU and Capture enabled, you
    will pay 80 EUR instead of 18 EUR. With 2 TUs, it will be 160 EUR instead of 37
    EUR.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Event Hub Capture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Event Hub Capture is a feature of an individual Event Hub, not the whole namespace.
    To enable it, you need to go to your hub and search for the Captureblade.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when you enable Capture, you will see a full configuration of the feature,
    which  we will try to understand now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/399ae79d-86b8-4f6f-b110-49bd745ec7b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it contains the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time window**: It defines after how many minutes a capture is triggered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size window**: Alternatively, it is possible to trigger a capture after a
    window reaches the size limit. Whether it triggers because of time or size depends
    on which one reaches the limit first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capture Provider**: You can choose between Azure Storageand Azure Data Lake
    Store. The choice is yours as it does not imply any additional features or limits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Storage Container/Data Lake Store**: Depending on your choice, you
    will have to choose a different kind of a container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capture file name format**: This Event Hub feature has a predefined set of
    formats for how your files will be stored. Unfortunately, it is impossible to
    make it fully customizable as it must contain the `{Namespace}`, `{EventHub}`,
    `{PartitionId}`, `{Year}`, `{Month}`, `{Day}`, `{Hour}`, `{Minute}` and `{Second}`
    fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you are satisfied with your choice, you can save the form. After some
    time, your producers send data; you will see that data from each partition is
    captured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51b60ba0-5c07-4830-b41d-5aba485cf9d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What is more, they contain files with data in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This data can be easily converted to JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You will find more about Avro in the *Further reading*section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned many things about Azure Event Hub—how it works,
    what partitions are for, and how to leverage more advanced features such as consumer
    groups or the Event Hub Capture feature. I strongly encourage you to give it a
    try and play a little bit with this Azure service as it is a powerful tool for
    processing thousands of events per second. It is also pretty simple to use and
    does not require much time to get started.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about another service for processing many
    events, and additionally analyze and transform them in near real time—Azure Stream
    Analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are consumer groups for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many events can be processed in one second using 1 TU?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many partitions should you use for each Event Hub?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are TUs assigned to a namespace or a particular Event Hub?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three different permissions you can assign to an access policy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can an event publisher listen to incoming events using its token?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens if you have more consumers than partitions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The full documentation on Event Hub disaster recovery of can be found here: [https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-geo-dr](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-geo-dr).
  prefs: []
  type: TYPE_NORMAL
- en: Apache Avro Documentation can be found here: [https://avro.apache.org/](https://avro.apache.org/).
  prefs: []
  type: TYPE_NORMAL
