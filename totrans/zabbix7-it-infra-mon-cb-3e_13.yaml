- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bringing Zabbix to the Cloud with Zabbix Cloud Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the last chapter, we have prepared something special. As a long-time Zabbix
    user, the importance of cloud integration for tools such as Zabbix has not gone
    unnoticed. For some people, the cloud can be daunting, and thus with this chapter,
    I want to show you just how easy it can be to start working with the most popular
    cloud providers and Zabbix.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to start by talking about monitoring the **Amazon Web Services**
    (**AWS**) cloud with Zabbix. Then we will also see how the same things are done
    using Microsoft Azure so we can clearly see the differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'After going through these cloud products, we’ll also check out container monitoring
    with Docker, a very popular product that can also benefit greatly from setting
    up Zabbix monitoring. Follow these recipes closely and you will be able to monitor
    all of these products easily and work to extend the products using Zabbix. This
    chapter comprises the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up AWS monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Microsoft Azure monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your Zabbix Docker monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this chapter focuses on AWS, Microsoft Azure, and Docker monitoring, we are
    going to need a working AWS, Microsoft Azure, or Docker setup. The recipe does
    not cover how to set these up, so make sure to have your own infrastructure at
    the ready.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we are going to need our Zabbix server running Zabbix 7\. We will
    call this server `lar-book-rocky` in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files for this chapter from the following GitHub
    link: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter13](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter13).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up AWS monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of infrastructure is moving toward the cloud these days, and it’s important
    to keep an eye on this infrastructure as much as you would if it were your own
    hardware. In this recipe, we are going to discover how to monitor EC2 instances,
    **Relational Database Service** (**RDS**) instances, and **S3 buckets** with our
    Zabbix setup.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need our AWS cloud with at least one of the
    following three resources:'
  prefs: []
  type: TYPE_NORMAL
- en: EC2 instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RDS instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S3 buckets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, we will also need our Zabbix server, which we’ll call `lar-book-rocky`
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Amazon CloudWatch is not free, so you will incur costs. Make sure you
    check out the Amazon pricing for AWS CloudWatch before proceeding: [https://aws.amazon.com/cloudwatch/pricing/](https://aws.amazon.com/cloudwatch/pricing/).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Setting up AWS monitoring might seem like a daunting task at first, but once
    we get the hang of the technique, it’s not that difficult. Let’s waste no more
    time and check out one of the methods we could use:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by logging in to our Zabbix server with the hostname **lar-book-rocky**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to your AWS account by navigating to the following URL in your browser:
    [https://aws.amazon.com/](https://aws.amazon.com/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On this page, click on **Sign In to** **the Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once logged in, we can navigate to **My Security Credentials**, which should
    be listed in your user profile in the top-right corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – AWS web frontend user profile](img/B19803_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – AWS web frontend user profile
  prefs: []
  type: TYPE_NORMAL
- en: On the next page, on the left-hand side, click on **Users** under **Access management**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create a new dedicated Zabbix monitoring user by clicking on the **Add
    users** button. Add the user as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – AWS new user](img/B19803_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – AWS new user
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Next**, and at the second step, if you’d like, you can add the user
    to a group to inherit some permissions, copy them, or set up a custom policy.
    I’ll skip this step for now by clicking **Next** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on **Create** to finish setting up this user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the user from the list to edit it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.3 – AWS – edit new Zabbix user](img/B19803_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – AWS – edit new Zabbix user
  prefs: []
  type: TYPE_NORMAL
- en: In the list, we can see there are no policies assigned to this user yet, so
    let’s create a new policy just for Zabbix monitoring.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Create inline policy** from the drop-down list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.4 – AWS – edit new Zabbix user policies](img/B19803_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – AWS – edit new Zabbix user policies
  prefs: []
  type: TYPE_NORMAL
- en: 'Then click on **JSON** to define the new policy in the JSON format. It should
    look like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.5 – AWS – edit new Zabbix user – add new policy](img/B19803_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – AWS – edit new Zabbix user – add new policy
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out Zabbix’s integrations page for the latest required permissions for
    the AWS template you’ll be using. Different templates need different permissions,
    and new permissions might be added later to incorporate new features or changes
    on the AWS side: [https://www.zabbix.com/integrations/aws](https://www.zabbix.com/integrations/aws).'
  prefs: []
  type: TYPE_NORMAL
- en: You can now click on **Next** and name your policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.6 – AWS – edit new Zabbix user – add new policy name](img/B19803_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – AWS – edit new Zabbix user – add new policy name
  prefs: []
  type: TYPE_NORMAL
- en: Then, click on **Create policy** at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the permissions out of the way, let’s make sure we will be able to authenticate
    with this user account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Still on the same page after creating the new policy, scroll down to **Access
    keys (access key ID and secret access key)** for this new user. This will show
    you the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – AWS access keys page](img/B19803_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – AWS access keys page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Create access key** to create a new access key. You should see the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 13.8 – AWS access key creati\uFEFFon](img/B19803_13_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – AWS access key creation
  prefs: []
  type: TYPE_NORMAL
- en: Select a reason and click on **Next**. Make sure you understand the possible
    security implications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name your new access key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.9 – AWS access key creation naming](img/B19803_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – AWS access key creation naming
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, click on **Create access key** and store the access key and secret
    access key somewhere safe (such as a password vault). After you’ve done that,
    click on **Done**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.10 – AWS access key creation – copy keys](img/B19803_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – AWS access key creation – copy keys
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s finally move on to Zabbix. Log in to your Zabbix GUI and navigate
    to **Data collection** | **Hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new host by clicking on **Create host** in the top-right corner. We’ll
    create a new host called **lar-book-aws** and add the **AWS by HTTP** template
    and a host group such as **Cloud**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.11 – New AWS host](img/B19803_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – New AWS host
  prefs: []
  type: TYPE_NORMAL
- en: Before adding the host, make sure to go to **Macros**. We have to fill in a
    few macros to make this new template work. Make sure to fill out the keys you
    saved in *step 19* and fill them in as in the following screenshot. Also, make
    sure to add the region in which you want to discover your information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.12 – New AWS host macros](img/B19803_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – New AWS host macros
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In my case, all of the AWS resources I am running are within the same AWS regions.
    In a lot of production environments, this isn’t the case. For those environments,
    you might want to create a Zabbix host per region to be able to discover all of
    your resources. All you have to do is define the **{$AWS.REGION}** macro uniquely
    per host.
  prefs: []
  type: TYPE_NORMAL
- en: Now click on **Add** to add this new host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If done correctly, your AWS resources will be added once the discovery rule
    has been executed, as we can see in the following screenshot for some of my EC2
    instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 13.13 – Discovered EC2 instances\uFEFF\uFEFF](img/B19803_13_13.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – Discovered EC2 instances
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve done all the setup work, let’s have a look at what we have actually
    done. Zabbix 7.0 contains out-of-the-box cloud monitoring templates, which we’ve
    utilized to monitor some of the most common AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: The templates provided by Zabbix use a fairly extensive piece of JavaScript
    code to execute API calls toward AWS, parse through the received data, and then
    put that into a JSON array that Zabbix’s low-level discovery understands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the template at **Data collection** | **Templates** and then opening
    **Discovery** for the **AWS by HTTP** template, we can see three discovery rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.14 – AWS by HTTP discovery rules](img/B19803_13_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – AWS by HTTP discovery rules
  prefs: []
  type: TYPE_NORMAL
- en: 'These three rules discover the EC2 instances, RDS instances, and S3 buckets
    in AWS and use **Host prototypes** to create a new host for each instance or bucket
    found. Those created hosts will then in turn use their own templates to get the
    actual statistics from those instances or buckets, as we can see in the template
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.15 – The other three AWS templates in Zabbix 7.0](img/B19803_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – The other three AWS templates in Zabbix 7.0
  prefs: []
  type: TYPE_NORMAL
- en: In my case, only two EC2 instances were discovered, and as such, those two hosts
    were added with the **AWS EC2 by HTTP** template, as seen in *Figure 13**.13*.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the information is then collected by **Script** item types with their
    own unique JavaScript code. We can see a piece of the code in the following screenshot,
    where we make a call to AWS to a specific URL (underlined) with headers for things
    such as authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.16 – AWS template call](img/B19803_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – AWS template call
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to edit this JavaScript code to create entirely new calls
    to retrieve your own data and create different types of monitoring, as well as
    simply extending the out-of-the-box templates.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It takes time to start monitoring with AWS CloudWatch as we need a good understanding
    of the AWS CLI commands with the use of CloudWatch. When you use the templates
    provided by Zabbix as a basis, you have a solid foundation on which to build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to check out the AWS documentation for more information on the commands
    that we can use, using the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.aws.amazon.com/cli/latest/reference/#available-services](https://docs.aws.amazon.com/cli/latest/reference/#available-services)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Microsoft Azure monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Microsoft Azure cloud is a big player in the cloud market these days and
    it’s important to keep an eye on this infrastructure as much as you would your
    own hardware. In this recipe, we are going to discover how to monitor Azure instances
    with our Zabbix setup.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we are going to need our Azure cloud with at least one of the
    following resources in it already.
  prefs: []
  type: TYPE_NORMAL
- en: Cosmos DB for MongoDB databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft SQL databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recipe does not cover how to set up any of these resources, so make sure
    to do this in advance. We will also need our Zabbix server, which we’ll call `lar-book-rocky`
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Azure monitoring, we face some of the same techniques as we do for AWS
    monitoring. It can become a bit daunting if we dive into customization, but setting
    up the initial monitoring is a lot easier than it looks. Let’s check it out:'
  prefs: []
  type: TYPE_NORMAL
- en: With Azure monitoring, first we are going to need to set up our authentication
    correctly. To do so, navigate to [portal.azure.com](http://portal.azure.com) and
    log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the search bar, search for **Enterprise applications** and select it from
    the list. Click on **New application**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Azure enterprise application creation](img/B19803_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – Azure enterprise application creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Then click on **Create your** **own application**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.18 – Azure enterprise application creation – creating your own
    application](img/B19803_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – Azure enterprise application creation – creating your own application
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where we have to name our application. Name it something appropriate,
    as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.19 – Azure enterprise application creation – setting the name of
    your application](img/B19803_13_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – Azure enterprise application creation – setting the name of your
    application
  prefs: []
  type: TYPE_NORMAL
- en: 'Then click **Create** at the bottom of the page to finish creating a new empty
    application. It will show you the application ID on this page. Make sure to write
    it down as we will need it later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.20 – Azure enterprise application overview page](img/B19803_13_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.20 – Azure enterprise application overview page
  prefs: []
  type: TYPE_NORMAL
- en: With the application created, let’s immediately dive into setting up the credentials
    for it. To do so, use the Azure search bar at the top and search for **Azure Active
    Directory**, then select it from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the left-hand sidebar, you should see **App registrations**. We are going
    to create a new registration, so click on **New registration**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Azure enterprise application – App registrations](img/B19803_13_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – Azure enterprise application – App registrations
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply give your registration a new name and keep the rest of the settings
    as the default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Azure enterprise application – new app registration](img/B19803_13_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – Azure enterprise application – new app registration
  prefs: []
  type: TYPE_NORMAL
- en: Click **Register** to finish this registration. This will redirect you to your
    newly created registration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let’s add the authentication. Go to **Certificates & secrets** in the left-hand
    sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We’ll create a new client secret here. To do so, click on **New** **client
    secret**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.23 – Azure enterprise application – app registration secrets](img/B19803_13_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.23 – Azure enterprise application – app registration secrets
  prefs: []
  type: TYPE_NORMAL
- en: 'All we have to do now is name the secret and set an expiry time period. Keep
    in mind that a shorter expiry means more administrative overhead. Faster expiry
    could mean better security as there is less time to potentially leak (or use once
    leaked) the secrets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.24 – Azure enterprise application – app registration secret creation](img/B19803_13_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.24 – Azure enterprise application – app registration secret creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click on **Add** to finish setting up the new secret. It will show you
    the values once. Make sure to store them somewhere safe, such as in a password
    vault:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.25 – Azure enterprise application secrets](img/B19803_13_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.25 – Azure enterprise application secrets
  prefs: []
  type: TYPE_NORMAL
- en: With the authentication out of the way, there is only one thing left to do.
    We need to provide the correct permissions to this new enterprise application.
    To do so, search for **Subscriptions** in the Azure search bar at the top of the
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For things such as Azure virtual machine and database instance monitoring,
    you will need to assign (read) permissions to your entire subscription. Find the
    subscription where your resources are located. Mine is called **OICTS Azure**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.26 – Azure subscriptions](img/B19803_13_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.26 – Azure subscriptions
  prefs: []
  type: TYPE_NORMAL
- en: Now is also a great time to write down the subscription ID, as we will need
    it in a later step!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your subscription, and then from the list, select **Access control (IAM)**.
    Then, click on **Add** **role assignment**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.27 – Azure subscription – role assignment](img/B19803_13_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.27 – Azure subscription – role assignment
  prefs: []
  type: TYPE_NORMAL
- en: On the next page, select the **Reader** role from the list and then press **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the **Members** part of the creation process, click on **+ Select members**.
    We’ll add the **Zabbix book monitoring** member. It will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.28 – Azure subscription – role assignment members](img/B19803_13_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.28 – Azure subscription – role assignment members
  prefs: []
  type: TYPE_NORMAL
- en: Now click on **Review + assign** and the permissions will be added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There’s one more thing to do in the Azure portal. In the search bar at the top
    of the page, type in **Tenant properties** and select it from the list. On this
    page, make sure to note down the tenant ID as we will need it shortly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the application set up, the authentication created, and the permissions
    assigned, let’s move on to the Zabbix frontend. Navigate to **Data collection**
    | **Hosts** and create a new host by clicking on **Create host** in the top-right
    corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.29 – Azure tenant properties](img/B19803_13_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.29 – Azure tenant properties
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following host, with the name **lar-book-azure**, the **Azure by
    HTTP** template, and a host group such as **Cloud**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.30 – New Azure monitoring host in Zabbix](img/B19803_13_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.30 – New Azure monitoring host in Zabbix
  prefs: []
  type: TYPE_NORMAL
- en: 'Before adding the host, switch to the **Macros** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.31– New Azure monitoring host macros in Zabbix](img/B19803_13_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.31– New Azure monitoring host macros in Zabbix
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have to add at least the following macros here:'
  prefs: []
  type: TYPE_NORMAL
- en: For **{$AZURE.APP.ID}**, fill in the application ID from *step 5*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **{$AZURE.PASSWORD}**, fill in the value under the **Value** column from
    *step 13*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **{$AZURE.SUBSCRIPTION.ID}**, fill in the subscription ID from *step 15*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **{$AZURE.TENANT.ID}**, fill in the tenant ID from *step 22*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That’s it; you can now add the new host by clicking on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the discovery rule runs for the first time, your discovered instances
    will be added as new hosts, as you can see in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.32 – New Azure-discovered virtual machine](img/B19803_13_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.32 – New Azure-discovered virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: That’s it, your automated Azure monitoring is now working as expected. Let’s
    have a look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’ve followed the recipe on AWS monitoring, you might think that Azure
    monitoring works in the exact same way. To an extent, that is true; the monitoring
    is completely based on API calls made from Zabbix toward the Azure API.
  prefs: []
  type: TYPE_NORMAL
- en: What is different between AWS and Azure is of course going to be the JavaScript
    scripts used in the Zabbix items on the templates.
  prefs: []
  type: TYPE_NORMAL
- en: The templates provided by Zabbix 7.0 out of the box use a fairly extensive piece
    of JavaScript code to execute API calls toward Azure, parse through the received
    data, and then put that into a JSON array that Zabbix low-level discovery understands.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the template found at **Data collection** | **Templates** and then
    opening **Discovery** for the **Azure by HTTP** template, we can see six discovery
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.33 – Azure by HTTP discovery rules](img/B19803_13_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.33 – Azure by HTTP discovery rules
  prefs: []
  type: TYPE_NORMAL
- en: 'These six rules discover the different types of Azure database instances and
    virtual machines and use host prototypes to create a new host for each instance
    found. The only difference here is that storage accounts won’t use host prototypes
    but item prototypes to supply you with information. The hosts created by host
    prototypes will then in turn use their own templates to get the actual statistics
    from those instances or buckets, as we can see in the template list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.34 – The other Azure templates in Zabbix 7.0](img/B19803_13_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.34 – The other Azure templates in Zabbix 7.0
  prefs: []
  type: TYPE_NORMAL
- en: In my case, only one virtual machine was discovered, and as such, that host
    was added with the **Azure Virtual Machine by HTTP** template, as seen in *Figure
    13**.32*.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the information is then collected by **Script** item types with their
    own unique JavaScript code. We can see a piece of the code in the following screenshot,
    where we make a call to Azure to a specific URL (underlined):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.35 – Azure template call](img/B19803_13_35_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.35 – Azure template call
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to edit this JavaScript code to create entirely new calls
    to retrieve your own data and create different types of monitoring, as well as
    simply extending the out-of-the-box templates.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can discover way more from Azure using the method applied in this recipe.
    The JavaScript we employ is used to get metrics from Azure, which can be edited
    to gather almost any metric from the Azure API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the Azure API documentation for more information on the metrics retrieved
    using JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/rest/api/azure/](https://learn.microsoft.com/en-us/rest/api/azure/)'
  prefs: []
  type: TYPE_NORMAL
- en: Building your Zabbix Docker monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ever since the release of Zabbix 5, monitoring our Docker containers became
    a lot easier with the introduction of Zabbix agent 2 and plugins. Using Zabbix
    agent 2 and Zabbix 7, we are able to monitor our Docker containers out of the
    box.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to see how to set this up and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we require some Docker containers. We won’t go over the setup
    of Docker containers, so make sure to do this yourself. Furthermore, we are going
    to need Zabbix agent 2 installed on the host running these Docker containers.
    Zabbix agent does not work in relation to this recipe; Zabbix agent 2 is required.
  prefs: []
  type: TYPE_NORMAL
- en: We also need our Zabbix server to actually monitor the Docker containers. We
    will call our Zabbix server `zbx-home`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s waste no more time and dive right into the process of monitoring your
    Docker setup with Zabbix:'
  prefs: []
  type: TYPE_NORMAL
- en: First things first, log in to the Linux CLI of the host running your Docker
    container(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the repository for installing Zabbix components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, install Zabbix agent 2 with the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Following installation, make sure to edit the configuration file of the newly
    installed Zabbix agent 2 with the help of the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the line that says **Server** and add your Zabbix server IP address to
    the file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to add the **zabbix** user to the Docker group by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to save the file and then restart Zabbix agent 2 with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, navigate to your Zabbix server frontend. Go to **Data collection** | **Hosts**
    and click on the blue **Create** **host** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create a new host called **Docker containers** and make sure to link the
    **Docker by Zabbix agent 2** template to the host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Fig\uFEFFure 13.36 – New Docker host configuration](img/B19803_13_36.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 13.36 – New Docker host configuration
  prefs: []
  type: TYPE_NORMAL
- en: That’s all there is to monitoring Docker containers with the Zabbix server.
    Let’s now see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker monitoring in Zabbix these days is easy, due to the new Zabbix agent
    2 support and default templates. On occasion, though, a default template does
    not cut it, so let’s break down the items used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost all the items we can see on our host are dependent items, most of which
    are dependent on the master item, `Docker: Get info`. This master item is the
    most important item on our Docker template. It executes the `docker.info` item
    key, which is built into the new Zabbix agent 2\. This item retrieves a list with
    all kinds of information from our Docker setup. We use the dependent items and
    preprocessing to get the values we want from this master item.'
  prefs: []
  type: TYPE_NORMAL
- en: The Docker template also contains two Zabbix discovery rules, one to discover
    Docker images and one to discover Docker containers. If we check out the discovery
    rule for Docker containers called `Containers discovery`, we can see what happens.
    Our Zabbix Docker host will use the `docker.containers.discovery` item key to
    find every container and put this in the `{#NAME}` LLD macro. In the item prototypes,
    we then use this `{#NAME}` LLD macro to discover statistics with another master
    item, such as `docker.container_info`. From this master item, we then use the
    dependent items and preprocessing again to include this information in other item
    prototypes as well. We are now monitoring a bunch of statistics straight from
    our Docker setup.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to get values from Docker that aren’t in the default template, check
    out the information collected with the master items on the template. Use a new
    dependent item (prototype) and then use preprocessing to get the correct data
    from the master item.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to learn more about the Zabbix agent 2 Docker item keys, check
    out the supported item key list for Zabbix agent 2 in the Zabbix documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2?s[]=docker](https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2?s%5B%5D=docker).'
  prefs: []
  type: TYPE_NORMAL
