["```\n$ git status\nOn branch master\nChanges to be committed:\n (use \"git reset HEAD <file>...\" to unstage)\n\nnew object: Lamps\n\nChanges not staged for commit:\n (use \"git add <file>...\" to update what will be committed)\n (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n modified: Couch\n modified: Television\n```", "```\n$ git commit -m 'Beautiful New Lamps'\n\n[master 0b1ae47] Beautiful New Lamps\n 1 object changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 Lamps\n```", "```\nChanges not staged for commit:\n (use \"git add <file>...\" to update what will be committed)\n (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n modified: init.pp\n```", "```\n$ git clone git@github.com:puppetlabs/puppetlabs-ntp.git\nCloning into 'puppetlabs-ntp'...\nremote: Counting objects: 7522, done.\nremote: Compressing objects: 100% (13/13), done.\nremote: Total 7522 (delta 5), reused 18 (delta 5), pack-reused 7504\nReceiving objects: 100% (7522/7522), 1.64 MiB | 0 bytes/s, done.\nResolving deltas: 100% (4429/4429), done.\n```", "```\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n (use \"git add <file>...\" to update what will be committed)\n (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n modified: init.pp\n\n no changes added to commit (use \"git add\" and/or \"git commit -a\")\n```", "```\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n (use \"git reset HEAD <file>...\" to unstage)\n\n modified: manifests/init.pp\n```", "```\n$ git commit -m 'Simple Clarification Comment added to init.pp feature'\n[master 4538890] Simple Clarification Comment added to init.pp feature\n 1 file changed, 1 insertion(+)\n```", "```\ncommit 45388902ef5cf125ea2109197e115f050d603406 (HEAD -> master)\nAuthor: Ryan Russell-Yates <rary@packt.com>\nDate: Sun Apr 8 16:28:26 2018 -0700\n\nSimple Clarification Comment added to init.pp feature\n```", "```\n$ git remote -v\norigin git@github.com:puppetlabs/puppetlabs-ntp.git (fetch)\norigin git@github.com:puppetlabs/puppetlabs-ntp.git (push)\n```", "```\nmod 'ourapp',\n  :git => 'git@git.ourcompany.com:ourapp.git',\n  :ref => '1.2.2',\n```", "```\nforge \"https://forge.puppet.com\"\n\n# Forge Modules\n# Always take latest version of NTP, notice no version listed\nmod \"puppetlabs/ntp\"\n\n# Specific versions of stdlib and nginx.\nmod \"puppetlabs/stdlib\", \"4.25.1\"\nmod \"puppetlabs/nginx\", \"0.11.0\"\n\n# Modules from Git\n\n# Pointing to Master Branch\nmod 'ourapp',\n  :git    => 'git@git.ourcompany.com:ourapp.git',\n  :branch => 'master',\n\n# Pointing to the 1.2.2 tag\nmod 'ourapp2',\n  :git => 'git@git.ourcompany.com:ourapp2.git',\n  :tag => '1.2.2',\n\n# pointing to an explicit git commit\nmod 'ourapp3',\n  :git    => 'git@git.ourcompany.com:ourapp3.git',\n  :commit => '0b1ae47d7ff83489299bb7c9da3ab7f4ce7e49a4',\n```", "```\n---\nversion: 5\n hierarchy:\n - name: \"Per-node data\"\n path: \"nodes/%{trusted.certname}.yaml\"\n- name: \"Per-environment data\"\n path: \" %{server_facts.environment}.yaml\"\n- name: Common\n path: common.yaml\n```", "```\n├── data\n│   ├── common.yaml\n│   ├── development.yaml\n│   ├── nodes\n│   │   ├── server1.ourcompany.net.yaml\n│   │   └── server2.ourcompany.net.yaml\n│   ├── preprod.yaml\n│   ├── production.yaml\n│   └── staging.yaml\n└── hiera.yaml\n```", "```\nnode 'application.company.com' { include role::application }\n```", "```\n#This section ensures that anything listed in Hiera under classes can be used as classification\n\n$classes = lookup('classes', Array[String], 'unique')\n$exclusions = lookup('class_exclusions', Array[String], 'unique')\n$classification = $classes - $exclusions\n\n$classification.include\n```", "```\n# common.yaml\n---\nclasses:\n  - profile::baseline\n```", "```\n# nodes/snowflake.ourcompany.com.yaml\n---\nclasses:\n  - profile::partners::baseline\n  - role::ourapp\nclass_exclusions:\n  - profile::baseline\n```", "```\n# Set Default Package Provider to Chocolatey on Windows\n\nif $::kernel = 'windows' {\n  Package {\n    provider => 'chocolatey'\n  }\n}\n```", "```\n# Extend Modulepath\n# Using $basemodulepath to ensure all default modulepaths are still preserved\n# This will now search for modules at $codedir/site, allowing us to place modules\n# directly into the control repo. Often used for Roles and Profiles\nmodulepath = site:$basemodulepath\n# Set version that appears during a Puppet run with a custom script\n# Contained in base on control repo config_version = 'scripts/version.sh'\n```", "```\n$ tree control-repo\ncontrol-repo\n├── data\n│   ├── common.yaml\n│   ├── development.yaml\n│   ├── nodes\n│   │   ├── server1.ourcompany.net.yaml\n│   │   └── server2.ourcompany.net.yaml\n│   ├── preprod.yaml\n│   ├── production.yaml\n│   └── staging.yaml\n├── environment.conf\n├── hiera.yaml\n├── manifests\n│   └── site.pp\n└── site\n ├── profile\n │   └── manifests\n │   └── application.pp\n └── role\n └── manifests\n └── webserver.pp\n```", "```\n# Create SSH Directory\n$ sudo mkdir -p /etc/puppetlabs/puppetserver/ssh\n\n# Generate SSH Key - With No Password\n$ sudo ssh-keygen\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/var/root/.ssh/id_rsa): /etc/puppetlabs/puppetserver/ssh/id-control_repo.rsa\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /etc/puppetlabs/puppetserver/ssh/id-control_repo.rsa.\nYour public key has been saved in /etc/puppetlabs/puppetserver/ssh/id-control_repo.rsa.pub.\nThe key fingerprint is:\nSHA256:Random key root@server\nThe key's randomart image is:\n+---[RSA 2048]----+\nRandom Art\n+----[SHA256]-----+\n\n# Ensure pe-puppet owns the directory and the keys\n$sudo chown -R pe-puppet:pe-puppet /etc/puppetlabs/puppetserver/ssh\n```", "```\nclass profile::pe_master {\n\n  sshkey {'codemanager':\n    ensure => present,\n    key    => 'Long String of Private Key',\n    target => '/etc/puppetlabs/puppetserver/ssh/id-control_repo.rsa',\n    type   => 'ssh-rsa',\n  }\n\n  class puppet_enterprise::profile::master {\n    code_manager_auto_configure => true,\n    r10k_remote                 => 'git@git.ourcompany.com:control-repo.git',\n    r10k_private_key            => '/etc/puppetlabs/puppetserver/ssh/id-control_repo.rsa',\n  }\n\n}\n\n```", "```\n#puppet-access.conf\n{\n  \"service-url\": \"https://pemaster.ourcompany.com:4433/rbac-api\",\n  \"certificate-file\": \"/etc/puppetlabs/puppet/ssl/certs/ca.pem\"\n}\n```", "```\n#puppet-code.conf\n{\n  \"service-url\": \"https://pemaster.ourcompany.com:8170/code-manager\",\n  \"cacert\": \"/etc/puppetlabs/puppet/ssl/certs/ca.pem\"\n}\n```", "```\nclass myapp::role::app_server {\n  # Global Baseline used by entire organization\n  include profile::baseline\n  # Profile generated specifically by myapp team\n  include myapp::profile::application\n}\n\nclass myapp::profile::application {\n  # Profile has some custom code from the Myapp Team\n  include myapp::application\n  # Profile also uses the standard Webserver profile of the organization\n  include profile::webserver\n}\n```", "```\n$ tree control-repo\ncontrol-repo\n├── hiera.yaml\n├── environment.conf\n├── Puppetfile\n├── data\n│   ├── common.yaml\n│ . └── datacenter\n│       ├── us.yaml\n│       ├── uk.yaml\n│       └── can.yaml\n└── manifests\n └── site.pp \n```", "```\n$ tree team\nteam\n├── README.md\n├── hiera.yaml\n├── data\n│   ├── common.yaml\n│   └── os\n│       ├── RedHat.yaml\n│       ├── Ubuntu.yaml\n│       └── Windows.yaml\n│   └── datacenter\n│       ├── us.yaml\n│       ├── uk.yaml\n│       └── can.yaml\n├── files\n├── manifests\n│ ├── profile\n│ │ └── myapp.pp #team::profile::myapp\n│ └── role\n│ └── myapp.pp #team::role::myapp which includes team::profile::myapp\n├── metadata.json\n└── templates\n```"]