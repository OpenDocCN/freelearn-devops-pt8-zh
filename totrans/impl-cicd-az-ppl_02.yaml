- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Build Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we laid the groundwork for your Azure DevOps journey
    by preparing the build and deployment agents, pools, and deployment groups and
    explaining how to use them. This chapter will take the next step in helping you
    understand how to create your first pipeline. We will explore the fundamentals
    of using jobs, tasks, triggers, and stages and how to create build pipelines based
    on these concepts. This will enable you to streamline your workflow, minimize
    errors, and enhance productivity. It will also help make collaboration more efficient,
    and you’ll be better prepared to implement practices such as CI/CD.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a build pipeline with a single job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multiple jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating stages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a build pipeline with a single job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After preparing the build and deployment agent in the previous chapter, this
    section will explain how to create a first **build pipeline** on the **Azure DevOps**
    portal. Before creating a first build pipeline, you must create an Azure repo
    for the source code repository. There are two options to create a build pipeline
    – the **classic editor**, which is the GUI editor for dragging and dropping and
    dropping the components to build a pipeline, and **Yet Another Markup Language**
    (**YAML**), which customizes the advanced Azure pipeline by the markup language.
    In this chapter, we will focus on using the classic editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create an empty job to see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on your project name from the web portal, and then click **Pipelines**
    | **Create Pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Creating a new pipeline](img/B18875_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Creating a new pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Use the** **classic editor**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Using the classic editor](img/B18875_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Using the classic editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Azure Repos Git**, a source code repository that is an existing service
    under Azure DevOps. This is quite compatible with other Azure DevOps services,
    such as Azure Pipelines, that are used in this demo. Select the options shown
    in the following screenshot for **Team project**, **Repository**, and **Default
    branch for manual and scheduled builds** to initiate an Azure pipeline, and then
    click on **Continue**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Choosing the default branch](img/B18875_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Choosing the default branch
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Empty Job**. The template provides a single job that contains tasks
    for your pipeline. We will start with an empty job so that you can learn the basic
    settings from the menu before we select all the templates that will be suitable
    for each project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Selecting the build template](img/B18875_02_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Selecting the build template
  prefs: []
  type: TYPE_NORMAL
- en: 'The other options shown in the screenshot include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**.NET Desktop**: The template for building pipelines to build and test .NET
    desktop solutions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android**: The template for building pipelines to build and test Android
    APK files for Android applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET**: The template for building pipelines to build and test ASP.NET
    web applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Web App for ASP.Net**: The template for building pipelines to build,
    test, and deploy ASP.NET to Azure Web App services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the drop-down menu for **Save &** **queue**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Saving a build pipeline](img/B18875_02_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Saving a build pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'On the following screen, you can select a folder to save to and add a comment.
    Click on **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Confirming a build pipeline](img/B18875_02_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Confirming a build pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking **Save**, a list of all the build pipelines will appear, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – The Pipelines dashboard](img/B18875_02_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – The Pipelines dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'After you create a simple build pipeline, you can test it by clicking on the
    pipeline you want and clicking **Run pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Running the pipeline](img/B18875_02_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Running the pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set specific options before you run a build pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Agent pool**, where you can choose a Microsoft-hosted agent or a self-hosted
    agent'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Specification**, where you can choose an agent OS to run a build pipeline'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Branch/tag**, where you can choose a build pipeline to run'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – The Run pipeline options](img/B18875_02_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – The Run pipeline options
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can see the build result in detail and some summary information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.10 – A detailed build result](img/B18875_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – A detailed build result
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see the latest status on the build pipeline row:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – A pipeline with the build result](img/B18875_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – A pipeline with the build result
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to use the classic editor to make it easy to
    create a new build pipeline. In the next section, we will describe how to create
    tasks in this build pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will teach you how to create **tasks** under a job. A build pipeline
    will contain one or more jobs, and each job will contain one or more tasks. In
    the previous section, you created a build pipeline that contains only one job.
    Follow these steps to create a task:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit a build pipeline by clicking on three dots symbols, and then on **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Editing a build pipeline](img/B18875_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Editing a build pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'After you edit a build pipeline, click on `Command line` in the search box,
    and then click on **Add**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Adding a command-line task](img/B18875_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Adding a command-line task
  prefs: []
  type: TYPE_NORMAL
- en: Click on the `First Command` `Line Task`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo "Hello` `First Task"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Entering detail on the Command line task](img/B18875_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Entering detail on the Command line task
  prefs: []
  type: TYPE_NORMAL
- en: Then, click **Save &** **queue**.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you click on **Save & queue**, you will see the confirmation page. Then,
    click **Save** **and run**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Saving and running a build pipeline](img/B18875_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Saving and running a build pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Before saving, however, you can also select **Advanced options**. Here, you
    can enter variables while you are building a pipeline instead of preparing them
    in advance. You can see the available options in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Advanced configuration](img/B18875_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Advanced configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at these options more closely:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Advanced**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Working Directory**: You can enter any path to run the command line task.
    If you don’t enter any path, it will run on the root path.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fail on Standard Error**: Turn on this feature when you need to stop a task
    if any error happens inside it. For example, if you run a command to read an email
    from the internet and the internet disconnects, this task will display errors.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control Options**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enabled**: Turn this on when you need to enable control options:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continue on error**: Turn on when you need to continue running the next task
    if it finds an error.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of retries if task failed**: Enter the number of times you need to
    rerun a task after it fails.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timeout**: Enter the number of minutes this task will run for before it is
    canceled.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run** **this task**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only when all previous tasks** **have succeeded**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Even if a previous task has failed, unless the build** **was canceled**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Even if a previous task has failed, even if the build** **was canceled**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only when a previous task** **has failed**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom conditions**: This is where you can create a rule if the aforementioned
    options don’t match your needs.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment Variables**: You can add additional variables when you run the
    command. For example, you can add a URL when you run this command to download
    the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Output Variables**: You can assign the output from this task and carry it
    to the next task. For example, you can pass the token login in the output variable
    after this task to log in successfully to the next task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you save these options, you can see the new history of a build pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Displaying the history of a build pipeline](img/B18875_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Displaying the history of a build pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the row where you want to see the task details. Here, you will see
    the output of the running command for each task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.18 – The job status](img/B18875_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – The job status
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Agent job 1** to see the job details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Job details with tasks](img/B18875_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Job details with tasks
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to create a task under a build pipeline and
    view the job status and task details. This can help you ensure that all the tasks
    are as expected. The next section will teach you how to create multiple jobs in
    a build pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, when you create a build pipeline for an application that requires
    building its code for different operating systems simultaneously, you need to
    create another job for that purpose. There are two job types – **agent job** and
    **agentless job**. An agent job is a job that needs to run on an agent or target
    computer, and an agentless job will run on the Azure DevOps application server
    directly. The following steps describe how to create other agent jobs under a
    build pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit a build pipeline by clicking on the **…** symbol and then on **Edit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Editing a build pipeline](img/B18875_02_20..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Editing a build pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **...** button and select **Add an** **agent job**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Adding an agent job](img/B18875_02_21..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Adding an agent job
  prefs: []
  type: TYPE_NORMAL
- en: Click on `Agent` `job 2`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Agent pool**: **Azure Pipelines**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Agent** **Specification**: **ubuntu-latest**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Adding another job](img/B18875_02_22..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Adding another job
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `Command line` in the search box, and then click the **Add** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Adding a new task](img/B18875_02_23..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Adding a new task
  prefs: []
  type: TYPE_NORMAL
- en: Click on the row with the `2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Second Command` `Line Task.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo "Hello Second Task on Linux"`. This will print out this text on the resultant
    page after you have finished running a pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.24 – Updating the second command line task](img/B18875_02_24..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – Updating the second command line task
  prefs: []
  type: TYPE_NORMAL
- en: 'After you click **Save & queue**, you will see the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.25 – The result of two agent jobs](img/B18875_02_25..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – The result of two agent jobs
  prefs: []
  type: TYPE_NORMAL
- en: Pro tip
  prefs: []
  type: TYPE_NORMAL
- en: For error handling, when you have more than one agent Job, you can set up parameters
    in advanced configuration to ensure that **Agent job 2** will run if **Agent job
    1** is completed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at some of the advanced options available in the **Agent job** properties,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26 – Advanced options for an agent job](img/B18875_02_26..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – Advanced options for an agent job
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at these options in some detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Agent selection**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent pool**: Select a custom or default agent to build jobs.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Demands**: Add condition parameters to allow only agents that meet conditions
    to run this agent job. For example, only a Linux agent can run this job.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execution plan**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parallelism**: The options available here are the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**None**: No jobs will run parallelly.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-configuration**: Turn this on when you have different configurations
    to run for each agent job. For example, you may need to run a job test on three
    browsers, so you will need Chrome, Edge, and Firefox browsers.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-agent**: Turn this on when you have many agents and need to use them
    to run an agent job.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timeout**: Enter a minute number; an agent job is allowed to execute on the
    agent before being canceled.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Job cancel timeout**: Enter a number of minutes before the agent job is canceled
    after getting a cancel request from the agent.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies**: You can select a previous agent job when you need it completed
    successfully before running another agent job.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Additional options**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow scripts to access the OAuth token**: turn on when you need to use the
    OAuth token to pass to another agent job by using REST API.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run** **this job**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only when all previous jobs** **have succeeded**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Even if a previous job** **has failed**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only when a previous job** **has failed**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom condition using variable expressions**: For example, **succeeded()**
    means the agent job will run if the previous one completely successfully'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, you learned how to create a second job to separate the Linux
    operation system. Two jobs can run simultaneously, and this use case is suitable
    for running a task in different operating systems without depending on each other,
    such as when you create a build pipeline that needs to deploy your application
    to Google Play and Apple Store simultaneously without running in sequence.
  prefs: []
  type: TYPE_NORMAL
- en: The following section will teach you how to create a trigger to make a build
    pipeline run automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Creating triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will teach you how to create a **trigger** – that is, make a build
    pipeline run automatically when you push your code to a specific branch:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit a build pipeline by clicking on the three dots to view the details of
    the build pipeline, and then click on **Edit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.27 – Editing a build pipeline](img/B18875_02_27..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.27 – Editing a build pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Triggers** and update the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enable continuous integration**: Turn this on'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Branch filters** | **Type**: **Include** | **Branch** **specification**:
    **main**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you push your code on the main branch, a build pipeline will run automatically;
    this is called enabling continuous integration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.28 – Turning on continuous integration](img/B18875_02_28..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.28 – Turning on continuous integration
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to enable automatically running a build pipeline
    after we push the code. This will reduce the daily workload to manually build
    your code whenever you push it to the source code repository.
  prefs: []
  type: TYPE_NORMAL
- en: The following section will teach you how to create a stage to make a task group
    for deployment environments.
  prefs: []
  type: TYPE_NORMAL
- en: Creating stages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will teach you how to create a **stage** using the classic editor
    – that is, create a task group for environmental purposes such as development,
    non-functional testing, and production. Each group has jobs and tasks to run for
    each environment. Using many stages is advantageous when we have many environments
    to deploy our applications. This is because if we use only one stage by default
    for the development and production environment, if the development pipeline fails,
    it will continue to run the production pipeline and also fail. Let’s look at how
    we can create a stage:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Releases** | **New pipeline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.29 – Creating a new pipeline](img/B18875_02_29..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.29 – Creating a new pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter a stage name and click on **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.30 – Edit stage properties](img/B18875_02_30..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.30 – Edit stage properties
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the relevant repository folder. In our case, it is an Azure Repos folder,
    the root folder for your code and the Azure pipeline file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.31 – Confirming a pipeline](img/B18875_02_31..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.31 – Confirming a pipeline
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve learned how to create a stage with an empty job, let’s wrap
    up this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the core features needed to create a pipeline.
    You learned how to create a build pipeline that includes jobs and tasks. You also
    learned how to make a trigger to filter any branch to run a build agent. These
    triggers, combined with jobs and tasks, form the cornerstone of any effective
    CI/CD pipeline, enabling automated, efficient, and reliable software delivery.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to enhance a build pipeline using YAML
    and run it on an agent.
  prefs: []
  type: TYPE_NORMAL
