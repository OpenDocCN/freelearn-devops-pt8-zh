- en: Management Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Auditing your AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendations with Trusted Advisor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating e-mail alarms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing custom metrics in CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating monitoring dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a budget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feeding log files into CloudWatch logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all administration, monitoring and alerting is a critical part of using
    AWS-based infrastructure. If anything, due to the ephemeral nature of cloud resources,
    keeping track and measuring your usage is even more important than when using
    on-premises systems.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing your AWS account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're now going to show you how to set up CloudTrail in your AWS account. Once
    CloudTrail has been enabled, it will start to record all of the API calls made
    in your account to the AWS service and then deliver them to you as log files in
    an S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we talk about API calls we mean things like:'
  prefs: []
  type: TYPE_NORMAL
- en: Actions performed in the AWS console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls made to AWS APIs using the CLI or SDKs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls made on your behalf by AWS services. Think CloudFormation or the auto
    scaling service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each entry in the log will contain useful information, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: The service that was called
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The action that was requested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameters sent with the request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The response that was returned by AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The identity of the caller (including IP address)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The date and time of the request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new CloudFormation template file; we''re going to define the following
    `Resources`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An S3 bucket for our CloudTrail log files to be stored in
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A policy for our S3 bucket that allows the CloudTrail service to write to our
    bucket
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A CloudTrail *trail*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Define an S3 bucket like so. We don''t need to give it a name; we''ll add the
    bucket name to the list of `Outputs` later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to define a policy for our bucket. This section is a little wordy
    so you may prefer to get this from the code samples instead. This policy essentially
    allows CloudTrail to do two things to our bucket: `s3:GetBucketAcl` and `s3:PutObject`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we can set up our trail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One thing to note here is that we use `DependsOn` to make CloudFormation create
    this trail after it has created the S3 bucket and policy. If you don't do this
    you'll likely encounter an error when you create the stack because CloudTrail
    won't be able to access the bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `Trail` to your template like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''re going to output the name of the S3 bucket where our CloudTrail
    logs will be stored:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can go ahead and run your CloudFormation stack using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This template will set up CloudTrail with the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: CloudTrail will be turned on for all regions in your account. This is a sensible
    place to start because it gives you visibility over where your AWS resources are
    being created. Even if you are the sole user of your AWS account it can be handy
    to know if you are making API calls to other regions by mistake (it's easy to
    do). When you create a multi region trail, new regions will automatically be included
    when they come online with no additional effort on your part.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global service events will also be logged. Again this is a sensible default
    because it includes services that aren't region-specific. CloudFront and IAM are
    two examples of AWS services that aren't region-specific.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log file validation is turned on. With this feature enabled, CloudTrail will
    deliver a digest file on an hourly basis that you can use to determine if your
    CloudTrail logs have been tampered with. CloudTrail uses SHA-256 for hashing and
    signing (RSA). The AWS CLI can be used to perform ad hoc validation of CloudTrail
    logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a quick view of your CloudTrial logs, with some basic search and filter
    functionality, you can head to the AWS web console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_05_01.png)'
  prefs: []
  type: TYPE_IMG
- en: CloudTrail web console
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Log files are encrypted using server side encryption in S3\. This encryption
    is transparent to you, but you can opt to encrypt these files with your own **customer
    master key** (**CMK**) if you wish.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API calls are logged by CloudTrail in under 15 minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs are shipping to your S3 bucket every five minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's possible to aggregate CloudTrail events across many accounts into a single
    bucket. This is a pattern often used to log AWS activity into a *SecOps* or similar
    account for auditing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging aside, CloudTrail keeps your API activity for seven days.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create more than one trail. You might consider creating a trail for
    your developers that is separate from the trail consumed by security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a CloudFormation stack creates an S3 bucket and that S3 bucket has objects
    in it the delete operation will fail if and when you choose to delete the stack.
    You can manually delete the S3 bucket in the S3 web console if you wish to work
    around this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendations with Trusted Advisor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Trusted Advisor covers four main areas and it is designed to give you some
    guidance around what are considered best practices for your cloud deployment.
    The areas covered are:'
  prefs: []
  type: TYPE_NORMAL
- en: Cost Optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fault Tolerance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's available to everyone and free to useâ€”with one fairly large catch. Unless
    you are paying for Business or Enterprise level support with AWS you only get
    access to four checks. At the time of publishing there are 55 possible checks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The good news is you don't need to do anything at all to turn on Trusted Advisor.
    It's automatically enabled when your AWS account is created and will continue
    to update for the lifetime of your account.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and navigate to the Trusted Advisor section of the AWS web console.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The four checks provided for free with this service are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unrestricted ports**: This is a check on the highest risk ports in your security
    groups. They''ll be flagged if they''re open to everyone (`0.0.0.0/0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IAM usage**: This is a fairly rudimentary check. If there isn''t at least
    one IAM user in your account this check won''t pass. It''s considered good practice
    to not use your root login credentials for your AWS account and instead create
    IAM users with least privilege access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MFA on root account**: This is also a fairly rudimentary check. You need
    to have MFA enabled for your root login in order for this check to pass. It''s
    obviously a good idea to enable MFA for your IAM users too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service l****imits**: This one is quite handy: if you''re approaching 80%
    of your service limits, this check won''t pass. For example, it''s nice to know
    if you''re about to hit the cap of CloudFormation stacks or EC2 instances before
    you attempt to create them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though there's only four checks here, these are some of the more useful
    ones so we'd encourage you to pay attention to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The console uses a color scheme to denote the status of each check:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Red**: It''s recommended that you take action to remedy this check'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yellow**: This check requires investigation and possible remediation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Green**: This check is passing and needs no attention'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visit the Preferences page in the Trusted Advisor web console if you'd like
    to have a weekly report e-mailed to you.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_05_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Trusted Advisor console
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As well as opening up the entire suite of Trusted Advisor checks, a Business
    or Enterprise level support arrangement gives you access to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Notifications**: You are able to have notifications delivered to you at a
    higher frequency using a number of delivery methods. Since Trusted Advisor is
    an available source in CloudWatch Events you''ll be able to create notifications
    that can be handled by SNS (e-mail, push, SMS) or even notifications that will
    trigger Lambda functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API a****ccess**: You''ll have access to a number of Trusted Advisor API
    methods such as `DescribeTrustedAdvisorCheckResult` and `DescribeTrustedAdvisorCheckSummaries`.
    You can use these to integrate the results from checks into your own dashboards
    or monitoring systems. You''ll also be able to use the APIs to refresh Trusted
    Advisor checks (after you''ve taken corrective action on them, for example).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exclusion**: You can selectively mute checks that are failing. You''ll sometimes
    want to do this for things such as RDS instances in your development environments
    that aren''t in multi-AZ mode or don''t have backups enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, some of the more useful checks we see for our Business and Enterprise
    level support customers are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reserved Instances**: A nice cost optimization if you have a reasonably static
    workload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unassociated Elastic IPs**: If IP addresses are not associated with a network
    interface (on an EC2 instance for example) you will still be charged for them.
    Also if there are unassociated IPs floating around, that is usually a sign that
    they are being allocated manually instead of with CloudFormation. Remember that
    the goal here is for more automation, not less.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Idle load balancers**: Again, these cost money and are often easily orphaned
    in low automation environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**S3 bucket permissions**: It''s not always obvious if the permissions on an
    S3 bucket have been misconfigured. This check helps you avoid unintentionally
    leaking data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating e-mail alarms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While e-mail alarms may not be the most scalable of all alarms (due to the amount
    of e-mail most people get), they are the easiest to integrateâ€”almost everyone
    has an e-mail address!
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe uses two AWS services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CloudWatch** (**CW**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simple Notification Service** (**SNS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you will often want to create alarms for metrics after viewing them through
    the CloudWatch dashboard, this recipe will use the console to create the alarms.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the CloudWatch console, go to the Alarms section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Create Alarm to start the wizard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the metric you are interested in alerting on. In this case, we will
    choose By Function Name under Lambda Metrics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the specific metric. You can filter by any of the values in the table.
    In this case, we will select Errors and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Define the alarm, giving at least a name and a threshold. In this case, we
    will alert if there are ever *any* errors (such as `> 0`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_07-1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Actions section, create a new list by giving the e-mail address you
    want to be notified on of a breach, and a topic name (in this example, we use
    `EmailMe`), and then click Create Alarm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_08.png)'
  prefs: []
  type: TYPE_IMG
- en: You will be asked to confirm the e-mail address, and no notifications will be
    given until it is verified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The confirmation e-mail will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have clicked on the Confirm subscription link in the e-mail, you will
    see a confirmation message as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_05_011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Back in the console the status will update, showing that you have successfully
    confirmed your subscription:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then see your newly created alarm in the console, and can view its
    status and history:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the SNS console, you can see the topic that was created for you as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_14.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we normally prefer the CLI (or CloudFormation) for creating AWS resources
    the wizard for creating alarms does a lot of work for you, so it is a good place
    to start. Once you know what kinds of alarms you are interested in, you can automate
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The CloudWatch console is a great place to keep an eye on the performance of
    your resources. Often when looking at the metrics you might find a scenario that
    you would want to be notified of, and quickly create an alarm on it.
  prefs: []
  type: TYPE_NORMAL
- en: While e-mail is probably the easiest way to get started with alarms, it doesn't
    scale all that well (Do you really want more e-mail?). For very important metrics
    you might want a CloudWatch dashboard instead, or a different notification protocol/target.
  prefs: []
  type: TYPE_NORMAL
- en: We start by selecting the metric we are interested in; in this case, it is errors
    from the example-lambda-function, but the process would work the same regardless
    of the metric you select.
  prefs: []
  type: TYPE_NORMAL
- en: You must define a name for the alarm, and you can optionally create a description.
    One of the most important parts of the alarm is how you define the threshold that
    will trigger it. You can choose not only the value and comparison operator used
    (for example, greater than (>), less than (<), greater than or equal to (>=),
    and so on), but also the number of failing data points that must occur before
    the alarm is triggered. This can stop you being alerted unnecessarily for temporary
    *spikes* in metric values. In this scenario we want to know if there are *any*
    errors, so we set the value to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: On the right-hand side you can define the check period and the statistic used
    (for example, Average, Maximum, Minimum, and so on). You can also see the recent
    history of the selected metric in the top-right corner. The red line on the graph
    is where the currently defined threshold will sit, so you can quickly see if the
    alarm would have been triggered.
  prefs: []
  type: TYPE_NORMAL
- en: In the Actions section of the alarm, you define what action will be taken when
    triggered. While you can select an existing SNS topic, we will define a new one
    by clicking on New list. You are then prompted for the details of the new topic;
    you must give both a name and an e-mail address to subscribe to the topic.
  prefs: []
  type: TYPE_NORMAL
- en: When you click Create Alarm, you will see the status of the subscription. After
    receiving the e-mail and clicking on the confirmation link, the status will automatically
    update. It doesn't matter if you navigate away from the window before you confirm
    the subscription. Just remember that your target e-mail address won't receive
    any notifications if you do not confirm the subscription.
  prefs: []
  type: TYPE_NORMAL
- en: 'Viewing the newly created alarm shows its current state, and its recent history.
    An alarm has three possible states:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ALARM: The metric is over the defined threshold'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'INSUFFICIENT_DATA: There were not enough data points to determine if the metric
    is under or over the threshold'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OK: The metric is under the defined threshold'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can filter alarms by their state by the links on the side menu, which also
    show an updated view of how many alarms are in each state.
  prefs: []
  type: TYPE_NORMAL
- en: Behind the scenes, the wizard has created an SNS topic for you. The topic is
    what handles converting the alarm message to an e-mail, and sending it. Without
    the SNS topic the alarm would still alert (that is change state), but there would
    be no way to tell without looking at the metric in the CloudWatch dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe represents the simplest useful configuration of SNS topics and CW
    alarms, but there is a lot more depth available to you in this pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Existing topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of choosing New list in the wizard, you can use the Select list functionality.
    You then give the name of an existing SNS topic to use, rather than creating a
    new one.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_05_15.png)'
  prefs: []
  type: TYPE_IMG
- en: This means you can set up a single topic to push multiple alarms to. In addition
    to being simpler it also means you only need to confirm the subscription *once*,
    instead of doing it for each alarm.
  prefs: []
  type: TYPE_NORMAL
- en: Other subscriptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An SNS topic that notifies an e-mail is the most common subscription, but not
    the only option. SNS topics can also send notifications to:'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP(S) endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon SQS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating monitoring dashboards* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing custom metrics in CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you get used to using CloudWatch, it is highly likely that you will want
    to see more than just the built-in AWS metrics.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common metrics users ask for after starting to run servers in
    EC2 is memory usage; the built-in metrics for EC2 instances are CPU utilization,
    network in/out, disk reads/writes, and statusâ€”memory is not included by default!
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to feed the amount of memory inuse on your Linux
    instances to CloudWatch, so that you can see them alongside the other instance
    metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how utilized (or not) your instances are is a key component in choosing
    the right instance type to use for your workloads. Getting it wrong can cost you
    a lot of money!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need an EC2 instance running Linux, with the AWS CLI tool installed
    to perform this recipe. If you use an instance based on AWS Linux, you will have
    the AWS CLI tool installed for you.
  prefs: []
  type: TYPE_NORMAL
- en: The instance role or credentials you use to run the following commands must
    have permission to submit metrics to CloudWatch. This is the `CloudWatch:PutMetricData`
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the instance, run the following AWS CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Go to the CloudWatch console, and navigate to the Metrics dashboard. Your metric
    will appear under the namespace CustomMetrics, InstanceId, and the unique ID for
    the instance, with the metric name MemoryUsagePercent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can take *up to* 15 minutes for a custom metric to appear in the CloudWatch
    dashboard (although it usually takes less). Even for the built-in metrics, it
    may take a minute or two for the metric data to appear in the console.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we use the built-in `put-metric-data` AWS CLI command to send
    our metric to CloudWatch.
  prefs: []
  type: TYPE_NORMAL
- en: We start by defining the metric name and namespace that the values will appear
    under. This is important because it defines how we will see the metric in the
    console and dashboards. Names should identify and describe the metric. They do
    not need to be unique, as the dimension(s) we add will take care of that (we will
    discuss this later). Namespaces are used to group similar metrics together, like
    a category. The built-in metrics appear under the namespace `AWS/`. For example,
    EC2 metrics appear under the `AWS/EC2` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: We then specify a dimension for the metric. A **dimension** is a way to uniquely
    identify similar metrics. In this case we are using the instance's ID to identify
    the metric, because the metric is unique to that instance, but we will likely
    have many instances of the `MemoryUsagePercent` metric (across many EC2 instances).
    We are obtaining the instance ID by querying (via the `curl` command) the instance
    metadata service, which is accessed over HTTP on the special IP address `169.254.169.254`.
  prefs: []
  type: TYPE_NORMAL
- en: There's a lot of other useful information in the instance metadata. See the
    AWS documentation on instance metadata for more details [http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html).
  prefs: []
  type: TYPE_NORMAL
- en: Next we specify a percent, because we know what kind of data we are dealing
    with. This argument can be leftoff if you don't know (or care), as CloudWatch
    attaches no significance to it (although some other applications may be able to
    use it, for example, for display).
  prefs: []
  type: TYPE_NORMAL
- en: Finally we specify the value to send. We work this value out dynamically from
    the output of the `free` command and use `awk` to convert it to a percentage of
    memory inuse.
  prefs: []
  type: TYPE_NORMAL
- en: Once the metric is being sent to CloudWatch, we can view it in the console.
    The easiest way is to select your specific metric and view it in the Metrics section
    of the CloudWatch console.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a good real-world use-case to get started with your own custom metrics,
    but there's a lot more you can do with them.
  prefs: []
  type: TYPE_NORMAL
- en: Cron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One-off metric values are rarely useful on their own. The real value comes when
    you can plot and see them over time; how they change, how fast they change, what
    their range is, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux you can schedule a command easily with the `cron` command. By putting
    the AWS CLI commands in a script, and scheduling it with `cron` to run periodically,
    you can feed metrics consistently to CloudWatch, without the overhead of running
    a dedicated agent on your instances.
  prefs: []
  type: TYPE_NORMAL
- en: Auto scaling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instance-based metrics like memory usage become especially useful when collected
    from all the instances in an auto scaling group.
  prefs: []
  type: TYPE_NORMAL
- en: 'By collecting instance or even application-specific metrics (for example: number
    of threads used, internal request duration, and so on) you can make your auto
    scaling groups increase and decrease in size at the most appropriate times to
    your workload and performance profile.'
  prefs: []
  type: TYPE_NORMAL
- en: To do this, make the auto scaling group name one of the dimensions (you can
    define multiple dimensions) sent along with your metric value.
  prefs: []
  type: TYPE_NORMAL
- en: Backfilling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can backfill metrics by running the same command and supplying an additional
    `--timestamp` argument. The timestamp argument accepts an ISO 8601 date and time
    stamp in UTC time for example: `2017-01-01T12:00:00.000Z`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind that CloudWatch will only retain your metrics for a certain period,
    decided by the granularity of your metrics. The retention period is:'
  prefs: []
  type: TYPE_NORMAL
- en: Data points with a period of 60 seconds (1 minute) are available for 15 days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data points with a period of 300 seconds (5 minute) are available for 63 days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data points with a period of 3600 seconds (1 hour) are available for 455 days
    (15 months)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While you can send metrics with millisecond precision, the minimum value CloudWatch
    will store is at the 1 minute level. Anything less than the 1 minute level and
    CloudWatch will aggregate the values. When aggregated, you can see some additional
    information about your metric; namely the sample size, minimum and maximum value,
    and the average of the values.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating monitoring dashboards* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Launching an Instance* recipe in [Chapter 4](beece917-78ff-43b8-934b-706eca5968f9.xhtml),
    *Using AWS Compute*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating monitoring dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The real value of collecting metrics is the ability to spot trends and relationships
    (often unknown or unexpected) between disparate systems. With this kind of visibility,
    you are able to identify and troubleshoot issues before they become an incident.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to providing a way to aggregate and view metrics from your systems,
    the CloudWatch service also makes it easy to create monitoring dashboards so that
    you can quickly and clearly view the most important metrics.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses the AWS console because you cannot create dashboards via CloudFormation
    or the AWS CLI tool yet.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have some metrics already present in CloudWatch in order to
    create a dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have been using AWS services (for example: EC2, RDS, DDB, and so on),
    then you should have plentyâ€”almost all the AWS services populate metrics in CloudWatch
    by default.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to the CloudWatch section of the AWS console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Dashboards section of the console via the link on the left-hand menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the Create Dashboard button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose the type of widget you want to use to display your metric. In this example,
    we will choose the most versatile, Line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate the All metrics tab to find the metric(s) you want to include, selecting
    it by clicking the tick box on the left of the metric details. You will see a
    preview of the metric(s) and how they will look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_20.png)'
  prefs: []
  type: TYPE_IMG
- en: Once selected, you can modify how the metric is displayed via the settings on
    the Graphed metrics tab. In this case we have given the widget a name, and changed
    the Period setting for our metric to 1 Minute to reflect the additional granularity
    available (You can see that the metric line appears *smoother* because of it).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click Create widget, you will see your widget on the dashboard. Once
    you click Save dashboard, it will appear under the Dashboards heading on the left-hand
    menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At a dashboard level, you can turn on Auto refresh and the refresh frequency
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can resize and rearrange your widgets by dragging them. Just remember to
    click Save dashboard to persist any changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_24.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CloudWatch dashboard's value is the ease and simplicity that it allows you to
    publicize your most important metrics.
  prefs: []
  type: TYPE_NORMAL
- en: As with any dashboard, make sure that the metrics you choose to display are
    relevant and actionable. There's no point in displaying a metric if there's no
    action required when it changes.
  prefs: []
  type: TYPE_NORMAL
- en: Widget types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Line graphs are not the only type of widget that can be displayed in a dashboard.
    There is also:'
  prefs: []
  type: TYPE_NORMAL
- en: Stacked area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the type of metrics you are collecting or are interested in, you
    should experiment with different types of widgets to display them. Not all metrics
    are suited to line graphs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Publishing custom metrics in CloudWatch* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a budget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main attractions of using AWS, is its pay-as-you-go model. You only
    pay for what you use, no more and no less.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, this can sometimes result in what's known as **bill shock** at
    the end of the month. This happens when you do something that you might not know
    is a charged service, or you do not know how much is charged for it, and you don't
    find out until it's too late. Especially when getting started, users may not fully
    appreciate the cost of the activities they're undertaking.
  prefs: []
  type: TYPE_NORMAL
- en: There are also ways to optimize your costs on AWS, for example, by transferring
    at slower speeds, removing external access, and so on. All this means that you
    should be aware of your cost obligations, and manage them in real time. To this
    end, you can create budgets that help you be aware of your usage and spending.
  prefs: []
  type: TYPE_NORMAL
- en: While you can create budgets via the AWS CLI tool, it is useful to know how
    the Billing dashboard works for administration purposes, so we will use the AWS
    console for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, IAM Users do not have access to the billing section of the AWS console.
    You must perform these steps using the root login details for your account, or
    enable IAM access for other users, which is a one-off step.
  prefs: []
  type: TYPE_NORMAL
- en: While you should not generally use the root credentials for your AWS account
    when administering, creating budgets (which should happen only infrequently) is
    an exception.
  prefs: []
  type: TYPE_NORMAL
- en: You *should not* be creating access keys for your root account under any circumstances,
    which is another reason why we use the console (and not the CLI) for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Log in to the AWS console with your root credentials, and navigate to the My
    Billing Dashboard via the user menu accessed by clicking on your name in the top
    right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'TheÂ Billing dashboard displays your up-to-date usage for the month. Click on
    Budgets in the left-hand menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you first arrive at the Budgets console, there will be no budgets to display.
    Click on the Create budget button to get started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_05_027.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Start by filling out the budget details, such as `Cost` for the measurement
    type, `Monthly` for the period, and the budget amount. Select the Start date (which
    defaults to the first of the current month), and optionally the End date. Leave
    the End date field blank to create a rolling budget that is reset each month:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next enter the notification details. This includes the threshold for notification,
    which we will set to be 80% (of our budget) in forecasted use. For e-mail notifications,
    simply enter the e-mail addresses you want to receive the notifications. Click
    Create when finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be returned to the Budgets section of the Billing dashboard, and you
    can see your newly created budget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For each of the budgets you create, you can select it to view the full details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_31.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Billing dashboard is closely tied to the account itself, which is why it
    is not part of the regular services in the console. Accessing it via the user
    menu hints at the special access it requires. Generally, you would configure a
    budget when you first open a new AWS account, so you don't get any surprises in
    your bill at the end of the month.
  prefs: []
  type: TYPE_NORMAL
- en: If you get access denied messages in the Billing dashboard, it is most likely
    because you are using an IAM user and IAM access has not been enabled. You must
    use your root account credentials (such as that you used to create the account),
    or enable IAM access. IAM access can only be enabled by the root user.
  prefs: []
  type: TYPE_NORMAL
- en: When you first arrive at the billing section, you will see a high-level summary
    of your usage and expenses. As I performed this example in a new account, there's
    not much to see at this point. The Month-to-Date Spend by Service graph on the
    right can be particularly useful to find out what the most popular services you
    use are. This is a great place to start when trying to reduce or optimize your
    AWS spending.
  prefs: []
  type: TYPE_NORMAL
- en: We then navigate to the budgets section and create a new budget. Most of the
    details should be self-explanatory, and obvious for the purposes of budgeting.
    Your main choice is to decide if you want to alert on usage or costs. Cost budgets
    work against the dollar (or appropriate billing currency) amount you will be charged.
    Usage budgets work against a selected unit of usage, for example, instance hours
    or data transfer for EC2\. A usage budget can only track one type of usage unit,
    so you will need to create multiple budgets to track the various units that you
    might be charged for. This is one reason why we prefer a cost budget, as it takes
    into account multiple forms of usage.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying e-mail addresses to alert is the simplest way to send any alerts
    from the budget. For more advanced use cases, you can specify an SNS topic to
    receive notifications. An example might be if you wanted to receive budget alerts
    on your phone via an SMS message, or send the alert to a different system automatically
    (via HTTP/JSON).
  prefs: []
  type: TYPE_NORMAL
- en: Once finished, you can view all your budgets in the dashboard. You can repeat
    the process to create multiple budgets. This means you can create budgets for
    forecast usage and actual usage, as well as different time periods.
  prefs: []
  type: TYPE_NORMAL
- en: Feeding log files into CloudWatch logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CloudWatch logs** is a managed, highly durable, log storage system in AWS.
    It''s capable of ingesting logs from many sources. We''re going to focus on what
    is probably the most common use case which is shipping logs off your EC2 instances
    into CloudWatch logs.'
  prefs: []
  type: TYPE_NORMAL
- en: This capability is particularly important in highly dynamic auto scaling environments.
    Since the lifetime of your EC2 instances can be quite short, any logs which are
    written only to a local disk will be lost upon instance termination. You'll inevitably
    find yourself wishing you had access to server logs after an instance has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: The following pattern we're about to show you allows you to aggregate, search
    and filter log entries across a number of sources. You can then create custom
    metrics and trigger alarms based on log activity. Super handy!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe we''re going to:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch an EC2 instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure it to send logs to CloudWatch logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a filter based on SSH logins to the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send ourselves an e-mail alert on filter matches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This might be something you'd consider doing on your bastion boxes since they
    will typically be the sole point of SSH access to your environments and it can
    be a good idea to make a lot of noise if people are logging in to production servers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to do all of this in `us-east-1` with the AWS Linux AMI. If you
    wish to do this in a different region you'll simply need to provide a different
    AMI ID to the template we're going to create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get in to it; you''ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The VPC ID of your default VPC in `us-east-1`. You don't have to use the default
    VPC, you'll just need to make sure you choose a VPC which has a public subnet
    (which is configured to assign public IP addresses)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The subnet ID of the public subnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An SSH key pair configured in `us-east-1`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An e-mail address we can send alerts to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new CloudFormation template. Add the following `Parameters` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now for the `Resources`, we need to define a `Role` and `InstanceProfile` for
    our EC2 instance. This will give our server the appropriate permissions to send
    logs to CloudWatch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Our instance will need to live in a security group which allows SSH access,
    so let''s add that now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we can define our instance. We make sure to use the profile and security
    group we just created and we also add a small amount of user-data which does the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `awslogs` package.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Writes a configuration file which will ship `/var/log/secure` to CloudWatch
    logs.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Starts the `awslogs` service.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the `awslogs` service start on boot (in case of reboot).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re now going to add an SNS topic. This topic will receive alerts and forward
    them to the e-mail address we''re using for alerts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to filter our `/var/log/secure` logs for logins. A `MetricFilter`
    resource allows us to do this. CloudFormation will throw an error if we refer
    to a log group which doesn''t yet exist, so we add that here too (with a `DependsOn`
    reference):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The last `Resource` we need is the actual `Alarm`. Add it like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we''ll add the public IP address of our instance to the `Outputs` so
    we don''t need to go to the EC2 web console to look it up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Go ahead and launch this CloudFormation stack. You can do it from the AWS CLI
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Before proceeding you''ll need to check your e-mail and confirm your subscription
    to the SNS topic. If you don''t do this you won''t receive any alerts from CloudWatch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, an example of confirmed subscription is illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_033.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go ahead and SSH to your instance. If your login is successful, you''ll see
    your alarm triggered in the CloudWatch web console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06236_05_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An e-mail will land in your inbox as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06236_05_35.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's important that you understand the difference between log streams and log
    groups.
  prefs: []
  type: TYPE_NORMAL
- en: '**Log streams** are log sequences which come from a single source. This could
    be an EC2 instance, an application process, or another source within AWS. In our
    case the name of our log stream is the ID of our EC2 instance. In fact, the CloudWatch
    logs agent will set the `log_stream_name` to the instance ID by default.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log groups** are collections of log streams with the same properties. In
    our previous example, the log groups will correspond to `/var/log/secure`. So,
    we end up with a configuration which looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When you install the CloudWatch logs agent, it actually sets up `/var/log/messages`
    in exactly the same manner as we''ve just described:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Once the agent has started, it will ship new log entries off the box to CloudWatch
    logs approximately every 5 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CloudWatch logs supports ingestion of traditional text-based log entries as
    well as JSON formatted logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs can be ingested from other sources including CloudTrail, IAM, Kinesis Streams
    and Lambda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, logs are stored indefinitely. You can customize this time period
    to suit your needs however.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metric filters, like the one we created previously, can be used to graph and
    chart in the CloudWatch console. Add them to your dashboards as well as your alerting
    system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The CloudWatch web console allows you to test metric filters before you add
    them. Using this feature will save you a lot of trial and error with CloudFormation.
    Don''t rely on the web console completely however: you should move these metric
    filters to CloudFormation as soon as you get them right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a one-one relationship between a log stream and a log source. For example,
    you can't have multiple instances sending `/var/log/secure` to the same log stream.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The non-alarm state for the alarm we've created, will be INSUFFICIENT_DATA.
    This is because our metric filter outputs a value only if a login is detected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
