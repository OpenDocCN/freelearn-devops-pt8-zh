["```\nresource \"aws_s3_bucket\" \"frontend\" {\n  bucket        = \"${var.application_name}-${var.environment_name}-frontend\"\n  tags = {\n    Name        = \"${var.application_name}-${var.environment_name}-frontend\"\n    application = var.application_name\n    environment = var.environment_name\n  }\n}\n```", "```\nresource \"aws_s3_bucket_public_access_block\" \"frontend\" {\n  bucket = aws_s3_bucket.frontend.id\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n```", "```\nresource \"aws_s3_bucket_website_configuration\" \"frontend\" {\n  bucket = aws_s3_bucket.frontend.id\n  index_document {\n    suffix = \"index.html\"\n  }\n  error_document {\n    key = \"error.html\"\n  }\n}\n```", "```\ndata \"aws_iam_policy_document\" \"frontend\" {\n  statement {\n    actions   = [\"s3:GetObject\"]\n    resources = [\"${aws_s3_bucket.frontend.arn}/*\"]\n    principals {\n      type        = \"*\"\n      identifiers = [\"*\"]\n    }\n  }\n}\n```", "```\nresource \"aws_s3_bucket_policy\" \"frontend\" {\n  bucket = aws_s3_bucket.frontend.id\n  policy = data.aws_iam_policy_document.frontend.json\n  depends_on = [aws_s3_bucket_public_access_block.frontend]\n}\n```", "```\ndata \"aws_iam_policy_document\" \"lambda\" {\n  statement {\n    effect = \"Allow\"\n    principals {\n      type        = \"Service\"\n      identifiers = [\"lambda.amazonaws.com\"]\n    }\n    actions = [\"sts:AssumeRole\"]\n  }\n}\n```", "```\nresource \"aws_iam_role\" \"lambda\" {\n  name               = \"${var.application_name}-${var.environment_name}-lambda\"\n  assume_role_policy = data.aws_iam_policy_document.lambda.json\n}\n```", "```\nresource \"aws_lambda_function\" \"main\" {\n  function_name = \"${var.application_name}-${var.environment_name}\"\n  role          = aws_iam_role.lambda.arn\n  runtime       = \"dotnet6\"\n  filename      = \"deployment.zip\"\n  handler       = \"FleetAPI::FleetAPI.Function::FunctionHandler\"\n  tags = {\n    Name        = \"${var.application_name}-${var.environment_name}-lambda\"\n    application = var.application_name\n    environment = var.environment_name\n  }\n}\n```", "```\nenvironment {\n  variables = {\n    SECRET_SAUCE = random_string.secret_sauce.result\n  }\n}\n```", "```\nresource \"aws_iam_policy\" \"lambda_logging\" {\n  name        = \"${var.application_name}-${var.environment_name}-lambda-logging-policy\"\n  description = \"Allow Lambda to log to CloudWatch\"\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = [\n          \"logs:CreateLogGroup\",\n          \"logs:CreateLogStream\",\n          \"logs:PutLogEvents\"\n        ]\n        Effect   = \"Allow\"\n        Resource = \"arn:aws:logs:*:*:*\"\n      }\n    ]\n  })\n}\n```", "```\nresource \"aws_iam_role_policy_attachment\" \"lambda_logging\" {\n  role       = aws_iam_role.lambda.name\n  policy_arn = aws_iam_policy.lambda_logging.arn\n}\n```", "```\nresource \"random_password\" \"secret_sauce\" {\n  length  = 8\n  lower   = false\n  special = false\n}\n```", "```\nresource \"aws_secretsmanager_secret\" \"secret_sauce\" {\n  name = \"secret-sauce\"\n  tags = {\n    application = var.application_name\n    environment = var.environment_name\n  }\n}\n```", "```\nresource \"aws_secretsmanager_secret_version\" \"secret_sauce\" {\n  secret_id     = aws_secretsmanager_secret.secret_sauce.id\n  secret_string = random_string.secret_sauce.result\n}\n```", "```\nresource \"aws_iam_policy\" \"lambda_secrets\" {\n  name        = \"${var.application_name}-${var.environment_name}-secrets-policy\"\n  description = \"Policy to allow Lambda function to access secrets.\"\n  policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Action = [\"secretsmanager:GetSecretValue\"],\n        Effect = \"Allow\",\n        Resource = [\n          aws_secretsmanager_secret.secret_sauce.arn\n        ]\n      }\n    ]\n  })\n}\n```", "```\n    - name: Generate the Deployment Package\n      run: |\n        zip -r ../deployment.zip ./\n      working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}/publish\n```", "```\n    - name: Upload Deployment Package\n      uses: actions/upload-artifact@v2\n      with:\n        name: dotnet-deployment\n        path: ${{ env.DOTNET_WORKING_DIRECTORY }}/deployment.zip\n```", "```\n    - uses: actions/download-artifact@v3\n      with:\n        name: dotnet-deployment\n```", "```\n    - name: Unzip Deployment Package\n      run: |\n        mkdir -p ${{ env.DOTNET_WORKING_DIRECTORY }}/upload-staging\n        unzip ./deployment.zip -d ${{ env.DOTNET_WORKING_DIRECTORY }}/upload-staging\n```", "```\n      - id: deploy\n        name: Upload to S3 Bucket\n        env:\n          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          AWS_REGION: ${{ vars.BACKEND_REGION }}\n        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}/upload-staging\n        run: |\n          aws s3 sync . s3://${{ needs.terraform.outputs.frontend_bucket_name }}\n```", "```\n      - name: Deploy\n        env:\n          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          AWS_REGION: ${{ vars.BACKEND_REGION }}\n          FUNCTION_NAME: ${{needs.terraform.outputs.lambda_function_name}}\n        run: |\n          aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://deployment.zip\n```"]