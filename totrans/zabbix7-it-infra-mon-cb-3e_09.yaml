- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating Zabbix with External Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to set up some of the useful external service
    integrations that Zabbix has to offer. We can use these external services to notify
    our Zabbix users of ongoing problems.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by learning how to set up in-company chat applications such as
    Slack and Microsoft Teams. Then, we will learn how to use a personal chat application
    such as Telegram before learning how to integrate Atlassian Opsgenie for even
    more extensive alerting.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve completed these recipes, you will be able to effectively integrate
    certain services with Zabbix. This is a good starting point for working with external
    services in general and the easiest way to set up Slack, Teams, Opsgenie, and
    Telegram.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Slack alerting with Zabbix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Microsoft Teams alerting with Zabbix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Telegram bots with Zabbix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Atlassian Opsgenie with Zabbix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, we are going to need our Zabbix server, preferably how we
    set it up throughout this book, though any Zabbix 7 server with some alerts on
    it will do.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need access to a few external services, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Slack (free, to an extent):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://slack.com/](https://slack.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Microsoft Teams (free, to an extent):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.microsoft.com/microsoft-teams](https://www.microsoft.com/microsoft-teams)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Opsgenie (free, to an extent):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.atlassian.com/software/opsgenie/](https://www.atlassian.com/software/opsgenie/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Telegram (free):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://telegram.org/](https://telegram.org/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will not cover how to set up the services themselves, only how to integrate
    them with Zabbix. Make sure you have set up the required service by following
    a guide and that you have some knowledge of the services in general.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Slack alerting with Zabbix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Slack is a widely used tool for easy text messaging, voice/video chat, and collaboration.
    In this recipe, we will learn how to use Zabbix Slack integration to send our
    Zabbix problem information to Slack so that we can gain a good overview of issues.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have Slack set up. You can go to [https://slack.com/intl/en-in/](https://slack.com/intl/en-in/)
    and set it up for free there. We will also need a Zabbix server with some active
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have set up and opened Slack, you should see the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Slack default page](img/B19803_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Slack default page
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a new channel for our Zabbix notifications by clicking the **+
    Add channels** button. Then, from the dropdown that appears, click **Create a**
    **new channel**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Slack, Create a channel window](img/B19803_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Slack, Create a channel window
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Next** button. Then, on the next window, click the **Create** button
    to make this a public (or private) channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Slack, setting the new channel visibility](img/B19803_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Slack, setting the new channel visibility
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be presented with one more step to add either specific or all people
    within your Slack to the new channel. In my test, I’ll add everyone, so I’ll just
    click on **Done**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Slack, Add people window](img/B19803_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Slack, Add people window
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, navigate to the following link to create a Slack bot for working with
    Zabbix: [https://api.slack.com/apps](https://api.slack.com/apps).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the **Create New App** option on this page. Click on it, which
    brings us here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Slack, API Create an app page](img/B19803_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Slack, API Create an app page
  prefs: []
  type: TYPE_NORMAL
- en: After clicking the **Create New App** button, we have to click on **From scratch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we’ll see a pop-up window where we can set up our new Slack bot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Slack, API Name app & choose workspace window](img/B19803_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Slack, API Name app & choose workspace window
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Create App**. This will take you to the **Basic Information** page.
    On this page, click on **Bots**, as highlighted in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Slack, API Add features and functionality page](img/B19803_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Slack, API Add features and functionality page
  prefs: []
  type: TYPE_NORMAL
- en: This will take you to the new app’s **App Home** page. On the left-hand side
    of the page, click the **OAuth &** **Permissions** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down to **Scopes** and click on **Add an** **OAuth Scope**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Slack, API scopes](img/B19803_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – Slack, API scopes
  prefs: []
  type: TYPE_NORMAL
- en: 'From the drop-down menu, click on **chat:write** to allow our bot to write
    to a channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.9 – Slack, API Add an OAuth Scope dropdow\uFEFFn](img/B19803_09_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – Slack, API Add an OAuth Scope dropdown
  prefs: []
  type: TYPE_NORMAL
- en: Do the same for **im:write** and **groups:write**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll back up and click on the **Install to Workspace** button to finish setting
    up this app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Slack, API Install to Workspace button](img/B19803_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – Slack, API Install to Workspace button
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will see a pop-up message. Click the green **Allow** button that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After clicking **Allow**, you will see your new token. Copy the token by clicking
    the **Copy** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Slack, API Our new Bot User OAuth Token](img/B19803_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – Slack, API Our new Bot User OAuth Token
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, add your bot to the **# zabbix-notifications** channel by going back
    to your Slack channel, clicking on the members in the top-right corner, and selecting
    **Integrations**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.12 – Slack, connect an app to a channel](img/B19803_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.12 – Slack, connect an app to a channel
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Add** **an App**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Simply add **Zabbix-Alert-Bot** by clicking the white **Add** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.13 – Slack, connect an app with a bot](img/B19803_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.13 – Slack, connect an app with a bot
  prefs: []
  type: TYPE_NORMAL
- en: Now, navigate to your Zabbix frontend and go to **Alerts** | **Media types**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Slack** to edit the Slack media type. You will see a whole list
    of preconfigured parameters. We need to paste our OAuth token into the **bot_token**
    parameter, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Zabbix, Slack media type Edit page](img/B19803_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.14 – Zabbix, Slack media type Edit page
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure **Media type** is enabled by scrolling all the way to the bottom.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Message templates** tab, we already have five message types configured.
    We can edit these to our liking if we would like to do so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.15 – Zabbix, media type Slack Edit page for message types](img/B19803_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.15 – Zabbix, media type Slack Edit page for message types
  prefs: []
  type: TYPE_NORMAL
- en: You can now click on **Update** to save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s create a new user group for our media types by navigating to **Users**
    | **User groups** and clicking the **Create user group** button in the top-right
    corner. Add the following user group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.16 – Zabbix, Create user group page for the External services group](img/B19803_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.16 – Zabbix, Create user group page for the External services group
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Host permissions** tab and then click on **Select**. Make sure
    that you select all the groups and subgroups with at least **Read** permissions,
    like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.17 – Zabbix, Create user group Host permissions for the External
    services group](img/B19803_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.17 – Zabbix, Create user group Host permissions for the External services
    group
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When applying permissions to the user group, make sure that you only add the
    host groups you want to receive notifications from. In my lab and even production
    environments, I add all groups, but sometimes, we want to filter the notifications
    down. One way to do this is to use different user groups and users so that you
    only receive notifications from host groups in certain channels, although Actions
    are also a great way to do this. For a more in-depth look into Zabbix user permissions
    and triggers, check out [*Chapter 2*](B19803_02.xhtml#_idTextAnchor171), *Getting
    Things Ready with Zabbix User Management*, and [*Chapter 4*](B19803_04.xhtml#_idTextAnchor601),
    *Working with Triggers and* *Alerts*, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the blue **Add** button and finish creating this user group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, navigate to **Users** | **User** to create a Slack user. Click on the
    blue **Create user** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following user to your Zabbix server and make sure to give it a secure
    password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.18 – Zabbix Create user page for the Slack user](img/B19803_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.18 – Zabbix Create user page for the Slack user
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When creating users for things such as alerting or just API access, it is best
    practice to also add the user to a user group that disables the frontend access.
    This is why we added the **No access to the frontend** group here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the **Media** tab and click on the underlined **Add** text. We
    will add the following media to this user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.19 – Zabbix Create user media page for the Slack user\uFEFF](img/B19803_09_19.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.19 – Zabbix Create user media page for the Slack user
  prefs: []
  type: TYPE_NORMAL
- en: 'All users will also need a user role. To add it, go to **Permissions** and
    add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.20 – Zabbix Create user media page for the Slack user, Permissions](img/B19803_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.20 – Zabbix Create user media page for the Slack user, Permissions
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, we are adding the user in the **Super admin** user role in
    the example. This overrides the read-only permissions we assigned to the **External
    Services** user group. For security reasons, you might want to limit the permissions
    by choosing a **User** or **Admin** role for your user, which will adhere to the
    host group permissions we assigned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Add** button at the bottom of the window and then on the
    blue **Add** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will also need to add a macro to **Administration** | **Macros**. Let’s
    add the following macro, which contains your Zabbix URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.21 – Zabbix Administration | Macros page with Zabbix URL](img/B19803_09_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.21 – Zabbix Administration | Macros page with Zabbix URL
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Last but not least, go to **Alerts** | **Actions**, and on the **Trigger Actions**
    page, click on the blue **Create** **action** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use **Notify external services** for the name of the action. We won’t set up
    any conditions for this example, but it’s recommended to do so in production environments.
    If you do not set any conditions, all problems will be matched on this action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Operations** and add the following operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.22 – Zabbix, Create action operations page for Notify external services](img/B19803_09_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.22 – Zabbix, Create action operations page for Notify external services
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: We could also use **Notify all involved** here to send a message to all the
    users involved in the **Operations** steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the blue **Add** button. With that, you’re done. You can now
    view any new problems (once they are generated by Zabbix) in your Slack channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.23 – Slack notification sent from our Zabbix \uFEFF\uFEFFserver](img/B19803_09_23.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.23 – Slack notification sent from our Zabbix server
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Working with media types might be something completely new to you, or you might
    have done it in the past. Regardless, starting from Zabbix 5, the process has
    changed a bit. In the days of Zabbix before Zabbix 5, we had to find the right
    media types online or make them ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with Zabbix 7, we get a lot of preconfigured media types that are ready
    to be used. We just need to do the necessary setup and fill in the right information,
    just like we just did for Slack. We are then ready to send our problem-related
    information from Zabbix 7 to Slack every time a problem is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we told our Zabbix server to only send problem-related information
    with a severity of warning or higher to Slack, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.24 – Zabbix Media page for the Slack user](img/9.24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.24 – Zabbix Media page for the Slack user
  prefs: []
  type: TYPE_NORMAL
- en: We can fully customize these severities, but we can also fully customize what
    severities we send to our Slack setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we configured in this recipe is called a **Zabbix webhook**. A problem
    gets created in Zabbix and this problem matches our configured criteria, such
    as its severity. Our action matches the problem, and the media type will then
    be executed by the **Action** operations and sent to the configured links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.25 – Zabbix Slack integration diagram](img/B19803_09_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.25 – Zabbix Slack integration diagram
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix sends the problem to the Slack API, and then the API processes the problem.
    Then, the app we configured in Slack posts the problem to our channel.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve completed this recipe, we can view problems in Slack and keep
    an eye on our Zabbix alerts from there.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to do more with this integration, check out the Slack API documentation.
    There’s a lot we can do with this API, and we can build a number of awesome apps/bots
    for our channels: [https://api.slack.com](https://api.slack.com)/.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Microsoft Teams alerting with Zabbix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous edition of this book was written during the COVID-19 pandemic.
    At that time, a lot of IT companies had been requested to make their employees
    work from home. Due to this, we noticed a rise in the use of Microsoft Teams and
    similar applications. Suddenly, a lot of companies started using Microsoft Teams
    and others to make working from home and collaboration easier. Even after the
    pandemic ended, this is still the case, which is why we added this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn how we can make working with Microsoft Teams even better by integrating
    our Zabbix alerting into it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need our Zabbix server to be able to create some problems for us. For
    this, you can use `lar-book-rocky` from our previous chapters or any Zabbix server
    that you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: We will also need general Microsoft Teams knowledge and, of course, Microsoft
    Teams itself set up and ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by opening our Microsoft Teams application on either Windows, macOS,
    or Linux and creating a new channel. Go to **Teams** and click on the three dots
    (**…**) next to your team name, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.26 – MS Teams, Add chan\uFEFFnel option](img/B19803_09_26.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.26 – MS Teams, Add channel option
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Add channel** window, fill in the following information to create
    our new channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.27 – MS Teams, Add channel window](img/B19803_09_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.27 – MS Teams, Add channel window
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the purple **Add** button to add the channel. Upon doing this, we
    will be able to see our new channel in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the three dots (**…**) next to your channel, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.28 – MS Teams, Connect\uFEFFors option](img/B19803_09_28.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.28 – MS Teams, Connectors option
  prefs: []
  type: TYPE_NORMAL
- en: We want to select the **Connectors** option from this drop-down menu. This allows
    us to add our Microsoft Teams connector to this channel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are using the search field here to find the official **Zabbix** **Webhook**
    connector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.29 – MS Teams, Add connectors window](img/B19803_09_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.29 – MS Teams, Add connectors window
  prefs: []
  type: TYPE_NORMAL
- en: "Click on the **Configure** button next to the **Zabbix Webhook** connector\
    \ to add this connector to our channel. This will open a pop-up window in which\
    \ you need to copy the webhook URL.![Figure 9.30 – MS Teams – Webhook U\uFEFF\
    RL](img/B19803_09_30.jpg)"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 9.30 – MS Teams – Webhook URL
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the **Save** button. Upon doing this, you can close the pop-up window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Zabbix frontend and navigate to **Alerts** | **Media types**. Click
    on the **MS Teams** media type here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down until you see **teams_endpoint**. Paste the URL you copied previously
    here, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.31 – Zabbix Alerts | Media types, edit MS Teams page](img/9.31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.31 – Zabbix Alerts | Media types, edit MS Teams page
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to scroll down and enable the media type before saving.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click the blue **Update** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you didn’t follow the previous recipe, then create a new user group for
    our media types by navigating to **Users** | **User groups** and clicking the
    **Create user group** button in the top-right corner. Add the following user group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.32 – Zabbix, Create user group page, the External service\uFEFF\
    s group](img/B19803_09_16.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.32 – Zabbix, Create user group page, the External services group
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Host permissions** tab and click on **Select**. Make sure that
    you select all the groups and subgroups with **Read** permissions. The **Permissions**
    tab will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.33 – Zabbix, Create user group permissions page, the External services
    group](img/B19803_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.33 – Zabbix, Create user group permissions page, the External services
    group
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the blue **Add** button and finish creating this user group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **Users** | **Users** and click on the blue **Create user** button
    in the top-right corner. Add the following user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.34 – Zabbix Users | Users, Create new user page, MS Teams](img/B19803_09_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.34 – Zabbix Users | Users, Create new user page, MS Teams
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When creating users for things such as alerting or just API access, it is best
    practice to also add the user to a user group that disables the frontend access.
    This is why we added the **No access to the frontend** group here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, go to the **Media** tab of the **Create user** page. Click the underlined
    **Add** text here to create the following media:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.35 – Zabbix Users | Users, Create new user media page, MS Teams](img/B19803_09_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.35 – Zabbix Users | Users, Create new user media page, MS Teams
  prefs: []
  type: TYPE_NORMAL
- en: 'All users will also need a **User** role. To add it, go to **Permissions**
    and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.36 – Zabbix – Create user media page, MS Teams user, Permissions](img/B19803_09_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.36 – Zabbix – Create user media page, MS Teams user, Permissions
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, we are adding the user in the **Super admin** user role in
    the example. This overrides the read-only permissions we assigned to the **External
    services** user group. To limit the permissions, choose a **User** or **Admin**
    role for your user, which will adhere to the host group permissions we assigned
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve filled in this information, click the blue **Add** button at the
    bottom of the window and then the blue **Add** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you didn’t follow the previous recipe, then you will also need to add a
    macro to **Administration** | **Macros** and add the following macro. This macro
    will contain your Zabbix URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.37 – Zabbix Administration | Macros page, Zabbix URL for use with
    MS Teams](img/9.37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.37 – Zabbix Administration | Macros page, Zabbix URL for use with MS
    Teams
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Update** button. You will also need to go to **Alerts**
    | **Actions** if you didn’t follow the previous recipe and, on the **Trigger Actions**
    page, click on the blue **Create** **action** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use **Notify external services** for the name of the action. We won’t set up
    any conditions for this example, but it’s recommended to do so in production environments.
    If you do not set any conditions, all problems will be matched on this action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Operations** and add the following operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.38 – Zabbix, Create action Operations page, Notify external services
    for use with MS Teams](img/B19803_09_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.38 – Zabbix, Create action Operations page, Notify external services
    for use with MS Teams
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the blue **Add** button and you’ll be done. You can now view
    new problems as they occur in your MS Teams channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.39 – Zabbix problem in an \uFEFF\uFEFFMS Teams channel](img/B19803_09_39.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.39 – Zabbix problem in an MS Teams channel
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft Teams works in about the same way as our Slack setup. A problem is
    created in the Zabbix server and, if that problem matches our configured conditions
    in Zabbix, we send that problem to our Microsoft Teams connector.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, we configured Zabbix so that it only sends problems with a severity
    of warning or higher to Microsoft Teams, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.40 – Zabbix Media page for MS Teams users](img/9.40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.40 – Zabbix Media page for MS Teams users
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Microsoft Teams connector catches our problem and, since this connector
    is configured directly on our channel, it posts a notification to the channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.41 – Zabbix Microsoft Teams integration diagram](img/B19803_09_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.41 – Zabbix Microsoft Teams integration diagram
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can see our Teams notifications in our channel and keep up to date with
    all our Zabbix issues directly via Microsoft Teams.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about the Zabbix webhook connector, check out this page:
    [https://appsource.microsoft.com/en-us/product/office/WA200001837?tab=Overview](https://appsource.microsoft.com/en-us/product/office/WA200001837?tab=Overview).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Telegram bots with Zabbix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you love automation in chat applications, you might have heard of or used
    Telegram Messenger. Telegram has an extensive API and amazing bot features.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to use a Telegram bot to create a Telegram group
    for Zabbix alerts. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have your Zabbix server ready. You can use `lar-book-rocky` or
    any Zabbix server capable of sending some alerts.
  prefs: []
  type: TYPE_NORMAL
- en: It would be useful if you have some knowledge of Telegram, but I’ll be describing
    how to set it up step by step, even for those of you who have never used Telegram
    bots. Just make sure that you have the Telegram app on your computer and that
    your account is set up.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let’s create a new channel in Telegram. Click on the create icon next
    to the search box and select **New Group**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.42 – Telegram New Group button](img/B19803_09_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.42 – Telegram New Group button
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another user – someone in your team who needs to get notifications as well.
    Fill in a group name and add a picture if you want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.43 – Telegram New Group page](img/B19803_09_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.43 – Telegram New Group page
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the **Create** button in the top-right corner. This will take
    you to the **New** **Group** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Working with Telegram bots is made easy with the **@BotFather** user on Telegram.
    We can start creating our bot by searching for **botfather** and clicking the
    specified contact:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.44 – Telegram, BotFather user](img/B19803_09_44.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.44 – Telegram, BotFather user
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by issuing the **/start** command in the chat. This will provide
    you with a list of commands you can use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.45 – Telegram, BotFather user help list](img/B19803_09_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.45 – Telegram, BotFather user help list
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s immediately create a new bot by typing **/newbot** into the **BotFather**
    chat. Press *Enter* to send your message. This will give us the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.46 – Telegram, BotFather /newb\uFEFFot command](img/B19803_09_46.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.46 – Telegram, BotFather /newbot command
  prefs: []
  type: TYPE_NORMAL
- en: 'Type in the new name of the bot; we will call it **zabbix-notfication-bot**.
    Press *Enter* to send your name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.47 – Telegram, BotFather bot username](img/B19803_09_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.47 – Telegram, BotFather bot username
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then be asked what username you want to give the bot. I will use **lar_
    zbx_notfication_bot**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.48 – Telegram, BotFather bot token](img/B19803_09_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.48 – Telegram, BotFather bot token
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your bot username must be unique, so you can’t use **lar_zbx_ notification_bot**
    here. Pick a unique bot name that suits you and then use that name throughout
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you save the **HTTP API** key somewhere safe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s go back to our **Zabbix notifications** group and add our bot. Click on
    the group in your list of chats and click on the group’s name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click on **Add** to add the bot, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.49 – Telegram, Add user to group button](img/B19803_09_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.49 – Telegram, Add user to group button
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will need to search for your bot using its username, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.50 – Telegram, Add user to group page](img/B19803_09_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.50 – Telegram, Add user to group page
  prefs: []
  type: TYPE_NORMAL
- en: Click on the bot and click on the **Add** button. With that, your bot has been
    added to the channel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s navigate to the Zabbix frontend and go to **Alerts** | **Media types**.
    Click on the media type titled **Telegram**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, you must add the **HTTP API** key you generated earlier to the **Token**
    field of our media type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.51 – Zabbix Alerts | Media types, Edit Telegram Media type page](img/B19803_09_51.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.51 – Zabbix Alerts | Media types, Edit Telegram Media type page
  prefs: []
  type: TYPE_NORMAL
- en: Also, scroll down and make sure this media type is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the blue **Update** button at the bottom of the page to finish editing
    the **Telegram** media type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s go back to Telegram and add another bot to our group. Go to our
    new group and click on the group’s name. Click on **Add** to add the **IDBot**
    user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.52 – The Add user page for a Telegram group](img/B19803_09_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.52 – The Add user page for a Telegram group
  prefs: []
  type: TYPE_NORMAL
- en: Click on the user and click on **Add**. Then, navigate back to the Zabbix frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you haven’t followed any of the preceding recipes, create a new user group
    for our media types by navigating to **Users** | **User groups** and clicking
    the **Create user group** button in the top-right corner. Add the following user
    group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.53 – Zabbix Create user group page and the External services group\
    \ for use w\uFEFFith Telegram](img/B19803_09_53.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.53 – Zabbix Create user group page and the External services group
    for use with Telegram
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Host permissions** tab and click on **Select**. Make sure that
    you select all the groups and subgroups with **Read** permissions, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.54 – Zabbix Create user group Permissions page, External services
    for use with Telegram](img/B19803_09_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.54 – Zabbix Create user group Permissions page, External services for
    use with Telegram
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the blue **Add** button and finish creating this user group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you must create a new user in Zabbix. However, to create this
    user, you are going to need our new group ID. Go back to Telegram and issue **/getgroupid@myidbot**
    in the group chat. You will receive a value that you will need to copy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.55 – Telegra\uFEFFm user group ID](img/B19803_09_55.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.55 – Telegram user group ID
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s navigate to **Users** | **Users** and click the blue **Create user**
    button. Add the following user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.56 – Zabbix Create user page, Telegram user](img/B19803_09_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.56 – Zabbix Create user page, Telegram user
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When creating users for things such as alerting or just API access, it is best
    practice to also add the user to a user group that disables the frontend access.
    This is why we added the **No access to the frontend** group here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select the **Media** tab and click on the underlined **Add** text. Add
    the following media:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.57 – Zabbix Create user media page, Telegram use\uFEFFr](img/B19803_09_57.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.57 – Zabbix Create user media page, Telegram user
  prefs: []
  type: TYPE_NORMAL
- en: 'All users will also need a **User** role. To add it, go to **Permissions**
    and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.58 – Zabbix Create user media page, Telegram user, Permissions](img/B19803_09_58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.58 – Zabbix Create user media page, Telegram user, Permissions
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, we are adding the user in the **Super admin** user role in
    the example. This overrides the read-only permissions we assigned to the **External
    services** user group. To limit the permissions, choose a **User** or **Admin**
    role for your user, which will adhere to the host group permissions we assigned
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you add the group ID to the **Send to** field with the **–**
    text and click on the blue **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you haven’t followed the previous recipes, you will also need to go to **Alerts**
    | **Actions**. Then, on the **Trigger Actions** page, click on the blue **Create**
    **action** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use **Notify external services** for the name of the action. We won’t set up
    any conditions for this example, but it’s recommended to do so in production environments.
    If you do not set any conditions, all problems will be matched on this action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Operations** and add the following operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.59 – Zabbix – Create action operations page, Notify external services\
    \ for use w\uFEFFith Telegram](img/B19803_09_22.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.59 – Zabbix – Create action operations page, Notify external services
    for use with Telegram
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the blue **Add** button. With that, you’re done. You can now
    view new problems in your Telegram group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.60 – Zabbix notifica\uFEFF\uFEFFtions in Telegram chat](img/B19803_09_60.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.60 – Zabbix notifications in Telegram chat
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Slack apps, Microsoft connectors, and Telegram bots all work kind of the same
    in the end. There’s just another backend (API) provided by the respective companies,
    but the Zabbix webhook remains.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’ve added our Zabbix Telegram integration, we are receiving notifications
    in our Telegram group via the Zabbix webhook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.61 – Zabbix Users | Users, Edit user media page](img/B19803_09_61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.61 – Zabbix Users | Users, Edit user media page
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we will only receive these notifications if they match our configured
    settings. For instance, we’ve added our media type so that it only sends problems
    with a severity of warning or higher to our Telegram bot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.62 – Zabbix Telegram integration diagram](img/B19803_09_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.62 – Zabbix Telegram integration diagram
  prefs: []
  type: TYPE_NORMAL
- en: Our Zabbix server is now sending our problems that match the **Action** conditions
    to our Telegram bot. The bot catches these problems successfully. Because our
    bot is in our Telegram group, the problems are posted in our Telegram group.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There’s a very cool Zabbix community group on Telegram. Now that you have Telegram,
    do not forget to join using the following invitation link: [https://t.me/ZabbixTech](https://t.me/ZabbixTech).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure that you check out all the awesome features Telegram bots have to
    offer. There’s a lot of information available directly from Telegram, and you
    can build amazing integrations by using them: https://core.telegram.org/bots.'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Atlassian Opsgenie with Zabbix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Atlassian Opsgenie is so much more than just another integration service for
    receiving notifications. Opsgenie offers us a call system, an SMS system, iOS
    and Android apps, two-way acknowledgments, and even an on-call schedule.
  prefs: []
  type: TYPE_NORMAL
- en: I think Opsgenie (and PagerDuty) are the best tools for replacing old-school
    call and SMS systems and fully integrating them with Zabbix. So, let’s get started
    with Opsgenie and see how we can get this amazing tool set up.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that your Zabbix server is ready. I’ll be using the `lar-book-rocky`
    server, but any Zabbix server ready to send problems should work.
  prefs: []
  type: TYPE_NORMAL
- en: You are also going to need an Atlassian Opsgenie account with Opsgenie ready
    to go. This integration is slightly different from the previous examples, as we’ll
    also be utilizing some scripts.
  prefs: []
  type: TYPE_NORMAL
- en: I won’t show you how to create accounts, but we’ll start this recipe with Opsgenie
    ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start by logging in to our Atlassian Opsgenie setup and going to **Settings**
    on the home page. From the left sidebar, click on **Notifications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that you add your email and phone number here by using the **+ Add
    email** and **+ Add phone number** buttons. We need these in order to receive
    notifications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.63 – Opsgenie profile, Contact methods](img/B19803_09_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.63 – Opsgenie profile, Contact methods
  prefs: []
  type: TYPE_NORMAL
- en: Your settings will be automatically saved once you’ve added them, which means
    we can navigate away from **Settings** to **Teams** using the top bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Teams** tab, click on the blue **Add team** button in the top-right
    corner. Then, add the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.64 – Opsgenie, Add team window](img/B19803_09_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.64 – Opsgenie, Add team window
  prefs: []
  type: TYPE_NORMAL
- en: I’ve set up our **Consultancy** team with two users that are part of this team.
    Click on the blue **Add** button at the bottom of the window to add the new team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will take you to the new **Consultancy** team page. Click on **Integrations**
    and click on the blue **Add integration** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we use the search field to search for the Zabbix integration, we can see
    it immediately, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.65 – Opsgenie, Add integration page](img/B19803_09_65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.65 – Opsgenie, Add integration page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Zabbix integration. This will take you to the next page, where
    a **Name** and **API Key** value will be generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.66 – Opsgenie, Add Zabbix integration page](img/B19803_09_66.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.66 – Opsgenie, Add Zabbix integration page
  prefs: []
  type: TYPE_NORMAL
- en: Copy the **API Key** information and scroll to the bottom of the page. Here,
    click on the blue **Save** **integration** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate to your Zabbix server CLI and execute the following code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now install the downloaded Zabbix Opsgenie plugin by issuing the following
    command(s):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For RHEL-based systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu systems, use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you’ve installed the plugin, go to the Zabbix frontend. If you haven’t
    followed any of the previous recipes, create a new user group for our media types
    by navigating to **Users** | **User groups** and clicking the **Create user group**
    button in the top-right corner. Add the following user group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.67 – Zabbix Create user group page, the External services group
    for use with Opsgenie](img/B19803_09_67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.67 – Zabbix Create user group page, the External services group for
    use with Opsgenie
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Permissions** tab and click on **Select**. Make sure that you
    select all the groups and subgroups with **Read** permissions, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.68 – Zabbix Create user group permissions page, the External services
    group for use with Opsgenie](img/B19803_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.68 – Zabbix Create user group permissions page, the External services
    group for use with Opsgenie
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the blue **Add** button and finish creating this user group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s navigate to **Users** | **Users** and click the blue **Create user**
    button. Add the following user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.69 – Zabbix Create user page, Opsgenie user](img/B19803_09_69.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.69 – Zabbix Create user page, Opsgenie user
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When creating users for things such as alerting or just API access, it is best
    practice to also add the user to a user group that disables the frontend access.
    This is why we added the **No access to the frontend** group here.
  prefs: []
  type: TYPE_NORMAL
- en: 'All users will also need a **User** role. To add it, go to **Permissions**
    and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.70 – Zabbix Create user media page, Opsgenie user, Permissions](img/B19803_09_70.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.70 – Zabbix Create user media page, Opsgenie user, Permissions
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, we are adding the user in the **Super admin** user role in
    the example. This overrides the read-only permissions we assigned to the **External
    services** user group. To limit the permissions, choose a **User** or **Admin**
    role for your user, which will adhere to the host group permissions we assigned
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: For use in our action, we need to set up a script; to do so, navigate to **Alerts**
    | **Scripts** and click on **Create script** in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll name the script **Opsgenie connector**. Set **Scope** to **Action operation**,
    **Type** to **Script**, and **Execute on** to **Zabbix server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste the contents of the **/home/opsgenie/oec/opsgenie-zabbix/actionCommand.txt**
    file on the CLI into **Commands**. It should look like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.71 – Zabbix Opsgenie connector script](img/B19803_09_71.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.71 – Zabbix Opsgenie connector script
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to press the **Add** button at the bottom of the page to save this
    new script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, navigate to **Alerts** | **Actions**. On the **Trigger actions** page,
    click on the blue **Create action** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Name** field, type **Opsgenie action** and add the following items
    to **Conditions**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.72 – Zabbix Create new action page, Opsgenie action](img/B19803_09_72.JPG)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.72 – Zabbix Create new action page, Opsgenie action
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the **Operations** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the underlined **Add** text option next to **Operations** to add your
    first operation. For the **Operation** dropdown, select **Opsgenie connector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.73 – Zabbix Create action operations window, Opsgenie connector](img/B19803_09_73.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.73 – Zabbix Create action operations window, Opsgenie connector
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat *step 24* for **Recovery operations** and **Update operations**. It
    should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.74 – Zabbix Create action operations page, Opsgenie action](img/B19803_09_74.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.74 – Zabbix Create action operations page, Opsgenie action
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Add** button at the bottom of the page to finish setting
    up the action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you must configure the Opsgenie Zabbix integration. Edit the **config**
    file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that you edit the **apiKey**, **command_url**, **user**, and **password**
    lines, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.75 – Opsgenie config.json file](img/B19803_09_75.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.75 – Opsgenie config.json file
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You will need to edit **baseUrl** if you are not located in the United States.
    I am in Europe, so I changed it to [https://api.eu.opsgenie.com](https://api.eu.opsgenie.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s it! You can now see your alerts coming in and acknowledge them from
    Opsgenie:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9\uFEFF\uFEFF.76 – Opsgenie alert from Zabbix](img/B19803_09_76.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.76 – Opsgenie alert from Zabbix
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an alert is created in Zabbix, it is sent to Opsgenie via the Zabbix integration.
    This integration utilizes the Opsgenie API to catch our Zabbix information and
    send back a reply if required. This way, we have two-way communication between
    the two applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.77 – Opsgenie setup diagram](img/B19803_09_77.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.77 – Opsgenie setup diagram
  prefs: []
  type: TYPE_NORMAL
- en: 'Opsgenie is an amazing tool that can take several tasks away from your Zabbix
    server. I’ve used it in the past to migrate away from another monitoring tool
    to Zabbix. Opsgenie makes it easy to receive alerts from our products and centralize
    notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 9.78 – Opsgenie setup example, inspir\uFEFFed by Wadie](img/B19803_09_78.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.78 – Opsgenie setup example, inspired by Wadie
  prefs: []
  type: TYPE_NORMAL
- en: Another great feature of Atlassian Opsgenie is the integration it offers with
    other Atlassian products. We can build a setup like the one shown in the preceding
    diagram to integrate all the products used in our company.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Opsgenie doesn’t just allow us to send notifications. It also enables us to
    define entire on-call schedules within the product, making it super easy for us
    to create schedules within the program, where Zabbix might be a bit too static.
    Check out the following link for more information about how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://support.atlassian.com/opsgenie/docs/manage-on-call-schedules-and-rotations/](https://support.atlassian.com/opsgenie/docs/manage-on-call-schedules-and-rotations/)'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, there are also competitive products that integrate just as well
    as Opsgenie. PagerDuty is one of these, with native Zabbix integration. It has
    a similar feature set and it all boils down to preference, other software we might
    already have, and… price!
  prefs: []
  type: TYPE_NORMAL
