["```\n# <modulepath>/lib/facter/mycustomfact.rb\nFacter.add(:mycustomfact) do\n   confine :kernel => \"Linux\"\n   ...\n   myvar = Facter::Core::Execution.exec(\"foo\")\n  ...\n end\n```", "```\nFacter::Type.newtype(:mycustomfact) do\n   ...\n   Facter.debug \"foo is the value: #{foo}\"\n   ...\n end\n```", "```\n$ ls ~/some_facts\n mycustomfact.rb\n$ ls ~/some_other_facts\n myothercustomfact.rb\n$ export FACTERLIB=\"~/some_facts: ~/some_other_facts\"\n$ facter mycustomfact myothercustomfact –debug\n```", "```\n#<modulepath>/lib/puppet/functions/mymodule/myfunction.rb\nPuppet::Functions.create_function(:'mymodule::myfunction') do\n  dispatch :up do\n    param 'String', :a_string\n  end\n  def up(a_string)\n    a_string.upcase\n  end\nend\n```", "```\n <modulepath>/lib/puppet/type/mynewtype.rb\n\n Puppet::Type.newtype(:mynewtype) do\n ...\n end\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n\n   mynewparam(:name, :namevar => true) do\n   end\n\n end\n```", "```\nmynewtype { ‘foo': }\n```", "```\nmynewtype { 'foo':\n   name => 'bar',\n }\n```", "```\n$ puppet apply -e \"mynewtype { 'foo': }\"\nnotice: Finished catalog run in 0.09 seconds\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n   ...\n   mynewproperty(:version) do\n   end\n   ...\n end\n```", "```\nmynewtype{ 'foo':\n   version => '2.2',\n }\n```", "```\n$ puppet apply -e \"mynewtype { 'foo': version => '2.2' }\"\nerr: /Stage[main]// Mynewtype[foo]: Could not evaluate: undefined method 'version' for nil:NilClass\nnotice: Finished catalog run in 0.04 seconds\n```", "```\n Puppet::Type.newtype(:mynewtype) do\n   ensurable\n   ...\n end\n```", "```\nmynewtype { 'foo':\n   ensure => absent,\n }\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n   ...\n   newparam(:source) do\n   end\n   ...\n end\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n   ...\n   newparam(:override) do\n     defaultto :false\n   end\n   ...\n end\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n   ...\n   newproperty(:version) do\n     validate do |value|\n       fail(\"Invalid version specified\") unless value =~\n         /^(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)$/\n     end\n   end\n   ...\n end\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n   ...\n   newparam(:override) do\n     defaultto :true\n     newvalues(:true, :false)\n   end\n   ...\n end\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n   ...\n   newparam(:identifier) do\n     munge do |value|\n       Integer(value)\n     end\n   end\n   ...\n end\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n   ...\n   autorequire(:file) do\n     self[:source]\n   end\n   ...\n end\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n   ...\n   newproperty(:myarray, :array_matching => :all) do\n   end\n   ...\n end\n```", "```\n$ puppet describe –list\n```", "```\nPuppet::Type.newtype(:mynewtype) do\n\n   ensurable\n\n   newparam(:override) do\n     desc 'whether or not to override'\n     defaultto :true\n     newvalues(:true, :false)\n   end\n\n   newproperty(:version) do\n     desc 'the version to use for mynewtype'\n     validate do |value|\n       fail(\"Invalid version\") unless value =~\n         /^(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)$/\n     end\n   end\n\n   newparam(:identifier) do\n     desc 'the identifier for mynewtype'\n     munge do |value|\n       Integer(value)\n     end\n   end\n\n end\n```", "```\n# <modulepath>/lib/puppet/provider/mynewtype/myprovider.rb\n\n Puppet::Type.type(:mynewtype).provide(:myprovider) do\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:myprovider) do\n   ...\n   confine :osfamily => :redhat\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:myprovider) do\n   ...\n   confine :exisits => Puppet[:config]\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:myprovider) do\n   ...\n   confine :feature => :selinux\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:myprovider) do\n   ...\n   confine :exisits =>  Puppet[:config]\n   ...\n   confine :true => begin\n     if File.exists?(Puppet[:config])\n       File.readlines(Puppet[:config]).find {|line| line =~ /^\\s*\\[agent\\]/ }\n     end\n   end\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:yum) do\n   ...\n   confine :osfamily =>  :redhat\n   defaultfor: osfamily => :redhat\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:yum) do\n   ...\n   commands :yum => 'yum', :rpm => 'rpm'\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:yum) do\n   ...\n   confine :osfamily =>  :redhat\n   defaultfor: osfamily => :redhat\n   ...\n   def exists?\n     begin\n       rpm('-q', resource[:name])\n     rescue Puppet::ExecutionFailure => e\n```", "```\n       false\n     end\n   end\n   ...\n end\n\n```", "```\nPuppet::Type.type(:mynewtype).provide(:yum) do\n   ...\n   def create\n     package=resource[:version] ?\n       “#{resource[:name]}-#{resource[:version]}]” : resource[:name]\n     yum(‘install', ‘-y, package')\n   end\n   ...\n   def destroy\n     yum(‘erase', ‘-y', resource[:name])\n   end\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:yum) do\n   ...\n   def version\n     version = rpm('-q', resource[:name])\n     if version =~ /^#{Regexp.escape(resource[:name])}-(.*)/\n       $1\n     end\n   end\n\n   def version=(value)\n     yum('install', \"#{resource[:name]}-#{resource[:version]}\")\n   end\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:yum) do\n   ...\n   def self.instances\n     pkgs = rpm('-qa','--qf','%{NAME} %{VERSION}-%{RELEASE}\\n')\n     pkgs.split(\"\\n\").collect do |entry|\n       name, version = entry.split(' ', 2)\n       new( :name => name,\n         :ensure => :present,\n         :version => version\n       )\n     end\n   end\n   ...\n end\n```", "```\nPuppet::Type.type(:mynewtype).provide(:yum) do\n   ...\n   def exists?\n     @property_hash[:ensure] == :present\n   end\n\n   def version\n     @property_hash[:version]\n   end\n   ...\n end\n```"]