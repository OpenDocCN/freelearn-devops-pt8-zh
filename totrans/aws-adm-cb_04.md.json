["```\n aws ec2 create-key-pair \\\n        --key-name MyEC2KeyPair \\\n        --query 'KeyMaterial' \\\n        --output text > ec2keypair.pem\n\n```", "```\n        chmod 600 ec2keypair.pem\n\n```", "```\n aws ec2 run-instances \\\n        --image-id ami-9be6f38c \\\n        --instance-type t2.micro \\\n        --key-name <your-key-pair-name>\n\n```", "```\n aws ec2 create-volume --availability-zone us-east-1a \n\n```", "```\n aws ec2 attach-volume \\\n        --volume-id <your-volume-id> \\\n        --instance-id <your-instance-id> \\\n        --device /dev/sdf\n\n```", "```\n mount /dev/xvdf /mnt/volume\n\n```", "```\n      Mappings: \n        AWSRegion2AMI: # Latest OpenVPN AMI at time of publishing: 2.1.4 \n          us-east-1: \n            AMI: ami-bc3566ab \n          us-east-2: \n            AMI: ami-10306a75 \n          us-west-2: \n            AMI: ami-d3e743b3 \n          us-west-1: \n            AMI: ami-4a02492a \n          eu-west-1: \n            AMI: ami-f53d7386 \n          eu-central-1: \n            AMI: ami-ad1fe6c2 \n          ap-southeast-1: \n            AMI: ami-a859ffcb \n          ap-northeast-1: \n            AMI: ami-e9da7c88 \n          ap-southeast-2: \n            AMI: ami-89477aea \n          sa-east-1: \n            AMI: ami-0c069b60\n\n```", "```\n      VpcId: \n        Type: AWS::EC2::VPC::Id \n        Description: VPC where load balancer and instance will launch \n      SubnetId: \n        Type: List<AWS::EC2::Subnet::Id> \n        Description: Subnet where OpenVPN server will launch \n         (pick at least 1)\n\n```", "```\n      InstanceType: \n        Type: String \n        Description: OpenVPN server instance type \n        Default: m3.medium \n      KeyName: \n        Type: AWS::EC2::KeyPair::KeyName \n        Description: EC2 KeyPair for SSH access\n\n```", "```\n      AdminPassword: \n        Type: String \n        Description: Password for 'openvpn' user \n        Default: openvpn \n        NoEcho: true\n\n```", "```\n      AllowAccessFromCIDR: \n        Type: String \n        Description: IP range/address to allow VPN connections from \n        Default: \"0.0.0.0/0\"\n\n```", "```\n      VPNSecurityGroup: \n        Type: AWS::EC2::SecurityGroup \n        Properties: \n          GroupDescription: Inbound access to OpenVPN server \n          VpcId: !Ref VpcId \n          SecurityGroupIngress: \n          - CidrIp: !Ref AllowAccessFromCIDR \n            FromPort: 443 \n            IpProtocol: tcp \n            ToPort: 443 \n          - CidrIp: !Ref AllowAccessFromCIDR \n            FromPort: 22 \n            IpProtocol: tcp \n            ToPort: 22 \n          - CidrIp: !Ref AllowAccessFromCIDR \n            FromPort: 1194 \n            IpProtocol: udp \n            ToPort: 1194\n\n```", "```\n      OpenVPNInstance: \n        Type: AWS::EC2::Instance \n        Properties: \n          ImageId: !FindInMap [ AWSRegion2AMI, !Ref \"AWS::Region\", AMI ] \n          InstanceType: !Ref InstanceType \n          KeyName: !Ref KeyName \n          NetworkInterfaces: \n            - AssociatePublicIpAddress: true \n              DeviceIndex: \"0\" \n              GroupSet: \n                - !Ref VPNSecurityGroup \n              SubnetId: !Select [ 0, Ref: SubnetId ] \n          Tags: \n            - Key: Name \n              Value: example-openvpn-server \n          UserData: \n            Fn::Base64: !Sub \n              - | \n                public_hostname=openvpn \n                admin_user=openvpn \n                admin_pw=${admin_pw} \n                reroute_gw=1 \n                reroute_dns=1 \n              - admin_pw: !Ref AdminPassword\n\n```", "```\n      Outputs: \n        OpenVPNAdministration: \n          Value: \n            Fn::Join: \n              - \"\" \n              - - https:// \n                - !GetAtt OpenVPNInstance.PublicIp \n                - /admin/ \n          Description: Admin URL for OpenVPN server \n        OpenVPNClientLogin: \n          Value: \n            Fn::Join: \n              - \"\" \n              - - https:// \n                - !GetAtt OpenVPNInstance.PublicIp \n                - / \n          Description: Client login URL for OpenVPN server \n        OpenVPNServerIPAddress: \n          Value: !GetAtt OpenVPNInstance.PublicIp \n          Description: IP address for OpenVPN server\n\n```", "```\n aws cloudformation create-stack \\ \n        --template-body file://04-securely-access-private-instances.yaml \\ \n        --stack-name example-vpn \\ \n        --parameters \\ \n        ParameterKey=KeyName,ParameterValue=<key-pair-name> \\ \n        ParameterKey=VpcId,ParameterValue=<your-vpc-id> \\ \n        ParameterKey=SubnetId,ParameterValue=<your-public-subnet-id> \n\n```", "```\n      AWSTemplateFormatVersion: \"2010-09-09\"\n      Description: Create an Auto Scaling Group\n\n```", "```\n      Parameters:\n        SubnetIds:\n          Description: Subnet IDs where instances can be launched\n          Type: List<AWS::EC2::Subnet::Id>\n\n```", "```\n    AmiId: \n        Description: The application server's AMI ID \n        Type: AWS::EC2::Image::Id \n        Default: ami-9be6f38c # AWS Linux in us-east-1 \n      InstanceType: \n        Description: The type of instance to launch \n        Type: String \n        Default: t2.micro\n\n```", "```\n      MinSize: \n        Description: Minimum number of instances in the group \n        Type: Number \n        Default: 1\n      MaxSize: \n        Description: Maximum number of instances in the group \n        Type: Number \n        Default: 4 \n\n      ThresholdCPUHigh: \n        Description: Launch new instances when CPU utilization \n          is over this threshold \n        Type: Number \n        Default: 60 \n\n      ThresholdCPULow: \n        Description: Remove instances when CPU utilization\n          is under this threshold \n        Type: Number \n        Default: 40 \n\n      ThresholdMinutes: \n        Description: Launch new instances when over the CPU \n          threshold for this many minutes \n        Type: Number \n        Default: 5\n\n```", "```\n      Resources: \n        AutoScalingGroup: \n          Type: AWS::AutoScaling::AutoScalingGroup \n          Properties: \n            MinSize: !Ref MinSize \n            MaxSize: !Ref MaxSize \n            LaunchConfigurationName: !Ref LaunchConfiguration \n            Tags: \n              - Key: Name \n                Value: !Sub \"${AWS::StackName} server\" \n                PropagateAtLaunch: true \n            VPCZoneIdentifier: !Ref SubnetIds\n\n```", "```\n      LaunchConfiguration: \n        Type: AWS::AutoScaling::LaunchConfiguration \n        Properties: \n          ImageId: !Ref AmiId \n          InstanceType: !Ref InstanceType \n          UserData: \n            Fn::Base64: !Sub | \n              #!/bin/bash -xe \n              # This will be run on startup, launch your application here\n\n```", "```\n        ScaleUpPolicy: \n          Type: AWS::AutoScaling::ScalingPolicy \n          Properties: \n            AdjustmentType: ChangeInCapacity \n            AutoScalingGroupName: !Ref AutoScalingGroup \n            Cooldown: 60 \n            ScalingAdjustment: 1 \n\n        ScaleDownPolicy: \n          Type: AWS::AutoScaling::ScalingPolicy \n          Properties: \n            AdjustmentType: ChangeInCapacity \n            AutoScalingGroupName: !Ref AutoScalingGroup \n            Cooldown: 60 \n            ScalingAdjustment: -1\n\n```", "```\n      CPUHighAlarm: \n        Type: AWS::CloudWatch::Alarm \n        Properties: \n          ActionsEnabled: true \n          AlarmActions: \n            - !Ref ScaleUpPolicy \n          AlarmDescription: Scale up on CPU load \n          ComparisonOperator: GreaterThanThreshold \n          Dimensions: \n            - Name: AutoScalingGroupName \n              Value: !Ref AutoScalingGroup \n          EvaluationPeriods: !Ref ThresholdMinutes \n          MetricName: CPUUtilization \n          Namespace: AWS/EC2 \n          Period: 60 \n          Statistic: Average \n          Threshold: !Ref ThresholdCPUHigh\n\n```", "```\n      CPULowAlarm: \n        Type: AWS::CloudWatch::Alarm \n        Properties: \n          ActionsEnabled: true \n          AlarmActions: \n            - !Ref ScaleDownPolicy \n          AlarmDescription: Scale down on CPU load \n          ComparisonOperator: LessThanThreshold \n          Dimensions: \n            - Name: AutoScalingGroupName \n              Value: !Ref AutoScalingGroup \n          EvaluationPeriods: !Ref ThresholdMinutes \n          MetricName: CPUUtilization \n          Namespace: AWS/EC2 \n          Period: 60 \n          Statistic: Average \n          Threshold: !Ref ThresholdCPULow\n\n```", "```\n     aws cloudformation create-stack \\ \n        --stack-name asg \\ \n        --template-body file://04-auto-scaling-an-application-server.yaml \\ \n        --parameters \\ \n        ParameterKey=SubnetIds,ParameterValue='<subnet-id-1>\\, \\\n          <subnet-id-2>' \n\n```", "```\n      \"builders\": [ \n        { \n          \"type\": \"amazon-ebs\", \n          \"instance_type\": \"t2.micro\", \n          \"region\": \"us-east-1\", \n          \"source_ami\": \"ami-9be6f38c\", \n          \"ssh_username\": \"ec2-user\", \n          \"ami_name\": \"aws-linux-apache {{timestamp}}\" \n        } \n      ],\n\n```", "```\n      \"provisioners\": [ \n        { \n          \"type\": \"shell\", \n          \"inline\": [ \n            \"sudo yum install -y httpd\", \n            \"sudo chkconfig httpd on\" \n          ] \n        } \n      ]\n\n```", "```\n packer validate 04-creating-machine-images.json\n\n```", "```\n packer build 04-creating-machine-images.json\n\n```", "```\n      AWSTemplateFormatVersion: '2010-09-09' \n      Parameters: \n        AmiId: \n          Type: AWS::EC2::AMI::Id \n          Description: AMI ID to launch instances from \n        VPCID: \n          Type: AWS::EC2::VPC::Id \n          Description: VPC where load balancer and instance will launch \n        SubnetIDs: \n          Type: List<AWS::EC2::Subnet::Id> \n          Description: Subnets where load balancer and instance will launch \n            (pick at least 2)\n\n```", "```\n      ExampleELBSecurityGroup: \n        Type: AWS::EC2::SecurityGroup \n        Properties: \n          GroupDescription: Security Group for example ELB \n          SecurityGroupIngress: \n            - IpProtocol: tcp \n              CidrIp: 0.0.0.0/0 \n              FromPort: 80 \n              ToPort: 80\n\n```", "```\n      ExampleEC2InstanceSecurityGroup: \n        Type: AWS::EC2::SecurityGroup \n        Properties: \n          GroupDescription: Security Group for example Instance \n          SecurityGroupIngress: \n            - IpProtocol: tcp \n              SourceSecurityGroupName: \n                Ref: ExampleELBSecurityGroup \n              FromPort: 80 \n              ToPort: 80\n\n```", "```\n      ExampleLoadBalancer: \n        Type: AWS::ElasticLoadBalancingV2::LoadBalancer \n        Properties: \n          Subnets:  \n            - Fn::Select: [ 0, Ref: SubnetIDs ] \n            - Fn::Select: [ 1, Ref: SubnetIDs ] \n          SecurityGroups: \n            - Fn::GetAtt: ExampleELBSecurityGroup.GroupId \n      ExampleListener: \n        Type: AWS::ElasticLoadBalancingV2::Listener \n        Properties: \n          LoadBalancerArn: \n            Ref: ExampleLoadBalancer \n          DefaultActions: \n            - Type: forward \n              TargetGroupArn: \n                Ref: ExampleTargetGroup \n          Port: 80 \n          Protocol: HTTP \n      ExampleTargetGroup: \n        Type: AWS::ElasticLoadBalancingV2::TargetGroup \n        Properties:  \n          Port: 80 \n          Protocol: HTTP \n          VpcId: \n             Ref: VPCID \n          Targets: \n            - Id: \n                Ref: ExampleEC2Instance\n\n```", "```\n      ExampleEC2Instance: \n        Type: AWS::EC2::Instance \n        Properties: \n          InstanceType: t2.nano \n          UserData: \n            Fn::Base64: \n              Fn::Sub: | \n                #!/bin/bash -ex \n                yum install -y nginx \n                service nginx start \n                exit 0 \n        ImageId: \n          Ref: AmiId \n        SecurityGroupIds: \n          - Fn::GetAtt: ExampleEC2InstanceSecurityGroup.GroupId \n        SubnetId:  \n          Fn::Select: [ 0, Ref: SubnetIDs ]\n\n```", "```\n      Outputs: \n        ExampleEC2InstanceHostname: \n          Value: \n            Fn::GetAtt: [ ExampleEC2Instance, PublicDnsName ] \n        ExampleELBURL: \n          Value: \n            Fn::Join: \n              - '' \n              - [ 'http://', { 'Fn::GetAtt': [ ExampleLoadBalancer,\n                  DNSName ] }, '/' ]\n\n```", "```\n      ExampleEC2InstanceIngress: \n        Type: AWS::EC2::SecurityGroupIngress \n        Properties: \n          IpProtocol: tcp \n          SourceSecurityGroupName: \n            Ref: ExampleEC2InstanceSecurityGroup \n          GroupName: \n            Ref: ExampleEC2InstanceSecurityGroup \n          FromPort: 22 \n          ToPort: 22\n\n```", "```\n      AWSTemplateFormatVersion: '2010-09-09' \n      Parameters: \n        VPCID: \n          Type: AWS::EC2::VPC::Id \n          Description: VPC where load balancer and instance will launch \n        SubnetIDs: \n          Type: List<AWS::EC2::Subnet::Id> \n          Description: Subnets where load balancer and instance will launch\n           (pick at least 2)\n\n```", "```\n      Mappings: \n        ELBAccountMap: \n          us-east-1: \n        ELBAccountID: 127311923021 \n          ap-southeast-2: \n        ELBAccountID: 783225319266\n\n```", "```\n      Resources: \n        ExampleLogBucket: \n          Type: AWS::S3::Bucket \n        ExampleBucketPolicy: \n          Type: AWS::S3::BucketPolicy \n          Properties: \n            Bucket: \n              Ref: ExampleLogBucket \n            PolicyDocument: \n              Statement: \n                - \n                  Action: \n                    - \"s3:PutObject\" \n                  Effect: \"Allow\" \n                  Resource: \n                    Fn::Join: \n                      - \"\" \n                      - \n                        - \"arn:aws:s3:::\" \n                        - Ref: ExampleLogBucket \n                        - \"/*\" \n                  Principal: \n                    AWS: \n                      Fn::FindInMap: [ ELBAccountMap, Ref: \"AWS::Region\",\n                        ELBAccountID ]                       \n\n```", "```\n      ExampleELBSecurityGroup: \n        Type: AWS::EC2::SecurityGroup \n        Properties: \n          GroupDescription: Security Group for example ELB \n          SecurityGroupIngress: \n            - \n              IpProtocol: tcp \n              CidrIp: 0.0.0.0/0 \n              FromPort: 80 \n              ToPort: 80\n\n```", "```\n      ExampleTargetGroup: \n        Type: AWS::ElasticLoadBalancingV2::TargetGroup \n        Properties: \n          Port: 80 \n          Protocol: HTTP \n          HealthCheckIntervalSeconds: 30 \n          HealthCheckProtocol: HTTP \n          HealthCheckPort: 80 \n          HealthCheckPath: / \n          HealthCheckTimeoutSeconds: 5 \n          HealthyThresholdCount: 5 \n          UnhealthyThresholdCount: 2 \n          Matcher: \n            HttpCode: '200' \n          VpcId: \n            Ref: VPCID\n\n```", "```\n      ExampleListener:\n        Type: AWS::ElasticLoadBalancingV2::Listener \n        Properties: \n          LoadBalancerArn: \n            Ref: ExampleLoadBalancer \n          DefaultActions: \n            - Type: forward \n              TargetGroupArn: \n        Ref: ExampleTargetGroup \n          Port: 80 \n          Protocol: HTTP\n\n```", "```\n      ExampleLoadBalancer: \n        Type: AWS::ElasticLoadBalancingV2::LoadBalancer \n        Properties: \n          LoadBalancerAttributes: \n            - Key: access_logs.s3.enabled \n             Value: true \n            - Key: access_logs.s3.bucket \n             Value: \n               Ref: ExampleLogBucket \n            - Key: idle_timeout.timeout_seconds \n              Value: 60 \n          Scheme: internet-facing \n          Subnets: \n            - Fn::Select: [ 0, Ref: SubnetIDs ]               \n            - Fn::Select: [ 1, Ref: SubnetIDs ]               \n          SecurityGroups: \n            - Fn::GetAtt: ExampleELBSecurityGroup.GroupId\n\n```", "```\n      Outputs: \n        ExampleELBURL: \n          Value: \n            Fn::Join: \n              - '' \n              - [ 'http://', { 'Fn::GetAtt': [ ExampleLoadBalancer,\n                  DNSName ] }, '/' ] \n        ExampleLogBucket: \n          Value: \n            Ref: ExampleLogBucket\n\n```", "```\n      ExampleHTTPSListener: \n        Type: AWS::ElasticLoadBalancingV2::Listener \n        Properties: \n          Certificates: \n            - CertificateArn:\n               arn:aws:acm:ap-southeast-2:123456789012:\n               certificate/12345678-1234-1234-1234-123456789012 \n          LoadBalancerArn: \n            Ref: ExampleLoadBalancer \n          DefaultActions: \n            - Type: forward \n              TargetGroupArn: \n                Ref: ExampleTargetGroup \n          Port: 443 \n          Protocol: HTTPS\n\n```"]