- en: Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon ECS is a managed service for containerized applications based on Docker
    containers. Managed service implies that ECS manages all container orchestration
    aspects including launching a cluster of virtual machines (EC2 instances), creating
    and scheduling containers on the virtual machines, and scaling the cluster of
    VMs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem: **Amazon ECS runs Docker containers on virtual machines (EC2 instances).
    The EC2 launch type incurs an overhead of launching and managing a cluster of
    virtual machines (EC2 instances). As a primer on ECS, a task definition defines
    a group of containers (container definitions). A container definition defines
    a name, Docker image, port mappings, entry point, and command. Resources (CPU
    and memory) are defined at both the task and container level. A service definition
    defines a service and consists of a task definition, launch type, load balancers,
    network configuration, deployment configuration, and deployments. The ECS cluster
    with the EC2 launch type is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03493ca7-76e6-497e-bb3a-1b2121bc3cc7.png)'
  prefs: []
  type: TYPE_IMG
- en: The ECS cluster with the EC2 launch type
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution: **Amazon Fargate has introduced serverless ECS and does not run
    VMs. The fundamental infrastructure with Fargate is the Fargate platform . A user
    does not manage the underlying instances, which makes Fargate an **Infrastructure
    as a Service** (**IaaS**). The main benefit of Fargate is that a user does not
    have to manage any servers. A user does not provision, configure, and scale clusters
    of VMs. With Fargate, a user does not create or manage any EC2 instances and does
    not manage cluster capacity and scheduling. A user only has to define the application
    resource requirements in terms of the CPU and memory of a container and a task,
    and Fargate manages the scaling as the requirements fluctuate. With the Fargate
    launch type, ECS is still integrable with all the same AWS services, which include
    IAM, VPC, and CloudWatch, as it is with the EC2 launch type. The EC2 launch type
    option is still available. The ECS cluster with the Fargate launch type is illustrated
    in the following diagram. The only supported networking mode with the Fargate
    launch type is `awsvpc`, and an elastic network interface for a task is created
    in a VPC to provide access to the task. An ECS cluster may consist of Fargate-managed
    tasks in multiple availability zones for high availability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11872c88-fbf8-4faf-bd0d-a3005c2201d1.png)'
  prefs: []
  type: TYPE_IMG
- en: ECS cluster with the Fargate launch type
  prefs: []
  type: TYPE_NORMAL
- en: With the introduction of the Fargate launch type, some of the settings in a
    task definition, container definition, and service definition are different to
    the EC2 launch type. The Fargate-related configuration parameters are discussed
    in subsequent sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ECS cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a container definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a task definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and creating a cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an additional task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only prerequisite is an AWS account, which may be created at [https://aws.amazon.com/resources/create-account/](https://aws.amazon.com/resources/create-account/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ECS cluster and service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Select Amazon ECS and click on Get Started to start creating an ECS cluster
    and service. First, a container definition and a task definition are configured,
    and subsequently the service and cluster are configured to create the ECS objects
    cluster, service, task definition, and container definition. We shall discuss
    configuring each of the these in the following sub-sections.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a Container definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Amazon ECS wizard gets started. A diagram of ECS objects gets displayed,
    as shown in [Chapter 1](c1c9718a-58b6-41b1-a9f3-0c3e5cb9d5c4.xhtml), *Getting
    Started with Amazon ECS and Amazon Fargate*. By default, the Fargate launch type
    is used. First, the container definition is to be defined, followed by the task
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: A Task definition consists of one or more container definitions. Most of the
    attributes are defined in the container definition, but a few are defined at the
    task level. To start with, select a container definition template, including the
    image, from one of those listed, which include sample-app and nginx, or create
    a custom container definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Configure for the custom container definition, as shown in the following
    screenshot, to create a new custom container definition:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f66ab87b-ec9b-4155-8a3e-6547e22c9357.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Edit container dialog gets displayed. The standard configuration for a
    container includes the fields discussed in the following table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Container name | The name of the Docker container to be created. |'
  prefs: []
  type: TYPE_TB
- en: '| Image | The Docker image. |'
  prefs: []
  type: TYPE_TB
- en: '| Port mappings | Container port mappings. Host port mappings are not supported
    with Fargate and default to the same value as the container port mappings. |'
  prefs: []
  type: TYPE_TB
- en: Specify a Container name (`hello-world`). Click on the i icon to display a callout
    for the container name. The container name must be up to 255 characters (uppercase
    and lowercase, numbers, hyphens, and underscores).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, specify a Docker Image (`tutum/hello-world`). The image name must be up
    to 255 characters (uppercase and lowercase, numbers, hyphens, underscores, colons,
    periods, `/`, and number signs). The Fargate launch type only supports images
    in the Amazon ECR or public repositories in Docker Hub.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, specify the Memory Limits in MiB. Two memory limits may be specified:
    Soft limit and Hard limit. Either or both may be specified. The effect of specifying
    one or both is discussed in this table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Memory types configured** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Soft limit only | ECS reserves the specified amount of memory (`memoryReservation`)
    for the container. The container may request more memory in excess of the soft
    limit up to all of the memory that is available on the container instance. |'
  prefs: []
  type: TYPE_TB
- en: '| Hard limit only | The memory requested by the container cannot exceed the
    hard limit. |'
  prefs: []
  type: TYPE_TB
- en: '| Both Soft limit and Hard limit | ECS reserves a specified amount of memory
    (`memoryReservation`) for the container. The container may request more memory
    in excess of the soft limit up to the hard limit if specified, or all of the memory
    that is available on the container instance, whichever it reaches first. If both
    are specified, the Hard limit must be greater or the same as the Soft limit. |'
  prefs: []
  type: TYPE_TB
- en: 'The dropdown for the Memory Limits lists both the Hard Limit and the Soft limit.
    The Soft limit default value, is 128 MiB. To add a hard limit on memory in addition
    to a soft limit, click on the Add Hard Limit link. A Hard limit gets added. Memory
    Limits are shown as follows. The Soft limit (`128` MiB) is less than the Hard
    limit (`256` MiB):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ca80a7d7-5ffc-4703-91da-c247bc2d1ac4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, specify the Port mappings. With the Fargate launch type, exposed ports
    must be specified as container ports. Container port `80` is specified as follows.
    The host port is the same as the Container port by default, and cannot be set to
    a different value with the `awsvpc` network mode that the Fargate launch type
    uses:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/480304dd-69e8-4590-b90c-a296627c2bb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Optionally, specify Advanced container configuration, which consists of configuration
    for Environment, Network settings, Storage & Logging, Resource Limits, and Docker
    Labels. While the memory and CPU configuration is required at the task definition
    level, it is optional at the container level. The only requirement is that the
    total amount of memory for all containers within a task must not exceed the memory
    configured for the task, and the total amount of CPU for all containers within
    a task must not exceed the CPU configured for the task. A container instance has
    1,024 CPU units for every CPU core. If the Essential checkbox for a container
    is checked, the failure of the container returns in the entire task failing. At
    least one container in a task must be set as the essential container, which implies
    that if a task has only one container, it must be essential, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a911c74b-ca0f-4a58-bf12-4b17beaca24b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The only network mode supported by the Fargate launch type is `awsvpc`. The
    only supported log configuration and log driver for the Fargate launch type is
    awslogs. Click on Update after configuring the custom container, shown as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6255986d-5aed-425e-83c0-d70f5dd8b281.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A Container definition for the hello-world custom container gets added as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/591a9f03-0bbd-4a68-8069-2e1bcd3ab2cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring a Task definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The task definition has a default name, which may be modified. The Network
    mode is awsvpc and cannot be modified. The Task execution role is Create new.
    The Task execution role is the IAM role assumed by the ECS to access the resources
    needed by a task and includes permissions to pull private Docker images and publish
    logs for a task. Compatibilities (launch type) is FARGATE. Task memory is 0.5
    GB by default, and Task CPU is 0.25 vCPU by default. The default Task definition
    is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Edit to modify any of the task settings if required:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6cf32b6b-a54a-4171-94f5-44a906823e05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Configure task definition window gets displayed, as shown in the following
    screenshot. Specify Task definition name (`hello-world-task-definition`) and select
    a Task execution role (or keep the default role):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f8a79b47-53db-4e37-8a3e-11f97fa871eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Task size is the total CPU and memory used by the task. The Task memory
    and Task CPU values constitute a bucket and only supported memory values for a
    selected CPU may be specified. The range of memory values supported for a given
    CPU may be obtained from the section Task Size table at [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html).
    If the Task memory is not within the supported range for the selected Task CPU,
    an error gets generated. Set Task memory to 1 GB and Task CPU to 0.5 vCPU. Click
    on Save to save the task configuration as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/468447d8-f5d2-42cb-9897-3f4a9347d9cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After configuring the container definition and task definition, the task definition
    summary is shown in the following screenshot. Click on Next to complete the container
    and task definitions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/27f2a4e3-63e7-40de-bcba-83a95eb0a9d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring a service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, configure the service. The default settings for the service create one
    task as indicated by the Number of desired tasks. Additional tasks may be added
    after a service has been created, as discussed in a later section. A new security
    group is created automatically as indicated by the Security group field/label,
    and the option to create a custom security group is not provided. A security group
    is created to allow all public traffic to a service on the container port(s) configured.
    Network access and security groups may be further configured outside the wizard.
    The Load balancer type is None by default, with the option to select Application
    Load Balancer.  Using an Application Load Balancer is discussed in [Chapter 6](7a007ed0-a02c-44fa-a5ca-f4e5b542525d.xhtml),
    *Using an Application Load Balancer*.
  prefs: []
  type: TYPE_NORMAL
- en: If an application load balancer is to be added, it must be created before creating
    the ECS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Next to complete the service configuration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/79e09c3f-afd5-465c-98b3-1cc79e615546.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring and creating a cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, configure the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a Cluster name (`hello-world`) with the default cluster name being default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The VPC ID setting specifies the ID of the VPC to be used by the container.
    By default, a new VPC is created automatically. The Subnets setting specifies
    the ID of the subnet to be used by the container. A subnet is a range of IP addresses
    in a VPC. By default, new subnets are created automatically. Click on Next to
    complete the cluster configuration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7902788f-feb0-42bc-8c55-599b8e167626.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Review the ECS to be created. To modify Task definition, Service, or Cluster,
    click on the associated Edit. To create the Amazon ECS with the launch type as
    Fargate, click on Create:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1bf20e31-a3d0-4a65-8e3e-874da6f6f3be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Amazon Elastic Service with the Fargate launch type begins to get created.
    The Launch Status displayed indicates the resource status as complete or pending.
    The complete status is for resources that have been created and the pending status
    is for resources that are in the process of being created. When all of the service
    resources have been created, click on View service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/40cf3b35-f545-494c-b8a6-4a9da4684304.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The service summary gets displayed. In addition to the service name, the service
    summary includes Cluster, Status, Task definition, Launch type, Platform version,
    Service role, Desired count, Pending count, and Running count. The Details tab
    is selected by default. As we did not add load balancing, the Load Balancing header
    indicates No load balancers. The Network Access header lists the Auto-Assign Public
    IP as Enabled, and these  are all shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de2971ae-c88f-4869-a8c4-3f707bad0c81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To list the tasks in the service, select the Tasks tab. One task is listed,
    as we configured only one task. The Task status is Running or Stopped. The tasks
    table columns are Task (name), Task definition, Last status, Desired status, Group,
    Launch type, and Platform version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da390a11-0feb-4b8c-b025-ed3251ccf7ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Events tab lists the events. Each event is associated with an Event Id,
    Event Time, and Message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f654371a-e33f-4a99-8a4d-3cd93a5a3240.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Deployments tab lists the Task Placement Strategy and Constraint. Task
    placement constraints are not supported with the Fargate launch type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c30499ce-29d6-4df0-9f9b-bad37c46c4d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To display the metrics, which include CPUUtilization and MemoryUtilization,
    select the Metrics tab. Minimum, Maximum, and Average values are color coded,
    as indicated in the screenshot legend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d303fc3-eee2-44c8-b7b6-14b2171a1aae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To display the logs, select the Logs tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b96b176-1ea2-4b6c-8f02-a117524d99f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Clusters list a hello-world cluster of the Fargate launch type and no EC2
    clusters are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e4df81b-1c80-429e-a08a-cda3a8f631a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A CloudFormation stack gets created for the ECS cluster, shown in the following CloudFormation
    dashboard. The AWS CloudFormation dashboard can be accessed at [https://us-east-2.console.aws.amazon.com/cloudformation](https://us-east-2.console.aws.amazon.com/cloudformation).
    The table lists the stacks with columns for Stack Name, Created Time, Status,
    and Description. Tabs for Overview, Outputs, Resources, Events, Template, Parameters,
    Tags, Stack Policy, and Change Sets are provided. The Events tab indicates the CREATE_COMPLETE
    status for resources that have been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6704a67-3455-479c-b086-6dd3fa80b894.png)'
  prefs: []
  type: TYPE_IMG
- en: Running additional tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, one task is created. In this section, we shall discuss the procedure
    to add an additional task. The Tasks tab in the cluster displays the tasks associated
    with a cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6ad7cbd-0880-41d0-a5ba-e8ff2332763f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Tasks associated with a service are listed on the service page. To display
    a task definition''s details, click on the link for the task definition in the
    Service page or the cluster page. A task definition is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/857564e8-4eb3-4742-8325-6993b318eb10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run a new task, select Actions | Run Task. A new task gets created with
    Run Task:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6023915b-e090-4f26-ba5c-f01d2bb1d07e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Two options are provided for the launch type to run a new task: Fargate and
    EC2\. Select the Fargate launch type, as shown in the following screenshot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Task Definition nam**e** is pre-specified. The Platform version is LATEST
    by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cluster is also selected and, if more than one cluster is available, the
    cluster may be selected from a drop-down list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify the Number of tasks to create.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Optionally, specify a Task Group. A task group is a set of related tasks, and
    all tasks in the same task group are considered as a set when performing spread
    placement. Required fields are marked with an asterisk (*):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d1dfbfec-7345-4e92-8e7b-05a59181feb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Select a Cluster VPC from the dropdown, as shown in the following screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Subnets dropdown, select the subnets. Choose the subnets in the selected
    VPC that the task scheduler should consider for placement. Only private subnets
    are currently supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select Auto-assign Public IP as `ENABLED`. A security group is created by default
    with port `80` open to the internet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fc88e515-6846-498e-9736-c774c7f26c96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Advanced options include Task overrides and Container overrides, as shown in
    the following screenshot. We have not set any advanced options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/36f7c572-64ad-4375-a15a-6218860462f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run Task to run a new task, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/bc5804e9-c9ce-4c12-9d8a-676e3066f27a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A task gets created. The message Created tasks successfully gets displayed.
    The message includes tasks, even though one new task has been created, because
    the message is a standard message for creating one or more new tasks. A new task
    gets listed in the Tasks tab, as shown in the following screenshot. The Last status
    column indicates that the task status is RUNNING. Initially, the Last status is
    PROVISIONING:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f7e6a64-75f2-4d8e-974d-e65946e01e5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The hello-world cluster lists two Running tasks, as shown in the following
    screenshot. The number of Pending tasks is listed as 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d68fc660-0251-479b-970a-0cd8d6e2b00e.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing the service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to access a service, the Network Access should be configured with
    Auto-assign public IP as ENABLED, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93cefa12-c179-49d6-b5e7-3bc549c55433.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To provide network access, an ENI gets created for each task. The ENI is associated
    with a public IP that may be used to access an application running in a task container:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the link for a task in Service | Tasks, as shown in the following
    screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/91b6aa08-e1e7-4629-84b4-293b89fe8e97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the task detail page, click on the link for the ENI Id, as shown in the
    following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/03a84940-4bd9-4844-93bd-1d1d9f07e69d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the IPv4 Public IP from the ENI console, 18.219.111.138 in the following
    screenshot, which would be different for different users:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/328fb163-74f9-4b1c-95d7-61a2c0f6879e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Specify the IPv4 Public IP in a browser to invoke the Hello World application, as
    shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ad3f7fbc-d613-43a4-974d-4f52ab47c621.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleting a cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete a cluster, the cluster must not be running any tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select all running tasks and click on Stop, as shown in the following screenshot.
    Alternatively, select Stop All, without selecting any tasks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/47a32a2e-fd4c-40f8-baa9-b82ac137510a.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Stop tasks confirmation dialog, click on Stop. The tasks get stopped,
    as indicated by the message Stopped tasks successfully.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on Delete Cluster to delete the cluster:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d73df405-48f6-4dc8-92d3-3a99a4b9bf4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Delete Cluster confirmation dialog, click on Delete. The hello-world
    cluster gets deleted. If the CoudFormation stack associated with the cluster times
    out before the cluster gets deleted, an error message gets displayed, as shown
    in the following screenshot, and the cluster does not get deleted. If the CloudFormation
    stack does not get deleted automatically when the ECS cluster is chosen to be
    deleted, click on the View CloudFormation Stack link in the error message:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/77b5964d-a95c-437a-95fc-d2ff314f2c24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the CloudFormation | Stacks dashboard, select CloudFormation, and click
    on Actions | Delete Stack, as shown in the following screenshot. Delete Stack
    may need to be initiated after the stack Status becomes DELETE FAILED:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/5f264ac5-8de1-4576-adc9-06d10f6ee0fc.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Delete Stack confirmation dialog, select all the resources that are to
    be deleted, along with the CloudFormation stack and click on Yes, Delete. CloudFormation gets
    deleted. After the CloudFormation stack has been deleted, delete the ECS cluster
    and the ECS cluster should also get deleted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced the Fargate launch type as used with an ECS cluster.
    We created a cluster, including container, task, and service definitions, using
    a Hello World Docker image. Subsequently, we invoked the Hello World application
    using the IPv4 public IP of the Elastic Network Interface associated with a task.
    Some of the container definition and task definition parameters are different
    for the Fargate launch type in comparison to the EC2 launch type, which is still
    available as an alternative with ECS. In the next chapter, we shall discuss integrating
    the CloudWatch Logs service with Fargate.
  prefs: []
  type: TYPE_NORMAL
