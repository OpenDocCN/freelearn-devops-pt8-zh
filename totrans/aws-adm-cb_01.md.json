["```\nAWSTemplateFormatVersion: '2010-09-09' \nParameters: \n  EC2KeyName: \n    Type: String \n    Description: EC2 Key Pair to launch with \nMappings: \n  RegionMap: \n    us-east-1: \n      AMIID: ami-9be6f38c \n    ap-southeast-2: \n      AMIID: ami-28cff44b \nResources: \n  ExampleEC2Instance: \n    Type: AWS::EC2::Instance \n    Properties: \n      InstanceType: t2.nano \n      UserData: \n        Fn::Base64: \n          Fn::Sub': |\n            #!/bin/bash -ex\n            /opt/aws/bin/cfn-signal '${ExampleWaitHandle}' \n      ImageId: \n        Fn::FindInMap: [ RegionMap, Ref: 'AWS::Region', AMIID ]    \n      KeyName: \n        Ref: EC2KeyName \n  ExampleWaitHandle: \n    Type: AWS::CloudFormation::WaitConditionHandle \n    Properties: \n  ExampleWaitCondition: \n    Type: AWS::CloudFormation::WaitCondition \n    DependsOn: ExampleEC2Instance \n    Properties: \n      Handle: \n        Ref: ExampleWaitHandle \n      Timeout: 600 \nOutputs: \n  ExampleOutput: \n    Value: \n      Fn::GetAtt: ExampleWaitCondition.Data \n    Description: The data signaled with the WaitCondition\n\n```", "```\nKeyName:\n  Ref: EC2KeyName\n\n```", "```\nMappings:\n  RegionMap:\n    us-east-1:\n      AMIID: ami-9be6f38c\n    ap-southeast-2:\n      AMIID: ami-28cff44b\n\n```", "```\nExampleWaitHandle: \n  Type: AWS::CloudFormation::WaitConditionHandle \n  Properties: \nExampleWaitCondition: \n  Type: AWS::CloudFormation::WaitCondition \n  DependsOn: ExampleEC2Instance \n  Properties: \n    Handle: \n      Ref: ExampleWaitHandle \n    Timeout: 600\n\n```", "```\n\"Fn::Join\": [ \".\", [ 1, 2, 3, 4 ] ]\n\n```", "```\n\"1.2.3.4\"\n\n```", "```\nDSN: \"Fn::Sub\"\n  - mysql://${db_user}:${db_pass}@${db_host}:3306/wordpress\n  - { db_user: lchan, db_pass: ch33s3, db_host: localhost }\n\n```", "```\nmysql://lchan:ch33s3@localhost:3306/wordpress\n\n```", "```\npip install awscli\n\n```", "```\npip install --upgrade awscli\n\n```", "```\naws configure\n\n```", "```\naws configure --profile <profile-name>\n\n```", "```\nexport AWS_PROFILE=<profile-name>\n\n```", "```\nexport AWS_ACCESS_KEY_ID=<access-key-id>\nexport AWS_SECRET_ACCESS_KEY=<secret-access-key>\n\n```", "```\naws ec2 describe-availability-zones --output json \n{ \n\"AvailabilityZones\": [ \n        { \n\"State\": \"available\", \n\"RegionName\": \"us-east-1\", \n\"Messages\": [], \n\"ZoneName\": \"us-east-1a\" \n        }, \n        { \n\"State\": \"available\", \n\"RegionName\": \"us-east-1\", \n\"Messages\": [], \n\"ZoneName\": \"us-east-1c\" \n        }, \n        { \n\"State\": \"available\", \n\"RegionName\": \"us-east-1\", \n\"Messages\": [], \n\"ZoneName\": \"us-east-1d\" \n        }, \n        { \n\"State\": \"available\", \n\"RegionName\": \"us-east-1\", \n\"Messages\": [], \n\"ZoneName\": \"us-east-1e\" \n        } \n    ] \n}\n\n```", "```\n$ aws ec2 describe-availability-zones \\\n --output json \\\n --query 'AvailabilityZones[].ZoneName'\n [\n \"us-east-1a\",\n \"us-east-1c\",\n \"us-east-1d\",\n \"us-east-1e\"\n ]\n\n```", "```\n$ aws ec2 describe-availability-zones \n --output json \n --query \"AvailabilityZones[?ZoneName == 'us-east-1a'].State\"\n [\n \"available\"\n ]\n\n```", "```\n$ aws ec2 describe-availability-zones --generate-cli-skeleton \n{ \n\"DryRun\": true, \n\"ZoneNames\": [ \n\"\" \n ], \n\"Filters\": [ \n { \n\"Name\": \"\", \n\"Values\": [ \n\"\" \n ] \n } \n ] \n}\n\n```", "```\n$ aws ec2 describe-availability-zones --generate-cli-skeleton output \n{ \n\"AvailabilityZones\": [ \n { \n\"ZoneName\": \"ZoneName\", \n\"State\": \"State\", \n\"RegionName\": \"RegionName\", \n\"Messages\": [ \n { \n\"Message\": \"Message\" \n } \n ] \n } \n ] \n}\n\n```", "```\naws s3 ls --bucket bucket-name --max-items 100 --starting-token None___100\n\n```", "```\ncomplete -C 'which aws_completer'aws\n\n```", "```\n$ aws ec2 describe-availability-zones --output json | jq '.AvailabilityZones[].ZoneName'\n\"us-east-1a\"\n\"us-east-1c\"\n\"us-east-1d\"\n\"us-east-1e\"\n\n```"]