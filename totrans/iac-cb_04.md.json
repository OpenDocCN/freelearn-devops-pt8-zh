["```\nprovider \"digitalocean\" {\n  token = \"${var.do_token}\"\n}\n```", "```\nvariable \"do_token\" {\n  description = \"Digital Ocean Token\"\n}\n```", "```\ndo_token = \"a1b2c3d4e5f6\"\n```", "```\nresource \"digitalocean_ssh_key\" \"default\" {\n  name       = \"Digital Ocean SSH Key\"\n  public_key = \"${file(\"${var.ssh_key_file}.pub\")}\"\n}\n```", "```\nvariable \"ssh_key_file\" {\n  default     = \"keys/iac_admin_sshkey\"\n  description = \"Default SSH Key file\"\n}\n```", "```\nssh_key_file = \"./keys/my_own_key\"\n```", "```\nresource \"digitalocean_droplet\" \"coreos\" {\n  image              = \"${var.coreos_channel}\"\n  count              = \"${var.cluster_nodes}\"\n  name               = \"coreos-${count.index+1}\"\n  region             = \"${var.do_region}\"\n  size               = \"${var.do_droplet_size}\"\n  ssh_keys           = [\"${digitalocean_ssh_key.default.id}\"]\n  private_networking = true\n  backups            = false\n  user_data          = \"${file(\"cloud-config.yml\")}\"\n}\n```", "```\nvariable \"do_region\" {\n  default     = \"ams3\"\n  description = \"Digital Ocean Region\"\n}\n\nvariable \"do_droplet_size\" {\n  default     = \"512mb\"\n  description = \"Droplet Size\"\n}\n\nvariable \"coreos_channel\" {\n  default     = \"coreos-stable\"\n  description = \"CoreOS Channel\"\n}\n\nvariable \"cluster_nodes\" {\n  default     = \"3\"\n  description = \"Number of nodes in the cluster\"\n}\n```", "```\ndo_region = \"nyc1\"\ncoreos_channel = \"coreos-beta\"\n```", "```\noutput \"CoreOS Cluster Members\" {\n value = \"${formatlist(\"ssh core@%v -i ${var.ssh_key_file}\", digitalocean_droplet.coreos.*.ipv4_address)}\"\n}\n\n```", "```\nCoreOS Cluster Members = [\n ssh core@192.241.128.44 -i ./keys/iac_admin_sshkey,\n ssh core@192.241.130.33 -i ./keys/iac_admin_sshkey,\n ssh core@198.199.120.212 -i ./keys/iac_admin_sshkey\n]\n\n```", "```\nresource \"digitalocean_domain\" \"cluster_domainname\" {\n  name       = \"${var.cluster_domainname}\"\n  ip_address = \"${digitalocean_droplet.coreos.0.ipv4_address}\"\n}\n```", "```\nvariable \"cluster_domainname\" {\n  default     = \"infrastructure-as-code.org\"\n  description = \"Domain to use\"\n}\n```", "```\nresource \"digitalocean_record\" \"ipv4\" {\n  count  = \"${var.cluster_nodes}\"\n  domain = \"${digitalocean_domain.cluster_domainname.name}\"\n  type   = \"A\"\n  name   = \"${element(digitalocean_droplet.coreos.*.name, count.index)}\"\n  value  = \"${element(digitalocean_droplet.coreos.*.ipv4_address, count.index)}\"\n}\n```", "```\noutput \"CoreOS Cluster Members DNS\" {\n  value = \"${formatlist(\"ssh core@%v -i ${var.ssh_key_file}\", digitalocean_record.ipv4.*.fqdn)}\"\n}\n```", "```\n$ curl -w \"\\n\" 'https://discovery.etcd.io/new?size=3'\nhttps://discovery.etcd.io/b04ddb7ff454503a66ead486b448afb7\n\n```", "```\n#cloud-config\n# https://coreos.com/validate/\ncoreos:\n  etcd2:\n    discovery: \"https://discovery.etcd.io/b04ddb7ff454503a66ead486b448afb7\"\n    advertise-client-urls: \"http://$private_ipv4:2379\"\n    initial-advertise-peer-urls: \"http://$private_ipv4:2380\"\n    listen-client-urls: http://0.0.0.0:2379\n    listen-peer-urls: http://$private_ipv4:2380\n  units:\n    - name: etcd2.service\n      command: start\n    - name: fleet.service\n      command: start\n  fleet:\n    public-ip: \"$public_ipv4\"\n    metadata: \"region=ams,provider=digitalocean\"\n```", "```\nprovider \"statuscake\" {\n  username = \"${var.statuscake_username}\"\n  apikey   = \"${var.statuscake_apikey}\"\n}\n```", "```\nvariable \"statuscake_username\" {\n  default     = \"changeme\"\n  description = \"StatusCake Account Username\"\n}\n\nvariable \"statuscake_apikey\" {\n  default     = \"hackme\"\n  description = \"StatusCake Account API Key\"\n}\n```", "```\nresource \"statuscake_test\" \"coreos_cluster\" {\n  count        = \"${var.cluster_nodes}\"\n  website_name = \"${element(digitalocean_droplet.coreos.*.name, count.index)}.${var.cluster_domainname}\"\n  website_url  = \"${element(digitalocean_droplet.coreos.*.ipv4_address, count.index)}\"\n  test_type    = \"PING\"\n  check_rate   = 300\n  paused       = false\n}\n```", "```\n$ terraform apply\n[...]\n\nCoreOS Cluster Members = [\n ssh core@159.203.189.142 -i ./keys/iac_admin_sshkey,\n ssh core@159.203.189.146 -i ./keys/iac_admin_sshkey,\n ssh core@159.203.189.131 -i ./keys/iac_admin_sshkey\n]\nCoreOS Cluster Members DNS = [\n ssh core@coreos-1.mydomain.com -i ./keys/iac_admin_sshkey,\n ssh core@coreos-2.mydomain.com -i ./keys/iac_admin_sshkey,\n ssh core@coreos-3.mydomain.com -i ./keys/iac_admin_sshkey\n]\n\n```", "```\n$ ssh core@159.203.189.142 -i ./keys/iac_admin_sshkey\n\n```", "```\n$ core@coreos-1 ~ $ etcdctl cluster-health\nmember 668f889d5f96b578 is healthy: got healthy result from http://10.136.24.178:2379\nmember c8e8906e0f3f63be is healthy: got healthy result from http://10.136.24.176:2379\nmember f3b53735aca3062e is healthy: got healthy result from http://10.136.24.177:2379\ncluster is healthy\n\n```", "```\ncore@coreos-1 ~ $ fleetctl list-machines\nMACHINE         IP              METADATA\n24762c02...     159.203.189.146 provider=digitalocean,region=ams\n3b4b0792...     159.203.189.142 provider=digitalocean,region=ams\n59e15b88...     159.203.189.131 provider=digitalocean,region=ams\n\n```", "```\nvariable \"credentials_file\" {\n  default     = \"account.json\"\n  description = \"API credentials JSON file\"\n}\nvariable \"region\" {\n  default     = \"europe-west\"\n  description = \"Region name\"\n}\nvariable \"project_name\" {\n  default     = \"default-project\"\n  description = \"Project ID to use\"\n}\n```", "```\nproject_name = \"iac-book-infra\"\nregion = \"us-east1\"\n```", "```\nprovider \"google\" {\n  credentials = \"${file(\"${var.credentials_file}\")}\"\n  project     = \"${var.project_name}\"\n  region      = \"${var.region}\"\n}\n```", "```\nvariable \"machine_type\" {\n  default     = \"f1-micro\"\n  description = \"Machine type\"\n}\n\nvariable \"zone\" {\n  default     = \"c\"\n  description = \"Region Zone\"\n}\n\nvariable \"disk_image\" {\n  default     = \"centos-cloud/centos-7\"\n  description = \"Disk image\"\n}\n\nvariable \"ssh_key\" {\n  default     = \"keys/admin_key\"\n  description = \"SSH key\"\n}\n\nvariable \"ssh_username\" {\n  default     = \"root\"\n  description = \"The SSH username to use\"\n}\n\nvariable \"www_servers\" {\n  default = \"2\"\n  description = \"Amount of www servers\"\n}\n```", "```\nmachine_type = \"n1-standard-1\"\nzone = \"d\"\nssh_username = \"centos\"\n```", "```\nresource \"google_compute_instance\" \"www\" {\n  count        = \"${var.www_servers}\"\n  name         = \"www-${count.index+1}\"\n  machine_type = \"${var.machine_type}\"\n  zone         = \"${var.region}-${var.zone}\"\n\n  disk {\n    image = \"${var.disk_image}\"\n  }\n\n  metadata {\n    ssh-keys = \"${var.ssh_username}:${file(\"${var.ssh_key}.pub\")}\"\n  }\n}\n```", "```\ntags         = [\"www\"]\n```", "```\n  network_interface {\n    network = \"default\"\n\n    access_config {\n      nat_ip = \"\"\n    }\n  }\n```", "```\nprovisioner \"remote-exec\" {\n    connection {\n      user        = \"${var.ssh_username}\"\n      private_key = \"${file(\"${var.ssh_key}\")}\"\n    }\n\n    inline = [\n      \"sudo yum update -y\",\n      \"sudo yum install -y docker\",\n      \"sudo systemctl enable docker\",\n      \"sudo systemctl start docker\",\n    ]\n  }\n```", "```\nresource \"google_compute_firewall\" \"fw\" {\n  name    = \"www-firewall\"\n  network = \"default\"\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"www\"]\n}\n```", "```\nresource \"google_compute_http_health_check\" \"www\" {\n  name                = \"http\"\n  request_path        = \"/\"\n  check_interval_sec  = 1\n  healthy_threshold   = 1\n  unhealthy_threshold = 3\n  timeout_sec         = 1\n}\n```", "```\nresource \"google_compute_target_pool\" \"www\" {\n  name          = \"www-pool\"\n  instances     = [\"${google_compute_instance.www.*.self_link}\"]\n  health_checks = [\"${google_compute_http_health_check.www.name}\"]\n}\n```", "```\nresource \"google_compute_forwarding_rule\" \"http\" {\n  name       = \"http-lb\"\n  target     = \"${google_compute_target_pool.www.self_link}\"\n  port_range = \"80\"\n}\n```", "```\nvariable \"db_type\" {\n  default     = \"D0\"\n  description = \"Google SQL DB type\"\n}\n\nvariable \"db_authorized_network\" {\n  default     = \"0.0.0.0/0\"\n  description = \"A corporate network authorized to access the DB\"\n}\n\nvariable \"db_username\" {\n  default     = \"dbadmin\"\n  description = \"A MySQL username\"\n}\n\nvariable \"db_password\" {\n  default     = \"changeme\"\n  description = \"A MySQL password\"\n}\n\nvariable \"db_name\" {\n  default     = \"db_name\"\n  description = \"MySQL database name\"\n}\n```", "```\ndb_authorized_network = \"163.172.161.158/32\"\ndb_username = \"sqladmin\"\ndb_password = \"pwd1970\"\ndb_name = \"app_db\"\ndb_type = \"D2\"\n```", "```\nresource \"google_sql_database_instance\" \"master\" {\n  name             = \"mysql-mastr-1\"\n  region           = \"${var.region}\"\n  database_version = \"MYSQL_5_6\"\n\n  settings = {\n    tier              = \"${var.db_type}\"\n    activation_policy = \"ALWAYS\"         // vs \"ON_DEMAND\"\n    pricing_plan      = \"PER_USE\"        // vs \"PACKAGE\"\n\n    ip_configuration {\n      ipv4_enabled = true\n\n      authorized_networks {\n        name  = \"authorized_network\"\n        value = \"${var.db_authorized_network}\"\n      }\n\n      authorized_networks {\n        name  = \"${google_compute_instance.www.0.name}\"\n        value = \"${google_compute_instance.www.0.network_interface.0.access_config.0.assigned_nat_ip}\"\n      }\n\n      authorized_networks {\n        name  = \"${google_compute_instance.www.1.name}\"\n        value = \"${google_compute_instance.www.1.network_interface.0.access_config.0.assigned_nat_ip}\"\n      }\n    }\n  }\n}\n```", "```\nresource \"google_sql_database\" \"db\" {\n  name     = \"${var.db_name}\"\n  instance = \"${google_sql_database_instance.master.name}\"\n}\n```", "```\nresource \"google_sql_user\" \"user_www_1\" {\n  name     = \"${var.db_username}\"\n  password = \"${var.db_password}\"\n  instance = \"${google_sql_database_instance.master.name}\"\n  host     = \"${google_compute_instance.www.0.network_interface.0.access_config.0.assigned_nat_ip}\"\n}\n\nresource \"google_sql_user\" \"user_www_2\" {\n  name     = \"${var.db_username}\"\n  password = \"${var.db_password}\"\n  instance = \"${google_sql_database_instance.master.name}\"\n  host     = \"${google_compute_instance.www.1.network_interface.0.access_config.0.assigned_nat_ip}\"\n}\n```", "```\noutput \"HTTP Servers\" {\n  value = \"${join(\" \", google_compute_instance.www.*.network_interface.0.access_config.0.assigned_nat_ip)}\"\n}\n\noutput \"MySQL DB IP\" {\n  value = \"${google_sql_database_instance.master.ip_address.0.ip_address}\"\n}\n\noutput \"Load Balancer Public IPv4\" {\n  value = \"${google_compute_forwarding_rule.http.ip_address}\"\n}\n\noutput \"DB Credentials\" {\n  value = \"Username=${var.db_username} Password=${var.db_password}\"\n}\n```", "```\n$ terraform apply\n[...]\nOutputs:\n\nDB Credentials = Username=sqladmin Password=pwd1970\nHTTP Servers = 104.196.180.192 104.196.157.246\nLoad Balancer Public IPv4 = 104.196.45.46\nMySQL DB IP = 173.194.111.120\n\n```", "```\n$ sudo docker run -it --rm -p 80:80 --name web nginx\n\n```", "```\nvariable \"user_name\" {\n  default     = \"changeme\"\n  description = \"OpenStack username\"\n}\n\nvariable \"password\" {\n  default     = \"hackme\"\n  description = \"OpenStack password\"\n}\n\nvariable \"tenant_name\" {\n  default     = \"123456\"\n  description = \"OpenStack Tenant name\"\n}\n\nvariable \"auth_url\" {\n  default     = \"https://openstack.url/v2.0\"\n  description = \"OpenStack Authentication Endpoint\"\n}\n```", "```\nuser_name   = \"***\"\ntenant_name = \"***\"\npassword    = \"***\"\nauth_url    = \"https://auth.cloud.ovh.net/v2.0/\"\n```", "```\nvariable \"region\" {\n  default     = \"GRA1\"\n  description = \"OpenStack Region\"\n}\n\nvariable \"ssh_key_file\" {\n  default     = \"keys/admin_key\"\n  description = \"Default SSH key\"\n}\n```", "```\nregion      = \"BHS1\"\n```", "```\nresource \"openstack_compute_keypair_v2\" \"ssh\" {\n  name       = \"Admin SSH Public Key\"\n  region     = \"${var.region}\"\n  public_key = \"${file(\"${var.ssh_key_file}.pub\")}\"\n}\n```", "```\nvariable \"allowed_network\" {\n  default = \"1.2.3.4/32\"\n  description = \"The Whitelisted Corporate Network\"\n}\n```", "```\n resource \"openstack_compute_secgroup_v2\" \"http-sg\" {\n  name        = \"http-sg\"\n  description = \"HTTP Security Group\"\n  region      = \"${var.region}\"\n\n  rule {\n    from_port   = 80\n    to_port     = 80\n    ip_protocol = \"tcp\"\n    cidr        = \"0.0.0.0/0\"\n  }\n}\n```", "```\nresource \"openstack_compute_secgroup_v2\" \"base-sg\" {\n  name        = \"base-sg\"\n  description = \"Base Security Group\"\n  region      = \"${var.region}\"\n\n  rule {\n    from_port   = 22\n    to_port     = 22\n    ip_protocol = \"tcp\"\n    cidr        = \"${var.allowed_network}\"\n  }\n}\n```", "```\nresource \"openstack_blockstorage_volume_v2\" \"docker\" {\n  region      = \"${var.region}\"\n  name        = \"docker-vol\"\n  description = \"Docker volume\"\n  size        = 10\n}\n```", "```\noutput \"Block Storage\" {\n  value = \"${openstack_blockstorage_volume_v2.docker.description}: ${openstack_blockstorage_volume_v2.docker.name}, ${openstack_blockstorage_volume_v2.docker.size}GB\"\n}\n```", "```\nvariable \"image_name\" {\n  default     = \"CentOS\"\n  description = \"Default OpenStack image to boot\"\n}\n\nvariable \"flavor_name\" {\n  default     = \"some_flavor\"\n  description = \"OpenStack instance flavor\"\n}\n```", "```\nimage_name  = \"Ubuntu 16.04\"\nflavor_name = \"vps-ssd-1\"\n```", "```\nresource \"openstack_compute_instance_v2\" \"gitlab\" {\n  name            = \"gitlab\"\n  region          = \"${var.region}\"\n  image_name      = \"${var.image_name}\"\n  flavor_name     = \"${var.flavor_name}\"\n  key_pair        = \"${openstack_compute_keypair_v2.ssh.name}\"\n  security_groups = [\"${openstack_compute_secgroup_v2.base-sg.name}\", \"${openstack_compute_secgroup_v2.http-sg.name}\"]\n}\n```", "```\n  volume {\n    volume_id = \"${openstack_blockstorage_volume_v2.docker.id}\"\n    device    = \"/dev/vdb\"\n  }\n```", "```\nvariable \"ssh_username\" {\n  default     = \"ubuntu\"\n  description = \"SSH username\"\n}\n```", "```\n  provisioner \"remote-exec\" {\n    connection {\n      user        = \"${var.ssh_username}\"\n      private_key = \"${file(\"${var.ssh_key_file}\")}\"\n    }\n\n    inline = [\n      \"sudo mkfs.ext4 /dev/vdb\",\n      \"sudo mkdir /var/lib/docker\",\n      \"sudo su -c \\\"echo '/dev/vdb /var/lib/docker ext4 defaults 0 0' >> /etc/fstab\\\"\",\n      \"sudo mount -a\",\n      \"sudo apt update -y\",\n      \"sudo apt upgrade -y\",\n      \"sudo apt install -y docker.io\",\n      \"sudo systemctl enable docker\",\n      \"sudo systemctl start docker\",\n      \"sudo docker run -d -p 80:80 --name gitlab gitlab/gitlab-ce:latest\",\n    ]\n  }\n```", "```\noutput \"GitLab Instance\" {\n  value = \"gitlab: http://${openstack_compute_instance_v2.gitlab.access_ip_v4}\"\n}\n```", "```\nvariable \"num_runners\" {\n  default     = \"1\"\n  description = \"Number of GitLab CI runners\"\n}\n```", "```\nnum_runners = \"2\"\n```", "```\nresource \"openstack_compute_instance_v2\" \"runner\" {\n  count           = \"${var.num_runners}\"\n  name            = \"gitlab-runner-${count.index+1}\"\n  region          = \"${var.region}\"\n  image_name      = \"${var.image_name}\"\n  flavor_name     = \"${var.flavor_name}\"\n  key_pair        = \"${openstack_compute_keypair_v2.ssh.name}\"\n  security_groups = [\"${openstack_compute_secgroup_v2.base-sg.name}\", \"${openstack_compute_secgroup_v2.http-sg.name}\"]\n\n  provisioner \"remote-exec\" {\n    connection {\n      user        = \"${var.ssh_username}\"\n      private_key = \"${file(\"${var.ssh_key_file}\")}\"\n    }\n\n    inline = [\n      \"sudo apt update -y\",\n      \"sudo apt upgrade -y\",\n      \"sudo apt install -y docker.io\",\n      \"sudo systemctl enable docker\",\n      \"sudo systemctl start docker\",\n      \"sudo docker run -d --name gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest\",\n    ]\n  }\n}\n```", "```\noutput \"GitLab Runner Instances\" {\n  value = \"${join(\" \", openstack_compute_instance_v2.runner.*.access_ip_v4)}\"\n}\n```", "```\nresource \"openstack_objectstorage_container_v1\" \"releases\" {\n  region = \"${var.region}\"\n  name   = \"releases\"\n}\n```", "```\noutput \"Object Storage\" {\n  value = \"Container name: ${openstack_objectstorage_container_v1.releases.name}\"\n}\n```", "```\n$ terraform apply\n[...]\n\nOutputs:\n\nBlock Storage = Docker volume: docker-vol, 10GB\nGitLab Instance = gitlab: http://158.69.95.202\nGitLab Runner Instances = 158.69.95.200 158.69.95.201\nObject Storage = Container name: releases\n\n```", "```\nvariable \"heroku_email\" {\n  default     = \"user@mail.com\"\n  description = \"Heroku account email\"\n}\n\nvariable \"heroku_api_key\" {\n  default     = \"12345\"\n  description = \"Heroku account API key\"\n}\n```", "```\nheroku_email = \"me@gmail.com\"\nheroku_api_key = \"52eef461-5e34-47d8-8191-ede7ef6cf9bg\"\n```", "```\nprovider \"heroku\" {\n  email   = \"${var.heroku_email}\"\n  api_key = \"${var.heroku_api_key}\"\n}\n```", "```\nvariable \"heroku_region\" {\n  default = \"us\"\n  description = \"Heroku region\"\n}\n\nvariable \"slack_token\" {\n  default = \"xoxb-1234-5678-1234-5678\"\n  description = \"Slack Token\"\n}\n```", "```\nresource \"heroku_app\" \"hubot\" {\n  name   = \"iac-book-hubot\"\n  region = \"${var.heroku_region}\"\n\n  config_vars {\n    HUBOT_SLACK_TOKEN = \"${var.slack_token}\"\n  }\n}\n```", "```\noutput \"heroku URL\" {\n  value = \"${heroku_app.hubot.web_url}\"\n}\n\noutput \"heroku_vars\" {\n  value = \"${heroku_app.hubot.all_config_vars}\"\n}\n\noutput \"heroku Git URL\" {\n  value = \"${heroku_app.hubot.git_url}\"\n}\n```", "```\nresource \"heroku_addon\" \"redis\" {\n  app  = \"${heroku_app.hubot.name}\"\n  plan = \"heroku-redis:hobby-dev\"\n}\n```", "```\n$ terraform apply\n[...]\nOutputs:\n\nheroku Git URL = https://git.heroku.com/iac-book-hubot.git\nheroku URL = https://iac-book-hubot.herokuapp.com/\nheroku_vars = {\n  HUBOT_SLACK_TOKEN = xoxb-1234-5678-91011-00e4dd\n}\n```", "```\n$ npm install -g yo generator-hubot\n\n```", "```\n$ mkdir src; cd src\n$ yo hubot\n\n```", "```\n$ heroku git:remote --app iac-book-hubot\n\n```", "```\nvariable \"auth_token\" {\n  default     = \"1234\"\n  description = \"API Key Auth Token\"\n}\n```", "```\nauth_token = \"JnN7e6tPMpWNtGcyPGT93AkLuguKw2eN\"\n```", "```\nresource \"packet_project\" \"swarm\" {\n  name = \"Docker Swarm Bare Metal Infrastructure\"\n}\n```", "```\nvariable \"ssh_key\" {\n  default     = \"keys/admin_key\"\n  description = \"Path to SSH key\"\n}\n```", "```\nresource \"packet_ssh_key\" \"admin\" {\n  name       = \"admin_key\"\n  public_key = \"${file(\"${var.ssh_key}.pub\")}\"\n}\n```", "```\nvariable \"facility\" {\n  default     = \"ewr1\"\n  description = \"Packet facility (us-east=ewr1, us-west=sjc1, eu-west=ams1)\"\n}\n\nvariable \"plan\" {\n  default     = \"baremetal_0\"\n  description = \"Packet machine type\"\n}\n\nvariable \"operating_system\" {\n  default     = \"coreos_stable\"\n  description = \"Packet operating_system\"\n}\n\nvariable \"ssh_username\" {\n  default     = \"root\"\n  description = \"Default host username\"\n}\n```", "```\nfacility = \"ams1\"\noperating_system = \"ubuntu_16_04_image\"\n```", "```\nresource \"packet_device\" \"swarm_master\" {\n  hostname         = \"swarm-master\"\n  plan             = \"${var.plan}\"\n  facility         = \"${var.facility}\"\n  operating_system = \"${var.operating_system}\"\n  billing_cycle    = \"hourly\"\n  project_id       = \"${packet_project.swarm.id}\"\n}\n```", "```\n#!/usr/bin/env bash\n# file: ./scripts/update_os.sh\nsudo apt update -yqq\nsudo apt upgrade -yqq\n\n```", "```\n#!/usr/bin/env bash\n# file: ./scripts/install_docker.sh\ncurl -sSL https://get.docker.com/ | sh\nsudo systemctl enable docker\nsudo systemctl start docker\n\n```", "```\n  provisioner \"remote-exec\" {\n    connection {\n      user        = \"${var.ssh_username}\"\n      private_key = \"${file(\"${var.ssh_key}\")}\"\n    }\n\n    scripts = [\n      \"scripts/update_os.sh\",\n      \"scripts/install_docker.sh\",\n    ]\n  }\n```", "```\n$ docker swarm init --advertise-addr docker.manager.local.ip\n\n```", "```\n  provisioner \"remote-exec\" {\n    connection {\n      user        = \"${var.ssh_username}\"\n      private_key = \"${file(\"${var.ssh_key}\")}\"\n    }\n\n    inline = [\n      \"docker swarm init --advertise-addr ${packet_device.swarm_master.network.2.address}\",\n    ]\n  }\n```", "```\n$ docker swarm join-token worker -q\n\n```", "```\nvariable \"worker_token_file\" {\n  default     = \"worker.token\"\n  description = \"Worker token file\"\n}\n```", "```\n  provisioner \"local-exec\" {\n    command = \"ssh -t -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${var.ssh_key} ${var.ssh_username}@${packet_device.swarm_master.network.0.address} \\\"docker swarm join-token worker -q\\\" > ${var.worker_token_file}\"\n  }\n```", "```\nvariable \"num_nodes\" {\n  default     = \"1\"\n  description = \"Number of Docker Swarm nodes\"\n}\n```", "```\nnum_nodes = \"2\"\n```", "```\nresource \"packet_device\" \"swarm_node\" {\n  count            = \"${var.num_nodes}\"\n  hostname         = \"swarm-node-${count.index+1}\"\n  plan             = \"${var.plan}\"\n  facility         = \"${var.facility}\"\n  operating_system = \"${var.operating_system}\"\n  billing_cycle    = \"hourly\"\n  project_id       = \"${packet_project.swarm.id}\"\n}\n```", "```\n  provisioner \"file\" {\n    source      = \"${var.worker_token_file}\"\n    destination = \"${var.worker_token_file}\"\n  }\n```", "```\n  provisioner \"remote-exec\" {\n    connection {\n      user        = \"${var.ssh_username}\"\n      private_key = \"${file(\"${var.ssh_key}\")}\"\n    }\n\n    scripts = [\n      \"scripts/update_os.sh\",\n      \"scripts/install_docker.sh\",\n    ]\n  }\n```", "```\n#!/usr/bin/env bash\n# file: scripts/join_swarm.sh\nMASTER=$1\nSWARM_TOKEN=$(cat worker.token)\ndocker swarm join --token ${SWARM_TOKEN} ${MASTER}:2377\n```", "```\n  provisioner \"file\" {\n    source      = \"scripts/join_swarm.sh\"\n    destination = \"join_swarm.sh\"\n  }\n```", "```\n  provisioner \"remote-exec\" {\n    connection {\n      user        = \"${var.ssh_username}\"\n      private_key = \"${file(\"${var.ssh_key}\")}\"\n    }\n\n    inline = [\n      \"chmod +x join_swarm.sh\",\n      \"./join_swarm.sh ${packet_device.swarm_master.network.2.address}\",\n    ]\n  }//.\n```", "```\n$ terraform apply\nOutputs:\n\nSwarm Master Private IP = 10.80.86.129\nSwarm Master Public IP = 147.75.100.19\nSwarm Nodes = Public: 147.75.100.23,147.75.100.3, Private: 10.80.86.135,10.80.86.133\n\n```", "```\n# docker node ls\nID                           HOSTNAME                STATUS  AVAILABILITY  MANAGER STATUS\n9sxqi2f1pywmofgf63l84n7ps *  swarm-master.local.lan  Ready   Active        Leader\nag07nh1wzsbsvnef98sqf5agy    swarm-node-1.local.lan  Ready   Active\ncppk5ja4spysu6opdov9f3x8h    swarm-node-2.local.lan  Ready   Active\n```", "```\n# docker network create -d overlay --subnet 172.16.0.0/16 nginx-network\n\n```", "```\n# docker service create --name nginx --network nginx-network --replicas 3 -p 80:80/tcp nginx\n\n```", "```\n# docker service ls\nID            NAME   REPLICAS  IMAGE  COMMAND\naeq9lspl0mpg  nginx  3/3       nginx\n\n```", "```\n# docker service scale nginx=100\nnginx scaled to 100\n# docker service ls\nID            NAME   REPLICAS  IMAGE  COMMAND\naeq9lspl0mpg  nginx  100/100   nginx\n\n```"]