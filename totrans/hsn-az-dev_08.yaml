- en: Integrating Different Components with Logic Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logic Apps are one main enterprise-level integration services and let us automate
    processes as workflows across the organization. They allow for the simple connection
    of different services and applications with multiple connectors. Further, by leveraging
    a serverless model, they reduce costs and shorten the time needed for developing
    a working solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What Azure Logic Apps is and how it works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectors for Logic Apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Logic App and integrating it with other services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B2B integration and how works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform exercises from this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure SDK 2.9.1 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Logic Apps for Visual Studio: [https://marketplace.visualstudio.com/items?itemName=VinaySinghMSFT.AzureLogicAppsToolsforVisualStudio-18551#overview](https://marketplace.visualstudio.com/items?itemName=VinaySinghMSFT.AzureLogicAppsToolsforVisualStudio-18551#overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Azure Logic Apps?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you need to integrate multiple services and automate tasks such as
    sending an email, creating a file, or generating a report based on some input
    data (maybe a database table or a social media feed). If you work with a specific
    cloud vendor (in this particular case, Microsoft Azure), it could be crucial to
    be able to rapidly develop workflows that can be versioned and are natively integrated
    with multiple cloud services, using a tool that does not require learning many
    different concepts to get started. Such a service is Azure Logic Apps, which you
    will learn about in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Logic Apps – how it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned about Azure Functions, which required
    a trigger to be executed. The situation is similar with Azure Logic Apps—you need
    to define specific criteria that tell the runtime when a Logic App instance should
    be executed. During the execution, even more actions are performed:'
  prefs: []
  type: TYPE_NORMAL
- en: Input data is converted so it meets initial requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All conditional flows are executed so one specific execution flow is evaluated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporary variables are assigned values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following shows an example of a flow that is executed each day and sets
    a variable that is used to remove outdated blobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64e477ce-1ef4-477e-b82e-9c6c5530e90e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it contains three different blocks, which are the initial part
    of the flow (in fact, the whole workflow is much bigger as it contains a loop
    and different conditions and actions—we will cover all of these later):'
  prefs: []
  type: TYPE_NORMAL
- en: The first one defines how often an instance of a Logic App should be executed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one defines a variable, which is used by the next steps—it specifies
    the maximum age of a file in Azure Blob Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third one feeds the next step (a `for each` loop) with a list of available
    blobs within a specific storage account and container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You probably noticed one more thing—the workflow is built using graphical blocks,
    which can be connected by defining multiple relations. While such a solution is
    a real handful when creating and modifying Logic Apps, it could be problematic
    when versioning and developing within a team. Fortunately, each flow is also defined
    in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to such a representation, you can add your Logic Apps to any version
    control systems (for example, Git or SVN) and modify them when you wish. Additionally,
    you can automate the creation of different Logic Apps by generating code files
    on-the-fly.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Logic Apps – advantages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may wonder what the real use case for Azure Logic Apps is when you have
    other possibilities available (Azure Functions and custom workflows). If you take
    a closer look at its features, you will notice the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You do not have to be a cloud developer to develop workflows—even less advanced
    users (for example, IT professionals, IT admins, and data scientists) can create
    the one they need without learning much about this particular service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You do not worry about scaling—as Azure Logic Apps are also a part of serverless services
    available in Azure, you focus on delivering business value rather than server
    configuration and capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, you do not have to write code—however, you are not limited to a
    "codeless" environment as it is possible to host it within Azure Functions and
    just execute it on demand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are able to implement B2B integration, which leverages enterprise standards
    relating to exchanging messages and communication, such as AS2 or EDIFACT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following shows the current pricing for Azure Logic Apps:'
  prefs: []
  type: TYPE_NORMAL
- en: Each action costs $0.000025 per execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each connector costs $0.000125 per execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To fully understand it, we have to describe those two terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Action**: This is each step executed after a trigger (for example, listing
    files, calling an API, or setting a variable)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connector**: This is a binding to multiple external services (Azure Service
    Bus, SFTP, or Twitter), which you will use in your workflows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that Azure Logic Apps could be quite expensive when performing complicated
    workflows very often. In such scenarios, consider using other services (such as
    Azure Functions), which of course require much more time spent on developing but,
    on the other hand, offer better pricing.
  prefs: []
  type: TYPE_NORMAL
- en: Connectors for Logic Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main concept of Azure Logic Apps is connectors. Connectors are both actions
    and triggers that you can use in your workflows to fetch data, transform it, and
    extend the current capabilities of your applications. Currently, Azure Logic Apps have
    200 different connectors available, which allow you to integrate with multiple
    Azure services (such as Azure API Management or Azure Functions), other systems
    (OneDrive and Salesforce), and even on-premises systems.
  prefs: []
  type: TYPE_NORMAL
- en: Connector types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Azure Logic Apps, connectors are divided into two categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Built-in** **connectors**: These are designed to work with Azure services
    and create workflows and are organized around handling application logic and working
    with data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managed** **connectors**: These connectors ease integration with other systems
    and services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Managed connectors are divided into even more detailed groups:'
  prefs: []
  type: TYPE_NORMAL
- en: Managed API connectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-premises connectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration account connectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise connectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will go through multiple examples of different types of
    connector so you will be able to understand their use cases and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in connectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following shows examples of built-in connectors that you can use in your Azure
    Logic Apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Schedule**: For running Logic Apps on a specific schedule or pausing their
    executions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP**: For communicating with endpoints over the HTTP protocol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request**: For making a Logic App callable from other services or sending
    responses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Batch**: For processing messages in batches'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Functions**: For running custom code snippets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure API Management**: For integrating triggers and actions defined by other
    services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure App Services**: For calling API apps and web apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Logic Apps**: For calling other Logic Apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, we have here more generic connectors (schedule, HTTP, and request)
    and those specific to a service (such as Azure Functions or Azure App Services).
    In general, these connectors are the foundation of most Azure Logic Apps—when
    it comes to creating workflows, we very often require to call an API or perform
    various other HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Note that each connector has detailed documentation available describing its
    use cases and how you can develop workflows with it. You can find a link to it
    in the *Further reading*section in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Managed API connectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using managed API connectors, you will be able to integrate with services
    and systems that require configuring a connection; these can be used when executing
    an instance of a Logic App. The following shows an example of a Logic App in a
    resource group with an additional resource defined as the API connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b37b43f-9d7c-47ea-8941-2373869c4962.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the documentation, plenty of different API connectors are described—let''s
    review some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Service Bus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Office 365 Outlook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Blob Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SFTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SharePoint Online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, with these connectors we have access to a variety of different
    Azure services and other systems (here, Office 365 and SharePoint), which can
    be leveraged in your workflows to extend your application's logic.
  prefs: []
  type: TYPE_NORMAL
- en: On-premises connectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I described previously, with Azure Logic Apps you are able to also integrate
    with on-premises services such as different database systems (Oracle, MySQL, and
    SQL Server), business analytics systems (Teradata), or file systems.
  prefs: []
  type: TYPE_NORMAL
- en: To access on-premises data, you will have to create a resource called an on-premises
    data gateway. Instructions about how to do so can be found here: [https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-gateway-connection](https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-gateway-connection).
  prefs: []
  type: TYPE_NORMAL
- en: Integration account connectors and enterprise connectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Logic Apps also lets you build so-called B2B solutions using integration
    accounts and leveraging a variety of advanced connectors such as XML Transforms
    and X12 encoding/decoding or even accessing enterprise systems such as the SAP.
    While, for most users, these capabilities are not that useful (as these are rather
    advanced topics that most people are not familiar with), being able to build Logic
    Apps that allow for seamless communication between partners is an interesting
    functionality. We will cover more about B2B integration within Azure Logic Apps at
    the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Logic Apps and integrating services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Azure Logic Apps is also targeted at non-developers, the process of creating
    instances and working with them is quite straightforward. In this section of this
    chapter, you will learn how to work with them in Azure Portal and Visual Studio
    and how to integrate multiple services and use actions to control a workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Logic Apps in Azure Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create an instance of a Logic App, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on + Create a resourceand search for Logic App. When you click on the Create button,
    you will see a simple form that allows you to create a new instance of a Logic
    App:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a4a7799-0957-41e5-bad4-31d2c3e56fa5.png)'
  prefs: []
  type: TYPE_IMG
- en: In fact, the only extra thing you are able to configure here is enabling Azure
    Log Analytics. Since this particular service will not be covered in this book,
    I will skip it in this chapter. When you click on the OK button, Azure will start
    the creation of a new Logic App.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the creation is finished, you can go to the service to check what it initially
    looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f679358b-9b56-4419-9949-8b1a16889f70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can click on the Logic App Designerbutton on the left to access a new
    blade that enables you to create a brand new workflow. Initially, you will see
    plenty of different templates available—it is a great start if you are now familiar
    with this particular service as it displays many different possibilities and configurations
    that you may achieve using Azure Logic Apps. To get started, in the **Templates**
    section, select the Schedule option in the Category drop-down menu and choose Scheduler
    - Add message to queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d2d64e10-e50f-4175-8dbd-df230ad579f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on Use this template, you will see a designer window where you
    will be able to finish configuring a workflow. Note that, initially, we do not
    see all blocks—we have to set all missing configuration values (such as Queue
    Name or Message) before we can proceed. Once everything is set up and ready, you
    can click on Continue, which will allow you to work on your workflow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01db9cc5-b921-48f8-a10f-97e2ca6f6992.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a connection to Azure Queue will require you to create a Storage Account.
    If you are not familiar with that service, refer to [Chapter 11](6feb3822-0662-46c8-b889-c038672a1ad1.xhtml), *Using
    Azure Storage - Tables, Queues, Files, and Blobs*, about Azure Storage.
  prefs: []
  type: TYPE_NORMAL
- en: To finish configuration, you will have to enter all missing values—the queue
    name and message. Once you do this, you have saved a Logic App and can now try
    to run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This particular connector does not create a queue if it does not exist. Make
    sure you have one before starting a Logic App instance. If you do not know how
    to do so, refer to [Chapter 11](6feb3822-0662-46c8-b889-c038672a1ad1.xhtml), *Using
    Azure Storage - Tables, Queues, Files, and Blobs*, where we discuss Azure Storage
    features and queues.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on the Run button, you will be able to see how the full flow was
    executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9aff66c6-0f27-4296-9aa5-e467e976e3e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can compare the preceding execution with a failed one so that you can see
    the difference between them (such as message content or a dynamic variable created
    during the execution of a flow). Logic Apps can be debugged really quickly as
    they provide detailed error messages and directly point you to the place where
    something is wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a2843a54-9a08-43c2-b063-2f7a2ae0ef0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you have created your first Azure Logic App! In the next section,
    you will see how you can work with it in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Azure Logic Apps in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While it is perfectly fine to with your Logic Apps using Azure Portal, you
    do not always want to log in and use its UI. As it is possible to install an extension
    to Microsoft Visual Studio, which enables you to work with Azure Logic Apps, we
    will try to check how it work in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: To start working with your Logic Apps in Visual Studio you will have to open
    the Cloud Explorer(View | Cloud Explorer) window. It will display a list of available
    subscriptions and resources within it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the Cloud Explorerwindow appears to be empty, make sure you have the newest
    version of Visual Studio and the Azure SDK available and you have signed in to
    your Azure account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among other types of service, you should be able to find the Logic Appssection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be2013a3-dcc0-419c-8fd1-a3b44952ff87.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the main view and allows you to start working with that particular Azure
    component. When you click on an instance you are interested in, you will see the
    additional menu, available below the displayed resources.
  prefs: []
  type: TYPE_NORMAL
- en: You can also right-click on the resource you would like to work with—it will
    display a menu with available actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, I clicked on Open with Logic App
    Editor, which displays the very same view you saw in the portal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e0dca97-11bf-40ef-80c3-24b79546b678.png)'
  prefs: []
  type: TYPE_IMG
- en: You can work with your Logic App in Visual Studio in the same manner as you
    would work in Azure Portal. Additionally, you can take a look at its history and
    disable and delete it.
  prefs: []
  type: TYPE_NORMAL
- en: When you double-click on an item in the run history, you will get the very same
    view as in Azure Portal, where you were able to debug a particular invocation.
    This is very helpful as you can quickly develop and test your Logic Apps and work
    on other parts of your application without leaving your IDE.
  prefs: []
  type: TYPE_NORMAL
- en: I strongly encourage you to play a little bit with Azure Logic Apps by yourself
    in Visual Studio as this is a great addition to the whole service, and has the
    same feeling as the portal.
  prefs: []
  type: TYPE_NORMAL
- en: B2B integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To a slight extent, we have already covered B2B integration of Azure Logic Apps in
    this chapter, but I wanted to give you some more information regarding this topic,
    as this service is not always recognized as an enterprise integration tool. Surprisingly,
    Azure Logic Apps has many interesting features to offer when it comes to exchanging
    messages and data between partners and you'll find the relevant details in this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Starting B2B integration in Azure Logic Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with B2B integration, you will need an Integration Account—this
    is a special container for integration artifacts you will work with. In general,
    it allows you to store a variety of different items (certificates, schemas, and
    agreements) in one place, so you can work with them in Azure Logic Apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create such an account, click on the + Create a resource and search for Integration
    Account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ecddcca-e87c-47ac-af61-4294ed5e02c1.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see it offers a simple form where, in fact, the only thing you need
    to do is select the proper Pricing Tier.
  prefs: []
  type: TYPE_NORMAL
- en: The selected tier changes the maximum number of stored artifacts. You can, of
    course, change it later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have an integration account instance, you will need to link it with
    your Logic App. To do so, go to the Workflow settingsblade in your instance of Azure
    Logic Apps and search for the Integration account section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23e90c35-bfdc-40e6-88c1-4d1744259ce5.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you should be able to use connectors, which require an integration account
    to work.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, if your Logic App has no integration account linked, when you add
    a step requiring such functionality, you will have to provide a custom name. Once
    such a connection is available, you will not be asked for additional information
    again.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Further reading* section of this chapter, you will find additional links
    that will help you gather more information regarding B2B integration in Azure
    Logic Apps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about Azure Logic Apps, a simple yet useful
    service whose use isn't restricted to Azure ninjas. You read about different connectors
    and multiple ways of working with your Logic Apps—using both Azure Portal (with
    designed and code editor) and Visual Studio. Additionally, you should know something
    about B2B integration in that service and how to start it.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 9](fe6562a0-0be8-482e-84fc-6e31860a1e14.xhtml), *Swiss Army Knife
    - Azure Cosmos DB*, we cover Azure CosmosDB—a serverless database that enables
    the user to use different DB models in the same service.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the pricing model for Azure Logic Apps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we use a loop in a Logic App workflow?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is needed to open a Logic App in Visual Studio?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we debug a particular Logic App execution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can a Logic App push a message directly to a queue such as Azure Service Bus or Azure
    Storage Queue?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we version multiple Logic Apps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information you can refer to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Logic Apps overview: [https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-overview](https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exchanging AS2 messages: [https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-enterprise-integration-as2](https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-enterprise-integration-as2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Integrating Azure Logic Apps with enterprise solutions: [https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-enterprise-integration-overview](https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-enterprise-integration-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Logic Apps connectors: [https://docs.microsoft.com/en-us/connectors/](https://docs.microsoft.com/en-us/connectors/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
