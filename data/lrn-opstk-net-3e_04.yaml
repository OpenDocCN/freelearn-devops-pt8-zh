- en: Virtual Network Infrastructure Using Linux Bridges
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Linux 桥接的虚拟网络基础设施
- en: One of the core functions of OpenStack Networking is to provide end-to-end network
    connectivity to instances running in the cloud. In *[chapter 3](bf508e37-ce8a-4116-89db-e8f8a6abf0f4.xhtml) Installing
    Neutron*, we installed the Neutron API service and the ML2 plugin across all nodes
    in the cloud. Beginning with this chapter, you will be introduced to networking
    concepts and architectures that Neutron relies on to provide connectivity to instances
    and other virtual devices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 网络的核心功能之一是为运行在云中的实例提供端到端的网络连接。在 *[第 3 章](bf508e37-ce8a-4116-89db-e8f8a6abf0f4.xhtml)
    安装 Neutron* 中，我们在云中的所有节点上安装了 Neutron API 服务和 ML2 插件。从本章开始，我们将介绍 Neutron 依赖的网络概念和架构，用于为实例和其他虚拟设备提供连接。
- en: The ML2 plugin for Neutron allows an OpenStack cloud to leverage multiple Layer
    2 technologies simultaneously through the use of Mechanism drivers. In the next
    few chapters, we will look at multiple Mechanism drivers that extend the functionality
    of the ML2 network plugin, including the Linux bridge and Open vSwitch drivers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 的 ML2 插件允许 OpenStack 云通过使用机制驱动同时利用多种二层技术。在接下来的章节中，我们将介绍多种机制驱动，这些驱动扩展了
    ML2 网络插件的功能，包括 Linux 桥接和 Open vSwitch 驱动。
- en: 'In this chapter, you will do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将执行以下操作：
- en: Discover how Linux bridges are used to build a virtual network infrastructure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何使用 Linux 桥接构建虚拟网络基础设施
- en: Visualize traffic flow through virtual bridges
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过虚拟桥接可视化流量流动
- en: Deploy the Linux bridge Mechanism driver and agent on hosts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主机上部署 Linux 桥接机制驱动和代理
- en: Using the Linux bridge driver
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Linux 桥接驱动
- en: 'The Linux bridge Mechanism driver supports a range of traditional and overlay
    networking technologies, and has support for the following types of drivers:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 桥接机制驱动支持一系列传统和覆盖网络技术，并支持以下类型的驱动：
- en: Local
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Local
- en: Flat
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flat
- en: VLAN
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VLAN
- en: VXLAN
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VXLAN
- en: When a host is configured to use the ML2 plugin and the Linux bridge Mechanism
    driver, the Neutron agent on the host relies on the `bridge`, `8021q`, and `vxlan`
    kernel modules to properly connect instances and other network resources to virtual
    switches. These connections allow instances to communicate with other network
    resources in and out of the cloud. The Linux bridge Mechanism driver is popular
    for its dependability and ease of troubleshooting but lacks support for some advanced
    Neutron features such as distributed virtual routers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当主机配置为使用 ML2 插件和 Linux 桥接机制驱动时，主机上的 Neutron 代理依赖于 `bridge`、`8021q` 和 `vxlan`
    内核模块，以正确地将实例和其他网络资源连接到虚拟交换机。这些连接允许实例与云中其他网络资源进行通信。Linux 桥接机制驱动因其可靠性和易于故障排除而广受欢迎，但不支持一些高级
    Neutron 功能，如分布式虚拟路由器。
- en: 'In a Linux bridge-based network implementation, there are five types of interfaces
    managed by OpenStack Networking:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Linux 桥接的网络实现中，有五种接口由 OpenStack 网络管理：
- en: Tap interfaces
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tap 接口
- en: Physical interfaces
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理接口
- en: VLAN interfaces
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VLAN 接口
- en: VXLAN interfaces
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VXLAN 接口
- en: Linux bridges
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 桥接
- en: A **tap interface** is created and used by a hypervisor such as QEMU/KVM to
    connect the guest operating system in a virtual machine instance to the underlying
    host. These virtual interfaces on the host correspond to a network interface inside
    the guest instance. An Ethernet frame sent to the tap device on the host is received
    by the guest operating system, and frames received from the guest operating system
    are injected into the host network stack.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**tap 接口**是由超管程序（如 QEMU/KVM）创建并使用，用于将虚拟机实例中的客操作系统与底层主机连接。这些虚拟接口对应主机内的网络接口。发送到主机上
    tap 设备的以太网帧会被客操作系统接收，而从客操作系统接收到的帧则会注入到主机的网络栈中。'
- en: A **physical interface** represents an interface on the host that is plugged
    into physical network hardware. Physical interfaces are often labeled `eth0`,
    `eth1`, `em0`, `em1`, and so on, and may vary depending on the host operating
    system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**物理接口**代表主机上与物理网络硬件相连的接口。物理接口通常标记为 `eth0`、`eth1`、`em0`、`em1` 等，具体取决于主机操作系统。'
- en: Linux supports 802.1q VLAN tagging through the use of virtual VLAN interfaces.
    A VLAN interface can be created using `iproute2` commands or the traditional `vlan`
    utility and `8021q` kernel module. A VLAN interface is often labeled `ethX.<vlan>`
    and is associated with its respective physical interface, `ethX`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 支持通过使用虚拟 VLAN 接口进行 802.1q VLAN 标记。可以使用 `iproute2` 命令或传统的 `vlan` 工具及 `8021q`
    内核模块来创建 VLAN 接口。VLAN 接口通常标记为 `ethX.<vlan>`，并与其对应的物理接口 `ethX` 关联。
- en: A **VXLAN interface** is a virtual interface that is used to encapsulate and
    forward traffic based on parameters configured during interface creation, including
    a VXLAN Network Identifier (**VNI**) and VXLAN Tunnel End Point (VTEP). The function
    of a VTEP is to encapsulate virtual machine instance traffic within an IP header
    across an IP network. Traffic on the same VTEP is segregated from other VXLAN
    traffic using an ID provided by the VNI. The instances themselves are unaware
    of the outer network topology providing connectivity between VTEPs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**VXLAN 接口**是一个虚拟接口，用于根据接口创建时配置的参数封装和转发流量，包括 VXLAN 网络标识符（**VNI**）和 VXLAN 隧道端点（VTEP）。VTEP
    的功能是在 IP 网络中通过 IP 标头封装虚拟机实例流量。相同 VTEP 上的流量通过 VNI 提供的 ID 与其他 VXLAN 流量隔离。实例本身并不关心提供连接性的外部网络拓扑。'
- en: A **Linux bridge** is a virtual interface that connects multiple network interfaces.
    In Neutron, a bridge will usually include a physical interface and one or more
    virtual or tap interfaces. Linux bridges are a form of virtual switches.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux 桥接**是一个虚拟接口，用于连接多个网络接口。在 Neutron 中，一个桥接通常包括一个物理接口和一个或多个虚拟接口或 tap 接口。Linux
    桥接是一种虚拟交换机形式。'
- en: Visualizing traffic flow through Linux bridges
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化 Linux 桥接中的流量流动
- en: 'For an Ethernet frame to travel from a virtual machine instance to a device
    on the physical network, it will pass through three or four devices inside the
    host:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要使以太网帧从虚拟机实例传输到物理网络上的设备，它将经过主机内部的三到四个设备：
- en: '| **Network type** | **Interface type** | **Interface name** |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **网络类型** | **接口类型** | **接口名称** |'
- en: '| all | tap | tapN |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| all | tap | tapN |'
- en: '| all | bridge | brqXXXX |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| all | bridge | brqXXXX |'
- en: '| vxlan | vxlan | vxlan-z (where Z is the VNI) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| vxlan | vxlan | vxlan-z（其中 Z 是 VNI） |'
- en: '| vlan | vlan | ethX.Y (where X is the physical interface and Y is the VLAN
    ID) |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| vlan | vlan | ethX.Y（其中 X 是物理接口，Y 是 VLAN ID） |'
- en: '| flat, vlan | physical | ethX (where X is the interface) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| flat, vlan | physical | ethX（其中 X 是接口） |'
- en: To help conceptualize how Neutron uses Linux bridges, a few examples of Linux
    bridge architectures are provided in the following sections.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助理解 Neutron 如何使用 Linux 桥接，以下几个 Linux 桥接架构示例将在接下来的章节中提供。
- en: VLAN
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VLAN
- en: 'Imagine an OpenStack cloud that consists of a single `vlan` provider network
    with the segmentation ID 100\. Three instances have been connected to the network.
    As a result, the network architecture within the `compute` node resembles the
    following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个 OpenStack 云由一个 `vlan` 提供者网络组成，分段 ID 为 100。三个实例已经连接到该网络。因此，`compute` 节点中的网络架构类似于以下内容：
- en: '![](img/f4294799-da56-4b93-b330-8f31b59981b7.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4294799-da56-4b93-b330-8f31b59981b7.png)'
- en: Figure 4.1
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1
- en: In Figure 4.1, three virtual machine instances are connected to a Linux bridge
    named `brqXXXX` via their respective tap interfaces. When the first instance was
    launched and connected to the network, Neutron created the bridge and a virtual
    interface named `eth1.100` and automatically connected the interface to the bridge.
    The `eth1.100` interface is bound to physical interface `eth1`. As traffic from
    instances traverses the Linux bridge and out toward the physical interface, interface `eth1.100`
    tags that traffic as VLAN 100 and drops it on `eth1`. Likewise, ingress traffic
    toward the instances through `eth1` is inversely untagged by `eth1.100` and sent
    to the appropriate instance connected to the bridge.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在图 4.1 中，三个虚拟机实例通过各自的 tap 接口连接到名为 `brqXXXX` 的 Linux 桥接。当第一个实例启动并连接到网络时，Neutron
    创建了桥接并创建了一个名为 `eth1.100` 的虚拟接口，并自动将该接口连接到桥接。`eth1.100` 接口绑定到物理接口 `eth1`。当实例的流量通过
    Linux 桥接并向物理接口传输时，接口 `eth1.100` 会为该流量打上 VLAN 100 标签，并将其发送到 `eth1`。同样，进入实例的流量通过
    `eth1` 进入时，`eth1.100` 会反向去除标签，并将流量发送到连接到桥接的相应实例。
- en: 'Using the `brctl show` command, the preceding diagram can be realized in the
    Linux CLI as the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`brctl show`命令，前述图示可以在 Linux CLI 中实现如下：
- en: '![](img/cdf7dc29-1527-4be3-bfec-e0c576e3fca3.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cdf7dc29-1527-4be3-bfec-e0c576e3fca3.png)'
- en: The `bridge id` in the output is dynamically generated based on the parent NIC
    of the virtual VLAN interface. In this bridge, the parent interface is `eth1`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的`bridge id`是基于虚拟 VLAN 接口的父 NIC 动态生成的。在此桥接中，父接口是`eth1`。
- en: The `bridge name`, beginning with the `brq` prefix, is generated based on the
    ID of the corresponding Neutron network it is associated with. In a Linux bridge
    architecture, every network uses its own bridge. Bridge names should be consistent
    across nodes for the same network.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以`brq`前缀开头的`bridge name`是根据它所关联的 Neutron 网络的 ID 生成的。在 Linux 桥接架构中，每个网络使用其自己的桥接器。桥接器名称应在同一网络的节点之间保持一致。
- en: 'On the physical switch, the necessary configuration to facilitate the networking
    described here will resemble the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理交换机上，执行此处所述网络配置所需的配置如下所示：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When configured as a trunk port, the provider interface can support multiple
    VLAN networks. If more than one VLAN network is needed, another Linux bridge will
    be created automatically that contains a separate VLAN interface. The new virtual
    interface, `eth1.101`, is connected to a new bridge, `brqYYYY`, as seen in Figure
    4.2:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置为中继端口时，提供者接口可以支持多个 VLAN 网络。如果需要多个 VLAN 网络，则会自动创建另一个 Linux 桥接器，其中包含一个独立的 VLAN
    接口。新的虚拟接口`eth1.101`连接到新桥接器`brqYYYY`，如图 4.2 所示：
- en: '![](img/c03d0af9-2f3a-4c25-bdfb-62cac609f165.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c03d0af9-2f3a-4c25-bdfb-62cac609f165.png)'
- en: Figure 4.2
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2
- en: 'On the `compute` node, the preceding diagram can be realized as the following
    `brctl show` output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`compute`节点上，前面的图示可以通过以下`brctl show`输出实现：
- en: '![](img/5a02f465-940d-4f04-8406-22804f535e5b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a02f465-940d-4f04-8406-22804f535e5b.png)'
- en: 'On the physical switch, the necessary configuration to facilitate the networking
    described here will resemble the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理交换机上，执行此处所述网络配置所需的配置如下所示：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Flat
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扁平网络
- en: A flat network in Neutron describes a network in which *no *VLAN tagging takes
    place. Unlike VLAN networks, flat networks require that the physical interface
    of the host associated with the network be connected directly to the bridge. This
    means that only a *single* flat network can exist per physical interface.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 中的扁平网络描述的是一个*没有*VLAN 标记的网络。与 VLAN 网络不同，扁平网络要求与该网络关联的主机的物理接口直接连接到桥接器。这意味着每个物理接口只能存在一个*单一的*扁平网络。
- en: 'Figure 4.3 demonstrates a physical interface connected directly to a Neutron-managed
    bridge in a flat network scenario:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 演示了物理接口直接连接到 Neutron 管理的桥接器中的扁平网络场景：
- en: '![](img/e02072f7-9d5f-423a-97d2-261a40d5d127.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e02072f7-9d5f-423a-97d2-261a40d5d127.png)'
- en: Figure 4.3
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3
- en: In Figure 4.3, `eth1` is connected to the bridge named `brqZZZZ` along with
    three tap interfaces that correspond to guest instances. No VLAN tagging for instance
    traffic takes place in this scenario.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在图 4.3 中，`eth1` 连接到名为`brqZZZZ`的桥接器，并且与三条对应于来宾实例的 tap 接口相连接。在这种情况下，实例流量不会进行 VLAN
    标记。
- en: 'On the `compute` node, the preceding diagram can be realized as the following
    `brctl show` output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在`compute`节点上，前面的图示可以通过以下`brctl show`输出实现：
- en: '![](img/5d198e2a-b0cf-4de2-9052-00c8a3f5fd0b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d198e2a-b0cf-4de2-9052-00c8a3f5fd0b.png)'
- en: 'On the physical switch, the necessary configuration to facilitate the networking
    described here will resemble the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理交换机上，执行此处所述网络配置所需的配置如下所示：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Alternatively, the interface can also be configured as an access port:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，接口也可以配置为接入端口：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Only one flat network is supported per provider interface. When configured as
    a trunk port with a native VLAN, the provider interface can support a single flat
    network and multiple VLAN networks. When configured as an access port, the interface
    can only support a single flat network and any attempt to tag traffic will fail.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个提供者接口仅支持一个扁平网络。当配置为带有本地 VLAN 的中继端口时，提供者接口可以支持一个扁平网络和多个 VLAN 网络。当配置为接入端口时，该接口只能支持一个扁平网络，任何试图为流量打标签的操作都将失败。
- en: 'When multiple flat networks are created, a separate physical interface must
    be associated with each flat network. Figure 4.4 demonstrates the use of a second
    physical interface required for the second flat network:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建多个扁平网络时，必须为每个扁平网络关联一个独立的物理接口。图 4.4 演示了为第二个扁平网络所需的第二个物理接口：
- en: '![](img/89500fd7-b3c8-4da1-b390-4931221d1a70.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89500fd7-b3c8-4da1-b390-4931221d1a70.png)'
- en: Figure 4.4
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4
- en: 'On the `compute` node, the use of two physical interfaces for separate flat
    networks can be realized as the following `brctl show` output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `compute` 节点上，使用两个物理接口来实现独立的平面网络，其 `brctl show` 输出如下所示：
- en: '![](img/131ff3f7-4c4e-4104-b482-82280715f3a3.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/131ff3f7-4c4e-4104-b482-82280715f3a3.png)'
- en: 'On the physical switch, the necessary configuration to facilitate the networking
    described here will resemble the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理交换机上，支持此处所描述的网络配置的设置将类似于以下内容：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With the two flat networks, the host does not perform any VLAN tagging on traffic
    traversing those bridges. Instances connected to the two bridges require a router
    to communicate with one another. Given the requirement for unique interfaces per
    flat network, flat networks do not scale well and are not common in production
    environments.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个平面网络上，主机不会对穿越这些桥接的流量执行任何 VLAN 标记。连接到这两个桥接的实例需要路由器才能相互通信。由于每个平面网络需要唯一的接口，因此平面网络的可扩展性较差，在生产环境中并不常见。
- en: VXLAN
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VXLAN
- en: When VXLAN networks are created, the Neutron Linux bridge agent creates a corresponding
    VXLAN interface using `iproute2` user-space utilities and connects it to a Linux
    bridge. The VXLAN interface is programmed with information such as the VNI and
    local VTEP address.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建 VXLAN 网络时，Neutron Linux 桥接代理使用 `iproute2` 用户空间工具创建相应的 VXLAN 接口，并将其连接到 Linux
    桥接。VXLAN 接口会被编程，包含如 VNI 和本地 VTEP 地址等信息。
- en: When the L2 population driver is configured, Neutron prepopulates the forwarding
    database with static entries consisting of the MAC addresses of instances and
    their respective host VTEP addresses. As a packet from an instance traverses the
    bridge, the host determines how to forward the packet by consulting the forwarding
    table. If an entry is found, Neutron will forward the packet out of the corresponding
    local interface and encapsulate the traffic accordingly. To view the forwarding
    database table on each host, use the `bridge fdb show` command.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置了 L2 人口驱动程序时，Neutron 会用由实例的 MAC 地址及其相应的主机 VTEP 地址组成的静态条目预填充转发数据库。当实例中的数据包通过桥接时，主机会通过查阅转发表来决定如何转发数据包。如果找到相应的条目，Neutron
    将通过相应的本地接口转发数据包，并相应地封装流量。要查看每个主机上的转发数据库表，请使用 `bridge fdb show` 命令。
- en: Potential issues when using overlay networks
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用覆盖网络时的潜在问题
- en: One thing to be aware of when using overlay networking technologies is that
    the additional headers added to the encapsulated packets may cause them to exceed
    the **maximum transmission unit (MTU)** of the switchport or interface. The MTU
    is the largest size of packet or frame that can be sent over the network. Encapsulating
    a packet with VXLAN headers may cause the packet size to exceed the default maximum
    1500-byte MTU. Connection issues caused by exceeding the MTU manifest themselves
    in strange ways, including partial failures in connecting to instances over SSH
    or a failure to transfer large payloads between instances, and more. To avoid
    this, consider lowering the MTU of interfaces within virtual machine instances
    from 1500 bytes to 1450 bytes to account for the overhead of VXLAN encapsulation
    to avoid connectivity issues.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用覆盖网络技术时需要注意的一点是，封装数据包时添加的额外头部可能会导致数据包超过交换端口或接口的**最大传输单元（MTU）**。MTU 是网络中可以发送的最大数据包或帧的大小。使用
    VXLAN 头部封装数据包可能会导致数据包大小超过默认的 1500 字节 MTU。超出 MTU 导致的连接问题会以奇怪的方式表现出来，包括通过 SSH 连接到实例时出现部分失败，或在实例之间传输大数据包失败等。为避免此问题，可以考虑将虚拟机实例中接口的
    MTU 从 1500 字节降低到 1450 字节，以考虑 VXLAN 封装的开销，避免连接问题。
- en: An alternative to dropping the MTU is to increase the MTU of the interfaces
    used for the VTEPs. It is common to set a jumbo MTU of 9000 on VTEP interfaces
    and corresponding switchports to avoid having to drop the MTU inside instances.
    Increasing the MTU of the VTEP interfaces has also been shown to provide increases
    in network throughput when using overlay networks.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 降低 MTU 的替代方法是增加用于 VTEP 的接口的 MTU。通常会在 VTEP 接口和相应的交换端口上设置 9000 字节的巨型 MTU，以避免需要在实例内部降低
    MTU。增加 VTEP 接口的 MTU 还被证明能够在使用覆盖网络时提高网络吞吐量。
- en: 'The DHCP agent can be configured to push a non-standard MTU to instances within
    the DHCP lease offer by modifying DHCP option `26`. To configure a lower MTU,
    complete the following steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过修改 DHCP 选项 `26`，将非标准 MTU 推送到 DHCP 租约中的实例。要配置较低的 MTU，请完成以下步骤：
- en: 'On the `controller` node, modify the DHCP configuration file at `/etc/neutron/dhcp_agent.ini`
    and specify a custom `dnsmasq` configuration file:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controller`节点上，修改`/etc/neutron/dhcp_agent.ini`中的DHCP配置文件，并指定自定义的`dnsmasq`配置文件：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, create the custom `dnsmasq` configuration file at `/etc/neutron/dnsmasq-neutron.conf` and
    add the following contents:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`/etc/neutron/dnsmasq-neutron.conf`路径下创建自定义的`dnsmasq`配置文件，并添加以下内容：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Save and close the file. Restart the Neutron DHCP agent with the following
    command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文件。使用以下命令重启Neutron DHCP代理：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Inside an instance running Linux, the MTU can be observed within the instance
    using the `ip link show <interface>` command.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行Linux的实例内部，可以使用`ip link show <interface>`命令观察MTU值。
- en: A change to the `dnsmasq` configuration affects all networks, even instances
    on VLAN networks. Neutron ports can be modified individually to avoid this effect.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对`dnsmasq`配置的更改会影响所有网络，即使是VLAN网络上的实例也会受到影响。可以单独修改Neutron端口以避免这种影响。
- en: Local
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地
- en: When creating a local network in Neutron, it is not possible to specify a VLAN
    ID or even a physical interface. The Neutron Linux bridge agent will create a
    bridge and connect only the tap interface of the instance to the bridge. Instances
    in the same local network on the same node will be connected to the same bridge
    and are free to communicate with one another. Because the host does not have a
    physical or virtual VLAN interface connected to the bridge, traffic between instances
    is limited to the host on which the instances reside. Traffic between instances
    in the same local network that reside on different hosts will be unable to communicate
    with one another.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Neutron中创建本地网络时，无法指定VLAN ID，甚至无法指定物理接口。Neutron Linux桥接代理将创建一个桥接器并仅将实例的tap接口连接到该桥接器。位于同一节点的同一本地网络中的实例将连接到同一桥接器，并可以自由相互通信。由于主机没有物理或虚拟VLAN接口连接到桥接器，因此实例之间的流量仅限于实例所在的主机。在不同主机上位于同一本地网络的实例之间无法相互通信。
- en: 'Figure 4.5 demonstrates the lack of physical or virtual VLAN interfaces connected
    to the bridge:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5展示了没有物理或虚拟VLAN接口连接到桥接器的情况：
- en: '![](img/643d81ea-7e9f-49ec-9fe7-b631bba698fb.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/643d81ea-7e9f-49ec-9fe7-b631bba698fb.png)'
- en: Figure 4.5
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5
- en: In Figure 4.5, two local networks have been created along with their respective
    bridges, `brqZZZZ` and `brqNNNN`. Instances connected to the same bridge can communicate
    with one another, but nothing else outside of the bridge. There is no mechanism
    to permit traffic between instances on different bridges or hosts when using local
    networks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在图4.5中，创建了两个本地网络及其各自的桥接器，`brqZZZZ`和`brqNNNN`。连接到同一桥接器的实例可以相互通信，但无法与桥接器外的其他实例通信。在使用本地网络时，没有机制允许不同桥接器或主机之间的实例通信。
- en: Some application architectures may require multiple instances be deployed on
    the same host without the need for cross-host communication. A local network might
    make sense in this scenario and can be used to avoid the consumption of precious
    VLAN IDs or VXLAN overhead.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 某些应用架构可能要求在同一主机上部署多个实例，而无需跨主机通信。在这种情况下，使用本地网络可能会更合适，并且可以避免浪费宝贵的VLAN ID或VXLAN开销。
- en: Configuring the ML2 networking plugin
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ML2网络插件
- en: Before you can build network resources in an OpenStack cloud, a network plugin
    must be defined and configured. The ML2 plugin provides a common framework that
    allows multiple drivers to interoperate with one another. In this section, we
    will look at how to configure the Linux bridge ML2 driver and agent on the `controller01`
    and `compute01` hosts.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以构建OpenStack云中的网络资源之前，必须定义并配置网络插件。ML2插件提供了一个通用框架，允许多个驱动程序之间互操作。在本节中，我们将了解如何在`controller01`和`compute01`主机上配置Linux桥接ML2驱动程序和代理。
- en: Configuring the Linux bridge and Open vSwitch drivers for simultaneous operation
    will be discussed in this book but may not be appropriate for a production environment.
    To make things simple, I recommend deploying the Linux bridge driver if distributed
    virtual routers are not required. The configuration and architecture of distributed
    virtual routers are outlined in *[Chapter 12](b441728b-4377-43cf-b675-166266fef6c9.xhtml),
    Distributed Virtual Routers*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将讨论如何配置Linux桥接和Open vSwitch驱动程序以实现同时操作，但这可能不适合生产环境。为了简化操作，如果不需要分布式虚拟路由器，建议部署Linux桥接驱动程序。分布式虚拟路由器的配置和架构在*[第12章](b441728b-4377-43cf-b675-166266fef6c9.xhtml)，分布式虚拟路由器*中有详细介绍。
- en: Configuring the bridge interface
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置桥接接口
- en: In this installation, physical network interface `eth2` will be utilized as
    the **provider interface **for VLAN and flat networks. Neutron will be responsible
    for configuring VLAN interfaces off `eth2` once the initial network configuration
    has been completed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在此安装中，物理网络接口`eth2`将作为**提供接口**用于VLAN和扁平网络。Neutron将在初始网络配置完成后负责配置VLAN接口。
- en: 'On the `controller01` and `compute01` nodes, configure the `eth2` interface
    within the`/etc/network/interfaces` file as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controller01`和`compute01`节点上，按照以下方式在`/etc/network/interfaces`文件中配置`eth2`接口：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Close and save the file, and bring the interface up with the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭并保存文件，然后使用以下命令启用接口：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Confirm the interface is in an `UP` state using the `ip link show dev eth2` command.
    If the interface is up, it is ready for use in bridges that Neutron will create
    and manage.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ip link show dev eth2`命令确认接口处于`UP`状态。如果接口已经启动，它就可以在Neutron将创建和管理的桥接中使用。
- en: Because the interface will be used in a bridge, an IP address cannot be applied
    directly to the interface. If there is an IP address applied to `eth2`, it will
    become inaccessible once the interface is placed in a bridge. If an IP is required,
    consider moving it to an interface not required for Neutron networking.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因为该接口将用于桥接，所以不能直接将IP地址应用于该接口。如果`eth2`上应用了IP地址，一旦该接口被放入桥接中，它将变得不可访问。如果需要IP地址，请考虑将其移动到Neutron网络不需要的接口上。
- en: Configuring the overlay interface
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置覆盖接口
- en: In this installation, physical network interface `eth1` will be utilized as
    the **overlay interface **for overlay networks using VXLAN. Neutron will be responsible
    for configuring VXLAN interfaces once the initial network configuration has been
    completed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在此安装中，物理网络接口`eth1`将作为**覆盖接口**用于使用VXLAN的覆盖网络。Neutron将在初始网络配置完成后负责配置VXLAN接口。
- en: 'On the `controller01` and `compute01` nodes, configure the `eth1` interface
    within the `/etc/network/interfaces` file as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controller01`和`compute01`节点上，按照以下方式在`/etc/network/interfaces`文件中配置`eth1`接口：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use the following table for the appropriate address, and substitute for `X`
    where appropriate:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下表来获取适当的地址，并根据需要替换`X`：
- en: '| **Host** | **Address** |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| **主机** | **地址** |'
- en: '| `controller01` | 10.20.0.100 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `controller01` | 10.20.0.100 |'
- en: '| `compute01` | 10.20.0.101 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `compute01` | 10.20.0.101 |'
- en: 'Close and save the file, and bring the interface up with the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭并保存文件，然后使用以下命令启用接口：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Confirm the interface is in an `UP` state and that the address has been set
    using the `ip addr show dev eth1` command. Ensure both hosts can communicate over
    the newly configured interface by pinging `compute01` from the `controller01`
    node:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ip addr show dev eth1`命令确认接口处于`UP`状态并且地址已经设置。确保两个主机能够通过新配置的接口进行通信，通过从`controller01`节点ping`compute01`来验证：
- en: '![](img/a8b325ed-0688-40b6-89ae-2ed75ac53034.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8b325ed-0688-40b6-89ae-2ed75ac53034.png)'
- en: If you experience any issues communicating across this interface, you *will*
    experience issues with VXLAN networks created with OpenStack Networking. Any issues
    should be corrected before continuing.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在通过该接口进行通信时遇到任何问题，你*将会*在使用OpenStack Networking创建的VXLAN网络中遇到问题。所有问题应在继续之前解决。
- en: ML2 plugin configuration options
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ML2插件配置选项
- en: The ML2 plugin was installed in the previous chapter and its configuration file
    located at `/etc/neutron/plugins/ml2/ml2_conf.ini` must be configured before OpenStack
    Networking services can be used.The ML2 plugin configuration file is referenced
    by the `neutron-server` service may be referenced by multiple agents, including
    Linux bridge and Open vSwitch agents. Agent-specific changes will be made in their
    respective configuration files on each host.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章节已安装ML2插件，其配置文件位于`/etc/neutron/plugins/ml2/ml2_conf.ini`，必须配置该文件才能使用OpenStack
    Networking服务。`neutron-server`服务引用的ML2插件配置文件可能被多个代理引用，包括Linux桥接和Open vSwitch代理。特定代理的更改将在每个主机上的相应配置文件中进行。
- en: 'The `ml2_conf.ini` file is broken into configuration blocks and contains the
    following commonly used options:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`ml2_conf.ini`文件被分为多个配置区块，并包含以下常用选项：'
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Configuration options must remain in the appropriate block, otherwise Neutron
    services may not start or operate properly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 配置选项必须保留在适当的区块内，否则Neutron服务可能无法启动或正常运行。
- en: Type drivers
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型驱动
- en: Type drivers describe the type of networks that can be created and implemented
    by Mechanism drivers. Type drivers included with the ML2 plugin include `local`,
    `flat`, `vlan`, `gre`, `vxlan`, and `geneve`. Not all Mechanism drivers can implement
    all types of networks, however. The Linux bridge driver lacks support for GENEVE
    and GRE networks.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 类型驱动程序描述了可以由机制驱动程序创建和实现的网络类型。与 ML2 插件一起包含的类型驱动程序包括 `local`、`flat`、`vlan`、`gre`、`vxlan`
    和 `geneve`。然而，并非所有机制驱动程序都能实现所有类型的网络。Linux 桥接驱动程序不支持 GENEVE 和 GRE 网络。
- en: 'Update the ML2 configuration file on the controller01 node and add the following `type_drivers`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 `controller01` 节点上的 ML2 配置文件，并添加以下 `type_drivers`：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Mechanism drivers
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机制驱动程序
- en: Mechanism drivers are responsible for implementing networks described by the
    type driver. Mechanism drivers included with the ML2 plugin include `linuxbridge`,
    `openvswitch`, and `l2population`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 机制驱动程序负责实现由类型驱动程序描述的网络。与 ML2 插件一起包含的机制驱动程序包括 `linuxbridge`、`openvswitch` 和 `l2population`。
- en: 'Update the ML2 configuration file on the `controller01` node and add the following
    `mechanism_drivers`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 `controller01` 节点上的 ML2 配置文件，并添加以下 `mechanism_drivers`：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The Neutron Linux bridge agent requires specific configuration options that
    will be discussed later in this chapter.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron Linux 桥接代理需要特定的配置选项，这将在本章后续部分讨论。
- en: Using the L2 population driver
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 L2 population 驱动程序
- en: The L2 population driver was introduced in the Havana release of OpenStack alongside
    the ML2 plugin. It enables broadcast, multicast, and unicast traffic to scale
    on large overlay networks constructed by OpenStack.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: L2 population 驱动程序在 OpenStack 的 Havana 版本中引入，并与 ML2 插件一起发布。它使得在 OpenStack 构建的大型覆盖网络上，广播、组播和单播流量能够扩展。
- en: The goal of the L2 population driver is to inhibit costly switch learning behaviors
    by pre-populating bridge forwarding and IP neighbor (ARP) tables on all hosts.
    Because Neutron is seen as a source of truth for the logical layout of networks
    and instances created by users, it can easily pre-populate forwarding tables consisting
    of MAC addresses and destination VTEPs with that information. The L2 population
    driver also implements an ARP proxy on each host, eliminating the need to broadcast
    ARP requests across the overlay network. Each `compute` or `network` node is able
    to intercept an ARP request from an instance or router and proxy the response
    to the requestor. However, the L2 population driver does have limitations that
    will be discussed later in this chapter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: L2 population 驱动程序的目标是通过在所有主机上预先填充桥接转发和 IP 邻居（ARP）表，从而抑制昂贵的交换学习行为。由于 Neutron
    被视为用户创建的网络和实例的逻辑布局的可信来源，它可以轻松地用这些信息预填充包含 MAC 地址和目标 VTEP 的转发表。L2 population 驱动程序还在每个主机上实现了一个
    ARP 代理，消除了在覆盖网络上广播 ARP 请求的需要。每个 `compute` 或 `network` 节点都能够拦截来自实例或路由器的 ARP 请求，并将响应代理给请求者。然而，L2
    population 驱动程序确实有一些限制，稍后将在本章中讨论。
- en: An alternative to using the L2 population driver is to rely on the use of multicast
    to propagate forwarding database information between hosts. Each host should be
    configured to subscribe to a multicast group configured outside of OpenStack.
    If not properly configured, broadcast messages may be used in lieu of multicast
    and may cause unnecessary chatter on the network. The configuration of multicast
    is outside the scope of this book.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 L2 population 驱动程序的替代方案是依赖组播来在主机之间传播转发数据库信息。每个主机应配置为订阅一个在 OpenStack 之外配置的组播组。如果没有正确配置，可能会使用广播消息代替组播，这可能会导致网络上的不必要的干扰。组播的配置超出了本书的范围。
- en: Tenant network types
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 租户网络类型
- en: The `tenant_network_types` configuration option describes the type of networks
    that a tenant or project can create. When using the Linux bridge Mechanism driver,
    the supported tenant network types are `flat`, `vlan`, `local`, `vxlan`, and `none`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`tenant_network_types` 配置选项描述了租户或项目可以创建的网络类型。当使用 Linux 桥接机制驱动程序时，支持的租户网络类型包括
    `flat`、`vlan`、`local`、`vxlan` 和 `none`。'
- en: The configuration option takes values in an ordered list, such as `vlan,vxlan`.
    In this example, when a user creates a network, Neutron will automatically provision
    a VLAN network and ID without any user interaction. When all available VLAN IDs
    have been allocated, Neutron will allocate a network of the next type in the list.
    In this case, a VXLAN network and VNI would be allocated. When all segmentation
    IDs of any listed network type have been allocated, users will no longer be able
    to create networks and an error will be presented to the user.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 配置选项的值是按顺序排列的列表，如`vlan,vxlan`。在此示例中，当用户创建网络时，Neutron会自动配置一个VLAN网络和ID，无需用户交互。当所有可用的VLAN
    ID被分配完毕后，Neutron将分配列表中的下一个类型的网络。在这种情况下，将分配一个VXLAN网络和VNI。当任何列出网络类型的所有分段ID被分配完时，用户将无法再创建网络，并且系统会向用户呈现一个错误。
- en: Users with the `admin` role can override the behavior of `tenant_network_types`
    by specifying provider attributes during the network creation process.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有`admin`角色的用户可以通过在网络创建过程中指定提供者属性来覆盖`tenant_network_types`的行为。
- en: 'Update the ML2 configuration file on the `controller` node and add the following `tenant_network_types`
    configuration to the `[ml2]` section:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`controller`节点上的ML2配置文件，并将以下`tenant_network_types`配置添加到`[ml2]`部分：
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If at any time you wish to change the value of `tenant_network_types`, edit
    the plugin configuration file accordingly on all nodes and restart the `neutron-server`
    service.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望更改`tenant_network_types`的值，请相应地编辑所有节点上的插件配置文件，并重启`neutron-server`服务。
- en: Flat networks
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扁平网络
- en: The `flat_networks` configuration option defines interfaces that support the
    use of untagged networks, commonly referred to as a native or access VLAN. This
    option requires that a provider label be specified. A **provider label** is an
    arbitrary label or name that is mapped to a physical interface or bridge on the
    host. These mappings will be discussed in further detail later in this chapter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`flat_networks`配置选项定义了支持使用未标记网络的接口，这些网络通常被称为本地VLAN或接入VLAN。此选项要求指定提供者标签。**提供者标签**是一个任意标签或名称，映射到主机上的物理接口或桥接。稍后将在本章中详细讨论这些映射。'
- en: 'In the following example, the `physnet1` interface has been configured to support
    a flat network:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`physnet1`接口已配置为支持一个扁平网络：
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Multiple interfaces can be defined using a comma-separated list:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用逗号分隔的列表定义多个接口：
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Due to the lack of an identifier to segregate untagged traffic on the same interface,
    an interface can only support a single flat network.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于缺乏用于隔离同一接口上未标记流量的标识符，因此一个接口只能支持单一的扁平网络。
- en: In this environment, the `flat_networks` option can remain *unconfigured*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在此环境中，`flat_networks`选项可以保持*未配置*状态。
- en: Network VLAN ranges
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络VLAN范围
- en: The `network_vlan_ranges` configuration option defines a range of VLANs that
    project networks will be associated with upon their creation when `tenant_network_types`
    is `vlan`. When the number of available VLANs reaches zero, tenants will no longer
    be able to create VLAN networks.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`network_vlan_ranges`配置选项定义了当`tenant_network_types`为`vlan`时，项目网络在创建时将与哪些VLAN范围相关联。当可用VLAN数量达到零时，租户将无法再创建VLAN网络。'
- en: 'In the following example, VLAN IDs `40` through `43` are available for tenant
    network allocation:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，VLAN ID `40`到`43`可用于租户网络分配：
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Non-contiguous VLANs can be allocated by using a comma-separated list:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用逗号分隔的列表来分配不连续的VLAN：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this specific deployment, the provider label `physnet1` will be used with
    VLANs `40` through `43`. Those VLANs will be automatically assigned to `vlan`
    networks upon creation unless overridden by a user with the `admin` role.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在此特定部署中，提供者标签`physnet1`将与VLAN `40`到`43`一起使用。除非由拥有`admin`角色的用户覆盖，否则这些VLAN将在创建时自动分配到`vlan`网络。
- en: 'Update the ML2 configuration file on the `controller01` node and add the following 
     `network_vlan_ranges` to the `[ml2_type_vlan]` section:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`controller01`节点上的ML2配置文件，并将以下`network_vlan_ranges`添加到`[ml2_type_vlan]`部分：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: VNI ranges
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VNI范围
- en: When VXLAN networks are created, each network is assigned a unique segmentation
    ID that is used to encapsulate traffic. When the Linux bridge Mechanism driver
    is used, the segmentation ID is used when creating the respective VXLAN interface
    on each host.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建VXLAN网络时，每个网络都会分配一个唯一的分段ID，用于封装流量。当使用Linux桥接机制驱动程序时，创建各主机的相应VXLAN接口时会使用该分段ID。
- en: The `vni_ranges` configuration option is a comma-separated list of ID ranges
    that are available for project network allocation when `tunnel_type` is set to
    `vxlan`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`vni_ranges` 配置选项是一个用逗号分隔的 ID 范围列表，用于在 `tunnel_type` 设置为 `vxlan` 时为项目网络分配可用范围。'
- en: 'In the following example, segmentation IDs `1` through `1000` are reserved
    for allocation to tenant networks upon creation:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，段划分 ID `1` 到 `1000` 被预留用于租户网络分配时使用：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `vni_ranges` option supports non-contiguous IDs using a comma-separated
    list as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`vni_ranges` 选项通过逗号分隔的列表支持非连续的 ID，如下所示：'
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Update the ML2 configuration file on the `controller01` node and add the following
    `vni_ranges` to the `[ml2_type_vxlan]` section:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 `controller01` 节点上的 ML2 配置文件，并将以下 `vni_ranges` 添加到 `[ml2_type_vxlan]` 部分：
- en: '[PRE23]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The 24-bit VNI field in the VXLAN header supports up to approximately 16 million
    unique identifiers.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: VXLAN 头部中的 24 位 VNI 字段支持大约 1600 万个独特标识符。
- en: Security groups
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全组
- en: The `enable_security_group` configuration option instructs Neutron to enable
    or disable security group-related API functions. The option is set to `true` by
    default.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`enable_security_group` 配置选项指示 Neutron 启用或禁用与安全组相关的 API 功能。该选项默认为 `true`。'
- en: The `enable_ipset` configuration option instructs Neutron to enable or disable
    the `ipset` extension for iptables when the iptables firewall driver is used.
    The use of ipsets allows for the creation of firewall rules that match entire
    sets of addresses at once rather than having individual lines per address, making
    lookups very efficient compared to traditional linear lookups. The option is set
    to `true` by default.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`enable_ipset` 配置选项指示 Neutron 在使用 iptables 防火墙驱动程序时启用或禁用 `ipset` 扩展。使用 ipset
    允许创建一次匹配整组地址的防火墙规则，而不是为每个地址单独创建规则，这使得查找比传统的线性查找更高效。该选项默认为 `true`。'
- en: If at any time the ML2 configuration file is updated, you must restart the `neutron-server` service
    and respective Neutron agent for the changes to take effect.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何时候更新了 ML2 配置文件，则必须重新启动 `neutron-server` 服务及相应的 Neutron 代理，以使更改生效。
- en: Configuring the Linux bridge driver and agent
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Linux 桥接驱动程序和代理
- en: The Linux bridge Mechanism driver is included with the ML2 plugin, and was installed
    in *[Chapter 3](bf508e37-ce8a-4116-89db-e8f8a6abf0f4.xhtml),* *Installing Neutron*.
    The following sections will walk you through the configuration of OpenStack Networking
    to utilize the Linux bridge driver and agent.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 桥接机制驱动程序包含在 ML2 插件中，并在 *[第 3 章](bf508e37-ce8a-4116-89db-e8f8a6abf0f4.xhtml)*，*安装
    Neutron* 中进行安装。以下部分将引导您配置 OpenStack 网络以利用 Linux 桥接驱动程序和代理。
- en: While the Linux bridge and Open vSwitch agents and drivers can coexist in the
    same environment, they should not be installed and configured simultaneously on
    the same host.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Linux 桥接和 Open vSwitch 代理及驱动程序可以在同一环境中共存，但不应在同一主机上同时安装和配置它们。
- en: Installing the Linux bridge agent
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Linux 桥接代理
- en: 'To install the Neutron Linux bridge agent, issue the following command on `controller01`
    and `compute01`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Neutron Linux 桥接代理，请在 `controller01` 和 `compute01` 上执行以下命令：
- en: '[PRE24]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If prompted to overwrite existing configuration files, type `N` at the `[default=N]`
    prompt.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统提示覆盖现有配置文件，请在 `[default=N]` 提示符下输入 `N`。
- en: Updating the Linux bridge agent configuration file
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 Linux 桥接代理配置文件
- en: 'The Linux bridge agent uses a configuration file located at `/etc/neutron/plugins/ml2/linuxbridge_agent
    .ini`. The most common options are as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 桥接代理使用位于 `/etc/neutron/plugins/ml2/linuxbridge_agent.ini` 的配置文件。最常见的选项如下：
- en: '[PRE25]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Physical interface mappings
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理接口映射
- en: 'The `physical_interface_mappings` configuration option describes the mapping
    of an artificial label to a physical interface in the server. When networks are
    created, they are associated with an interface label, such as `physnet1`. The
    label `physnet1` is then mapped to a physical interface, such as `eth2`, by the
    `physical_interface_mappings` option. This mapping can be observed in the following
    example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`physical_interface_mappings` 配置选项描述了一个人工标签到服务器物理接口的映射。当创建网络时，它们会关联一个接口标签，例如
    `physnet1`。然后，`physnet1` 标签会通过 `physical_interface_mappings` 选项映射到一个物理接口，例如 `eth2`。以下示例中可以观察到此映射：'
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The chosen label(s) must be consistent between all nodes in the environment
    that are expected to handle traffic for a given network created with Neutron.
    However, the physical interface mapped to the label may be different. A difference
    in mappings is often observed when one node maps `physnet1` to a gigabit interface
    while another maps `physnet1` to a 10-gigabit interface.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 所选标签必须在预期处理由Neutron创建的特定网络流量的所有节点之间保持一致。然而，映射到标签的物理接口可能不同。当一个节点将`physnet1`映射到千兆接口，而另一个节点将`physnet1`映射到10千兆接口时，通常会观察到映射的差异。
- en: 'Multiple interface mappings are allowed, and can be added to the list using
    a comma-separated list:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 允许多个接口映射，可以通过逗号分隔的列表将其添加到列表中：
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this installation, the `eth2`interface will be utilized as the physical network
    interface, which means that traffic for any networks associated with `physnet1`
    will traverse `eth2`. The physical switch port connected to `eth2` must support
    802.1q VLAN tagging if VLAN networks are to be created by tenants.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在此安装中，`eth2`接口将作为物理网络接口使用，这意味着与`physnet1`关联的任何网络的流量将通过`eth2`。如果租户要创建VLAN网络，连接到`eth2`的物理交换机端口必须支持802.1q
    VLAN标记。
- en: 'Configure the Linux bridge agent to use `physnet1` as the physical interface
    label and `eth2` as the physical network interface by updating the ML2 configuration
    file accordingly on `controller01` and `compute01`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Linux桥接代理使用`physnet1`作为物理接口标签，并通过相应更新`controller01`和`compute01`上的ML2配置文件，将`eth2`作为物理网络接口：
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Enabling VXLAN
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用VXLAN
- en: 'To enable support for VXLAN networks, the `enable_vxlan` configuration option
    must be set to`true`. Update the `enable_vxlan` configuration option in the `[vxlan]`
    section of the ML2 configuration file accordingly on `Controller01` and `compute01`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用对VXLAN网络的支持，`enable_vxlan`配置选项必须设置为`true`。在`Controller01`和`compute01`上相应地更新ML2配置文件中的`enable_vxlan`配置选项：
- en: '[PRE29]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: L2 population
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: L2人口
- en: 'To enable support for the L2 population driver, the `l2_population` configuration
    option must be set to `true`. Update the `l2_population` configuration option
    in the `[vxlan]` section of the ML2 configuration file accordingly on `controller01`
    and `compute01`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用对L2人口驱动程序的支持，`l2_population`配置选项必须设置为`true`。在`controller01`和`compute01`上相应地更新ML2配置文件中的`l2_population`配置选项：
- en: '[PRE30]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: A useful feature of the L2 population driver is its ARP responder functionality
    that helps avoid the broadcasting of ARP requests across the overlay network.
    Each `compute` node can proxy ARP requests from virtual machines and provide them
    with replies, all without that traffic leaving the host.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: L2人口驱动程序的一个有用功能是其ARP响应器功能，有助于避免在覆盖网络中广播ARP请求。每个`compute`节点可以代理来自虚拟机的ARP请求并提供回复，所有这些都不会让流量离开主机。
- en: 'To enable the ARP responder, update the following configuration option:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用ARP响应器，请更新以下配置选项：
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The ARP responder has known incompatibilities with the `allowed-address-pairs` extension
    on systems using the Linux bridge agent, however. The `vxlan` kernel module utilized
    by the Linux bridge agent does not support dynamic learning when ARP responder
    functionality is enabled. As a result, when an IP address moves between virtual
    machines, the forwarding database may not be updated with the MAC address and
    respective VTEP of the destination host as Neutron is not notified of this change.
    If allowed-address-pairs functionality is required, my recommendation is to disable
    the ARP responder until this behavior is changed.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，ARP响应器与使用Linux桥接代理的系统上的`allowed-address-pairs`扩展存在已知的不兼容问题。Linux桥接代理使用的`vxlan`内核模块在启用ARP响应器功能时不支持动态学习。因此，当IP地址在虚拟机之间迁移时，转发数据库可能不会更新目标主机的MAC地址和相应的VTEP，因为Neutron未收到此更改的通知。如果需要`allowed-address-pairs`功能，我的建议是禁用ARP响应器，直到该行为发生变化。
- en: Local IP
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地IP
- en: The `local_ip` configuration option specifies the local IP address on the node
    that will be used to build the overlay network between hosts. Refer to *[Chapter
    1](961d71d1-9804-4af7-ad1f-8716e6dd5ac6.xhtml), Introduction to OpenStack Networking*,
    for ideas on how the overlay network should be architected. In this installation,
    all guest traffic through overlay networks will traverse a dedicated network over
    the `eth1` interface configured earlier in this chapter.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`local_ip`配置选项指定了用于在主机之间建立覆盖网络的本地IP地址。有关覆盖网络架构的设计，请参考*[第1章](961d71d1-9804-4af7-ad1f-8716e6dd5ac6.xhtml)，OpenStack网络介绍*。在本安装中，所有通过覆盖网络的来宾流量将通过本章前面配置的`eth1`接口跨越专用网络。'
- en: 'Update the `local_ip` configuration option in the `[vxlan]` section of the
    ML2 configuration file accordingly on the `controller01` and `compute01` hosts:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controller01`和`compute01`主机上的ML2配置文件的`[vxlan]`部分中相应更新`local_ip`配置选项：
- en: '[PRE32]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following table provides the interfaces and addresses to be configured
    on each host. Substitute for `X` where appropriate:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了需要在每个主机上配置的接口和地址。请根据需要替换`X`：
- en: '| **Hostname** | **Interface** | **IP address** |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| **主机名** | **接口** | **IP 地址** |'
- en: '| `controller01` | eth1 | 10.20.0.100 |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `controller01` | eth1 | 10.20.0.100 |'
- en: '| `compute01` | eth1 | 10.20.0.101 |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `compute01` | eth1 | 10.20.0.101 |'
- en: Firewall driver
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防火墙驱动程序
- en: The `firewall_driver` configuration option instructs Neutron to use a particular
    firewall driver for security group functionality. There may be different firewall
    drivers configured based on the Mechanism driver in use.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`firewall_driver`配置选项指示Neutron使用特定的防火墙驱动程序来实现安全组功能。根据使用的机制驱动程序，可能会配置不同的防火墙驱动程序。'
- en: 'Update the ML2 configuration file on `controller01` and `compute01` and define
    the appropriate `firewall_driver` in the `[securitygroup]` section on a single
    line:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`controller01`和`compute01`上的ML2配置文件，并在`[securitygroup]`部分的单行中定义适当的`firewall_driver`配置：
- en: '[PRE33]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: If you do not want to use a firewall, and want to disable the application of
    security group rules, set `firewall_driver` to `noop`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用防火墙，并希望禁用安全组规则的应用，将`firewall_driver`设置为`noop`。
- en: Configuring the DHCP agent to use the Linux bridge driver
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置DHCP代理使用Linux桥接驱动程序
- en: For Neutron to properly connect DHCP namespace interfaces to the appropriate
    network bridge, the DHCP agent on the `controller` node must be configured to
    use the Linux bridge interface driver.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Neutron能够正确地将DHCP命名空间接口连接到相应的网络桥接，`controller`节点上的DHCP代理必须配置为使用Linux桥接接口驱动程序。
- en: 'On the `controller` node, update the `interface_driver` configuration option
    in the Neutron DHCP agent configuration file at `/etc/neutron/dhcp_agent.ini` to
    use the Linux bridge interface driver:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controller`节点上，更新Neutron DHCP代理配置文件`/etc/neutron/dhcp_agent.ini`中的`interface_driver`配置选项，以使用Linux桥接接口驱动程序：
- en: '[PRE34]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The interface driver will vary based on the plugin agent in use on the node
    hosting the DHCP agent.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接口驱动程序将根据托管DHCP代理的节点上使用的插件代理而有所不同。
- en: Restarting services
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重启服务
- en: 'Some services must be restarted for the changes made to take effect. The following
    services should be restarted on `controller01` and `compute01`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 某些服务必须重新启动才能使更改生效。以下服务应在`controller01`和`compute01`上重启：
- en: '[PRE35]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following services should be restarted on the `controller01` node:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下服务应在`controller01`节点上重启：
- en: '[PRE36]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Verifying Linux bridge agents
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证Linux桥接代理
- en: 'To verify the Linux bridge network agents have properly checked in, issue the
    `openstack network agent list` command on the `controller` node:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证Linux桥接网络代理是否已正确登记，在`controller`节点上执行`openstack network agent list`命令：
- en: '![](img/5a1773ac-d29a-483a-98ec-a2630963e98b.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a1773ac-d29a-483a-98ec-a2630963e98b.png)'
- en: The Neutron Linux bridge agents on the `controller01` and `compute01` nodes
    should be visible in the output with a state of `UP`. If an agent is not present,
    or the state is `DOWN`, you will need to troubleshoot agent connectivity issues
    by observing log messages found in `/var/log/neutron/neutron-linuxbridge-agent.log`
    on the respective host.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`controller01`和`compute01`节点上的Neutron Linux桥接代理应在输出中显示，状态为`UP`。如果代理不在输出中，或状态为`DOWN`，你需要通过观察相应主机上的`/var/log/neutron/neutron-linuxbridge-agent.log`日志消息来排查代理连接问题。'
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we discovered how Neutron leverages Linux bridges and virtual
    interfaces to provide network connectivity to instances. The Linux bridge driver
    supports many different network types, including tagged, untagged, and overlay
    networks, and I will demonstrate in later chapters how these differ when we launch
    instances on those networks.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了 Neutron 如何利用 Linux 桥接和虚拟接口为实例提供网络连接。Linux 桥接驱动程序支持多种不同的网络类型，包括带标签、无标签和覆盖网络，稍后的章节中，我将展示在这些网络上启动实例时，它们的不同之处。
- en: In the next chapter, you will learn the difference between a Linux bridge and
    Open vSwitch implementation and will be guided through the process of installing
    the Open vSwitch driver and agent on two additional `compute` nodes and a network
    node dedicated to distributed virtual routing functions.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习 Linux 桥接与 Open vSwitch 实现之间的区别，并将逐步了解如何在两个额外的 `compute` 节点和一个专用于分布式虚拟路由功能的网络节点上安装
    Open vSwitch 驱动程序和代理。
