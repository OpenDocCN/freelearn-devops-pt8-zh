- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Understanding Patterns and Antipatterns of IaC and Terraform
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 IaC 和 Terraform 的模式与反模式
- en: In an ever-evolving digital landscape, the seamless integration of development
    and operations has become a necessity for organizations seeking to achieve unparalleled
    efficiency and agility. The opening chapter of this book delves into the fascinating
    world of **Infrastructure as Code** (**IaC**) and **Terraform**, unraveling the
    key principles, patterns, and anti-patterns that underpin this transformative
    approach. With a keen focus on idempotency, immutability, and an array of best
    practices, this chapter illuminates the path to robust, secure, and compliant
    infrastructure management. As we embark on this captivating journey, we’ll explore
    the intricacies of IaC projects, examine the challenges they present, and unearth
    invaluable strategies to conquer them. By the end of this chapter, you’ll possess
    a solid foundation to make informed decisions about the life cycle of your infrastructure
    and harness the true potential of IaC and Terraform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在不断发展的数字化环境中，开发与运维的无缝集成已成为组织实现卓越效率和敏捷性的必要条件。本书的开篇章节深入探讨了**基础设施即代码**（**IaC**）和**Terraform**的迷人世界，揭示了支撑这一变革性方法的关键原则、模式和反模式。通过关注幂等性、不可变性以及一系列最佳实践，本章阐明了稳健、安全和合规的基础设施管理之路。在这段引人入胜的旅程中，我们将探索
    IaC 项目的复杂性，研究它们所带来的挑战，并挖掘出克服这些挑战的宝贵策略。通过本章的学习，您将拥有扎实的基础，做出关于基础设施生命周期的明智决策，并充分发挥
    IaC 和 Terraform 的真正潜力。
- en: 'We’ll cover these main topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Introducing IAC
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入 IAC
- en: Patterns and practices of IaC
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IaC 的模式和实践
- en: How to handle IaC projects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理 IaC 项目
- en: How to make decisions about IaC projects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何做出关于 IaC 项目的决策
- en: Introducing IaC
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 IaC
- en: IaC refers to the process of managing and provisioning computing infrastructure
    through machine-readable definition files instead of relying on interactive configuration
    tools or physical hardware setups.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 指的是通过机器可读的定义文件来管理和配置计算基础设施，而不是依赖于交互式配置工具或物理硬件设置的过程。
- en: IaC leverages coding techniques that have been tried and tested in software
    systems, extending their application to infrastructure. It is one of the key DevOps
    practices that enable teams to deliver infrastructure and software rapidly and
    reliably at scale. Having a fast and dependable infrastructure provisioning mechanism
    is essential for organizations that want to achieve continuous delivery for their
    applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 利用已在软件系统中经过验证的编码技术，将其应用扩展到基础设施领域。它是实现 DevOps 关键实践之一，使团队能够快速、可靠地大规模交付基础设施和软件。拥有一个快速且可靠的基础设施配置机制对那些希望实现持续交付的组织至关重要。
- en: In IaC, a declarative language is typically used to describe the desired state
    of a system, as well as the steps required to bring it into compliance with that
    state. The IaC tool then uses these descriptions to construct and manage the necessary
    steps automatically, transitioning the system from one state to another. As a
    result, IaC enables organizations to automate processes such as resource installation,
    configuration, deployment, scaling, updating, and deletion in their IT infrastructures.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IaC 中，通常使用声明式语言来描述系统的期望状态，以及使系统符合该状态所需的步骤。然后，IaC 工具使用这些描述自动构建和管理必要的步骤，将系统从一种状态过渡到另一种状态。因此，IaC
    使组织能够自动化其 IT 基础设施中的资源安装、配置、部署、扩展、更新和删除等过程。
- en: Key principles of IaC
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IaC 的关键原则
- en: There are two key principles of IaC, which we will gain an understanding of
    in this section.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 有两个关键原则，我们将在本节中了解它们。
- en: Idempotency
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 幂等性
- en: Idempotency is a characteristic of certain operations in mathematics, programming
    languages, and computer science. It refers to the property where applying these
    operations multiple times produces the same result without altering it except
    for generating identical copies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幂等性是数学、编程语言和计算机科学中某些操作的特性。它指的是多次应用这些操作会产生相同的结果，除了生成相同的副本外，不会改变结果。
- en: In the context of IaC, idempotency means that regardless of the starting state
    and the number of times the IaC is executed, the end state remains the same. This
    simplifies the infrastructure provisioning process and minimizes the likelihood
    of inconsistent outcomes. This property offers several advantages for operations,
    such as the capability to roll back changes and retry them in case of failure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在IaC的背景下，幂等性意味着无论起始状态如何以及IaC执行多少次，最终状态始终保持一致。这简化了基础设施配置过程，并减少了结果不一致的可能性。这个特性为运维带来多个优势，例如能够回滚更改并在失败时重新尝试。
- en: One way to achieve idempotency is by using a stateful tool such as Terraform.
    With Terraform, you can specify the desired end state of the infrastructure, and
    the tool will handle the process of reaching that state.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实现幂等性的一种方式是使用有状态工具，如Terraform。使用Terraform，您可以指定基础设施的期望最终状态，工具将处理达到该状态的过程。
- en: Immutability
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不可变性
- en: Configuration change management is an important topic for infrastructure provisioning.
    For success, we need a powerful change management recording system that records
    all changes made to the infrastructure, and it includes details about why those
    changes were made, who was responsible for them, when they were implemented, and
    so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 配置变更管理是基础设施配置中的一个重要话题。为了成功，我们需要一个强大的变更管理记录系统，记录所有对基础设施所做的更改，并包括更改的原因、责任人、实施时间等详细信息。
- en: Configuration drift can pose a significant challenge to infrastructure management.
    It arises when changes are made to the infrastructure without proper documentation,
    causing different environments to diverge in ways that are difficult to replicate.
    This problem is particularly prevalent in mutable infrastructures that are active
    for extended periods.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 配置漂移可能对基础设施管理构成重大挑战。它出现在对基础设施进行修改而没有适当文档记录时，导致不同环境出现难以复制的差异。这个问题在那些运行时间较长的可变基础设施中尤为普遍。
- en: The consequence of configuration drift can be severe, leading to inconsistent
    performance and stability and security issues in the infrastructure. Since it
    is difficult to reproduce the exact conditions that led to the drift, troubleshooting
    such problems can be time-consuming and error-prone.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 配置漂移的后果可能是严重的，导致性能不一致、稳定性差以及基础设施中的安全问题。由于很难重现导致漂移的确切条件，排查这些问题可能既费时又容易出错。
- en: Immutable infrastructure is a technique for constructing and managing infrastructure
    in a dependable, repeatable, and foreseeable manner. This approach offers several
    advantages over traditional IT environment management methods. Rather than altering
    the existing infrastructure, immutable infrastructure involves replacing it with
    a new one. By provisioning fresh infrastructure each time, the approach ensures
    that the infrastructure remains reproducible and free from configuration drift
    over time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变基础设施是一种以可靠、可重复和可预见的方式构建和管理基础设施的技术。这种方法相比传统的IT环境管理方法具有几个优势。与其改变现有基础设施，不如通过替换它来实现不可变基础设施。通过每次配置新的基础设施，这种方法确保了基础设施保持可复制，并且随着时间推移不会出现配置漂移。
- en: Immutable infrastructure also provides scalability when provisioning infrastructure
    in cloud environments.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变基础设施还为在云环境中配置基础设施提供了可扩展性。
- en: Now that we know what IaC is and what its key principles are, let’s look at
    the patterns of IaC.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了IaC是什么及其关键原则，让我们来看看IaC的模式。
- en: Patterns and practices of IaC
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IaC的模式与实践
- en: Diving into the world of IaC, it is essential to uncover the patterns and practices
    that form the backbone of efficient and reliable implementations. In this section,
    we will explore the fundamental building blocks that contribute to the success
    of IaC, ensuring a comprehensive understanding of its best practices and a solid
    foundation for your IaC journey.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解基础设施即代码（IaC）的世界，揭示构成高效可靠实现的模式和实践是至关重要的。在本节中，我们将探索对IaC成功至关重要的基本构建块，确保全面理解其最佳实践，并为您的IaC之旅奠定坚实的基础。
- en: Source control and VCS
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源代码管理和版本控制系统（VCS）
- en: It is crucial to keep all aspects of your infrastructure, including the smallest
    scripts and pipeline configurations, in source control or **version control systems**
    (**VCSs**). A version control system is a tool that manages and tracks changes
    to documents, programs, and other collections of information, often used in software
    development to maintain a history of code changes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将基础设施的所有方面，包括最小的脚本和管道配置，保存在源代码管理或**版本控制系统**（**VCSs**）中至关重要。版本控制系统是一种管理和跟踪文档、程序及其他信息集合更改的工具，通常用于软件开发，以保持代码更改的历史记录。
- en: This practice ensures that you have a record of all changes made to your infrastructure,
    regardless of how minor they may be. It also simplifies the process of tracking
    ownership and the history of changes to your infrastructure configurations.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这一做法确保你能够记录下所有对基础设施所做的更改，无论这些更改多么微小。它还简化了追踪所有权和基础设施配置更改历史的过程。
- en: Furthermore, it is important to make the infrastructure code accessible to all
    members of your organization, including those who do not directly work on the
    IaC code base. This visibility provides a better understanding of how the infrastructure
    is provisioned and enables quick troubleshooting of any issues that arise. By
    reviewing the code, users can gain a deeper understanding of how the infrastructure
    operates, and even contribute to the development of the infrastructure if they
    choose to do so.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，确保所有组织成员都能访问基础设施代码非常重要，包括那些不直接参与IaC代码库的成员。这种可见性提供了对基础设施如何配置的更好理解，并能迅速排除出现的任何问题。通过查看代码，用户可以更深入地理解基础设施的运作方式，甚至可以选择参与基础设施的开发。
- en: The visibility and understanding of the applications running on your infrastructure
    are crucial for managing a successful IT infrastructure. By having a good grasp
    of how the applications function, you can optimize their performance and ensure
    that they operate efficiently. By keeping the infrastructure code accessible to
    all, you can ensure that your entire organization can contribute to maintaining
    and improving the infrastructure, ultimately leading to better outcomes for your
    business.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对运行在你基础设施上的应用程序的可见性和理解对于管理成功的IT基础设施至关重要。通过深入了解应用程序的功能，你可以优化它们的性能并确保它们高效运行。通过保持基础设施代码的可访问性，你可以确保整个组织能够贡献于基础设施的维护和改进，最终为你的业务带来更好的成果。
- en: Modules and versions
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块与版本
- en: Creating reusable modules in IaC tools helps with maintenance, readability,
    and ownership. It keeps changes small and independently deployable and reduces
    the effect radius.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在IaC工具中创建可重用的模块有助于维护、可读性和所有权。它使得更改更小且可独立部署，从而减少影响范围。
- en: Refactoring IaC is difficult compared to application development, particularly
    for critical pieces such as DNS records, network configurations, databases, and
    so on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于应用程序开发，重构IaC更具挑战性，特别是对于像DNS记录、网络配置、数据库等关键部分。
- en: In many organizations, team structures and responsibilities are different, so
    it will make more sense to separate multiple layers of infrastructure and assign
    governance to the respective teams. In some cases, there might be some more separated
    layers needed for cross-functional teams managing both infrastructure and application
    development.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多组织中，团队结构和职责各不相同，因此将多个基础设施层分开并将治理分配给相应团队会更有意义。在某些情况下，可能需要更多分离的层次，以便跨职能团队同时管理基础设施和应用开发。
- en: The following diagram illustrates an example of Amazon EKS deployments, featuring
    multiple modules for each infrastructure layer and their respective governors.
    It is important to note that the modules and layers depicted in this diagram may
    differ depending on your specific setup.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了一个Amazon EKS部署的示例，包含每个基础设施层的多个模块及其相应的治理者。需要注意的是，图中展示的模块和层次可能会根据你的具体设置有所不同。
- en: '![Figure 1.1 – EKS deployment workflow](img/B18198_01_1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – EKS部署工作流](img/B18198_01_1.jpg)'
- en: Figure 1.1 – EKS deployment workflow
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – EKS部署工作流
- en: Versioning for modules is quite important to provide support for multiple versions
    of services that can operate without breaking the existing production resources.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为模块进行版本管理非常重要，以便支持多个版本的服务运行，而不破坏现有的生产资源。
- en: Documentation
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档
- en: IaC minimizes the need for extensive documentation for infrastructure since
    everything is codified and stated as a declarative manifest. However, some documentation
    is needed for better infrastructure provisioning so that consumers can understand
    and improve the current modules and templates.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施即代码（IaC）最大限度地减少了对基础设施文档的需求，因为一切都被编写成代码并作为声明性清单呈现。然而，为了更好的基础设施配置，仍然需要一些文档，以便用户能够理解和改进当前的模块和模板。
- en: Documentation can be challenging to manage, much like code. It is critical to
    provide sufficient documentation to convey the intended message effectively. However,
    having more documentation does not necessarily equate to better-quality documentation.
    In fact, outdated documentation can be more detrimental than having no documentation
    at all.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 文档管理可能很具挑战性，就像代码一样。提供足够的文档以有效传达预期的信息至关重要。然而，更多的文档并不一定意味着更高质量的文档。事实上，过时的文档可能比没有文档更具危害。
- en: IaC documentation must live close to the code. Keep it close so that everyone
    can update the documentation without unnecessary effort and difficult steps. If
    you can build good governance automation, documentation creation or updates can
    be easily tracked and enforced.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 文档必须与代码紧密相连。将文档保持靠近代码，以便每个人都能轻松地更新文档，而不需要不必要的努力和复杂步骤。如果你能构建良好的治理自动化，文档的创建或更新将容易追踪和强制执行。
- en: An effective approach to managing documentation for IaC is to include a `README`
    file within the same repository as the code, rather than using an external platform
    such as Confluence or a wiki. This approach facilitates updating the documentation
    during the same commit as the code changes, which is particularly useful as a
    reminder during the pull request process.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 管理 IaC 文档的有效方法是在与代码相同的仓库中包含一个 `README` 文件，而不是使用 Confluence 或 Wiki 等外部平台。此方法便于在与代码更改相同的提交中更新文档，尤其在拉取请求过程中，它也能作为提醒。
- en: It is also ideal to leverage automated tools to generate documentation from
    the code or use tests as documentation. By doing so, you can ensure that the documentation
    stays in sync with the code, reducing the likelihood of inconsistencies and outdated
    information. This approach can also streamline the documentation process, reducing
    the need for manual documentation efforts and enabling faster iterations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 利用自动化工具从代码生成文档或将测试用作文档是理想的做法。通过这种方式，你可以确保文档与代码保持同步，从而减少不一致和过时信息的可能性。这种方法还可以简化文档过程，减少手动编写文档的需求，并加快迭代速度。
- en: Testing
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: Software testing is the process of executing a program or application with the
    intent of finding errors. Testing can be done at various levels, from unit testing
    to integration testing to system testing and acceptance testing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试是执行程序或应用程序以查找错误的过程。测试可以在不同层级进行，从单元测试到集成测试，再到系统测试和验收测试。
- en: 'IaC development is not an easy task. There are many different aspects and considerations
    that need to be taken into account before, during, and after the development process.
    One of these considerations is how to test your IaC. Let’s provide you with a
    basic understanding of the various levels of testing that you need to think about
    when developing your IaC:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 开发并非易事。开发过程之前、期间和之后有许多不同的方面和考虑因素需要考虑。其中一个考虑因素是如何测试你的 IaC。让我们为你提供有关在开发 IaC
    时需要考虑的各种测试层级的基本理解：
- en: '**Static code** **and analysis**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态代码** **及分析**'
- en: Running quick tests as frequently as possible is crucial for obtaining prompt
    feedback during the development process. This approach is especially effective
    when performed on your local machine. There are various integrations available
    that can automate this process and trigger tests automatically when you save a
    file in your text editor or IDE.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽可能频繁地运行快速测试对于在开发过程中获得及时反馈至关重要。尤其在本地机器上进行此操作时效果尤为显著。有许多可用的集成工具可以自动化此过程，在你保存文件时自动触发测试，无论是在文本编辑器还是
    IDE 中。
- en: To perform static analysis, you can use specialized tools such as Terraform
    Validate or TFLint. These tools enable you to identify issues in your code and
    configurations promptly, reducing the likelihood of errors and inconsistencies
    in your infrastructure. By incorporating quick testing and static analysis into
    your development process, you can streamline the testing process and improve the
    reliability of your infrastructure.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要执行静态分析，您可以使用像Terraform Validate或TFLint这样的专业工具。这些工具使您能够及时发现代码和配置中的问题，从而减少基础设施中的错误和不一致的可能性。通过将快速测试和静态分析纳入开发过程，您可以简化测试过程，提高基础设施的可靠性。
- en: '**Unit testing**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**'
- en: Since many IaC tools, such as Terraform and Ansible, operate on a declarative
    model, unit testing may not always be necessary. However, in some cases, unit
    tests can be beneficial, particularly when conditionals or loops are involved.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于许多IaC工具（如Terraform和Ansible）基于声明性模型运行，因此单元测试并非总是必要的。然而，在某些情况下，单元测试是有益的，特别是当涉及到条件语句或循环时。
- en: While unit testing may not always be required for IaC, incorporating it where
    necessary can help to catch potential issues early on in the development process,
    improving the overall quality of your infrastructure.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管IaC的单元测试并非总是必需的，但在必要时加入单元测试有助于在开发过程中及早发现潜在问题，提高基础设施的整体质量。
- en: '**Integration testing**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**'
- en: One essential step in ensuring the reliability of your infrastructure is to
    perform validation testing. This involves provisioning resources in a test environment
    and verifying whether specific requirements are met. It is crucial to avoid writing
    tests for things that are already covered by your IaC tool, particularly when
    working with declarative code.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保基础设施可靠性的一个关键步骤是进行验证测试。这包括在测试环境中配置资源，并验证是否满足特定要求。特别是在使用声明式代码时，避免为已经由IaC工具覆盖的内容编写测试是至关重要的。
- en: For example, instead of verifying whether the policies specified in IaC were
    applied, you should write automated tests to ensure that none of your S3 buckets
    are public. Similarly, you can test that only specific ports are open across all
    of your EC2 instances. To perform these tests, you can provision an ephemeral
    environment that you can later tear down.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，您应该编写自动化测试来确保没有任何S3存储桶是公开的，而不是验证IaC中指定的策略是否已应用。同样，您可以测试所有EC2实例上是否只有特定端口是开放的。为了执行这些测试，您可以配置一个临时环境，之后可以将其销毁。
- en: Depending on the duration of these tests, you may want to run them after every
    commit or as nightly builds. By incorporating validation testing into your development
    process, you can catch potential issues early on, reduce the risk of errors, and
    ensure the overall reliability of your infrastructure.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据这些测试的持续时间，您可能希望在每次提交后运行它们，或作为夜间构建的一部分。通过将验证测试融入开发流程，您可以及早发现潜在问题，减少错误风险，并确保基础设施的整体可靠性。
- en: '**Smoke tests**'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**烟雾测试**'
- en: An additional approach to testing is to provision an environment, deploy a dummy
    application, and run quick smoke tests to verify that the application has been
    deployed correctly. Using a dummy application can be helpful in testing scenarios
    that your actual application may encounter but are not configured for production.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一种测试方法是配置一个环境，部署一个虚拟应用程序，并进行快速的烟雾测试，以验证应用程序是否正确部署。使用虚拟应用程序可以帮助测试实际应用程序可能遇到的情境，但这些情境并未为生产环境配置。
- en: For example, if your application connects to an externally hosted database,
    you should attempt to connect to it in your dummy application. By doing so, you
    can gain confidence that the infrastructure you are provisioning is capable of
    supporting the applications you intend to run on it.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，如果您的应用程序连接到外部托管的数据库，您应该尝试在虚拟应用程序中连接该数据库。通过这样做，您可以确信您正在配置的基础设施能够支持您打算在其上运行的应用程序。
- en: As these tests can be time-consuming, it is advisable to run them after provisioning
    a new environment and periodically thereafter. By leveraging this testing approach,
    you can ensure that your infrastructure is capable of supporting your application’s
    requirements and minimize the risk of errors or issues arising during deployment.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些测试可能会耗时，建议在配置新环境后以及随后定期运行这些测试。通过利用这种测试方法，您可以确保您的基础设施能够支持应用程序的要求，并最小化在部署过程中出现错误或问题的风险。
- en: Security and compliance
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性和合规性
- en: The definition of IaC is to provide an abstraction layer between the physical
    infrastructure and the applications that run on top of it. This is done by separating
    the hardware from the software and by abstracting out all of the tasks that are
    required to manage the hardware.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: IaC的定义是为物理基础设施与其上运行的应用程序之间提供一个抽象层。这是通过将硬件与软件分离，并抽象出所有管理硬件所需的任务来实现的。
- en: IaC can be used by companies for compliance purposes, such as HIPAA, SOX, PCI
    DSS, and so on. It can also be used for security purposes, such as preventing
    unauthorized access to data or preventing hackers from accessing sensitive information.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: IaC可以被公司用于合规性目的，如HIPAA、SOX、PCI DSS等。它也可以用于安全目的，例如防止未授权访问数据或防止黑客获取敏感信息。
- en: Let’s look at important details of security and compliance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看安全性和合规性的关键细节。
- en: Identity and access management
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 身份和访问管理
- en: Implementing a strong **Identity and Access Management** (**IAM**) strategy
    is essential for safeguarding both your IaC and the infrastructure it provisions.
    One effective approach is to use **Role-Based Access Control** (**RBAC**) for
    IaC, which can significantly reduce the overall attack surface.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 实施强有力的**身份和访问管理**（**IAM**）策略对于保护你的基础设施即代码（IaC）及其所配置的基础设施至关重要。一种有效的方法是使用**基于角色的访问控制**（**RBAC**）来管理IaC，这可以显著减少整体的攻击面。
- en: By leveraging RBAC, you can grant just enough permission to your IaC to perform
    the necessary operations while preventing unauthorized access. This approach helps
    to minimize the risk of errors or malicious activity, improving the overall security
    of your infrastructure.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用RBAC，你可以为IaC授予足够的权限，以执行必要的操作，同时防止未授权访问。这种方法有助于最小化错误或恶意活动的风险，从而提高基础设施的整体安全性。
- en: Secrets management
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 秘密管理
- en: When working with IaC, it is common to require secrets to provision infrastructure.
    For example, if you are provisioning resources in AWS, you will need valid AWS
    credentials to connect to it. It is crucial to ensure that you use a reliable
    secret management tool, such as HashiCorp Vault or AWS Secrets Manager, to manage
    these sensitive credentials.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用IaC时，通常需要凭证来配置基础设施。例如，如果你在AWS中配置资源，你需要有效的AWS凭证来连接。确保使用可靠的秘密管理工具，如HashiCorp
    Vault或AWS Secrets Manager，来管理这些敏感凭证是至关重要的。
- en: In cases where you need to store or output secrets in the state file (although
    it is advisable to avoid doing so), it is essential to encrypt them to prevent
    unauthorized access. By encrypting secrets stored in the state file, you can mitigate
    the risk of exposure in the event of a security breach or unauthorized access.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要将秘密存储或输出到状态文件中时（尽管建议避免这样做），必须加密它们以防止未授权访问。通过加密存储在状态文件中的秘密，可以在发生安全漏洞或未授权访问时降低曝光风险。
- en: Security scanning
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全扫描
- en: Performing security scans after provisioning or making changes to infrastructure
    in a lower or ephemeral environment can help mitigate potential security issues
    in production. Leveraging tools such as CIS Benchmarks and Amazon Inspector can
    be effective in identifying common vulnerabilities or exposures and ensuring adherence
    to security best practices.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在低环境或短暂环境中，进行基础设施配置或更改后进行安全扫描，有助于减轻生产环境中潜在的安全问题。利用CIS基准或Amazon Inspector等工具，可以有效地识别常见的漏洞或暴露，并确保遵循安全最佳实践。
- en: By conducting security scans, you can catch potential security issues early
    on in the development process and prevent them from being carried over to production.
    This approach helps to minimize the risk of security breaches and protect sensitive
    data and infrastructure.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进行安全扫描，你可以在开发过程中及早发现潜在的安全问题，并防止它们被带入生产环境。这种方法有助于最小化安全漏洞的风险，并保护敏感数据和基础设施。
- en: Compliance
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合规性
- en: Compliance requirements are a critical consideration for many organizations,
    particularly in highly regulated industries such as healthcare or finance. These
    industries are subject to stricter requirements, including HIPAA, PCI, GDPR, and
    SOX, to name a few. Traditionally, compliance teams conducted manual checks and
    filled in paperwork to ensure adherence to these requirements.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 合规性要求是许多组织需要重点考虑的因素，尤其是在医疗或金融等高度监管的行业中。这些行业需要遵守更严格的要求，包括HIPAA、PCI、GDPR和SOX等。传统上，合规团队通过手动检查和填写文书来确保遵守这些要求。
- en: However, automation tools such as Chef InSpec or HashiCorp Sentinel can help
    streamline compliance requirements and improve efficiency. By automating compliance
    checks, you can run them more frequently and identify issues much faster. For
    instance, you can incorporate compliance tests into your IaC pipeline by provisioning
    an ephemeral environment and running tests every time you modify your IaC code.
    This approach enables you to catch potential compliance issues early on and rectify
    them before they impact production systems.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，像 Chef InSpec 或 HashiCorp Sentinel 这样的自动化工具可以帮助简化合规性要求并提高效率。通过自动化合规性检查，您可以更频繁地运行它们，并更快地发现问题。例如，您可以将合规性测试集成到您的
    IaC 流水线中，通过配置一个短暂的环境，并在每次修改 IaC 代码时运行测试。这种方法使您能够尽早发现潜在的合规性问题，并在它们影响生产系统之前进行修复。
- en: How to handle IaC projects
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何处理 IaC 项目
- en: In today’s fast-paced digital landscape, IaC has become a critical consideration
    for organizations of all sizes. With IaC, developers can create the machines or
    resources required to run their applications easily, saving time and effort in
    the process. As your organization scales, IaC can help your developers focus on
    solving more complex problems, rather than getting bogged down in manual resource
    configuration.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天快节奏的数字化环境中，IaC 已成为各类组织必须考虑的重要因素。通过 IaC，开发人员可以轻松创建运行应用所需的机器或资源，从而节省了时间和精力。在您的组织规模扩大时，IaC
    可以帮助您的开发人员专注于解决更复杂的问题，而不是陷入手动资源配置的困境。
- en: However, it can be challenging to ensure identical, error-free, secure, and
    compliant configurations across different environments. This is where IaC comes
    in. By defining your infrastructure as code, you can make changes or add new resources
    by updating a piece of code, and the IaC tool will handle the configuration for
    you.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，确保在不同环境中配置相同、无错误、安全且合规的配置可能是一个挑战。这就是 IaC 发挥作用的地方。通过将基础设施定义为代码，您可以通过更新一段代码来进行更改或添加新资源，而
    IaC 工具将为您处理配置。
- en: By adopting IaC, organizations can improve agility, speed, and consistency in
    resource provisioning and configuration. This enables developers to focus on delivering
    high-quality applications, while operations teams can manage infrastructure at
    scale with greater ease and efficiency.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用 IaC，组织可以提高资源配置和管理的敏捷性、速度和一致性。这使得开发人员可以专注于交付高质量的应用程序，而运营团队则可以更轻松、更高效地管理大规模的基础设施。
- en: Let’s have a look at the challenges we can face.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们可能面临的挑战。
- en: IaC principles
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IaC 原则
- en: At the heart of IaC is the concept of defining your infrastructure in code.
    By using a declarative syntax, you define the desired final state of your infrastructure,
    and the IaC tool takes care of the underlying dependency resolution and resource
    launching steps.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 的核心概念是将基础设施定义为代码。通过使用声明式语法，您定义基础设施的期望最终状态，IaC 工具会负责处理底层的依赖关系解析和资源启动步骤。
- en: To keep track of changes made to your infrastructure, you can store this code
    in a VCS. This not only provides you with an audit trail of who made changes but
    also enables you to revert to a previous version if needed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪对基础设施所做的更改，您可以将这些代码存储在版本控制系统（VCS）中。这不仅为您提供了谁进行更改的审计跟踪，而且还使您在需要时可以恢复到之前的版本。
- en: Automated quality, compliance, and security tests can also be run on your infrastructure,
    allowing you to verify its compliance without investing days or weeks of effort.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以对您的基础设施运行自动化的质量、合规性和安全性测试，允许您验证其合规性，而无需投入数天或数周的时间。
- en: By adopting IaC, your developers can avoid the tedious and error-prone task
    of manually defining steps or scripts to launch and configure resources. Tools
    such as Terraform and CloudFormation are widely used to achieve these tasks, enabling
    organizations to achieve greater agility, scalability, and consistency in infrastructure
    management.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用 IaC，您的开发人员可以避免手动定义启动和配置资源的步骤或脚本，这些任务既繁琐又容易出错。像 Terraform 和 CloudFormation
    这样的工具被广泛使用来实现这些任务，帮助组织在基础设施管理中实现更高的敏捷性、可扩展性和一致性。
- en: Version control systems for IaC
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IaC 的版本控制系统
- en: It is important to store your IaC in a VCS alongside your application code.
    This allows for easy collaboration among developers and a clear understanding
    of the entire code base.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的 IaC 存储在与应用代码一起的 VCS 中是非常重要的。这不仅便于开发人员之间的协作，还能清晰地了解整个代码库。
- en: VCSs also offer a simple way to track and audit changes made to the code base,
    including infrastructure changes. By using pipeline features within a VCS, such
    as those available in GitHub or GitLab, you can enforce policies and ensure that
    changes meet the necessary criteria before they are deployed to production.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: VCS（版本控制系统）还提供了一种简单的方式来跟踪和审计对代码库所做的更改，包括基础设施的更改。通过在VCS中使用管道功能，如GitHub或GitLab中提供的功能，你可以执行政策并确保更改在部署到生产环境之前满足必要的标准。
- en: Some common use cases of IaC
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些常见的IaC使用案例
- en: IaC is commonly used to launch infrastructure across various cloud providers,
    as well as for provisioning machines upon launch. Popular tools for provisioning
    with IaC include Chef, Ansible, and Puppet, while Terraform and CloudFormation
    are commonly used for infrastructure provisioning.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: IaC通常用于跨多个云提供商启动基础设施，并在启动时配置机器。常用的IaC配置工具包括Chef、Ansible和Puppet，而Terraform和CloudFormation则常用于基础设施配置。
- en: IaC can also be used to deploy applications, such as with Kubernetes, by leveraging
    tools such as Jenkins or Ansible. In upcoming chapters, we will delve further
    into using IaC with Kubernetes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: IaC也可以用于部署应用程序，例如通过Kubernetes，利用Jenkins或Ansible等工具。在接下来的章节中，我们将深入探讨如何与Kubernetes一起使用IaC。
- en: Challenges and best practices with IaC
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IaC的挑战与最佳实践
- en: IaC provides great benefits in terms of operability and maintainability, but
    it also brings challenges that need to be addressed to ensure the security and
    stability of your infrastructure.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: IaC在操作性和可维护性方面提供了很大的好处，但它也带来了需要解决的挑战，以确保基础设施的安全性和稳定性。
- en: Adoption within the team
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 团队内的采用
- en: Integrating IaC into your organization can present a learning curve and a change
    in processes. Your team may need to become familiar with the language used to
    write IaC code and develop pipelines to execute the code. If your team is accustomed
    to making changes from cloud consoles and is operation-centric, transitioning
    to IaC can be a significant shift for them.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将IaC集成到你的组织中可能会遇到学习曲线和流程变化。你的团队可能需要熟悉编写IaC代码所用的语言，并开发执行代码的管道。如果你的团队习惯于通过云控制台进行更改并以操作为中心，转向IaC将对他们来说是一次重大的转变。
- en: You can see huge, powerful resistance to learning new technologies or practices.
    Be ready to fight, and always be an evangelist of infrastructure automation, security,
    and compliance.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现，在学习新技术或实践时，团队可能会产生巨大的抵触情绪。要做好准备，随时为基础设施自动化、安全性和合规性做宣传。
- en: Configuration drift
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置漂移
- en: At the start of an IaC journey, developers may not always know what changes
    are required for infrastructure provisioning and may opt to make changes manually
    via the console. This can lead to configuration drift, where the deployed infrastructure
    does not match the code definition, potentially causing outages or issues with
    future updates. To prevent this, it is important to educate the team on the consequences
    of manual changes and discourage their use.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在IaC实施的初期，开发人员可能并不总是知道配置基础设施所需的更改，因此可能选择通过控制台手动进行更改。这可能导致配置漂移，即部署的基础设施与代码定义不匹配，可能会导致停机或未来更新时出现问题。为了防止这种情况，必须教育团队了解手动更改的后果，并鼓励他们避免使用手动更改。
- en: To further mitigate the risk of configuration drift, you can build automation
    to detect drifts and ensure that only authorized personnel have access to make
    changes in critical environments. This can help ensure that your infrastructure
    remains consistent and secure.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步减少配置漂移的风险，你可以建立自动化机制来检测漂移，并确保只有授权人员能在关键环境中进行变更。这有助于确保你的基础设施保持一致且安全。
- en: Security
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全性
- en: When using open source modules in your IaC pipeline, it is important to ensure
    that they are secure and free of vulnerabilities. Before using any open source
    project, it is recommended to verify that it is safe to use.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的IaC管道中使用开源模块时，确保它们是安全的且没有漏洞非常重要。在使用任何开源项目之前，建议验证它是否安全可用。
- en: To maintain a high level of security, it is essential to establish static code
    analysis pipelines and continuously scan open source modules. This way, any vulnerabilities
    can be detected and addressed promptly.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持高水平的安全性，建立静态代码分析管道并持续扫描开源模块是至关重要的。通过这种方式，任何漏洞都能被及时发现并解决。
- en: Human factors
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 人为因素
- en: To prevent misconfigurations from entering production, it is crucial to catch
    validation errors that may be introduced when a developer makes changes. With
    Terraform, you can easily implement a validation step using the Terraform plan
    functionality. It is essential to have a full understanding of the plan outputs
    before applying them to ensure that no unexpected changes are made to your infrastructure.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止错误配置进入生产环境，捕捉在开发者修改时可能引入的验证错误至关重要。使用 Terraform，你可以通过 Terraform plan 功能轻松实现验证步骤。在应用之前，充分理解计划输出非常关键，以确保不会对基础设施做出意外更改。
- en: Side effects of automation
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化的副作用
- en: In IaC, a lot of code will be reused as you automate infrastructure creation.
    However, any small misconfiguration can propagate across a large set of resources
    very easily. Therefore, it’s crucial to catch these errors during the pipeline
    verification stage.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IaC 中，随着你自动化基础设施创建，很多代码都会被重用。然而，任何小小的配置错误都可能在大范围的资源中迅速传播。因此，在流水线验证阶段捕捉这些错误是至关重要的。
- en: To prevent unexpected changes to existing resources, always use versioning when
    updating modules.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止对现有资源造成意外更改，更新模块时请始终使用版本控制。
- en: Keeping up to date with cloud providers
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟进云服务提供商的最新动态
- en: Changes to cloud providers’ APIs and policies can affect your existing infrastructure,
    which means that you need to update your tools and code. This can be especially
    difficult if you’re using open source tools, as updates may not be immediately
    available. If there is a delay in releasing changes, it can result in incorrect
    permissions or issues with provisioning access to machines if the RBAC API changes.
    Therefore, it’s essential to keep your tools and code up to date with the latest
    API changes and policies to ensure your infrastructure continues to function properly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商的 API 和政策变化可能会影响你现有的基础设施，这意味着你需要更新工具和代码。如果你使用的是开源工具，这可能特别困难，因为更新可能不会立即发布。如果更改发布延迟，可能会导致权限错误或在
    RBAC API 变化时出现机器访问配置问题。因此，确保将工具和代码与最新的 API 更改和政策保持同步，至关重要，以确保你的基础设施继续正常运行。
- en: Maintainability and traceability
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可维护性和可追溯性
- en: Having a well-defined procedure for promoting infrastructure changes to the
    production environment and assigning responsibilities is crucial to ensure that
    all changes are properly verified. This helps to avoid chaos and maintainability
    issues on the VCS side.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个明确的流程来推动基础设施更改到生产环境，并分配相应的责任，至关重要，这有助于确保所有更改都经过适当验证。这有助于避免混乱并保持 VCS 方面的可维护性问题。
- en: Furthermore, traceability is an added advantage of using VCSs as all changes
    are logged and can be easily tracked. For instance, Git provides the Git log command
    and commit history to view all changes made to the code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用 VCS 的一个附加优势是可追溯性，因为所有更改都会被记录并且可以轻松追踪。例如，Git 提供了 Git log 命令和提交历史记录，可以查看所有对代码的更改。
- en: RBAC
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RBAC
- en: Many IaC tools, including Terraform, lack an intrinsic RBAC feature, a crucial
    element that governs who has permission to access, manage, and execute specific
    resources and operations. In the absence of native RBAC, these tools are dependent
    on the underlying platform or VCS where the code resides. Consequently, it’s assumed
    that individuals executing the code possess the requisite permissions, transferring
    the onus of managing and enforcing RBAC to the VCS. This can involve setting up
    specific access controls, permissions, and restrictions within the VCS to ensure
    that sensitive and critical infrastructure configurations are only accessible
    and executable by authorized personnel, thereby maintaining security and compliance
    standards.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 许多基础设施即代码（IaC）工具，包括 Terraform，缺乏内建的 RBAC 功能，这是管理谁有权限访问、管理和执行特定资源及操作的一个重要元素。在缺乏原生
    RBAC 功能的情况下，这些工具依赖于代码所在的底层平台或版本控制系统（VCS）。因此，假定执行代码的人员具备必要的权限，RBAC 的管理和执行责任转移给了
    VCS。这可能需要在 VCS 中设置特定的访问控制、权限和限制，确保敏感和关键的基础设施配置只有经过授权的人员可以访问和执行，从而维持安全性和合规性标准。
- en: VCS and proper approval flows
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 版本控制系统（VCS）和适当的审批流程
- en: It is essential to implement version control in your IaC workflow to maintain
    control of your code, track changes, and facilitate auditing. It is also important
    to establish a process where changes cannot be merged into production without
    proper approval and validation. One option is to incorporate validations into
    the **Continuous Integration** (**CI**) process of GitHub or GitLab. By treating
    your IaC code like any other application code, you can ensure that your infrastructure
    is an integral part of your overall system.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的IaC工作流程中实现版本控制对于保持代码的控制、跟踪更改和方便审计至关重要。同样重要的是建立一个流程，确保在没有适当批准和验证的情况下，无法将更改合并到生产环境中。一个选择是将验证整合到GitHub或GitLab的**持续集成**（**CI**）过程中。通过像对待其他应用程序代码一样对待你的IaC代码，你可以确保你的基础设施是整个系统的一个重要组成部分。
- en: Handling secrets properly
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 正确处理密钥
- en: You need to manage two types of secrets in your IaC pipeline. The first type
    of secret is used to create resources in the cloud, and only the admin of the
    repository should have access to them. For this purpose, you can use a secret
    variable in GitHub or GitLab.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在IaC流水线中管理两种类型的密钥。第一种密钥用于在云中创建资源，只有仓库的管理员应当拥有访问权限。为此，你可以在GitHub或GitLab中使用密钥变量。
- en: The second type of secret is generated when the code is executed, such as the
    password for an IAM user in AWS. It’s crucial to ensure that these secrets are
    not getting logged anywhere and are securely transmitted to users.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种密钥是在代码执行时生成的，例如AWS中IAM用户的密码。确保这些密钥不会被记录在任何地方，并且能够安全地传输给用户是至关重要的。
- en: Immutable infrastructure
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不可变基础设施
- en: Consider applying the principle of immutable infrastructure if you need to make
    changes to your infrastructure. This approach involves creating a new machine
    with the required changes and replacing the old machine with the new one, instead
    of modifying the existing machine. By doing so, you can ensure that your changes
    are in line with the code, and there are no snowflake server states. The concept
    behind immutable infrastructure is to manage machines entirely through code, and
    no manual changes should be made.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要对基础设施进行更改，考虑应用不可变基础设施的原则。此方法包括创建一台具有所需更改的新机器，并用新机器替换旧机器，而不是修改现有的机器。通过这种方式，你可以确保你的更改与代码一致，并且不会出现雪花服务器状态。不可变基础设施背后的概念是完全通过代码管理机器，且不应进行任何手动更改。
- en: Validations and checks
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证和检查
- en: By implementing checks and validations in the CI pipeline, you can catch security
    issues and misconfigurations on the left side of the pipeline. This helps increase
    the frequency of the development cycle and maintain the security of each release.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在CI流水线中实施检查和验证，你可以在流水线的早期发现安全问题和配置错误。这有助于提高开发周期的频率，并维护每个发布的安全性。
- en: Infrastructure as code and Kubernetes
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基础设施即代码与Kubernetes
- en: Using the same principles as IaC, you can deploy your application on Kubernetes.
    Kubernetes objects are declarative files that can be defined and stored in a code
    repository. These files can then be applied to a Kubernetes cluster using a controller
    to deploy your application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 运用与基础设施即代码（IaC）相同的原则，你可以在Kubernetes上部署应用程序。Kubernetes对象是声明性文件，可以在代码仓库中定义并存储。然后，这些文件可以通过控制器应用到Kubernetes集群中，来部署你的应用程序。
- en: Conclusion
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Despite the many advantages of IaC, there are also several challenges that must
    be addressed to ensure the success of the implementation. These include the need
    for proper validations and checks, as well as a well-established process to avoid
    security lapses that can lead to increased costs and compromised environments.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管IaC有许多优点，但仍然存在一些挑战，必须解决这些问题才能确保实施的成功。这些挑战包括需要适当的验证和检查，以及建立良好的流程以避免安全漏洞，这些漏洞可能导致成本增加和环境被攻破。
- en: Fortunately, the emerging practice of GitOps combined with IaC enables faster
    and safer rollout of changes, resulting in quicker deployment cycles and large-scale
    auditing. IaC is not only the present but also the future of managing infrastructure,
    applications, and tooling, and its adoption is highly recommended for reducing
    operational costs.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，将GitOps与IaC相结合的新兴实践，使得更快速且更安全地推出更改成为可能，从而加快了部署周期并实现了大规模审计。IaC不仅是管理基础设施、应用程序和工具的现状，也是未来，强烈建议采用它来减少运营成本。
- en: By using IaC tools, organizations can achieve the same level of productivity
    and efficiency with fewer personnel, making it an attractive option for businesses
    looking to optimize their resources.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用IaC工具，组织可以以更少的人力实现相同的生产力和效率，这使其成为希望优化资源的企业的一个有吸引力的选择。
- en: How to make decisions about IaC projects
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做出关于IaC项目的决策
- en: IaC is a set of best practices for developers to document and configure their
    software infrastructure in a repeatable way.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: IaC是一组最佳实践，帮助开发人员以可重复的方式记录和配置他们的软件基础设施。
- en: IaC is not just about configuration management and deployment; it also provides
    the ability to manage infrastructure with code. The code can be used to automate
    activities such as application deployment, configuration management, and continuous
    delivery.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: IaC不仅仅是配置管理和部署；它还提供了通过代码管理基础设施的能力。这些代码可以用于自动化诸如应用程序部署、配置管理和持续交付等活动。
- en: 'Here are a few plus points to consider:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是几个值得考虑的优点：
- en: It is easy for developers to get started with IaC because the documentation
    is available in a single place
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员很容易开始使用IaC，因为文档都集中在一个地方
- en: It allows for more efficient collaboration between development teams by providing
    an easy way to share configurations with other members of the team
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过提供一种简便的方式来共享配置文件，使得开发团队之间的协作更加高效。
- en: It reduces errors in configuration management by making them easier to reproduce
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过使配置管理更容易重现，从而减少了错误。
- en: Let’s have a look at the decision points that will improve the maturity level
    of IaC projects.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下能提高IaC项目成熟度的决策点。
- en: The decision about where to store your code
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于代码存储位置的决策
- en: Storing IaC files using a VCS is essential for tracking changes and collaboration.
    While any cloud storage system can be used, Git has become the de facto standard
    for IaC versioning. Originally designed for storing code, Git can be used as the
    primary source for deploying infrastructure code. Several solutions, such as GitHub,
    GitLab, and Bitbucket, offer free SaaS for public repositories, while community
    editions can be self-hosted. Using Git should be a basic skill set for any developer
    or cloud or DevOps engineer looking to start an IaC project successfully.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用版本控制系统（VCS）存储IaC文件对于追踪更改和协作至关重要。虽然任何云存储系统都可以使用，但Git已经成为IaC版本控制的事实标准。Git最初是为存储代码设计的，但现在可以用作部署基础设施代码的主要来源。许多解决方案，如GitHub、GitLab和Bitbucket，提供公共仓库的免费SaaS服务，而社区版可以自托管。任何希望成功启动IaC项目的开发人员、云工程师或DevOps工程师都应该掌握Git这一基本技能。
- en: The decision about how to structure your code
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于如何构建代码的决策
- en: Once you have chosen where to store your IaC code, the next step is deciding
    on how to structure it. The structure you choose will depend on the complexity
    of your organization and IT environment. There are several options, including
    using a mono-repo for all your IaC code, having a separate repository for each
    tool or language used, or having a repository for each application server or infrastructure
    type.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了存储IaC代码的位置，下一步就是决定如何构建它。你选择的结构将取决于你组织和IT环境的复杂性。有几种选择，包括为所有IaC代码使用单一仓库，为每个使用的工具或语言设置单独的仓库，或者为每个应用服务器或基础设施类型设置仓库。
- en: In addition, you need to determine a branching strategy that works well for
    your team. It’s essential to discuss and agree on this with your team to ensure
    everyone is on the same page.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还需要确定一个适合团队的分支策略。与团队讨论并达成一致是非常重要的，以确保每个人都在同一页面上。
- en: It’s recommended to start with a simple structure and evolve it over time based
    on your needs. Alternatively, you can put more thought into the structure beforehand
    to prevent potential rework later. Whatever structure you choose, make sure it’s
    easily adoptable by all team members. Create clear documentation on the structure
    and decision-making process so that new team members can quickly understand and
    start contributing effectively.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐从简单的结构开始，根据需求逐步演变。或者，你也可以在事前仔细考虑结构，以避免以后可能需要的返工。无论选择哪种结构，都要确保它容易被所有团队成员采纳。创建清晰的文档，说明结构和决策过程，以便新团队成员能够快速理解并开始有效地贡献。
- en: The decision about how to run your code
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于如何运行代码的决策
- en: To gain better control over your infrastructure, it is recommended to use a
    CI/CD tool such as Jenkins, GitLab CI, or GitHub Actions to run your IaC. With
    these tools, you can trigger jobs manually, via webhooks or on a schedule, and
    have a record of every job that has run. Additionally, the jobs run from an agent
    can be pre-configured with the necessary tools, reducing the chances of errors
    due to different tool versions. It is important to choose the right tool that
    fits your needs and configure it properly to ensure its effectiveness.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地控制基础设施，建议使用像 Jenkins、GitLab CI 或 GitHub Actions 这样的 CI/CD 工具来运行你的 IaC。使用这些工具，你可以手动触发作业、通过
    Webhook 或按计划执行作业，并记录每个已运行的作业。此外，从代理运行的作业可以预先配置必要的工具，从而减少由于不同工具版本导致的错误。选择合适的工具并正确配置它，以确保其有效性是非常重要的。
- en: The decision about how to handle your secrets
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于如何处理机密的决策
- en: When provisioning automated infrastructure, it is crucial to store secrets such
    as database passwords and logins securely. It is not advisable to store them in
    your repositories, even if the repository is only accessible within your own network
    and protected with multi-factor authentication.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置自动化基础设施时，确保安全存储机密（如数据库密码和登录凭证）至关重要。即使仓库仅限于你自己的网络并且启用了多因素认证，也不建议将机密存储在仓库中。
- en: When using Git tools, all the credentials are copied to your machines and the
    machines of your team members when they clone the repository, making them vulnerable
    to security breaches.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git 工具时，所有凭证会在你克隆仓库时复制到你的机器和团队成员的机器上，这使得它们容易受到安全漏洞的影响。
- en: A better solution is to use a vault system that can encrypt your secrets and
    inject them as environment variables during the runtime of your pipeline. It is
    ideal to have security enabled on multiple layers, so even if one layer is breached,
    there is a second line of defense to protect your sensitive information.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的解决方案是使用一个保险库系统，该系统可以加密你的机密，并在管道运行时将其作为环境变量注入。这种方式可以实现多层安全，即使某一层被突破，仍然有第二道防线保护你的敏感信息。
- en: The decision about a common set of tools
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于选择一套通用工具的决策
- en: To kickstart IaC projects effectively, it’s important for the team to agree
    on a consistent set of tools. While there may be several ways to achieve the same
    objective, it’s beneficial to explore simpler, quicker, or more cost-effective
    methods. Using a common toolset makes it easier to share and reuse building blocks.
    Striking a balance between granting engineers the freedom to experiment with new
    tools and standardizing on a common set of tools is crucial. Certain tools work
    well in tandem, while others don’t, and paying for redundant licenses is generally
    not a good idea.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效启动 IaC 项目，团队达成一致使用一致的工具集非常重要。虽然有多种方法可以实现相同的目标，但探索更简单、更快捷或更具成本效益的方法是有益的。使用一套通用工具集使得共享和重用构建模块变得更加容易。重要的是，在给予工程师尝试新工具的自由和标准化使用一套通用工具之间找到平衡。一些工具可以很好地配合使用，而其他工具则不行，支付冗余许可费用通常不是一个好主意。
- en: The decision about the level of pipelines
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于管道级别的决策
- en: When using pipelines to run your IaC, there are various methods to achieve the
    same outcome. It’s essential to use a naming convention and provide clear descriptions
    to help others understand the purpose of a pipeline. You can consider dividing
    a pipeline into multiple stages, so you have the flexibility to rerun or skip
    a stage depending on the type of deployment. Then, decide whether you want to
    enforce mandatory reviews, require approval from a manager, or give developers
    the liberty to deploy themselves during go-live.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用管道运行基础设施即代码（IaC）时，有多种方法可以实现相同的结果。重要的是使用命名规范并提供清晰的描述，以帮助他人理解管道的目的。你可以考虑将管道分为多个阶段，这样就可以根据部署类型灵活地重新运行或跳过某个阶段。接下来，决定是否强制进行审查、要求经理批准，或者在上线时允许开发人员自行部署。
- en: The decision about the life cycle of your infrastructure
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于基础设施生命周期的决策
- en: The level of testing and validation required for a proof-of-concept script versus
    code developed for large-scale deployment is significantly different. Robust code
    requires more comprehensive testing and validation efforts, which requires additional
    time and resources.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 针对概念验证脚本和为大规模部署开发的代码，所需的测试和验证水平差异显著。稳健的代码需要更多的测试和验证工作，这需要额外的时间和资源。
- en: In an ever-evolving world, infrastructure must also be adaptable to changes
    such as security updates, service improvements, and new service types. While using
    SaaS/PaaS services can reduce the maintenance workload, it comes at a cost. Furthermore,
    even these services will evolve over time, necessitating engineering efforts to
    keep up. There are various strategies and practices available to simplify this
    process, each with its own benefits and drawbacks. It’s important to determine
    the approach that works best for your specific situation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个不断变化的世界中，基础设施也必须适应如安全更新、服务改进和新服务类型等变化。虽然使用SaaS/PaaS服务可以减少维护工作量，但这也伴随着一定的成本。此外，即使是这些服务，也会随着时间的发展而演变，需要工程努力来跟进。简化这一过程有多种策略和实践可供选择，每种方法都有其优点和缺点。确定最适合自己特定情况的方法非常重要。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This first chapter on understanding patterns of IaC and Terraform covered the
    key principles of IaC, such as idempotency and immutability. The chapter also
    discussed various patterns and practices of IaC, including source control, modules,
    versions, documentation, and testing. The chapter also covered security and compliance
    concerns, such as IAM, RBAC, secret management, security scanning, and compliance.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本章关于理解IaC和Terraform模式的内容涵盖了IaC的关键原则，如幂等性和不可变性。本章还讨论了IaC的各种模式和实践，包括源代码管理、模块、版本、文档和测试。本章还涉及了安全和合规性问题，如身份与访问管理（IAM）、角色基础访问控制（RBAC）、秘密管理、安全扫描和合规性。
- en: It also provided guidance on how to handle IaC projects and the decisions involved
    in starting IaC projects. Additionally, the chapter highlighted the challenges
    and best practices of IaC, including the importance of standardizing toolsets,
    naming conventions, and clear descriptions, and the need for a proper process
    for approvals and validation in the CI pipeline.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了关于如何处理基础设施即代码（IaC）项目及启动IaC项目中涉及的决策的指导。此外，本章强调了IaC的挑战和最佳实践，包括标准化工具集、命名约定和清晰描述的重要性，以及在CI流水线中进行审批和验证所需的适当流程。
- en: Overall, this chapter provided a comprehensive overview of the principles and
    best practices of IaC and highlighted the importance of adopting these practices
    to improve the agility, efficiency, and security of infrastructure management.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，本章提供了关于IaC原则和最佳实践的全面概述，并强调了采纳这些实践以提升基础设施管理的敏捷性、效率和安全性的重要性。
