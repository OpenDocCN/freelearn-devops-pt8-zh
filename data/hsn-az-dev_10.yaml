- en: Reactive Architecture with Event Grid
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Event Grid 的响应式架构
- en: Azure Event Grid is another cloud component that represents serverless services
    in Azure. It can be considered an events gateway, able to both make our solution
    work faster and to reverse control, so our services don't have to wait for others,
    burning available resources just to be idle. It's also a great routing tool, able
    to quickly distribute load and multiply it, allowing jobs to be finished faster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Event Grid 是 Azure 中另一个代表无服务器服务的云组件。它可以被视为事件网关，既能加速我们的解决方案，又能反转控制，使得我们的服务不必等待其他服务，从而避免浪费可用资源。它也是一个很棒的路由工具，能够快速分配负载并进行扩展，帮助任务更快完成。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Azure Event Grid and reactive architecture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Event Grid 与响应式架构
- en: Connecting to other services through Azure Event Grid
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Azure Event Grid 连接到其他服务
- en: Security features of Azure Event Grid
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Event Grid 的安全功能
- en: Publishing custom events to Azure Event Grid
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Azure Event Grid 发布自定义事件
- en: Integrating Azure Functions with Azure Event Grid
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Azure Functions 与 Azure Event Grid 集成
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To perform exercises from this chapter you will need:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章中的练习，你需要：
- en: An Azure subscription
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Azure 订阅
- en: An IDE compatible with Visual Studio 2017
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个兼容 Visual Studio 2017 的 IDE
- en: Azure Event Grid and reactive architecture
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Event Grid 与响应式架构
- en: When working with multiple services in the cloud, you often need to have a centralized
    service responsible for routing events to a different endpoint. This makes the
    exchange of data a piece of cake—you do not have to maintain different URLs of
    APIs, as you can leverage a common event schema and custom routing configuration
    based on, for example, event type. In Azure, such a service is called Azure Event
    Grid—a serverless event gateway, which is one of the newer cloud components available.
    With a pay-as-you-go pricing model, you can quickly build a reactive architecture
    that inverts communication between your services and makes them passive. In this
    chapter, you will learn how to work with Event Gridand integrate it with other
    Azure components.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中使用多个服务时，通常需要一个集中式服务，负责将事件路由到不同的端点。这使得数据交换变得非常简单——你不需要维护不同的 API URL，因为可以利用通用的事件架构和基于事件类型等的自定义路由配置。在
    Azure 中，这样的服务被称为 Azure Event Grid——一个无服务器事件网关，是可用的较新云组件之一。采用按需付费的定价模式，你可以快速构建一个响应式架构，反转服务之间的通信，使它们变得被动。在本章中，你将学习如何使用
    Event Grid，并将其与其他 Azure 组件集成。
- en: Reactive architecture
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式架构
- en: 'To get started, let''s consider the architecture shown in the following diagram:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，让我们考虑以下架构图所示的内容：
- en: '![](img/198227b6-5af2-44f8-babc-b9fc8118346e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/198227b6-5af2-44f8-babc-b9fc8118346e.png)'
- en: In this diagram, you can see an example flow of uploading, for instance, an
    image for an avatar from a user. A file is transferred through an **Azure App
    Service** and put into **Azure Blob Storage**. Then, it is processed by **Azure
    Functions**. While such a setup is perfectly fine, consider the following disadvantage—to
    be able to process the image, **Azure Functions** has to be notified about the
    fact that a new file was uploaded.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在此图中，你可以看到上传示例流，比如从用户上传头像图像。文件通过**Azure App Service** 传输，并存入**Azure Blob Storage**。然后，它被**Azure
    Functions** 处理。虽然这样的设置完全可以，但考虑以下缺点——为了处理图像，**Azure Functions** 必须收到有关新文件已上传的通知。
- en: 'Since** Azure Blob Storage** is unable to do so (at least with the functionality
    available publicly), the only way to achieve that is to pool a storage and somehow
    maintain processed files. While conceptually, this is not rocket science, you
    have to bear in mind that, in the cloud, when you use a resource, you pay for
    the time taken. So basically, in the preceding scenario, you would be paying even
    if no file was uploaded to the storage, since a trigger in **Azure Functions**
    (here, a Blob trigger) will have to maintain a state of files available and check
    at intervals whether something new appeared, so you will often pay for nothing.
    Now, consider the following change:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**Azure Blob Storage** 无法做到这一点（至少在公开功能中无法实现），实现这一目标的唯一方式是轮询存储并以某种方式保持已处理的文件。尽管从概念上讲，这不是高科技，但你必须记住，在云中，使用资源时需要为所消耗的时间付费。因此，在前述场景中，即使没有文件上传到存储，你也需要支付费用，因为**Azure
    Functions** 中的触发器（这里是 Blob 触发器）必须保持文件的状态，并定期检查是否有新内容出现，因此你往往会为无事发生的情况付费。现在，考虑以下更改：
- en: '![](img/1d08e54c-a233-44d3-9b47-f7c584026339.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d08e54c-a233-44d3-9b47-f7c584026339.png)'
- en: As you can see, I put an **Azure Event Grid**between **Azure Blob Storage**and **Azure
    Functions**. What has it changed? Well, functions processing a Blob do not have
    to pool storage to get info about uploaded files. This is possible thanks to version
    2 of Azure Storage (you can find a link to a description in *Further reading*section)—it
    can publish events to **Azure Event Grid** so they can then be forwarded to all
    subscribers of that particular event type. Thanks to this, **Azure Functions**can
    remain passive—they will be called by **Azure Event Grid**when needed, so if nothing
    is uploaded, you will pay nothing. This is, of course, an element of serverlessarchitecture—being
    able to pay for usage makes such a setup possible.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我在**Azure Blob 存储**和**Azure Functions**之间放置了一个**Azure Event Grid**。它改变了什么呢？好吧，处理
    Blob 的函数不再需要轮询存储以获取上传文件的信息。这是由于 Azure Storage 的版本 2（你可以在*进一步阅读*部分找到描述的链接）支持的功能——它可以将事件发布到**Azure
    Event Grid**，然后这些事件可以被转发到所有该事件类型的订阅者。感谢这一点，**Azure Functions**可以保持被动——它们会在需要时由**Azure
    Event Grid**调用，因此如果没有上传文件，你就不需要支付费用。当然，这也是无服务器架构的一个元素——按需付费使得这种设置成为可能。
- en: Remember that you will not be charged if you only use the Consumption plan in Azure
    Functions. If you have to use an App Service Planfor your functions, you will
    not be able to save money with the preceding architecture—on the other hand, you
    will save some compute power, which could be used for other workloads, so reactive
    architecture concepts will still be valid.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你只使用 Azure Functions 的消费计划，你将不会被收费。如果你必须为函数使用应用服务计划，那么你将无法通过前面的架构节省资金——另一方面，你将节省一些计算资源，这些资源可以用于其他工作负载，因此反应式架构的概念仍然有效。
- en: This is what we call **reactive architecture**—a model where your components
    can remain idle and wait for upcoming requests.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们所说的**反应式架构**——一种模型，在这种模型中，组件可以保持空闲状态，等待即将到来的请求。
- en: Topics and event subscriptions
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题和事件订阅
- en: 'There are five main topics when it comes to working with Azure Event Grid:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用**Azure Event Grid**时，有五个主要的主题：
- en: Events
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件
- en: Event handlers
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理程序
- en: Event sources
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件源
- en: Topics
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主题
- en: Event subscriptions
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件订阅
- en: In this section, we will go through each of them to build a better understanding
    of this service.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将逐一了解这些服务，以更好地理解该服务。
- en: Event sources
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件源
- en: 'Currently, Azure Event Gridsupports the following event sources:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，**Azure Event Grid**支持以下事件源：
- en: Azure Blob Storage
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Blob 存储
- en: Azure Media Services
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 媒体服务
- en: Azure Subscriptions
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 订阅
- en: Resource Groups
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源组
- en: Azure Event Hubs
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 事件中心
- en: Azure IoT Hub
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure IoT 中心
- en: Azure Service Bus
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 服务总线
- en: Custom topics
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义主题
- en: Container Registry
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器注册表
- en: Storage **General-purpose v2** (**GPv2**)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储**通用版本 v2**（**GPv2**）
- en: 'As you can see, there are plenty of different services integrated and available
    when working with Event Grid. While we know which event sources we can use, we
    still have not defined what an event sourceactually is. Take a look at the following
    diagram:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在使用 Event Grid 时，集成了许多不同的服务并且可以使用。虽然我们知道可以使用哪些事件源，但我们仍然没有定义什么是**事件源**。请看下面的图示：
- en: '![](img/f0ef7d40-e691-4fc4-afc1-45e10a8a09a9.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0ef7d40-e691-4fc4-afc1-45e10a8a09a9.png)'
- en: In this scenario, a file uploaded to **Azure Blob Storage**triggers an event,
    which is then fetched by **Azure Event Grid**and passed further to the consumer. The
    event sourceis the origin of an event that was then handled by Event Grid. When
    working with this service, all event sources have a way to publish an event and
    communicate with **Azure Event Grid**. There is also one extra event source possible—it
    is Custom topics. It is possible to publish your own custom events directly to
    an Event Gridendpoint—we will cover that later in this chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种场景下，上传到**Azure Blob 存储**的文件触发一个事件，然后该事件被**Azure Event Grid**获取并进一步传递给消费者。**事件源**是事件的来源，之后由
    Event Grid 处理。当使用此服务时，所有事件源都有发布事件并与**Azure Event Grid**进行通信的方法。还有一个额外的事件源——自定义主题。你可以将自己的自定义事件直接发布到
    Event Grid 端点——我们将在本章后面介绍这个。
- en: Event handlers
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理程序
- en: 'In the previous example, we covered event sources. Let''s take a similar scenario:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们介绍了事件源。我们来看看一个类似的场景：
- en: '![](img/a0826e92-15b9-4cce-be5b-2ed15a92845a.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0826e92-15b9-4cce-be5b-2ed15a92845a.png)'
- en: 'Once more, we have **Azure Blob Storage**as a publisher, but this time, events
    are forwarded to both **Azure Functions**and **Azure Event Hub**. In that architecture,
    services presented on the right are event handlers. Here is a list of currently
    supported services:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们有 **Azure Blob Storage** 作为发布者，但这一次，事件被转发到 **Azure Functions** 和 **Azure
    Event Hub**。在该架构中，右侧展示的服务是事件处理器。以下是当前支持的服务列表：
- en: Azure Functions
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Functions
- en: Azure Logic Apps
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Logic Apps
- en: Azure Automation
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 自动化
- en: WebHooks
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebHooks
- en: Azure Queue Storage
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Queue Storage
- en: Hybrid Connections
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合连接
- en: Azure Event Hubs
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Event Hubs
- en: Microsoft Flow
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Flow
- en: So what actually is an event handler? You can think about it as a processor
    of an event—based on the configuration, Azure Event Gridwill forward events to
    handlers, where they will be deserialized and analyzed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，事件处理器究竟是什么？你可以把它看作是一个事件处理器——根据配置，Azure Event Grid 会将事件转发到处理器，在那里它们将被反序列化和分析。
- en: In general, Azure Event Griduses a common event schema when delivering events
    to handlers. What is more, it can deliver more than just one event at the time—you
    have to be prepared for a possible batch of events.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Azure Event Grid 在将事件传递给处理器时使用通用的事件模式。更重要的是，它可以一次交付多个事件——你需要准备好可能收到一批事件。
- en: Topics and subscriptions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题和订阅
- en: 'A topic is a general messaging concept that allows for one-to-many communication.
    It works with subscriptions in the following way—you publish a message to a topic
    in a messaging service, and then subscribe to it with your consumers. In Azure
    Event Grid,you are responsible for creating a topic—that means that you have to
    publish a custom application that handles communication between publishers and
    the Event Gridendpoint. You can have a single application, or many of them—this
    depends on your design and expected throughput. Additionally, you have to configure
    subscriptions—in the next section, you will see how to do that, and how to set
    up proper filtering. The general structure could look like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 主题是一个通用的消息传递概念，允许一对多的通信。它与订阅的工作方式如下——你将消息发布到消息服务中的一个主题，然后让消费者订阅它。在 Azure Event
    Grid 中，你负责创建一个主题——这意味着你必须发布一个自定义应用程序来处理发布者和 Event Grid 端点之间的通信。你可以有一个应用程序，或者多个应用程序——这取决于你的设计和预期吞吐量。此外，你还需要配置订阅——在下一节中，你将看到如何做这一步，并设置适当的过滤条件。一般结构可能如下所示：
- en: '![](img/10a33702-ca0a-4e89-8bc3-db2bb540c0b1.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10a33702-ca0a-4e89-8bc3-db2bb540c0b1.png)'
- en: The left side of the preceding diagram represents publishers and a topic (the
    line between a publisher and **Azure Event Grid**) and subscriptions with handlers.
    Each line is a different topic and subscription. The whole configuration and routing
    resides within Event Grid and can be managed there.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上图的左侧代表发布者和主题（发布者与 **Azure Event Grid** 之间的连线）以及带有处理器的订阅。每条线代表一个不同的主题和订阅。整个配置和路由都位于
    Event Grid 内，可以在这里进行管理。
- en: Azure Event Gridtakes care of retrying undelivered messages. This can be configured
    with a custom policy that defines the rules for retrying. Additionally, when a
    custom topic is used, events have to be published in batches to make it work.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Event Grid 会处理未送达消息的重试。可以通过自定义策略配置重试规则。此外，当使用自定义主题时，事件必须以批量方式发布，才能正常工作。
- en: 'To sum up, we can define both a topic and a subscription as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们可以像下面这样定义一个主题和一个订阅：
- en: '**Topic**: A channel between a service and Azure Event Grid, which allows the
    former to push an event to the Azure service'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题**：服务与 Azure Event Grid 之间的一个通道，允许前者将事件推送到 Azure 服务。'
- en: '**Subscription**: A channel between Azure Event Grid and a service, which is
    used to retrieve events in the former'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅**：Azure Event Grid 和服务之间的一个通道，用于从前者检索事件。'
- en: Connecting services through Azure Event Grid
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Azure Event Grid 连接服务
- en: Now that you know something about what Azure Event Gridis and how it works,
    we will try to test it and create a working solution. We will start by creating
    an instance in Azure Portal and configuring it to accept and route events. You
    will see also what the schema of an event is and how to leverage it so you can
    send custom events that will be handled by Event Grid.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了一些关于 Azure Event Grid 的知识以及它的工作原理，我们将尝试测试它并创建一个有效的解决方案。我们将从在 Azure Portal
    中创建实例并配置它以接收和路由事件开始。你还将看到事件的模式是什么，以及如何利用它发送自定义事件，这些事件将由 Event Grid 处理。
- en: Creating Azure Event Grid in Azure Portal
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure Portal 中创建 Azure Event Grid
- en: 'To get started with Azure Event Grid, do the followingin Azure Portal:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Azure Event Grid，请在 Azure Portal 中执行以下操作：
- en: Click on + Create a resourceand search for `Event Grid`. From the list, select Event
    Grid Topicand click Create.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“+ 创建资源”，然后搜索 `Event Grid`。从列表中选择 Event Grid 主题并点击“创建”。
- en: 'You will see a really simple form, where you have to enter the name of an instance
    of a service:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到一个非常简单的表单，在其中你需要输入服务实例的名称：
- en: '![](img/d4c8bc6b-8043-462f-9e2b-8b4fe92d5775.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4c8bc6b-8043-462f-9e2b-8b4fe92d5775.png)'
- en: 'When you click Create and wait a moment, an instance of a service will be created.
    Once it is finished, you can go to your resource to see an empty instance:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击“创建”并稍等片刻后，服务实例将被创建。完成后，你可以进入你的资源查看空实例：
- en: '![](img/2b1bb9eb-5975-40d3-97d5-2354005ed02e.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b1bb9eb-5975-40d3-97d5-2354005ed02e.png)'
- en: 'As you can see, there is no subscription created yet. What is more, there is
    also no topic, which is what would send events to our instance. Before we proceed,
    let''s take a look what we have on the Overviewblade. Besides the option to create
    a subscription, there is also one other important thing—Topic Endpoint. You will
    use this to publish events from your custom topics. There is also one important
    blade—Access keys. When you click on it, you will see two keys that can be used
    to authorize access to Azure Event Grid:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，尚未创建订阅。而且，更重要的是，也没有主题，主题才是发送事件到我们实例的地方。在我们继续之前，先来看一下“概述”面板。除了创建订阅的选项外，还有另一项重要内容——主题端点。你将使用它来发布来自自定义主题的事件。还有一个重要的面板——访问密钥。点击它，你将看到两个密钥，可以用来授权访问
    Azure Event Grid：
- en: '![](img/4bc31311-144d-4a98-b89c-6e592ae736c7.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4bc31311-144d-4a98-b89c-6e592ae736c7.png)'
- en: 'Now let''s try to create a topic with a subscription. To do so, we will use
    the following code snippet:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试创建一个带有订阅的主题。为此，我们将使用以下代码片段：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This PowerShell code should create a Resource Group topic that will push events
    to an endpoint defined in the `$myEndpoint`variable. However, if you execute the
    code, the following error will occur:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这段 PowerShell 代码应创建一个资源组主题，将事件推送到 `$myEndpoint` 变量中定义的端点。然而，如果你执行这段代码，以下错误将发生：
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What has happened? Well, it turns out that we cannot create a subscription,
    because our endpoint is not validated. How can we validate our endpoint so it
    will be possible to create a subscription? I will explain shortly.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？嗯，事实证明我们无法创建订阅，因为我们的端点没有经过验证。我们该如何验证端点，以便能够创建订阅呢？我会很快解释。
- en: Azure Event Grid security
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Event Grid 安全性
- en: 'Besides access tokens, Azure Event Gridalso checks whether or not an endpoint
    is valid and secure. This validation will not happen for the following handler
    types:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了访问令牌，Azure Event Grid 还会检查端点是否有效且安全。以下处理程序类型将不会进行验证：
- en: Azure Logic Apps
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 逻辑应用
- en: Azure Automation
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 自动化
- en: Azure Functions when `EventGridTrigger` is used
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用 `EventGridTrigger` 时的 Azure Functions
- en: 'The rest of the endpoints (and especially those triggered by an HTTP request)
    have to be validated to be used. Here is how that kind of validation is processed:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的端点（尤其是那些通过 HTTP 请求触发的端点）必须进行验证才能使用。下面是这种类型的验证是如何处理的：
- en: 'Firstly, `SubscriptionValidationEvent`is sent to an endpoint containing multiple
    fields, such as topic, validation code, and others. Additionally, a special `aeg-event-type:
    SubscriptionValidation` header is sent.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '首先，`SubscriptionValidationEvent` 会发送到一个包含多个字段的端点，比如主题、验证代码等。此外，还会发送一个特殊的 `aeg-event-type:
    SubscriptionValidation` 头部。'
- en: Secondly, Event Gridexpects a success response containing a validation code
    that was sent in the request.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，Event Grid 期望收到一个成功响应，响应中包含请求中发送的验证代码。
- en: 'Here is an example of a validation event:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个验证事件的示例：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this scenario, to validate an endpoint, you would have to return the following
    response:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，要验证一个端点，你需要返回以下响应：
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After that, you should be able to create a subscription.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你应该能够创建一个订阅。
- en: As you may have noticed, the validation event also contains the `validationUrl`property.
    It allows you to manually validate a subscription, instead of redeploying code
    with a proper application logic.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，验证事件中还包含了 `validationUrl` 属性。它允许你手动验证订阅，而不是重新部署带有正确应用逻辑的代码。
- en: Creating a subscription
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建订阅
- en: 'Now that you are familiar with endpoint validation topic, we can try to create
    a subscription once more:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了端点验证主题，我们可以再次尝试创建订阅：
- en: 'To do so, I created a function that is triggered by an HTTP request. I wrote
    it quickly in CSX, so I did not have to compile and deploy it manually:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我创建了一个由 HTTP 请求触发的函数。我在 CSX 中快速写了它，这样就不需要手动编译和部署：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Thanks to the preceding code, I can see that a validation event was sent to
    an endpoint. Now, depending on the version of toolset you have, you will have
    the `validationUrl` value in the payload.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了前面的代码，我可以看到一个验证事件被发送到一个端点。现在，根据你拥有的工具集版本，你将在负载中看到 `validationUrl` 的值。
- en: 'To leverage this feature, you will have to install the Event Grid extension
    for Azure CLI 2.0—a link for download can be found in the *Further reading*section.
    To progress without this feature, we will have to change the code of our function
    a little bit:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要利用此功能，你必须为 Azure CLI 2.0 安装 Event Grid 扩展——下载链接可以在 *进一步阅读* 部分找到。要在没有此功能的情况下继续进行，我们将需要稍微修改一下我们的函数代码：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that I am deserializing the validation event as `ValidationEvent[]`, so
    it is actually an array of events. It is important to bear this in mind to avoid
    possible issues.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我正在将验证事件反序列化为 `ValidationEvent[]`，所以它实际上是一个事件数组。记住这一点很重要，以避免可能出现的问题。
- en: If events were sent to an endpoint that wasn't validated, the batch will be
    divided into two parts, one with a single validation event, and the second one
    with the actual events.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事件被发送到一个未经验证的端点，批处理将被分为两部分，一部分包含一个单独的验证事件，另一部分包含实际的事件。
- en: 'Now, if you execute PowerShell code that failed earlier, you should be able
    to create a subscription. To check whether it all works correctly, you can run
    the following command:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你执行之前失败的 PowerShell 代码，你应该能够创建一个订阅。为了检查是否一切正常，你可以运行以下命令：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, you can see the result in my case:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，你可以看到我这边的结果：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that subscriptions created with the API are not visible in the Portal.
    This should be changed soon, but as long as this issue persists, stick mainly
    to the **command-line interface** (**CLI**) for maintaining Azure Event Grid.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过 API 创建的订阅在门户中是不可见的。这应该很快就会改变，但在这个问题没有解决之前，主要还是依赖 **命令行界面** (**CLI**)
    来维护 Azure Event Grid。
- en: 'Now if, for example, you create a resource in the resource group that publishes
    events to Event Grid, an event similar to the following will occur:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，假设你在资源组中创建了一个将事件发布到 Event Grid 的资源，类似以下的事件将会发生：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It is also possible to create a connection like this without the CLI—if you
    go to your resource group, you will see the Eventsblade:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也可以在没有 CLI 的情况下创建这样的连接——如果你进入你的资源组，你将看到 Eventsblade：
- en: '![](img/472bce37-777f-447a-bf83-9e5ef01f0d37.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/472bce37-777f-447a-bf83-9e5ef01f0d37.png)'
- en: 'When you click on the + Event subscriptionbutton, you will see a form that
    makes the whole process much easier. You can use this form if you prefer configuring
    services in the Portal, instead of the CLI:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击 + 事件订阅按钮时，你将看到一个表单，使整个过程变得更加简便。如果你更喜欢在门户中配置服务，而不是使用 CLI，可以使用这个表单：
- en: '![](img/8d2f27cd-aeea-4492-98db-df2e14edafd3.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d2f27cd-aeea-4492-98db-df2e14edafd3.png)'
- en: Publishing custom events to Azure Event Grid
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将自定义事件发布到 Azure Event Grid
- en: So far, we have talked about integrating Azure Event Gridwith already built-in
    publishers and topics, using Resource Group as an example. I mentioned at the
    beginning of this chapter that this service is capable of handling custom topics,
    making it a really flexible solution that can act as an event gateway. In this
    section, we will cover this topic and try to use Event Gridas our router for handling
    and maintaining the routing of our events.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了如何通过已经内置的发布者和主题来集成 Azure Event Grid，使用资源组作为示例。我在本章开始时提到过，这个服务能够处理自定义主题，使其成为一个非常灵活的解决方案，可以作为事件网关。在本节中，我们将讨论这个话题，并尝试使用
    Event Grid 作为我们的路由器来处理和维护事件的路由。
- en: Event gateway concept
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件网关概念
- en: 'Let''s look at the following diagram:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下的图示：
- en: '![](img/98da7232-06aa-48bf-aaa6-8dd549b96873.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98da7232-06aa-48bf-aaa6-8dd549b96873.png)'
- en: 'Here, you have a single events producer and four different handlers. Now, if
    you imagine that **Publisher **publishes only custom events, you can see that Event
    Gridis able to distribute them among `N` different handlers (which do not have
    to be the same type—it can be a mix of any supported handlers available). Of course,
    this concept can also be used with publishers such as Resource Group, Azure Blob
    Storage, or Azure Event Hub—personally, I think that it is slightly more useful
    for custom scenarios. Let''s take an example—you are publishing an `OrderCreated`event.
    With Azure Event Grid,you could now distribute it to different handlers:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你有一个单一的事件生产者和四个不同的处理器。现在，如果你想象一下**Publisher**仅发布自定义事件，你会看到Event Grid能够将它们分发到`N`个不同的处理器（这些处理器不必是相同类型——它们可以是任何支持的处理器的混合）。当然，这个概念也可以用于像资源组、Azure
    Blob Storage或Azure Event Hub这样的发布者——就个人而言，我认为它对自定义场景更有用。让我们举个例子——你正在发布一个`OrderCreated`事件。通过Azure
    Event Grid，你现在可以将其分发到不同的处理器：
- en: '`OrderConfirmation`: For example, for sending a confirmation via a mail message'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OrderConfirmation`：例如，用于通过邮件发送确认。'
- en: '`OrderProcessor`: For handling the actual logic of processing an order'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OrderProcessor`：用于处理订单的实际逻辑。'
- en: '`OrderNotification`: For notifying someone that there is an order that has
    to be validated'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OrderNotification`：用于通知某人有一个需要验证的订单。'
- en: Of course, the preceding steps rely only on your logic—it should, however, give
    you a hint of what can be done with routing and distributing events using Azure
    Event Grid.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，前面的步骤仅依赖于你的逻辑——不过，它应该能给你一个关于如何使用Azure Event Grid进行事件路由和分发的提示。
- en: Handling a custom event
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理自定义事件。
- en: 'Before we send a custom event, we have to take a look at the Event Gridevent
    schema:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们发送自定义事件之前，我们需要查看Event Grid事件架构：
- en: '[PRE9]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, it is a simple JSON array, containing many different events.
    Let''s describe each field here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它是一个简单的JSON数组，包含许多不同的事件。让我们在这里描述每个字段：
- en: '`topic`: This defines a full path to an event source (for example, Azure Blob
    Storage).'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topic`：这定义了一个事件源的完整路径（例如，Azure Blob Storage）。'
- en: '`subject`:This defines a path to an event subject (so, in the case of publishing
    events from a resource group, this could be a full path to an Azure resource,
    or, in the case of Azure Blob Storage, this would be a Blob path).'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subject`：这定义了事件主题的路径（因此，在发布来自资源组的事件的情况下，这可能是指向Azure资源的完整路径，或者在Azure Blob Storage的情况下，这将是一个Blob路径）。'
- en: '`id`: This is the unique identifier of an event.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：这是事件的唯一标识符。'
- en: '`eventType`: A type of a published event (such as `Microsoft.Resources.ResourceWriteSuccess`).'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eventType`：已发布事件的类型（例如`Microsoft.Resources.ResourceWriteSuccess`）。'
- en: '`eventTime`: This defines when an event was published using the publisher''s
    UTC time.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eventTime`：这定义了事件发布的时间，使用发布者的UTC时间。'
- en: '`data`: The payload of an event.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：事件的有效载荷。'
- en: '`dataVersion`: An event schema version defined by the publisher.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataVersion`：由发布者定义的事件架构版本。'
- en: '`metadataVersion`: A revision number of event metadata schema version, provided
    by Event Grid.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadataVersion`：由Event Grid提供的事件元数据架构版本的修订号。'
- en: 'Now, if you want to publish an event, you will have to do the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你想发布一个事件，你需要做以下操作：
- en: Always use an array of events, even if you are publishing a single one
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使你发布的是单个事件，也始终使用事件数组。
- en: Either use an empty topic or use the following syntax, which reflects the fact,
    that each topic is also an Azure resource `/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.EventGrid/topics/<eventgrid-name>`
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要么使用一个空的主题，要么使用以下语法，它反映了每个主题也是一个Azure资源`/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.EventGrid/topics/<eventgrid-name>`
- en: Use `aeg-sas-key`or `aeg-sas-token`to authorize a request by providing a key
    from the Access keysblade
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`aeg-sas-key`或`aeg-sas-token`通过提供访问密钥中的密钥来授权请求。
- en: 'Here, you can find an example request:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，你可以找到一个请求示例：
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If everything is correct, you should see an `HTTP 200` response. Now, you may
    wonder how you can receive such a request. If you go to your instance of Azure
    Event Gridand click on the + Event Subscriptionbutton, you will see a form where
    you can create a new subscription:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该会看到一个`HTTP 200`响应。现在，你可能会想知道如何接收这样的请求。如果你进入你的Azure Event Grid实例并点击+事件订阅按钮，你会看到一个可以创建新订阅的表单：
- en: '![](img/22049e7c-6258-4cdc-9c69-54051b9eca68.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22049e7c-6258-4cdc-9c69-54051b9eca68.png)'
- en: 'You saw this form before, when we were discussing creating a subscription directly
    from a resource group. There are, however, some important things to mention:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前见过这个表单，当我们讨论如何直接从资源组创建订阅时。 然而，有一些重要的事项需要提到：
- en: Subscribe to all event types**:** You have an option to either route all events
    types to an endpoint, or just to the ones defined by you (you will be able to
    enter any event type you wish once you uncheck the checkbox). This is very useful
    for the proper events routing.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅所有事件类型**：**你可以选择将所有事件类型路由到终端，或者仅将你定义的事件类型路由到终端（取消勾选复选框后，你可以输入任何你想要的事件类型）。这对于正确的事件路由非常有用。
- en: 'Endpoint Type: You have a choice of different endpoints, including WebHook, Azure
    Event Hub,and Hybrid Connections.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端类型：你可以选择不同的终端类型，包括 WebHook、Azure Event Hub 和混合连接。
- en: 'Event Schema: You can choose to use either Event Gridschema or a more common
    Cloud Events schema, the latter of which is an open standard specification and
    can be used to introduce a custom schema for all the components in your system.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件模式：你可以选择使用 Event Grid 模式或更常见的 Cloud Events 模式，后者是一个开放的标准规范，可以用于为系统中的所有组件引入自定义模式。
- en: 'FILTERS: You can additionally filter events of a specific type by filtering
    them with the subject field value.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器：你还可以通过过滤主题字段值来进一步过滤特定类型的事件。
- en: When you fill all values, click on Createto actually create it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当你填写所有值后，点击**创建**按钮来实际创建它。
- en: Remember that an endpoint has to be validated to successfully create a subscription!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，必须验证终端才能成功创建订阅！
- en: 'Now, if you send an example request, you should be able to receive it in your
    handler (in my case, Azure Functions):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你发送一个示例请求，你应该能够在你的处理程序中接收到它（在我的案例中是 Azure Functions）：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You may wonder what will happen if your event handler doesn't return a success
    response to Azure Event Grid. In that scenario, a retry will be performed.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，如果事件处理程序没有返回成功响应给 Azure Event Grid，会发生什么？在这种情况下，将执行重试操作。
- en: Azure Event Gridconsiders only `HTTP 200` and `HTTP 202` responses as successful.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Event Grid 只将 `HTTP 200` 和 `HTTP 202` 响应视为成功。
- en: By default, Event Griduses an exponential backoff retry policy. This means that
    each consecutive retry will be performed with an increased delay between that
    one, and the next retry. You can customize this behaviour by providing a custom
    retry policy. A link to that feature can be found in the *Further reading*section.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Event Grid 使用指数回退重试策略。这意味着每次连续的重试将在前一次和下一次重试之间增加延迟。你可以通过提供自定义重试策略来定制此行为。关于该功能的链接可以在*进一步阅读*部分找到。
- en: Integrating Azure Functions with Azure Event Grid
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Azure Functions 与 Azure Event Grid 集成
- en: The last thing that we'll cover for Azure Event Gridis integration with Azure
    Functions. As mentioned earlier, if you use Event Gridto publish events to Azure
    Functions triggered by an HTTP trigger, you will have to validate an endpoint.
    This is not the best solution, but fortunately, it is possible to use `EventGridTrigger`,
    which allows us to skip the endpoint validation step when configuring services.
    This topic itself is quite big, so we will not cover each and every problem possible;
    however, I will point you to the specific parts of the documentation, which will
    help you understand the topic even better.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的 Azure Event Grid 的最后一个内容是与 Azure Functions 的集成。如前所述，如果你使用 Event Grid
    向由 HTTP 触发器触发的 Azure Functions 发布事件，你必须验证终端。这并不是最佳解决方案，但幸运的是，使用 `EventGridTrigger`
    是可行的，它允许我们在配置服务时跳过终端验证步骤。这个话题本身非常大，因此我们不会覆盖所有可能的问题；不过，我会将你指引到文档的特定部分，帮助你更好地理解这个主题。
- en: EventGridTrigger in Azure Functions
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Functions 中的 EventGridTrigger
- en: 'In general, the easiest way to integrate Azure Functionswith Azure Event Gridis
    to use `HttpTrigger`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，将 Azure Functions 与 Azure Event Grid 集成的最简单方法是使用 `HttpTrigger`：
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is the most generic setup. It provides direct access to a request message
    and enables you to control its specific parts. There is, however, an alternative
    to the preceding setup—we can instead use `EventGridTrigger`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最通用的设置。它提供了对请求消息的直接访问，并使你能够控制其特定部分。然而，也有一个替代方案——我们可以使用 `EventGridTrigger`：
- en: '[PRE13]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With `EventGridTrigger` here, you can directly access the payload of a request,
    which is pretty useful if you are not interested in the remaining part of it.
    Additionally, you do not have to validate an endpoint. The preceding function
    can be used a bit differently if you use version 2 of the Azure Functionsruntime:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，使用`EventGridTrigger`，您可以直接访问请求的有效负载，这对于不关心其余部分的情况非常有用。此外，您不需要验证端点。如果使用Azure
    Functions运行时的版本2，前面的函数可以稍作不同：
- en: '[PRE14]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, instead of binding to `JObject`here, you can access a well defined `EventGridEvent`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里您可以访问一个明确定义的`EventGridEvent`，而不是绑定到`JObject`。
- en: It is possible to use `EventGridEvent`even with version 1 of the Azure Functionsruntime.
    To do so, you have to manually reference `Microsoft.Azure.EventGrid.Models.EventGridEvent`
    by installing the `Microsoft.Azure.EventGrid` NuGet package.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在Azure Functions运行时版本1中，也可以使用`EventGridEvent`。为此，您需要通过安装`Microsoft.Azure.EventGrid`
    NuGet包来手动引用`Microsoft.Azure.EventGrid.Models.EventGridEvent`。
- en: 'You can easily create a function triggered by Event Gridusing Azure Portal,
    as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过Azure门户轻松创建一个由Event Grid触发的函数，如下所示：
- en: '![](img/e3636ccf-9ead-4ccd-bedd-db65711b6fc3.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3636ccf-9ead-4ccd-bedd-db65711b6fc3.png)'
- en: 'After creating the function, you will see a code snippet from where you can
    start working on the function. The important thing is to add the Event Grid subscription,
    which you will have to use to integrate the function with Azure Event Grid:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 创建函数后，您将看到一个代码片段，可以从这里开始编写函数。重要的是添加事件网格订阅，您需要用它来将函数与 Azure Event Grid集成：
- en: '![](img/a13c9291-e875-4438-adca-f2d4f2ffdbfb.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a13c9291-e875-4438-adca-f2d4f2ffdbfb.png)'
- en: The generated code depends on the runtime version of your Function App—in my
    example, I used version 1, so I used `JObject` instead of `EventGridEvent`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的代码取决于您的Function App的运行时版本——在我的示例中，我使用的是版本1，因此我使用了`JObject`而不是`EventGridEvent`。
- en: 'When you click on it, you will see a form that you can fill to create a subscription.
    In fact, it is very similar to the form you saw previously when creating a subscription
    from within the Event Gridinstance:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击它时，您将看到一个表单，您可以填写该表单来创建订阅。实际上，它非常类似于您在Event Grid实例中创建订阅时看到的表单：
- en: '![](img/4d4af097-bb14-4c90-b2ee-efcbef7b9292.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d4af097-bb14-4c90-b2ee-efcbef7b9292.png)'
- en: 'The only difference is that some fields are filled automatically. After creation
    of a subscription, you can test it by sending, for example, a custom event to Event
    Grid. What is more, a newly created subscription should be visible on the Overviewblade
    of your Azure Event Gridinstance:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是一些字段会自动填充。创建订阅后，您可以通过向Event Grid发送例如自定义事件来进行测试。更重要的是，刚创建的订阅应能在您的Azure
    Event Grid实例的概览页面上看到：
- en: '![](img/f7c40c36-81da-40b2-9839-7a00387a67db.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7c40c36-81da-40b2-9839-7a00387a67db.png)'
- en: Testing Azure Event Grid and Azure Functions
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Azure Event Grid和Azure Functions
- en: 'You are probably thinking about the options for testing Azure Event Gridand Azure
    Functionslocally. In fact, currently, you have two ways of doing this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能在考虑如何在本地测试Azure Event Grid和Azure Functions。事实上，当前您有两种方法可以实现这一点：
- en: Capturing and resending events to your application
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获并重新发送事件到您的应用程序
- en: Using ngrok, available at [https://ngrok.com/](https://ngrok.com/), to forward
    requests to your local computer
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ngrok（可在[https://ngrok.com/](https://ngrok.com/)上找到）将请求转发到本地计算机
- en: 'Which of these methods you choose will depend on your capabilities (for example,
    ngrok exposes your computer''s port, so it can be a security concern), so you
    will have to figure out by yourself what the best option is. Both methods are
    described in the link mentioned in the *Further reading*section. However, there
    is one interesting feature of Azure Functions, which can be used to test Event
    Grid locally. It can be found under the following endpoint:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择的这些方法将取决于您的能力（例如，ngrok会暴露您计算机的端口，这可能带来安全问题），因此您需要自己判断哪种选项最适合。两种方法在*进一步阅读*部分提到的链接中都有描述。然而，Azure
    Functions有一个有趣的功能，可以用来在本地测试Event Grid。它可以通过以下端点找到：
- en: '[PRE15]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here you can find an example request:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个请求的示例：
- en: '[PRE16]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note one important thing here—you have to set `aeg-event-type` to `Notification`.
    If you fail to do so, you will receive an `HTTP 400` response. With such a setup,
    you can emulate how your function will behave when deployed to Azure.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个重要的事项——您必须将`aeg-event-type`设置为`Notification`。如果未设置，您将收到`HTTP 400`响应。通过这样的设置，您可以模拟您的函数在部署到Azure时的行为。
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned what reactive architecture is and how to use it
    with Azure Event Grid. You integrated different event producers with event handlers,
    and used custom topics to publish custom events. What is more, you now have the
    knowledge of how to integrate Azure Event Grid with Azure Functionsand test it
    locally.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了什么是反应式架构以及如何与 Azure Event Grid 一起使用。你将不同的事件生产者与事件处理程序集成，并使用自定义主题发布自定义事件。此外，你现在还掌握了如何将
    Azure Event Grid 与 Azure Functions 集成并进行本地测试的知识。
- en: This chapter ends the second part of the book, which has been on serverlessservices
    and architectures. In the next part, we will cover different storage options and
    messaging and monitoring services, which will broaden your proficiency with Azure
    even more.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了本书的第二部分，内容涉及无服务器服务和架构。在下一部分中，我们将介绍不同的存储选项、消息传递和监控服务，这将进一步拓宽你在 Azure 上的专业技能。
- en: Questions
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the supported event schemas in Azure Event Grid?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Event Grid 中支持的事件模式有哪些？
- en: How can you authorize a request to an Event Gridendpoint when posting a custom
    event?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在发布自定义事件时授权请求访问 Event Grid 端点？
- en: What has to be returned when validating an endpoint?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证端点时需要返回什么？
- en: When will an endpoint not have to be validated?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时不需要验证端点？
- en: What happens if an endpoint doesn't return a success response?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果端点没有返回成功响应，会发生什么？
- en: How can you filter events in Azure Event Grid?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 Azure Event Grid 中过滤事件？
- en: How can you test Event Gridintegration with Azure Functions?
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何测试 Azure Event Grid 与 Azure Functions 的集成？
- en: Further reading
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Azure Storage V2 accounts: [https://docs.microsoft.com/en-us/azure/storage/common/storage-account-options#general-purpose-v2-accounts](https://docs.microsoft.com/en-us/azure/storage/common/storage-account-options#general-purpose-v2-accounts)
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure 存储 V2 账户: [https://docs.microsoft.com/en-us/azure/storage/common/storage-account-options#general-purpose-v2-accounts](https://docs.microsoft.com/en-us/azure/storage/common/storage-account-options#general-purpose-v2-accounts)'
- en: Azure CLI: [https://docs.microsoft.com/en-us/cli/azure/azure-cli-extensions-list?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/azure-cli-extensions-list?view=azure-cli-latest)
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure CLI: [https://docs.microsoft.com/en-us/cli/azure/azure-cli-extensions-list?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/azure-cli-extensions-list?view=azure-cli-latest)'
- en: 'CloudEvents standard specification: [https://cloudevents.io/](https://cloudevents.io/)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudEvents 标准规范: [https://cloudevents.io/](https://cloudevents.io/)'
- en: 'Event delivery in Azure Event Grid: [https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure Event Grid 中的事件传递: [https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery)'
- en: 'Azure Function Azure Event Grid binding: [https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-grid](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-grid)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure Function 与 Azure Event Grid 绑定: [https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-grid](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-grid)'
