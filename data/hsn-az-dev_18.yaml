- en: Scaling Azure Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Azure 应用
- en: We cannot talk about reliable and stable applications in the cloud without scaling.
    While this process may have seemed a bit complicated and cumbersome in models
    like **Infrastructure as a service** (**IaaS**) or on-premises, Azure gives many
    different ways to multiply our applications quickly, and without downtime.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中谈论可靠和稳定的应用程序时，扩展是必不可少的。虽然在**基础设施即服务**（**IaaS**）或本地部署的模型中，这个过程可能显得有些复杂且笨重，但
    Azure 提供了多种不同的方式，可以快速扩展我们的应用程序，且没有停机时间。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Autoscaling, scaling up, scaling out
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动扩展、向上扩展、向外扩展
- en: Scaling Azure App Services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 Azure 应用服务
- en: Scaling Azure Functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 Azure 函数
- en: Scaling Azure Service Fabric
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 Azure 服务结构
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To perform exercises from this chapter, you will need the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行本章的练习，您将需要以下内容：
- en: Access to an Azure subscription
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Azure 订阅
- en: Autoscaling, scaling up, scaling out
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动扩展、向上扩展、向外扩展
- en: The cloud is all about scaling—it is one of the most important advantages of
    such a setup over an on-premises setup. The ability to rapidly adapt to new demands
    when it comes to incoming traffic, and the flexibility a cloud offers, enables
    you to create more stable services, which are less prone to unexpected load spikes
    and insufficient hardware performance. In this chapter, we will focus a little
    bit on diving deeper into the scaling topic, in order to build a deep understanding
    of how different services behave in Azure, and how you can ensure that the scaling
    feature is automated and requires as little attention as possible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算的核心是扩展——这是此类设置相比本地部署设置的最重要优势之一。云能够快速适应新需求，尤其是流量的增加，而云所提供的灵活性使您能够创建更稳定的服务，减少意外负载峰值和硬件性能不足的风险。在本章中，我们将深入探讨扩展主题，帮助您深入理解
    Azure 中不同服务的行为，并确保扩展功能是自动化的，并且尽可能少需要关注。
- en: Autoscaling
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动扩展
- en: 'You can define the autoscaling feature of many services as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式定义许多服务的自动扩展功能：
- en: Autoscaling is a feature that allows a service, a machine, or an application
    to automatically scale up or out based on predefined parameters, like CPU utilization,
    memory used, or artificial factors, like throughput units, or worker utilization.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自动扩展是一项功能，允许服务、机器或应用程序根据预定义的参数（如 CPU 利用率、内存使用情况或人工因素，如吞吐量单元或工作者利用率）自动向上或向外扩展。
- en: 'In general, you can describe autoscaling as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您可以按以下方式描述自动扩展：
- en: '![](img/fa77e25e-3e0c-4897-8cc8-d8528d641cb5.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa77e25e-3e0c-4897-8cc8-d8528d641cb5.png)'
- en: 'The preceding diagram can be described as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示可以按以下方式描述：
- en: A resource accepts incoming requests as normal
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源正常接受传入请求
- en: Simultaneously there is an entity that monitors a resource—it checks it against
    the scaling rules and decides whether a scaling operation is required
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时，有一个实体监控资源——它会根据扩展规则检查资源，并决定是否需要执行扩展操作。
- en: An entity takes a decision regarding scaling—it can scale a resource up/down
    or out, depending on the settings
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实体根据设置决定是否扩展资源，它可以将资源向上/向下扩展或向外扩展。
- en: 'Of course, besides pros, scaling has its downsides:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，除了优点，扩展也有其缺点：
- en: It may render your application unresponsive.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会使您的应用程序变得无响应。
- en: It requires additional resources for load balancing (if scaling out).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要额外的资源来进行负载均衡（如果是向外扩展）。
- en: It takes time, depending on the scaling characteristics. It is, therefore, crucial
    to plan such action at the design stage.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这需要时间，具体取决于扩展特性。因此，必须在设计阶段规划此类操作。
- en: In many cases, it causes your solution to be many times more expensive.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多情况下，这会使您的解决方案变得更加昂贵。
- en: 'How a service scales depends solely on the service itself. Let us look at some
    examples:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 服务如何扩展完全取决于服务本身。让我们看一些例子：
- en: Azure Event Hub can be scaled manually/automatically (using the auto-inflate
    feature). You can assign more **Throughput Units** (**TUs**) to an instance to
    enable it to accept more messages. Automatic scaling down is not implemented.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 事件中心可以手动/自动扩展（使用自动膨胀功能）。您可以为实例分配更多的**吞吐量单元**（**TUs**），使其能够接收更多的消息。自动缩减扩展尚未实现。
- en: Azure App Services can be scaled both manually and automatically (it depends
    on the tier you have chosen). You have multiple different parameters available,
    and scaling down is also performed automatically.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 应用服务可以手动和自动扩展（取决于您选择的层级）。您可以使用多个不同的参数，缩小扩展也会自动进行。
- en: Azure Cosmos DB relies on the **Request Unit** (**RU**) units assigned to an
    instance.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Cosmos DB 依赖于分配给实例的**请求单元**（**RU**）。
- en: Azure SQL has different models for scaling—you can either use **Database Transaction
    Units** (**DTUs**) or vCores.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure SQL 有不同的扩展模型——你可以使用**数据库事务单元**（**DTUs**）或虚拟核心（vCores）。
- en: Azure Functions scale automatically using an internal mechanism of workers and
    the scale controller.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Functions 通过内部的工作者和扩展控制器机制自动扩展。
- en: Azure Storage does not support scaling.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 存储不支持扩展。
- en: 'As you can see, there is no single solution for scaling your services in Azure—you
    have to implement the working solution for each component individually. The rule
    of thumb is, that the less control over a resource you have, the more automated
    the scaling will be. While for IaaS scenarios, you have to operate the number
    of VMs, in **PaaS**, you will end up with virtual cores or other units. Here you
    can find different cloud models ordered from the left to right in terms of the
    scaling complexity (where **IaaS **has the most complex model):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在 Azure 中没有单一的扩展解决方案——你必须为每个组件单独实现可行的解决方案。经验法则是，你对资源的控制越少，扩展将越自动化。而对于 IaaS
    场景，你必须操作虚拟机的数量，而在**PaaS**中，你将最终得到虚拟核心或其他单元。这里你可以找到按扩展复杂度从左到右排列的不同云模型（其中**IaaS**具有最复杂的模型）：
- en: '![](img/1d912af6-3636-4479-9bdb-161a28786647.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d912af6-3636-4479-9bdb-161a28786647.png)'
- en: Scaling up and scaling out
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向上扩展与向外扩展
- en: 'There are two different types of scaling (at least when it comes to Azure):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种不同类型的扩展（至少在 Azure 中是这样）：
- en: '**Scaling up**: Which upgrades hardware/a tier'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**：通过升级硬件/增加一个层级来进行扩展'
- en: '**Scaling out**: Which adds instances of a service'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**：添加服务的实例'
- en: 'Scaling up can be presented as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 向上扩展可以如下呈现：
- en: '![](img/1a513d79-aa6c-4a23-87d8-3cabc2869497.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a513d79-aa6c-4a23-87d8-3cabc2869497.png)'
- en: 'While for comparison, scaling out is described as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 而为了进行比较，水平扩展的描述如下：
- en: '![](img/1c33d2df-b3f0-462c-bfd1-3bd650af9260.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c33d2df-b3f0-462c-bfd1-3bd650af9260.png)'
- en: 'So, in the first scenario (scaling up), you will get a better performance from
    a single instance, while scaling out will allow you to parallelize your work.
    The use cases are different in both options and are basically dependent on the
    workload you are planning to run. These are some examples:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在第一个场景中（向上扩展），你将从单个实例中获得更好的性能，而**水平扩展**则允许你并行处理工作。两种选项的使用场景不同，基本上取决于你计划运行的工作负载。这些是一些例子：
- en: If your code is sequential and there is no option to multiply it, use scaling
    up
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的代码是顺序执行且无法并行化，使用**向上扩展**。
- en: If your code requires much compute power in a unit of time rather than dividing
    it into multiple machines, use scaling up
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的代码在单位时间内需要大量的计算能力，而不是将其分配到多台机器上，使用**向上扩展**。
- en: If you have a way to load balance your load, use scaling out
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有方法对负载进行负载均衡，使用**水平扩展**。
- en: If you are able to perform the same work on multiple machines without a risk
    of collision, use scaling out
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你能够在多台机器上执行相同的工作，并且没有碰撞的风险，使用**水平扩展**。
- en: Using scaling out can be compared to multithreading—but of course on a much
    bigger scale. In fact, the problems are quite the same. If your machine has multiple
    cores, and they are able to execute your code at the same time, you have to introduce
    very similar constraints.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**水平扩展**可以比作多线程——但当然是在一个更大的规模上。事实上，问题非常相似。如果你的机器有多个核心，并且能够同时执行你的代码，那么你必须引入非常相似的约束。
- en: The common problems of scaling out are often caused by the access to the state—whether
    it is shared via any kind of storage, or distributed amongst many machines. Make
    sure you are aware of these before using this feature.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 水平扩展的常见问题通常是由访问状态引起的——无论它是通过任何类型的存储共享，还是在多台机器之间分布。在使用此功能之前，请确保了解这些问题。
- en: In Azure, multiple services scale out/up differently. We will focus on three
    of them to get a better understanding of the topic.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 中，多个服务的扩展方式不同。我们将重点讨论其中三个，以便更好地理解这一主题。
- en: Scaling Azure App Services
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Azure 应用服务
- en: We started our journey through Microsoft Azure by learning some basics of Azure
    App Services. This is a very common PaaS component, which is widely used amongst
    many Azure users, both for very simple websites and complex systems requiring
    high performance and reliability. To make sure that your Web App is always on,
    or to check if it is under pressure, you have to implement some kind of scaling
    rules. When it comes to this service, you have two options—either using manual
    scaling (and implementing some kind of alert, so that you know when such action
    should happen), or an autoscale feature, which makes things much easier in terms
    of maintenance. In this section, we will cover and compare both of them.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过学习一些基本的 Azure 应用服务 开始了在 Microsoft Azure 上的旅程。这是一个非常常见的 PaaS 组件，在许多 Azure
    用户中被广泛使用，适用于非常简单的网站和要求高性能与高可靠性的复杂系统。为了确保您的 Web 应用 始终在线，或者检查它是否面临压力，您需要实施某种扩展规则。对于此服务，您有两个选择——要么使用手动扩展（并实现某种警报，以便知道何时执行此操作），要么使用自动扩展功能，这样在维护方面会更轻松。在本节中，我们将介绍并比较这两者。
- en: Manual scaling
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动扩展
- en: Manual scaling is a feature that is available starting from the basic tier—it
    is not available for free or shared ones. Depending on the actual tier chosen,
    there will be a different amount of instances that can be used for your App Service.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 手动扩展是从基础层开始提供的功能——它不适用于免费的或共享的服务。根据所选择的实际层级，您的应用服务可以使用不同数量的实例。
- en: 'Here you can find how things look like for the B2tier:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以查看 B2 层的情况：
- en: '![](img/c2f624db-159a-4f2d-ad4b-f8d50bddc4b5.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2f624db-159a-4f2d-ad4b-f8d50bddc4b5.png)'
- en: 'In the preceding configuration, the maximum number of instances available is
    set to three. However, if I scale up to the standardtier the result is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配置中，最大可用实例数设置为三。 However，如果我将扩展到标准层，结果如下：
- en: '![](img/1c607a76-daea-426f-9f40-85489217e93c.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c607a76-daea-426f-9f40-85489217e93c.png)'
- en: 'Things look quite different—two features have changed:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 情况看起来有些不同——两个功能发生了变化：
- en: I can set the Instance count to the maximum number of 10
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我可以将实例数量设置为最多 10 个
- en: Autoscaling can be enabled
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以启用自动扩展
- en: Note that scaling up to the premium tier will allow you to set the maximum number
    of 20 instances for your App Service.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，将扩展到高级层将允许您为应用服务设置最多 20 个实例。
- en: Autoscaling
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动扩展
- en: 'While manual scaling can be fine for less demanding websites and systems (as
    they do not require quick actions when something happens), when your application
    is, for example, a popular e-commerce shop, you want things to happen quickly,
    including scaling out. Let us try to enable autoscaling for now—it will display
    a form that enables you to manage these settings:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然手动扩展对于需求较低的网站和系统可能是合适的（因为它们在发生事件时不需要迅速采取行动），但如果您的应用程序是一个受欢迎的电子商务网站，您希望操作快速执行，包括扩展。例如，让我们尝试现在启用自动扩展——这将显示一个表单，允许您管理这些设置：
- en: '![](img/85583c51-eef5-46d3-9a2a-134cd4acdc65.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85583c51-eef5-46d3-9a2a-134cd4acdc65.png)'
- en: 'In fact, you have two options here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，您在这里有两个选择：
- en: 'Scale based on a metric: Allows you to select a metric, which will be a trigger
    for autoscaling'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于指标扩展：允许您选择一个指标，该指标将作为自动扩展的触发条件
- en: 'Scale to a specific instance count: Executed by default (so should be used
    along with scaling based on a metric)'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展到特定的实例数：默认情况下执行（因此应该与基于指标的扩展一起使用）
- en: 'To configure scale based on a metric, you will need a rule. You can add this
    by clicking on the + Add a rulelink. Doing so will display another form (which
    is far more complex than the current one), where you can select all that is interesting
    for you:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要根据指标配置自动扩展，您需要一个规则。您可以通过点击 + 添加规则链接来添加该规则。这样做将显示另一个表单（比当前的表单复杂得多），您可以在其中选择所有对您有意义的内容：
- en: '![](img/1eab9c44-c38c-4d0e-a920-17ece24af5a2.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1eab9c44-c38c-4d0e-a920-17ece24af5a2.png)'
- en: In the preceding screenshot, you can see a rule that will trigger autoscaling
    when CPU utilization exceeds 70% over a 10 minute period. Once all conditions
    are met, the runtime will add another instance to the App Service. What is more,
    if the conditions are true after another 5 minutes (Cool down (minutes)period),
    the scaling out operation will be triggered once more. This will happen as long
    as the maximum number of instances, which you have set, are hit.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，您可以看到一个规则，当 CPU 使用率在 10 分钟内超过 70% 时，会触发自动扩展。一旦满足所有条件，运行时将向应用服务添加另一个实例。更重要的是，如果条件在
    5 分钟后仍然成立（冷却时间（分钟）期间），将再次触发扩展操作。这将一直持续，直到达到您设置的最大实例数为止。
- en: Remember that you can set more than a single rule for your application. What
    is more, it seems like a good idea to create a decreasing count by rule, which
    will remove additional instances if the load gets back to normal.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你可以为应用程序设置多个规则。而且，似乎创建一个按规则减少实例数的规则是个好主意，这样当负载恢复正常时，它会移除多余的实例。
- en: 'Once your rule is added, you can click Save to confirm your changes—now your
    application will be scaled out anytime a rule is considered active. Before we
    go further, I would like to show you two more things. You probably noticed two
    additional sections on the Scale-outblade, JSON and Notify. They give you some
    additional options when it comes to managing a service:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了规则，你可以点击保存以确认更改——现在，每当规则被认为是激活状态时，你的应用程序就会自动扩展。在继续之前，我想向你展示另外两件事。你可能注意到在扩展页面上有两个额外的部分：JSON和Notify。它们在管理服务时提供了一些额外的选项：
- en: JSON:This generates a JSON template, which can be used with ARM Templates for
    automatic provisioning of your resource. It will automatically add scaling rules
    when a service is created.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'JSON: 这会生成一个JSON模板，可以与ARM模板一起使用，以自动配置你的资源。当创建服务时，它会自动添加扩展规则。'
- en: 'Notify: This enables you to automatically send a notification to administrators
    of the resource in Azure, to notify them when something wrong happens there.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Notify: 这使你能够在Azure中自动向资源管理员发送通知，当出现问题时通知他们。'
- en: 'Here you can find a JSON, which was generated for my rules:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你可以看到为我的规则生成的JSON：
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Scaling Azure Functions
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Azure Functions
- en: When using PaaS services, you can configure how your application will behave
    when CPU utilization hits the maximum allowed value, or the number of requests
    exceeds the threshold. However, Azure offers services in other models—one of the
    most interesting is serverless architecture, which abstracts the control even
    more in favor of easier configuration, minimum maintenance, and ability to focus
    on delivering a business value.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PaaS服务时，你可以配置当CPU使用率达到最大允许值，或请求数超过阈值时，应用程序的行为。然而，Azure还提供了其他模型的服务——其中最有趣的是无服务器架构，它进一步抽象了控制，旨在提供更简便的配置、最小的维护以及专注于提供业务价值的能力。
- en: In this section, you will see the differences between Azure App Services and Azure
    Functions when it comes to scaling, both from the technical and conceptual point
    of view.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将看到Azure应用服务和Azure Functions在扩展方面的不同，从技术和概念的角度来看。
- en: Scaling serverless applications
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展无服务器应用程序
- en: 'When you are using serverless services (such as Azure Functions, Azure Cosmos
    DB, or Azure Event Grid) you have limited options when it comes to configuring
    the feature. For example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用无服务器服务（例如Azure Functions、Azure Cosmos DB或Azure Event Grid）时，配置该功能的选项非常有限。例如：
- en: In Azure Functions, you rely on the pricing model (consumption plan vs App Service
    Plan)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure Functions中，你依赖于定价模型（消费计划与应用服务计划）
- en: In Azure Cosmos DB you modify the number of RUs
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure Cosmos DB中，你修改RU的数量
- en: In Azure Event Grid you have no way to define how the service will scale
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure Event Grid中，你无法定义服务如何扩展。
- en: This is all caused by the fact that you do not control the application host—the
    underlying service engine is completely detached from your application and there
    is no possibility to directly modify it. What you can do is to control it indirectly,
    either by changing the number of processing units or via available configuration
    options, which can be interpreted and applied.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切的原因是你无法控制应用程序主机——底层服务引擎与应用程序完全分离，无法直接修改。你能做的是间接控制它，要么通过改变处理单元的数量，要么通过可用的配置选项，这些选项可以被解释并应用。
- en: Note that serverless is meant to be a model where you are isolated from the
    runtime (and, in some cases, even from the cloud vendor). If the lack of control
    does not play well for you, it is better to try PaaS or IaaS models and services.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，无服务器是一个模型，你与运行时（在某些情况下甚至与云服务提供商）是隔离的。如果这种缺乏控制不适合你，最好尝试PaaS或IaaS模型和服务。
- en: Scaling Azure Functions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Azure Functions
- en: In Azure Functions, there is no possibility to scale up, at least for the consumption
    plan. Of course, when using the App Service Plan, you can scale it up and get
    better hardware, but it does not affect the service itself. Instead it creates
    more resources to consume. On the other hand, you cannot scale out manually. The
    only possibility is to let Azure Functions scale automatically. To do so, this
    service implements the concept of a scale controller. This is an internal feature
    that constantly monitors how particular workers hosting the Function's runtime
    behave, and if one of them seems to be overloaded, another machine is added to
    the set.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Functions 中，至少在消费计划下，不可能进行扩展。当然，使用 App 服务计划时，您可以进行扩展并获得更好的硬件，但这不会影响服务本身。相反，它会创建更多的资源来消耗。另一方面，您不能手动扩展。唯一的可能性是让
    Azure Functions 自动扩展。为此，该服务实现了扩展控制器的概念。这是一个内部功能，它持续监控承载函数运行时的特定工作进程的行为，如果其中一个似乎过载，则会向工作集添加另一台机器。
- en: Azure Functions scaling behavior is quite sophisticated and only partially described,
    as it contains parts that are either open sourced, or not available publicly.
    I will try to describe it in detail in this chapter, so you are aware of the exact
    algorithm of making a scaling decision.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions 的扩展行为非常复杂且仅部分描述，因为它包含了开源部分或未公开的部分。我将在本章中尽力详细描述，以便您了解做出扩展决策的准确算法。
- en: 'Before your instance of Azure Functions will make a scaling decision, it will
    check the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Azure Functions 实例做出扩展决策之前，它会检查以下内容：
- en: '**Scaling interval**: Scaling only happens after a specific interval has passed.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**扩展间隔**：扩展仅在经过特定时间间隔后发生。'
- en: '**Current workers number**: If the number of workers (running the function''s
    hosts) exceeds the configured maximum, a decision will be made to remove one from
    the working set.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**当前工作进程数**：如果工作进程的数量（运行函数宿主的工作进程）超过了配置的最大值，系统会决定从工作集移除一个工作进程。'
- en: '**Load factor**: If the load factor approaches the maximum value, a new worker
    will be added. Alternatively, if the load factor drops, one worker will be removed.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**负载因子**：如果负载因子接近最大值，则会添加一个新的工作进程。相反，如果负载因子下降，则会移除一个工作进程。'
- en: '**Busy worker ratio**: If the number of busy workers exceeds the configured
    maximum, another worker will be added to the set.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**繁忙工作进程比例**：如果繁忙的工作进程数超过了配置的最大值，则会向工作集添加另一个工作进程。'
- en: '**Free workers**: If the number of free workers is greater than the defined
    maximum, one of them will be removed from the working set.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**空闲工作进程**：如果空闲工作进程的数量大于定义的最大值，系统会从工作集移除其中一个工作进程。'
- en: 'Defined values for above actions can be found as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作的定义值可以如下找到：
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above values come from the GitHub repository of Azure Functions Host. They
    may be changed after a while, but if you are interested, take a look at the following
    project: [https://github.com/Azure/azure-functions-host](https://github.com/Azure/azure-functions-host)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述值来自 Azure Functions Host 的 GitHub 仓库。这些值可能会在一段时间后更改，但如果您有兴趣，可以查看以下项目：[https://github.com/Azure/azure-functions-host](https://github.com/Azure/azure-functions-host)
- en: 'Additionally, you can control the maximum number of instances by providing
    the `WEBSITE_MAX_DYNAMIC_APPLICATION_SCALE_OUT` value in the Application settingsof
    your Function App:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以通过在应用程序设置中提供 `WEBSITE_MAX_DYNAMIC_APPLICATION_SCALE_OUT` 值来控制实例的最大数量：
- en: '![](img/64803ef4-3405-4209-94bd-638630fc7e44.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64803ef4-3405-4209-94bd-638630fc7e44.png)'
- en: 'What is more, if you connect the instance of your Function App to an instance
    of Azure Application Insights, you will be able to check how many workers it has
    by checking the Live Metrics Streamfeature:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，如果您将 Function App 实例连接到 Azure Application Insights 实例，您将能够通过检查 Live Metrics
    Stream 功能查看它有多少个工作进程：
- en: '![](img/d9d73ea1-2a92-4b52-9963-8720975ef810.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9d73ea1-2a92-4b52-9963-8720975ef810.png)'
- en: Scaling Azure Service Fabric
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Azure Service Fabric
- en: We have discussed two different models for scaling by working with two separate
    Azure services; Azure App Services and Azure Functions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了通过与两个不同的 Azure 服务合作来扩展的两种不同模型；Azure 应用服务和 Azure Functions。
- en: They are quite different when it comes to adding new instances or improving
    hardware performance, in that they introduce multiple concepts, and offer a different
    level of flexibility. In the last section of this chapter, we will cover one more
    service, Azure Service Fabric. This particular Azure product behaves in a slightly
    different manner when it comes to scaling up or out, as it requires you to manage
    VMs. In addition, a distinct set of skills is necessary to perform this operation
    seamlessly and in the right fashion.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加新实例或提升硬件性能方面，它们有很大的不同，因为它们引入了多个概念，并提供了不同的灵活性。在本章的最后部分，我们将介绍另一个服务——Azure Service
    Fabric。这个 Azure 产品在进行垂直或水平扩展时行为略有不同，因为它要求你管理虚拟机。此外，执行这一操作需要一组独特的技能，以确保操作顺利且正确。
- en: Scaling a cluster manually
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动扩展集群
- en: 'Clusters in Azure Service Fabric can be scaled in two ways:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Service Fabric 中，集群可以通过两种方式进行缩放：
- en: '**Manually**: By choosing appropriate options in the cluster configuration'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动**：通过在集群配置中选择适当的选项'
- en: '**Programatically**: By using the Azure SDK'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**程序化**：通过使用 Azure SDK'
- en: 'In fact, the characteristics of your cluster are selected at the very beginning,
    when you are choosing node types and their configuration, as shown in the following
    screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，集群的特性在一开始就已经选定，当你选择节点类型及其配置时，如下截图所示：
- en: '![](img/3ea7a121-f82c-4d89-8b97-90dded7bdd1f.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ea7a121-f82c-4d89-8b97-90dded7bdd1f.png)'
- en: Scaling Azure Service Fabric service is similar to scaling VMs, as it is based
    on nodes containing an unspecified number of virtual machines, which means you
    really depend on scale sets.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展 Azure Service Fabric 服务类似于扩展虚拟机，因为它基于包含不确定数量虚拟机的节点，这意味着你实际上依赖于扩展集。
- en: It is always better to set up a cluster that will handle the planned load than
    scale it under pressure, especially when you require strict transactional assurances,
    which may impact scaling time. Take a look at the *Further reading*section, where
    you will find an article describing efficient cluster planning.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最好在一开始就搭建一个能够处理计划负载的集群，而不是在压力下进行缩放，尤其是当你需要严格的事务保证时，这可能会影响缩放时间。请查看*进一步阅读*部分，那里有一篇文章描述了高效的集群规划。
- en: 'When using scaling with Azure Service Fabric, remember that adding machines
    to the scale set always takes time. Therefore, consider planning such operations
    early, so the impact on the current operations will be minimized. To actually
    scale out your cluster, you have use the Scaling feature of the scale set, which
    was created with it, as shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Azure Service Fabric 扩展时，请记住，向扩展集添加机器总是需要时间。因此，请考虑提前规划此类操作，以便将对当前操作的影响降至最低。要实际扩展你的集群，你需要使用创建时就配置的扩展集的扩展功能，如下图所示：
- en: '![](img/f81be57a-cb32-4403-b297-27196e4748e1.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f81be57a-cb32-4403-b297-27196e4748e1.png)'
- en: 'The other option to perform such operation is to use ARM template with the
    following snippet:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此操作的另一个选项是使用 ARM 模板，代码片段如下：
- en: '[PRE2]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By providing the `<capacity> `value, you may easily change the number of virtual
    machines powering your SF cluster.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供`<capacity>`值，你可以轻松更改为你的 SF 集群提供计算的虚拟机数量。
- en: Using Azure SDK to scale your cluster
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure SDK 来扩展你的集群
- en: 'Another option to scale your cluster is to use the Azure compute SDK. You may
    wonder what are the use cases for that particular feature—all in all, we already
    have manual/auto-scaling available. However, there are more advanced scenarios,
    which may be suitable for scaling using your own controller:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个缩放集群的选项是使用 Azure 计算 SDK。你可能会想，这个特性有哪些使用场景——毕竟，我们已经有了手动/自动缩放功能。然而，仍然有一些更高级的场景，可能适合使用自己的控制器进行缩放：
- en: Scaling using a custom metric, which is not available for autoscaling.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义度量进行扩展，而这并不适用于自动扩展。
- en: Performing additional operations before scaling can happen.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在缩放操作之前可以执行额外的操作。
- en: Full control over scaling operation in case of critical workloads.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在关键工作负载的情况下，完全控制缩放操作。
- en: 'To get the Azure compute SDK, you have to download the following NuGet package: Microsoft.Azure.Management.Fluent
    available at: [https://www.nuget.org/packages/Microsoft.Azure.Management.Fluent/](https://www.nuget.org/packages/Microsoft.Azure.Management.Fluent/).
    Similar libraries can be found for other languages (like Java or Python—you can
    find them in the link in the *Further Reading* section).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 Azure 计算 SDK，你需要下载以下 NuGet 包：Microsoft.Azure.Management.Fluent，网址为：[https://www.nuget.org/packages/Microsoft.Azure.Management.Fluent/](https://www.nuget.org/packages/Microsoft.Azure.Management.Fluent/)。其他语言（如
    Java 或 Python）也有类似的库，你可以在*进一步阅读*部分的链接中找到它们。
- en: 'To scale out your cluster, you may use the following code snippet:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要扩展集群的规模，你可以使用以下代码片段：
- en: '[PRE3]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The same can be used for Java:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的方式也适用于 Java：
- en: '[PRE4]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, it is a pretty simple piece of code—you just need to obtain
    the current scale set ID to get a reference to it, and then change its capacity.
    In this example, I used a value of `1`, but there is nothing that prevents you
    from using other numbers.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这段代码非常简单—你只需要获取当前的规模集 ID 来引用它，然后修改其容量。在这个示例中，我使用了值 `1`，但没有任何限制，阻止你使用其他数字。
- en: With the preceding example, you can also scale down your cluster. However, remember
    that you should not scale down below the cluster's reliability tier. If you do
    so, you no longer can rely on it and may destabilize it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的示例，你也可以缩减集群的规模。然而，请记住，你不应该将集群缩减到低于其可靠性层级。如果这样做，你将无法再依赖它，甚至可能导致集群不稳定。
- en: 'If you are using a higher reliability tier than bronze**,** you do not need
    to worry about unused machines as they will be automatically removed. Otherwise,
    you have to do it manually. To do so, you actually have to know which VMs are
    not currently used. To remove a node that is no longer required, you can use the
    following operations:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是比**铜**更高的可靠性层级，那么你不需要担心未使用的机器，因为它们会被自动移除。否则，你需要手动处理。为此，你需要知道哪些虚拟机当前没有被使用。要移除不再需要的节点，你可以使用以下操作：
- en: '[PRE5]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'They basically do three different things:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 它们基本上做三种不同的事情：
- en: Deactivate and remove a node from a cluster
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停用并从集群中移除节点
- en: Decrease a scale set capacity
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减少规模集容量
- en: Remove a node state
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除节点状态
- en: 'To find a node to be removed, you have to query a cluster and seek the most
    recent machine added:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到要移除的节点，你必须查询集群并查找最近添加的机器：
- en: '[PRE6]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You may wonder why the most recently added machine is selected to be the victim
    of the scaling operation. This is because work was delegated to it as the result
    of higher cluster utilization. Originally it was not a part of the set. and once
    it finished its job, it can be removed.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么最近添加的机器会成为扩展操作的受害者？这是因为在集群利用率较高时，工作被委派给了它。它最初并不属于该规模集，完成任务后可以移除。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the scaling of three completely different services—Azure
    App Service, Azure Functions, and Azure Service Fabric. You saw how this operation
    works for different application models—sometimes you scale service instances,
    VMs, or simply you do not control it and let the runtime do it for you. In fact,
    scaling services in the cloud is much easier than when using your own servers.
    You do not have to reconfigure load balancers, firewalls, routers, and servers.
    When using the scaling feature, always try to automate the process—manual scaling
    works only for very simple scenarios, and tends to keep your servers underutilized.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了三种完全不同的服务扩展—Azure App Service、Azure Functions 和 Azure Service Fabric。你看到这种操作如何适应不同的应用模型—有时你扩展服务实例、虚拟机，或者干脆不控制它，而是让运行时为你处理。实际上，在云中进行服务扩展比使用自有服务器要容易得多。你无需重新配置负载均衡器、防火墙、路由器和服务器。使用扩展功能时，始终尽量自动化这一过程—手动扩展仅适用于非常简单的场景，而且容易让服务器处于低效使用状态。
- en: In the next two chapters, we will cover two additional Azure services, Azure
    CDN and Azure Traffic Manager, which help in keeping your applications available,
    even under heavy load.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，我们将介绍另外两个 Azure 服务：Azure CDN 和 Azure Traffic Manager，它们帮助确保你的应用在高负载下仍然可用。
- en: Questions
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between scaling up and scaling out?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展和扩展的区别是什么？
- en: What are the use cases for scaling out?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展的使用场景有哪些？
- en: Is scaling up available in serverless services?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在无服务器服务中可以进行扩展吗？
- en: Does scaling out in Azure App Services affect the pricing of the service?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure App Services 中，扩展是否会影响服务的定价？
- en: Why can scaling operation be dangerous in Azure Service Fabric?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在 Azure Service Fabric 中，扩展操作可能是危险的？
- en: What are the cons of manual scaling?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 手动扩展的缺点是什么？
- en: What do you do if you want to automatically scale your Azure App Service when
    CPU utilization reaches 80%?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想在 CPU 使用率达到 80% 时自动扩展你的 Azure 应用服务，应该怎么做？
- en: Further reading
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Service Fabric cluster planning: [https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Service Fabric 集群规划：[https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity)
- en: Service Fabric cluster scaling: [https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-scaling](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-scaling)
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Service Fabric 集群扩展：[https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-scaling](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-scaling)
- en: 'Azure SDKs: [https://docs.microsoft.com/en-us/azure/index#pivot=sdkstools&panel=sdkstools-all](https://docs.microsoft.com/en-us/azure/index#pivot=sdkstools&panel=sdkstools-all)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure SDK：[https://docs.microsoft.com/en-us/azure/index#pivot=sdkstools&panel=sdkstools-all](https://docs.microsoft.com/en-us/azure/index#pivot=sdkstools&panel=sdkstools-all)
