- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Building a Cloud-Native Use Case on a Hybrid Cloud Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在混合云环境中构建云原生用例
- en: 'It has been a wonderful journey so far! We walked through so much content in
    this book already, from OpenShift architecture to Pipelines, GitOps, and multi-cloud
    tools! We are now reaching our main goal with this book, which is helping you
    to make the best decisions and implement a good hybrid/multi-cloud strategy for
    your OpenShift footprint. To wrap up this book with helpful content, we will make
    a comprehensive review using a practical approach to building and deploying an
    application using most features we covered during this book: OpenShift Pipelines
    (Tekton), OpenShift GitOps (ArgoCD), Advanced Cluster Management, Quay, and Advanced
    Cluster Security.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这是一次美妙的旅程！我们已经通过这本书了解了很多内容，从OpenShift架构到Pipelines、GitOps和多云工具！现在我们即将达到本书的主要目标——帮助您做出最佳决策，并为您的OpenShift平台实施一个好的混合云/多云策略。为了以有用的内容总结本书，我们将采取一种实践的方法，全面回顾并构建和部署一个应用程序，涵盖本书中讨论的大部分功能：OpenShift
    Pipelines（Tekton）、OpenShift GitOps（ArgoCD）、高级集群管理、Quay和高级集群安全。
- en: 'Therefore, you will find the following in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您将在本章中找到以下内容：
- en: Use case description
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例描述
- en: Application build using OpenShift Pipelines and S2I
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OpenShift Pipelines和S2I构建应用程序
- en: Application deployment using OpenShift Pipelines and GitOps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OpenShift Pipelines和GitOps进行应用程序部署
- en: Adding security checks in the building and deployment process
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建和部署过程中添加安全检查
- en: Provisioning and managing multiple clusters
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供和管理多个集群
- en: Deploying an application into multiple clusters
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序部署到多个集群中
- en: So, what are we waiting for? Let’s play now!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们在等待什么呢？现在就开始吧！
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The source code used in this chapter is available at [https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter14](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter14).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的源代码可以在[https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter14](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter14)获取。
- en: Use case description
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例描述
- en: To be a bit closer to what you see in the real world, this time we are going
    to use a Java application, using **Quarkus**, which is a great option to build
    modern, cloud-native applications with Java. Look at the references in the *Further
    reading* section of this chapter for more information about **Quarkus**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更贴近实际情况，这次我们将使用Java应用程序，使用**Quarkus**，它是构建现代云原生Java应用程序的绝佳选择。有关**Quarkus**的更多信息，请参阅本章的*进一步阅读*部分中的参考资料。
- en: 'Our application source code was extracted from the *Getting started with Quarkus*
    sample; see reference for it in the *Further reading* section of this chapter.
    During this chapter, we will create a CI/CD pipeline that will do the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序源代码来自*Quarkus入门示例*；请参考本章的*进一步阅读*部分了解更多信息。在本章中，我们将创建一个CI/CD管道，执行以下操作：
- en: Build the application using s2i to generate Java binaries.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用s2i构建应用程序，生成Java二进制文件。
- en: Push the container image to Quay.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器镜像推送到Quay。
- en: Run a security scan on the image using Advanced Cluster Security.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用高级集群安全对镜像进行安全扫描。
- en: Deploy the application on the local cluster using ArgoCD.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ArgoCD在本地集群上部署应用程序。
- en: Deploy the application on multiple remote clusters using ArgoCD and Advanced
    Cluster Management.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ArgoCD和高级集群管理将应用程序部署到多个远程集群。
- en: We are going to use Advanced Cluster Management to make all OpenShift clusters
    compliant with a standard policy we defined for them as well. For the sake of
    learning and simplicity, we are going to build the pipeline and other objects
    in sequential phases, like building blocks that are added to build a house.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用高级集群管理来使所有OpenShift集群符合我们为它们定义的标准策略。为了便于学习和简化操作，我们将按顺序构建管道和其他对象，就像构建房屋时逐步添加构件一样。
- en: '![Figure 14.1 – Comprehensive review - Building blocks ](img/B18015_14_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图14.1 – 综合回顾 - 构建块](img/B18015_14_01.jpg)'
- en: Figure 14.1 – Comprehensive review - Building blocks
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 – 综合回顾 - 构建块
- en: 'We assume that you have access to an OpenShift cluster, which we will call
    the Hub cluster, with enough resources and with the following tools already installed:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您可以访问一个OpenShift集群，我们称之为Hub集群，该集群具有足够的资源，并且已经安装了以下工具：
- en: OpenShift Pipelines
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift Pipelines
- en: OpenShift GitOps
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift GitOps
- en: Advanced Cluster Management
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级集群管理
- en: Advanced Cluster Security
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级集群安全
- en: Quay
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quay
- en: The `oc` command line installed and connected to the Hub cluster
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装并连接到 Hub 集群的`oc`命令行工具
- en: We will also deploy additional single node clusters on AWS to be used as managed
    remote clusters, to exercise the application deployment into multiple clusters.
    If you haven’t installed these tools yet, refer to the installation process of
    each from *Chapters 9* to *13* of this book.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在 AWS 上部署额外的单节点集群，作为托管的远程集群，进行多集群的应用程序部署。如果您还没有安装这些工具，请参考本书第*9*到*13*章中的安装过程。
- en: 'The source code used in this chapter is available at our GitHub repository:
    [https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter14](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter14).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的源代码可以在我们的 GitHub 仓库中找到：[https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter14](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook/tree/main/chapter14)。
- en: 'Let’s start by digging into the first building block: the application build.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从深入了解第一个构建模块开始：应用程序构建。
- en: Application build using OpenShift Pipelines and S2I
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenShift Pipelines 和 S2I 进行应用程序构建
- en: 'For this step, we are going to use the `quarkus-build` pipeline that you can
    find in the `chapter14/Build/Pipeline/quarkus-build.yaml` file. This pipeline
    is very straightforward and explained in the following diagram:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此步骤，我们将使用`quarkus-build`管道，您可以在`chapter14/Build/Pipeline/quarkus-build.yaml`文件中找到该管道。这个管道非常简单，并在下面的图中进行了解释：
- en: '![Figure 14.2 – Pipeline to build a Java Quarkus application ](img/B18015_14_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.2 – 用于构建 Java Quarkus 应用程序的管道](img/B18015_14_02.jpg)'
- en: Figure 14.2 – Pipeline to build a Java Quarkus application
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – 用于构建 Java Quarkus 应用程序的管道
- en: 'In this pipeline we are using pre-existing ClusterTasks to do all the work:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个管道中，我们使用了现有的 ClusterTasks 来完成所有工作：
- en: '`git-clone`: Used to clone the Git repository.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git-clone`：用于克隆 Git 仓库。'
- en: '`s2i-java`: Build the Java source code using S2I and Buildah to generate the
    image and push it to the Quay registry. S2I is a very convenient way to build
    code from many different languages, such as Java, Python, Node.js, and others.
    See the *Further reading* section of this chapter for more information about S2I.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s2i-java`：使用 S2I 和 Buildah 构建 Java 源代码，生成镜像并推送到 Quay 注册表。S2I 是一种非常便捷的方式，用于从许多不同语言（如
    Java、Python、Node.js 等）构建代码。有关 S2I 的更多信息，请参见本章的*进一步阅读*部分。'
- en: '`openshift-client`: Used to run the manifests that deploy the application.
    Application manifests use **Kustomize** to declare the Kubernetes manifest. We
    covered **Kustomize** in [*Chapter 10*](B18015_10.xhtml#_idTextAnchor204), *OpenShift
    GitOps – ArgoCD*, of this book; if you didn’t read it yet, we strongly recommend
    you to do so now and then get back here to perform the steps in this chapter.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openshift-client`：用于运行部署应用程序的清单。应用程序清单使用**Kustomize**来声明 Kubernetes 清单。我们在本书的[*第
    10 章*](B18015_10.xhtml#_idTextAnchor204)《OpenShift GitOps – ArgoCD》中介绍了**Kustomize**；如果您还没有阅读，强烈建议您先阅读该章节，然后再回来执行本章中的步骤。'
- en: 'Now let’s create and run this pipeline. If you haven’t done it yet, fork this
    repository to your GitHub account: [https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook).
    After you forked it, follow the instructions in this section to create and run
    this pipeline:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建并运行这个管道。如果您还没有操作过，请将此仓库分叉到您的 GitHub 账户：[https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook](https://github.com/PacktPublishing/OpenShift-Multi-Cluster-Management-Handbook)。分叉后，按照本节中的说明创建并运行此管道：
- en: 'Clone the repository in your machine:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的机器上克隆该仓库：
- en: '[PRE0]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following script and follow the instructions to change the references
    from the original repository (`PacktPublishing`) to your forked repository:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下脚本并按照说明将原始仓库（`PacktPublishing`）的引用更改为您分叉的仓库：
- en: '[PRE1]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the following commands to create the namespace and the pipeline:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来创建命名空间和管道：
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should be able to see the pipeline in the OpenShift console, in **Pipelines**
    | **Pipelines** | **Project: chap14-review-cicd**, as you can see in the following
    screenshot:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '您应该能够在 OpenShift 控制台中看到该管道，路径为**Pipelines** | **Pipelines** | **Project: chap14-review-cicd**，如以下截图所示：'
- en: '![Figure 14.3 – Build pipeline created ](img/B18015_14_03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.3 – 创建的构建管道](img/B18015_14_03.jpg)'
- en: Figure 14.3 – Build pipeline created
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3 – 创建的构建管道
- en: 'You can now run the pipeline either using the web interface or through the
    terminal. To do so from your terminal, run the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以通过 Web 界面或终端运行管道。要通过终端运行，请执行以下命令：
- en: '[PRE3]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note about Image Registry
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关于镜像注册表的说明
- en: This pipeline uses an external registry to push the resulting image. To be able
    to push an image to the registry, you need to link a secret that contains the
    registry credentials with the `pipeline` ServiceAccount. If you don’t do it before
    running the pipeline, you will notice that it will fail in the `build` task. We
    are using Quay in this chapter, but you can use any external image registry, such
    as Nexus, Amazon Elastic Container Registry, Docker Hub, or any other. If you
    decide to use Quay, you need to create a robot account, give it write permissions
    in the image repository, and import the secret to the namespace. Next, you will
    find out how to do it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该管道使用外部注册表来推送结果镜像。为了能够将镜像推送到注册表，你需要将包含注册表凭证的密钥与 `pipeline` ServiceAccount 链接。如果在运行管道之前没有这样做，你会发现它会在
    `build` 任务中失败。在本章中我们使用的是 Quay，但你也可以使用任何外部镜像注册表，如 Nexus、Amazon Elastic Container
    Registry、Docker Hub 或其他。如果你决定使用 Quay，你需要创建一个机器人账户，给它在镜像仓库中的写权限，并将密钥导入到命名空间。接下来，你将了解如何操作。
- en: See next how to configure your Quay repository and link the credentials to the
    `pipeline` ServiceAccount.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来请查看如何配置你的 Quay 仓库，并将凭证与 `pipeline` ServiceAccount 链接。
- en: Configuring the image registry
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置镜像注册表
- en: 'After you have created a new repository on Quay, follow these steps to configure
    it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Quay 上创建新仓库后，按照以下步骤配置它：
- en: 'Access the **Settings** tab of the repository and access the **Create robot
    account** link in the **User and Robot Permissions** section:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问仓库的**设置**标签，并进入**用户和机器人权限**部分，点击**创建机器人账户**链接：
- en: '![Figure 14.4 – Create a robot account ](img/B18015_14_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.4 – 创建机器人账户](img/B18015_14_04.jpg)'
- en: Figure 14.4 – Create a robot account
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4 – 创建机器人账户
- en: 'Give it any name and click on the **Create robot account** button:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给它任意名称并点击**创建机器人账户**按钮：
- en: '![Figure 14.5 – Create a robot account ](img/B18015_14_05.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.5 – 创建机器人账户](img/B18015_14_05.jpg)'
- en: Figure 14.5 – Create a robot account
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.5 – 创建机器人账户
- en: 'Then, change the permission to **Write** and click on **Add Permission**:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，修改权限为**写**并点击**添加权限**：
- en: '![Figure 14.6 – Set Write permissions ](img/B18015_14_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.6 – 设置写权限](img/B18015_14_06.jpg)'
- en: Figure 14.6 – Set Write permissions
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.6 – 设置写权限
- en: 'Click on the robot account link to download the secret that we will use to
    link with the pipeline ServiceAccount:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击机器人账户链接，下载我们将用来与管道 ServiceAccount 链接的密钥：
- en: '![Figure 14.7 – Robot account ](img/B18015_14_07.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.7 – 机器人账户](img/B18015_14_07.jpg)'
- en: Figure 14.7 – Robot account
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.7 – 机器人账户
- en: 'Download the secret by clicking on the **Download <robot-name>-secret.yml**
    link in the **Kubernetes Secret** tab:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**下载 <robot-name>-secret.yml**链接，下载密钥文件，位置在**Kubernetes 密钥**标签中：
- en: '![Figure 14.8 – Download Quay credentials ](img/B18015_14_08.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.8 – 下载 Quay 凭证](img/B18015_14_08.jpg)'
- en: Figure 14.8 – Download Quay credentials
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.8 – 下载 Quay 凭证
- en: With the secret YAML file in hand, you can proceed with its creation on OpenShift.
    See next how to do it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 拿到密钥的 YAML 文件后，你可以继续在 OpenShift 上创建它。接下来将展示如何操作。
- en: Linking image registry credentials
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接镜像注册凭证
- en: 'Now that we already have the secret file in our workspace, run the following
    commands to create the secret and link it to the pipeline ServiceAccount. Alternatively,
    you can just run the `link-image-registry-secret.sh` script from the GitHub repository
    that we prepared for you, which will do this same process:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经在工作区中拥有密钥文件，现在可以运行以下命令来创建密钥并将其链接到管道 ServiceAccount。或者，你也可以直接运行我们为你准备的
    GitHub 仓库中的 `link-image-registry-secret.sh` 脚本，它会执行同样的操作：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you faced the error mentioned in the build task of the pipeline, you can
    now run it again by running the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在管道的构建任务中遇到错误，现在可以通过运行以下命令再次运行它：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now you should see the pipeline finishing successfully, as you can see in the
    following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能看到管道成功完成，如下截图所示：
- en: '![Figure 14.9 – Build pipeline run successfully ](img/B18015_14_09.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.9 – 构建管道成功运行](img/B18015_14_09.jpg)'
- en: Figure 14.9 – Build pipeline run successfully
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.9 – 构建管道成功运行
- en: After the pipeline runs successfully, you may want to see what the image looks
    like on Quay.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 管道成功运行后，你可能想查看镜像在 Quay 上的样子。
- en: Checking the image on Quay
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看 Quay 上的镜像
- en: 'If you are using Quay, at this stage, you should be able to see and inspect
    the image there:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Quay，此时您应该能够在其中查看并检查镜像：
- en: '![Figure 14.10 – Image on Quay, known vulnerabilities detected automatically
    ](img/B18015_14_10.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图14.10 – Quay上的镜像，已自动检测到已知漏洞](img/B18015_14_10.jpg)'
- en: Figure 14.10 – Image on Quay, known vulnerabilities detected automatically
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.10 – Quay上的镜像，已自动检测到已知漏洞
- en: As we can see, Quay detected automatically that this image has some known vulnerabilities.
    We are going to fix these vulnerabilities further in this chapter, but it is important
    now that you observe and understand how easy it is to push images and start checking
    them automatically against known vulnerabilities.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Quay自动检测到此镜像存在一些已知的漏洞。我们将在本章中进一步修复这些漏洞，但现在重要的是，您要观察并理解推送镜像并自动检查已知漏洞是多么容易。
- en: Now that we already have the building pipeline of our application working, let’s
    evolve it to use ArgoCD as the deployment tool, leveraging GitOps practices.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经让应用的构建管道正常工作，接下来让我们将其演变为使用ArgoCD作为部署工具，并利用GitOps实践。
- en: Application deployment using OpenShift Pipelines and GitOps
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenShift管道和GitOps进行应用部署
- en: This time, we are going to use ArgoCD to deploy the application instead of directly
    running the Kubernetes manifests. The pipeline is basically the same, but now
    the deploy task will run a YAML file that creates an ArgoCD application and wait
    until the application becomes healthy.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将使用ArgoCD来部署应用，而不是直接运行Kubernetes清单。管道基本相同，但现在部署任务将运行一个YAML文件，创建一个ArgoCD应用，并等待应用变为健康状态。
- en: '![Figure 14.11 – Pipeline to build a Java Quarkus application and deploy it
    using ArgoCD ](img/B18015_14_11.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图14.11 – 用于构建Java Quarkus应用并使用ArgoCD部署的管道](img/B18015_14_11.jpg)'
- en: Figure 14.11 – Pipeline to build a Java Quarkus application and deploy it using
    ArgoCD
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.11 – 用于构建Java Quarkus应用并使用ArgoCD部署的管道
- en: 'Run the following command to create and run the pipeline:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以创建并运行管道：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A new `PipelineRun` will be created to build the container image and create
    the ArgoCD application that will deploy the application. You will see the following
    if everything works well:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建一个新的`PipelineRun`，用于构建容器镜像并创建ArgoCD应用程序来部署应用。只要一切正常，您将看到如下所示：
- en: '![Figure 14.12 – Task deployment using ArgoCD ](img/B18015_14_12.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图14.12 – 使用ArgoCD的任务部署](img/B18015_14_12.jpg)'
- en: Figure 14.12 – Task deployment using ArgoCD
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.12 – 使用ArgoCD的任务部署
- en: 'Access the ArgoCD console to check the application deployment from there; you
    should see something similar to the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 访问ArgoCD控制台，检查那里的应用部署；您应该能看到类似于下面的截图：
- en: '![Figure 14.13 – Application in ArgoCD ](img/B18015_14_13.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图14.13 – ArgoCD中的应用](img/B18015_14_13.jpg)'
- en: Figure 14.13 – Application in ArgoCD
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.13 – ArgoCD中的应用
- en: 'You can find instructions about how to access the ArgoCD console in [*Chapter
    10*](B18015_10.xhtml#_idTextAnchor204), *OpenShift GitOps – ArgoCD*. As a reminder,
    see next the commands to get the ArgoCD URL and admin password:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[*第10章*](B18015_10.xhtml#_idTextAnchor204)中找到关于如何访问ArgoCD控制台的说明，*OpenShift
    GitOps – ArgoCD*。提醒一下，以下是获取ArgoCD URL和管理员密码的命令：
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now our pipeline already builds the application, pushes it to Quay, and deploys
    it using ArgoCD. The next step is to bring Advanced Cluster Security to add a
    security check step in our pipeline. See next how to do it.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的管道已经构建了应用，推送到了Quay，并通过ArgoCD进行了部署。下一步是将高级集群安全引入，以便在管道中添加一个安全检查步骤。接下来看看如何操作。
- en: Adding security checks in the building and deployment process
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在构建和部署过程中添加安全检查
- en: This time, we will add a new step to perform a security check in the image that
    has been built. We are going to use Advanced Cluster Security for that. To successfully
    use it, you should have Advanced Cluster Security installed and the local cluster
    configured as a secured cluster. Check [*Chapter 12*](B18015_12.xhtml#_idTextAnchor251),
    *OpenShift Multi-Cluster Security*, to see how to do it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将在已经构建的镜像中添加一个新的步骤进行安全检查。我们将使用高级集群安全（Advanced Cluster Security）来实现这一点。要成功使用它，您应该已经安装了高级集群安全，并将本地集群配置为安全集群。请参考[*第12章*](B18015_12.xhtml#_idTextAnchor251)，*OpenShift多集群安全*，查看如何操作。
- en: 'See next what our pipeline looks like now:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来查看我们现在的管道是什么样的：
- en: '![Figure 14.14 – Pipeline with security checks ](img/B18015_14_14.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图14.14 – 带有安全检查的管道](img/B18015_14_14.jpg)'
- en: Figure 14.14 – Pipeline with security checks
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.14 – 带有安全检查的管道
- en: 'Therefore, the following task has been added to the pipeline:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，以下任务已添加到管道中：
- en: '`security-check`: Uses ACS APIs to check the image against existing security
    policies defined in ACS.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security-check`：使用 ACS API 检查镜像是否符合 ACS 中定义的现有安全策略。'
- en: To simulate security issues, we will also use a custom `s2i-java` task that
    uses an old `ubi-openjdk` version, which contains many known vulnerabilities.
    To fix the issues, we will change the build strategy to use a Dockerfile that
    uses the latest version of the RHEL UBI image and additional security fixes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟安全问题，我们还将使用一个自定义的 `s2i-java` 任务，该任务使用一个旧版本的 `ubi-openjdk`，该版本包含许多已知漏洞。为了解决这些问题，我们将构建策略更改为使用一个
    Dockerfile，该文件使用最新版本的 RHEL UBI 镜像并附加了安全修复。
- en: 'Follow the instructions in this section to create and run this pipeline:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本节中的说明创建并运行此流水线：
- en: 'Before we get into the pipeline, we need to configure the integration between
    the pipeline and ACS. To do so, access the **Advanced Cluster Security** dashboard
    and navigate to **Platform Configuration** | **Integrations** | **Authentication
    Tokens**, and click on **API Token**:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们进入流水线之前，需要配置流水线与 ACS 之间的集成。为此，访问 **高级集群安全** 仪表盘，导航到 **平台配置** | **集成** | **身份验证令牌**，然后点击
    **API 令牌**：
- en: '![Figure 14.15 – Creating ACS API Token](img/B18015_14_15.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.15 – 创建 ACS API 令牌](img/B18015_14_15.jpg)'
- en: Figure 14.15 – Creating ACS API Token
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.15 – 创建 ACS API 令牌
- en: 'Click on the **Generate token** button:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **生成令牌** 按钮：
- en: '![Figure 14.16 – Generate token ](img/B18015_14_16.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.16 – 生成令牌](img/B18015_14_16.jpg)'
- en: Figure 14.16 – Generate token
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.16 – 生成令牌
- en: 'Fill out a name and select **Continuous Integration** in the **Role** field:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写名称并在 **角色** 字段中选择 **持续集成**：
- en: '![Figure 14.17 – Generate token for CI ](img/B18015_14_17.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.17 – 为 CI 生成令牌](img/B18015_14_17.jpg)'
- en: Figure 14.17 – Generate token for CI
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.17 – 为 CI 生成令牌
- en: 'Copy the token that has been generated. We are going to use it in a secret
    that will be used by the pipeline task to authenticate on ACS APIs:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制已生成的令牌。我们将在一个机密中使用它，该机密将被流水线任务用来在 ACS API 上进行身份验证：
- en: '![Figure 14.18 – Copy API Token ](img/B18015_14_18.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.18 – 复制 API 令牌](img/B18015_14_18.jpg)'
- en: Figure 14.18 – Copy API Token
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.18 – 复制 API 令牌
- en: 'Now let’s create the secret. Run the following command using the token from
    the previous step and the ACS central endpoint. Do *not* use `http(s)` in the
    `rox_central_endpoint` host:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建机密。使用上一步中的令牌和 ACS 中央端点运行以下命令。请 *不要* 在 `rox_central_endpoint` 主机中使用 `http(s)`：
- en: '[PRE8]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we are all set to create and run our pipeline. Run the following commands:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好创建并运行我们的流水线。运行以下命令：
- en: '[PRE9]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see failures in the `security-check` task as we are intentionally
    using an old base image that contains many known vulnerabilities:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到 `security-check` 任务失败，因为我们故意使用了包含许多已知漏洞的旧版基础镜像：
- en: '![Figure 14.19 – Security checks failure ](img/B18015_14_19.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.19 – 安全检查失败](img/B18015_14_19.jpg)'
- en: Figure 14.19 – Security checks failure
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.19 – 安全检查失败
- en: 'Let’s take a look briefly at the errors we have as a result of this task. The
    policies that have failed are the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要看一下由于此任务而产生的错误。失败的策略如下：
- en: '**Fixable Severity at least Important**: As expected (remember that we are
    using now an old base image version), there are several components in the image
    that have important and critical known CVEs.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**至少重要的可修复严重性**：如预期的那样（记住我们现在使用的是旧版本的基础镜像），镜像中有多个组件存在重要和关键的已知 CVE。'
- en: '`ubi-minimal`, which includes `microdnf` as a package manager.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ubi-minimal`，其中包括 `microdnf` 作为包管理器。'
- en: We are going to demonstrate now how to fix these security issues using a Dockerfile
    that addresses all of them.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将演示如何使用一个 Dockerfile 来修复这些安全问题，该文件解决了所有这些问题。
- en: Fixing security issues
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复安全问题
- en: 'To fix the issues, we are going to change our pipeline to use a Dockerfile
    instead of the S2I. To do so we changed the `build` task to use the `buildah`
    ClusterTask instead of `s2i-java`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，我们将修改流水线，使用 Dockerfile 而不是 S2I。为此，我们将 `build` 任务更改为使用 `buildah` 集群任务，而不是
    `s2i-java`：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s take a look at what the highlighted numbers mean:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下突出显示的数字表示的含义：
- en: '**[1]**: The path where the Dockerfile with security fixes is located'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[1]**：包含安全修复的 Dockerfile 的路径'
- en: '`buildah` ClusterTasks that will build the application using the given Dockerfile'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buildah` 集群任务将使用给定的 Dockerfile 构建应用程序'
- en: 'Let’s also take a look at the Dockerfile to understand the security fixes.
    This file is located at `quarkus-getting-started/src/main/docker/Dockerfile.multistage`
    in our GitHub:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还看一下 Dockerfile 以理解安全修复。这个文件位于 `quarkus-getting-started/src/main/docker/Dockerfile.multistage`，在我们的
    GitHub 上：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s take a look at what the highlighted numbers mean:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下高亮的数字表示什么意思：
- en: '`ubi-minimal` as the base image.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ubi-minimal` 作为基础镜像。'
- en: '**[2]**: Update OS packages to the latest versions.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[2]**：将操作系统包更新到最新版本。'
- en: '**[3]**: Remove the package manager from the image.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[3]**：从镜像中移除包管理器。'
- en: The lines highlighted will make sure the most up-to-date components, which contain
    the most recent security fixes, are in use, and also the package manager is removed
    from the image before it is packaged.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮的行确保了使用的是最新的组件，这些组件包含了最新的安全修复，同时包管理器在打包前已经从镜像中移除。
- en: 'Now, let’s create this new pipeline version and runs it to check whether the
    security issues have been resolved. To do so, run the following commands:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建这个新的管道版本并运行它，检查安全问题是否已解决。为此，运行以下命令：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This time, the pipeline should be finished successfully, as there are no security
    issues detected anymore in our container image:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，管道应该能够成功完成，因为我们的容器镜像中再也没有检测到安全问题：
- en: '![Figure 14.20 – Security issues fixed ](img/B18015_14_20.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.20 – 安全问题已修复](img/B18015_14_20.jpg)'
- en: Figure 14.20 – Security issues fixed
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.20 – 安全问题已修复
- en: 'You can optionally check ACS now to investigate whether there are still other
    violations that may be fixed later. If you want to do so, navigate to the `Namespace:
    chap14-review-cicd` and `Deployment: quarkus-quickstarts`. You should still see
    some minor violations, as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，您可以选择检查 ACS，看看是否还有其他可以稍后修复的违规问题。如果您想这么做，请导航到 `Namespace: chap14-review-cicd`
    和 `Deployment: quarkus-quickstarts`。您仍然应该看到一些小的违规问题，具体如下：'
- en: '![Figure 14.21 – ACS Violations ](img/B18015_14_21.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.21 – ACS 违规](img/B18015_14_21.jpg)'
- en: Figure 14.21 – ACS Violations
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.21 – ACS 违规
- en: 'Do you remember that Quay reported some vulnerabilities in our image before?
    Look at it now to see our new image version:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得之前 Quay 报告过我们镜像中的一些漏洞吗？现在看看它，看看我们新版本的镜像：
- en: '![Figure 14.22 – Quay security scan ](img/B18015_14_22.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.22 – Quay 安全扫描](img/B18015_14_22.jpg)'
- en: Figure 14.22 – Quay security scan
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.22 – Quay 安全扫描
- en: As you can see, the newer image has no security issues detected. In this section,
    we added a security check in our pipeline and fixed some vulnerabilities detected
    by this pipeline. In the next section, our pipeline will be able to deploy our
    application against multiple clusters, using ArgoCD and Advanced Cluster Management.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，较新的镜像没有检测到安全问题。在本节中，我们在管道中添加了安全检查，并修复了通过此管道检测到的一些漏洞。在下一节中，我们的管道将能够使用 ArgoCD
    和高级集群管理来部署我们的应用程序到多个集群中。
- en: Provisioning and managing multiple clusters
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和管理多个集群
- en: 'We haven’t touched so far on the hybrid or multi-cluster side of the house.
    This is what we are going to add now: *deployment into multiple remote clusters*.
    To do so, we are going to use Advanced Cluster Management to provision new clusters
    and also help us to deploy the application in them.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有涉及混合集群或多集群方面的内容。接下来我们将要添加的是：*部署到多个远程集群*。为此，我们将使用高级集群管理来创建新集群，并帮助我们在这些集群中部署应用程序。
- en: Provisioning new clusters
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新集群
- en: We are going to use AWS to host two new clusters that will be used as remote
    clusters to exercise our pipeline. For the sake of saving resources, we are going
    to use single node clusters, so we don’t need to get the cost of many servers
    for this exercise. If you already have clusters available, you can alternatively
    import the existing clusters, instead of provisioning new ones. You can find,
    in the *Further reading* section of this chapter, a link that contains instructions
    about how to import a cluster on Advanced Cluster Management.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 AWS 来托管两个新集群，这些集群将作为远程集群用于测试我们的管道。为了节省资源，我们将使用单节点集群，因此我们不需要为此练习购买多个服务器。如果您已经有可用的集群，可以选择导入现有的集群，而不是创建新的集群。您可以在本章的
    *进一步阅读* 部分找到一个链接，里面包含了如何在高级集群管理中导入集群的说明。
- en: 'To provision a single node cluster using ACM, you need to add the AWS credentials,
    navigate to the **Credentials** menu, and click on the **Add credential** button:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 ACM 创建单节点集群，您需要添加 AWS 凭证，进入 **凭证** 菜单，然后点击 **添加凭证** 按钮：
- en: '![Figure 14.23 – Adding AWS credentials ](img/B18015_14_23.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.23 – 添加 AWS 凭证](img/B18015_14_23.jpg)'
- en: Figure 14.23 – Adding AWS credentials
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.23 – 添加 AWS 凭证
- en: 'Follow the wizard and fill out all required fields. You need to provide your
    pull secret, which is available at [https://console.redhat.com/openshift/downloads](https://console.redhat.com/openshift/downloads):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随向导并填写所有必填字段。你需要提供拉取密钥，可以在[https://console.redhat.com/openshift/downloads](https://console.redhat.com/openshift/downloads)找到：
- en: '![Figure 14.24 – Adding a new credential ](img/B18015_14_24.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.24 – 添加新凭证](img/B18015_14_24.jpg)'
- en: Figure 14.24 – Adding a new credential
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.24 – 添加新凭证
- en: 'After you have created the AWS credential, access the **Infrastructure** |
    **Clusters** feature and click on the **Create cluster** button:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 AWS 凭证后，访问 **基础设施** | **集群** 功能并点击 **创建集群** 按钮：
- en: '![Figure 14.25 – Provisioning a new cluster ](img/B18015_14_25.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.25 – 配置新集群](img/B18015_14_25.jpg)'
- en: Figure 14.25 – Provisioning a new cluster
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.25 – 配置新集群
- en: 'Select AWS as the infrastructure provider and fill out the wizard with the
    following data but do *not* hit the **Create** button in the last step of the
    wizard:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 AWS 作为基础设施提供者，并填写向导中的以下数据，但在最后一步不要点击**创建**按钮：
- en: '**Infrastructure** provider: **Amazon Web Services**'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施**提供者：**Amazon Web Services**'
- en: '**Infrastructure provider credential**: **aws** (name of the credential that
    you created in the previous step)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施提供者凭证**：**aws**（你在上一步创建的凭证名称）'
- en: '`ocp-prd1`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ocp-prd1`'
- en: '**Cluster set**: **default**'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群组**：**默认**'
- en: '**Base DNS domain**: Your public domain on AWS (for example, example.com)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础 DNS 域名**：你在 AWS 上的公共域名（例如，example.com）'
- en: '**Release image**: Select the most recent'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布镜像**：选择最新的'
- en: '`env=prod`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env=prod`'
- en: '`m5.2xlarge`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m5.2xlarge`'
- en: '**Networking**: Leave as-is'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：保持不变'
- en: '**Proxy**: Leave unselected'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理**：保持未选中'
- en: '**Automation**: Leave blank'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：保持空白'
- en: 'On the **Review** page, select the **YAML: On** button:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **审核** 页面上，选择 **YAML：开启** 按钮：
- en: '![Figure 14.26 – Edit YAML ](img/B18015_14_26.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.26 – 编辑 YAML](img/B18015_14_26.jpg)'
- en: Figure 14.26 – Edit YAML
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.26 – 编辑 YAML
- en: 'In the YAML file, edit `MachinePool` and add the statement `skipMachinePool:
    true`, as you can see in the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '在 YAML 文件中，编辑 `MachinePool` 并添加语句 `skipMachinePool: true`，如下所示：'
- en: '![Figure 14.27 – Editing MachinePool ](img/B18015_14_27.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.27 – 编辑 MachinePool](img/B18015_14_27.jpg)'
- en: Figure 14.27 – Editing MachinePool
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.27 – 编辑 MachinePool
- en: 'Click in the `install-config` tab and change master replicas to `1` and compute
    replicas to `0`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `install-config` 标签，并将主节点副本数更改为 `1`，计算节点副本数更改为 `0`：
- en: '![Figure 14.28 – Editing install-config ](img/B18015_14_28.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.28 – 编辑 install-config](img/B18015_14_28.jpg)'
- en: Figure 14.28 – Editing install-config
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.28 – 编辑 install-config
- en: 'Now hit the `ocp-prd2` with the same parameters used previously. In the end,
    you should see two clusters being provisioned, as you can see in the following
    screenshot:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用之前相同的参数，点击`ocp-prd2`。最终，你应该能看到两个集群正在被配置，如下图所示：
- en: '![](img/B18015_14_29.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18015_14_29.jpg)'
- en: Figure 14.29 – Clusters being created
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.29 – 集群创建中
- en: The provisioning will take about 40 minutes. Continue next when you see both
    clusters marked as **Ready**.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 配置过程大约需要 40 分钟。当你看到两个集群标记为**已就绪**时，继续下一步。
- en: Cluster governance
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群治理
- en: 'One helpful feature that ACM provides is cluster governance using policies.
    We already covered this feature in [*Chapter 11*](B18015_11.xhtml#_idTextAnchor229),
    *OpenShift Multi-Cluster GitOps and Management*. If you didn’t read it yet, we
    strongly recommend you check that chapter. We are going to deploy the policy that
    is in the `Governance` folder of our GitHub repository to inform if the etcd keystores
    of managed clusters are encrypted or not. To do so, run the following command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: ACM 提供的一个有用功能是使用策略进行集群治理。我们已经在[*第 11 章*](B18015_11.xhtml#_idTextAnchor229)《OpenShift
    多集群 GitOps 和管理》中介绍了这个功能。如果你还没有阅读，强烈建议你查看那一章。我们将部署位于 GitHub 仓库中`Governance`文件夹下的策略，以便检查托管集群的
    etcd 密钥存储是否加密。为此，请运行以下命令：
- en: '[PRE13]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Wait a few seconds and access the **Governance** feature on ACM to check the
    compliance of the clusters:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 等待几秒钟，访问 ACM 上的 **治理** 功能，检查集群的合规性：
- en: '![Figure 14.30 – Cluster compliance ](img/B18015_14_30.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.30 – 集群合规性](img/B18015_14_30.jpg)'
- en: Figure 14.30 – Cluster compliance
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.30 – 集群合规性
- en: Move to the next section to see how to deploy our sample application into multiple
    remote clusters at once.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 移动到下一部分，查看如何将我们的示例应用同时部署到多个远程集群中。
- en: Deploying an application into multiple clusters
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用部署到多个集群中
- en: Now that we already have multiple remote clusters, we can go ahead and use ACM
    and ArgoCD to make our pipeline able to deploy into all of them at once. We are
    going to change the deploy task to use an `ApplicationSet` object that will be
    responsible for deploying our application into both OpenShift remote clusters
    at once.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有多个远程集群，我们可以继续使用 ACM 和 ArgoCD 使我们的流水线能够同时部署到所有集群中。我们将修改部署任务，使用一个 `ApplicationSet`
    对象，它将负责将我们的应用程序同时部署到两个 OpenShift 远程集群中。
- en: '![Figure 14.31 – Pipeline with deployment into multiple clusters ](img/B18015_14_31.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.31 – 支持多集群部署的流水线](img/B18015_14_31.jpg)'
- en: Figure 14.31 – Pipeline with deployment into multiple clusters
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.31 – 支持多集群部署的流水线
- en: 'To make ArgoCD aware of the clusters managed by ACM, we first need to create
    a few objects, such as the `GitOpsCluster` Custom Resource. We covered a detailed
    explanation of these objects in [*Chapter 11*](B18015_11.xhtml#_idTextAnchor229),
    *OpenShift Multi-Cluster GitOps and Management*. Run the following commands to
    create these objects:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 ArgoCD 识别 ACM 管理的集群，我们首先需要创建一些对象，比如 `GitOpsCluster` 自定义资源。我们在[*第 11 章*](B18015_11.xhtml#_idTextAnchor229)，《OpenShift
    多集群 GitOps 与管理》中详细讲解了这些对象。请运行以下命令来创建这些对象：
- en: '[PRE14]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now let’s create and run the pipeline, which uses an `ApplicationSet` object
    to deploy the application into the managed clusters that have the `env=prod` label.
    Remember that we used this label in the clusters we provisioned using ACM. If
    you imported the clusters on ACM, make sure to add the `env=prod` label to them:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建并运行流水线，使用 `ApplicationSet` 对象将应用程序部署到具有 `env=prod` 标签的受管集群中。记住，我们在使用
    ACM 配置集群时已经使用了这个标签。如果你是在 ACM 中导入的集群，请确保为这些集群添加 `env=prod` 标签：
- en: '[PRE15]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When the pipeline finishes, you should now have two new ArgoCD applications
    automatically created by the `ApplicationSet` mechanism:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当流水线完成时，你应该已经有了两个新的 ArgoCD 应用程序，这些应用程序是通过 `ApplicationSet` 机制自动创建的：
- en: '![Figure 14.32 – ArgoCD and ApplicationSet ](img/B18015_14_32.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.32 – ArgoCD 和 ApplicationSet](img/B18015_14_32.jpg)'
- en: Figure 14.32 – ArgoCD and ApplicationSet
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.32 – ArgoCD 和 ApplicationSet
- en: That’s it, we did it! We started with a simple build pipeline that now performs
    security checks and deploys into multiple remote clusters at once!
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们成功了！我们从一个简单的构建流水线开始，现在它已经能够执行安全检查，并且能同时部署到多个远程集群！
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Thank you for being our partner in this journey! We hope the content of this
    book was helpful for you and now you have a good understanding of the topics covered
    in this book. We went through architecture, people, deployment, troubleshooting,
    multi-cluster administration, usage, and security. So much content that we thought
    we wouldn’t have the ability to write it! And if you are still here, we feel that
    my mission with this book is accomplished!
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你成为我们旅程中的伙伴！我们希望这本书的内容对你有所帮助，现在你应该对书中涉及的主题有了很好的理解。我们涵盖了架构、人员、部署、故障排除、多集群管理、使用和安全等内容。这么多内容，起初我们还以为无法写完！如果你还在这里，我们觉得自己这本书的使命已经完成！
- en: 'There is a quote from *Johann Wolfgang von Goethe* that says the following:
    “*Knowing is not enough; we must apply. Willing is not enough; we must do*.” After
    reading this book, we hope you not only learned new things but were also able
    to put them into practice. Following this hybrid cloud journey, you have the opportunity
    to leap in knowledge with didactic examples and content made with great dedication
    from us.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 有一句来自*约翰·沃尔夫冈·冯·歌德*的名言：“*知道是不够的，我们必须应用。愿意是不够的，我们必须做*。” 阅读完这本书后，我们希望你不仅学到了新知识，还能将其付诸实践。通过这段混合云之旅，你有机会通过生动的示例和我们倾注心血的内容，快速提升你的知识水平。
- en: We hope that this book becomes one of your handbooks and will be useful to you
    for planning and executing models suitable for the enterprise, bringing multiple
    options to use, implementations, and good insights to leverage your knowledge
    and your career.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这本书能够成为你的一本手册，并对你在规划和执行适合企业的模型时有所帮助，提供多种可用选项、实现方案以及良好的洞察，助力你的知识积累和职业发展。
- en: 'To wrap up the content of this chapter, we designed the following diagram to
    serve as a shortcut to the central themes of each chapter and see the entire journey
    we have gone through together:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结本章的内容，我们设计了以下图表，作为每一章核心主题的快捷方式，帮助你回顾我们一起走过的整个旅程：
- en: '![Figure 14.33 – The book journey ](img/B18015_14_33.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.33 – 本书旅程](img/B18015_14_33.jpg)'
- en: Figure 14.33 – The book journey
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.33 – 本书旅程
- en: We have almost reached the end of this book, but we are not completely done
    yet. We have prepared for you the last chapter with some suggestions as to where
    you can go next after this book, to keep learning and growing your OpenShift and
    Kubernetes skills.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 本书已接近尾声，但我们还没有完全结束。我们为您准备了最后一章，提供了一些建议，帮助您在本书之后继续学习和提升您的 OpenShift 和 Kubernetes
    技能。
- en: We encourage you to move to the next chapter and look at the training and other
    content we suggest there.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您继续阅读下一章，查看我们在其中建议的培训和其他内容。
- en: Further reading
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Looking for more information? Check the following references to get more information:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 想获取更多信息吗？请查看以下参考资料以获取更多信息：
- en: '*Quarkus*:'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Quarkus*：'
- en: '*Main page:* [https://quarkus.io/](https://quarkus.io/)'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*主页:* [https://quarkus.io/](https://quarkus.io/)'
- en: '*Quarkus getting started sample*: [https://github.com/quarkusio/quarkus-quickstarts/tree/main/getting-started](https://github.com/quarkusio/quarkus-quickstarts/tree/main/getting-started)'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Quarkus 入门示例*: [https://github.com/quarkusio/quarkus-quickstarts/tree/main/getting-started](https://github.com/quarkusio/quarkus-quickstarts/tree/main/getting-started)'
- en: '*S2i:*'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*S2i*：'
- en: '*GitHub* page: [https://github.com/openshift/source-to-image](https://github.com/openshift/source-to-image)'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub* 页面：[https://github.com/openshift/source-to-image](https://github.com/openshift/source-to-image)'
- en: '*How to Create an S2I Builder Image* (blog article): [https://cloud.redhat.com/blog/create-s2i-builder-image](https://cloud.redhat.com/blog/create-s2i-builder-image)'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如何创建 S2I Builder 镜像*（博客文章）：[https://cloud.redhat.com/blog/create-s2i-builder-image](https://cloud.redhat.com/blog/create-s2i-builder-image)'
- en: '*Using Source 2 Image build in Tekton* (blog article): [https://cloud.redhat.com/blog/guide-to-openshift-pipelines-part-2-using-source-2-image-build-in-tekton](https://cloud.redhat.com/blog/guide-to-openshift-pipelines-part-2-using-source-2-image-build-in-tekton)'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Tekton 中使用 Source 2 Image 构建*（博客文章）：[https://cloud.redhat.com/blog/guide-to-openshift-pipelines-part-2-using-source-2-image-build-in-tekton](https://cloud.redhat.com/blog/guide-to-openshift-pipelines-part-2-using-source-2-image-build-in-tekton)'
- en: '*Tekton Hub - S2I*: [https://hub.tekton.dev/tekton/task/s2i](https://hub.tekton.dev/tekton/task/s2i)'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Tekton Hub - S2I*: [https://hub.tekton.dev/tekton/task/s2i](https://hub.tekton.dev/tekton/task/s2i)'
- en: '*Advanced Cluster Management – Importing clusters*: [https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/clusters/managing-your-clusters#importing-a-target-managed-cluster-to-the-hub-cluster](https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/clusters/managing-your-clusters#importing-a-target-managed-cluster-to-the-hub-cluster)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*高级集群管理 – 导入集群*: [https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/clusters/managing-your-clusters#importing-a-target-managed-cluster-to-the-hub-cluster](https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/clusters/managing-your-clusters#importing-a-target-managed-cluster-to-the-hub-cluster)'
- en: '*Advanced Cluster Security – Image check from Tekton Hub*: [https://hub.tekton.dev/tekton/task/stackrox-image-check](https://hub.tekton.dev/tekton/task/stackrox-image-check)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*高级集群安全 – 来自 Tekton Hub 的镜像检查*: [https://hub.tekton.dev/tekton/task/stackrox-image-check](https://hub.tekton.dev/tekton/task/stackrox-image-check)'
- en: Part 5 – Continuous Learning
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5部分 – 持续学习
- en: In this part, you will have some additional content to continue the journey
    to becoming a subject matter expert on OpenShift. Here, you will see a summary
    of the training available on the market to help you with OpenShift’s in-depth
    enablement.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，您将获得一些额外的内容，继续您的 OpenShift 专家之路。在这里，您将看到市场上可用的培训总结，帮助您深入了解 OpenShift
    的启用。
- en: 'This part of the book comprises the following chapter:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分包括以下章节：
- en: '[*Chapter 15*](B18015_15.xhtml#_idTextAnchor308), *What’s Next?*'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第15章*](B18015_15.xhtml#_idTextAnchor308)，*接下来做什么？*'
