- en: Cloud Run Labs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cloud Run 实验室
- en: In this chapter, we will explore some use cases to see how Cloud Run can be
    deployed on **Google Kubernetes Engine** (**GKE**). The most common use cases
    revolve around building web applications, performing deployments, and the need
    for **continuous integration** (**CI**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些使用案例，看看如何在**Google Kubernetes Engine**（**GKE**）上部署 Cloud Run。最常见的使用案例围绕着构建
    Web 应用程序、执行部署以及需要**持续集成**（**CI**）。
- en: The focus of this chapter is to illustrate the wide spectrum of use cases that
    are possible using Cloud Run. This chapter will also show how to perform many
    of the activities required to deploy your container when using this platform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是展示使用 Cloud Run 时可以实现的广泛使用案例。本章还将展示在使用该平台时，如何执行部署容器所需的许多活动。
- en: 'Over the course of this chapter, we will discuss the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章过程中，我们将讨论以下主题：
- en: Building a container
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建容器
- en: Deploying Cloud Run on GKE
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GKE 上部署 Cloud Run
- en: Creating a simple web application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的 Web 应用程序
- en: CI on GKE
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 上的 CI
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete the exercises in this chapter, you will require a Google Cloud Project
    or a Qwiklabs account.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章中的练习，你将需要一个 Google Cloud 项目或一个 Qwiklabs 账户。
- en: You can find the code files of this chapter in the GitHub repository for this
    book in the `ch10` subdirectory at [https://github.com/PacktPublishing/Hands-on-Serverless-Computing-with-Google-Cloud/tree/master/ch10](https://github.com/PacktPublishing/Hands-on-Serverless-Computing-with-Google-Cloud/tree/master/ch10).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书的 GitHub 仓库中找到本章的代码文件，位于 `ch10` 子目录下，链接为 [https://github.com/PacktPublishing/Hands-on-Serverless-Computing-with-Google-Cloud/tree/master/ch10](https://github.com/PacktPublishing/Hands-on-Serverless-Computing-with-Google-Cloud/tree/master/ch10)。
- en: While you are going through the code snippets in this book, you will notice
    that, in a few instances, a few lines from the code/output have been removed and
    replaced with dots (`...`). Ellipses are used to only show relevant code/output.
    The complete code is available on GitHub at the link mentioned previously.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你浏览本书中的代码片段时，你会注意到，在一些实例中，代码或输出的某些行已被删除，并用省略号（`...`）替代。省略号仅用于显示相关的代码或输出。完整的代码可以在之前提到的
    GitHub 链接上找到。
- en: Building a container
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建容器
- en: Building a container for an application should be a familiar activity at this
    point in this book. For the most part, when building an image, we can normally
    rely on existing knowledge to determine how to incorporate a runtime language
    or package. From a personal perspective, I like to containerize applications as
    it provides a consistent and well-understood interface. The isolation from system
    updates and other changes impacting an application is a very common and annoying
    aspect of maintaining a computer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，构建应用程序的容器应该是本书中的一个熟悉的活动。大多数情况下，在构建镜像时，我们通常可以依赖现有的知识来确定如何整合运行时语言或软件包。从个人角度来看，我喜欢将应用程序容器化，因为这提供了一种一致且易于理解的接口。从系统更新和其他变化对应用程序产生影响的隔离是维护计算机时非常常见且令人烦恼的一个方面。
- en: At this point, the assumption is that building images is second nature and the
    next challenge relates to deploying the containers. What your container is actually
    meant to do will probably influence the complexity of the running container. For
    example, running a container with a graphical user interface (potentially) presents
    more issues than one using a command-line interface. Over the course of this chapter,
    we will walk through a couple of examples dedicated to indicating how this process
    can be performed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此时的假设是，构建镜像已是驾轻就熟，接下来的挑战是部署容器。你的容器实际要做什么，可能会影响运行容器的复杂性。例如，运行一个带图形用户界面的容器（潜在地）会比一个使用命令行界面的容器面临更多问题。在本章中，我们将通过几个示例，介绍如何执行这个过程。
- en: Creating a service
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建服务
- en: We will be using Cloud Shell or a local development environment (Cloud SDK)
    to create the next example, which is a fun example to demonstrate how to build
    an application running in a container. In this example, we will develop a simple
    application called **announce** (based on the command-line utility **Boxes**)
    that will display a message on the command line.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Cloud Shell 或本地开发环境（Cloud SDK）来创建下一个示例，这是一个有趣的示例，用于展示如何构建在容器中运行的应用程序。在这个示例中，我们将开发一个简单的应用程序，名为**announce**（基于命令行工具**Boxes**），它将在命令行上显示一条消息。
- en: If you are not familiar with Boxes, it draws ASCII art around text. To begin,
    we want to create an application that can call the Boxes application to output
    some arbitrary text.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉 Boxes，它会在文本周围绘制 ASCII 艺术。首先，我们想要创建一个能够调用 Boxes 应用程序来输出一些任意文本的应用程序。
- en: To commence the example, let's initialize the environment ready to build our
    application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始示例，让我们初始化环境，准备好构建我们的应用程序。
- en: 'Initialize the `npm` package:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化`npm`包：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Edit the `package.json` to add a `start` command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`package.json`以添加`start`命令：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Install the `npm` packages:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`npm`包：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create and edit a file named `index.js`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并编辑一个名为`index.js`的文件：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the main functionality to the `index.js` file:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主要功能添加到`index.js`文件：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can check your application at this stage by just running `npm start` from
    the command line. It won''t do anything spectacular, but it will give you the
    chance to correct any issues in terms of code not working as expected. Assuming
    you don''t have `boxes` installed locally, the output would be similar to the
    following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在命令行中运行`npm start`来检查你的应用程序。它不会做任何惊人的事情，但它会给你机会修正代码中可能存在的任何问题。如果你没有在本地安装`boxes`，输出将类似于以下内容：
- en: '`Message: undefined`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Message: undefined`'
- en: '`Error: Command failed: echo undefined | boxes -d boy`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Error: Command failed: echo undefined | boxes -d boy`'
- en: Don't worry—this is expected and will be corrected with the creation of our
    application image.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心——这是预期的，随着我们应用程序镜像的创建，这个问题会被修正。
- en: 'Create a Dockerfile:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Dockerfile：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Build the image:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建镜像：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the build process is invoked, an output similar to the following will
    be displayed:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建过程启动，类似以下内容的输出将显示：
- en: '![](img/a9c03ce9-6fbb-4a4e-aa23-98e0f5eca765.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9c03ce9-6fbb-4a4e-aa23-98e0f5eca765.png)'
- en: Pushing the image to the Container Registry means we have more control over
    how and where our image can be accessed. Now that the image has been built, we
    can perform an initial test of the container by deploying it locally.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将镜像推送到容器注册表意味着我们可以更好地控制镜像的访问方式和位置。现在镜像已经构建完成，我们可以通过在本地部署它来进行初步的容器测试。
- en: Testing the announce service
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试公告服务
- en: 'Having a container deployed to Container Registry is only part of the work
    to be performed. Next, we need to run the container from the image stored. Cloud
    Run containers run on port `8080`, so we should enable port mapping for images
    pulled from the repository:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将容器部署到容器注册表只是完成工作的一部分。接下来，我们需要从存储的镜像中运行容器。Cloud Run 容器运行在`8080`端口，因此我们应该为从存储库中提取的镜像启用端口映射：
- en: 'Run the container from the command line:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令行运行容器：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Test the output from the application:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试应用程序的输出：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Test sending a message to the application:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试向应用程序发送消息：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Stop the Docker container running on the local machine:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止本地计算机上运行的 Docker 容器：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Congratulations, you have now deployed and tested the application to generate
    box ASCII art from a container. In the next section, we will deploy the application
    to **Google Kubernetes Engine** (**GKE**) and access the service from a cluster.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，现已成功部署并测试了应用程序，能够从容器中生成盒子 ASCII 艺术。在下一部分，我们将把应用程序部署到**Google Kubernetes
    Engine**（**GKE**）并从集群中访问该服务。
- en: Deploying Cloud Run on GKE
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GKE 上部署 Cloud Run
- en: Now that we know how to create an image of an application, how does that translate
    to running an image on GKE? Fortunately, we already know how to deploy a container
    on Cloud Run, which means we know most of what is required for deployment on GKE.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何创建应用程序的镜像，这如何转化为在 GKE 上运行镜像呢？幸运的是，我们已经知道如何在 Cloud Run 上部署容器，这意味着我们已经掌握了在
    GKE 上部署所需的大部分内容。
- en: From an external perspective, we interact with the Cloud Run service URL. Internally,
    when running on GKE, there is actually a lot more going on in the background.
    However, we will focus on how to replicate our application when running as a service.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从外部来看，我们通过 Cloud Run 服务 URL 与之交互。内部运行在 GKE 上时，实际上在后台发生了更多的事情。然而，我们将专注于如何在作为服务运行时复制我们的应用程序。
- en: Provisioning a GKE cluster
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 GKE 集群
- en: 'Before we can deploy our application onto Cloud Run on GKE, we need to create
    a GKE cluster. So, let''s begin:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将应用程序部署到 GKE 上的 Cloud Run 之前，我们需要创建一个 GKE 集群。那么，让我们开始吧：
- en: 'In this example we use the standard cluster definition. So, create a GKE cluster
    called `hos-cluster-1`:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了标准的集群定义。因此，创建一个名为`hos-cluster-1`的 GKE 集群：
- en: '![](img/09b71612-679f-4686-a489-55bd738c6138.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09b71612-679f-4686-a489-55bd738c6138.png)'
- en: It's important to select the Enable Cloud Run for Anthos option.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 选择启用“Anthos的Cloud Run”选项非常重要。
- en: 'The following screenshot indicates that Cloud Run for Anthos has been enabled
    for the cluster. By default, monitoring is enabled on the cluster to be created:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图表示Cloud Run for Anthos已为集群启用。默认情况下，创建的集群启用了监控：
- en: '![](img/bbe92de3-13c2-4f66-92c1-1bf1cea147c1.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbe92de3-13c2-4f66-92c1-1bf1cea147c1.png)'
- en: We can also use the command line to create a cluster and perform tasks on Google
    Cloud. In this instance, creating a cluster requires quite a long command, so
    I normally stick to doing this activity through the Cloud Console.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用命令行在Google Cloud上创建集群并执行任务。在此实例中，创建集群需要很长的命令，因此我通常通过Cloud Console进行此操作。
- en: The Kubernetes cluster to be created is standard apart from the checkbox located
    right at the bottom of the cluster configuration screen. For Cloud Run to be enabled
    within the cluster, this box needs to be checked.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将要创建的Kubernetes集群是标准的，除了集群配置页面底部的复选框。为了在集群中启用Cloud Run，必须选中此框。
- en: 'Once the cluster has been successfully provisioned, configure `kubectl` to
    connect to the cluster:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群成功配置后，配置`kubectl`以连接到该集群：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Deploy the service to the `hos-cluster-1` Kubernetes cluster. Note that we
    now specify GKE as the platform as well as the cluster and cluster location:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务部署到`hos-cluster-1` Kubernetes集群中。请注意，现在我们指定了GKE作为平台，以及集群和集群位置：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Make an environment variable called `ANNOUNCE_URL` to store the URL of the
    deployed service:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ANNOUNCE_URL`的环境变量，用于存储已部署服务的URL：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: External access to the Cloud Run service is provided via Istio, which is deployed
    to another namespace. The deployed namespaces are displayed in the Cloud Console.
    However, if you were to do `kubectl get service` from the command line in the
    default namespace, there would be no reference to Istio. To access the Istio gateway
    service from the command line, we need to indicate that we would like to use the
    `gke-system` namespace.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Istio为Cloud Run服务提供外部访问，Istio部署在另一个命名空间中。已部署的命名空间会显示在Cloud Console中。然而，如果你从默认命名空间的命令行执行`kubectl
    get service`，则不会看到Istio的引用。要从命令行访问Istio网关服务，我们需要指明要使用`gke-system`命名空间。
- en: Testing the GKE service
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试GKE服务
- en: 'We have a service deployed, but we need to know how to access it. Cloud Run
    on GKE utilizes an Istio Ingress to enable external access to the GKE cluster:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经部署了一个服务，但需要知道如何访问它。GKE上的Cloud Run使用Istio Ingress来启用外部访问GKE集群：
- en: 'To show the details on the Istio Ingress (which is a `loadBalancer` created
    in the `gke-system` namespace), use the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示Istio Ingress（即在`gke-system`命名空间中创建的`loadBalancer`）的详细信息，请使用以下命令：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Assign the `loadBalancer.ingress` address to the `ISTIO_INGRESS` environment
    variable:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`loadBalancer.ingress`地址分配给`ISTIO_INGRESS`环境变量：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the following screenshot, we can see the result of the cluster. The information
    we need is labeled `istio-ingress`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到集群的结果。我们需要的信息被标记为`istio-ingress`：
- en: '![](img/77ea1f2f-c5ea-48a9-9dec-d8d1d4e48674.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77ea1f2f-c5ea-48a9-9dec-d8d1d4e48674.png)'
- en: Information returned from the `kubectl` command can be filtered to only display
    the field required. For example, in this instance, we only require the IP address.
    If we would like to filter the output to return specific information, we can use
    JQ to filter on the information desired.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从`kubectl`命令返回的信息可以进行过滤，只显示所需的字段。例如，在此情况下，我们只需要IP地址。如果我们想要过滤输出并返回特定信息，可以使用JQ过滤出所需的信息。
- en: JQ is a lightweight command-line tool built to process JSON objects. Using this
    tool, you can manipulate JSON objects in a similar fashion to using `sed` or `awk`.
    You can find more information on this amazing tool at [https://stedolan.github.io/jq/](https://stedolan.github.io/jq/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: JQ是一个轻量级命令行工具，用于处理JSON对象。使用此工具，可以像使用`sed`或`awk`一样操作JSON对象。有关此神奇工具的更多信息，请访问[https://stedolan.github.io/jq/](https://stedolan.github.io/jq/)。
- en: 'The application running in the cluster can be tested by visiting the Cloud
    Run service page or by using `curl` on the external IP associated with istio-ingress
    displayed in the Cloud Run console. For example, in my case, it is `announce-service.default.35.223.78.170.xip.io`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过访问Cloud Run服务页面或使用`curl`命令访问与Cloud Run控制台中显示的istio-ingress关联的外部IP来测试集群中运行的应用。例如，在我的案例中，它是`announce-service.default.35.223.78.170.xip.io`：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The namespace default can be seen in the service details screen for Cloud Run,
    as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认命名空间可以在Cloud Run的服务详情页面看到，如下所示：
- en: '![](img/eb109e96-5e62-419d-bc2a-d27d4969362f.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb109e96-5e62-419d-bc2a-d27d4969362f.png)'
- en: 'For the deployed service, you may have noticed that the domain associated with
    our service is registered as `xip.io`. The default used by Cloud Run on GKE is
    actually `example.com`. So, how did this address become assigned to the deployed
    service? When testing, it is possible to change from the default domain to an
    alternative. Google currently provides three wildcard DNS test sites that can
    be set up to be used with Cloud Run services:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已部署的服务，你可能已经注意到与我们服务关联的域名注册为 `xip.io`。Cloud Run 在 GKE 上使用的默认域名实际上是 `example.com`。那么，这个地址是如何被分配给已部署的服务的呢？在测试时，可以从默认域名切换到其他域名。Google
    目前提供了三个可以与 Cloud Run 服务一起使用的通配符 DNS 测试站点：
- en: '`nip.io`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nip.io`'
- en: '`xip.io`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xip.io`'
- en: '`sslip.io`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sslip.io`'
- en: The sites declared above represent a simple and effective way to register a
    temporary domain for the purposes of testing.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述网站提供了一种简单有效的方式，用于注册临时域名以进行测试。
- en: Applying a custom domain
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用自定义域名
- en: 'Alternatively, if you own a domain, this can also be set up instead of the
    default domain. Changing to use one of the free DNS sites requires doing the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你拥有一个域名，也可以将其设置为默认域名的替代选项。更改为使用免费的 DNS 站点之一需要执行以下操作：
- en: 'Set the cluster to use a custom domain by patching the `configmap` for the
    cluster:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过修补集群的 `configmap`，设置集群使用自定义域名：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To determine the external IP of a Cloud Run service on GKE, remember that this
    is referring to the external IP of the Istio Ingress. Once the DNS has been updated,
    you will see that the address of the deployed service will use the new DNS reference.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定 GKE 上 Cloud Run 服务的外部 IP，请记住这指的是 Istio Ingress 的外部 IP。一旦 DNS 更新完成，你将看到已部署服务的地址将使用新的
    DNS 引用。
- en: In addition to an alternative domain, there might also be a need to incorporate
    HTTPS for the cluster in use. For most situations, it is advisable to utilize
    a service such as Let's Encrypt on your cluster. Note that when using a Google
    service, HTTPS may be required, so it is important to know how to apply this to
    your environment so that the authentication methods work as expected.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 除了替代域名，可能还需要为使用的集群加入 HTTPS。对于大多数情况，建议在集群上使用像 Let's Encrypt 这样的服务。请注意，在使用 Google
    服务时，可能需要 HTTPS，因此了解如何将其应用到你的环境中，以确保身份验证方法按预期工作是非常重要的。
- en: The console output includes a reference to service and ingress. The deployed
    service URL will be available in the Cloud Run console. The externally available
    IP is only available to the Istio Ingress of the load balancer type. Note that
    the internal address range, that is, `10.0.x.x`, is not accessible to the `curl`
    command.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出包含服务和入口的引用。已部署的服务 URL 将在 Cloud Run 控制台中可用。外部可用的 IP 仅对负载均衡器类型的 Istio Ingress
    可用。请注意，内部地址范围，即 `10.0.x.x`，对 `curl` 命令不可访问。
- en: 'Access the service URL and store it in an environment variable:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问服务 URL 并将其存储在环境变量中：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'List the information for the `istio-ingress` associated with the `gke-system`
    namespace:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出与 `gke-system` 命名空间相关的 `istio-ingress` 信息：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Get the external IP associated with the `istio-ingress` endpoint:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取与 `istio-ingress` 端点关联的外部 IP：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Use the external IP of the Istio Ingress to patch the endpoint for testing:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Istio Ingress 的外部 IP 来修补端点以进行测试：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we need to generate a digital SSL certificate. We can do this by using
    the `Certbot` utility. Certbot automates certificate generation using Let''s Encrypt
    as its backend. Download the Certbot ([https://certbot.eff.org/](https://certbot.eff.org/))
    application and use it to generate a digital SSL certificate:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要生成一个数字 SSL 证书。我们可以通过使用 `Certbot` 工具来实现。Certbot 使用 Let's Encrypt 作为其后端来自动化证书生成。下载
    Certbot 应用程序（[https://certbot.eff.org/](https://certbot.eff.org/)）并使用它生成数字 SSL
    证书：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the SSL certificate to the domain to provide SSL access for the domain:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 SSL 证书添加到域名，以为该域名提供 SSL 访问：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Congratulations! We have successfully built and deployed a simple service on
    Cloud Run on GKE. However, to use it, we need to add some additional components.
    In the next section, we will expand on this example to illustrate how application
    components are integrated.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经成功地在 GKE 上的 Cloud Run 部署并构建了一个简单的服务。然而，为了使用它，我们需要添加一些额外的组件。在接下来的章节中，我们将扩展这个示例，说明应用组件是如何集成的。
- en: Creating a simple web application
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的 Web 应用
- en: Now that we know how to build and deploy a container on Cloud Run on GKE, the
    next step is to explore how to link this together with other services to create
    an application. With our application deployed on GKE, we now need to configure
    Cloud Storage and Cloud Pub/Sub.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道如何在GKE上构建和部署Cloud Run，下一步是探索如何将其与其他服务连接，创建一个应用程序。将我们的应用程序部署到GKE后，我们现在需要配置Cloud
    Storage和Cloud Pub/Sub。
- en: 'For our example, we are going to build a form to call our announce service:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将构建一个表单来调用我们的宣布服务：
- en: 'Create a new directory called `simple-form`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`simple-form`的新目录：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Initialize the environment:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化环境：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Edit the `package.json` file and add the `start` command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`package.json`文件并添加`start`命令：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Install the `npm` packages (`pug` and `express`):'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`npm`包（`pug`和`express`）：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the following code, we will call our `announce-service:1.0`. Replace the
    service URL endpoint with the address that was generated on Google Cloud for your
    Cloud Run deployment.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将调用我们的`announce-service:1.0`。将服务的URL端点替换为在Google Cloud上为您的Cloud Run部署生成的地址。
- en: 'To get a list of services that have been deployed, use the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取已部署服务的列表，请使用以下命令：
- en: '`gcloud run services list --platform managed`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`gcloud run services list --platform managed`'
- en: 'In the following table, the commands that were used to deploy has been listed
    for reference. Take note of the platform command as this determines the target
    system:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，列出了用于部署的命令供参考。请注意平台命令，因为它决定了目标系统：
- en: '| **Platform** | **Command** |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| **平台** | **命令** |'
- en: '| Cloud Run | `gcloud run deploy SERVICE --platform managed --region REGION`
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| Cloud Run | `gcloud run deploy SERVICE --platform managed --region REGION`
    |'
- en: '| Cloud Run for Anthos (Google Cloud) | `gcloud run deploy SERVICE --platform
    gke --cluster CLUSTER-NAME``--cluster-location CLUSTER-LOCATION` |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| Cloud Run for Anthos (Google Cloud) | `gcloud run deploy SERVICE --platform
    gke --cluster CLUSTER-NAME --cluster-location CLUSTER-LOCATION` |'
- en: '| Cloud Run for Anthos (VMware) | `gcloud run deploy SERVICE --platform kubernetes
    --kubeconfig KUBECONFIG-FILE` |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| Cloud Run for Anthos (VMware) | `gcloud run deploy SERVICE --platform kubernetes
    --kubeconfig KUBECONFIG-FILE` |'
- en: 'Create an `index.js` file and add the following content to it:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`index.js`文件，并添加以下内容：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a new directory for a `pug` view:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`pug`视图创建一个新目录：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create an `index.pug` file in the `views` directory and add the following style
    content:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录下创建一个`index.pug`文件，并添加以下样式内容：
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the form controls to the `index.pug` file (replace `ANNOUNCE_URL` with
    the URL for the `announce-service` URL identified earlier in the project):'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表单控件添加到`index.pug`文件中（将`ANNOUNCE_URL`替换为项目中先前识别的`announce-service` URL）：
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the application to test and see that the form calls the service and displays
    the message:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序进行测试，查看表单是否调用服务并显示消息：
- en: '![](img/9973f34f-1864-468d-9fe5-0b5f12e7c5aa.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9973f34f-1864-468d-9fe5-0b5f12e7c5aa.png)'
- en: 'On entering a message and pressing the Submit button, the form will call the
    `announce-service` and display the message that was entered, as shown in the following
    screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 输入信息并按下提交按钮后，表单将调用`announce-service`并显示输入的消息，如下图所示：
- en: '![](img/ca1d7d2a-90c3-422a-abc0-c91370f46b14.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca1d7d2a-90c3-422a-abc0-c91370f46b14.png)'
- en: Congratulations! At this point, when a message is entered, it will invoke the
    service associated with the `ANNOUNCE_URL`. As the service URL is exposed, we
    can easily integrate other applications or services using web forms or other straightforward
    applications built around the service.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！此时，当输入信息时，它将调用与`ANNOUNCE_URL`相关的服务。由于服务URL已经暴露，我们可以通过Web表单或其他围绕该服务构建的简单应用程序轻松集成其他应用程序或服务。
- en: Now that we have looked at the general interface associated with deploying a
    web application, let's turn our focus to CI. In the next section, we will look
    at how to automate the build process.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了与部署Web应用程序相关的常规接口，让我们将注意力转向CI。在接下来的部分中，我们将了解如何自动化构建过程。
- en: CI on GKE
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GKE上的CI
- en: As we have already seen, getting Cloud Run on GKE up and running takes a lot
    of work in comparison to Cloud Run. Besides that, we also need to iterate against
    the development cycle to ensure the build, testing, and deployment processes are
    performed consistently.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，启动GKE上的Cloud Run相较于Cloud Run需要更多的工作。此外，我们还需要在开发周期中进行迭代，以确保构建、测试和部署过程的一致性。
- en: 'Fortunately, there is a mechanism available to help out with the development
    life cycle. Cloud Build is used to automate development tasks and can easily be
    extended to automate many of the tasks associated with developing code. Making
    the transition to working with containers provides many benefits, but does add
    the additional layer of effort necessary to ensure the images reflect the latest
    changes. A typical life cycle may look something like the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个机制可以帮助开发生命周期管理。Cloud Build 用于自动化开发任务，并且可以轻松扩展以自动化与开发代码相关的许多任务。转向使用容器带来了许多好处，但也增加了确保镜像反映最新变化所需的额外工作层。一个典型的生命周期可能如下所示：
- en: Amend the code.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改代码。
- en: Build the code.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建代码。
- en: Test the code.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试代码。
- en: Push the code to version control.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码推送到版本控制。
- en: Additionally, there may be different environments, tools, and processes to contend
    with outside of the typical stage gates associated with a developer pipeline.
    However, by using Cloud Build, we can easily create a CI pipeline that can initiate
    a build function based on committing code.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可能还需要应对不同的环境、工具和流程，这些都超出了开发人员管道中典型阶段门的范围。然而，通过使用 Cloud Build，我们可以轻松创建一个 CI
    管道，它可以在提交代码后启动构建功能。
- en: 'Defining a pipeline uses three parts:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 定义管道包括三个部分：
- en: Service account permissions
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务账户权限
- en: Build triggers
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建触发器
- en: Cloud Build file
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Build 文件
- en: 'To get started with Cloud Build, there are some additional permissions that
    need to be granted to the Cloud Run service account (Cloud Run Admin), and Service
    Accounts (Service Account User) need to be set to enabled:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Cloud Build，需要为 Cloud Run 服务账户（Cloud Run Admin）授予一些额外的权限，并且需要启用服务账户（Service
    Account User）：
- en: 'The permission state can be viewed in the Cloud Build interface:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以在 Cloud Build 界面中查看权限状态：
- en: '![](img/e4077cf1-5f32-4f23-a452-8859ad833290.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4077cf1-5f32-4f23-a452-8859ad833290.png)'
- en: 'Triggers a signal when a build should be initiated:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 触发一个信号，指示应启动构建：
- en: '![](img/20c40ab4-32f8-4720-b716-fc358d785beb.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20c40ab4-32f8-4720-b716-fc358d785beb.png)'
- en: Creating a push trigger can be set up for specific branches or for all pushes
    to the repository. Note the type of trigger will attempt to auto-detect the configuration
    file.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 创建推送触发器可以针对特定分支或所有推送到仓库的代码进行设置。请注意，触发器类型会尝试自动检测配置文件。
- en: 'The build process steps are defined in a `cloudbuild.yaml` file:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建过程步骤在 `cloudbuild.yaml` 文件中定义：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Clearly, working with Cloud Build can save a lot of effort in exchange for very
    little configuration. The dividend from using these types of development tools
    also has a high payoff for Google Cloud because the tool can be adapted to run
    a wide spectrum of packages. Indeed, the community for Cloud Build projects is
    quite significant and includes many different runtime languages beyond the scope
    of this book. Suffice to say it is well worth investing the time to understand
    how it works. A fully working example of how to incorporate Cloud Build for this
    type of CI pipeline is provided in [Chapter 12](d6dfba80-8556-4c35-ae9b-d6e33199fb8b.xhtml),
    *Consuming Third-Party Data via a REST API*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，使用 Cloud Build 可以节省大量精力，几乎不需要配置。使用这些类型的开发工具对 Google Cloud 也有很高的回报，因为该工具可以适应运行广泛的软件包。实际上，Cloud
    Build 项目的社区相当庞大，涵盖了本书范围之外的许多不同的运行时语言。可以说，投资时间去了解它的工作原理是非常值得的。在[第12章](d6dfba80-8556-4c35-ae9b-d6e33199fb8b.xhtml)中，提供了一个完整的示例，展示了如何将
    Cloud Build 融入到这种类型的 CI 管道中，*通过 REST API 消费第三方数据*。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Over the course of this chapter, we have highlighted the initial elements of
    migrating to Cloud Run on GKE. Containers are fundamental to working with Kubernetes
    and provide a solid foundation on which to build both experience and expertise.
    To gain experience with the platform, we deployed a simple web application that
    illustrated many of the common elements that will need to be mastered as part
    of developing with Cloud Run on GKE.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们强调了迁移到 GKE 上 Cloud Run 的初步元素。容器是与 Kubernetes 协作的基础，提供了一个坚实的基础，帮助我们建立经验和专业知识。为了积累平台经验，我们部署了一个简单的
    Web 应用，展示了许多需要掌握的常见元素，这些元素是开发 GKE 上的 Cloud Run 应用时不可或缺的。
- en: The additional complexity of managing a Kubernetes environment should not dissuade
    you from using this platform. While serverless does provide many benefits already
    alluded to in this book, having a self-healing platform supporting critical infrastructure
    should provide additional comfort. Having the ability to seamlessly transition
    between Cloud Run and Cloud Run for Anthos ensures that, whenever it is needed,
    the choice exists and is accessible.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 管理 Kubernetes 环境的额外复杂性不应阻止你使用这个平台。尽管无服务器架构已经提供了本书中提到的许多好处，但拥有一个支持关键基础设施的自愈平台应当能带来更多的安心。当能够在
    Cloud Run 和 Cloud Run for Anthos 之间无缝切换时，确保了无论何时需要，都可以访问到这个选择。
- en: This chapter concludes our brief introduction to Cloud Run and GKE. In the next
    couple of chapters, we'll change pace once again. We'll introduce two case studies
    to illustrate the power of serverless and expand on some of the techniques we've
    acquired over the previous chapters.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了我们对 Cloud Run 和 GKE 的简要介绍。在接下来的几章中，我们将再次改变节奏。我们将介绍两个案例研究，以说明无服务器架构的强大，并扩展我们在前几章中获得的一些技术。
- en: Questions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a key advantage of using Container Registry over another registry?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用容器注册表（Container Registry）相比于其他注册表的一个主要优势是什么？
- en: When is it useful to use an environment variable such as `$GOOGLE_CLOUD_PROJECT`?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用像 `$GOOGLE_CLOUD_PROJECT` 这样的环境变量何时有用？
- en: What trigger types are supported by Cloud Build?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cloud Build 支持哪些触发器类型？
- en: What domain is used for the Cloud Build service account?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cloud Build 服务帐户使用哪个域名？
- en: What build configurations types are supported by Cloud Build?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cloud Build 支持哪些构建配置类型？
- en: Who provides the Certbot SSL certificates used in this chapter's example?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁提供本章示例中使用的 Certbot SSL 证书？
- en: Further reading
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: '**Cloud SDK**: [https://cloud.google.com/sdk](https://cloud.google.com/sdk)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cloud SDK**: [https://cloud.google.com/sdk](https://cloud.google.com/sdk)'
- en: '**Creating and Using SSL Certificates**: [https://cloud.google.com/load-balancing/docs/ssl-certificates](https://cloud.google.com/load-balancing/docs/ssl-certificates)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建和使用 SSL 证书**: [https://cloud.google.com/load-balancing/docs/ssl-certificates](https://cloud.google.com/load-balancing/docs/ssl-certificates)'
- en: '**Certbot**: [https://certbot.eff.org/instructions](https://certbot.eff.org/instructions)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Certbot**: [https://certbot.eff.org/instructions](https://certbot.eff.org/instructions)'
- en: '**Let''s Encrypt**: [https://letsencrypt.org/](https://letsencrypt.org/)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Let''s Encrypt**: [https://letsencrypt.org/](https://letsencrypt.org/)'
