- en: Chapter 4. Neutron – OpenStack Networking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章 Neutron – OpenStack 网络
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to OpenStack networking
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack 网络介绍
- en: Managing networks, subnets, and ports
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理网络、子网和端口
- en: Creating provider networks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建提供商网络
- en: Creating tenant networks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建租户网络
- en: Creating ports
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建端口
- en: Updating network attributes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新网络属性
- en: Deleting ports
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除端口
- en: Deleting networks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除网络
- en: Managing routers and floating IPs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理路由器和浮动 IP
- en: Attaching networks to routers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将网络附加到路由器
- en: Creating and assigning floating IPs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和分配浮动 IP
- en: Deleting routers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除路由器
- en: Managing security groups
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理安全组
- en: Managing load balancers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理负载均衡器
- en: Introduction to OpenStack networking
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStack 网络介绍
- en: Networking in OpenStack is provided by a project that goes by the name of Neutron.
    Neutron is an API-driven system that manages physical and virtual networking resources
    in an OpenStack cloud. Operators and users can leverage the Neutron API to build
    rich network architectures that best suit the requirements of their applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 中的网络由一个名为 Neutron 的项目提供。Neutron 是一个由 API 驱动的系统，用于管理 OpenStack 云中的物理和虚拟网络资源。操作员和用户可以利用
    Neutron API 来构建适合其应用需求的丰富网络架构。
- en: 'Neutron utilizes a pluggable and extensible architecture that allows developers
    to write robust drivers that implement and configure virtual and physical network
    resources, including switches, routers, firewalls, and load balancers. Neutron
    is composed of an API server and various agents that are responsible for implementing
    the virtual network architected by users. The following diagram demonstrates how
    the Neutron API server interacts with various plugins and agents to construct
    networking in the cloud:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 利用一个可插拔和可扩展的架构，允许开发人员编写强大的驱动程序，以实现和配置虚拟和物理网络资源，包括交换机、路由器、防火墙和负载均衡器。Neutron
    由一个 API 服务器和各种代理组成，这些代理负责实现用户架构的虚拟网络。以下图示展示了 Neutron API 服务器如何与各种插件和代理交互，构建云中的网络：
- en: '![Introduction to OpenStack networking](img/00036.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![OpenStack 网络介绍](img/00036.jpeg)'
- en: Figure 4.1
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1
- en: The figure demonstrates the interaction between the Neutron API service, Neutron
    plugins and drivers, and services such as L2 and L3 agents in a stock OpenStack-based
    cloud. As network actions are performed via the API or agents, Neutron publishes
    messages to a queue that are consumed and implemented by the agents.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图示展示了 Neutron API 服务、Neutron 插件和驱动程序，以及如 L2 和 L3 代理等服务之间的交互。在通过 API 或代理执行网络操作时，Neutron
    会发布消息到队列，代理会消费并实现这些消息。
- en: This chapter will cover many common networking-related tasks, but will not go
    far into the details of any given topic. For an introduction to the fundamentals
    of Neutron networking, refer to *OpenStack Networking Essentials*, *Packt Publishing*,
    2016\. For a more in-depth look at Neutron features, including the core functionality
    of switching and routing, load balancing, VPN, and more, refer to *Learning OpenStack
    Networking, Second Edition*, *Packt Publishing*, 2015.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖许多常见的网络相关任务，但不会深入探讨任何特定主题的细节。有关 Neutron 网络基础的介绍，请参阅 *OpenStack Networking
    Essentials*，*Packt Publishing*，2016年。要深入了解 Neutron 特性，包括交换和路由的核心功能、负载均衡、VPN 等，请参阅
    *Learning OpenStack Networking, Second Edition*，*Packt Publishing*，2015年。
- en: Managing networks, subnets, and ports
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理网络、子网和端口
- en: Networks, subnets, and ports make up the foundation of Neutron's logical network
    architecture. A network describes a layer 2 segment, and is typically used to
    define a boundary such as a VLAN. A subnet is an IPv4 or IPv6 address block that
    is associated with the network. Networks can be associated with one or more subnets.
    Lastly, a port represents a switch port on a logical switch that spans the entire
    cloud. A port object contains information about the device it is associated with,
    including its MAC addresses, IP addresses, and device ID. A device could be a
    virtual machine instance interface, a virtual router interface, or some other
    device that will be connected to the virtual network.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 网络、子网和端口构成了 Neutron 逻辑网络架构的基础。一个网络描述了一个二层段，通常用于定义一个边界，如 VLAN。子网是与网络相关联的 IPv4
    或 IPv6 地址块。一个网络可以与一个或多个子网关联。最后，端口表示跨越整个云的逻辑交换机上的交换机端口。一个端口对象包含与其关联的设备的信息，包括其 MAC
    地址、IP 地址和设备 ID。设备可以是虚拟机实例接口、虚拟路由器接口或将连接到虚拟网络的其他设备。
- en: 'Network objects in OpenStack have many attributes that describe how that network
    connects the physical and virtual infrastructures. The following table describes
    a few of these details:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 中的网络对象有许多属性，用于描述该网络如何连接物理和虚拟基础设施。以下表格描述了其中的一些细节：
- en: '| `Attribute` | `Description` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `属性` | `描述` |'
- en: '| --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `provider:physical_network` | This describes the physical interface used
    for this network. The label here is an alias for interfaces such as `eth0` and
    `bond1`. The alias is referred to as a **provider label** and is configured in
    the respective plugin and agent configuration files. This is used primarily by
    the `flat` and `vlan` type networks. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `provider:physical_network` | 这描述了用于此网络的物理接口。这里的标签是像 `eth0` 和 `bond1` 这样的接口的别名。这个别名被称为**提供者标签**，并在相应的插件和代理配置文件中进行配置。主要由
    `flat` 和 `vlan` 类型的网络使用。 |'
- en: '| `provider:segmentation_id` | This describes the segment ID, such as VLAN
    ID or VXLAN VNI. It may not be used for all network types. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `provider:segmentation_id` | 这描述了段 ID，如 VLAN ID 或 VXLAN VNI。并非所有网络类型都使用此项。
    |'
- en: '| `provider:network_type` | This describes the network type, such as Flat,
    VLAN, VXLAN, and GRE. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `provider:network_type` | 这描述了网络类型，如 Flat、VLAN、VXLAN 和 GRE。 |'
- en: '| `router:external` | Boolean (true or false) is used to determine if the network
    is eligible for use as a floating IP pool. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `router:external` | 布尔值（真或假），用于确定网络是否有资格作为浮动 IP 池使用。 |'
- en: The role of the user creating a network determines which attributes can be specified
    by that user at network creation. An administrative user can specify details such
    as the physical network or segmentation ID when creating a network. Regular users
    must rely on Neutron to automatically provision the network based on details set
    in Neutron configuration files, including a pool of segmentation IDs per physical
    network from which to choose from. Networks that are created specifically to connect
    virtual devices to the physical network infrastructure are often referred to as
    **provider networks**, since their attributes are deliberately set based on the
    environment or data center in which they reside. Provider networks are typically
    shared across projects or tenants and often provide connectivity to upstream devices
    that can facilitate routing in and out of the environment. Networks that are created
    by regular users are referred to as **tenant networks**, and are typically only
    used by the project or tenant that created them. In most cases, tenant networks
    must be connected to virtual routers, which are in turn connected to provider
    networks, and can provide connectivity in and out of connected tenant networks.
    In the following sections, we will look at common tasks involving those resources.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建网络的用户角色决定了该用户在创建网络时可以指定哪些属性。管理员用户可以在创建网络时指定诸如物理网络或分段 ID 等详细信息。普通用户必须依赖 Neutron
    自动配置网络，基于 Neutron 配置文件中设置的细节，包括为每个物理网络选择分段 ID 的池。专门用于将虚拟设备连接到物理网络基础设施的网络通常被称为**提供者网络**，因为它们的属性是根据其所在环境或数据中心故意设置的。提供者网络通常跨项目或租户共享，并且通常为上游设备提供连接，以便在环境中进行路由。普通用户创建的网络被称为**租户网络**，通常仅由创建它们的项目或租户使用。在大多数情况下，租户网络必须连接到虚拟路由器，而虚拟路由器又连接到提供者网络，并可以提供租户网络的进出连接。在接下来的章节中，我们将讨论涉及这些资源的常见任务。
- en: Creating provider networks
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建提供者网络
- en: When creating a provider network in OpenStack, one must provide attributes that
    describe how the network is connected to the physical infrastructure. These attributes
    include the network type, network interface used by the server, and the segmentation
    ID of the network. Typically, provider networks are only created and managed by
    users with administrator-level permissions. Provider networks can be shared or
    private, and they can also be used as floating IP networks when connected to Neutron
    routers when the network's `router:external` attribute has been set to `True`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中创建提供者网络时，必须提供描述网络如何连接到物理基础设施的属性。这些属性包括网络类型、服务器使用的网络接口和网络的分段 ID。通常，只有具有管理员级别权限的用户才能创建和管理提供者网络。提供者网络可以是共享的，也可以是私有的，当网络的
    `router:external` 属性被设置为 `True` 时，它们还可以作为浮动 IP 网络连接到 Neutron 路由器。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'When creating a provider network, you must be authenticated as an administrator.
    You will need the following details, at a minimum, for the network:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建提供者网络时，您必须以管理员身份进行身份验证。至少需要以下信息来配置该网络：
- en: Network name
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称
- en: Provider label
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者标签
- en: Network type
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络类型
- en: Segmentation ID
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分段 ID
- en: 'For our example, the following will be used:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Network name: `COOKBOOK_PROVIDER_NET`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称：`COOKBOOK_PROVIDER_NET`
- en: 'Provider label: `vlan`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者标签：`vlan`
- en: 'Network type: `vlan`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络类型：`vlan`
- en: 'Segmentation ID: `200`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分段 ID：`200`
- en: 'You will need the following details, at a minimum, for the corresponding subnet:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下信息来配置相应的子网：
- en: Subnet name
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网名称
- en: Network name or ID
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称或 ID
- en: Subnet range (CIDR)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网范围（CIDR）
- en: 'For our example, the following will be used:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Subnet name: `COOKBOOK_PROVIDER_SUBNET`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网名称：`COOKBOOK_PROVIDER_SUBNET`
- en: 'Network name or ID: `COOKBOOK_PROVIDER_NET`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称或 ID：`COOKBOOK_PROVIDER_NET`
- en: 'Subnet range (CIDR): `192.168.200.0/24`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网范围（CIDR）：`192.168.200.0/24`
- en: How to do it…
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With the OpenStack client installed on our system, we are now able to create
    a provider network with the following steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统上安装了 OpenStack 客户端后，我们可以通过以下步骤创建提供者网络：
- en: 'Create the network:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建网络：
- en: '[PRE0]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will resemble the following:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00037.jpeg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00037.jpeg)'
- en: 'Create the subnet:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建子网：
- en: '[PRE1]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will resemble the following:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00038.jpeg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00038.jpeg)'
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Provider networks are created with the following syntax:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 提供者网络使用以下语法创建：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating a network creates a logical layer 2 segment, whose details are used
    to construct virtual network connections within the Cloud that connect virtual
    machines and other virtual network objects to the physical infrastructure.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建网络会创建一个逻辑的二层段，其细节用于在云中构建虚拟网络连接，这些连接将虚拟机和其他虚拟网络对象与物理基础设施连接起来。
- en: The `provider-network-type` parameter defines the type of network. Options include
    `vlan`, `vxlan`, `gre`, `flat`, `geneve`, and `local`, and these must be supported
    by the configured network driver.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`provider-network-type` 参数定义了网络的类型。选项包括 `vlan`、`vxlan`、`gre`、`flat`、`geneve`
    和 `local`，这些选项必须得到配置的网络驱动程序的支持。'
- en: The `provider-physical-network` parameter defines the interface used for the
    network. In Neutron, interfaces are not referenced directly, but are mapped to
    a **provider label**. In an OpenStack-Ansible deployment, the default provider
    label is `vlan` and maps to a physical interface such as `bond1` or `eth1`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`provider-physical-network` 参数定义了用于网络的接口。在 Neutron 中，接口不是直接引用的，而是映射到 **提供者标签**。在
    OpenStack-Ansible 部署中，默认的提供者标签是 `vlan`，并映射到如 `bond1` 或 `eth1` 的物理接口。'
- en: The `provider-segment` parameter defines the layer 2 segmentation ID used by
    the network. For the `vlan` network types, the segmentation ID is VLAN ID. For
    the `vxlan` network types, the segmentation ID is VXLAN VNI. Segmentation IDs
    may not be used by all network types, and if not specified, may be automatically
    assigned by Neutron if required.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`provider-segment` 参数定义了网络使用的二层分段 ID。对于 `vlan` 网络类型，分段 ID 是 VLAN ID。对于 `vxlan`
    网络类型，分段 ID 是 VXLAN VNI。并非所有网络类型都使用分段 ID，如果没有指定，Neutron 可能会在需要时自动分配。'
- en: When specified, the `--external` option qualifies a network as a gateway network
    for a router. The network will serve as a floating IP network for attached instances.
    Networks are considered *internal* by default.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定时，`--external` 选项将网络标记为路由器的网关网络。该网络将作为附加实例的浮动 IP 网络。网络默认被认为是 *内部* 网络。
- en: 'There are other optional network parameters that can be discovered using the
    `--help` flag shown here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他可选的网络参数，可以通过以下 `--help` 标志来发现：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `--help` flag can be appended to most commands within the OpenStack command-line
    utility, and will be helpful when constructing commands throughout this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`--help` 标志可以附加到 OpenStack 命令行工具的大多数命令中，在本章节中构建命令时将非常有用。'
- en: 'Subnets are created with the following syntax:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 子网使用以下语法创建：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a subnet creates a logical layer 3 routing domain, whose details are
    used to provide IP services to virtual machines and other virtual network objects.
    The `network` parameter maps the subnet to a layer 2 network defined in OpenStack.
    The `subnet-range` parameter defines the L3 address range used by the subnet and
    is written in CIDR notation. More than one subnet can be associated with a network,
    which is often the case when all addresses in a particular subnet have been consumed.
    While logically separated, multiple subnets in a network are all part of the same
    layer 2 broadcast domain.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 创建子网会创建一个逻辑层 3 路由域，其详细信息用于向虚拟机和其他虚拟网络对象提供 IP 服务。`network` 参数将子网映射到 OpenStack
    中定义的层 2 网络。`subnet-range` 参数定义了子网使用的 L3 地址范围，并以 CIDR 表示法编写。一个网络可以关联多个子网，这通常发生在特定子网中的所有地址都已被使用时。尽管在逻辑上是分离的，网络中的多个子网仍然是同一个层
    2 广播域的一部分。
- en: 'When a network and subnet are created in OpenStack, and DHCP is enabled, a
    corresponding network namespace is created on one or more nodes running the DHCP
    agent. The namespace can be identified using the `ip netns` command shown as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 OpenStack 中创建网络和子网并启用 DHCP 时，会在运行 DHCP 代理的一个或多个节点上创建一个相应的网络命名空间。可以使用以下 `ip
    netns` 命令识别该命名空间：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A DHCP namespace has a prefix of `qdhcp-` and a suffix that corresponds to the
    network ID.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP 命名空间的前缀为 `qdhcp-`，后缀对应于网络 ID。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `ip netns` command must be run by the `root` user or a user with `sudo`
    permissions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`ip netns` 命令必须由 `root` 用户或具有 `sudo` 权限的用户运行。'
- en: Creating tenant networks
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建租户网络
- en: When a tenant network is created in OpenStack, provider attributes that describe
    how the network is connected to the physical infrastructure are automatically
    determined by Neutron based on settings hard-coded in configuration files. Typically,
    tenant networks are created and managed by users within a particular project and
    are not shared with other projects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 OpenStack 中创建租户网络时，描述网络如何连接到物理基础设施的提供者属性会根据配置文件中硬编码的设置由 Neutron 自动确定。通常，租户网络由特定项目中的用户创建和管理，并且不会与其他项目共享。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'You will need the following details, at a minimum, for the network:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下网络信息：
- en: Network name
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称
- en: 'For our example, the following network name will be used:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，将使用以下网络名称：
- en: 'Network name: `COOKBOOK_TENANT_NET_1`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称：`COOKBOOK_TENANT_NET_1`
- en: 'You will need the following details, at a minimum, for the corresponding subnet:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下信息来创建对应的子网：
- en: Subnet name
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网名称
- en: Network name or ID
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称或 ID
- en: Subnet range (CIDR)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网范围（CIDR）
- en: 'For our example, the following will be used:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，将使用以下内容：
- en: 'Subnet name: `COOKBOOK_TENANT_SUBNET_1`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网名称：`COOKBOOK_TENANT_SUBNET_1`
- en: 'Network name or ID: `COOKBOOK_TENANT_NET_1`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称或 ID：`COOKBOOK_TENANT_NET_1`
- en: 'Subnet range (CIDR): `172.16.200.0/24`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网范围（CIDR）：`172.16.200.0/24`
- en: How to do it…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With the `openstack` client installed on our system, we are now able to create
    a tenant network with the following steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统上安装了 `openstack` 客户端后，我们可以通过以下步骤创建租户网络：
- en: 'Create the network:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建网络：
- en: '[PRE6]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output will resemble the following:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00039.jpeg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00039.jpeg)'
- en: Note
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As a non-admin user, certain network attributes may not be visible.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为非管理员用户，某些网络属性可能不可见。
- en: 'Create the subnet:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建子网：
- en: '[PRE7]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output will resemble the following:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00040.jpeg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00040.jpeg)'
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Tenant networks are created with the following syntax:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 租户网络的创建遵循以下语法：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When created as a non-admin user, a network's provider attributes are automatically
    determined by Neutron based on settings defined in the respective network plugin
    configuration files. Tenant networks are associated with the project that created
    them, and by default, are not visible or usable by other projects.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为非管理员用户创建时，网络的提供者属性会根据相应网络插件配置文件中定义的设置由 Neutron 自动确定。租户网络与创建它们的项目关联，默认情况下，其他项目无法看到或使用这些网络。
- en: Tip
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Neutron **role-based access control** (**RBAC**) can be used to share networks
    with other projects if desired. More information on using RBAC in the Pike release
    of OpenStack can be found at the following website:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron **基于角色的访问控制** (**RBAC**) 可用于在需要时与其他项目共享网络。有关在 OpenStack Pike 版本中使用 RBAC
    的更多信息，请访问以下网站：
- en: '[https://docs.openstack.org/neutron/pike/admin/config-rbac.html](https://docs.openstack.org/neutron/pike/admin/config-rbac.html)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.openstack.org/neutron/pike/admin/config-rbac.html](https://docs.openstack.org/neutron/pike/admin/config-rbac.html)'
- en: Creating ports
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建端口
- en: Ports in OpenStack can be created using the `openstack port create` command.
    Ports are automatically created by OpenStack upon server creation or can be created
    and attached to instances at a later time. Users may also create ports as a method
    of reserving IP addresses for later use or to avoid certain addresses from being
    allocated by OpenStack at all.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中可以使用 `openstack port create` 命令创建端口。OpenStack 在创建服务器时会自动创建端口，也可以在稍后创建并附加到实例上。用户还可以创建端口，以便预留
    IP 地址供以后使用，或者避免 OpenStack 分配某些地址。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'You will need the following details, at a minimum, for the port:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下详细信息来创建端口：
- en: Network name or ID
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称或 ID
- en: Port name
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口名称
- en: 'For our example, the following will be used:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Network name: `COOKBOOK_TENANT_NET_1`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称：`COOKBOOK_TENANT_NET_1`
- en: 'Port name: `COOKBOOK_TEST_PORT_1`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口名称：`COOKBOOK_TEST_PORT_1`
- en: How to do it…
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With the OpenStack client installed on our system, we are now able to create
    a port with the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 OpenStack 客户端后，我们现在可以使用以下命令创建端口：
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output will resemble the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00041.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/00041.jpeg)'
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When a port is created in OpenStack and associated with an instance or other
    virtual network device, it is bound to a Neutron agent on the respective node
    hosting the instance or device. Using details provided by the port, OpenStack
    services may construct a **virtual machine interface** (**vif**) or **virtual
    ethernet interface** (**veth**) on the host for use with a virtual machine, network
    namespace, or more depending on the application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 OpenStack 中创建端口并与实例或其他虚拟网络设备关联时，它会绑定到托管实例或设备的相应节点上的 Neutron 代理。使用端口提供的详细信息，OpenStack
    服务可以在主机上构建 **虚拟机接口** (**vif**) 或 **虚拟以太网接口** (**veth**)，供虚拟机、网络命名空间或其他应用使用。
- en: Updating network attributes
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新网络属性
- en: Network attributes can be updated using the `openstack network set` and `openstack
    network unset` commands.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 网络属性可以通过 `openstack network set` 和 `openstack network unset` 命令进行更新。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'When updating a network, ensure that you are authenticated as an administrator
    or are the owner of the network. You will need the following details:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 更新网络时，确保你已认证为管理员或是网络的所有者。你将需要以下详细信息：
- en: Network name or ID
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称或ID
- en: Attribute to update
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新的属性
- en: 'For our example, the following will be used:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Network name: `COOKBOOK_PROVIDER_NET`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称：`COOKBOOK_PROVIDER_NET`
- en: 'Attribute to update: `router:external`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新的属性：`router:external`
- en: How to do it…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With the OpenStack client installed on our system, we are now able to update
    the network with the following command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 OpenStack 客户端后，我们现在可以使用以下命令来更新网络：
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: No output is returned.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 不会返回任何输出。
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Networks are updated with the following syntax:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 网络更新的语法如下：
- en: '[PRE11]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `share` and `no-share` parameters dictate whether the network can be shared
    among projects or is limited to the owner of the network.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`share` 和 `no-share` 参数决定网络是否可以在项目之间共享，或者仅限于网络的所有者使用。'
- en: The `description` parameter allows users to provide a useful description of
    the network.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`description` 参数允许用户提供网络的有用描述。'
- en: When specified, the `--external` option qualifies a network as a gateway network
    for a router. The network will serve as a floating IP network for attached instances.
    Networks are considered internal by default.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定时，`--external` 选项将网络标识为路由器的网关网络。该网络将作为附加实例的浮动 IP 网络。默认情况下，网络被视为内部网络。
- en: Note
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Not all network plugins support updating certain network attributes for existing
    networks. If a change is required, the network may need to be deleted and recreated.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有网络插件都支持更新现有网络的某些网络属性。如果需要更改，可能需要删除并重新创建网络。
- en: Deleting ports
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除端口
- en: Ports in OpenStack can be deleted with the `openstack port delete` command.
    OpenStack automatically deletes ports it creates, such as when a server or floating
    IP is created, but may not delete ports created by users and associated with instances
    at a later time.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中可以使用 `openstack port delete` 命令删除端口。OpenStack 会自动删除它创建的端口，例如，当创建服务器或浮动
    IP 时，但可能不会删除用户创建并与实例关联的端口。
- en: Note
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Deleting ports associated with active instances may cause the instance to crash
    or can cause unexpected behavior in the instance.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 删除与活动实例关联的端口可能导致实例崩溃或造成实例中的意外行为。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'When deleting a port, ensure that you are authenticated as an administrator
    or are the owner of the port. You will need the following details:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 删除端口时，确保你已经通过管理员身份验证或是端口的所有者。你需要以下信息：
- en: Port name or ID
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口名称或 ID
- en: 'For our example, the following will be used:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Port name: COOKBOOK_TEST_PORT_1'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口名称：COOKBOOK_TEST_PORT_1
- en: How to do it…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With the OpenStack client installed on our system, we are now able to delete
    a port with the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 OpenStack 客户端后，我们现在可以使用以下命令删除端口：
- en: '[PRE12]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: No output is returned.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 不会返回任何输出。
- en: Deleting networks
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除网络
- en: Deleting a network in OpenStack is as easy as invoking the `openstack network
    delete` command. Neutron will delete any automatically-created ports associated
    with the network, like the ones created by/for the DHCP or router namespaces,
    and will return any automatically-assigned segmentation IDs to the respective
    pool for allocation to another network.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中删除网络与调用 `openstack network delete` 命令一样简单。Neutron 会删除与该网络相关的所有自动创建的端口，如由
    DHCP 或路由器命名空间创建的端口，并将任何自动分配的分段 ID 归还到相应的池中，以供分配给其他网络。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'When deleting a network in OpenStack, ensure that all associated user-created
    ports have been deleted. This may require deleting instances, detaching and deleting
    ports from instances, or detaching and deleting ports from routers. When deleting
    a network, the following information will be necessary:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中删除网络时，确保所有相关的用户创建端口已被删除。这可能需要删除实例、从实例中分离并删除端口，或从路由器中分离并删除端口。删除网络时，以下信息是必需的：
- en: Network name or ID
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称或 ID
- en: How to do it…
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With the OpenStack client installed on our system, we are able now to delete
    a network with the following command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 OpenStack 客户端后，我们现在可以使用以下命令删除网络：
- en: '[PRE13]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: No output is returned.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 不会返回任何输出。
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: When invoked, the `openstack network delete` command will instruct Neutron to
    delete the specified network and any associated subnet(s), as long as all user-managed
    ports have been deleted. In a reference architecture, the layer 2 agents are responsible
    for deleting the respective virtual bridges and interfaces configured on the hosts,
    and all records of the network are purged from the OpenStack database.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `openstack network delete` 命令时，它会指示 Neutron 删除指定的网络以及所有相关的子网（子网），前提是所有用户管理的端口都已被删除。在参考架构中，第二层代理负责删除在主机上配置的相应虚拟桥接和接口，所有网络记录都会从
    OpenStack 数据库中清除。
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Neutron does not maintain network information in the database once those objects
    have been deleted. Requests against the OpenStack API may be logged, but using
    third-party tools or proxies is highly recommended if an audit trail is required.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些对象被删除，Neutron 不再在数据库中维护网络信息。虽然 OpenStack API 的请求可能会被记录，但如果需要审计跟踪，强烈建议使用第三方工具或代理。
- en: Managing routers and floating IPs
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理路由器和浮动 IP
- en: 'A **router** in OpenStack represents a virtual routing device that provides
    routing capabilities to directly connected networks. To provide end-to-end connectivity
    to a virtual machine, a router must be connected to an external provider network
    and the tenant network where the instance resides. Typically, routers are created
    and managed by individual projects. By default, external provider networks are
    shared and available for use by all projects. The following diagram represents
    an external provider network owned by the `ADMIN` project and utilized by three
    other projects:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中，**路由器**代表一个虚拟路由设备，为直接连接的网络提供路由功能。为了为虚拟机提供端到端的连接，路由器必须连接到外部提供者网络以及实例所在的租户网络。通常，路由器由单独的项目创建和管理。默认情况下，外部提供者网络是共享的，所有项目都可以使用。以下图示表示一个由
    `ADMIN` 项目拥有并被其他三个项目使用的外部提供者网络：
- en: '![Managing routers and floating IPs](img/00042.jpeg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![管理路由器和浮动 IP](img/00042.jpeg)'
- en: Figure 4.2
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2
- en: In *Figure 4.2*, three projects have routers connected to an external provider
    network. The external provider network not only provides connectivity to the routers
    and the networks behind them, but also provides a network from which floating
    IPs can be derived. Floating IPs provide 1-to-1 address translations that allow
    external clients to connect directly to instances.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图4.2*中，三个项目的路由器连接到外部提供商网络。外部提供商网络不仅提供路由器及其后方网络的连接，还提供一个可以派发浮动IP的网络。浮动IP提供1对1的地址转换，允许外部客户端直接连接到实例。
- en: Creating routers
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建路由器
- en: Routers in OpenStack can be created using the `openstack router create` command.
    By default, routers are considered *internal* and can route only between directly-connected
    tenant networks. An *external* router, on the other hand, is capable of routing
    to an external gateway and can provide **network address translation** (**NAT**)
    services to connected networks.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenStack中，路由器可以使用`openstack router create`命令创建。默认情况下，路由器被认为是*内部的*，只能在直接连接的租户网络之间进行路由。另一方面，*外部*路由器能够路由到外部网关，并能为连接的网络提供**网络地址转换**（**NAT**）服务。
- en: 'There are three types of routers that can be created in an OpenStack reference
    architecture:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenStack参考架构中，可以创建三种类型的路由器：
- en: Standalone
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立路由器
- en: '**Highly-Available** (**H**A)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用**（**HA**）'
- en: Distributed (DVR)
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式（DVR）
- en: Standalone routers do not provide any level of resiliency, while highly available
    routers implement VRRP to provide redundancy should one or more Neutron nodes
    fail. Distributed virtual routers reside on compute nodes rather than on centralized
    network nodes, and provide higher performance than their counterparts for east/west
    traffic, or traffic between instances in different networks, since that traffic
    is forwarded between compute nodes without having to traverse a network node.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 独立路由器不提供任何级别的容错性，而高可用路由器通过实现VRRP来提供冗余，以应对一个或多个Neutron节点故障。分布式虚拟路由器驻留在计算节点上，而不是集中式网络节点上，提供比其同类更高的性能，特别是在东西向流量或不同网络中实例间的流量时，因为这类流量是通过计算节点转发的，无需经过网络节点。
- en: For non-admin users, the type of router that is created with the `openstack
    router create` command is determined automatically by settings defined in Neutron
    configuration files. Only users with administrator-level permissions can specify
    router types when creating routers.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非管理员用户，通过`openstack router create`命令创建的路由器类型由Neutron配置文件中定义的设置自动决定。只有拥有管理员权限的用户才能在创建路由器时指定路由器类型。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'You will need the following details, at a minimum, for the router:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下详细信息，用于路由器：
- en: Router name
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器名称
- en: 'For our examples, the following will be used:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Router name: `COOKBOOK_ROUTER_STANDALONE`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器名称：`COOKBOOK_ROUTER_STANDALONE`
- en: 'Router name: `COOKBOOK_ROUTER_HA`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器名称：`COOKBOOK_ROUTER_HA`
- en: 'Router name: `COOKBOOK_ROUTER_DVR`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器名称：`COOKBOOK_ROUTER_DVR`
- en: 'You will need the following details, at a minimum, for networks attached to
    the router:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下详细信息，用于连接到路由器的网络：
- en: External provider network name or ID
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部提供商网络名称或ID
- en: Tenant subnet name or ID
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 租户子网名称或ID
- en: 'For our example, the following will be used:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'External provider network name: `COOKBOOK_PROVIDER_NET`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部提供商网络名称：`COOKBOOK_PROVIDER_NET`
- en: 'Tenant subnet name: `COOKBOOK_TENANT_SUBNET`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 租户子网名称：`COOKBOOK_TENANT_SUBNET`
- en: How to do it…
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With the `openstack` client installed on our system, we are now able to create
    a router with the following steps:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统上安装了`openstack`客户端后，我们现在可以按照以下步骤创建一个路由器：
- en: 'Create the standalone router:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建独立路由器：
- en: '[PRE14]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output will resemble the following:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00043.jpeg)'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00043.jpeg)'
- en: 'Create an HA router:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个HA路由器：
- en: '[PRE15]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output will resemble the following:'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00044.jpeg)'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00044.jpeg)'
- en: 'Create a distributed router:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建分布式路由器：
- en: '[PRE16]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output will resemble the following:'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00045.jpeg)'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00045.jpeg)'
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When *any* router is created in OpenStack using the native routing services,
    a corresponding network namespace is created on one or more nodes running the
    `neutron-l3-agent` service. The namespace can be identified using the `ip netns`
    command shown here:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当在OpenStack中使用原生路由服务创建*任何*路由器时，会在运行`neutron-l3-agent`服务的一个或多个节点上创建一个相应的网络命名空间。可以使用以下`ip
    netns`命令来识别该命名空间：
- en: '[PRE17]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: A router namespace has a prefix of `qrouter-` and a suffix that corresponds
    to the router ID. In environments where distributed virtual routers are configured,
    other namespaces needed to facilitate proper networking may exist, such as the
    `fip-` and `snat-` namespaces.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器的命名空间以`qrouter-`为前缀，并且后缀与路由器ID相对应。在配置了分布式虚拟路由器的环境中，可能还会有其他命名空间用于促进正确的网络配置，例如`fip-`和`snat-`命名空间。
- en: By default, a non-admin user cannot specify the type of router being created.
    The router type is automatically determined by Neutron based on the layer 3 agent
    configuration file. The author recommends HA or distributed virtual routers, where
    possible, to limit the impact of failure for physical nodes hosting virtual routers.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，非管理员用户无法指定正在创建的路由器类型。路由器类型由Neutron根据第3层代理配置文件自动确定。作者建议尽可能使用HA或分布式虚拟路由器，以限制虚拟路由器所在物理节点故障的影响。
- en: Note
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Cloud operators can modify Neutron configuration files to change default behaviors.
    The `policy.json` file used by the Neutron API service can be modified to allow
    users and roles to perform actions usually reserved for administrators. Refer
    to community documentation for guidelines and caveats related to modifications
    to the `policy.json` files.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 云操作员可以修改Neutron配置文件来更改默认行为。Neutron API服务使用的`policy.json`文件可以被修改，以允许用户和角色执行通常仅限管理员的操作。有关修改`policy.json`文件的指南和注意事项，请参考社区文档。
- en: Attaching networks to routers
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将网络连接到路由器
- en: 'Routers in OpenStack can connect to a single external provider network and
    one or more tenant networks, as shown in the following diagram:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenStack中，路由器可以连接到单一的外部提供者网络和一个或多个租户网络，如下图所示：
- en: '![Attaching networks to routers](img/00046.jpeg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![将网络连接到路由器](img/00046.jpeg)'
- en: Figure 4.3
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3
- en: In *Figure 4.3*, an external provider network provides external connectivity,
    while tenant networks provide connectivity to virtual machines and other virtual
    network devices within a project. The router's job is to facilitate end-to-end
    connectivity using routes and sometimes the NAT via floating IPs.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 4.3*中，外部提供者网络提供外部连接，而租户网络则为项目内的虚拟机和其他虚拟网络设备提供连接。路由器的任务是通过路由和有时通过浮动IP的NAT来促进端到端连接。
- en: 'The commands necessary to attach a network to a router may vary based on network
    and need:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 将网络连接到路由器所需的命令可能会根据网络和需求的不同而有所变化：
- en: 'Attaching a router to an external network:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将路由器连接到外部网络：
- en: '[PRE18]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Attaching a router to a tenant network using subnet ID or name:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用子网ID或名称将路由器连接到租户网络：
- en: '[PRE19]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Attaching a router to a tenant network using a specific port ID or name:'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特定端口ID或名称将路由器连接到租户网络：
- en: '[PRE20]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Getting ready
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'When attaching a router to a network, the following information will be necessary:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在将路由器连接到网络时，以下信息是必需的：
- en: Router name or ID
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器名称或ID
- en: Network name or ID, or Subnet name or ID, or Port name or ID
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称或ID，或子网名称或ID，或端口名称或ID
- en: Remember, when attaching a router to an external provider network, the network's
    `router:external` attribute must be set to `External` or `True`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当将路由器连接到外部提供者网络时，网络的`router:external`属性必须设置为`External`或`True`。
- en: How to do it…
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To attach a network to a router in OpenStack, follow these steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenStack中将网络连接到路由器，请按以下步骤操作：
- en: 'Attach the router to the external provider network `COOKBOOK_PROVIDER_NET`:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将路由器连接到外部提供者网络`COOKBOOK_PROVIDER_NET`：
- en: '[PRE21]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: No output is provided.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有输出提供。
- en: 'Attach the router to the `COOKBOOK_TENANT_SUBNET` subnet using the subnet name:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用子网名称将路由器连接到`COOKBOOK_TENANT_SUBNET`子网：
- en: '[PRE22]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: No output is provided.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有输出提供。
- en: How it works...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: When routers are attached to external provider networks, the router is assigned
    an IP address from the pool of addresses available for allocation from the network.
    The router is also configured with a default gateway that corresponds to the specified
    gateway for the respective provider subnet.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当路由器连接到外部提供者网络时，路由器将从网络中可分配的IP地址池中分配一个IP地址。路由器还会配置一个默认网关，该网关对应于各自提供者子网的指定网关。
- en: When a router is attached to a tenant network, the router becomes the gateway
    for the attached network and all instances within it. It is assigned the IP address
    specified as the gateway for the respective tenant subnet.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当路由器连接到租户网络时，路由器就成为该网络及其所有实例的网关。它会被分配一个指定为各自租户子网网关的IP地址。
- en: 'Ports attached to routers can be listed using the following command:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令列出连接到路由器的端口：
- en: '[PRE23]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In this example, the following ports and corresponding subnets have been attached
    to the router:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，以下端口和相应子网已附加到路由器：
- en: '![How it works...](img/00047.jpeg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00047.jpeg)'
- en: 'Using the `ip netns exec` command, coupled with the name of the respective
    router namespace, we can see the router has two attached interfaces, `qg-ed006ed1-b8`
    and `qr-c69005cb-aa`:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ip netns exec` 命令，并结合相应路由器命名空间的名称，我们可以看到路由器有两个附加的接口，分别是 `qg-ed006ed1-b8`
    和 `qr-c69005cb-aa`：
- en: '![How it works...](img/00048.jpeg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00048.jpeg)'
- en: Note
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The names of the interfaces in the router namespace correspond to the first
    10 characters of the respective port ID. External, or gateway-side, interfaces
    are prefixed with `qg-`, while internal, or router-side, interfaces are prefixed
    with `qr-`. The naming scheme dates back to when the Neutron project was known
    as Quantum.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器命名空间中的接口名称与相应端口 ID 的前 10 个字符相对应。外部或网关端接口以 `qg-` 为前缀，而内部或路由器端接口以 `qr-` 为前缀。这种命名方案可以追溯到
    Neutron 项目被称为 Quantum 时。
- en: Creating and assigning floating IPs
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并分配浮动 IP
- en: Floating IPs in OpenStack are static IPv4 addresses that are mapped to instances
    behind Neutron routers and provide direct inbound connectivity to those instances.
    Floating IPs can be used in a similar fashion to Elastic IPs in Amazon Web Services,
    where users can quickly remap an IP address from one instance to another in the
    event of failure. The heart of this functionality is network address translation.
    A floating IP is usually considered an *external* address that is mapped to the
    *internal* address configured on an instance. The NAT is implemented on the Neutron
    router connected to the instance's network. Floating IPs offer connectivity to
    instances that would otherwise be isolated behind a Neutron router on a non-routable
    network.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 中的浮动 IP 是静态 IPv4 地址，它们与 Neutron 路由器后面的实例进行映射，为这些实例提供直接的入站连接。浮动 IP
    的使用方式与 Amazon Web Services 中的弹性 IP 类似，用户可以在实例故障时快速重新映射 IP 地址。这个功能的核心是网络地址转换（NAT）。浮动
    IP 通常被视为*外部*地址，映射到实例上配置的*内部*地址。NAT 在连接到实例网络的 Neutron 路由器上实现。浮动 IP 提供了对那些通常会被隔离在
    Neutron 路由器后非路由网络上的实例的连接。
- en: Getting ready
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Recall that instances are connected to ports that reflect the connected network
    and associated IP address. When creating a floating IP, the following information
    is required:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，实例通过端口连接到反映连接网络和关联 IP 地址的端口。当创建浮动 IP 时，需要以下信息：
- en: External network name or ID
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部网络名称或 ID
- en: 'When assigning a floating IP to a port, the following is necessary:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 分配浮动 IP 到端口时，需进行以下操作：
- en: Floating IP ID
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮动 IP ID
- en: Internal port name or ID
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部端口名称或 ID
- en: 'For this example, create a new port in the existing tenant network named `COOKBOOK_TEST_PORT_2`:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，创建一个新的端口，命名为 `COOKBOOK_TEST_PORT_2`，并放置在现有的租户网络中：
- en: '[PRE24]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How to do it…
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create a floating IP in OpenStack, issue the following command:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 OpenStack 中创建浮动 IP，请执行以下命令：
- en: '[PRE25]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output will resemble the following:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00049.jpeg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00049.jpeg)'
- en: How it works…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Floating IPs are created with the following syntax:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动 IP 的创建语法如下：
- en: '[PRE26]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Floating IPs can then be associated with a port, using the following syntax:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动 IP 可以通过以下语法与端口关联：
- en: '[PRE27]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When a floating IP is associated with a port, Neutron uses the port information
    to determine which router to configure the NAT on. Once the NAT is in place, connections
    to the floating IP will be translated to the internal IP and forwarded to the
    respective instance. Responses from the instance will be forwarded to the router,
    translated from the internal to the floating IP, and routed back out to the origin.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 当浮动 IP 与端口关联时，Neutron 使用端口信息来确定要在哪个路由器上配置 NAT。一旦 NAT 配置完成，连接到浮动 IP 的请求将被转换为内部
    IP 并转发到相应实例。实例的响应将被转发到路由器，从内部 IP 转换为浮动 IP，然后路由回原始地址。
- en: 'In our example, the instance''s port is associated with the `COOKBOOK_TENANT_NET`
    network, which in turn is connected to the `COOKBOOK_ROUTER_STANDALONE` router.
    Within the respective `qrouter` network namespace, we can see the source and destination
    NATs applied using `iptables`:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，实例的端口与 `COOKBOOK_TENANT_NET` 网络关联，而该网络又与 `COOKBOOK_ROUTER_STANDALONE`
    路由器连接。在各自的 `qrouter` 网络命名空间中，我们可以看到通过 `iptables` 应用的源 NAT 和目标 NAT：
- en: '![How it works…](img/00050.jpeg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/00050.jpeg)'
- en: Deleting routers
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除路由器
- en: Routers in OpenStack can be deleted using the `openstack router delete` command.
    Before a router can be deleted, all subnets/ports attached to the router must
    be detached. This will cause a disruption of traffic for any instance connected
    to a network behind the router. Subnets can be detached using the `openstack router
    remove subnet` or `openstack router remove port` commands.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中，可以使用 `openstack router delete` 命令删除路由器。在删除路由器之前，必须先断开所有连接到该路由器的子网/端口。这会导致任何连接到路由器后面的网络的实例的流量中断。可以使用
    `openstack router remove subnet` 或 `openstack router remove port` 命令来断开子网。
- en: Getting ready
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'When deleting a router, the following information will be necessary:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 删除路由器时，将需要以下信息：
- en: Router name or ID
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器名称或 ID
- en: How to do it…
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To delete a router in OpenStack, issue the following command:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 OpenStack 中删除路由器，请执行以下命令：
- en: '[PRE28]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'No output is given. However, the operation can be verified using the `openstack
    router list` command:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 没有输出。然而，可以使用 `openstack router list` 命令来验证操作：
- en: '![How to do it…](img/00051.jpeg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作……](img/00051.jpeg)'
- en: Deleted routers will no longer appear in the list.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 被删除的路由器将不再出现在列表中。
- en: How it works...
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: When invoked, the `openstack router delete` command will instruct Neutron to
    delete the specified router and associated resources. In a reference architecture,
    the layer 3 agents are responsible for deleting the respective network namespace(s)
    and virtual interfaces configured on the hosts, and all records of the router
    are purged from the OpenStack database.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `openstack router delete` 命令时，将指示 Neutron 删除指定的路由器及其关联的资源。在参考架构中，第三层代理负责删除主机上配置的相应网络命名空间和虚拟接口，且所有与路由器相关的记录都会从
    OpenStack 数据库中清除。
- en: Managing security groups
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理安全组
- en: In OpenStack, a security group describes a grouping of ports of similar security
    requirements. Security group rules are associated with security groups, and provide
    ingress and egress filtering capabilities to the group. Security group rules can
    reference other groups or remote networks using CIDR notation. The actual filtering
    takes place on the compute node at the "port" level, and may be implemented using
    iptables or as openflow rules depending on the firewall driver that is configured
    on a given node. Newly created projects each contain a security group named `default`
    that allows egress, or outbound, communication only. Ingress, or inbound, communication
    is denied.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中，安全组描述了具有相似安全要求的端口的组合。安全组规则与安全组关联，并为该组提供入站和出站过滤能力。安全组规则可以使用 CIDR
    表示法引用其他组或远程网络。实际的过滤操作发生在计算节点的“端口”级别，并且可以通过 iptables 或作为 OpenFlow 规则来实现，具体取决于在特定节点上配置的防火墙驱动程序。每个新创建的项目都包含一个名为
    `default` 的安全组，只允许出站通信。入站通信被拒绝。
- en: Creating security groups
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建安全组
- en: Security groups in OpenStack can be created using the `openstack security group
    create` command. Security groups are project-owned objects and cannot be shared
    or referenced by other projects.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `openstack security group create` 命令在 OpenStack 中创建安全组。安全组是项目拥有的对象，不能被其他项目共享或引用。
- en: Getting ready
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'When creating a security group, each port associated with the group will inherit
    the rules applied to the group. You will need the following details, at a minimum,
    for the group:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 创建安全组时，与该组关联的每个端口将继承应用于该组的规则。至少需要以下详细信息来创建该组：
- en: Security group name
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组名称
- en: 'For our example, the following will be used:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Security group name: `COOKBOOK_SG_WEB`'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组名称：`COOKBOOK_SG_WEB`
- en: How to do it…
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'With the OpenStack client installed on our system, we are now able to create
    a security group with the following command:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统上安装了 OpenStack 客户端后，我们现在可以使用以下命令创建安全组：
- en: '[PRE29]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output will resemble the following:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00052.jpeg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作……](img/00052.jpeg)'
- en: How it works...
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'Security groups are created with the following syntax:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组使用以下语法创建：
- en: '[PRE30]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When a security group is created, OpenStack applies a default set of rules to
    the group that allows a port to communicate outbound (egress) over IPv4 and IPv6\.
    By default, all inbound traffic is denied.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建安全组时，OpenStack 会将一组默认规则应用于该组，这些规则允许端口通过 IPv4 和 IPv6 进行出站通信（egress）。默认情况下，所有入站流量会被拒绝。
- en: Creating a security group is only the first step in providing filtering to instances.
    The next steps, namely creating security group rules and applying security groups
    to ports, will be discussed in the following sections.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 创建安全组只是为实例提供过滤的第一步。接下来的步骤，即创建安全组规则并将安全组应用于端口，将在后续章节中讨论。
- en: Creating security group rules
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建安全组规则
- en: Security group rules in OpenStack can be created using the `openstack security
    group rule create` command. A security group rule provides information on filtering
    at a layer 3 and layer 4 level, which includes IP addresses and destination ports.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `openstack security group rule create` 命令在 OpenStack 中创建安全组规则。安全组规则提供了在第
    3 层和第 4 层的过滤信息，包括 IP 地址和目标端口。
- en: Getting ready
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'When creating a security group rule, remember that each port associated with
    the group will inherit the rules applied to the group. Therefore, it is important
    to limit the rules to only those needed to provide the desired access to the associated
    group. You will need the following details, at a minimum, for the rule:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建安全组规则时，请记住，每个与该组关联的端口将继承应用于该组的规则。因此，重要的是仅限于所需的规则，以便为关联组提供所需的访问权限。至少，您需要以下详细信息来定义规则：
- en: Security group name
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组名称
- en: 'For our example, the following will be used:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Security group name: `COOKBOOK_SG_WEB`'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组名称：`COOKBOOK_SG_WEB`
- en: 'Destination port: `80`'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标端口：`80`
- en: 'Protocol: TCP'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议：TCP
- en: 'Direction: Ingress'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方向：入口
- en: 'Source: All Addresses'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来源：所有地址
- en: How to do it…
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'With the OpenStack client installed on our system, we are now able to create
    a security group rule with the following command:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统上安装了 OpenStack 客户端后，现在可以通过以下命令创建安全组规则：
- en: '[PRE31]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output will resemble the following:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00053.jpeg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00053.jpeg)'
- en: How it works...
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'Security groups are created with the following syntax:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组是通过以下语法创建的：
- en: '[PRE32]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Security group rules provide details to OpenStack that are used by Neutron agents
    to implement traffic filters on individual ports on compute nodes. In our environment,
    these rules are implemented as iptables rules.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组规则为 OpenStack 提供了 Neutron 代理用来在计算节点上单独端口上实现流量过滤的详细信息。在我们的环境中，这些规则作为 iptables
    规则实现。
- en: Creating a security group rule without providing any additional filtering information
    may result in a rule that allows ingress access from *all* source addresses. OpenStack
    assumes certain defaults when details are not specified, so it is important to
    verify the provided output to ensure the proper filtering is in place.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建安全组规则时未提供任何额外的过滤信息，可能会导致一个规则允许来自*所有*源地址的入口访问。当没有指定详细信息时，OpenStack 会假设某些默认值，因此验证提供的输出非常重要，以确保已实施适当的过滤。
- en: Applying security groups to instances
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将安全组应用于实例
- en: Security groups are typically applied to instances upon boot, using the `openstack
    server create` command, but they can also be applied to individual ports, using
    the `openstack network port create` or `set` commands. When applied at boot, each
    listed security group is applied to each port associated with the instance. As
    a result, unnecessary rules may be applied to each interface that could result
    in a security risk or regression in performance of the underlying Neutron agent
    responsible for applying the rules. When applied to individual ports, users can
    ensure that if an instance is multihomed, the respective port has only the necessary
    rules needed to provide access to that interface.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组通常在启动时通过 `openstack server create` 命令应用于实例，但也可以通过 `openstack network port
    create` 或 `set` 命令应用于单个端口。在启动时应用时，每个列出的安全组都会应用于与实例关联的每个端口。因此，可能会在每个接口上应用不必要的规则，这可能导致安全风险或底层
    Neutron 代理性能下降，该代理负责应用规则。当应用于单个端口时，用户可以确保如果实例是多宿主的，相应端口仅具有提供对该接口访问所需的规则。
- en: Note
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The term multihomed refers to an instance that is connected to multiple networks
    via different interfaces.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 多宿主（multihomed）是指通过不同接口连接到多个网络的实例。
- en: Getting ready
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'When applying security groups to instances at boot, you will need the following
    information:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动时将安全组应用于实例时，您需要以下信息：
- en: Security group name or ID
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组名称或 ID
- en: 'When applying security groups to individual ports, you will need the following
    information:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在将安全组应用于单个端口时，您需要以下信息：
- en: Port name or ID
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口名称或 ID
- en: Security group name or ID
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组名称或 ID
- en: 'For our examples, the following will be used:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Port name: `COOKBOOK_TEST_PORT_1`'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口名称：`COOKBOOK_TEST_PORT_1`
- en: 'Security group name: `COOKBOOK_SG_WEB`'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组名称：`COOKBOOK_SG_WEB`
- en: 'Instance name: `COOKBOOK_INSTANCE_WEB`'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例名称：`COOKBOOK_INSTANCE_WEB`
- en: 'Instance flavor: `COOKBOOK_FLAVOR_TINY`'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例规格：`COOKBOOK_FLAVOR_TINY`
- en: 'Instance image: `COOKBOOK_IMAGE_CIRROS`'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例镜像：`COOKBOOK_IMAGE_CIRROS`
- en: 'Network name: `COOKBOOK_TENANT_NET_1`'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络名称：`COOKBOOK_TENANT_NET_1`
- en: How to do it…
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'With the `openstack` client installed on our system we are able to apply security
    groups with the following steps:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统上安装了 `openstack` 客户端后，我们可以按照以下步骤应用安全组：
- en: 'Create an instance and supply the security group at boot:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建实例并在启动时提供安全组：
- en: '[PRE33]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Use flavors and images that are appropriate for your environment, or those that
    may have been created in [Chapter 5](part0062_split_000.html#1R42S1-189e69df43a248268db97cde1b1a8e47
    "Chapter 5. Nova – OpenStack Compute"), *Nova – OpenStack Compute* and [Chapter
    6](part0087_split_000.html#2IV0U1-189e69df43a248268db97cde1b1a8e47 "Chapter 6. Glance
    – OpenStack Image Service"), *Glance – OpenStack Image Service*.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用适合你环境的规格和镜像，或使用在[第 5 章](part0062_split_000.html#1R42S1-189e69df43a248268db97cde1b1a8e47
    "第 5 章. Nova – OpenStack 计算")，*Nova – OpenStack 计算*和[第 6 章](part0087_split_000.html#2IV0U1-189e69df43a248268db97cde1b1a8e47
    "第 6 章. Glance – OpenStack 镜像服务")，*Glance – OpenStack 镜像服务*中创建的规格和镜像。
- en: Alternatively, security groups can be applied during port creation or to existing
    ports. With the OpenStack client installed on our system we are able to apply
    security groups with the following stes.
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，安全组可以在端口创建时或应用于现有端口时进行配置。通过在系统上安装 OpenStack 客户端，我们可以按照以下步骤应用安全组。
- en: 'Apply a security group to a new port:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将安全组应用到新端口：
- en: '[PRE34]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output will resemble the following:'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![How to do it…](img/00054.jpeg)'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤…](img/00054.jpeg)'
- en: 'Apply the security group to an existing port:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将安全组应用于现有端口：
- en: '[PRE35]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'No output is returned. However, the change can be confirmed by querying the
    security groups applied to the port using the `openstack port show` command:'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不会返回输出。不过，可以通过使用 `openstack port show` 命令查询应用到端口的安全组来确认该更改：
- en: '[PRE36]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output will resemble the following:'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![How to do it…](img/00055.jpeg)'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤…](img/00055.jpeg)'
- en: How it works...
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Security groups can be applied to instances at boot, ports at creation, or to
    existing ports. Neutron plugin agents on compute nodes are responsible for applying
    the respective filtering rules to the port on the host. Multiple security groups
    can be applied to a port in all scenarios.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组可以在启动时应用于实例，在创建端口时应用，或应用于现有端口。计算节点上的 Neutron 插件代理负责在主机上为端口应用相应的过滤规则。在所有场景中，可以将多个安全组应用于同一个端口。
- en: 'Security groups can be applied at boot with the following syntax:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组可以通过以下语法在启动时应用：
- en: '[PRE37]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Security groups can also be applied to new ports with the following syntax:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组也可以通过以下语法应用于新端口：
- en: '[PRE38]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Lastly, security groups can be applied to existing ports with the following
    syntax:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安全组可以通过以下语法应用于现有端口：
- en: '[PRE39]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Ports are bound to Neutron plugin agents that reside on hosts within the environment.
    For example, ports belonging to instances are bound to the agent on the respective
    compute node where the instance lives. This agent is responsible for setting up
    the virtual networking for the port. When a security group is applied to a port,
    the Neutron agent where the port is bound implements the filtering rules on the
    host. Other agents throughout the environment are notified that the group has
    changed and are updated accordingly.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 端口绑定到位于环境中主机上的 Neutron 插件代理。例如，属于实例的端口会绑定到该实例所在的计算节点上的代理。该代理负责为端口设置虚拟网络。当安全组应用于端口时，端口绑定的
    Neutron 代理在主机上实施过滤规则。环境中的其他代理会收到安全组已更改的通知，并相应地更新。
- en: Managing load balancers
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理负载均衡器
- en: Neutron includes a service known as **Load Balancing as-a-Service** (**LBaaS**),
    which provides users with the ability to create load balancers that balance traffic
    to applications deployed across instances in the cloud. In a reference architecture,
    Neutron relies on an open source load balancing package known as HAProxy to provide
    the load balancing functionality. Much like the Neutron L3 agent handles virtual
    routers and the DHCP agent handles virtual DHCP servers, the Neutron LBaaS agent
    handles the construction and configuration of virtual load balancers upon request.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron 包含一个名为 **负载均衡即服务**（**LBaaS**）的服务，允许用户创建将流量负载均衡到云中多个实例上部署的应用程序的负载均衡器。在参考架构中，Neutron
    依赖一个开源负载均衡软件包 HAProxy 来提供负载均衡功能。就像 Neutron L3 代理处理虚拟路由器、DHCP 代理处理虚拟 DHCP 服务器一样，Neutron
    LBaaS 代理负责在请求时构建和配置虚拟负载均衡器。
- en: Note
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**LBaaS** should not be confused with another load balancing project known
    as Octavia. Both provide similar load balancing functions, but only LBaaS is covered
    here.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '**LBaaS** 不应与另一个名为 Octavia 的负载均衡项目混淆。两者都提供类似的负载均衡功能，但这里只涵盖 LBaaS。'
- en: 'There are three major components to a load balancer in OpenStack:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 中，负载均衡器包含三个主要组件：
- en: Pool members
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 池成员
- en: Pools
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 池
- en: Listeners
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器
- en: A **pool member** describes a layer 4 object that is composed of the IP address
    and port of a service residing on an instance. For example, a pool member might
    be a web server with a configured address of `10.30.0.2` listening on TCP port
    `80`.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '**池成员** 描述一个第 4 层对象，由实例上服务的 IP 地址和端口组成。例如，池成员可能是一个 Web 服务器，地址配置为 `10.30.0.2`，并在
    TCP 端口 `80` 上监听。'
- en: A **pool** is a group of pool members serving identical content.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '**池** 是一组提供相同内容的池成员。'
- en: A **listener** is an object that represents a **virtual IP** (**VIP**) and port
    that is listening on the load balancer itself. Traffic to the virtual IP will
    be balanced among the members of the associated pool.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '**监听器** 是一个对象，表示负载均衡器本身正在监听的 **虚拟 IP**（**VIP**）和端口。流量将根据虚拟 IP 在关联池的成员之间进行负载均衡。'
- en: Additional components, such as health monitors and L7 policies, help extend
    the usefulness and functionality of a load balancer, but are not required.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 其他组件，如健康检查器和 L7 策略，有助于扩展负载均衡器的实用性和功能，但不是必需的。
- en: 'The workflow for creating a functioning load balancer is as follows:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 创建功能性负载均衡器的工作流程如下：
- en: Create a load balancer object
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建负载均衡器对象
- en: Create and associate listener
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并关联监听器
- en: Create and associate a pool
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并关联池
- en: Create and associate pool member(s)
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并关联池成员
- en: Create and associate health monitor(s) (optional)
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并关联健康检查器（可选）
- en: Creating load balancers
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建负载均衡器
- en: As of the Pike release of OpenStack, load balancer-related commands are not
    available in the OpenStack client. Instead, the `neutron` client should be used.
    Load balancers in OpenStack can be created using the `neutron lbaas-loadbalancer-create`
    command.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 从 OpenStack 的 Pike 版本开始，负载均衡器相关的命令不再在 OpenStack 客户端中提供。相反，应使用 `neutron` 客户端。可以通过
    `neutron lbaas-loadbalancer-create` 命令在 OpenStack 中创建负载均衡器。
- en: Getting ready
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'You will need the following details, at a minimum, for the load balancer:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下详细信息来创建负载均衡器：
- en: VIP subnet
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VIP 子网
- en: 'A name is also recommended. For our example, the following will be used:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 还推荐为其命名。对于我们的示例，以下内容将被使用：
- en: 'Name: `COOKBOOK_LOADBALANCER_1`'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`COOKBOOK_LOADBALANCER_1`
- en: 'VIP subnet: `COOKBOOK_TENANT_SUBNET_1`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VIP 子网：`COOKBOOK_TENANT_SUBNET_1`
- en: How to do it…
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With the Neutron client installed on our system, we are now able to create
    a load balancer object with the following command:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统上安装了 Neutron 客户端后，现在可以使用以下命令创建负载均衡器对象：
- en: '[PRE40]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output will resemble the following:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00056.jpeg)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00056.jpeg)'
- en: How it works...
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Load balancers are created with the following syntax:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器通过以下语法创建：
- en: '[PRE41]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: When a load balancer is created, OpenStack assigns an IP address known as a
    virtual IP. The VIP will be used by clients to access the load-balanced application.
    Creating a load balancer object is only the first step in load balancing traffic
    to instances. The next steps, creating a listener, pool, and health monitor will
    be discussed in the following sections.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 当负载均衡器创建时，OpenStack 会分配一个被称为虚拟 IP 的 IP 地址。客户端将使用 VIP 来访问负载均衡的应用程序。创建负载均衡器对象只是将流量负载均衡到实例的第一步。接下来的步骤，创建监听器、池和健康检查器，将在接下来的章节中讨论。
- en: Creating pools
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建池
- en: Pools that are associated with load balancers are objects that represent a collection
    of instances that receive traffic sent to the VIP. Load balancing pools in OpenStack
    can be created using the `neutron lbaas-pool-create` command.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 与负载均衡器关联的池是代表接收发送到 VIP 的流量的实例集合的对象。在 OpenStack 中，可以使用 `neutron lbaas-pool-create`
    命令创建负载均衡池。
- en: Getting ready
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need the following details, at a minimum, for the pool:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下详细信息来配置池：
- en: Balancing algorithm
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平衡算法
- en: Protocol
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议
- en: Load balancer or listener
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器或监听器
- en: 'A name is also recommended. For our example, the following will be used:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 也推荐指定一个名称。在我们的示例中，将使用以下名称：
- en: 'Name: `COOKBOOK_POOL_1`'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`COOKBOOK_POOL_1`
- en: 'Balancing algorithm: `ROUND_ROBIN`'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平衡算法：`ROUND_ROBIN`
- en: 'Protocol: `HTTP`'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议：`HTTP`
- en: 'Load balancer: `COOKBOOK_LOADBALANCER_1`'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器：`COOKBOOK_LOADBALANCER_1`
- en: A load balancer can be associated with multiple listeners, which in turn can
    be associated with their own respective pool. A common scenario for this type
    of set up would be a load balancer with a listener on port `80` and another on
    port `443`, each with their respective backend pool.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器可以与多个监听器关联，每个监听器可以与其各自的池关联。此类设置的常见场景是，一个负载均衡器上有一个监听器监听端口`80`，另一个监听器监听端口`443`，每个监听器都有其各自的后端池。
- en: How to do it…
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With the Neutron client installed on our system, we are now able to create
    a load balancer pool with the following command:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统上安装了 Neutron 客户端后，我们现在可以使用以下命令创建一个负载均衡器池：
- en: '[PRE42]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The output will resemble the following:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![How to do it…](img/00057.jpeg)'
  id: totrans-435
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00057.jpeg)'
- en: How it works...
  id: totrans-436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Load balancer pools are created with the following syntax:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡池的创建语法如下：
- en: '[PRE43]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Other load-balancing objects, such as members and monitors, reference pools
    and cannot be created without being applied to one at that time.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 其他负载均衡对象，如成员和监控器，引用池，并且必须在创建时应用到池中。
- en: Creating members
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建成员
- en: Members are associated with pools, and are objects that represent a backend
    application listening on a particular IP and port. Pool members in OpenStack can
    be created using the `neutron lbaas-member-create` command.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 成员与池关联，代表一个在特定 IP 和端口上监听的后端应用程序。在 OpenStack 中，池成员可以通过 `neutron lbaas-member-create`
    命令创建。
- en: Getting ready
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need the following details, at a minimum, for the member:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下详细信息来配置成员：
- en: Subnet name
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网名称
- en: IP address
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 地址
- en: Port
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口
- en: Pool name
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 池名称
- en: 'A name is also recommended. For our example, the following will be used:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 也推荐指定一个名称。在我们的示例中，将使用以下名称：
- en: 'Name: `COOKBOOK_MEMBER_1`'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`COOKBOOK_MEMBER_1`
- en: 'Subnet name: `COOKBOOK_TENANT_SUBNET_1`'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网名称：`COOKBOOK_TENANT_SUBNET_1`
- en: 'IP Address: `172.16.200.11` (Corresponds to `COOKBOOK_TEST_PORT_2`)'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 地址：`172.16.200.11`（对应`COOKBOOK_TEST_PORT_2`）
- en: 'Port: `80`'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：`80`
- en: 'Pool name: `COOKBOOK_POOL_1`'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 池名称：`COOKBOOK_POOL_1`
- en: A member can only be associated with a single pool. However, the same IP address
    and application port combination can be used for multiple members.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 一个成员只能与一个池关联。但是，相同的 IP 地址和应用端口组合可以用于多个成员。
- en: How to do it…
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With the Neutron client installed on our system we are able to create a pool
    member with the following command:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统上安装了 Neutron 客户端后，我们可以使用以下命令创建一个池成员：
- en: '[PRE44]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The output will resemble the following:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![How to do it…](img/00058.jpeg)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00058.jpeg)'
- en: How it works...
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Pool members are created with the following syntax:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 池成员的创建语法如下：
- en: '[PRE45]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Creating listeners
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建监听器
- en: Listeners are associated with load balancer objects, and they describe the relationship
    between the load balancer VIP and the port a service is listening on. Clients
    send traffic to the listener address and port, which is then proxied and sent
    to one member within pool of servers. Each listener can be configured to send
    traffic to a different pool. Listeners in OpenStack can be created using the `neutron
    lbaas-listener-create` command.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 监听器与负载均衡器对象关联，描述了负载均衡器 VIP 与服务监听的端口之间的关系。客户端将流量发送到监听器地址和端口，然后该流量被代理并发送到池中的一个成员。每个监听器可以配置为将流量发送到不同的池。在
    OpenStack 中，监听器可以通过 `neutron lbaas-listener-create` 命令创建。
- en: Getting ready
  id: totrans-465
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need the following details, at a minimum, for the listener:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下详细信息来配置监听器：
- en: Load balancer name
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器名称
- en: Protocol
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议
- en: Port
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口
- en: 'A name and default pool are also recommended. For our example, the following
    will be used:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 也推荐指定名称和默认池。在我们的示例中，将使用以下名称：
- en: 'Name: `COOKBOOK_LISTENER_1`'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`COOKBOOK_LISTENER_1`
- en: 'Load balancer name: `COOKBOOK_LOADBALANCER_1`'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器名称：`COOKBOOK_LOADBALANCER_1`
- en: 'Protocol: `HTTP`'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议：`HTTP`
- en: 'Port: `80`'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：`80`
- en: 'Default pool: `COOKBOOK_POOL_1`'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认池：`COOKBOOK_POOL_1`
- en: How to do it…
  id: totrans-476
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'With the Neutron client installed on our system, we are now able to create
    a listener with the following command:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统上安装了 Neutron 客户端后，现在可以使用以下命令创建一个监听器：
- en: '[PRE46]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The output will resemble the following:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![How to do it…](img/00059.jpeg)'
  id: totrans-480
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作……](img/00059.jpeg)'
- en: How it works...
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: 'Listeners are created with the following syntax:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 监听器是通过以下语法创建的：
- en: '[PRE47]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Tip
  id: totrans-484
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Access to the listener may be restricted by applying a security group to the
    respective port of the load balancer address. Use the `openstack port set` command
    described earlier in this chapter to apply a security group to the listener's
    port.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将安全组应用到负载均衡器地址的相应端口来限制对监听器的访问。使用本章前面描述的 `openstack port set` 命令来将安全组应用于监听器的端口。
- en: Verifying connectivity
  id: totrans-486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证连接性
- en: Once the workflow has been completed and the application on the pool members
    has been started, connectivity to the load balancer VIP can be verified using
    a web browser or the `curl` command from a client that can reach the VIP. In this
    example, a web server is running on the pool member configured in a previous section.
    We will be connecting from the `qlbaas` namespace associated with the load balancer,
    but you can also connect from the `qdhcp` namespace associated with the network
    from which the VIP address was sourced.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦工作流完成并且池成员上的应用程序已启动，可以使用 Web 浏览器或从能够访问 VIP 的客户端的 `curl` 命令验证到负载均衡器 VIP 的连接。在本示例中，Web
    服务器在前一节中配置的池成员上运行。我们将从与负载均衡器关联的 `qlbaas` 命名空间进行连接，但也可以从与 VIP 地址来源的网络关联的 `qdhcp`
    命名空间进行连接。
- en: Getting ready
  id: totrans-488
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You will need the following details, at a minimum, to test connectivity
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要以下详细信息来测试连接性
- en: Network ID or Load balancer ID
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络 ID 或负载均衡器 ID
- en: VIP address and port
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VIP 地址和端口
- en: 'For our example, the following will be used:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，将使用以下内容：
- en: 'Load Balancer ID: `aa599cee-b49f-44f1-a0fd-51fa69ebf6db` (`COOKBOOK_LOADBALANCER_1`)'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器 ID：`aa599cee-b49f-44f1-a0fd-51fa69ebf6db`（`COOKBOOK_LOADBALANCER_1`）
- en: 'VIP address and port: `172.16.200.14:80`'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VIP 地址和端口：`172.16.200.14:80`
- en: How to do it…
  id: totrans-495
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'From within the Neutron agent container, connectivity to the VIP can be confirmed
    using `curl` within the `qdhcp` or `qlbaas` namespace:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Neutron 代理容器内，可以使用 `curl` 在 `qdhcp` 或 `qlbaas` 命名空间内确认与 VIP 的连接：
- en: '[PRE48]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The output will resemble the following:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '[PRE49]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may need to install the `curl` utility for the command to work. In the Neutron
    agent container, this can be accomplished by running `apt install curl`. The configuration
    of the web server on the pool member is beyond the scope of this book.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要安装 `curl` 工具才能使命令正常工作。在 Neutron 代理容器中，可以通过运行 `apt install curl` 来完成此操作。池成员上
    Web 服务器的配置超出了本书的范围。
- en: To provide access to the load balancer virtual IP from outside networks, it
    may be necessary to map a floating IP to the virtual IP. Instructions provided
    earlier in this chapter can assist with that task.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 若要从外部网络访问负载均衡器虚拟 IP，可能需要将浮动 IP 映射到虚拟 IP。可以参考本章前面的说明来完成该任务。
