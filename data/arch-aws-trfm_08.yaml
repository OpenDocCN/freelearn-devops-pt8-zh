- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Deploying Serverless Projects with Terraform
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Terraform部署无服务器项目
- en: Serverless computing has become increasingly popular in recent years, and for
    good reason. With AWS Lambda and AWS Fargate, you can develop and deploy your
    applications without the need to manage servers or infrastructure. Terraform makes
    it easy to design, deploy, and manage your serverless infrastructure on AWS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算在近年来变得越来越流行，原因也很充分。有了AWS Lambda和AWS Fargate，你可以开发和部署应用程序，而无需管理服务器或基础设施。Terraform使得在AWS上设计、部署和管理无服务器基础设施变得容易。
- en: In this chapter, we will explore the concepts of AWS landing zones and foundations,
    and how they can help you set up and manage your AWS accounts and infrastructure.
    We will cover the different options available for implementing landing zones and
    how to select the best design for your needs. Additionally, we will explore the
    use of AWS Organizations with Terraform to manage your AWS infrastructure.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨AWS着陆区和基础设施的概念，以及它们如何帮助你设置和管理AWS账户和基础设施。我们将涵盖实现着陆区的不同选项，并帮助你选择适合你需求的最佳设计。此外，我们还将探索如何使用AWS
    Organizations和Terraform来管理你的AWS基础设施。
- en: Next, we will dive into the world of serverless computing, exploring what it
    is and when to use it. We will cover AWS Lambda and AWS Fargate, and how to use
    them to build and deploy your applications. We will also explore different deployment
    patterns and how to use Terraform to design and deploy your serverless infrastructure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入探讨无服务器计算的世界，了解它是什么以及何时使用它。我们将介绍AWS Lambda和AWS Fargate，并讲解如何使用它们构建和部署应用程序。我们还将探索不同的部署模式，并讲解如何使用Terraform设计和部署无服务器基础设施。
- en: By the end of this chapter, you will have a solid understanding of AWS landing
    zones and foundations, as well as how to design and deploy serverless infrastructure
    using Terraform.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将对AWS着陆区和基础设施有一个扎实的理解，并且掌握如何使用Terraform设计和部署无服务器基础设施。
- en: What are landing zones and why do we need them?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是着陆区，为什么我们需要它们？
- en: A landing zone is a reference architecture for a multi-account AWS environment.
    It provides a set of foundational resources and best practices that you can use
    as a starting point for your infrastructure.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 着陆区是多账户AWS环境的参考架构。它提供了一组基础资源和最佳实践，你可以将其作为基础来开始你的基础设施设计。
- en: 'A landing zone typically includes the following components:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 着陆区通常包括以下组件：
- en: '**A core account**: This is the primary account that contains the shared resources
    for the environment, such as the landing zone itself and the **Identity and Access
    Management** (**IAM**) resources.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个核心账户**：这是包含环境共享资源的主要账户，例如着陆区本身和**身份与访问管理**（**IAM**）资源。'
- en: '**One or more member accounts**: These are the accounts that contain the resources
    for your applications and workloads. The member accounts are linked to the core
    account and inherit the shared resources and policies from the core account.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个或多个成员账户**：这些账户包含你的应用程序和工作负载的资源。成员账户与核心账户关联，并继承核心账户的共享资源和政策。'
- en: '**A networking layer**: This includes the **Virtual Private Clouds** (**VPCs**)
    and other networking resources that are shared across the accounts.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个网络层**：包括**虚拟私有云**（**VPCs**）和其他在各账户之间共享的网络资源。'
- en: '**A security layer**: This includes the IAM policies and other security resources
    that are shared across the accounts.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个安全层**：包括IAM政策和其他在各账户之间共享的安全资源。'
- en: '**A governance layer**: This includes the policies and controls that are used
    to enforce compliance and manage the environment.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个治理层**：包括用于执行合规性和管理环境的政策和控制措施。'
- en: A landing zone can help you manage a multi-account environment more effectively
    and efficiently by providing a consistent set of resources and practices across
    all accounts. It can also help you onboard new accounts and applications more
    quickly by providing a standard framework to follow.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 着陆区可以通过提供一致的资源和实践，帮助你更有效、更高效地管理多账户环境。它还可以通过提供一个标准框架，帮助你更快地引导新账户和应用程序。
- en: 'There are several reasons why you might want to use a landing zone in your
    AWS environment:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望在AWS环境中使用着陆区的原因有几个：
- en: '**Improved security and compliance**: A landing zone provides a set of shared
    security and compliance resources, such as IAM policies and network controls,
    that are applied consistently across all accounts. This can help you improve the
    security and compliance of your environment by enforcing best practices and reducing
    the risk of misconfigurations.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高安全性和合规性**：着陆区提供了一组共享的安全性和合规性资源，例如 IAM 策略和网络控制，这些资源会在所有账户中一致应用。这可以通过强制执行最佳实践并减少配置错误的风险，帮助您提高环境的安全性和合规性。'
- en: '**Improved efficiency and automation**: A landing zone can help you automate
    the setup and management of your multi-account environment by providing a standard
    set of resources and practices to follow. This can save you time and effort and
    reduce the risk of errors.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高效率和自动化**：着陆区可以通过提供一套标准的资源和实践来帮助您自动化设置和管理多账户环境。这可以节省时间和精力，减少出错的风险。'
- en: '**Improved scalability and flexibility**: A landing zone can help you scale
    your environment more easily by providing a flexible, modular architecture that
    can accommodate new accounts and applications as needed.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高可扩展性和灵活性**：着陆区可以通过提供一个灵活、模块化的架构，帮助您更容易地扩展环境，随着需要添加新账户和应用程序。'
- en: '**Improved governance and control**: A landing zone can help you enforce governance
    and control over your environment by providing a central location for managing
    shared resources and policies.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的治理和控制**：一个着陆区可以通过提供一个集中位置来管理共享资源和策略，帮助您强制执行环境中的治理和控制。'
- en: AWS Foundations
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS 基础架构
- en: AWS Foundations is a set of best practices and recommended configurations for
    building and managing infrastructure on AWS. It provides guidance on how to set
    up your AWS accounts, networking, security, and governance in a way that is scalable,
    secure, and compliant.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 基础架构是一组用于在 AWS 上构建和管理基础设施的最佳实践和推荐配置。它提供了如何设置您的 AWS 账户、网络、安全和治理的指南，确保架构可扩展、安全且合规。
- en: 'AWS Foundations includes recommendations for the following areas:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 基础架构包括以下领域的建议：
- en: '**Account structure**: This includes guidance on how to set up and organize
    your AWS accounts and how to use AWS Organizations to manage them'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户结构**：这包括如何设置和组织您的 AWS 账户，以及如何使用 AWS Organizations 来管理这些账户的指南。'
- en: '**Networking**: This includes guidance on how to set up your VPCs, subnets,
    and routing to create a scalable and secure network architecture'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：这包括如何设置您的 VPC、子网和路由，以创建可扩展和安全的网络架构的指南。'
- en: '**Security**: This includes guidance on how to secure your AWS resources using
    IAM, encryption, and other security controls'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：这包括如何使用 IAM、加密和其他安全控制来保护您的 AWS 资源的指南。'
- en: '**Governance**: This includes guidance on how to enforce compliance and manage
    your AWS environment using policies, controls, and monitoring'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**治理**：这包括如何使用政策、控制和监控来强制执行合规性并管理您的 AWS 环境的指南。'
- en: AWS Foundations is intended to provide a set of best practices and recommendations
    that you can use as a starting point for building and managing your infrastructure
    on AWS. It is not a one-size-fits-all solution, and you may need to tailor the
    recommendations to fit the specific needs of your organization.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 基础架构旨在提供一套最佳实践和建议，您可以将其作为构建和管理 AWS 上基础设施的起点。它不是一种通用解决方案，您可能需要根据组织的具体需求调整这些建议。
- en: AWS Foundations is not a product or a service offered by AWS, but rather a set
    of guidelines and recommendations that you can use to build your infrastructure
    on AWS.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 基础架构不是 AWS 提供的产品或服务，而是一套您可以用来在 AWS 上构建基础设施的指南和建议。
- en: AWS Foundations includes recommendations for setting up and organizing your
    AWS accounts, creating a scalable and secure networking architecture, securing
    your AWS resources, and enforcing compliance and governance in your environment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 基础架构包括设置和组织您的 AWS 账户、创建可扩展和安全的网络架构、保护您的 AWS 资源以及在环境中强制执行合规性和治理的推荐。
- en: AWS Foundations is intended to be a living document that is regularly updated
    with new best practices and recommendations as they become available.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 基础架构旨在成为一个动态文档，随着新最佳实践和推荐的发布，定期更新。
- en: How to build landing zones with Terraform in AWS
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 Terraform 在 AWS 中构建着陆区
- en: AWS Control Tower Account Factory is a feature of AWS Control Tower that allows
    you to automate the creation of member accounts in your multi-account AWS environment.
    With Account Factory, you can use Terraform templates to define the resources
    and configuration for your member accounts and then use the AWS Control Tower
    API to create the accounts and provision the resources automatically.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Control Tower Account Factory是AWS Control Tower的一项功能，允许您在多账户的AWS环境中自动化创建成员账户。通过Account
    Factory，您可以使用Terraform模板来定义成员账户的资源和配置，然后使用AWS Control Tower API自动创建账户并提供资源。
- en: 'Here are some key features of AWS Control Tower Account Factory:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是AWS Control Tower Account Factory的一些主要特性：
- en: '**Automated account creation**: With Account Factory, you can use Terraform
    templates to define the resources and configuration for your member accounts and
    then use the AWS Control Tower API to create the accounts and provision the resources
    automatically.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化账户创建**：通过Account Factory，您可以使用Terraform模板来定义成员账户的资源和配置，然后使用AWS Control
    Tower API自动创建账户并提供资源。'
- en: '**Standardized account setup**: Account Factory allows you to enforce a standard
    set of resources and configuration for your member accounts, helping you ensure
    consistency and compliance across your environment.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准化账户设置**：Account Factory允许您对成员账户强制执行一套标准的资源和配置，帮助您确保环境中的一致性和合规性。'
- en: '**Customization options**: You can use variables in your Terraform templates
    to customize the resources and configuration for your member accounts. This allows
    you to create accounts that are tailored to the specific needs of your organization.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义选项**：您可以在Terraform模板中使用变量来定制成员账户的资源和配置。这使您能够创建符合组织特定需求的账户。'
- en: '**Integration with AWS Control Tower**: Account Factory is integrated with
    AWS Control Tower, allowing you to use the AWS Control Tower dashboard to monitor
    and manage your member accounts.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与AWS Control Tower的集成**：Account Factory与AWS Control Tower集成，允许您使用AWS Control
    Tower仪表板来监控和管理您的成员账户。'
- en: 'There is an informative tutorial from Terraform on how to utilize Account Factory
    for Terraform (AFT): [https://developer.hashicorp.com/terraform/tutorials/aws/aws-control-tower-aft](https://developer.hashicorp.com/terraform/tutorials/aws/aws-control-tower-aft).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform有一个详细的教程，介绍如何利用Terraform的Account Factory (AFT)：[https://developer.hashicorp.com/terraform/tutorials/aws/aws-control-tower-aft](https://developer.hashicorp.com/terraform/tutorials/aws/aws-control-tower-aft)。
- en: What is serverless?
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是无服务器计算？
- en: Serverless computing is a cloud computing execution model that allows the cloud
    provider to dynamically allocate resources to run the user’s code, with the user
    only paying for the resources consumed. This model frees the user from the hassle
    of provisioning, scaling, and maintaining the underlying infrastructure.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算是一种云计算执行模型，允许云服务提供商动态分配资源来运行用户的代码，用户仅为实际消耗的资源付费。这种模型让用户无需烦恼底层基础设施的配置、扩展和维护。
- en: In a serverless model, the user creates and deploys code in the form of functions,
    which are executed in response to events or invocations. The cloud provider automatically
    allocates the necessary resources to run the function, and the user only pays
    for the actual execution of the function.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在无服务器模型中，用户以函数的形式创建和部署代码，这些函数会根据事件或调用进行执行。云服务提供商会自动分配必要的资源来运行该函数，用户只需为函数的实际执行付费。
- en: Serverless computing can provide several benefits, including reduced operational
    overhead, scalability, and cost-efficiency. It is particularly well suited for
    applications that have intermittent or unpredictable workloads, as the user only
    pays for the resources used to run the code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算可以带来多个好处，包括减少运营开销、可扩展性和成本效益。它特别适合那些具有间歇性或不可预测工作负载的应用程序，因为用户只需为运行代码所使用的资源付费。
- en: AWS offers several serverless computing services, including AWS Lambda, which
    allows you to run code in response to events or invocations, and AWS Fargate,
    which allows you to run containerized applications in a serverless environment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供多个无服务器计算服务，包括AWS Lambda，它允许您在事件或调用时运行代码，以及AWS Fargate，它允许您在无服务器环境中运行容器化应用程序。
- en: What are AWS serverless patterns?
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是AWS无服务器模式？
- en: AWS serverless patterns are templates for common ways to build and deploy applications
    using serverless technologies on **Amazon Web Services** (**AWS**). These patterns
    provide guidance on how to design and architect your applications to take advantage
    of the benefits of serverless computing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 无服务器模式是用于在 **Amazon Web Services** (**AWS**) 上使用无服务器技术构建和部署应用程序的常见模板。这些模式提供了设计和架构应用程序的指导，帮助你利用无服务器计算的优势。
- en: 'There are many different serverless patterns that you can use, depending on
    the requirements of your application. Some common serverless patterns include
    the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序的需求，你可以使用多种不同的无服务器模式。一些常见的无服务器模式包括以下几种：
- en: '**Event-driven architecture**: This pattern involves building applications
    that respond to events, such as a user uploading a file or a sensor sending data'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件驱动架构**：这一模式涉及构建响应事件的应用程序，例如用户上传文件或传感器发送数据。'
- en: '**Microservices**: This pattern involves breaking up a large application into
    smaller, independent services that can be developed, deployed, and scaled independently'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**：这一模式涉及将一个大型应用程序拆分成更小的、独立的服务，这些服务可以独立开发、部署和扩展。'
- en: '**Data processing**: This pattern involves using serverless technologies to
    process large amounts of data, such as converting data from one format to another
    or aggregating data from multiple sources'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据处理**：这一模式涉及使用无服务器技术处理大量数据，例如将数据从一种格式转换为另一种格式，或从多个来源汇总数据。'
- en: '**Web applications**: This pattern involves using serverless technologies to
    build and deploy web applications, such as static websites or dynamic web applications'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web 应用程序**：这一模式涉及使用无服务器技术构建和部署 Web 应用程序，例如静态网站或动态 Web 应用程序。'
- en: These are just a few examples of the types of serverless patterns that are available.
    There are many other patterns that you can use to build and deploy your applications
    on AWS.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是可用的无服务器模式类型中的一部分。你可以使用许多其他模式在 AWS 上构建和部署应用程序。
- en: 'AWS serverless resources are resources that are used to build and deploy applications
    using serverless technologies on AWS. These resources can include a variety of
    different services and tools, such as the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 无服务器资源是用来构建和部署使用 AWS 上无服务器技术的应用程序的资源。这些资源可能包括各种不同的服务和工具，以下是一些例子：
- en: '**AWS Lambda**: A service that lets you run code without provisioning or managing
    servers'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Lambda**：一个让你无需配置或管理服务器就能运行代码的服务。'
- en: '**Amazon API Gateway**: A service that makes it easy to create, publish, maintain,
    monitor, and secure APIs'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon API Gateway**：一个使得创建、发布、维护、监控和保护 API 变得简单的服务。'
- en: '**AWS Fargate**: A service that lets you run containers without having to manage
    the underlying EC2 instances'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Fargate**：一个让你可以运行容器而无需管理底层 EC2 实例的服务。'
- en: '**AWS Step Functions**: A service that makes it easy to coordinate the functions
    of distributed applications and microservices'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Step Functions**：一个使得协调分布式应用程序和微服务的功能变得简单的服务。'
- en: '**AWS App Runner**: A service that makes it easy to build and deploy containerized
    applications'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS App Runner**：一个使得构建和部署容器化应用程序变得简单的服务。'
- en: What is AWS Lambda?
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 AWS Lambda？
- en: AWS Lambda is a fully managed serverless compute service that allows you to
    execute your code in response to various events, such as changes to data in an
    Amazon S3 bucket or a new item being added to a DynamoDB table. It automatically
    manages the underlying compute resources for you, so you don’t need to worry about
    provisioning or maintaining any servers. This enables you to focus on writing
    and deploying your code, without any administrative overhead.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 是一个完全托管的无服务器计算服务，允许你响应各种事件来执行代码，例如 Amazon S3 存储桶中的数据变化或向 DynamoDB
    表中添加新项。它会自动为你管理底层的计算资源，因此你无需担心配置或维护任何服务器。这使你能够专注于编写和部署代码，而无需任何管理开销。
- en: 'Some common use cases for AWS Lambda include the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的 AWS Lambda 使用案例包括以下几种：
- en: Running backend logic for web and mobile applications
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Web 和移动应用程序的后端逻辑。
- en: Processing data streams and event triggers
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理数据流和事件触发器。
- en: Automating maintenance and administration tasks
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化维护和管理任务。
- en: In Lambda, you write your code and then upload it to the service. When an event
    occurs that triggers your code, Lambda executes it and automatically scales the
    underlying infrastructure to run your code. You only pay for the compute time
    that you consume, so you can run your code without having to worry about managing
    servers or infrastructure.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Lambda 中，您编写代码并将其上传到服务。当发生触发代码的事件时，Lambda 会执行代码，并自动扩展底层基础设施来运行您的代码。您只需为实际使用的计算时间付费，因此可以在不担心管理服务器或基础设施的情况下运行代码。
- en: AWS Lambda supports a variety of programming languages, including Node.js, Python,
    Java, C#, and Go, and you can use it in conjunction with other AWS services to
    build powerful and scalable applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 支持多种编程语言，包括 Node.js、Python、Java、C# 和 Go，您可以与其他 AWS 服务结合使用，构建强大且可扩展的应用程序。
- en: 'Let’s look at some key features:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些关键功能：
- en: '**Lambda functions**: In Lambda, you create functions that contain your code.
    These functions are triggered by events, such as a user uploading a file to Amazon
    S3 or a request to an API Gateway endpoint. You can specify the events that trigger
    your functions, and Lambda automatically executes the function when these events
    occur.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lambda 函数**：在 Lambda 中，您创建包含代码的函数。这些函数由事件触发，例如用户将文件上传到 Amazon S3 或向 API Gateway
    端点发出请求。您可以指定触发函数的事件，并且当这些事件发生时，Lambda 会自动执行该函数。'
- en: '**Execution environment**: AWS Lambda provides a fully managed execution environment
    for your functions. This includes the infrastructure and operating system, as
    well as the language runtime (e.g., Node.js, Python, Java, etc.). When you create
    a function, you can specify the runtime and the amount of memory that you want
    to allocate to your function.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行环境**：AWS Lambda 提供完全托管的执行环境，供您的函数使用。此环境包括基础设施、操作系统以及语言运行时（例如 Node.js、Python、Java
    等）。创建函数时，您可以指定运行时和要分配给函数的内存大小。'
- en: '**Scaling**: One of the benefits of using AWS Lambda is that it automatically
    scales to meet the needs of your application. When your function is invoked, Lambda
    allocates the necessary compute resources to run your code. If your function is
    invoked more frequently, Lambda automatically scales up to meet the increased
    demand.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展**：使用 AWS Lambda 的一个好处是，它会自动扩展以满足应用程序的需求。当您的函数被调用时，Lambda 会分配必要的计算资源来运行您的代码。如果函数被调用的频率增加，Lambda
    会自动扩展以满足更高的需求。'
- en: '**Integrations**: AWS Lambda integrates with a wide variety of other AWS services,
    allowing you to build powerful and scalable applications. For example, you can
    use Lambda with Amazon S3 to automatically process files as they are uploaded
    to the bucket, or with Amazon DynamoDB to automatically update records in the
    database as they are added or modified.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成**：AWS Lambda 与多种其他 AWS 服务集成，使您能够构建强大且可扩展的应用程序。例如，您可以将 Lambda 与 Amazon
    S3 一起使用，自动处理上传到存储桶的文件，或与 Amazon DynamoDB 一起使用，自动更新数据库中添加或修改的记录。'
- en: What is AWS Fargate?
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 AWS Fargate？
- en: AWS Fargate is a fully managed service that makes it easier to run containerized
    applications on AWS. AWS Fargate removes the need to manage the underlying infrastructure,
    so you can focus on building and running your applications.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate 是一项完全托管的服务，使得在 AWS 上运行容器化应用程序变得更加容易。AWS Fargate 免除了管理底层基础设施的需求，因此您可以专注于构建和运行您的应用程序。
- en: With AWS Fargate, you simply specify the number and type of resources that you
    want to allocate to your applications, and AWS Fargate takes care of the rest.
    It automatically allocates the necessary compute resources, such as Amazon **Elastic
    Compute Cloud** (**EC2**) instances, and ensures that your containers are running
    in a highly available and scalable manner.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS Fargate，您只需指定要分配给应用程序的资源数量和类型，AWS Fargate 会处理其余部分。它会自动分配必要的计算资源，例如 Amazon
    **弹性计算云**（**EC2**）实例，并确保您的容器以高可用和可扩展的方式运行。
- en: AWS Fargate is a good choice for developers who want to run containerized applications
    on AWS without the overhead of managing the underlying infrastructure. It is especially
    well suited for applications that require rapid scaling or that have unpredictable
    workloads, as AWS Fargate can automatically scale your resources up or down as
    needed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate 是开发者在不需要管理底层基础设施的情况下，运行容器化应用程序的理想选择。它特别适用于需要快速扩展或具有不可预测工作负载的应用程序，因为
    AWS Fargate 可以根据需要自动扩展资源。
- en: AWS Fargate is a fully managed service, which means that AWS takes care of the
    underlying infrastructure for you. This includes provisioning and managing the
    EC2 instances that run your tasks, as well as handling any infrastructure maintenance
    or patching.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate 是一种完全托管的服务，这意味着 AWS 会为你管理底层基础设施。这包括为运行任务的 EC2 实例提供资源和管理，以及处理任何基础设施维护或修补。
- en: AWS Fargate is available in all regions where Amazon ECS is available, and you
    can use it to run tasks on both Amazon ECS and Amazon **Elastic Kubernetes** **Service**
    (**EKS**).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate 在所有 Amazon ECS 可用的区域都可以使用，你可以使用它在 Amazon ECS 和 Amazon **弹性 Kubernetes
    服务**（**EKS**）上运行任务。
- en: AWS Fargate supports all of the same features as Amazon ECS, including the ability
    to use Amazon ECS task definitions to define your tasks, integration with other
    AWS services such as Amazon CloudWatch and AWS IAM, and support for Docker containers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate 支持与 Amazon ECS 相同的所有功能，包括使用 Amazon ECS 任务定义来定义任务、与其他 AWS 服务（如 Amazon
    CloudWatch 和 AWS IAM）的集成，以及对 Docker 容器的支持。
- en: AWS Fargate is well suited for use cases where you want to run containers but
    don’t want to worry about the underlying infrastructure. It can be a good choice
    for developers who want to focus on building and deploying applications rather
    than managing infrastructure, or for organizations that want to run containerized
    applications but don’t have the in-house expertise to manage the underlying infrastructure.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate 非常适合运行容器的用例，尤其是当你不想担心底层基础设施时。它适合那些想专注于构建和部署应用程序，而非管理基础设施的开发者，或是那些想运行容器化应用程序，但没有内部管理底层基础设施能力的组织。
- en: You can use AWS Fargate with Amazon **Elastic Container Service** (**ECS**)
    or Amazon EKS to run your containerized applications. It is also integrated with
    other AWS services, such as Amazon CloudWatch and AWS IAM, which you can use to
    monitor and secure your applications.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 AWS Fargate 和 Amazon **弹性容器服务**（**ECS**）或 Amazon EKS 来运行你的容器化应用程序。它还与其他
    AWS 服务集成，如 Amazon CloudWatch 和 AWS IAM，您可以使用这些服务来监控和保护您的应用程序。
- en: How to design a serverless infrastructure with Terraform
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Terraform 设计无服务器基础设施
- en: 'Here are general steps you can follow to design a serverless infrastructure
    using Terraform:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用 Terraform 设计无服务器基础设施的通用步骤：
- en: Identify the components of your infrastructure that can be implemented as serverless
    resources. This might include things such as APIs, backend workers, and data processing
    pipelines.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定可以作为无服务器资源实现的基础设施组件。这可能包括 API、后台工作者和数据处理管道等内容。
- en: Determine which serverless platforms and services you will use to implement
    these components. This might include services such as AWS Lambda, Amazon API Gateway,
    and Amazon DynamoDB, or managed services such as AWS Fargate or AWS AppSync.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定你将使用哪些无服务器平台和服务来实现这些组件。这可能包括像 AWS Lambda、Amazon API Gateway 和 Amazon DynamoDB
    这样的服务，或者像 AWS Fargate 或 AWS AppSync 这样的托管服务。
- en: Define the required IAM roles and permissions for your serverless resources.
    This will typically involve creating IAM policies and attaching them to IAM roles
    that your resources can assume.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义服务器资源所需的 IAM 角色和权限。通常这涉及创建 IAM 策略并将其附加到资源可以假定的 IAM 角色上。
- en: Use Terraform to create the necessary infrastructure resources, such as VPCs,
    security groups, and subnets. You can also use Terraform to create and configure
    the serverless resources themselves.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Terraform 创建必要的基础设施资源，如 VPC、网络安全组和子网。你也可以使用 Terraform 创建和配置无服务器资源本身。
- en: Define any dependencies between your resources using Terraform’s dependencies
    syntax. This will ensure that resources are created in the correct order and that
    any necessary connections are established between them.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Terraform 的依赖关系语法定义资源之间的任何依赖关系。这将确保资源按正确的顺序创建，并且它们之间建立必要的连接。
- en: Use Terraform’s testing and validation features to ensure that your infrastructure
    is configured correctly and adheres to best practices. This might include things
    such as running `terraform plan` to preview changes, or running `terraform validate`
    to check for syntax errors.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Terraform 的测试和验证功能确保你的基础设施配置正确，并遵循最佳实践。这可能包括运行 `terraform plan` 预览更改，或运行
    `terraform validate` 检查语法错误。
- en: Use Terraform’s version control integration to manage changes to your infrastructure
    over time. This will allow you to track changes, roll back to previous versions
    if necessary, and collaborate with other team members.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Terraform 的版本控制集成来管理基础架构的变更。这将允许您跟踪变更、在必要时回滚到先前的版本，并与团队其他成员进行协作。
- en: 'Moreover, here are some additional points to consider for designing the serverless
    infrastructure:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，以下是设计无服务器基础架构时需要考虑的一些额外要点：
- en: Decide on a deployment strategy that works for your organization. This might
    include using Terraform’s `apply` command to deploy changes directly or using
    a **continuous integration/continuous deployment** (**CI/CD**) platform such as
    AWS CodePipeline to automate the deployment process.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的组织选择适合的部署策略。这可能包括使用 Terraform 的 `apply` 命令直接部署更改，或使用像 AWS CodePipeline 这样的持续集成/持续部署（CI/CD）平台自动化部署流程。
- en: Consider the scalability and availability requirements of your serverless resources.
    You can use Terraform to specify things like the number of replicas for an Amazon
    ECS service, or the number of function instances for an AWS Lambda function.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑您的无服务器资源的可伸缩性和可用性要求。您可以使用 Terraform 指定诸如 Amazon ECS 服务的副本数量或 AWS Lambda 函数的函数实例数量等内容。
- en: Use Terraform’s output values to expose important information about your infrastructure
    to other tools and processes. For example, you might output the URL of an API
    Gateway endpoint so that it can be used by other parts of your infrastructure.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Terraform 的输出值来向其他工具和流程公开有关您基础架构的重要信息。例如，您可以输出 API Gateway 端点的 URL，以便其他基础架构的部分可以使用它。
- en: Use Terraform’s workspaces feature to manage multiple environments, such as
    production, staging, and development. This will allow you to easily switch between
    environments and apply changes to the appropriate environment.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Terraform 的工作空间功能管理多个环境，如生产、测试和开发环境。这将使您能够轻松切换环境并将更改应用于适当的环境。
- en: Consider using Terraform modules to encapsulate reusable pieces of infrastructure.
    This can help you reduce duplication and make it easier to manage and maintain
    your infrastructure over time.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用 Terraform 模块来封装可重用的基础设施片段。这可以帮助您减少重复，并使随时间推移更轻松地管理和维护您的基础架构。
- en: How to develop a serverless infrastructure
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何开发无服务器基础架构
- en: 'To develop a serverless infrastructure, you can follow these general steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发无服务器基础架构，您可以按照以下一般步骤进行：
- en: Identify the components of your infrastructure that can be implemented as serverless
    resources. This might include things such as APIs, backend workers, and data processing
    pipelines.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定您的基础架构的组件可以作为无服务器资源实施。这可能包括诸如 API、后端工作程序和数据处理管道等内容。
- en: Determine which serverless platforms and services you will use to implement
    these components. This might include services such as AWS Lambda, Amazon API Gateway,
    and Amazon DynamoDB, or managed services such as AWS Fargate or AWS AppSync.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定您将使用哪些无服务器平台和服务来实现这些组件。这可能包括 AWS Lambda、Amazon API Gateway 和 Amazon DynamoDB
    等服务，或者像 AWS Fargate 或 AWS AppSync 这样的托管服务。
- en: Define the required IAM roles and permissions for your serverless resources.
    This will typically involve creating IAM policies and attaching them to IAM roles
    that your resources can assume.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的无服务器资源定义所需的 IAM 角色和权限。这通常涉及创建 IAM 策略并将其附加到您的资源可以承担的 IAM 角色上。
- en: Use the relevant tools and APIs to create and configure your serverless resources.
    This might include using the AWS Management Console, the AWS CLI, or the AWS SDKs.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相关工具和 API 创建和配置您的无服务器资源。这可能包括使用 AWS 管理控制台、AWS CLI 或 AWS SDK。
- en: Define any dependencies between your resources, such as connections between
    an API Gateway and a Lambda function, or between a Lambda function and a DynamoDB
    table.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义资源之间的任何依赖关系，例如 API Gateway 和 Lambda 函数之间的连接，或 Lambda 函数与 DynamoDB 表之间的连接。
- en: Test your infrastructure to confirm that everything is working as expected.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试您的基础架构，以确认一切都按预期运行。
- en: Use monitoring and logging tools to track the performance and health of your
    serverless resources. This might include using Amazon CloudWatch to monitor resource
    metrics and logs or using AWS X-Ray to trace requests as they flow through your
    infrastructure.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用监控和日志记录工具跟踪您的无服务器资源的性能和健康状况。这可能包括使用 Amazon CloudWatch 监控资源指标和日志，或使用 AWS X-Ray
    跟踪请求在您基础架构中的流动情况。
- en: How to deploy a serverless infrastructure using Terraform
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Terraform 部署无服务器基础架构
- en: 'To deploy a serverless infrastructure using Terraform, you can follow these
    steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 部署无服务器基础设施使用 Terraform，你可以按照以下步骤操作：
- en: Write Terraform configuration files to define the desired state of your infrastructure.
    These configuration files can use the **HashiCorp Configuration Language** (**HCL**)
    to specify the resources that you want to create, as well as the properties of
    those resources.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 Terraform 配置文件来定义基础设施的期望状态。这些配置文件可以使用 **HashiCorp 配置语言**（**HCL**）来指定你希望创建的资源以及这些资源的属性。
- en: If you are following an event-driven architecture, you should consider carving
    all triggers and resources into the same Terraform project.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你正在遵循事件驱动架构，应该考虑将所有触发器和资源划分到同一个 Terraform 项目中。
- en: Use the `terraform init` command to initialize your working directory and download
    any necessary plugins or dependencies.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `terraform init` 命令初始化你的工作目录，并下载任何必要的插件或依赖项。
- en: Use the `terraform plan` command to preview the changes that Terraform will
    make to your infrastructure. This will allow you to see what resources will be
    created, modified, or destroyed, and to confirm that the changes are what you
    expect.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `terraform plan` 命令预览 Terraform 对基础设施所做的更改。这将允许你查看将要创建、修改或销毁的资源，并确认这些更改是否符合预期。
- en: Use the `terraform apply` command to apply the changes to your infrastructure.
    This will create or update the resources according to your configuration files.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `terraform apply` 命令将更改应用到你的基础设施中。这将根据你的配置文件创建或更新资源。
- en: Test your infrastructure to confirm that everything is working as expected.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试你的基础设施，确认一切是否按预期工作。
- en: Use Terraform’s version control integration to manage changes to your infrastructure
    over time. This will allow you to track changes, roll back to previous versions
    if necessary, and collaborate with other team members.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Terraform 的版本控制集成功能，管理基础设施随时间的变化。这将允许你跟踪更改，必要时回滚到以前的版本，并与其他团队成员协作。
- en: Create a separate S3 bucket with relevant permissions to move your Terraform
    state file to secure and make it easy for collaboration with other team members.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单独的 S3 存储桶，并设置相关权限，将你的 Terraform 状态文件移动到安全位置，这样也方便与其他团队成员协作。
- en: Consider creating a pipeline in your CI/CD system to execute your Terraform
    templates for security and observability.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑在你的 CI/CD 系统中创建一个管道，用于执行你的 Terraform 模板，以提高安全性和可观察性。
- en: Avoid provisioning manual resources; utilize Terraform to cover all your resources,
    configurations, and environments. Any existing or legacy resources can easily
    be imported to Terraform.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免手动配置资源；使用 Terraform 来覆盖所有资源、配置和环境。任何现有或遗留的资源都可以轻松导入到 Terraform 中。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about deploying serverless projects with Terraform.
    We covered the basics of serverless computing, AWS Lambda, and AWS Fargate, and
    how to design and deploy serverless infrastructure with Terraform. We also explored
    the importance of AWS landing zones and how to select and implement them. Additionally,
    we discussed AWS Organizations and how to use them with Terraform.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何使用 Terraform 部署无服务器项目。我们介绍了无服务器计算的基础知识、AWS Lambda 和 AWS Fargate，以及如何使用
    Terraform 设计和部署无服务器基础设施。我们还探讨了 AWS 着陆区的重要性，以及如何选择和实施它们。此外，我们还讨论了 AWS Organizations
    以及如何将其与 Terraform 一起使用。
- en: In the next chapter, we will explore deploying containers in AWS with Terraform.
    We will cover the basics of containers, AWS ECS, Amazon EKS, and how to deploy
    containers with Terraform. We will also discuss best practices for deploying containers
    in AWS and how to use Terraform to manage container deployments.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用 Terraform 在 AWS 上部署容器。我们将介绍容器的基础知识、AWS ECS、Amazon EKS，以及如何使用
    Terraform 部署容器。我们还将讨论在 AWS 上部署容器的最佳实践，以及如何使用 Terraform 管理容器部署。
