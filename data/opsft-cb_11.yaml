- en: Chapter 11. Logging and Scaling Your OpenShift Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：日志记录与扩展 OpenShift 应用
- en: 'The specific recipes of this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的具体操作指南如下：
- en: Viewing application logs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看应用日志
- en: Working with JBoss application logs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 JBoss 应用日志
- en: Enabling JBoss access logs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 JBoss 访问日志
- en: Working with Tomcat application logs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 Tomcat 应用日志
- en: Working with Python application logs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 Python 应用日志
- en: Creating scalable applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可扩展的应用
- en: Configuring a different health check URL for HAProxy
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 HAProxy 配置不同的健康检查 URL
- en: Configuring HAProxy to use a different balance algorithm
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 HAProxy 使用不同的负载均衡算法
- en: Creating scalable apps from nonscalable apps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从不可扩展应用创建可扩展应用
- en: Enabling manual scaling with marker files
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标记文件启用手动扩展
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter consists of recipes that will help you to work with the application
    logs and create scalable applications. The logging recipes will help you to access
    your application logs and debug any problems you might encounter while running
    your applications. You will learn how OpenShift uses a component called `logshifter`
    to store all application- and cartridge-specific logs in `OPENSHIFT_LOG_DIR`.
    This chapter will go into application logging in detail and cover various aspects
    of logging the JBoss, Tomcat, and Python applications. The logging concepts covered
    in this chapter will help you work with any web cartridge logs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含了一些操作指南，帮助你处理应用日志并创建可扩展的应用。这些日志操作指南将帮助你访问应用日志并调试在运行应用时可能遇到的任何问题。你将学习 OpenShift
    如何使用一个名为`logshifter`的组件，将所有应用和硬件相关的日志存储在`OPENSHIFT_LOG_DIR`中。本章将详细介绍应用日志，并涵盖 JBoss、Tomcat
    和 Python 应用的日志管理。所涵盖的日志概念将帮助你处理任何 Web 硬件日志。
- en: The *Viewing application logs* recipe will give you a general introduction to
    application logging, with the PHP web cartridge as an example. You will learn
    how to access application logs using the `rhc` command-line tool, and understand
    the log format used by Apache-based cartridges. Next, you will learn how to access
    JBoss application logs in the *Working with JBoss application logs* and *Enabling
    JBoss access logs* recipes. The *Working with Python application logs* recipe
    will cover how to effectively work with Python application logs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*查看应用日志*的操作指南将为你提供应用日志的概述，以 PHP Web 硬件为例。你将学习如何使用 `rhc` 命令行工具访问应用日志，并理解 Apache
    基础硬件使用的日志格式。接下来，你将学习如何在*处理 JBoss 应用日志*和*启用 JBoss 访问日志*的操作指南中访问 JBoss 应用日志。*处理
    Python 应用日志*的操作指南将涵盖如何有效地处理 Python 应用日志。'
- en: The second section of this chapter will discuss application scaling in detail.
    You will learn how to create autoscalable applications in the *Creating scalable
    applications* recipe. Autoscaling is not always desired, and at times you need
    manual control over application scaling. In the *Enabling manual scaling with
    marker files* recipe, you will learn how to disable autoscaling and manually scale
    OpenShift applications using the `rhc` command-line tool.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第二部分将详细讨论应用扩展。你将学习如何在*创建可扩展的应用*的操作指南中创建自动扩展的应用。自动扩展并不总是所需的，有时你需要手动控制应用扩展。在*使用标记文件启用手动扩展*的操作指南中，你将学习如何禁用自动扩展，并使用
    `rhc` 命令行工具手动扩展 OpenShift 应用。
- en: Viewing application logs
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看应用日志
- en: Logs are important data generated by your application that can help you understand
    user heuristics, monitor application performance, and debug problems. They are
    the first place you look when something goes wrong in your application. OpenShift
    uses a service called `logshifter`, which collects logs from all the different
    pieces of your application and makes them accessible at a single location. These
    logs can then be fed to your favorite log management solution, such as Splunk,
    to gain more useful insights. In this recipe, you will learn how easily you can
    view all the logs of your application using a single command. This recipe covers
    logging in a cartridge-agnostic manner. The language-specific aspects of logging
    will be covered later in this chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 日志是由应用生成的重要数据，能帮助你理解用户行为、监控应用性能并调试问题。当应用出现故障时，日志是你首先查看的地方。OpenShift 使用一个名为 `logshifter`
    的服务，该服务收集应用各部分的日志并将它们汇聚在一个位置，供你访问。然后，这些日志可以被发送到你喜欢的日志管理解决方案中，如 Splunk，从中获取更多有价值的洞察。在本操作指南中，你将学习如何通过一个命令轻松查看应用的所有日志。本操作指南是以与硬件无关的方式进行日志管理，特定语言的日志管理会在本章后续部分进行介绍。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need `rhc` installed on your machine. Also,
    we will make use of the OpenShift application created in the *Creating an OpenShift
    application using the rhc command-line client* recipe in [Chapter 3](part0041_split_000.html#page
    "Chapter 3. Creating and Managing Applications"), *Creating and Managing Applications*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为完成此操作，你需要在你的机器上安装 `rhc`。此外，我们将利用在 *使用 rhc 命令行客户端创建 OpenShift 应用程序* 一章中创建的 OpenShift
    应用程序，[第 3 章](part0041_split_000.html#page "第 3 章：创建和管理应用程序")，*创建和管理应用程序*。
- en: 'To recreate the application, run the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新创建应用程序，请运行以下命令：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行此操作…
- en: 'To view the logfiles of your application, perform the following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看应用程序的日志文件，执行以下步骤：
- en: 'Open a command-line terminal and run the following command, either from within
    the application directory or by passing the application name using the `--app`
    option. Have a look at the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个命令行终端，并运行以下命令，可以在应用程序目录内或通过使用 `--app` 选项传递应用程序名称来运行。请看以下命令：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also use the app name, as shown in the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以使用应用程序名称，如下所示的命令：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open your favorite browser and go to `http://myapp-{domain-name}.rhcloud.com`.
    You will notice new logs being tailed on your command-line terminal. A small snippet
    of logs is shown in the following command-line output:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你喜欢的浏览器，访问 `http://myapp-{domain-name}.rhcloud.com`。你会注意到新的日志正在你的命令行终端上被实时跟踪。以下命令行输出显示了日志的一个小片段：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Every OpenShift application uses one or more cartridges to do its work. Each
    cartridge is configured to log messages to `stdout` or `stderr`. An OpenShift
    service called `logshifter` captures all the messages sent to `stdout` as well
    as `stderr` and logs them properly. In OpenShift Online, all the messages captured
    by `logshifter` are written to the `$OPENSHIFT_LOGS_DIR` directory. You can SSH
    into your application gear using the `rhc ssh` command and look into the `$OPENSHIFT_LOGS_DIR`
    directory, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 OpenShift 应用程序都使用一个或多个 cartridge 来执行任务。每个 cartridge 都被配置为将消息记录到 `stdout`
    或 `stderr`。一个名为 `logshifter` 的 OpenShift 服务会捕获所有发送到 `stdout` 和 `stderr` 的消息，并正确记录这些日志。在
    OpenShift Online 中，`logshifter` 捕获的所有消息都会写入到 `$OPENSHIFT_LOGS_DIR` 目录。你可以使用 `rhc
    ssh` 命令通过 SSH 连接到应用程序 gear，并查看 `$OPENSHIFT_LOGS_DIR` 目录，示例如下：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see in the preceding command line, the `$OPENSHIFT_LOGS_DIR` directory
    contains one logfile called `php.log`. All the application and Apache logs (both
    access and error) will be written to this logfile. The name of the logfile depends
    on the tag name passed to `logshifter` during the cartridge startup. For example,
    the `php` cartridge is started using the `nohup /usr/sbin/httpd $HTTPD_CMD_CONF
    -D FOREGROUND |& /usr/bin/logshifter -tag php &` command. This command ensures
    that the Apache logs are piped to the `logshifter` service and uses `php` as the
    tag name. The tag name serves two purposes: first, it identifies the program that
    generated the log message, and second, it is used as the name of the logfile.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前面的命令行中所见，`$OPENSHIFT_LOGS_DIR` 目录包含一个名为 `php.log` 的日志文件。所有应用程序日志和 Apache
    日志（包括访问日志和错误日志）都会写入此日志文件。日志文件的名称取决于在 cartridge 启动时传递给 `logshifter` 的标签名称。例如，`php`
    cartridge 是使用 `nohup /usr/sbin/httpd $HTTPD_CMD_CONF -D FOREGROUND |& /usr/bin/logshifter
    -tag php &` 命令启动的。此命令确保 Apache 日志通过管道传输到 `logshifter` 服务，并使用 `php` 作为标签名称。标签名称有两个作用：首先，它标识了生成日志消息的程序；其次，它作为日志文件的名称。
- en: 'In step 1, you ran the `rhc tail` command; this command opened an SSH tunnel
    behind the scenes and ran the `tail –f */log*/*` command on your application gear.
    The `-f` option allows a file to be monitored continuously. As new lines are added
    to the logfile, `tail` will update the display. The `rhc tail` command will tail
    all the logs in your application gear''s `$OPENSHIFT_LOG_DIR` directory, as shown
    in step 2\. The sample output is shown in the following command. All the Apache-based
    cartridges (PHP, Python, Perl, and Ruby) will have similar output in the logs.
    Have a look at the following command output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 中，你运行了 `rhc tail` 命令；该命令在后台打开了一个 SSH 隧道，并在你的应用程序 gear 上运行了 `tail –f */log*/*`
    命令。`-f` 选项使文件能够被持续监控。当新行被添加到日志文件时，`tail` 会更新显示。`rhc tail` 命令会跟踪你应用程序 gear 中 `$OPENSHIFT_LOG_DIR`
    目录下的所有日志，如步骤 2 所示。以下命令显示了示例输出。所有基于 Apache 的 cartridge（如 PHP、Python、Perl 和 Ruby）都会在日志中显示类似的输出。请看以下命令输出：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At first glance, the output might look a bit cryptic; on closer inspection,
    it is no different from most application logs. The log follows Apache Combined
    Log Format ([https://httpd.apache.org/docs/trunk/logs.html#combined](https://httpd.apache.org/docs/trunk/logs.html#combined)).
    The format used is `"%{X-Forwarded-For}i %l %u %t \"%r\" %>s %b \"%{Referer}i\"
    \"%{User-Agent}i\""`. Let''s look at all these options one by one:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 初看起来，输出可能看起来有些晦涩；但仔细检查后，它与大多数应用程序日志没有什么不同。该日志遵循Apache联合日志格式（[https://httpd.apache.org/docs/trunk/logs.html#combined](https://httpd.apache.org/docs/trunk/logs.html#combined)）。使用的格式是`"%{X-Forwarded-For}i
    %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\""`. 让我们逐一看看这些选项：
- en: '`%{X-Forwarded-For}i`: This is the HTTP request `X-Forwarded-For` header. It
    contains the IP address of the original client. In the log line shown in the preceding
    command, it corresponds to `117.212.42.145`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%{X-Forwarded-For}i`：这是HTTP请求的`X-Forwarded-For`头。它包含原始客户端的IP地址。在前面的命令中显示的日志行中，它对应的值是`117.212.42.145`。'
- en: '`%l`: This is the user identity determined by `identd`. This will return `-`
    when the value is not present. In the log line shown in the preceding command,
    the value is `-`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%l`：这是由`identd`确定的用户身份。如果该值不存在，则返回`-`。在前面的命令中显示的日志行中，值为`-`。'
- en: '`%u`: This is the remote user determined by HTTP authentication. This will
    return `-` when the value is not present. In the log line shown in the preceding
    command, the value is `-`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%u`：这是通过HTTP认证确定的远程用户。如果该值不存在，则返回`-`。在前面的命令中显示的日志行中，值为`-`。'
- en: '`%t`: This is the time when the HTTP request is received. In the log line shown
    in the preceding command, the value is `[22/Jun/2014:15:28:03 -0400]`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%t`：这是接收到HTTP请求的时间。在前面的命令中显示的日志行中，值为`[22/Jun/2014:15:28:03 -0400]`。'
- en: '`\"%r\"`: This is the first line of the HTTP request. In the log line shown
    in the preceding command, the value is `GET / HTTP/1.1`.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\"%r\"`：这是HTTP请求的第一行。在前面的命令中显示的日志行中，值为`GET / HTTP/1.1`。'
- en: '`%>s`: This is the HTTP status code. In the log line shown in the preceding
    command, the value is `200`, which means the request was successful.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%>s`：这是HTTP状态码。在前面的命令中显示的日志行中，值为`200`，表示请求成功。'
- en: '`%b`: This is the response from the server in bytes. In the log line shown
    in the preceding section, the value is `39627`.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%b`：这是服务器的响应字节数。在前面的日志行中，值为`39627`。'
- en: '`\"%{Referer}i\"`: This is the referrer URL that is linked to this URL. In
    the log line shown in the preceding section, the value is `-`, which means it
    was not present.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\"%{Referer}i\"`：这是链接到该URL的引用URL。在前面的日志行中，值为`-`，表示该值不存在。'
- en: '`\"%{User-Agent}i\"`: This is the user agent taken from the HTTP request header.
    In the log line shown in the preceding section, the value is `Mozilla/5.0 (Macintosh;
    Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153
    Safari/537.36`.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\"%{User-Agent}i\"`：这是从HTTP请求头中提取的用户代理。在前面的日志行中，值为`Mozilla/5.0 (Macintosh;
    Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153
    Safari/537.36`。'
- en: 'As mentioned in the preceding section, `logshifter` will write one logfile
    per cartridge. So, if you add the MySQL cartridge to your application, then `logshifter`
    will create another logfile with the name `mysql.log` and write all the MySQL-specific
    logs to it. The `rhc tail` command will tail all the files present inside `$OPENSHIFT_LOG_DIR`.
    Make sure to run the `tail` command again so it can read the new logfile:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`logshifter`将为每个cartridge写一个日志文件。因此，如果你将MySQL cartridge添加到应用程序中，`logshifter`将创建另一个名为`mysql.log`的日志文件，并将所有MySQL特定的日志写入该文件。`rhc
    tail`命令将查看`$OPENSHIFT_LOG_DIR`内的所有文件。确保重新运行`tail`命令，以便它可以读取新的日志文件：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `mysql.log` logfile will contain all the MySQL logs. If you want to tail
    only a specific cartridge log, then you can use the `-f` or `--files` option of
    the `rhc tail` command, as shown in the following command. This will tail only
    the `mysql.log` file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql.log`日志文件将包含所有MySQL日志。如果你只想查看特定的cartridge日志，可以使用`rhc tail`命令的`-f`或`--files`选项，如下所示。这将仅查看`mysql.log`文件。'
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can view all the `rhc tail` command options by looking at its help, as
    shown in the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看`rhc tail`命令的帮助来查看所有选项，如下所示：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Another responsibility `logshifter` performs is rolling logfiles based on the
    file size when they reach a configurable threshold. It also allows you to retain
    a configurable number of rolled files before removing the oldest prior to the
    next roll. You can configure the file size and the number of rolled files using
    the `LOGSHIFTER_$TAG_MAX_FILESIZE` and `LOGSHIFTER_$TAG_MAX_FILES` environment
    variables, where `$TAG` is replaced by an uppercase string equal to the value
    of the `-tag` argument. The default values used by `logshifter` are `10M` (`M`
    for megabytes) for file size and `10` for the number of rolled files. Let''s suppose
    you want to configure values as `20M` for file size and `5` for the number of
    rolled files. To configure these new values, you have to first use the `rhc env`
    command to set new environment variables and then restart the application, as
    shown in the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个 `logshifter` 执行的任务是在日志文件达到可配置的阈值时，根据文件大小进行滚动。它还允许你在下一个滚动之前保留一定数量的滚动文件，并删除最旧的文件。你可以使用
    `LOGSHIFTER_$TAG_MAX_FILESIZE` 和 `LOGSHIFTER_$TAG_MAX_FILES` 环境变量配置文件大小和滚动文件数量，其中
    `$TAG` 是由 `-tag` 参数的值替换的大写字符串。`logshifter` 使用的默认值是 `10M`（`M` 代表兆字节）作为文件大小，`10`
    作为滚动文件的数量。假设你希望将文件大小配置为 `20M`，滚动文件数量配置为 `5`。要配置这些新值，你必须首先使用 `rhc env` 命令设置新的环境变量，然后重启应用程序，如下命令所示：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can specify the file size in kilobytes (for example, `100K`), megabytes
    (for example, `20M`), gigabytes (for example, `10G`), or terabytes (for example,
    `2T`). The value of `0` for the file size will effectively disable the file rolling.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以指定文件大小为千字节（例如 `100K`）、兆字节（例如 `20M`）、吉字节（例如 `10G`）或太字节（例如 `2T`）。文件大小的 `0`
    值将有效地禁用文件滚动。
- en: There's more…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'You can also ask the `rhc tail` command to output the last `n` lines using
    `--opts` or `-o`. To output the last 100 lines, run the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过 `--opts` 或 `-o` 选项要求 `rhc tail` 命令输出最后 `n` 行。要输出最后 100 行，请运行以下命令：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can pass other `tail` command options, as well, using the `--opts` option.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过 `--opts` 选项传递其他 `tail` 命令选项。
- en: See also
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Creating an OpenShift application using the rhc command-line client* recipe
    in [Chapter 3](part0041_split_000.html#page "Chapter 3. Creating and Managing
    Applications"), *Creating and Managing Applications*
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 3 章](part0041_split_000.html#page "第 3 章 创建与管理应用程序") 中的 *使用 rhc 命令行客户端创建
    OpenShift 应用程序* 食谱，*创建与管理应用程序*'
- en: The *Working with JBoss application logs* recipe
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与 JBoss 应用程序日志一起工作* 这篇食谱'
- en: The *Working with Tomcat application logs* recipe
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与 Tomcat 应用程序日志一起工作* 这篇食谱'
- en: The *Working with Python application logs* recipe
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与 Python 应用程序日志一起工作* 这篇食谱'
- en: Working with JBoss application logs
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 JBoss 应用程序日志一起工作
- en: As mentioned in the *Viewing application logs* recipe, logs are important data
    generated by your applications. This recipe will cover in detail how you can work
    with logs in OpenShift's JBoss cartridge applications. This recipe will start
    with viewing logs of an existing JBoss application, and then you will add application-specific
    logging using the `SLF4J` library. This recipe assumes you have already read the
    *Viewing application logs* recipe.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在 *查看应用程序日志* 食谱中提到的那样，日志是应用程序生成的重要数据。本食谱将详细介绍如何在 OpenShift 的 JBoss 卡带应用程序中处理日志。本食谱将从查看现有
    JBoss 应用程序的日志开始，接着你将使用 `SLF4J` 库添加特定于应用程序的日志记录。本食谱假设你已经阅读过 *查看应用程序日志* 食谱。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe will use the application created in the *Creating and deploying
    Java EE 6 applications using the JBoss EAP and PostgreSQL 9.2 cartridges* recipe
    in [Chapter 7](part0089_split_000.html#page "Chapter 7. OpenShift for Java Developers"),
    *OpenShift for Java Developers*. You can recreate the application using the following
    command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将使用 *使用 JBoss EAP 和 PostgreSQL 9.2 卡带创建和部署 Java EE 6 应用程序* 食谱中创建的应用程序，位于
    [第 7 章](part0089_split_000.html#page "第 7 章 Java 开发人员的 OpenShift")，*Java 开发人员的
    OpenShift*。你可以使用以下命令重新创建应用程序：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'You can view the JBoss cartridge logs by running the following command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来查看 JBoss 卡带日志：
- en: '[PRE12]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You used the `--files` option to restrict the `rhc tail` command to only show
    JBoss-specific logs; otherwise, it will show all the logs in the `$OPENSHIFT_LOG_DIR`
    directory. This will print logs, as shown in the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用 `--files` 选项来限制 `rhc tail` 命令只显示 JBoss 特定的日志，否则它将显示 `$OPENSHIFT_LOG_DIR`
    目录中的所有日志。这将输出日志，如以下命令所示：
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open the application URL at `http://jobstore-{domain-name}.rhcloud.com` in
    your favorite browser, and you will see Hibernate-specific logs in your terminal.
    When you go to the application root, then an HTTP GET request is made to fetch
    all the companies in the database. The following query is the SQL statement that
    Hibernate executes to get data from the database:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开应用程序URL`http://jobstore-{domain-name}.rhcloud.com`，你会在终端看到Hibernate特定的日志。当你访问应用程序根目录时，将发出一个HTTP
    GET请求以获取数据库中的所有公司。以下查询是Hibernate执行的SQL语句，用于从数据库中获取数据：
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'OpenShift''s JBoss cartridge is configured to log all the `INFO` and preceding
    messages to the console. As mentioned in the *Viewing application logs* recipe,
    any message written to `stdout` will be picked by `logshifter` and written to
    a logfile. For the JBoss EAP cartridge, the logfile name is `jbosseap.log`, and
    for the JBoss AS 7 cartridge, the logfile name will be `jbossas.log`. You can
    update the logging configuration to show all the `DEBUG` and preceding messages
    by updating the logging subsystem in the `standalone.xml` file inside the `.openshift/config`
    directory with the following code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenShift的JBoss插件被配置为将所有`INFO`及之前的消息记录到控制台。正如在*查看应用程序日志*小节中所提到的，任何写入`stdout`的消息都会被`logshifter`捕捉并写入日志文件。对于JBoss
    EAP插件，日志文件名为`jbosseap.log`，而对于JBoss AS 7插件，日志文件名为`jbossas.log`。你可以通过更新`.openshift/config`目录中的`standalone.xml`文件中的日志子系统来显示所有`DEBUG`及之前的消息，代码如下：
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Commit the changes in your local Git repository, and then push them to the OpenShift
    application gear. OpenShift will now use the updated `standalone.xml` file, and
    you will see the `DEBUG` logs in the output of the `rhc tail` command.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交你在本地 Git 仓库中的更改，然后将其推送到 OpenShift 应用程序设备。OpenShift现在将使用更新后的`standalone.xml`文件，你将在`rhc
    tail`命令的输出中看到`DEBUG`日志。
- en: 'As the application is not logging anything, the output of the `rhc tail` command
    either shows the application server logs or the logs of the different libraries
    used by your application. You can use any of the Java logging libraries to add
    application-specific logs. In this recipe, you will use `SLF4J` with `java.util.logging`
    binding to log the application logs, but you can use any other `SLF4J` binding,
    such as `log4j` or `logback`, as well. Open the Maven `pom.xml` file, and add
    the following dependencies to it:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于应用程序没有记录任何内容，`rhc tail`命令的输出显示的是应用程序服务器日志，或者是应用程序中使用的不同库的日志。你可以使用任何Java日志库来添加特定于应用程序的日志。在本节中，你将使用`SLF4J`和`java.util.logging`绑定来记录应用程序日志，但你也可以使用其他`SLF4J`绑定，如`log4j`或`logback`。打开
    Maven 的`pom.xml`文件，并向其中添加以下依赖：
- en: '[PRE16]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `CompanyResource.java` file inside the `org.osbook.jobstore.rest`
    package in an editor, and add a couple of statements to import the `SLF4J` classes,
    as shown in the following code:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开`CompanyResource.java`文件，位于`org.osbook.jobstore.rest`包中，并添加几条语句来导入`SLF4J`类，如下所示的代码：
- en: '[PRE17]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After adding the `import` statements, update the `createNewCompany()` and `showAll()`
    methods in `CompanyResource.java` with log messages, as shown in the following
    code:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`import`语句后，按如下代码更新`CompanyResource.java`中的`createNewCompany()`和`showAll()`方法，添加日志消息：
- en: '[PRE18]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Revert the changes you made to the `standalone.xml` file in step 3 to view
    only the `INFO` messages. Change the `root-logger` level to `INFO`, as shown in
    the following code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 撤销你在步骤3中对`standalone.xml`文件所做的更改，以便仅查看`INFO`级别的消息。将`root-logger`的级别更改为`INFO`，如下所示的代码：
- en: '[PRE19]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Commit the changes to the local Git repository, and then push them to the application
    gear using the `git push` command.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交对本地 Git 仓库的更改，然后使用`git push`命令将其推送到应用程序设备。
- en: 'After the changes are deployed, make another request to the web application,
    and this time you will see your application logs in the `rhc tail` command output,
    as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改部署后，再次向Web应用程序发出请求，这时你将在`rhc tail`命令的输出中看到应用程序日志，如下所示：
- en: '[PRE20]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you try to create a new company, then you see that only the `INFO` messages
    are getting logged. This is because the logging configuration in the `standalone.xml`
    file is configured to only log `INFO` and preceding messages to the console.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尝试创建一个新公司，你会发现只有`INFO`级别的消息被记录。这是因为`standalone.xml`文件中的日志配置被设置为仅将`INFO`及之前的消息记录到控制台。
- en: 'To view the debug messages of your application, you have to update the `standalone.xml`
    logging subsystem configuration with the one shown in the following code:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看应用程序的调试消息，你需要按照如下代码更新`standalone.xml`日志子系统配置：
- en: '[PRE21]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, you will also see the application-specific `DEBUG` logs in the output
    of the `rhc tail` command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您还将在`rhc tail`命令的输出中看到特定于应用程序的`DEBUG`日志：
- en: '[PRE22]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In the preceding steps, you learned how you can view the logs of a JBoss application
    and add application-specific logging using the `SLF4J` library. In step 1, you
    ran the `rhc tail` command to view all the JBoss-specific logs. All the JBoss
    EAP-specific logs are written to the `jbosseap.log` file. This file contains both
    the JBoss `server.log` and `boot.log` content. As discussed in the *Viewing application
    logs* recipe, `logshifter` will collect all the logs written to `stdout` or `stderr`
    and write them to the cartridge-specific logfile. Logging the subsystem configuration
    in the `standalone.xml` configuration file controls the logging in JBoss cartridges.
    The `standalone.xml` file is present inside the `.openshift/config` directory,
    and you can override it to meet your needs. The logging subsystem consists of
    three parts: one or more handler configurations, such as `console-handle` or `file-handler`,
    one or more loggers to define a logger category, such as `com.arjuna` shown in
    the next code, and a `root-logger` declaration. You can read more about the JBoss
    logging configuration in the official documentation at [https://docs.jboss.org/author/display/AS71/Logging+Configuration](https://docs.jboss.org/author/display/AS71/Logging+Configuration).
    Have a look at the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，您学习了如何查看JBoss应用程序的日志，并使用`SLF4J`库添加特定于应用程序的日志记录。在第1步中，您运行了`rhc tail`命令以查看所有JBoss特定的日志。所有JBoss
    EAP特定的日志都写入`jbosseap.log`文件。此文件包含JBoss的`server.log`和`boot.log`内容。如在*查看应用程序日志*一节中所述，`logshifter`将收集所有写入`stdout`或`stderr`的日志，并将它们写入特定于应用程序的日志文件。通过在`standalone.xml`配置文件中配置日志子系统，可以控制JBoss卡带中的日志记录。`standalone.xml`文件位于`.openshift/config`目录内，您可以覆盖该文件以满足您的需求。日志子系统由三部分组成：一个或多个处理程序配置，例如`console-handle`或`file-handler`，一个或多个日志记录器用于定义日志类别，例如下一个代码中所示的`com.arjuna`，以及一个`root-logger`声明。您可以在官方文档中了解更多关于JBoss日志配置的内容，网址为[https://docs.jboss.org/author/display/AS71/Logging+Configuration](https://docs.jboss.org/author/display/AS71/Logging+Configuration)。请看下面的代码：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In step 3, you updated the `root-logger` level to `DEBUG`. This enables the
    JBoss server to generate `DEBUG` and preceding-level logs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步中，您将`root-logger`级别更新为`DEBUG`。这使得JBoss服务器能够生成`DEBUG`及其之前级别的日志。
- en: 'From step 5 through step 11, you first added the application logs using the
    `SLF4J` library and then updated `standalone.xml` logger subsystem configuration
    to allow JBoss to log the application `DEBUG` and preceding messages. This was
    done by adding an application-specific `logger category` at the `DEBUG` level.
    Have a look at the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从第5步到第11步，您首先使用`SLF4J`库添加了应用程序日志，然后更新了`standalone.xml`的日志子系统配置，以便JBoss记录应用程序的`DEBUG`以及前面的消息。此操作是通过在`DEBUG`级别添加特定于应用程序的`logger
    category`来完成的。请看下面的代码：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: There's more…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'After reading through this recipe, you might be wondering if there is a way
    to update the logging configuration at runtime. Yes, you can do so using the JBoss
    admin console. To use the JBoss admin console, first run the `rhc port-forward`
    command, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完此部分内容后，您可能会想知道是否有办法在运行时更新日志配置。是的，您可以使用JBoss管理员控制台来做到这一点。要使用JBoss管理员控制台，首先运行`rhc
    port-forward`命令，如下所示：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, go to the admin console at `http://127.0.0.1:9990/`. Navigate to **Configuration**
    | **Core** | **Logging**, as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，进入管理员控制台，网址为`http://127.0.0.1:9990/`。导航到**配置** | **核心** | **日志记录**，如下图所示：
- en: '![There''s more…](img/00145.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/00145.jpeg)'
- en: 'Now, go to **LOG CATEGORIES**, and you will see a category for `org.osbook.jobstore`,
    as shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到**日志类别**，您将看到一个`org.osbook.jobstore`的类别，如下图所示：
- en: '![There''s more…](img/00146.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/00146.jpeg)'
- en: 'Change the **Log Level** value to **INFO**, and click on the **Save** button:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将**日志级别**的值更改为**INFO**，然后点击**保存**按钮：
- en: '![There''s more…](img/00147.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/00147.jpeg)'
- en: Now, if you try to create a new company, you will not see the `DEBUG` messages.
    You will only see the `INFO` and preceding messages.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您尝试创建一个新公司，您将不会看到`DEBUG`消息。您只会看到`INFO`和前面的消息。
- en: See also
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Viewing application logs* recipe
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序日志* 这部分内容'
- en: The *Enabling JBoss access logs* recipe
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用JBoss访问日志* 这部分内容'
- en: Enabling JBoss access logs
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用JBoss访问日志
- en: Access logs are very useful when you want to see a list of all the requests
    processed by a server. For Apache-based cartridges, access logs are enabled by
    default, but you will have to enable it manually in JBoss-based cartridges. In
    this recipe, you will learn how to enable the access logs for JBoss cartridges.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 访问日志在你希望查看服务器处理的所有请求时非常有用。对于基于Apache的Cartridges，默认情况下会启用访问日志，但在基于JBoss的Cartridges中，你需要手动启用它。在本配方中，你将学习如何为JBoss
    Cartridges启用访问日志。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will pick up where we left off in the *Working with JBoss application
    logs* recipe.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将从我们在*使用JBoss应用程序日志*配方中所讲的内容继续。
- en: How to do it…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to enable the access logs:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以启用访问日志：
- en: Open the `standalone.xml` file inside the `.openshift/config` directory in your
    favorite editor.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你喜欢的编辑器中打开位于`.openshift/config`目录下的`standalone.xml`文件。
- en: 'Update the `urn:jboss:domain:web:1.5` subsystem with the one shown in the following
    code:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新`urn:jboss:domain:web:1.5`子系统：
- en: '[PRE26]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Commit the changes to the local Git repository, and then push them to the application
    gear using the `git push` command.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改提交到本地Git仓库，然后使用`git push`命令将更改推送到应用程序的gear中。
- en: 'Run the `rhc tail` command again, and you will see the access logs in the `tail`
    command output, as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`rhc tail`命令，你将在`tail`命令的输出中看到访问日志，如下所示：
- en: '[PRE27]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works…
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'An access log stores all the user requests for individual resources. These
    include requests to fetch HTML files, JavaScript files, CSS files, REST calls,
    and so on. The data stored in this file can then be analyzed by another application
    to get meaningful information out of it. An access log can help you with following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 访问日志存储了所有用户请求的单独资源。这些请求包括获取HTML文件、JavaScript文件、CSS文件、REST调用等。存储在该文件中的数据可以由其他应用程序进行分析，从中提取有意义的信息。访问日志可以帮助你：
- en: It can help to calculate the number of unique visitors to your website.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于计算你网站的独立访客数量。
- en: It can help to calculate the number of successful and failed requests. The requests
    with the `2XX` code are considered successful, and the requests with `4xx` and
    `5xx` are considered errors.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于计算成功请求和失败请求的数量。`2XX`代码的请求视为成功，`4xx`和`5xx`代码的请求视为错误。
- en: It can help basic performance analysis. Each access log line contains the time
    taken to process the request.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于进行基本的性能分析。每一行访问日志都包含了处理请求所花费的时间。
- en: It can help to analyze your web application usage pattern in terms of the time
    of the day, the day of the week, and so on.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于分析你的网站应用程序使用模式，如一天中的时间、星期几等。
- en: 'In the preceding steps, you updated the `urn:jboss:domain:web:1.5` subsystem
    configuration to enable the access logs. Adding the following two lines to the
    configuration enables the access logs:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，你更新了`urn:jboss:domain:web:1.5`子系统配置以启用访问日志。将以下两行添加到配置中可启用访问日志：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `access-log` element enables the access logs, and the `directory` element
    is used to specify the directory that should be used to generate the logs. The
    preceding `directory` element configures JBoss to write the access logs to `$OPENSHIFT_LOG_DIR`
    as it looks for the `app-root/logs` directory relative to the user home. The `app-root/logs`
    directory relative to the user home is `$OPENSHIFT_LOG_DIR`. We have used this
    value so that the `rhc tail` command can read this file along with other JBoss
    logs. The `access-log` element takes one mandatory attribute called `pattern`.
    The `pattern` element defines the logs format. The following pattern codes are
    supported:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`access-log`元素启用访问日志，而`directory`元素用于指定生成日志的目录。前述的`directory`元素配置了JBoss将访问日志写入`$OPENSHIFT_LOG_DIR`，因为它查找相对于用户主目录的`app-root/logs`目录。`app-root/logs`目录相对于用户主目录为`$OPENSHIFT_LOG_DIR`。我们使用了这个值，以便`rhc
    tail`命令可以读取该文件以及其他JBoss日志。`access-log`元素需要一个名为`pattern`的必选属性。`pattern`元素定义日志的格式。以下是支持的模式代码：'
- en: '`%a`: Remote IP address'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%a`：远程IP地址'
- en: '`%A`: Local IP address'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%A`：本地IP地址'
- en: '`%b`: Bytes sent, excluding HTTP headers, or `-` if zero'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%b`：发送的字节数，不包括HTTP头部，如果为零，则显示`-`'
- en: '`%B`: Bytes sent, excluding HTTP headers'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%B`：发送的字节数，不包括HTTP头部'
- en: '`%h`: Remote hostname (or IP address if `resolveHosts` is `false`)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%h`：远程主机名（如果`resolveHosts`为`false`，则为IP地址）'
- en: '`%H`: Request protocol'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%H`：请求协议'
- en: '`%l`: Remote logical username from `identd` (always returns `-`)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%l`：来自`identd`的远程逻辑用户名（始终返回`-`）'
- en: '`%m`: Request method (GET, POST, and so on)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%m`：请求方法（如GET、POST等）'
- en: '`%p`: Local port on which this request was received'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%p`：接收此请求的本地端口'
- en: '`%q`: Query string (prepended with a `?` if it exists)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%q`：查询字符串（如果存在，前面加上`?`）'
- en: '`%r`: First line of the request (method and request URI)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%r`：请求的第一行（方法和请求URI）'
- en: '`%s`: HTTP status code of the response'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%s`：响应的HTTP状态码'
- en: '`%S`: User session ID'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%S`：用户会话ID'
- en: '`%t`: Date and time in Common Log Format'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%t`：以通用日志格式显示的日期和时间'
- en: '`%u`: Remote user that was authenticated (if any), else `-`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%u`：经过身份验证的远程用户（如果有），否则为`-`'
- en: '`%U`: Requested URL path'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%U`：请求的URL路径'
- en: '`%v`: Local server name'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%v`：本地服务器名称'
- en: '`%D`: Time taken to process the request in milliseconds'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%D`：处理请求所花费的时间（以毫秒为单位）'
- en: '`%T`: Time taken to process the request in seconds'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%T`：处理请求所花费的时间（以秒为单位）'
- en: '`%I`: Current request thread name (can compare later with stacktraces)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%I`：当前请求线程的名称（可以稍后与堆栈跟踪进行比较）'
- en: See also
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Working with JBoss application logs* recipe
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*处理JBoss应用程序日志*食谱'
- en: The *Viewing application logs* recipe
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序日志*食谱'
- en: Working with Tomcat application logs
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Tomcat应用程序日志
- en: In this recipe, you will learn how to work with logs in Tomcat cartridges. You
    will start with tailing the logs of an existing Tomcat application, and then you
    will learn how to add application-specific logging using the `SLF4J` library.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在此食谱中，你将学习如何处理Tomcat应用程序中的日志。你将首先学会跟踪现有Tomcat应用程序的日志，然后学习如何使用`SLF4J`库添加特定于应用程序的日志记录。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe will use the application created in the *Creating and Deploying
    Spring Applications using the Tomcat 7 cartridge* recipe in [Chapter 7](part0089_split_000.html#page
    "Chapter 7. OpenShift for Java Developers"), *OpenShift for Java Developers*.
    You can recreate the application using the following command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将使用在[第7章](part0089_split_000.html#page "第7章. Java开发者的OpenShift")的*使用Tomcat
    7启动和部署Spring应用程序*食谱中创建的应用程序。你可以使用以下命令重新创建该应用程序：
- en: '[PRE29]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to do it…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行……
- en: 'Perform the following steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'You can view the logs of a Tomcat application using the `rhc tail` command.
    Tomcat logs are written to a file named `jbossews.log` inside the `$OPENSHIFT_LOG_DIR`
    directory:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用`rhc tail`命令查看Tomcat应用程序的日志。Tomcat日志写入名为`jbossews.log`的文件，该文件位于`$OPENSHIFT_LOG_DIR`目录下：
- en: '[PRE30]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `jbossews.log` file will contain logs of both Tomcat-specific and application-specific
    logs, as shown in the following output:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`jbossews.log`文件将包含Tomcat特定的日志和特定于应用程序的日志，如下所示：'
- en: '[PRE31]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Before you can add application-specific logging, you will have to add the following
    dependencies to your Maven `pom.xml` file. In this recipe, you will use `SLF4J`
    along with `logback` binding to add application logging:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加特定于应用程序的日志记录之前，你需要在Maven的`pom.xml`文件中添加以下依赖项。在此食谱中，你将使用`SLF4J`与`logback`绑定来添加应用程序日志记录：
- en: '[PRE32]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Open the `CompanyResource.java` file inside the `org.osbook.jobstore.rest`
    package in an editor, and add a couple of statements to import the `SLF4J` classes,
    as shown in the following code:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开`org.osbook.jobstore.rest`包中的`CompanyResource.java`文件，并添加几行代码以导入`SLF4J`类，如下所示：
- en: '[PRE33]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, update the `CompanyResource` Java class under the `org.jobstore.rest`
    package to add application-specific logging, as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，更新`org.jobstore.rest`包下的`CompanyResource` Java类，以添加特定于应用程序的日志记录，如下所示：
- en: '[PRE34]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Commit the changes to the local Git repository, and then push them to the application
    gear using the `git push` command.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改到本地Git仓库，然后使用`git push`命令将它们推送到应用程序服务器。
- en: 'After the application restarts, you will start seeing various log messages.
    A short snippet is shown in the following output:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序重启后，你将开始看到各种日志消息。以下输出显示了一个简短的日志片段：
- en: '[PRE35]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can use the `logback` configuration file to enable the logging of specific
    packages. Create a new file with the name `logback.xml` inside the `src/main/resources`
    directory, and add the following contents to it:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用`logback`配置文件来启用特定包的日志记录。在`src/main/resources`目录下创建一个名为`logback.xml`的新文件，并添加以下内容：
- en: '[PRE36]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Commit the changes to the local Git repository, and push them to the application
    gear using the `git push` command. After the app restarts, you will only see the
    application-specific `DEBUG` and preceding messages. Have a look at the following
    commands:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改到本地Git仓库，并使用`git push`命令将它们推送到应用程序服务器。应用程序重启后，你将只看到特定于应用程序的`DEBUG`消息和前面的消息。请查看以下命令：
- en: '[PRE37]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works…
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In the preceding steps, you learned how to view the logs of a Tomcat application
    and add application-specific logging using the `SLF4J` library. In step 1, you
    ran the `rhc tail` command to view all the Tomcat-specific logs. All the Tomcat-specific
    logs are written to the `jbossews.log` file. As discussed in the *Viewing application
    logs* recipe, `logshifter` will collect all the logs written to `stdout` or `stderr`
    and write them to the cartridge-specific logfile.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述步骤中，你学习了如何查看 Tomcat 应用程序的日志，并使用 `SLF4J` 库添加应用程序特定的日志记录。在第1步中，你运行了 `rhc tail`
    命令以查看所有 Tomcat 特定的日志。所有 Tomcat 特定的日志都写入到 `jbossews.log` 文件中。如 *查看应用程序日志* 配方中所讨论的，`logshifter`
    将收集所有写入到 `stdout` 或 `stderr` 的日志，并将它们写入到载体特定的日志文件中。
- en: From step 2 through step 5, you added log statements to the `CompanyResource.java`
    file using the `SLF4J` library. The `SLF4J` library underneath uses the `Logback`
    library that has a default log level of `DEBUG`. This means if you don't specify
    any `Logback` configuration, then all the `DEBUG` and preceding messages will
    be logged to `jbossews.log`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 从第2步到第5步，你使用 `SLF4J` 库向 `CompanyResource.java` 文件添加了日志语句。 `SLF4J` 库底层使用具有默认日志级别
    `DEBUG` 的 `Logback` 库。这意味着如果你没有指定任何 `Logback` 配置，那么所有的 `DEBUG` 及其前面的消息将被记录到 `jbossews.log`。
- en: '`Logback` can be configured using the `logback.xml` file. In step 6, you created
    a `logback.xml` file and added configuration to only the log application `DEBUG`
    messages. All other messages will be logged at `WARN` level. Then, finally, in
    step 7, you committed the changes and pushed them to the application gear.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `logback.xml` 文件可以配置 `Logback`。在第6步中，你创建了一个 `logback.xml` 文件，并仅添加了对日志应用程序
    `DEBUG` 消息的配置。所有其他消息将以 `WARN` 级别记录。最后，在第7步中，你提交了更改并将它们推送到应用程序装置。
- en: There's more…
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'You can enable the access logs for the Tomcat cartridge by performing the following
    steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过执行以下步骤为 Tomcat 载体启用访问日志：
- en: Open the Tomcat `server.xml` configuration file inside the `.openshift/config`
    directory in your favorite editor.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于 `.openshift/config` 目录中的 Tomcat `server.xml` 配置文件。
- en: 'Add the `AccessLogValve` configuration to the `server.xml` file''s `Host` element:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `AccessLogValve` 配置添加到 `server.xml` 文件的 `Host` 元素中：
- en: '[PRE38]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Commit the changes to the local Git repository, and push them to the application
    gear using the `git push` command.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改提交到本地 Git 仓库，并使用 `git push` 命令将它们推送到应用程序装置。
- en: 'Run the `rhc tail` command again, and this time, you will see the access logs,
    as well:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行 `rhc tail` 命令，这次你将看到访问日志，如下所示：
- en: '[PRE39]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: See also
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Viewing application logs* recipe
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序日志* 配方'
- en: The *Working with JBoss application logs* recipe
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 JBoss 应用程序日志* 配方'
- en: The *Enabling JBoss access logs* recipe
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用 JBoss 访问日志* 配方'
- en: Working with Python application logs
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 Python 应用程序日志
- en: In this recipe, you will learn how to add view and logging to your Python applications.
    As discussed in [Chapter 8](part0105_split_000.html#page "Chapter 8. OpenShift
    for Python Developers"), *OpenShift for Python Developers*, OpenShift Python applications
    use Apache with `mod_wsgi`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将学习如何为你的 Python 应用程序添加视图和日志记录。如 [第8章](part0105_split_000.html#page "Chapter 8. OpenShift
    for Python Developers") 讨论的，*OpenShift for Python Developers*，OpenShift Python
    应用程序使用带有 `mod_wsgi` 的 Apache。
- en: Getting ready
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'This recipe will use the application created in the *Creating and deploying
    Flask web applications using Python and PostgreSQL cartridges* recipe in [Chapter
    8](part0105_split_000.html#page "Chapter 8. OpenShift for Python Developers"),
    *OpenShift for Python Developers*. You can recreate the application using the
    following command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将使用在 [第8章](part0105_split_000.html#page "Chapter 8. OpenShift for Python
    Developers") 中创建并部署 Flask Web 应用程序使用 Python 和 PostgreSQL 载体配方中创建的应用程序。你可以使用以下命令重新创建应用程序：
- en: '[PRE40]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How to do it…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Open a new command-line terminal, and navigate to the directory where you have
    created the Python application.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开新的命令行终端，并导航到创建 Python 应用程序的目录。
- en: 'To view the logs of a Python application, run the following command:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看 Python 应用程序的日志，请运行以下命令：
- en: '[PRE41]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'By visiting the application URL, you will see the following logs in the `rhc
    tail` command output when you make a request to the application:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问应用程序的 URL，当你向应用程序发出请求时，你将在 `rhc tail` 命令的输出中看到以下日志：
- en: '[PRE42]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Open the `jobstore.py` file inside the application directory, and add the following
    lines just above the `index()` function. The following lines import the `logging`
    module and then create a new `logger` object with the `INFO` log level. This logger
    will be used in the next step for logging.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开应用程序目录中的`jobstore.py`文件，并在`index()`函数上方添加以下代码。以下代码导入了`logging`模块，然后创建了一个新的`logger`对象，日志级别为`INFO`。此`logger`将在下一步用于日志记录。
- en: '[PRE43]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Next, update the `index()` function with a log statement, as shown in the following
    code:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新`index()`函数，添加一个日志语句，如以下代码所示：
- en: '[PRE44]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Commit the change to the local Git repository, and then push the changes to
    the application gear. After the app has started successfully, visit the application
    URL and you will see the log message you added to `jobstore.py`, as follows:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改到本地Git仓库，然后将更改推送到应用程序设备。应用程序成功启动后，访问应用程序URL，你将看到你添加到`jobstore.py`中的日志消息，如下所示：
- en: '[PRE45]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'There are times when you will prefer to use a different file to store your
    application logs. This can be done using `TimedRotatingFileHandler`. Open `jobstore.py`
    in the application root directory and replace the logging lines added in step
    3 with the ones shown in the following code:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时，你可能更倾向于使用不同的文件来存储应用程序日志。这可以通过使用`TimedRotatingFileHandler`来完成。打开应用程序根目录中的`jobstore.py`文件，并用以下代码替换第3步中添加的日志行：
- en: '[PRE46]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Commit the change, and push the changes to the application gear. After the
    app restarts, you will see a new file, `jobstore.log`, with all the application-specific
    logs, as shown in the following command lines. You will have to run the `rhc tail`
    command so that the `tail` command can find the new file, as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改并将更改推送到应用程序设备。应用程序重启后，你将看到一个新的文件`jobstore.log`，其中包含所有应用程序特定的日志，如以下命令所示。你必须运行`rhc
    tail`命令，以便`tail`命令能够找到新文件，具体如下：
- en: '[PRE47]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Python application logs are logged in the `python.log` file inside `$OPENSHIFT_LOG_DIR`.
    This file will contain both Apache access logs and error logs, as well as any
    application-specific logs. The log follows Apache Combined Log Format discussed
    in the *Viewing application logs* recipe.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Python应用程序日志记录在`$OPENSHIFT_LOG_DIR`中的`python.log`文件中。此文件将包含Apache访问日志和错误日志，以及任何应用程序特定的日志。日志遵循在*查看应用程序日志*一节中讨论的Apache联合日志格式。
- en: To add application-level logging, you used the Python standard logging module
    in step 3\. After pushing these changes to the application gear, you will start
    seeing your application-specific log messages. You will only see the log messages
    with the level `INFO` or above. This is because you have configured the default
    logging level to `logging.INFO`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加应用程序级别的日志记录，你在第3步中使用了Python标准日志模块。在将这些更改推送到应用程序设备后，你将开始看到特定应用程序的日志消息。你只会看到`INFO`级别或更高级别的日志消息。这是因为你已将默认的日志级别配置为`logging.INFO`。
- en: OpenShift, by default, will log all the messages written to `stdout` or `stderr`
    to the `python.log` file. If you want to use a different logfile for application-specific
    logs, then you can use `TimedRotaingFileHandler` to log messages to the `jobstore.log`
    file inside `$OPENSHIFT_LOG_DIR`, as shown in step 5\. In step 6, you pushed the
    changes to the OpenShift application gear, and after running the `rhc tail` command
    again, you will start seeing messages written to `jobstore.log` in the output.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift默认会将所有写入`stdout`或`stderr`的消息记录到`python.log`文件中。如果你想为特定应用使用不同的日志文件，可以使用`TimedRotaingFileHandler`将消息记录到`$OPENSHIFT_LOG_DIR`中的`jobstore.log`文件，如第5步所示。在第6步，你将更改推送到OpenShift应用程序的设备后，再次运行`rhc
    tail`命令，你将看到输出中开始显示写入`jobstore.log`的消息。
- en: See also
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Viewing application logs* recipe
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查看应用程序日志*一节'
- en: Creating scalable applications
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可扩展的应用程序
- en: 'As your application becomes popular and more users start using it, you will
    have to scale your application to meet the increased usage. Application scaling
    can be done in either of the following two ways: vertical scaling (or scaling
    up) and horizontal scaling (scaling out). Vertical scaling is about adding more
    power to a single machine, that is, faster CPU, more RAM and SSD, and so on. Vertical
    scalability has a limit and the cost increases exponentially. Horizontal scaling,
    on the other hand, is about handling more requests and load by adding more machines.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序变得越来越流行，更多的用户开始使用它，你将需要扩展应用程序以满足日益增加的使用量。应用程序的扩展可以通过以下两种方式之一完成：垂直扩展（或向上扩展）和水平扩展（向外扩展）。垂直扩展是指向单台机器添加更多的计算能力，即更快的CPU、更多的内存和SSD等等。垂直扩展有其限制，并且成本呈指数增长。另一方面，水平扩展则是通过增加更多机器来处理更多的请求和负载。
- en: With most PaaS solutions such as OpenShift, you will soon hit the vertical scaling
    limit. Currently, in OpenShift, you can't get a bigger gear size than 2 GB of
    RAM space (that is, large gear), so it is recommended that you design your application
    for horizontal scalability. There are many good books, such as *Scalability Rules*,
    *Martin L. Abbott and Michael T. Fisher*, *Addison-Wesley Professional*, written
    on this subject, and you can refer to them for more information. I have also written
    an article on best practices to create scalable web applications ([https://www.openshift.com/blogs/best-practices-for-horizontal-application-scaling](https://www.openshift.com/blogs/best-practices-for-horizontal-application-scaling))
    that you can refer to, as well.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数PaaS解决方案，例如OpenShift，你很快会遇到垂直扩展的限制。目前，在OpenShift中，你无法获得超过2GB内存（即大型gear）的gear大小，因此建议你设计应用程序以支持水平扩展。有很多关于这个主题的好书，例如*Scalability
    Rules*、*Martin L. Abbott and Michael T. Fisher*、*Addison-Wesley Professional*，你可以参考这些书籍获取更多信息。我还写了一篇关于创建可扩展Web应用程序的最佳实践文章（[https://www.openshift.com/blogs/best-practices-for-horizontal-application-scaling](https://www.openshift.com/blogs/best-practices-for-horizontal-application-scaling)），你也可以参考。
- en: In this recipe, you will learn how to create scalable applications in OpenShift.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，你将学习如何在OpenShift中创建可扩展的应用程序。
- en: Getting ready
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need `rhc` installed on your machine. This
    recipe will require all three available gears, so please make sure to delete any
    existing applications.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，你需要在机器上安装`rhc`。此配方将需要所有三个可用的gear，因此请确保删除任何现有的应用程序。
- en: How to do it…
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'To create a scalable application, perform the following steps:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个可扩展的应用程序，请执行以下步骤：
- en: Open a command-line terminal and change the directory to a convenient location
    where you want to create the application.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端，并将目录更改为你希望创建应用程序的位置。
- en: 'Next, execute the following command to create the scalable application:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，执行以下命令以创建可扩展应用程序：
- en: '[PRE48]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How it works…
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `rhc create-app` command used in the preceding steps instructs OpenShift
    to create an application named `jobstore` with the JBoss EAP and PostgreSQL 9.2
    cartridges. The `--scaling` option tells OpenShift to create a horizontally scalable
    application instead of a nonscalable application. The `--from-code` option tells
    OpenShift to use the specified Git repository as the reference application. You
    can also use `-s` instead of `--scaling`. The `-s` option is a shorthand notation
    of the `--scaling` option.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 前述步骤中使用的`rhc create-app`命令指示OpenShift创建一个名为`jobstore`的应用程序，并使用JBoss EAP和PostgreSQL
    9.2的插件。`--scaling`选项告诉OpenShift创建一个可水平扩展的应用程序，而不是一个不可扩展的应用程序。`--from-code`选项告诉OpenShift使用指定的Git仓库作为参考应用程序。你也可以使用`-s`代替`--scaling`，`-s`选项是`--scaling`选项的简写。
- en: This command will create two OpenShift gears. The HAProxy load balancer and
    JBoss EAP application server will share the first gear, and the PostgreSQL database
    will use the second gear. The gear that has the HAProxy cartridge installed is
    called the `main` gear. All the commands that work against a gear will apply to
    this gear. For example, when you run the `rhc ssh` command, you will be logged
    in to the HAProxy gear. Similarly, the `rhc tail` command will tail the logs in
    the `app-root/logs` directory of this gear.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建两个OpenShift gears。HAProxy负载均衡器和JBoss EAP应用程序服务器将共享第一个gear，PostgreSQL数据库将使用第二个gear。安装了HAProxy插件的gear称为`main`
    gear。所有针对gear的命令都将应用于此gear。例如，当你运行`rhc ssh`命令时，你将登录到HAProxy gear。同样，`rhc tail`命令将实时查看该gear中`app-root/logs`目录下的日志。
- en: HAProxy is a software-based load balancer that sits in front of your web application
    and accepts all the incoming requests. It then parses the HTTP request and, depending
    on its configuration, will route the incoming request to a backend. The backend
    here means one or more JBoss EAP instances. OpenShift helps you scale your application
    by adding new application instances (in our example, JBoss EAP instances) as the
    number of concurrent HTTP connections reaches a threshold. The current threshold
    is 16 concurrent HTTP connections. This behavior is called autoscaling, as OpenShift
    manages the application scaling without any user intervention. You can also configure
    your application to use manual scaling, which will give you more control over
    application scaling. This will be covered in the *Enable manual scaling with marker
    files* recipe.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: HAProxy 是一个基于软件的负载均衡器，它位于你的 Web 应用程序前端，接受所有传入请求。然后，它解析 HTTP 请求，并根据其配置，将传入请求路由到一个后端。这里的后端指的是一个或多个
    JBoss EAP 实例。OpenShift 通过在并发 HTTP 连接数达到阈值时添加新的应用实例（在我们的例子中为 JBoss EAP 实例），来帮助你扩展应用程序。当前的阈值是
    16 个并发 HTTP 连接。这种行为叫做自动扩展，因为 OpenShift 在无需用户干预的情况下管理应用程序扩展。你也可以配置应用程序使用手动扩展，这将让你对应用程序扩展有更多控制。具体内容将在
    *通过标记文件启用手动扩展* 配方中讲解。
- en: OpenShift currently does not support database scaling. You can use services
    such as Amazon RDS (covered in the *Using an Amazon RDS MySQL DB instance with
    OpenShift* recipe in [Chapter 4](part0061_split_000.html#page "Chapter 4. Using
    MySQL with OpenShift Applications"), *Using MySQL with OpenShift Applications*),
    Enterprise DB PostgreSQL Cloud Database (covered in the *Using EnterpriseDB PostgreSQL
    cloud database with OpenShift* recipe in [Chapter 5](part0070_split_000.html#page
    "Chapter 5. Using PostgreSQL with OpenShift Applications"), *Using PostgreSQL
    with OpenShift Applications*), or MongoLab (covered in the *Using MongoLab MongoDB-as-a-Service
    with OpenShift* recipe in [Chapter 6](part0079_split_000.html#page "Chapter 6. Using
    MongoDB and Third-party Database Cartridges with OpenShift Applications"), *Using
    MongoDB and Third-party Database Cartridges with OpenShift Applications*) to get
    database scaling.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 目前不支持数据库扩展。你可以使用 Amazon RDS 等服务（在[第 4 章](part0061_split_000.html#page
    "Chapter 4. Using MySQL with OpenShift Applications")的 *使用 Amazon RDS MySQL 数据库实例与
    OpenShift* 配方中有讲解，*使用 MySQL 与 OpenShift 应用程序*），Enterprise DB PostgreSQL 云数据库（在[第
    5 章](part0070_split_000.html#page "Chapter 5. Using PostgreSQL with OpenShift
    Applications")的 *使用 EnterpriseDB PostgreSQL 云数据库与 OpenShift* 配方中有讲解，*使用 PostgreSQL
    与 OpenShift 应用程序*），或者 MongoLab（在[第 6 章](part0079_split_000.html#page "Chapter 6. Using
    MongoDB and Third-party Database Cartridges with OpenShift Applications")的 *使用
    MongoLab MongoDB 作为服务与 OpenShift* 配方中有讲解，*使用 MongoDB 和第三方数据库插件与 OpenShift 应用程序*）来实现数据库扩展。
- en: Every OpenShift scalable application has a daemon running called `haproxy_ctld`.
    This daemon controls the autoscaling behavior by polling the HAProxy Unix socket
    status port every five seconds to collect the basic HAProxy statistics. By default,
    it is configured to use the HTTP concurrent connection of autoscaling, but users
    can customize it to autoscale applications based on other factors such as CPU
    usage, as well ([https://www.openshift.com/blogs/customizing-autoscale-functionality-in-openshift](https://www.openshift.com/blogs/customizing-autoscale-functionality-in-openshift)).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 OpenShift 可扩展应用程序都有一个名为 `haproxy_ctld` 的守护进程在运行。该守护进程通过每五秒轮询 HAProxy Unix
    套接字状态端口来收集基本的 HAProxy 统计信息，从而控制自动扩展行为。默认情况下，它配置为使用 HTTP 并发连接进行自动扩展，但用户可以自定义应用程序的自动扩展方式，基于其他因素，如
    CPU 使用率等，进行扩展，详情请见([https://www.openshift.com/blogs/customizing-autoscale-functionality-in-openshift](https://www.openshift.com/blogs/customizing-autoscale-functionality-in-openshift))。
- en: The daemon checks the current concurrent HTTP connections, and if the number
    of concurrent connections is more than 90 percent of the allocated, that is, 16,
    then it fires the scale-up event. When a scale-up event happens, the daemon will
    make an HTTP request to the OpenShift broker to add a new gear to the application.
    The broker will spin up a new gear with the same configuration as the existing
    application gear, attach the new gear with HAProxy, use the `rsync` command to
    copy the contents of the `~/app-root/repo` directory on the main gear to the new
    gear, and finally start the new gear. From now on, HAProxy will start sending
    requests to both the gears based on the configured algorithm. By default, OpenShift
    uses sticky sessions along with the least connection balance algorithm to make
    sure that the request from a user ends up on the same gear always, and the server
    with the least connection gets the request from the new client. Users can override
    the default HAProxy configuration according to their needs. We will cover that
    later in this chapter.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 守护进程检查当前的并发 HTTP 连接，如果并发连接数超过分配数的 90%，即超过 16，它将触发扩展事件。当扩展事件发生时，守护进程将向 OpenShift
    代理发送 HTTP 请求，以向应用程序添加新的 Gear。代理将启动一个与现有应用程序 Gear 配置相同的新 Gear，将新 Gear 与 HAProxy
    关联，使用`rsync`命令将主 Gear 上 `~/app-root/repo` 目录的内容复制到新 Gear，然后启动新 Gear。从现在起，HAProxy
    将根据配置的算法开始向两个 Gear 发送请求。默认情况下，OpenShift 使用粘性会话和最小连接平衡算法，确保来自同一用户的请求始终到达相同的 Gear，且最少连接的服务器将接收到来自新客户端的请求。用户可以根据需要覆盖默认的
    HAProxy 配置。我们将在本章后面讲解这一部分。
- en: Applications will scale down when your application web traffic falls below 50
    percent of the allocated HTTP connections for several minutes. Then, the new gear
    will be removed, and it will also be removed from the HAProxy configuration.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序的 Web 流量降到分配的 HTTP 连接数的 50% 以下，并持续几分钟时，应用程序将缩减规模。然后，新 Gear 将被移除，并且它也会从
    HAProxy 配置中移除。
- en: 'An OpenShift application developer can see the HAProxy stats on the HAProxy
    status page. This page is located at `http://jobstore-{domain-name}.rhcloud.com/haproxy-status`,
    as shown in the following screenshot:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 应用程序开发者可以在 HAProxy 状态页面上查看 HAProxy 的统计信息。此页面位于 `http://jobstore-{domain-name}.rhcloud.com/haproxy-status`，如下图所示：
- en: '![How it works…](img/00148.jpeg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/00148.jpeg)'
- en: 'The HAProxy status page is divided into two sections: **stats** and **express**.
    The **stats** section is configured to listen to all the requests made to the
    HAProxy status page. Every time you refresh the `http://jobstore-domainname.rhcloud.com/haproxy-status
    page` page, the total number of sessions under the **Sessions** tab will increment.
    This is shown under the **Total** column. The **Cur** column is the number of
    users currently accessing the status page. The **Max** column is the maximum number
    of concurrent users. All these numbers are calculated since HAProxy was started;
    if you restart HAProxy, the stats will reset.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: HAProxy 状态页面分为两部分：**统计**和**简易**。**统计**部分配置为监听所有访问 HAProxy 状态页面的请求。每次你刷新 `http://jobstore-domainname.rhcloud.com/haproxy-status`
    页面时，**会话**选项卡下的会话总数将增加。这一数字显示在**总计**列下。**当前**列是当前正在访问状态页面的用户数量。**最大**列是最大并发用户数。所有这些数字是从
    HAProxy 启动以来计算的；如果重新启动 HAProxy，统计数据将会重置。
- en: The **express** section is more interesting from the application point of view.
    The **local-gear** row corresponds to the requests handled by JBoss EAP. The total
    number of sessions handled by the application is shown in the **Total** column.
    The **Cur** column is the number of users currently accessing the application.
    The **Max** column is the maximum number of concurrent users. All these figures
    pertain to the time period since HAProxy was started; if you restart HAProxy,
    the stats will reset. In the preceding screenshot, we can see that **local-gear**
    has handled seven requests, one at a time. When the application scales, it will
    add more rows for the new gears.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**简易**部分从应用程序的角度来看更为有趣。**local-gear** 行对应 JBoss EAP 处理的请求。应用程序处理的会话总数显示在**总计**列下。**当前**列是当前正在访问应用程序的用户数。**最大**列是最大并发用户数。所有这些数据都与
    HAProxy 启动后的时间段相关；如果重新启动 HAProxy，统计数据将会重置。在前面的截图中，我们可以看到**local-gear**已处理了七个请求，每次一个。当应用程序扩展时，会为新
    Gear 添加更多的行。'
- en: There's more…
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'You can define the minimum and maximum values for application scaling. By default,
    a scalable application will consume at least one gear and, at peak traffic, can
    consume all the gears in your OpenShift account. You can set the minimum and maximum
    values using the `rhc scale-cartridge` command, as shown in the following command:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为应用程序的扩展定义最小值和最大值。默认情况下，可扩展应用程序至少会消耗一个组件，并且在流量峰值时，可以消耗您 OpenShift 帐户中的所有组件。您可以使用
    `rhc scale-cartridge` 命令设置最小值和最大值，如以下命令所示：
- en: '[PRE49]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let''s take the following example:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看以下示例：
- en: '[PRE50]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The preceding command will make sure that the `jobstore` application will at
    least have two instances of the JBoss EAP cartridge, and at maximum, four instances.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将确保 `jobstore` 应用程序至少有两个 JBoss EAP 插件实例，最多四个实例。
- en: See also
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Configuring a different health check URL for HAProxy* recipe
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置 HAProxy 使用不同的健康检查 URL* 食谱'
- en: The *Configuring HAProxy to use a different balance algorithm* recipe
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置 HAProxy 使用不同的负载均衡算法* 食谱'
- en: The *Enabling manual scaling with marker files* recipe
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用手动缩放和标记文件* 食谱'
- en: Configuring a different health check URL for HAProxy
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 HAProxy 使用不同的健康检查 URL
- en: In this recipe, you will learn how to update the HAProxy configuration file
    to configure a different heath check URL.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将学习如何更新 HAProxy 配置文件，以配置不同的健康检查 URL。
- en: Getting ready
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need `rhc` installed on your machine. This
    recipe will utilize the application created in the *Creating scalable applications*
    recipe.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本食谱，您需要在您的计算机上安装 `rhc`。本食谱将使用 *创建可扩展应用程序* 食谱中创建的应用程序。
- en: How to do it…
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Perform the following steps:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Open a command-line terminal and navigate to the application directory created
    in the *Creating scalable applications* recipe.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端，并导航到在*创建可扩展应用程序*食谱中创建的应用程序目录。
- en: 'SSH into the main application gear using the `rhc ssh` command, as follows:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `rhc ssh` 命令 SSH 连接到主应用程序组件，如下所示：
- en: '[PRE51]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Change the directory to the `haproxy` configuration directory, as follows:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将目录更改为 `haproxy` 配置目录，如下所示：
- en: '[PRE52]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, open the `haproxy.cfg` file using VIM, and remove the following content:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 VIM 打开 `haproxy.cfg` 文件，并删除以下内容：
- en: '[PRE53]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In its place, insert the following content:'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将以下内容插入其位置：
- en: '[PRE54]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Finally, restart the HAProxy cartridge from your local machine using the `rhc`
    command-line client:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 `rhc` 命令行客户端从本地计算机重新启动 HAProxy 插件：
- en: '[PRE55]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How it works…
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: HAProxy performs periodic health checks to determine the health of the application
    gears. The default configuration pings the root URL `/` every two seconds. If
    HAProxy receives an HTTP code other than `2xx` or `3xx`, then it considers it
    a server failure, and your application will give a `Service Unavailable` error.
    One scenario where you will see this behavior is when you use OpenShift to host
    your REST backend at a nonroot URL, such as `/api/v1/`. In the preceding steps,
    you updated the `haproxy.cfg` file to use a different health check URL.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: HAProxy 执行定期健康检查，以确定应用程序组件的健康状况。默认配置每两秒钟对根 URL `/` 进行一次 ping 操作。如果 HAProxy 收到
    `2xx` 或 `3xx` 以外的 HTTP 代码，则认为是服务器故障，您的应用程序将出现 `服务不可用` 错误。一个常见的场景是，当您使用 OpenShift
    托管 REST 后端并使用非根 URL（例如 `/api/v1/`）时，您将看到这种行为。在前面的步骤中，您已更新了 `haproxy.cfg` 文件，以使用不同的健康检查
    URL。
- en: See also
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Configuring HAProxy to use a different balance algorithm* recipe
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置 HAProxy 使用不同的负载均衡算法* 食谱'
- en: The *Enabling manual scaling with marker files* recipe
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用手动缩放和标记文件* 食谱'
- en: Configuring HAProxy to use a different balance algorithm
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 HAProxy 使用不同的负载均衡算法
- en: The HAProxy load balancer can work with several load-balancing algorithms. The
    configuration used by HAProxy in OpenShift applications uses the **leastconn**
    load-balancing algorithm. This algorithm is useful when you have long-lived connections,
    but is not recommended for short connections. For short connections, as in the
    case of our application, it is more suitable to use the **roundrobin** algorithm.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: HAProxy 负载均衡器可以与多种负载均衡算法一起使用。OpenShift 应用程序中使用的 HAProxy 配置使用 **leastconn** 负载均衡算法。当您有长期连接时，这个算法非常有用，但对于短连接并不推荐。对于短连接，如我们的应用程序，使用
    **roundrobin** 算法更为合适。
- en: In this recipe, you will learn how to configure HAProxy to use the **roundrobin
    balance** algorithm instead of the leastconn algorithm.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将学习如何配置 HAProxy 使用 **roundrobin 负载均衡** 算法，而不是 leastconn 算法。
- en: Getting ready
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need `rhc` installed on your machine. This
    recipe will utilize the application created in the *Creating scalable applications*
    recipe.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个教程，你的机器上需要安装`rhc`。本教程将利用在*创建可扩展应用程序*教程中创建的应用程序。
- en: How to do it…
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to configure HAProxy to use the roundrobin balance
    algorithm:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将HAProxy配置为使用轮询（roundrobin）负载均衡算法：
- en: Open a command-line terminal and navigate to the application directory created
    in the *Creating scalable applications* recipe.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端，并导航到在*创建可扩展应用程序*教程中创建的应用程序目录。
- en: 'Scale the JBoss EAP cartridge to use two JBoss EAP instances by running the
    following command:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令，将JBoss EAP cartridge扩展为使用两个JBoss EAP实例：
- en: '[PRE56]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'SSH into the main application gear using the `rhc ssh` command, as follows:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`rhc ssh`命令通过SSH登录到主应用程序gear，如下所示：
- en: '[PRE57]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Once you are inside the application gear, change the directory to the `haproxy/conf`
    directory, as follows:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入应用程序gear后，切换到`haproxy/conf`目录，如下所示：
- en: '[PRE58]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'It is always a good idea to make a backup of the configuration files before
    making any changes to them. Use the `copy` command to create a copy of the `haproxy.cfg`
    file in `$OPENSHIFT_DATA_DIR`, as follows:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对配置文件进行任何更改之前，备份配置文件总是一个好主意。使用`copy`命令在`$OPENSHIFT_DATA_DIR`中创建`haproxy.cfg`文件的副本，如下所示：
- en: '[PRE59]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now, open the `haproxy.cfg` file using VIM, and update the section under `balance
    leastconn` to the following code:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用VIM打开`haproxy.cfg`文件，并将`balance leastconn`下的部分更新为以下代码：
- en: '[PRE60]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Replace `gear-2` with your application's second gear name. Also, replace `host1`
    and `host2` and `port1` and `port2` with the gear 1 and gear 2 host and port values.
    You can get the values from the copy of `haproxy.cfg` saved in step 5.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`gear-2`替换为你应用程序的第二个gear名称。同时，将`host1`和`host2`、`port1`和`port2`替换为gear 1和gear
    2的主机名和端口值。你可以从第5步中保存的`haproxy.cfg`副本中获取这些值。
- en: 'You can ask HAProxy to reload the configuration by running the following command:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令要求HAProxy重新加载配置：
- en: '[PRE61]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Run Apache Benchmark to see the new configuration in action, as follows:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Apache Benchmark以查看新配置的效果，如下所示：
- en: '[PRE62]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In the preceding test, `ab` will make a total of `1000` requests with `20` concurrent
    requests at a time. As we are using the roundrobin algorithm, both the gears should
    handle 500 requests each. You can verify the number of requests by looking at
    the following HAProxy status page (screenshot):![How to do it…](img/00149.jpeg)
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的测试中，`ab`将总共发起`1000`个请求，每次`20`个并发请求。由于我们使用的是轮询算法，两个gear应该各自处理500个请求。你可以通过查看以下HAProxy状态页面（截图）来验证请求的数量：![如何操作…](img/00149.jpeg)
- en: How it works…
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: HAProxy supports various load-balance algorithms. The algorithm you choose will
    determine which backend server will be used to serve the request. The default
    load-balance algorithm used by OpenShift's scalable applications is leastconn.
    This algorithm selects the server with the least number of active connections.
    HAProxy is also configured to use persistent cookies to achieve sticky session
    behavior. Session stickiness ensures that a user request is served from the same
    gear that served their first request.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: HAProxy支持多种负载均衡算法。你选择的算法将决定使用哪个后端服务器来处理请求。OpenShift的可扩展应用程序使用的默认负载均衡算法是leastconn。此算法选择连接数最少的服务器。HAProxy还配置为使用持久性cookie来实现粘性会话行为。会话粘性确保用户的请求总是由第一个处理该请求的gear来处理。
- en: In the preceding steps, you overrode the default configuration to use the roundrobin
    algorithm. The algorithm to use can be set using the `balance` parameter. The
    roundrobin algorithm selects servers in turn to make sure requests are balanced
    fairly. You can assign weights to the servers to manipulate how frequently a server
    is selected compared to others. In step 6, you used `roundrobin` as the value
    of the balance parameter and assigned a weight of `1` to both the servers. Because
    we gave both servers the same weight, both will serve an equal number of requests.
    Then, you asked HAProxy to reload the configuration using the `rhc reload-cartridge`
    command in step 7.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，你覆盖了默认配置，使用了轮询算法。可以通过`balance`参数设置使用的负载均衡算法。轮询算法依次选择服务器，以确保请求公平地分配。你可以为服务器分配权重，以操控某个服务器相对于其他服务器被选择的频率。在第6步中，你将`roundrobin`作为负载均衡参数的值，并为两个服务器分配了`1`的权重。由于给两个服务器分配了相同的权重，两个服务器将处理相同数量的请求。然后，在第7步中，你使用`rhc
    reload-cartridge`命令要求HAProxy重新加载配置。
- en: In step 8, you ran a load test on the application using Apache Benchmark, to
    see if your changes were working as expected. Because both servers had a weight
    of `1`, they both handled 500 requests each.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 8 中，你使用 Apache Benchmark 对应用程序进行了负载测试，以查看你的更改是否按预期工作。因为两个服务器的权重都是 `1`，它们各自处理了
    500 个请求。
- en: 'Now, let''s update the HAProxy configuration to use different weights for different
    servers. Update the `haproxy.cfg` roundrobin section with the following code:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更新 HAProxy 配置，使用不同的权重分配给不同的服务器。通过以下代码更新 `haproxy.cfg` 的轮询部分：
- en: '[PRE63]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Again, reload the configuration by running the `rhc reload-cartridge` command,
    and then run the Apache Benchmark test performed in step 8\. Because `gear-2`
    has a weight of `1` and `gear-1` has a weight of `2`, gear 1 will serve twice
    as many requests as gear 2\. You can verify that by looking at the following HAProxy
    status page (screenshot):'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 再次通过运行 `rhc reload-cartridge` 命令重新加载配置，然后运行在步骤 8 中执行的 Apache Benchmark 测试。因为
    `gear-2` 的权重是 `1`，而 `gear-1` 的权重是 `2`，所以 gear 1 将处理比 gear 2 多一倍的请求。你可以通过查看以下 HAProxy
    状态页面（截图）来验证这一点：
- en: '![How it works…](img/00150.jpeg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/00150.jpeg)'
- en: See also
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Configuring a different health check URL for HAProxy* recipe
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为 HAProxy 配置不同的健康检查 URL* 配方'
- en: The *Enabling manual scaling with marker files* recipe
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用标记文件启用手动扩展* 配方'
- en: Creating scalable apps from nonscalable apps
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从不可扩展应用程序创建可扩展应用程序
- en: OpenShift currently does not support the conversion of an existing nonscalable
    application to a scalable application. In this recipe, you will learn how to create
    a new scalable application using an existing nonscalable application.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 当前不支持将现有的不可扩展应用程序转换为可扩展应用程序。在这个配方中，你将学习如何使用现有的不可扩展应用程序创建一个新的可扩展应用程序。
- en: Getting ready
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you will need `rhc` installed on your machine. This
    recipe will require all three available gears, so please make sure to delete any
    existing applications.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，你需要在你的机器上安装 `rhc`。这个配方需要所有三个可用的设备，因此请确保删除任何现有的应用程序。
- en: How to do it…
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to covert a nonscalable application to a scalable
    application:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将不可扩展的应用程序转换为可扩展应用程序：
- en: Open a new command-line terminal and navigate to a convenient location where
    you want to create the application.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令行终端，导航到你希望创建应用程序的便捷位置。
- en: 'Create a nonscalable application with JBoss EAP 6 using the following command:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个不可扩展的应用程序，使用 JBoss EAP 6：
- en: '[PRE64]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'To create a scalable application using the application created in step 2, run
    the following command:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用步骤 2 中创建的应用程序创建一个可扩展的应用程序，请运行以下命令：
- en: '[PRE65]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: How it works…
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Using another application as a template, you can create a new application using
    the `--from-app` option. When you specify the `--from-app` option, OpenShift will
    use the template application configuration to create the new application. The
    configuration includes existing cartridges, storage configuration, gear sizes,
    scaling configuration, deployment configuration, and so on.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 使用另一个应用程序作为模板，你可以使用 `--from-app` 选项创建一个新的应用程序。当你指定 `--from-app` 选项时，OpenShift
    将使用模板应用程序的配置来创建新应用程序。该配置包括现有的插件、存储配置、设备大小、扩展配置、部署配置等。
- en: 'In the preceding steps, you created a scalable application from a nonscalable
    application. Because you want to create a scalable application, you have to provide
    the `--scaling` option; otherwise, a nonscalable application will be created.
    You can also specify different gear sizes using the `--gear-size` option:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的步骤中，你已经将一个不可扩展的应用程序转换为可扩展的应用程序。因为你想创建一个可扩展的应用程序，所以必须提供 `--scaling` 选项；否则，将会创建一个不可扩展的应用程序。你还可以使用
    `--gear-size` 选项指定不同的设备大小：
- en: '[PRE66]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Apart from `--scaling` and `--gear-size`, you can also provide the `--env`,
    `--no-git`, and `--enable-jenkins` options.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `--scaling` 和 `--gear-size` 选项外，你还可以提供 `--env`、`--no-git` 和 `--enable-jenkins`
    选项。
- en: 'The `--from-app` option makes use of application snapshots to transfer the
    template application data and Git repository. It first takes the `jobstore` application
    snapshot, transfers it to the `jobstorescalable` application, and then restores
    it. This can be seen in the application creation logs as shown in the following
    command line:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`--from-app` 选项利用应用程序快照来传输模板应用程序的数据和 Git 仓库。它首先获取 `jobstore` 应用程序的快照，将其传输到
    `jobstorescalable` 应用程序，然后恢复该快照。在以下命令行中可以看到应用程序创建的日志：'
- en: '[PRE67]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Note
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The cartridge data is not transferred when you create an application using `--from-app`,
    but any data stored in `$OPENSHIFT_DATA_DIR` is transferred to the new application.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `--from-app` 创建应用程序时，卡带数据不会被传输，但存储在 `$OPENSHIFT_DATA_DIR` 中的任何数据都会被传输到新应用程序。
- en: See also
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating scalable applications* recipe
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建可扩展应用程序* 配方'
- en: The *Enabling manual scaling with marker files* recipe
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用标记文件启用手动扩展* 配方'
- en: Enabling manual scaling with marker files
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标记文件启用手动扩展
- en: In this recipe, you will learn how you can disable autoscaling and add gears
    manually to a scalable application using the `rhc` command-line tool.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，你将学习如何使用 `rhc` 命令行工具禁用自动扩展并手动添加齿轮到可扩展应用程序。
- en: Getting ready
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To complete this recipe, you will need `rhc` installed on your machine. This
    recipe will utilize the application created in the *Creating scalable applications*
    recipe.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，你的机器上需要安装 `rhc`。此配方将使用在 *创建可扩展应用程序* 配方中创建的应用程序。
- en: How to do it…
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'Perform the following steps to manually add a new gear to a scalable application:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以手动向可扩展应用程序添加新齿轮：
- en: Open a command-line terminal and navigate to the application directory created
    in the *Creating scalable applications* recipe.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端，导航到在 *创建可扩展应用程序* 配方中创建的应用程序目录。
- en: 'Create a new marker file with the name `disable_auto_scaling` in the `.openshift/marker`
    directory inside your application director. On Mac and Linux machines, you can
    use the following command:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的应用程序目录中的 `.openshift/marker` 目录下创建一个名为 `disable_auto_scaling` 的新标记文件。在 Mac
    和 Linux 机器上，你可以使用以下命令：
- en: '[PRE68]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: On Windows machines, you can create a new file using the **File** menu.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 机器上，你可以通过 **文件** 菜单创建新文件。
- en: 'Commit the file to the local Git repository, and push the changes to the OpenShift
    application gear Git repository using the following commands:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件提交到本地 Git 仓库，并使用以下命令将更改推送到 OpenShift 应用程序齿轮 Git 仓库：
- en: '[PRE69]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Restart the HAProxy cartridge so that it does not run the `haproxy_ctld` process.
    The `haproxy_ctld` process is responsible for publishing scale-up and scale-down
    events. Have a look at the following command:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 HAProxy 卡带，使其不再运行 `haproxy_ctld` 进程。`haproxy_ctld` 进程负责发布扩展和缩减事件。请查看以下命令：
- en: '[PRE70]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Now, to add a new gear to your application, you can use the following command:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要向你的应用程序添加一个新的齿轮，可以使用以下命令：
- en: '[PRE71]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'To remove a gear from your application, you can use the following command:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从应用程序中移除一个齿轮，可以使用以下命令：
- en: '[PRE72]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: How it works…
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: OpenShift scalable applications are by default autoscalable in nature, which
    means they can add or remove web cartridge gears based on the number of concurrent
    users. While autoscaling is useful in most cases, there are times when you will
    prefer to control the scaling behavior yourself. You will enable manual scaling
    in situations where you can anticipate web traffic on your application well in
    advance. Examples are a holiday season or a promotion, where you know in advance
    that you can expect more visitors to your applications. For such situations, you
    can enable manual scaling to have a bunch of gears available to serve the web
    traffic.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 可扩展应用程序默认具有自动扩展功能，这意味着它们可以根据并发用户的数量添加或移除 web 卡带齿轮。虽然在大多数情况下自动扩展非常有用，但有时你可能更愿意自己控制扩展行为。你会在可以提前预见到应用程序的
    web 流量时启用手动扩展。例如，在节假日或促销活动期间，你提前知道会有更多的访问者访问你的应用程序。在这种情况下，你可以启用手动扩展，确保有足够的齿轮来处理
    web 流量。
- en: 'OpenShift allows users to manually add or remove gears using the `rhc scale-up-app`
    or `rhc scale-down-app` commands. These commands add or remove one gear at a time.
    Under the covers, these commands use the OpenShift REST API to publish scale-up
    and scale-down events to the broker. OpenShift Broker consumes these requests
    and acts accordingly. After running the `rhc scale-up-app` command in step 5,
    you should see that the `jobstore` application is consuming three gears. You can
    also see the new gear in the HAProxy status page:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 允许用户使用 `rhc scale-up-app` 或 `rhc scale-down-app` 命令手动添加或移除齿轮。这些命令一次添加或移除一个齿轮。在后台，这些命令使用
    OpenShift REST API 将扩展和缩减事件发布到代理。OpenShift 代理消费这些请求并据此采取行动。在第 5 步运行 `rhc scale-up-app`
    命令后，你应该能看到 `jobstore` 应用程序正在使用三个齿轮。你还可以在 HAProxy 状态页面上看到新的齿轮：
- en: '[PRE73]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: There's more…
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: As mentioned in the preceding section, the `rhc scale-up-app` or `scale-down-app`
    commands use the REST API to add or remove a gear. So, if you don't want to use
    OpenShift tooling to perform manual scaling, then you can call the REST API yourself
    to add or remove gears from the application.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`rhc scale-up-app` 或 `scale-down-app` 命令使用 REST API 添加或移除 gear。因此，如果你不想使用
    OpenShift 工具来执行手动扩展操作，可以直接调用 REST API 来添加或移除应用程序中的 gear。
- en: 'To scale up using `curl`, you can run the following command:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `curl` 扩展应用程序，你可以运行以下命令：
- en: '[PRE74]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Replace `domain_name`, `app_name`, `openshift_login`, and `openshift_login_password`
    with their respective values.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `domain_name`、`app_name`、`openshift_login` 和 `openshift_login_password` 替换为相应的值。
- en: 'To scale down using `curl`, you can run the wfollowing command:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `curl` 缩减应用程序，你可以运行以下命令：
- en: '[PRE75]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: See also
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating scalable applications* recipe
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建可扩展应用程序* 配方'
- en: The *Enabling manual scaling with marker files* recipe
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用手动缩放与标记文件* 配方'
- en: Appendix A. Running OpenShift on a Virtual Machine
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 在虚拟机上运行 OpenShift
- en: OpenShift Origin is the free and open source flavor of OpenShift PaaS. It is
    the upstream project to both OpenShift Online and Enterprise. You will learn how
    to run OpenShift Origin in a **Virtual Machine** (**VM**) running on your machine.
    This will help you work with OpenShift even when you are not connected to the
    Internet. You can use the OpenShift Origin VM as your development environment
    to test your changes, and then when you are ready for deployment, you can push
    the source code to OpenShift Online. To use the OpenShift Origin VM as your development
    environment, run the `rhc setup --server` command. The `--server` option should
    point to the OpenShift Origin VM broker. You can refer to the *Specifying a different
    OpenShift server hostname* recipe in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Getting Started with OpenShift"), *Getting Started with OpenShift*,
    for more details.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift Origin 是 OpenShift PaaS 的免费开源版本。它是 OpenShift Online 和 Enterprise 的上游项目。你将学习如何在你机器上运行虚拟机中运行
    **OpenShift Origin** (**VM**) 。这将帮助你即使在没有连接互联网时也能使用 OpenShift。你可以使用 OpenShift
    Origin 虚拟机作为开发环境来测试你的更改，然后，当你准备好进行部署时，可以将源代码推送到 OpenShift Online。要将 OpenShift
    Origin 虚拟机作为开发环境使用，请运行 `rhc setup --server` 命令。`--server` 选项应指向 OpenShift Origin
    虚拟机代理。更多详情可以参考 [第 1 章](part0014_split_000.html#page "Chapter 1. Getting Started
    with OpenShift") 中的 *指定不同的 OpenShift 服务器主机名* 配方，*OpenShift 入门*。
- en: To prepare yourself, you will need to have VirtualBox installed on your machine.
    If you do not have it installed, please download it from the official website
    at [https://www.virtualbox.org/](https://www.virtualbox.org/). Also, install the
    7-Zip software for your operating system, which you can download from its official
    website at [http://www.7-zip.org/download.html](http://www.7-zip.org/download.html).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 要准备好环境，你需要在机器上安装 VirtualBox。如果尚未安装，请从官方网站 [https://www.virtualbox.org/](https://www.virtualbox.org/)
    下载。还需要为你的操作系统安装 7-Zip 软件，你可以从其官方网站 [http://www.7-zip.org/download.html](http://www.7-zip.org/download.html)
    下载。
- en: 'Perform the following steps to run OpenShift on a VM:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在虚拟机上运行 OpenShift：
- en: 'Download the OpenShift Origin Version 3 VM image. The VM is over 2 GB in size.
    You can run the following command:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 OpenShift Origin 版本 3 虚拟机镜像。虚拟机文件超过 2 GB。你可以运行以下命令：
- en: '[PRE76]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Windows users can download either via the browser, or they can first download
    the `wget` software for Windows at [http://gnuwin32.sourceforge.net/packages/wget.htm](http://gnuwin32.sourceforge.net/packages/wget.htm),
    and then use it to download the OpenShift Origin VM.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows 用户可以通过浏览器下载，或者他们可以先在 Windows 上下载 `wget` 软件，下载地址是 [http://gnuwin32.sourceforge.net/packages/wget.htm](http://gnuwin32.sourceforge.net/packages/wget.htm)，然后使用该工具下载
    OpenShift Origin 虚拟机。
- en: 'The advantage of using `wget` is that you can resume the partial download using
    the `-c` option. This will help if you are at a location where the Internet connection
    is not stable, so you can resume the download using the following command:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `wget` 的优势在于你可以通过 `-c` 选项恢复部分下载。如果你处于网络连接不稳定的地方，这将非常有用，你可以通过以下命令恢复下载：
- en: '[PRE77]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Next, unpack the zip archive using the 7-Zip file archiver:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用 7-Zip 文件压缩工具解压缩 zip 压缩包：
- en: '[PRE78]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Typing in this command will result in three additional files, as shown in the
    next command:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入此命令将生成三个额外的文件，如下一个命令所示：
- en: '[PRE79]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: These are `OpenShift Origin Release 3.vmx`, `OpenShift Origin Release 3.vbox`,
    and `origin-rel3.vmdk`.
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些文件分别是 `OpenShift Origin Release 3.vmx`、`OpenShift Origin Release 3.vbox` 和
    `origin-rel3.vmdk`。
- en: Start the VirtualBox manager, and click on the **New** button. Have a look at
    the following screenshot:![Running OpenShift on a Virtual Machine](img/00151.jpeg)
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动VirtualBox管理器，并点击**新建**按钮。请查看以下截图：![在虚拟机上运行OpenShift](img/00151.jpeg)
- en: Change the details required for the OpenShift Origin VM. You can keep whatever
    name you like, but you have to use **Type** as **Linux** and **Version** as **Fedora
    (64 bit)**. Have a look at the following screenshot:![Running OpenShift on a Virtual
    Machine](img/00152.jpeg)
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改OpenShift Origin虚拟机所需的详细信息。你可以使用任何你喜欢的名称，但必须将**类型**设置为**Linux**，**版本**设置为**Fedora（64位）**。请查看以下截图：![在虚拟机上运行OpenShift](img/00152.jpeg)
- en: Next, set the memory size to 1 GB, as this will give the VM a reasonable amount
    of memory to work well with. Have a look at the following screenshot:![Running
    OpenShift on a Virtual Machine](img/00153.jpeg)
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将内存大小设置为1 GB，因为这样可以为虚拟机提供足够的内存，以便它能良好运行。请查看以下截图：![在虚拟机上运行OpenShift](img/00153.jpeg)
- en: Next, you will add a virtual hard drive to the new machine. Please select the
    **Use an existing virtual hard drive file** option, and click on the **Choose
    a virtual hard drive file upload** button. Have a look at the following screenshot:![Running
    OpenShift on a Virtual Machine](img/00154.jpeg)
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将为新机器添加一个虚拟硬盘。请选择**使用现有虚拟硬盘文件**选项，然后点击**选择虚拟硬盘文件上传**按钮。请查看以下截图：![在虚拟机上运行OpenShift](img/00154.jpeg)
- en: VirtualBox will present a file selection dialog. Browse to find the `origin-rel3.vmdk`
    file, and select it. Click on the button labeled **Open**. Have a look at the
    following screenshot:![Running OpenShift on a Virtual Machine](img/00155.jpeg)
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VirtualBox将显示一个文件选择对话框。浏览并找到`origin-rel3.vmdk`文件，选择它。点击标有**打开**的按钮。请查看以下截图：![在虚拟机上运行OpenShift](img/00155.jpeg)
- en: After selecting the file, click on **Create** to create a new VM. You will see
    a new VM in the virtual manager display. Have a look at the following screenshot:![Running
    OpenShift on a Virtual Machine](img/00156.jpeg)
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择文件后，点击**创建**来创建一个新的虚拟机。你将在虚拟管理器显示中看到新的虚拟机。请查看以下截图：![在虚拟机上运行OpenShift](img/00156.jpeg)
- en: Next, you will set up a bridged network adapter, which will allow you to work
    with the OpenShift Origin VM from your local machine. Select the VM, and right-click
    on it. Then, click on the **Settings** icon:![Running OpenShift on a Virtual Machine](img/00157.jpeg)
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将设置一个桥接网络适配器，这将允许你从本地机器与OpenShift Origin虚拟机进行交互。选择虚拟机，右键点击它，然后点击**设置**图标：![在虚拟机上运行OpenShift](img/00157.jpeg)
- en: Navigate to the **Network** settings, and select **Adapter 2**. Check the **Enable
    Network Adapter** checkbox, and then set the **Attached to** drop-down menu to
    **Bridged Adapter**. Finally, set the name to the network adapter you want to
    bridge. Have a look at the following screenshot:![Running OpenShift on a Virtual
    Machine](img/00158.jpeg)
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**网络**设置，选择**适配器2**。勾选**启用网络适配器**复选框，然后将**连接到**下拉菜单设置为**桥接适配器**。最后，设置你想桥接的网络适配器的名称。请查看以下截图：![在虚拟机上运行OpenShift](img/00158.jpeg)
- en: Each system may have different names for their physical network adaptors. Click
    on **OK** after making the preceding changes.
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个系统的物理网络适配器名称可能不同。完成上述更改后，点击**确定**。
- en: Start the VM by clicking on the **Start** button. Have a look at the following
    screenshot:![Running OpenShift on a Virtual Machine](img/00159.jpeg)
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**启动**按钮来启动虚拟机。请查看以下截图：![在虚拟机上运行OpenShift](img/00159.jpeg)
- en: When the VM has finished booting, it will present you with a tutorial that will
    help you understand how to work with the OpenShift Origin VM, as shown in the
    following screenshot:![Running OpenShift on a Virtual Machine](img/00160.jpeg)
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当虚拟机启动完成后，它将向你展示一个教程，帮助你了解如何使用OpenShift Origin虚拟机，如下图所示：![在虚拟机上运行OpenShift](img/00160.jpeg)
- en: After you enter `yes`, the tutorial will walk you through the features of the
    OpenShift Origin VM from an administrator's perspective.
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入`yes`后，教程将从管理员的角度带你了解OpenShift Origin虚拟机的功能。
- en: After finishing the admin tutorial, you will be shown a menu where you can select
    options to interact with the OpenShift Origin VM. Choose the second option to
    connect with the web console. You will be shown the web console details, as shown
    in the following screenshot:![Running OpenShift on a Virtual Machine](img/00161.jpeg)
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成管理员教程后，系统会显示一个菜单，你可以选择与OpenShift Origin虚拟机交互的选项。选择第二个选项以连接到Web控制台。你将看到Web控制台的详细信息，如下图所示：![在虚拟机上运行OpenShift](img/00161.jpeg)
- en: Copy the URL and paste it into your browser. The default username/password combination
    is `demo`/`changeme`. Have a look at the following screenshot:![Running OpenShift
    on a Virtual Machine](img/00162.jpeg)
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 URL 并粘贴到浏览器中。默认的用户名/密码组合是`demo`/`changeme`。请查看以下截图：![在虚拟机上运行 OpenShift](img/00162.jpeg)
- en: Log in to the web console using the default username and password. You will
    be directed to the application creation page. You can create the WordPress application
    by following the steps mentioned in the *Creating a WordPress application using
    the web console* recipe in [Chapter 1](part0014_split_000.html#page "Chapter 1. Getting
    Started with OpenShift"), *Getting Started with OpenShift*.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用默认的用户名和密码登录到 Web 控制台。您将被引导到应用创建页面。您可以按照[第1章](part0014_split_000.html#page
    "第1章. 开始使用 OpenShift")中的*使用 Web 控制台创建 WordPress 应用*的步骤来创建 WordPress 应用，*开始使用 OpenShift*。
