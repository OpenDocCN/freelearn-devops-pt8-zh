- en: Chapter 8. Swift – OpenStack Object Storage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. Swift – OpenStack 对象存储
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将覆盖以下主题：
- en: Introduction – OpenStack Object Storage
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 – OpenStack 对象存储
- en: Creating object containers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建对象容器
- en: Deleting object containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除对象容器
- en: Uploading objects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传对象
- en: Uploading large objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传大对象
- en: Downloading objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载对象
- en: Deleting objects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除对象
- en: Container ACLs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器 ACL
- en: Introduction – OpenStack Object Storage
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 – OpenStack 对象存储
- en: OpenStack Object Storage, also known as **Swift**, is the service that allows
    for massively scalable and highly redundant storage on commodity hardware. This
    service is implemented by Rackspace as Cloud Files, and it is also analogous to
    Amazon's S3 storage service and managed in a similar way under OpenStack. With
    OpenStack Object Storage, we can store many objects of virtually unlimited size—restricted
    only by the available hardware—and grow our environment as needed, to accommodate
    our storage. The highly redundant nature of OpenStack Object Storage is ideal
    for archiving data (such as logs and backup archives) as well as for providing
    a storage system that OpenStack Compute can use for virtual machine instance images.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 对象存储，也称为 **Swift**，是一个允许在商品硬件上进行大规模可扩展和高度冗余存储的服务。该服务由 Rackspace 实现，名为
    Cloud Files，也类似于 Amazon 的 S3 存储服务，并在 OpenStack 下以类似方式进行管理。通过 OpenStack 对象存储，我们可以存储许多几乎无限大小的对象—仅受限于可用硬件—并根据需要扩展环境以适应我们的存储需求。OpenStack
    对象存储的高度冗余特性非常适合用于归档数据（例如日志和备份归档），同时也为 OpenStack Compute 提供了一个存储系统，可用于虚拟机实例镜像。
- en: The architecture of OpenStack Object Storage is straightforward. There is the
    API service that runs on the controller nodes. Then there are Swift proxy services
    that can either be deployed onto the controller nodes, or separated onto their
    own dedicated servers—depending on your requirements, followed by the actual storage
    nodes that store the data. The storage nodes are the servers that are designed
    to scale out as your requirements for storage grows.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 对象存储的架构是直接而简单的。API 服务运行在控制节点上。然后是 Swift 代理服务，这些服务可以部署到控制节点上，也可以根据需求分布到独立的服务器上，之后是实际存储数据的存储节点。这些存储节点是为随着存储需求增长而进行扩展而设计的服务器。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Scaling the characteristics and design of Swift is beyond the scope of this
    book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展 Swift 的特性和设计超出了本书的范围。
- en: 'A typical, simplified view of the architecture is show here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了一个典型的简化架构视图：
- en: '![Introduction – OpenStack Object Storage](img/00151.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 – OpenStack 对象存储](img/00151.jpeg)'
- en: Essentially, requests (for example, to upload or download an object) are sent
    to the API through the load balance pool, and then the data is sent through to
    the physical storage nodes by the `Swift-Proxy` service. The `Swift-Proxy` service
    would fetch and store the data back to and from the end user.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，上传或下载对象等请求是通过负载均衡池发送到 API 的，然后数据通过 `Swift-Proxy` 服务传送到物理存储节点。`Swift-Proxy`
    服务会从终端用户那里获取数据，并将其存储进出。
- en: As the name states, OpenStack Object Storage operates on what is known as objects.
    Objects can be anything from a file, to an object named as a complete folder and
    filename – to OpenStack Object Storage, anything it sees, regardless of the filename,
    is still one single object. Objects are stored in **Containers**. A great analogy
    is a bucket. In a bucket, you can store anything that would fit in it, from grains
    of sand to tools you have laying in your shed!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，OpenStack 对象存储基于所谓的对象操作。对象可以是任何东西，从文件到一个名为完整文件夹和文件名的对象——对 OpenStack 对象存储来说，不管是什么文件名，所有它看到的内容都只是一个单一的对象。对象被存储在
    **容器** 中。一个很好的类比是桶。在桶里，你可以存放任何适合其中的东西，从沙粒到你放在棚子里的工具！
- en: Creating object containers
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建对象容器
- en: To get started using OpenStack Object Storage, we must first create a **container**.
    A container in this case is quite similar to a folder on Windows or Linux file
    directory. However, containers cannot be nested, though deep structures can be
    created in a fashion similar to the nested folder structure using both container
    and object names (pseudo folders) when we come to uploading the objects that are
    stored in these containers. Names we assigned containers and objects are analogous
    to labels that allow us to interpret as folder structures through the use of a
    `/` character in these labels.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 OpenStack 对象存储，我们必须首先创建一个**容器**。在这里，容器类似于 Windows 或 Linux 文件目录中的文件夹。然而，容器不能嵌套，尽管在上传存储在这些容器中的对象时，我们可以通过容器和对象名称（伪文件夹）的组合方式创建类似嵌套文件夹结构的深层结构。我们分配给容器和对象的名称类似于标签，允许我们通过在这些标签中使用`/`字符来将其解释为文件夹结构。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Ensure that you are logged on to a correctly configured OpenStack client as
    described in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, and can access the
    OpenStack environment as a user with the `swiftoperator` privileges.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您已登录到正确配置的 OpenStack 客户端，如[第2章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "第2章. OpenStack 客户端")，*OpenStack 客户端*，中所述，并且可以作为具有`swiftoperator`权限的用户访问 OpenStack
    环境。
- en: We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, with the `cookbook4`
    password; we have also granted this user with the `swiftoperator` privileges.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在[第2章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47 "第2章.
    OpenStack 客户端")，*OpenStack 客户端*中创建的`developer`用户，并使用`cookbook4`密码；我们还授予此用户`swiftoperator`权限。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[第2章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47 "第2章.
    OpenStack 客户端")，*OpenStack 客户端*，获取有关设置环境以使用 OpenStack 命令行客户端的详细信息。
- en: How to do it…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create a Swift `container` on our environment, follow these steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的环境中创建一个 Swift `容器`，请按照以下步骤操作：
- en: 'To create a container, execute the following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个容器，请执行以下命令：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the container is created, you will see the following output:![How to do
    it…](img/00152.jpeg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建容器后，您将看到以下输出：![如何操作…](img/00152.jpeg)
- en: 'To view all the available containers, type this command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看所有可用的容器，请输入以下命令：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will give an output like the following:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回类似以下的输出：
- en: '![How to do it…](img/00153.jpeg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00153.jpeg)'
- en: 'Once the container is created, we can set additional details or **metadata**
    on it by executing the following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦容器创建完成，我们可以通过执行以下命令设置附加的详细信息或**元数据**：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To view container details, type the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看容器详细信息，请输入以下命令：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will give the following output:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回以下输出：
- en: '![How to do it…](img/00154.jpeg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00154.jpeg)'
- en: 'As described in the introduction, names that we assigned to containers and
    objects are very much like labels; so, to create a pseudo-folder in the container,
    use `/` delimiter in the container name:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如引言中所述，我们分配给容器和对象的名称很像标签；因此，要在容器中创建一个伪文件夹，请在容器名称中使用`/`分隔符：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will return output like the following:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回类似以下的输出：
- en: '![How to do it…](img/00155.jpeg)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00155.jpeg)'
- en: 'To view details of the pseudo-folder, execute the `container show` command
    by including the full pseudo-folder name:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看伪文件夹的详细信息，请通过包含完整的伪文件夹名称执行`container show`命令：
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will give the information like the following:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将提供类似以下的信息：
- en: '![How to do it…](img/00156.jpeg)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00156.jpeg)'
- en: How it works…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In OpenStack Object Storage, users with the `admin` or `swiftoperator` privileges
    can utilize the Object Storage service. To do so, we first must create **containers**,
    where the objects will be stored. Containers may not be nested, though we may
    create pseudo-folders using the `/` delimiter in the container name. To create
    a container, follow this command-line syntax:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 对象存储中，具有`admin`或`swiftoperator`权限的用户可以使用对象存储服务。为此，我们首先必须创建**容器**，其中将存储对象。容器不能嵌套，但我们可以使用`/`分隔符在容器名称中创建伪文件夹。要创建容器，请遵循以下命令行语法：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To list available containers, use the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出可用容器，请使用以下命令：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also set metadata on each container. Use the following command for setting
    additional info on a container:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在每个容器上设置元数据。使用以下命令为容器设置附加信息：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Multiple pairs of metadata may be set on each container.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在每个容器上设置多对元数据。
- en: 'To view container details, execute this command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看容器详细信息，请执行以下命令：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Deleting object containers
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除对象容器
- en: Deleting OpenStack Object Storage containers is quite simple. Any container
    can be deleted, for as long as they are empty.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 OpenStack 对象存储容器非常简单。只要它们为空，任何容器都可以被删除。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this case, the OpenStack CLI has different behavior from the Swift CLI tool.
    The Swift CLI will *delete container with all of its* contents, while the OpenStack
    CLI will not. In this example, we are using the OpenStack CLI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下，OpenStack CLI 与 Swift CLI 工具的行为不同。Swift CLI 将删除包括所有内容在内的容器，而 OpenStack
    CLI 则不会。在本示例中，我们使用的是 OpenStack CLI。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client* with the `cookbook4`
    password. We have also granted this user the `swiftoperator` privileges.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您以正确配置的 OpenStack 客户端登录，并作为具有 `swiftoperator` 特权的用户访问 OpenStack 环境。我们将使用在
    [第 2 章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47 "第 2 章.
    OpenStack 客户端") 的 *Common OpenStack identity tasks* 配方中创建的 `developer` 用户，密码为
    `cookbook4`。我们还为该用户授予了 `swiftoperator` 特权。
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 详细设置环境以使用 OpenStack 命令行客户端，请参阅 [第 2 章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "第 2 章. OpenStack 客户端") 的 *OpenStack 客户端*。
- en: How to do it…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To delete a Swift container in our environment, execute the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的环境中删除 Swift 容器，请执行以下步骤：
- en: 'First, list the available containers:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，列出可用容器：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will give an output like the following:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示如下输出：
- en: '![How to do it…](img/00153.jpeg)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00153.jpeg)'
- en: 'View container details to make sure that it is empty:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看容器详细信息，确保它为空：
- en: '[PRE11]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will show an output like the following:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示如下输出：
- en: '![How to do it…](img/00157.jpeg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00157.jpeg)'
- en: 'Now delete the container using the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用以下命令删除容器：
- en: '[PRE12]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no output from this command.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令不会输出任何内容。
- en: How it works…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In OpenStack Object Storage, empty containers can be deleted by a user that
    created them. First, we must make sure that the container is empty by viewing
    its details:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenStack 对象存储中，用户可以删除空容器。首先，我们必须确保容器为空，方法是查看其详细信息：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, delete the container with the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令删除容器：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Verify that container is gone by listing available containers:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 验证容器是否已删除，方法是列出可用容器：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Uploading objects
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传对象
- en: Once we have created one or more containers, we can start uploading objects
    to them. While OpenStack Object Storage does not support nested containers, we
    can simulate folders or file directories with object names. This presents similar
    structure to the pseudo-folders we used in container names and both achieve similar
    end goals to a user expecting a tree-like structure to their object storage use.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了一个或多个容器，就可以开始向其中上传对象。虽然 OpenStack 对象存储不支持嵌套容器，但我们可以通过对象名称模拟文件夹或文件目录。这与我们在容器名称中使用伪文件夹的类似结构，并且都能实现用户期望的对象存储使用树形结构的最终目标。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, with the `cookbook4`
    password; we have also granted this user `swiftoperator` privileges.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已登录到配置正确的 OpenStack 客户端，并且作为具有 `swiftoperator` 权限的用户可以访问 OpenStack 环境。我们将使用在[第
    2 章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47 "第2章 OpenStack
    客户端")，*OpenStack 客户端*，中创建的 `developer` 用户，密码为 `cookbook4`；我们也已经授予该用户 `swiftoperator`
    权限。
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use OpenStack command-line client.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第 2 章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47 "第2章
    OpenStack 客户端")，*OpenStack 客户端*，了解如何设置环境以使用 OpenStack 命令行客户端。
- en: How to do it…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To upload objects to an OpenStack Object Storage container, follow the following
    steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要将对象上传到 OpenStack 对象存储容器，请按照以下步骤操作：
- en: 'We will upload the `intro.txt` file into the `books` container:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把 `intro.txt` 文件上传到 `books` 容器中：
- en: '[PRE16]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will give the following output:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![How to do it…](img/00158.jpeg)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00158.jpeg)'
- en: 'List objects in a container by providing the container name:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过提供容器名称来列出容器中的对象：
- en: '[PRE17]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will give an output like the following:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生如下输出：
- en: '![How to do it…](img/00159.jpeg)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00159.jpeg)'
- en: Note
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here `chapter1` is the *pseudo-folder* we created in the *Creating object containers*
    recipe and it shows as an object.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的 `chapter1` 是我们在 *创建对象容器* 章节中创建的*伪文件夹*，它显示为一个对象。
- en: 'We can upload an object into the pseudo-folder called `books/chapter1` as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式将对象上传到名为 `books/chapter1` 的伪文件夹中：
- en: '[PRE18]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will give an output like the following:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生如下输出：
- en: '![How to do it…](img/00160.jpeg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00160.jpeg)'
- en: 'To list objects in a container, issue the following against the container name:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出容器中的对象，请对容器名称执行以下操作：
- en: '[PRE19]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will list the objects available under this container:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将列出该容器下可用的对象：
- en: '![How to do it…](img/00161.jpeg)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00161.jpeg)'
- en: 'To list all objects in the pseudo-folder container name, use a `prefix` flag:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出伪文件夹容器中的所有对象，请使用 `prefix` 标志：
- en: '[PRE20]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![How to do it…](img/00162.jpeg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00162.jpeg)'
- en: Tip
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can use `--prefix` to list any object that begins with the prefixed letters.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用 `--prefix` 来列出以指定前缀字母开头的任何对象。
- en: 'To list all top-level objects in a container, use a **delimiter** flag. In
    this example, the delimiter is `/`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出容器中的所有顶级对象，请使用**分隔符**标志。在此示例中，分隔符为 `/`：
- en: '[PRE21]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![How to do it…](img/00159.jpeg)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00159.jpeg)'
- en: 'To show information about an object, issue the following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示有关对象的信息，请执行以下命令：
- en: '[PRE22]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will give information about that object:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示该对象的信息：
- en: '![How to do it…](img/00163.jpeg)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00163.jpeg)'
- en: How it works…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In order to store files in OpenStack Object Storage, **objects** have to be
    uploaded to a **container**. Containers cannot be nested; however, pseudo-folders
    or pseudo-directories can be created using the `/` delimiter. Once a container
    is created, you can upload files by using the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将文件存储到 OpenStack 对象存储中，**对象**必须上传到一个**容器**中。容器不能嵌套；然而，可以使用 `/` 分隔符创建伪文件夹或伪目录。一旦容器创建完成，你可以使用以下命令上传文件：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Multiple objects can be uploaded with one command.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过一条命令上传多个对象。
- en: 'To list objects that were uploaded to a container, execute the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出上传到容器中的对象，请执行以下命令：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When listing objects in a container, enable filtering using the `--prefix` and
    `--delimiter` flags.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 列出容器中的对象时，启用 `--prefix` 和 `--delimiter` 标志进行过滤。
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By default, a maximum of 10,000 objects will be listed. Use pagination or the
    `--all` flag to view more than the default number of objects.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，将列出最多 10,000 个对象。使用分页或 `--all` 标志查看超过默认数量的对象。
- en: 'To view details of individual object, use the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看单个对象的详细信息，请使用以下命令：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Regular object size is limited in Swift. By default, only objects 5 GB or smaller
    can be uploaded with the `openstack object create` command. Refer to the *Uploading
    large objects* recipe on how to upload large objects.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Swift 中，常规对象的大小有限制。默认情况下，只有 5 GB 或更小的对象可以通过 `openstack object create` 命令上传。有关如何上传大型对象的详细信息，请参考*上传大型对象*配方。
- en: Uploading large objects
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传大型对象
- en: 'Every OpenStack Object Storage cluster has a limit on how large the uploaded
    objects can be. Usually that limit is set to 5 GB, though each cluster can have
    its own limit. However, this doesn''t mean that you are limited to uploading only
    5 GB or smaller objects to OpenStack Object Storage. Swift provides large object
    support via already configured and deployed middleware by splitting up large objects
    into smaller parts. There are two types of large object support: dynamic and static.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 OpenStack 对象存储集群都有一个上传对象大小的限制。通常，该限制为 5 GB，尽管每个集群可以有自己的限制。然而，这并不意味着你只能上传
    5 GB 或更小的对象到 OpenStack 对象存储。Swift 通过已经配置和部署的中间件提供大对象支持，通过将大对象拆分成较小的部分来实现。有两种类型的大对象支持：动态和静态。
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client* with the `cookbook4`
    password. We also granted this user with the `swiftoperator` privileges.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经登录到正确配置的 OpenStack 客户端，并且可以作为具有 `swiftoperator` 权限的用户访问 OpenStack 环境。我们将使用在*公共
    OpenStack 身份任务*配方中创建的 `developer` 用户，该用户的密码为 `cookbook4`，同时我们也授予该用户 `swiftoperator`
    权限。
- en: 'Since the OpenStack CLI does not provide all the functionality required through
    the individual OpenStack project client, we will need to use the Swift CLI for
    this recipe. Ensure that you have the Swift command-line client installed. If
    you do not, install it:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 OpenStack CLI 没有通过单独的 OpenStack 项目客户端提供所有必要的功能，我们需要使用 Swift CLI 来完成本配方。请确保你已安装
    Swift 命令行客户端。如果没有，请安装：
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How to do it..
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作..
- en: 'To upload large objects to OpenStack Object Storage container, follow these
    steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要将大型对象上传到 OpenStack 对象存储容器，请按照以下步骤操作：
- en: 'First, we can list available containers with the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们可以使用以下命令列出可用的容器：
- en: '[PRE27]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This will give a list of the containers we have:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这会给出我们拥有的容器列表：
- en: '[PRE28]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To upload a large file, we will specify the *segment size* of the objects in
    *bytes* with the `–S` flag:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要上传一个大型文件，我们将使用 `–S` 标志指定对象的*分段大小*，单位为*字节*：
- en: '[PRE29]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This will show the object being split into **segments** in the following output:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示对象被拆分为**分段**的输出：
- en: '[PRE30]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this example, the segment size is 25000 bytes, and our 128 K `nova.txt` file
    was split into 6 segments before being uploaded to the Swift cluster.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，分段大小为 25000 字节，我们的 128 K `nova.txt` 文件在上传到 Swift 集群之前被拆分成了 6 个分段。
- en: 'Verify that the file has been uploaded by listing the available objects in
    the container:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过列出容器中可用的对象，验证文件是否已上传：
- en: '[PRE31]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This shows our `nova.txt` file available:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这显示了我们可用的 `nova.txt` 文件：
- en: '[PRE32]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Even though the file was split into 6 parts for uploading, it appears as one
    file in Swift's `books` container. The segments are listed separately in a new
    container.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管文件被拆分成 6 个部分进行上传，但它在 Swift 的 `books` 容器中显示为一个文件。这些分段会在一个新的容器中单独列出。
- en: 'To view the available containers, issue this command:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看可用的容器，请执行以下命令：
- en: '[PRE33]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This gives us our containers with a new one automatically created:'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这会为我们提供容器，并自动创建一个新的容器：
- en: '[PRE34]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You will notice that a new `books_segments` container has been created automatically.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到一个新的 `books_segments` 容器已经自动创建。
- en: 'List objects in the `books_segments` container to view individual objects:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出 `books_segments` 容器中的对象，以查看单个对象：
- en: '[PRE35]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This shows our segmented file objects:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这显示了我们分段的文件对象：
- en: '[PRE36]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not modify or delete these objects individually.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请勿单独修改或删除这些对象。
- en: 'View the details of the uploaded object in the `books` container using the
    `stat` command:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `stat` 命令查看 `books` 容器中已上传对象的详细信息：
- en: '[PRE37]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This gives a number of details about our `nova.txt` file in the `books` container:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这提供了有关 `books` 容器中 `nova.txt` 文件的详细信息：
- en: '[PRE38]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Take a look at the `manifest` field in the information provided. The `manifest`
    field will include the `container` details that was created for individual segments,
    the original file size, and segment size.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看提供的信息中的 `manifest` 字段。`manifest` 字段将包括为各个段创建的 `container` 详细信息、原始文件大小以及段的大小。
- en: How it works
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: 'Since the OpenStack CLI does not provide large file upload support at the time
    of this recipe''s writing, we will use the Swift command-line client. In order
    to store large files in OpenStack Object Storage, objects have to be split up
    or segmented before uploading to a container. This segmentation is done for us
    by specifying the `-S` flag in the `swift upload` command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 OpenStack CLI 在编写本食谱时不支持大文件上传，我们将使用 Swift 命令行客户端。为了将大文件存储到 OpenStack 对象存储中，必须先将对象拆分或分段，然后再上传到容器中。这一分段过程通过在
    `swift upload` 命令中指定 `-S` 标志来完成：
- en: '[PRE39]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: When uploading large files, Swift automatically creates a new container and
    pseudo-folders for individual segments of the uploaded object. Individual segments
    may be listed the same way as regular objects; however, do not manipulate them
    directly.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传大文件时，Swift 会自动为上传对象的各个段创建一个新的容器和伪文件夹。各个段可以像常规对象一样列出；但是，请勿直接操作它们。
- en: Downloading objects
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载对象
- en: Once objects have been uploaded to a container, one may also want to download
    them. In this recipe, we will show you how to download objects to your local disk.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦对象上传到容器中，你可能还想下载它们。在本食谱中，我们将向你展示如何将对象下载到本地磁盘。
- en: Getting ready
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client* with the `cookbook4`
    password. We have also granted this user the `swiftoperator` privileges.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经登录到正确配置的 OpenStack 客户端，并且能够以具有 `swiftoperator` 权限的用户身份访问 OpenStack 环境。我们将使用在[第
    2 章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47 "第 2 章. OpenStack
    客户端") *OpenStack 客户端* 任务中创建的 `developer` 用户，并使用 `cookbook4` 密码。我们还为该用户授予了 `swiftoperator`
    权限。
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use the OpenStack command-line client.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[第 2 章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47 "第
    2 章. OpenStack 客户端") *OpenStack 客户端*，了解如何设置你的环境以使用 OpenStack 命令行客户端。
- en: How to do it…
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To download objects from a Swift cluster, carry out the following steps:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Swift 集群下载对象，请执行以下步骤：
- en: 'List the available objects in a container:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出容器中的可用对象：
- en: '[PRE40]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This will give a list of objects in our `books` container:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将列出我们在 `books` 容器中的对象：
- en: '![How to do it…](img/00164.jpeg)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00164.jpeg)'
- en: 'To download the desired file, for example, `intro.txt`, issue the following
    command:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要下载所需的文件，例如 `intro.txt`，请执行以下命令：
- en: '[PRE41]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no output to this command. The file will be saved to the current directory.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令没有输出。文件将保存到当前目录。
- en: 'We can also download a file and specify the destination file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以下载文件并指定目标文件：
- en: '[PRE42]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works…
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In order to download files from the OpenStack Object Storage, issue the following
    command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 OpenStack 对象存储中下载文件，请执行以下命令：
- en: '[PRE43]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `--file` flag is optional. If not specified, the object will be saved to
    the current directory.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`--file` 标志是可选的。如果未指定，将把对象保存到当前目录。'
- en: Note
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Large objects do not require special treatment when downloading; the same command
    will work on large and small objects.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 下载大对象时不需要特别处理；同样的命令可以用于大对象和小对象。
- en: Deleting objects
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除对象
- en: Deleting objects from OpenStack Object Storage is fairly trivial, whether for
    small or large files.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 从 OpenStack 对象存储删除对象相当简单，无论是小文件还是大文件。
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges.
    We will use the `developer` user created in the *Common OpenStack identity tasks*
    recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, with the `cookbook4`
    password. We have also granted this user the `swiftoperator` privileges.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经登录到正确配置的 OpenStack 客户端，并且能够以具有 `swiftoperator` 权限的用户身份访问 OpenStack 环境。我们将使用在[第
    2 章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47 "Chapter 2. The
    OpenStack Client")，*The OpenStack Client* 中的 *Common OpenStack identity tasks*
    配方中创建的 `developer` 用户，密码为 `cookbook4`。我们也已授予该用户 `swiftoperator` 权限。
- en: Refer to [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, for details of setting
    up your environment to use the OpenStack command-line client.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[第 2 章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47 "Chapter 2. The
    OpenStack Client")，*The OpenStack Client*，了解如何设置环境以使用 OpenStack 命令行客户端。
- en: How to do it…
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To delete objects from our Swift cluster, carry out the following steps:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Swift 集群中删除对象，请执行以下步骤：
- en: 'List available objects in a container:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出容器中可用的对象：
- en: '[PRE44]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This will give a list of objects in our `books` container:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将列出我们 `books` 容器中的对象：
- en: '![How to do it…](img/00164.jpeg)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00164.jpeg)'
- en: 'Delete the object from a container:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从容器中删除对象：
- en: '[PRE45]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There will be no output from this command.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令不会输出任何内容。
- en: 'List objects in the `books` container after deletion:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除对象后的 `books` 容器中的对象列表：
- en: '[PRE46]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The container listing will show that `intro.txt` is no longer present:'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 容器列表将显示 `intro.txt` 不再存在：
- en: '![How to do it…](img/00165.jpeg)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/00165.jpeg)'
- en: 'To delete *all objects* from a container and *then delete container*, issue
    the following command:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除 *所有对象* 并 *随后删除容器*，请执行以下命令：
- en: '[PRE47]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no output to this command.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令不会输出任何内容。
- en: How it works
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'In order to delete files from the OpenStack Object Storage cluster, specify
    the container and object that should be deleted with the following command:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 OpenStack 对象存储集群中删除文件，请使用以下命令指定应删除的容器和对象：
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Use the `-r` flag for deleting container and all its contents.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `-r` 标志来删除容器及其所有内容。
- en: Container ACLs
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器 ACL
- en: OpenStack Object Storage containers are usually owned by the user that created
    them. However, through Swift's **ACLs** (**Access Control Lists**), containers
    can be made accessible to different OpenStack users or made completely public.
    The owner of the container can set specific read and write rules. The read and
    write rules must be set separately and have to be enabled explicitly on each container.
    The owner of the container can make the container completely public or set rules
    based on the project, user, or rule set.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 对象存储容器通常由创建它们的用户拥有。然而，通过 Swift 的 **ACLs**（**访问控制列表**），可以使容器对不同的 OpenStack
    用户可访问，或者完全公开。容器的拥有者可以设置特定的读写规则。这些读写规则必须单独设置，并且必须在每个容器上明确启用。容器的拥有者可以将容器设置为完全公开，或根据项目、用户或规则集设置规则。
- en: Getting ready
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you are logged on to a correctly configured OpenStack client and
    can access the OpenStack environment as a user with the `swiftoperator` privileges
    and an `admin` user. We will use the `developer` user created in the *Common OpenStack
    identity tasks* recipe in [Chapter 2](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client"), *The OpenStack Client*, with the `cookbook4`
    password. We have also granted this user the `swiftoperator` privileges.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经登录到正确配置的 OpenStack 客户端，并且能够以具有 `swiftoperator` 权限和 `admin` 权限的用户身份访问 OpenStack
    环境。我们将使用在[第 2 章](part0024_split_000.html#MSDG1-189e69df43a248268db97cde1b1a8e47
    "Chapter 2. The OpenStack Client")，*The OpenStack Client* 中的 *Common OpenStack
    identity tasks* 配方中创建的 `developer` 用户，密码为 `cookbook4`。我们也已授予该用户 `swiftoperator`
    权限。
- en: 'Since the OpenStack CLI does not provide all the functionality available through
    the individual OpenStack project client, we will need to use Swift CLI for this
    recipe. Ensure that you have the Swift command-line client installed. If you do
    not, install it:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 OpenStack CLI 并未提供所有通过各个 OpenStack 项目客户端可用的功能，因此我们需要使用 Swift CLI 来执行此配方。确保你已经安装了
    Swift 命令行客户端。如果没有，请安装：
- en: '[PRE49]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How to do it…
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To view and modify ACLs on containers, follow the following steps:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看和修改容器上的 ACL，请按照以下步骤操作：
- en: 'First, view existing ACLs on a container, if any:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，查看容器上的现有 ACL（如果有的话）：
- en: '[PRE50]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This gives the information about our container called `books`:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将提供关于我们名为 `books` 的容器的信息：
- en: '[PRE51]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In our example, there are no read or write ACLs set yet. Let''s set a `read`
    ACL to make the `books` container *public*:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的示例中，还没有设置读或写的 ACL。让我们设置一个 `read` ACL 使 `books` 容器 *公开*：
- en: '[PRE52]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Note
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no output from this command.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令没有输出。
- en: 'To make the `books` container *writable* by everybody, issue the following:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使 `books` 容器对所有人 *可写*，请执行以下操作：
- en: '[PRE53]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Note
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no output from this command.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令没有输出。
- en: 'Now check the details on the books container again with the stat command:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次使用 stat 命令检查 `books` 容器的详细信息：
- en: '[PRE54]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We can see that the `Read ACL` and `Write ACL` fields have been populated:'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到 `Read ACL` 和 `Write ACL` 字段已经被填充：
- en: '[PRE55]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Since operating *world-writable* and *readable* containers are not very good
    security practice, we can remove the ACLs from the container. To remove the *read*
    ACL, issue this command:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于操作 *世界可写* 和 *可读* 容器并不是一个很好的安全做法，我们可以从容器中删除 ACL。要删除 *读* ACL，可以执行以下命令：
- en: '[PRE56]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'To remove the *write* ACL, use this command:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除 *写* ACL，请使用此命令：
- en: '[PRE57]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'If you need to share your container with another user in your OpenStack environment,
    you can set permissions based on the *project* and *user*. In our example, we
    will set the `books` container''s access to be readable by everyone in the `admin`
    project:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要与 OpenStack 环境中的其他用户共享容器，可以基于 *项目* 和 *用户* 设置权限。在我们的示例中，我们将设置 `books` 容器的访问权限，使
    `admin` 项目中的所有人都可以读取：
- en: '[PRE58]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The asterisk (`*`) after `:` indicates that all users in the `admin` project
    will have access to the `books` container.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`:` 后面的星号（`*`）表示 `admin` 项目中的所有用户都可以访问 `books` 容器。'
- en: 'Now check the details of the `books` container:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在检查 `books` 容器的详细信息：
- en: '[PRE59]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This will produce output like the following:'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生如下输出：
- en: '[PRE60]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Notice the `URL` of the container in the details. Anybody wishing to access
    this container will need to pass the `URL` field as a parameter.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意容器详细信息中的 `URL`。任何希望访问此容器的人都需要将 `URL` 字段作为参数传递。
- en: 'As an `admin` user, test the access to the `books` container:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为 `admin` 用户，测试访问 `books` 容器：
- en: '[PRE61]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'This will give objects from our shared container at the specified URL:'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将提供来自我们共享容器的对象，指定 URL 如下：
- en: '[PRE62]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In our example, the `admin` user is part of the `admin` project and therefore
    is able to access the `books` container via the `--os-storage-url` flag.
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，`admin` 用户属于 `admin` 项目，因此可以通过 `--os-storage-url` 标志访问 `books` 容器。
- en: How it works…
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Containers can be shared with other users by setting *read* and *write* **ACLs**
    on them. Currently, the ACLs functionality is not available in the OpenStack client,
    so we are using the Swift CLI in our examples.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过设置 *读* 和 *写* **ACL** 来与其他用户共享容器。目前，OpenStack 客户端不支持 ACL 功能，因此我们在示例中使用了 Swift
    CLI。
- en: There are two types of ACLs that can be set on a container, *read* and *write*,
    and they have to be set individually.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以设置两种类型的 ACL，*读* 和 *写*，并且它们需要单独设置。
- en: 'Set read ACL with the following command:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令设置读 ACL：
- en: '[PRE63]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Set write ACL as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式设置写 ACL：
- en: '[PRE64]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Here both the project and user can be substituted with a wild card (`*`).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，项目和用户都可以用通配符（`*`）来替代。
- en: 'To make a container completely public, use the following commands:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 要使容器完全公开，可以使用以下命令：
- en: '[PRE65]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: With the `.r:*` and `.rlistings` elements set, the `books` container is publicly
    accessible. The `.r*` element allows access to the objects in a container, and
    `.rlistings` allows listing of the container's content.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 `.r:*` 和 `.rlistings` 元素后，`books` 容器将公开可访问。`.r*` 元素允许访问容器中的对象，`.rlistings`
    允许列出容器的内容。
- en: Note
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: With write ACL set to `"*:*"`, the container can be updated by anybody, so use
    it with care.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 设置写 ACL 为 `"*:*"` 后，容器可以被任何人更新，因此请小心使用。
- en: The `-r` and `--read-acl` commands as well as `-w` and `--write-acl` are the
    short and long forms of the same flag. That is, `-r` and `--read-acl` are interchangeable
    as well as `-w` and `--write-acl`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`-r` 和 `--read-acl` 命令，以及 `-w` 和 `--write-acl` 是相同标志的短形式和长形式。也就是说，`-r` 和 `--read-acl`
    可以互换，`-w` 和 `--write-acl` 也可以互换。'
- en: 'Once access to containers is enabled for other users, find the URL of a container
    with the following command:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用了其他用户对容器的访问，可以使用以下命令查找容器的 URL：
- en: '[PRE66]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'To access another user''s container once access been enabled, use this command:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 启用访问后，要访问其他用户的容器，请使用此命令：
- en: '[PRE67]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Tip
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are always accessing the same storage URL, it can be set as the `OS_STORAGE_URL`
    environment variable.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你始终访问相同的存储 URL，可以将其设置为 `OS_STORAGE_URL` 环境变量。
