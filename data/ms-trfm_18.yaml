- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Looking Ahead – Certification, Emerging Trends, and Next Steps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展望未来 – 认证、 emerging trends 和下一步
- en: We are at a place in our journey where we have to stop and ask ourselves, *What’s
    next?* Before we do that, let’s think about where we’ve been.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经走到了一个阶段，必须停下来问自己，*接下来是什么？* 在此之前，让我们回顾一下我们走过的路。
- en: We’ve learned what Terraform is and how to use it. We’ve learned some basic
    concepts of cloud architecture that transcend the particular cloud platform you
    might be using at the moment. We’ve built three sophisticated architectures on
    each of the three major hyperscalers—AWS, Azure, and GCP—and finally, we’ve learned
    how to work with existing environments, either importing them into Terraform or
    managing them with Terraform as long-lived environments in production or otherwise.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了 Terraform 是什么以及如何使用它。我们学习了一些跨越你当前可能使用的特定云平台的云架构基本概念。我们在三大主要超大规模云平台——AWS、Azure
    和 GCP 上构建了三种复杂的架构，最后，我们还学习了如何与现有环境合作，无论是将它们导入 Terraform，还是将其作为长期生产环境或其他环境与 Terraform
    管理。
- en: That’s a lot! It’s been quite a journey, so where do we go from here? Well,
    the answer is in you. I hope that means you have learned something along this
    journey, and you’ll take that into your day-to-day work to build amazing systems
    that solve real-world problems and are better equipped to build and manage them
    with the power of Terraform.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这可真不简单！这一路走来可谓非凡，那么接下来该往哪里走呢？答案就在你自己身上。我希望这意味着你在这段旅程中学到了东西，并且你能将这些带入到日常工作中，构建出能够解决现实世界问题的惊人系统，并且借助
    Terraform 的力量，更好地构建和管理这些系统。
- en: In this chapter, before we close, I’d like to discuss some potential next steps,
    both for your personal growth and extended learning. You have invested a tremendous
    amount of time in reading this book and have begun your journey of mastering Terraform.
    You may want to consider certification as a way to validate your skills and knowledge
    and to demonstrate your expertise to potential employers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束之前，我想讨论一些可能的下一步，无论是个人成长还是扩展学习。你已经投入了大量的时间阅读这本书，并且开始了掌握 Terraform 的旅程。你可能想要考虑通过认证来验证你的技能和知识，并向潜在的雇主展示你的专业能力。
- en: Additionally, there may be other technologies that you may want to consider
    as you continue to deepen your mastery of Terraform. We’ll explore some of these
    options, including tools and platforms that complement Terraform and how they
    can enhance your **Infrastructure as Code** (**IaC**) capabilities. By the end
    of this chapter, you should have a clear roadmap for your continued learning and
    a solid foundation for your future endeavors in the world of cloud infrastructure
    management.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，随着你继续深化对 Terraform 的掌握，你可能还想考虑一些其他技术。我们将探讨一些这些选项，包括与 Terraform 相辅相成的工具和平台，以及它们如何增强你的
    **基础设施即代码** (**IaC**) 能力。到本章结束时，你应该已经有了一个清晰的学习路线图，并为你在云基础设施管理领域的未来努力打下了坚实的基础。
- en: 'The chapter covers the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Preparing for the exam
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备考试
- en: Terraform Cloud
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform Cloud
- en: What’s next?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Preparing for the exam
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备考试
- en: On your journey through this book to mastering Terraform, you’ve gained a wealth
    of knowledge and practical experience. But how do you showcase your expertise
    to the world? One of the most effective ways is through certification. In this
    section, we’ll delve into the intricacies of preparing for the Terraform certification
    exams. We’ll cover the key topics you need to master, the format of the exam,
    and strategies to optimize your study time and approach. By the end of this section,
    you’ll be well equipped with the tools and confidence needed to tackle the certification
    exam and take a significant step forward in mastering Terraform.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在你通读本书并掌握 Terraform 的过程中，你已经获得了丰富的知识和实践经验。那么，如何将你的专业能力展示给世界呢？最有效的方式之一就是通过认证。在本节中，我们将深入探讨如何为
    Terraform 认证考试做准备。我们将涵盖你需要掌握的关键主题，考试的形式，以及优化你的学习时间和方法的策略。本节结束时，你将具备足够的工具和信心，能够应对认证考试，并在掌握
    Terraform 的过程中迈出重要的一步。
- en: Scope and topics
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围和主题
- en: The **HashiCorp Terraform Associate Certification** is an entry-level certification
    that will test you on general concepts of IaC, Terraform’s competitive position
    against other tools, working with code using the **HashiCorp Configuration Language**
    (**HCL**), and using the core Terraform workflow as well as other workflows that
    are supported through various sub-commands within the **Command-Line** **Interface**
    (**CLI**).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**HashiCorp Terraform 助理认证**是一个入门级认证，它将测试你对IaC的一般概念、Terraform与其他工具的竞争地位、使用**HashiCorp
    配置语言**（**HCL**）编写代码的能力，以及使用核心Terraform工作流程和通过各种子命令在**命令行界面**（**CLI**）中支持的其他工作流程。'
- en: There is a new exam that is coming soon called **Terraform Authoring and Operations
    Professional**. This exam is designed for seasoned practitioners who have extensive
    experience in managing production systems, developing reusable modules, and operating
    within a mature enterprise IaC environment. It aims to validate the advanced skills
    and deep understanding required to efficiently author and manage Terraform configurations
    at scale. Candidates can expect to be tested on their ability to implement complex
    infrastructure architectures, optimize workflows, and ensure best practices in
    an enterprise environment. This certification is an excellent opportunity for
    those looking to demonstrate their expertise in leveraging Terraform’s full capabilities
    in a sophisticated and dynamic infrastructure landscape.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有一项新的考试即将推出，名为**Terraform 编写与操作专业认证**。这项考试是为那些在管理生产系统、开发可重用模块以及在成熟企业IaC环境中操作方面具有丰富经验的资深从业者设计的。它旨在验证那些高效编写和管理大规模Terraform配置所需的高级技能和深刻理解。考生可以预期会在实施复杂基础架构架构、优化工作流程以及确保企业环境中的最佳实践方面接受测试。此认证是那些希望展示在复杂且动态的基础架构环境中充分利用Terraform全部功能的专业知识的人的绝佳机会。
- en: This book is designed to help you go beyond many of the foundational concepts
    covered in the Associate exam and help you prepare for the Professional exam.
    As a result, our journey in this book has been taking a hyper-practical approach
    to building actual cloud architectures using Terraform and implementing collaborative
    flows with Terraform and an automation pipeline tool, which, for the entirety
    of this book, was GitHub Actions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助你超越助理认证考试中涵盖的许多基础概念，并帮助你为专业认证考试做准备。因此，本书的内容采用了高度实用的方式，实际构建了使用Terraform的云架构，并实现了与Terraform和自动化流水线工具（在本书中为GitHub
    Actions）协作的流程。
- en: 'As you can see in the following diagram, I map chapters within this book to
    actual topics covered within the Associate exam:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，我将本书中的章节映射到助理认证考试中实际涵盖的主题：
- en: '![Figure 18.1 – Map of Associate certification topics to chapters in this book](img/B21183_18_1.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图18.1 – 将助理认证主题与本书章节的映射](img/B21183_18_1.jpg)'
- en: Figure 18.1 – Map of Associate certification topics to chapters in this book
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.1 – 将助理认证主题与本书章节的映射
- en: We breezed through the foundational conceptual layers of IaC, Terraform’s architecture,
    and HCL in the first three chapters of this book. This was by design, as this
    book is intended for an intermediate to advanced audience and not a beginner’s
    guide.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前三章中，我们快速浏览了IaC的基础概念层、Terraform的架构和HCL。这是经过精心设计的，因为本书面向的是中级到高级的读者，而不是初学者指南。
- en: This allowed us to dedicate some time, in *Chapters 4* through *6*, to the conceptual
    layer that most Terraform practitioners actually spend their time in—the cloud
    architectures that they are designing and provisioning when we set the bases for
    the cloud computing paradigms we would be working with across all three clouds.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够在*第4章*到*第6章*中花时间关注大多数Terraform从业者实际操作的概念层——他们在设计和配置的云架构，这些架构是我们在所有三大云平台中设置的云计算范式基础。
- en: 'Then, we hit the ground running, getting our hands dirty and building three
    real-world solutions for each cloud. As you can see, we spent most of our time
    in the book working on implementing HCL code across all three clouds—AWS, Azure,
    and GCP—and across three cloud computing paradigms—virtual machines, containers,
    and serverless. In these nine solutions, we implemented Terraform modules and
    delved deep into configuration using three corresponding Terraform providers:
    `aws`, `azure`, and `GCP`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始实际动手，针对每个云平台构建三个真实世界的解决方案。正如你所看到的，我们在本书中大部分时间都花在了在所有三个云平台——AWS、Azure
    和 GCP——以及三种云计算模式——虚拟机、容器和无服务器——上实现 HCL 代码。在这九个解决方案中，我们实现了 Terraform 模块，并深入研究了使用三个相应
    Terraform 提供程序：`aws`、`azure` 和 `GCP` 的配置。
- en: In *Chapters 16* and *17*, we focused on the non-core workflows involving advanced
    topics in state management and configuration importation that are common and necessary
    when working with existing environments—whether or not they were originally provisioned
    with Terraform.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第16章*和*第17章*中，我们重点讨论了涉及状态管理和配置导入的非核心工作流，这些内容在处理现有环境时是常见且必要的——无论它们是否最初是使用 Terraform
    配置的。
- en: 'In the Professional exam, this is still significant coverage of all the key
    topics with one key exception:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在专业考试中，这仍然涵盖了所有关键主题，唯一的一个关键例外是：
- en: '![Figure 18.2 – Map of Professional certification topics to chapters in this
    book](img/B21183_18_2.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.2 – 本书中专业认证主题与章节的对应关系图](img/B21183_18_2.jpg)'
- en: Figure 18.2 – Map of Professional certification topics to chapters in this book
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.2 – 本书中专业认证主题与章节的对应关系图
- en: The notable exception is **Terraform Cloud**, which I chose to omit as a main
    focus of this book since I don’t think knowledge of it is required to master Terraform
    at this time. We will look at Terraform Cloud in the next section of this chapter,
    as I think it is an interesting topic area for further study if you want to leverage
    some of its capabilities to streamline your organization’s collaborative workflows.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 特别的例外是**Terraform Cloud**，我选择将其作为本书的重点内容排除，因为我认为目前掌握 Terraform 并不需要了解 Terraform
    Cloud。我们将在本章的下一部分讨论 Terraform Cloud，因为我认为这是一个有趣的主题，如果你想利用它的一些功能来简化组织的协作工作流，可以进一步研究。
- en: Preparation
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Go and check out the study guides for both the Associate and Professional exams.
    The study guides have helpful links to the official documentation, which should
    augment the contents of this book. Remember, this book was intended to be a practical
    guide for those who want to master Terraform to provision cloud architecture.
    That doesn’t necessarily mean memorizing every nook and cranny of the Terraform
    CLI. I specifically chose to focus on skills that will help you start developing
    real-world solutions no matter what cloud and cloud computing paradigm you’ll
    be working with.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 去看看关于初级和专业考试的学习指南。这些学习指南中包含了指向官方文档的有用链接，可以补充本书的内容。记住，这本书旨在成为那些希望掌握 Terraform
    以进行云架构配置的人的实用指南。这并不意味着需要记住 Terraform CLI 的每个细节。我特意选择专注于那些能够帮助你无论使用何种云和云计算模式都能开始开发真实世界解决方案的技能。
- en: The exam will likely have tricky edge cases or obscure commands that are seldom
    used, so be ready for that, but I wouldn’t dedicate a tremendous amount of time
    to it. Make yourself a quick cheat sheet of some of these obscure commands and
    how to use them. Employ flashcards to help you memorize them if you feel like
    you need to. If you have a solid understanding of Terraform’s architecture and
    are hands-on with it, you should do well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 考试可能会有一些棘手的边缘情况或鲜少使用的命令，所以要为此做好准备，但我不会建议花大量时间在这些内容上。你可以为这些不常用的命令做一个快速的备忘单，记录它们的使用方法。如果觉得有必要，可以使用闪卡帮助记忆它们。如果你对
    Terraform 的架构有扎实的理解并且有实际操作经验，应该可以应对得很好。
- en: My best advice is to study through hands-on experience. Take the projects in
    this book, and feel free to clone them from my GitHub repositories, but to maximize
    your own mastery, develop them from scratch in your own repository on GitHub.
    Recreate them, provision yourself and the environment, and then improve upon them.
    Think about how you would like to modularize components within them to be more
    reusable. Go ahead and implement those modules, and then refactor your environment
    to use your new modules. Treat your environment as if it were production and try
    to minimize the impact on your environment by making sure you avoid replacing
    resources in your existing environment while trying to refactor to use your new
    modules.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我最好的建议是通过动手实践来学习。拿本书中的项目，随时从我的GitHub仓库中克隆它们，但为了最大化你自己的掌握能力，在GitHub上自己的仓库中从头开始开发它们。重建这些项目，为你自己和环境配置好必要的资源，然后加以改进。考虑如何将其中的组件模块化，以便更具可重用性。去实施这些模块，然后重构你的环境以使用新模块。把你的环境当作生产环境来看待，通过确保避免替换现有环境中的资源来减少对环境的影响，同时尝试重构以使用你的新模块。
- en: I sat for the exam while I was at HashiConf in October 2023\. I didn’t study,
    I didn’t prepare, I didn’t even read the study guide. I passed with a score of
    84.21%. I was pretty happy about it. Am I telling you this to brag? No. Well,
    maybe a little, but seriously, my point is that the best way for you to prepare
    is by doing. How was I able to pass without studying at all? Because I’ve been
    hands-on with Terraform for several years and know it inside and out. Did I know
    every obscure command within the Terraform CLI? Absolutely not. Had I ever used
    Terraform Cloud? Not for one New York minute. You have to ask yourself, do you
    want to pass an exam, or do you want to upskill yourself and become a dangerous
    force in the cloud automation space with one of the most powerful automation tools
    in the world? I think the answer is clear. Focus on the primary objective with
    gazelle-like intensity and augment it with a bit of studying more obscurities,
    and you will do well.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我是在2023年10月的HashiConf大会期间参加的考试。我没有学习，没有准备，甚至没有读学习指南。我以84.21%的分数通过了考试。我对此感到非常高兴。我告诉你这些是为了炫耀吗？不是。好吧，可能有一点，但说真的，我的意思是，最好的准备方式是通过实践。怎么做到完全不学习就能通过？因为我已经使用Terraform好几年，深知其内外。我知道Terraform
    CLI中的每个晦涩命令吗？当然不是。我曾经使用过Terraform Cloud吗？一点也没有。你必须问问自己，你是想通过考试，还是想提升自己，成为云自动化领域中一个强大的力量，掌握世界上最强大的自动化工具之一？我认为答案很明显。专注于主要目标，以羚羊般的专注度，辅以研究一些晦涩的知识，你一定会做得很好。
- en: Now that you are energized, feeling empowered by all that you have learned from
    this book, and ready to take the Terraform Associate or upcoming Professional
    exam, let’s look forward to some interesting topics that every Terraformer (not
    just the Azure ones) should know about.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经充满了动力，感受到通过这本书学到的所有内容赋予你的力量，并准备参加Terraform Associate或即将到来的Professional考试，让我们一起期待一些每个Terraformer（不仅仅是Azure方面的）都应该了解的有趣话题。
- en: Terraform Cloud
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform Cloud
- en: In this section, we’ll explore Terraform Cloud, a powerful platform designed
    to enhance Terraform’s capabilities in team-based and enterprise environments.
    Terraform Cloud provides a centralized hub for managing and automating Terraform
    workflows, offering features such as version control integration, remote state
    management, and collaborative IaC development.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨Terraform Cloud，这是一个强大的平台，旨在增强Terraform在团队和企业环境中的功能。Terraform Cloud提供了一个集中式的中心，用于管理和自动化Terraform工作流程，提供如版本控制集成、远程状态管理和协作式IaC开发等功能。
- en: We’ll take a brief look at the core components of Terraform Cloud, including
    advanced features such as workspace management, private module registry, cost
    estimation, and policy enforcement.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要了解Terraform Cloud的核心组件，包括一些高级功能，如工作区管理、私有模块注册表、成本估算和策略执行。
- en: By understanding Terraform Cloud’s features and use cases, you’ll gain insights
    into how it can streamline your infrastructure management processes and foster
    collaboration among team members. It’s definitely something to consider if you
    are looking to scale up your organization’s IaC maturity quickly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解Terraform Cloud的功能和使用案例，你将能够洞察它如何简化你的基础设施管理流程，并促进团队成员之间的协作。如果你希望快速提升组织的IaC成熟度，它绝对是一个值得考虑的选择。
- en: Features
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能
- en: 'Terraform Cloud’s mission is about streamlining the process of managing environments
    with IaC. This will include features that handle day-to-day operation concerns
    of using Terraform, as well as more advanced capabilities related to empowering
    teams and scaling across larger organizations within the enterprise. The following
    is a diagram showing the grouping of these capabilities:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform Cloud 的使命是简化使用基础设施即代码（IaC）管理环境的过程。这将包括处理使用 Terraform 时日常操作问题的功能，以及与赋能团队和在大型企业中扩展相关的更高级功能。以下是展示这些功能分组的图表：
- en: '![Figure 18.3 – Terraform Cloud capabilities](img/B21183_18_3.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.3 – Terraform Cloud 功能](img/B21183_18_3.jpg)'
- en: Figure 18.3 – Terraform Cloud capabilities
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.3 – Terraform Cloud 功能
- en: 'These groupings are across four functional areas:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些分组涵盖了四个功能领域：
- en: Core workflow operations
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心工作流操作
- en: Organization and logistics
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织和物流
- en: Module management and publishing
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块管理与发布
- en: Day 2 operations support
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二天操作支持
- en: We’ll explore each of these functional areas individually to get a better idea
    of what Terraform Cloud brings to the table.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将单独探讨这些功能领域，以便更好地了解 Terraform Cloud 所提供的价值。
- en: Core workflow operations
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 核心工作流操作
- en: As we know, Terraform, itself is a simple command-line tool that processes HCL
    code and leverages a multitude of providers to generate a plan and then execute
    that plan by orchestrating resource creation across multiple providers. Terraform
    Cloud is a multi-tenant SaaS offering that encapsulates the functionalities of
    the command-line tool and hosts it as a managed service offering.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知道的，Terraform 本身是一个简单的命令行工具，处理 HCL 代码，并利用多个提供者生成计划，然后通过在多个提供者之间协调资源创建来执行该计划。Terraform
    Cloud 是一个多租户 SaaS 服务，它封装了命令行工具的功能，并将其作为托管服务提供。
- en: As a result, a significant portion of the value of Terraform Cloud comes from,
    well, Terraform itself—that is, the command-line tool that does all the work.
    However, Terraform Cloud provides many things beyond what is built into the command-line
    tool. As a hosted service, it sits atop our version control system and acts as
    a pipelining tool that executes the Terraform `plan` and `apply` commands. In
    this book, we worked with GitHub Actions to integrate the Terraform command-line
    tool into our workflows to run the core Terraform workflow, which includes `plan`
    and `apply`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Terraform Cloud 的一个重要价值来源于 Terraform 本身——也就是那个完成所有工作的命令行工具。然而，Terraform Cloud
    提供了许多超出命令行工具内建功能的内容。作为一个托管服务，它建立在我们的版本控制系统之上，充当一个流水线工具，执行 Terraform 的 `plan` 和
    `apply` 命令。在本书中，我们与 GitHub Actions 一起工作，将 Terraform 命令行工具集成到我们的工作流中，运行核心的 Terraform
    工作流，包括 `plan` 和 `apply`。
- en: Terraform Cloud’s capabilities in the *Core Workflow Operations* category focus
    on providing Terraform as a service, similar to what pipeline tools such as **GitHub
    Actions** do for general-purpose pipelines, but Terraform-specific. This means
    Terraform Cloud is essentially an automation-hosted platform that specializes
    in executing Terraform configurations. As a result, the service is tailored to
    Terraform’s specific needs, including things such as remote state management.
    However, it also includes essential features found in general-purpose pipelining
    tools, such as source control integration, cloud platform credential management,
    and secure variable storage. It also offers extension points for integration with
    external tools, allowing it to be integrated into broader automation orchestration.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform Cloud 在 *核心工作流操作* 类别中的功能侧重于提供 Terraform 作为一种服务，类似于 **GitHub Actions**
    等流水线工具为通用流水线所做的工作，但这是专门为 Terraform 定制的。这意味着 Terraform Cloud 本质上是一个自动化托管平台，专门执行
    Terraform 配置。因此，该服务针对 Terraform 的特定需求进行了优化，包括远程状态管理等功能。然而，它还包括了通用流水线工具中常见的一些基本功能，例如源代码管理集成、云平台凭据管理和安全的变量存储。它还提供了与外部工具集成的扩展点，使其能够融入更广泛的自动化编排中。
- en: Organizational and logistics
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组织和物流
- en: The organizational and logistics aspect of Terraform Cloud is designed to facilitate
    collaboration and management by teams within organizations large and small. It
    provides a structured environment to organize users, roles, and permissions across
    logical projects, leading to the creation and operation of Terraform workspaces—ensuring
    that team members have the appropriate access and permissions to perform their
    tasks effectively. Like other more general-purpose automation platforms such as
    **Azure DevOps** and **GitHub Enterprise**, maintaining order and control in these
    collaborative environments is baseline functionality.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform Cloud的组织和物流方面设计旨在促进组织内部团队的协作和管理，无论组织大小。它提供了一个结构化的环境，用于跨逻辑项目组织用户、角色和权限，从而创建和操作Terraform工作空间—确保团队成员拥有适当的访问权限和权限，有效地执行任务。像**Azure
    DevOps**和**GitHub Enterprise**等其他通用的自动化平台一样，在这些协作环境中维持秩序和控制是基础功能。
- en: Module management and publishing
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块管理和发布
- en: Terraform Cloud’s capabilities within module management and publishing enable
    teams and organizations to build, maintain, and share their own libraries of Terraform
    modules across their organization. As we’ve discussed, Terraform modules often
    encapsulate organizationally approved best practices and are often maintained
    by a central organization responsible for their implementation and built-in quality.
    Terraform Cloud supports this publishing process by integrating Terraform module
    testing and validation to ensure quality before new versions of Terraform modules
    are distributed across an organization. Additionally, these modules can be made
    available in no-code environments, providing a service catalog-like experience
    for end users. This empowers teams to standardize and scale their infrastructure
    management efforts but also makes the solutions that they build available to parts
    of the organization that are unfamiliar with IaC or Terraform in general.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform Cloud在模块管理和发布方面的功能使团队和组织能够在整个组织内构建、维护和共享自己的Terraform模块库。正如我们所讨论的，Terraform模块通常封装了组织认可的最佳实践，并通常由负责其实现和内建质量的中央组织进行维护。Terraform
    Cloud通过集成Terraform模块测试和验证来支持这一发布过程，以确保在Terraform模块的新版本在组织内分发之前达到质量标准。此外，这些模块可以在无代码环境中提供，向最终用户提供类似服务目录的体验。这使得团队能够标准化并扩展其基础设施管理工作，同时也让那些不熟悉基础设施即代码（IaC）或Terraform的组织部门能够使用他们构建的解决方案。
- en: Day 2 operations support
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2天操作支持
- en: The Day 2 operations support functionality in Terraform Cloud is geared toward
    managing and maintaining existing systems in production. It includes continuous
    validation to ensure environments remain up to date with the desired state described
    within the code and drift detection to identify changes made outside of Terraform
    code. There are also more advanced enterprise features, such as audit logging,
    to help larger organizations meet regulatory compliance standards and implement
    risk management policies to detect and prevent unplanned changes to the environment.
    Another key feature is the policy-as-code capabilities provided by **Sentinel**,
    which enables governance and security controls over the environments managed by
    Terraform Cloud.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform Cloud中的第2天操作支持功能旨在管理和维护生产环境中现有的系统。它包括持续验证，以确保环境与代码中描述的期望状态保持一致，并且具备漂移检测功能，以识别Terraform代码之外的更改。此外，还提供了更高级的企业功能，如审计日志记录，帮助大型组织满足合规性标准并实施风险管理策略，以检测和防止环境中未经计划的更改。另一个关键特性是**Sentinel**提供的基于代码的策略功能，它允许对Terraform
    Cloud管理的环境进行治理和安全控制。
- en: Pricing tiers
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定价层级
- en: The *Free* tier provides all IaC capabilities of Terraform as a hosted service
    out of the box and all of the core workflow operations capabilities—including
    remote state, secure variable storage, dynamic provider credentials, and source
    control integration. It’s a great way to get your feet wet exploring the platform
    and learning the new way of working with Terraform Cloud as the foundation as
    opposed to a general-purpose pipeline tool. As expected, it is pretty limited
    with a single concurrent job and limited access to more advanced enterprise features
    such as Policy-as-Code and run tasks that are designed to help you scale Terraform
    Cloud into a larger, more sophisticated IaC-powered organization. The Free tier
    allows you to provision up to 500 resources.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*Free* 版本提供了 Terraform 的所有基础设施即代码（IaC）功能作为开箱即用的托管服务，包含所有核心工作流操作功能——包括远程状态、安全变量存储、动态提供者凭证和源代码控制集成。这是一个很好的方式，让你初步了解平台，并学习如何以
    Terraform Cloud 为基础，而不是作为一个通用管道工具来工作。正如预期的那样，它的功能有限，只有一个并发作业，并且对更高级的企业功能（如政策即代码和运行任务）有限制，这些功能旨在帮助你将
    Terraform Cloud 扩展到一个更大、更复杂的基于 IaC 的组织。免费版允许你最多配置 500 个资源。'
- en: 'The *Standard* tier adds team management and increases the number of concurrent
    jobs from one to three, which probably makes sense in a team environment. The
    pricing model is per hour per resource, which means every resource you declare
    in your Terraform configuration will count toward your usage. The price per hour
    per resource, at the time of writing, was $0.00014\. To give you an idea of how
    much this would cost to operate, one of the environments that I manage is an environment
    with a small Kubernetes cluster and all the surrounding supporting infrastructure.
    I provisioned exactly 110 resources in this environment using Terraform:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*Standard* 版本增加了团队管理，并将并发作业的数量从一个提高到三个，这在团队环境中可能是合适的。定价模型是按每个资源每小时计费，这意味着你在
    Terraform 配置中声明的每个资源都会计入使用量。根据当前的定价，每个资源每小时的费用为 $0.00014。为了让你了解这将花费多少，我管理的一个环境是一个小型
    Kubernetes 集群及其所有相关的支持基础设施。我在这个环境中使用 Terraform 配置了正好 110 个资源：'
- en: '*110 resources x $0.00014 per resources per hour = $0.0154* *per hour*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*110 个资源 x 每个资源每小时 $0.00014 = 每小时 $0.0154*'
- en: '*$0.0154 per hour * 24 hours per day * 30 days per month = $11.088* *per month*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*每小时 $0.0154 * 每天 24 小时 * 每月 30 天 = 每月 $11.088*'
- en: So, for roughly 11 dollars per month, I can use Terraform Cloud to manage my
    environment. This is in addition to what I pay for my source control management
    system and the cloud hosting costs of the environment.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，每月大约 11 美元，我就可以使用 Terraform Cloud 来管理我的环境。这还不包括我为源代码管理系统支付的费用和环境的云托管费用。
- en: The *Plus* tier introduces Day 2 operations support scenarios such as audit
    logging, drift detection, continuous validation, ephemeral workspaces, ServiceNow
    integrations, and unlimited Policy-as-Code to help you better manage your environments
    and integrate with your day-to-day operations.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*Plus* 版本引入了第2天操作支持场景，例如审计日志、漂移检测、持续验证、临时工作区、ServiceNow 集成和无限制的政策即代码（Policy-as-Code），帮助你更好地管理环境并与日常操作集成。'
- en: The *Enterprise* tier is essentially the hosted offering that allows you to
    deploy Terraform Enterprise into your own data center, which can be important
    to large enterprises that are not interested in taking advantage of the lowered
    operating cost of utilizing HashiCorp’s multi-tenant offering, Terraform Cloud.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*Enterprise* 版本本质上是托管服务，允许你将 Terraform Enterprise 部署到自己的数据中心，这对于不愿意利用 HashiCorp
    的多租户产品 Terraform Cloud 降低运营成本的大型企业来说非常重要。'
- en: In this section, we looked at Terraform Cloud, including what it offers in terms
    of capabilities and recognizing that, unlike more general-purpose automation platforms,
    it is tailored specifically for IaC management and collaboration using Terraform.
    Compared to these more general-purpose pipeline tools, Terraform Cloud stands
    out by offering features specifically designed for Terraform workflows, such as
    remote state management, secure variable storage, and integrated module management.
    This focus on Terraform-specific functionality makes it an ideal choice for teams
    looking to take their IaC processes to the next level. Next, we’ll look at some
    other key trends to be aware of that are out of the scope of this book but should
    be on the radar of anyone looking to truly master Terraform.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们介绍了Terraform Cloud，包括它在功能方面提供的内容，并且认识到与更通用的自动化平台不同，它专门为使用Terraform的IaC管理和协作量身定制。与这些更通用的管道工具相比，Terraform
    Cloud通过提供一些专门为Terraform工作流设计的功能，如远程状态管理、安全变量存储和集成模块管理，使其脱颖而出。专注于Terraform特定功能使其成为那些希望将IaC流程提升到下一个层次的团队的理想选择。接下来，我们将探讨一些其他值得关注的关键趋势，虽然它们超出了本书的范围，但对于任何希望真正掌握Terraform的人来说，应该引起足够的关注。
- en: What’s next?
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: In this section, we’ll explore some emerging trends within the Terraform community
    that are essential for anyone working with Terraform to be aware of. While these
    topics are technically outside the scope of this book, including upcoming features
    that have not even been finalized and may evolve over time, understanding these
    emerging topics can provide valuable context into the future direction of Terraform
    and help you stay ahead of the curve in your journey to mastering Terraform.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将探索Terraform社区中的一些新兴趋势，这些趋势对于任何与Terraform打交道的人来说都至关重要。虽然这些话题技术上超出了本书的范围，包括尚未最终确定并可能随时间发展而变化的即将发布的功能，理解这些新兴话题能够为你提供有关Terraform未来发展方向的宝贵背景知识，并帮助你在掌握Terraform的过程中走在前沿。
- en: CDK
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CDK
- en: The Terraform **Cloud Development Kit** (**CDK**) is a method for developing
    Terraform configuration using imperative programming languages that you already
    know and use within your application development. Any language can be used, from
    Python to C# and from TypeScript to Java. Any Terraform provider and Terraform
    modules can be used as well. It’s essentially the same thing as working with HCL
    but using the programming language of your choice.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform **Cloud开发工具包**（**CDK**）是一种使用你已经知道并在应用程序开发中使用的命令式编程语言开发Terraform配置的方法。可以使用任何语言，从Python到C#，从TypeScript到Java。任何Terraform提供程序和Terraform模块也都可以使用。它本质上与使用HCL相同，但可以使用你选择的编程语言。
- en: '![Figure 18.4 – Use the programming language of your choice](img/B21183_18_4.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图18.4 – 使用你选择的编程语言](img/B21183_18_4.jpg)'
- en: Figure 18.4 – Use the programming language of your choice
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.4 – 使用你选择的编程语言
- en: Whatever language you choose will ultimately compile down into a Terraform-compatible
    JSON file that is then interpreted by Terraform in a similar way as HCL files
    are processed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪种语言，最终都会编译成一个Terraform兼容的JSON文件，然后Terraform会像处理HCL文件一样进行解释。
- en: This option is great for existing development teams that already work with a
    programming language of choice and don’t want to invest energy in learning the
    HCL. However, for non-developers, the HCL is definitely the way to go as it provides
    a simple, functional language that is easier to adopt and already has a massive
    ecosystem of practitioners that are using it, asking and answering questions about
    it, and sharing code on public GitHub repositories that can help you along on
    your way.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项非常适合已经使用编程语言的现有开发团队，他们不想花时间学习HCL。然而，对于非开发人员来说，HCL绝对是最佳选择，因为它提供了一种简单、功能强大的语言，更容易上手，并且已经有一个庞大的生态系统，很多从业者正在使用它，提出问题、回答问题并在公共GitHub仓库上共享代码，这些都可以帮助你在学习过程中前进。
- en: Terraform Stacks
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Terraform堆栈
- en: '**Terraform Stacks**, a highly anticipated feature on the horizon for Terraform,
    promises to revolutionize the way we design and manage complex architectures across
    multiple control planes. This innovative feature is expected to provide a seamless
    and integrated experience for users working with Terraform Cloud and the **Terraform
    Community Edition** (the command-line tool). By allowing for more sophisticated
    organization and modularization of IaC, Terraform Stacks aims to streamline the
    process of deploying and managing large-scale, multi-tiered environments. We’ll
    dig into what we know right now based on what was made public by HashiCorp at
    the time of writing and how it’s supposed to work when it’s eventually released.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**Terraform堆栈**，这是Terraform未来的一项备受期待的功能，承诺将彻底改变我们在多个控制平面上设计和管理复杂架构的方式。预计这一创新功能将为使用Terraform
    Cloud和**Terraform社区版**（命令行工具）的用户提供无缝集成的体验。通过允许更复杂的基础设施即代码（IaC）组织和模块化，Terraform堆栈旨在简化大规模、多层次环境的部署和管理过程。我们将深入了解目前HashiCorp公开的信息，并探讨它发布时预计的功能。'
- en: Current state
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当前状态
- en: 'In the current landscape of Terraform usage, a singular root module serves
    as the cornerstone of infrastructure deployment. This root module encompasses
    the provider configuration and engages with various Terraform resources, either
    directly or via module references. The versatility of these root modules is heightened
    by supplying them with distinct input parameters tailored to the desired environment
    for deployment. To further segregate the deployment of each root module instance,
    Terraform workspaces are employed, resulting in individual Terraform state files.
    These state files are then uniquely associated with specific environments, such
    as `DEV`, `TEST`, or `PROD`, effectively encapsulating the configuration and status
    of the deployed infrastructure within each environment:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的Terraform使用环境中，单一的根模块作为基础设施部署的基石。这个根模块包含提供者配置，并与各种Terraform资源进行交互，既可以直接交互，也可以通过模块引用进行交互。通过为根模块提供不同的输入参数，根模块的多功能性得以增强，从而根据所需的部署环境进行定制。为了进一步隔离每个根模块实例的部署，Terraform工作区被用来生成单独的Terraform状态文件。这些状态文件将与特定的环境（如`DEV`、`TEST`或`PROD`）唯一关联，有效地封装了每个环境中部署的基础设施的配置和状态：
- en: '![Figure 18.5 – Current state: Terraform workspaces and root modules](img/B21183_18_5.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图18.5 – 当前状态：Terraform工作区和根模块](img/B21183_18_5.jpg)'
- en: 'Figure 18.5 – Current state: Terraform workspaces and root modules'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.5 – 当前状态：Terraform工作区和根模块
- en: In the realm of provisioning complex environments with Terraform, it is often
    necessary to employ multiple root modules to delineate layers of architecture
    based on their dependencies, such as blast radius considerations or concrete control
    plane dependencies such as those between a cloud platform and a Kubernetes control
    plane. This is not the only scenario where you will run into control plane dependencies
    within the providers, but it is a common one as the use of managed Kubernetes
    offerings continues to grow in popularity. The dependency can arise anytime you
    are provisioning resources with two or more providers and one provider provisions
    a resource that is then used to configure another Terraform provider. Depending
    on the way this dependent provider initializes, you might see a conflict arise
    because providers that rely on their control plane to be provisioned in another
    provider’s resource can experience deadlocks in both `terraform apply` and `terraform
    destroy`. This is because Terraform cannot plan resources on the control plane,
    which doesn’t exist yet.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Terraform配置复杂环境的过程中，通常需要使用多个根模块来根据其依赖关系划分架构层次，例如考虑爆炸半径或具体的控制平面依赖关系，例如云平台与Kubernetes控制平面之间的依赖关系。这并不是唯一会遇到控制平面依赖的场景，但随着托管Kubernetes服务的日益普及，这已经成为一个常见的情况。依赖关系可能会在你使用两个或更多提供者配置资源时产生，其中一个提供者配置的资源将用于配置另一个Terraform提供者。根据该依赖提供者的初始化方式，你可能会遇到冲突，因为依赖于其他提供者资源中的控制平面来进行配置的提供者，可能会在`terraform
    apply`和`terraform destroy`时发生死锁。这是因为Terraform无法规划尚未存在的控制平面资源。
- en: Some other common scenarios that I have encountered are with the `grafana` provider
    for Terraform to provision resources for it. This mirrors the dependency created
    by `kubernetes` provider. It doesn’t matter what cloud platform you are working
    with. Many cloud platforms have similar managed service offerings that are provisioned
    through their corresponding provider, which produces an endpoint that can be automated
    by a Terraform provider designed for that control plane. This is even the case
    with something as fun as the `minecraft` provider—whether you are using EC2, Azure
    VMs, or GCE!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到的其他常见场景是使用 `grafana` 提供程序在 Terraform 中为其配置资源。这与 `kubernetes` 提供程序创建的依赖关系类似。无论你使用哪个云平台，都没关系。许多云平台都有类似的托管服务，能通过它们相应的提供程序进行配置，并产生一个可以通过为该控制平面设计的
    Terraform 提供程序自动化的端点。即使是像 `minecraft` 提供程序这样有趣的情况也是如此——无论你使用的是 EC2、Azure 虚拟机，还是
    GCE！
- en: 'While there are two main approaches to this, both necessitate executing `terraform
    apply` multiple times. The first approach involves provisioning each stage of
    our deployment independently and then linking the upstream dependency to the downstream
    stage using data sources, with values provided by input variables. This method
    allows different stages to be deployed relatively independently by various teams,
    but it introduces additional configuration management overhead, as each downstream
    dependency must explicitly reference the previously provisioned upstream stages.
    Consequently, this approach results in a highly serial deployment pattern, requiring
    each upstream dependency to be deployed and stabilized before progressing to the
    next downstream dependency:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有两种主要方法可以实现这一点，但两者都需要多次执行 `terraform apply`。第一种方法是独立配置每个阶段的部署，然后通过数据源将上游依赖关系链接到下游阶段，并由输入变量提供值。这种方法允许不同的团队相对独立地部署不同阶段，但也增加了配置管理的负担，因为每个下游依赖关系必须显式引用之前配置的上游阶段。因此，这种方法导致了高度串行的部署模式，要求每个上游依赖关系在进行下一个下游依赖关系之前必须先部署并稳定：
- en: '![Figure 18.6 – Current state: independent deployments with data source dependencies](img/B21183_18_6.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.6 – 当前状态：独立部署与数据源依赖](img/B21183_18_6.jpg)'
- en: 'Figure 18.6 – Current state: independent deployments with data source dependencies'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.6 – 当前状态：独立部署与数据源依赖
- en: 'An alternative approach to provisioning complex environments with Terraform
    diverges from independent deployments and instead adopts a monolithic pipeline
    that sequentially executes `terraform apply`. In this model, the dependencies
    are seamlessly integrated by piping the Terraform outputs from the upstream dependency
    directly into the inputs of the downstream dependency. While this method streamlines
    automation, it also results in a tighter coupling of the environments. Irrespective
    of the approach—whether it involves independent deployments or a monolithic pipeline—there
    is an inherent necessity to implement a substantial amount of *glue* to stitch
    together multiple `terraform apply` steps. This entails writing Bash scripts or
    similar automation to act as the connective tissue, ensuring the correct values
    are passed from one pipeline job to the next, thereby maintaining the integrity
    of the deployment process across various stages:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Terraform 配置复杂环境的另一种方法偏离了独立部署，而是采用了一个单体流水线，顺序执行 `terraform apply`。在此模型中，依赖关系通过直接将上游依赖关系的
    Terraform 输出传递到下游依赖关系的输入，从而无缝集成。尽管这种方法简化了自动化，但也导致了环境的紧密耦合。无论是哪种方法——无论是独立部署还是单体流水线——都需要实现大量的
    *粘合* 以连接多个 `terraform apply` 步骤。这意味着需要编写 Bash 脚本或类似的自动化工具，作为连接的“粘合剂”，确保正确的值从一个流水线作业传递到下一个作业，从而在不同阶段之间保持部署过程的完整性。
- en: "![Figure 18.7 – Current state: integrated deploymen\uFEFFt with output-based\
    \ dependencies](img/Image96503.jpg)"
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.7 – 当前状态：集成部署与基于输出的依赖](img/Image96503.jpg)'
- en: 'Figure 18.7 – Current state: integrated deployment with output-based dependencies'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.7 – 当前状态：集成部署与基于输出的依赖
- en: Stacks
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 堆栈
- en: 'Defined in a `.tfstack` file, Stacks allow you to declare one or more `component`
    blocks that essentially define what is currently a root module. These components
    represent discrete and deterministic provisioning stages within a deployment:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `.tfstack` 文件中定义，堆栈允许你声明一个或多个 `component` 块，这些块本质上定义了当前的根模块。这些组件代表了部署中的离散且确定的配置阶段：
- en: '![Figure 18.8 – Future state: Terraform Stacks](img/B21183_18_8.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.8 – 未来状态：Terraform Stacks](img/B21183_18_8.jpg)'
- en: 'Figure 18.8 – Future state: Terraform Stacks'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.8 – 未来状态：Terraform Stacks
- en: 'In the preceding diagram, we see three components that make up our stack:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，我们看到了构成我们堆栈的三个组件：
- en: Network infrastructure
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络基础设施
- en: Compute infrastructure
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算基础设施
- en: Kubernetes deployments
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 部署
- en: 'This would be defined in a `.tfstack` file in this manner:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `.tfstack` 文件中以如下方式定义：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The compute infrastructure would be defined in the same file but, this time,
    referencing outputs from the network component that it draws a dependency on.
    This informs Terraform to provision the `network` component first and resolve
    that stage of the deployment first before attempting to deploy the `compute` infrastructure
    component next:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 计算基础设施将在同一文件中定义，但这次将引用它依赖的网络组件的输出。这告知 Terraform 首先配置 `network` 组件，并首先解决该阶段的部署，然后再尝试部署
    `compute` 基础设施组件：
- en: '[PRE1]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After the `compute` component is provisioned, we will have a Kubernetes cluster
    that is ready to deploy our applications and services to. Therefore, we declare
    the final component of our stack, the application component:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `compute` 组件部署完毕后，我们将拥有一个准备好部署我们的应用和服务的 Kubernetes 集群。因此，我们声明堆栈的最后一个组件，即应用组件：
- en: '[PRE2]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This allows us to initialize the `kubernetes` and `helm` providers only after
    the necessary steps have been taken to provision the Kubernetes cluster, which
    is absolutely required before we can even begin to execute a plan.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够在必要的步骤完成以配置 Kubernetes 集群之后再初始化 `kubernetes` 和 `helm` 提供者，而 Kubernetes
    集群在我们开始执行计划之前是绝对必要的。
- en: Deployments
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署
- en: Defined in a `.tfdeploy` file, deployments allow you to declare one or more
    `deployment` blocks that essentially define a Terraform workspace that manifests
    itself once provisioned into an individual Terraform state file that represents
    a provisioned environment. The introduction of deployments allows us to declaratively
    establish different environments that we provision in our configuration rather
    than implicitly through the organization of our Terraform workspaces and the context
    in which we execute Terraform core workflow operations such as `plan` and `apply`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `.tfdeploy` 文件中定义的部署允许你声明一个或多个 `deployment` 块，这些块本质上定义了一个 Terraform 工作区，一旦部署完成，它就会表现为一个独立的
    Terraform 状态文件，代表一个已配置的环境。引入部署使我们能够在配置中声明性地建立不同的环境，而不是通过组织 Terraform 工作区和执行 Terraform
    核心工作流操作（如 `plan` 和 `apply`）的上下文隐式实现。
- en: 'Deployments act as the central place where provider configuration is established.
    This includes linking the preferred method of authentication with each provider.
    This is done using a new block called `identity_token`, which would be defined
    in this manner for AWS:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 部署充当了提供者配置的核心位置。这包括将每个提供者的首选身份验证方法与之关联。这是通过一个名为 `identity_token` 的新块完成的，该块会像这样为
    AWS 定义：
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This would be defined in a `.tfdeploy` file in this manner:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `.tfdeploy` 文件中以如下方式定义：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, the `deployment` block allows us to establish multiple instances
    of our Stacks and configure them with their own input variables and provider context,
    including relevant authentication and authorization context.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`deployment` 块允许我们建立多个 Stacks 实例，并使用它们各自的输入变量和提供者上下文进行配置，包括相关的身份验证和授权上下文。
- en: Terraform Stacks is an exciting new capability in preview on Terraform Cloud
    and is planned to be released for both Terraform Cloud and Terraform Community
    Edition. As you can see, with this approach, we’ll be able to eliminate a tremendous
    amount of *plumbing* that we currently put into our pipelines (i.e., **GitHub
    Actions**, **Azure DevOps**, **Jenkins**, etc.) and replace it with Terraform
    configuration that we can manage with the **Gitflow** standards we learned about
    in [*Chapter 6*](B21183_06.xhtml#_idTextAnchor330). If you plan on managing complex
    solutions with Terraform, this is a feature to watch for in future releases!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform Stacks 是 Terraform Cloud 中一种令人兴奋的新功能，正在预览阶段，计划发布至 Terraform Cloud
    和 Terraform Community Edition。正如你所见，通过这种方法，我们将能够消除目前在管道中投入的大量 *复杂操作*（即 **GitHub
    Actions**，**Azure DevOps**，**Jenkins** 等），并将其替换为可以通过我们在 [*第6章*](B21183_06.xhtml#_idTextAnchor330)
    中学到的 **Gitflow** 标准来管理的 Terraform 配置。如果你计划使用 Terraform 管理复杂解决方案，这是一个值得关注的功能，未来的版本中会有！
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this final chapter of *Mastering Terraform*, we’ve explored the next steps
    for those of you looking to deepen your mastery of Terraform and stay abreast
    of emerging trends in the community. We discussed the importance of Terraform
    certification, highlighting the Associate and Professional level exams.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在《*掌握 Terraform*》的最后一章中，我们探讨了那些希望加深对 Terraform 掌握并跟上社区新兴趋势的读者的下一步发展。我们讨论了 Terraform
    认证的重要性，重点介绍了助理级和专业级考试。
- en: We also delved into Terraform Cloud, which can enhance automation and collaboration
    in your IaC process, building upon the workflows and concepts we’ve covered throughout
    this book.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还深入探讨了 Terraform Cloud，它可以增强 IaC 过程中的自动化和协作，建立在我们在本书中覆盖的工作流和概念之上。
- en: The Terraform community is vibrant and continuously evolving, with new trends
    and alternative pathways emerging regularly. We explored some of the latest developments,
    including the Terraform CDK, which allows you to use Terraform with familiar programming
    languages, and finally, we looked at some exciting upcoming features in Terraform,
    such as Terraform Stacks, which promises to revolutionize the way we manage environments
    through IaC by providing more flexibility and modularity in defining and deploying
    sophisticated and layered cloud architectures.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 社区充满活力，并不断发展，新的趋势和替代路径定期涌现。我们探讨了一些最新的进展，包括 Terraform CDK，它允许你使用熟悉的编程语言来使用
    Terraform，最后，我们还展望了一些 Terraform 的令人兴奋的即将推出的功能，例如 Terraform Stacks，它承诺通过提供更多的灵活性和模块化，革新我们通过
    IaC 管理环境的方式，从而更好地定义和部署复杂的分层云架构。
- en: Closing statement
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: We have traveled long, and we have traveled far. We have explored Terraform,
    its architecture, its capabilities, and its form and function. Beyond just learning
    Terraform, to truly become masters of Terraform, we need to ground ourselves in
    the architectures and work patterns expected of us as IaC practitioners. That
    means we need a deep understanding of cloud architectures to effectively use Terraform
    to its fullest potential. This includes the various flora and fauna we will find
    in the wild—from virtual machines to containers to serverless—and all the surrounding
    ancillary resources that support those architectures. Once we have this core conceptual
    knowledge, we’ll be able to better navigate the multi-cloud world that we live
    in today and truly transcend our current cloud provider of choice to be ready
    for the future—whatever may come.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们走得很远，也走得很长。我们探索了 Terraform，它的架构，它的能力，以及它的形式和功能。除了学习 Terraform，真正成为 Terraform
    的大师，我们需要将自己扎根于作为 IaC 从业者所期望的架构和工作模式中。这意味着我们需要深入了解云架构，以便充分发挥 Terraform 的潜力。这包括我们在实际环境中会遇到的各种事物——从虚拟机到容器，再到无服务器架构——以及所有支持这些架构的辅助资源。一旦我们掌握了这些核心概念知识，我们将能够更好地在当今的多云世界中航行，真正超越当前所选的云服务商，做好迎接未来的准备——无论未来是什么。
- en: Thank you for coming on this journey with me. I hope you enjoyed my very focused
    and practical approach to mastering Terraform. I think the best way to learn is
    by doing, so I encourage you to go to GitHub, clone any or all of the solutions
    described in this book, and get to work on finishing your journey of mastering
    Terraform!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你与我一同踏上这段旅程。我希望你喜欢我这种非常专注和实用的 Terraform 掌握方法。我认为最好的学习方式就是通过实践，所以我鼓励你前往 GitHub，克隆本书中描述的任何或所有解决方案，开始你的
    Terraform 掌握之旅！
