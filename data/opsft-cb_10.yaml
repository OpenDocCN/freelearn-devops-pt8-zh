- en: Chapter 10. Continuous Integration for OpenShift Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章：OpenShift 应用程序的持续集成
- en: 'This chapter will help you to add continuous integration to your OpenShift
    applications using the Jenkins cartridge. The specific recipes of this chapter
    are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您使用 Jenkins 插件为您的 OpenShift 应用程序添加持续集成。具体内容如下：
- en: Adding Jenkins CI to your application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Jenkins CI 添加到您的应用程序
- en: Increasing the slave idle timeout
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加从属机空闲超时
- en: Installing Jenkins plugins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Jenkins 插件
- en: Using Jenkins to build projects hosted on GitHub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Jenkins 构建托管在 GitHub 上的项目
- en: Creating a Jenkins workflow for your OpenShift applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的 OpenShift 应用程序创建 Jenkins 工作流
- en: Upgrading Jenkins to the latest version
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级 Jenkins 到最新版本
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, you will learn how to add **Continuous Integration** (**CI**)
    support to your OpenShift applications. CI is an **Extreme Programming** (**XP**)
    practice in which a tool monitors your version control system, such as Git or
    SVN, for code changes. Whenever it detects a change, it builds the project and
    runs its test cases. If the build fails for some reason, the tool will notify
    the development team about the failure via e-mail or other communication channels
    so that they can fix the build failure immediately. CI tools can do much more
    beyond building and testing the application. They can also keep track of the code
    quality over a period of time, run functional tests, perform automatic deployment,
    apply database migrations, and perform a lot of other tasks. This helps us to
    discover defects early in the software development cycle, improves code quality,
    and automates deployment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何为您的 OpenShift 应用程序添加**持续集成**（**CI**）支持。CI 是**极限编程**（**XP**）的一项实践，它通过工具监控您的版本控制系统（如
    Git 或 SVN）中的代码更改。每当检测到更改时，它会构建项目并运行测试用例。如果构建由于某种原因失败，工具会通过电子邮件或其他通讯渠道通知开发团队故障情况，以便他们能够立即修复构建失败。CI
    工具不仅仅用于构建和测试应用程序。它们还可以跟踪代码质量、运行功能测试、执行自动部署、应用数据库迁移以及执行其他许多任务。这有助于我们在软件开发周期的早期发现缺陷，提高代码质量，并自动化部署。
- en: OpenShift supports Jenkins as its CI tool of choice. Jenkins ([http://jenkins-ci.org/](http://jenkins-ci.org/))
    is the most dominant and popular CI server in the market today. It is an open
    source project written in the Java programming language. Jenkins is feature rich
    and extensible through plugins. There are more than 600 Jenkins plugins made by
    an active community at your disposal, which can cover everything from version
    control system, build tools, code quality metrics, build notifiers, and much more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 将 Jenkins 作为其首选的 CI 工具。Jenkins ([http://jenkins-ci.org/](http://jenkins-ci.org/))
    是目前市场上最主流、最受欢迎的 CI 服务器。它是一个用 Java 编程语言编写的开源项目。Jenkins 功能丰富，并通过插件进行扩展。您可以使用来自活跃社区的超过
    600 个 Jenkins 插件，这些插件能够涵盖版本控制系统、构建工具、代码质量度量、构建通知器等几乎所有功能。
- en: The *Adding Jenkins CI to your application* recipe will help you to add Jenkins
    to your existing OpenShift application. We will use a Java application to showcase
    OpenShift Jenkins integration. This chapter discusses Jenkins in the context of
    Java applications. Nevertheless, even if you are using any other web cartridge
    supported by OpenShift, this chapter will give you a good understanding on how
    to add the OpenShift Jenkins CI support to your application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*将 Jenkins CI 添加到您的应用程序* 这一方法将帮助您将 Jenkins 集成到现有的 OpenShift 应用程序中。我们将使用 Java
    应用程序展示 OpenShift 和 Jenkins 的集成。本章主要讨论 Jenkins 与 Java 应用程序的结合。然而，即使您使用的是 OpenShift
    支持的其他 Web 插件，本章也能帮助您充分理解如何为您的应用程序添加 OpenShift Jenkins CI 支持。'
- en: OpenShift uses the Jenkins master/slave topology ([https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds](https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds))
    to distribute build jobs among different slaves. This ensures you get a scalable
    Jenkins environment for your OpenShift applications. Also, the Jenkins master
    will create different types of slaves to build different OpenShift application
    types. The type of slave depends on the application type. For example, to build
    a JBoss EAP application, the Jenkins master will create a slave that has a JBoss
    EAP cartridge installed. By default, a slave will die after 15 minutes of inactivity.
    The *Increasing the slave idle timeout* recipe will cover how you can increase
    the idle timeout for slaves.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 使用 Jenkins 主/从拓扑结构（[https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds](https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds)）来分配构建任务给不同的从节点。这确保你为
    OpenShift 应用程序提供一个可扩展的 Jenkins 环境。此外，Jenkins 主节点将创建不同类型的从节点来构建不同类型的 OpenShift
    应用程序。从节点的类型取决于应用程序的类型。例如，为了构建 JBoss EAP 应用程序，Jenkins 主节点将创建一个安装了 JBoss EAP 插件的从节点。默认情况下，从节点在
    15 分钟无操作后会被销毁。*增加从节点空闲超时时间*的配方将讲解如何增加从节点的空闲超时时间。
- en: Plugins make Jenkins extensible and allow you to extend it to meet your needs.
    In the *Installing Jenkins plugins* recipe, you will learn how to install Jenkins
    plugins. You can view the full list of Jenkins plugins at [https://wiki.jenkins-ci.org/display/JENKINS/Plugins](https://wiki.jenkins-ci.org/display/JENKINS/Plugins).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 插件使 Jenkins 可扩展，允许你扩展 Jenkins 以满足你的需求。在*安装 Jenkins 插件*的配方中，你将学习如何安装 Jenkins
    插件。你可以在 [https://wiki.jenkins-ci.org/display/JENKINS/Plugins](https://wiki.jenkins-ci.org/display/JENKINS/Plugins)
    查看 Jenkins 插件的完整列表。
- en: You can use Jenkins not only to build applications hosted on OpenShift but also
    to build projects hosted elsewhere. The *Using Jenkins to build projects hosted
    on GitHub* recipe will cover how you can build projects hosted on GitHub.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅可以使用 Jenkins 构建托管在 OpenShift 上的应用程序，还可以构建托管在其他地方的项目。*使用 Jenkins 构建托管在 GitHub
    上的项目* 的配方将涵盖如何构建托管在 GitHub 上的项目。
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe will
    show how you can customize the default build created by OpenShift for your needs.
    In this recipe, you will create a Jenkins workflow, including three Jenkins jobs.
    The first Jenkins job will poll a Git repository for changes, the second job will
    run code coverage over the application source code, and the third will deploy
    the application to OpenShift.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*为你的 OpenShift 应用程序创建 Jenkins 工作流* 的配方将展示如何根据你的需求自定义 OpenShift 默认创建的构建。在这个配方中，你将创建一个
    Jenkins 工作流，包括三个 Jenkins 任务。第一个 Jenkins 任务将轮询 Git 仓库以查找更改，第二个任务将对应用程序源代码进行代码覆盖率检查，第三个任务将把应用程序部署到
    OpenShift。'
- en: The Jenkins version supported by OpenShift is not the latest version. In the
    *Upgrading Jenkins to the latest version* recipe, you will upgrade Jenkins to
    the latest version. The advantage of using the latest version is that some of
    the plugins do not work with the Jenkins version supported by OpenShift.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 支持的 Jenkins 版本并不是最新版本。在*将 Jenkins 升级到最新版本*的配方中，你将把 Jenkins 升级到最新版本。使用最新版本的优点在于，某些插件与
    OpenShift 支持的 Jenkins 版本不兼容。
- en: Jenkins is not the only CI server you can use to build and deploy OpenShift
    applications. You can also use a hosted CI server, such as Travis CI, to build
    and deploy an OpenShift application. The OpenShift Travis CI integration is not
    covered in this chapter, but you can refer to my blog for more information on
    this topic at [https://www.openshift.com/blogs/how-to-build-and-deploy-openshift-java-projects-using-travis-ci](https://www.openshift.com/blogs/how-to-build-and-deploy-openshift-java-projects-using-travis-ci).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 并不是你唯一可以用来构建和部署 OpenShift 应用程序的 CI 服务器。你也可以使用托管的 CI 服务器，如 Travis CI，来构建和部署
    OpenShift 应用程序。OpenShift 和 Travis CI 的集成在本章中没有介绍，但你可以参考我的博客，了解更多相关信息，链接：[https://www.openshift.com/blogs/how-to-build-and-deploy-openshift-java-projects-using-travis-ci](https://www.openshift.com/blogs/how-to-build-and-deploy-openshift-java-projects-using-travis-ci)。
- en: Adding Jenkins CI to your application
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Jenkins CI 添加到你的应用程序中
- en: Adding Jenkins to your application is a two-step process. You have to first
    create the Jenkins server application and then add the Jenkins client cartridge
    to your application. In this recipe, you will learn how to add Jenkins CI to an
    existing OpenShift application. After adding Jenkins to your application, each
    Git push to your OpenShift application Git repository will initiate a Jenkins
    job that will build the project and then deploy it to OpenShift.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Jenkins 添加到你的应用程序是一个两步过程。你需要先创建 Jenkins 服务器应用程序，然后将 Jenkins 客户端插件添加到你的应用程序中。在本教程中，你将学习如何将
    Jenkins CI 添加到现有的 OpenShift 应用程序中。添加 Jenkins 到应用程序后，每次向 OpenShift 应用程序的 Git 仓库推送代码时，都会启动一个
    Jenkins 作业，构建该项目并将其部署到 OpenShift。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete this recipe, you will need three available gears. One gear will
    be used by the application, and Jenkins will consume the remaining two gears.
    This chapter will use the application created in [Chapter 7](part0089_split_000.html#page
    "Chapter 7. OpenShift for Java Developers"), *OpenShift for Java Developers*.
    If you don''t have this application running, then recreate the application using
    the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，你将需要三个可用的 Gear。一个 Gear 将由应用程序使用，Jenkins 将使用其余的两个 Gear。本章将使用 [第 7 章](part0089_split_000.html#page
    "第 7 章. OpenShift for Java 开发者") 中创建的应用程序，*OpenShift for Java 开发者*。如果你没有运行该应用程序，可以使用以下命令重新创建应用程序：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to add Jenkins to your application:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将 Jenkins 添加到你的应用程序中：
- en: 'Before you can add the Jenkins cartridge to your application, you have to create
    the Jenkins server application:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你将 Jenkins 插件添加到应用程序之前，必须先创建 Jenkins 服务器应用程序：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the preceding command is executed, the Jenkins server will be available
    at `http://jenkins-{domain-name}.rhcloud.com`. Please replace `{domain-name}`
    with your OpenShift account domain name.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行上述命令后，Jenkins 服务器将在 `http://jenkins-{domain-name}.rhcloud.com` 上可用。请将 `{domain-name}`
    替换为你的 OpenShift 账户域名。
- en: 'Make note of the username and password that the OpenShift `rhc` command-line
    client presented to you in the application creation logs. These are used to log
    in to the Jenkins web console. This is shown in the following command-line output:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记下 OpenShift `rhc` 命令行客户端在应用程序创建日志中向你展示的用户名和密码。这些信息用于登录 Jenkins Web 控制台。以下是命令行输出的示例：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Log in to Jenkins at `https://jenkins-{domain-name}.rhcloud.com/me/configure`
    using the credentials you got in step 1\. I recommend that you change the Jenkins
    password to something that you can easily remember. To change the password, enter
    your new password in the **Password** section, and click on the **Save** button:![How
    to do it…](img/00110.jpeg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用第 1 步中获得的凭据登录 Jenkins：`https://jenkins-{domain-name}.rhcloud.com/me/configure`。我建议你将
    Jenkins 密码更改为容易记住的内容。要更改密码，请在 **密码** 部分输入新密码，并点击 **保存** 按钮：![如何操作…](img/00110.jpeg)
- en: After saving your new password, log out and log in again using the new password.
    You will be presented with the Jenkins dashboard as shown in the following screenshot:![How
    to do it…](img/00111.jpeg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存新密码后，登出并使用新密码重新登录。你将看到如下所示的 Jenkins 仪表板截图：![如何操作…](img/00111.jpeg)
- en: 'Now that you have created the Jenkins server application, you can add the Jenkins
    cartridge to the `jobstore` application. To add the cartridge, run the following
    command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经创建了 Jenkins 服务器应用程序，可以将 Jenkins 插件添加到 `jobstore` 应用程序中。要添加插件，请运行以下命令：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Go to the Jenkins dashboard at `https://jenkins-{domain-name}.rhcloud.com/`,
    and you will see a new job configured for the `jobstore` application, as shown
    in the following screenshot:![How to do it…](img/00112.jpeg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Jenkins 仪表板 `https://jenkins-{domain-name}.rhcloud.com/`，你将看到为 `jobstore`
    应用程序配置的新作业，如下图所示：![如何操作…](img/00112.jpeg)
- en: Click on the **jobstore-build** link (`https://jenkins-{domain-name}.rhcloud.com/job/jobstore-build/`)
    to view the Jenkins job details.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **jobstore-build** 链接（`https://jenkins-{domain-name}.rhcloud.com/job/jobstore-build/`）查看
    Jenkins 作业详情。
- en: 'To initiate a new build, you can either click on the **Build Now** link on
    the left-hand side or make a change to the project source, commit it, and then
    push the change to the application Git repository. Let''s make a small change
    to our application source code. Change the title in the `src/main/webapp/index.html`
    location from `<title>JobStore</title>` to `<title>JobStore with Jenkins</title>`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动一个新的构建，你可以点击左侧的**立即构建**链接，或者对项目源代码进行更改，提交并将更改推送到应用程序的 Git 仓库。让我们对应用程序源代码做一个小更改。将
    `src/main/webapp/index.html` 文件中的标题从 `<title>JobStore</title>` 更改为 `<title>带有
    Jenkins 的 JobStore</title>`：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `git push` logs will show that Jenkins is building the project as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`git push` 日志会显示 Jenkins 正在构建项目，日志内容如下：'
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can view the build logs in the Jenkins web console by clicking on the **Console
    Output** option as shown in the following screenshot:![How to do it…](img/00113.jpeg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击**控制台输出**选项，在 Jenkins 网络控制台查看构建日志，如下图所示：![如何操作…](img/00113.jpeg)
- en: After the job is completed, you will see the build status under **Build History**.
    The successful builds are shown in blue and failed builds are shown in red.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成工作后，你可以在**构建历史**下查看构建状态。成功的构建会显示为蓝色，失败的构建会显示为红色。
- en: You can verify that your changes are applied by opening the application URL
    in your favorite browser (`http://jobstore-{domain-name}.rhcloud.com`). You will
    see that the title has been updated to **Jobstore with Jenkins**.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过在你喜欢的浏览器中打开应用程序的 URL (`http://jobstore-{domain-name}.rhcloud.com`) 来验证你的更改是否已应用。你会看到标题已更新为**带有
    Jenkins 的 Jobstore**。
- en: How it works…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: One of the powerful features of Jenkins is its ability to distribute builds
    over multiple machines. Jenkins uses the master/slave architecture to manage distributed
    builds. In the master/slave architecture, there is a Jenkins server whose job
    is to schedule jobs, dispatch builds to the slave for the actual execution, monitor
    the slave health, and record and present build results. The slave runs the actual
    build and shares job results with the master.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 的一个强大功能是它能够将构建分布到多个机器上。Jenkins 使用主/从架构来管理分布式构建。在主/从架构中，有一个 Jenkins 服务器，负责调度作业，将构建分派到从服务器进行实际执行，监控从服务器的健康状态，并记录和展示构建结果。从服务器执行实际的构建并将作业结果与主服务器共享。
- en: OpenShift uses the Jenkins master/slave architecture to build your applications.
    You can only have one Jenkins master for an OpenShift domain, and all the applications
    under that domain will use the Jenkins master for application builds. The Jenkins
    master, depending on the Jenkins job configuration for that application, will
    create a slave that will build the application. Every OpenShift Jenkins installation
    has the OpenShift Jenkins plugin installed. This plugin makes it possible for
    Jenkins to talk with your OpenShift account and create slaves on your behalf.
    The Jenkins slaves are nothing more than OpenShift gears.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 使用 Jenkins 的主/从架构来构建你的应用程序。每个 OpenShift 域只能有一个 Jenkins 主服务器，且该域下的所有应用程序都将使用该
    Jenkins 主服务器进行应用构建。根据该应用程序的 Jenkins 作业配置，Jenkins 主服务器会创建一个从服务器来构建该应用程序。每个 OpenShift
    Jenkins 安装都会安装 OpenShift Jenkins 插件。这个插件使得 Jenkins 能够与 OpenShift 账户进行通信，并代表你创建从服务器。Jenkins
    从服务器不过是 OpenShift 的 gears。
- en: 'In step 1, you created the Jenkins master application. You can use the master
    instance to execute jobs directly but, most of the time in the master/slave architecture,
    slaves are used to build the projects. The Jenkins master created by OpenShift
    is configured not to run any jobs by setting the number of executors configuration
    to `0`. The number of executors lets you define the number of concurrent jobs
    an instance can run. As the number of executors for the master instance is set
    to `0`, you can''t use it to build any project. You can set the number of executors
    to a number greater than `0` by updating the **# of executors** system configuration
    value in the Jenkins configuration screen (`https://jenkins-{domain-name}.rhcloud.com/configure`),
    as shown in the following screenshot. In the *Using Jenkins to build projects
    hosted on GitHub* recipe, you will use the Jenkins master to build the project.
    Have a look at the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1步中，你创建了Jenkins主应用程序。你可以使用主实例直接执行任务，但在主/从架构中，大多数情况下是使用从实例来构建项目。OpenShift创建的Jenkins主实例被配置为不运行任何任务，方法是将执行器的数量配置为`0`。执行器数量允许你定义一个实例可以并发运行的任务数量。由于主实例的执行器数量被设置为`0`，你不能用它来构建任何项目。你可以通过更新Jenkins配置屏幕中的**执行器数量**系统配置值（`https://jenkins-{domain-name}.rhcloud.com/configure`）将执行器数量设置为大于`0`的数字，如下图所示。在*使用Jenkins构建托管在GitHub上的项目*食谱中，你将使用Jenkins主实例来构建项目。请看下图：
- en: '![How it works…](img/00114.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/00114.jpeg)'
- en: Once you have created the Jenkins master application, you can add the Jenkins
    client to the `jobstore` application. If you try to add the Jenkins client to
    an application before creating the Jenkins master, you will get an error message
    in the `rhc add-cartridge` command logs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了Jenkins主应用程序，你就可以将Jenkins客户端添加到`jobstore`应用程序中。如果你在创建Jenkins主应用程序之前尝试将Jenkins客户端添加到应用程序中，你会在`rhc
    add-cartridge`命令日志中看到错误消息。
- en: In step 5, you added the Jenkins client cartridge to the `jobstore` application.
    The Jenkins client cartridge creates a new Jenkins job for the `jobstore` project.
    In Jenkins, a job defines what needs to be done. You can view the job configuration
    by opening `https://jenkins-{domain}.rhcloud.com/job/jobstore-build/configure`
    in your favorite browser.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5步中，你将Jenkins客户端插件添加到`jobstore`应用程序中。Jenkins客户端插件为`jobstore`项目创建了一个新的Jenkins任务。在Jenkins中，任务定义了需要完成的工作。你可以通过在浏览器中打开`https://jenkins-{domain}.rhcloud.com/job/jobstore-build/configure`来查看任务配置。
- en: 'The job configuration can be divided into three sections: builder configuration,
    source code management configuration, and build configuration.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 任务配置可以分为三个部分：构建器配置、源代码管理配置和构建配置。
- en: '**Builder configuration**: The configuration values shown in the following
    screenshot will be used to create a slave. The configuration says that it needs
    a builder slave with a small gear size of type `redhat-jbosseap-6`. This means
    the slave gear will have a JBoss EAP 6 cartridge installed. It also defines a
    timeout for which the Jenkins master will wait for the slave to come online. The
    default builder timeout is `5` minutes or `300000` milliseconds. The **Restrict
    where this project can be run** configuration defines that this project will only
    be built on the slave with the label `jobstore-build`. As you might have probably
    noticed, the name of the label is the same as the name of the job. The OpenShift
    Jenkins plugin uses the label name to read the job configuration and creates a
    slave using the builder configuration of the job. So, if you change the name of
    the label from `jobstore-build` to `jobstore-os-build`, then the Jenkins plugin
    will not be able to find the associated job configuration, and the job will not
    be executed.![How it works…](img/00115.jpeg)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建器配置**：下图所示的配置值将用于创建一个从实例。该配置表示需要一个类型为`redhat-jbosseap-6`的小型齿轮大小的从实例。这意味着该从实例将安装JBoss
    EAP 6插件。它还定义了Jenkins主实例等待从实例上线的超时时间。默认的构建器超时时间是`5`分钟或`300000`毫秒。**限制此项目可以运行的地方**配置定义了该项目将只在标有`jobstore-build`标签的从实例上构建。你可能已经注意到，标签的名称与任务的名称相同。OpenShift
    Jenkins插件使用标签名称读取任务配置，并使用任务的构建器配置创建一个从实例。因此，如果你将标签名称从`jobstore-build`更改为`jobstore-os-build`，则Jenkins插件将无法找到关联的任务配置，任务也将无法执行。![工作原理…](img/00115.jpeg)'
- en: '**Git configuration**: The next important configuration is the Git version
    control configuration. This configuration specifies the application Git repository
    URL. The Jenkins job will clone this Git repository using the specified Git repository
    URL and build this project. The following screenshot shows the Git configuration:![How
    it works…](img/00116.jpeg)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git 配置**：下一个重要的配置是 Git 版本控制配置。此配置指定应用程序的 Git 仓库 URL。Jenkins 作业将使用指定的 Git
    仓库 URL 克隆该 Git 仓库并构建此项目。以下截图显示了 Git 配置：![它是如何工作的...](img/00116.jpeg)'
- en: '**Build configuration**: This is the most important part of our job configuration.
    It defines what needs to be done. The job configuration is shown in the following
    screenshot. The configuration does the following:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建配置**：这是我们作业配置中最重要的部分。它定义了需要做什么。作业配置如下截图所示。配置完成以下任务：'
- en: It downloads the contents from the actual application to the builder application
    using Git and `rsync`.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它通过 Git 和`rsync`从实际应用程序下载内容到构建器应用程序。
- en: If the `force_clean_build` marker is not present, then it also copies the content
    of the `$OPENSHIFT_BUILD_DEPENDENCIES_DIR` and `$OPENSHIFT_DEPENDENCIES_DIR` directories
    from the actual application to the builder application. When the `force_clean_build`
    marker is present, then the dependencies are downloaded again on the builder application,
    and the build will take more time to finish.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有`force_clean_build`标记，它还会将实际应用程序中的`$OPENSHIFT_BUILD_DEPENDENCIES_DIR`和`$OPENSHIFT_DEPENDENCIES_DIR`目录的内容复制到构建器应用程序中。当存在`force_clean_build`标记时，依赖项将在构建器应用程序上重新下载，构建将花费更多时间才能完成。
- en: Then, it builds the application using whatever build commands the cartridge
    uses. For Java applications, it will use the `mvn clean install –Popenshift –DskipTests`
    command.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它使用任何与卡带相关的构建命令来构建应用程序。对于 Java 应用程序，它将使用`mvn clean install –Popenshift –DskipTests`命令。
- en: After the build finishes successfully, it stops the application gear.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建成功完成后，它会停止应用程序的 gear。
- en: Then Jenkins copies the new content from the builder application to the actual
    application using `rsync`.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，Jenkins 使用`rsync`将新内容从构建器应用程序复制到实际应用程序。
- en: 'Finally, it starts the application. Have a look at the following screenshot:'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，它启动了应用程序。请查看以下截图：
- en: '![How it works…](img/00117.jpeg)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/00117.jpeg)'
- en: If you don't have Jenkins enabled in your application, then the code is built
    on the same gear on which the application is running. When you push changes to
    your application gear, OpenShift first stops your application, builds the application,
    deploys the artifact, and finally starts the application.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序中没有启用 Jenkins，那么代码将在应用程序运行的同一 gear 上构建。当你将更改推送到应用程序 gear 时，OpenShift
    首先停止你的应用程序，构建应用程序，部署产物，最后启动应用程序。
- en: 'In step 8, after adding the Jenkins cartridge to the `jobstore` application,
    you made a change to the source code and pushed changes to the application gear.
    This time, rather than building the project on the application gear, the Jenkins
    server launches a slave and initiates the build. The process is explained in detail
    in the following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 8 步中，添加 Jenkins 卡带到`jobstore`应用程序后，你对源代码进行了更改并将更改推送到应用程序 gear。这一次，Jenkins
    服务器启动一个从节点并发起构建，而不是在应用程序 gear 上构建项目。以下步骤详细解释了这个过程：
- en: The user makes a change and pushes the changes to the application gear using
    the `git push` command.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户进行更改并通过`git push`命令将更改推送到应用程序 gear。
- en: After receiving the bits, a Git action hook is called that notifies the Jenkins
    server.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接收到数据后，调用 Git 动作钩子，通知 Jenkins 服务器。
- en: 'The Jenkins server creates a dedicated Jenkins slave (builder) to build this
    project. You can see the new gear created by Jenkins using the `rhc apps` command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 服务器创建一个专用的 Jenkins 从节点（构建器）来构建这个项目。你可以通过`rhc apps`命令查看 Jenkins 创建的新
    gear：
- en: '[PRE6]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Jenkins runs the build using the steps mentioned in the build configuration
    section. After a successful build, the build artifact is copied to the application
    gear using the `rsync` tool, as mentioned in the build configuration.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 使用构建配置部分中提到的步骤运行构建。在构建成功后，构建产物将通过`rsync`工具复制到应用程序 gear，如构建配置中所提到的。
- en: Jenkins starts the application after a successful build and then archives the
    build artifact that you can use later.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 在构建成功后启动应用程序，然后归档构建产物，供以后使用。
- en: After 15 minutes of idle time, the Jenkins builder is destroyed and will no
    longer show up in the `rhc apps` command-line output. The build artifacts, however,
    will still exist in Jenkins and can be viewed there.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在15分钟的空闲时间后，Jenkins构建器会被销毁，并且在`rhc apps`命令的输出中不再显示。然而，构建产物仍会保存在Jenkins中，可以在那里查看。
- en: 'Using Jenkins with your OpenShift application has the following advantages:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将Jenkins与OpenShift应用配合使用有以下优点：
- en: '**No application downtime in case of build failure**: Without Jenkins'' support,
    OpenShift runs the build on the same gear on which your application is running.
    It first stops all the cartridges on the application gear, runs the build, and
    finally deploys the successful build artifact. In the event of build failure,
    the build artifact will not be deployed and your application will have downtime.
    With CI enabled for your application, OpenShift stops the application only after
    the build finishes successfully. This avoids downtime due to build failures.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建失败时不影响应用运行**：在没有Jenkins支持的情况下，OpenShift会在与你的应用运行的同一设备上运行构建。它首先停止该设备上的所有插件，执行构建，并最终部署成功的构建产物。如果构建失败，构建产物将不会被部署，你的应用将会停机。启用了CI后，OpenShift只会在构建成功完成后才停止应用。这样就能避免因构建失败而导致的停机。'
- en: '**More resources to build your project**: As the Jenkins builders run on separate
    gears, they have additional resources, such as memory and storage, to run your
    application build.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更多资源来构建你的项目**：由于Jenkins构建器运行在独立的设备上，它们具有额外的资源，如内存和存储，以便运行你的应用构建。'
- en: '**Store previous builds**: Jenkins can store your previous successful build
    artifacts for you. You can use these build artifacts if you want to roll back
    to a previous version.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储以前的构建**：Jenkins可以为你存储之前成功的构建产物。如果你希望回滚到先前的版本，可以使用这些构建产物。'
- en: '**Jenkins plugins**: Jenkins has a strong and active community that has built
    a variety of plugins to perform various common tasks. You can use these plugins
    to automate various tasks of your application. Throughout this chapter, you will
    install various Jenkins plugins to do various tasks.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins插件**：Jenkins拥有一个强大而活跃的社区，开发了各种插件来执行常见任务。你可以使用这些插件来自动化应用的各种任务。在本章中，你将安装多个Jenkins插件来完成不同的任务。'
- en: 'You can view the logs of your Jenkins server using the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令查看Jenkins服务器的日志：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There's more…
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'You can also enable Jenkins support at application creation time using the
    `--enable-jenkins` option as shown in the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在创建应用时使用`--enable-jenkins`选项启用Jenkins支持，如下命令所示：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding command will create the Jenkins server application and add the
    Jenkins client to the application. If the Jenkins server application already exists,
    then it only adds the `jenkins` client cartridge to the application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建Jenkins服务器应用，并将Jenkins客户端添加到应用中。如果Jenkins服务器应用已经存在，则仅会将`jenkins`客户端插件添加到应用中。
- en: See also
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Increasing the slave idle timeout* recipe
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*增加从属机空闲超时时间*的操作步骤'
- en: The *Installing Jenkins plugins* recipe
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安装Jenkins插件*的操作步骤'
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为你的OpenShift应用创建Jenkins工作流*的操作步骤'
- en: Increasing the slave idle timeout
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加从属机空闲超时时间
- en: The Jenkins master creates slaves to build the project. These slaves remain
    alive only for 15 minutes after building the project, that is, they will be reused
    only if the next build request is received within 15 minutes of finishing the
    first build. If they don't receive the build request in 15 minutes after building
    the project, then the Jenkins master will kill the slave instance. The next build
    request will again create a new slave and build the application on it. Slave creation
    is a time-consuming process and is not ideal during the development cycle, when
    you expect quick feedback from your CI server.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins主服务器会创建从属机来构建项目。这些从属机在构建项目后只会存活15分钟，也就是说，只有在完成第一次构建后的15分钟内收到下一次构建请求时，从属机会被重用。如果在构建项目后15分钟内没有接收到构建请求，Jenkins主服务器将会销毁从属实例。下一次构建请求将会重新创建一个新的从属机并在其上构建应用。创建从属机是一个耗时的过程，因此在开发周期中，当你需要快速反馈时，这并不是理想的做法。
- en: In this recipe, you will learn how to increase the slave idle timeout so that
    you can reuse the slave for a longer time and get quick feedback from the CI server.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本操作步骤中，你将学习如何增加从属机空闲超时时间，以便你可以更长时间地重用从属机，并从CI服务器获得更快的反馈。
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a Jenkins-enabled application, as
    discussed in the *Adding Jenkins CI to your application* recipe.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设你已经有一个启用了Jenkins的应用程序，正如*将Jenkins CI添加到你的应用程序*食谱中所讨论的那样。
- en: How to do it…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Perform the following steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Log in to your Jenkins dashboard, and then go to the Jenkins configuration page
    at `https://jenkins-{domain-name}.rhcloud.com/configure`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的Jenkins仪表板，然后前往Jenkins配置页面，地址为`https://jenkins-{domain-name}.rhcloud.com/configure`。
- en: Under the **Cloud** configuration section, there is a **Slave Idle Time to Live**
    configuration as shown in the following screenshot. The default configuration
    is 15 minutes.![How to do it…](img/00118.jpeg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Cloud**配置部分下，存在一个**Slave Idle Time to Live**配置，如下图所示。默认配置为15分钟。![操作步骤…](img/00118.jpeg)
- en: Update the **Slave Idle Time To Live** value to `60` minutes, and save the configuration
    by clicking on the **Save** button.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Slave Idle Time To Live**值更新为`60`分钟，并通过点击**Save**按钮保存配置。
- en: How it works…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'The Jenkins master created by OpenShift comes bundled with a few plugins that
    Jenkins needs to work effectively. You can see all the installed plugins by navigating
    to **Plugin Manager** | **Installed** as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift创建的Jenkins主节点捆绑了一些Jenkins需要有效运行的插件。你可以通过导航到**Plugin Manager** | **Installed**查看所有已安装的插件，如下图所示：
- en: '![How it works…](img/00119.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/00119.jpeg)'
- en: The plugin that makes it possible for Jenkins to talk with your OpenShift account
    is **OpenShift Origin Jenkins Cloud Plugin**. This plugin is responsible for managing
    the slave gears that build your application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使Jenkins能够与OpenShift帐户通信的插件是**OpenShift Origin Jenkins Cloud Plugin**。该插件负责管理构建应用程序的从机实例。
- en: Most of the Jenkins plugins have global configuration and job-level configuration.
    Global configuration applies to all the Jenkins jobs, whereas the job-level configuration
    applies only to a particular Jenkins job. You can view the Jenkins global configuration
    by navigating to the **Configure System** screen at `https://jenkins-{domain-name}.rhcloud.com/configure`.
    Many plugins that you will install will also need to be configured here. Jenkins
    dynamically adds new fields when you install the plugins.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Jenkins插件都有全局配置和作业级别配置。全局配置适用于所有Jenkins作业，而作业级配置仅适用于特定Jenkins作业。你可以通过访问`https://jenkins-{domain-name}.rhcloud.com/configure`的**Configure
    System**屏幕查看Jenkins的全局配置。你将安装的许多插件也需要在此进行配置。安装插件时，Jenkins会动态添加新字段。
- en: The default screen contains a number of sections to configure either a general,
    system-wide parameter or various plugin configurations. The OpenShift Jenkins
    plugin adds the **OpenShift Cloud** subsection under the **Cloud** section. This
    configuration is used to talk with your OpenShift account and create slaves required
    to build your application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 默认屏幕包含多个部分，用于配置一般的系统级参数或各种插件配置。OpenShift Jenkins插件在**Cloud**部分下添加了**OpenShift
    Cloud**子部分。此配置用于与OpenShift帐户通信并创建构建应用程序所需的从机。
- en: In the preceding steps, you increased the slave idle timeout to 60 minutes in
    the OpenShift **Cloud** configuration section. This is the maximum slave idle
    timeout that you can assign to the slave. The next slave that Jenkins will create
    will use this configuration and will be alive for 60 minutes after building the
    project.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述步骤中，你将OpenShift **Cloud**配置部分中的从机空闲超时增加到60分钟。这是你可以为从机设置的最大空闲超时时间。Jenkins将创建的下一个从机将使用此配置，并在构建项目后保持60分钟的存活时间。
- en: See also
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Adding Jenkins CI to your application* recipe
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将Jenkins CI添加到你的应用程序*食谱'
- en: The *Installing Jenkins plugins* recipe
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安装Jenkins插件*食谱'
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为你的OpenShift应用程序创建Jenkins工作流*食谱'
- en: Installing Jenkins plugins
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Jenkins插件
- en: The extensible architecture of Jenkins makes it very powerful. There are third-party
    plugins that enable you to add extra features to your Jenkins instance. These
    features enable you to work with different SCM tools, such as Git, to generate
    code quality and code coverage reports, or to automate other manual tasks, such
    as database schema migration, and so on. In this recipe, you will learn how you
    can install the Green Balls plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Green+Balls](https://wiki.jenkins-ci.org/display/JENKINS/Green+Balls))
    to your OpenShift Jenkins instance. The Green Balls plugin makes Jenkins use green
    balls instead of blue balls for successful builds.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins的可扩展架构使其非常强大。通过第三方插件，你可以为Jenkins实例添加额外功能。这些功能让你可以与不同的SCM工具（如Git）合作，生成代码质量和代码覆盖率报告，或自动化其他手动任务，如数据库模式迁移等。在本配方中，你将学习如何将Green
    Balls插件（[https://wiki.jenkins-ci.org/display/JENKINS/Green+Balls](https://wiki.jenkins-ci.org/display/JENKINS/Green+Balls)）安装到你的OpenShift
    Jenkins实例中。Green Balls插件让Jenkins在成功构建时使用绿色球代替蓝色球。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a Jenkins-enabled application, as discussed
    in the *Adding Jenkins CI to your application* recipe.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方假设你已经有一个启用了Jenkins的应用程序，如*将Jenkins CI添加到你的应用程序*配方中所述。
- en: How to do it…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to install a plugin:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以安装插件：
- en: Log in to your OpenShift Jenkins dashboard and go to the **Manage Jenkins**
    screen at `https://jenkins-{domain-name}.rhcloud.com/manage`. The **Manage Jenkins**
    screen is a central place where you can configure all the aspects of the Jenkins
    system configuration.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的OpenShift Jenkins仪表板，进入`https://jenkins-{domain-name}.rhcloud.com/manage`的**管理Jenkins**屏幕。**管理Jenkins**屏幕是配置Jenkins系统所有方面的中心位置。
- en: Next, click on **Manage Plugins** to work with Jenkins plugins. You can install,
    remove, or update plugins through the **Manage Plugins** screen. Have a look at
    the following screenshot:![How to do it…](img/00120.jpeg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**管理插件**来管理Jenkins插件。你可以通过**管理插件**屏幕安装、移除或更新插件。请查看以下截图：![如何操作…](img/00120.jpeg)
- en: 'The **Manage Plugins** screen is divided into four tabs: **Updates**, **Available**,
    **Installed**, and **Advanced**, as shown in the following screenshot:![How to
    do it…](img/00121.jpeg)'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**管理插件**屏幕分为四个标签：**更新**、**可用**、**已安装**和**高级**，如下图所示：![如何操作…](img/00121.jpeg)'
- en: The **Updates** tab shows all the installed plugins that have updates, the **Available**
    tab shows all the plugins that you can install on your Jenkins instance, the **Installed**
    tab shows all the plugins that are already installed on your Jenkins instance,
    and the **Advanced** tab allows you to manually install the plugin or force Jenkins
    to check for updates.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**更新**标签显示所有有更新的已安装插件，**可用**标签显示所有可以安装到Jenkins实例中的插件，**已安装**标签显示已经安装在Jenkins实例中的插件，**高级**标签允许你手动安装插件或强制Jenkins检查更新。'
- en: All the Jenkins plugins available in the Jenkins plugin registry are shown in
    the **Available** tab. If you click on the **Available** tab, you will find that
    the list is empty. To enable Jenkins to show plugins under the **Available** tab,
    navigate to **Manage Plugins** | **Advanced**, and click on the **Check Now**
    button, as shown in the following screenshot, to forcefully check for new updates:![How
    to do it…](img/00122.jpeg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins插件注册表中所有可用的插件都显示在**可用**标签中。如果点击**可用**标签，你会发现列表是空的。为了让Jenkins在**可用**标签下显示插件，请前往**管理插件**
    | **高级**，然后点击**立即检查**按钮，如下图所示，强制检查是否有新更新：![如何操作…](img/00122.jpeg)
- en: Once done, you will see a list of plugins available under the **Available**
    tab.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，你将看到**可用**标签下的插件列表。
- en: To install the Green Balls plugin, filter the available plugins, and then click
    on **Install without restart**. Have a look at the following screenshot:![How
    to do it…](img/00123.jpeg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装Green Balls插件，先过滤可用插件，然后点击**无需重启安装**。请查看以下截图：![如何操作…](img/00123.jpeg)
- en: After the plugin is installed, you will see the Green Balls plugin in action.
    Please clean your browser cache if you still see blue balls.![How to do it…](img/00124.jpeg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件安装后，你将看到Green Balls插件在运行。如果你仍然看到蓝球，请清除浏览器缓存。![如何操作…](img/00124.jpeg)
- en: How it works…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In the preceding steps, you installed the Green Balls plugin to your OpenShift
    Jenkins instance. The Green Balls plugin does what it says: it makes successful
    builds display as green balls instead of the default blue balls.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的步骤中，您已将 Green Balls 插件安装到 OpenShift Jenkins 实例中。Green Balls 插件顾名思义：它使成功的构建显示为绿色球，而不是默认的蓝色球。
- en: 'There are a couple of ways to install plugins to your Jenkins instance. You
    can either use the automatic method or the manual method. In the preceding steps,
    you used the automatic method to install the plugins. The automatic method works
    for plugins that are listed in the Jenkins central plugins registry available
    at [http://updates.jenkins-ci.org/download/plugins/](http://updates.jenkins-ci.org/download/plugins/).
    The plugins that are not available in the central plugin registry need to be installed
    manually. To install a plugin manually, navigate to **Manage Jenkins** | **Manage
    Plugins** | **Advance**. In the **Advanced** tab, there is a section called **Upload
    Plugin** that you can use to upload your plugin. Click on the **Choose File**
    button, select the plugin from your local machine, and then click on the **Upload**
    button to upload the plugin:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以将插件安装到 Jenkins 实例中。您可以使用自动方法或手动方法。在之前的步骤中，您使用了自动方法安装插件。自动方法适用于在 Jenkins
    中央插件注册表中列出的插件，您可以通过[http://updates.jenkins-ci.org/download/plugins/](http://updates.jenkins-ci.org/download/plugins/)访问该注册表。对于不在中央插件注册表中的插件，需要手动安装。要手动安装插件，请导航到**管理
    Jenkins** | **管理插件** | **高级**。在**高级**选项卡中，有一个名为**上传插件**的部分，您可以用它来上传插件。点击**选择文件**按钮，选择本地机器中的插件，然后点击**上传**按钮上传插件：
- en: '![How it works…](img/00125.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/00125.jpeg)'
- en: The manually installed plugins are not installed until you restart Jenkins.
    So, once the plugin is uploaded, restart Jenkins by going to `https://jenkins-{domain-name}.rhcloud.com/safeRestart`.
    This will restart Jenkins after the current builds have been completed and will
    install your plugin.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 手动安装的插件在重新启动 Jenkins 之前不会被安装。因此，一旦插件上传完成，您可以通过访问`https://jenkins-{domain-name}.rhcloud.com/safeRestart`来重新启动
    Jenkins。这将在当前构建完成后重启 Jenkins，并安装您的插件。
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Adding Jenkins CI to your application* recipe
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将 Jenkins CI 添加到您的应用程序*指南'
- en: The *Using Jenkins to build projects hosted on GitHub* recipe
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Jenkins 构建托管在 GitHub 上的项目*指南'
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为您的 OpenShift 应用程序创建 Jenkins 工作流*指南'
- en: Using Jenkins to build projects hosted on GitHub
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 构建托管在 GitHub 上的项目
- en: You can use the OpenShift Jenkins instance to build your non-OpenShift projects
    as well. This recipe will use a Maven-based project publicly hosted on GitHub
    at [https://github.com/OpenShift-Cookbook/chapter10-demo-app](https://github.com/OpenShift-Cookbook/chapter10-demo-app).
    The goal of this recipe is to build the project whenever you push code to the
    GitHub repository and send an e-mail in case the build status changes, that is,
    the build fails or recovers from a build failure. This is the first step an organization
    takes when they try to introduce CI.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用 OpenShift Jenkins 实例来构建您的非 OpenShift 项目。本指南将使用一个基于 Maven 的公开托管在 GitHub
    上的项目，地址为[https://github.com/OpenShift-Cookbook/chapter10-demo-app](https://github.com/OpenShift-Cookbook/chapter10-demo-app)。本指南的目标是在您向
    GitHub 仓库推送代码时构建该项目，并在构建状态发生变化时发送电子邮件，即构建失败或从构建失败中恢复。这是组织尝试引入 CI 的第一步。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a Jenkins-enabled application, as
    discussed in the *Adding Jenkins CI to your application* recipe.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南假设您已经有一个启用了 Jenkins 的应用程序，如*将 Jenkins CI 添加到您的应用程序*指南中所讨论的那样。
- en: How to do it…
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to learn how to build projects hosted on GitHub:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以了解如何构建托管在 GitHub 上的项目：
- en: In this recipe, we will use the Jenkins master to build the project. Go to `https://jenkins-{domain-name}.rhcloud.com/configure`,
    and update the **# of executors** property to `1`. Any number greater than `0`
    will allow the master to run build jobs. Also, change the **Usage** field value
    to **Leave this machine for tied jobs only**. This configuration will make sure
    that the master instance is only used for the job explicitly configured to run
    on the master. Later in the job configuration, you will configure a job to run
    only on the master. Click on the **Save** button to save the new values:![How
    to do it…](img/00126.jpeg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将使用 Jenkins 主服务器来构建项目。访问`https://jenkins-{domain-name}.rhcloud.com/configure`，并将**执行器数量**属性更新为`1`。任何大于`0`的数字都会允许主服务器运行构建任务。此外，将**使用情况**字段值更改为**仅为绑定任务保留此机器**。这个配置确保主实例只用于明确配置为在主服务器上运行的任务。稍后在任务配置中，你将配置一个仅在主服务器上运行的任务。点击**保存**按钮以保存新值：![如何操作…](img/00126.jpeg)
- en: One of the goals of this recipe is to send e-mails when the project becomes
    unstable. To allow Jenkins to send an e-mail, you have to provide e-mail settings
    in the **E-mail Notification** section under the Jenkins **Configure System**
    screen. Click on the **Advanced** tab to see all the configuration options. The
    configuration shown in the following screenshot uses Gmail to send e-mails. Gmail
    is shown just for demonstration here. Google might send you an e-mail stating
    that someone is hacking your account, as your account is accessed from a different
    location than it is usually used. Ideally, you should use your organization SMTP
    server configuration.![How to do it…](img/00127.jpeg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个步骤的目标之一是在项目变得不稳定时发送电子邮件。为了允许 Jenkins 发送电子邮件，你需要在 Jenkins 的**配置系统**界面中的**电子邮件通知**部分提供电子邮件设置。点击**高级**标签查看所有配置选项。以下截图中显示的配置使用
    Gmail 发送电子邮件。这里展示 Gmail 只是为了演示。谷歌可能会给你发送一封邮件，说明有人在入侵你的账户，因为你的账户被从一个与平常不同的位置访问。理想情况下，你应该使用你所在组织的
    SMTP 服务器配置。![如何操作…](img/00127.jpeg)
- en: You can also send a test e-mail to check the configuration. Check the **Test**
    configuration by sending a test e-mail checkbox and providing it with the e-mail
    address you want to send an e-mail to. You will receive an e-mail like the one
    shown in the following screenshot:![How to do it…](img/00128.jpeg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以发送测试电子邮件来检查配置。通过勾选**测试**配置并提供你想要发送电子邮件的电子邮件地址，来检查**测试电子邮件**配置。你将收到类似以下截图中所示的电子邮件：![如何操作…](img/00128.jpeg)
- en: One thing that you will find annoying in the preceding screenshot is that the
    address is not configured yet in the from section of the e-mail. You can configure
    it to something else by updating the value of the **System Admin e-mail address**
    property from **address not configured yet** to something user friendly, as shown
    in the following screenshot. After making this change, the notification e-mails
    from Jenkins will be sent with this address in the from header.![How to do it…](img/00129.jpeg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会发现在前述截图中一个令人烦恼的地方是，电子邮件的发件人部分还没有配置地址。你可以通过将**系统管理员电子邮件地址**属性从**地址尚未配置**更新为某个用户友好的地址来进行配置，如以下截图所示。完成此更改后，Jenkins
    的通知电子邮件将以此地址作为发件人发送：![如何操作…](img/00129.jpeg)
- en: Fork the GitHub repository ([https://github.com/OpenShift-Cookbook/chapter10-demo-app](https://github.com/OpenShift-Cookbook/chapter10-demo-app))
    by clicking on the **Fork** button. You need to log in to GitHub with a valid
    account before you can fork this repository. You have to fork this repository
    so that you can push your changes to the repository.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Fork**按钮，Fork GitHub 仓库([https://github.com/OpenShift-Cookbook/chapter10-demo-app](https://github.com/OpenShift-Cookbook/chapter10-demo-app))。你需要使用有效的
    GitHub 账户登录，才能 Fork 这个仓库。你必须 Fork 这个仓库，以便能够将你的更改推送到仓库中。
- en: Go to your Jenkins dashboard, and click on **New Job**. Have a look at the following
    screenshot:![How to do it…](img/00130.jpeg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问你的 Jenkins 仪表板，点击**新建任务**。查看以下截图：![如何操作…](img/00130.jpeg)
- en: Select the **Build a free-style software project** build type, and give it a
    name, `chapter10-github-recipe-build`, as shown in the following screenshot. Click
    on **OK** to create the job.![How to do it…](img/00131.jpeg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**构建一个自由风格的软件项目**构建类型，并为它命名为`chapter10-github-recipe-build`，如下所示截图。点击**确定**来创建该任务：![如何操作…](img/00131.jpeg)
- en: Next, you will be shown the job configuration page where you can configure this
    job. The first configuration that you will update is under the **Source Code Management**
    section. As the project is hosted on GitHub, enter the URL of the GitHub repository
    that you want to build. The GitHub repository URL will be `https://github.com/<username>/chapter10-demo-app.git`.
    The username corresponds to your GitHub username. The following screenshot shows
    the **Source Code Management** section:![How to do it…](img/00132.jpeg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将看到作业配置页面，在该页面你可以配置此作业。你将更新的第一个配置位于**源代码管理**部分。由于项目托管在GitHub上，输入你想要构建的GitHub仓库的URL。GitHub仓库的URL将是`https://github.com/<username>/chapter10-demo-app.git`。其中，`username`对应你的GitHub用户名。下图显示了**源代码管理**部分：![如何操作...](img/00132.jpeg)
- en: Next, you have to configure when this build should get triggered. This is configured
    under the **Build Triggers** section. In the configuration shown in the following
    screenshot, you told Jenkins to poll SCM every minute. It uses the same syntax
    as `crontab` on Unix/Linux.![How to do it…](img/00133.jpeg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要配置此构建何时触发。这个配置在**构建触发器**部分进行设置。在下图所示的配置中，你告诉Jenkins每分钟轮询一次SCM。它使用的语法与Unix/Linux中的`crontab`相同。![如何操作...](img/00133.jpeg)
- en: Now that the Jenkins job knows from where and how often to get the source code,
    the next step is to tell the job what to do with the source code. This is achieved
    by defining the build steps. A job can have one or more build steps. To add a
    new build step, click on the **Add build step** dropdown, and select **Execute
    shell**, as shown in the following screenshot:![How to do it…](img/00134.jpeg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Jenkins作业已经知道从哪里以及多频繁地获取源代码，下一步是告诉作业如何处理这些源代码。这通过定义构建步骤来实现。一个作业可以有一个或多个构建步骤。要添加一个新的构建步骤，点击**添加构建步骤**下拉菜单，并选择**执行Shell**，如下图所示：![如何操作...](img/00134.jpeg)
- en: This will render a text area where you can enter the command you want to run.
    Enter the `mvn clean install` command in the text area.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将显示一个文本区域，你可以在其中输入想要运行的命令。在文本区域中输入`mvn clean install`命令。
- en: The next configuration that you can optionally specify in your job is what to
    do after building your project. This is defined by creating one or more post-build
    actions. Let's add an action that will send an e-mail when the build becomes unstable.
    Click on the **Add post-build action** drop-down list, and then select **E-mail
    notification**. In the **Recipients** textbox, provide a whitespace-separated
    list of e-mail IDs that you want to send an e-mail to in the event of a build
    failure, as shown in the following screenshot:![How to do it…](img/00135.jpeg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以选择在作业中配置的下一个选项是构建项目之后该做什么。这是通过创建一个或多个构建后操作来定义的。我们来添加一个操作，当构建变得不稳定时发送电子邮件通知。在**添加构建后操作**下拉菜单中选择**电子邮件通知**。在**收件人**文本框中，提供一个以空格分隔的电子邮件地址列表，当构建失败时，邮件将发送给这些地址，如下图所示：![如何操作...](img/00135.jpeg)
- en: The last configuration left before you can save this job is to configure it
    to run on the master node. This is done by checking the **Restrict where this
    project can be run** checkbox and then giving it the name of the node that should
    be used to build the project, as shown in the following screenshot:![How to do
    it…](img/00136.jpeg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你保存此作业之前，最后一个配置是将其配置为在主节点上运行。这通过勾选**限制此项目可以运行的节点**复选框，并为其指定用于构建项目的节点名称来完成，如下图所示：![如何操作...](img/00136.jpeg)
- en: Now, save the configuration by clicking on the **Save** button.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**保存**按钮保存配置。
- en: To test the new Jenkins job, first clone the project on your local machine.
    To clone the project, use the following command. Please replace the username with
    your GitHub account username.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试新的Jenkins作业，首先在本地机器上克隆项目。克隆项目的命令如下所示。请将用户名替换为你的GitHub账户用户名。
- en: '[PRE9]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To test whether the job is working correctly, let's change one of the test cases
    so that it fails. Update the `MessageRepositoryTest` assertion from `assertEquals(1,
    messages.size());` to `assertEquals(2, messages.size());`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试作业是否正常工作，让我们更改其中一个测试用例，使其失败。将`MessageRepositoryTest`中的断言从`assertEquals(1,
    messages.size());`更新为`assertEquals(2, messages.size());`。
- en: 'Commit the code, and push the changes to your GitHub repository:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交代码，并将更改推送到你的GitHub仓库：
- en: '[PRE10]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Jenkins will pick the change and start a new build. The build will fail, and
    you will receive an e-mail with the job logs.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins将选择该更改并开始新的构建。构建将失败，你将收到包含作业日志的电子邮件。
- en: 'Now, let''s fix the build failure by reverting the change from `assertEquals(2,
    messages.size());` to `assertEquals(1, messages.size());`. Then run the following
    commands:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们通过将`assertEquals(2, messages.size());`更改为`assertEquals(1, messages.size());`来修复构建失败。然后运行以下命令：
- en: '[PRE11]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Again, Jenkins will pick the change and start a new build. This time, you will
    receive an e-mail saying that the build is back to normal, as shown in the following
    screenshot:![How to do it…](img/00137.jpeg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，Jenkins会检测到更改并启动新的构建。这一次，你将收到一封电子邮件，告知构建已恢复正常，如下图所示：![How to do it…](img/00137.jpeg)
- en: How it works…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: You created a freestyle Jenkins job that will poll Jenkins every minute and,
    if it detects a new commit, it will build the project. In step 1, you updated
    the Jenkins master configuration so that it can run build jobs. By default, the
    Jenkins master is not configured to run any builds. Setting the number of executors
    to `1` in the Jenkins system configuration enables the Jenkins master to run builds.
    The number of executors lets you define how many concurrent builds a Jenkins instance
    can perform.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个自由风格的Jenkins任务，该任务每分钟轮询一次Jenkins，如果检测到新的提交，它将构建项目。在第1步中，你更新了Jenkins主节点配置，以便它可以运行构建任务。默认情况下，Jenkins主节点没有配置为运行任何构建任务。通过在Jenkins系统配置中将执行器数量设置为`1`，可以让Jenkins主节点运行构建任务。执行器数量允许你定义Jenkins实例可以执行多少并发构建。
- en: E-mail is one of the most popular ways of communication. In step 2, you configured
    Jenkins to send an e-mail using the Gmail SMTP settings. You can send 99 e-mails
    per day using the Gmail SMTP server, which is fine for most individual projects,
    but for your organization projects, you should use your organization SMTP server.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件是最常用的沟通方式之一。在第2步中，你配置了Jenkins使用Gmail的SMTP设置来发送电子邮件。你可以通过Gmail SMTP服务器每天发送99封电子邮件，这对于大多数个人项目来说足够了，但对于你的组织项目，应该使用组织的SMTP服务器。
- en: This recipe requires you to have your own Git repository that will be polled
    by Jenkins. This is required so that you can push changes to your Git repository,
    as you can't push changes to the Git repository of another person unless you are
    added as a collaborator. You forked the repository in step 3 so that you have
    your own copy of this repository that you can work with.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方要求你拥有自己的Git仓库，Jenkins会轮询该仓库。这样做是因为你必须将更改推送到自己的Git仓库，而无法将更改推送到其他人的Git仓库，除非你被添加为协作者。你在第3步中分叉了该仓库，因此你拥有了这个仓库的副本，可以在上面工作。
- en: In step 4, you created a new Jenkins job that will be used to build the project
    you forked in step 3\. You used a freestyle build job, as it is the most flexible
    build option that you can use to build any type of project.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步中，你创建了一个新的Jenkins任务，用于构建你在第3步中分叉的项目。你使用了一个自由风格的构建任务，因为它是最灵活的构建选项，可以用于构建任何类型的项目。
- en: From steps 5 through step 9, you configured the job so that Jenkins polls the
    Git repository every minute and uses the Jenkins master to build the project.
    After saving the job in step 10, you will see your new job listed in the Jenkins
    dashboard. Jenkins will automatically run the build for the first time, as it
    does not have any history for this job. After running the job for the first time,
    Jenkins will wait for the changes in your Git repository before it starts another
    build.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从第5步到第9步，你配置了任务，使得Jenkins每分钟轮询一次Git仓库，并使用Jenkins主节点来构建项目。在第10步保存任务后，你将看到你的新任务出现在Jenkins仪表盘上。Jenkins将自动运行该任务进行第一次构建，因为该任务没有任何历史记录。在第一次运行任务后，Jenkins将等待你Git仓库中的更改，然后开始另一次构建。
- en: Once the job was configured, you tested the Jenkins job in steps 11 through
    15 by making a change to your local repository and pushing the change to GitHub.
    Jenkins will poll the Git repository in the next one minute, detect the change,
    and start the build.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 配置任务后，你在第11到第15步中通过更改本地仓库并将更改推送到GitHub来测试Jenkins任务。Jenkins将在接下来的1分钟内轮询Git仓库，检测到更改并启动构建。
- en: See also
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a Jenkins workflow for your OpenShift applications* recipe
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为你的OpenShift应用程序创建Jenkins工作流* 配方'
- en: Creating a Jenkins workflow for your OpenShift applications
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为你的OpenShift应用程序创建Jenkins工作流
- en: In this recipe, you will create a Jenkins workflow that you could use to build
    and deploy applications on OpenShift.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将创建一个Jenkins工作流，可以用来在OpenShift上构建和部署应用程序。
- en: Getting ready
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will cover all the steps from the start to make sure you have all
    the three gears available.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将涵盖从头开始的所有步骤，确保你拥有所有三个必要的齿轮。
- en: How to do it…
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to create a Jenkins workflow for your OpenShift
    applications:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤为您的 OpenShift 应用程序创建 Jenkins 工作流：
- en: Create a new Jenkins server application by running the following command. This
    was covered in detail in the *Adding Jenkins CI to your application* recipe.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令创建一个新的 Jenkins 服务器应用程序。该内容在*将 Jenkins CI 添加到您的应用程序*这一章节中有详细介绍。
- en: '[PRE12]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create an OpenShift Apache Tomcat 7 application that will be used to deploy
    the project. The project will be created with the `--no-git` option, as we do
    not want to clone the repository, because the code will be hosted on GitHub. The
    `--enable-jenkins` option will create a new Jenkins job that will build and deploy
    the application on OpenShift:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 OpenShift Apache Tomcat 7 应用程序，用于部署项目。由于我们不想克隆仓库（因为代码将托管在 GitHub 上），因此该项目将使用`--no-git`选项创建。`--enable-jenkins`选项将创建一个新的
    Jenkins 作业，该作业将构建并在 OpenShift 上部署应用程序：
- en: '[PRE13]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Log in to your Jenkins dashboard, and you will see the **forumapp-build** job
    listed on the dashboard.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Jenkins 仪表板，您将看到**forumapp-build**作业列在仪表板上。
- en: Create a new Jenkins job with the name `forumapp-github-build` by following
    the steps mentioned in the *Using Jenkins to build projects hosted on GitHub*
    recipe. Once the job is created, any change pushed to your GitHub repository will
    result in a Jenkins build.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照*使用 Jenkins 构建托管在 GitHub 上的项目*这一章节中提到的步骤创建一个名为`forumapp-github-build`的新 Jenkins
    作业。创建作业后，任何推送到 GitHub 仓库的更改都会导致 Jenkins 构建。
- en: Next, install the Jenkins Cobertura plugin by following the instructions mentioned
    in the *Installing Jenkins plugins* recipe.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照*安装 Jenkins 插件*这一章节中的说明安装 Jenkins Cobertura 插件。
- en: Once the plugin is installed, create another job with the name `forumapp-quality-build`.
    But, rather than creating a job from the start, you can use the `forumapp-github-build`
    job as a template. After entering the details, click on **OK**:![How to do it…](img/00138.jpeg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件安装完成后，创建另一个名为`forumapp-quality-build`的作业。但您可以使用`forumapp-github-build`作业作为模板，而不是从头开始创建作业。输入详细信息后，点击**确定**：![如何操作…](img/00138.jpeg)
- en: 'You will be directed to the `forumapp-quality-build` job configuration page.
    Update the following configuration values to suit this job:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被引导至`forumapp-quality-build`作业配置页面。更新以下配置值以适应此作业：
- en: Change the **Restrict this project can be run** value from `master` to `forumapp-build`.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**限制此项目可以运行**的值从`master`更改为`forumapp-build`。
- en: Uncheck **Poll SCM** under the **Build Triggers** section.
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建触发器**部分取消选中**轮询 SCM**。
- en: Change the **Execute Shell** command from `mvn clean install` to `mvn clean
    package -Pquality`.
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**执行 Shell**命令从`mvn clean install`更改为`mvn clean package -Pquality`。
- en: Now, you need to add two post-build actions to `forumapp-quality-build`, first
    to kick the `forumapp-build` job that will deploy the application to OpenShift
    and, second, publish the Cobertura code coverage report. Add the post-build action
    to trigger `forumapp-build` when the build succeeds. To add the Cobertura code
    coverage post-build action, click on the **Add post-build action hook** option,
    select **Publish Cobertura Coverage Report**, and provide `**/ target/site/cobertura/coverage.xml`
    for the **Cobertura xml report pattern** field.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要向`forumapp-quality-build`添加两个构建后操作，首先启动`forumapp-build`作业，该作业将在 OpenShift
    上部署应用程序；其次，发布 Cobertura 代码覆盖率报告。添加构建后操作，以便在构建成功时触发`forumapp-build`。要添加 Cobertura
    代码覆盖报告构建后操作，点击**添加构建后操作钩子**选项，选择**发布 Cobertura 覆盖率报告**，并为**Cobertura xml 报告模式**字段提供`**/
    target/site/cobertura/coverage.xml`。
- en: After updating the `forumapp-quality-build` job configuration, click on the
    **Save** button.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`forumapp-quality-build`作业配置后，点击**保存**按钮。
- en: One of the responsibilities of `forumapp-github-build` is to start the `forumapp-quality-build`
    job after it has been completed successfully. Update the `forumapp-github-build`
    job configuration by adding a post-build action. Add the **Build other projects**
    post-build action to build `forumapp-github-build` when the build is successful.
    Click on the **Save** button after adding the post-build action:![How to do it…](img/00139.jpeg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`forumapp-github-build`的责任之一是在作业成功完成后启动`forumapp-quality-build`作业。通过添加构建后操作来更新`forumapp-github-build`作业配置。添加**构建其他项目**构建后操作，以在构建成功时构建`forumapp-github-build`。添加构建后操作后，点击**保存**按钮：![如何操作…](img/00139.jpeg)'
- en: 'Now that you have configured the `forumapp-github-build` and `forumapp-quality-build`
    jobs, you need to update the `forumapp-build` job configuration to pull the code
    from the GitHub repository and deploy the latest code to OpenShift. Go to `https://jenkins-{domain-name}.rhcloud.com/job/forumapp-build/configure`,
    and add a new **Execute Shell** build step. This build step will first add a Git
    remote to the GitHub repository and then pull code from the GitHub repository.
    This is shown in the following commands:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已配置了`forumapp-github-build`和`forumapp-quality-build`任务，你需要更新`forumapp-build`任务配置，从GitHub仓库拉取代码并将最新代码部署到OpenShift。访问`https://jenkins-{domain-name}.rhcloud.com/job/forumapp-build/configure`，并添加一个新的**执行Shell**构建步骤。该构建步骤将首先为GitHub仓库添加一个Git远程仓库，然后从GitHub仓库拉取代码。以下是相关命令：
- en: '[PRE14]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Please replace the username with your GitHub account username. Also, make sure
    that the order of the build action hooks is the same as the order shown in the
    following screenshot:![How to do it…](img/00140.jpeg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请将用户名替换为你的GitHub账户用户名。确保构建操作钩子的顺序与下图所示的顺序一致：![如何操作…](img/00140.jpeg)
- en: Click on the **Save** button to save the configuration.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮以保存配置。
- en: Now, to test whether all our jobs are configured properly, go to the Jenkins
    dashboard and manually start the `forumapp-github-build` job. Instead of manually
    starting the job, you could also make a change to the application source and push
    the change to the GitHub repository. Jenkins will detect the change and start
    the build process.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了测试所有任务是否正确配置，请进入Jenkins仪表盘，手动启动`forumapp-github-build`任务。你也可以不手动启动任务，而是修改应用源代码并将更改推送到GitHub仓库。Jenkins将检测到更改并开始构建过程。
- en: After all the builds are successfully completed, you will see all the builds
    in a healthy state on the Jenkins dashboard, as shown in the following screenshot:![How
    to do it…](img/00141.jpeg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有构建成功完成后，你将在Jenkins仪表盘上看到所有构建处于健康状态，如下图所示：![如何操作…](img/00141.jpeg)
- en: To view the code coverage of your project, go to the **forumapp-quality-build**
    page, and click on **Coverage Report** to see the code coverage of your project:![How
    to do it…](img/00142.jpeg)
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看项目的代码覆盖率，请访问**forumapp-quality-build**页面，并点击**Coverage Report**以查看项目的代码覆盖率：![如何操作…](img/00142.jpeg)
- en: How it works…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the preceding steps, you created a simple workflow with three Jenkins jobs,
    each responsible for a specific task. The first job polls the GitHub repository
    at a specified interval for code changes and then builds the project when the
    changes are found. This job builds the project and runs its unit tests. It used
    the Jenkins master to build the project. The advantage of using Jenkins for light
    jobs like this is that you don't have to wait for the slave creation. You should
    only use the master for jobs that are light in nature; otherwise, the Jenkins
    master might go down.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，你创建了一个简单的工作流，包含三个Jenkins任务，每个任务负责特定的工作。第一个任务按照指定的间隔轮询GitHub仓库的代码更改，并在发现更改时构建项目。该任务构建项目并运行单元测试。它使用Jenkins主节点来构建项目。使用Jenkins进行像这样的轻量级任务的好处是，你不需要等待从节点的创建。你应该只在任务较轻时使用主节点，否则Jenkins主节点可能会因任务过多而宕机。
- en: The first build, if successful, starts the quality job that runs the code coverage
    over the application code. This build uses Cobertura ([http://cobertura.github.io/cobertura/](http://cobertura.github.io/cobertura/))
    to identify the parts of the Java application that lack test coverage. The quality
    build was configured to execute the `mvn clean install -Pquality` command. This
    command will run the Maven Cobertura plugin. The Maven plugin will generate both
    HTML and XML reports. The XML report is used by Jenkins to parse the coverage
    results. The quality build will use the Jenkins slave instead of the master, as
    a quality build usually tends to be memory- and CPU-intensive, and you will not
    like the master going down because of one job.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个构建，如果成功，将启动质量任务，运行应用代码的代码覆盖率。这次构建使用Cobertura（[http://cobertura.github.io/cobertura/](http://cobertura.github.io/cobertura/)）来识别Java应用程序中缺乏测试覆盖的部分。质量构建被配置为执行`mvn
    clean install -Pquality`命令。该命令将运行Maven Cobertura插件。Maven插件将生成HTML和XML报告。XML报告由Jenkins解析覆盖率结果。质量构建将使用Jenkins从节点而不是主节点，因为质量构建通常会消耗大量内存和CPU资源，你肯定不希望因一个任务让主节点宕机。
- en: On successful completion of the quality build, the third Jenkins job will deploy
    the application to OpenShift. This job will also use the Jenkins slave.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 质量构建成功完成后，第三个Jenkins任务将把应用部署到OpenShift。该任务也会使用Jenkins从节点。
- en: See also
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Upgrading Jenkins to the latest version* recipe
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将 Jenkins 升级到最新版本* 食谱'
- en: Upgrading Jenkins to the latest version
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Jenkins 升级到最新版本
- en: The Jenkins application created by OpenShift runs an old version of Jenkins.
    At the time of this writing, the Jenkins application created by OpenShift runs
    the 1.509.1 Version. This version is quite old, and some Jenkins plugins do not
    work with this version. In this recipe, you will learn how to upgrade Jenkins
    to the latest version. The latest version of Jenkins at the time of this writing
    is 1.567.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 创建的 Jenkins 应用程序运行的是 Jenkins 的旧版本。写这篇文章时，OpenShift 创建的 Jenkins 应用程序运行的是
    1.509.1 版本。这个版本已经很旧，某些 Jenkins 插件在此版本下无法正常工作。在本食谱中，您将学习如何将 Jenkins 升级到最新版本。写这篇文章时，Jenkins
    的最新版本是 1.567。
- en: Note
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This recipe is experimental, and I don't recommend that people use it for their
    production Jenkins instances. The aim of this recipe is to show that it is feasible
    to upgrade the Jenkins version. This might result in build data loss or a break
    in the Jenkins instance. So, use this recipe in your test environments first.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱是实验性的，我不建议将其用于生产环境中的 Jenkins 实例。此食谱的目的是展示升级 Jenkins 版本是可行的。升级过程中可能会导致构建数据丢失或
    Jenkins 实例损坏。因此，请先在您的测试环境中使用此食谱。
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe assumes you already have a Jenkins-enabled application, as discussed
    in the *Adding Jenkins CI to your application* recipe.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个启用了 Jenkins 的应用程序，正如在 *将 Jenkins CI 添加到您的应用程序* 食谱中所讨论的那样。
- en: How to do it…
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to upgrade the Jenkins version:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以升级 Jenkins 版本：
- en: 'Open a new command-line terminal, and SSH into your Jenkins application by
    running the following command:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令行终端，使用以下命令通过 SSH 连接到您的 Jenkins 应用程序：
- en: '[PRE15]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a new directory called `jenkins-latest-version` inside `$OPENSHIFT_DATA_DIR`,
    and download the latest Jenkins WAR file using `wget` by running the following
    command:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `$OPENSHIFT_DATA_DIR` 中创建一个名为 `jenkins-latest-version` 的新目录，然后使用 `wget` 运行以下命令下载最新的
    Jenkins WAR 文件：
- en: '[PRE16]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Exit the SSH session by typing the `exit` command.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入 `exit` 命令退出 SSH 会话。
- en: 'Create two environment variables by running the following command. Please replace
    `$OPENSHIFT_DATA_DIR` with your Jenkins application''s `$OPENSHIFT_DATA_DIR` environment
    variable value:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令创建两个环境变量。请将 `$OPENSHIFT_DATA_DIR` 替换为您 Jenkins 应用程序的 `$OPENSHIFT_DATA_DIR`
    环境变量值：
- en: '[PRE17]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Go to the Jenkins plugin manager, and uninstall the OpenShift Jenkins plugin.
    Restart Jenkins after uninstalling the plugin for the changes to take effect.
    You can restart Jenkins by going to the `https://jenkins-{domain-name}.rhcloud.com/safeRestart`
    URL.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 Jenkins 插件管理器，卸载 OpenShift Jenkins 插件。卸载插件后，重新启动 Jenkins 以使更改生效。您可以通过访问 `https://jenkins-{domain-name}.rhcloud.com/safeRestart`
    URL 来重新启动 Jenkins。
- en: After the Jenkins restart, you will see the latest version of Jenkins running,
    as shown in the following screenshot:![How to do it…](img/00143.jpeg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 重启后，您将看到正在运行的最新版本 Jenkins，如下图所示：![如何操作…](img/00143.jpeg)
- en: The default OpenShift plugin installed with the Jenkins installation does not
    work with the latest version of Jenkins. You have to build the latest OpenShift
    Jenkins plugin from source. The source code is available on GitHub at [https://github.com/openshift/jenkins-cloud-plugin](https://github.com/openshift/jenkins-cloud-plugin).
    I have packaged the latest version and made it available at [https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin](https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin).
    Download the latest plugin from [https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin/raw/master/openshift.hpi](https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin/raw/master/openshift.hpi)
    to a convenient location on your machine.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与 Jenkins 最新版本不兼容的默认 OpenShift 插件无法与此版本的 Jenkins 配合使用。您需要从源代码构建最新的 OpenShift
    Jenkins 插件。源代码可以在 GitHub 上找到，地址为 [https://github.com/openshift/jenkins-cloud-plugin](https://github.com/openshift/jenkins-cloud-plugin)。我已经将最新版本打包，并将其提供在
    [https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin](https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin)
    上。请从 [https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin/raw/master/openshift.hpi](https://github.com/OpenShift-Cookbook/chapter10-openshift-jenkins-plugin/raw/master/openshift.hpi)
    下载最新插件，并将其保存到您机器上的便捷位置。
- en: Install the plugin manually by going to the plugin manager **Advanced** tab
    and uploading the plugin.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过进入插件管理器的 **高级** 选项卡并上传插件，手动安装插件。
- en: Restart Jenkins so that the plugin gets installed.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 Jenkins，以便插件能够安装。
- en: Go to the Jenkins system configuration, add a new OpenShift cloud, and click
    on **Save**. Have a look at the following screenshot:![How to do it…](img/00144.jpeg)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 Jenkins 系统配置，添加一个新的 OpenShift 云，点击 **保存**。请查看以下截图：![如何操作](img/00144.jpeg)
- en: Go to **Plugin Manager** (`https://jenkins-{domain-name}.rhcloud.com/pluginManager/`),
    and update all the installed plugins.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 **插件管理器**（`https://jenkins-{domain-name}.rhcloud.com/pluginManager/`），并更新所有已安装的插件。
- en: Finally, to test whether all of your existing jobs are working fine, start an
    existing job manually. If you followed the last recipe, then you will already
    have three Jenkins jobs listed on the Jenkins dashboard.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了测试你现有的所有任务是否正常运行，手动启动一个现有任务。如果你按照上一个步骤操作，那么你应该能在 Jenkins 仪表盘上看到三个 Jenkins
    任务。
- en: How it works…
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The OpenShift Jenkins cartridge allows a user to upgrade the Jenkins version
    by defining an environment variable, `JENKINS_WAR_PATH`. If this environment variable
    were used, then the OpenShift Jenkins cartridge will use the Jenkins `war` file
    located at this path. From step 1 through step 4, you first downloaded the latest
    version of Jenkins WAR and then created the `JENKINS_WAR_PATH` environment variable.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift Jenkins 插件允许用户通过定义一个名为 `JENKINS_WAR_PATH` 的环境变量来升级 Jenkins 版本。如果使用了这个环境变量，OpenShift
    Jenkins 插件将会使用该路径下的 Jenkins `war` 文件。在第 1 步到第 4 步中，你首先下载了最新版本的 Jenkins WAR 文件，然后创建了
    `JENKINS_WAR_PATH` 环境变量。
- en: You also created another environment variable called `JENKINS_JAR_CACHE_PATH`.
    This is required with Jenkins Version 1.540 or higher. The reason you need to
    set this environment variable is that if you don't set this environment variable,
    then Jenkins will try to cache the plugin in the user home directory at `~/.jenkins/cache/jars`.
    In OpenShift, you can only write to the `$OPENSHIFT_DATA_DIR` directory. This
    environment variable makes sure that JARs are cached in a writable directory;
    otherwise, your build will fail.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 你还创建了另一个环境变量，名为 `JENKINS_JAR_CACHE_PATH`。这个变量在 Jenkins 版本 1.540 或更高版本中是必需的。需要设置这个环境变量的原因是，如果不设置，Jenkins
    会尝试将插件缓存到用户主目录的 `~/.jenkins/cache/jars` 路径下。而在 OpenShift 中，你只能向 `$OPENSHIFT_DATA_DIR`
    目录写入数据。这个环境变量确保 JAR 文件被缓存到一个可写的目录，否则你的构建会失败。
- en: After setting the environment variables, you restarted Jenkins so that the new
    environment variables are picked up by Jenkins. You will now see the latest Jenkins
    version running.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置环境变量后，你重启了 Jenkins，以便让 Jenkins 识别新的环境变量。现在，你将看到运行的是最新版本的 Jenkins。
- en: See also
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Adding Jenkins CI to your application* recipe
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将 Jenkins CI 添加到你的应用程序*的步骤'
