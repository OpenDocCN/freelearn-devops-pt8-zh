- en: Puppet Roles and Profiles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet 角色与配置文件
- en: Now that we have a complete overview of the Puppet DSL and its concepts, it
    is time to look at how to build implementations based on Puppet that reflect your
    infrastructure settings and requirements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对 Puppet DSL 及其概念有了完整的了解，是时候看看如何基于 Puppet 构建反映你基础设施设置和需求的实现了。
- en: In the early days of Puppet, it was common practice to add resources and variables
    to a node classification. This mostly led to duplicate code and made refactoring
    almost impossible. This pattern mostly reflected the usual admin work, which was
    done by configuring individual systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Puppet 的早期，通常的做法是将资源和变量添加到节点分类中。这通常导致代码重复，使重构几乎不可能。这种模式大多反映了通常的管理员工作，即配置单个系统。
- en: To avoid difficult to manage and hard to maintain code, a community around Puppet
    modules emerged. This community took care to implement technical parts of a system
    into Puppet modules. Modules have the benefit of being reusable by parameters
    and get bug-fixes and new implementations faster due to shared efforts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免难以管理和维护的代码，Puppet 模块周围出现了一个社区。该社区致力于将系统的技术部分实现为 Puppet 模块。模块的好处在于可以通过参数重用，并且由于共享的努力，可以更快地修复错误和实现新功能。
- en: As we now have a large set of modules available, we must rethink the pattern
    of our node classification in combination with modules. Here, the roles and profiles
    pattern comes into play.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在有大量可用的模块，我们必须重新思考结合模块的节点分类模式。在这里，角色和配置文件模式发挥了作用。
- en: 'Within this chapter, the following topics will be covered:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Technical component modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术组件模块
- en: Implementing components in profiles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在配置文件中实现组件
- en: Building roles from profiles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从配置文件构建角色
- en: The business use case and the node classification
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务用例和节点分类
- en: Placing code on the Puppet server
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将代码放置在 Puppet 服务器上
- en: Technical component modules
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术组件模块
- en: Until now, we have referred to modules as a strict directory structure containing
    classes, static files, templates, and extensions. We now must differentiate between
    upstream or generic modules and our platform implementation modules.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我们一直将模块称为严格的目录结构，包含类、静态文件、模板和扩展。现在我们必须区分上游或通用模块与我们的平台实现模块。
- en: Modules that take care of a specific technical component are now referred to
    as technical component modules. Technical components themselves are a set of configurations
    for a certain software running on a system, such as Nginx, Postgres, or LDAP.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在负责特定技术组件的模块被称为技术组件模块。技术组件本身是为在系统上运行的某些软件（如 Nginx、Postgres 或 LDAP）配置的一组配置。
- en: 'There has always been the problem of whether a module is a technical component
    module or not. There are some patterns that allow you to identify technical component
    modules:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一直存在一个问题，即模块是否是技术组件模块。有一些模式可以帮助你识别技术组件模块：
- en: Developed upstream with active community
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在上游开发，拥有活跃的社区
- en: Open source with `README` and `LICENSE` files
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源，包含`README`和`LICENSE`文件
- en: Only manages what is required
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅管理所需内容
- en: Clearly described entry class with parameters for adoption and reusability
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清晰描述的入口类，包含采纳和可重用的参数
- en: Allows stacking together with other technical component classes
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许与其他技术组件类堆叠在一起
- en: Uses a module name related to the configured technology
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用与配置技术相关的模块名称
- en: Usually has support for multiple operating systems
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常支持多个操作系统
- en: Has public information such as package and configuration filenames
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有公共信息，如包和配置文件名
- en: Does not have private data, as your internal DNS server IP
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不包含私人数据，例如内部 DNS 服务器 IP
- en: Implementing components in profiles
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在配置文件中实现组件
- en: Puppet code that is not taken from upstream, but developed in-house describing
    your infrastructure, usually is an implementation of resources and upstream classes.
    This implementation is called a profile class.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 代码如果不是从上游获取，而是内部开发的，用于描述你的基础设施，通常是资源和上游类的实现。这种实现被称为配置文件类。
- en: Technically, a profile is a module containing classes, and optionally has parameters,
    defines, files, and templates. On very rare occasions, it might be valuable to
    also have custom facts or custom functions within profiles.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，配置文件是一个包含类的模块，通常还会有参数、定义、文件和模板。在极少数情况下，将自定义事实或自定义函数也包含在配置文件中可能是有价值的。
- en: Inside a profile, one specifies data and resources. Data can either be static
    data, which is valid for the whole platform, or placed into Hiera. Resources can
    be anything such as class, file, package, and service.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个配置文件内部，指定数据和资源。数据可以是静态数据，适用于整个平台，或者放入 Hiera 中。资源可以是任何东西，比如类、文件、包和服务。
- en: 'Combining these into a profile builds another layer of abstraction:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些内容组合成一个配置文件，构建出另一个抽象层：
- en: Data is abstracted by Hiera
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据通过 Hiera 进行抽象。
- en: CLI commands are abstracted by resource types
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CLI 命令通过资源类型进行抽象。
- en: Resource types are abstracted by technical component modules
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源类型通过技术组件模块进行抽象。
- en: Technical component modules are abstracted by profiles
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术组件模块通过配置文件进行抽象。
- en: When one searches for profiles on the internet, you will mostly find stubs with
    Apache, MySQL, and WordPress installation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在互联网上搜索配置文件时，你大多数会找到关于 Apache、MySQL 和 WordPress 安装的简短介绍。
- en: Profiles are not meant to be made public, as they usually contain private information
    about your infrastructure. Instead, one has to develop profiles on their own.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件不适合公开发布，因为它们通常包含关于你基础设施的私人信息。相反，你需要自己开发配置文件。
- en: 'Let''s start with an example: a `phpmyadmin` based database management system.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个例子开始：一个基于 `phpmyadmin` 的数据库管理系统。
- en: 'The system consists of several base technical components: remote login, backup,
    firewall, webserver, database, `php`, and `phpmyadmin`. Each of these components
    is managed by an upstream developed technical component module. The way we want
    to have the implementation is done in profiles:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 系统由多个基础技术组件组成：远程登录、备份、防火墙、Web 服务器、数据库、`php` 和 `phpmyadmin`。这些组件中的每一个都由上游开发的技术组件模块进行管理。我们希望的实现方式是通过配置文件完成的：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Instead of writing a single profile for every different setup, it is possible
    to either add parameters to the profile and make use of Hiera lookup, or to stack
    components together:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不必为每个不同的设置写一个单独的配置文件，你可以选择为配置文件添加参数并利用 Hiera 查找，或者将组件堆叠在一起：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The same pattern can be used for MySQL. The main `mysql` profile just installs
    a single MySQL instance using the `puppetlabs-mysql` module:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对 MySQL 使用相同的模式。主`mysql`配置文件仅使用`puppetlabs-mysql`模块安装一个 MySQL 实例：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The same pattern follows for the `php` and `phpmyadmin` installation using
    upstream modules:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的模式适用于使用上游模块安装 `php` 和 `phpmyadmin`。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Grouping profiles within a directory structure has no technical need. Think
    about an infrastructure that has lots of profiles or even lots of similar profiles,
    such as PostgreSQL, MySQL, MariaDB, Galera Cluster, or Oracle DB, and MSSQL. In
    this case, the grouping is preferred to flat file space, as many flat files lead
    to a difficult to read directory structure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录结构中对配置文件进行分组没有技术上的必要。想象一下一个基础设施，包含大量配置文件，甚至是大量相似的配置文件，如 PostgreSQL、MySQL、MariaDB、Galera
    Cluster、Oracle DB 和 MSSQL。在这种情况下，分组比使用平面文件结构更合适，因为许多平面文件会导致难以阅读的目录结构：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The business use case and node classification
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务使用场景和节点分类。
- en: With all implementations now being in place, we look forward to how to do node
    classification.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 随着所有实现的就位，我们开始考虑如何进行节点分类。
- en: There are several options available and which one is the best solution mostly
    depends on your platform.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种可用的选项，哪个是最佳解决方案，主要取决于你的平台。
- en: When you have a very diverse platform, the concept of roles as another abstraction
    layer is not very useful, as it mostly leads to duplicate code. In this case,
    most people decided to use profiles for node classification.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一个非常多样化的平台时，角色作为另一层抽象的概念并不是非常有用，因为它通常会导致代码重复。在这种情况下，大多数人选择使用配置文件进行节点分类。
- en: When you have large sets of identically configured systems, one wants to go
    ahead with the role pattern and classify systems by their business use case.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有大量相同配置的系统时，最好采用角色模式并按业务使用场景对系统进行分类。
- en: The business use case allows you to describe systems not by what they do, but
    by what they are used for.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 业务使用场景允许你描述系统时，不仅仅是按它们的功能来描述，更是按它们的使用目的来描述。
- en: 'Think about the `phpmyadmin` installation. Depending on use case and business
    owner, one might have different classification names:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 想一想`phpmyadmin`的安装。根据使用场景和业务方的不同，可能会有不同的分类名称：
- en: A technician will use the term `database control panel`. If the `phpmyadmin`
    installation is used by the sales team, it might be possible that they name the
    same system `crm data management system`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 技术人员会使用“`数据库控制面板`”这个术语。如果`phpmyadmin`安装是由销售团队使用的，可能他们会将这个系统称为`crm 数据管理系统`。
- en: The best solution is to identify the application stake holder and ask what the
    application is used for. This has the positive side effect of getting an overview
    of all business use cases. If you identify a system having more than one business
    use case, it is now easy to understand the business impact in the event of a system
    outage.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的解决方案是确定应用程序的相关方，并询问该应用程序的用途。这样可以带来一个积极的副作用，即获得所有业务使用案例的概览。如果你发现一个系统有多个业务使用案例，那么在系统发生故障时，就能更容易理解其业务影响。
- en: In the past, people stacked many applications onto a single system to allow
    for the best hardware usage. These are infrastructures where one node will have
    multiple business use cases. With the concept of virtual machines, this is obsolete.
    Today, a single virtual machine should serve a single business use case only.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，人们将许多应用程序堆叠到一个系统上，以便最大化硬件使用率。这些是单个节点上有多个业务使用案例的基础设施。随着虚拟机概念的出现，这种做法已经过时。如今，一个虚拟机应该只服务于一个业务使用案例。
- en: Building roles from profiles
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从配置文件构建角色
- en: Let's continue with the `phpmyadmin` example, which has been built for the sales
    department so that they can manage their CRM database.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用`phpmyadmin`的例子，它是为销售部门构建的，目的是让他们管理他们的CRM数据库。
- en: 'In this case, we build a role for that system based on implementation profiles.
    The name of the role reflects the business use case:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们根据实现配置文件为该系统构建一个角色。角色的名称反映了业务使用案例：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Within a role, one only declares profiles. No code logic, no resources, no data
    lookups. This allows flexible use of roles. Don't try to build almost identical
    roles, as this will lead to duplicate code. Instead, it would be better to create
    profiles with data lookups to reflect individual usage.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在角色中，只需要声明配置文件。不需要编写代码逻辑、资源或数据查找。这使得角色的使用更加灵活。不要尝试构建几乎相同的角色，因为这样会导致重复代码。相反，更好的做法是创建带有数据查找的配置文件，以便反映个人使用情况。
- en: 'The previously mentioned role can then be used for a node classification:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的角色可以用于节点分类：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can now see, we have a single instance with a single role. This is always
    useful when building systems from scratch. Within existing infrastructures, one
    can use this concept to identify which business units are affected when a single
    system is not available. Besides this, one learns about where to separate services
    when required.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们有一个单一实例和一个单一角色。这在从头开始构建系统时非常有用。在现有的基础设施中，人们可以使用这一概念来识别当一个系统不可用时，哪些业务单元会受到影响。除此之外，它还帮助我们了解在需要时应该在哪里分离服务。
- en: There are environments where the concept of roles and profiles does not fit
    very well. Mostly, these are existing platforms where multiple services (roles)
    are running on a single system and many different implementations for the same
    profile exist. In these cases, one should verify whether the implementation layer
    (profile) alone is sufficient.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有些环境中，角色和配置文件的概念并不适用。通常，这些是现有平台，在这些平台上，多个服务（角色）运行在同一系统上，并且同一配置文件有许多不同的实现。在这些情况下，应该验证仅依靠实现层（配置文件）是否足够。
- en: Placing code on the Puppet server
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将代码放在Puppet服务器上
- en: From a technical perspective, roles and profiles are classes inside modules.
    Usually, modules are put into the `modules` directory of an environment. But roles
    and profiles are different to modules, as they are implementations of modules
    and collections of implementations.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度看，角色和配置文件是模块中的类。通常，模块会放入环境的`modules`目录中。但是角色和配置文件不同于模块，它们是模块的实现和实现的集合。
- en: 'To reflect this different behavior, it is common practice to add another `module`
    directory to an environment. This configuration can be done in the `environment.conf`
    file inside an environment:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了反映这种不同的行为，通常的做法是向环境中添加另一个`module`目录。这个配置可以在环境中的`environment.conf`文件中完成：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Within our example, we have added a new path to the module path setting: site.
    This directory resides inside our environment (`/etc/puppetlabs/code/environments/production/site`).
    This directory will have all of our roles and profiles:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们已经向模块路径设置中添加了一个新路径：site。该目录位于我们的环境中（`/etc/puppetlabs/code/environments/production/site`）。该目录将包含我们所有的角色和配置文件：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This allows us to keep roles and profiles in a separate directory structure
    and have modules by itself.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就能将角色和配置文件保存在一个单独的目录结构中，并且模块可以单独存放。
- en: The Puppet control repository
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet控制仓库
- en: Usually, Puppet modules are the same as libraries that are developed upstream.
    We want to ensure that modules that we use within our Puppet code are stored in
    a way that allows upgrades. Therefore, we cannot place the modules directly in
    our environment Git repository. Besides this, we want to test Puppet code updates
    prior to putting them into production.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Puppet 模块与上游开发的库相同。我们希望确保在 Puppet 代码中使用的模块以一种可以升级的方式进行存储。因此，我们不能将模块直接放入我们的环境
    Git 仓库中。除此之外，我们还希望在将 Puppet 代码更新投入生产之前进行测试。
- en: 'Best practice is to have a control repository that has our roles and profiles,
    the manifest''s node classification, the environment configuration file, and Hiera
    v5 configuration. Now we add another file: `Puppetfile`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是拥有一个控制代码库，其中包含我们的角色和配置文件、清单的节点分类、环境配置文件和 Hiera v5 配置。现在我们再添加另一个文件：`Puppetfile`。
- en: 'A `Puppetfile` references modules and, optionally, their source location and
    version:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`Puppetfile` 引用模块，并可选地指定它们的源位置和版本：'
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When no source is given, the module will be installed from Puppet Forge ([https://forge.puppet.com](https://forge.puppet.com)).
    As most production systems are not allowed to connect to the internet, it is useful
    to have a clone of the upstream module development repository on your private
    Git server.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有给定源时，模块将从 Puppet Forge 安装（[https://forge.puppet.com](https://forge.puppet.com)）。由于大多数生产系统无法连接到互联网，因此在私有
    Git 服务器上拥有上游模块开发仓库的克隆是很有用的。
- en: 'A Puppet control repository can have the following files and directory structure:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 控制代码库可以具有以下文件和目录结构：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Synchronizing upstream modules
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步上游模块
- en: 'Usually, one can use the workstation for synchronization. First, an empty repository
    is created on the local Git server and cloned to the workstation. Within this
    local repository, a new remote location is added:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，可以使用工作站进行同步。首先，在本地 Git 服务器上创建一个空的代码库并克隆到工作站。在这个本地代码库中，添加一个新的远程位置：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now the upstream code is fetched:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在获取上游代码：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Git separates code and objects. Usually, upstream uses tags to identify version
    releases of their module. Tags are part of the non-code objects. Next, the non-code
    objects are fetched:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Git 将代码与对象分离。通常，上游使用标签来标识其模块的版本发布。标签是非代码对象的一部分。接下来，获取非代码对象：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now the local repository server gets the code pushed:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码被推送到本地代码库服务器：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Don''t forget to also `push` the tags:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了也要 `push` 标签：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: R10K code deployment
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R10K 代码部署
- en: Usually, companies have staging systems where a new development is tested prior
    to being put into production. The development team has a development stage. From
    this stage, the changes will be deployed to a quality gate stage and placed into
    the production stage after successful tests.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，公司会有一个暂存系统，其中新的开发会在投入生产前进行测试。开发团队有一个开发阶段。从这个阶段，变更将被部署到质量门阶段，并在成功测试后放入生产阶段。
- en: Many people use these names for the Puppet code environments. But what happens
    if your Puppet change will break the whole development stage? In this case, the
    development team is unable to continue working on urgent improvements or fixes.
    This can lead to time and cost intensive work where the development stage is built
    from scratch.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人使用这些名称来命名 Puppet 代码环境。但是，如果你的 Puppet 更改会破坏整个开发阶段会发生什么呢？在这种情况下，开发团队将无法继续进行紧急的改进或修复。这可能导致耗时且成本高昂的工作，需要从头开始重新构建开发阶段。
- en: But how do we develop and test Puppet code changes? Usually, this requires another
    stage for infrastructure developers. All other infrastructure stages (development,
    QA, production) are then deployed using the stable production Puppet environment
    code.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何开发和测试 Puppet 代码更改呢？通常，这需要为基础设施开发人员设置另一个阶段。所有其他基础设施阶段（开发、QA、生产）随后会使用稳定的生产
    Puppet 环境代码进行部署。
- en: 'This leads to two Puppet environments: **development** and **production**.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这就导致了两个 Puppet 环境：**开发**和**生产**。
- en: But we don't want these to be two separate Git repositories, as this makes the
    staging of changes very difficult. This is where R10K comes into place. R10K uses
    branches on the Puppet control repository and deploys these onto the Puppet Master
    as environments. Code changes can now be done by merge requests from one branch
    to another.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不希望这些是两个独立的 Git 仓库，因为这会使更改的分阶段变得非常困难。这就是 R10K 的作用所在。R10K 使用 Puppet 控制代码库中的分支，并将这些分支部署到
    Puppet Master 上作为环境。现在，代码更改可以通过从一个分支合并到另一个分支来完成。
- en: 'Names of branches can be freely chosen, except some special names that should
    not be used: master, agent, main. Especially for Git repositories, where the default
    branch will be master, this needs some reconfiguration on the default branch name.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 分支名称可以自由选择，但有一些特殊名称不应使用：master、agent、main。特别是对于 Git 仓库，其中默认分支为 master，需要重新配置默认分支名称。
- en: 'R10K must be installed and configured on the Puppet Master. We can use Puppet
    for installation:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在 Puppet Master 上安装并配置 R10K。我们可以使用 Puppet 来进行安装：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `r10k` configuration file must be placed at `/etc/puppetlabs/r10k/r10k.yaml`.
    Within this file, we activate the desired `cache` directory where `r10k` stores
    local copies of all repositories. Remember to keep these caches in clean state
    and remove the whole cache in a case of misbehavior relating to the local Git
    repository caches.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`r10k` 配置文件必须放置在 `/etc/puppetlabs/r10k/r10k.yaml` 目录下。在该文件中，我们激活所需的 `cache`
    目录，`r10k` 会在其中存储所有仓库的本地副本。记住保持这些缓存的干净状态，并在与本地 Git 仓库缓存相关的行为异常时，删除整个缓存。'
- en: R10K allows the usage of multiple control-repositories. These can easily coexist
    within one environment, as they get prefixed with the source name provided. Control
    repositories are placed into the sources section and get a unique name. Then,
    we specify the remote URL where R10K can get the code from. Code is deployed into
    the path mentioned within the `basedir` setting.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: R10K 允许使用多个控制仓库。这些仓库可以轻松地在一个环境中共存，因为它们会被加上提供的源名称作为前缀。控制仓库被放置在 `sources` 部分，并获得一个唯一的名称。然后，我们指定
    R10K 获取代码的远程 URL。代码被部署到 `basedir` 设置中提到的路径。
- en: 'The last two settings are related to fetching code. The first one refers to Git
    access. Within the Git setting, one can set a provider. There are two providers
    available: `shellgit` and rugged. The `shellgit` provider uses the `git` binary,
    which must be available on the Puppet master. The user who runs the `R10K` command
    must have a configured `git` shell environment, as specifying the `ssh` key to
    use for authorization. Rugged is a Ruby implementation where one can specify the Git
    `ssh` settings directly in a `r10k.yaml` file. Usually, `shellgit` is sufficient
    to use. The last setting specifies how R10K should fetch modules from Puppet Forge.
    Here, we can only specify a proxy that should be used:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的两个设置与获取代码相关。第一个设置涉及 Git 访问。在 Git 设置中，可以设置提供程序。提供程序有两个选项：`shellgit` 和 rugged。`shellgit`
    提供程序使用 `git` 二进制文件，必须在 Puppet 主机上可用。运行 `R10K` 命令的用户必须配置好 `git` Shell 环境，并指定用于授权的
    `ssh` 密钥。Rugged 是一个 Ruby 实现，可以直接在 `r10k.yaml` 文件中指定 Git `ssh` 设置。通常，使用 `shellgit`
    就足够了。最后一个设置指定了 R10K 如何从 Puppet Forge 获取模块。在这里，我们只能指定一个代理服务器：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The deployment of branches from a control repository and installation of modules
    is done by running `r10k`. Please ensure that you run this command only as the
    user who needs to fetch the code. When running this command as `root`, either
    ssh credentials might be wrong or the environment belongs to the `root` user afterwards.
    The parameter -v enables verbose mode:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从控制仓库部署分支和安装模块通过运行 `r10k` 命令来完成。请确保仅以需要获取代码的用户身份运行此命令。以 `root` 身份运行此命令时，可能是
    ssh 凭据错误，或者环境之后归属于 `root` 用户。参数 -v 启用详细模式：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Instead of manually running the `r10K` command-line tool, it is possible to
    install a webhook using the `puppet-r10k` module from `voxpupuli` ([https://github.com/voxpupili/puppet-r10k](https://github.com/voxpupuli/puppet-r10k)):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '可以通过安装来自 `voxpupuli` 的 `puppet-r10k` 模块来替代手动运行 `r10k` 命令行工具 ([https://github.com/voxpupili/puppet-r10k](https://github.com/voxpupuli/puppet-r10k)):'
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This webhook can be triggered from Git server or from a CI/CD test/deployment
    toolchain such as Jenkins or GoCD. Usually, a combination of both is a valid setup,
    where you want to deploy feature branches as fast as possible and run updates
    on a development or a production environment only after successful tests.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此 webhook 可以由 Git 服务器或 CI/CD 测试/部署工具链触发，例如 Jenkins 或 GoCD。通常，两者的组合是一种有效的设置，您可以尽快部署功能分支，并且仅在测试成功后才在开发或生产环境中运行更新。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: When building and maintaining Puppet code bases, it is a good idea to implement
    the roles and profiles pattern. It makes you define roles to cover all of your
    machine use cases. The roles mix and match profile classes, which are basically
    collectors of classes from custom and open source modules that manage actual resources.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建和维护 Puppet 代码库时，最好实施角色和配置文件模式。它要求您定义角色以覆盖所有机器使用场景。角色通过混合和匹配配置文件类，这些类基本上是从自定义和开源模块中收集的类，用来管理实际资源。
- en: When setting up your first large Puppet installation, it is a good idea to adhere
    to the pattern from day one, because it will allow you to scale your manifests
    without getting tangled up in complicated structures.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置您的第一个大型 Puppet 安装时，最好从第一天起就遵循这种模式，因为这样可以让您在不陷入复杂结构的情况下扩展清单。
- en: Deployment of Puppet code is managed via `r10k`, where Git branch names reflect
    your Puppet code quality. Using `Puppetfile` allows you to separate your own Puppet
    code development from upstream module development.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 代码的部署通过`r10k`管理，其中 Git 分支名称反映了您的 Puppet 代码质量。使用`Puppetfile`可以将您自己的 Puppet
    代码开发与上游模块开发分离开来。
- en: This concludes our tour of *Puppet Essentials*. We have covered quite some ground,
    but as you can imagine, we barely scratched the surface of some of the topics,
    such as Puppet code testing, provider development, or exploiting PuppetDB. What
    you have learned will most likely satisfy your immediate requirements. For information
    beyond these lessons, don't hesitate to look up the excellent online documentation
    at [https://docs.puppet.com/](https://docs.puppet.com/), or join the community
    and ask your questions in chat, Slack, or on the mailing list.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对*Puppet Essentials*的介绍。我们已经覆盖了相当多的内容，但正如您可以想象的那样，我们仅仅触及了一些话题的皮毛，比如 Puppet
    代码测试、提供者开发，或是利用 PuppetDB。您所学的内容最有可能满足您的即时需求。如需了解更多内容，请随时查阅[https://docs.puppet.com/](https://docs.puppet.com/)上的精彩在线文档，或者加入社区，在聊天、Slack
    或邮件列表中提出您的问题。
- en: Thanks for reading, and have lots of fun with Puppet and its family of management
    tools.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，希望您在使用 Puppet 及其管理工具家族时能充满乐趣。
