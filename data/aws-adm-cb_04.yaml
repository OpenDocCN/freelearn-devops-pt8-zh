- en: Using AWS Compute
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS 计算
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: Creating a key pair
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建密钥对
- en: Launching an instance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动实例
- en: Attaching storage
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加存储
- en: Securely accessing private instances
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全访问私有实例
- en: Auto scaling an application server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动扩展应用服务器
- en: Creating machine images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建机器映像
- en: Creating security groups
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建安全组
- en: Creating a load balancer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建负载均衡器
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '**Elastic Cloud Compute** (**EC2**) is by far the most utilized and complex
    service in the AWS catalogue. More than *just virtual machines*, EC2 provides
    a framework of sub-services to help you secure and manage your instances elastically.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**弹性云计算**（**EC2**）是 AWS 目录中使用最多且最复杂的服务。EC2 不仅仅是*虚拟机*，它提供了一套子服务框架，帮助你以弹性的方式管理和保护实例。'
- en: Creating a key pair
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建密钥对
- en: A key pair is used to access your instances via SSH. This is the quickest and
    easiest way to access your instances.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥对用于通过 SSH 访问实例。这是访问实例最快且最简单的方式。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To perform this recipe, you must have your AWS CLI tool configured correctly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行本食谱，你必须正确配置 AWS CLI 工具。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the key pair, and save it to disk:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建密钥对，并将其保存到磁盘：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Change the permissions on the created file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改创建文件的权限：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This call requests a new private key from EC2\. The response is then parsed
    using a JMESPath query, and the private key (in the `KeyMaterial` property) is
    saved to a new key file with the `.pem` extension.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该调用请求 EC2 提供一个新的私钥。响应将使用 JMESPath 查询进行解析，私钥（位于`KeyMaterial`属性中）将保存到一个新的 `.pem`
    扩展名的密钥文件中。
- en: Finally, we change the permissions on the key file so that it cannot be read
    by other users—this is required before SSH will allow you to use it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们更改密钥文件的权限，确保其他用户无法读取它——这是在 SSH 允许使用该密钥前的必要步骤。
- en: Launching an instance
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动实例
- en: There will be scenarios—usually when testing and developing your infrastructure
    code—when you need quick access to an instance. Creating it via the AWS CLI is
    the quickest and most consistent way to create one-off instances.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些场景下——通常是在测试和开发基础设施代码时——你可能需要快速访问一个实例。通过 AWS CLI 创建实例是创建临时实例最快且最一致的方式。
- en: There are other recipes in the book that will require a running instance. This
    recipe will get you started.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中有其他需要运行实例的食谱。本食谱将帮助你入门。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you must have an existing key pair.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本食谱，你必须拥有一个现有的密钥对。
- en: In this recipe, we are launching an instance of AWS Linux using an AMI ID in
    the `us-east-1` region. If you are working in a different region, you will need
    to update your `image-id` parameter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们使用位于`us-east-1`区域的 AMI ID 启动一个 AWS Linux 实例。如果你在不同区域工作，需要更新`image-id`参数。
- en: You must have configured your AWS CLI tool with working credentials.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须已使用有效的凭证配置 AWS CLI 工具。
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Run the following AWS CLI command, using your own key-pair name:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下 AWS CLI 命令，使用你自己的密钥对名称：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: While you can create an instance via the AWS web console, it involves many distracting
    options. When developing and testing, the CLI tool is the best way to provision
    instances.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以通过 AWS Web 控制台创建实例，但它涉及许多分散注意力的选项。在开发和测试时，CLI 工具是配置实例的最佳方式。
- en: While the `key-name` argument is optional, you will not be able to connect to
    your instance unless you have pre-configured some other way of logging in.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`key-name`参数是可选的，但除非你事先配置了其他登录方式，否则无法连接到你的实例。
- en: The `t2.micro` instance type used in this recipe is included in the AWS free
    tier. You can run one micro instance per month for free during the first 12 months
    of your usage. See [https://aws.amazon.com/free](https://aws.amazon.com/free)
    for more information.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中使用的`t2.micro`实例类型包含在 AWS 免费套餐中。你可以在使用的前 12 个月内，每月免费运行一个微型实例。更多信息请参见[https://aws.amazon.com/free](https://aws.amazon.com/free)。
- en: As no VPC or security groups are specified, the instance will be launched in
    your account's default VPC and security group. The default security group allows
    access from anywhere, on all ports, and so is not suitable for long-lived instances.
    You can modify an instance's security groups after it is launched, without stopping
    it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有指定 VPC 或安全组，实例将启动在你的账户的默认 VPC 和安全组中。默认安全组允许来自任何地方的所有端口的访问，因此不适合长期运行的实例。你可以在实例启动后修改其安全组，而无需停止实例。
- en: There's more...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you have created your own AMI, then you can change the `image-id` argument
    to quickly launch your specific AMI.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经创建了自己的AMI，那么你可以更改`image-id`参数来快速启动你的特定AMI。
- en: You may also want to take note of the `InstanceId` value in the response from
    the API, as you may need it for future commands.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想注意API响应中返回的`InstanceId`值，因为你可能需要在未来的命令中使用它。
- en: See also
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Creating a key pair* recipe
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建密钥对* 配方'
- en: The *Creating machine images* recipe
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建机器映像* 配方'
- en: Attaching storage
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加存储
- en: Ideally, you will have defined all your storage requirements up-front as code
    using a service such as CloudFormation. However, sometimes that is not possible
    due to application restrictions or changing requirements.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你应该在前期就通过像CloudFormation这样的服务定义所有存储需求作为代码。然而，有时由于应用程序限制或需求变化，这种方式无法实现。
- en: You can easily add additional storage to your instances while they are running
    by attaching a new volume.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过附加一个新卷来轻松地为实例添加额外的存储空间，且实例正在运行时也可以进行此操作。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，你将需要以下内容：
- en: A running instance's ID. It will start with `i-` followed by alphanumeric characters.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在运行的实例的ID。它将以`i-`开头，后跟字母数字字符。
- en: The AZ the instance is running in. This looks like the region name with a letter
    after it; for example, `us-east-1a`.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例运行所在的可用区（AZ）。这通常看起来像是区域名称后跟一个字母，例如，`us-east-1a`。
- en: In this recipe, we are using an AWS Linux instance. If you are using a different
    operating system, the steps to mount the volume will be different. We will be
    running an instance in the AZ `us-east-1a`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们使用的是AWS Linux实例。如果你使用的是其他操作系统，挂载卷的步骤会有所不同。我们将会在`us-east-1a`这个可用区中运行一个实例。
- en: You must have configured your AWS CLI tool with working credentials.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须已经用有效的凭证配置了AWS CLI工具。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a volume:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个卷：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Take note of the returned `VolumeId` in the response. It will start with `vol-`
    followed by alphanumeric characters.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 记下响应中返回的`VolumeId`，它将以`vol-`开头，后跟字母数字字符。
- en: 'Attach the volume to the instance, using the volume ID noted in the last step
    and the instance ID you started with:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将卷附加到实例，使用上一步中记录的卷ID和你最初启动的实例ID：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On the instance itself, mount the volume device:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实例本身上，挂载卷设备：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we start by creating a volume. Volumes are created from snapshots.
    If you do not specify a snapshot ID it uses a blank snapshot, and you get a blank
    volume.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们从创建卷开始。卷是从快照中创建的。如果你没有指定快照ID，它将使用一个空白快照，结果得到一个空白卷。
- en: While volumes are hosted redundantly, they are only hosted in a single AZ, so
    must be provisioned in the same AZ the instance is running in.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然卷是冗余托管的，但它们仅托管在单一的可用区内，因此必须在实例运行所在的相同可用区中进行配置。
- en: The `create-volume` command returns a response that includes the newly created
    volume's `VolumeId`. We then use this ID in the next step.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-volume` 命令返回一个响应，其中包含新创建卷的`VolumeId`。然后我们将在下一步中使用这个ID。'
- en: It can sometimes take a few seconds for a volume to become available. If you
    are scripting these commands, use the `aws ec2 wait` command to wait for the volume
    to become available.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，卷需要几秒钟才能变为可用状态。如果你正在编写这些命令，可以使用`aws ec2 wait`命令来等待卷变为可用状态。
- en: In step 3, we attach a volume to the instance. When attaching to an instance,
    you must specify the name of the device that it will be presented to the operating
    system as. Unfortunately, this does not guarantee what the device will appear
    as. In the case of AWS Linux, `/dev/sdf` becomes `/dev/xvdf`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步中，我们将一个卷附加到实例。当将卷附加到实例时，必须指定它将在操作系统中呈现为的设备名称。不幸的是，这并不能保证设备的实际显示名称。在AWS Linux的情况下，`/dev/sdf`会变成`/dev/xvdf`。
- en: Device naming is kernel-specific, so if you are using something other than AWS
    Linux, the device name may be different. See [http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html)
    for full details.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 设备命名是与内核相关的，因此如果你使用的是AWS Linux以外的系统，设备名称可能会有所不同。详细信息请参见 [http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html)。
- en: See also
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Launching an instance* recipe
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启动实例* 配方'
- en: The *Working with network storage* recipe in [Chapter 3](3061e8a1-9092-4f75-931a-8c4da66160b7.xhtml),
    *Storage and Content Delivery*
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](3061e8a1-9092-4f75-931a-8c4da66160b7.xhtml)中的 *使用网络存储* 配方，*存储与内容交付*'
- en: Securely accessing private instances
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全访问私有实例
- en: Any instance or resource living in a private subnet in your VPC will be inaccessible
    from the Internet. This makes good sense from a security perspective because it
    gives your instances a higher level of protection.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 任何位于VPC私有子网中的实例或资源都将无法从互联网访问。从安全角度来看，这样做是有道理的，因为它为你的实例提供了更高的保护级别。
- en: Of course, if they can't be accessed from the Internet, then they're not going
    to be easy to administer.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果它们无法从互联网访问，那么它们就不容易进行管理了。
- en: 'One common pattern is to use a VPN server as a single, highly controlled, entry
    point to your private network. This is what we''re going to show you in this recipe,
    as pictured in the following diagram:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的模式是使用VPN服务器作为进入你私有网络的单一、严格控制的入口点。这就是我们在本示例中将要展示的内容，如下图所示：
- en: '![](img/B06236_04_01.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06236_04_01.png)'
- en: Accessing private instances securely
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安全访问私有实例
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We're going to use OpenVPN for this example. They provide a free (for up to
    two users) AMI in the AWS marketplace, which has OpenVPN already installed and
    configured. You'll need to accept the terms and conditions for using this AMI.
    You can do so by visiting the AMI's marketplace page at [https://aws.amazon.com/marketplace/pp/B00MI40CAE/](https://aws.amazon.com/marketplace/pp/B00MI40CAE/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个示例中使用OpenVPN。它们在AWS市场提供一个免费的AMI（最多支持两个用户），该AMI已预装并配置了OpenVPN。你需要接受使用该AMI的条款和条件。你可以通过访问AMI的市场页面[https://aws.amazon.com/marketplace/pp/B00MI40CAE/](https://aws.amazon.com/marketplace/pp/B00MI40CAE/)来接受这些条款。
- en: You need to decide on a password, which will be your *temporary* admin password.
    We'll feed this password into a CloudFormation template and then change it after
    we create our stack.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要决定一个密码，这将是你的*临时*管理员密码。我们会将这个密码输入到CloudFormation模板中，然后在创建堆栈后再更改它。
- en: You can use the default VPC for this example.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用默认的VPC来完成这个示例。
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现……
- en: 'Create a new CloudFormation template and add the following `Mappings`. This
    is a list of all the latest `OpenVPN` AMIs in each region. We''re adding these
    to maximize region portability for our template—you can omit the regions you have
    no intention of using:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的CloudFormation模板并添加以下`Mappings`。这是每个区域中所有最新`OpenVPN` AMI的列表。我们添加这些映射是为了最大化模板的区域可移植性——你可以省略那些你不打算使用的区域：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We now need to define some `Parameters`. Firstly we''ll need to know which
    VPC and subnet to deploy our VPN instance to. Note that you need to specify a
    *public* subnet here, otherwise you won''t be able to access your OpenVPN server:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要定义一些`Parameters`。首先，我们需要知道将VPN实例部署到哪个VPC和子网。请注意，这里需要指定一个*公共*子网，否则你将无法访问OpenVPN服务器：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We also need to define `InstanceType` and `KeyName`. These are the EC2 instance
    class and SSH key pair to use to launch our OpenVPN server:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要定义`InstanceType`和`KeyName`。这分别是用于启动OpenVPN服务器的EC2实例类型和SSH密钥对：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need a parameter for `AdminPassword`. This is the temporary password which
    will be given to the `openvpn` user (administrator) when the server starts up:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个`AdminPassword`的参数。这是启动时分配给`openvpn`用户（管理员）的临时密码：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The last parameter is the CIDR block, which we wish to allow to connect to
    our VPN server. You may wish to lock this down to the public IP range of your
    corporate network, for example:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个参数是CIDR块，我们希望允许其连接到我们的VPN服务器。例如，你可以将其限制为公司网络的公共IP范围：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The first `Resource` we need to define is the security group our OpenVPN server
    will live in. You''ll also use this security group to allow access to other resources
    in your network. Add it to your template as follows:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要定义的第一个`Resource`是OpenVPN服务器所在的安全组。你还将使用这个安全组来允许访问网络中的其他资源。按如下方式将其添加到模板中：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can now define the actual OpenVPN instance itself. You''ll notice that we
    are explicitly configuring the network interface. This is required, because we
    want to declare that this instance must get a public IP address (otherwise you
    won''t be able to access it). In the `UserData`, we declare some variables that
    the OpenVPN software will pick up when it starts so that it can configure itself:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以定义实际的OpenVPN实例了。你会注意到我们正在显式配置网络接口。这是必要的，因为我们希望声明这个实例必须获得一个公共IP地址（否则你将无法访问它）。在`UserData`中，我们声明了一些变量，当OpenVPN软件启动时，它会读取这些变量以进行自我配置：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we add some helpful `Outputs`:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们添加一些有用的`Outputs`：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Go ahead and launch this stack in the CloudFormation web console, or via the
    CLI, with the following command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，可以通过CloudFormation网页控制台或CLI使用以下命令启动这个堆栈：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Configuration
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: 'Once your stack is created, you''ll want to change the password for the `openvpn`
    user (administrator). Go to the admin control panel and do this now: `https://<ip-or-hostname-of-vpn-server>/admin`.
    If your VPN server is operating as expected you''ll be greeted with a status page
    after logging in, as pictured in the following screenshot:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦堆栈创建完成，您需要更改`openvpn`用户（管理员）的密码。现在请访问管理员控制面板并执行此操作：`https://<vpn服务器的ip或主机名>/admin`。如果VPN服务器运行正常，登录后您将看到一个状态页面，如下图所示：
- en: '![](img/B06236_04_02.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06236_04_02.png)'
- en: 'While you''re there, you should create a non-administrator user account. This
    will be the account you''ll use to connect to the VPN. Add this account on the
    User Permissions page as pictured in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里时，您应该创建一个非管理员用户帐户。这个帐户将用于连接VPN。在用户权限页面上添加该帐户，如下图所示：
- en: '![](img/B06236_04_03-1.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06236_04_03-1.png)'
- en: 'Under Server Network Settings, in the Hostname or IP address field, enter the
    hostname or IP address of the server. This step is important, and when you download
    your OpenVPN config file from the server (next step), it will make your life much
    easier if it has the correct hostname or IP address in it. The next screenshot
    shows what you can expect to see on the Server Network Settings page:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器网络设置中，在主机名或IP地址字段中，输入服务器的主机名或IP地址。此步骤很重要，下载OpenVPN配置文件时（下一步），如果它包含正确的主机名或IP地址，会让您的操作变得更加简单。以下截图显示了服务器网络设置页面上您可以预期看到的内容：
- en: '![](img/B06236_04_04.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06236_04_04.png)'
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'You should now be able to connect to your VPN server. Go to the user login
    page and log in with the credentials you gave to the previously mentioned non-administrator
    user:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够连接到您的VPN服务器了。请转到用户登录页面，并使用您之前为非管理员用户设置的凭证进行登录：
- en: '`https://<ip-or-hostname-of-vpn-server>/`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://<vpn服务器的ip或主机名>/`'
- en: After logging in, you will have the option to download the OpenVPN client with
    configuration which is specific to your account. Alternatively, if you already
    have a VPN client installed, you can just download the configuration on its own.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，您将有选项下载特定于您帐户的OpenVPN客户端及其配置文件。或者，如果您已经安装了VPN客户端，您也可以单独下载配置文件。
- en: There's more...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are a couple of important points you''ll need to keep in mind now that
    you are up and running with an OpenVPN server:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然您的OpenVPN服务器已经启动并运行，您需要记住几个重要的事项：
- en: If you need to SSH to the instance, you must connect with the username `openvpnas`
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要通过SSH连接到实例，您必须使用用户名`openvpnas`进行连接。
- en: To access your other instances, you'll need to allow connections from the VPN
    security group created in this recipe
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要访问其他实例，您需要允许来自本食谱中创建的VPN安全组的连接。
- en: Auto scaling an application server
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动扩展应用服务器
- en: '**Auto scaling** is a fundamental component of compute in the cloud. It provides
    not only the ability to scale up and down in response to application load, but
    also redundancy, by ensuring that capacity is always available. Even in the unlikely
    event of an AZ outage, the auto scaling group will ensure that instances are available
    to run your application.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动扩展**是云计算中的一个基本组成部分。它不仅能根据应用负载动态扩展和缩减容量，还能通过确保始终有可用的容量提供冗余。即使在极不可能发生的可用区故障情况下，自动扩展组也会确保实例能够运行您的应用程序。'
- en: Auto scaling also allows you to pay for only the EC2 capacity you need, because
    underutilized servers can be automatically de-provisioned.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 自动扩展还允许您仅为所需的EC2容量付费，因为使用不足的服务器可以被自动撤销配置。
- en: Getting ready
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You must supply two or more subnet IDs for this recipe to work.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须提供两个或更多子网ID，以便此食谱能够正常工作。
- en: The following example uses an AWS Linux AMI in the `us-east-1` region. Update
    the parameters as required if you are working in a different region.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用的是`us-east-1`区域的AWS Linux AMI。如果您在其他区域工作，请根据需要更新参数。
- en: How to do it...
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start by defining the template version and description:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先定义模板版本和描述：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add a `Parameters` section with the required parameters that will be used later
    in the template:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`Parameters`部分，包含稍后将在模板中使用的必需参数：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Still under the `Parameters` section, add the optional instance configuration
    parameters:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Parameters`部分下，添加可选的实例配置参数：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Still under the `Parameters` section, add the optional auto scaling group-configuration
    parameters:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Parameters`部分下，添加可选的自动扩展组配置参数：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add a `Resources` section, and define the auto scaling group resource:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`Resources`部分，定义自动扩展组资源：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Still under the `Resources` section, define the launch configuration used by
    the auto scaling group:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`Resources`部分下，定义自动扩展组使用的启动配置：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, define two scaling policy resources—one to scale up and the other to
    scale down:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义两个扩展策略资源——一个用于扩展实例数量，另一个用于缩减实例数量：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Define an alarm that will alert when the CPU goes *over* the `ThresholdCPUHigh`
    parameter:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个报警，当 CPU 超过`ThresholdCPUHigh`参数时发出警报：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, define an alarm that will alert when the CPU goes *under* the `ThresholdCPULow`
    parameter:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，定义一个报警，当 CPU 低于`ThresholdCPULow`参数时发出警报：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save the template with the filename `04-auto-scaling-an-application-server.yaml`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模板保存为文件名`04-auto-scaling-an-application-server.yaml`。
- en: 'Launch the template with the following AWS CLI command, supplying your subnet
    IDs:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 AWS CLI 命令启动模板，并提供你的子网 ID：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'This example defines an auto scaling group and the dependent resources. These
    include the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例定义了一个自动扩展组及其依赖资源，具体包括以下内容：
- en: A launch configuration to use when launching new instances
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动配置，用于启动新实例
- en: Two scaling policies, one to scale the number of instances up, and an inverse
    policy to scale back down
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个扩展策略，一个用于扩展实例数量，另一个逆向策略用于缩减实例数量
- en: An alarm to alert when the CPU crosses a certain threshold, for a certain number
    of minutes
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 CPU 跨越某个阈值并持续一定时间时，触发报警
- en: The auto scaling group and launch-configuration resource objects in this example
    use mostly default values. You will need to specify your own `SecurityGroups`
    and a `KeyName` parameter in the `LaunchConfiguration` resource configuration
    if you want to be able to connect to the instances (for example, via SSH).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例中的自动扩展组和启动配置资源对象大多数使用的是默认值。如果你希望能够连接到实例（例如，通过 SSH），你需要在`LaunchConfiguration`资源配置中指定自己的`SecurityGroups`和`KeyName`参数。
- en: AWS will automatically take care of spreading your instances evenly over the
    subnets you have configured, so make sure they are in different AZs! When scaling
    down, the oldest instances will be removed before the newer ones.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 会自动确保将你的实例均匀分布到你配置的子网中，因此请确保它们位于不同的可用区（AZ）中！当缩减时，最旧的实例会先被删除，再删除较新的实例。
- en: Scaling policies
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展策略
- en: The scaling policies detail how many instances to create or delete when they
    are triggered. It also defines a `Cooldown` value, which helps prevent *flapping*
    servers—when servers are created and deleted before they have finished starting
    and are useful.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展策略详细说明了在触发时要创建或删除多少个实例。它还定义了一个`Cooldown`值，帮助防止*反复波动*的服务器——即服务器在启动完成并变得有用之前就被创建和删除。
- en: While the scaling policies in this example use equal values, you might want
    to change that so your application can scale *up* quickly, and scale *down* slowly
    for the best user experience.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个示例中的扩展策略使用了相同的值，但你可能想要调整它们，以便让你的应用程序能够快速*扩展*，并且为了最佳用户体验，*缩减*速度较慢。
- en: Alarms
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报警
- en: The `CPUHighAlarm` parameter will alert when the average CPU utilization goes
    over the value set in the `ThresholdCPUHigh` parameter. This alert will be sent
    to the `ScaleUpPolicy` resource provisioning more instances, which will bring
    the average CPU utilization down across the whole auto scaling group. As the name
    suggests, the `CPULowAlarm` parameter does the reverse when the average CPU utilization
    goes under the `ThresholdCPULow` parameter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`CPUHighAlarm`参数将在平均 CPU 利用率超过`ThresholdCPUHigh`参数中设置的值时发出警报。此警报将被发送到`ScaleUpPolicy`资源，启动更多实例，从而降低整个自动扩展组的平均
    CPU 利用率。顾名思义，当平均 CPU 利用率低于`ThresholdCPULow`参数时，`CPULowAlarm`参数会执行相反操作。'
- en: This means that new instances will be launched until the CPU utilization across
    the auto scaling group stabilizes somewhere between 40-60% (based on the default
    parameter values), or the `MaxSize` of instances is reached.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着新的实例将会被启动，直到自动扩展组中的 CPU 利用率稳定在40-60%之间（基于默认的参数值），或者实例的`MaxSize`达到上限。
- en: It is very important to leave a gap between the high and low alarms thresholds.
    If they are too close together, the alarms will not stabilize and you will see
    instances created and destroyed almost continually.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在高低报警阈值之间留有间隙非常重要。如果它们设置得过于接近，报警将无法稳定，你会看到实例几乎不断地被创建和销毁。
- en: The minimum charge for an instance is *one hour*, so creating and destroying
    them multiple times in one hour may result in higher than expected charges.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 实例的最短计费时间是*一小时*，因此在一小时内多次创建和销毁实例可能会导致比预期更高的费用。
- en: Creating machine images
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建机器镜像
- en: Creating or *baking* your own **Amazon Machine Images** (**AMIs**) is a key
    part of systems administration in AWS. Having a pre-baked image helps you provision
    your servers faster, easier, and more consistently than configuring it by hand.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建或*构建*你自己的**Amazon Machine Images**（**AMIs**）是AWS系统管理中的关键部分。拥有一个预构建的镜像可以帮助你比手动配置更快、更容易且更一致地配置服务器。
- en: Packer is the de facto standard tool that helps you make your own AMIs. By automating
    the launch, configuration, and clean-up of your instances, it makes sure you get
    a repeatable image every time.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Packer是一个事实标准工具，帮助你制作自己的AMI。通过自动化实例的启动、配置和清理，它确保每次都能得到一个可重复的镜像。
- en: In this recipe, we will create an image with the Apache web server pre-installed
    and configured. While this is a simple example, it is also a very common use-case.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个预装并配置好的Apache web服务器镜像。虽然这是一个简单的例子，但它也是一个非常常见的使用场景。
- en: By baking-in your web server, you can scale up your web serving layer to dynamically
    match the demands on your websites. Having the software already installed and
    configured means you get the fastest and most reliable start-up possible.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将你的web服务器预先配置到镜像中，你可以根据网站的需求动态扩展web服务层。预装和配置好的软件意味着你可以获得最快和最可靠的启动体验。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you must have the Packer tool available on your system. Download
    and install Packer from the project's website [https://www.packer.io/downloads.html](https://www.packer.io/downloads.html).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，你必须在系统中安装Packer工具。从项目的官网[https://www.packer.io/downloads.html](https://www.packer.io/downloads.html)下载并安装Packer。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a new Packer template file, and start by defining an `amazon-ebs` builder
    in the `builders` section:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Packer模板文件，并首先在`builders`部分定义一个`amazon-ebs`构建器：
- en: '[PRE25]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The entire template file must be a valid JSON object. Remember to enclose the
    sections in curly braces: `{ ... }`.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 整个模板文件必须是一个有效的JSON对象。记得将各个部分用大括号`{ ... }`括起来。
- en: 'Create a `provisioners` section, and include the following snippet to install
    and activate Apache:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`provisioners`部分，并包含以下代码片段来安装并激活Apache：
- en: '[PRE26]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save the file with a specific name, such as `04-creating-machine-images.json`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用特定的文件名保存文件，例如`04-creating-machine-images.json`。
- en: 'Validate the configuration file you''ve created with the following `packer
    validate` command:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下`packer validate`命令验证你创建的配置文件：
- en: '[PRE27]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'When valid, build the AMI with the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当配置有效时，使用以下命令构建AMI：
- en: '[PRE28]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Wait until the process is complete. While it is running, you will see an output
    similar to the following:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待直到过程完成。在此期间，你将看到类似以下的输出：
- en: '![](img/B06236_04_05.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06236_04_05.png)'
- en: 'Take note of the AMI ID returned by Packer so that you can use it when launching
    instances in the future:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录Packer返回的AMI ID，以便将来启动实例时使用：
- en: '![](img/B06236_04_06.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06236_04_06.png)'
- en: How it works...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: While this is a very simple recipe, there is a lot going on behind the scenes.
    This is why we recommend you use Packer to create your machine images.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个非常简单的配方，但背后有许多操作。这也是我们推荐使用Packer来创建机器镜像的原因。
- en: Template
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板
- en: In the `builders` section of the template, we define our build details.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板的`builders`部分，我们定义了构建的详细信息。
- en: 'We are using the most common type of AMI builder: `amazon-ebs`. There are other
    types of AWS builders, for instance, storage-backed instance types.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用最常见的AMI构建器类型：`amazon-ebs`。还有其他类型的AWS构建器，例如存储支持的实例类型。
- en: Next, we define the type of instance to use when baking.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义在创建镜像时使用的实例类型。
- en: Make sure that you can often decrease the time it takes to bake your instance
    by using a larger instance size. Remember that the minimum price paid for an instance
    is one hour of billable time.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你能够通过使用更大的实例类型来缩短构建实例的时间。记住，实例的最短计费时间为一小时。
- en: The `source_ami` property in this recipe is an AWS Linux AMI ID in the `region`
    we have specified. The `ssh_username` allows you to set the username used to connect
    and run `provisioners` on the instance. This will be determined by your operating
    system, which in our case is `ec2-user`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中的`source_ami`属性是我们指定的`region`中的AWS Linux AMI ID。`ssh_username`允许你设置用于连接并运行`provisioners`的用户名。这个用户名取决于你的操作系统，在我们的例子中是`ec2-user`。
- en: Finally, the `ami_name` field includes the built-in Packer variable `{{timestamp}}`.
    This ensures the AMI you create will always have a unique name.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`ami_name` 字段包含内置的 Packer 变量 `{{timestamp}}`。这确保你创建的 AMI 始终具有唯一的名称。
- en: Validate the template
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证模板
- en: The `packer validate` command is a quick way to ensure your template is free
    of syntax errors before you launch any instances.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`packer validate` 命令是确保模板没有语法错误的一种快速方法，适合在启动任何实例之前使用。'
- en: Build the AMI
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 AMI
- en: 'Once you have created and validated your template, the `packer build` command
    does the following for you:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建并验证了模板，`packer build` 命令会为你执行以下操作：
- en: Creates a one-time key pair for SSH access to the instance
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一次性密钥对以便通过 SSH 访问实例
- en: Creates a dedicated security group to control access to the instance
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建专用的安全组来控制对实例的访问
- en: Launches an instance
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动实例
- en: Waits until SSH is ready to receive connections
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待直到 SSH 准备好接收连接
- en: Runs the provisioner steps on the instance
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实例上执行配置步骤
- en: Stops the instance
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止实例
- en: Generates an AMI from the stopped instance
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从停止的实例生成 AMI
- en: Terminates the instance
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终止实例
- en: Check the Packer documentation for more provisioners and functionality at [https://www.packer.io/docs/](https://www.packer.io/docs/).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 Packer 文档以获取更多的提供者和功能，网址为 [https://www.packer.io/docs/](https://www.packer.io/docs/)。
- en: There's more...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While Packer makes the administration of images much easier on AWS, there are
    still a few things to watch out for.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Packer 使得在 AWS 上管理镜像变得更加轻松，但仍然有一些需要注意的地方。
- en: Debugging
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: Obviously, with so many steps being automated for you, there are many things
    that can potentially go wrong. Packer gives you a few different ways to debug
    issues with your builds.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，既然许多步骤已经为你自动化，还是有很多事情可能出错。Packer 提供了几种不同的方式来调试构建过程中的问题。
- en: One of the most useful arguments to use with Packer is the `-debug` flag. This
    will force you to manually confirm each step *before* it takes place. Doing this
    makes it easy to work out exactly which step in the command is failing, which
    in turn usually makes it obvious what needs to be changed.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Packer 时，最有用的参数之一是 `-debug` 标志。这个标志会强制你在每一步操作*执行之前*手动确认。这样做可以让你很容易地找出命令中哪一步出错，从而通常能够明确需要更改的地方。
- en: Another useful thing to do is to raise the level of logging output during a
    Packer command. You can do this by setting the `PACKER_LOG` variable to `true`.
    The easiest way to do this is with `PACKER_LOG=1` at the beginning of your Packer
    command line. This will mean you get a lot more information printed to the console
    (for example, SSH logs, AWS API calls, and so on) during the command. You may
    even want to run with this level of logging normally in your builds, for auditing
    purposes.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的做法是在 Packer 命令期间提高日志输出的级别。你可以通过将 `PACKER_LOG` 变量设置为 `true` 来实现。最简单的方式是在
    Packer 命令行前面加上 `PACKER_LOG=1`。这将意味着在命令执行期间，你会获得更多的信息打印到控制台（例如，SSH 日志、AWS API 调用等）。你可能还希望在构建过程中正常使用此级别的日志记录，作为审计用途。
- en: Orphaned resources
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 孤立资源
- en: Packer does a great job of managing and cleaning up the resource it uses, but
    it can only do that while it is running.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Packer 在管理和清理它所使用的资源方面做得很好，但它只能在运行期间完成这些工作。
- en: If your Packer job aborts for any reason (most likely network issues) then there
    may be some resources left **orphaned**, or **unmanaged**. It is good practice
    to check for any Packer instances (they will have *Packer* in their name), and
    stop them if there are no active Packer jobs running.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Packer 任务因任何原因中止（最可能是网络问题），可能会有一些资源变成**孤立**或**未管理**的状态。最好检查是否有任何 Packer
    实例（它们的名称中会包含 *Packer*），如果没有正在运行的 Packer 任务，最好将它们停止。
- en: You may also need to clean up any leftover key pairs and security groups, but
    this is less of an issue as there is no cost associated with them (unlike instances).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还需要清理任何剩余的密钥对和安全组，但这不是大问题，因为这些没有费用（不像实例）。
- en: Deregistering AMIs
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注销 AMI
- en: As it becomes easier to create AMIs, you may find you end up with more than
    you need!
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 随着创建 AMI 的过程变得越来越简单，你可能会发现自己最终创建了超过需要的数量！
- en: AMIs are made up of EC2 snapshots, which are stored in S3\. There is a cost
    associated with storing snapshots, so you will want to clean them up periodically.
    Given the size of most AMIs (usually a few GBs), it is unlikely to be one of your
    major costs.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: AMI 由 EC2 快照组成，这些快照存储在 S3 中。存储快照是有成本的，因此你需要定期清理它们。鉴于大多数 AMI 的大小（通常为几 GB），它不太可能成为你主要的费用来源。
- en: An even greater cost is the administrative overhead of managing too many AMIs.
    As your images improve and fixes are applied (especially security fixes), you
    may want to prevent people from using them.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更大的成本是管理过多 AMI 的行政开销。随着镜像的改进和修复（尤其是安全修复）的应用，你可能希望阻止他人使用这些镜像。
- en: To remove an AMI, you must first *deregister* it, and then remove the underlying
    snapshots.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除 AMI，必须首先 *注销* 它，然后删除其底层快照。
- en: Make sure you do not deregister AMIs that are currently in use. For example,
    an auto scaling group that references a deregistered AMI will fail to launch new
    instances!
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 确保不要注销正在使用中的 AMI。例如，引用已注销 AMI 的自动扩展组将无法启动新实例！
- en: You can easily deregister snapshots through the web console or using the AWS
    CLI tool.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过网页控制台或使用 AWS CLI 工具轻松注销快照。
- en: Once an AMI is no longer registered, you can remove the associated snapshots.
    Packer automatically adds the AMI ID to the snapshots' description. By searching
    your snapshots for the deregistered AMI ID, you can find which ones need to be
    deleted.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 AMI 不再注册，你就可以删除关联的快照。Packer 会自动将 AMI ID 添加到快照的描述中。通过搜索快照中的已注销 AMI ID，你可以找到需要删除的快照。
- en: You will not be able to delete snapshots if the AMI has not been deregistered,
    or if the deregistration is still taking place (it can take a few minutes).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 AMI 没有被注销，或者注销过程仍在进行中（可能需要几分钟），你将无法删除快照。
- en: Other platforms
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他平台
- en: It is also worth noting that Packer can build for more platforms that just AWS.
    You can also build images for VMWare, Docker, and many others.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得注意的是，Packer 不仅可以为 AWS 构建镜像。你还可以为 VMWare、Docker 等其他平台构建镜像。
- en: This means you could build almost exactly the same machine image locally (for
    example, using Docker) as you do in AWS. This makes it much more convenient when
    setting up local development environments, for example.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以在本地几乎完全相同地构建机器镜像（例如，使用 Docker），就像在 AWS 中一样。这使得在设置本地开发环境时更加方便。
- en: Check the `builders` section of the Packer documentation for details.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅 Packer 文档中的 `builders` 部分以获取详细信息。
- en: Creating security groups
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建安全组
- en: AWS describes security groups as *virtual firewalls*. While this analogy helps
    newcomers to the EC2 platform understand their purpose and function, it's probably
    more accurate to describe them as a *firewall-like* method of authorizing traffic.
    They don't offer all the functionality you'd find in a traditional firewall, but
    this simplification also makes them extremely powerful, particularly when combined
    with Infrastructure as Code and modern SDLC practices.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 将安全组描述为 *虚拟防火墙*。虽然这个类比有助于新手理解 EC2 平台的目的和功能，但更准确的描述是将它们看作一种 *防火墙式* 的流量授权方法。它们并不像传统防火墙那样提供所有功能，但这种简化也使得它们非常强大，尤其是与基础设施即代码和现代
    SDLC 实践相结合时。
- en: We're going to go through a basic scenario involving a web server and load balancer.
    We want the load balancer to respond to HTTP requests from everywhere, and we
    want to isolate the web server from everything except the load balancer.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一个基本场景来演示，涉及到 Web 服务器和负载均衡器。我们希望负载均衡器能够响应来自任何地方的 HTTP 请求，并且希望将 Web 服务器与除了负载均衡器之外的所有内容隔离。
- en: Getting ready
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before we get started there''s a small list of things you''ll need to have
    ready:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，有一个小清单是你需要准备的：
- en: '`AmiId` This is the ID of an AMI in your region. For this recipe, we''d recommend
    using an AWS Linux AMI because our instance will attempt to run some `yum` commands
    on startup.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmiId` 这是你所在区域的 AMI ID。对于本教程，我们建议使用 AWS Linux AMI，因为我们的实例将尝试在启动时运行一些 `yum`
    命令。'
- en: '`VPCID`: This is the ID of the VPC you wish to launch the EC2 server into.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VPCID`：这是你希望启动 EC2 服务器的 VPC ID。'
- en: '`SubnetIDs`: These are the subnets which our EC2 instance can launch in.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SubnetIDs`：这些是我们的 EC2 实例可以启动的子网。'
- en: How to do it...
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open up your text editor and create a new CloudFormation template. We''re going
    to start by adding a few `Parameters` as follows:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的文本编辑器并创建一个新的 CloudFormation 模板。我们将从添加以下几个 `Parameters` 开始：
- en: '[PRE29]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s take a look at a security group we''ll apply to a public load balancer:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看看我们将应用于公共负载均衡器的安全组：
- en: '[PRE30]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Anything which resides in this security group will allow inbound TCP connections
    on port `80` from anywhere (`0.0.0.0/0`). Note that a security group can contain
    more than one rule; we'd almost certainly want to also allow HTTPS (`443`), but
    we've left it out to simplify this recipe.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 任何位于此安全组中的内容都会允许从任何地方（`0.0.0.0/0`）通过端口 `80` 进行 TCP 连接。请注意，一个安全组可以包含多个规则；我们几乎肯定还需要允许
    HTTPS（`443`），但为了简化示例，我们省略了这一部分。
- en: 'Now let''s look at a security group for a web server sitting behind our load
    balancer:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下位于负载均衡器后面的 Web 服务器的安全组：
- en: '[PRE31]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here you can see we are not specifying a source IP range. Instead, we're specifying
    a source security group, which we will accept connections from. In this case,
    we're saying that we want to allow anything from our ELB security group to connect
    to anything in our EC2 instance security group on port `80`.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你可以看到我们没有指定源 IP 范围。相反，我们指定了一个源安全组，我们将接受来自该安全组的连接。在这种情况下，我们表示希望允许来自我们的 ELB
    安全组的任何内容连接到我们的 EC2 实例安全组中的任何内容，端口为 `80`。
- en: Since this is the only rule we're specifying, our web server will not accept
    connections from anywhere except our load balancer, to port `80` or otherwise.
    Our web server isn't wide open to the Internet, and it is even isolated from other
    instances in our VPC
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是我们指定的唯一规则，我们的 Web 服务器将不会接受来自任何地方的连接，除非是来自我们的负载均衡器，且仅限于端口 `80`。我们的 Web 服务器并没有完全暴露在互联网上，它甚至与
    VPC 中的其他实例隔离。
- en: Remember that multiple instances can reside in a security group. In a scenario
    where you have multiple web servers attached to this load balancer it would be
    unnecessary, inefficient, and somewhat of an anti-pattern to create a new security
    group for each web server. Given that all web servers attached to this load balancer
    would be serving the same role or function, it makes sense to apply the same security
    group to them.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，多个实例可以位于同一个安全组中。如果你有多个 Web 服务器连接到这个负载均衡器，给每个 Web 服务器创建一个新的安全组将是不必要的、低效的，甚至有些反模式。由于所有连接到该负载均衡器的
    Web 服务器都将承担相同的角色或功能，因此将相同的安全组应用于它们是有意义的。
- en: This is where the power of security groups really comes in. If an EC2 instance
    is serving multiple roles—let's say you have an outbound HTTP proxy server in
    your VPC which you also want to act as an SMTP relay—then you can simply apply
    multiple security groups to it.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是安全组真正强大的地方。如果一个 EC2 实例担任多个角色——假设你在 VPC 中有一个出站的 HTTP 代理服务器，并且你也希望它充当 SMTP
    中继——那么你可以简单地为其应用多个安全组。
- en: Next, we need to add our load balancer. This is probably the most basic load
    balancer configuration you'll come across. The following code will give you a
    load balancer, a listener and a target group containing our EC2 instance.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加负载均衡器。这可能是你遇到的最基础的负载均衡器配置。以下代码将为你提供一个负载均衡器、一个监听器以及一个包含我们 EC2 实例的目标组。
- en: '[PRE32]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The last resource we'll add to our template is an EC2 server. This server will
    install and start `nginx` when it boots.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加到模板中的最后一个资源是一个 EC2 服务器。当该服务器启动时，它将安装并启动 `nginx`。
- en: '[PRE33]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Lastly, we're going to add some `Outputs` to the template to make it a little
    more convenient to use our ELB and EC2 instance after the stack is created.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将向模板中添加一些 `Outputs`，使得在堆栈创建后使用我们的 ELB 和 EC2 实例更为方便。
- en: '[PRE34]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Go ahead and launch this template using the CloudFormation web console or the
    AWS CLI.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续使用 CloudFormation Web 控制台或 AWS CLI 启动这个模板。
- en: There's more...
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'You''ll eventually run into circular dependency issues when configuring security
    groups using CloudFormation. Let''s say you want all servers in our `ExampleEC2InstanceSecurityGroup`
    to be able to access each other on port `22` (SSH). In order to achieve this,
    you would need to add this rule as the separate resource type `AWS::EC2::SecurityGroupIngress`.
    This is because a security group can''t refer to itself in CloudFormation when
    it is yet to be created. This is what the extra resource type looks like:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 CloudFormation 配置安全组时，你最终会遇到循环依赖问题。假设你希望我们在 `ExampleEC2InstanceSecurityGroup`
    中的所有服务器都能通过端口 `22`（SSH）互相访问。为了实现这一点，你需要将此规则作为单独的资源类型 `AWS::EC2::SecurityGroupIngress`
    添加。因为在 CloudFormation 中，一个安全组在尚未创建时不能引用自身。这就是额外资源类型的样子：
- en: '[PRE35]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Differences from traditional firewalls
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与传统防火墙的区别
- en: Security groups can't be used to explicitly block traffic. Only rules of a permissive
    kind can be added; deny style rules are not supported. Essentially, all inbound
    traffic is denied unless you explicitly allow it.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组不能用于显式阻止流量。只能添加允许类型的规则；不支持拒绝风格的规则。本质上，所有入站流量都会被拒绝，除非你明确允许它。
- en: Your rules also may not refer to source ports; only destination ports are supported.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的规则也可能不会涉及源端口；只支持目标端口。
- en: When security groups are created, they will contain a rule which allows all
    outbound connections. If you remove this rule, new outbound connections will be
    dropped. It's a common pattern to leave this rule in place and filter all your
    traffic using inbound rules only.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当创建安全组时，它们将包含一个允许所有出站连接的规则。如果你删除此规则，新的出站连接将被丢弃。一个常见的做法是保留此规则，并仅通过入站规则来过滤所有流量。
- en: If you do replace the default outbound rule, it's important to note that only
    new outbound connections will be filtered. Any outbound traffic being sent in
    response to an inbound connection will still be allowed. This is because security
    groups are *stateful*.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你替换了默认的出站规则，需要注意的是，只有新的出站连接会被过滤。任何响应入站连接的出站流量仍然会被允许。这是因为安全组是*有状态的*。
- en: Unlike security groups, network ACLs are not stateful and do support `DENY`
    rules. You can use them as a complementary layer of security inside your VPC,
    especially if you need to control traffic flow between subnets.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与安全组不同，网络ACL是无状态的，并且支持`DENY`规则。你可以将它们作为VPC内部的安全补充层，特别是当你需要控制子网之间的流量时。
- en: Creating a load balancer
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建负载均衡器
- en: 'AWS offers two kinds of load balancers:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供两种类型的负载均衡器：
- en: Classic load balancer
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经典负载均衡器
- en: Application load balancer
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用负载均衡器
- en: We're going to focus on the application load balancer. It's effectively an upgraded,
    second generation of the ELB service, and it offers a lot more functionality than
    the classic load balancer. HTTP/2 and WebSockets are supported natively, for example.
    The hourly rate also happens to be cheaper.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点讨论应用负载均衡器。它实际上是ELB服务的升级版、第二代，并且比经典负载均衡器提供更多功能。例如，它原生支持HTTP/2和WebSocket。每小时的费用也相对便宜。
- en: Application load balancers do not support layer-4 load balancing. For this kind
    of functionality, you'll need to use a classic load balancer.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 应用负载均衡器不支持第四层负载均衡。对于这种功能，你需要使用经典负载均衡器。
- en: How to do it...
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Open up your text editor and create a new CloudFormation template. We''re going
    to require a VPC ID and some subnet IDs as `Parameters`. Add them to your template
    like this:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文本编辑器并创建一个新的CloudFormation模板。我们需要一个VPC ID和一些子网ID作为`Parameters`。像这样将它们添加到模板中：
- en: '[PRE36]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next we need to add some `Mappings` of ELB account IDs. These will make it
    easier for us to give the load balancer permission to write logs to an S3 bucket.
    Your mappings should look like this:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一些ELB账户ID的`Mappings`。这些映射将帮助我们为负载均衡器提供将日志写入S3桶的权限。你的映射应该像这样：
- en: You can find the complete list of ELB account IDs here [http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到完整的ELB账户ID列表：[http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy)。
- en: '[PRE37]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We can now start adding `Resources` to our template. First we're going to create
    an S3 bucket and bucket policy for storing our load balancer logs. In order to
    make this template portable, we'll omit a bucket name, but for convenience we'll
    include the bucket name in our outputs so that CloudFormation will echo the name
    back to us.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以开始向模板中添加`Resources`。首先，我们将创建一个S3桶和桶策略，用于存储我们的负载均衡器日志。为了使这个模板具有可移植性，我们将省略桶名称，但为了方便起见，我们将在输出中包含桶名称，以便CloudFormation将名称回显给我们。
- en: '[PRE38]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, we need to create a security group for our load balancer to reside in.
    This security group will allow inbound connections to port `80` (HTTP). To simplify
    this recipe, we''ll leave out port `443` (HTTPS), but we''ll briefly cover how
    to add this functionality later in this section. Since we''re adding a public
    load balancer, we want to allow connections to it from everywhere (`0.0.0.0/0`).
    This is what our security group looks like:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为负载均衡器创建一个安全组。这个安全组将允许对端口`80`（HTTP）的入站连接。为了简化这个过程，我们将省略端口`443`（HTTPS），但我们将在本节稍后简要介绍如何添加此功能。由于我们正在添加一个公共负载均衡器，我们希望允许来自任何地方（`0.0.0.0/0`）的连接。这是我们安全组的配置：
- en: '[PRE39]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We now need to define a target group. Upon completion of this recipe, you can
    go ahead and register your instances in this group so that HTTP requests will
    be forwarded to it. Alternatively, you can attach the target group to an auto
    scaling group and AWS will take care of the instance registration and de-registration
    for you.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要定义一个目标组。完成这个配方后，你可以将实例注册到这个目标组，以便HTTP请求能够被转发到该组。或者，你也可以将目标组附加到自动扩展组，AWS将为你处理实例的注册和注销。
- en: The target group is where we specify the health checks our load balancer should
    perform against the target instances. This health check is necessary to determine
    if a registered instance should receive traffic. The example provided with this
    recipe includes these health-check parameters with the values all set to their
    defaults. Go ahead and tweak these to suit your needs, or, optionally, remove
    them if the defaults work for you.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标组是我们指定负载均衡器应执行健康检查的地方。这个健康检查对于确定一个注册的实例是否应接收流量非常重要。此示例中提供的健康检查参数已设置为默认值。你可以根据需要进行调整，或者如果默认设置适合你的情况，也可以选择删除它们。
- en: '[PRE40]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We need to define at least one listener to be added to our load balancer. A
    listener will *listen* for incoming requests to the load balancer on the port
    and protocol we configure for it. Requests matching the port and protocol will
    be forwarded through to our target group.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要定义至少一个监听器，添加到我们的负载均衡器中。监听器将*监听*我们为其配置的端口和协议上到达负载均衡器的请求。与端口和协议匹配的请求将被转发到我们的目标组。
- en: The configuration of our listener is going to be reasonably simple. We're listening
    for HTTP requests on port `80`. We're also setting up a default action for this
    listener, which will forward our requests to the target group we've defined before.
    There is a limit of 10 listeners per load balancer.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的监听器配置将相对简单。我们将监听端口`80`上的HTTP请求。我们还为此监听器设置了一个默认动作，它将我们的请求转发到我们之前定义的目标组。每个负载均衡器最多可以配置10个监听器。
- en: 'Currently, AWS only supports one action: forward.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，AWS只支持一个动作：转发。
- en: '[PRE41]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, now that we have all `Resources` we need, we can go ahead and set
    up our load balancer. We''ll need to define at least two subnets for it to live
    in—these are included as `Parameters` in our example template:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，既然我们已经准备好了所有需要的`Resources`，我们可以继续设置负载均衡器了。我们需要定义至少两个子网来部署负载均衡器，这些在我们的示例模板中作为`Parameters`提供：
- en: '[PRE42]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Lastly, we're going to add some `Outputs` to our template for convenience. We're
    particularly interested in the name of the S3 bucket we created and the URL of
    the load balancer.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将向模板中添加一些`Outputs`，以便更方便查看。我们特别关注我们创建的S3桶的名称和负载均衡器的URL。
- en: '[PRE43]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How it works...
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: As you can see, we're applying a logging configuration which points to the S3
    bucket we've created. We're configuring this load balancer to be Internet-facing,
    with an idle timeout of 60 seconds (the default).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在应用一个日志配置，指向我们创建的S3桶。我们正在将这个负载均衡器配置为面向互联网，并设置了60秒的空闲超时（默认值）。
- en: All load balancers are Internet-facing by default, so it's not strictly necessary
    to define a `Scheme` in our example; however, it can be handy to include this
    anyway. This is especially the case if your CloudFormation template contains a
    mix of public and private load balancers.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有负载均衡器都是面向互联网的，因此在我们的示例中，定义`Scheme`并非绝对必要；然而，即使如此，包含它仍然是很有帮助的。如果你的CloudFormation模板包含了公共和私有负载均衡器的混合配置，尤其如此。
- en: If you specify a logging configuration but the load balancer can't access the
    S3 bucket, your CloudFormation stack will fail to complete.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你指定了日志配置，但负载均衡器无法访问S3桶，那么你的CloudFormation堆栈将无法完成。
- en: Private ELBs are not Internet-facing and are available only to resources which
    live inside your VPC.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 私有ELB是非面向互联网的，仅对位于你VPC内部的资源可用。
- en: That's it! You now have a working application load balancer configured to ship
    logs to an S3 bucket.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在你已经配置好了一个可以正常工作的应用程序负载均衡器，并能够将日志传输到S3桶。
- en: There's more...
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'Load balancers on AWS are highly configurable and there are many options available
    to you. Here are some of the more frequent ELB options you''ll encounter:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: AWS上的负载均衡器具有高度的可配置性，并且提供许多选项供你选择。以下是一些你常遇到的ELB选项：
- en: HTTPS/SSL
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTPS/SSL
- en: 'If you wish to accept HTTPS requests, you''ll need to configure an additional
    listener. It will look something like the following:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望接受HTTPS请求，你需要配置一个额外的监听器。它看起来大致如下：
- en: '[PRE44]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The listener will need to reference a valid **Amazon Resource Name** (**ARN**)
    for the certificate you wish to use. It's really easy to have AWS Certificate
    Manager create a certificate for you, but it does require validation of the domain
    name you're generating the certificate for. You can, of course, bring your own
    certificate if you wish. You'll need to import it in to AWS Certificate Manager
    before you can use it with your ELB (or CloudFront distribution).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 监听器需要引用你希望使用的证书的有效**Amazon 资源名称**（**ARN**）。让 AWS 证书管理器为你创建证书非常简单，但它确实需要验证你为其生成证书的域名。当然，你也可以带上自己的证书。如果你愿意，需先将证书导入
    AWS 证书管理器，然后才能将其与 ELB（或 CloudFront 分发）一起使用。
- en: Unless you have specific requirements around ciphers, a good starting approach
    is to not define an SSL Policy and let AWS choose what is currently *best of breed*.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你对加密套件有特定要求，否则一个不错的起点是不要定义 SSL 策略，而是让 AWS 选择当前的*最佳实践*。
- en: Path-based routing
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于路径的路由
- en: Once you are comfortable with ELB configuration, you can start to experiment
    with path-based routing. In a nutshell, it provides a way to inspect a request
    and proxy it to different targets based on the path requested.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对 ELB 配置感到熟悉，就可以开始尝试基于路径的路由。简而言之，它提供了一种检查请求并根据请求的路径将其代理到不同目标的方法。
- en: One common scenario you might encounter is needing to route requests for `/blog`
    to a different set of servers running WordPress, instead of to your main server
    pool, which is running your Ruby on Rails application.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能遇到的一个常见场景是，需要将`/blog`的请求路由到一组运行 WordPress 的服务器，而不是路由到运行 Ruby on Rails 应用程序的主服务器池。
