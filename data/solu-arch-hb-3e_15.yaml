- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Rearchitecting Legacy Systems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构遗留系统
- en: Today’s organizations are operating in a challenging environment. The pace of
    change is unprecedented. Regulators and institutions are imposing new reporting
    and security requirements, new technologies are disrupting consumers’ expectations
    and perceptions, and the ecosystem is constantly evolving as new players enter
    the market. As a result, organizations are redefining their business models to
    provide the customer focus, agility, and technology they need to attract talent,
    be competitive, and grow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当今的组织在一个充满挑战的环境中运营。变革的速度前所未有。监管机构和机构正在施加新的报告和安全要求，新技术正在颠覆消费者的期望和认知，生态系统也在不断变化，新玩家不断进入市场。因此，组织正在重新定义其商业模式，以提供客户需求、敏捷性和技术，吸引人才，保持竞争力并实现增长。
- en: Application modernization has become a critical component of these new business
    models to set up dev/test environments rapidly, experiment with new ideas, and
    develop new products and services. In addition to eliminating the need to invest
    in expensive and cumbersome infrastructure, a new system enables innovation through
    a broad set of available technologies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现代化已经成为这些新商业模式的关键组成部分，可以快速建立开发/测试环境，实验新想法，开发新产品和服务。除了消除对昂贵和繁琐基础设施的投资需求外，新系统还通过提供一套广泛的可用技术来促进创新。
- en: Legacy systems are applications that have been deployed in your data center
    for decades without undergoing many changes. These systems are outdated and challenging
    to maintain in a fast-changing technological environment. Legacy systems are defined
    by age and the inability to meet growing business needs, due to the underlying
    architecture and technology.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留系统是那些已经在您的数据中心部署了几十年且未进行过多次更改的应用程序。这些系统过时且在快速变化的技术环境中难以维护。遗留系统的定义通常基于其年龄以及由于底层架构和技术的限制，无法满足日益增长的业务需求。
- en: Often, large enterprises deal with legacy applications to run crucial day-to-day
    business tasks. These legacy systems are spread across many industries, such as
    healthcare, finance, transportation, manufacturing, and supply chain. Often, companies
    have to spend heavily on the maintenance and support of these systems, which warrants
    the need to architect legacy systems. Rearchitecting and modernizing legacy applications
    helps organizations be more agile and innovative and optimizes cost and performance.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，大型企业使用遗留应用程序来处理日常关键业务任务。这些遗留系统广泛应用于多个行业，如医疗保健、金融、交通运输、制造业和供应链等。公司通常需要在这些系统的维护和支持上花费大量资金，这也促使了对遗留系统重构的需求。重构和现代化遗留应用程序帮助组织提高敏捷性和创新力，并优化成本和性能。
- en: 'In this chapter, you will learn about challenges and issues with legacy applications
    and techniques to rearchitect them. Rewriting complex legacy applications may
    pose an additional risk of business disruption, so you will learn about refactoring
    applications or considering the option to migrate into a more flexible infrastructure.
    The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解与遗留应用程序相关的挑战和问题，以及重构它们的技术。重写复杂的遗留应用程序可能会带来额外的业务中断风险，因此您将了解重构应用程序或考虑迁移到更灵活的基础架构的选项。本章将涵盖以下主题：
- en: Learning the challenges of legacy systems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解遗留系统的挑战
- en: Defining a strategy for system modernization
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义系统现代化的策略
- en: Looking at legacy system modernization techniques
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探讨遗留系统现代化技术
- en: Defining a cloud migration strategy for legacy systems
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义遗留系统的云迁移策略
- en: Mainframe migration to the public cloud
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大型主机迁移到公共云
- en: Modernizing legacy code with generative AI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用生成性人工智能现代化遗留代码
- en: By the end of the chapter, you will have learned about the various challenges
    and modernization drivers for legacy systems. You will have learned about the
    various strategies and techniques for the modernization of legacy systems. As
    the public cloud is becoming a go-to strategy for many organizations, you will
    also have learned about the cloud migration of legacy systems.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解遗留系统的各种挑战和现代化驱动因素。您将学习遗留系统现代化的各种策略和技术。随着公共云成为许多组织的首选策略，您还将学习遗留系统的云迁移方法。
- en: Learning the challenges of legacy systems
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解遗留系统的挑战
- en: A legacy application presents significant challenges for an organization. On
    the one hand, there are critical applications that an organization has used for
    decades. On the other hand, legacy applications hold back the organization’s pace
    of innovation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留应用程序给组织带来了重大挑战。一方面，组织有一些关键应用程序已经使用了数十年。另一方面，遗留应用程序限制了组织创新的步伐。
- en: End users are looking for the most modern, technologically advanced applications
    in a hugely competitive environment. All new features usually come with the latest
    software, and legacy applications limit your ability to add those features that
    benefit end users.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 终端用户在竞争激烈的环境中寻求最现代、技术最先进的应用程序。所有新功能通常都伴随最新的软件，而遗留应用程序限制了你添加那些有益于终端用户的功能的能力。
- en: 'The following diagram shows some significant challenges that organizations
    face with legacy systems:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了组织在使用遗留系统时面临的一些重大挑战：
- en: '![A picture containing text, screenshot, diagram, font  Description automatically
    generated](img/B21336_15_01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片，包含文本、截图、图表、字体，描述自动生成](img/B21336_15_01.png)'
- en: 'Figure 15.1: Challenges with a legacy system'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1：遗留系统的挑战
- en: Before we dive into the solution, it’s essential to understand the issues clearly.
    Let’s explore the challenges of legacy systems in more depth to understand them
    better.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨解决方案之前，清晰地理解问题是至关重要的。让我们更深入地探讨遗留系统所面临的挑战，以便更好地理解它们。
- en: Difficulty in keeping up with user demand
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 难以跟上用户需求
- en: Customer focus is the key to business success, and being unable to keep up with
    the latest technology trends can harm a business significantly. You can take the
    example of Nokia, which used to lead the global mobile phone market. As smartphones
    came into play nearly a decade ago, Nokia still stuck with a legacy system, resulting
    in near bankruptcy. It was a similar story with Kodak—one of the largest businesses
    in the camera industry. Kodak could not move with digital innovation and adopt
    it into its systems, which resulted in Kodak becoming bankrupt in 2012\. There
    are many such examples of large enterprises being unable to survive due to a lack
    of legacy modernization and innovation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 客户至上是商业成功的关键，无法跟上最新的技术趋势会严重损害企业。你可以拿诺基亚作为例子，它曾经主导全球手机市场。随着智能手机的出现，诺基亚仍然坚持使用遗留系统，导致几乎破产。柯达也有类似的故事——它曾是全球相机行业的龙头企业。柯达未能跟上数字化创新，并未将其整合到自己的系统中，最终导致柯达在2012年破产。许多大型企业都因未能进行遗留系统现代化和创新而未能生存下来。
- en: Users are very demanding in the current climate of fast-changing technology
    and fierce competition. Now, organizations have to change as per the user’s terms,
    as they have multiple choices. As technology moves, the user moves with it and
    starts using the most recent and popular applications. Your competitors can jump
    ahead if they provide new features that the user needs. A recent example is Google,
    a pioneer in AI/ML that may have developed **Generative AI** (**GenAI**) technology
    much earlier. However, OpenAI moved swiftly to launch ChatGPT, putting Google
    on the back foot and forcing it into a catch-up game, consequently losing ground
    to competitors in the GenAI market. These examples underline the importance of
    adopting emerging technologies to maintain a competitive advantage.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前快速变化的技术和激烈竞争的环境中，用户的需求非常苛刻。现在，组织必须按照用户的需求进行变革，因为用户有多个选择。随着技术的发展，用户也随之变化，开始使用最新和最流行的应用程序。如果你的竞争对手提供了用户所需的新功能，他们就能迅速超越你。最近的一个例子是Google，作为AI/ML的先驱，可能更早就开发了**生成性AI**（**GenAI**）技术。然而，OpenAI迅速推出了ChatGPT，迫使Google处于下风并进入了追赶的局面，最终在GenAI市场上失去了竞争优势。这些例子凸显了采用新兴技术以保持竞争优势的重要性。
- en: A legacy system also challenges enterprise applications with an internal user
    base. An old system built on mainframes primarily uses the command line, which
    could be more user-friendly in the digital age. In contrast, new-generation workers
    demand a more user-friendly approach to perform their routine tasks. However,
    you may need more support from management, who may have been working with legacy
    systems for decades and are used to them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留系统也对有内部用户基础的企业应用程序带来挑战。一个建立在主机上的旧系统主要使用命令行，这在数字时代可能不太适合用户友好性。相比之下，新一代员工要求更用户友好的方式来执行日常任务。然而，你可能得不到管理层的支持，因为他们可能已经使用遗留系统工作了数十年，并且习惯了这些系统。
- en: The technology at the core of large enterprises needs to be updated and comprises
    systems dating back decades. Organizations running their core systems on legacy,
    on-premises technology face severe challenges when enabling modern customer experiences.
    Many systems are the product of multiple mergers and acquisitions, resulting in
    fractured data siloes, excessive infrastructure costs, and slow development time.
    This creates inefficient processing and decision-making, a lack of business agility,
    poor customer responsiveness, and high maintenance costs. Under these conditions,
    it’s challenging for IT to meet the modern needs of internal stakeholders and
    customers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大型企业核心技术需要更新，其中包含许多已有几十年历史的系统。运行核心系统的组织在启用现代客户体验时面临严峻挑战。许多系统是多个并购的产物，导致数据孤岛碎片化、基础设施成本过高以及开发周期缓慢。这造成了低效的处理和决策，缺乏业务敏捷性，客户响应不及时，维护成本高昂。在这种情况下，IT很难满足内部利益相关者和客户的现代需求。
- en: Higher cost of maintenance and updates
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更高的维护和更新成本
- en: As legacy systems have been set up and working for decades, they may look less
    expensive. But over time, the total cost of ownership turns out to be higher,
    as support and updates for old systems are usually more costly.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于遗留系统已运行多年，它们可能看起来成本较低。但随着时间的推移，整体拥有成本反而变得更高，因为旧系统的支持和更新通常更加昂贵。
- en: Those updates are often unavailable out of the box, and lots of manual workarounds
    are required to maintain the systems. Most legacy systems are not automation-friendly,
    resulting in more human effort.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更新通常无法开箱即用，需要大量手动解决方法来维护系统。大多数遗留系统不支持自动化，导致更多的人工工作。
- en: Legacy systems mostly have a large chunk of proprietary software, which results
    in significantly higher license fees. In addition to that, old software no longer
    receives support from providers, and buying additional support out of the life
    cycle could be very costly. On the other hand, modern systems mainly adopt open
    source technologies that drive the cost down. The operational outage from a legacy
    system can take more time and drive up operating expenses, due to years of technical
    debt and hard-to-debug code. People with the skill set to maintain legacy systems
    (such as DB2, COBOL, Fortran, Delphi, and Perl) are hard to find, significantly
    increasing hiring costs and system risk.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留系统通常包含大量专有软件，这导致许可证费用显著增加。除此之外，旧软件不再得到供应商的支持，购买生命周期之外的额外支持可能非常昂贵。另一方面，现代系统主要采用开源技术，降低了成本。由于技术债务和难以调试的代码，遗留系统的操作停机时间可能更长，并且会增加运营费用。维护遗留系统的技能（如DB2、COBOL、Fortran、Delphi和Perl）的人才非常稀缺，导致招聘成本和系统风险显著增加。
- en: Legacy applications have been in operation for decades, and, over time, many
    changes will have been accommodated without unused code being removed, which amounts
    to lots of technical debt. Any initiative to reduce technical debt could be risky
    due to unknown impacts and dependencies. As a result, organizations are forced
    to invest in unnecessary code and system maintenance for fear of breaking a system
    by making any significant changes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留应用程序已运行数十年，随着时间推移，许多更改已被接纳，但未移除未使用的代码，积累了大量技术债务。任何减少技术债务的措施都可能存在风险，因为其影响和依赖关系未知。因此，组织不得不为维护不必要的代码和系统投入资金，以避免因做出重大更改而破坏系统。
- en: However, modernizing legacy systems may be costly due to unknown dependencies
    and outages. A careful **cost-benefit analysis** (**CBA**) needs to be considered,
    and the **return on investment** (**ROI**) needs to be determined when deciding
    to proceed with modernization. As stakeholders need to see the immediate benefit
    of modernization, procuring finances for legacy modernization can be challenging.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于未知的依赖关系和停机时间，现代化遗留系统可能会非常昂贵。在决定是否进行现代化时，需要仔细进行**成本效益分析**（**CBA**），并确定**投资回报率**（**ROI**）。由于利益相关者需要看到现代化的即时效益，获取遗留系统现代化的资金可能会具有挑战性。
- en: Shortage of skills and documentation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技能和文档短缺
- en: Legacy technologies (such as mainframes) have multiple complex components that
    depend on each other. They are extensive proprietary and costly servers that are
    not readily available if someone wants to develop skills for them independently.
    It is challenging to retain application development resources and even more challenging
    to hire people with hands-on experience in old technology and operating systems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 传统技术（如大型主机）具有多个相互依赖的复杂组件。它们是庞大的专有且昂贵的服务器，如果有人希望独立开发技能，这些服务器并不容易获得。保持应用程序开发资源是一项挑战，而招聘具有旧技术和操作系统实际操作经验的人则更具挑战性。
- en: Often, legacy systems are decades old, and most of the workforce with the relevant
    skills to manage them has retired. Also, these systems may need documentation
    to record the years of work that went into them. Significant knowledge loss is
    possible as an old workforce rotates with a new workforce. A lack of knowledge
    makes it risky to change the system due to unknown dependencies. Any small feature
    requests are challenging to accommodate due to system complexity and skills shortages.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 传统系统通常已有数十年历史，大多数具有相关技能的员工已经退休。此外，这些系统可能缺乏文档，未能记录投入的多年工作。随着老一代员工的更替，知识流失的风险很大。缺乏知识使得更换系统变得风险很大，因为依赖关系不明确。由于系统复杂性和技能短缺，任何小的功能需求都难以满足。
- en: New cutting-edge technologies such as advanced analytics, ML, GenAI, and the
    **Internet of Things** (**IoT**) are built on new technology platforms. As new
    technologies are not well integrated with legacy systems, an organization may
    lose out to a competitor if it cannot use the full capabilities of emerging technologies.
    A modern system helps build an organization’s brand as an innovative company where
    most of the new generation of the workforce wants to work. Development and training
    are an even more significant expense for legacy technologies.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 新的前沿技术，如高级分析、机器学习、生成型人工智能和**物联网**（**IoT**），是建立在新的技术平台上的。由于新技术与传统系统整合不良，组织可能会因为无法充分利用新兴技术的全部功能而输给竞争对手。现代化系统有助于塑造一个创新型企业的品牌，而大多数新一代的劳动力都希望在这样的公司工作。对于传统技术而言，开发和培训是一个更为重要的支出。
- en: Often, automation helps to reduce costs by reducing human effort. Many tools
    are available in modern systems to build automation—such as DevOps pipelines,
    code reviews, and automation testing—that a legacy system may not utilize, resulting
    in additional costs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化通常有助于通过减少人工劳动来降低成本。现代系统中有许多工具可以用于构建自动化——如 DevOps 流水线、代码审查和自动化测试——而这些工具可能是传统系统无法利用的，从而导致额外的成本。
- en: Vulnerability to corporate security issues
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 企业安全问题的漏洞
- en: Security is a top priority for any organization and system. A legacy application
    on an old operating system (such as Windows XP or Windows 2008) is vulnerable
    to security issues due to a lack of vendor support. Software vendors continuously
    determine new security threats and release patches to accommodate them in the
    latest software versions. Any legacy software announced as **End of Life** (**EOL**)
    from a vendor doesn’t get a new security patch, which leaves your application
    running in the old software version exposed to several security threats.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是任何组织和系统的首要任务。运行在旧操作系统上的传统应用程序（如 Windows XP 或 Windows 2008）由于缺乏供应商支持，容易受到安全问题的影响。软件供应商会不断确定新的安全威胁，并发布补丁以应对最新版本的软件。任何被供应商宣布为**生命周期结束**（**EOL**）的传统软件将不再获得新的安全补丁，这会使你的应用程序在运行旧版本软件时暴露于多种安全威胁之中。
- en: System health checks are often ignored for legacy applications, which makes
    them more vulnerable to security attacks. The skills gap makes providing continuous
    support and help difficult, which means systems need to be more secure. A single
    vulnerability can pose a high risk of exposing your application, database, and
    critical information to attackers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 传统应用程序的系统健康检查常常被忽视，这使得它们更容易受到安全攻击。技能差距使得持续提供支持和帮助变得困难，因此系统需要更加安全。一旦出现漏洞，就有可能使你的应用程序、数据库和关键信息暴露给攻击者。
- en: In addition to a security vulnerability, legacy applications are complex to
    maintain due to compliance. As regulations keep changing over time to enforce
    tight security around data handling and usage, legacy systems require changes
    to adhere to local governance and compliance needs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了安全漏洞，传统应用程序在维护上也因合规性问题而变得复杂。随着监管要求的不断变化，强制执行严格的数据处理和使用安全，传统系统需要做出更改以遵守当地的治理和合规性要求。
- en: For example, compliance to the European Union’s **General Data Protection Regulation**
    (**GDPR**) requires each system to enable users to request to delete their data.
    While modern systems may provide these features out of the box in an automated
    and self-service manner, this may need to be performed manually and become more
    complex in legacy systems.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，遵守欧盟的**通用数据保护条例**（**GDPR**）要求每个系统都必须使用户能够请求删除其数据。虽然现代系统可能会提供开箱即用的自动化和自助服务功能，但在遗留系统中，这一操作可能需要手动执行，并变得更加复杂。
- en: Adhering to compliance needs can lead to more operation costs and time-consuming
    maintenance.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 遵守合规需求可能会导致更多的运营成本和耗时的维护工作。
- en: Incompatibility with other systems
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与其他系统的不兼容
- en: In addition to end users, often systems need to integrate with each other. Those
    systems may be associated with different departments, clients, partners, or suppliers.
    The various systems need to exchange data in a standard format that evolves. Almost
    every few years, files and data format standards are changed to increase data
    exchange efficiency, and most systems need to change to adopt them. Hard-to-change
    legacy systems that stick to using an old format could result in system incompatibility
    and a system that your suppliers and partners may not want to use. The inability
    to accommodate standard needs adds significant business risk due to complex workarounds
    and lost productivity.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了终端用户外，系统之间经常需要进行集成。这些系统可能涉及不同的部门、客户、合作伙伴或供应商。不同的系统需要以标准格式交换数据，而这些格式会不断演变。几乎每隔几年，文件和数据格式标准就会发生变化，以提高数据交换效率，而大多数系统需要进行调整以适应这些变化。那些坚持使用旧格式的难以变更的遗留系统可能会导致系统不兼容，成为供应商和合作伙伴不愿使用的系统。无法满足标准需求会增加显著的业务风险，因其需要复杂的解决方法并降低生产力。
- en: Adding a workaround for simple business needs may make a system more complex.
    Modern systems are built on a service-oriented architecture, making it easier
    to accommodate any new requirement by adding a new service independently. Old
    systems are often built with a monolithic architecture, and adding any new feature
    means you need to rebuild and test the entire system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足简单的业务需求而添加解决方法可能会使系统更加复杂。现代系统采用面向服务的架构，通过独立添加新服务来更轻松地适应任何新需求。旧系统通常采用单体架构，添加任何新功能都意味着需要重建并测试整个系统。
- en: Modern architectures are API-oriented and can be easily integrated with other
    systems to offload heavy lifting. For example, a taxi-booking app uses Google
    Maps for **Global Positioning System** (**GPS**) navigation and Facebook or X
    for user authentication. A lack of APIs makes these integrations harder in a legacy
    system, resulting in complex custom code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现代架构是基于API的，可以轻松地与其他系统集成，以减轻繁重的工作负担。例如，一款出租车预订应用程序使用Google地图进行**全球定位系统**（**GPS**）导航，并使用Facebook或X进行用户身份验证。如果没有API，遗留系统中的这些集成就会更加困难，导致复杂的定制代码。
- en: A legacy application can face a scalability issue as load increases from another
    dependent upstream system. Often, legacy applications are built with a monolithic
    architecture and are hardware-dependent. Scalability is a big challenge with a
    monolithic system, as it cannot scale horizontally due to hardware dependency
    and vertical scaling being limited to the maximum system capacity. Also, increased
    demand in one portion of the monolith requires the entire system to be scaled.
    Breaking monolithic applications into microservices can help with scaling challenges
    and keeping up with the load.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留应用程序在随着来自上游依赖系统的负载增加时，可能会面临可扩展性问题。遗留应用程序通常采用单体架构，且依赖硬件。由于硬件依赖性，单体系统在可扩展性方面面临重大挑战，因为它不能水平扩展，垂直扩展的能力也受到最大系统容量的限制。此外，单体系统的某一部分需求增加时，整个系统都需要扩展。将单体应用程序拆分为微服务可以帮助解决扩展性挑战，并应对负载压力。
- en: In addition to software maintenance, legacy applications are costly for hardware
    infrastructure as they run on a particular version. They spread across multiple
    databases with duplicate data and similar functionality. Due to their monolithic
    nature, it’s hard to consolidate and use the flexibility of cloud-based infrastructures
    to save costs. Also, decentralized systems allow software teams to select software
    stacks based on the needs of the microservice, rather than having to conform to
    a singular technology stack for all system functionality, enabling the use of
    diverse technologies based on the needs of each microservice and/or the team supporting
    the microservice.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了软件维护，遗留应用程序对硬件基础设施也有较高的成本，因为它们依赖于特定版本的运行。这些系统分布在多个数据库中，存在重复数据和相似的功能。由于它们的单体结构，难以整合并利用基于云的基础设施的灵活性来节省成本。此外，分散的系统允许软件团队根据微服务的需求选择软件技术栈，而无需为所有系统功能统一选择一个技术栈，从而使得每个微服务的技术选择和/或支持该微服务的团队的需求多样化。
- en: Let’s look at some key advantages of system modernization.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下系统现代化的一些关键优势。
- en: Defining a strategy for system modernization
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义系统现代化的策略
- en: Often, a legacy system gets left out of an enterprise’s overall digital strategy,
    and issues get addressed as needed. A reactive approach prevents organizations
    from executing overall system modernization and benefits.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，遗留系统会被排除在企业整体数字化战略之外，问题只在需要时才得到解决。被动的做法阻止了组织实施整体系统现代化和获得好处。
- en: If your legacy system has serious business challenges, such as security and
    compliance issues, or cannot address a business need, you can take a **big-bang
    approach**. In the big-bang method, you build a new system from scratch and shut
    down the old system. This approach is risky but addresses a business need that
    can be mitigated from the existing legacy system.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的遗留系统面临严重的业务挑战，例如安全性和合规性问题，或者无法满足业务需求，你可以采取**大爆炸方法**。在大爆炸方法中，你从头开始构建一个新系统，并关闭旧系统。此方法风险较大，但可以解决现有遗留系统无法缓解的业务需求。
- en: The other approach is a **phased approach**, where you upgrade one module at
    a time and keep running both the old and the new systems. A phasedapproach is
    less risky but takes a long time and may be more expensive, as you need to maintain
    both environments with increased network and infrastructure bandwidth.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是**分阶段方法**，即一次升级一个模块，同时保持旧系统和新系统的并行运行。分阶段方法风险较小，但需要较长时间，并且可能更昂贵，因为需要维护两个环境，并且增加网络和基础设施带宽。
- en: Approaching your application portfolio, prioritizing specific applications,
    and having an overall plan are the first steps. As you use the cloud, you design
    a new operating model and end up with a combination of tools. You can use third-party
    tools to frame your needs and tool preferences. And finally, you can use a consulting
    partner to complete migration and modernization projects more successfully and
    quickly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 处理应用程序组合、优先考虑特定应用程序并制定整体计划是第一步。当你使用云时，你设计了一个新的运营模式，并最终形成了一种工具组合。你可以使用第三方工具来框定需求和工具偏好。最后，你可以使用咨询合作伙伴来更成功、快速地完成迁移和现代化项目。
- en: Taking any of these approaches can provide various benefits once the modernization
    of an application is completed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 采取这些方法中的任何一种，在应用程序现代化完成后都能带来各种好处。
- en: Assessment of a legacy application
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遗留应用程序的评估
- en: An organization may have multiple legacy systems, with tens of thousands to
    millions of code lines. In a modernization situation, a legacy system must align
    with the business strategy and the investment cost. Also, it is possible to reutilize
    some parts or completely write them from scratch, but the first step is to conduct
    the assessment and better understand the overall system.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织可能有多个遗留系统，包含数万到数百万行代码。在现代化过程中，遗留系统必须与业务战略和投资成本相一致。此外，可以重新利用某些部分或完全从零开始编写，但第一步是进行评估，更好地理解整体系统。
- en: 'In the assessment phase, the solutions architect needs to make the system easy
    to assess more quickly and make informed decisions. Assessments can be done in
    days and weeks, depending upon the size of your workload and its complexity. The
    following points are the primary areas that solutions architects need to focus
    on when conducting an assessment:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估阶段，解决方案架构师需要使系统易于评估并做出明智决策。评估可以在几天或几周内完成，这取决于工作负载的大小和复杂性。以下是解决方案架构师在进行评估时需要关注的主要领域：
- en: '**Technology assessment**: You need to understand the technology stack used
    by the existing system. If the current technology is outdated and lacks vendor
    support, you might need to replace it. Consider upgrading if a better version
    of the technology becomes available. Often, newer versions are backward-compatible,
    with minimal changes required.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术评估**：你需要了解现有系统所使用的技术栈。如果当前的技术已经过时并且缺乏供应商支持，可能需要替换它。如果有更好的技术版本可用，可以考虑升级。通常，新版本与旧版本是向后兼容的，所需的更改很少。'
- en: '**Architecture assessment**: You need to understand the overall architecture
    to make it future-proof. There may be a case where you need to make a minor upgrade
    to the technology but the overall architecture needs to be more monolithic and
    scalable. It would be best to audit the architecture in relation to cost, scalability,
    availability, performance, and security. Significant architecture changes may
    be required to align the application with business needs.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构评估**：你需要了解整体架构，以确保其能够适应未来发展。可能存在需要对技术进行小规模升级的情况，但整体架构需要更单体化和可扩展。最好对架构进行审计，考虑成本、可扩展性、可用性、性能和安全性。可能需要进行重大架构更改，以使应用程序与业务需求对齐。'
- en: '**Code and dependency assessment**: Legacy systems often have hundreds of thousands
    of lines of code in a monolithic setting. Various modules tied to each other make
    the system very complicated. Code that appears not to be used in one module might
    impact other modules if it is removed without due diligence. These code lines
    may have been written decades back and needed regular refactoring and review.
    Even if the technology and architecture look fine, you must determine if the code
    is upgradable and maintainable. You also need to understand whether UI-related
    upgrades are required to improve the user experience.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码和依赖性评估**：传统系统通常在单体环境中拥有数十万行代码。各个模块之间的紧密联系使得系统变得非常复杂。如果在不充分审查的情况下删除某个模块中看似未使用的代码，可能会影响到其他模块。这些代码行可能是几十年前编写的，并且需要定期重构和审查。即使技术和架构看起来没有问题，你仍然需要判断这些代码是否可以升级和维护。你还需要了解是否需要进行与UI相关的升级，以改善用户体验。'
- en: 'As a solutions architect, you want to determine the dependencies across various
    modules and code files. Modules may be tightly coupled, and you must define an
    approach to perform simultaneous upgrades when modernizing the overall architecture.
    During your assessment, you may find the following patterns:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决方案架构师，你需要确定各个模块和代码文件之间的依赖关系。模块可能紧密耦合，在现代化整体架构时，你必须定义一种方法，进行同步升级。在评估过程中，你可能会发现以下模式：
- en: First, many customers realize they have many old apps that do not relate well
    to the future business model; they can be retired. For example, around 10–20%
    of the app portfolio can be retired.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，许多客户意识到他们有很多老旧应用程序，这些应用程序与未来的商业模式不太匹配；它们可以被淘汰。例如，大约10-20%的应用程序组合可以被淘汰。
- en: Second, thousands of SaaS vendors didn’t exist 5–7 years ago; these can replace
    many on-premises apps. For example, most customers have landed on Salesforce as
    a CRM platform. This shift to SaaS shrinks down the operational portfolio managed
    by IT operations—it still presents security and identity work but has lower operation
    costs.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，五到七年前不存在的成千上万的SaaS供应商，如今可以替代许多本地应用程序。例如，大多数客户已经选择Salesforce作为CRM平台。转向SaaS可以缩减IT运营管理的操作组合——它仍然涉及安全性和身份管理的工作，但操作成本较低。
- en: Then, decisions can be made to lift and shift and, during a move, replatform
    the operating system, database, or language to reduce costs, such as customers
    choosing to re-platform from Windows Server to Linux, and from Oracle to Postgres,
    to reduce database licensing costs. You learned about these techniques in *Chapter
    3*, *Cloud Migration and Hybrid Cloud Architecture Design*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以做出决定，选择提升并迁移，在迁移过程中重新平台操作系统、数据库或编程语言，以减少成本。例如，客户可能选择将平台从Windows Server迁移到Linux，或将数据库从Oracle迁移到Postgres，以减少数据库许可费用。你在*第3章*《云迁移与混合云架构设计》中学到了这些技术。
- en: If you choose to modernize, you should focus on modernizing apps that differentiate
    your business. Let’s look into the modernization approach.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择现代化，你应该专注于现代化那些能使你业务差异化的应用程序。我们来探讨一下现代化的方式。
- en: Defining the modernization approach
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义现代化方法
- en: For stakeholders, there may be no immediate incentive for application modernization.
    You need to choose the most cost-effective method and deliver results faster.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于利益相关者而言，应用程序现代化可能没有立即的激励。你需要选择最具成本效益的方法，并更快地交付结果。
- en: 'The following diagram shows the modernization approach:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了现代化方法：
- en: '![A picture containing text, screenshot, graphic design, logo  Description
    automatically generated](img/B21336_15_02.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![A picture containing text, screenshot, graphic design, logo  Description
    automatically generated](img/B21336_15_02.png)'
- en: 'Figure 15.2: The legacy system modernization approach'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2：遗留系统现代化方法
- en: 'After your system assessment, you must understand the existing architecture
    pattern and its limitations. As per your tech stack, you need to evaluate migration
    tools. For example, you may use an emulator for mainframe migration or vCenter
    if you rehost your application to VMware. Select various modernization approaches
    and create a **proof of concept** (**POC**) to identify gaps. Some approaches
    are listed here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行系统评估后，您必须了解现有架构模式及其限制。根据您的技术栈，您需要评估迁移工具。例如，如果您将应用程序重新托管到 VMware 上，您可能会使用模拟器进行主机迁移，或使用
    vCenter。选择各种现代化方法并创建**概念验证**（**POC**）以识别差距。以下是一些方法：
- en: '**Architecture-driven modernization**: The architecture-driven approach is
    required to achieve the most agility. Often, an architectural approach is language-independent
    and platform-independent by applying service-oriented patterns, which gives the
    development team the flexibility to be more innovative. You may choose this approach
    if your assessment shows that you need significant architectural changes. Start
    implementing the most critical feature first and then build a POC highlighting
    the gaps and the required effort. Take the microservices approach to achieve scalability
    and ensure better integration with other systems, depending on your legacy application.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构驱动的现代化**：架构驱动的方法是实现最大灵活性的必要条件。通常，架构方法是语言无关且平台无关的，通过应用面向服务的模式，赋予开发团队更多的创新灵活性。如果您的评估显示您需要进行重大架构更改，可以选择这种方法。首先实现最关键的功能，然后构建一个突出差距和所需努力的
    POC。根据您的遗留应用程序，采用微服务方法以实现可扩展性，并确保与其他系统的更好集成。'
- en: '**System re-engineering**: In the re-engineering approach, you must deeply
    understand the legacy system and perform reverse engineering to build a new modernized
    application. You need to be sure to make technological choices that help you create
    a future-proof system. You should take this approach if the legacy system is over-complicated
    and requires long-term projects. Start with application modernization first and
    upgrade the database as a final cutover in a phased approach. You need to build
    a mechanism where the legacy and upgraded modules co-exist, with the ability to
    communicate in a hybrid manner.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统再工程**：在再工程方法中，您必须深入了解遗留系统并进行逆向工程，以构建新的现代化应用程序。您需要确保做出有助于创建面向未来系统的技术选择。如果遗留系统过于复杂并且需要长期项目，则应采取这种方法。首先进行应用现代化，然后在分阶段的方式中将数据库作为最终切换的目标进行升级。您需要建立一个机制，使得遗留和升级模块能够共存，并具有以混合方式进行通信的能力。'
- en: '**Migration and enhancements**: You can use migration and minor enhancement
    approaches if your existing system technology works relatively well but is restricted
    due to hardware limitations and cost. For example, you can lift and shift the
    entire workload to the cloud for better infrastructure availability and cost optimization.
    In addition, a cloud provider extends several out-of-the-box tools that help you
    make changes more frequently and apply better automation. A migration approach
    enables you to modernize your application with less effort and makes it future-proof,
    keeping it relevant for the long term. However, lift and shift are limited and
    may only be suitable for some workloads.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迁移和增强**：如果您现有的系统技术相对有效，但由于硬件限制和成本问题受到制约，您可以选择迁移和小幅增强的方法。例如，您可以将整个工作负载迁移到云端，以获得更好的基础设施可用性和成本优化。此外，云服务提供商提供了多个现成的工具，帮助您更频繁地进行更改并应用更好的自动化。迁移方法使您能够以较少的努力现代化应用程序，并确保它面向未来，使其长期保持相关性。然而，迁移方法有限，可能只适用于某些工作负载。'
- en: As you aim to migrate and modernize, consider specific IT domains that require
    substantial redesign and modernization. This modernization includes developer
    operating system environments as they affect patch management. Security, network,
    and identity are next and offer an excellent opportunity for scalability, resilience,
    and cost reduction. After that comes storage, backup, and database tools as more
    apps move to the cloud. Also, you need to modernize your monitoring and management
    tools, which require training and re-skilling. Let’s look into various strategies
    to modernize legacy systems.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在你计划迁移和现代化时，要考虑那些需要大量重新设计和现代化的特定 IT 领域。这一现代化包括开发人员的操作系统环境，因为它们会影响补丁管理。接下来是安全性、网络和身份，它们为扩展性、弹性和成本降低提供了绝佳机会。然后是存储、备份和数据库工具，随着更多应用迁移到云端，它们也需要现代化。此外，你还需要现代化监控和管理工具，这需要培训和重新技能提升。让我们来看看各种现代化遗留系统的策略。
- en: Benefits of system modernization
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统现代化的好处
- en: 'Creating a future digital strategy by addressing the growing need for legacy
    system modernization can have many advantages, as shown in the following diagram:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解决遗留系统现代化日益增长的需求来制定未来的数字战略，可以带来许多优势，正如下图所示：
- en: '![A picture containing text, screenshot, cartoon, diagram  Description automatically
    generated](img/B21336_15_03.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![A picture containing text, screenshot, cartoon, diagram  Description automatically
    generated](img/B21336_15_03.png)'
- en: 'Figure 15.3: Benefits of legacy system modernization'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3：遗留系统现代化的好处
- en: 'The following are the significant benefits of application modernization:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是应用现代化的显著好处：
- en: '**Customer satisfaction**: Using the latest technology gives a better **user
    interface** (**UI**), **user experience** (**UX**), and an omnichannel experience.
    Consumers have grown accustomed to real-time access to information from any device,
    location, or time through personal experiences. You don’t need to build different
    variations of the UI; it can be built once and deployed across devices such as
    laptops, tablets, and smartphones. A fast and slick UI leads to better customer
    experience and business growth.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户满意度**：使用最新的技术提供更好的**用户界面**（**UI**）、**用户体验**（**UX**）和全渠道体验。消费者已经习惯于通过个人体验从任何设备、位置或时间实时访问信息。你不需要为
    UI 构建不同的变体；它可以一次构建并部署到笔记本、平板和智能手机等设备上。快速且流畅的 UI 带来更好的客户体验和商业增长。'
- en: '**Future-proof business strategy**: Modernizing your application allows you
    to be more agile and innovative. A team can accommodate the changing needs of
    the business comfortably and evolve with new technology.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向未来的商业战略**：现代化你的应用程序使你能够更加灵活和创新。团队可以轻松应对业务需求的变化，并与新技术一起发展。'
- en: '**Stay ahead of the competition**: Users always look for the latest stuff and
    move to new applications that give a better experience. The modernization of your
    application helps you stay ahead of the competition by following the latest trends.
    For example, voice integration is widely provided in apps, and you can enhance
    security with face detection. This is only possible when your application adopts
    the latest technology.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持领先竞争**：用户总是寻找最新的东西，并转向那些提供更好体验的新应用。应用程序的现代化帮助你通过跟随最新趋势保持领先竞争。例如，语音集成在应用中被广泛提供，你可以通过人脸识别增强安全性。只有当你的应用采用最新技术时，这才是可能的。'
- en: '**Application reliability and performance**: Every new software API and operating
    system version tries to address and improve performance issues. Using the latest
    software and hardware helps you achieve better performance, scalability, and high
    availability. Application modernization helps you reduce operational outages and
    enhance security.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序的可靠性和性能**：每个新的软件 API 和操作系统版本都尝试解决和改进性能问题。使用最新的软件和硬件有助于你实现更好的性能、可扩展性和高可用性。应用现代化帮助你减少运营中断并增强安全性。'
- en: '**Ability to use cutting-edge technologies**: Legacy systems prevent you from
    getting insights from data that could help you grow your business. By modernizing
    your database and creating a data lake, you can use big data and ML to get all
    kinds of insights. This also helps you retain employees when people get the opportunity
    to work with new technologies.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用前沿技术的能力**：遗留系统阻止你从数据中获得可以帮助你发展业务的洞察。通过现代化你的数据库并创建数据湖，你可以使用大数据和机器学习获得各种洞察。这还帮助你留住员工，因为人们有机会使用新技术。'
- en: '**Cost savings**: Overall, any modernization leads to cost savings by reducing
    operational maintenance and providing a more natural upgrade. Utilization of open-source
    software reduces licensing costs, hardware flexibility helps to adopt a cloud
    pay-as-you-go model, and automation reduces the human resources needed for routine
    jobs and improves overall efficiency.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本节省**：总体而言，任何现代化都能通过减少运营维护成本和提供更自然的升级带来成本节省。利用开源软件可以降低许可成本，硬件灵活性有助于采用云按需付费模式，自动化减少了日常工作所需的人力资源，并提高了整体效率。'
- en: By migrating legacy core systems, organizations can modernize their core systems
    to reduce the cost of ownership, automate manual back-office processes, eliminate
    data silos, improve customer experience, and launch new market-facing applications
    faster.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过迁移遗留核心系统，组织可以现代化其核心系统，从而降低拥有成本，自动化手工后勤流程，消除数据孤岛，改善客户体验，并更快地推出面向市场的新应用程序。
- en: There are several benefits of legacy system modernization but they can be very
    complex and require lots of effort. A careful assessment needs to be conducted
    to take the right approach. Let’s explore the assessment techniques of a legacy
    application.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留系统现代化有许多好处，但可能非常复杂，需要大量努力。需要进行仔细评估，以采取正确的方法。让我们探讨一下遗留应用程序的评估技术。
- en: Looking at legacy system modernization techniques
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看遗留系统现代化技术
- en: Per your existing application analysis, you can take various approaches to upgrade
    your legacy system. The most straightforward approach is migration and rehosting,
    where you don’t need to change the existing system. However, a simple migration
    may not solve the long-term problem or provide any benefits.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 根据现有应用程序分析，您可以采取各种方法来升级您的遗留系统。最直接的方法是迁移和再托管，您无需更改现有系统。然而，简单的迁移可能无法解决长期问题或带来任何好处。
- en: 'You can take a more complex approach, such as rearchitecting or redesigning
    the entire application if the system no longer meets business needs. The following
    diagram illustrates the impact of the various methods:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统不再满足业务需求，您可以采取更复杂的方法，例如重新架构或重新设计整个应用程序。下图说明了各种方法的影响：
- en: '![A picture containing text, screenshot, font, design  Description automatically
    generated](img/B21336_15_04.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、屏幕截图、字体、设计的图片 由描述自动生成](img/B21336_15_04.png)'
- en: 'Figure 15.4: Legacy system modernization techniques'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：遗留系统现代化技术
- en: Let’s examine the various modernization techniques shown in the preceding diagram.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看前面图表中展示的各种现代化技术。
- en: Encapsulation, rehosting, and replatforming
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 封装、再托管和再平台化
- en: '**Encapsulation** is the most straightforward approach. If the system is business-critical
    and needs to communicate with other applications running on the latest technology,
    you should use this approach. With encapsulation, you need to build an API wrapper
    around your legacy system, allowing other business applications to communicate
    with a legacy application. An API wrapper is a common approach whereby you start
    migrating your applications to the cloud but keep the legacy application in the
    on-premises data center for modernization in the later phase. You can choose the
    encapsulation option if your legacy code is well-written and maintained but, again,
    you cannot benefit from technology advancements and hardware flexibility.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**封装** 是最直接的方法。如果系统对业务至关重要且需要与运行在最新技术上的其他应用程序通信，则应使用此方法。通过封装，您需要在遗留系统周围构建API包装器，允许其他业务应用程序与遗留应用程序通信。API包装器是一种常见的方法，您可以开始将应用程序迁移到云端，但保留遗留应用程序在本地数据中心进行后续现代化。如果您的遗留代码编写良好且得到维护，您可以选择封装选项，但同样，您无法从技术进步和硬件灵活性中获益。'
- en: The **rehosting** approach is among the most straightforward strategies, whereby
    you migrate your application to another hardware provider, such as the AWS cloud,
    without any code changes. Again, as with encapsulation, the rehosting option can
    reduce costs due to vendor contracts but you may not benefit from technology advancements
    and hardware flexibility.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**再托管** 方法是其中最直接的策略之一，您可以将应用程序迁移到另一个硬件提供商（如AWS云），而无需进行任何代码更改。与封装一样，再托管选项可以通过供应商合同减少成本，但您可能无法从技术进步和硬件灵活性中获益。'
- en: An organization often takes this approach when it needs to quickly move out
    of an existing contract. For example, you can take the first step to the cloud
    in phase one and apply modernization in phase two.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 组织通常在需要快速摆脱现有合同时采用这种方法。例如，你可以在第一阶段开始迁移到云端，并在第二阶段应用现代化。
- en: The **replatforming** approach may get more complex than the rehosting approach
    but will provide immediate benefits. Organizations often choose this approach
    if the server reaches EOL, where no support is available, and an upgrade is necessary
    to handle security issues. For example, if Windows Server 2012 is reaching EOL,
    consider upgrading the operating system to the Windows Server 2022 version. You
    need to rebuild your binaries with the new operating system and carry out testing
    to make sure everything works properly but there are no significant code changes.
    Again, as with rehosting, with replatforming, you may not benefit from technology
    advancements. However, it will allow you to have continuous support from the vendor.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**重新平台化**方法可能比重新托管方法更为复杂，但能够提供即时的收益。如果服务器已经达到EOL（生命周期结束），无法获得支持，需要进行升级以处理安全问题，组织通常会选择这种方法。例如，如果Windows
    Server 2012即将达到EOL，可以考虑将操作系统升级到Windows Server 2022版本。你需要使用新的操作系统重新构建二进制文件，并进行测试确保一切正常运行，但不会有重大的代码更改。同样，与重新托管类似，重新平台化可能无法享受技术进步带来的好处，但它将使你继续获得供应商的支持。'
- en: While the preceding three approaches are the simplest ones, they cannot provide
    the full benefit of an application upgrade. Let’s look at approaches that help
    you to take full advantage of application modernization.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面提到的三种方法是最简单的，但它们无法提供应用程序升级的全部优势。让我们来看看一些能够帮助你充分利用应用程序现代化的方式。
- en: Refactoring and rearchitecting
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构与重新架构
- en: You can refactor your code to accommodate the new system in the refactoring
    approach. The overall architecture will be the same in refactoring, but you upgrade
    your code to suit the latest programming language and operating system version.
    You can refactor the portion of code to apply automation and perform feature enhancement.
    If your technology is still relevant and can accommodate business needs with code
    changes, you should take this approach.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**重构**方法中调整代码以适应新系统。重构后的整体架构保持不变，但你会升级代码以适应最新的编程语言和操作系统版本。你可以重构部分代码以实现自动化并增强功能。如果你的技术仍然相关，并且通过代码更改可以满足业务需求，那么你应该选择这种方法。
- en: In the **rearchitecting** approach, you change the system architecture by reutilizing
    the existing code as much as possible. For example, you may create a microservices
    architecture from your monolithic architecture. You can take one module at a time
    and convert it into a service-oriented architecture by giving each module a RESTful
    endpoint. The rearchitecting option helps you achieve the desired scalability
    and reliability; however, overall performance results may be average due to the
    utilization of existing code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在**重新架构**方法中，你通过尽可能重新利用现有代码来改变系统架构。例如，你可以从单体架构创建微服务架构。你可以一次性迁移一个模块，将其转化为面向服务的架构，并为每个模块提供一个RESTful接口。重新架构有助于你实现所需的可扩展性和可靠性；然而，由于仍然使用现有代码，整体性能可能会较为一般。
- en: Redesigning and replacing
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重设计与替换
- en: The **redesigning** approach is the most complex but provides the maximum benefit.
    You can choose this approach if the legacy system needs to be updated and cannot
    accommodate business needs. With redesigning, you must build the entire system
    from scratch while keeping the overall scope intact.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**重设计**方法是最复杂的，但能够提供最大的收益。如果遗留系统需要更新且无法满足业务需求，可以选择这种方法。通过重设计，你必须从头开始构建整个系统，同时保持整体范围不变。'
- en: 'The following diagram shows the legacy mainframe system migration to the AWS
    cloud:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了遗留大型主机系统迁移到AWS云端的过程：
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B21336_15_05.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B21336_15_05.png)'
- en: 'Figure 15.5: Legacy mainframe system modernization to the cloud'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5：遗留大型主机系统现代化到云端
- en: A legacy mainframe system is rearchitected and refactored to similar cloud services
    as a *modernization approach*. Building a cloud-native application helps you utilize
    and fully benefit from cloud services in aspects of scalability, performance,
    reliability, and cost. It helps your team to be more agile and innovative by accommodating
    rapidly changing technology in your system. You learned about cloud migration
    strategy and benefits in *Chapter 3*, *Cloud Migration and Hybrid Cloud Architecture
    Design*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 传统主机系统经过重新架构和重构，转变为类似的云服务，作为*现代化方法*。构建云原生应用程序有助于你在可扩展性、性能、可靠性和成本等方面充分利用并从云服务中受益。它帮助你的团队更加灵活和创新，能够适应系统中迅速变化的技术。你在*第3章*，*云迁移与混合云架构设计*中学习了云迁移策略和其带来的好处。
- en: Redesigning a legacy system requires a long-term project with lots of effort
    and increased cost. Before kicking off modernization, as a solutions architect,
    you should carefully analyze if any SaaS product or **commercially available off-the-shelf**
    (**COTS**) products can handle your business needs at a lower cost. A **cost-benefit
    analysis** (**CBA**) between *redesign* and *purchase* is essential before proceeding
    with the redesigning option.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 重新设计一个传统系统需要长期的项目投入，伴随着大量的工作量和增加的成本。在启动现代化之前，作为解决方案架构师，你应当仔细分析是否有任何SaaS产品或**商业现成产品**（**COTS**）能够以较低的成本满足你的业务需求。在进行重新设计选项之前，进行*重新设计*与*购买*之间的**成本效益分析**（**CBA**）是至关重要的。
- en: Sometimes, it’s more beneficial to replace the legacy system with new third-party
    software. For example, your organization may have a decade-old **Customer Relationship
    Management** (**CRM**) system that cannot scale and provide the desired feature.
    You can subscribe to SaaS products such as Salesforce CRM to replace the legacy
    system. SaaS products are subscription-based and offer per-user licenses, so they
    may be the right choice if you have few users. Building its application may be
    more cost-effective for a vast enterprise with tens of thousands of users. You
    should conduct a CBA to understand the ROI when investing in SaaS products. Let’s
    look at a cloud migration strategy in a nutshell here.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，替代传统系统以新的第三方软件更为有利。例如，你的组织可能拥有一个已有十年历史的**客户关系管理**（**CRM**）系统，它无法扩展并提供所需的功能。你可以订阅像Salesforce
    CRM这样的SaaS产品来替代传统系统。SaaS产品是基于订阅的，并提供按用户计算的许可，因此如果你的用户较少，它们可能是合适的选择。对于一个拥有成千上万用户的大型企业，构建应用可能更具成本效益。你应该进行CBA以了解投资SaaS产品的投资回报率。我们来简要看一下云迁移策略。
- en: Defining a cloud migration strategy for legacy systems
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为传统系统定义云迁移策略
- en: As the cloud becomes increasingly popular, more organizations are looking to
    migrate to the cloud for their legacy application modernization needs. You learned
    about various cloud migration techniques in *Chapter 3*, *Cloud Migration and
    Hybrid Cloud Architecture* *Design*. The cloud allows you to scale your application
    while keeping costs low and helps you achieve desirable performance, high availability,
    and reliability while maintaining application security.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算的日益普及，越来越多的组织希望将其传统应用迁移到云端以满足现代化需求。你在*第3章*，*云迁移与混合云架构设计*中学习了各种云迁移技术。云计算让你在保持低成本的同时扩展应用，并帮助你实现理想的性能、高可用性和可靠性，同时保障应用的安全性。
- en: Cloud providers such as AWS, Microsoft Azure, and GCP provide many options that
    can help you modernize your system. For example, you can take a serverless approach
    to build a microservice using AWS Lambda and Amazon API Gateway, with Amazon DynamoDB
    as the backend.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商，如AWS、微软Azure和GCP，提供了许多帮助你现代化系统的选项。例如，你可以采用无服务器方法，利用AWS Lambda和Amazon
    API Gateway构建微服务，并以Amazon DynamoDB作为后端。
- en: 'In the previous section, we discussed various legacy system modernization techniques
    and their application in moving to the cloud. The flow illustrated in the following
    diagram will help you decide whether to use cloud migration to modernize your
    legacy application:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了各种传统系统现代化技术及其在迁移到云端过程中的应用。下面的图表所示的流程将帮助你决定是否采用云迁移来现代化你的传统应用：
- en: '![Diagram  Description automatically generated](img/B21336_15_06.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图表 描述自动生成](img/B21336_15_06.png)'
- en: 'Figure 15.6: Cloud migration path for legacy system modernization'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6：传统系统现代化的云迁移路径
- en: As shown in the preceding diagram, if your application is still heavily used
    by businesses and generates revenue, you should continue with minimal changes.
    In that situation, you can refactor your application into the cloud or re-platform
    it in the cloud if the server is reaching EOL.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，如果你的应用程序仍然被业务大量使用并创造收入，你应继续保持最小的变更。在这种情况下，如果服务器即将结束生命周期，你可以将应用程序重构到云端，或者将其重新平台化。
- en: If you want to keep existing applications the same to sustain business and still
    want to move to the cloud entirely to save and optimize costs, then take the *lift-and-shift
    approach* to rehost the legacy application in the cloud. If your legacy application
    is replaceable, you can buy a cloud-native SaaS version of the product and retire
    your legacy application. You may want to retain your legacy system in the on-premises
    data center if there are too many business dependencies and it cannot move into
    the cloud due to incompatibility.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望保持现有应用程序不变以支持业务，并且仍然希望完全迁移到云端以节省和优化成本，那么可以采用 *提升与转移策略* 将传统应用程序重新托管到云端。如果你的传统应用程序可以替代，你可以购买云原生的
    SaaS 版本并淘汰旧的应用程序。如果传统系统存在过多的业务依赖，并且由于不兼容无法迁移到云端，你可能会选择将其保留在本地数据中心。
- en: 'You should perform a **total cost of ownership** (**TCO**) analysis to understand
    the advantages of moving to the cloud. This includes:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该进行 **总体拥有成本**（**TCO**）分析，以了解迁移到云端的优势。分析内容包括：
- en: '**Infrastructure costs**: Compare the costs of on-premises infrastructure,
    including servers, storage, networking, and data center facilities, against the
    cloud services expenses.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施费用**：比较本地基础设施的费用，包括服务器、存储、网络和数据中心设施费用，和云服务的费用。'
- en: '**Maintenance and administrative costs**: Factor in the costs associated with
    maintaining and managing on-premises infrastructure, such as IT staff salaries,
    compared to the managed services in the cloud that reduce the need for in-house
    management.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护和管理成本**：考虑与维护和管理本地基础设施相关的费用，例如 IT 员工薪资，与云端托管服务相比，后者减少了对内部管理的需求。'
- en: '**Scalability and flexibility**: Evaluate the cost implications of the cloud’s
    ability to scale resources up or down based on demand, which can lead to cost
    savings compared to the fixed costs of on-premises infrastructure.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和灵活性**：评估云端根据需求调整资源的能力所带来的成本影响，相比于固定成本的本地基础设施，这可能会带来成本节省。'
- en: '**Licensing and subscription costs**: Include the costs of software licenses
    and cloud service subscriptions.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**许可和订阅费用**：包括软件许可费用和云服务订阅费用。'
- en: '**Migration costs**: Consider the one-time costs of migrating workloads to
    the cloud, including data transfer costs, tooling, and potential downtime.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迁移费用**：考虑迁移工作负载到云端的单次费用，包括数据传输费用、工具费用以及可能的停机时间。'
- en: '**Security and compliance**: Assess the costs related to achieving and maintaining
    security and compliance standards, both in on-premises environments and the cloud.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性和合规性**：评估在本地环境和云端实现和维护安全性与合规性标准的费用。'
- en: It is recommended to take the most complex module of the legacy application
    and build a POC to ensure your entire system will be cloud-compatible before starting
    the full project. A detailed POC covering the critical business cases will help
    you identify gaps and reduce the migration risk significantly.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 建议选择传统应用程序中最复杂的模块，构建一个 POC，以确保在启动整个项目之前，您的系统能够与云端兼容。涵盖关键业务案例的详细 POC 将帮助你识别差距并显著降低迁移风险。
- en: When evaluating cloud compatibility, several key factors should be considered.
    Firstly, assess the architectural fit, ensuring the application’s design adheres
    to cloud principles such as scalability, resilience, and decoupling. Next, identify
    any dependencies on specific hardware or local resources that the cloud may not
    optimally support. It’s also crucial to confirm that the cloud environment can
    meet the application’s performance requirements, taking into account factors like
    network latency and resource availability. Additionally, ensure that the application’s
    security and compliance demands can be fully met in the cloud. Finally, evaluate
    the cost-effectiveness of migrating to the cloud, ensuring it aligns with the
    organization’s financial objectives. This holistic approach helps determine whether
    an application is well-suited for a cloud environment, facilitating informed decision-making
    regarding migration.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估云兼容性时，应该考虑几个关键因素。首先，评估架构的适配性，确保应用程序的设计符合云计算原则，如可扩展性、弹性和解耦性。接下来，识别是否存在对特定硬件或本地资源的依赖，而这些资源在云环境中可能无法得到最佳支持。还需要确认云环境是否能够满足应用程序的性能要求，考虑到诸如网络延迟和资源可用性等因素。此外，确保应用程序的安全性和合规性要求能够在云中得到充分满足。最后，评估迁移到云端的成本效益，确保其与组织的财务目标一致。这种全面的方法有助于确定应用程序是否适合云环境，从而为迁移决策提供依据。
- en: Documentation and support are a critical part of any application maintenance.
    Let’s learn more about them.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和支持是任何应用程序维护的重要组成部分。让我们深入了解它们。
- en: Documentation and support
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档和支持
- en: Prepare proper documentation and support for the long-term sustainability of
    a new system and graceful migration to it. Provide documentation for your coding
    standards that everyone can follow, which helps keep the new system current. Keep
    your architecture documents as working artifacts, keeping them updated as technology
    trends change. Keeping your system updated will ensure you avoid facing the legacy
    system modernization situation again.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为新系统的长期可持续性和顺利迁移准备适当的文档和支持。提供符合大家可以遵循的编码标准文档，帮助保持新系统的最新状态。将架构文档作为工作文档，随着技术趋势的变化，保持它们的更新。保持系统更新将确保你避免再次面临遗留系统现代化的问题。
- en: Prepare a comprehensive runbook to support new and old systems. You can keep
    the old system for some time until the new system can accommodate all business
    requirements and run satisfactorily. Update the support runbook, and ensure that
    you don’t lose knowledge due to employee attrition and that the overall knowledge
    base is not processed in a people-dependent manner.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个全面的运行手册，以支持新旧系统。你可以保留旧系统一段时间，直到新系统能够满足所有业务需求并正常运行。更新支持运行手册，确保你不会因员工流失而失去知识，且整体知识库不以依赖人员的方式运作。
- en: Keeping track of system dependencies helps you to determine the impact of any
    changes in the future. You will learn more about documentation in *Chapter 16*,
    *Solution Architecture Document*. Prepare training content to train staff on the
    new system, and ensure they can support it if there’s an operational outage.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪系统依赖关系有助于你确定未来任何更改的影响。你将会在*第16章*，*解决方案架构文档*中学到更多关于文档的内容。准备培训内容，培训员工掌握新系统，并确保他们能够在发生操作故障时提供支持。
- en: Mainframes are one of the workloads that are legacy and still running on-premises
    in many organizations. Let’s learn about how to migrate them to the cloud.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 主机是许多组织仍在本地运行的遗留工作负载之一。让我们来了解一下如何将它们迁移到云端。
- en: Mainframe migration with the public cloud
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公有云下的主机迁移
- en: Many enterprises are moving their mainframe workloads to the cloud to take advantage
    of cost reduction, increased agility, technical debt reduction, digital strategy
    support, the legacy mainframe skills gap, and data analytics. Mainframe workloads
    are more challenging to migrate than x86-based workloads because legacy mainframe
    applications are often developed and deployed in a tightly coupled manner. For
    example, a mainframe application might include programs used by several subsystems
    or directly called by other applications. In these cases, changes made to the
    underlying programs also affect the associated subsystems and applications.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 许多企业正在将他们的大型主机工作负载迁移到云端，以利用成本降低、提高灵活性、减少技术债务、支持数字化战略、解决遗留的主机技能差距以及数据分析。与基于x86的工作负载相比，大型主机工作负载的迁移更具挑战性，因为遗留的主机应用程序通常是紧密耦合的方式开发和部署的。例如，一个大型主机应用程序可能包含多个子系统使用的程序，或者直接被其他应用程序调用。在这些情况下，对底层程序所做的更改也会影响相关的子系统和应用程序。
- en: 'Transitioning from mainframe systems to the cloud presents a unique opportunity,
    even though cloud providers may not support the exact mainframe hardware architecture.
    For organizations, this transition involves strategic choices: they can emulate
    mainframe environments on x86 platforms or refactor their applications for x86
    compatibility. While refactoring demands more upfront investment, it paves the
    way for a scalable application landscape in the cloud, ultimately aligning with
    digital transformation goals and driving innovation.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 从大型主机系统迁移到云端提供了一个独特的机会，尽管云服务商可能不支持完全相同的主机硬件架构。对于组织来说，这一过渡涉及战略性选择：他们可以在x86平台上模拟主机环境，或者重新构建他们的应用程序以实现与x86的兼容性。虽然重新构建需要更多的前期投资，但它为云中的可扩展应用环境铺平了道路，最终与数字化转型目标对接，并推动创新。
- en: For legacy applications, you must take an incremental approach, where the migration
    is planned in waves, as a best practice. This approach helps to reduce risks because
    you select and prioritize closely related applications to be migrated together.
    However, this approach could sometimes be more complex for mainframe migrations
    because the mainframe application code can use temporal coupling (invoked synchronously)
    or deployment coupling (linked modules).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于遗留应用程序，必须采取增量方式进行迁移，这是最佳实践。这种方法有助于降低风险，因为您可以选择并优先考虑紧密相关的应用程序一起迁移。然而，对于主机迁移，这种方法有时可能更复杂，因为主机应用程序代码可能使用时间耦合（同步调用）或部署耦合（链接模块）。
- en: Let’s see some unique challenges that you may face with mainframe migration.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在主机迁移过程中可能面临的一些独特挑战。
- en: Challenges of mainframe modernization
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大型主机现代化的挑战
- en: 'Modernizing mainframes presents unique challenges due to their scale, complexity,
    and the critical nature of the applications they often run. These systems frequently
    use outdated programming languages, possess intricate and undocumented dependencies,
    and require specialized knowledge that is increasingly scarce. The following are
    some of the key challenges:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现代化大型主机面临着独特的挑战，原因在于它们的规模、复杂性以及它们常常运行的关键应用程序。这些系统通常使用过时的编程语言，具有复杂且未记录的依赖关系，并且需要越来越稀缺的专业知识。以下是一些主要挑战：
- en: '**Outdated programming languages**: Mainframes often run on legacy code bases
    that use older programming languages, which modern IT professionals may need to
    become more familiar with.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过时的编程语言**：大型主机通常运行在使用较老编程语言的遗留代码库上，而现代IT专业人员可能对这些语言不太熟悉。'
- en: '**Complex system dependencies**: Many mainframe applications have evolved over
    decades with intricate, undocumented dependencies, making it difficult to disentangle
    and modernize them without breaking functionality.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂的系统依赖关系**：许多大型主机应用程序经历了数十年的发展，具有复杂且未记录的依赖关系，这使得在不破坏功能的情况下解开并现代化它们变得困难。'
- en: '**Specialized knowledge requirements**: The expertise required to operate and
    maintain mainframe systems is becoming rare as the workforce skilled in these
    older technologies retires.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专业知识要求**：操作和维护大型主机系统所需的专业知识正变得稀缺，因为熟悉这些旧技术的员工正逐步退休。'
- en: '**Data integrity and security**: During modernization, there is a critical
    need to maintain the integrity and security of data, which can be challenging
    when transitioning from a closed, secure mainframe environment to a more open
    system.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据完整性和安全性**：在现代化过程中，维护数据的完整性和安全性至关重要，而在从封闭的安全大型主机环境迁移到更加开放的系统时，这一任务可能变得更加具有挑战性。'
- en: '**Business continuity risks**: Mainframes typically manage essential business
    operations. Modernization efforts must be carefully planned to avoid disrupting
    these business-critical processes.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务连续性风险**：主机通常管理着关键的业务操作。现代化工作必须小心规划，以避免中断这些对业务至关重要的过程。'
- en: '**Integration with modern technologies**: Integrating mainframe applications
    with newer cloud-based services and technologies can be complex due to differing
    architectures and communication protocols.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与现代技术的集成**：将主机应用程序与更新的基于云的服务和技术集成可能会变得复杂，因为它们具有不同的架构和通信协议。'
- en: '**Scaling challenges**: Adapt mainframe applications, often not designed for
    horizontal scaling, to modern cloud environments where elastic scaling is the
    norm.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展性挑战**：将主机应用程序适应现代云环境，特别是这些应用程序通常未设计为支持水平扩展，而云环境中的弹性扩展已成为常态。'
- en: '**Cost implications**: Assess and justify the financial investment required
    for modernization, which can be substantial, especially in the short term.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本影响**：评估并证明现代化所需的财务投资是合理的，特别是在短期内，这笔投资可能非常庞大。'
- en: '**Performance considerations**: Ensure that the modernized systems deliver
    equivalent or improved performance compared to the highly optimized mainframe
    systems.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能考虑**：确保现代化系统在性能上与高度优化的主机系统相当或有所提升。'
- en: '**Cultural and organizational resistance**: You may need to overcome resistance
    within the organization, as mainframe systems are deeply embedded in the company’s
    operational fabric, and change can be met with apprehension from stakeholders
    accustomed to the existing systems.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文化与组织的抵触**：您可能需要克服组织内部的抗拒，因为主机系统深深嵌入了公司的运营结构中，变革可能会引发习惯于现有系统的利益相关者的忧虑。'
- en: Ensuring data integrity and security during the transition is also a significant
    concern, as is the risk of disrupting business operations, given that mainframes
    commonly handle core business processes.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在过渡过程中确保数据的完整性和安全性也是一个重大问题，尤其是在主机通常处理核心业务流程的情况下，存在中断业务运营的风险。
- en: Migrating the coupled application code affects dependent applications and carries
    some risks. To reduce these risks, you can decouple the mainframe application
    code without impacting dependent applications. From a code migration perspective,
    the two main types of legacy mainframe applications are standalone applications
    and applications with shared code. Let’s look at the details of each migration
    pattern.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移耦合的应用程序代码会影响到依赖的应用程序，并且会带来一定的风险。为减少这些风险，您可以在不影响依赖应用程序的情况下，解耦主机应用程序代码。从代码迁移的角度来看，主要有两种类型的遗留主机应用程序：独立应用程序和共享代码的应用程序。让我们详细了解每种迁移模式。
- en: Migrating standalone applications
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迁移独立应用程序
- en: Let’s assume that there are two applications, A and B, that are standalone mainframe
    applications. Each application consists of programs and subprograms that it uses
    exclusively.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有两个独立的应用程序A和B，它们是独立的主机应用程序。每个应用程序由它独有的程序和子程序组成。
- en: Because the applications are self-contained, you can group the **COBOL** programs
    and subprograms by application for code refactoring, as shown in the following
    diagram.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序是自包含的，您可以按照应用程序将**COBOL**程序和子程序分组进行代码重构，如下图所示。
- en: '**![A picture containing text, screenshot, display, rectangle  Description
    automatically generated](img/B21336_15_07.png)**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**![图片，包含文本、截图、显示器、矩形 说明自动生成](img/B21336_15_07.png)**'
- en: 'Figure 15.7: Mainframe modernization for a standalone application'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7：独立应用程序的主机现代化
- en: In the preceding diagram, the mainframe programs and subprograms are written
    in COBOL, and the code is migrated to Java on AWS. However, you can use these
    decoupling patterns with your programming languages of choice. The migration pattern
    is legacy automated refactoring, where code, data, and dependencies are automatically
    converted to a modern language, data store, and framework while guaranteeing functional
    equivalence with the same business functions. Refactoring involves using automated
    tools to convert the mainframe programming language (such as COBOL) into modern
    programming languages (such as Java or . NET).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，主机程序和子程序是用COBOL编写的，代码迁移到了AWS上的Java。然而，您可以使用这些解耦模式，选择您偏好的编程语言进行迁移。迁移模式是遗留的自动重构，其中代码、数据和依赖关系会自动转换为现代编程语言、数据存储和框架，同时保证与相同业务功能的功能等效性。重构涉及使用自动化工具将主机编程语言（如COBOL）转换为现代编程语言（如Java或.NET）。
- en: Refactored applications are deployed on containers provisioned and managed by
    **AWS Fargate**. Fargate is a serverless compute engine for containers that works
    with both Amazon **Elastic Container Service** (**ECS**) and Amazon **Elastic
    Kubernetes Service** (**EKS**). Here, mainframe database tables and mainframe
    files are migrated with the application.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 重构后的应用程序部署在由 **AWS Fargate** 提供和管理的容器中。Fargate 是一个无服务器容器计算引擎，可与 Amazon **Elastic
    Container Service** (**ECS**) 和 Amazon **Elastic Kubernetes Service** (**EKS**)
    配合使用。在此，主机数据库表和主机文件与应用程序一起迁移。
- en: After grouping, you can migrate applications A and B in the same or different
    waves. In either case, package the refactored modern components for each application
    and deploy them together in a runtime environment. After migration, retire the
    on-premises mainframe applications and their components. Let’s look at more complicated
    scenarios where multiple applications share code.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 分组后，你可以在同一波次或不同波次中迁移应用程序 A 和 B。无论哪种情况，都将每个应用程序的重构现代组件打包，并一起部署到运行时环境中。迁移后，退役本地主机应用程序及其组件。接下来，让我们看一下多个应用程序共享代码的更复杂场景。
- en: Migrating applications with shared code
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迁移具有共享代码的应用程序
- en: Let’s assume mainframe applications A and B run shared code called program AB.
    You need to perform an impact analysis of the shared program AB to migrate applications
    A and B and program AB together. Based on the impact analysis, identify the number
    of dependent applications that use shared programs, such as program AB. You need
    to complete a business domain analysis to determine whether the shared program
    can be aggregated into a domain with applications and exposed as an API as one
    of the domain services. Let’s look at some approaches you can take to decouple
    the applications in preparation for migration.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 假设主机应用程序 A 和 B 运行共享代码程序 AB。你需要对共享程序 AB 进行影响分析，以便一起迁移应用程序 A 和 B 以及程序 AB。根据影响分析，确定使用共享程序（如程序
    AB）的依赖应用程序数量。你需要完成业务领域分析，判断是否可以将共享程序聚合到包含应用程序的领域中，并作为领域服务之一暴露为 API。接下来，让我们看一下你可以采取的一些方法来解耦应用程序，为迁移做好准备。
- en: Application decoupling using a standalone API
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用独立 API 解耦应用程序
- en: 'Using this approach, you instantiate a standalone API by converting the shared
    COBOL program AB into a Java program. You can use automated refactoring tools
    provided to generate network APIs for the program to minimize refactoring efforts.
    You can take this approach when the shared program can be instantiated as a standalone
    service. The remaining components of applications A and B are refactored into
    Java and migrated to the cloud. You can migrate the applications in the same wave,
    as shown in the following diagram:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，你通过将共享的 COBOL 程序 AB 转换为 Java 程序来实例化独立的 API。你可以使用提供的自动化重构工具生成该程序的网络 API，以尽量减少重构工作量。当共享程序可以作为独立服务实例化时，你可以采用这种方法。应用程序
    A 和 B 的其他组件将被重构为 Java 并迁移到云端。你可以在同一波次中迁移应用程序，具体如以下图所示：
- en: '![A picture containing text, screenshot, display, rectangle  Description automatically
    generated](img/B21336_15_08.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![一张包含文本的图片，屏幕截图，显示矩形  描述自动生成](img/B21336_15_08.png)'
- en: 'Figure 15.8: Migration of shared program applications using a standalone API'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.8：使用独立 API 迁移共享程序应用程序
- en: In this approach, you must refactor both applications with their respective
    programs and migrate them to the cloud. You need to use the impact analysis report
    from the analysis phase to help developers and teams identify the refactored applications
    that call the shared program AB. Replace the inner program call with network API
    calls to the shared program AB. After the migration, retire the on-premises mainframe
    applications and their components.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，你必须重构两个应用程序及其各自的程序，并将它们迁移到云端。你需要使用分析阶段的影响分析报告，帮助开发人员和团队识别调用共享程序 AB 的重构应用程序。用网络
    API 调用替换内部程序调用。迁移后，退役本地主机应用程序及其组件。
- en: Application decoupling using a shared library
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用共享库解耦应用程序
- en: The shared program AB is converted into a Java standard library and packaged
    with the migration applications in this approach. You should take this approach
    when the shared program is a supporting library instead of a standalone service.
    The remaining components of applications A and B are refactored into Java programs
    and migrated to the cloud.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 共享程序AB被转换为Java标准库，并与迁移应用程序一起打包。在这种方法中，当共享程序是支持库而不是独立服务时，应该采用此方法。应用程序A和B的其余组件被重构为Java程序并迁移到云端。
- en: This approach refactors applications A and B with their associated programs
    into Java and migrates them to the cloud. You should maintain the source code
    of the applications in a fully managed source control service, such as AWS CodeCommit.
    The teams that use the shared program can collaborate on code changes by using
    pull requests, branching, and merging and can control the changes made to the
    shared program code. After the migration, retire the on-premises mainframe applications
    and their components.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将应用程序A和B及其相关程序重构为Java，并迁移到云端。您应该将应用程序的源代码保存在完全托管的源代码控制服务中，例如AWS CodeCommit。使用共享程序的团队可以通过拉取请求、分支和合并来协作进行代码更改，并控制对共享程序代码所做的更改。迁移完成后，停用本地主机应用程序及其组件。
- en: When applications are too big to be grouped into the same migration wave, you
    can migrate them in multiple waves and maintain service continuity during the
    migration. With this approach, you can modernize your applications in phases without
    bundling them. Migrating your applications in separate waves decouples them without
    requiring significant code changes in the mainframe.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序过大，无法归入同一迁移波次时，您可以将其分成多个波次迁移，并在迁移过程中保持服务连续性。采用这种方法，您可以分阶段地现代化应用程序，而无需将它们捆绑在一起。将应用程序分波次迁移，能够解耦它们，而不需要对主机上的代码做出重大修改。
- en: Application decoupling using message queues
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用消息队列进行应用程序解耦
- en: In this approach, the shared program AB is converted into a Java program and
    migrated to the cloud as part of application A. A message queue is used as an
    interface between the refactored application in the cloud and the legacy application
    on-premises. Using this approach, you can break up tightly coupled mainframe applications
    into producers and consumers and make them more modular to function independently.
    The additional advantage is that you can migrate the applications in different
    waves.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，共享程序AB被转换为Java程序，并作为应用程序A的一部分迁移到云端。使用消息队列作为云端重构应用程序和本地遗留应用程序之间的接口。采用这种方法，您可以将紧密耦合的大型主机应用程序拆分为生产者和消费者，并使其更加模块化，从而独立运行。额外的优势是，您可以分波次迁移这些应用程序。
- en: You can take this approach when applications on the mainframe can communicate
    with the migrated applications in the cloud through a message queue. It would
    be best to ensure that the queuing architecture pattern meets the business requirements
    for the applications on the mainframe because it involves rearchitecting the existing
    applications.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当主机上的应用程序能够通过消息队列与迁移到云端的应用程序通信时，您可以采用这种方法。最佳做法是确保排队架构模式满足主机应用程序的业务需求，因为这涉及到重新架构现有的应用程序。
- en: You should take the message queue approach if applications not part of the first
    wave require longer (six months or more) to be migrated to the cloud. When applications
    are too big to be grouped into the same migration wave, you can migrate them in
    multiple waves, as shown in the following diagram, and maintain service continuity
    during migration.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不属于第一波迁移的应用程序需要更长时间（六个月或更长时间）才能迁移到云端，则应该采用消息队列方法。当应用程序过大，无法归入同一迁移波次时，您可以将其分成多个波次迁移，如下图所示，并在迁移过程中保持服务连续性。
- en: '![A picture containing text, screenshot, diagram, rectangle  Description automatically
    generated](img/B21336_15_09.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![A picture containing text, screenshot, diagram, rectangle  Description automatically
    generated](img/B21336_15_09.png)'
- en: 'Figure 15.9: Migration of shared program applications using a message queue'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9：使用消息队列迁移共享程序应用程序
- en: 'As shown in the preceding diagram, you need to follow these steps for migration:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，您需要遵循以下步骤进行迁移：
- en: Migrate (refactor) application A with its associated programs to the cloud while
    application B continues to reside on-premises.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序A及其相关程序迁移（重构）到云端，同时应用程序B继续保留在本地。
- en: Refactor application A (in the cloud) to communicate with application B (on-premises)
    through a message queue.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构应用程序A（在云端），通过消息队列与应用程序B（本地）进行通信。
- en: Refactor application B on-premises to replace the shared program with a proxy
    program that sends and receives messages from application A through the message
    queue.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地重构应用程序B，用代理程序替换共享程序，通过消息队列发送和接收来自应用程序A的消息。
- en: After successfully migrating application A, retire the on-premises application
    A and its components (including the shared program). Application B and its components
    will continue to reside on-premises.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功迁移应用程序A之后，退役本地应用程序A及其组件（包括共享程序）。应用程序B及其组件将继续保留在本地。
- en: In the next set of migration waves, migrate application B and its components.
    The loosely coupled queuing architecture continues to interface between applications
    A and B in the cloud. This reduces the refactoring effort for application B without
    impacting application A.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一波迁移过程中，迁移应用程序B及其组件。松耦合的队列架构继续在云中作为应用程序A和B之间的接口。这减少了对应用程序B的重构工作，而不影响应用程序A。
- en: As a best practice, you should perform code analysis to produce a dependency
    map for the mainframe applications and identify the list of programs shared by
    applications. After that, group applications that share the same programs for
    the same migration wave to reduce program calls between the on-premises environment
    and the cloud. At the planning stage, run an impact analysis to identify applications
    that share programs with the application you plan to migrate, and select the correct
    decoupling patterns for application migration. In this section, you noticed that
    we used the AWS example for mainframe modernization. Let’s take a detailed look
    at the benefits of the public cloud for mainframe modernization.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最佳实践，您应该执行代码分析，以生成主机应用程序的依赖关系图，并识别由应用程序共享的程序列表。之后，将共享相同程序的应用程序分组在同一迁移波次中，以减少本地环境与云之间的程序调用。在规划阶段，进行影响分析，识别与您计划迁移的应用程序共享程序的应用程序，并选择适合的解耦模式进行应用程序迁移。在本节中，您会注意到我们使用了AWS的示例来进行主机现代化。让我们详细了解公共云对主机现代化的好处。
- en: Benefits of using the public cloud for mainframe modernization
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用公共云进行主机现代化的好处
- en: 'Leveraging the public cloud for mainframe modernization brings numerous benefits,
    such as enhanced scalability, flexibility, and cost savings. The cloud’s pay-as-you-go
    model reduces capital expenditure, while its advanced services facilitate innovation,
    especially in areas like AI, ML, and analytics. Cloud environments also provide
    improved disaster recovery capabilities and the opportunity to redesign applications
    to be more resilient and adaptable to changing business needs. Let’s look at some
    of the key benefits of the cloud migration of a mainframe workload:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 利用公共云进行主机现代化带来了众多好处，例如增强的可扩展性、灵活性和成本节省。云的按需付费模式降低了资本支出，而其先进的服务促进了创新，尤其是在人工智能（AI）、机器学习（ML）和分析等领域。云环境还提供了更强的灾难恢复能力，并有机会重新设计应用程序，使其更具弹性，能够适应不断变化的业务需求。让我们看看公共云迁移主机工作负载的一些关键好处：
- en: '**Enhanced scalability**: Cloud platforms can automatically adjust resources
    to handle workload spikes, unlike mainframes that require manual scaling. For
    instance, an e-commerce website can handle holiday shopping traffic spikes without
    downtime.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的可扩展性**：云平台能够自动调整资源以应对工作负载峰值，这与需要手动扩展的主机不同。例如，电商网站能够在假日购物高峰期间应对流量峰值，而不会出现停机。'
- en: '**Cost-effectiveness**: With the cloud’s pay-as-you-go model, companies save
    on the high upfront hardware and maintenance costs. For example, startups can
    launch new applications without investing in expensive mainframe infrastructure.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：借助云的按需付费模式，公司可以节省高昂的前期硬件和维护成本。例如，初创公司可以在无需投资昂贵的主机基础设施的情况下启动新的应用程序。'
- en: '**Flexibility and agility**: Cloud services allow businesses to quickly experiment
    and deploy new applications. A company could, for instance, swiftly test a new
    customer service application in various markets without a lengthy setup process.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性和敏捷性**：云服务使企业能够快速实验和部署新应用程序。例如，一家公司可以迅速在不同市场测试一个新的客户服务应用，而无需经过长时间的设置过程。'
- en: '**Innovation acceleration**: Cloud providers offer cutting-edge AI, ML, and
    analytics tools. A retail business could use these tools to analyze consumer data
    and personalize marketing strategies, which could be improved on a traditional
    mainframe.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创新加速**：云服务提供商提供尖端的人工智能（AI）、机器学习（ML）和分析工具。零售企业可以利用这些工具分析消费者数据并个性化营销策略，这些都可以在传统主机上得到提升。'
- en: '**Improved disaster recovery**: Cloud platforms have built-in redundancy and
    backup solutions. For example, a financial institution can ensure continuous operation
    and data integrity, even in a local disaster.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的灾难恢复**：云平台具有内置的冗余和备份解决方案。例如，金融机构即使在本地发生灾难时，也能确保持续运行和数据完整性。'
- en: '**Resource optimization**: The cloud enables more efficient use of computing
    resources. A company might use cloud services to run applications only when needed,
    reducing idle computing resources common in mainframe environments.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源优化**：云使计算资源的使用更加高效。一家公司可能只在需要时使用云服务来运行应用程序，从而减少了主机环境中常见的空闲计算资源。'
- en: '**Faster time-to-market**: The agility of the cloud shortens the development
    cycle. A mobile app developer can quickly deploy and update apps, staying ahead
    in a competitive market.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的市场响应时间**：云的灵活性缩短了开发周期。移动应用开发者可以迅速部署和更新应用，保持在竞争激烈的市场中的领先地位。'
- en: '**Global reach**: With data centers worldwide, cloud services allow businesses
    to deploy applications close to their users. An online streaming service, for
    example, can provide low-latency content to users globally.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全球覆盖**：凭借全球范围的数据中心，云服务使企业能够将应用程序部署在离用户更近的地方。例如，在线流媒体服务可以向全球用户提供低延迟的内容。'
- en: '**Better security features**: Major cloud providers invest heavily in cybersecurity.
    This means a small business can benefit from security measures on par with large
    enterprises, something challenging to achieve with on-premises mainframes.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的安全特性**：主要云服务提供商在网络安全上投入大量资金。这意味着小型企业可以享受到与大型企业相当的安全措施，而这些在本地主机环境中是难以实现的。'
- en: '**Easier integration with modern technologies**: The cloud simplifies integration
    with modern apps and services. A healthcare provider, for example, could integrate
    cloud-based AI diagnostics tools with its patient management system, a task that
    would be complex and resource-intensive in a mainframe environment.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更容易与现代技术集成**：云简化了与现代应用程序和服务的集成。例如，医疗保健提供商可以将基于云的AI诊断工具与其患者管理系统集成，而在主机环境中，这一任务将复杂且资源密集。'
- en: 'AWS provides the **Mainframe Modernization** (**M2**) platform, designed to
    migrate and modernize on-premises mainframe applications to a cloud-native, fully
    managed runtime environment on AWS. The following are the key features of the
    AWS M2 platform:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了**主机现代化**（**M2**）平台，旨在将本地主机应用程序迁移并现代化为AWS上的云原生、完全托管的运行时环境。以下是AWS M2平台的关键特性：
- en: '**Automated refactoring**: Transforms legacy language applications into agile
    Java-based services using AWS Blu Age, adhering to modern web frameworks and cloud
    DevOps best practices.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化重构**：使用AWS Blu Age将遗留语言应用程序转变为灵活的基于Java的服务，遵循现代Web框架和云DevOps最佳实践。'
- en: '**Replatforming**: Migrates COBOL applications using the integrated Micro Focus
    toolchain, modernizing infrastructure while preserving the programming language
    for agility with DevOps cloud-native operations.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新平台化**：使用集成的Micro Focus工具链迁移COBOL应用程序，现代化基础设施，同时保持编程语言以实现DevOps云原生操作的灵活性。'
- en: '**Data replication and file transfer**: Enhances mainframe functions through
    near real-time data replication with Precisely and file transfer capabilities
    with BMC Software.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据复制与文件传输**：通过精准的数据实时复制和BMC软件的文件传输能力，增强主机功能。'
- en: '**Application testing**: Automates the validation of modernized mainframe applications,
    reducing costs and accelerating testing timelines with a scalable cloud-native
    service.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序测试**：通过自动化现代化主机应用程序的验证，降低成本，并利用可扩展的云原生服务加速测试进程。'
- en: 'This service aligns with the growing need for legacy system modernization,
    providing a comprehensive solution for enterprises transitioning from traditional
    mainframe infrastructure to more agile, cost-effective cloud environments. You
    can learn more by referring to this AWS page: [https://aws.amazon.com/mainframe-modernization/](https://aws.amazon.com/mainframe-modernization/).'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本服务与日益增长的遗留系统现代化需求相契合，为企业从传统主机基础设施过渡到更加灵活、具有成本效益的云环境提供了全面的解决方案。你可以通过参考此AWS页面了解更多：[https://aws.amazon.com/mainframe-modernization/](https://aws.amazon.com/mainframe-modernization/)。
- en: When possible, perform mainframe migration incrementally to reduce complexity
    and risk. By doing incremental migration, migration teams can provide faster feedback
    regarding the migration progress, and businesses can use the feedback to optimize
    internal processes to accelerate the pace of migration. As GenAI becomes more
    popular with many out-of-the-box offerings, it can help to accelerate your modernization
    journey. Let’s learn more about it.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能，逐步进行大型机迁移，以减少复杂性和风险。通过增量迁移，迁移团队能够更快地提供有关迁移进度的反馈，企业可以利用这些反馈来优化内部流程，从而加快迁移的步伐。随着
    GenAI 变得越来越流行，并提供许多现成的解决方案，它可以帮助加速你的现代化进程。让我们深入了解一下。
- en: Modernizing legacy code with generative AI
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用生成式人工智能现代化遗留代码
- en: Modernizing legacy code with GenAI represents a cutting-edge approach to software
    development. GenAI tools can analyze and understand legacy code, often written
    in outdated programming languages, and assist in rewriting or translating it into
    modern, more efficient languages or frameworks. This process accelerates code
    modernization and helps maintain the functionality of legacy systems while leveraging
    the advantages of current technologies.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成式人工智能（GenAI）现代化遗留代码代表了一种前沿的软件开发方法。GenAI 工具可以分析并理解遗留代码，通常是用过时的编程语言编写的，并协助将其重写或转换为现代、更高效的编程语言或框架。这一过程加速了代码现代化，同时有助于在利用当前技术优势的同时保持遗留系统的功能。
- en: By automating part of the code conversion process, genAI reduces the manual
    effort and expertise required, making the modernization process more accessible
    and less error-prone. This approach mainly benefits businesses looking to update
    their legacy systems without disrupting operational efficiency. Modernizing legacy
    code with GenAI involves tools like Codex, part of OpenAI’s offerings (which powers
    GitHub Copilot), and, potentially, foundation models. These tools leverage AI
    to understand and refactor legacy code into more modern, efficient programming
    languages or frameworks. For example, Codex can interpret older, less common programming
    languages and provide suggestions or direct translations into newer languages,
    like Python or JavaScript. This facilitates updating legacy systems to be more
    maintainable and compatible with current development practices.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自动化部分代码转换过程，GenAI 减少了所需的人工工作量和专业知识，使得现代化过程更加容易接近且不易出错。这一方法主要有利于那些希望在不打乱运营效率的情况下更新遗留系统的企业。使用
    GenAI 现代化遗留代码涉及到如 Codex 这样的工具，Codex 是 OpenAI 提供的工具之一（它为 GitHub Copilot 提供支持），以及可能的基础模型。这些工具利用
    AI 来理解和重构遗留代码，转换为更现代、高效的编程语言或框架。例如，Codex 可以解析较旧的、较少使用的编程语言，并提供建议或直接将其转换为更新的语言，如
    Python 或 JavaScript。这有助于更新遗留系统，使其更加易于维护，并与当前的开发实践兼容。
- en: Similarly, Amazon CodeWhisperer is AWS’s AI-powered coding assistant. Like GitHub
    Copilot, it helps developers by providing code suggestions and automating some
    coding tasks. CodeWhisperer leverages ML models to understand the code’s context
    and offers relevant recommendations. This tool can enhance developer productivity,
    aid in coding best practices, and potentially assist in modernizing legacy code
    by suggesting contemporary coding techniques and solutions. CodeWhisperer, integrated
    into a developer’s workflow, can significantly streamline the process of maintaining,
    updating, and optimizing codebases, including the translation or refactoring of
    legacy systems. CodeWhisperer also provides contextual recommendations to make
    sure that code library reuse and coding pattern consistency are maintained.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，Amazon CodeWhisperer 是 AWS 的 AI 驱动编码助手。像 GitHub Copilot 一样，它通过提供代码建议和自动化某些编码任务来帮助开发人员。CodeWhisperer
    利用机器学习模型理解代码的上下文，并提供相关的推荐。这款工具可以提高开发人员的生产力，帮助编写最佳实践的代码，并通过建议现代的编码技术和解决方案来帮助现代化遗留代码。CodeWhisperer
    集成到开发人员的工作流程中，能够显著简化维护、更新和优化代码库的过程，包括遗留系统的翻译或重构。CodeWhisperer 还提供上下文推荐，确保代码库重用和编码模式的一致性。
- en: Additionally, foundation models, trained on diverse data across many domains,
    can assist in understanding complex legacy codebases, identifying redundant or
    inefficient code segments, and suggesting optimizations or modern coding patterns.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，基础模型通过在多个领域的多样化数据上进行训练，可以帮助理解复杂的遗留代码库，识别冗余或低效的代码段，并建议优化或现代的编码模式。
- en: Integrating these tools into the modernization process speeds up the translation
    of legacy code. It contributes to more maintainable, scalable, and secure software
    systems, crucial for businesses aiming to stay competitive in a rapidly evolving
    digital landscape.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些工具整合到现代化过程中能够加速遗留代码的转化。这有助于构建更易维护、可扩展和安全的软件系统，对于那些希望在快速发展的数字化环境中保持竞争力的企业来说至关重要。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the various challenges with legacy applications
    and why it is essential to modernize them. You learned about the benefits an organization
    can get by upgrading its application to the latest technology. Application modernization
    can be complicated and risky, but it is often worthwhile.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你了解了遗留应用程序面临的各种挑战，以及为什么它们需要进行现代化。你了解了通过将应用程序升级到最新技术，组织可以获得的好处。应用程序现代化可能复杂且充满风险，但它通常是值得的。
- en: The outcome you get from the upgrade is a trade-off against the amount of investment
    and energy you put into it. Before defining the modernization approach, it’s essential
    to understand your legacy system thoroughly, and you learned about various assessment
    attributes of an application in technology, architecture, and code.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 从升级中获得的结果是你所投入的投资和精力的权衡。在定义现代化方法之前，彻底了解你的遗留系统至关重要，你学习了应用程序在技术、架构和代码方面的各种评估属性。
- en: After the assessment, the next step is to define the modernization approach,
    and you learned about various modernization approaches, including architecture-driven,
    system re-engineering, and migration approaches. You also learned about multiple
    techniques for system modernization, including straightforward approaches (encapsulation
    and rehosting) and complex approaches (rearchitecting and redesigning). The cloud
    can provide a significant value proposition, and you learned about the decision-making
    approach you need to take with modernization in the cloud. You learned about mainframe
    modernization challenges and the cloud’s benefits to ease your mainframe modernization
    journey. Finally, you learned how GenAI can help improve developer efficiency
    by updating legacy code as a coding assistant.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估之后，下一步是定义现代化方法，你了解了多种现代化方法，包括以架构为驱动的、系统重构和迁移方法。你还了解了系统现代化的多种技术，包括直接方法（封装和重托管）和复杂方法（重新架构和重新设计）。云计算可以提供显著的价值主张，你还学习了在云端进行现代化时需要采用的决策方法。你了解了大型机现代化的挑战，以及云计算如何帮助简化大型机现代化的过程。最后，你学习了GenAI如何通过作为编码助手更新遗留代码来提高开发者效率。
- en: You focused on the various technical aspects of solution architecture; however,
    documentation is one of the critical elements of architectural design that keeps
    your system maintainable in the long run. The next chapter will discuss the documentation
    required for a solutions architect to prepare, contribute to, and maintain maximum
    business value.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你专注于解决方案架构的各个技术方面；然而，文档是架构设计中至关重要的元素之一，它能使你的系统在长期内保持可维护性。下一章将讨论解决方案架构师需要准备、参与和维护的文档，以实现最大的业务价值。
- en: Join our book’s Discord space
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们书籍的Discord空间
- en: 'Join the book’s Discord workspace to ask questions and interact with the authors
    and other solution architecture professionals: [https://packt.link/SAHandbook](Chapter_15.xhtml)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 加入本书的Discord工作区，向作者和其他解决方案架构专家提问并互动：[https://packt.link/SAHandbook](Chapter_15.xhtml)
- en: '![](img/QR_Code930022060277868125.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code930022060277868125.png)'
