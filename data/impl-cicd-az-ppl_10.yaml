- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Implementing CI/CD for AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施 AWS 的 CI/CD
- en: In this chapter, we are going to build an end-to-end solution, similar to the
    previous chapter, but it will target the **Amazon Web Services** (**AWS**) cloud
    platform, deploy the same applications, and promote them from a test environment
    to a production environment. This chapter showcases the flexibility of Azure Pipelines
    to adapt to your environment needs, no matter the destination, allowing for similar
    CI/CD capabilities with a different cloud provider and the ability to still be
    able to control the process all the way through.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个端到端的解决方案，类似于上一章，但它将目标定向到**亚马逊 Web 服务**（**AWS**）云平台，部署相同的应用程序，并将它们从测试环境推广到生产环境。本章展示了
    Azure Pipelines 的灵活性，可以根据你的环境需求进行适应，无论目的地如何，都能提供类似的 CI/CD 功能，并且能够控制整个过程。
- en: 'We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Explaining the solution architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释解决方案架构
- en: Building and packaging applications and IaC
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建并打包应用程序和 IaC
- en: Deploying a Python catalog service to **Elastic Kubernetes** **Service** (**EKS**)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Python 目录服务部署到 **Elastic Kubernetes** **Service**（**EKS**）
- en: Deploying a Node.js cart service to **Fargate**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Node.js 购物车服务部署到 **Fargate**
- en: Deploying a .NET checkout service to **Elastic Container** **Service** (**ECS**)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 .NET 结账服务部署到 **Elastic Container** **Service**（**ECS**）
- en: Deploying an Angular frontend app to **Lightsail**
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Angular 前端应用程序部署到**Lightsail**
- en: Before we jump right in, let’s take care of some technical requirements.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们正式开始之前，先处理一些技术要求。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch10](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch10).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch10](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch10)
    查找本章的代码。
- en: 'To complete the tasks described in this chapter, you will need the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章描述的任务，你将需要以下内容：
- en: '**Access to an AWS account and service connection**: It is assumed that you
    completed the *Access to an AWS account* and *Creating a service connection to
    AWS* sections in [*Chapter 8*](B18875_08.xhtml#_idTextAnchor103). If you skipped
    these, please go back and complete those steps to be able to complete this chapter.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问 AWS 账户和服务连接**：假设你已经完成了[*第 8 章*](B18875_08.xhtml#_idTextAnchor103)中的“访问
    AWS 账户”和“创建 AWS 服务连接”部分。如果你跳过了这些步骤，请返回并完成这些步骤，以便能够完成本章内容。'
- en: '**The sample repository imported**: It is also assumed that you have already
    imported the sample repository from GitHub. If you haven’t done so, check out
    [*Chapter 9*](B18875_09.xhtml#_idTextAnchor135) to learn how to complete this.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入示例仓库**：同样假设你已经从 GitHub 导入了示例仓库。如果你还没有，请查看[*第 9 章*](B18875_09.xhtml#_idTextAnchor135)了解如何完成此操作。'
- en: Important note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: If at any moment you get stuck while working on the pipelines, review the complete
    code available in the **complete** branch.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在使用管道时遇到任何问题，请查看 **complete** 分支中的完整代码。
- en: Now that we have the technical requirements covered, let’s review the solution
    architecture.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经处理了技术要求，接下来让我们回顾一下解决方案架构。
- en: Explaining the solution architecture
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释解决方案架构
- en: 'For our solution, we will use the same fictitious Packt Store from [*Chapter
    9*](B18875_09.xhtml#_idTextAnchor135). However, in this chapter, this has been
    adapted to host the applications in different AWS services:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的解决方案，我们将使用与[*第 9 章*](B18875_09.xhtml#_idTextAnchor135)相同的虚构的 Packt Store。然而，在本章中，它已被调整为托管在不同的
    AWS 服务中：
- en: '![Figure 10.1 – Solution diagram](img/B18875_10_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – 解决方案架构图](img/B18875_10_01.jpg)'
- en: Figure 10.1 – Solution diagram
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 解决方案架构图
- en: 'We will implement Azure Pipelines by performing the following steps for each
    application:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过对每个应用程序执行以下步骤来实施 Azure Pipelines：
- en: Build and package the application and corresponding IaC.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并打包应用程序及其相应的 IaC。
- en: Deploy to a test environment.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署到测试环境。
- en: Deploy to a production environment.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署到生产环境。
- en: Automate environment deployment checks.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化环境部署检查。
- en: 'The following diagram depicts the CI/CD process:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了 CI/CD 过程：
- en: '![Figure 10.2 – The CI/CD process](img/B18875_10_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – CI/CD 过程](img/B18875_10_02.jpg)'
- en: Figure 10.2 – The CI/CD process
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – CI/CD 过程
- en: During this chapter, we will not cover any details about the code in the applications
    as that is not relevant to CI/CD. Instead, we will focus on the Azure Pipelines
    details that are needed to make this work.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会涉及应用程序代码的任何细节，因为这些内容与 CI/CD 无关。相反，我们将专注于使其正常工作的 Azure Pipelines 细节。
- en: 'To implement the CI/CD process, we will be taking advantage of multi-stage
    pipelines with environments and templates, as we did in the previous chapter.
    Let’s get started with the following pipeline definition in `ch10/aws/aws-pipeline.yml`.
    This can be found inside the `Implementing-CI-CD-Using-Azure-Pipeline` repository
    we imported:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现 CI/CD 流程，我们将利用多阶段管道、环境和模板，就像在上一章中所做的那样。让我们从以下 `ch10/aws/aws-pipeline.yml`
    中的管道定义开始。这可以在我们导入的 `Implementing-CI-CD-Using-Azure-Pipeline` 仓库中找到：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, this pipeline definition is the same as what we used in the
    previous chapter, so it will work in the same way as the previous chapter. However,
    `build-apps.yml`, `build-iac.yml`, and `deploy.yml` will be different. Once the
    file is in the repository, add it as a new pipeline and rename it `E2E-AWS`. We
    will have to add some security configuration for everything to work at the end,
    such as approving the deployment to different environments, similar to what we
    did in [*Chapter 9*](B18875_09.xhtml#_idTextAnchor135).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个管道定义与我们在上一章使用的相同，因此它将以与上一章相同的方式工作。然而，`build-apps.yml`、`build-iac.yml`
    和 `deploy.yml` 将有所不同。一旦文件被添加到仓库中，将其作为新管道添加，并重命名为 `E2E-AWS`。最后，我们还需要添加一些安全配置，使一切顺利进行，比如批准部署到不同环境，类似于我们在[*第9章*](B18875_09.xhtml#_idTextAnchor135)中所做的。
- en: Let’s move on to the build stage.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行构建阶段。
- en: Building and packaging applications and IaC
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和打包应用程序以及 IaC
- en: The applications in this solution are all container-enabled, as we saw in the
    previous chapter. So, in this chapter, we will go through the steps of building
    and pushing the container images to Amazon `docker-compose.yml` file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本解决方案中的应用程序都是容器化的，正如我们在上一章中看到的那样。所以，在本章中，我们将逐步讲解如何构建并将容器镜像推送到 Amazon `docker-compose.yml`
    文件。
- en: Notice that the `docker-compose.yml` file remains the same, which means that
    building the applications with containers allows for flexibility and ease of deployment
    into numerous destinations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`docker-compose.yml` 文件保持不变，这意味着使用容器构建应用程序可以提供灵活性，便于部署到多个目的地。
- en: First, let’s create the repositories that are needed in ECR.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在 ECR 中创建所需的仓库。
- en: Creating ECR repositories
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 ECR 仓库
- en: By default, an ECR registry is available when you create an account in AWS,
    but you are responsible for creating the repositories for each of your images
    in it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当你在 AWS 中创建账户时，会提供一个 ECR 注册表，但你需要负责为每个镜像创建相应的仓库。
- en: 'We can do this easily with the following AWS CLI commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下 AWS CLI 命令轻松完成此操作：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this in place, let’s move on and build the applications in the pipeline.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好这些后，让我们继续进行管道中的应用程序构建。
- en: Creating the build apps job
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建构建应用程序的作业
- en: Let’s create the `e2e/pipelines/aws/build-apps.yml` file with the content described
    in this section. We have broken it into two sections for easier reading.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 `e2e/pipelines/aws/build-apps.yml` 文件，文件内容如本节所述。我们已将其分为两个部分，便于阅读。
- en: 'The first section simply defines the parameters, job header, and the only step
    needed. This uses the `AWSShellScript@1` task for a custom script that needs to
    be running in the context of the AWS CLI. This must be authenticated with AWS
    via the service connection we created previously:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分只是定义了参数、作业头和所需的唯一步骤。这使用了 `AWSShellScript@1` 任务来运行需要在 AWS CLI 上下文中执行的自定义脚本。此操作必须通过我们之前创建的服务连接与
    AWS 进行身份验证：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With this in place, let’s describe the custom script that’s needed to log into
    ECR, build the containers, and tag and push each of them to ECR. The content of
    the script must be aligned properly with the preceding YAML within the `inlineScript`
    property for it to work correctly. This means that all lines must be exactly two
    spaces after the column where this property starts. It is only presented in this
    way in this chapter for ease of reading:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好后，让我们描述一下需要的自定义脚本，用于登录到 ECR、构建容器、标记并将它们推送到 ECR。脚本的内容必须与前面 YAML 中的 `inlineScript`
    属性正确对齐，才能正常工作。这意味着所有行必须从此属性开始的列后面准确地缩进两个空格。本章仅以这种方式展示，便于阅读：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let’s break this code block down:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步解析这段代码：
- en: The `L` and `ID` variables represent the AWS region and AWS account ID, both
    of which are needed to build the commands to log into ECR, tag images, and push
    them to ECR
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`L` 和 `ID` 变量代表 AWS 区域和 AWS 账户 ID，这两者在构建登录 ECR、标记镜像并将其推送到 ECR 的命令时都需要用到'
- en: 'Logging into ECR is a two-step operation:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录 ECR 是一个两步操作：
- en: Retrieve a login token from the ECR service.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 ECR 服务获取登录令牌。
- en: Use the `docker login` command, which allows you to use the `docker` and `docker-compose`
    utilities in the next steps.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `docker login` 命令，这样可以在接下来的步骤中使用 `docker` 和 `docker-compose` 工具。
- en: The build of the images uses the `docker-compose build` command, which in this
    context will use the existing `docker-compose.yaml` file in the repository
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像构建使用 `docker-compose build` 命令，在这个上下文中，它将使用仓库中的现有 `docker-compose.yaml` 文件
- en: The last step is a loop over two arrays, defining the names of services and
    tags to use to apply the `docker tag` and `docker` `push` commands
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一步是对两个数组进行循环，定义服务名称和标签，用于应用 `docker tag` 和 `docker push` 命令
- en: You might be wondering why we didn’t use the `DockerCompose@0` task like we
    did in [*Chapter 9*](B18875_09.xhtml#_idTextAnchor135). The reason for this is
    the types of container registries supported by this task and the authentication
    mechanism supported by ECR in AWS. The `DockerCompose@0` task supports Azure Container
    Registry and the generic Docker Registry. For the latter, you could use a Docker
    Registry service connection, but the authorization tokens provided by ECR are
    short-lived, lasting only 12 hours. This would force you to update the service
    connection periodically.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问为什么我们没有像在 [*第9章*](B18875_09.xhtml#_idTextAnchor135) 中那样使用 `DockerCompose@0`
    任务。原因在于这个任务支持的容器注册表类型和 ECR 在 AWS 中支持的认证机制。`DockerCompose@0` 任务支持 Azure 容器注册表和通用
    Docker 注册表。对于后者，你可以使用 Docker 注册表服务连接，但 ECR 提供的授权令牌是短期有效的，只能维持 12 小时。这将迫使你定期更新服务连接。
- en: Instead, this approach, which uses the `AWSShellScript@1` task and a custom
    script, takes advantage of the existing AWS service connection and negotiates
    a new password every time it runs, storing it locally during the build phase and
    making it possible to have a maintenance-free setup.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，这种方法使用 `AWSShellScript@1` 任务和自定义脚本，利用现有的 AWS 服务连接，并在每次运行时协商一个新密码，在构建阶段将其存储在本地，避免了维护工作。
- en: Now that we have our container images available, let’s work to verify and package
    the infrastructure as code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的容器镜像已经准备好，接下来让我们验证并打包基础设施即代码。
- en: Verifying and packaging IaC
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证和打包 IaC
- en: We learned how to work with AWS CloudFormation templates in the previous chapter,
    Now, we need to validate the templates and publish them as artifacts to the pipeline.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一章学会了如何使用 AWS CloudFormation 模板，现在，我们需要验证这些模板并将它们作为工件发布到管道中。
- en: 'To do this, we will create a `build-iac.yml` file in the repository and add
    the following six segments to it:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将在仓库中创建一个 `build-iac.yml` 文件，并添加以下六个阶段：
- en: '`aws-pipeline.yaml` file:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`aws-pipeline.yaml` 文件：'
- en: '[PRE4]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Jobs**: Here, we just add the header for the following segments, all of which
    are a series of steps to validate and publish the IaC artifacts that are required
    for the deployment of each application:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**作业**：在这里，我们只添加以下各个阶段的标题，这些阶段都是一系列步骤，用于验证和发布部署每个应用程序所需的 IaC 工件：'
- en: '[PRE5]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Catalog service IaC**: Add the following code:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**目录服务 IaC**：添加以下代码：'
- en: '[PRE6]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s break it down:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们来拆解一下：
- en: The script task with `displayName` `'Lint Catalog Helm Chart'` validates the
    Helm chart
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`displayName` 为 `''Lint Catalog Helm Chart''` 的脚本任务用于验证 Helm 图表'
- en: The `HelmInstaller@1` task installs the Helm tool
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelmInstaller@1` 任务安装 Helm 工具'
- en: The `HelmDeploy@0` task is used to package the Helm chart
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelmDeploy@0` 任务用于打包 Helm 图表'
- en: The `PublishPipelineArtifact@1` task is then used to publish the Helm chart
    artifact to be used for deployment
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后使用 `PublishPipelineArtifact@1` 任务发布 Helm 图表工件，用于部署
- en: '**Cart service IaC**: The following code is added:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**购物车服务 IaC**：添加以下代码：'
- en: '[PRE7]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s break it down:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们来拆解一下：
- en: The `AWSCLI@1` task is used to validate the AWS CloudFormation stack template
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `AWSCLI@1` 任务验证 AWS CloudFormation 堆栈模板
- en: The `PublishPipelineArtifact@1` task is then used to publish the AWS CloudFormation
    stack template artifact to be used for deployment
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后使用 `PublishPipelineArtifact@1` 任务发布 AWS CloudFormation 堆栈模板工件，用于部署
- en: '**Checkout service IaC**: Add the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检出服务 IaC**：添加以下代码：'
- en: '[PRE8]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let’s break it down:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们来拆解一下：
- en: The `AWSCLI@1` task is used to validate the AWS CloudFormation stack template
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `AWSCLI@1` 任务验证 AWS CloudFormation 堆栈模板
- en: The `PublishPipelineArtifact@1` task is then used to publish the AWS CloudFormation
    stack template artifact to be used for deployment
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后使用`PublishPipelineArtifact@1`任务发布AWS CloudFormation堆栈模板工件，用于部署
- en: '**Frontend application IaC**: The code to be added is as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**前端应用程序IaC**：需要添加的代码如下：'
- en: '[PRE9]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s break it down:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: The `AWSCLI@1` task is used to validate the AWS CloudFormation stack template
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AWSCLI@1`任务用于验证AWS CloudFormation堆栈模板'
- en: The `PublishPipelineArtifact@1` task is then used to publish the AWS CloudFormation
    stack template artifact to be used for deployment
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后使用`PublishPipelineArtifact@1`任务发布AWS CloudFormation堆栈模板工件，用于部署
- en: With our IaC artifacts build phase complete, we can move on to environment deployments.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成我们的IaC工件构建阶段后，我们可以继续进行环境部署。
- en: Managing environments
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理环境
- en: In this section, we will learn about how to create environments and deploy IaC
    and applications to them. First, let’s configure our environment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建环境并将IaC和应用程序部署到这些环境中。首先，让我们配置我们的环境。
- en: Configuring environments
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置环境
- en: As we did in [*Chapter 9*](B18875_09.xhtml#_idTextAnchor135), you will need
    to create two environments named `awstest` and `awsproduction` to complete this
    chapter. Once you have created these two environments, we can proceed with the
    deployments.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[*第9章*](B18875_09.xhtml#_idTextAnchor135)中所做的，你需要创建两个名为`awstest`和`awsproduction`的环境，以完成本章内容。一旦你创建了这两个环境，我们就可以继续进行部署。
- en: Deploying to environments
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到环境
- en: 'We will deploy these two environments by creating a `deploy.yml` file and start
    by adding the steps needed for each application. This file will start with the
    following content; we will be adding to it in every section hereafter:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个`deploy.yml`文件来部署这两个环境，并开始添加每个应用程序所需的步骤。此文件将以以下内容开始；我们将在后续的每一部分中继续添加内容：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `parameters` section defines all the values that can be reused within the
    pipeline definition, with `envName` being the only one used from the main pipeline,
    but this gives you the flexibility to change them when needed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`parameters`部分定义了在流水线定义中可以重用的所有值，其中`envName`是从主流水线中使用的唯一一个值，但这使你在需要时可以灵活地更改它们。'
- en: 'The `jobs` collection includes the `deployment` job type, which allows us to
    implement different rollout strategies:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`jobs`集合包括`deployment`任务类型，它允许我们实现不同的部署策略：'
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For simplicity, here, we use the `runOnce` strategy, but you can also use `canary`
    and `rolling` where appropriate. With this in place, let’s move on to the applications.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，在此我们使用`runOnce`策略，但你也可以根据需要使用`canary`和`rolling`策略。设置好之后，让我们继续进行应用程序部署。
- en: Deploying the Python catalog service to EKS
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Python目录服务部署到EKS
- en: Deploying to EKS has become increasingly complex recently. To make things easier,
    AWS recommends using **eksctl**, an open source CLI tool created by **WeaveWorks**.
    This is a simple CLI tool for creating clusters on EKS that’s written in the **Go**
    language and uses CloudFormation templates while following best practices. It
    handles creating or updating clusters, adding node groups, and other intermediary
    tasks to wait for cluster readiness that you would otherwise have to script yourself.
    To learn more about eksctl, go to [https://eksctl.io](https://eksctl.io).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，部署到EKS变得越来越复杂。为了简化操作，AWS推荐使用**eksctl**，这是一个由**WeaveWorks**创建的开源CLI工具。它是一个用于在EKS上创建集群的简单CLI工具，使用**Go**语言编写，并且遵循最佳实践，利用CloudFormation模板。它负责创建或更新集群、添加节点组及其他中介任务，等待集群准备就绪，这些任务本来需要你自己编写脚本来完成。要了解更多关于eksctl的信息，请访问[https://eksctl.io](https://eksctl.io)。
- en: Every section from here on is displayed aligned to the left. However, in the
    `deploy.yml` file, they must be aligned so that they start in the same position
    as the last `steps:` instruction.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从此部分开始的每个段落都将左对齐。但是，在`deploy.yml`文件中，它们必须与最后一个`steps:`指令对齐，以确保从相同的位置开始。
- en: 'Let’s add the following three steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加以下三步：
- en: 'The `download` task retrieves the catalog Helm chart pipeline artifact:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`download`任务用于检索目录Helm图表流水线工件：'
- en: '[PRE12]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `HelmInstaller@1` task installs Helm in the agent:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelmInstaller@1`任务在代理上安装Helm：'
- en: '[PRE13]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `AWSShellScript@1` task is used to coordinate a series of steps in a custom
    script while using the existing AWS service connection:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AWSShellScript@1`任务用于协调在自定义脚本中执行的一系列步骤，同时使用现有的AWS服务连接：'
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The script does the following:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 脚本执行如下操作：
- en: Installs the `eksctl` tool
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`eksctl`工具
- en: Creates a simple EKS cluster
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的EKS集群
- en: Installs the catalog Helm chart
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装目录Helm图表
- en: Retrieves the hostname of the AWS Elastic Load Balancer that was created for
    the catalog service
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索为目录服务创建的 AWS 弹性负载均衡器的主机名
- en: Sets an environment variable, `CatalogUrl`, with the properly formed URL of
    the catalog service to be used in the frontend deployment
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置一个环境变量 `CatalogUrl`，并使用正确格式化的目录服务 URL，用于前端部署
- en: Alternatively, you could store the custom script in a shell script file in the
    repository, use the `filePath` option for the `scriptType` property, and provide
    the path to the file in the `filePath` property. Refer to [https://docs.aws.amazon.com/vsts/latest/userguide/awsshell.xhtml](https://docs.aws.amazon.com/vsts/latest/userguide/awsshell.xhtml)
    for more details.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以将自定义脚本存储在仓库中的 shell 脚本文件中，使用 `filePath` 选项为 `scriptType` 属性，并在 `filePath`
    属性中提供文件的路径。有关更多详细信息，请参考 [https://docs.aws.amazon.com/vsts/latest/userguide/awsshell.xhtml](https://docs.aws.amazon.com/vsts/latest/userguide/awsshell.xhtml)。
- en: Now that we are done with the catalog service, it is time to move on to the
    cart service.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 既然目录服务已经完成配置，现在是时候继续处理购物车服务了。
- en: Deploying the Node.js cart service to Lightsail
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Node.js 购物车服务部署到 Lightsail
- en: The cart service will be deployed to the Lightsail service, which is a compute
    resource that’s managed by AWS for running containers.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车服务将被部署到 Lightsail 服务，它是 AWS 管理的计算资源，用于运行容器。
- en: 'The following steps will allow you to complete the deployment:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成部署：
- en: 'The `download` task retrieves the catalog Helm chart pipeline artifact:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`download` 任务检索目录 Helm 图表管道工件：'
- en: '[PRE15]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `CloudFormationCreateOrUpdateStack@1` task creates the infrastructure required
    to run the service. The URL of the cart service will be automatically parsed and
    made available as an environment variable, in this case in the `CartUrl` variable:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CloudFormationCreateOrUpdateStack@1` 任务创建运行服务所需的基础设施。购物车服务的 URL 将自动解析，并作为环境变量提供，在这种情况下是
    `CartUrl` 变量：'
- en: '[PRE16]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `AWSShellScript@1` task performs the application deployment by doing the
    following:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AWSShellScript@1` 任务通过执行以下操作来进行应用部署：'
- en: Connecting the service to the `packt-store-cart` private registry
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务连接到 `packt-store-cart` 私有注册表
- en: Creating a deployment with the corresponding container version
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相应的容器版本创建部署
- en: Waiting for the deployment to complete by checking its state
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查其状态等待部署完成
- en: 'Let’s take a look at the code that’s used to do this. You will notice that
    it has been broken into sections for easier understanding:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们看看用于实现此操作的代码。你会注意到，代码已经分成了几个部分，方便理解：
- en: 'The following lines simply echo the parameters to the console to confirm their
    values while the pipeline is running:'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下几行简单地将参数输出到控制台，以确认它们的值，确保管道在运行时正确：
- en: '[PRE17]'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Adding private registry access requires executing a CLI command and waiting
    for a property to be updated to confirm that the principal ARN has been assigned.
    This requires executing another CLI command to check this every 5 seconds:'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加私有注册表访问需要执行 CLI 命令并等待属性更新，以确认主 ARN 已被分配。这需要每 5 秒执行一次 CLI 命令来检查：
- en: '[PRE18]'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Applying the **Elastic Container Policy** (**ECR**) requires deleting any existing
    one and then setting the new one:'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用 **弹性容器策略**（**ECR**）需要删除任何现有的策略，然后设置新的策略：
- en: '[PRE19]'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding section will execute a CLI command every 5 seconds to wait for
    the Lightsail service to complete updates before we can proceed further. This
    is required because the CLI command we executed previously to assign access to
    the private registry takes a while to complete. This will ensure that we don’t
    try to create a deployment while the service is still updating.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前面的部分将每 5 秒执行一次 CLI 命令，等待 Lightsail 服务完成更新，然后我们才能继续执行。这是必要的，因为我们之前执行的 CLI 命令用于分配私有注册表访问权限，需要一段时间才能完成。这样可以确保在服务仍在更新时不会尝试创建部署。
- en: 'Finally, while using a CLI command to create the deployment and waiting for
    it to complete in the pipeline, ensure any further steps that require the service
    to be running do not fail:'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在使用 CLI 命令创建部署并等待它在管道中完成时，确保任何需要服务运行的后续步骤不会失败：
- en: '[PRE20]'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now that we are done with the cart service, let’s move on to the checkout service.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经完成了购物车服务的配置，接下来让我们继续处理结账服务。
- en: Deploying the .NET checkout service to ECS
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 .NET 结账服务部署到 ECS
- en: 'For this, we must create a task execution IAM role. First, let’s create an
    `ecs-tasks-trust-policy.json` file with the following content:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们必须创建一个任务执行 IAM 角色。首先，让我们创建一个 `ecs-tasks-trust-policy.json` 文件，并填入以下内容：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following commands will create an IAM role and attach a policy that’s needed
    to run the container image in the private registry:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将创建一个 IAM 角色，并附加运行私有注册表中容器镜像所需的策略：
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With this complete, we can move on to the content for the `deploy.yml` file:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些配置后，我们可以继续进行 `deploy.yml` 文件的内容：
- en: 'The `download` task retrieves the checkout IaC pipeline artifact:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`download` 任务用于获取结账 IaC 管道工件：'
- en: '[PRE23]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `CloudFormationCreateOrUpdateStack@1` task creates the infrastructure required
    to run the service:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CloudFormationCreateOrUpdateStack@1` 任务创建运行服务所需的基础设施：'
- en: '[PRE24]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The URL of the checkout service will become available via the outputs of this
    deployment, which are automatically parsed and made available as an environment
    variable, in this case in the `CheckoutUrl` variable.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结账服务的 URL 将通过此部署的输出提供，该输出会被自动解析并作为环境变量提供，在此例中为 `CheckoutUrl` 变量。
- en: Now that we are done with the checkout service, it is time to move on to the
    frontend application.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 既然结账服务已完成，接下来是时候处理前端应用了。
- en: Deploying the Angular frontend to Fargate
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Angular 前端部署到 Fargate
- en: The Angular frontend application will be deployed into an ECS with a Fargate
    backend, a serverless offering from AWS. This deployment is much simpler because
    it only requires creating the CloudFormation stack, which incorporates the definition
    of the container to deploy within the template.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 前端应用将部署到带有 Fargate 后端的 ECS 上，Fargate 是 AWS 提供的无服务器选项。此部署更为简化，因为它只需创建
    CloudFormation 堆栈，其中包含要在模板中部署的容器定义。
- en: 'Let’s add the following to the `deploy.yml` file and walk through the steps:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `deploy.yml` 文件中添加以下内容，并逐步演示：
- en: 'The `download` task retrieves the frontend IaC pipeline artifact:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`download` 任务用于获取前端 IaC 管道工件：'
- en: '[PRE25]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `CloudFormationCreateOrUpdateStack@1` task creates the infrastructure required
    to run the service and deploy the application:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CloudFormationCreateOrUpdateStack@1` 任务创建运行服务和部署应用所需的基础设施：'
- en: '[PRE26]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Notice the different notation when providing parameters to the template in the
    `templateParameters` property. This is due to the way these values become available
    in the context of pipeline execution. When injecting values into a task, there
    is a distinction between pipeline parameters and variables and how they are evaluated.
    The `${{ parameters.name }}` notation is only processed at compile time, before
    runtime starts. This would be your typical usage for parameters as they should
    not change during runtime.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意在 `templateParameters` 属性中为模板提供参数时使用的不同符号。这是由于这些值在管道执行上下文中的可用方式。在向任务注入值时，管道参数和变量之间存在区别，并且它们的评估方式不同。`${{
    parameters.name }}` 符号只会在编译时处理，在运行时开始之前。这是参数的典型用法，因为它们在运行时不应更改。
- en: The `$(variable)` notation is processed during runtime before a task runs, which
    means it will be evaluated before each task is executed; any changes that are
    made to it through its execution will be reflected in its value. This would be
    your typical usage for variables. To learn more about this, read
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$(variable)` 符号在任务运行前会在运行时进行处理，这意味着它会在每个任务执行之前进行评估；通过执行所做的任何更改都会反映在其值中。这是变量的典型用法。欲了解更多内容，请阅读'
- en: '*Understand variable syntax*, which is available in the official documentation
    at [https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables).'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*了解变量语法*，详细信息请参阅官方文档 [https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables)。'
- en: With all of this in place, it’s finally time to make it all work by adding the
    pipeline.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有配置后，最终通过添加管道使其生效。
- en: Adding the pipeline
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加管道
- en: 'Now that we have all the YAML files completed, it is time to put everything
    to work by adding a new pipeline. Follow these steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成所有 YAML 文件，接下来是通过添加一个新的管道让一切生效。请按照以下步骤操作：
- en: 'In the **Pipelines** section of your project, click on the **New pipeline**
    button, as shown in the following screenshot:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的 **Pipelines** 部分，点击 **New pipeline** 按钮，如下图所示：
- en: '![Figure 10.3 – Adding the pipeline](img/B18875_10_03.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 – 添加管道](img/B18875_10_03.jpg)'
- en: Figure 10.3 – Adding the pipeline
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 添加管道
- en: 'Select the **Azure Repos Git** **YAML** option:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Azure Repos Git** **YAML** 选项：
- en: '![Figure 10.4 – Adding a pipeline from Azure Repos Git YAML](img/B18875_10_04.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4 – 从 Azure Repos Git YAML 添加管道](img/B18875_10_04.jpg)'
- en: Figure 10.4 – Adding a pipeline from Azure Repos Git YAML
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 从 Azure Repos Git YAML 添加管道
- en: 'Select the repository where you created the pipeline:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你创建流水线的仓库：
- en: '![Figure 10.5 – Selecting the repository to add the YAML pipeline from](img/B18875_10_05.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – 选择要添加 YAML 流水线的仓库](img/B18875_10_05.jpg)'
- en: Figure 10.5 – Selecting the repository to add the YAML pipeline from
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 选择要添加 YAML 流水线的仓库
- en: 'Then, select the **Existing Azure Pipelines YAML** **file** option:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择**现有的 Azure Pipelines YAML** **文件**选项：
- en: '![Figure 10.6 – Selecting the Existing Azure Pipelines YAML file option](img/B18875_10_06.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 选择现有的 Azure Pipelines YAML 文件选项](img/B18875_10_06.jpg)'
- en: Figure 10.6 – Selecting the Existing Azure Pipelines YAML file option
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 选择现有的 Azure Pipelines YAML 文件选项
- en: 'Lastly, enter the `/e2e/pipelines/aws/aws-pipeline.yml`, and click **Continue**:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，输入`/e2e/pipelines/aws/aws-pipeline.yml`，并点击**继续**：
- en: '![Figure 10.7 – Select an existing YAML file](img/B18875_10_07.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – 选择现有的 YAML 文件](img/B18875_10_07.jpg)'
- en: Figure 10.7 – Select an existing YAML file
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – 选择现有的 YAML 文件
- en: With the pipeline in place, you can trigger it manually or by making changes
    to the repository. Now that we’ve got this ready, let’s wrap up.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 有了流水线后，你可以手动触发它或通过更改仓库来触发它。现在我们已经准备好了，让我们总结一下。
- en: Wrapping up
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'If you completed all these steps, then you’ve deployed test and production
    environments, so it is time to clean up! You have deployed many resources into
    AWS throughout the chapter, so make sure you delete them if you do not want to
    keep paying for them. You can do this via the AWS console or the following AWS
    CLI commands:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完成了所有这些步骤，那么你已经部署了测试和生产环境，接下来是清理工作！在整个章节中，你已经向 AWS 部署了许多资源，所以如果你不想继续为它们付费，请确保删除它们。你可以通过
    AWS 控制台或以下 AWS CLI 命令来完成：
- en: '[PRE27]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If you missed anything or got stuck and are having trouble putting the entire
    solution together, the pipeline definitions can be found in the GitHub repository
    mentioned in the *Technical requirements* section, in the `e2e/pipelines/aws`
    directory in the **complete** branch.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你错过了任何步骤或遇到问题，无法将整个解决方案整合在一起，可以在*技术要求*部分提到的 GitHub 仓库中找到流水线定义，这些定义位于`e2e/pipelines/aws`目录下的**complete**分支。
- en: Now, let’s recap what we have learned in this chapter.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下本章中学到的内容。
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to deploy containerized applications to different
    services in the AWS cloud. At the same time, we learned how containers allow for
    portability across cloud providers and the ability to take advantage of multiple
    services within the same ecosystem.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将容器化应用部署到 AWS 云中的不同服务。同时，我们了解了容器如何实现跨云服务商的可移植性，以及如何在同一生态系统内利用多个服务的能力。
- en: Next, we learned how to use AWS ECR and private repositories to manage all our
    container images and how the process to build and push those containers, although
    based on the same `docker-compose` tool, must be implemented differently depending
    on the target platform.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了如何使用 AWS ECR 和私有仓库来管理所有容器镜像，并且虽然构建和推送这些容器的过程基于相同的`docker-compose`工具，但根据目标平台的不同，必须以不同的方式实现。
- en: We also learned about the eksctl CLI tool, which makes it easier to provision
    and configure EKS clusters in AWS with best practices, as well as how to use Helm
    charts to deploy a containerized application to a Kubernetes-based service regardless
    of the underlying infrastructure.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了 eksctl CLI 工具，它使得在 AWS 中根据最佳实践更容易地配置和管理 EKS 集群，以及如何使用 Helm charts 将容器化应用部署到基于
    Kubernetes 的服务，而不考虑底层基础设施。
- en: Finally, we learned how to deploy to ECS with both Fargate (serverless) and
    EC2 (virtual machines) infrastructure, both with a very similar and simple application
    deployment model.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何使用 Fargate（无服务器）和 EC2（虚拟机）基础设施将应用部署到 ECS，两者的应用部署模型非常相似且简单。
- en: In the next chapter, you will learn about CI/CD for **cross-mobile applications**.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习 **跨平台移动应用** 的 CI/CD。
