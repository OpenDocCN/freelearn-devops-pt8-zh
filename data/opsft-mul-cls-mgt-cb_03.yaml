- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Multi-Tenant Considerations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多租户注意事项
- en: As with almost any software, things get more difficult as you scale in number
    and size. In the previous chapter, we looked at the most important aspects related
    to the architecture of an OpenShift cluster. In this chapter, we are going to
    cover some things you should understand when working with multiple environments
    on one or more clusters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与几乎所有软件一样，随着数量和规模的扩展，事情会变得更加复杂。在上一章中，我们讨论了与 OpenShift 集群架构相关的最重要方面。在本章中，我们将讨论在一个或多个集群上处理多个环境时应了解的一些事项。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: What is multitenancy?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是多租户？
- en: Handling multiple tenants
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理多个租户
- en: Multitenancy on OpenShift
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift 上的多租户
- en: Multi-tenant strategies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多租户策略
- en: What is multitenancy?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是多租户？
- en: '**Multitenancy** is the ability to provide services for multiple users or groups
    (also known as **tenants**) using a single platform instance. A platform architecture
    can be designed to be single- or multi-tenant:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**多租户**是指使用单一平台实例为多个用户或组（也称为**租户**）提供服务的能力。平台架构可以设计为单租户或多租户：'
- en: In a single-tenant platform architecture, there is no isolation within an instance
    of the platform. This means that there is no separation in an instance and that,
    as such, there is no way to isolate objects for users or groups. In this case,
    to achieve multitenancy, you need to provision a separate platform instance for
    every tenant.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单租户平台架构中，平台实例内没有隔离。这意味着实例内没有分隔，因此也无法隔离用户或组的对象。在这种情况下，要实现多租户，你需要为每个租户提供一个单独的平台实例。
- en: In a multi-tenant platform architecture, it is possible to isolate objects and
    data between different tenants. Therefore, you can protect each tenant's data
    and objects, thus providing enough privacy and security, even by using a single
    platform instance.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多租户平台架构中，可以在不同租户之间隔离对象和数据。因此，即使使用单一平台实例，也可以保护每个租户的数据和对象，从而提供足够的隐私和安全性。
- en: Depending on the architectural design and how OpenShift is used, you can have
    both types of platforms (single- or multi-tenant). In this chapter, you will learn
    how to define the best way to consider this while designing your OpenShift clusters.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据架构设计和 OpenShift 的使用方式，你可以拥有两种类型的平台（单租户或多租户）。在本章中，你将学习如何在设计 OpenShift 集群时，考虑这一点的最佳方式。
- en: Handling multiple tenants
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理多个租户
- en: 'There are many different ways to work with multiple tenants on OpenShift, with
    the most obvious one being to have a single cluster for each tenant. However,
    this is not always possible or the best option: having dedicated hardware and
    a platform for every tenant can be costly, difficult to maintain, and not efficient.
    With shared clusters, multiple workloads from different tenants share the same
    computing capacity, enabling more efficient computing usage.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenShift 上处理多个租户有许多不同的方式，其中最明显的一种是为每个租户拥有一个单独的集群。然而，这并非总是可能的或最佳选择：为每个租户提供专用硬件和平台可能会很昂贵，维护起来也很困难，且效率不高。通过共享集群，不同租户的多个工作负载共享相同的计算资源，从而实现更高效的计算使用。
- en: OpenShift can provide isolation for objects, computing, network, and other hardware
    resources for each tenant, ensuring they are isolated from each other. In the
    next section, we are going to look at the different types of isolation and how
    to utilize them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 可以为每个租户提供对象、计算、网络和其他硬件资源的隔离，确保它们相互隔离。在下一节中，我们将探讨不同类型的隔离以及如何利用它们。
- en: Multitenancy in OpenShift
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift 中的多租户
- en: 'When it comes to multitenancy on OpenShift, several objects are involved. The
    following table shows some important resources that provide multi-tenant capabilities,
    all of which we are going to cover in this chapter:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到 OpenShift 上的多租户时，会涉及到多个对象。下表展示了一些提供多租户功能的重要资源，我们将在本章中讨论这些内容：
- en: '![](img/Table_01_new.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_01_new.jpg)'
- en: 'The following diagram illustrates how these resources are combined to provide
    isolation and enable multitenancy:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了这些资源如何组合在一起提供隔离并启用多租户：
- en: '![Figure 3.1 – Multitenancy and isolation ](img/B18015_03_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 多租户和隔离](img/B18015_03_01.jpg)'
- en: Figure 3.1 – Multitenancy and isolation
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 多租户和隔离
- en: Now, let's look at how these objects are used to provide multitenancy capabilities
    on OpenShift. We are going to use all of them while covering practical examples
    from [*Chapter 5*](B18015_05.xhtml#_idTextAnchor090), *OpenShift Development*,
    onward, so don't worry about how to use them for now. Instead, focus on understanding
    how they provide isolation capabilities to enable multitenancy.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下这些对象是如何在 OpenShift 上提供多租户功能的。在接下来的[**第5章**](B18015_05.xhtml#_idTextAnchor090)《OpenShift开发》示例中，我们将使用它们，所以现在不用担心如何使用它们。相反，专注于理解它们如何提供隔离功能，以实现多租户。
- en: Namespaces
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'Namespaces provide some level of isolation. Using namespaces, you can define
    a limited space for the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间提供了一定程度的隔离。使用命名空间，你可以为以下内容定义一个有限的空间：
- en: '**Kubernetes workloads**: **P****ods**, **Secrets**, **ConfigMaps**, **Deployments**,
    and so on.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes工作负载**：**Pods**、**Secrets**、**ConfigMaps**、**Deployments**等。'
- en: '**Access control**: Isolate the namespace resource''s access by giving the
    appropriate **roles** (permissions) to the users or groups.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制**：通过为用户或组分配适当的**角色**（权限），来隔离命名空间资源的访问。'
- en: '**Limit resource consumption**: It is possible to limit the number of resources
    that are consumed by a namespace using **ResourceQuotas**.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制资源消耗**：可以通过**ResourceQuotas**限制命名空间所消耗的资源数量。'
- en: Role-based access control
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于角色的访问控制
- en: Permission control over resources on OpenShift is done using `get`, `list`,
    `watch`, `create`, `upgrade`, and so on) that are permitted over resources (such
    as **Pods**, **Services**, **Deployments**, **J****obs**, and so on), while **RoleBindings**
    (or **ClusterRoleBinding**) are how you bind a role to a subject (groups, users,
    or **ServiceAccounts**).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenShift 上对资源的权限控制是通过对资源（如**Pods**、**Services**、**Deployments**、**Jobs**等）使用`get`、`list`、`watch`、`create`、`upgrade`等权限进行的，同时**RoleBindings**（或**ClusterRoleBinding**）用于将角色绑定到主体（如组、用户或**ServiceAccounts**）。
- en: You are required to use roles and RoleBindings to give users the right permissions
    to the right namespaces, according to the tenants and the separation logic you
    want to implement.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要使用角色和RoleBindings根据租户和你希望实现的隔离逻辑，为用户提供正确命名空间的权限。
- en: ResourceQuotas
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源配额（ResourceQuotas）
- en: '**ResourceQuotas** allows a cluster administrator to constraint a namespace
    to a limited set of resources. It can limit computing resources and/or the number
    of objects. It is a crucial thing to consider when you''re using shared clusters
    to ensure there''s a limited capacity for each tenant. Without ResourceQuotas,
    only one namespace can consume the entire capacity of a worker node, for instance.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**ResourceQuotas**允许集群管理员将命名空间的资源限制为有限的资源集。它可以限制计算资源和/或对象数量。当你使用共享集群时，考虑ResourceQuotas非常重要，它可以确保每个租户的容量是有限的。如果没有ResourceQuotas的限制，可能会导致一个命名空间占用整个工作节点的容量。'
- en: nodeSelectors, taints, and tolerations
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: nodeSelectors、污点（taints）和容忍度（tolerations）
- en: 'Through **nodeSelectors**, you can dedicate workers for a specific reason or
    tenant. With nodeSelectors, it is possible to isolate physical compute resources
    for each tenant: in a 10-node cluster, you can have, for instance, five nodes
    for QA and the other five for development. **Taints** and **tolerations** are
    different ways of doing this: while with nodeSelectors, you instruct a Pod to
    be scheduled in a defined set of nodes that contain a certain label, with taints,
    you instruct a worker to *repeal* Pods that do not contain a certain toleration
    to run in it.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**nodeSelectors**，你可以将工作节点专门分配给特定的用途或租户。使用nodeSelectors，可以为每个租户隔离物理计算资源：例如，在一个10节点的集群中，你可以将五个节点分配给QA，另外五个节点分配给开发。**Taints**和**tolerations**是实现这一目标的不同方式：使用nodeSelectors时，你指示Pod在包含特定标签的节点集合中调度，而使用taints时，你指示工作节点*拒绝*那些没有特定容忍度的Pods运行。
- en: NetworkPolicy
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络策略（NetworkPolicy）
- en: '**A NetworkPolicy** provides a standard way to isolate network traffic between
    Pods and namespaces. It works like a firewall in which you define ingress and/or
    egress policies to accept/deny traffic flows between different Pods and namespaces.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络策略**提供了一种标准的方式来隔离Pods和命名空间之间的网络流量。它类似于防火墙，你可以定义入站和/或出站策略来接受/拒绝不同Pods和命名空间之间的流量。'
- en: Ingress/router sharding
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ingress/router分片
- en: On OpenShift, you can create multiple ingress controllers, which will allow
    you to isolate ingress traffic between different tenants.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenShift上，你可以创建多个Ingress控制器，这将允许你在不同租户之间隔离入站流量。
- en: Multi-tenant strategies
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多租户策略
- en: It is important to understand that there is no physical isolation when using
    the multi-tenant objects listed previously – isolation is defined and implemented
    by the software. However, it is possible to provide a physical level of isolation
    by using different multi-tenant strategies, as you will see now. The best strategy
    depends on the requirements you have in your company; some companies care more
    about having an efficient use of computing resources, while others don't care
    about spending more resources in favor of the most secure isolation strategy possible.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '重要的是要理解，在使用前面提到的多租户对象时，并没有物理隔离——隔离是由软件定义并实现的。然而，通过使用不同的多租户策略，如您现在将看到的，仍然有可能提供物理级别的隔离。最佳策略取决于您公司中的需求；有些公司更关注计算资源的高效利用，而其他公司则不在乎额外的资源开销，只要能获得最安全的隔离策略。  '
- en: 'Some different strategies are as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '一些不同的策略如下：  '
- en: Dedicated clusters, one for each tenant
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '每个租户拥有专用集群  '
- en: A shared cluster with no physical separation of resources
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '没有物理资源隔离的共享集群  '
- en: A shared cluster with dedicated worker nodes
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '带有专用工作节点的共享集群  '
- en: A shared cluster with dedicated worker nodes and ingress controllers
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '带有专用工作节点和入口控制器的共享集群  '
- en: Dedicated clusters
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '专用集群  '
- en: 'As we have already mentioned, the most obvious strategy is to have a different
    cluster for each tenant. The following diagram shows an example of providing services
    for two tenants (QA and Development):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '正如我们之前提到的，最明显的策略是为每个租户提供不同的集群。下图展示了为两个租户（QA 和开发）提供服务的示例：  '
- en: '![Figure 3.2 – Dedicated clusters ](img/B18015_03_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 专用集群](img/B18015_03_02.jpg)  '
- en: Figure 3.2 – Dedicated clusters
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.2 – 专用集群  '
- en: 'The following table contains a summary of the pros and cons of this strategy,
    from our point of view:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '下表总结了我们对这种策略的优缺点：  '
- en: '![](img/Table_02_new.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_02_new.jpg)  '
- en: This type of architecture is usually recommended for companies that have strict
    requirements for physically isolated environments and don't want to be dependent
    on multi-tenant software and processes to provide isolation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '这种架构通常推荐给那些对物理隔离环境有严格要求，并且不想依赖多租户软件和流程来提供隔离的公司。  '
- en: Shared clusters, no physical separation
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '共享集群，无物理隔离  '
- en: 'On the other hand, you may decide to have one shared cluster providing services
    for multiple tenants while using OpenShift objects to enable multitenancy (namespaces,
    RBAC, ResourceQuotas, and NetworkPolicies). You can see a simple schema of this
    strategy in the following diagram:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '另一方面，您可能决定使用一个共享集群为多个租户提供服务，同时使用 OpenShift 对象来实现多租户（如命名空间、RBAC、资源配额和网络策略）。您可以在下图中看到该策略的简单示意图：  '
- en: '![Figure 3.3 – Shared cluster, no physical separation ](img/B18015_03_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 共享集群，无物理隔离](img/B18015_03_03.jpg)  '
- en: Figure 3.3 – Shared cluster, no physical separation
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.3 – 共享集群，无物理隔离  '
- en: 'The following table shows some of the pros and cons of this strategy:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '下表展示了这种策略的一些优缺点：  '
- en: This kind of architecture usually works well for non-production environments,
    in which some incidents related to performance degradation, for instance, are
    sometimes tolerated.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '这种架构通常适用于非生产环境，在这些环境中，某些与性能下降相关的事件，例如，偶尔可以容忍。  '
- en: Shared clusters, dedicated worker nodes
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '共享集群，专用工作节点  '
- en: 'If you have to provide computing resources that are physically isolated, this
    may be the right direction to take. In this case, you are going to use the same
    objects to provide isolation, but you dedicate worker nodes for specific tenants.
    The following is a simple schema:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您必须提供物理隔离的计算资源，这可能是正确的方向。在这种情况下，您将使用相同的对象来提供隔离，但为特定租户专用工作节点。以下是一个简单的示意图：
- en: '![Figure 3.4 – Shared cluster, dedicated worker nodes ](img/B18015_03_04.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 共享集群，专用工作节点](img/B18015_03_04.jpg)  '
- en: Figure 3.4 – Shared cluster, dedicated worker nodes
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.4 – 共享集群，专用工作节点  '
- en: 'This strategy can have the following pros and cons:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '这种策略有以下优缺点：  '
- en: '![](img/Table_04_new.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_04_new.jpg)  '
- en: 'This kind of architecture usually works well for non-production environments,
    in which some incidents related to performance degradation, for instance, are
    sometimes tolerated. This architecture also works well for production workloads
    that don''t have requirements for high HTTP(S) throughput and low-latency HTTP(S).
    The following link provides a capacity baseline for a single OpenShift ingress
    (**HAProxy**), for comparison: [https://docs.openshift.com/container-platform/latest/scalability_and_performance/routing-optimization.html](https://docs.openshift.com/container-platform/latest/scalability_and_performance/routing-optimization.html).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构通常适用于非生产环境，其中某些性能下降相关的事件（例如）有时是可以容忍的。该架构也适用于没有高 HTTP(S) 吞吐量和低延迟 HTTP(S)
    要求的生产工作负载。以下链接提供了单个 OpenShift 入口控制器（**HAProxy**）的容量基准，供参考：[https://docs.openshift.com/container-platform/latest/scalability_and_performance/routing-optimization.html](https://docs.openshift.com/container-platform/latest/scalability_and_performance/routing-optimization.html)。
- en: '![](img/Table_03_new.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_03_new.jpg)'
- en: Shared clusters, dedicated worker nodes, and ingress controllers
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 共享集群、专用工作节点和入口控制器
- en: 'Finally, with this strategy, you can share a cluster among different tenants
    by providing a higher level of isolation. The following diagram shows this cluster''s
    architecture:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，采用这种策略，你可以通过提供更高的隔离级别，在不同租户之间共享集群。下图展示了该集群的架构：
- en: '![Figure 3.5 – Shared cluster, dedicated worker nodes, and ingress controllers
    ](img/B18015_03_05.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – 共享集群、专用工作节点和入口控制器](img/B18015_03_05.jpg)'
- en: Figure 3.5 – Shared cluster, dedicated worker nodes, and ingress controllers
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 共享集群、专用工作节点和入口控制器
- en: 'This strategy can bring the following pros and cons:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略有以下优缺点：
- en: '![](img/Table_05_new.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_05_new.jpg)'
- en: This kind of architecture usually works well for both production and non-production
    environments. If it's well defined and used, it has the same effect as dedicated
    clusters. The only difference between this strategy and dedicated clusters is
    that, in this case, a configuration mistake could lead to an application being
    deployed in the wrong tenant (by using the incorrect **nodeSelector** in a namespace,
    for instance).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构通常适用于生产环境和非生产环境。如果定义明确并正确使用，它的效果与专用集群相同。这种策略与专用集群之间的唯一区别是，在这种情况下，配置错误可能导致应用部署到错误的租户（例如，在命名空间中使用错误的**nodeSelector**）。
- en: OpenShift multitenancy checklist
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift 多租户检查清单
- en: 'To conclude this chapter, we have decided to add some additional items to the
    checklist we started building in the previous chapter, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结本章，我们决定在前一章开始构建的检查清单中添加一些额外的项目，如下所示：
- en: '![](img/Table_06_new.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_06_new.jpg)'
- en: In the next chapter, you will acquire more knowledge about the personas that
    are usually related to OpenShift, from C-level to operational level, and what
    skills are required for each role. You will be able to understand what you should
    expect from each role and prepare yourself and your team to work well with OpenShift.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解与 OpenShift 通常相关的各种角色，从 C 级高管到操作层级，以及每个角色所需的技能。你将能够理解应该期望每个角色的职责，并为自己和团队做好与
    OpenShift 合作的准备。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at some of the strategies that provide services for
    multiple tenants with OpenShift clusters. You now understand that we can have
    dedicated or shared OpenShift clusters to host tenants. You also saw that with
    shared clusters, you can provide some level of isolation for each tenant by using
    namespaces, ResourceQuotas, NetworkPolicies, and other objects to provide multitenancy
    or even have a physical separation of workers and/or ingress; the best option
    for your use case depends on the requirements of your organization, workloads,
    and environments.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们探讨了提供多租户服务的几种策略，适用于 OpenShift 集群。你现在应该理解，我们可以拥有专用或共享的 OpenShift 集群来托管租户。你还看到，对于共享集群，可以通过使用命名空间、资源配额（ResourceQuotas）、网络策略（NetworkPolicies）以及其他对象，提供一定程度的租户隔离，甚至实现工作节点和/或入口控制器的物理隔离；最适合你的用例的选择取决于组织的需求、工作负载和环境。
- en: However, I need to warn you that in the current hybrid cloud world, you will
    probably need to work with clusters in different providers and regions, which
    may lead you to have an increasing number of clusters. But don't worry – as we
    saw in [*Chapter 1*](B18015_01.xhtml#_idTextAnchor016), *Hybrid Cloud Journey
    and Strategies*, many great tools can help us manage several clusters, such as
    Red Hat Advanced Cluster Management, Advanced Cluster Security and Quay; we will
    take a deep dive into these tools by covering practical examples in the last part
    of this book, which is dedicated only to them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我需要提醒你，在当前的混合云环境中，你可能需要与不同提供商和地区的集群进行协作，这可能导致集群数量的不断增加。但不用担心——正如我们在[*第一章*](B18015_01.xhtml#_idTextAnchor016)中看到的，*混合云之旅与策略*，许多优秀的工具可以帮助我们管理多个集群，比如
    Red Hat 高级集群管理、先进集群安全和 Quay；我们将在本书最后一部分深入探讨这些工具，并通过实际示例进行讲解，这一部分专门讲解这些工具。
- en: In the next chapter, we will learn about the personas and skillsets that are
    usually related to OpenShift, their main duties and responsibilities, and other
    important factors.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习与 OpenShift 相关的角色和技能组合，它们的主要职责和任务，以及其他重要因素。
- en: Further reading
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you want to find out more about the concepts that were covered in this chapter,
    check out the following references:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于本章所涉及的概念，请查阅以下参考资料：
- en: '*What is* *multitenancy?* [https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy](https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是* *多租户？* [https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy](https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy)'
- en: '*Multi-tenant network isolation (OpenShift* *documentation):* [https://docs.openshift.com/container-platform/4.8/networking/network_policy/multitenant-network-policy.html](https://docs.openshift.com/container-platform/4.8/networking/network_policy/multitenant-network-policy.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*多租户网络隔离（OpenShift* *文档）:* [https://docs.openshift.com/container-platform/4.8/networking/network_policy/multitenant-network-policy.html](https://docs.openshift.com/container-platform/4.8/networking/network_policy/multitenant-network-policy.html)'
