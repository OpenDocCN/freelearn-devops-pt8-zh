- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: How Not to Use IaC and Terraform
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何不使用 IaC 和 Terraform
- en: '**Infrastructure as Code** (**IaC**) tools such as Terraform have revolutionized
    the way we manage cloud infrastructure, offering powerful capabilities for automating
    the deployment and configuration of complex environments. However, despite the
    benefits, there are still many situations where IaC and Terraform can be misused
    or overused, leading to inefficiencies, errors, and security vulnerabilities.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即代码**（**IaC**）工具如 Terraform 改变了我们管理云基础设施的方式，提供了强大的自动化能力，用于部署和配置复杂的环境。然而，尽管它带来了很多好处，但仍然存在许多情况下
    IaC 和 Terraform 被误用或过度使用，导致低效、错误和安全漏洞。'
- en: In this chapter, we’ll explore some basic Terraform commands, then compare Terraform
    and CloudFormation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些基本的 Terraform 命令，然后对比 Terraform 和 CloudFormation。
- en: 'We’ll cover these main topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Terraform architecture and workflow
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform 架构和工作流
- en: To compare with the others
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他工具进行比较
- en: Terraform architecture and workflow
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform 架构和工作流
- en: To make the most of Terraform and use it effectively to manage your cloud infrastructure,
    it’s important to have a good understanding of its architecture and workflow.
    Terraform follows a declarative approach to infrastructure management, where you
    describe the desired state of your infrastructure using configuration files, and
    it takes care of provisioning and configuring the necessary resources to achieve
    that state.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用 Terraform 并有效地管理您的云基础设施，了解其架构和工作流非常重要。Terraform 采用声明式的基础设施管理方法，您通过配置文件描述所需的基础设施状态，Terraform
    将负责提供和配置必要的资源以实现该状态。
- en: In this chapter, we’ll explore the key components of Terraform’s architecture
    and workflow, and provide a high-level overview of how Terraform works to manage
    infrastructure on cloud platforms such as AWS, Azure, and Google Cloud. Understanding
    these concepts will help you write more effective Terraform code and troubleshoot
    issues more easily.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Terraform 架构和工作流的关键组件，并提供一个高层次的概述，帮助您理解 Terraform 如何在 AWS、Azure 和
    Google Cloud 等云平台上管理基础设施。理解这些概念将帮助您编写更高效的 Terraform 代码，并更容易地排除故障。
- en: Architecture
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构
- en: 'Terraform is a tool that allows developers to describe the infrastructure and
    run it in any environment. Terraform has many use cases, such as building a whole
    data center or just a single server or resource:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是一款允许开发者描述基础设施并在任何环境中运行的工具。Terraform 有许多使用场景，例如构建整个数据中心或仅构建单个服务器或资源：
- en: '![Figure 2.1 – Terraform – multi-cloud](img/B18198_02_1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – Terraform – 多云](img/B18198_02_1.jpg)'
- en: Figure 2.1 – Terraform – multi-cloud
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – Terraform – 多云
- en: Terraform is a powerful infrastructure management tool that enables safe and
    efficient building, modification, and versioning of infrastructure. It is capable
    of managing both local and remote infrastructure, making it an ideal choice for
    distributed teams collaborating on a project from different geographical locations.
    With Terraform, teams can easily work together on complex infrastructure projects,
    regardless of their physical location, while ensuring that the infrastructure
    remains consistent and up to date.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是一款强大的基础设施管理工具，能够安全高效地构建、修改和版本控制基础设施。它能够管理本地和远程基础设施，使其成为分布式团队在不同地理位置上协作项目的理想选择。通过
    Terraform，团队可以轻松在复杂的基础设施项目中协作，无论他们身处何地，同时确保基础设施保持一致且始终更新。
- en: 'The Terraform architecture is quite simple; it is composed of just four components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 的架构非常简单，它仅由四个组件组成：
- en: Providers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者
- en: Modules
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块
- en: Resources
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源
- en: Templates
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板
- en: The modules are used to define the infrastructure and its components. The providers
    are responsible for how these modules should be executed in different environments.
    Resources are what we need to build our infrastructure, and templates are used
    to describe them easily. The following diagram outlines the technical flow for
    Terraform.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 模块用于定义基础设施及其组件。提供者负责如何在不同环境中执行这些模块。资源是我们构建基础设施所需要的，而模板则用于简化它们的描述。下图概述了 Terraform
    的技术流程。
- en: '![Figure 2.2 – Terraform technical flow](img/B18198_02_2.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – Terraform 技术流程](img/B18198_02_2.jpg)'
- en: Figure 2.2 – Terraform technical flow
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – Terraform 技术流程
- en: Providers
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供者
- en: Terraform providers are essentially plugins that Terraform installs to interact
    with remote systems, such as Azure, AWS, Google Cloud, VMware, and a lot of other
    vendors’ devices.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 提供程序本质上是 Terraform 安装的插件，用于与远程系统交互，例如 Azure、AWS、Google Cloud、VMware
    以及其他许多供应商的设备。
- en: To interact with various cloud providers, SaaS providers, and other APIs, Terraform
    relies on plugins known as providers. These providers serve as the interface between
    Terraform and the target infrastructure, allowing Terraform to manage the desired
    resources. By leveraging a rich ecosystem of providers, Terraform enables users
    to manage infrastructure resources across multiple platforms using a unified,
    consistent syntax and workflow.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与各种云服务提供商、SaaS 提供商以及其他 API 交互，Terraform 依赖于被称为提供程序的插件。这些提供程序充当 Terraform 与目标基础设施之间的接口，允许
    Terraform 管理所需的资源。通过利用丰富的提供程序生态系统，Terraform 使用户能够在多个平台上使用统一且一致的语法和工作流程来管理基础设施资源。
- en: Terraform uses providers to provision resources, which describe one or more
    infrastructure objects such as virtual networks and compute instances. Each provider
    on the Terraform Registry has documentation detailing available resources and
    their configuration options.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 使用提供程序来配置资源，这些资源描述了一个或多个基础设施对象，例如虚拟网络和计算实例。每个 Terraform 注册表上的提供程序都有文档，详细说明可用资源及其配置选项。
- en: If you haven’t used any Terraform provider within your script, you won’t be
    able to manage or create any infrastructure. You can define more than one provider
    in your Terraform code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在脚本中没有使用任何 Terraform 提供程序，你将无法管理或创建任何基础设施。你可以在 Terraform 代码中定义多个提供程序。
- en: If you are working with Terraform modules, then you need to declare the Terraform
    providers in your root module while the child modules inherit the provider configuration
    from the root module. Terraform providers follow their own release cadence and
    version number syntax.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Terraform 模块，则需要在根模块中声明 Terraform 提供程序，而子模块会从根模块继承提供程序配置。Terraform 提供程序遵循自己的发布节奏和版本号语法。
- en: Modules
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块
- en: In Terraform, a module is essentially a collection of Terraform template files
    that reside in a single directory. Even the most basic configuration consisting
    of just one directory with one or more `.tf` files is considered a **module**.
    When executing Terraform commands directly from such a directory, it’s referred
    to as the **root module**. By organizing infrastructure configurations into modules,
    users can encapsulate related resources and easily reuse them across different
    projects. This modularity enables teams to create scalable and maintainable infrastructure
    code, resulting in faster development and easier maintenance over time. The following
    shows a sample folder structure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Terraform 中，模块本质上是位于单个目录中的 Terraform 模板文件集合。即使是最基本的配置，只包含一个目录和一个或多个 `.tf`
    文件，也被视为 **模块**。从这种目录直接执行 Terraform 命令时，称其为 **根模块**。通过将基础设施配置组织成模块，用户可以封装相关资源，并在不同的项目中轻松重用。这种模块化使得团队能够创建可扩展和可维护的基础设施代码，从而加快开发速度，并随着时间的推移简化维护。以下是一个示例文件夹结构。
- en: '![Figure 2.3 – Sample folder structure](img/B18198_02_3.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 示例文件夹结构](img/B18198_02_3.jpg)'
- en: Figure 2.3 – Sample folder structure
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 示例文件夹结构
- en: In Terraform, commands operate solely on the template files located in one specific
    directory, typically the current working directory. However, by utilizing module
    blocks in your templates, you can invoke modules residing in other directories.
    Whenever Terraform encounters a module block, it processes the configuration files
    for that module.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Terraform 中，命令仅作用于位于特定目录中的模板文件，通常是当前工作目录。然而，通过在模板中使用模块块，你可以调用位于其他目录中的模块。每当
    Terraform 遇到一个模块块时，它会处理该模块的配置文件。
- en: When a template calls a module, the module is considered a “child module” of
    that template. Modules can be sourced either locally or remotely. Terraform supports
    multiple remote sources, such as the Terraform Registry, various version control
    systems, HTTP URLs, and private module registries in Terraform Cloud or Terraform
    Enterprise. By leveraging remote modules, teams can more easily share and collaborate
    on infrastructure configurations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当模板调用模块时，该模块被视为该模板的“子模块”。模块可以从本地或远程来源获取。Terraform 支持多种远程来源，例如 Terraform 注册表、各种版本控制系统、HTTP
    URL 以及 Terraform Cloud 或 Terraform Enterprise 中的私有模块注册表。通过利用远程模块，团队可以更轻松地共享和协作基础设施配置。
- en: There are over 10,000 modules published in the public Terraform Registry ready
    to use at [https://registry.terraform.io/browse/modules](https://registry.terraform.io/browse/modules),
    and you can start to use them to provision infrastructure right away.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共 Terraform 注册表中已经发布了超过 10,000 个模块，可以在 [https://registry.terraform.io/browse/modules](https://registry.terraform.io/browse/modules)
    直接使用，并且你可以立即开始使用它们来配置基础设施。
- en: 'Let’s go over the benefits of using modules:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看使用模块的好处：
- en: '**Organize configuration**: Terraform offers modules as a means to simplify
    the organization and comprehension of your infrastructure configuration. This
    approach offers a more user-friendly experience, where users are not required
    to learn all of Terraform’s features, but instead can focus on the specific features
    they need. Infrastructure can be complex, and even relatively simple deployments
    may require hundreds or thousands of lines of code. By leveraging modules, you
    can logically group related configuration elements into discrete components, making
    it easier to manage and modify your infrastructure over time.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织配置**：Terraform 提供模块作为简化基础设施配置组织和理解的一种方式。这种方法提供了更友好的用户体验，用户不需要学习 Terraform
    的所有功能，而是可以专注于他们需要的特定功能。基础设施可能非常复杂，即使是相对简单的部署，也可能需要数百或数千行代码。通过利用模块，你可以将相关的配置元素逻辑地分组为独立的组件，使得随着时间的推移，管理和修改基础设施变得更加容易。'
- en: '**Encapsulate configuration**: Modules offer the additional advantage of encapsulating
    configuration into distinct, logical components. This encapsulation can help avoid
    unintended consequences, such as inadvertently modifying other infrastructure
    while attempting to change a single component, and also minimize the likelihood
    of simple errors, such as inadvertently assigning the same name to different resources.
    By keeping related configuration elements organized within their own modules,
    users can more easily understand and modify their infrastructure in a controlled
    and systematic manner, reducing the risk of unexpected errors and making it simpler
    to implement changes over time.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封装配置**：模块还具有将配置封装成独立、逻辑组件的额外优势。通过封装，可以避免意外的后果，比如在试图更改一个组件时不小心修改了其他基础设施，同时也能最小化简单错误的可能性，例如不小心将相同的名称分配给不同的资源。通过将相关的配置元素组织在各自的模块中，用户可以更容易地理解和修改他们的基础设施，以一种受控和系统化的方式，降低意外错误的风险，并使得随着时间的推移，实施变更变得更加简单。'
- en: '**Reuse configuration**: Creating infrastructure configurations from scratch
    can be a time-intensive and error-prone process. By utilizing modules, however,
    users can save time, enforce governance, and minimize costly errors by reusing
    pre-existing configurations authored by themselves, their colleagues, or other
    members of the Terraform community who have made modules publicly available. Additionally,
    modules can be shared within teams or published publicly, offering users the ability
    to benefit from the expertise of others and distribute their own work to others
    who may find it useful. Ultimately, leveraging modules can help users work more
    efficiently and effectively, making it easier to implement and maintain infrastructure
    configurations over time.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重用配置**：从零开始创建基础设施配置可能是一个耗时且容易出错的过程。然而，通过利用模块，用户可以节省时间，执行治理，并通过重用自己、同事或 Terraform
    社区其他成员已经公开的现有配置来减少代价高昂的错误。此外，模块可以在团队内共享或公开发布，用户可以从他人的专业经验中受益，也可以将自己的工作分享给其他可能觉得有用的人。最终，利用模块可以帮助用户更高效、更有效地工作，使得随着时间的推移，更容易实施和维护基础设施配置。'
- en: '**Provide consistency and ensure best practices**: In addition to facilitating
    efficient configuration development, modules also promote consistency across infrastructure
    configurations. Consistency is essential for comprehending complex configurations
    and ensures that best practices are applied uniformly across all configurations.
    For example, cloud providers offer numerous options for configuring object storage
    services such as Amazon S3 buckets. Improperly secured object storage has led
    to several critical security incidents, and due to the complexity of configuring
    these services, misconfiguration can occur easily.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供一致性并确保最佳实践**：除了促进高效的配置开发外，模块还促进了基础设施配置之间的一致性。一致性对于理解复杂的配置至关重要，并确保最佳实践在所有配置中得到统一应用。例如，云提供商提供了多种选项来配置对象存储服务，如
    Amazon S3 桶。不当保护的对象存储已导致多次重大安全事件，由于配置这些服务的复杂性，配置错误很容易发生。'
- en: '**Self-service**: Modules simplify the usage of your configuration by other
    teams. The Terraform Registry enables other teams to locate and utilize your approved
    and published Terraform modules.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自助服务**：模块简化了其他团队使用您的配置。Terraform 注册表使其他团队能够查找并使用您批准和发布的 Terraform 模块。'
- en: '**Leveraging modules can enhance the governance of your resources**: For instance,
    modules can be utilized to define the configuration of your organization’s public
    website buckets, as well as separate modules for private buckets that serve logging
    applications. Furthermore, modules facilitate updates to resource configurations
    by allowing you to modify a configuration in one location, which can then be applied
    to all instances where the module is used.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用模块可以增强资源治理**：例如，可以使用模块定义您组织的公共网站桶的配置，以及为服务日志应用程序的私有桶定义单独的模块。此外，模块通过允许您在一个位置修改配置，从而将更新应用于所有使用该模块的实例，简化了资源配置的更新。'
- en: Resources
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源
- en: Terraform uses resource blocks to manage various kinds of infrastructure, such
    as virtual networks, compute instances, and higher-level components including
    DNS records. These resource blocks map to one or more infrastructure objects within
    your Terraform configuration.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 使用资源块来管理各种类型的基础设施，如虚拟网络、计算实例以及更高级的组件，包括 DNS 记录。这些资源块映射到 Terraform
    配置中的一个或多个基础设施对象。
- en: Typically, each Terraform provider has several distinct resources that correspond
    to the relevant APIs for managing a given infrastructure type. Resource declarations
    can include several advanced features, although only a limited subset is necessary
    for initial use. With advanced syntax features, such as single resource declarations
    that generate multiple similar remote objects, users can familiarize themselves
    with and confirm all the features of a resource provider’s documentation pages
    in the Terraform Registry.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个 Terraform 提供程序都有多个独立的资源，这些资源对应于用于管理特定基础设施类型的相关 API。资源声明可以包括多个高级功能，尽管初始使用时只需要有限的子集。通过高级语法功能，如生成多个相似远程对象的单个资源声明，用户可以熟悉并确认所有资源提供程序文档页面中的功能，这些文档可以在
    Terraform 注册表中找到。
- en: Templates
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板
- en: Terraform templates provide a way to create resources in the desired format
    on the target cloud providers or systems.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 模板提供了一种在目标云提供商或系统上以期望的格式创建资源的方法。
- en: A Terraform template is a collection of files that define the desired state
    of your infrastructure to be achieved. They include different configuration files,
    such as variables, resources, and modules. You can keep a single file or multiple
    files under a directory, depending on your needs and personal choice.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 模板是一组定义您希望实现的基础设施状态的文件。它们包括不同的配置文件，如变量、资源和模块。您可以根据需要和个人选择，将单个文件或多个文件保存在一个目录下。
- en: Now that we have covered the components of the architecture, let’s look at the
    workflow.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了架构的组件，让我们来看看工作流。
- en: Workflow
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流
- en: 'Terraform’s workflows consist of five fundamental steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 的工作流包括五个基本步骤：
- en: "![Figure 2.4 – Terraform’s \uFEFFworkflow](img/B18198_02_4.jpg)"
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – Terraform 的工作流](img/B18198_02_4.jpg)'
- en: Figure 2.4 – Terraform’s workflow
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – Terraform 的工作流
- en: 'These steps involve the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤包括以下内容：
- en: '**Write**: This step involves creating modifications to the code.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写**：这一步涉及对代码进行修改。'
- en: '**Init**: At this stage, you initialize your code and download the requirements
    specified in your code, such as providers.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**初始化**：在此阶段，您初始化代码并下载代码中指定的要求，如提供程序。'
- en: '**Plan**: In this step, you review and predict the changes and determine whether
    to accept them.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计划**：在此步骤中，你回顾并预测更改，决定是否接受这些更改。'
- en: '**Apply**: This is where you accept the changes and implement them on real
    infrastructure.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用**：在此步骤中，你接受更改并在实际基础设施上实施这些更改。'
- en: '**Destroy**: This final step involves destroying all the infrastructure you’ve
    created.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**销毁**：此最终步骤涉及销毁你创建的所有基础设施。'
- en: Details and actions vary between workflows. Let’s look at all the steps of the
    workflow in detail.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 细节和操作因工作流而异。我们将详细查看工作流的所有步骤。
- en: Write
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写入
- en: To begin with, author your Terraform configuration just like you would write
    code in your preferred editor. It is standard practice to store your work in a
    version-controlled repository, even when working individually.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，像在你喜欢的编辑器中编写代码一样编写 Terraform 配置。即使是个人工作，也建议将工作存储在版本控制的仓库中。
- en: Init
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化
- en: The `terraform init` command initializes the working directory where Terraform
    configuration files are located. It is recommended to execute this command as
    the first step after creating a new Terraform configuration or cloning an existing
    one from version control.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform init` 命令初始化 Terraform 配置文件所在的工作目录。建议在创建新 Terraform 配置或从版本控制中克隆现有配置后，首先执行此命令。'
- en: Executing this command multiple times is safe. `terraform init` carries out
    several initialization processes that prepare the current working directory for
    Terraform use. While subsequent runs may produce errors, the command will not
    delete your existing configuration or state.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 多次执行此命令是安全的。`terraform init` 会执行多个初始化过程，准备当前工作目录以供 Terraform 使用。虽然后续运行可能会产生错误，但此命令不会删除现有的配置或状态。
- en: Most providers are available as Terraform plugins. When executing the command,
    Terraform scans the configuration for direct and indirect references to providers
    and attempts to install the corresponding plugins. The program automatically discovers,
    downloads, and installs appropriate provider plugins that are published in either
    the public registry or a third-party provider’s registry.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数提供商作为 Terraform 插件提供。当执行命令时，Terraform 会扫描配置文件中的直接和间接提供商引用，并尝试安装相应的插件。程序会自动发现、下载并安装已发布的适当提供商插件，这些插件可以在公共注册表或第三方提供商的注册表中找到。
- en: Terraform stores information about the chosen providers in the dependency lock
    file after a successful installation. To ensure that Terraform selects the same
    provider versions when you run `terraform init` in the future, commit this file
    to your version control system.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 在成功安装后会将所选提供商的信息存储在依赖锁文件中。为了确保 Terraform 在未来执行 `terraform init` 时选择相同的提供商版本，应该将此文件提交到版本控制系统中。
- en: The `terraform init` command can be used for various purposes, such as plugin
    installation, child module installation, and backend initialization.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform init` 命令可用于多种目的，如插件安装、子模块安装和后端初始化。'
- en: '![Figure 2.5 – Terraform initialization output](img/B18198_02_5.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – Terraform 初始化输出](img/B18198_02_5.jpg)'
- en: Figure 2.5 – Terraform initialization output
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – Terraform 初始化输出
- en: Plan
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计划
- en: 'The `terraform plan` command generates an execution plan that enables you to
    preview the infrastructure modifications Terraform intends to make. Once a plan
    is generated, Terraform performs the following actions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform plan` 命令生成一个执行计划，允许你预览 Terraform 打算进行的基础设施修改。一旦生成计划，Terraform 将执行以下操作：'
- en: Reads the current state of existing remote objects to verify that the state
    is current
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取现有远程对象的当前状态，以验证该状态是否最新
- en: Compares the current state to the previous state, noting any discrepancies
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将当前状态与之前的状态进行比较，注意任何不一致之处
- en: Suggests a set of actions that, if implemented, should ensure that the remote
    objects align with the configuration
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一组操作建议，若实施这些操作，应该能确保远程对象与配置一致
- en: The `terraform plan` command itself does not implement the predicted modifications.
    Instead, it is intended for use before applying or sharing your changes with your
    team to verify that the proposed changes align with your expectations. If Terraform
    detects no resource changes, the `terraform plan` command indicates that no changes
    are required for the actual infrastructure.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform plan` 命令本身不会实施预测的修改。它的用途是在应用或与团队共享更改之前，检查所提议的更改是否符合预期。如果 Terraform
    检测到没有资源变更，`terraform plan` 命令会指示实际基础设施不需要进行任何更改。'
- en: '![Figure 2.6 – terraform plan output](img/B18198_02_6.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – terraform plan 输出](img/B18198_02_6.jpg)'
- en: Figure 2.6 – terraform plan output
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – terraform plan 输出
- en: Apply
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用
- en: To execute the actions suggested by Terraform plan, use the `terraform apply`
    command. The simplest approach is to execute `terraform apply` without any arguments,
    which automatically generates a new execution plan (similar to running `terraform
    plan`) and asks for approval before executing the proposed actions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行Terraform计划中建议的操作，请使用`terraform apply`命令。最简单的方法是执行`terraform apply`命令而不带任何参数，这将自动生成一个新的执行计划（类似于运行`terraform
    plan`），并在执行建议的操作之前请求用户确认。
- en: Unless explicitly directed to skip approval, `terraform apply` prompts the user
    for confirmation before making any changes to the corresponding infrastructure
    provider’s API.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除非明确指示跳过批准，`terraform apply`命令会在对相应的基础设施提供者API进行任何更改之前，提示用户进行确认。
- en: If no changes are detected in the configuration files compared to the current
    Terraform state, no modifications will be made to the infrastructure. Since Terraform
    is a declarative language, the `terraform apply` command can be executed multiple
    times safely.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与当前Terraform状态相比，配置文件没有检测到任何更改，则不会对基础设施进行任何修改。由于Terraform是声明性语言，`terraform
    apply`命令可以安全地执行多次。
- en: "![Figure 2.7 – \uFEFFterraform apply command](img/B18198_02_7.jpg)"
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – terraform apply 命令](img/B18198_02_7.jpg)'
- en: Figure 2.7 – terraform apply command
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – terraform apply 命令
- en: Destroy
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 销毁
- en: You can use the `terraform destroy` command to easily destroy all remote objects
    managed by a specific Terraform configuration. You should not destroy objects
    that last for a long time in a production environment, but sometimes Terraform
    is used to handle short-lived infrastructure for development purposes, where `terraform
    destroy` can helpfully remove all temporary objects when you don’t need them anymore.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`terraform destroy`命令轻松销毁由特定Terraform配置管理的所有远程对象。在生产环境中，你不应该销毁那些长期存在的对象，但有时Terraform会被用于处理用于开发目的的短期基础设施，此时`terraform
    destroy`可以帮助在你不再需要这些临时对象时将它们全部删除。
- en: The `terraform destroy` command should be used with caution and is not a command
    you would execute regularly. However, it is frequently used in non-production
    environments, where cleanup tasks are necessary for many proof-of-concept tests.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform destroy`命令应谨慎使用，这不是一个你会定期执行的命令。然而，它在非生产环境中经常使用，在这些环境中，清理任务对于许多概念验证测试是必需的。'
- en: "![Figure 2.8 – \uFEFFterraform destroy command](img/B18198_02_8.jpg)"
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – terraform destroy 命令](img/B18198_02_8.jpg)'
- en: Figure 2.8 – terraform destroy command
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – terraform destroy 命令
- en: In summary, Terraform provides a set of commands to facilitate the creation,
    modification, and deletion of infrastructure resources. The `terraform init` command
    initializes the working directory where the Terraform configuration files are
    located. `terraform plan` generates an execution plan to preview the changes to
    be made to the infrastructure, while `terraform apply` executes the suggested
    changes after receiving user confirmation. Finally, `terraform destroy` destroys
    all remote objects managed by the configuration. With these commands, Terraform
    provides a powerful, flexible, and efficient toolset for managing IaC. Let’s compare
    other IaC tools to Terraform.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Terraform提供了一组命令来方便基础设施资源的创建、修改和删除。`terraform init`命令初始化包含Terraform配置文件的工作目录。`terraform
    plan`生成一个执行计划，用于预览将对基础设施进行的更改，而`terraform apply`在收到用户确认后执行建议的更改。最后，`terraform
    destroy`销毁由配置管理的所有远程对象。通过这些命令，Terraform为管理基础设施即代码（IaC）提供了强大、灵活且高效的工具集。让我们将其他IaC工具与Terraform进行对比。
- en: To Compare with the Other IaC Tools
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他IaC工具进行对比
- en: Terraform’s flexible abstraction of resources and providers allows it to represent
    a wide range of infrastructure components, from physical hardware and virtual
    machines to email and DNS providers. This versatility makes Terraform capable
    of addressing various issues.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform对资源和提供者的灵活抽象使其能够表示广泛的基础设施组件，从物理硬件和虚拟机到电子邮件和DNS提供商。这种多功能性使得Terraform能够解决各种问题。
- en: Terraform can manage virtually any cloud or virtual environment, including AWS,
    Microsoft Azure, and Google Cloud Platform, among others.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform可以管理几乎任何云平台或虚拟环境，包括AWS、Microsoft Azure和Google Cloud Platform等。
- en: While this chapter focuses on using Terraform to manage AWS infrastructure,
    it is essential to note that Terraform is not exclusive to only cloud platforms.
    It can manage a single application or an entire data center.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍如何使用 Terraform 来管理 AWS 基础设施，但需要特别注意的是，Terraform 并不仅限于云平台。它可以管理单个应用程序或整个数据中心。
- en: Terraform versus CloudFormation
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Terraform 与 CloudFormation
- en: When it comes to **IaC** tools for cloud-based resources, two of the most popular
    choices are Terraform and AWS CloudFormation. While both tools aim to provide
    a reliable, efficient, and safe way to manage cloud infrastructure, they differ
    in their approach and implementation. Terraform is an open source tool that offers
    a flexible and extensible language for creating and managing infrastructure. In
    contrast, CloudFormation is an **AWS** proprietary tool that uses JSON or YAML
    templates to define infrastructure resources. This section will compare and contrast
    the features and capabilities of Terraform and CloudFormation, to help you make
    an informed decision on which tool best suits your infrastructure management needs.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在云资源的 **IaC** 工具方面，最受欢迎的两种选择是 Terraform 和 AWS CloudFormation。虽然这两种工具都旨在提供一种可靠、高效且安全的方式来管理云基础设施，但它们在方法和实现上有所不同。Terraform
    是一款开源工具，提供了一种灵活且可扩展的语言来创建和管理基础设施。而 CloudFormation 是一款 **AWS** 专有工具，使用 JSON 或 YAML
    模板来定义基础设施资源。本节将对比和分析 Terraform 与 CloudFormation 的功能和能力，帮助你做出更明智的决策，选择最适合你基础设施管理需求的工具。
- en: What is AWS CloudFormation?
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 AWS CloudFormation？
- en: CloudFormation is a service provided by **AWS** that simplifies the management
    of a collection of AWS resources, including provisioning and updating them as
    necessary. With CloudFormation, you can create, update, and delete stacks in response
    to changes in your application environment. This AWS-managed service also offers
    a straightforward approach to creating reusable templates that enable you to deploy
    cost-effective applications.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 是由 **AWS** 提供的一项服务，用于简化一组 AWS 资源的管理，包括根据需要进行资源的配置和更新。通过 CloudFormation，你可以根据应用环境的变化来创建、更新和删除堆栈。这个
    AWS 托管的服务还提供了一种创建可重用模板的简便方法，帮助你部署具有成本效益的应用程序。
- en: CloudFormation allows you to design and provision AWS and third-party resources
    for your cloud environment using a configuration format known as templates. These
    templates, written in either JSON or YAML format, allow for the reusability and
    scalability of infrastructure, making it easier to manage large-scale cloud environments.
    The following diagram illustrates how Amazon CloudFormation serves as the central
    orchestrator for various AWS services.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 允许你使用一种称为模板的配置格式，为你的云环境设计和配置 AWS 及第三方资源。这些模板可以使用 JSON 或 YAML
    格式编写，允许基础设施的可重用性和可扩展性，使得管理大规模云环境变得更加容易。下图展示了 Amazon CloudFormation 如何作为各种 AWS
    服务的中央协调器。
- en: '![Figure 2.9 – AWS CloudFormation](img/B18198_02_9.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – AWS CloudFormation](img/B18198_02_9.jpg)'
- en: Figure 2.9 – AWS CloudFormation
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – AWS CloudFormation
- en: Comparison and differences between Terraform and CloudFormation
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Terraform 与 CloudFormation 之间的比较与差异
- en: '**Scope**: On the coverage side, CloudFormation is very powerful because it
    is developed and supported directly by AWS, but Terraform has a great community
    that always works at a fast pace to ensure new resources, and features are implemented
    for providers quickly.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**范围**：在覆盖面方面，CloudFormation 非常强大，因为它是由 AWS 直接开发和支持的，但 Terraform 拥有一个强大的社区，始终以快速的步伐工作，确保新资源和功能快速为供应商实现。'
- en: '**Type**: CloudFormation is a managed service by AWS, but Terraform has a CLI
    tool that can run from your workstation, a server, or a CI/CD system (such as
    Jenkins, GitHub Actions, etc.) or Terraform Cloud (a SaaS automation solution
    from HashiCorp).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：CloudFormation 是 AWS 提供的托管服务，但 Terraform 拥有一个 CLI 工具，可以从你的工作站、服务器或 CI/CD
    系统（如 Jenkins、GitHub Actions 等）或 Terraform Cloud（HashiCorp 提供的 SaaS 自动化解决方案）运行。'
- en: '**License and support**: CloudFormation is a native AWS service, and AWS Support
    plans cover it as well. Terraform is an enterprise product and an open source
    project. HashiCorp offers 24/7 support, but at the same time, the huge Terraform
    community and provider developers are always helpful.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**许可证和支持**：CloudFormation 是 AWS 的原生服务，AWS 支持计划也涵盖了它。Terraform 是一款企业产品，也是一个开源项目。HashiCorp
    提供 24/7 的支持，同时，庞大的 Terraform 社区和供应商开发者总是乐于提供帮助。'
- en: '**Syntax**/**language**: CloudFormation supports both JSON and YAML formats.
    Terraform uses **HashiCorp Configuration Language** (**HCL**), which is human-readable
    as well as machine-friendly.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**/**语言**：CloudFormation 支持 JSON 和 YAML 格式。Terraform 使用 **HashiCorp 配置语言**（**HCL**），这种语言既易于人类阅读，也对机器友好。'
- en: '**Architecture**: CloudFormation is an AWS-managed service to which you send/upload
    your templates for provisioning; on the other hand, Terraform is a decentralized
    system with which you can provision infrastructure from any workstation or server.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**架构**：CloudFormation 是 AWS 管理的服务，您可以将模板上传至此进行资源配置；而 Terraform 是一个去中心化的系统，可以从任何工作站或服务器进行基础设施的配置。'
- en: '**Modularization**: In CloudFormation, nested stacks and cross-stack references
    can be used to achieve modularization, while Terraform is capable of creating
    reusable and reproducible modules.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块化**：在 CloudFormation 中，可以使用嵌套堆栈和跨堆栈引用来实现模块化，而 Terraform 则能够创建可重用和可复制的模块。'
- en: '**User experience**/**ease of use**: In contrast to CloudFormation, which is
    limited to AWS services, Terraform spans multiple cloud service providers such
    as AWS, Azure, and Google Cloud Platform, among others. This flexibility allows
    Terraform to provide a unified approach to managing cloud infrastructure across
    multiple providers, making it a popular choice for organizations that use more
    than one cloud provider.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户体验**/**易用性**：与仅限于 AWS 服务的 CloudFormation 相比，Terraform 跨多个云服务提供商，如 AWS、Azure
    和 Google Cloud Platform 等。这种灵活性使得 Terraform 能够提供统一的方式来管理多个云提供商的云基础设施，因此成为使用多个云提供商的组织的热门选择。'
- en: '**Life cycle and state management**: CloudFormation stores the state and manages
    it with the use of stacks. Terraform stores the state on disk in JSON format and
    allows you to use a remote state system, such as an AWS S3 bucket, that gives
    you the capability of tracking versions.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**生命周期和状态管理**：CloudFormation 使用堆栈存储和管理状态。Terraform 将状态以 JSON 格式存储在磁盘上，并允许使用远程状态系统，如
    AWS S3 存储桶，从而具备版本跟踪功能。'
- en: '**Import from existing infrastructure**: It is possible to import resources
    into CloudFormation, but only a few resources are supported. It is possible to
    import all resources into Terraform state, but it does not generate configuration
    in the process; you need to handle that. But there are third-party tools that
    can generate configuration, too.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**从现有基础设施导入**：CloudFormation 支持将资源导入，但仅限于少数资源。而 Terraform 可以将所有资源导入到状态中，但在这个过程中不会自动生成配置文件；你需要手动处理。不过，也有第三方工具可以帮助生成配置。'
- en: '**Verification steps**: CloudFormation uses change sets to verify the required
    changes. Terraform has a powerful plan for identifying changes and allows you
    to verify your changes to existing infrastructure before applying them.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**验证步骤**：CloudFormation 使用变更集来验证所需的变更。Terraform 拥有强大的计划功能，可以识别变更，并允许你在应用之前验证对现有基础设施的变更。'
- en: '**Rolling updates and rollbacks**: CloudFormation automatically rolls back
    to the last working state. Terraform has no feature for rolling updates or rollbacks,
    but you can build a rollback system using a CI/CD system.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**滚动更新与回滚**：CloudFormation 会自动回滚到上一个工作状态。Terraform 不具备滚动更新或回滚功能，但你可以通过 CI/CD
    系统构建回滚机制。'
- en: '**Multi-cloud management**: CloudFormation is AWS-only, but Terraform supports
    multiple cloud providers and many more services.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**多云管理**：CloudFormation 仅限于 AWS，而 Terraform 支持多个云服务提供商及更多服务。'
- en: '**Compliance integration**: CloudFormation is built by AWS, so compliance is
    already assured, but for Terraform, you need to implement third-party tools yourself
    to achieve compliance.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**合规性集成**：CloudFormation 由 AWS 构建，因此合规性已得到保障；而对于 Terraform，你需要自行实现第三方工具来实现合规性。'
- en: '**Deployment type**: CloudFormation has a built-in CI/CD system that takes
    care of everything concerning deployment and rollbacks. Terraform can be deployed
    from any system, but you need to build your CI/CD workflow or adopt a service
    that can fill the gaps.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署类型**：CloudFormation 内置了 CI/CD 系统，能够处理与部署和回滚相关的所有事务。而 Terraform 可以从任何系统部署，但需要自己构建
    CI/CD 工作流，或采用能够填补空白的服务。'
- en: '**Drift detection**: Both tools have drift detection by default.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**漂移检测**：这两种工具默认都具有漂移检测功能。'
- en: '**Cost**: Using AWS CloudFormation does not incur any additional charges beyond
    the cost of the AWS resources that are created, such as Amazon EC2 instances or
    Elastic Load Balancing load balancers. In contrast, Terraform is an open source
    project that can be used free of charge. However, to obtain enterprise-level features
    such as CI/CD automation and state management, you may need to consider using
    additional services and systems provided by HashiCorp or third-party service providers.
    These additional services may come with their own costs.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**成本**：使用AWS CloudFormation不会产生除创建的AWS资源（如Amazon EC2实例或Elastic Load Balancing负载均衡器）以外的额外费用。相比之下，Terraform是一个开源项目，可以免费使用。然而，要获得如CI/CD自动化和状态管理等企业级功能，您可能需要考虑使用HashiCorp或第三方服务提供商提供的额外服务和系统。这些额外服务可能会有自己的费用。'
- en: Terraform or CloudFormation – which should I choose?
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Terraform还是CloudFormation——我该选择哪个？
- en: The debate between Terraform and CloudFormation is ongoing and ultimately, the
    decision of which tool to use will depend on your personal preferences and requirements.
    Both tools offer unique benefits and features, so it’s important to evaluate which
    one aligns best with your organization’s goals and cloud infrastructure needs.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform和CloudFormation之间的辩论仍在继续，最终，选择使用哪个工具将取决于您的个人偏好和需求。两者都提供了独特的优势和功能，因此评估哪个工具最符合您组织的目标和云基础设施需求非常重要。
- en: CloudFormation is a more fitting choice when your whole infrastructure relies
    on AWS and you have no intention of integrating a multi-cloud setup in the future.
    For newcomers to AWS services, the native AWS provided integration support can
    be quite advantageous. As it’s developed by AWS, CloudFormation enjoys quicker
    AWS-centric updates. It operates on JSON and YAML, thereby bypassing any potential
    learning hurdles associated with HCL.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的整个基础设施依赖于AWS，并且未来没有计划集成多云架构时，CloudFormation是更合适的选择。对于AWS服务的新手，AWS本身提供的集成支持非常有优势。由于它是由AWS开发的，CloudFormation享有更快的AWS相关更新。它支持JSON和YAML，从而避免了与HCL相关的潜在学习障碍。
- en: On the other hand, Terraform shines when there’s usage (even potential future
    usage) of multi-cloud resources and faster operation is desired. Its module-based
    design promotes the creation of repeatable templates, accelerating the configuration
    process. Additionally, Terraform provides a broader range of functions not found
    in CloudFormation, which is beneficial for quicker resource provisioning.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当需要使用（甚至是未来可能需要使用）多云资源，并且希望加快操作速度时，Terraform表现更为出色。它的模块化设计促进了可重复模板的创建，加速了配置过程。此外，Terraform提供了CloudFormation没有的更广泛功能，这对更快的资源供应非常有帮助。
- en: What is best for you ultimately depends on your requirements. You should assess
    your application’s infrastructure strategy, security and compliance requirements,
    and cloud adoption strategy to make a final decision.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最适合您的工具最终取决于您的需求。您应评估应用程序的基础设施战略、安全性和合规性要求以及云采用战略，以做出最终决策。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter provided an overview of Terraform and its architecture and workflow,
    as well as a comparison between Terraform and CloudFormation. Terraform is a popular
    IaC tool that allows for safe and efficient management of infrastructure across
    multiple cloud providers. It relies on plugins called providers to interact with
    cloud providers, SaaS providers, and other APIs. Terraform uses modules to organize
    and encapsulate configurations into logical components, making it easier to navigate
    and understand complex configurations. Using modules can also provide consistency
    in your configurations and make them easier for other teams to use. Terraform
    uses resource blocks to manage infrastructure objects in your configuration, with
    most providers having several different resources that map to the appropriate
    APIs to manage that infrastructure type. The workflow of Terraform consists of
    five key steps: **Write**, **Init**, **Plan**, **Apply**, and **Destroy**.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了Terraform及其架构和工作流程，并对Terraform与CloudFormation进行了比较。Terraform是一个流行的IaC工具，可在多个云提供商之间安全高效地管理基础设施。它依赖名为“提供者”（providers）的插件与云提供商、SaaS提供商及其他API进行交互。Terraform使用模块将配置组织并封装成逻辑组件，使得浏览和理解复杂配置变得更加容易。使用模块还可以提供配置的一致性，并使其他团队更容易使用它们。Terraform使用资源块管理配置中的基础设施对象，大多数提供者都有多个不同的资源，这些资源映射到适当的API来管理该类型的基础设施。Terraform的工作流程包括五个关键步骤：**写（Write）**、**初始化（Init）**、**规划（Plan）**、**应用（Apply）**和**销毁（Destroy）**。
- en: The chapter also compared Terraform to AWS CloudFormation, which is limited
    to AWS services, whereas Terraform can span multiple cloud service providers.
    While CloudFormation simplifies the process of managing the life cycle of AWS
    resources and provides a simple way to create reusable templates, Terraform’s
    flexibility allows for a unified approach to managing cloud infrastructure across
    multiple providers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将 Terraform 与 AWS CloudFormation 进行比较，后者仅限于 AWS 服务，而 Terraform 可以跨多个云服务提供商。虽然
    CloudFormation 简化了管理 AWS 资源生命周期的过程，并提供了一种创建可重用模板的简单方式，但 Terraform 的灵活性使得能够统一管理多个提供商的云基础设施。
- en: Ultimately, the decision of whether to use Terraform or CloudFormation will
    depend on personal preference and requirements. Both tools offer unique benefits
    and features that can help organizations efficiently manage their cloud infrastructure.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，是否使用 Terraform 或 CloudFormation 的决定将取决于个人偏好和需求。这两种工具都提供了独特的优势和功能，能够帮助组织高效管理其云基础设施。
- en: In the upcoming chapter, we will delve into various key aspects of working with
    Terraform. Let’s start coding our first Terraform template.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将深入探讨使用 Terraform 的各个关键方面。让我们开始编写第一个 Terraform 模板。
