- en: Application Orchestration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序编排
- en: Application orchestration provides a few key features for the Puppet language.
    Application orchestration extends the concept of exported resources to a more
    targeted application, allowing the sharing of configuration items between nodes.
    Additionally, this feature provides a way to order Puppet runs to ensure that
    dependency nodes have finished building or converging prior to the nodes that
    require them. Application orchestration allows us to entangle multiple nodes together
    in an ordered run. Most importantly, configuration updates are not randomly applied
    on check-in, but are applied in a particular, ordered pattern.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编排为Puppet语言提供了几个关键特性。应用程序编排扩展了导出资源的概念，针对更具体的应用程序，允许节点之间共享配置项。此外，该特性还提供了一种方式，按顺序安排Puppet运行，确保依赖节点在需要它们的节点之前完成构建或汇聚。应用程序编排允许我们将多个节点按顺序组合在一起运行。最重要的是，配置更新不是在检查时随机应用的，而是按照特定的、顺序的模式应用的。
- en: Application Orchestration only works in Puppet Enterprise. Puppet open source
    users can use the language constructs, but ordered runs are provided by Puppet
    Enterprise.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编排仅适用于Puppet Enterprise。Puppet开源用户可以使用语言构造，但有序运行是Puppet Enterprise提供的。
- en: 'Application orchestration has three new language constructs we''ll need to
    use to create ordered runs that share information automatically with each other:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编排有三个新的语言构造，我们需要使用它们来创建有序运行，并自动共享彼此的信息：
- en: '**Application definitions**: An end-to-end description of a collection of components
    describing an entire application stack'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序定义**：描述整个应用程序堆栈的组件集合的端到端描述'
- en: '**Application components**: An individual component of an entire application
    stack'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序组件**：整个应用程序堆栈的单个组件'
- en: '**Service resources**: Resources designed to share information across application
    components'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务资源**：旨在跨应用程序组件共享信息的资源'
- en: Application definition
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序定义
- en: Application definitions look a lot like a defined resource, but are also similar
    to a traditional Puppet profile. They describe a collection of components that
    make an entire system, but unlike profiles, are not tied down to a single node.
    These application definitions describe a configured state of one or more nodes,
    broken down by application components.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序定义看起来很像定义的资源，但也类似于传统的Puppet配置文件。它们描述了一组组件，构成整个系统，但与配置文件不同，它们不局限于单一节点。这些应用程序定义描述了一个或多个节点的已配置状态，按应用程序组件拆分。
- en: 'Application definitions will resemble defined types, with a few key differences:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序定义将类似于定义类型，但有几个关键区别：
- en: They are titled `application` instead of `define`.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们被命名为`application`，而不是`define`。
- en: 'Each resource must be name spaced within the module:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个资源必须在模块内进行命名空间划分：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'What is important to note is that each resource in this application can be
    tied to an entirely different node with our site definition. We can also use our
    site definitions to pass in those shared configuration items, represented by `$var`
    in the preceding code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，应用程序中的每个资源都可以与我们网站定义中的一个完全不同的节点相关联。我们还可以使用我们的网站定义来传递这些共享的配置项，这些项在前面的代码中由`$var`表示：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Inside of the node's hash, notice that the `Node` object and `Example::App<X>`
    objects are capitalized.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在节点的哈希值中，注意到`Node`对象和`Example::App<X>`对象是大写的。
- en: Application components
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序组件
- en: Application components provide the individual pieces of the multi-node application.
    They are most often defined types (for reusability), but can also consist of classes
    or even native resources, such as files, in very simple cases. Application components
    are created by the `export`, `consume`, or `require` metaparameters that are used
    in an application declaration.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序组件提供了多节点应用程序的单个部分。它们通常是定义类型（以便重用），但在非常简单的情况下，也可以是类或甚至本地资源，例如文件。应用程序组件由`export`、`consume`或`require`元参数在应用程序声明中创建。
- en: 'Application components are written as general classes or defined types. They
    follow the same autoload format as all other Puppet code. The manifest for `example::app2`
    would still be located at `manifests/example/app2.pp`. Application components
    can explicitly list the values they export and consume in their individual manifests
    by placing an additional statement at the bottom of the manifests:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序组件写成通用类或定义类型。它们遵循与所有其他Puppet代码相同的自动加载格式。`example::app2`的清单仍然位于`manifests/example/app2.pp`。应用程序组件可以通过在清单底部添加一个额外的语句，显式列出它们在各自清单中导出和消费的值：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding sample, `$db_host` is a value that could be passed to any resource
    in the manifest. Rather than passing it via Hiera or Puppet DSL, we instead consume
    that value from the `host` parameter provided by another application. We also
    export the node's own FQDN and hostname, so that follow-on applications can use
    those values to point at the web service created by `example::app2`. `Database`
    and `Http` are both service resources, describing information that's shared between
    applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`$db_host`是一个可以传递给清单中任何资源的值。我们不是通过Hiera或Puppet DSL传递它，而是通过另一个应用程序提供的`host`参数来消费该值。我们还导出节点自身的FQDN和主机名，以便后续应用程序可以使用这些值指向由`example::app2`创建的Web服务。`Database`和`Http`都是服务资源，描述在应用程序之间共享的信息。
- en: Service resources
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务资源
- en: Service resources are environment-wide information pools filled and viewed by
    application components. Service resources work like exported resources, providing
    information about other nodes from PuppetDB. The uniqueness of service resources
    is found in their building of  dependencies between nodes. Service resources are
    declared as Puppet types, written in Ruby. Providers are optional, and allow for
    exported resource availability tests.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务资源是由应用组件填充和查看的环境范围信息池。服务资源类似于导出资源，提供关于PuppetDB中其他节点的信息。服务资源的独特之处在于它们建立节点之间的依赖关系。服务资源被声明为Puppet类型，用Ruby编写。提供程序是可选的，并允许进行导出资源的可用性测试。
- en: 'Service resource types provide a framework of information that can be stored
    and transported via application orchestration''s `consume` and `export` metaparameters.
    The type is required for a service resource, and declares the structure of the
    information using Ruby code. They are always stored in modules at `lib/puppet/type/<resource>.rb`,
    and will be sent to all nodes in an environment when deployed, but will not be
    actioned upon by nodes not using the resource. The following sample type could
    encompass the database resource exported by `app1` and consumed by `app2`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 服务资源类型提供了通过应用编排的`consume`和`export`元参数存储和传输信息的框架。服务资源需要一个类型，使用Ruby代码声明信息的结构。它们始终存储在模块中，路径为`lib/puppet/type/<resource>.rb`，并在部署时发送到环境中的所有节点，但未使用该资源的节点不会执行操作。以下示例类型可以包含由`app1`导出并由`app2`消费的数据库资源：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This simple example provides us with a way to export information about a database,
    specifically the `host` parameter. This can be filled with the `export` parameter,
    and read with the `consume` parameter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的示例为我们提供了一种导出关于数据库信息的方式，特别是`host`参数。这可以通过`export`参数填充，并通过`consume`参数读取。
- en: Modeling applications
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建模应用程序
- en: For the rest of this chapter, we'll be focusing on building a simple and a more
    complex example of an orchestrated application. Our first phase will be to create
    a single database and a single webserver.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将专注于构建一个简单和一个更复杂的编排应用程序示例。我们的第一阶段将是创建一个单一的数据库和一个单一的Web服务器。
- en: Application and database
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序和数据库
- en: In our first example, we'll export information from a database on one node,
    and retrieve it on a WordPress instance. This simple example will allow us to
    deploy nodes in pairs, and ensure that the database is built before the web application
    that relies on it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个示例中，我们将从一个节点的数据库导出信息，并在WordPress实例上检索它。这个简单的示例将允许我们成对部署节点，并确保在依赖于它的Web应用程序之前构建数据库。
- en: Dependencies
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖关系
- en: 'Before we begin writing our code, we''ll want to check the Forge for relevant
    supported or open source modules. WordPress requires an SQL server and a web host,
    which we''ll provide via Apache HTTPD. Before we begin, we''ll want to install
    the following modules from the Forge:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写代码之前，我们将查找Forge上的相关支持或开源模块。WordPress需要一个SQL服务器和一个Web主机，我们将通过Apache HTTPD提供。在开始之前，我们需要从Forge安装以下模块：
- en: '`puppetlabs-mysql`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppetlabs-mysql`'
- en: '`puppetlabs-apache`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppetlabs-apache`'
- en: '`hunner-wordpress`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hunner-wordpress`'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Build
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建
- en: We'll write our code from the top down. It helps to think about the end state
    of the code as we're learning it, and learn the pieces that enable it along the
    way.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从顶部开始编写代码。在学习代码的同时，想象代码的最终状态，并学习在此过程中启用它的各个部分是很有帮助的。
- en: Node declaration
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点声明
- en: 'Our first piece will be the node declaration. This will go in our `site.pp`,
    and each application will go under a specific site call. In the following sample,
    notice the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步将是节点声明。这将放在我们的`site.pp`中，每个应用程序将放在特定的站点调用下。在下面的示例中，请注意以下内容：
- en: All apps are declared in the top-level `site{}` declaration.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有应用都在顶级 `site{}` 声明中声明。
- en: '`myapp {''myapp'': }` is just one possible app that can go in `site.pp`. We
    could have another beneath it called `myapp.{''myapp2'': }` is inside of the site,
    and has a second standalone instance of this application.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myapp {''myapp'': }` 只是可以放入 `site.pp` 中的一种应用。我们还可以在它下面再添加一个，如 `myapp.{''myapp2'':
    }`，它位于站点中，并且拥有此应用的第二个独立实例。'
- en: '`Node[''<nodename>'']` and `Myapp::<app>` are capitalized.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Node[''<nodename>'']` 和 `Myapp::<app>` 是大写的。'
- en: 'I can still use the `site.pp` for other things, as indicated by the classification
    of the Puppet Master, as follows:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我仍然可以使用 `site.pp` 来处理其他事项，正如 Puppet Master 的分类所示，具体如下：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This particular configuration will ensure that the `mysql` node gets the database,
    `appserver` will get WordPress, and HAProxy will get the load balancer configuration.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定配置将确保 `mysql` 节点获取数据库，`appserver` 获取 WordPress，而 HAProxy 获取负载均衡器配置。
- en: Application declaration
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用声明
- en: 'In the previous example, we called a resource called `myapp` just under the
    `site{}` declaration. This manifest, located in the `myapp` module at `manifests/init.pp`,
    declares the application, describes some overridable parameters, and orchestrates
    applications using the `export` and `consume` metaparameters. Notice the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们在 `site{}` 声明下方调用了一个名为 `myapp` 的资源。此清单位于 `myapp` 模块中的 `manifests/init.pp`，声明了该应用，描述了一些可覆盖的参数，并使用
    `export` 和 `consume` 元参数来编排应用。请注意以下内容：
- en: On the first line, the application `myapp` is used in place of a class or define.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一行中，应用 `myapp` 被用作类或定义的替代。
- en: '`myapp::db` exports to the SQL resource.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myapp::db` 导出 SQL 资源。'
- en: '`myapp::web` consumes the SQL resource.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myapp::web` 消耗 SQL 资源。'
- en: '`myapp::db` will run before `myapp::web`, because `myapp::web` has a dependency
    via consume.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myapp::db` 会在 `myapp::web` 之前运行，因为 `myapp::web` 通过 consume 依赖于它。'
- en: 'We use the `$name` variable so that each component receives `myapp` as a name,
    taken from `myapp {''myapp'':}`:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `$name` 变量，以便每个组件接收 `myapp` 作为名称，该名称来自 `myapp {'myapp':}`。
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: DB service resource
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DB 服务资源
- en: 'We''ll build our own custom DB type for this simple use case. It will allow
    us to pass values from our database to our WordPress application. This simple
    example ensures that the type is named `db`, marks it as a service resource, and
    provides five available parameters to the database service resource. This file
    is placed in `lib/puppet/type/db.rb`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为这个简单的用例构建自己的自定义 DB 类型。它将允许我们从数据库向 WordPress 应用传递值。这个简单的示例确保类型命名为 `db`，并将其标记为服务资源，向数据库服务资源提供五个可用参数。此文件放置在
    `lib/puppet/type/db.rb` 中：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Application components
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用组件
- en: 'Our `myapp` defined type will make use of the `db` resource we created in the
    previous section, passing four values to PuppetDB, directly from `myapp::db`.
    We''ll use this manifest to build a MySQL server, and provide information to our
    WordPress instance on another node. Notice the following in the example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `myapp` 定义类型将利用我们在上一节创建的 `db` 资源，将四个值传递给 PuppetDB，直接从 `myapp::db` 中。我们将使用此清单来构建
    MySQL 服务器，并向另一个节点上的 WordPress 实例提供信息。请注意以下示例中的内容：
- en: A regular defined type, with standard Puppet DSL. We build a server and a database
    to support the app.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个常规的定义类型，使用标准的 Puppet DSL。我们构建了一个服务器和一个数据库来支持该应用。
- en: '`$host` is not used in the manifest, but is passed along to the produced `Db`
    resource.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$host` 在清单中没有使用，但会传递给产生的 `Db` 资源。'
- en: '`Myapp::Db produces Db` is placed directly after the define, in the same manifest:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Myapp::Db 产生 Db` 直接放置在定义之后，在同一个清单中：'
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Myapp::Web` is a defined type meant to consume the `Db` produced by `Myapp::Db`.
    It installs the required packages, installs Apache, builds a vhost, and deploys
    WordPress to the `docroot` of the vhost. Notice the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`Myapp::Web` 是一个定义类型，用于消耗由 `Myapp::Db` 产生的 `Db`。它安装所需的包，安装 Apache，构建 vhost，并将
    WordPress 部署到 vhost 的 `docroot`。请注意以下内容：'
- en: '`$vhost` and `$webpath` were provided by application `myapp`.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$vhost` 和 `$webpath` 是由应用 `myapp` 提供的。'
- en: '`$dbuser`, `$dbpass`, `$dbhost`, and `$dbname` are provided by the consumes
    `Db {}`.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$dbuser`、`$dbpass`、`$dbhost` 和 `$dbname` 由消耗 `Db {}` 提供。'
- en: 'Because our manifest uses the values `dbpass`, `dbhost`, `dbuser` and `dbname`,
    our mappings don''t need to be declared. The following example will directly declare
    variables:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为我们的清单使用了 `dbpass`、`dbhost`、`dbuser` 和 `dbname` 的值，我们的映射不需要再声明。以下示例将直接声明变量：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can use the preceding collection of code to order and deploy our multitier
    application. Our current module should resemble the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用前面的代码集合来排序和部署我们的多层应用程序。我们当前的模块应如下所示：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can then use the `puppet app` and `puppet job` commands to deploy our application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用`puppet app`和`puppet job`命令来部署我们的应用程序。
- en: Deploy
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: 'To view applications listed in our `site.pp`, we can use the command `puppet
    app show`. This command reads our main manifest, and lists all applications and
    their components. In the following example, from the preceding code, we''re deploying
    `Myapp::Db` to `mysql` and `Myapp::Web` to `appserver`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看列在`site.pp`中的应用程序，我们可以使用命令`puppet app show`。此命令读取我们的主清单，并列出所有应用程序及其组件。在以下示例中，从前面的代码来看，我们正在将`Myapp::Db`部署到`mysql`，并将`Myapp::Web`部署到`appserver`：
- en: 'You may receive a message when running this lab: *Application management is
    disabled. To enable it, set `app-management: true` in the orchestrator service
    config*. To fix this, you can log into the Puppet Enterprise console, enter the
    Puppet Master configuration and change the value of `puppet_enterprise::profile::master::app-management`
    to `true`.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '在运行此实验时，可能会收到一条消息：*应用程序管理已禁用。要启用它，请在 orchestrator 服务配置中设置`app-management: true`*。为了解决这个问题，你可以登录到
    Puppet Enterprise 控制台，进入 Puppet Master 配置，并将`puppet_enterprise::profile::master::app-management`的值更改为`true`。'
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To simulate a deployment, we can use the `puppet job plan` command. We give
    it both an `application` and `environment` flag to let application orchestrator
    know which version of `site.pp` to use. This command primarily shows ordering,
    and you can see in the following results that `mysql` will be configured before
    `appserver`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟部署，我们可以使用`puppet job plan`命令。我们为它提供`application`和`environment`标志，以便应用程序协调器知道使用哪个版本的`site.pp`。此命令主要显示排序，你可以从以下结果中看到，`mysql`将在`appserver`之前进行配置：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By switching from `puppet job plan` to `puppet job show`, we actually deploy
    our code in an ordered fashion. The run first takes place on the `mysql` server,
    which produces information that will be consumed by the `appserver` node. This
    run ensures that the necessary components are fully deployed before attempting
    to deploy applications that depend on them:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从`puppet job plan`切换到`puppet job show`，我们实际上是按顺序部署我们的代码。运行首先发生在`mysql`服务器上，产生的信息将被`appserver`节点使用。此运行确保在尝试部署依赖于它们的应用程序之前，必要的组件已完全部署：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We've now deployed a very simple ordered application. Our database will be fully
    up and running before the configuration of our `wordpress` server. In the next
    example, we'll allow for multiple `wordpress` servers and multiple load balancers
    to provide scaling to our application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经部署了一个非常简单的有序应用程序。在配置我们的`wordpress`服务器之前，数据库将完全启动。在下一个示例中，我们将允许多个`wordpress`服务器和多个负载均衡器来为我们的应用程序提供扩展。
- en: Adding a load balancer and providing horizontal scaling
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加负载均衡器并提供水平扩展
- en: In many cases, we want our applications to scale horizontally. Building more
    nodes allows us to serve more customers. This will be a complete rewrite of the
    previous application, also incorporating `puppetlabs/app_modeling` from the Forge.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们希望我们的应用程序能够水平扩展。构建更多的节点可以让我们为更多的客户提供服务。这将是对之前应用程序的完全重写，并且还将整合`puppetlabs/app_modeling`模块来自Forge。
- en: Dependencies
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项
- en: 'To provide new capabilities, we''ll need to grab the `puppetlabs-haproxy` module
    and the `puppetlabs/app_modeling` module from the Forge. If you''re using a `Puppetfile`,
    simply add them to the `Puppetfile`. In the following example, I am manually installing
    these dependencies on an existing master:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供新的功能，我们需要从 Forge 获取`puppetlabs-haproxy`模块和`puppetlabs/app_modeling`模块。如果你正在使用`Puppetfile`，只需将它们添加到`Puppetfile`中。在以下示例中，我正在手动安装这些依赖项到现有的主服务器上：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We now have the capability to build `haproxy` nodes and new app orchestration
    features via `app_modeling`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过`app_modeling`构建`haproxy`节点和新的应用程序编排功能。
- en: Build
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建
- en: 'We''ll begin at the `site.pp` again, and model our application from the endpoint.
    I have added two additional service lines that ensure that firewalls are disabled
    for the purpose of this lesson. We could consider using `puppetlabs/firewall`
    to manage our firewall as well, and even produce and consume FQDNs for our firewall.
    In the following sample, you will notice a few things:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`site.pp`开始，再次从端点建模我们的应用程序。我添加了两条额外的服务行，确保为了本节课的目的防火墙被禁用。我们还可以考虑使用`puppetlabs/firewall`来管理我们的防火墙，并为防火墙生成和使用FQDN。在以下示例中，你会注意到一些事情：
- en: We're passing a `dbpass` variable to the application. This could be stored in
    Hiera and encrypted with EYAML.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`dbpass`变量传递给应用程序。这个变量可以存储在Hiera中，并通过EYAML加密。
- en: 'We have two `wordpress` nodes and two `haproxy` nodes that each have their
    own unique name in the `appserver`:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有两个`wordpress`节点和两个`haproxy`节点，它们在`appserver`中都有各自独特的名称。
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After our application is declared, we can model our `init.pp` to declare the
    entire application. There is a lot going on in this application, so note the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明应用程序后，我们可以建模我们的`init.pp`来声明整个应用程序。这个应用程序包含了很多内容，因此请注意以下几点：
- en: Five variables are made available, and the `db` variables are used in both the
    `DB` and the `App`.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了五个变量，`db`变量在`DB`和`App`中都被使用。
- en: '`Myapp::Db` produces a database.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Myapp::Db`生成一个数据库。'
- en: '`Myapp::Web` consumes a database and produces an HTTP service resource.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Myapp::Web`消耗一个数据库并生成一个HTTP服务资源。'
- en: We use the `collect_component_titles` function from `puppetlabs/app_modeling`
    to provide an array that we can iterate over. We're collecting the nodes via `$nodes`
    that are attached to `Myapp::Web` and `Myapp::Lb`. These values are named `allwebs`
    and `alllbs`.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用来自`puppetlabs/app_modeling`的`collect_component_titles`函数提供一个我们可以迭代的数组。我们通过`$nodes`收集附加到`Myapp::Web`和`Myapp::Lb`的节点。这些值被命名为`allwebs`和`alllbs`。
- en: We use a map function from `puppetlabs/stdlib` against `$allwebs`. In this map
    function, we turn each node name into the value `Http["web-${wordpress_name}"]`,
    where `$wordpress_name` is the name of each node attached to the `Myapp::Web`
    application. We use this value as our export on each `MyApp::Web` declaration.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用来自`puppetlabs/stdlib`的`map`函数操作`$allwebs`。在这个`map`函数中，我们将每个节点名称转化为`Http["web-${wordpress_name}"]`的值，其中`$wordpress_name`是附加到`Myapp::Web`应用程序的每个节点的名称。我们将这个值作为每个`MyApp::Web`声明的导出。
- en: We provide the value of `$http (Http["web-${wordpress_name}"])` back to the
    array of `$https`, so that we can use these values on the load balancer.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`$http (Http["web-${wordpress_name}"])`的值返回给`$https`数组，以便我们可以在负载均衡器上使用这些值。
- en: 'Our load balancer uses an each statement in place of a map statement, because
    we don''t need to transform any of this data:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的负载均衡器使用`each`语句代替`map`语句，因为我们不需要转换任何数据：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Our `myapp::db` produces a MySQL server, and a single database meant to serve
    our application. We use the values of `dbuser`, `dbpass`, and `dbname` from our
    application at `init.pp`. Pay special attention to the produces line, using the
    `app_modeling` service resource for databases at the bottom of the manifest:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`myapp::db`生成一个MySQL服务器，并创建一个数据库来为我们的应用程序提供服务。我们在`init.pp`中使用`dbuser`、`dbpass`和`dbname`的值。请特别注意生成行，使用`app_modeling`服务资源来生成清单底部的数据库：
- en: Produces a host from the FQDN of the machine to be consumed by the web application.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个主机，从将被Web应用程序消耗的机器的FQDN中提取。
- en: 'Produces a port which is not used by our web manifest, but provides an availability
    test to our application orchestration nodes. The application orchestration for
    the web will not trigger until the node can reach a database at the FQDN on port
    `3306`. Without this declaration, it will default to `5432`, which is the default
    port of a postgres server:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个端口，虽然我们的Web清单中不使用该端口，但它提供了一个可用性测试，用于我们的应用程序编排节点。在能够通过FQDN上的端口`3306`连接到数据库之前，Web的应用程序编排不会触发。如果没有这个声明，它将默认为`5432`，这是Postgres服务器的默认端口：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our `Myapp::Web` call will make use of five variables from our initial application,
    but receive its database host from the consumed resources. Pay attention to the
    following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Myapp::Web`调用将使用来自初始应用程序的五个变量，但从所消耗的资源中接收数据库主机。请注意以下几点：
- en: The value for `$dbhost` is filled by consuming the database. At the bottom,
    we explicitly map the value of `$dbhost` to the consumed `$host` value in the
    `Myapp::Web` consumes `Myapp::Db`.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$dbhost`的值由消耗的数据库填充。在底部，我们明确地将`$dbhost`的值映射到`Myapp::Web`消耗的`$host`值，并将其传递给`Myapp::Db`。'
- en: We pass `$dbhost`, provided by the consume to class `wordpress`, providing an
    automatic connection to a remote DB.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将由消费提供的`$dbhost`传递给`wordpress`类，实现与远程数据库的自动连接。
- en: '`Myapp::Web` produces an HTTP resource that provides host, port, IP, and status
    codes. We''ll use the host, port, and IP for our load balancer, but the `status_codes`
    is another availability test to ensure that the website served by the `haproxy`
    is up with a status code of `302` or `200`:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Myapp::Web`生成一个HTTP资源，提供主机、端口、IP和状态码。我们将使用主机、端口和IP为我们的负载均衡器提供服务，而`status_codes`则是另一个可用性测试，以确保由`haproxy`提供服务的网站状态码为`302`或`200`：'
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`Myapp::Lb` doesn''t actually consume or export any resources. We build a `haproxy::listen`
    service, and then for every `balancermember`, we import the aforementioned values.
    In our application declaration, we ran each statement against every member of
    the `$https` array, and the following code transforms that data into a relevant
    load balancer. We take the host, port, and IP produced from every `myapp::web`,
    and add it as a member to our `haproxy::listen`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`Myapp::Lb` 实际上并不会消费或导出任何资源。我们构建了一个`haproxy::listen`服务，然后对于每个`balancermember`，我们导入了上述的值。在我们的应用声明中，我们将每个语句应用于`$https`数组中的每个成员，以下代码将这些数据转化为相关的负载均衡器。我们从每个`myapp::web`中获取主机、端口和
    IP，并将其作为成员添加到我们的`haproxy::listen`中：'
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Deploy
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: 'Deploying our new applications uses the same commands as before. We''ll use `puppet
    app show` to provide a list of nodes with ordering. You''ll see that our single
    DB produces a database; each webapp uses that database and produces an HTTP service
    resource, which is finally consumed by each load balancer:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 部署我们的新应用程序使用与之前相同的命令。我们将使用`puppet app show`来提供带排序的节点列表。你会看到，我们的单个数据库会产生一个数据库；每个
    webapp 使用该数据库并生成一个 HTTP 服务资源，最终被每个负载均衡器使用：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Before we launch our application, we can run a `puppet job plan` to get an
    idea of what ordering will look like during our run:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们启动应用程序之前，我们可以运行一个`puppet job plan`来了解运行过程中排序的情况：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we run our application and see MySQL configured first, then our `wordpress`
    instances, followed by the load balancers. Thanks to the service resources provided
    by `puppetlabs/app_modeling`, we also know that our database is actively seen
    before the `wordpress` servers, and that our `wordpress` servers are producing
    302 status codes prior to the load balancers being configured:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们运行我们的应用程序，看到 MySQL 被先配置，然后是我们的`wordpress`实例，接着是负载均衡器。感谢`puppetlabs/app_modeling`提供的服务资源，我们也知道，在`wordpress`服务器之前，数据库已经被主动访问，而且我们的`wordpress`服务器在负载均衡器配置之前会产生
    302 状态码：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to order our applications using application
    orchestration. This builds upon the fundamental knowledge we learned when writing
    Puppet code, and even when using exported resources. As we build more applications
    and objects to configure, we'll need to make sure that our Puppet Master is available
    to service all these nodes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用应用程序编排来排序我们的应用程序。这建立在我们编写 Puppet 代码时学到的基础知识上，甚至在使用导出资源时也是如此。当我们构建更多应用程序和对象进行配置时，我们需要确保我们的
    Puppet Master 能够为所有这些节点提供服务。
- en: In the next chapter, we'll discuss scaling Puppet Enterprise both horizontally
    and vertically.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何水平和垂直扩展 Puppet Enterprise。
