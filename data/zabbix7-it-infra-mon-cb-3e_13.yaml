- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Bringing Zabbix to the Cloud with Zabbix Cloud Integration
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Zabbix 引入云端与 Zabbix 云集成
- en: For the last chapter, we have prepared something special. As a long-time Zabbix
    user, the importance of cloud integration for tools such as Zabbix has not gone
    unnoticed. For some people, the cloud can be daunting, and thus with this chapter,
    I want to show you just how easy it can be to start working with the most popular
    cloud providers and Zabbix.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，我们为你准备了一些特别的内容。作为一个长期使用 Zabbix 的用户，云集成对于像 Zabbix 这样的工具的重要性不言而喻。对于某些人来说，云可能会让人感到畏惧，因此在这一章中，我想向你展示，如何开始使用最流行的云服务提供商与
    Zabbix 配合工作是多么简单。
- en: We are going to start by talking about monitoring the **Amazon Web Services**
    (**AWS**) cloud with Zabbix. Then we will also see how the same things are done
    using Microsoft Azure so we can clearly see the differences.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先讨论如何使用 Zabbix 监控 **亚马逊 Web 服务** (**AWS**) 云。然后，我们还将看到如何使用 Microsoft Azure
    来完成相同的操作，以便清晰地看到它们之间的差异。
- en: 'After going through these cloud products, we’ll also check out container monitoring
    with Docker, a very popular product that can also benefit greatly from setting
    up Zabbix monitoring. Follow these recipes closely and you will be able to monitor
    all of these products easily and work to extend the products using Zabbix. This
    chapter comprises the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了这些云产品之后，我们还将查看使用 Docker 进行容器监控，Docker 是一个非常流行的产品，通过设置 Zabbix 监控，它也能受益匪浅。请仔细跟随这些食谱，你将能够轻松监控所有这些产品，并利用
    Zabbix 扩展这些产品。本章包括以下食谱：
- en: Setting up AWS monitoring
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 AWS 监控
- en: Setting up Microsoft Azure monitoring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Microsoft Azure 监控
- en: Building your Zabbix Docker monitoring
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建你的 Zabbix Docker 监控
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As this chapter focuses on AWS, Microsoft Azure, and Docker monitoring, we are
    going to need a working AWS, Microsoft Azure, or Docker setup. The recipe does
    not cover how to set these up, so make sure to have your own infrastructure at
    the ready.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章关注 AWS、Microsoft Azure 和 Docker 监控，我们需要一个正在运行的 AWS、Microsoft Azure 或 Docker
    设置。食谱并未覆盖如何设置这些，因此请确保你已经准备好自己的基础设施。
- en: Furthermore, we are going to need our Zabbix server running Zabbix 7\. We will
    call this server `lar-book-rocky` in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要运行 Zabbix 7 的 Zabbix 服务器。在本章中，我们将称这个服务器为 `lar-book-rocky`。
- en: 'You can download the code files for this chapter from the following GitHub
    link: [https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter13](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter13).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从以下 GitHub 链接下载本章的代码文件：[https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter13](https://github.com/PacktPublishing/Zabbix-7-IT-Infrastructure-Monitoring-Cookbook/tree/main/chapter13)。
- en: Setting up AWS monitoring
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 AWS 监控
- en: A lot of infrastructure is moving toward the cloud these days, and it’s important
    to keep an eye on this infrastructure as much as you would if it were your own
    hardware. In this recipe, we are going to discover how to monitor EC2 instances,
    **Relational Database Service** (**RDS**) instances, and **S3 buckets** with our
    Zabbix setup.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，许多基础设施都在向云端迁移，重要的是要像管理自己的硬件一样监控这些基础设施。在本食谱中，我们将学习如何使用 Zabbix 监控 EC2 实例、**关系型数据库服务**
    (**RDS**) 实例和 **S3 存储桶**。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we are going to need our AWS cloud with at least one of the
    following three resources:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们需要在我们的 AWS 云中至少拥有以下三种资源中的一种：
- en: EC2 instances
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2 实例
- en: RDS instances
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RDS 实例
- en: S3 buckets
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3 存储桶
- en: Of course, we will also need our Zabbix server, which we’ll call `lar-book-rocky`
    in this recipe.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还需要我们的 Zabbix 服务器，我们将在本食谱中称之为 `lar-book-rocky`。
- en: Important note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Using Amazon CloudWatch is not free, so you will incur costs. Make sure you
    check out the Amazon pricing for AWS CloudWatch before proceeding: [https://aws.amazon.com/cloudwatch/pricing/](https://aws.amazon.com/cloudwatch/pricing/).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Amazon CloudWatch 并不是免费的，因此你会产生费用。请在继续之前查看 Amazon AWS CloudWatch 的定价：[https://aws.amazon.com/cloudwatch/pricing/](https://aws.amazon.com/cloudwatch/pricing/)。
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Setting up AWS monitoring might seem like a daunting task at first, but once
    we get the hang of the technique, it’s not that difficult. Let’s waste no more
    time and check out one of the methods we could use:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 AWS 监控一开始可能看起来是一项艰巨的任务，但一旦我们掌握了技巧，它其实并不难。让我们不再浪费时间，来看看我们可以使用的一种方法：
- en: Let’s start by logging in to our Zabbix server with the hostname **lar-book-rocky**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从登录到我们的 Zabbix 服务器 **lar-book-rocky** 开始。
- en: 'Log in to your AWS account by navigating to the following URL in your browser:
    [https://aws.amazon.com/](https://aws.amazon.com/).'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在浏览器中导航到以下 URL，登录到你的 AWS 账户：[https://aws.amazon.com/](https://aws.amazon.com/)。
- en: On this page, click on **Sign In to** **the Console**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页面上，点击**登录到控制台**。
- en: 'Once logged in, we can navigate to **My Security Credentials**, which should
    be listed in your user profile in the top-right corner:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，我们可以导航到**我的安全凭证**，它应该会显示在用户资料的右上角：
- en: '![Figure 13.1 – AWS web frontend user profile](img/B19803_13_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1 – AWS 网络前端用户资料](img/B19803_13_01.jpg)'
- en: Figure 13.1 – AWS web frontend user profile
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – AWS 网络前端用户资料
- en: On the next page, on the left-hand side, click on **Users** under **Access management**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页的左侧，点击**访问管理**下的**用户**。
- en: Let’s create a new dedicated Zabbix monitoring user by clicking on the **Add
    users** button. Add the user as follows.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过点击**添加用户**按钮来创建一个新的专用 Zabbix 监控用户。按如下方式添加用户。
- en: '![Figure 13.2 – AWS new user](img/B19803_13_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2 – AWS 新用户](img/B19803_13_02.jpg)'
- en: Figure 13.2 – AWS new user
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – AWS 新用户
- en: Click on **Next**, and at the second step, if you’d like, you can add the user
    to a group to inherit some permissions, copy them, or set up a custom policy.
    I’ll skip this step for now by clicking **Next** again.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，在第二步，如果你愿意，可以将用户添加到一个组中，以继承某些权限，复制它们，或设置自定义策略。我现在跳过这一步，再次点击**下一步**。
- en: Now click on **Create** to finish setting up this user.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**创建**完成该用户的设置。
- en: 'Select the user from the list to edit it:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择用户以编辑：
- en: '![Figure 13.3 – AWS – edit new Zabbix user](img/B19803_13_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.3 – AWS – 编辑新 Zabbix 用户](img/B19803_13_03.jpg)'
- en: Figure 13.3 – AWS – edit new Zabbix user
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – AWS – 编辑新 Zabbix 用户
- en: In the list, we can see there are no policies assigned to this user yet, so
    let’s create a new policy just for Zabbix monitoring.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表中，我们看到该用户还没有分配任何策略，因此我们将为 Zabbix 监控创建一个新的策略。
- en: 'Click on **Create inline policy** from the drop-down list:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中点击**创建内联策略**：
- en: '![Figure 13.4 – AWS – edit new Zabbix user policies](img/B19803_13_04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.4 – AWS – 编辑新 Zabbix 用户策略](img/B19803_13_04.jpg)'
- en: Figure 13.4 – AWS – edit new Zabbix user policies
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4 – AWS – 编辑新 Zabbix 用户策略
- en: 'Then click on **JSON** to define the new policy in the JSON format. It should
    look like the following screenshot:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击**JSON**，以 JSON 格式定义新的策略。它应如下图所示：
- en: '![Figure 13.5 – AWS – edit new Zabbix user – add new policy](img/B19803_13_05.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.5 – AWS – 编辑新 Zabbix 用户 – 添加新策略](img/B19803_13_05.jpg)'
- en: Figure 13.5 – AWS – edit new Zabbix user – add new policy
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5 – AWS – 编辑新 Zabbix 用户 – 添加新策略
- en: Tip
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'Check out Zabbix’s integrations page for the latest required permissions for
    the AWS template you’ll be using. Different templates need different permissions,
    and new permissions might be added later to incorporate new features or changes
    on the AWS side: [https://www.zabbix.com/integrations/aws](https://www.zabbix.com/integrations/aws).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 Zabbix 的集成页面，了解你将使用的 AWS 模板所需的最新权限。不同的模板需要不同的权限，未来可能会添加新的权限，以便融入新的功能或 AWS
    方面的变更：[https://www.zabbix.com/integrations/aws](https://www.zabbix.com/integrations/aws)。
- en: You can now click on **Next** and name your policy.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击**下一步**并为你的策略命名。
- en: '![Figure 13.6 – AWS – edit new Zabbix user – add new policy name](img/B19803_13_06.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.6 – AWS – 编辑新 Zabbix 用户 – 添加新策略名称](img/B19803_13_06.jpg)'
- en: Figure 13.6 – AWS – edit new Zabbix user – add new policy name
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.6 – AWS – 编辑新 Zabbix 用户 – 添加新策略名称
- en: Then, click on **Create policy** at the bottom of the page.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击页面底部的**创建策略**。
- en: With the permissions out of the way, let’s make sure we will be able to authenticate
    with this user account.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在权限设置好后，确保我们能够使用此用户账户进行身份验证。
- en: 'Still on the same page after creating the new policy, scroll down to **Access
    keys (access key ID and secret access key)** for this new user. This will show
    you the following:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建新策略后，仍停留在同一页面，向下滚动至**访问密钥（访问密钥 ID 和秘密访问密钥）**，这将显示如下内容：
- en: '![Figure 13.7 – AWS access keys page](img/B19803_13_07.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.7 – AWS 访问密钥页面](img/B19803_13_07.jpg)'
- en: Figure 13.7 – AWS access keys page
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.7 – AWS 访问密钥页面
- en: 'Click on **Create access key** to create a new access key. You should see the
    following:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建访问密钥**以创建新的访问密钥。你应该看到如下内容：
- en: "![Figure 13.8 – AWS access key creati\uFEFFon](img/B19803_13_08.jpg)"
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.8 – AWS 访问密钥创建](img/B19803_13_08.jpg)'
- en: Figure 13.8 – AWS access key creation
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.8 – AWS 访问密钥创建
- en: Select a reason and click on **Next**. Make sure you understand the possible
    security implications.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个理由并点击**下一步**。确保你理解可能的安全隐患。
- en: 'Name your new access key:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给您的新访问密钥命名：
- en: '![Figure 13.9 – AWS access key creation naming](img/B19803_13_09.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.9 – AWS 访问密钥创建命名](img/B19803_13_09.jpg)'
- en: Figure 13.9 – AWS access key creation naming
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9 – AWS 访问密钥创建命名
- en: 'Lastly, click on **Create access key** and store the access key and secret
    access key somewhere safe (such as a password vault). After you’ve done that,
    click on **Done**:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击 **创建访问密钥** 并将访问密钥和秘密访问密钥存放在安全位置（例如密码保险箱）。完成后，点击 **完成**：
- en: '![Figure 13.10 – AWS access key creation – copy keys](img/B19803_13_10.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.10 – AWS 访问密钥创建 – 复制密钥](img/B19803_13_10.jpg)'
- en: Figure 13.10 – AWS access key creation – copy keys
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10 – AWS 访问密钥创建 – 复制密钥
- en: Now, let’s finally move on to Zabbix. Log in to your Zabbix GUI and navigate
    to **Data collection** | **Hosts**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们最终转向 Zabbix。登录到您的 Zabbix GUI 并导航到 **数据收集** | **主机**。
- en: Create a new host by clicking on **Create host** in the top-right corner. We’ll
    create a new host called **lar-book-aws** and add the **AWS by HTTP** template
    and a host group such as **Cloud**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击右上角的 **创建主机** 来创建一个新主机。我们将创建一个名为 **lar-book-aws** 的新主机，并添加 **AWS by HTTP**
    模板和一个主机组，比如 **云**。
- en: '![Figure 13.11 – New AWS host](img/B19803_13_11.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.11 – 新的 AWS 主机](img/B19803_13_11.jpg)'
- en: Figure 13.11 – New AWS host
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11 – 新的 AWS 主机
- en: Before adding the host, make sure to go to **Macros**. We have to fill in a
    few macros to make this new template work. Make sure to fill out the keys you
    saved in *step 19* and fill them in as in the following screenshot. Also, make
    sure to add the region in which you want to discover your information.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加主机之前，请确保转到 **宏变量**。我们必须填写几个宏变量，以使这个新模板生效。确保填写您在 *第 19 步* 保存的键，并按照以下截图中的方式填写它们。同时，请确保添加您希望发现信息的区域。
- en: '![Figure 13.12 – New AWS host macros](img/B19803_13_12.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.12 – 新的 AWS 主机宏变量](img/B19803_13_12.jpg)'
- en: Figure 13.12 – New AWS host macros
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12 – 新的 AWS 主机宏变量
- en: Important note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In my case, all of the AWS resources I am running are within the same AWS regions.
    In a lot of production environments, this isn’t the case. For those environments,
    you might want to create a Zabbix host per region to be able to discover all of
    your resources. All you have to do is define the **{$AWS.REGION}** macro uniquely
    per host.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我运行的所有 AWS 资源都位于同一个 AWS 区域。在许多生产环境中，情况并非如此。对于这些环境，您可能希望为每个区域创建一个 Zabbix
    主机，以便发现所有资源。您所需做的就是为每个主机独特地定义 **{$AWS.REGION}** 宏。
- en: Now click on **Add** to add this new host.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击 **添加** 以添加这个新主机。
- en: 'If done correctly, your AWS resources will be added once the discovery rule
    has been executed, as we can see in the following screenshot for some of my EC2
    instances:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果操作正确，一旦执行了发现规则，您的 AWS 资源将被添加，就像我们在下面的截图中看到的一样，显示了一些我的 EC2 实例：
- en: "![Figure 13.13 – Discovered EC2 instances\uFEFF\uFEFF](img/B19803_13_13.jpg)"
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.13 – 发现的 EC2 实例](img/B19803_13_13.jpg)'
- en: Figure 13.13 – Discovered EC2 instances
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13 – 发现的 EC2 实例
- en: How it works…
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Now that we’ve done all the setup work, let’s have a look at what we have actually
    done. Zabbix 7.0 contains out-of-the-box cloud monitoring templates, which we’ve
    utilized to monitor some of the most common AWS resources.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有的设置工作，让我们看看我们实际上做了什么。Zabbix 7.0 包含了开箱即用的云监控模板，我们已经利用这些模板来监控一些常见的
    AWS 资源。
- en: The templates provided by Zabbix use a fairly extensive piece of JavaScript
    code to execute API calls toward AWS, parse through the received data, and then
    put that into a JSON array that Zabbix’s low-level discovery understands.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 提供的模板使用了相当广泛的 JavaScript 代码来执行针对 AWS 的 API 调用，解析接收到的数据，然后将其放入 Zabbix
    的低级发现理解的 JSON 数组中。
- en: 'Looking at the template at **Data collection** | **Templates** and then opening
    **Discovery** for the **AWS by HTTP** template, we can see three discovery rules:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 **数据收集** | **模板** 下的模板，然后打开 **发现**，查看 **AWS by HTTP** 模板，我们可以看到三个发现规则：
- en: '![Figure 13.14 – AWS by HTTP discovery rules](img/B19803_13_14.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.14 – AWS by HTTP 发现规则](img/B19803_13_14.jpg)'
- en: Figure 13.14 – AWS by HTTP discovery rules
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.14 – AWS by HTTP 发现规则
- en: 'These three rules discover the EC2 instances, RDS instances, and S3 buckets
    in AWS and use **Host prototypes** to create a new host for each instance or bucket
    found. Those created hosts will then in turn use their own templates to get the
    actual statistics from those instances or buckets, as we can see in the template
    list:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个规则发现了 AWS 中的 EC2 实例、RDS 实例和 S3 存储桶，并使用 **主机原型** 为每个实例或存储桶创建了一个新主机。这些创建的主机然后会使用它们自己的模板从这些实例或存储桶获取实际的统计信息，正如我们在模板列表中所见：
- en: '![Figure 13.15 – The other three AWS templates in Zabbix 7.0](img/B19803_13_15.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.15 – Zabbix 7.0 中其他三个 AWS 模板](img/B19803_13_15.jpg)'
- en: Figure 13.15 – The other three AWS templates in Zabbix 7.0
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.15 – Zabbix 7.0 中其他三个 AWS 模板
- en: In my case, only two EC2 instances were discovered, and as such, those two hosts
    were added with the **AWS EC2 by HTTP** template, as seen in *Figure 13**.13*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的案例中，只发现了两个 EC2 实例，因此，这两个主机通过**AWS EC2 by HTTP**模板添加，正如在*图 13.13*中所见。
- en: 'All of the information is then collected by **Script** item types with their
    own unique JavaScript code. We can see a piece of the code in the following screenshot,
    where we make a call to AWS to a specific URL (underlined) with headers for things
    such as authentication:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所有信息随后会通过**脚本**项目类型收集，并且每个项目都有自己独特的 JavaScript 代码。我们可以在以下截图中看到代码的一部分，其中我们向 AWS
    发起请求到一个特定的 URL（下划线部分），并且添加了诸如身份验证等标头：
- en: '![Figure 13.16 – AWS template call](img/B19803_13_16.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.16 – AWS 模板调用](img/B19803_13_16.jpg)'
- en: Figure 13.16 – AWS template call
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.16 – AWS 模板调用
- en: It is also possible to edit this JavaScript code to create entirely new calls
    to retrieve your own data and create different types of monitoring, as well as
    simply extending the out-of-the-box templates.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以编辑此 JavaScript 代码，以创建全新的调用来获取您自己的数据并创建不同类型的监控，或只是扩展现成的模板。
- en: There’s more…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: It takes time to start monitoring with AWS CloudWatch as we need a good understanding
    of the AWS CLI commands with the use of CloudWatch. When you use the templates
    provided by Zabbix as a basis, you have a solid foundation on which to build.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 AWS CloudWatch 监控需要时间，因为我们需要对 AWS CLI 命令和 CloudWatch 的使用有深入了解。当您使用 Zabbix
    提供的模板作为基础时，您就有了一个坚实的基础，可以继续构建。
- en: 'Make sure to check out the AWS documentation for more information on the commands
    that we can use, using the following link:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 确保查看 AWS 文档，获取更多有关我们可以使用的命令的信息，使用以下链接：
- en: '[https://docs.aws.amazon.com/cli/latest/reference/#available-services](https://docs.aws.amazon.com/cli/latest/reference/#available-services)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/cli/latest/reference/#available-services](https://docs.aws.amazon.com/cli/latest/reference/#available-services)'
- en: Setting up Microsoft Azure monitoring
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Microsoft Azure 监控
- en: The Microsoft Azure cloud is a big player in the cloud market these days and
    it’s important to keep an eye on this infrastructure as much as you would your
    own hardware. In this recipe, we are going to discover how to monitor Azure instances
    with our Zabbix setup.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 云是当前云市场中的重要玩家，因此保持对该基础设施的关注与对自己硬件的关注一样重要。在本方案中，我们将探索如何使用 Zabbix
    设置监控 Azure 实例。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we are going to need our Azure cloud with at least one of the
    following resources in it already.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个方案，我们需要在 Azure 云中至少已经具备以下其中一项资源。
- en: Cosmos DB for MongoDB databases
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cosmos DB 用于 MongoDB 数据库
- en: Microsoft SQL databases
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL 数据库
- en: MySQL servers
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 服务器
- en: PostgreSQL servers
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 服务器
- en: Virtual machines
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机
- en: The recipe does not cover how to set up any of these resources, so make sure
    to do this in advance. We will also need our Zabbix server, which we’ll call `lar-book-rocky`
    in this recipe.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本方案不涵盖如何设置这些资源，所以请确保提前完成这部分工作。我们还需要 Zabbix 服务器，在本方案中我们称其为 `lar-book-rocky`。
- en: How to do it…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'For Azure monitoring, we face some of the same techniques as we do for AWS
    monitoring. It can become a bit daunting if we dive into customization, but setting
    up the initial monitoring is a lot easier than it looks. Let’s check it out:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Azure 监控，我们面临的技术与 AWS 监控有一些相似之处。如果深入定制，可能会有些令人畏惧，但设置初始监控比看起来要简单得多。让我们来看看：
- en: With Azure monitoring, first we are going to need to set up our authentication
    correctly. To do so, navigate to [portal.azure.com](http://portal.azure.com) and
    log in.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Azure 监控时，首先我们需要正确设置身份验证。为此，请导航到 [portal.azure.com](http://portal.azure.com)
    并登录。
- en: 'In the search bar, search for **Enterprise applications** and select it from
    the list. Click on **New application**:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中，搜索**企业应用程序**并从列表中选择。点击**新建应用程序**：
- en: '![Figure 13.17 – Azure enterprise application creation](img/B19803_13_17.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.17 – Azure 企业应用程序创建](img/B19803_13_17.jpg)'
- en: Figure 13.17 – Azure enterprise application creation
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.17 – Azure 企业应用程序创建
- en: 'Then click on **Create your** **own application**:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击**创建您自己的** **应用程序**：
- en: '![Figure 13.18 – Azure enterprise application creation – creating your own
    application](img/B19803_13_18.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.18 – Azure 企业应用程序创建 – 创建您自己的应用程序](img/B19803_13_18.jpg)'
- en: Figure 13.18 – Azure enterprise application creation – creating your own application
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.18 – Azure 企业应用程序创建 – 创建你自己的应用程序
- en: 'This is where we have to name our application. Name it something appropriate,
    as seen in the following screenshot:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是我们需要为应用程序命名的地方。为它起一个合适的名字，如下图所示：
- en: '![Figure 13.19 – Azure enterprise application creation – setting the name of
    your application](img/B19803_13_19.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.19 – Azure 企业应用程序创建 – 设置应用程序名称](img/B19803_13_19.jpg)'
- en: Figure 13.19 – Azure enterprise application creation – setting the name of your
    application
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.19 – Azure 企业应用程序创建 – 设置应用程序名称
- en: 'Then click **Create** at the bottom of the page to finish creating a new empty
    application. It will show you the application ID on this page. Make sure to write
    it down as we will need it later:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击页面底部的**创建**按钮，完成新空应用程序的创建。页面上会显示应用程序 ID，请务必记录下来，稍后我们会用到它：
- en: '![Figure 13.20 – Azure enterprise application overview page](img/B19803_13_20.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.20 – Azure 企业应用程序概览页](img/B19803_13_20.jpg)'
- en: Figure 13.20 – Azure enterprise application overview page
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.20 – Azure 企业应用程序概览页
- en: With the application created, let’s immediately dive into setting up the credentials
    for it. To do so, use the Azure search bar at the top and search for **Azure Active
    Directory**, then select it from the list.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序创建完成后，我们立即开始为它设置凭据。为此，使用页面顶部的 Azure 搜索栏，搜索**Azure Active Directory**，然后从列表中选择它。
- en: 'In the left-hand sidebar, you should see **App registrations**. We are going
    to create a new registration, so click on **New registration**:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏，你应该能看到**应用注册**。我们将创建一个新的注册，点击**新建注册**：
- en: '![Figure 13.21 – Azure enterprise application – App registrations](img/B19803_13_21.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.21 – Azure 企业应用程序 – 应用注册](img/B19803_13_21.jpg)'
- en: Figure 13.21 – Azure enterprise application – App registrations
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.21 – Azure 企业应用程序 – 应用注册
- en: 'Simply give your registration a new name and keep the rest of the settings
    as the default:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需为你的注册起个新名称，保持其他设置为默认即可：
- en: '![Figure 13.22 – Azure enterprise application – new app registration](img/B19803_13_22.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.22 – Azure 企业应用程序 – 新的应用注册](img/B19803_13_22.jpg)'
- en: Figure 13.22 – Azure enterprise application – new app registration
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.22 – Azure 企业应用程序 – 新的应用注册
- en: Click **Register** to finish this registration. This will redirect you to your
    newly created registration.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册**，完成此注册。这将重定向到你新创建的注册。
- en: Now let’s add the authentication. Go to **Certificates & secrets** in the left-hand
    sidebar.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来添加身份验证。在左侧边栏中，进入**证书与机密**。
- en: 'We’ll create a new client secret here. To do so, click on **New** **client
    secret**:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在这里创建一个新的客户端机密。为此，点击**新建** **客户端机密**：
- en: '![Figure 13.23 – Azure enterprise application – app registration secrets](img/B19803_13_23.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.23 – Azure 企业应用程序 – 应用注册机密](img/B19803_13_23.jpg)'
- en: Figure 13.23 – Azure enterprise application – app registration secrets
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.23 – Azure 企业应用程序 – 应用注册机密
- en: 'All we have to do now is name the secret and set an expiry time period. Keep
    in mind that a shorter expiry means more administrative overhead. Faster expiry
    could mean better security as there is less time to potentially leak (or use once
    leaked) the secrets:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要做的就是为机密命名并设置过期时间。请记住，过期时间越短，管理开销越大。较短的过期时间可能意味着更好的安全性，因为泄漏的时间窗口更小（或者一旦泄漏，使用的时间更短）：
- en: '![Figure 13.24 – Azure enterprise application – app registration secret creation](img/B19803_13_24.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.24 – Azure 企业应用程序 – 创建应用注册机密](img/B19803_13_24.jpg)'
- en: Figure 13.24 – Azure enterprise application – app registration secret creation
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.24 – Azure 企业应用程序 – 创建应用注册机密
- en: 'Now click on **Add** to finish setting up the new secret. It will show you
    the values once. Make sure to store them somewhere safe, such as in a password
    vault:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**添加**，完成设置新机密。它只会显示一次，请务必将其保存在安全的地方，例如密码保险库：
- en: '![Figure 13.25 – Azure enterprise application secrets](img/B19803_13_25.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.25 – Azure 企业应用程序机密](img/B19803_13_25.jpg)'
- en: Figure 13.25 – Azure enterprise application secrets
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.25 – Azure 企业应用程序机密
- en: With the authentication out of the way, there is only one thing left to do.
    We need to provide the correct permissions to this new enterprise application.
    To do so, search for **Subscriptions** in the Azure search bar at the top of the
    page.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 身份验证完成后，只剩下一件事了。我们需要为这个新企业应用程序提供正确的权限。为此，请在页面顶部的 Azure 搜索栏中搜索**订阅**。
- en: 'For things such as Azure virtual machine and database instance monitoring,
    you will need to assign (read) permissions to your entire subscription. Find the
    subscription where your resources are located. Mine is called **OICTS Azure**:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 Azure 虚拟机和数据库实例监控等内容，你需要为整个订阅分配（读取）权限。找到你的资源所在的订阅。我的订阅名为**OICTS Azure**：
- en: '![Figure 13.26 – Azure subscriptions](img/B19803_13_26.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.26 – Azure 订阅](img/B19803_13_26.jpg)'
- en: Figure 13.26 – Azure subscriptions
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.26 – Azure 订阅
- en: Now is also a great time to write down the subscription ID, as we will need
    it in a later step!
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在也是记录下订阅 ID 的好时机，因为我们将在稍后的步骤中需要它！
- en: Select your subscription, and then from the list, select **Access control (IAM)**.
    Then, click on **Add** **role assignment**.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的订阅，然后从列表中选择**访问控制（IAM）**。然后，点击**添加** **角色分配**。
- en: '![Figure 13.27 – Azure subscription – role assignment](img/B19803_13_27.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.27 – Azure 订阅 – 角色分配](img/B19803_13_27.jpg)'
- en: Figure 13.27 – Azure subscription – role assignment
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.27 – Azure 订阅 – 角色分配
- en: On the next page, select the **Reader** role from the list and then press **Next**.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页中，从列表中选择**Reader**角色，然后点击**下一步**。
- en: 'At the **Members** part of the creation process, click on **+ Select members**.
    We’ll add the **Zabbix book monitoring** member. It will look as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建过程的**成员**部分，点击**+ 选择成员**。我们将添加**Zabbix 书籍监控**成员。它看起来如下：
- en: '![Figure 13.28 – Azure subscription – role assignment members](img/B19803_13_28.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.28 – Azure 订阅 – 角色分配成员](img/B19803_13_28.jpg)'
- en: Figure 13.28 – Azure subscription – role assignment members
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.28 – Azure 订阅 – 角色分配成员
- en: Now click on **Review + assign** and the permissions will be added.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**审阅 + 分配**，权限将被添加。
- en: There’s one more thing to do in the Azure portal. In the search bar at the top
    of the page, type in **Tenant properties** and select it from the list. On this
    page, make sure to note down the tenant ID as we will need it shortly.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 门户中，还有一件事需要做。在页面顶部的搜索栏中，输入**租户属性**并从列表中选择它。在此页面上，确保记录下租户 ID，因为稍后我们需要它。
- en: 'With the application set up, the authentication created, and the permissions
    assigned, let’s move on to the Zabbix frontend. Navigate to **Data collection**
    | **Hosts** and create a new host by clicking on **Create host** in the top-right
    corner:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置好应用程序、创建好认证并分配好权限后，让我们继续进行 Zabbix 前端的操作。导航至**数据收集** | **主机**，然后点击右上角的**创建主机**以创建新主机：
- en: '![Figure 13.29 – Azure tenant properties](img/B19803_13_29.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.29 – Azure 租户属性](img/B19803_13_29.jpg)'
- en: Figure 13.29 – Azure tenant properties
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.29 – Azure 租户属性
- en: 'Create the following host, with the name **lar-book-azure**, the **Azure by
    HTTP** template, and a host group such as **Cloud**:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下主机，名称为**lar-book-azure**，选择**通过 HTTP 的 Azure**模板，并选择一个主机组，例如**云**：
- en: '![Figure 13.30 – New Azure monitoring host in Zabbix](img/B19803_13_30.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.30 – Zabbix 中新的 Azure 监控主机](img/B19803_13_30.jpg)'
- en: Figure 13.30 – New Azure monitoring host in Zabbix
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.30 – Zabbix 中新的 Azure 监控主机
- en: 'Before adding the host, switch to the **Macros** tab:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加主机之前，切换到**宏**选项卡：
- en: '![Figure 13.31– New Azure monitoring host macros in Zabbix](img/B19803_13_31.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.31– Zabbix 中新的 Azure 监控主机宏](img/B19803_13_31.jpg)'
- en: Figure 13.31– New Azure monitoring host macros in Zabbix
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.31 – Zabbix 中新的 Azure 监控主机宏
- en: 'We will have to add at least the following macros here:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们至少需要在此处添加以下宏：
- en: For **{$AZURE.APP.ID}**, fill in the application ID from *step 5*.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**{$AZURE.APP.ID}**，在*第 5 步*中填写应用 ID。
- en: For **{$AZURE.PASSWORD}**, fill in the value under the **Value** column from
    *step 13*.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**{$AZURE.PASSWORD}**，在*第 13 步*中填写**值**列下的值。
- en: For **{$AZURE.SUBSCRIPTION.ID}**, fill in the subscription ID from *step 15*.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**{$AZURE.SUBSCRIPTION.ID}**，在*第 15 步*中填写订阅 ID。
- en: For **{$AZURE.TENANT.ID}**, fill in the tenant ID from *step 22*.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**{$AZURE.TENANT.ID}**，在*第 22 步*中填写租户 ID。
- en: That’s it; you can now add the new host by clicking on the **Add** button.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样；你现在可以通过点击**添加**按钮来添加新主机。
- en: 'After the discovery rule runs for the first time, your discovered instances
    will be added as new hosts, as you can see in the following screenshot:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发现规则首次运行后，你的发现实例将被添加为新主机，正如你在下方的截图中看到的那样：
- en: '![Figure 13.32 – New Azure-discovered virtual machine](img/B19803_13_32.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.32 – 新的 Azure 发现虚拟机](img/B19803_13_32.jpg)'
- en: Figure 13.32 – New Azure-discovered virtual machine
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.32 – 新的 Azure 发现虚拟机
- en: That’s it, your automated Azure monitoring is now working as expected. Let’s
    have a look at how it works.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，你的自动化 Azure 监控现在已经按照预期工作了。让我们来看看它是如何工作的。
- en: How it works…
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: If you’ve followed the recipe on AWS monitoring, you might think that Azure
    monitoring works in the exact same way. To an extent, that is true; the monitoring
    is completely based on API calls made from Zabbix toward the Azure API.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经按照 AWS 监控的方法，您可能会认为 Azure 监控工作方式完全相同。在某种程度上，这是正确的；监控完全基于从 Zabbix 向 Azure
    API 发出的 API 调用。
- en: What is different between AWS and Azure is of course going to be the JavaScript
    scripts used in the Zabbix items on the templates.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 和 Azure 之间的区别当然在于 Zabbix 项目中使用的 JavaScript 脚本。
- en: The templates provided by Zabbix 7.0 out of the box use a fairly extensive piece
    of JavaScript code to execute API calls toward Azure, parse through the received
    data, and then put that into a JSON array that Zabbix low-level discovery understands.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Zabbix 7.0 提供的开箱即用的模板使用相当广泛的 JavaScript 代码来执行 API 调用向 Azure 发出请求，解析接收到的数据，然后将其放入
    Zabbix 低级发现理解的 JSON 数组中。
- en: Looking at the template found at **Data collection** | **Templates** and then
    opening **Discovery** for the **Azure by HTTP** template, we can see six discovery
    rules.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 查看在 **数据收集** | **模板** 找到的模板，然后打开 **Discovery**，查看 **Azure by HTTP** 模板，我们可以看到六个发现规则。
- en: '![Figure 13.33 – Azure by HTTP discovery rules](img/B19803_13_33.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.33 – Azure by HTTP 发现规则](img/B19803_13_33.jpg)'
- en: Figure 13.33 – Azure by HTTP discovery rules
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.33 – Azure by HTTP 发现规则
- en: 'These six rules discover the different types of Azure database instances and
    virtual machines and use host prototypes to create a new host for each instance
    found. The only difference here is that storage accounts won’t use host prototypes
    but item prototypes to supply you with information. The hosts created by host
    prototypes will then in turn use their own templates to get the actual statistics
    from those instances or buckets, as we can see in the template list:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些六条规则发现不同类型的 Azure 数据库实例和虚拟机，并使用主机原型为每个发现的实例创建新主机。这里唯一的区别是，存储帐户不会使用主机原型，而是使用项目原型来为您提供信息。由主机原型创建的主机将反过来使用它们自己的模板从这些实例或存储桶中获取实际统计数据，正如我们在模板列表中所见：
- en: '![Figure 13.34 – The other Azure templates in Zabbix 7.0](img/B19803_13_34.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.34 – Zabbix 7.0 中的其他 Azure 模板](img/B19803_13_34.jpg)'
- en: Figure 13.34 – The other Azure templates in Zabbix 7.0
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.34 – Zabbix 7.0 中的其他 Azure 模板
- en: In my case, only one virtual machine was discovered, and as such, that host
    was added with the **Azure Virtual Machine by HTTP** template, as seen in *Figure
    13**.32*.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，仅发现了一个虚拟机，因此，该主机已添加到 **Azure Virtual Machine by HTTP** 模板中，如 *图 13**.32*
    所示。
- en: 'All of the information is then collected by **Script** item types with their
    own unique JavaScript code. We can see a piece of the code in the following screenshot,
    where we make a call to Azure to a specific URL (underlined):'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 所有信息都由其独特的 JavaScript 代码的 **Script** 项类型收集。我们可以在以下屏幕截图中看到一段代码，在这里我们调用 Azure
    到特定的 URL（下划线标记）：
- en: '![Figure 13.35 – Azure template call](img/B19803_13_35_new.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.35 – Azure 模板调用](img/B19803_13_35_new.jpg)'
- en: Figure 13.35 – Azure template call
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.35 – Azure 模板调用
- en: It is also possible to edit this JavaScript code to create entirely new calls
    to retrieve your own data and create different types of monitoring, as well as
    simply extending the out-of-the-box templates.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以编辑此 JavaScript 代码，创建全新的调用以检索您自己的数据并创建不同类型的监控，以及简单地扩展开箱即用的模板。
- en: There’s more…
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: We can discover way more from Azure using the method applied in this recipe.
    The JavaScript we employ is used to get metrics from Azure, which can be edited
    to gather almost any metric from the Azure API.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用此配方中应用的方法从 Azure 中发现更多内容。我们使用的 JavaScript 用于从 Azure 获取指标，可以编辑以从 Azure
    API 中收集几乎任何指标。
- en: 'Check out the Azure API documentation for more information on the metrics retrieved
    using JavaScript:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 Azure API 文档，以获取有关使用 JavaScript 检索的指标的更多信息：
- en: '[https://learn.microsoft.com/en-us/rest/api/azure/](https://learn.microsoft.com/en-us/rest/api/azure/)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/rest/api/azure/](https://learn.microsoft.com/en-us/rest/api/azure/)'
- en: Building your Zabbix Docker monitoring
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的 Zabbix Docker 监控
- en: Ever since the release of Zabbix 5, monitoring our Docker containers became
    a lot easier with the introduction of Zabbix agent 2 and plugins. Using Zabbix
    agent 2 and Zabbix 7, we are able to monitor our Docker containers out of the
    box.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Zabbix 5 发布以来，通过引入 Zabbix agent 2 和插件，监控我们的 Docker 容器变得更加简单。使用 Zabbix agent
    2 和 Zabbix 7，我们能够立即监控我们的 Docker 容器。
- en: In this recipe, we are going to see how to set this up and how it works.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何设置并了解其工作原理。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we require some Docker containers. We won’t go over the setup
    of Docker containers, so make sure to do this yourself. Furthermore, we are going
    to need Zabbix agent 2 installed on the host running these Docker containers.
    Zabbix agent does not work in relation to this recipe; Zabbix agent 2 is required.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱需要一些Docker容器。我们不会详细介绍Docker容器的设置，因此请确保自行完成此操作。此外，我们还需要在运行这些Docker容器的主机上安装Zabbix代理2。Zabbix代理与本食谱无关；需要安装Zabbix代理2。
- en: We also need our Zabbix server to actually monitor the Docker containers. We
    will call our Zabbix server `zbx-home`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保Zabbix服务器能够真正监控Docker容器。我们将我们的Zabbix服务器命名为`zbx-home`。
- en: How to do it…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s waste no more time and dive right into the process of monitoring your
    Docker setup with Zabbix:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不再浪费时间，直接进入使用Zabbix监控Docker设置的过程：
- en: First things first, log in to the Linux CLI of the host running your Docker
    container(s).
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，登录到运行Docker容器的主机的Linux命令行界面。
- en: Add the repository for installing Zabbix components.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加安装Zabbix组件的仓库。
- en: 'For RHEL-based systems, use the following:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于RHEL的系统，使用以下命令：
- en: '[PRE0]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For Ubuntu systems, use the following:'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Ubuntu系统，使用以下命令：
- en: '[PRE1]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, install Zabbix agent 2 with the following command.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下命令安装Zabbix代理2。
- en: 'For RHEL-based systems, use the following:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于RHEL的系统，使用以下命令：
- en: '[PRE2]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For Ubuntu systems, use the following:'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Ubuntu系统，使用以下命令：
- en: '[PRE3]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Following installation, make sure to edit the configuration file of the newly
    installed Zabbix agent 2 with the help of the following command:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，请确保使用以下命令编辑新安装的Zabbix代理2的配置文件：
- en: '[PRE4]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Find the line that says **Server** and add your Zabbix server IP address to
    the file, as follows:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到标有**Server**的行，并将Zabbix服务器的IP地址添加到文件中，如下所示：
- en: '[PRE5]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we need to add the **zabbix** user to the Docker group by executing the
    following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要通过执行以下命令将**zabbix**用户添加到Docker组：
- en: '[PRE6]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Make sure to save the file and then restart Zabbix agent 2 with the following
    command:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保保存文件，然后使用以下命令重新启动Zabbix代理2：
- en: '[PRE7]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, navigate to your Zabbix server frontend. Go to **Data collection** | **Hosts**
    and click on the blue **Create** **host** button.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，进入你的Zabbix服务器前端，依次点击**数据收集** | **主机**，然后点击蓝色的**创建** **主机**按钮。
- en: Let’s create a new host called **Docker containers** and make sure to link the
    **Docker by Zabbix agent 2** template to the host.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的主机，命名为**Docker容器**，并确保将**Zabbix代理2模板**链接到该主机。
- en: "![Fig\uFEFFure 13.36 – New Docker host configuration](img/B19803_13_36.jpg)"
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图13.36 – 新的Docker主机配置](img/B19803_13_36.jpg)'
- en: Figure 13.36 – New Docker host configuration
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.36 – 新的Docker主机配置
- en: That’s all there is to monitoring Docker containers with the Zabbix server.
    Let’s now see how it works.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是通过Zabbix服务器监控Docker容器的全部内容。现在我们来看它是如何工作的。
- en: How it works…
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Docker monitoring in Zabbix these days is easy, due to the new Zabbix agent
    2 support and default templates. On occasion, though, a default template does
    not cut it, so let’s break down the items used.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 由于新的Zabbix代理2支持和默认模板，当前在Zabbix中监控Docker变得非常简单。然而，有时默认模板无法满足需求，因此让我们拆解一下所使用的项。
- en: 'Almost all the items we can see on our host are dependent items, most of which
    are dependent on the master item, `Docker: Get info`. This master item is the
    most important item on our Docker template. It executes the `docker.info` item
    key, which is built into the new Zabbix agent 2\. This item retrieves a list with
    all kinds of information from our Docker setup. We use the dependent items and
    preprocessing to get the values we want from this master item.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在主机上看到的几乎所有项都是依赖项，其中大多数依赖于主项`Docker: Get info`。这个主项是我们Docker模板中最重要的项。它执行`docker.info`项键，该键内置于新的Zabbix代理2中。该项从我们的Docker设置中获取一个包含各种信息的列表。我们使用依赖项和预处理来从这个主项中获取我们需要的值。'
- en: The Docker template also contains two Zabbix discovery rules, one to discover
    Docker images and one to discover Docker containers. If we check out the discovery
    rule for Docker containers called `Containers discovery`, we can see what happens.
    Our Zabbix Docker host will use the `docker.containers.discovery` item key to
    find every container and put this in the `{#NAME}` LLD macro. In the item prototypes,
    we then use this `{#NAME}` LLD macro to discover statistics with another master
    item, such as `docker.container_info`. From this master item, we then use the
    dependent items and preprocessing again to include this information in other item
    prototypes as well. We are now monitoring a bunch of statistics straight from
    our Docker setup.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 模板还包含两个 Zabbix 自动发现规则，一个用于发现 Docker 镜像，一个用于发现 Docker 容器。如果我们查看名为 `Containers
    discovery` 的 Docker 容器发现规则，我们可以看到发生了什么。我们的 Zabbix Docker 主机将使用 `docker.containers.discovery`
    项目键来查找每个容器，并将其放入 `{#NAME}` LLD 宏中。在项目原型中，我们然后使用这个 `{#NAME}` LLD 宏与另一个主项目（如 `docker.container_info`）一起发现统计信息。从这个主项目中，我们再次使用依赖项和预处理将这些信息包含到其他项目原型中。现在，我们直接从
    Docker 设置中监控一堆统计信息。
- en: If you want to get values from Docker that aren’t in the default template, check
    out the information collected with the master items on the template. Use a new
    dependent item (prototype) and then use preprocessing to get the correct data
    from the master item.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想获取不在默认模板中的 Docker 值，可以查看模板中与主项目一起收集的信息。使用一个新的依赖项（原型），然后通过预处理从主项目中获取正确的数据。
- en: There’s more…
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If you want to learn more about the Zabbix agent 2 Docker item keys, check
    out the supported item key list for Zabbix agent 2 in the Zabbix documentation:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 Zabbix agent 2 Docker 项目键的内容，请查看 Zabbix 文档中的 Zabbix agent 2 支持的项目键列表：
- en: '[https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2?s[]=docker](https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2?s%5B%5D=docker).'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2?s[]=docker](https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2?s%5B%5D=docker).'
