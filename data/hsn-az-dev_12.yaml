- en: Big Data Pipeline - Azure Event Hub
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大数据管道 - Azure Event Hub
- en: Azure Event Hub is one of the best solutions for introducing an entry point
    with almost limitless throughput. It's designed for big data workloads and is
    able to process millions of messages per second. It offers a very simple configuration,
    and thanks to the available SDK, you can easily adjust it to almost any solution
    developed in the cloud. It also integrates natively with other Azure components,
    making creating a whole platform hosted in the cloud a breeze.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Event Hub 是引入几乎无限吞吐量入口点的最佳解决方案之一。它专为大数据工作负载设计，能够处理每秒数百万条消息。它提供了非常简单的配置，并且凭借可用的
    SDK，您可以轻松地将其调整为几乎任何在云中开发的解决方案。它还与其他 Azure 组件本地集成，使得创建托管在云中的完整平台变得轻而易举。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Working efficiently with Azure Event Hub
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效使用 Azure Event Hub
- en: Different concepts such as publishers, partitions, throughput units, or consumer
    groups
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的概念，例如发布者、分区、吞吐量单元或消费者组
- en: Azure Event Hub security concepts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Event Hub 安全概念
- en: Azure Event Hubcapture feature
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Event Hub 捕获功能
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To perform the exercises in this chapter, you will need the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行本章中的练习，您需要以下内容：
- en: Microsoft Azure subscription
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure 订阅
- en: Visual Studio 2017
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2017
- en: Azure Event Hub service and concepts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Event Hub 服务和概念
- en: Nowadays, we gather more and more data, which has to be aggregated, processed,
    and stored somewhere. This implies using services that can handle increasing loads,
    scale to growing demands, and offer the smallest latency available. All these
    requirements are often mentioned when building so-called big data pipelines—parts
    of a system designed to process as much data as possible, so it is later accessible
    by tools such as Hadoop, Spark, ML, AI, and so on. If you are looking for a service
    in Azure that can handle millions of messages per second, Azure Event Hubis the
    right choice. In this chapter, you will learn the basics of this Azure component
    and get familiar with messaging solutions in Azure.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们收集越来越多的数据，这些数据必须进行聚合、处理并存储到某个地方。这意味着需要使用能够处理不断增加的负载、适应日益增长的需求并提供最小延迟的服务。所有这些要求在构建所谓的大数据管道时都会被提到——这是一个旨在处理尽可能多数据的系统部分，以便以后可以通过
    Hadoop、Spark、ML、AI 等工具访问。如果您正在寻找一个能够处理每秒数百万条消息的 Azure 服务，Azure Event Hub 是正确的选择。在本章中，您将学习此
    Azure 组件的基础知识，并熟悉 Azure 中的消息传递解决方案。
- en: Azure Event Hub concepts
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Event Hub 概念
- en: 'In general, Azure Event Hubis a simple service that is built on top of two
    concepts:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Azure Event Hub 是一个简单的服务，基于两个概念构建：
- en: Event publishers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件发布者
- en: Event processor hosts
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理器主机
- en: 'Of course, these are not the only topics we will cover here. However, before
    we proceed, I would like to focus a little bit on the distinction between a publisherand
    a processor:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些并不是我们在这里将讨论的唯一主题。不过，在继续之前，我想先稍微关注一下发布者和处理器之间的区别：
- en: '**Publisher**:This is an entity that sends data to an instance of Azure Event
    Hub. It can use one of the two available protocols (HTTP or AMQP) and is unaware
    of the current Event Hub capabilities.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布者**：这是向 Azure Event Hub 实例发送数据的实体。它可以使用两种可用协议（HTTP 或 AMQP），并且不关心当前 Event
    Hub 的能力。'
- en: '**Processor**: An entity that reads events from Azure Event Hubas they become
    available. It uses AMQP for communication and relies on additional concepts such
    as consumer groupsand partitions.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理器**：一个从 Azure Event Hub 中读取事件的实体，它在事件可用时读取。它使用 AMQP 进行通信，并依赖于诸如消费者组和分区等附加概念。'
- en: 'The following shows how Azure Event Hubworks:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下展示了 Azure Event Hub 的工作原理：
- en: '![](img/020778c9-5eea-4c0a-8286-0e047871a8a7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/020778c9-5eea-4c0a-8286-0e047871a8a7.png)'
- en: 'As you can see, there are an additional two concepts mentioned here:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里还提到了另外两个概念：
- en: '**Partition**: Each partition is an independent event log that stores data
    separately. In general, it is Event Hub''s responsibility to ensure that each
    event sharing the same partition key is stored within the same partition in order.
    Of course, you can set this value by yourself—in such a scenario you have to make
    sure you are not overloading one specific partition.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区**：每个分区是一个独立的事件日志，单独存储数据。一般来说，Event Hub 负责确保每个共享相同分区键的事件按顺序存储在同一个分区内。当然，您可以自行设置这个值——在这种情况下，您必须确保不会过度负载某个特定分区。'
- en: '**Consumer group**: If you would like to allow separate processors to consume
    events separately, you have to use different consumer groups to do so.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者组**：如果你希望允许不同的处理器分别消费事件，你必须使用不同的消费者组来实现。'
- en: 'As you can see, Azure Event Hubdoes not use things such as instance topics
    for distributing data—instead it acts as a single event pipeline that you can
    read anytime with high throughput. To define this value, Event Hub uses a concept
    named **throughput units** (**TU**). 1 TUis defined as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Azure Event Hub并未使用诸如实例主题之类的方式来分配数据——它充当一个单一的事件管道，你可以随时以高吞吐量进行读取。为了定义这一值，Event
    Hub使用一个名为**吞吐量单元**（**TU**）的概念。1 TU的定义如下：
- en: Up to 1 MB/s or 1,000 events for ingress
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最多1MB/s或1,000个事件的入站
- en: Up to 2 MB/s or 4,096 events for egress
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最多2MB/s或4,096个事件的外发
- en: Note that Azure Event Hubshares TUs for all consumer groups you are using. If
    you have 1 TU and 5 consumer groups, the maximum egress will be divided among
    all consumers (so when all 5 read events at the same time, a maximum of 400 events
    per second will be available).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Azure Event Hub为你使用的所有消费者组共享TU。如果你有1个TU和5个消费者组，最大外发量将会在所有消费者之间进行分配（因此，当所有5个消费者同时读取事件时，每秒最多将有400个事件可用）。
- en: If you happen to exceed the available limit, Event Hub will start throttling
    your requests, finally returning `ServerBusyException`. This is, however, true
    only for incoming events—for egress you just cannot read more than the current
    TU value allows.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你恰好超过了可用的限制，Event Hub将开始限制你的请求，最终返回`ServerBusyException`。然而，这仅适用于传入事件——对于外发，你不能读取超过当前TU值允许的数量。
- en: By default, you cannot have more than 20 TUs per Event Hub namespace. However,
    this is just a soft limit—you can extend it by contacting Azure support.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个Event Hub命名空间最多不能有超过20个TU。然而，这只是一个软限制——你可以通过联系Azure支持来扩展它。
- en: 'Now, let''s focus a little bit on partitions. Each hub in Event Hub can have
    a maximum number of 32 partitions. You may wonder what this implies—in fact, this
    gives some additional options:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们稍微关注一下分区。Event Hub中的每个Hub最多可以有32个分区。你可能会想知道这意味着什么——实际上，这提供了一些额外的选择：
- en: Because each partition can have a corresponding consumer, by default, you can
    process messages in parallel using 32 consumers.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于每个分区都可以有一个对应的消费者，默认情况下，你可以使用32个消费者并行处理消息。
- en: Because you cannot change the number of partitions after the hub's creation,
    you have to carefully design it at the very beginning.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为在Hub创建后不能更改分区数，你必须在最初阶段仔细设计。
- en: Using the maximum number of partitions by default is not always the best option—it
    should reflect the number of readers you are planning to support. If you choose
    too many, they will start to race to acquire a lease on a partition.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认使用最大数量的分区并不总是最佳选择——它应当反映你计划支持的读者数量。如果你选择的分区数过多，它们会开始争夺分区的租赁。
- en: 'The following shows globally how data could be stored among different partitions
    within a hub:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是数据在Hub内不同分区之间如何全球存储的示意：
- en: '![](img/1406bcad-2d1c-4a99-9673-8da1f54b1241.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1406bcad-2d1c-4a99-9673-8da1f54b1241.png)'
- en: As mentioned earlier, each partition can grow independently—what is more, each
    one has an individual offsetvalue. What is an offsetvalue? You could think about
    it as a pointer to some specific point within a log—if it stores events numbered
    from 1 to 10,000 and you have read 1,000, an offsetvalue will be 1,001\. In such
    a case, it means that a reader should start reading data from the 1,001^(st) event.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，每个分区可以独立增长——更重要的是，每个分区都有一个独立的`offsetvalue`。什么是`offsetvalue`？你可以将其视为日志中的某个特定位置的指针——如果它存储的是从1到10,000的事件，并且你已经读取了1,000，那么`offsetvalue`将是1,001。在这种情况下，意味着读者应从第1,001个事件开始读取数据。
- en: In fact, offset and consumer groups are connected with each other conceptually—each
    consumer group has an individual offset value; that is why,by introducing it,
    you can read all available logs once more.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，`offset`和消费者组在概念上是相互关联的——每个消费者组都有一个独立的`offset`值；这就是为什么通过引入它，你可以再次读取所有可用日志的原因。
- en: However, remember that to set an offset, a consumer has to perform a checkpoint.
    If it fails to do so, the next time it connects, it will read all the data once
    more. This is very important if you want to avoid processing duplicates—either
    you have to implement a very durable process for processing events, so you can
    be sure that a checkpoint will be performed even if something fails, or you need
    to have a mechanism for detecting duplicates.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，记住，为了设置偏移量，消费者必须执行一个**检查点**。如果没有执行，下一次连接时，它将重新读取所有数据。如果你想避免处理重复数据，这一点非常重要——你要么需要实现一个非常可靠的事件处理过程，以确保即使出现故障也能执行检查点，要么你需要有一个机制来检测重复数据。
- en: If you have to do so, you can easily read previous events by providing the offsetvalue
    you are interested in when starting a processor.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有需要，你可以通过在启动处理器时提供你感兴趣的偏移量值，轻松读取以前的事件。
- en: The last thing to consider for now is Azure Event Hub'sretention policy for
    stored events. By default (or in other words, by using the Basictier), events
    can be stored only for 24 hours to be consumed; after that period, they are lost.
    Of course, it is possible to extend it by using the Standard tier; you will have
    an option to do so up to a maximum of 7 days from event retention. In general,
    you should avoid using this service as some kind of a standard queue or cache—its
    main purpose is to provide functionality for aggregating thousands of messages
    per second and pushing them further.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 目前需要考虑的最后一件事是 Azure Event Hub 对存储事件的保留策略。默认情况下（或者换句话说，使用基础层时），事件只能存储 24 小时以供消费；超过这个时间后，事件会丢失。当然，通过使用标准层，你可以延长保留时间，最多可延长至事件保留后的
    7 天。一般来说，你应该避免将此服务作为标准队列或缓存使用——它的主要目的是提供每秒聚合数千条消息并进一步推送的功能。
- en: Azure Event Hub durability
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Event Hub 的耐久性
- en: 'In many scenarios, Azure Event Hubis one of the main entry points to the system,
    making it a critical component that should be replicated and highly available.
    In this particular service, the geo-disaster recovery feature is available when
    selecting the standardtier and requires you to set up and configure the appropriate environment.
    To do so, you need to understand the following topics:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多场景中，Azure Event Hub 是系统的主要入口点之一，成为一个关键组件，应该进行复制并确保高可用性。在这个特定的服务中，地理灾难恢复功能在选择标准层时可用，并且需要你设置并配置合适的环境。为此，你需要理解以下主题：
- en: '**Alias**: Instead of providing multiple connection strings, you can use an
    alias to make a connection with a single stable one.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**别名**：你可以使用别名来通过一个稳定的连接字符串进行连接，而不是提供多个连接字符串。'
- en: '**Failover**: This is the process of initiating a switch between namespaces.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障转移**：这是在命名空间之间发起切换的过程。'
- en: '**Primary/secondary namespace**: When using the Azure Event Hubgeo-disaster
    recovery feature, you have to define which namespace is the primary and which
    is the secondary one. The important thing here is that you can send events to
    both namespaces, but the second one remains passive—that means events from an activenamespace
    are not transferred.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主/辅助命名空间**：在使用 Azure Event Hub 的地理灾难恢复功能时，你必须定义哪个命名空间是主命名空间，哪个是辅助命名空间。这里需要注意的是，你可以将事件发送到两个命名空间，但第二个命名空间保持**被动**——这意味着来自活动命名空间的事件不会被转移。'
- en: 'Now, to implement the feature in Event Hub, you can to do two things:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了在事件中心实现这个功能，你需要做两件事：
- en: Monitor your primary namespace to detect any anomalies
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控你的主命名空间以检测任何异常
- en: Initiate failover
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动故障转移
- en: Of course, if a disaster occurs, you will have to create a new pairing after
    finishing a failover.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果发生灾难，完成故障转移后，你需要创建一个新的配对。
- en: You have to know the difference between outage, when there are temporary problems
    within a data center, and a disaster, which often means permanent damage and possible
    loss of data. The geo-disaster recovery feature is designed for disasters; in
    the case of an outage, you should implement another way of dealing with it, such
    as caching data locally.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须知道“停机”和“灾难”之间的区别，停机通常是指数据中心内部的临时问题，而灾难通常意味着永久性损坏和可能的数据丢失。地理灾难恢复功能是为灾难设计的；在停机情况下，你应该实施其他处理方式，如本地缓存数据。
- en: Working with Azure Event Hub
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure Event Hub
- en: Now that  you are familiar with some basic concepts, we can proceed and start
    working with a real instance of Azure Event Hub. In this section, you will learn
    both how to create and access Event Hub in the Azure portal and work with it using
    its SDK. In fact, using this service is possible both from the portal (as many
    Azure components seamlessly integrate with it and no additional configuration
    is required) and by providing custom implementations of consumers that read and
    process data further.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经熟悉了一些基本概念，我们可以继续并开始使用真实的 Azure Event Hub 实例。在这一部分，您将学习如何在 Azure 门户中创建和访问
    Event Hub，并使用其 SDK 进行操作。实际上，使用此服务既可以通过门户进行（因为许多 Azure 组件与之无缝集成，且无需额外配置），也可以通过提供自定义实现的消费者来读取和进一步处理数据。
- en: Creating an Azure Event Hub in the Azure portal
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure 门户中创建 Azure Event Hub
- en: 'To create an Azure Event Hub, we will start, as in most cases, by clicking
    on the + Create a resourcebutton. Enter `Event Hub`and select the service from
    the search results. Here, you can see an example of a configuration of my Event
    Hub instance:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 Azure Event Hub，我们将像大多数情况下那样，点击 + 创建资源 按钮。输入 `Event Hub` 并从搜索结果中选择该服务。在这里，您可以看到我
    Event Hub 实例配置的示例：
- en: '![](img/408532ce-f5f1-44f9-b893-6cac51801016.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/408532ce-f5f1-44f9-b893-6cac51801016.png)'
- en: 'Let''s globally now focus on what we actually have here:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们全球聚焦于我们所拥有的内容：
- en: 'Name: This is the unique name of your Event Hub instance. Note, it has to be
    unique among all others supported by Azure.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：这是您的 Event Hub 实例的唯一名称。请注意，它必须在所有 Azure 支持的实例中是唯一的。
- en: 'Pricing tier: You can choose between Basic and Standard tiers. In fact, there
    is also one additional tier – Dedicated, which is, however, available only if
    you ask for it directly. The difference between Basic and Standard is quite huge
    in terms of capabilities and throughput; we will cover it in a second.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定价层：您可以选择 Basic 和 Standard 层。实际上，还有一个额外的层——Dedicated，不过仅在您直接申请时才可使用。Basic 和
    Standard 层之间在功能和吞吐量上差异很大；我们稍后会详细介绍。
- en: 'Enable Kafka: This is a new feature, which allows you to use Azure Event Hubas
    if it was an **Apache Kafka** instance. Thanks to that, you are able to switch
    to this Azure service without the need to reconfigure applications communicating
    with your Kafka instances.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 Kafka：这是一个新功能，允许您将 Azure Event Hub 用作 **Apache Kafka** 实例。通过这个功能，您可以在不重新配置与
    Kafka 实例通信的应用程序的情况下，切换到此 Azure 服务。
- en: 'Make this namespace zone redundant: If you wish, you can leverage availability
    zones for Event Hub and make the whole namespace zone redundant. This improves
    the availability of your instance of a service with no additional cost (you still
    have to pay for an additional instance, though). Currently, this feature is enabled
    for three locations – Central US, East US 2, and France Central.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使此命名空间具备区域冗余：如果您愿意，可以为 Event Hub 利用可用性区域，使整个命名空间具备区域冗余。这可以提高服务实例的可用性且无需额外费用（不过，您仍然需要为额外的实例付费）。目前，此功能已在三个位置启用——美国中部、美国东部
    2 和法国中部。
- en: 'Subscription: A subscription where an instance will be created.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅：将在其中创建实例的订阅。
- en: 'Resource group: In which RG, an instance of Event Hub, will be created.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源组：在此资源组中将创建 Event Hub 实例。
- en: 'Location: In which region Azure Event Hubwill be created.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域：Azure Event Hub 将在此区域创建。
- en: 'Throughput Units: This setting defines the throughput of the whole namespace.
    In Azure, each instance of Event Hub shares available TUs between all other hubs
    in a namespace. You can change the value later, depending on your needs.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吞吐量单位：此设置定义了整个命名空间的吞吐量。在 Azure 中，每个 Event Hub 实例将在命名空间内与其他所有 Hub 共享可用的 TUs。根据需要，您可以稍后更改该值。
- en: 'Enable Auto-Inflate: Instead of manually scaling the throughput of your namespace,
    you can enable Auto-Inflate. This feature scales up your namespace automatically 
    as the load grows. Note, however, that it will not scale it down automatically. By
    enabling it, you can also define  the maximum value of TUs, so you will not be
    charged more than you are supposed to.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用自动扩展：您可以启用自动扩展，而不是手动调整命名空间的吞吐量。此功能会随着负载增长自动扩展命名空间。但请注意，它不会自动缩减。通过启用该功能，您还可以定义最大
    TUs 值，因此您不会被收取超过预期的费用。
- en: Remember that you are charged for each TU—that means that if you selected  the
    Basictier and require 10 TUs, you will pay 9.41 EUR * 10 = 94.1 EUR per month!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您会为每个 TU 付费——这意味着如果您选择了 Basic 层并且需要 10 个 TUs，那么您每月需要支付 9.41 EUR * 10 = 94.1
    EUR！
- en: When you click on the Createbutton, Azure will take care of creating an instance
    of Azure Event Hubfor you.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击 Create按钮时，Azure 将为您创建一个 Azure Event Hub实例。
- en: Working with Azure Event Hub in the portal
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在门户中使用 Azure Event Hub
- en: 'The following screenshot shows a brand-new instance of Azure Event Hub:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个全新的 Azure Event Hub实例：
- en: '![](img/b2ec64a0-7943-4741-beaf-c4a2216673a0.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2ec64a0-7943-4741-beaf-c4a2216673a0.png)'
- en: 'As you can see, it contains some basic info such as metrics, metadata, and
    access to connection strings. Of course, this is a view of a namespace—we have
    not created any Event Hub yet. Before we do so, I would like to focus a little
    on what we have available now. On the left, you can find the SETTINGSsection,
    which contains additional features:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它包含一些基本信息，如指标、元数据和连接字符串的访问权限。当然，这是命名空间的视图——我们还没有创建任何 Event Hub。在此之前，我想先关注一下我们当前拥有的内容。在左侧，您可以找到 SETTINGS部分，其中包含附加功能：
- en: 'Shared access policies: In Azure Event Hub,access policies have two levels—they
    are assigned either for a namespace or for a hub. With them, you are able to share
    an access key with a combination of three permissions—Manage**,** Listen, and Send.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享访问策略：在 Azure Event Hub中，访问策略有两个级别——它们可以分配给命名空间或集线器。通过这些策略，您可以与三种权限组合共享访问密钥——管理（Manage）、监听（Listen）和发送（Send）。
- en: 'Scale: If you feel that you need more throughput, you can go to this blade
    and scale a namespace up (or down if you need fewer TUs). From that screen, you
    can also change the tier – for example, select Standardto be able to use Auto-Inflate.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展：如果您觉得需要更多的吞吐量，您可以转到此页面并将命名空间的规模扩大（或者如果需要更少的 TUs，则缩小）。在该屏幕上，您还可以更改层级——例如，选择 Standard，以便启用自动扩展（Auto-Inflate）。
- en: 'Geo-recovery: If you have a requirement to make your Event Hub highly available
    and you selected Standardtier, from this blade you will able to initiate pairing
    with another region.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理恢复（Geo-recovery）：如果您需要使 Event Hub 高可用并且选择了 Standard层级，您可以通过此页面启动与其他区域的配对。
- en: 'Now let''s create a hub:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个集线器：
- en: 'Click on the Event Hubsblade:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Event Hubs页面：
- en: '![](img/0f4bf125-2d3e-4d43-b076-90d66a9048d3.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f4bf125-2d3e-4d43-b076-90d66a9048d3.png)'
- en: 'Click on the + Event Hubbutton to see a form that enables you to configure
    a new instance of a hub:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 + Event Hub按钮，查看一个表单，该表单允许您配置新的集线器实例：
- en: '![](img/ebcc7a02-b91e-4ad4-8850-4f2a592fa6f5.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebcc7a02-b91e-4ad4-8850-4f2a592fa6f5.png)'
- en: Note that some fields are currently grayed out. This is because I used the Basictier
    for this example; both Message Retention (which enables you to extend the period
    an event is available to a maximum of seven days) and Capture(which will be described
    later) are features of the Standardtier.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些字段目前是灰色的。这是因为我在此示例中使用了 Basic层级； Message Retention（允许您将事件可用期延长至最多七天）和 Capture（将在后面描述）是 Standard层级的功能。
- en: Click on the Createbutton to initiate the creation of a hub.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Create按钮以启动创建一个集线器的过程。
- en: 'Once a hub is created, you are able to click on it and access it, as shown:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦集线器创建完成，您可以点击它并访问它，如下所示：
- en: '![](img/74bf99fa-ea1f-4be0-ac72-8f7e6901a73e.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74bf99fa-ea1f-4be0-ac72-8f7e6901a73e.png)'
- en: Note that this view is a bit different from the view of a namespace; while it
    also contains some metadata and metrics, available additional features are limited.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个视图与命名空间的视图略有不同；虽然它也包含一些元数据和指标，但可用的附加功能是有限的。
- en: Note that for the Basictier, consumer groupsare also unavailable. With that
    tier, only the default group—named `$Default`—can be used.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于 Basic层级，消费者组（consumer groups）也不可用。使用该层级时，只有默认组—命名为 `$Default`—可以使用。
- en: Developing applications with Azure Event Hub
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure Event Hub 开发应用程序
- en: 'We created and configured our instance of Azure Event Hubin the Azure portal;
    now it is time to work with a concept I mentioned at the very beginning—Event
    Processor Host. In this section, you will learn:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Azure 门户中创建并配置了我们的 Azure Event Hub实例；现在是时候使用我一开始提到的概念——Event Processor Host。在本节中，您将学习：
- en: How to send events to Azure Event Hub
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将事件发送到 Azure Event Hub
- en: How to receive events by implementing your own Event Processor Host
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过实现您自己的 Event Processor Host来接收事件
- en: 'Before we start writing some code, however, you have to understand what really
    underlies such a concept. As opposed to competing consumers, where each consumer
    uses the same messaging channel, Azure Event Hubuses the idea of an Event Processor
    Host, which is an intelligent agent able to distribute events between different,
    partitioned consumers. You may wonder how this idea works when implemented; to
    get an understanding, here you can see a diagram of the first scenario:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们开始编写代码之前，你必须理解这一概念背后真正的原理。与竞争消费者不同，后者每个消费者都使用相同的消息通道，Azure Event Hub 采用了事件处理器主机（Event
    Processor Host）的概念，这是一个智能代理，能够在不同的分区消费者之间分配事件。你可能会好奇，当这个概念被实现时是如何工作的；为了理解这一点，你可以看到第一个场景的示意图：
- en: '![](img/7358c913-7106-468a-8eb0-551446eebd73.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7358c913-7106-468a-8eb0-551446eebd73.png)'
- en: 'In this diagram, you can see that there is a single **producer** and four different
    **consumers**. Each consumer implements `IEventProcessor`—an interface that is
    provided by the SDK and makes receiving events possible. Each **consumer** covers
    one **partition** and acquires a lease on it. Now let''s check another scenario:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示意图中，你可以看到有一个**生产者**和四个不同的**消费者**。每个消费者都实现了 `IEventProcessor`——这是 SDK 提供的一个接口，使得接收事件成为可能。每个**消费者**覆盖一个**分区**并获得对该分区的租约。现在让我们查看另一个场景：
- en: '![](img/ec3b8ad8-0a6d-408f-8dc7-5958735f33ac.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec3b8ad8-0a6d-408f-8dc7-5958735f33ac.png)'
- en: 'The only change here is the number of **partitions**—now the Event Hub has
    eight. Event Processor Hostmakes sure that the load will be distributed equally,
    each **consumer** will consume two **partitions**. To make things even more complicated,
    there is a third scenario to consider:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的变化是**分区**的数量——现在 Event Hub 有八个。事件处理器主机确保负载被均匀分配，每个**消费者**将消费两个**分区**。为了让事情更加复杂，我们还需要考虑第三个场景：
- en: '![](img/8e7e7e64-56d5-4391-9cba-081f6bf19e9f.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e7e7e64-56d5-4391-9cba-081f6bf19e9f.png)'
- en: 'This time, we have more **consumers** than **partitions** available. In that
    case, you will notice a situation where one **consumer** does not work as there
    is no **partition** it can process. There is also one more caveat in that scenario;
    because lease duration (the time during which a partition is attached to a specific
    **consumer**) is not infinite, at some point currently an idle **consumer** can
    expropriate others and take control over a partition. Now, when the concept of Event
    Processor Hostis described, we can check how to write some code that can interact
    with Azure Event Hub. The following code is for an event producer:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们有更多的**消费者**而不是可用的**分区**。在这种情况下，你会注意到一种情况，某个**消费者**无法工作，因为没有它可以处理的**分区**。在这种情况下还有一个需要注意的地方；因为租约持续时间（一个分区与特定**消费者**关联的时间）不是无限的，在某个时刻，当前处于空闲状态的**消费者**可能会剥夺其他消费者的控制权，并接管一个分区。现在，当我们描述了事件处理器主机的概念后，我们可以检查如何编写一些代码来与
    Azure Event Hub 交互。以下是一个事件生产者的代码：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To use this code example, you will need a connection string. To get it, I accessed
    my hub instance, went to the Shared access policiesblade, and created a new policy
    with only the Sendpermission:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个代码示例，你需要一个连接字符串。为了获取它，我访问了我的 Hub 实例，进入了共享访问策略（Shared access policies）界面，并创建了一个仅具有发送权限（Send）的新策略：
- en: '![](img/7a0b3a67-6501-40f6-8f0b-92eb0953bc49.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a0b3a67-6501-40f6-8f0b-92eb0953bc49.png)'
- en: 'Now, when I execute my application, I will see that it sends events successfully:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我执行我的应用程序时，我会看到它成功发送事件：
- en: '[PRE1]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We have a producer, now we need a consumer! I created an access policy once
    more, this time only for Listen:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个生产者，现在我们需要一个消费者！我再次创建了一个访问策略，这次仅用于监听（Listen）：
- en: '![](img/f49ddcb8-e621-42f8-bece-d9a0e8ef17fe.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f49ddcb8-e621-42f8-bece-d9a0e8ef17fe.png)'
- en: 'To create a consumer you will need the `Microsoft.Azure.ServiceBus.EventProcessorHost`NuGet
    package. Once you install it, you will be able to implement `IEventProcessor`
    just like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个消费者，你需要 `Microsoft.Azure.ServiceBus.EventProcessorHost` NuGet 包。安装后，你将能够像这样实现
    `IEventProcessor`：
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, it has three methods: `OpenAsync`, `ProcessEventsAsync`,and `CloseAsync`.
    To be able to actually use such a processor, you have to initiate the whole event
    processing host:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它有三个方法：`OpenAsync`、`ProcessEventsAsync` 和 `CloseAsync`。为了能够实际使用这样的处理器，你需要启动整个事件处理主机：
- en: '[PRE3]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now when you run your application, you should be able to see incoming events.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行应用程序时，你应该能够看到传入的事件。
- en: Note that Event Processor Hostrequires you to create a Storage Account instance.
    It uses it to internally manage leases and offsets.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，事件处理器主机需要你创建一个存储帐户实例。它用于内部管理租约和偏移量。
- en: 'Here, you can see the log coming from my processor:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到来自我的处理器的日志：
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note how a single receiver handles all 16 partitions I used for this particular
    hub. Now you can check what happens if I introduce another consumer:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一个接收方如何处理我为这个特定中心使用的所有16个分区。现在你可以查看如果我引入另一个消费者会发生什么：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, `Partition 0` has been taken by another receiver, which will
    start processing events from it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`Partition 0`已经被另一个接收方占用，该接收方将开始从该分区处理事件：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It will gradually take control of half of the available partitions until the
    load is balanced.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 它将逐渐接管一半可用分区，直到负载平衡。
- en: Azure Event Hub security
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Event Hub安全
- en: We have covered some topics regarding working with and developing applications
    using Azure Event Hub – now it is time to learn something more about the security
    features of this service. In the previous part of this chapter, you used shared
    access policies, which are the easiest options when you want to restrict access
    to a hub to some predefined operations (such as listening to events, sending them,
    or managing Event Hub). Now I will show you something more about the security
    model and restricting access to the whole namespace by IP filtering.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了使用和开发应用程序时与Azure Event Hub相关的一些话题——现在是时候深入了解该服务的安全功能了。在本章的前面部分，你使用了共享访问策略，这是当你想要限制对中心的访问时最简单的选项（例如收听事件、发送事件或管理Event
    Hub）。现在，我将向你展示更多关于安全模型的内容，并通过IP过滤来限制对整个命名空间的访问。
- en: Event publishers
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件发布者
- en: 'When creating an Event Hub namespace instance, you had to choose a tier – you
    could choose between Basicand Standardtier. Besides features such as consumer
    groups or message retention, Standardtier offers one more thing—the ability to
    create event publishers. An event publisheracts as a virtual endpoint for sending
    messages to a hub. In fact, it enhances security by combining an SAS token with
    the identity of a sender. To generate a token, you have to use the following method:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Event Hub命名空间实例时，你需要选择一个层级——可以选择`Basic`和`Standard`层级。除了诸如消费者组或消息保留等功能外，`Standard`层级还提供了一项额外功能——创建事件发布者的能力。事件发布者作为发送消息到中心的虚拟端点。事实上，它通过将SAS令牌与发送者的身份结合来增强安全性。要生成令牌，你必须使用以下方法：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To execute it correctly, you will need:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要正确执行它，你将需要：
- en: '**Key name**: the name of an SAS policy'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥名称**：SAS策略的名称'
- en: '**Shared access key**: the key generated for a policy'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享访问密钥**：为策略生成的密钥'
- en: '**Resource**: the URL to a namespace in the following format: `sb://<NAMESPACE>.servicebus.windows.net/<EVENT_HUB_NAME>/publishers/<PUBLISHER_NAME>`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：命名空间的URL，格式如下：`sb://<NAMESPACE>.servicebus.windows.net/<EVENT_HUB_NAME>/publishers/<PUBLISHER_NAME>`'
- en: '**Token lifetime**: how long a token will be valid'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**令牌有效期**：令牌的有效时间'
- en: Remember that `PUBLISHER_NAME` should be unique for each client.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`PUBLISHER_NAME`对于每个客户端来说应该是唯一的。
- en: 'When you generate a token, it will be in the following format:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当你生成令牌时，它将采用以下格式：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To be able to actually use it, you will have to use `EventHubSender`instead
    of `EventHubClient`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够实际使用它，你需要使用`EventHubSender`而不是`EventHubClient`：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is because when using event publishers you can only send events—they cannot
    be used for other Event Hub operations.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为使用事件发布者时，你只能发送事件——它们不能用于其他Event Hub操作。
- en: Note that clients, in general, should not be aware of additional features that
    such generated SAS tokens supply. The most important thing is that they should
    not be generated by them; instead, you should introduce a service in which they
    can ask for a full connection string and use it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一般情况下，客户端不应该了解此类生成的SAS令牌所提供的额外功能。最重要的是，它们**不应该由客户端生成**；相反，你应该引入一个服务，客户端可以在其中请求完整的连接字符串并使用它。
- en: 'Now, when you have control over who or what can access Azure Event Hub, there
    is one more thing you can do—revoke publisher, so it cannot access a hub anymore.
    To do so, you will need the following methods:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你控制谁或什么可以访问Azure Event Hub时，还有一件事你可以做——撤销发布者，以使其无法再访问中心。为此，你将需要以下方法：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once you revoke a publisher, when it tries to send an event, it will receive `PublisherRevokedException`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你撤销一个发布者，它在尝试发送事件时会收到`PublisherRevokedException`。
- en: IP filters
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IP过滤
- en: 'It is possible to restrict access to Azure Event Hub by introducing IP filters;
    this feature (as shown next) allows you to secure the whole namespace by knowing
    which IP addresses should be rejected. By default, the IP filter is empty, that
    means that Event Hub accepts any connection (so this is equivalent to setting
    it as approve `0.0.0.0/0` IP address):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引入 IP 过滤器，可以限制对 Azure Event Hub 的访问；这个功能（如下所示）允许你通过知道哪些 IP 地址应该被拒绝，来保护整个命名空间。默认情况下，IP
    过滤器是空的，这意味着 Event Hub 接受任何连接（这相当于将其设置为批准 `0.0.0.0/0` IP 地址）：
- en: '![](img/18b13256-40f1-4c9f-b8b8-37c5c8e295f2.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18b13256-40f1-4c9f-b8b8-37c5c8e295f2.png)'
- en: You can easily create a rule by clicking on + Add IP Filter Rule**:**
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击 **+ 添加 IP 过滤规则** 来轻松创建规则：
- en: '![](img/bef7ea13-87d1-40e3-a7b2-b51279992be2.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bef7ea13-87d1-40e3-a7b2-b51279992be2.png)'
- en: 'When I restrict access to my computer''s IP, I will get the following message
    when I try to send an event:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当我限制对我计算机 IP 的访问时，当我尝试发送事件时，将收到以下消息：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can choose to either restrict access from some specific IP addresses or
    allow a particular subset.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择限制来自某些特定 IP 地址的访问，或者允许一个特定的子集。
- en: Azure Event Hub Capture feature
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Event Hub Capture 特性
- en: There is one feature of Azure Event Hub that requires an individual section
    itself to describe it in depth. It is capture, a functionality which allows you
    to automatically store events using a predefined storage solution (such as Azure
    Storageor Azure Data Lake) and process it further. Unfortunately, this particular
    feature is often misused as its use cases are not so obvious; additionally, the
    way it works might sometimes be unclear.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Event Hub 有一个功能需要单独一节来深入描述。它就是 Capture，一个允许你使用预定义的存储解决方案（如 Azure Storage
    或 Azure Data Lake）自动存储事件并进一步处理的功能。不幸的是，这个特性常常被误用，因为它的使用场景并不那么明显；此外，它的工作原理有时也可能不太清楚。
- en: How Azure Event Hub Capture works
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Event Hub Capture 如何工作
- en: 'In common use cases for Event Hub, you need a **producer** and a **consumer**
    to fetch data and process it. Let''s consider the following scenario:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Event Hub 的常见使用场景中，你需要一个 **生产者** 和一个 **消费者** 来获取数据并处理它。让我们考虑以下场景：
- en: '![](img/2b9ba131-0184-4ac7-a17e-72c044383b8a.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b9ba131-0184-4ac7-a17e-72c044383b8a.png)'
- en: 'In this scenario, we have two consumers:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们有两个消费者：
- en: '**Consumer 1 **for some generic processing'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者 1** 用于一些通用处理'
- en: '**Consumer 2 **for archiving events'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者 2** 用于事件归档'
- en: 'We also introduced **storage **for storing a log of events. As you can see,
    the downside of that solution is the fact that you need to maintain both consumers—two
    code bases and two instances. With Event Hub Capture, the scenario we are considering
    now will change a little bit:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还引入了 **存储** 来存储事件日志。如你所见，那个解决方案的缺点是，你需要维护两个消费者——两个代码库和两个实例。使用 Event Hub Capture
    后，我们现在考虑的场景会发生一点变化：
- en: '![](img/0c77fb58-5762-4e54-8616-b16b9ae0e3b1.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c77fb58-5762-4e54-8616-b16b9ae0e3b1.png)'
- en: Now we no longer require additional consumers as it will be Event Hub Capture's
    responsibility to store data. You may wonder how storing data works in that scenario;
    in general, it is based on a time window which, when it ends, triggers a capture
    of data.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们不再需要额外的消费者，因为将由 Event Hub Capture 负责存储数据。你可能会想知道，在这种情况下，数据是如何存储的；一般来说，它是基于一个时间窗口，当时间窗口结束时，会触发数据捕获。
- en: It can be easily described using an example. Suppose you set your time window
    to 10 minutes; after that interval, all data which is stored within Azure Event
    Hubwill be captured and stored inside a selected database using **Apache Avro**
    format.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个场景可以通过一个例子来轻松描述。假设你将时间窗口设置为 10 分钟；在该时间间隔之后，所有存储在 Azure Event Hub 中的数据将被捕获并使用
    **Apache Avro** 格式存储到选定的数据库中。
- en: An important thing is Capture pricing; it costs € 0.085/hour per each throughput
    unit. It means that if you haveAzure Event Hubwith 1 TU and Capture enabled, you
    will pay 80 EUR instead of 18 EUR. With 2 TUs, it will be 160 EUR instead of 37
    EUR.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的事情是 Capture 的定价；它的费用是每个吞吐单元每小时 €0.085。这意味着，如果你有启用了 Capture 的 Azure Event
    Hub 和 1 个吞吐单元，你将支付 80 欧元，而不是 18 欧元。若有 2 个吞吐单元，则需支付 160 欧元，而不是 37 欧元。
- en: Enabling Event Hub Capture
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用 Event Hub Capture
- en: Event Hub Capture is a feature of an individual Event Hub, not the whole namespace.
    To enable it, you need to go to your hub and search for the Captureblade.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Event Hub Capture 是单个 Event Hub 的功能，而不是整个命名空间的功能。要启用它，你需要进入你的 Hub 并搜索 Capture
    页签。
- en: 'Now, when you enable Capture, you will see a full configuration of the feature,
    which  we will try to understand now:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你启用 Capture 时，你将看到该功能的完整配置，我们现在将尝试理解它：
- en: '![](img/399ae79d-86b8-4f6f-b110-49bd745ec7b0.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/399ae79d-86b8-4f6f-b110-49bd745ec7b0.png)'
- en: 'As you can see, it contains the following settings:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它包含以下设置：
- en: '**Time window**: It defines after how many minutes a capture is triggered.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间窗口**：它定义了多少分钟后触发捕获。'
- en: '**Size window**: Alternatively, it is possible to trigger a capture after a
    window reaches the size limit. Whether it triggers because of time or size depends
    on which one reaches the limit first.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小窗口**：或者，可以在窗口达到大小限制后触发捕获。是否触发取决于时间或大小，哪一个先达到限制。'
- en: '**Capture Provider**: You can choose between Azure Storageand Azure Data Lake
    Store. The choice is yours as it does not imply any additional features or limits.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捕获提供者**：你可以选择Azure Storage和Azure Data Lake Store。选择权在你，因为这并不意味着额外的功能或限制。'
- en: '**Azure Storage Container/Data Lake Store**: Depending on your choice, you
    will have to choose a different kind of a container.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Storage 容器/数据湖存储**：根据你的选择，你需要选择不同类型的容器。'
- en: '**Capture file name format**: This Event Hub feature has a predefined set of
    formats for how your files will be stored. Unfortunately, it is impossible to
    make it fully customizable as it must contain the `{Namespace}`, `{EventHub}`,
    `{PartitionId}`, `{Year}`, `{Month}`, `{Day}`, `{Hour}`, `{Minute}` and `{Second}`
    fields.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捕获文件名格式**：此Event Hub功能有一组预定义的文件存储格式。不幸的是，无法完全自定义它，因为它必须包含`{Namespace}`、`{EventHub}`、`{PartitionId}`、`{Year}`、`{Month}`、`{Day}`、`{Hour}`、`{Minute}`和`{Second}`字段。'
- en: 'Once you are satisfied with your choice, you can save the form. After some
    time, your producers send data; you will see that data from each partition is
    captured:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对选择满意，就可以保存表单。在一段时间后，你的生产者发送数据，你会看到每个分区的数据被捕获：
- en: '![](img/51b60ba0-5c07-4830-b41d-5aba485cf9d4.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51b60ba0-5c07-4830-b41d-5aba485cf9d4.png)'
- en: 'What is more, they contain files with data in the following format:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，它们包含以下格式的数据文件：
- en: '[PRE12]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This data can be easily converted to JSON:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据可以轻松转换为JSON：
- en: '[PRE13]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You will find more about Avro in the *Further reading*section.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在*进一步阅读*章节中了解更多关于Avro的信息。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned many things about Azure Event Hub—how it works,
    what partitions are for, and how to leverage more advanced features such as consumer
    groups or the Event Hub Capture feature. I strongly encourage you to give it a
    try and play a little bit with this Azure service as it is a powerful tool for
    processing thousands of events per second. It is also pretty simple to use and
    does not require much time to get started.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已学到许多关于Azure Event Hub的内容——它是如何工作的，分区的用途，以及如何利用更高级的功能，如消费者组或Event Hub捕获功能。我强烈建议你尝试一下，亲自体验这个Azure服务，因为它是一个处理每秒成千上万事件的强大工具。它也非常易于使用，且不需要花费太多时间来上手。
- en: In the next chapter, you will learn about another service for processing many
    events, and additionally analyze and transform them in near real time—Azure Stream
    Analytics.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将了解另一项处理大量事件的服务，并且能够实时分析和转换它们——Azure Stream Analytics。
- en: Questions
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are consumer groups for?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消费者组是做什么的？
- en: How many events can be processed in one second using 1 TU?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用1 TU每秒可以处理多少事件？
- en: How many partitions should you use for each Event Hub?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个Event Hub应该使用多少个分区？
- en: Are TUs assigned to a namespace or a particular Event Hub?
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TUs是分配给命名空间还是特定的Event Hub？
- en: What are the three different permissions you can assign to an access policy?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以为访问策略分配哪三种不同的权限？
- en: Can an event publisher listen to incoming events using its token?
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件发布者可以使用其令牌监听传入的事件吗？
- en: What happens if you have more consumers than partitions?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果消费者数量超过分区数量，会发生什么？
- en: Further reading
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The full documentation on Event Hub disaster recovery of can be found here: [https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-geo-dr](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-geo-dr).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Event Hub灾难恢复的完整文档可以在这里找到：[https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-geo-dr](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-geo-dr)。
- en: Apache Avro Documentation can be found here: [https://avro.apache.org/](https://avro.apache.org/).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Avro文档可以在这里找到：[https://avro.apache.org/](https://avro.apache.org/)。
