- en: Chapter 1. Getting started with Puppet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用Puppet入门
- en: '|   | *For a list of all the ways technology has failed to improve the quality
    of life, please press three.* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *欲了解科技未能提升生活质量的所有方式，请按三号键。* |   |'
- en: '|   | --*Alice Kahn* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*爱丽丝·卡恩* |'
- en: In this chapter, you'll learn about some of the challenges of managing configuration
    on servers, some common solutions to these problems, and how automation tools
    such as Puppet can help. You'll also learn how to download the GitHub repository
    containing all of the source code and examples in this book, how to set up your
    own Vagrant virtual machine to run the code, and how to download and install Puppet.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解在服务器上管理配置的一些挑战，常见的解决方案，以及像Puppet这样的自动化工具如何提供帮助。你还将学习如何下载包含本书所有源代码和示例的GitHub仓库，如何设置你自己的Vagrant虚拟机来运行代码，以及如何下载和安装Puppet。
- en: Whether you're a system administrator, a developer who needs to wrangle servers
    from time to time, or just someone who's annoyed at how long it takes to deploy
    a new app, you'll have come across the kind of problems Puppet is designed to
    solve.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是系统管理员，还是偶尔需要操作服务器的开发人员，或者只是对部署新应用所需的时间感到烦恼的人，你都可能遇到Puppet旨在解决的那类问题。
- en: '![Getting started with Puppet](img/B08880_01_01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet入门](img/B08880_01_01.jpg)'
- en: Why do we need Puppet anyway?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要Puppet？
- en: 'Managing applications and services in production is hard work, and there are
    a lot of steps involved. To start with, you need some servers to serve the services.
    Luckily, these are readily available from your local cloud provider, at low, low
    prices. So you''ve got a server, with a base operating system installed on it,
    and you can log into it. So now what? Before you can deploy, you need to do a
    number of things:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中管理应用程序和服务是一项艰苦的工作，涉及许多步骤。首先，你需要一些服务器来提供服务。幸运的是，这些服务器可以从本地云服务商那里轻松获得，价格非常低廉。所以你已经拥有一台服务器，里面安装了基础操作系统，你可以登录了。那么接下来呢？在你进行部署之前，你还需要做一些事情：
- en: Add user accounts and passwords
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加用户帐户和密码
- en: Configure security settings and privileges
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置安全设置和权限
- en: Install all the packages needed to run the app
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装运行应用所需的所有软件包
- en: Customize the configuration files for each of these packages
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义这些软件包的配置文件
- en: Create databases and database user accounts; load some initial data
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库和数据库用户帐户；加载一些初始数据
- en: Configure the services that should be running
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置应该运行的服务
- en: Deploy the app code and static assets
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应用代码和静态资源
- en: Restart any affected services
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启任何受影响的服务
- en: Configure the machine for monitoring
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置机器以进行监控
- en: That's a lot to do—and for the next server you build, you'll need to do the
    exact same things all over again. There's something not right about that. Shouldn't
    there be an easier solution to this problem?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要做很多事情——而且下一个你构建的服务器，你还得完全重复一遍相同的操作。这样似乎不太对劲。难道没有更简便的解决方案吗？
- en: '**Wouldn''t it be nice if you could write an executable specification of how
    the server should be set up, and you could apply it to as many machines as you
    liked?**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你能写一个可执行的规范，定义服务器应该如何设置，并且能够将其应用到任意数量的机器上，岂不是很好吗？**'
- en: Keeping the configuration synchronized
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持配置的同步
- en: Setting up servers manually is tedious. Even if you're the kind of person who
    enjoys tedium, though, there's another problem to consider. What happens the next
    time you set up a server, a few weeks or months later?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 手动设置服务器非常繁琐。即使你是那种喜欢做繁琐事情的人，仍然有另一个问题需要考虑。下次你设置服务器时，几周或几个月后会发生什么呢？
- en: Your careful notes will no longer be up to date with reality. While you were
    on vacation, the developers installed a couple of new libraries that the app now
    depends on—I guess they forgot to tell you! They are under a lot of schedule pressure,
    of course. You could send out a sternly worded email demanding that people update
    the build document whenever they change something, and people might even comply
    with that. But even if they do update the documentation, no-one actually tests
    the new build process from scratch, so when you come to do it, you'll find it
    doesn't work anymore. Turns out that if you just upgrade the database in place,
    it's fine, but if you install the new version on a bare server, it's not.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你的细心笔记将不再与现实同步。在你度假期间，开发人员安装了几个应用现在依赖的新库——我猜你忘了告诉你！当然，他们面临着很大的进度压力。你可以发一封严厉的邮件，要求每个人在更改任何内容时都更新构建文档，大家也许会遵守。但即使他们更新了文档，实际上没有人会重新测试新构建过程，所以当你去做时，你会发现它不再有效。事实证明，如果只是升级现有数据库，一切正常，但如果在一台空白服务器上安装新版本，问题就出现了。
- en: Also, since the build document was updated, a new version of a critical library
    was released upstream. Because you always install the latest version as part of
    the build, your new server is now subtly different to the old one. This will lead
    to subtle problems which will take you three days, or three bottles of whiskey,
    to debug.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于构建文档已更新，上游发布了一个关键库的新版本。因为你总是在构建时安装最新版本，现在你新服务器的配置与旧服务器略有不同。这将导致一些微妙的问题，可能需要你三天时间，或者三瓶威士忌，才能调试出来。
- en: By the time you have four or five servers, they're all a little different. Which
    is the authoritative one? Or are they all slightly wrong? The longer they're around,
    the more they will drift apart. You wouldn't run four or five different versions
    of your app code at once, so what's up with that? Why is it acceptable for server
    configuration to be in a mess like this?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拥有四五台服务器时，它们之间总会有一些差异。哪一台才是权威的？还是它们都稍微出错了？它们存在的时间越久，偏差就越大。你不会同时运行四五个不同版本的应用代码，那么为什么服务器配置可以这么混乱呢？
- en: '**Wouldn''t it be nice** **if the state of configuration on all your machines
    could be regularly checked and synchronized with a central, standard version?**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果能够定期检查并将所有机器的配置状态与中央标准版本进行同步，岂不是很好吗？**'
- en: Repeating changes across many servers
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在多台服务器上重复更改
- en: Humans just aren't good at accurately repeating complex tasks over and over;
    that's why we invented robots. It's easy to make mistakes, miss things out, or
    be interrupted and lose track of what you've done.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 人类并不擅长准确地反复执行复杂任务；这就是我们发明机器人的原因。我们容易出错、遗漏某些内容，或者被打断，导致忘记自己做过的事情。
- en: Changes happen all the time, and it becomes increasingly difficult to keep things
    up to date and in sync as your infrastructure grows. Again, when you make a change
    to your app code, you don't go and make that change manually with a text editor
    on each server. You change it once and roll it out everywhere. Isn't your firewall
    setup just as much part of your code as your user model?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 变化随时发生，随着基础设施的增长，保持最新和同步变得越来越困难。同样地，当你更改应用代码时，你不会在每台服务器上使用文本编辑器手动修改这些更改。你只需修改一次，然后将其推广到所有地方。难道你的防火墙设置不像用户模型一样是你代码的一部分吗？
- en: '**Wouldn''t it be nice if you only had to make changes in one place, and they
    rolled out to your whole network automatically?**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你只需要在一个地方做出更改，并且这些更改能够自动地推广到整个网络，是不是很好呢？**'
- en: Self-updating documentation
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自我更新文档
- en: In real life, we're too busy to stop every five minutes and document what we
    just did. As we've seen, that documentation is of limited use anyway, even if
    it's kept fanatically up-to-date.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，我们太忙，无法每五分钟停下来记录我们刚刚做的事情。正如我们所看到的，即使文档保持着极其更新，它的实用性也是有限的。
- en: The only reliable documentation, in fact, is the state of the servers themselves.
    You can look at a server to see how it's configured, but that only applies while
    you still have the machine. If something goes wrong and you can't access the machine,
    or the data on it, your only option is to reconstruct the lost configuration from
    scratch.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，唯一可靠的文档就是服务器本身的状态。你可以查看一台服务器来了解它的配置，但这只适用于你仍然能访问那台机器的情况下。如果出现故障，你无法访问机器或其中的数据，你唯一的选择就是从头开始重建丢失的配置。
- en: '**Wouldn''t it be nice if you had a clear, human-readable build procedure which
    was independent of your servers, and was guaranteed to be up to date, because
    the servers are actually built from it?**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你有一个清晰、可读的人类构建过程，独立于你的服务器，并且保证是最新的，因为服务器实际上是根据它构建的，岂不是很好吗？**'
- en: Version control and history
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本控制和历史
- en: When you're making manual, ad hoc changes to systems, you can't roll them back
    to a point in time. It's hard to undo a whole series of changes; you don't have
    a way of keeping track of what you did and how things changed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当你手动对系统进行临时更改时，你无法将它们恢复到某个时间点。很难撤销一系列的更改；你没有办法记录你做了什么以及事情是如何变化的。
- en: This is bad enough when there's just one of you. When you're working in a team,
    it gets even worse, with everybody making independent changes and getting in each
    other's way.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当只有一个人时，这种情况已经很糟糕了。若是在团队中工作，情况会更糟，大家都在独立地做更改，互相干扰。
- en: When you have a problem, you need a way to know what changed and when, and who
    did it. And you also need to be able to set your configuration back to any previously
    stable state.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到问题时，你需要一种方式来知道是什么时候发生了变化，谁做的变化。你还需要能够将配置恢复到任何以前的稳定状态。
- en: '**Wouldn''t it be nice if you could go back in time?**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你能回到过去，岂不是很好吗？**'
- en: Why not just write shell scripts?
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不直接写 shell 脚本？
- en: 'Many people manage configuration with shell scripts, which is better than doing
    it manually, but not much. Some of the problems with shell scripts include the
    following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人使用 shell 脚本来管理配置，这比手动做要好一些，但也没有好到哪里去。shell 脚本的一些问题包括：
- en: Fragile and non-portable
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脆弱且不可移植
- en: Hard to maintain
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 难以维护
- en: Not easy to read as documentation
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为文档阅读起来不容易
- en: Very site-specific
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常依赖于特定环境
- en: Not a good programming language
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不是一种好的编程语言
- en: Hard to apply changes to existing servers
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很难对现有的服务器应用更改
- en: Why not just use containers?
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不直接使用容器？
- en: Containers! Is there any word more thrilling to the human soul? Many people
    feel as though containers are going to make configuration management problems
    just go away. This feeling rarely lasts beyond the first few hours of trying to
    containerize an app. Yes, containers make it easy to deploy and manage software,
    but where do containers come from? It turns out someone has to build and maintain
    them, and that means managing Dockerfiles, volumes, networks, clusters, image
    repositories, dependencies, and so on. In other words, configuration. There is
    an axiom of computer science which I just invented, called *The Law of Conservation
    of Pain*. If you save yourself pain in one place, it pops up again in another.
    Whatever cool new technology comes along, it won't solve all our problems; at
    best, it will replace them with refreshingly different problems.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 容器！还有什么词能比这个更让人激动吗？许多人觉得容器能够让配置管理的问题迎刃而解。但这种感觉通常在试图容器化一个应用程序的最初几个小时之后就消失了。是的，容器让软件的部署和管理变得更容易，但容器到底是从哪里来的呢？事实证明，容器必须由人来构建和维护，这意味着需要管理
    Dockerfile、数据卷、网络、集群、镜像仓库、依赖项等。换句话说，就是配置。计算机科学有一个我刚刚发明的公理，叫做*痛苦守恒定律*。如果你在一个地方避免了痛苦，它会在另一个地方重新出现。无论什么新技术诞生，都无法解决我们所有的问题；顶多，它会将这些问题替换成一些不同的、令人耳目一新的问题。
- en: Yes, containers are great, but the truth is, container-based systems require
    even more configuration management. You need to configure the nodes that run the
    containers, build and update the container images based on a central policy, create
    and maintain the container network and clusters, and so on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，容器很棒，但事实上，基于容器的系统需要更多的配置管理。你需要配置运行容器的节点，基于中央策略构建和更新容器镜像，创建和维护容器网络与集群等等。
- en: Why not just use serverless?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不直接使用无服务器架构（serverless）？
- en: 'If containers are powered by magic pixies, serverless architectures are pure
    fairy dust. The promise is that you just push your app to the cloud, and the cloud
    takes care of deploying, scaling, load balancing, monitoring, and so forth. Like
    most things, the reality doesn''t quite live up to the marketing. Unfortunately,
    serverless isn''t actually serverless: it just means your business is running
    on servers you don''t have direct control over, plus, you have higher fixed costs
    because you''re paying someone else to run them for you. Serverless can be a good
    way to get started, but it''s not a long-term solution, because ultimately, you
    need to own your own configuration.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器是由魔法小精灵驱动的，那么无服务器架构就是纯粹的仙尘。承诺是你只需将应用推送到云端，云端就会负责部署、扩展、负载均衡、监控等等。像大多数事情一样，现实并没有完全符合市场宣传。不幸的是，无服务器并不是真正的“无服务器”：它只是意味着你的业务运行在你无法直接控制的服务器上，并且你有更高的固定成本，因为你在为别人管理这些服务器付费。无服务器可以作为一个不错的起点，但它不是长期解决方案，因为最终你需要拥有自己的配置。
- en: Configuration management tools
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置管理工具
- en: '**Configuration** **management** (**CM**) tools are the modern, sensible way
    to manage infrastructure as code. There are many such tools available, all of
    which operate more or less the same way: you specify your desired configuration
    state, using editable text files and a model of the system''s resources, and the
    tool compares the current state of each **node** (the term we use for configuration-managed
    servers) with your desired state and makes any changes necessary to bring it in
    line.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置** **管理**（**CM**）工具是以代码形式管理基础设施的现代且合理的方式。有许多此类工具，它们的工作方式或多或少相同：你通过可编辑的文本文件和系统资源的模型指定所需的配置状态，工具会将每个**节点**（我们用来表示配置管理服务器的术语）的当前状态与所需状态进行比较，并进行必要的更改以使其保持一致。'
- en: As with most unimportant things, there is a great deal of discussion and argument
    on the Internet about which CM tool is the best. While there are significant differences
    in approaches and capabilities between different tools, don't let that obscure
    the fact that using a tool of any sort to manage configuration is much better
    than trying to do it by hand.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如大多数无关紧要的事情一样，互联网上有大量关于哪个 CM 工具最好讨论和争论。虽然不同工具在方法和功能上有显著差异，但不要被这些因素掩盖了一个事实：使用任何工具来管理配置，远比手动操作要好得多。
- en: That said, while there are many CM tools available, Puppet is an excellent choice.
    No other tool is more powerful, more portable, or more widely adopted. In this
    book, I'm going to show you what makes Puppet so good and the things that only
    Puppet can do.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，虽然有许多 CM 工具可用，但 Puppet 是一个出色的选择。没有任何工具比它更强大、更具可移植性或更广泛被采用。在本书中，我将向你展示是什么使
    Puppet 如此优秀，以及只有 Puppet 才能做的事情。
- en: What is Puppet?
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Puppet？
- en: 'Puppet is two things: a language for expressing the desired state (how your
    nodes should be configured), and an engine that interprets code written in the
    Puppet language and applies it to the nodes to bring about the desired state.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 是两样东西：一种表达所需状态的语言（即如何配置你的节点），以及一个引擎，能够解释用 Puppet 语言编写的代码并将其应用到节点上，从而实现所需状态。
- en: 'What does this language look like? It''s not exactly a series of instructions,
    like a shell script or a Ruby program. It''s more like a set of declarations about
    the way things should be. Have a look at the following example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语言看起来像什么？它不像一系列指令，像是 shell 脚本或 Ruby 程序。更像是一组关于事物应该如何的声明。看一下下面的例子：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In English, this code says, "The `curl` package should be installed." When
    you apply this manifest (Puppet programs are called manifests), the tool will
    do the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 用英文，这段代码表示：“应安装`curl`包。”当你应用这个清单（Puppet 程序称为清单）时，工具会执行以下操作：
- en: Check the list of installed packages on the node to see if `curl` is already
    installed.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查节点上已安装的包列表，查看是否已安装`curl`。
- en: If it is, do nothing.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是，什么也不做。
- en: If not, install it.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有，安装它。
- en: 'Here''s another example of Puppet code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个 Puppet 代码的例子：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is Puppet language for the declaration, "The `bridget` user should be present."
    (The keyword `ensure` means "the desired state of the resource is..."). Again,
    this results in Puppet checking for the existence of the `bridget` user on the
    node, and creating it if necessary. This is also a kind of documentation that
    expresses human-readable statements about the system in a formal way. The code
    expresses the author's desire that Bridget should always be present.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Puppet 语言的声明，表示“`bridget` 用户应该存在。”（关键字 `ensure` 意味着“资源的期望状态是...”）。再次强调，这会导致
    Puppet 检查 `bridget` 用户是否存在于节点上，并在必要时创建它。这也是一种文档，正式地以人类可读的方式表达系统的声明。代码表达了作者希望 `bridget`
    用户始终存在的愿望。
- en: So you can see that the Puppet program—the Puppet **manifest**—for your configuration
    is a set of declarations about what things should exist, and how they should be
    configured.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以看到 Puppet 程序——Puppet **清单**——是关于应该存在什么内容以及它们应该如何配置的一组声明。
- en: You don't give commands, like "Do this, then do that". Rather, you describe
    how things should be, and let Puppet take care of making it happen. These are
    two quite different kinds of programming. One kind (so-called procedural style)
    is the traditional model used by languages such as C, Python, shell, and so on.
    Puppet's is called declarative style because you declare what the end result should
    be, rather than specify the steps to get there.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您不会发出“做这个，然后做那个”这样的命令。相反，您描述事物应该如何，剩下的交给 Puppet 去实现。这是两种完全不同的编程方式。一种（所谓的过程式风格）是传统的模型，像
    C、Python、shell 等语言都使用这种模型。Puppet 的风格被称为声明式风格，因为您声明最终结果应该是什么，而不是指定实现步骤。
- en: This means that you can apply the same Puppet manifest repeatedly to a node
    and the end result will be the same, no matter how many times you apply the manifest.
    It's better to think of Puppet manifests as a kind of specification, or declaration,
    rather than as a program in the traditional sense.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您可以将相同的 Puppet 清单重复应用到一个节点上，无论应用多少次，最终的结果都会相同。更好地理解 Puppet 清单，它更像是一种规范或声明，而不是传统意义上的程序。
- en: Resources and attributes
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源和属性
- en: Puppet lets you describe configuration in terms of **resources** (types of things
    that can exist, such as users, files, or packages) and their **attributes** (appropriate
    properties for the type of resource, such as the home directory for a user, or
    the owner and permissions for a file). You don't have to get into the details
    of how resources are created and configured on different platforms. Puppet takes
    care of it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 允许您通过 **资源**（可以存在的事物类型，如用户、文件或软件包）及其 **属性**（资源类型的适当属性，如用户的主目录，或文件的所有者和权限）来描述配置。您不必深入了解资源在不同平台上是如何创建和配置的。Puppet
    会为您处理这些事情。
- en: The power of this approach is that a given manifest can be applied to different
    nodes, all running different operating systems, and the results will be the same
    everywhere.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优势在于，给定的清单可以应用于不同的节点，这些节点可能运行不同的操作系统，结果在各处都会相同。
- en: Puppet architectures
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet 架构
- en: It's worth noting that there are two different ways to use Puppet. The first
    way, known as **agent/master architecture**, uses a special node dedicated to
    running Puppet, which all other nodes contact to get their configuration.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Puppet 有两种不同的使用方式。第一种方式被称为 **代理/主节点架构**，它使用一个专门的节点来运行 Puppet，所有其他节点都与这个节点联系以获取其配置。
- en: The other way, known as **stand-alone Puppet** or **masterless**, does not need
    a special Puppet master node. Puppet runs on each individual node and does not
    need to contact a central location to get its configuration. Instead, you use
    Git, or any other way of copying files to the node, such as SFTP or `rsync`, to
    update the Puppet manifests on each node.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方式被称为 **独立 Puppet** 或 **无主模式**，不需要专门的 Puppet 主节点。Puppet 在每个独立的节点上运行，并不需要联系一个中央位置来获取其配置。相反，您可以使用
    Git 或其他任何复制文件到节点的方式，如 SFTP 或 `rsync`，来更新每个节点上的 Puppet 清单。
- en: Both stand-alone and agent/master architectures are officially supported by
    Puppet. It's your choice which one you prefer to use. In this book, I will cover
    only the stand-alone architecture, which is simpler and easier for most organizations,
    but almost everything in the book will work just the same whether you use agent/master
    or stand-alone Puppet.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是独立架构还是代理/主节点架构，都得到 Puppet 官方的支持。您可以根据自己的喜好选择使用哪种方式。在本书中，我将仅讨论独立架构，这对于大多数组织来说更简单、更易于操作，但无论您使用代理/主节点架构还是独立架构，本书中的几乎所有内容都将一样适用。
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To set up Puppet with an agent/master architecture, consult the official Puppet
    documentation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 若要设置带有代理/主控架构的 Puppet，请参考官方 Puppet 文档。
- en: Getting ready for Puppet
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Puppet 做准备
- en: Although Puppet is inherently cross-platform and works with many different operating
    systems, for the purposes of this book, I'm going to focus on just one operating
    system, namely the **Ubuntu 16.04 LTS** distribution of Linux, and the most recent
    version of Puppet, Puppet 5\. However, all the examples in the book should work
    on any recent operating system or Puppet version with only minor changes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Puppet 本身是跨平台的，且支持多种操作系统，但本书将重点讲解一个操作系统，即 **Ubuntu 16.04 LTS** 版的 Linux，以及
    Puppet 的最新版本 Puppet 5。不过，本书中的所有示例应该在任何最新操作系统或 Puppet 版本上都能正常运行，只需做一些微小的调整。
- en: You will probably find that the best way to read this book is to follow along
    with the examples using a Linux machine of your own. It doesn't matter whether
    this is a physical server, desktop or laptop, cloud instance, or a virtual machine.
    I'm going to use the popular Vagrant software to run a virtual machine on my own
    computer, and you can do the same. The public GitHub repository for this book
    contains a Vagrantfile, which you can use to get up and running with Puppet in
    just a few steps.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现，阅读本书的最佳方式是使用你自己的 Linux 机器，按照示例进行操作。无论这是一台物理服务器、桌面或笔记本电脑、云实例，还是虚拟机，都没关系。我将使用流行的
    Vagrant 软件在自己的计算机上运行虚拟机，你也可以这样做。本书的 GitHub 公共仓库包含一个 Vagrantfile，你可以使用它仅需几步就能启动并运行
    Puppet。
- en: Installing Git and downloading the repo
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Git 并下载仓库
- en: 'To get a copy of the repo that accompanies this book, follow these steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 若要获取本书随附的仓库副本，请按照以下步骤操作：
- en: Browse to [https://git-scm.com/downloads](https://git-scm.com/downloads)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到 [https://git-scm.com/downloads](https://git-scm.com/downloads)
- en: Download and install the right version of Git for your operating system.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装适合你操作系统的 Git 版本。
- en: 'Run the following command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE2]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Installing VirtualBox and Vagrant
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 VirtualBox 和 Vagrant
- en: 'If you already have a Linux machine or cloud server you''d like to use for
    working through the examples, skip this section and move on to the next chapter.
    If you''d like to use VirtualBox and Vagrant to run a local **virtual machine**
    (**VM**) on your computer to use with the examples, follow these instructions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有一台 Linux 机器或云服务器，可以用来执行示例，请跳过本节并进入下一章。如果你希望使用 VirtualBox 和 Vagrant 在你的计算机上运行本地
    **虚拟机**（**VM**）来配合示例使用，请按照以下说明操作：
- en: Browse to [https://www.virtualbox.org/](https://www.virtualbox.org/)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到 [https://www.virtualbox.org/](https://www.virtualbox.org/)
- en: Download and install the right version of VirtualBox for your operating system
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装适用于你操作系统的 VirtualBox 版本
- en: Browse to [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到 [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)
- en: 'Select the right version of Vagrant for your operating system: OS X, Windows,
    and so on'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适合你操作系统的 Vagrant 版本：OS X、Windows 等
- en: Follow the instructions to install the software
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照提示安装软件
- en: Running your Vagrant VM
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行你的 Vagrant 虚拟机
- en: 'Once you have installed Vagrant, you can start the Puppet Beginner''s Guide
    virtual machine:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完 Vagrant 后，你可以启动 Puppet 初学者指南虚拟机：
- en: 'Run the following commands:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE3]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Vagrant will begin downloading the base box. Once that has booted, it will install
    Puppet. This may take a while, but once the installation is complete, the virtual
    machine will be ready to use.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Vagrant 将开始下载基础框。下载完成并启动后，它会安装 Puppet。这可能需要一些时间，但安装完成后，虚拟机就可以使用了。
- en: 'Connect to the VM with the following command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令连接到虚拟机：
- en: '[PRE4]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You now have a command-line shell on the VM. Check that Puppet is installed
    and working by running the following command (you may get a different version
    number, which is fine):'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在已经在虚拟机上获得了命令行 Shell。通过运行以下命令检查 Puppet 是否已安装并正常工作（你可能会得到不同的版本号，这没问题）：
- en: '[PRE5]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you''re using Windows, you may need to install the PuTTY software to connect
    to your VM. There is some helpful advice about using Vagrant on Windows at:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows，可能需要安装 PuTTY 软件才能连接到你的虚拟机。关于在 Windows 上使用 Vagrant 的一些有用建议可以在这里找到：
- en: '[http://tech.osteel.me/posts/2015/01/25/how-to-use-vagrant-on-windows.html](http://tech.osteel.me/posts/2015/01/25/how-to-use-vagrant-on-windows.html)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://tech.osteel.me/posts/2015/01/25/how-to-use-vagrant-on-windows.html](http://tech.osteel.me/posts/2015/01/25/how-to-use-vagrant-on-windows.html)'
- en: Troubleshooting Vagrant
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除 Vagrant
- en: 'If you have any problems running the VM, look for help on the VirtualBox or
    Vagrant websites. In particular, if you have an older machine, you may see a message
    like the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行虚拟机时遇到任何问题，可以访问VirtualBox或Vagrant的网站寻求帮助。特别是，如果你使用的是较旧的机器，可能会看到如下信息：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your computer may have a BIOS setting to enable 64-bit hardware virtualization
    (depending on the manufacturer, the trade name for this is either **VT-x** or
    **AMD-V**). Enabling this feature may fix the problem. If not, you can try the
    32-bit version of the Vagrant box instead. Edit the file named `Vagrantfile` in
    the Git repository, and comment out the following line with a leading `#` character:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你的计算机可能有一个BIOS设置，用于启用64位硬件虚拟化（根据制造商的不同，这个功能的名称可能是**VT-x**或**AMD-V**）。启用此功能可能会解决问题。如果没有效果，你可以尝试使用Vagrant盒子的32位版本。编辑Git仓库中名为`Vagrantfile`的文件，并通过在前面加上`#`字符来注释掉以下行：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Uncomment the following line by removing the leading `#` character:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过删除前导的`#`字符来取消注释以下行：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now re-run the `scripts/start_vagrant.sh` command.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重新运行`scripts/start_vagrant.sh`命令。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the various problems that configuration management
    tools can help solve, and how Puppet in particular models the aspects of system
    configuration. We checked out the Git repository of example code for this book,
    installed VirtualBox and Vagrant, started the Vagrant VM, and ran Puppet for the
    first time.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了配置管理工具可以帮助解决的各种问题，特别是Puppet如何建模系统配置的各个方面。我们查看了本书示例代码的Git仓库，安装了VirtualBox和Vagrant，启动了Vagrant虚拟机，并首次运行了Puppet。
- en: In the next chapter, we'll write our first Puppet manifests, get some insight
    into the structure of Puppet resources and how they're applied, and learn about
    the `package`, `file`, and `service` resources.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将编写我们的第一个Puppet清单，了解Puppet资源的结构以及如何应用它们，并学习`package`、`file`和`service`资源。
