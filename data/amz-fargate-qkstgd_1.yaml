- en: Getting Started with Amazon ECS and Amazon Fargate
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门 Amazon ECS 和 Amazon Fargate
- en: Docker can be installed on the most commonly used OS platforms. CoreOS has Docker
    pre-installed, and is designed specifically for running Docker containers. Docker
    for AWS provides an out-of-the-box Docker swarm mode in which a cluster of nodes,
    called a swarm, provides a distributed platform for running Docker container applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 可以安装在最常用的操作系统平台上。CoreOS 预安装 Docker，并且专为运行 Docker 容器而设计。Docker for AWS
    提供了一个开箱即用的 Docker swarm 模式，在这个模式中，一个节点集群（称为 swarm）提供分布式平台以运行 Docker 容器应用程序。
- en: '**Problem:** All the aforementioned Docker platforms are only different types
    of Docker installations, and require Docker containers to run and be managed on
    the command line.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：** 所有上述 Docker 平台仅是不同类型的 Docker 安装，并且需要在命令行中运行并管理 Docker 容器。'
- en: '**Solution:** Amazon **ECS** (**Elastic Container Service**) is a managed service
    for Docker containers with built-in support for scaling, load balancing, networking,
    storage, logging, and other Docker container management tasks. Amazon ECS supports
    two launch types: EC2 and Fargate.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：** Amazon **ECS**（**弹性容器服务**）是一个为 Docker 容器提供的托管服务，内置支持扩展、负载均衡、网络、存储、日志记录和其他
    Docker 容器管理任务。Amazon ECS 支持两种启动类型：EC2 和 Fargate。'
- en: With the EC2 launch type, EC2 instances are started to run Docker containers.
    The Fargate launch type, which was introduced recently (November 2017), hosts
    tasks that encapsulate Docker containers. The tasks are directly made accessible
    to the user via an **Elastic Network Interface** (**ENI**). The EC2 instances
    on which Fargate is provisioned are not exposed to the user and are not directly
    accessible.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 EC2 启动类型下，会启动 EC2 实例来运行 Docker 容器。Fargate 启动类型（于 2017 年 11 月推出）则托管封装 Docker
    容器的任务。任务通过 **弹性网络接口**（**ENI**）直接向用户提供。Fargate 提供的 EC2 实例不会暴露给用户，也无法直接访问。
- en: 'In this chapter, we will learn about the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括以下内容：
- en: What Amazon Fargate is
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Amazon Fargate
- en: Benefits of Fargate
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fargate 的好处
- en: Amazon ECS objects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon ECS 对象
- en: Compute resources in Amazon ECS Fargate
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon ECS Fargate 中的计算资源
- en: What's new in the Amazon Fargate launch type mode?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Fargate 启动类型模式中的新变化是什么？
- en: What Amazon Fargate is
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Amazon Fargate
- en: '**Amazon Fargate** is a new launch type for Amazon ECS and Amazon **EKS** (**Elastic
    Kubernetes Service**)-managed orchestration services for Docker containers on
    AWS. With the Fargate launch type, the infrastructure is fully provisioned by
    Fargate. It is serverless, and no EC2 instances are exposed to the user. Docker
    containers are defined as container definitions within a task definition. A service
    implements the task definition to run one or more tasks. Each task is associated
    with an ENI. If the auto-assignment of the public IP at the task level is enabled,
    a public IP on which an external client may access a task is automatically assigned
    to a task. Tasks communicate with each other over a private IP.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Fargate** 是 Amazon ECS 和 Amazon **EKS**（**弹性 Kubernetes 服务**）管理的用于
    AWS 上 Docker 容器编排服务的全新启动类型。在 Fargate 启动类型下，基础设施完全由 Fargate 提供。它是无服务器的，且没有 EC2
    实例暴露给用户。Docker 容器在任务定义中作为容器定义进行定义。服务实现任务定义来运行一个或多个任务。每个任务与一个 ENI 关联。如果启用了任务级别的公共
    IP 自动分配，则会自动将外部客户端可访问任务的公共 IP 分配给任务。任务之间通过私有 IP 进行通信。'
- en: Benefits of Fargate
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fargate 的好处
- en: 'The benefits in ECS are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ECS 的好处如下：
- en: A managed service for containerized applications that does not require much
    user input to run Docker applications
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个为容器化应用程序提供的托管服务，无需用户过多操作即可运行 Docker 应用程序
- en: Microservices consisting of multiple applications run in isolated containers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由多个应用程序组成的微服务在隔离的容器中运行
- en: Auto scales tasks based on application load
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据应用程序负载自动扩展任务
- en: Integrates with other AWS services including IAM, CloudWatch Logs, Elastic Load
    Balancing, CloudFormation templates, EBS Volumes, Batch, ECR, and CloudTrail logs
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他 AWS 服务集成，包括 IAM、CloudWatch 日志、弹性负载均衡、CloudFormation 模板、EBS 卷、批处理、ECR 和 CloudTrail
    日志
- en: A **virtual private cloud** (**VPC**) with no resources shared with other users
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 **虚拟私有云**（**VPC**），没有与其他用户共享的资源
- en: Provides support for running a CodePipeline with ECS as the deployment platform
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供对使用 ECS 作为部署平台的 CodePipeline 的支持
- en: Supports the latest Docker version 17.0
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持最新的 Docker 版本 17.0
- en: 'Fargate provides the following additional benefits:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Fargate 提供以下额外的好处：
- en: With a Fargate launch type, a user does not create or manage any EC2 instances,
    as none are exposed on the cluster.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Fargate 启动类型时，用户无需创建或管理任何 EC2 实例，因为集群中不会暴露任何实例。
- en: Tasks are directly exposed to the user via an ENI.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务通过 ENI 直接暴露给用户。
- en: The underlying infrastructure is provisioned by Fargate. EC2 instances are not
    to be managed with the Fargate launch type.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施由 Fargate 提供，不需要使用 Fargate 启动类型来管理 EC2 实例。
- en: CodePipeline supports Fargate as a deployment platform.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CodePipeline 支持将 Fargate 作为部署平台。
- en: Microservices based on Container definitions encapsulated in a task definition
    are explicitly linked, and are not to be linked with any additional options, such
    as links.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于任务定义中封装的容器定义的微服务是显式链接的，不需要与任何额外的选项（如链接）进行关联。
- en: CloudWatch Logs may be auto configured.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudWatch Logs 可能会自动配置。
- en: Amazon ECS objects
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon ECS 对象
- en: 'Amazon ECS objects with Fargate are the same as for the EC2 launch type. An
    ECS cluster is the outermost encapsulation, and it consists of one or more services.
    A cluster could be distributed over multiple availability zones. A service is
    an implementation of a task definition, and runs one or more tasks. A task definition
    could have one or more task revisions. A task revision is a distinct task definition
    with a set of tasks and a service associated with it. One Fargate instance is
    associated with a set of tasks in a service. A task definition consists of zero
    or more container definitions. Typically, a task definition would be associated
    with one or more container definitions, and a task definition that does not consist
    of any container definition would not run any task containers. A diagram of ECS
    objects is shown as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Fargate 的 Amazon ECS 对象与 EC2 启动类型相同。ECS 集群是最外层的封装，它由一个或多个服务组成。一个集群可以分布在多个可用区。服务是任务定义的实现，并运行一个或多个任务。任务定义可能有一个或多个任务版本。任务版本是一个独特的任务定义，包含一组任务，并与一个服务关联。一个
    Fargate 实例与服务中的一组任务关联。任务定义由零个或多个容器定义组成。通常，一个任务定义会与一个或多个容器定义关联，且没有容器定义的任务定义将不会运行任何任务容器。ECS
    对象的示意图如下：
- en: '![](img/d19da398-819a-4a30-8926-7b851be6f251.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d19da398-819a-4a30-8926-7b851be6f251.jpg)'
- en: A Task definition is an application template and describes one or more containers.
    While some attributes or settings are configured at the task level, most of them
    are configured at the container level. Multiple revisions may be associated with
    a task definition.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任务定义是一个应用程序模板，描述了一个或多个容器。虽然某些属性或设置在任务级别配置，但大多数属性在容器级别配置。任务定义可能关联多个版本。
- en: A Service implements a task definition, and defines a desired count for tasks
    to run for a task definition. Optional features such as auto scaling and load
    balancing are configured in the service.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 服务实现了一个任务定义，并为任务定义定义了期望的任务运行数量。服务中配置了如自动扩展和负载均衡等可选功能。
- en: A Cluster in an ECS service is a grouping of one or more container services.
    A cluster name must be unique within an account. A cluster called default is provisioned
    by default.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ECS 服务中的集群是一个或多个容器服务的组合。集群名称在一个账户内必须唯一。默认会提供一个名为 default 的集群。
- en: Compute resources in Amazon ECS Fargate
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon ECS Fargate 的计算资源
- en: Task size consists of Task memory (GB) and Task CPU (vCPU). While optional in
    the EC2 launch type, task size is required with the Fargate launch type. Docker
    container level memory and CPU settings may optionally be defined, but are overridden
    by task definition level settings. Only specific combinations of task memory and
    task CPU are supported, and the ECS wizard indicates with a message the supported
    value (or range of values) for a selected value. As an example, the valid CPU
    range for 1 GB memory is 0.25 vCPU to 0.5 vCPU. The total resources (memory or
    CPU) configured at the container level must not exceed the task level resource
    settings. As an example, if a task definition consists of two containers (MySQL and
    WordPress) with a memory limit of 128 MB for each container, the task level memory
    must be at least 256 MB. Also, the total of container level memory must not exceed
    256 MB. Similarly for the CPU. Two memory limits may be defined at the container
    level: Soft limit and Hard limit. The Soft limit corresponds to the `memoryReservation`
    attribute at the task level, and the Hard limit corresponds to the `memory` attribute
    at the task level. The sum of container memory reservations (Soft limits) must
    not exceed the task memory. The Hard limit for each container must not exceed
    the memory configured at the task level. A minimum of 4 GB must be specified by
    default for a container.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 任务大小由任务内存（GB）和任务CPU（vCPU）组成。在EC2启动类型中，任务大小是可选的，但在Fargate启动类型中，任务大小是必需的。可以选择性地定义Docker容器级别的内存和CPU设置，但这些设置会被任务定义级别的设置覆盖。只有特定的任务内存和任务CPU组合是受支持的，ECS向导会通过消息指示所选值的支持值（或值范围）。例如，1GB内存的有效CPU范围是0.25
    vCPU到0.5 vCPU。在容器级别配置的总资源（内存或CPU）不得超过任务级别的资源设置。例如，如果一个任务定义包含两个容器（MySQL和WordPress），每个容器的内存限制为128MB，则任务级别的内存必须至少为256MB。同时，容器级别的内存总和不得超过256MB。CPU的配置同理。容器级别可以定义两个内存限制：软限制和硬限制。软限制对应于任务级别的`memoryReservation`属性，硬限制对应于任务级别的`memory`属性。容器的内存保留总和（软限制）不得超过任务内存。每个容器的硬限制不得超过任务级别配置的内存。容器默认必须指定最小4GB的内存。
- en: 'An example task size is shown in the following screenshot, in which the Task
    memory (`memory` attribute) is set to 0.5 GB (512 GB), and the Task CPU is set
    to 0.25 vCPU. At the container level, as configured in the two container definitions,
    the memory reservation is 128 MB for each container, which makes the total memory
    reservation of 256 MB well within the 512 GB allocated at the task level. The
    task size is allocated to a task, whether used or not. Similarly, the number of CPU
    Units configured for each container is 10, which makes the total CPU units 20
    for containers within the CPU units, 25 are allocated at the task level. Refer
    to the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了一个示例任务大小，其中任务内存（`memory`属性）设置为0.5GB（512MB），任务CPU设置为0.25 vCPU。在容器级别，根据两个容器定义，内存保留为每个容器128MB，这使得任务级别分配的512MB内存足以容纳总共256MB的内存保留。无论是否使用，任务大小都会分配给任务。同样，每个容器配置的CPU单元数为10，这使得容器内的CPU单元总数为20，而任务级别分配的CPU单元数为25。参考以下截图：
- en: '![](img/090df530-6159-4804-8bd6-b851d8cc3084.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/090df530-6159-4804-8bd6-b851d8cc3084.jpg)'
- en: Task size configuration and allocation for containers
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的任务大小配置和分配
- en: What is new in the Amazon Fargate launch type mode?
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊Fargate启动类型模式有什么新变化？
- en: 'In addition to and concomitant with the Fargate benefits discussed earlier,
    Fargate supports the following new features:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面讨论的Fargate的优势外，Fargate还支持以下新功能：
- en: Networking mode, `awsvpc`, is the only supported mode
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络模式`awsvpc`是唯一受支持的模式
- en: Host port mappings are not valid with the Fargate launch type networking mode
    (`awsvpc`), and host ports on which an application is exposed are the same as
    the container ports
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fargate启动类型的网络模式（`awsvpc`）不支持主机端口映射，应用程序暴露的主机端口与容器端口相同
- en: '`ecsTaskExecutionRole` is added for the Fargate launch type to allow for pulling
    Docker images and sending logs to CloudWatch Logs'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Fargate启动类型新增了`ecsTaskExecutionRole`，以允许拉取Docker镜像并将日志发送到CloudWatch Logs
- en: Only the `awslogs` log configuration and `awslogs` log driver are supported
    with CloudWatch Logs
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅支持`awslogs`日志配置和`awslogs`日志驱动程序与CloudWatch Logs。
- en: Task placement is not supported, as no ECS instances are provisioned to define
    placement constraints for
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持任务放置，因为没有ECS实例来定义放置约束
- en: Only Docker images on Docker Hub and Amazon ECR are supported
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅支持来自Docker Hub和Amazon ECR的Docker镜像。
- en: Privileged Windows containers are not supported for the Fargate launch type
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fargate 启动类型不支持特权 Windows 容器
- en: Host devices cannot be exposed to a container
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机设备不能暴露给容器
- en: The `host` and `sourcePath` parameters for volumes are not supported with the
    Fargate launch type
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fargate 启动类型不支持 `host` 和 `sourcePath` 参数用于卷
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this introductory chapter, we discussed the benefits of using the Fargate
    launch type, how compute resources are distributed and configured with the Fargate
    launch type, how the ECS objects with Fargate are the same as for the EC2 launch
    type, and the new features in Fargate. In the next chapter, we shall discuss networking
    as used with Fargate.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章简介中，我们讨论了使用 Fargate 启动类型的好处，计算资源如何在 Fargate 启动类型下分配和配置，使用 Fargate 的 ECS 对象与
    EC2 启动类型的相同之处，以及 Fargate 中的新特性。在下一章，我们将讨论与 Fargate 配合使用的网络配置。
