- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Foundations of Cloud Architecture – Virtual Machines and Infrastructure-as-a-Services
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云架构基础 – 虚拟机与基础设施即服务（IaaS）
- en: 'This book aims to help you master Terraform, but what does it take to be a
    true master? Terraform is an **Infrastructure-as-Code** (**IaC**) tool that enables
    you to describe your cloud architecture using code. Without a solid understanding
    of the underlying architecture, you can never become a true master of Terraform.
    Therefore, I’ve included the next few chapters to provide the groundwork for ubiquitous
    architectural concepts across cloud platforms to lay the foundation for later
    chapters, when we will build sophisticated cloud architectures in three distinct
    cloud computing paradigms:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助你掌握Terraform，但成为真正的Terraform大师需要什么条件呢？Terraform是一个**基础设施即代码**（**IaC**）工具，能够帮助你通过代码描述云架构。如果没有对基础架构的深入理解，你永远无法成为Terraform的真正大师。因此，我在接下来的章节中将提供一些基础概念，为后续章节打下基础，届时我们将在三种不同的云计算范式下构建复杂的云架构：
- en: Virtual machines
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机
- en: Containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器
- en: Serverless
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器
- en: With this foundation, you will understand the necessary concepts to follow along
    with the solution architectures we will build in later chapters.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些基础知识，你将理解必要的概念，以便跟随后续章节中我们所构建的解决方案架构。
- en: In this chapter, we will focus on the key concepts that are critical for understanding,
    architecting, and automating virtual machine-based solutions. First, we will lay
    a foundation for fundamental networking concepts such as subnets, routing, perimeter-based
    security, peering, **Virtual Private Networks** (**VPNs**), and dedicated network
    connections.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注理解、架构设计和自动化基于虚拟机的解决方案所必需的关键概念。首先，我们将为一些基本的网络概念打下基础，例如子网、路由、边界安全、对等连接、**虚拟专用网络**（**VPNs**）以及专用网络连接。
- en: Next, we’ll delve into the basic anatomy of virtual machines, including disks
    and network interfaces. We will then be considering the subtle nuances between
    Windows and Linux virtual machines. Next, we will cover auto-scaling.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入探讨虚拟机的基本结构，包括磁盘和网络接口。然后，我们将考虑Windows和Linux虚拟机之间的微妙差异。接下来，我们将介绍自动扩展。
- en: Finally, we’ll round it out by discussing how virtual machines are provisioned,
    covering both mutable and immutable infrastructure practices and their corresponding
    IaC practices and tools.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将通过讨论虚拟机的配置来总结这一部分内容，涵盖可变基础设施和不可变基础设施的实践，以及相应的基础设施即代码（IaC）实践和工具。
- en: 'This chapter covers the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及以下内容：
- en: Understanding the key concepts of networking
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解网络的关键概念
- en: Understanding the key concepts of compute
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解计算的关键概念
- en: Understanding the role of virtual machine images
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解虚拟机镜像的作用
- en: Understanding the key concepts of networking
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解网络的关键概念
- en: 'Depending on how you and your organization plan on leveraging the cloud, you
    will likely work with one or more of the three paradigms for provisioning infrastructure:
    virtual machines, containers, or serverless. Each paradigm has different benefits
    and detractors that you must consider when selecting them for your solution architecture.
    Still, it is crucial to recognize that each paradigm has its own time and place
    that makes it worthwhile. In this book, I hope to help you learn how to leverage
    Terraform to deploy sophisticated solutions in these paradigms on the three significant
    hyperscalers (at the time of writing).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你和你的组织如何利用云，你可能会涉及到三种基础设施配置范式中的一种或多种：虚拟机、容器或无服务器。每种范式都有不同的优缺点，你在选择它们作为解决方案架构时，必须仔细考虑这些因素。不过，重要的是要认识到每种范式都有适合的时机和场合，使其变得有价值。在本书中，我希望帮助你学习如何利用Terraform在这三种主要的云计算范式下，在三大云厂商（在写作时）上部署复杂的解决方案。
- en: Each of these paradigms has specific concepts that transcend cloud platforms
    that you—as a practitioner and architect—need to understand to design and implement
    solutions using Terraform.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每种范式都有一些特定的概念，这些概念跨越不同的云平台，作为从业者和架构师的你需要理解这些概念，以便使用Terraform设计和实施解决方案。
- en: Virtual machines are a standard service on every cloud platform because most
    organizations would like to leverage the cloud with their existing applications
    with minimal change. Virtual machines enable these organizations to have complete
    control of the configuration of their environment from the operating system up.
    With this low level of control, organizations can move applications to cloud infrastructure
    with minimal change, yet ultimate control.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机是每个云平台上的标准服务，因为大多数组织希望将现有应用程序以最小的变化利用云计算。虚拟机使这些组织能够完全控制从操作系统到环境配置的每个方面。通过这种低级别的控制，组织可以在最小变化的情况下将应用程序迁移到云基础设施，同时保持完全的控制权。
- en: This approach is practical because virtual machines are a concept and architecture
    that is well-known by most IT organizations. Organizations looking to migrate
    to the cloud probably already use virtual machines in their on-premises data centers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是实用的，因为虚拟机是大多数IT组织都非常熟悉的概念和架构。那些希望迁移到云平台的组织，可能已经在其本地数据中心使用虚拟机。
- en: That means that as you automate that infrastructure in the cloud, you’ll need
    to understand the core concepts and common architectural patterns.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，在你将基础设施自动化到云中时，你需要理解核心概念和常见的架构模式。
- en: With virtual machines, the good news is that most of the anatomy is relatively
    similar across cloud platforms, so if you know what you’re looking for, there
    is a good chance you will find the corresponding service—or Terraform resource—that
    implements that particular aspect of the solution. There may be subtle differences
    between cloud platforms that you must learn through conducting detailed analysis
    and optimizing your solutions. Still, if you understand the basic concepts, it’ll
    be pretty easy to map them across the cloud platforms and get productive using
    Terraform relatively quickly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用虚拟机的好消息是，大多数云平台的架构相对相似，因此，如果你知道自己在寻找什么，通常可以找到实现该解决方案特定方面的相应服务或Terraform资源。不同的云平台之间可能存在细微差别，你需要通过详细分析和优化解决方案来了解这些差异。不过，只要你理解了基本概念，就能很容易地在云平台之间进行映射，并且能相对快速地使用Terraform提高生产力。
- en: In this book, we will build an end-to-end solution using virtual machines on
    AWS, Azure, and Google Cloud Platform. To do so, you must understand some critical
    concepts that transcend cloud platforms to help you navigate the architecture
    and relevant Terraform resources within the respective cloud platform’s Terraform
    provider.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们将使用AWS、Azure和Google Cloud Platform上的虚拟机构建一个端到端的解决方案。为此，你必须理解一些跨越云平台的关键概念，这些概念将帮助你在各自云平台的Terraform提供者中导航架构和相关的Terraform资源。
- en: Networking
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: 'All virtual machines live on a network and each cloud platform has a corresponding
    service that handles this aspect of the solution. A network itself is relatively
    simple to create. It only needs one primary piece of information: the network
    address space, a block of IP addresses that fall within a contiguous range.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有虚拟机都运行在网络上，每个云平台都有一个相应的服务来处理解决方案的这一方面。网络本身相对简单，创建它只需要一个主要信息：网络地址空间，即一个IP地址块，属于一个连续的范围。
- en: An IP address is made up of 32 bits. These bits are grouped into octets and
    translated into integers between `0` and `255`. IPv4 has four octets in a single
    IP address, resulting in over 4 billion addressable IP addresses. In IPv6, there
    are 16 octets and many more IP addresses.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个IP地址由32个位组成，这些位被分成八位字节，并转换为`0`到`255`之间的整数。IPv4的单个IP地址包含四个八位字节，从而产生超过40亿个可寻址的IP地址。而IPv6则有16个八位字节，能够提供更多的IP地址。
- en: CIDR notation is a method for representing IP address ranges as contiguous blocks.
    A CIDR block comprises an IP address starting the range and a prefix length separated
    by a forward slash. For example, `10.0.1.0/24` represents a range of IP addresses
    starting with `10.0.1.0` and extending through to `10.0.1.255`—256 IP addresses.
    `10.0.1.0` is the starting IP address, and `24` is the number of bits that should
    be in common. Since an IP address is composed of 32 bits and each decimal within
    the IP address represents 8 bits, 24 bits would mean that three of the four octets
    are shared within the range and only the last digit changes. Since the last digit
    ranges from `0` to `255`, that gives us 256 IP addresses starting with `10.0.1.0`
    and going through to `10.0.1.255`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: CIDR 表示法是一种将 IP 地址范围表示为连续块的方法。CIDR 块由起始地址和前缀长度组成，两者之间用斜杠分隔。例如，`10.0.1.0/24`
    表示一个从 `10.0.1.0` 开始并扩展到 `10.0.1.255` 的 IP 地址范围——共 256 个 IP 地址。`10.0.1.0` 是起始 IP
    地址，`24` 是应共享的位数。由于一个 IP 地址由 32 位组成，每个十进制数代表 8 位，因此 24 位意味着四个八位组中的前三个是共享的，只有最后一个数字发生变化。由于最后一个数字范围从
    `0` 到 `255`，这就给我们提供了从 `10.0.1.0` 到 `10.0.1.255` 的 256 个 IP 地址。
- en: Several reserved IP address ranges exist for private networks. `10.0.0.0/8`
    and `172.0.0.0/12` are the most common ranges in enterprises, while I’m sure you’ve
    encountered `192.168.0.0/16` at home.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一些保留的 IP 地址范围用于私有网络。`10.0.0.0/8` 和 `172.0.0.0/12` 是企业中最常见的范围，而我敢肯定你在家里也遇到过
    `192.168.0.0/16`。
- en: Getting familiar with CIDR notation and understanding the impact of selecting
    different-sized prefixes is essential. Usually, `/16` is the largest (65,536 IP
    addresses) and `/28` the smallest (16 IP addresses) prefix supported by cloud
    platforms—but it does vary, so you should check your cloud platform’s documentation.
    More importantly, consider your requirements and if you have an in-house networking
    team at your organization, by all means, consult them when settling on a range
    that fits for your solution.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 CIDR 表示法，并理解选择不同大小的前缀的影响非常重要。通常，`/16` 是最大的前缀（65,536 个 IP 地址），而 `/28` 是最小的（16
    个 IP 地址），这些是云平台支持的前缀——不过也有所不同，所以你应该查看云平台的文档。更重要的是，考虑你的需求，如果你公司有内部网络团队，在确定适合你解决方案的范围时，一定要咨询他们。
- en: Usually, organizations maintain a list of IP address ranges that have been allocated
    to different teams or applications to prevent IP address conflicts. This practice
    is critical when starting in the cloud for the first time at your organization
    if you already have an on-premise network. If you use a default—such as `10.0.0.0/16`—or
    always use the same address range, you could be hurt if you ever want to connect
    your project to other networks within your organization.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，组织会维护一份已分配给不同团队或应用程序的 IP 地址范围列表，以防止 IP 地址冲突。如果你的组织已经有本地网络，那么在首次进入云计算时，这项做法至关重要。如果你使用的是默认值——比如`10.0.0.0/16`——或者总是使用相同的地址范围，如果你想将项目连接到组织内的其他网络时，可能会遇到麻烦。
- en: Although it can vary by cloud platform, you would usually provision a virtual
    network within a specific region, as on AWS and Azure. However, with Google Cloud
    Platform, virtual networks are global and span all regions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这在不同的云平台上可能会有所不同，但通常你会在特定区域内配置虚拟网络，比如在 AWS 和 Azure 上。然而，在 Google Cloud Platform
    上，虚拟网络是全球性的，跨越所有区域。
- en: Subnets
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子网
- en: Once you have settled on an IP address space for your network, you will be carving
    it into subnets. Subnets allow you to segment your network for various reasons,
    including improved security or organizational and operational efficiencies.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你为网络选定了 IP 地址空间，你将把它划分为子网。子网允许你根据不同的需求对网络进行分段，包括提高安全性或改善组织和操作效率。
- en: From a security standpoint, subnets are very important to isolate components
    of your architecture to reduce the blast radius if a problem occurs in one subnet.
    By creating routing rules to control network traffic between subnets, you can
    increase security by cutting down the surface area for an attack.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从安全角度来看，子网非常重要，因为它能够隔离架构中的组件，从而减少发生问题时的影响范围。通过创建路由规则来控制子网之间的网络流量，你可以通过减少攻击面来提高安全性。
- en: Depending on the cloud platform, subnets might also influence the physical location
    of resources provisioned within such as an availability zone. This is the case
    on AWS. However, Azure and GCP do not have this limitation, as their subnets can
    contain resources that span the entire region.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据云平台的不同，子网可能还会影响资源的物理位置，例如可用区。这在 AWS 中是这样的。然而，Azure 和 GCP 并没有这个限制，因为它们的子网可以包含跨越整个区域的资源。
- en: Routing
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由
- en: Once you have segmented your virtual network using subnets, it’s crucial to
    establish the traffic patterns of network traffic using **route tables**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您使用子网对虚拟网络进行了分段，建立网络流量模式变得至关重要，这时需要使用**路由表**。
- en: Route tables allow you to direct network traffic to the correct endpoint based
    on different rules for different types of traffic. For example, there may be a
    delineation between internet traffic routed to an internet gateway or a NAT gateway.
    Similar network routing rules can route traffic to on-premise networks through
    VPN or Direct Connect connections, peered virtual networks, transit gateways,
    or service endpoints.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 路由表允许您根据不同流量类型的规则，将网络流量引导到正确的终端。例如，可能会区分互联网流量，它会路由到互联网网关或 NAT 网关。类似的网络路由规则可以通过
    VPN 或 Direct Connect 连接、对等虚拟网络、传输网关或服务终端，将流量路由到本地网络。
- en: Network security
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络安全
- en: Once you have a virtual network and a set of subnets, each with its own purpose
    and resources, you will likely need to apply security controls to ensure that
    only the expected network traffic can pass between resources within the various
    subnets.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有了一个虚拟网络和一组子网，每个子网都有自己的用途和资源，您很可能需要应用安全控制，确保只有预期的网络流量能够在不同子网的资源之间传递。
- en: Most cloud platforms have some manifestation of this concept, but they may have
    different names. They may have other mechanisms for attachment—either on a subnet,
    virtual machine, or virtual `Allow` and `Deny` rules, while other times they only
    support `Allow` rules.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云平台都有某种形式的这个概念，但它们可能有不同的名称。它们可能有其他附加机制——可以附加在子网、虚拟机或虚拟的`Allow`和`Deny`规则上，而有时它们只支持`Allow`规则。
- en: Azure and AWS provide a lower-level mechanism focusing primarily on the physical
    network layer and a higher level focusing on more of the logical application layer.
    Google Cloud Platform wraps both concepts into one structure and calls them firewall
    rules.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 和 AWS 提供了一个较低级别的机制，主要关注物理网络层，而较高级别的机制则侧重于逻辑应用层。Google Cloud Platform 将这两个概念合并为一个结构，称之为防火墙规则。
- en: AWS has **Network Access Control Lists** (**NACLs**), which attach to subnets
    and control the flow of network traffic between subnets. As a result, they only
    work on network address ranges—not AWS resources such as network gateways or service
    endpoints. They are stateless, which means that, in most cases, you need the inbound
    and outbound rules to match for connectivity to succeed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 有**网络访问控制列表**（**NACLs**），它们附加到子网并控制子网之间的网络流量流动。因此，它们仅适用于网络地址范围——而非 AWS 资源，如网络网关或服务终端。它们是无状态的，这意味着在大多数情况下，您需要使入站和出站规则匹配才能确保连接成功。
- en: In contrast, AWS also has security groups, which are stateful, only support
    `Allow` rules, and allow you to route traffic between different network address
    ranges and AWS resources using their unique identifiers. Security groups can be
    logically attached to a subnet or directly onto virtual machines (EC2 instances),
    but AWS evaluates them at the virtual machine level. Attaching a security group
    to a subnet only results in an implicit cascading attachment of that security
    group to all virtual machines within that subnet.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 相对而言，AWS 还有安全组，这些安全组是有状态的，只支持`Allow`规则，并允许您使用其唯一标识符在不同的网络地址范围和 AWS 资源之间路由流量。安全组可以逻辑上附加到子网，或者直接附加到虚拟机（EC2
    实例）上，但 AWS 会在虚拟机级别评估它们。将安全组附加到子网仅会导致该安全组隐式地级联附加到该子网中的所有虚拟机。
- en: 'Azure similarly has two constructs for constraining network traffic: **Network
    Security Groups** (**NSGs**) and **Application Security Groups** (**ASGs**). NSGs
    are in many ways a combination of AWS’s NACLs and security groups but shed some
    logical attachment capabilities with a focus on the physical network layer. ASGs
    are logical and can be associated with a virtual machine through NICs. Just like
    AWS NACLs, you can think of NSGs as controlling the flow of traffic between networks,
    while AWS’s security groups and Azure’s ASGs both focus on controlling traffic
    at a finer grain—with an application-centric lens—between resources within the
    network.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 也有两种用于限制网络流量的构造：**网络安全组**（**NSGs**）和**应用安全组**（**ASGs**）。NSGs 在许多方面结合了
    AWS 的 NACL 和安全组，但在关注物理网络层的同时，去除了某些逻辑附加功能。ASGs 是逻辑性的，可以通过 NIC 与虚拟机关联。就像 AWS 的 NACL
    一样，你可以将 NSGs 看作是控制网络之间流量的工具，而 AWS 的安全组和 Azure 的 ASGs 都专注于在网络内部以更精细的粒度——以应用为中心——控制资源之间的流量。
- en: 'Google Cloud Platform has one construct: firewall rules. This construct is
    stateful but also supports `Allow` and `Deny` rules. It can be attached to a virtual
    network or a region, or it can be attached globally.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Platform 有一个构造：防火墙规则。这个构造是有状态的，但也支持 `Allow` 和 `Deny` 规则。它可以附加到虚拟网络或区域，或者可以全局附加。
- en: Network peering
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络对等连接
- en: '**Virtual network peering** is a networking feature offered by most cloud platforms
    that allows you to connect virtual networks within the same cloud platform without
    additional VPN-based connectivity.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟网络对等连接** 是大多数云平台提供的网络功能，允许你在同一云平台内连接虚拟网络，无需额外的基于 VPN 的连接。'
- en: To create a peering connection between two virtual networks, they must be in
    the same cloud platform, and there should not be any conflicts within their network
    address space. This potential quagmire is one reason why it’s essential to think
    through and apply proper governance around allocated network address ranges.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要在两个虚拟网络之间创建对等连接，它们必须位于同一云平台中，并且它们的网络地址空间中不应存在冲突。这种潜在的困境是需要仔细思考和应用适当的网络地址范围治理的原因之一。
- en: Peering is a capability that eliminates the need for more complex private site-to-site
    connections using VPN connections and is the preferred method for connecting networks
    within the cloud.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对等连接（Peering）是一种能力，可以消除通过 VPN 连接实现更复杂的私有站点到站点连接的需求，是在云中连接网络的首选方法。
- en: Service endpoints
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务端点
- en: Most cloud platforms provide services that are primarily accessed directly via
    the internet. In situations where security is paramount, avoiding transmitting
    data across the internet is essential. Service endpoints are a feature provided
    by cloud platforms that enable private network communication between virtual networks
    and specific services within the cloud environment without traversing the public
    internet.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云平台提供的服务主要是通过互联网直接访问的。在安全至关重要的情况下，避免通过互联网传输数据是至关重要的。服务端点是云平台提供的功能，能够在不经过公共互联网的情况下，实现虚拟网络与云环境内特定服务之间的私有网络通信。
- en: While this concept and goal exists and remains the same across all cloud providers
    we will cover in this book, it goes by different names, has varying support across
    each platform’s service offerings, and may have other attachment and routing mechanisms
    to set service endpoints up.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这一概念和目标在我们本书中涉及的所有云提供商中都是存在且保持一致的，但它有不同的名称，在每个平台的服务产品中支持程度不同，可能还有其他的附加和路由机制来设置服务端点。
- en: VPN and Direct Connect
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VPN 和 Direct Connect
- en: When virtual network peering isn’t an option, you can always leverage traditional
    site-to-site VPN connectivity options to connect networks from your on-premises
    networks or across cloud providers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当虚拟网络对等连接不可用时，你始终可以利用传统的站点到站点 VPN 连接选项，将网络从本地网络或跨云提供商的网络进行连接。
- en: When setting up a VPN connection, most cloud platforms require you to provide
    a resource representing the source network and destination network configuration.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置 VPN 连接时，大多数云平台要求你提供一个表示源网络和目标网络配置的资源。
- en: The destination network is where you host the entry point for your VPN and where
    the VPN traffic traverses to gain connectivity to cloud-hosted resources. The
    source network is where you have devices that need to connect to the destination
    network. The source network is often on-premise, but it doesn’t have to be. After
    that, the most common use case is connecting networks on two different cloud platforms.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 目标网络是你为VPN配置的入口点所在的网络，VPN流量会通过此网络到达云中托管的资源。源网络则是需要连接到目标网络的设备所在的网络。源网络通常是本地网络，但不一定如此。最常见的使用场景是连接两个不同云平台上的网络。
- en: In this section, we learned the critical concepts of cloud networking that you
    will encounter whenever you provision virtual machines, no matter your target
    cloud platform. There might be some subtle changes on each platform that affect
    how you’ll use each and how they will affect the availability and structure of
    your architecture, but their function is essentially the same.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了云网络的关键概念，无论你使用的是哪个云平台，只要配置虚拟机，你都会遇到这些概念。每个平台可能会有一些细微的差别，这些差别会影响你使用虚拟机的方式，以及它们如何影响你架构的可用性和结构，但其功能本质上是相同的。
- en: Next, we’ll look at the critical concepts of virtual machines, including basic
    anatomy. This includes disks, NICs, and the virtual machine itself, as well as
    operating system-specific differences between Windows and Linux and cloud-specific
    capabilities such as auto-scaling.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍虚拟机的关键概念，包括基本结构。这包括磁盘、网络接口卡（NIC）以及虚拟机本身，此外，还包括Windows和Linux之间的操作系统特定差异以及云特定功能，如自动伸缩。
- en: Understanding the key concepts of compute
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解计算的关键概念
- en: A virtual machine is a software emulation of a physical computer. Just like
    a regular computer, it runs an operating system and whatever applications you
    install on it. Ultimately, it does run on physical hardware. However, in the cloud,
    the cloud platform abstracts the physical hardware and the hypervisor that manages
    the virtual machines from the user.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机是物理计算机的软件仿真。就像普通计算机一样，它运行操作系统以及你安装的任何应用程序。最终，它是运行在物理硬件上的。然而，在云平台上，云平台将物理硬件和管理虚拟机的虚拟化管理程序（Hypervisor）抽象出来，用户无需直接接触。
- en: 'Virtual machines are most commonly available on cloud platforms in two flavors:
    Linux and Windows, with various current and historical versions supported through
    marketplace offerings on the cloud platform itself.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机在云平台上最常见的两种形式是：Linux和Windows，云平台通过市场提供支持各种当前和历史版本。
- en: The primary configuration attributes of a virtual machine are its size, the
    virtual machine image to use as its operating system disk, additional data disks,
    and network configuration.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机的主要配置属性包括其大小、作为操作系统磁盘使用的虚拟机镜像、附加的数据磁盘和网络配置。
- en: Cloud platforms use a **Stock-Keeping Unit** (**SKU**) to create a standard
    configuration that dictates the size and hardware profile of the virtual machine.
    This pattern is typical across cloud platforms, but the SKU names follow different
    naming conventions. Cloud platforms do have a similar organization system with
    sub-categories such as general purpose, compute-optimized, and memory-optimized.
    There are also those with particular hardware components such as **Graphics Processing**
    **Units** (**GPUs**).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 云平台使用**库存单位**（**SKU**）来创建一个标准配置，规定虚拟机的大小和硬件配置文件。这个模式在云平台中很常见，但SKU名称遵循不同的命名规范。云平台通常有一个类似的组织体系，包含一些子类别，如通用型、计算优化型和内存优化型。还有一些虚拟机配备了特定的硬件组件，如**图形处理单元**（**GPU**）。
- en: The virtual machine image is a disk image of a pre-configured operating system,
    which can include additional software pre-installed depending on the image’s purpose.
    The virtual machine image is an essential component in the automation of virtual
    machines. We’ll go into further depth on this later.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机镜像是一个预配置操作系统的磁盘镜像，具体内容可以根据镜像的用途而包含额外的预安装软件。虚拟机镜像是自动化虚拟机部署中的一个关键组成部分。我们稍后会进一步详细讨论这一点。
- en: Disks
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 磁盘
- en: 'Virtual machines can attach additional data disks to add extra storage. Like
    virtual machines, the disks can have varying sizes and performance characteristics.
    Unlike virtual machine sizes, which vary using categorical SKUs that indicate
    a fixed configuration type, disks use a continuous metric for sizing: **Gigabytes**
    (**GB**).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机可以附加额外的数据磁盘以增加存储空间。与虚拟机一样，这些磁盘可以有不同的大小和性能特性。与虚拟机大小不同，虚拟机使用表示固定配置类型的类别 SKU
    进行变更，而磁盘则使用连续度量单位进行大小设置：**千兆字节**（**GB**）。
- en: In addition to the disk size, you can also choose from several different performance
    classes optimized for different workload scenarios, such as general purpose, throughput
    optimized, and provisioned IOPS, which seeks to guarantee a reliable level of
    performance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了磁盘大小，您还可以选择几种不同的性能类别，针对不同的工作负载场景进行优化，例如通用、优化吞吐量和预配置的 IOPS，这些都旨在确保可靠的性能水平。
- en: The SKU you select influences the number and class of disks you can attach to
    your virtual machine, with larger virtual machines supporting a larger quantity
    of disks.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择的 SKU 会影响您可以附加到虚拟机的磁盘数量和类别，较大的虚拟机支持更多数量的磁盘。
- en: Network Interface Cards (NICs)
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络接口卡（NIC）
- en: Virtual machines can attach NICs that logically represent a physical network
    interface card. As with disks, the size of a virtual machine can impact the number
    of NICs you can add and the features you can enable.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机可以附加逻辑上代表物理网络接口卡的 NIC。与磁盘一样，虚拟机的大小会影响您可以添加的 NIC 数量及可启用的功能。
- en: Through NIC configuration, you can either team the network interfaces together
    to create higher bandwidth or attach them to different subnets to connect a virtual
    machine. The latter option lets you straddle the line between two separate networks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 NIC 配置，您可以将网络接口组合在一起以创建更高的带宽，或将它们连接到不同的子网以连接虚拟机。后一种选项让您能够跨越两个独立的网络。
- en: Linux versus Windows
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 与 Windows
- en: Linux and Windows virtual machines are identical anatomically in terms of virtual
    machine sizes, disks, and NICs. Still, there are a few key differences to be aware
    of when using Terraform and other tools to manage them.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 和 Windows 虚拟机在虚拟机大小、磁盘和 NIC 等方面是解剖学上相同的。然而，在使用 Terraform 和其他工具进行管理时，有一些关键差异需要注意。
- en: Authentication and remote access
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 身份验证与远程访问
- en: Windows virtual machines usually require an administrator username and password.
    In contrast, Linux virtual machines usually require an SSH key. After the initial
    setup, you can configure Windows to support SSH access, but password-based credentials
    are needed initially.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 虚拟机通常需要一个管理员用户名和密码，而 Linux 虚拟机通常需要 SSH 密钥。初始设置后，您可以配置 Windows 支持 SSH
    访问，但首次登录仍然需要基于密码的凭据。
- en: This caveat also manifests in remotely accessing virtual machines using Windows
    and Linux. Windows uses **Remote Desktop Protocol** (**RDP**), which requires
    a password-based login. Linux uses SSH, which can support either password or key-based
    login.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个警告也体现在使用 Windows 和 Linux 远程访问虚拟机时。Windows 使用**远程桌面协议**（**RDP**），需要基于密码的登录。Linux
    使用 SSH，可以支持基于密码或密钥的登录。
- en: Configuration scripts
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置脚本
- en: Windows supports several different types of scripting by default. However, the
    most common are batch scripting, which uses the Windows **Command-Line Interpreter**
    (**CMD**), and **PowerShell**. While Microsoft initially developed PowerShell
    specifically for automating administration tasks on Windows, support for PowerShell
    has since been added on Linux, although community adoption has not hit critical
    mass.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 默认支持几种不同类型的脚本。最常见的脚本是批处理脚本，使用 Windows 的**命令行解释器**（**CMD**），以及**PowerShell**。虽然微软最初是为自动化
    Windows 上的管理任务而开发 PowerShell，但现在也在 Linux 上增加了对 PowerShell 的支持，尽管社区的采用度尚未达到关键质量标准。
- en: While Linux distributions vary, `ksh`, `csh`, and `tsch`—and while their capabilities
    are similar to Bash, their popularity varies.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Linux 发行版不同，`ksh`、`csh` 和 `tsch`—它们的功能与 Bash 相似，但受欢迎程度各异。
- en: Windows has even joined the party by introducing **Windows Subsystem for Linux**
    (**WSL**), which, when installed, can execute Bash scripts natively on Windows.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 也通过引入**Windows 子系统 Linux**（**WSL**）加入了这一行列，安装后可以在 Windows 上原生执行 Bash
    脚本。
- en: Auto-scaling
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动扩展
- en: One of the quintessential advantages of leveraging the cloud is the ability
    to add elasticity to your solutions at scale. That is to increase capacity when
    there is heavy usage of your application and decrease capacity when your application’s
    use goes down.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 利用云计算的一个典型优势是能够在大规模上为解决方案增加弹性。也就是说，当应用程序的使用量很高时，能够增加容量；而当应用程序的使用量减少时，又能减少容量。
- en: Cloud platforms provide mechanisms that make achieving this very easy. Although
    they may have different names for this capability, the anatomy of the solution
    remains the same. You simply give details on the virtual machine image that you
    want, how large the virtual machine should be, any hard range constraints in terms
    of the number of instances (such as a minimum and a maximum), and finally, you
    provide several parameters to control when and how fast to scale up or scale down.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 云平台提供了使这一过程变得非常简单的机制。虽然它们可能会为这一功能起不同的名称，但解决方案的结构保持不变。你只需提供虚拟机镜像的详细信息，包括虚拟机应有多大、实例的硬性范围约束（如最小值和最大值）、以及最后，提供一些参数来控制何时以及多快地进行扩容或缩容。
- en: This section has taught us some of the basics of how we provision virtual machines.
    These concepts manifest across different cloud platforms. While there may be small
    subtleties between the various cloud platforms, they operate similarly.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本节已经教会了我们如何配置虚拟机的一些基本概念。这些概念在不同的云平台上都有体现。尽管各云平台之间可能有一些小的细微差别，但它们的操作方式是类似的。
- en: Next, we’ll look at the role that the virtual machine image plays in how we
    can automate virtual machines.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨虚拟机镜像在我们如何自动化虚拟机中的作用。
- en: Understanding the role of virtual machine images
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解虚拟机镜像的角色
- en: Virtual machines need an operating system and other applications installed to
    serve their purpose. A virtual machine image is a single file containing a virtual
    disk with a bootable operating system installed on it. It’s a snapshot of a virtual
    machine at a particular point in time. This snapshot contains the state of the
    virtual machine, including the operating system, installed applications, and other
    settings.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机需要安装操作系统和其他应用程序才能发挥其作用。虚拟机镜像是一个包含已安装可启动操作系统的虚拟磁盘的单一文件。它是虚拟机在某一特定时间点的快照。这个快照包含虚拟机的状态，包括操作系统、已安装的应用程序以及其他设置。
- en: Static virtual machines
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态虚拟机
- en: When setting up a single virtual machine, or even a group of them with different
    roles and responsibilities within a solution’s architecture, there is a process
    of configuration that needs to happen to get each virtual machine into the state
    required to perform its duties as part of the solution.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置单个虚拟机，或者在解决方案架构中具有不同角色和责任的一组虚拟机时，需要进行配置，以使每个虚拟机处于能够执行其作为解决方案一部分的职责所需的状态。
- en: 'This configuration includes the following steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置包括以下步骤：
- en: Installing the operating system
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装操作系统
- en: Configuring the operating system
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置操作系统
- en: Installing software updates and security patches
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装软件更新和安全补丁
- en: Installing third-party software
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装第三方软件
- en: Configuring third-party software
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置第三方软件
- en: Of course, each of these steps may change depending on the role of the virtual
    machine within the solution. The further down the order a step is, the more likely
    it becomes that the configuration will change, with operating system installation
    being the most stable and third-party software configuration having the most diversity
    depending on the virtual machine’s role.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，以上每个步骤可能会根据虚拟机在解决方案中的角色而有所变化。步骤越往后，配置的变化可能性越大，其中操作系统安装是最稳定的，而第三方软件配置则因虚拟机角色的不同而具有最多样性。
- en: For example, a simple two-tier architecture requiring a Java web application
    to talk to a PostgreSQL database would have two roles. One role installs the Java
    Web Application server, while another installs the PostgreSQL database. Both virtual
    machines might share the exact same operating system, configuration, and security
    patches in this scenario. Still, when it comes to third-party software, one might
    need Java Web Application server software, while the other might need PostgreSQL
    database server software.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个简单的二层架构，要求Java Web应用程序与PostgreSQL数据库进行通信，将会有两个角色。一个角色负责安装Java Web应用服务器，而另一个角色则安装PostgreSQL数据库。在这种情况下，两个虚拟机可能会共享完全相同的操作系统、配置和安全补丁。然而，当涉及到第三方软件时，一个虚拟机可能需要Java
    Web应用服务器软件，而另一个则可能需要PostgreSQL数据库服务器软件。
- en: Each role requires different configuration steps to configure the server to
    fulfill its purpose. For example, these steps might include steps such as installing
    software packages, setting environment variables, updating configuration files,
    creating user accounts, setting up permissions, running custom scripts, or any
    other action required to set up the machine.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 每个角色都需要不同的配置步骤来配置服务器以实现其目的。例如，这些步骤可能包括安装软件包、设置环境变量、更新配置文件、创建用户账户、设置权限、运行自定义脚本，或者任何其他需要的操作来设置机器。
- en: When working with the cloud, you pass this configuration to the virtual machine
    by specifying an operating system disk image. The disk image that is used will
    determine whether the virtual machine will spin up with nothing but a clean install
    of Ubuntu 22.04—ready to be manually configured—or a fully working Java Web Application
    server that requires no manual intervention whatsoever.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用云时，你通过指定操作系统磁盘镜像将此配置传递给虚拟机。使用的磁盘镜像将决定虚拟机是启动为仅安装了干净的 Ubuntu 22.04 系统——准备好手动配置，还是启动为一个完全运行的
    Java Web 应用服务器，无需任何手动干预。
- en: Each cloud platform provides a large set of disk images that you can use to
    start virtual machines for various purposes. The most common ones are baseline
    images with a specific version of an operating system installed, such as Windows
    Server 2019, Ubuntu 22.04, or RedHat Enterprise Linux.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每个云平台都提供了一套大量的磁盘镜像，你可以用它们来启动不同用途的虚拟机。最常见的是基线镜像，安装了特定版本的操作系统，如 Windows Server
    2019、Ubuntu 22.04 或 RedHat Enterprise Linux。
- en: With so many marketplace images providing a baseline operating system install,
    you can spin up a virtual machine with Ubuntu 22.04, install the Java Web Application
    software, configure it precisely to your specifications, and create a new virtual
    machine image. This new virtual machine image will boot up as a Java Web Application
    server rather than a brand new installation of Ubuntu 22.04, which means that
    you are that much closer to using this virtual machine to host your web application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于市场上有许多提供基线操作系统安装的镜像，你可以启动一个 Ubuntu 22.04 虚拟机，安装 Java Web 应用软件，按照你的要求进行配置，并创建一个新的虚拟机镜像。这个新的虚拟机镜像将启动为
    Java Web 应用服务器，而不是全新的 Ubuntu 22.04 安装，这意味着你离将这个虚拟机用于托管你的 Web 应用更近一步。
- en: You can use automation technologies that manage this configuration to perform
    the actions you might perform manually, assuming you were starting from a clean
    operating system installation. Several automation tools focus on this problem—you
    might be surprised to learn that Terraform is not one of them. While Terraform
    can provide this configuration through several different techniques, that’s not
    its primary focus. Usually, Terraform should work together with another tool with
    this focus. The two of these tools should make a joint decision on how to share
    the responsibility of deploying this configuration.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用管理此配置的自动化技术来执行你可能手动执行的操作，假设你是从一个干净的操作系统安装开始的。有多个自动化工具专注于这个问题——你可能会惊讶地发现，Terraform
    其实并不是其中之一。虽然 Terraform 可以通过几种不同的技术提供此配置，但这并不是它的主要关注点。通常，Terraform 应该与另一个专注于此的工具一起工作。这两种工具应该共同决定如何分担部署此配置的责任。
- en: Using configuration manager
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用配置管理器
- en: One popular approach is to leverage Terraform to provision the virtual machines
    required in your solution and rely on the configuration management tool to handle
    the rest of the configuration on each virtual machine from the operating system.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的做法是利用 Terraform 来提供解决方案中所需的虚拟机，并依赖配置管理工具处理操作系统中每个虚拟机的其余配置。
- en: This approach has the benefit of isolating the responsibility of configuration
    management entirely to a tool that is fit to handle this task. Some examples of
    popular tools include **Chef** or **Puppet**, which use agents to apply configuration
    onto virtual machines—or it could be a tool such as **Ansible** that requires
    no agent and uses SSH as the primary method to apply configuration.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处是将配置管理的责任完全隔离到一个适合处理这项任务的工具中。一些流行的工具例子包括 **Chef** 或 **Puppet**，它们使用代理将配置应用到虚拟机上——或者它也可以是一个像
    **Ansible** 这样的工具，它不需要代理，使用 SSH 作为应用配置的主要方法。
- en: Due to Ansible’s heavy reliance on SSH and Windows’s limited support for this
    remote access method, Ansible has not historically been an ideal candidate for
    managing Windows-based virtual machines in this manner. Tools such as Chef and
    Puppet have seen more robust adoption in enterprise IT environments where Windows
    Server was the dominant server operating system. However, this does appear to
    be changing, with additional support from Ansible and newer versions of Windows
    making it easier to manage with this approach.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Ansible 强烈依赖 SSH 而 Windows 对这种远程访问方法的支持有限，Ansible 在历史上并不是管理基于 Windows 的虚拟机的理想工具。像
    Chef 和 Puppet 这样的工具，在 Windows Server 是主导的服务器操作系统的企业 IT 环境中得到了更广泛的采用。然而，这种情况似乎正在发生变化，Ansible
    得到了更多支持，新的 Windows 版本使得使用这种方法进行管理变得更加容易。
- en: Custom virtual machine images
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义虚拟机镜像
- en: After you have configured your virtual machine to the point that it is ready
    to take on its role within the system with only some minor final configuration
    changes, you can capture a snapshot of the operating system disk and create a
    virtual machine image from it that you can use to spin up additional virtual machines.
    When you use this image, these virtual machines will already have the configuration
    you have set up previously, with no need to set everything up again.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将虚拟机配置到足够接近其在系统中角色的位置，只有一些小的最终配置更改时，你可以捕捉操作系统磁盘的快照，并从中创建一个虚拟机镜像，以便你可以使用该镜像启动额外的虚拟机。当你使用此镜像时，这些虚拟机将已经包含你之前设置的配置，无需重新设置。
- en: This approach has the benefit of increased startup speed. Since you already
    did most of the work when you built the image, that work doesn’t have to happen
    every time you spin up a new virtual machine. Instead, you will only need to wait
    for the cloud platform to launch the virtual machine. It will have everything
    you need installed and ready to go without waiting for the configuration manager
    to set everything up.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处是提高了启动速度。由于你在构建镜像时已经完成了大部分工作，每次启动新虚拟机时就不需要重复这些工作。你只需要等待云平台启动虚拟机，它会自动安装并准备好所有所需的内容，而无需等待配置管理器设置所有内容。
- en: The most common tool used to do this is called **Packer**. It’s an open source
    product published by **HashiCorp**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的工具是 **Packer**。它是一个由 **HashiCorp** 发布的开源产品。
- en: 'You can write Packer templates in JSON or HCL. However, you should use the
    latter, as it makes managing and organizing your code much easier. A Packer template
    consists of three parts:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 JSON 或 HCL 编写 Packer 模板。但你应该使用后者，因为它能让你更容易管理和组织代码。一个 Packer 模板由三部分组成：
- en: Builders that establish connectivity to a target platform to build a virtual
    machine
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于建立与目标平台连接以构建虚拟机的构建器
- en: Provisioners that provide instructions that must be executed on the virtual
    machine before creating an image
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置工具提供在创建镜像之前必须在虚拟机上执行的指令
- en: Post-processors that execute after the builders and provisioners and perform
    any last-minute operations before creating the artifact
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后处理器在构建器和配置工具执行之后执行，并在创建工件之前执行最后的操作
- en: 'Packer’s provisioners include three main types:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Packer 的配置工具包括三种主要类型：
- en: '**Script execution**: Execute scripts in various shell environments supporting
    Windows and Linux'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本执行**：在支持 Windows 和 Linux 的各种 shell 环境中执行脚本'
- en: '**File**: Upload files or directories from the local environment to the virtual
    machine'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件**：从本地环境上传文件或目录到虚拟机'
- en: '**Flow control**: Pause execution or trigger a Windows restart to let settings
    take effect'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流程控制**：暂停执行或触发 Windows 重启以使设置生效'
- en: Build versus bake
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建与烘焙
- en: Taking a clean installation of the operating system and using a configuration
    management tool to apply the desired state on it is what I call the *build* approach.
    Its converse, the *bake* approach, uses an automation tool—such as Packer—that
    will launch a temporary virtual machine, set everything up, and then snap a new
    virtual machine image.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将操作系统进行干净安装后，使用配置管理工具应用所需的状态，这就是我所说的*构建*方法。其对立面，*烘焙*方法，使用自动化工具——例如 Packer——启动一个临时虚拟机，设置所有内容，然后创建一个新的虚拟机镜像。
- en: The build option is ideal for Day 2 Operations because it allows you to easily
    apply patches and manage the environment over time. With configuration management
    tools in charge, you have a live connection to your virtual machines and can update
    them quickly without disruption. In contrast, when using the bake approach, you
    will first need to bake a new image, then upgrade all the virtual machines to
    use the latest image. This results in downtime while you tear down the machine
    using the old image and spin up the machine using the new image. It can also be
    a slow process to develop the virtual machine image, as each bake can take a considerable
    amount of time, while the configuration management tool provides relatively near
    real-time feedback if there is an issue.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 构建选项非常适合用于第二天的操作，因为它使您能够轻松地应用补丁并随着时间推移管理环境。在配置管理工具的控制下，您可以与虚拟机保持实时连接，快速更新它们而不会中断服务。相比之下，使用烘焙方法时，您首先需要烘焙一个新的镜像，然后升级所有虚拟机以使用最新镜像。这会导致在使用旧镜像拆除机器并使用新镜像启动机器时出现停机时间。开发虚拟机镜像也可能是一个缓慢的过程，因为每次烘焙可能需要相当长的时间，而配置管理工具在出现问题时能提供相对接近实时的反馈。
- en: 'The bake approach truly shines when there is time sensitivity in how fast you
    need to spin up additional virtual machines and you don’t want to wait for the
    configuration manager to do a clean install of your entire solution stack on the
    virtual machine, as this uses up valuable time that you could use to service end
    user requests. Situations that can benefit from this include the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要快速启动额外的虚拟机并且不希望等待配置管理工具在虚拟机上做一次完整的解决方案堆栈安装时，烘焙方法会显得特别有用，因为这会消耗掉宝贵的时间，而这些时间本可以用来响应终端用户的请求。以下是一些可以受益于此方法的情况：
- en: '**Failover and recovery**: When you have identified that a previously healthy
    virtual machine has become unhealthy and needs to be replaced rapidly, this situation
    could be due to an outage or transient hardware failure.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障转移和恢复**：当您发现一个先前健康的虚拟机变得不健康并且需要迅速更换时，这种情况可能是由于停机或瞬时硬件故障引起的。'
- en: '**Auto-scaling**: When you need to scale up to meet spikes in traffic for your
    service, it’s ideal for your new virtual machine to pick up the load as quickly
    as possible when a scale-up event is triggered. If it does not, you may need to
    build in additional buffer times by reducing the threshold for scaling up and
    increasing the threshold for scaling down. This approach allows the system to
    spin up resources earlier and spin them down more slowly, ensuring that the inherent
    time delay doesn’t impact your end users.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展**：当您需要扩展以应对服务的流量激增时，理想情况下，您的新虚拟机应在触发扩展事件时尽快接管负载。如果没有，您可能需要通过减少扩展上限并增加缩减下限来预留更多的缓冲时间。这种方法允许系统更早地启动资源，并更慢地关闭它们，从而确保固有的延迟不会影响终端用户。'
- en: 'Build versus bake is not a mutually exclusive endeavor. There is usually a
    split between the two. In most situations, there are pieces of configuration that
    you can never bake into the images. These fall into the following categories:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 构建与烘焙并不是互斥的操作。通常，两者之间存在一定的分歧。在大多数情况下，有些配置是你无法烘焙到镜像中的。这些配置属于以下几类：
- en: '**Frequency**: You should bake configurations that change into the image at
    a very low frequency. Conversely, you should include configurations that you may
    need to adjust at runtime in the build.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**频率**：您应该将那些很少变化的配置烘焙进镜像。相反，您应该将那些在运行时可能需要调整的配置包含在构建中。'
- en: '**Post-provisioning values**: You should bake configurations that require values
    that are only available after provisioning. These values might include private
    IP addresses, DNS hostnames, or other metadata generated during provisioning that
    is only known at the end.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后配置值**：您应该将需要在配置后才能获得的值烘焙进镜像。这些值可能包括私有IP地址、DNS主机名或其他在配置过程中生成的元数据，这些信息只有在结束时才能获得。'
- en: With that, we’ve come to the end of this chapter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们本章内容结束。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter looked at the core concepts required to understand virtual machines
    across multiple cloud platforms. In this book, we will build an end-to-end solution
    using virtual machine architecture for each of the three hyperscalers: AWS, Azure,
    and Google Cloud Platform. The providers for each will manifest and exercise these
    concepts slightly differently. The resources will change, but the concepts as
    they manifest in our architecture will be relatively consistent.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本章回顾了理解多云平台虚拟机所需的核心概念。在本书中，我们将使用虚拟机架构为每个三大云提供商（AWS、Azure 和 Google Cloud Platform）构建端到端解决方案。每个提供商将在其实现和应用这些概念时有所不同。资源会有所变化，但这些概念在我们的架构中所呈现的方式将保持相对一致。
- en: In this chapter, I have gone over common concepts across cloud platforms that
    are necessary to understand in order to automate solutions. These include cloud
    networking concepts like virtual networks, subnets, peering, and service endpoints,
    which are essential for creating and managing isolated network environments and
    ensuring efficient communication between resources. We also explored computing
    concepts such as virtual NICs for network connectivity and virtual disks for scalable
    storage solutions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我介绍了在各大云平台中，自动化解决方案所需理解的常见概念。这些概念包括虚拟网络、子网、对等连接和服务端点等云网络概念，它们对于创建和管理隔离的网络环境以及确保资源之间的高效通信至关重要。我们还探讨了计算概念，如用于网络连接的虚拟网卡（NIC）和用于可扩展存储解决方案的虚拟磁盘。
- en: Another critical topic discussed is the build vs. bake dilemma, addressing how
    much operating system configuration should be built into a machine image versus
    how much should be added after the machine has been provisioned. This involves
    understanding the trade-offs between pre-configuring images (baking) to streamline
    deployment processes and configuring them post-deployment (building) to enhance
    flexibility and reduce image management complexity. By understanding these concepts,
    you will be better equipped to design and automate robust, scalable solutions
    across different cloud platforms.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要话题是“构建与预配置”困境，讨论了操作系统配置应在机器镜像中构建多少，和应在机器部署后添加多少。这个问题涉及理解预配置镜像（预设）与部署后配置（构建）之间的权衡，前者有助于简化部署流程，而后者则增强了灵活性并减少了镜像管理的复杂性。通过理解这些概念，您将能够更好地设计和自动化跨多个云平台的健壮、可扩展的解决方案。
- en: 'In the next chapter, we will explore the core concepts needed for a new cloud
    computing paradigm: **containers**.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨新型云计算范式所需的核心概念：**容器**。
