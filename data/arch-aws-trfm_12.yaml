- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Automating the Deployment of Terraform Projects
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化部署 Terraform 项目
- en: Automation and efficiency are key in today’s fast-paced tech landscape. In this
    chapter, we’ll be zeroing in on the automation of Terraform project deployments,
    elevating your **Infrastructure as Code** (**IaC**) practices to new heights.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化和效率在当今快速发展的技术环境中至关重要。在本章中，我们将专注于 Terraform 项目部署的自动化，提升您的 **基础设施即代码** (**IaC**)
    实践到新的高度。
- en: We’ll explore the core concepts of deployment in the Terraform context, shedding
    light on critical themes such as **continuous integration/continuous deployment**
    (**CI/CD**) in Terraform, and why it’s an indispensable element of modern IaC
    practices. We’ll unravel the complex web of choices to pinpoint the best CI/CD
    tools tailored for Terraform, guiding you through a sea of options so that you
    can find the one that aligns with your specific needs and organizational nuances.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨 Terraform 上下文中的核心部署概念，阐明 CI/CD（**持续集成/持续部署**）在 Terraform 中的关键主题，探讨它为何成为现代
    IaC 实践中不可或缺的元素。我们将解开这一复杂网络，帮助您找出最适合 Terraform 的 CI/CD 工具，带您穿越工具的海洋，找到最符合您特定需求和组织细节的工具。
- en: We’ll also venture into the intricate world of governance and auditability,
    offering you a roadmap to build systems that are not just efficient and automated
    but also secure, compliant, and audit-ready. Every piece of infrastructure provisioned
    will be a testament to best practices in security, efficiency, and compliance.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将深入探讨治理和可审计性的复杂领域，为您提供一条路线图，帮助您构建不仅高效、自动化，而且安全、合规、且易于审计的系统。每一项基础设施资源的配置，都将成为安全性、效率和合规性最佳实践的证明。
- en: And as security is a paramount concern, this chapter doesn’t shy away from the
    hard questions. We’ll dive deep into strategies to ensure that every piece of
    infrastructure is provisioned securely, ensuring the sanctity and security of
    your organizational data and resources.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全性是一个至关重要的问题，本章不会回避艰难的问题。我们将深入探讨确保每一项基础设施资源安全配置的策略，保障您组织数据和资源的完整性与安全。
- en: In essence, this chapter is your compass in the complex, multifaceted journey
    of automating Terraform deployments, a guide to transitioning from manual, error-prone
    processes to streamlined, efficient, and secure automated deployments.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章本质上是您在自动化 Terraform 部署的复杂多面旅程中的指南针，帮助您从手动、容易出错的过程，转向流畅、高效且安全的自动化部署。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is deployment in Terraform?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Terraform 中的部署？
- en: What is CI/CD for Terraform?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Terraform 的 CI/CD？
- en: Why do we need CI/CD for Terraform?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们需要 CI/CD 来支持 Terraform？
- en: What is the best CI/CD tool for Terraform?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪个是最适合 Terraform 的 CI/CD 工具？
- en: How to build the governance and auditability of provisioning infrastructure
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建基础设施配置的治理和可审计性
- en: How to provision infrastructure securely
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安全地配置基础设施
- en: What is deployment in Terraform?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Terraform 中的部署？
- en: In Terraform, deployment refers to the process of creating and configuring infrastructure
    resources using Terraform code. Terraform deployment involves creating and updating
    infrastructure resources such as virtual machines, databases, load balancers,
    and other resources.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Terraform 中，部署指的是使用 Terraform 代码创建和配置基础设施资源的过程。Terraform 部署涉及创建和更新诸如虚拟机、数据库、负载均衡器以及其他资源等基础设施资源。
- en: 'The Terraform deployment process typically involves the following steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 部署过程通常涉及以下步骤：
- en: '**Write Terraform code**: Write Terraform code that describes the desired infrastructure
    resources, including their configuration and dependencies.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写 Terraform 代码**：编写描述所需基础设施资源的 Terraform 代码，包括它们的配置和依赖关系。'
- en: '`terraform plan` command to create an execution plan that shows what changes
    Terraform will make to the infrastructure.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `terraform plan` 命令创建执行计划，显示 Terraform 将对基础设施进行的更改。
- en: '`terraform apply` command to apply the changes to the infrastructure. Terraform
    will create or update the infrastructure resources as necessary to match the desired
    state described in the Terraform code.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `terraform apply` 命令将更改应用到基础设施。Terraform 将根据需要创建或更新基础设施资源，以匹配在 Terraform
    代码中描述的目标状态。
- en: '**Manage the infrastructure**: Once the infrastructure has been deployed, use
    Terraform to manage the infrastructure resources over time. This can include updating
    the configuration of existing resources, adding new resources, or deleting existing
    resources.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**管理基础设施**：一旦基础设施部署完成，使用 Terraform 管理基础设施资源。这可以包括更新现有资源的配置、添加新资源或删除现有资源。'
- en: The Terraform deployment process can be automated using CI/CD tools. These tools
    can be used to manage the Terraform deployment process, including managing the
    Terraform code, creating execution plans, and deploying changes to the infrastructure.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 部署过程可以通过 CI/CD 工具自动化。这些工具可以用来管理 Terraform 部署过程，包括管理 Terraform 代码、创建执行计划和部署基础设施的变更。
- en: By properly managing the Terraform deployment process, you can ensure that your
    infrastructure is properly configured, secure, and reliable. It’s important to
    follow best practices for infrastructure deployment and to regularly review and
    update your deployment process to ensure that it remains efficient and effective
    over time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过适当管理 Terraform 部署过程，你可以确保你的基础设施配置正确、安全且可靠。遵循基础设施部署的最佳实践，并定期审查和更新你的部署过程，以确保它随着时间的推移保持高效和有效。
- en: What is CI/CD for Terraform?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Terraform 的 CI/CD？
- en: 'CI/CD for Terraform involves using CI/CD tools to automate the deployment of
    infrastructure resources created using Terraform. CI/CD for Terraform is a process
    that involves the following stages:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 的 CI/CD 涉及使用 CI/CD 工具来自动化部署使用 Terraform 创建的基础设施资源。Terraform 的 CI/CD
    过程包括以下几个阶段：
- en: '**Continuous integration**: In the CI stage, changes made to the Terraform
    code base are automatically integrated into a shared repository. This can involve
    using version control tools such as Git to track changes to the Terraform code
    base and using automated testing tools to verify that the code changes are properly
    tested.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**持续集成**：在 CI 阶段，对 Terraform 代码库所做的更改会自动集成到共享的代码库中。这可以包括使用 Git 等版本控制工具来跟踪 Terraform
    代码库的更改，并使用自动化测试工具来验证代码更改是否经过适当的测试。'
- en: '**Continuous delivery**: In the continuous delivery stage, changes made to
    the Terraform code base are automatically delivered to a test environment for
    further testing and verification. This can involve using tools such as AWS CodePipeline
    or GitLab CI/CD to automatically build and deploy the Terraform code base to a
    test environment.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**持续交付**：在持续交付阶段，对 Terraform 代码库所做的更改会自动交付到测试环境中进行进一步的测试和验证。这可以包括使用 AWS CodePipeline
    或 GitLab CI/CD 等工具自动构建和部署 Terraform 代码库到测试环境。'
- en: '**Continuous deployment**: In the continuous deployment stage, changes made
    to the Terraform code base are automatically deployed to the target production
    environment. This can involve using tools such as Terraform Cloud or AWS CodeDeploy
    to automate the deployment of infrastructure resources created using Terraform.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**持续部署**：在持续部署阶段，对 Terraform 代码库所做的更改会自动部署到目标生产环境。这可以包括使用 Terraform Cloud 或
    AWS CodeDeploy 等工具自动部署使用 Terraform 创建的基础设施资源。'
- en: By using CI/CD for Terraform, you can automate the deployment of infrastructure
    resources and reduce the time and effort required for deployment. This can help
    ensure that the infrastructure is properly configured, secure, and reliable and
    that changes to the infrastructure are properly tested and reviewed before being
    deployed to the production environment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 Terraform 的 CI/CD 工具，你可以自动化基础设施资源的部署，并减少部署所需的时间和精力。这有助于确保基础设施配置正确、安全且可靠，并且在部署到生产环境之前，基础设施的更改经过适当的测试和审查。
- en: Why do we need CI/CD tool for Terraform?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要 Terraform 的 CI/CD 工具？
- en: 'We need CI/CD for Terraform to automate the deployment process of infrastructure
    resources created using Terraform, and to ensure that changes to the infrastructure
    are properly tested and reviewed before being deployed to production. Here are
    some of the key benefits of using CI/CD for Terraform:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要 Terraform 的 CI/CD 工具来自动化使用 Terraform 创建的基础设施资源的部署过程，并确保在部署到生产环境之前，基础设施的变更得到适当的测试和审查。以下是使用
    Terraform CI/CD 工具的一些关键好处：
- en: '**Reduced time and effort**: By automating the deployment process regarding
    infrastructure resources, CI/CD can help reduce the time and effort required for
    deployment. This can help speed up the development process and reduce the risk
    of errors.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少时间和精力**：通过自动化基础设施资源的部署过程，CI/CD 可以帮助减少部署所需的时间和精力。这有助于加快开发过程并减少错误的风险。'
- en: '**Improved efficiency**: By automating the testing and deployment process,
    CI/CD can help improve the efficiency of the development process. This can help
    ensure that changes are properly tested and reviewed and that the infrastructure
    is properly configured and secured.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高效率**：通过自动化测试和部署流程，CI/CD 可以帮助提高开发过程的效率。这有助于确保更改经过充分测试和审查，并确保基础设施的正确配置和安全性。'
- en: '**Consistency and repeatability**: By using a consistent and repeatable process
    for deploying infrastructure resources, CI/CD can help ensure that the infrastructure
    is properly configured and that changes are properly tracked and managed over
    time.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性和可重复性**：通过使用一致且可重复的流程来部署基础设施资源，CI/CD 可以确保基础设施的正确配置，并确保随着时间推移，变更得到适当跟踪和管理。'
- en: '**Improved collaboration**: By using CI/CD tools such as Terraform Cloud or
    AWS CodePipeline, developers can work collaboratively and share code and resources
    across the project. This can help improve the efficiency and effectiveness of
    the development process.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改善协作**：通过使用 Terraform Cloud 或 AWS CodePipeline 等 CI/CD 工具，开发人员可以协作工作，并在项目中共享代码和资源。这有助于提高开发过程的效率和效果。'
- en: '**Faster time to market**: By automating the deployment process, CI/CD can
    help speed up the time to market for new features and infrastructure resources.
    This can help organizations stay competitive and respond more quickly to changing
    business needs.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的上市时间**：通过自动化部署流程，CI/CD 可以加速新特性和基础设施资源的上市时间。这有助于组织保持竞争力，并能更快速地响应业务需求的变化。'
- en: '**Increased reliability**: By using CI/CD, organizations can increase the reliability
    of their infrastructure. With automated testing and deployment, developers can
    identify and fix issues quickly, reducing the likelihood of downtime or other
    issues.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高可靠性**：通过使用 CI/CD，组织可以提高基础设施的可靠性。通过自动化测试和部署，开发人员可以快速识别并解决问题，降低停机或其他问题的可能性。'
- en: '**Easier rollbacks**: With a consistent and repeatable deployment process,
    organizations can more easily roll back changes in the event of an issue or error.
    This can help reduce the impact of any issues and restore services more quickly.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更容易的回滚**：通过一致且可重复的部署流程，组织可以在出现问题或错误时更轻松地回滚更改。这有助于减少问题的影响，并更快速地恢复服务。'
- en: '**Improved security**: CI/CD can help improve security by automating security
    testing and reviews as part of the deployment process. This can help identify
    potential security issues before they make it to production, reducing the risk
    of security incidents.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高安全性**：CI/CD 通过将安全测试和审核自动化作为部署流程的一部分，可以帮助提升安全性。这有助于在问题进入生产环境之前发现潜在的安全问题，从而降低安全事件的风险。'
- en: '**Reduced costs**: With CI/CD, organizations can reduce the costs associated
    with infrastructure deployment. By automating the deployment process, organizations
    can reduce the need for manual intervention and improve the efficiency of the
    development process.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低成本**：通过 CI/CD，组织可以减少与基础设施部署相关的成本。通过自动化部署流程，组织可以减少对人工干预的需求，并提高开发过程的效率。'
- en: '**Scalability**: With automated testing and deployment, organizations can more
    easily scale their infrastructure resources up or down to meet changing business
    needs. This can help organizations respond more quickly to changing demands and
    reduce the risk of downtime or other issues.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：通过自动化测试和部署，组织可以更轻松地扩展或缩减基础设施资源，以满足变化的业务需求。这有助于组织更快速地响应需求变化，减少停机或其他问题的风险。'
- en: Overall, CI/CD can help organizations optimize their infrastructure deployment
    process and improve the efficiency and effectiveness of their development teams.
    By automating testing, deployment, and other key processes, organizations can
    reduce the time and effort required for deployment, improve the reliability and
    security of their infrastructure, and respond more quickly to changing business
    needs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，CI/CD 可以帮助组织优化基础设施部署流程，提高开发团队的效率和效能。通过自动化测试、部署以及其他关键流程，组织可以减少部署所需的时间和精力，提高基础设施的可靠性和安全性，并能更快速地响应变化的业务需求。
- en: What is the best CI/CD for Terraform?
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最适合 Terraform 的 CI/CD 是哪个？
- en: 'When selecting a CI/CD tool for Terraform, it’s important to consider the specific
    needs and requirements of your organization. Here are some factors to consider
    when selecting a CI/CD tool for Terraform:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在为 Terraform 选择 CI/CD 工具时，考虑贵组织的具体需求和要求非常重要。以下是选择 Terraform CI/CD 工具时需要考虑的一些因素：
- en: '**Integration with Terraform**: The CI/CD tool you choose should have strong
    integration with Terraform, allowing you to easily deploy infrastructure resources
    using Terraform code. It should be able to read and interpret Terraform configuration
    files and allow you to execute Terraform commands as part of the deployment process.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 Terraform 集成**：你选择的 CI/CD 工具应该与 Terraform 有强大的集成能力，允许你通过 Terraform 代码轻松部署基础设施资源。它应该能够读取和解析
    Terraform 配置文件，并允许你在部署过程中执行 Terraform 命令。'
- en: '**Compatibility with AWS**: If you’re deploying infrastructure resources on
    AWS, you should choose a CI/CD tool that is compatible with AWS services and APIs.
    This will ensure that you can easily integrate your deployment process with other
    AWS services and take advantage of AWS-specific features and functionality.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 AWS 兼容性**：如果你在 AWS 上部署基础设施资源，应该选择一个与 AWS 服务和 API 兼容的 CI/CD 工具。这将确保你能够轻松将部署过程与其他
    AWS 服务集成，并利用 AWS 特有的功能。'
- en: '**Scalability**: Your CI/CD tool should be able to scale as your organization
    grows and your infrastructure requirements become more complex. This means it
    should be able to handle large-scale deployments, support parallelization, and
    provide other features that help streamline the deployment process.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：你的 CI/CD 工具应该能够随着组织的增长和基础设施需求的复杂化而扩展。这意味着它应该能够处理大规模部署，支持并行化，并提供其他帮助简化部署过程的功能。'
- en: '**Security**: Security should be a key consideration when selecting a CI/CD
    tool. Look for a tool that supports secure access and authentication, and that
    provides features such as encryption and audit trails to help keep your infrastructure
    secure.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：在选择 CI/CD 工具时，安全性应该是一个关键考虑因素。选择一个支持安全访问和身份验证的工具，并提供如加密和审计追踪等功能，以帮助确保你的基础设施安全。'
- en: '**Customizability**: Your CI/CD tool should be customizable to meet the specific
    needs of your organization. Look for a tool that allows you to configure and customize
    the deployment process, and that provides flexible deployment options such as
    rollbacks and incremental deployments.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可定制性**：你的 CI/CD 工具应该能够根据你组织的具体需求进行定制。选择一个允许你配置和定制部署过程的工具，并且提供灵活的部署选项，如回滚和增量部署。'
- en: 'Several CI/CD tools work well with Terraform on AWS, each with its strengths
    and capabilities. Here are some of the most popular CI/CD tools that are used
    for Terraform on AWS:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种 CI/CD 工具在 AWS 上与 Terraform 配合得很好，每种工具都有其独特的优势和功能。以下是一些在 AWS 上使用 Terraform
    的最流行的 CI/CD 工具：
- en: '**AWS CodePipeline**: AWS CodePipeline is a fully managed CI/CD service that
    supports Terraform, allowing you to easily automate the deployment of your infrastructure
    resources on AWS. CodePipeline integrates with a variety of AWS services, including
    CodeCommit, CodeBuild, and CodeDeploy, to provide a complete end-to-end solution.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS CodePipeline**：AWS CodePipeline 是一个完全托管的 CI/CD 服务，支持 Terraform，允许你轻松自动化在
    AWS 上部署基础设施资源。CodePipeline 与多种 AWS 服务集成，包括 CodeCommit、CodeBuild 和 CodeDeploy，提供了一个完整的端到端解决方案。'
- en: '**Jenkins**: Jenkins is an open source automation server that supports Terraform
    and can be used to build, test, and deploy infrastructure resources on AWS. Jenkins
    has a large and active community, with many plugins available to extend its functionality.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins**：Jenkins 是一个开源自动化服务器，支持 Terraform，可用于在 AWS 上构建、测试和部署基础设施资源。Jenkins
    拥有一个庞大且活跃的社区，提供许多插件来扩展其功能。'
- en: '**GitLab CI/CD**: GitLab CI/CD is a complete DevOps platform that includes
    support for Terraform. GitLab CI/CD provides continuous integration, continuous
    delivery, and continuous deployment capabilities, making it a popular choice for
    teams that want an all-in-one solution.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLab CI/CD**：GitLab CI/CD 是一个完整的 DevOps 平台，支持 Terraform。GitLab CI/CD 提供持续集成、持续交付和持续部署功能，是希望获得一体化解决方案的团队的热门选择。'
- en: '**CircleCI**: CircleCI is a cloud-based CI/CD service that supports Terraform,
    providing a scalable and flexible solution for automating the deployment of infrastructure
    resources on AWS. CircleCI supports parallelization, allowing you to speed up
    your build and deployment process.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CircleCI**：CircleCI 是一个基于云的 CI/CD 服务，支持 Terraform，提供了一个可扩展且灵活的解决方案，用于自动化在
    AWS 上部署基础设施资源。CircleCI 支持并行化，允许你加速构建和部署过程。'
- en: '**Terraform Cloud** is a cloud-based, HashiCorp-built service that can be used
    as a CI/CD tool for Terraform. It provides a variety of features that can help
    automate the deployment of infrastructure resources and simplify the management
    of Terraform code.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Terraform Cloud**是一个基于云的 HashiCorp 构建的服务，可以作为 Terraform 的 CI/CD 工具使用。它提供了多种功能，可以帮助自动化基础设施资源的部署，并简化
    Terraform 代码的管理。'
- en: You should find a tool that is well-suited to your organization’s needs and
    requirements, and that can help you streamline the deployment process and improve
    the efficiency of your infrastructure management.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该找到一个适合你组织需求和要求的工具，并且能够帮助你简化部署过程，提高基础设施管理的效率。
- en: How to build the governance and auditability of provisioning infrastructure
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何建立基础设施配置的治理和可审计性
- en: Building the governance and auditability of provisioning infrastructure is important
    for several reasons. First, governance and auditability can help ensure that your
    infrastructure is compliant with regulatory requirements and industry best practices.
    This is critical for organizations that operate in regulated industries, where
    failure to comply with regulations can result in significant financial and reputational
    damage. By building governance and auditability into your infrastructure provisioning
    process, you can ensure that your infrastructure meets all the necessary regulatory
    requirements and is properly managed and audited.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 建立基础设施配置的治理和可审计性有多方面的重要性。首先，治理和可审计性有助于确保你的基础设施符合监管要求和行业最佳实践。这对于在受监管行业中运营的组织至关重要，因为未能遵守规定可能会导致重大的财务和声誉损害。通过将治理和可审计性融入基础设施配置过程中，你可以确保你的基础设施满足所有必要的监管要求，并得到妥善的管理和审计。
- en: Second, governance and auditability can help improve the security of your infrastructure.
    By enforcing **role-based access control** (**RBAC**) and code reviews, and implementing
    compliance checks and configuration drift detection, you can reduce the risk of
    unauthorized changes and potential security incidents. This can help protect your
    organization’s sensitive data and resources and reduce the risk of data breaches
    and other security incidents.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，治理和可审计性有助于提高基础设施的安全性。通过执行**基于角色的访问控制**（**RBAC**）、代码审查，实施合规检查和配置漂移检测，你可以降低未授权变更和潜在安全事件的风险。这有助于保护组织的敏感数据和资源，减少数据泄露和其他安全事件的风险。
- en: Third, governance and auditability can improve the reliability of your infrastructure.
    By implementing testing, backup, and disaster recovery processes, you can ensure
    that your infrastructure is properly tested and validated before being deployed,
    and that data can be recovered in the event of an issue. This can help reduce
    the risk of downtime or other issues and improve the overall reliability and performance
    of your infrastructure.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，治理和可审计性可以提高基础设施的可靠性。通过实施测试、备份和灾难恢复流程，你可以确保在部署之前对基础设施进行充分测试和验证，并确保在出现问题时可以恢复数据。这有助于减少停机或其他问题的风险，提升基础设施的整体可靠性和性能。
- en: Overall, building the governance and auditability of provisioning infrastructure
    is critical for organizations that rely on their infrastructure to operate effectively
    and securely. By implementing best practices and regular auditing and review,
    you can ensure that your infrastructure meets all the necessary compliance requirements,
    is properly secured, and is reliable and performant over time.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，建立基础设施配置的治理和可审计性对于那些依赖基础设施有效且安全运行的组织至关重要。通过实施最佳实践以及定期的审计和审查，你可以确保你的基础设施满足所有必要的合规要求，得到妥善的安全保护，并随着时间的推移保持可靠和高效。
- en: 'To build the governance and auditability of provisioning infrastructure with
    Terraform, you can follow these best practices:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要建立基于 Terraform 的基础设施配置治理和可审计性，你可以遵循以下最佳实践：
- en: '**Use version control**: Use version control systems such as Git to manage
    your Terraform code. This can help you track changes and maintain an audit trail
    of who made changes and when.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用版本控制**：使用如 Git 等版本控制系统来管理你的 Terraform 代码。这可以帮助你追踪变更并保持审核记录，了解是谁、何时做出了哪些更改。'
- en: '**Enforce code reviews**: Enforce code reviews to ensure that changes are reviewed
    and approved by multiple people before being deployed. This can help catch potential
    issues and improve the quality of the infrastructure code.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制进行代码审查**：强制进行代码审查，确保更改在部署前经过多人的审查和批准。这有助于发现潜在问题，并提高基础设施代码的质量。'
- en: '**Implement RBAC**: Implement RBAC to ensure that only authorized users have
    access to the Terraform code and deployment process. This can help improve security
    and reduce the risk of unauthorized changes.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施RBAC**：实施基于角色的访问控制（RBAC），确保只有授权用户能够访问Terraform代码和部署流程。这有助于提高安全性，并减少未授权更改的风险。'
- en: '**Use a policy engine**: Use a policy engine such as **Open Policy Agent**
    (**OPA**) to enforce policies and best practices for your infrastructure. This
    can help ensure that your infrastructure is properly configured and secured.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用策略引擎**：使用策略引擎，如**开放政策代理**（**OPA**），来执行基础设施的政策和最佳实践。这有助于确保你的基础设施得到正确配置并得到保障。'
- en: '**Enable logging and monitoring**: Enable logging and monitoring for your infrastructure
    to track changes and detect potential issues. This can help you identify and remediate
    security incidents or other issues quickly.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用日志记录和监控**：启用基础设施的日志记录和监控功能，以跟踪更改并检测潜在问题。这有助于你快速识别和修复安全事件或其他问题。'
- en: '**Implement change management**: Implement change management processes to ensure
    that changes to the infrastructure are properly reviewed, approved, and documented.
    This can help ensure that changes are properly managed and that potential risks
    are identified and addressed.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施变更管理**：实施变更管理流程，确保基础设施的更改经过适当的审核、批准和文档化。这有助于确保变更得到妥善管理，并识别和解决潜在风险。'
- en: '**Use a central Terraform repository**: Use a central Terraform repository
    to store your infrastructure code. This can help ensure that your code is properly
    managed and that changes are properly tracked and documented.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用中央Terraform仓库**：使用中央Terraform仓库存储你的基础设施代码。这有助于确保你的代码得到适当管理，并且更改能够得到适当跟踪和文档化。'
- en: '**Implement configuration drift detection**: Implement configuration drift
    detection to detect when the actual infrastructure configuration does not match
    the desired state described in the Terraform code. This can help you identify
    and address configuration issues quickly.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施配置漂移检测**：实施配置漂移检测，以检测实际的基础设施配置是否与Terraform代码中描述的期望状态不匹配。这有助于你迅速识别并解决配置问题。'
- en: '**Implement compliance checks**: Implement compliance checks to ensure that
    your infrastructure is compliant with relevant regulatory requirements and industry
    best practices. This can help reduce the risk of non-compliance and associated
    penalties.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施合规性检查**：实施合规性检查，以确保你的基础设施符合相关的监管要求和行业最佳实践。这有助于减少不合规的风险及相关处罚。'
- en: '**Enable infrastructure testing**: Enable infrastructure testing to ensure
    that your infrastructure resources are properly tested and validated before being
    deployed. This can help reduce the risk of issues and improve the reliability
    of your infrastructure.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用基础设施测试**：启用基础设施测试，确保你的基础设施资源在部署前经过适当测试和验证。这有助于减少问题风险并提高基础设施的可靠性。'
- en: '**Implement backup and disaster recovery**: Implement backup and disaster recovery
    processes to ensure that your infrastructure is properly protected and that data
    can be recovered in the event of an issue. This can help ensure that your infrastructure
    is properly secured and reliable.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施备份和灾难恢复**：实施备份和灾难恢复流程，以确保你的基础设施得到适当保护，并且在发生问题时能够恢复数据。这有助于确保你的基础设施安全可靠。'
- en: By following these best practices, you can build a robust governance and auditability
    framework for your Terraform infrastructure. It’s important to regularly review
    and update your processes to ensure that they remain effective and aligned with
    your organization’s needs and requirements.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些最佳实践，你可以为你的Terraform基础设施建立一个强大的治理和审计框架。定期审查和更新你的流程很重要，以确保它们依然有效并与组织的需求和要求保持一致。
- en: How to provision infrastructure securely
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何安全地配置基础设施
- en: Provisioning infrastructure securely with Terraform is important for several
    reasons. First, it helps to protect your organization’s data and resources from
    unauthorized access and attacks. By implementing security controls, using secure
    communication protocols, and managing your credentials and secrets securely, you
    can help reduce the risk of data breaches and other security incidents.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Terraform 安全地配置基础设施很重要，原因有很多。首先，它有助于保护组织的数据和资源免受未经授权的访问和攻击。通过实施安全控制、使用安全的通信协议，以及安全地管理凭证和密钥，你可以帮助减少数据泄露和其他安全事件的风险。
- en: Second, it can help ensure that your infrastructure is compliant with relevant
    regulations and industry best practices. This is particularly important for organizations
    that operate in regulated industries, where non-compliance can result in significant
    financial and reputational damage.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，它有助于确保你的基础设施符合相关法规和行业最佳实践。这对那些在受监管行业中运营的组织尤为重要，因为不合规可能导致严重的财务损失和声誉损害。
- en: Finally, it can help improve the reliability and performance of your infrastructure.
    By using secure infrastructure as code principles, such as code reviews and version
    control, you can help ensure that your Terraform code is properly managed and
    that changes are reviewed and approved before being deployed. This can help reduce
    the risk of downtime or other issues and improve the overall reliability and performance
    of your infrastructure.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，它有助于提高基础设施的可靠性和性能。通过使用安全的基础设施即代码原则，如代码审查和版本控制，你可以帮助确保你的 Terraform 代码得到妥善管理，且所有变更都经过审查和批准后再进行部署。这有助于减少停机时间或其他问题，并提升基础设施的整体可靠性和性能。
- en: Overall, provisioning infrastructure securely with Terraform is critical for
    organizations that rely on their infrastructure to operate effectively and securely.
    By implementing best practices and regularly reviewing and updating your security
    practices, you can help ensure that your infrastructure is properly secured and
    compliant and that it performs reliably over time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，使用 Terraform 安全地配置基础设施对依赖其基础设施高效且安全运作的组织至关重要。通过实施最佳实践并定期审查和更新安全措施，你可以确保基础设施得到妥善保护并符合规定，同时保证其长期稳定可靠地运行。
- en: 'Provisioning infrastructure securely with Terraform involves several best practices
    and techniques. Here are some key steps to follow:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Terraform 安全地配置基础设施涉及若干最佳实践和技术。以下是一些关键步骤：
- en: '**Implement security controls**: Implement security controls such as firewalls,
    encryption, and access controls to help protect your infrastructure from unauthorized
    access and attacks. Use Terraform modules that have been designed with security
    in mind and use best practices such as limiting access to sensitive data and infrastructure
    resources.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施安全控制**：实施防火墙、加密和访问控制等安全措施，以帮助保护基础设施免受未经授权的访问和攻击。使用经过安全设计的 Terraform 模块，并遵循最佳实践，如限制对敏感数据和基础设施资源的访问。'
- en: '**Securely store credentials**: Use a secure credential management solution
    to store and manage secrets and other sensitive information, such as API keys
    or passwords. Use encrypted storage and transport mechanisms to ensure that sensitive
    data is properly protected.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安全存储凭证**：使用安全的凭证管理解决方案来存储和管理密钥及其他敏感信息，如 API 密钥或密码。使用加密存储和传输机制，确保敏感数据得到适当保护。'
- en: '**Use secure communication protocols**: Use secure communication protocols
    such as HTTPS or SSH to communicate with your infrastructure resources. This can
    help ensure that your communications are properly secured and that your data is
    protected from eavesdropping or other attacks.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用安全通信协议**：使用 HTTPS 或 SSH 等安全通信协议与基础设施资源进行通信。这有助于确保你的通信得到妥善保护，数据不受窃听或其他攻击。'
- en: '**Implement audit trails**: Implement audit trails to track changes to your
    infrastructure and monitor access to sensitive resources. This can help you identify
    potential security issues or compliance violations and take action to address
    them.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施审计跟踪**：实施审计跟踪，记录对基础设施的更改并监控对敏感资源的访问。这有助于你识别潜在的安全问题或合规性违规，并采取措施加以解决。'
- en: '**Use secure IaC**: Use secure IaC principles to ensure that your Terraform
    code is secure and properly managed. This includes practices such as code reviews,
    version control, and RBAC to help ensure that your code is properly managed and
    that changes are reviewed and approved before being deployed.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用安全的基础设施即代码**（IaC）：使用安全的IaC原则，确保你的Terraform代码是安全且得到妥善管理的。这包括代码审查、版本控制和基于角色的访问控制（RBAC）等实践，以确保你的代码得到适当管理，并且变更在部署前经过审核和批准。'
- en: '**Implement regular vulnerability scanning**: Implement regular vulnerability
    scanning to identify potential security issues in your infrastructure and take
    action to address them. This can help reduce the risk of security incidents and
    ensure that your infrastructure is properly secured.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施定期漏洞扫描**：实施定期漏洞扫描，识别基础设施中的潜在安全问题并采取措施解决。这样可以帮助减少安全事件的风险，确保基础设施得到妥善保护。'
- en: '**Use secure Amazon Machine Images** (**AMIs**): Use secure AMIs when deploying
    instances on AWS. Use images that are regularly updated with the latest security
    patches and that have been hardened according to industry best practices.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用安全的Amazon机器镜像**（**AMIs**）：在AWS上部署实例时使用安全的AMIs。使用那些定期更新最新安全补丁并根据行业最佳实践进行了加固的镜像。'
- en: '**Enable CloudTrail logging**: Enable CloudTrail logging to monitor AWS API
    activity and track changes to your infrastructure resources. This can help you
    identify potential security issues and audit changes to your infrastructure over
    time.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启用CloudTrail日志记录**：启用CloudTrail日志记录以监控AWS API活动并跟踪基础设施资源的更改。这可以帮助你识别潜在的安全问题并审计基础设施变化。'
- en: '**Use virtual private clouds** (**VPCs**) **and security groups**: Use VPCs
    and security groups to help protect your infrastructure resources. Use security
    groups to restrict inbound and outbound traffic to your instances, and use VPCs
    to isolate your resources from the public internet.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用虚拟私有云**（**VPCs**）**和安全组**：使用VPCs和安全组来帮助保护你的基础设施资源。使用安全组来限制实例的进出流量，并使用VPCs将资源与公共互联网隔离。'
- en: '**Implement secure data management**: Implement secure data management practices
    to ensure that your data is properly protected. Use encryption, access controls,
    and other techniques to help protect your data from unauthorized access and attacks.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施安全的数据管理**：实施安全的数据管理实践，确保你的数据得到妥善保护。使用加密、访问控制和其他技术来帮助保护你的数据免受未经授权的访问和攻击。'
- en: '**Use security-focused Terraform modules**: Use Terraform modules that have
    been designed with security in mind. Look for modules that implement security
    controls, such as encryption, access controls, and monitoring, to help ensure
    that your infrastructure is properly secured.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用以安全为重点的Terraform模块**：使用专为安全设计的Terraform模块。寻找那些实现了安全控制的模块，例如加密、访问控制和监控，以帮助确保你的基础设施得到妥善保护。'
- en: By following these best practices, you can help ensure that your infrastructure
    is properly secured and that potential security issues are identified and addressed
    quickly. It’s important to regularly review and update your security practices
    to ensure that they remain effective and aligned with your organization’s needs
    and requirements.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些最佳实践，你可以帮助确保你的基础设施得到妥善保护，并且能够快速识别和解决潜在的安全问题。定期审查和更新你的安全实践非常重要，以确保它们保持有效并与组织的需求和要求保持一致。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter illuminated the intricate process of automating Terraform project
    deployments. You grasped essential concepts, including CI/CD for Terraform, effectively
    integrating it to enhance efficiency, security, and compliance in deploying infrastructure.
    This chapter delineated step-by-step processes, tools, and best practices, transforming
    the complex landscape of automation into an accessible, actionable roadmap.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本章阐明了自动化Terraform项目部署的复杂过程。你掌握了包括CI/CD在内的关键概念，成功地将其整合以提高部署基础设施的效率、安全性和合规性。本章详细列出了逐步流程、工具和最佳实践，将自动化的复杂景观转化为一个可操作的蓝图。
- en: Prepare to embark on a fascinating journey in the next chapter, where the power
    of Terraform meets the expansive, dynamic world of AWS. *Governing AWS with Terraform*
    unfolds the secrets of wielding Terraform’s capabilities to manage, optimize,
    and govern AWS resources with precision, efficiency, and security.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好在下一章中开始一段令人着迷的旅程，那里Terraform的强大功能与AWS的广阔动态世界相遇。*用Terraform管理AWS*揭示了如何利用Terraform的能力，精准、高效且安全地管理、优化和治理AWS资源的秘诀。
- en: Every AWS service, every resource, is about to become a playground where your
    mastery in Terraform shines, turning complexity into simplicity, and challenges
    into opportunities. Ready to transform your AWS management practices? The next
    chapter awaits, where every line of code is a step toward unparalleled governance,
    efficiency, and security on AWS. Stay tuned!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 AWS 服务，每个资源，都将成为你在 Terraform 中展现掌握技能的游乐场，将复杂转化为简单，将挑战变为机遇。准备好改变你的 AWS 管理实践了吗？下一章在等待着你，每一行代码都是迈向
    AWS 上无与伦比的治理、高效性和安全性的步伐。敬请期待！
