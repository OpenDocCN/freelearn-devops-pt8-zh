- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Implementing Terraform in Projects
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中实现 Terraform
- en: Are you ready to start developing your AWS infrastructure with Terraform? In
    this chapter, you’ll learn the basics of Terraform and how to deploy your first
    template in AWS. We’ll cover the process of selecting the right AWS provider and
    choosing public modules that meet your project’s needs. You’ll also learn how
    to write custom Terraform AWS modules for your specific use cases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您准备好开始使用 Terraform 开发您的 AWS 基础设施了吗？在本章中，您将学习 Terraform 的基础知识，并了解如何在 AWS 中部署您的第一个模板。我们将介绍选择合适的
    AWS 提供商和选择满足您项目需求的公共模块的过程。您还将学习如何为特定的使用场景编写自定义的 Terraform AWS 模块。
- en: By the end of this chapter, you will have developed and deployed your AWS infrastructure
    using Terraform. You’ll also have gained valuable skills in decision-making for
    providers and selecting the right public modules for your project’s needs. Additionally,
    you’ll learn how and when to develop custom AWS modules and how to use them effectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，您将使用 Terraform 开发和部署您的 AWS 基础设施。您还将获得有关提供商决策和选择适合项目需求的公共模块的宝贵技能。此外，您将学习如何以及何时开发自定义的
    AWS 模块，并了解如何有效地使用它们。
- en: 'In this chapter, we will delve deeper into Terraform and explore how it can
    be used to develop and deploy AWS infrastructure projects. Here’s a look at the
    topics we’ll cover:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨 Terraform，了解它如何用于开发和部署 AWS 基础设施项目。以下是我们将要覆盖的主题：
- en: Terraform basics for developing AWS infrastructure projects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于开发 AWS 基础设施项目的 Terraform 基础知识
- en: Selecting AWS Providers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 AWS 提供商
- en: Selecting AWS public modules for your needs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的需求选择 AWS 公共模块
- en: How to write custom Terraform AWS modules
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写自定义 Terraform AWS 模块
- en: Terraform basics for developing AWS infrastructure projects
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于开发 AWS 基础设施项目的 Terraform 基础知识
- en: Terraform is a tool for building, changing, and versioning infrastructure safely
    and efficiently. It can manage infrastructure for many different types of cloud
    providers, including AWS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是一个用于安全高效地构建、修改和版本化基础设施的工具。它可以管理多种不同类型云提供商的基础设施，包括 AWS。
- en: Let’s look at some basic concepts in Terraform.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些 Terraform 的基本概念。
- en: Resources
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: A resource is an element of your infrastructure, such as an EC2 instance, an
    S3 bucket, or a security group.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 资源是您基础设施的一个元素，如 EC2 实例、S3 存储桶或安全组。
- en: 'A resource is typically created using a resource block in your Terraform configuration.
    A resource block has a type and a name, and it specifies the desired state of
    the resource. For example, the following block creates an EC2 instance in AWS:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 资源通常是通过在 Terraform 配置中使用资源块创建的。资源块有一个类型和一个名称，并指定资源的期望状态。例如，以下块将在 AWS 中创建一个 EC2
    实例：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This resource block creates an EC2 instance with the type `aws_instance` and
    the name `web_server`. It specifies that the instance should be created using
    the specified AMI and instance type.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个资源块创建了一个类型为 `aws_instance`、名称为 `web_server` 的 EC2 实例。它指定该实例应使用指定的 AMI 和实例类型来创建。
- en: When you run `terraform apply`, Terraform will create the EC2 instance and set
    it to the desired state specified in the resource block. If the EC2 instance already
    exists and its state differs from the desired state, Terraform will update the
    instance to match the desired state.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行 `terraform apply` 时，Terraform 将创建 EC2 实例，并将其设置为资源块中指定的期望状态。如果 EC2 实例已经存在并且其状态与期望状态不同，Terraform
    将更新实例以使其与期望状态匹配。
- en: You can also use resource properties to specify additional details about the
    resource, such as the VPC in which it should be created, the security groups it
    should be associated with, and so on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用资源属性来指定资源的附加细节，例如应该创建资源的 VPC、它应该关联的安全组等。
- en: Providers
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供商
- en: A provider is a plugin that Terraform uses to interact with the infrastructure
    of a particular cloud provider, such as AWS. Each provider has its own set of
    resources that you can use to create and manage infrastructure.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 提供商是 Terraform 用来与特定云提供商（如 AWS）的基础设施进行交互的插件。每个提供商都有自己的一套资源，您可以使用这些资源来创建和管理基础设施。
- en: 'To use a provider in your Terraform configuration, you need to specify it in
    a provider block. For example, to use the AWS provider, you would add the following
    block to your configuration:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Terraform 配置中使用提供商，您需要在提供商块中指定它。例如，要使用 AWS 提供商，您需要在配置中添加以下块：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This block specifies that you want to use the AWS provider and that you want
    to use the `us-east-1` region. You can also specify provider-specific configuration
    options, such as the access key and secret key to use when authenticating with
    the provider’s APIs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该块指定您希望使用 AWS 提供者，并且您希望使用 `us-east-1` 区域。您还可以指定特定于提供者的配置选项，例如用于通过提供者的 API 进行身份验证时使用的访问密钥和秘密密钥。
- en: 'Once you’ve specified a provider in your configuration, you can use resources
    from that provider to create and manage infrastructure. For example, you could
    use the `aws_instance` resource to create an EC2 instance in AWS:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在您的配置中指定了一个提供者，您就可以使用该提供者的资源来创建和管理基础设施。例如，您可以使用 `aws_instance` 资源在 AWS 中创建
    EC2 实例：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: State
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态
- en: Terraform maintains a state file that stores the current configuration of your
    infrastructure. This allows it to track changes and know what actions to take
    when you make changes to your configuration.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 维护一个状态文件，存储您基础设施的当前配置。这使它能够跟踪更改，并知道在您更改配置时应该采取哪些操作。
- en: The state file is an important part of how Terraform functions, as it allows
    Terraform to know what actions to take when you make changes to your infrastructure.
    For example, if you create a new EC2 instance using Terraform, the state file
    will be updated to reflect the existence of the new instance. If you then modify
    the instance using Terraform, the state file will be updated to reflect the new
    configuration of the instance.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 状态文件是 Terraform 工作方式的重要部分，因为它使 Terraform 知道在您更改基础设施时应该执行哪些操作。例如，如果您使用 Terraform
    创建一个新的 EC2 实例，状态文件将会更新，以反映新实例的存在。如果您随后使用 Terraform 修改该实例，状态文件将会更新，以反映实例的新配置。
- en: 'There are a few different ways that you can store your state file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方式可以存储您的状态文件：
- en: '`terraform.tfstate`. This is the simplest option, but it can be inconvenient
    if you are working in a team and need to share the state file.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform.tfstate`。这是最简单的选项，但如果您在团队中工作并需要共享状态文件，这可能会很不方便。'
- en: '**Remote state file**: You can also store the state file in a remote location,
    such as an S3 bucket or a Terraform Cloud workspace. This allows you to share
    the state file with other members of your team, and it can also help protect against
    data loss if your local machine is destroyed.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程状态文件**：您也可以将状态文件存储在远程位置，例如 S3 存储桶或 Terraform Cloud 工作区。这样可以与团队的其他成员共享状态文件，并且如果您的本地计算机损坏，它也有助于防止数据丢失。'
- en: '**Locking state file**: When using a remote state file, you can enable state
    file locking to prevent multiple users from modifying the state file simultaneously.
    This can help avoid conflicts when multiple users are making changes to the infrastructure
    at the same time.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**锁定状态文件**：在使用远程状态文件时，您可以启用状态文件锁定，以防止多个用户同时修改状态文件。这有助于避免当多个用户同时更改基础设施时发生冲突。'
- en: Modules
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: Modules are self-contained packages of Terraform configurations that can be
    shared and reused. You can use modules to define your infrastructure in a more
    modular, reusable way.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是自包含的 Terraform 配置包，可以共享和重用。您可以使用模块以更模块化、可重用的方式定义基础设施。
- en: For example, suppose you want to create a web server cluster with a load balancer
    and a database. You could create a module for each of these components, and then
    use those modules to build the web server cluster. This would allow you to reuse
    the modules in other infrastructure projects, and it would make your code easier
    to understand and maintain.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您想要创建一个带负载均衡器和数据库的 Web 服务器集群。您可以为这些组件创建一个模块，然后使用这些模块来构建 Web 服务器集群。这样，您可以在其他基础设施项目中重用这些模块，并且可以使您的代码更容易理解和维护。
- en: To create a module, you create a directory with one or more Terraform configuration
    files and a `module.tf` file that specifies the inputs and outputs of the module.
    You can then use the module in your infrastructure by calling it from another
    Terraform configuration using a module block.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个模块，您需要创建一个包含一个或多个 Terraform 配置文件以及一个 `module.tf` 文件的目录，该文件指定模块的输入和输出。然后，您可以通过在另一个
    Terraform 配置文件中使用模块块来调用该模块，并将其用于您的基础设施。
- en: 'Here’s an example of a module block that calls a module named `web_server_cluster`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个调用名为 `web_server_cluster` 模块的模块块示例：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This block specifies the source of the module (a local directory named `web_server_cluster`)
    and sets the input variables for the module (`num_web_servers`, `web_server_size`,
    and `database_size`). The module can then use these input variables to create
    the desired infrastructure.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个块指定了模块的源（一个名为`web_server_cluster`的本地目录），并为模块设置了输入变量（`num_web_servers`、`web_server_size`和`database_size`）。然后，模块可以使用这些输入变量来创建所需的基础设施。
- en: Variables
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: Variables allow you to parameterize your configurations and make them more flexible.
    You can use variables to define values that are used in multiple places in your
    configuration, or that you want to be able to adjust easily.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 变量允许你对配置进行参数化，使其更加灵活。你可以使用变量来定义在多个地方使用的值，或者你希望能够轻松调整的值。
- en: 'To define a variable in your Terraform configuration, you can use a variable
    block. Here’s an example of a variable block that defines a variable named `image_id`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Terraform配置中定义变量，可以使用变量块。以下是一个定义名为`image_id`的变量的变量块示例：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This block defines a variable of type string named `image_id`. You can then
    use this variable in your configuration by referencing it with the `${var.name}`
    syntax, for example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个块定义了一个类型为字符串的变量，名为`image_id`。然后，你可以在配置中通过`${var.name}`语法引用此变量，例如：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also specify default values for your variables using the `default`
    attribute, for example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`default`属性为变量指定默认值，例如：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This sets the default value of the `image_id` variable to `ami-12345678`. If
    you don’t specify a value for the variable when you run Terraform, it will use
    the default value.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将`image_id`变量的默认值设置为`ami-12345678`。如果在运行Terraform时没有为变量指定值，它将使用默认值。
- en: 'You can set the value of a variable using one of the following methods:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方法之一设置变量的值：
- en: '**Hard-coding the value**: You can set the value of a variable directly in
    your configuration using the default attribute. This is useful for simple configurations
    or for testing.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬编码值**：你可以直接在配置中使用默认属性设置变量的值。这对于简单配置或测试很有用。'
- en: '**Using environment variables**: You can set the value of a variable using
    an environment variable. This can be useful for storing sensitive information
    or for managing multiple environments (e.g. staging and production).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用环境变量**：你可以使用环境变量设置变量的值。这对于存储敏感信息或管理多个环境（例如测试和生产环境）非常有用。'
- en: '`terraform.tfvars`) and reference the file in your configuration using the
    `-var-file` flag. This can be useful for sharing values across multiple configurations
    or for storing values that you don’t want to commit to version control.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform.tfvars`)并在配置中通过`-var-file`标志引用该文件。这对于在多个配置之间共享值或存储不希望提交到版本控制的值非常有用。'
- en: Outputs
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出
- en: Outputs are values that are exported from a Terraform configuration and can
    be accessed from other configurations or consumed by external systems.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是从Terraform配置中导出的值，可以从其他配置中访问，或被外部系统使用。
- en: 'To define an output in your Terraform configuration, you can use an `output`
    block. Here’s an example of an `output` block that exports the public IP address
    of an EC2 instance:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Terraform配置中定义输出，可以使用`output`块。以下是一个`output`块示例，导出EC2实例的公共IP地址：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This `output` block exports a value named `public_ip` and sets its value to
    the public IP address of the `web_server` EC2 instance. You can then access the
    value of this output using the `terraform output` command or by referencing it
    in another Terraform configuration using the `${``output.name}` syntax.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`output`块导出了一个名为`public_ip`的值，并将其设置为`web_server` EC2实例的公共IP地址。然后，你可以使用`terraform
    output`命令访问此输出的值，或者在另一个Terraform配置中通过`${output.name}`语法引用它。
- en: Outputs are useful for displaying important information about your infrastructure,
    such as the IP addresses of resources or the URLs of applications. They can also
    be used to pass information between multiple configurations, such as the ID of
    an S3 bucket that is created in one configuration and used in another.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输出对于显示关于基础设施的重要信息非常有用，例如资源的IP地址或应用程序的URL。它们还可以用于在多个配置之间传递信息，例如在一个配置中创建的S3存储桶的ID，并在另一个配置中使用。
- en: Provisioners
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供程序
- en: Provisioners are used to execute scripts or make API calls after a resource
    is created. This can be useful for tasks such as installing software on an EC2
    instance or uploading files to an S3 bucket.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Provisioner 用于在资源创建后执行脚本或进行 API 调用。这对于安装 EC2 实例上的软件或上传文件到 S3 存储桶等任务非常有用。
- en: 'Provisioners are defined in a `provisioner` block within a `resource` block.
    For example, the following `resource` block includes a provisioner that runs a
    shell script after the EC2 instance is created:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Provisioner 是在 `resource` 块中的 `provisioner` 块内定义的。例如，以下的 `resource` 块包括一个 provisioner，该
    provisioner 在 EC2 实例创建后运行一个 shell 脚本：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This provisioner uses the `remote-exec` provisioner type, which allows you to
    execute commands on the remote host using SSH. The inline attribute specifies
    the commands to run. In this case, the provisioner installs the `nginx` web server
    on the EC2 instance.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该 provisioner 使用 `remote-exec` provisioner 类型，它允许你通过 SSH 在远程主机上执行命令。inline 属性指定了要运行的命令。在这种情况下，provisioner
    在 EC2 实例上安装了 `nginx` web 服务器。
- en: Terraform supports several different types of provisioners, including `file`,
    `remote-exec`, and `local-exec`. You can use different provisioners depending
    on your needs and the type of resource you are managing.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 支持几种不同类型的 provisioner，包括 `file`、`remote-exec` 和 `local-exec`。你可以根据需求和管理的资源类型选择不同的
    provisioner。
- en: Selecting AWS Providers
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择 AWS 提供商
- en: In Terraform, a provider is a plugin that integrates Terraform with a specific
    infrastructure platform, such as AWS, Google Cloud, or Azure. Providers are responsible
    for understanding the API of the infrastructure platform and exposing resources
    that can be created, modified, and destroyed using Terraform.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Terraform 中，提供商是一个插件，它将 Terraform 与特定的基础设施平台（如 AWS、Google Cloud 或 Azure）集成。提供商负责了解基础设施平台的
    API，并暴露可以使用 Terraform 创建、修改和销毁的资源。
- en: 'There are two types of Terraform providers – official providers and third-party
    providers:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 提供商有两种类型——官方提供商和第三方提供商：
- en: '**Official providers** are developed and maintained by HashiCorp, the company
    behind Terraform. These providers are considered the most stable and reliable,
    as they are supported by HashiCorp and receive regular updates.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**官方提供商**由 HashiCorp 开发和维护，HashiCorp 是 Terraform 的背后公司。这些提供商被认为是最稳定和可靠的，因为它们由
    HashiCorp 支持，并定期更新。'
- en: '**Third-party providers** are developed and maintained by external organizations
    or individuals. These providers are not officially supported by HashiCorp, but
    they can be useful for extending Terraform to support additional infrastructure
    platforms or tools.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三方提供商**由外部组织或个人开发和维护。这些提供商不受 HashiCorp 官方支持，但它们可以扩展 Terraform，支持更多的基础设施平台或工具。'
- en: You can find a list of all the available Terraform providers on the Terraform
    Registry. ([https://registry.terraform.io/browse/providers](https://registry.terraform.io/browse/providers)).
    The Registry lists both official and third-party providers, and it includes information
    on the providers’ compatibility with Terraform and the resources they support.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Terraform Registry 上找到所有可用的 Terraform 提供商的列表。([https://registry.terraform.io/browse/providers](https://registry.terraform.io/browse/providers))。该注册表列出了官方提供商和第三方提供商，并包含关于提供商与
    Terraform 兼容性及其支持的资源的信息。
- en: 'To select a provider in Terraform, you need to specify it in a `provider` block
    in your configuration. For example, to use the AWS provider, you would add the
    following block to your configuration:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Terraform 中选择一个提供商，你需要在配置中指定它的 `provider` 块。例如，要使用 AWS 提供商，你可以将以下块添加到你的配置中：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This block specifies that you want to use the AWS provider and that you want
    to use the `us-east-1` region. You can also specify provider-specific configuration
    options, such as the access key and secret key to use when authenticating with
    the provider’s APIs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该块指定了你想要使用 AWS 提供商，并选择 `us-east-1` 区域。你还可以指定特定提供商的配置选项，例如在使用提供商 API 进行身份验证时使用的访问密钥和秘密密钥。
- en: You can use multiple `provider` blocks in a single configuration to manage resources
    across multiple providers. For example, you might use the AWS provider to manage
    your EC2 instances and the Google Cloud provider to manage your Compute Engine
    instances.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在一个配置中使用多个 `provider` 块来管理跨多个提供商的资源。例如，你可能会使用 AWS 提供商来管理你的 EC2 实例，使用 Google
    Cloud 提供商来管理你的计算引擎实例。
- en: 'To specify the version of a provider to use, you can use the `version` attribute
    in the `provider` block, for example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定使用的提供商版本，可以在 `provider` 块中使用 `version` 属性，例如：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This specifies that you want to use the latest version of the AWS provider that
    is compatible with version 2.0.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了你希望使用与2.0版本兼容的最新AWS提供者版本。
- en: By running the `terraform init` command, Terraform will automatically download
    the required plugins for the providers specified in your configuration. To enforce
    a specific version of a provider, you can add a `version` attribute to the `provider`
    block.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`terraform init`命令，Terraform将自动下载配置中指定的提供者所需的插件。要强制使用特定版本的提供者，你可以在`provider`块中添加`version`属性。
- en: You can also specify the version of a provider using the `-upgrade` flag when
    running `terraform init`. This will force Terraform to download the latest version
    of the provider, even if you have already downloaded a compatible version.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在运行`terraform init`时使用`-upgrade`标志来指定提供者的版本。这将强制Terraform下载最新版本的提供者，即使你已经下载了一个兼容的版本。
- en: 'If you want to use a specific version of a provider, you can specify the version
    number in the `version` attribute, for example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用特定版本的提供者，可以在`version`属性中指定版本号，例如：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This specifies that you want to use version 2.23.0 of the AWS provider.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了你希望使用版本2.23.0的AWS提供者。
- en: 'If you want to use the latest version of a provider, you can set the `version`
    attribute to `latest`, for example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用最新版本的提供者，可以将`version`属性设置为`latest`，例如：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This specifies that you want to use the latest version of the AWS provider that
    is available.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了你希望使用AWS提供者的最新版本。
- en: You can also use the `-get-plugins` flag when running `terraform init` to download
    the latest versions of all the providers in your configuration.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在运行`terraform init`时使用`-get-plugins`标志来下载配置中所有提供者的最新版本。
- en: 'There are currently two AWS Providers available in Terraform:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在Terraform中有两个AWS提供者：
- en: The **aws provider** is the legacy provider, and it is written in Go. It uses
    the AWS SDK for Go to make API requests to AWS, and it was the default AWS provider
    for Terraform for a long time.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**aws提供者**是传统的提供者，使用Go语言编写。它使用AWS的Go SDK来向AWS发送API请求，长期以来它一直是Terraform的默认AWS提供者。'
- en: The **aws.sdk provider** is a newer provider, and it is written in TypeScript.
    It uses the AWS SDK for JavaScript to make API requests to AWS. It was introduced
    in Terraform v0.13 as an experimental provider, and it became a stable provider
    in Terraform v0.14.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**aws.sdk提供者**是一个较新的提供者，使用TypeScript编写。它使用AWS的JavaScript SDK来向AWS发送API请求。它在Terraform
    v0.13中作为实验性提供者引入，并在Terraform v0.14中成为稳定提供者。'
- en: In general, the `aws.sdk` provider is preferred over the `aws` provider, as
    it is more feature-complete and has better support for AWS services. However,
    the `aws` provider is still widely used and is likely to be supported for the
    foreseeable future.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，`aws.sdk`提供者比`aws`提供者更受欢迎，因为它功能更全面，对AWS服务的支持更好。然而，`aws`提供者仍然被广泛使用，并且在可预见的未来可能会继续得到支持。
- en: Selecting AWS public modules for your needs
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据你的需求选择AWS公共模块
- en: To use a public module in Terraform, you need to specify the source of the module
    in a `module` block in your configuration. You can specify the source of a module
    using a local path, Terraform Public Registry, a Git repository URL, or a URL
    to a compressed archive file (e.g. a `.zip` or `.``tar.gz` file).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Terraform中使用公共模块，你需要在配置中的`module`块中指定模块的来源。你可以通过本地路径、Terraform公共注册表、Git仓库网址或压缩归档文件的URL（例如`.zip`或`.tar.gz`文件）来指定模块的来源。
- en: 'Here are some examples of how you can specify the source of a public module
    in a `module` block:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些示例，展示了如何在`module`块中指定公共模块的来源：
- en: '`source` attribute, for example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`属性，例如：'
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This specifies that the `web_server_cluster` module is located in a local directory
    named `web_server_cluster`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了`web_server_cluster`模块位于名为`web_server_cluster`的本地目录中。
- en: '`source` attribute, for example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`属性，例如：'
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This specifies that the `web_server_cluster` module is located in a Git repository
    at the URL [https://github.com/example/web_server_cluster.git](https://github.com/example/web_server_cluster.git).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了`web_server_cluster`模块位于Git仓库中，网址为[https://github.com/example/web_server_cluster.git](https://github.com/example/web_server_cluster.git)。
- en: '`source` attribute, for example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`属性，例如：'
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This specifies that the `web_server_cluster` module is located in a `.zip` file
    at the URL `http://example.com/web_server_cluster.zip`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了`web_server_cluster`模块位于URL `http://example.com/web_server_cluster.zip`的`.zip`文件中。
- en: '`module` block and set the `source` attribute to the URL of the module on the
    registry.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`module` 块并将 `source` 属性设置为模块在 registry 上的 URL。'
- en: 'Here’s an example of a `module` block that calls a module hosted on the Terraform
    Registry:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个调用 Terraform Registry 上托管模块的 `module` 块示例：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can find a list of available public modules on the Terraform Registry ([https://registry.terraform.io/browse/modules](https://registry.terraform.io/browse/modules)).
    The Registry includes both official and third-party modules, and it includes information
    on the module’s compatibility with Terraform and the resources it supports. You
    can use the search bar to find specific modules, or you can browse the categories
    to find modules for a particular infrastructure platform or use case.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Terraform Registry 上找到可用的公共模块列表（[https://registry.terraform.io/browse/modules](https://registry.terraform.io/browse/modules)）。该
    Registry 包含官方和第三方模块，并提供模块与 Terraform 的兼容性信息以及它支持的资源。你可以使用搜索栏查找特定模块，或者浏览类别找到针对特定基础设施平台或用例的模块。
- en: How to decide on Terraform module selection
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何决定选择哪个 Terraform 模块
- en: 'There are several factors to consider when deciding which Terraform modules
    to use in your infrastructure:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定在你的基础设施中使用哪些 Terraform 模块时，有几个因素需要考虑：
- en: '**Compatibility**: Make sure that the module is compatible with the version
    of Terraform you are using. You can check the compatibility information on the
    module’s page on the Terraform Registry.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性**：确保该模块与你正在使用的 Terraform 版本兼容。你可以在模块的 Terraform Registry 页面查看兼容性信息。'
- en: '**Supported resources**: Check that the module supports the resources you need
    to create or manage. You can find a list of the resources supported by the module
    on its page on the Terraform Registry.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持的资源**：检查模块是否支持你需要创建或管理的资源。你可以在 Terraform Registry 上的模块页面找到该模块支持的资源列表。'
- en: '**Input variables**: Make sure that the module has the input variables you
    need to customize the behavior of the module. You can find a list of the input
    variables for the module on its page on the Terraform Registry.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入变量**：确保模块包含你需要的输入变量，以自定义模块的行为。你可以在 Terraform Registry 上的模块页面找到模块的输入变量列表。'
- en: '**Output values**: Check that the module has the output values you need to
    access the created resources or pass information between modules. You can find
    a list of the output values for the module on its page on the Terraform Registry.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出值**：检查模块是否有你需要的输出值，以便访问创建的资源或在模块之间传递信息。你可以在 Terraform Registry 上的模块页面找到该模块的输出值列表。'
- en: '**Maintenance**: Consider the maintenance status of the module. Check when
    the module was last updated and whether it is actively maintained. You may want
    to choose a module that is more actively maintained to ensure that it stays up
    to date and receives bug fixes and new features.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护**：考虑模块的维护状态。检查模块最后更新的时间以及它是否在积极维护。你可能想选择一个更积极维护的模块，以确保它保持最新，并且能够修复 bug
    和添加新功能。'
- en: How to write custom Terraform AWS modules
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写自定义 Terraform AWS 模块
- en: To write a Terraform module, you will need to create a configuration file or
    a set of configuration files that define the resources you want to create or manage.
    A module is essentially a reusable configuration that can be called from other
    configurations or modules.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写一个 Terraform 模块，你需要创建一个配置文件或一组配置文件，定义你想要创建或管理的资源。模块本质上是一个可重用的配置，可以从其他配置或模块中调用。
- en: 'Here are the steps you can follow to write a Terraform module:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是编写 Terraform 模块的步骤：
- en: '`resource` blocks to define the resources you want to create or manage. For
    example, you might use an `aws_instance` resource to create an EC2 instance or
    an `aws_s3_bucket` resource to create an S3 bucket.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`resource` 块用于定义你想要创建或管理的资源。例如，你可能会使用 `aws_instance` 资源来创建 EC2 实例，或使用 `aws_s3_bucket`
    资源来创建 S3 桶。'
- en: '`variable` blocks to define the input variables for the module. Input variables
    allow users of the module to customize the behavior of the module when it is called.
    For example, you might define a variable for the number of EC2 instances to create
    or the name of an S3 bucket.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`variable` 块用于定义模块的输入变量。输入变量允许模块的用户在调用模块时自定义其行为。例如，你可能会定义一个变量来指定要创建的 EC2 实例数量，或指定
    S3 桶的名称。'
- en: '`output` blocks to define the output values for the module. Output values allow
    users of the module to access the created resources or pass information between
    modules. For example, you might define an output value for the public IP address
    of an EC2 instance or the URL of an S3 bucket.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`output` 块用于定义模块的输出值。输出值允许模块的用户访问创建的资源或在模块之间传递信息。例如，你可能会定义一个输出值，表示 EC2 实例的公共
    IP 地址或 S3 桶的 URL。'
- en: '`terraform plan` and `terraform apply` to test the module and make sure it
    is creating the resources as expected.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `terraform plan` 和 `terraform apply` 测试模块，并确保它按照预期创建资源。
- en: '**Document the module**: Document the input variables, output values, and any
    other important information about the module in the README file for the module.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模块文档**：在模块的 README 文件中记录输入变量、输出值以及关于该模块的其他重要信息。'
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the basics of developing AWS infrastructure projects
    with Terraform. We learned how to deploy our first Terraform template in AWS,
    select AWS Providers, and choose public AWS modules that best suit our needs.
    We also explored how to write custom Terraform AWS modules and how to use them
    effectively. By the end of this chapter, you should be able to develop and deploy
    your own AWS infrastructure, make decisions about providers, select the best public
    AWS modules, and create and use custom Terraform AWS modules. These skills will
    serve as a foundation for you to continue exploring Terraform and AWS infrastructure
    development.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了使用 Terraform 开发 AWS 基础设施项目的基础知识。我们学习了如何在 AWS 中部署第一个 Terraform 模板，选择
    AWS 提供商，并选择最适合我们需求的公共 AWS 模块。我们还探讨了如何编写自定义的 Terraform AWS 模块，并如何有效地使用它们。本章结束时，你应该能够开发并部署自己的
    AWS 基础设施，做出关于提供商的决策，选择最合适的公共 AWS 模块，并创建和使用自定义的 Terraform AWS 模块。这些技能将为你继续探索 Terraform
    和 AWS 基础设施开发打下基础。
- en: Whether you’re new to serverless or an experienced developer, deploying serverless
    projects with Terraform can be a game changer for your development workflow. In
    the next chapter, we’ll dive into the world of serverless and explore how to use
    Terraform to deploy serverless applications on AWS Lambda. From configuring AWS
    APIs and authentication to handling event triggers and scaling, you’ll gain the
    skills needed to successfully deploy and manage your serverless projects with
    Terraform.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是无服务器架构的新手还是经验丰富的开发者，使用 Terraform 部署无服务器项目都能为你的开发工作流带来变革。在下一章中，我们将深入探讨无服务器架构，并学习如何使用
    Terraform 在 AWS Lambda 上部署无服务器应用。从配置 AWS API 和身份验证到处理事件触发器和自动扩展，你将掌握成功部署和管理无服务器项目所需的技能。
