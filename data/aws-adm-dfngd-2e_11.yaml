- en: Connecting the World with AWS IoT and AWS Greengrass
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS IoT和AWS Greengrass连接世界
- en: It's been quite a long journey so far and yet here we are; at the last chapter
    of this book! If you made it to here, then you definitely need to take a moment
    and give yourself a well-deserved pat on the back!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这一路走来已经挺长了，但我们终于到了本书的最后一章！如果你已经坚持到这里，那你绝对需要花点时间给自己一个应得的掌声！
- en: So far in this book, we have covered a plethora of services, such as Amazon
    EFS, AWS Beanstalk, AWS Code Suite, AWS Shield, and AWS Data Pipeline, just to
    name a few. In this final chapter, we will be exploring the IoT suite of services
    provided by AWS, with more emphasis on two core products, namely, AWS IoT and
    AWS Greengrass.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了许多服务，如Amazon EFS、AWS Beanstalk、AWS Code Suite、AWS Shield和AWS Data
    Pipeline，等等。在最后一章，我们将深入探讨AWS提供的物联网服务套件，重点关注两个核心产品，即AWS IoT和AWS Greengrass。
- en: 'Let''s have a quick look at the various topics that we will be covering in
    this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下本章将要涉及的各种主题：
- en: A brief look at the building blocks required for IoT
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对物联网所需构建块的简要介绍
- en: An introduction to the AWS IoT suite of services followed by a deep dive into
    AWS IoT, its concepts and terminologies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS IoT服务套件简介，并深入探讨AWS IoT及其概念和术语
- en: Connecting to AWS IoT using a Raspberry Pi Zero device
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用树莓派Zero设备连接到AWS IoT
- en: Exploring the AWS IoT Device SDK, using a few simple code examples
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索AWS IoT设备SDK，通过一些简单的代码示例
- en: Integrating AWS IoT with other AWS services, using IoT rules
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用物联网规则将AWS IoT与其他AWS服务集成
- en: An introduction to AWS Greengrass, along with a simple getting started example
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Greengrass简介，并附带一个简单的入门示例
- en: Effectively monitoring IoT devices, as well as the IoT services
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效监控物联网设备以及物联网服务
- en: So without any further ado, let's get started!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么不再多说，让我们开始吧！
- en: IoT – what is it?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网——它究竟是什么？
- en: 'Well, to the uninitiated, **IoT** or **Internet of Things** is all about connecting
    everyday *objects* or *things* together, using a common medium of communication
    (in this case, the internet) for exchange of data. I know it doesn''t sound much,
    but today, IoT is practically being implemented everywhere around us; from wearable
    devices, smartphones, home appliances, such as refrigerators, air conditioners,
    to vehicles and heavy machinery, and much more! Gartner predicts that by the year
    2020, there will be an estimated 26 billion devices connected using IoT, and this
    number is set to grow even further, as IoT adoption becomes mainstream. But what
    exactly is IoT and how do you build it? Here''s a quick look at some of the basic
    building blocks required in order to get started with IoT:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于外行来说，**物联网**（**IoT**）就是将日常的*物品*或*物体*通过使用一个共同的通信媒介（在此为互联网）连接起来，以便交换数据。我知道这听起来没什么了不起的，但如今，物联网几乎无处不在；从可穿戴设备、智能手机、家电（如冰箱、空调）到车辆、重型机械等，几乎无所不包！Gartner预测，到2020年，预计将有约260亿个设备通过物联网连接，且随着物联网的普及，这一数字将继续增长。但物联网究竟是什么？又该如何构建物联网呢？下面是一些入门物联网所需的基本构建块：
- en: '![](img/9e46e079-ca97-461d-8770-befa37c53f0c.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e46e079-ca97-461d-8770-befa37c53f0c.png)'
- en: '**Things**: To begin with, any form of IoT comprises end user devices that
    we use or leverage to perform some of our day-to-day tasks. These devices, or
    things, can be anything and everything, including simple electronic devices, such
    as smartphones, wearables, alarm clocks, light bulbs, to washing machines, garage
    doors, vehicles, ships, and the list just goes on!'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物体**：首先，任何形式的物联网都由我们使用或依赖的终端设备组成，这些设备用于执行我们日常生活中的某些任务。这些设备或物体可以是任何东西，包括简单的电子设备，如智能手机、可穿戴设备、闹钟、灯泡，到洗衣机、车库门、车辆、船只，等等，名单非常长！'
- en: '**Sensors**: Sensors are devices that can be incorporated within things that
    are used to capture or supply our data. Some of the most commonly used sensors
    are IR sensors, moisture sensors, gas and pressure sensors, and so on. Sensors
    are not designed to process data on their own. They simply collect and push the
    data out to one or more processors. For example, a light sensor monitoring whether
    a light bulb is switched on or off, and so on.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传感器**：传感器是可以嵌入到物体中的设备，用于捕获或提供我们的数据。一些常见的传感器包括红外传感器、湿度传感器、气体和压力传感器等。传感器本身并不处理数据，它们仅仅收集并将数据发送到一个或多个处理器。例如，一个监控灯泡开关状态的光传感器，等等。'
- en: '**Processors**: Processors are the brains of the IoT system. Their main function
    is to process the data that is captured by the sensors. This processing can be
    based on certain triggers or can be performed close to real time, as well. A single
    processor can be used to connect and process data from multiple sensors, as well.
    The most commonly used type of processors include microcontrollers, embedded controllers,
    and so on.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理器**：处理器是物联网系统的大脑。它们的主要功能是处理由传感器捕获的数据。这种处理可以基于特定触发条件进行，或者也可以接近实时地执行。一个处理器还可以连接并处理来自多个传感器的数据。最常用的处理器类型包括微控制器、嵌入式控制器等。'
- en: '**Gateways**: Gateways are special devices that are responsible for collecting
    and routing data, processed by one or more processors, to IoT applications for
    further analysis. A gateway can collect, aggregate, and send data over the internet,
    either as streams or in batches, depending on its configuration and connectivity
    options.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网关**：网关是负责收集和路由数据的特殊设备，这些数据由一个或多个处理器处理后传送到物联网应用程序以进行进一步分析。网关可以收集、汇总并通过互联网发送数据，具体是以流式数据或批量数据的形式，取决于其配置和连接选项。'
- en: '**Application**: Once data from various gateways is collected, it needs to
    be further analyzed to form meaningful insights, so that appropriate actions on
    the respective operation can be performed. This can be achieved by leveraging
    one or more applications, such as an industrial control hub, or even a home automation
    system. For example, an application can be used to remotely trigger a light bulb
    to switch on, once the ambient light in the room starts to fade, and so on.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序**：一旦从各种网关收集到数据，接下来需要进一步分析，以形成有意义的见解，从而能够在各自的操作上执行适当的动作。这可以通过利用一个或多个应用程序来实现，例如工业控制中心，甚至是家庭自动化系统。例如，可以使用应用程序来远程触发灯泡开关，一旦房间的环境光开始变暗，等等。'
- en: With this essential information in mind, let's look at a few key AWS services
    you can use to get started with your very own IoT on the cloud.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这些基本信息后，让我们来看一看一些关键的AWS服务，帮助你开始在云端构建自己的物联网应用。
- en: Introducing the AWS IoT suite of services
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍AWS物联网服务套件
- en: 'AWS has vastly enhanced its IoT suite of services, ever since its first inception
    towards the end of 2015\. Here is a brief explanation of what it offers:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 自2015年底首次推出以来，AWS大大增强了其物联网服务套件。以下是其提供服务的简要说明：
- en: '**AWS IoT Core**: The AWS IoT Core is a managed service that allows you to
    securely connect and interact with billions of IoT devices, without having to
    bother about setting up or managing any underlying infrastructure. You can use
    the IoT Core service to build IoT applications, using a combination of various
    AWS services as well, such as AWS Lambda, Amazon Elasticsearch, Amazon machine
    learning, and so on.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS IoT Core**：AWS IoT Core是一个托管服务，它允许你安全地连接并与数十亿的物联网设备进行交互，而无需担心设置或管理任何底层基础设施。你可以使用IoT
    Core服务构建物联网应用程序，还可以结合使用多个AWS服务，如AWS Lambda、Amazon Elasticsearch、Amazon机器学习等。'
- en: '**AWS IoT Device Management**: The AWS IoT Device Management service allows
    you to register, organize, and manage a large number of IoT devices, easily. You
    can use this service to on-board devices in bulk and then manage them all, using
    a single pane of glass view.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS IoT设备管理**：AWS IoT设备管理服务允许你轻松注册、组织和管理大量物联网设备。你可以使用该服务批量引入设备，并通过一个统一的视图管理所有设备。'
- en: '**AWS Greengrass**: AWS Greengrass is a software service designed to execute
    Lambda functions locally, on your IoT devices. In addition to this, you can also
    use Greengrass to sync data between the device and the IoT Core, using data caching
    along with other functionalities, such as ML inference, messaging, and so on.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Greengrass**：AWS Greengrass是一个软件服务，旨在在你的物联网设备上本地执行Lambda函数。此外，你还可以使用Greengrass在设备与IoT
    Core之间同步数据，利用数据缓存以及其他功能，如机器学习推理、消息传递等。'
- en: '**AWS IoT Analytics**: Connecting and managing billions of IoT devices is one
    task, and querying the large IoT data set is quite another. AWS IoT Analytics
    is a completely managed service that allows you to run analytics on extremely
    large volumes of IoT data, without having to configure or manage an underlying
    analytics platform. Using this service, you obtain better insights on your devices,
    as well as build resilient IoT applications.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS IoT 分析**：连接和管理数十亿个 IoT 设备是一项任务，而查询庞大的 IoT 数据集则是另一项任务。AWS IoT 分析是一个完全托管的服务，允许你对极大量的
    IoT 数据进行分析，无需配置或管理底层分析平台。使用此服务，你可以获得关于设备的更好洞察，并构建强韧的 IoT 应用程序。'
- en: '**AWS IoT Button**: The AWS IoT Button is a Wi-Fi enabled, programmable button
    which enables you to write and integrate an IoT application, without having to
    know about any device-specific code.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS IoT 按钮**：AWS IoT 按钮是一个支持 Wi-Fi 的可编程按钮，使你能够编写并集成 IoT 应用程序，而无需了解任何设备特定的代码。'
- en: '**AWS IoT Device Defender**: With so many devices to manage and maintain, it
    is equally important to safeguard the devices against malicious attacks. AWS IoT
    Device Defender is a managed service that allows you to secure, manage, and audit
    remote devices against a set of security rules and policies. If any deviations
    are found, IoT Device Defender triggers appropriate notifications for them.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS IoT 设备防护**：随着设备数量的增加，保护设备免受恶意攻击变得同样重要。AWS IoT 设备防护是一个托管服务，允许你根据一套安全规则和政策来保护、管理和审核远程设备。如果发现任何偏离，IoT
    设备防护会触发适当的通知。'
- en: '**Amazon FreeRTOS**: Amazon FreeRTOS is a custom operating system built specifically
    for small, low-powered edge devices or microcontrollers. The operating system
    is based on the FreeRTOS kernel and helps to easily connect and manage devices
    with the AWS IoT service.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon FreeRTOS**：Amazon FreeRTOS 是一个专为小型、低功耗的边缘设备或微控制器构建的定制操作系统。该操作系统基于
    FreeRTOS 内核，帮助轻松连接和管理与 AWS IoT 服务的设备。'
- en: With this, we come to the end of this section. In the next section, we will
    learn a bit about the AWS IoT Core service in detail, along with a simple and
    easy-to-follow getting started guide.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，本节内容已结束。在接下来的章节中，我们将更详细地了解 AWS IoT Core 服务，并提供一个简单易懂的入门指南。
- en: Getting started with AWS IoT Core
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 AWS IoT Core
- en: 'With a brief understanding of the AWS IoT suite of services covered, we can
    now dive deep into the world of the AWS IoT Core! However, before we get started
    with some actual hands-on projects, here is a quick look at some important AWS
    IoT Core concepts and terminologies:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在简要了解了 AWS IoT 套件服务后，我们现在可以深入探索 AWS IoT Core 的世界！然而，在开始一些实际操作项目之前，下面是一些重要的 AWS
    IoT Core 概念和术语的快速介绍：
- en: 'The AWS IoT Core service provides bidirectional communication between devices
    and the AWS cloud, using a set of components described in the following list:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: AWS IoT Core 服务提供设备与 AWS 云之间的双向通信，使用以下列表中描述的一组组件：
- en: '**Device gateway**: This provides a secure mechanism for the IoT device to
    communicate with the AWS IoT service.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备网关**：设备网关为 IoT 设备与 AWS IoT 服务之间的通信提供了安全机制。'
- en: '**Device shadow**: A device shadow is a persistent representation of your IoT
    device on the cloud. A JSON-based document stores the current state of your device,
    which you can use to sync with the cloud.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备影像**：设备影像是 IoT 设备在云端的持久表示。基于 JSON 的文档存储了设备的当前状态，你可以用它与云端进行同步。'
- en: '**Message broker**: The message broker provides a secure and reliable channel,
    using which the IoT device can communicate with the cloud. The broker is based
    on a publisher–subscriber model and can be used to leverage either the standard
    MQTT protocol, or the advanced MQTT over WebSockets for communication.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息代理**：消息代理提供了一个安全可靠的通道，通过它，IoT 设备可以与云端进行通信。该代理基于发布–订阅模型，可以利用标准的 MQTT 协议，或通过
    WebSockets 实现高级 MQTT 协议进行通信。'
- en: '**Registry**: Registry is a service that is used to securely register your
    IoT device with the cloud. You can use the registry to associate certificates
    and MQTT client IDs with your devices.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册表**：注册表是一项服务，用于安全地将 IoT 设备注册到云端。你可以使用注册表将证书和 MQTT 客户端 ID 与设备关联。'
- en: '**Groups**: Groups are logical containers used to group together similar devices
    in order to effectively manage them. You can use groups to propagate permissions
    and perform bulk actions on your connected devices.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组**：组是逻辑容器，用于将类似设备进行分组，从而有效地管理它们。你可以使用组来传播权限并对连接的设备执行批量操作。'
- en: '**Rules**: The rules engine service in AWS IoT Core provides a mechanism which
    enables you to process IoT data using simple SQL queries. You can additionally
    write rules that can integrate AWS IoT Core with other AWS services, such as AWS
    Lambda, Amazon S3, Amazon Kinesis, and so on.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则**：AWS IoT Core 中的规则引擎服务提供了一种机制，使您能够使用简单的 SQL 查询处理物联网数据。您还可以编写规则，将 AWS
    IoT Core 与其他 AWS 服务集成，如 AWS Lambda、Amazon S3、Amazon Kinesis 等。'
- en: Here is how it all fits together! You start off by preparing a device for connection
    with the AWS IoT Core. This involves creating a set of certificates that essentially
    authenticates the device when it connects to the AWS IoT Core. Once connected,
    the device starts publishing its current state in a JSON format using the standard
    MQTT protocol. These messages are sent to the message broker, which essentially
    routes them to their respective subscribing clients, based on the message's topic.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是所有内容如何完美地配合在一起的！您首先准备一台设备，以便连接到 AWS IoT Core。这涉及创建一组证书，这些证书在设备连接到 AWS IoT
    Core 时验证设备。连接后，设备开始使用标准 MQTT 协议以 JSON 格式发布其当前状态的消息。这些消息被发送到消息代理，基于消息的主题将其路由到相应的订阅客户端。
- en: 'You can even create one or more rules to define a set of actions based on the
    data contained within the messages. When a particular data matches the configured
    expression, the rules engine invokes that particular action, which can be anything
    from sending the data to a file in Amazon S3 to processing the data using AWS
    Lambda or Amazon Kinesis. The following is a representation of these components
    put together:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以创建一个或多个规则来定义基于消息中包含的数据的一系列操作。当特定数据匹配配置的表达式时，规则引擎会调用该特定操作，该操作可以是将数据发送到 Amazon
    S3 中的文件，也可以是使用 AWS Lambda 或 Amazon Kinesis 处理数据。以下是这些组件的表示方式：
- en: '![](img/00620897-efd3-4b69-90de-8845a161d9f9.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00620897-efd3-4b69-90de-8845a161d9f9.png)'
- en: Keeping this in mind, let's look at how you can connect your IoT device with
    the AWS IoT Core!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这一点，让我们看看如何将您的物联网设备连接到 AWS IoT Core！
- en: Connecting a device to AWS IoT Core
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接设备到 AWS IoT Core
- en: AWS IoT supports a wide variety of specialized IoT-embedded devices and microcontrollers
    that you can connect to. However, for simplicity, you can also simulate an IoT
    device using either a locally set up virtual machine or an EC2 instance, as well.
    For this section, we will be using a simple Ubuntu-based virtual machine, hosted
    using VirtualBox. The virtual machine has the basic operating system packages
    installed in it and runs off a 512 MB RAM and 1 CPU core allocation with a 10
    GB disk. Ensure that your virtual machine has an open internet connectivity and
    a valid hostname set, before you proceed with any further steps.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: AWS IoT 支持多种专用物联网嵌入式设备和微控制器，您可以将其连接到。但是，为简单起见，您还可以使用本地设置的虚拟机或 EC2 实例来模拟物联网设备。对于本节，我们将使用基于
    Ubuntu 的简单虚拟机，在 VirtualBox 中托管。虚拟机中安装了基本操作系统软件包，并以 512 MB RAM 和 1 CPU 核心分配运行，拥有
    10 GB 硬盘。在继续任何进一步的步骤之前，请确保您的虚拟机具有开放的互联网连接和有效的主机名设置。
- en: 'The following list demonstrates the simulated IoT device''s configuration for
    your reference:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的列表展示了模拟物联网设备的配置供您参考：
- en: '**CPU**: 1 CPU'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU**：1 CPU'
- en: '**RAM**: 512 MB'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAM**：512 MB'
- en: '**Operating System**: Ubuntu Server 16.04.2 LTS (Xenial) x86_64 architecture'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统**：Ubuntu Server 16.04.2 LTS（Xenial）x86_64 架构'
- en: '**Packages**: Core server packages along with `vim`, `node`, `npm`, `git`,
    `wget`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件包**：核心服务器软件包以及 `vim`、`node`、`npm`、`git`、`wget`'
- en: 'Once the device or virtual machine is prepped, we are good to connect with
    the AWS IoT Core:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 设备或虚拟机准备好后，我们可以连接到 AWS IoT Core：
- en: From the AWS Management Console, filter and select the AWS IoT service using
    the Filter provided. Alternatively, select this URL, [https://console.aws.amazon.com/iot/home](https://console.aws.amazon.com/iot/home)
    to launch the AWS IoT console.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 AWS 管理控制台，使用提供的筛选器过滤并选择 AWS IoT 服务。或者，选择此网址，[https://console.aws.amazon.com/iot/home](https://console.aws.amazon.com/iot/home)
    来启动 AWS IoT 控制台。
- en: Select the Get started option to continue.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“开始”选项以继续。
- en: Once logged into the console, select the Onboard option from the navigation
    pane on the left-hand side of the console. Here, you can opt to get started with
    configuring your first device with the IoT service as well as other options, such
    as configuring the AWS IoT Button or getting started with the AWS IoT Starter
    Kit. For this section, select the Get started option under the Configure a device section.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录控制台后，从控制台左侧的导航窗格中选择"入门"选项。在这里，您可以选择开始配置第一个设备与IoT服务的连接，并选择其他选项，如配置AWS IoT按钮或开始使用AWS
    IoT入门套件。在此部分中，选择在“配置设备”部分下的“开始使用”选项。
- en: The Get started option is a simple three-step process that involves first registering
    your device, followed by downloading a set of credentials and SDKs for the device
    to communicate with the IoT Core, and finally testing to check whether the device
    is successfully connected or not.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"开始使用"选项是一个简单的三步过程，首先是注册您的设备，然后下载一组凭证和SDK，以便设备与IoT Core进行通信，最后测试检查设备是否成功连接。'
- en: 'Select Linux/OSX from the Choose a platform option followed by Node.js from
    the Choose a AWS IoT Device SDK, as shown in the following screenshot. Note here,
    you can alternatively select the Java or Python SDKs as well; however, the rest
    of this particular use case will be based only upon Node.js:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“选择平台”选项中选择Linux/OSX，然后从“选择AWS IoT设备SDK”中选择Node.js，如下图所示。请注意，您也可以选择Java或Python
    SDK；不过，本用例的其余部分将仅基于Node.js：
- en: '![](img/493f49f8-101a-4741-87f7-45fbf07a9b18.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/493f49f8-101a-4741-87f7-45fbf07a9b18.png)'
- en: Once the appropriate platform and IoT SDK are selected, click on Next to continue.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适当的平台和IoT SDK后，点击“下一步”继续。
- en: The next step involves the registration of a *thing* or in our case, the IoT
    device itself. Start off by providing a suitable Name for your thing and then
    select the Show optional configuration option.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步涉及注册一个*Thing*，在我们的例子中，就是物联网设备本身。首先为您的Thing提供一个合适的名称，然后选择显示可选配置选项。
- en: In the Apply a type to this thing section, select the Create type option. A Thing
    Type simplifies managing IoT devices by providing a consistent registry data for
    things that share a particular type. Provide a suitable Name and an optional Description for
    your Thing Type and select Create thing type when done.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“为此Thing应用类型”部分中，选择创建类型选项。Thing类型通过为共享特定类型的Thing提供一致的注册数据，从而简化了IoT设备的管理。为您的Thing类型提供合适的名称和可选描述，并在完成后选择创建Thing类型。
- en: 'Here''s what the final configuration should look like. In my case, I''ve created
    a Thing Type called dummyIoTDevice for logically classifying all virtual machine-based
    IoT devices together. Select the Create Thing option once completed:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是最终配置的样子。在我的例子中，我创建了一个名为dummyIoTDevice的Thing类型，用于将所有基于虚拟机的IoT设备逻辑地分类在一起。完成后选择创建Thing选项：
- en: '![](img/7c818630-e6ae-49d7-9284-172aaf633f5e.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c818630-e6ae-49d7-9284-172aaf633f5e.png)'
- en: With the thing successfully created, we now need to establish the connection
    between the thing and AWS IoT Core. To do so, select the newly created thing tile
    from the Things console to view the thing's various configurations. Among the
    important options is the Security option. Go ahead and select the Security option
    from the navigation pane.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功创建Thing后，我们现在需要建立Thing与AWS IoT Core之间的连接。为此，请从Things控制台中选择新创建的Thing图标，以查看Thing的各种配置选项。重要选项之一是安全性选项。请从导航窗格中选择安全性选项。
- en: Here, you can create and associate the necessary certificates, as well as policies
    that will be required for Thing to communicate with the IoT Core. Select the Create
    certificate option to begin with.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以创建并关联所需的证书，以及与Thing通信所需的策略，这些策略是与IoT Core通信时所必需的。首先选择创建证书选项开始。
- en: 'The necessary certificates are created automatically by AWS Core. Download
    these files and save them in a safe place. Certificates can be retrieved at any
    time, but the private and public keys *cannot be retrieved* after you close this
    page:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必要的证书由AWS Core自动创建。下载这些文件并保存在安全的地方。证书可以随时检索，但在关闭此页面后，私钥和公钥*无法检索*：
- en: '**A certificate for this thing**: `xyz.cert.pem`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**此Thing的证书**: `xyz.cert.pem`'
- en: '**A public key**: `xyz.public.key`'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个公钥**: `xyz.public.key`'
- en: '**A private key**: `xyz.private.key`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个私钥**: `xyz.private.key`'
- en: 'In addition, you will need to download the *root CA* for AWS IoT from Symantec.
    You can do that by selecting the following URL:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还需要从Symantec下载AWS IoT的*根CA*。您可以通过选择以下URL来完成此操作：
- en: '[https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem](https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem](https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem)'
- en: 'Remember to select the Activate option to successfully activate the keys. Once
    done, select the Attach a policy option, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请记得选择“激活”选项，以成功激活密钥。完成后，选择“附加策略”选项，如下截图所示：
- en: '![](img/8098dee5-61d5-4d1e-89d9-43fde4e26c44.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8098dee5-61d5-4d1e-89d9-43fde4e26c44.png)'
- en: Since this is our first time working with the IoT Core, we will be required
    to create a new policy from scratch. The policy will be used to authorize the
    certificates we created in the previous step. Select the Create new policy option
    to get started.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是我们第一次使用 IoT Core，我们需要从头开始创建一个新策略。该策略将用于授权我们在前一步创建的证书。选择“创建新策略”选项以开始。
- en: 'In the Create a Policy page, start by providing a suitable Name for your new
    policy. Once completed, you can use either the *basic* or *advanced* mode to create
    your IoT policy. For simplicity, select the Advanced mode option and paste the
    following policy snippet as shown:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建策略页面，首先为你的新策略提供一个合适的名称。完成后，你可以选择 *基础* 或 *高级* 模式来创建 IoT 策略。为了简单起见，选择高级模式选项，并粘贴以下策略片段：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The following policy grants all devices permission to connect, publish, and
    subscribe to the AWS IoT message broker. You can alternatively tweak this policy
    as per your requirements, as well.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下策略允许所有设备连接、发布和订阅 AWS IoT 消息代理。你也可以根据需求调整此策略。
- en: Once done, select the Create option to complete the policy creation process.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，选择“创建”选项以完成策略创建过程。
- en: With this step completed, we are but a few steps away from establishing the
    connection between our IoT device and the AWS IoT Core.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，我们距离建立 IoT 设备与 AWS IoT Core 之间的连接仅剩几个步骤。
- en: 'With the necessary policy created and the certificates downloaded, we now need
    to copy these to our IoT device, in this case the Ubuntu virtual machine. You
    can use any SCP tool to perform this activity, such as WinSCP, as well. Here is
    a screenshot of the files on my Ubuntu virtual machine:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所需的策略并下载证书后，我们现在需要将这些证书复制到我们的 IoT 设备上，在此案例中是 Ubuntu 虚拟机。你可以使用任何 SCP 工具来执行此操作，例如
    WinSCP。以下是我 Ubuntu 虚拟机上的文件截图：
- en: '![](img/0ac44f49-056f-4701-94b6-b235a3b9470e.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ac44f49-056f-4701-94b6-b235a3b9470e.png)'
- en: For this scenario, I've called the downloaded Symantec Root CA file  `root-CA.crt`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个场景，我将下载的 Symantec 根证书文件命名为 `root-CA.crt`。
- en: Once the files are copied over to a destination folder in your IoT device, you
    are now ready to test the connectivity, but in order to do that, we will first
    need to install and configure the AWS IoT Device SDK on our IoT device.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件被复制到 IoT 设备的目标文件夹，你现在可以开始测试连接性，但为了做到这一点，我们首先需要在 IoT 设备上安装并配置 AWS IoT 设备
    SDK。
- en: Getting started with AWS IoT Device SDK
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 AWS IoT 设备 SDK
- en: The AWS IoT Device SDK is a quick and easy way to connect your IoT devices with
    AWS IoT Core. To date, AWS provides IoT Device SDKs for Node.js, Java, Python,
    and Embedded C. For this particular section, we will be connecting our dummy IoT
    device with AWS IoT, using the Node.js SDK.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: AWS IoT 设备 SDK 是一种快速简便的方法，可以将你的 IoT 设备连接到 AWS IoT Core。至今，AWS 提供了适用于 Node.js、Java、Python
    和嵌入式 C 的 IoT 设备 SDK。在本节中，我们将使用 Node.js SDK 将虚拟的 IoT 设备与 AWS IoT 连接。
- en: 'Before we get things started, ensure that you have the latest versions of node
    and NPM installed and running on your device. Since we are simulating an IoT device
    using an Ubuntu virtual machine, you can use the following commands to install
    and verify node and NPM versions:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，确保你已经安装并运行了设备上的最新版本的 node 和 NPM。由于我们使用 Ubuntu 虚拟机模拟 IoT 设备，你可以使用以下命令来安装并验证
    node 和 NPM 的版本：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the required packages are installed, we now need to install the AWS IoT
    Device SDK itself. Type in the following command as shown:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所需的软件包后，我们现在需要安装 AWS IoT 设备 SDK。请输入以下命令：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With the SDK installed, we can now begin testing the connectivity with a simple
    Node.js program. Copy and paste the following code snippet in a new `.js` file
    on your IoT device:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安装好 SDK 后，我们现在可以开始通过一个简单的 Node.js 程序测试连接性。将以下代码片段复制并粘贴到你 IoT 设备上的新 `.js` 文件中：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What does the code do? Well for starters, the first section of the code is
    simply where you pass the required private key and certificates downloaded from
    the earlier steps, along with a few other configuration items, such as the `clientId`,
    the AWS `region` where the IoT Core is set up and finally, the `host,` which is
    basically a unique REST API endpoint for your device. You can find this endpoint
    by selecting your newly created IoT device from the AWS IoT dashboard and selecting
    the Interact tab, as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的作用是什么？首先，代码的第一部分是传递从前面的步骤中下载的私钥和证书，以及其他一些配置项，比如`clientId`、AWS IoT Core所在的`region`，以及`host`，这实际上是你的设备的唯一REST
    API端点。你可以通过从AWS IoT仪表板中选择新创建的IoT设备，并选择“Interact”标签来找到这个端点，具体如下图所示：
- en: '![](img/8b80713b-4516-4f4f-9b91-582c38712d6c.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b80713b-4516-4f4f-9b91-582c38712d6c.png)'
- en: 'The second part of the code is where we use the configured parameters to actually
    connect to the AWS IoT Core. If the connection is successful, it will print a
    simple message as shown. To run the code, simply type in the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第二部分是使用配置好的参数连接到AWS IoT Core。如果连接成功，它将打印出一个简单的消息，如下所示。要运行代码，只需输入以下命令：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/de4561d2-d354-4989-8a55-eafc1acbc8e7.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de4561d2-d354-4989-8a55-eafc1acbc8e7.png)'
- en: With the device now successfully connecting with the AWS IoT Core, let's look
    at a few other examples that you can use to interact with the message broker service.
    To start off, let's see how we can use the AWS IoT Device SDK to subscribe to
    a topic and print back any message that gets published to it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 设备现在成功连接到AWS IoT Core，我们来看一些其他示例，帮助你与消息代理服务进行交互。首先，让我们看看如何使用AWS IoT设备SDK订阅主题，并打印出发布到该主题的任何消息。
- en: 'Copy and paste the following code snippet below the connection parameters:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码片段粘贴到连接参数下方：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The following code subscribes the device to a topic named `Topic0`. Once the
    subscription is completed, the code will display any message that is published
    to it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将设备订阅到名为`Topic0`的主题。一旦订阅完成，代码将显示发布到该主题的任何消息。
- en: 'With the code in place, save the file and run the program using the following
    code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码就绪后，保存文件并使用以下代码运行程序：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, let us look at how we can publish a message to the newly created topic:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看一下如何将消息发布到新创建的主题：
- en: To publish a message to the following topic, we will use the MQTT client provided
    by AWS IoT Core itself. To do so, from the AWS IoT Core dashboard, select the
    Test option from the navigation pane.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将消息发布到以下主题，我们将使用AWS IoT Core本身提供的MQTT客户端。为此，从AWS IoT Core仪表板中选择导航窗格中的“Test”选项。
- en: Using the MQTT client, you can subscribe, as well as publish, to a topic. Click
    on the Publish to topic option.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用MQTT客户端，你既可以订阅，也可以发布消息到主题。点击“Publish to topic”选项。
- en: 'In the Publish section, provide the topic name (in this case, `Topic0`) where
    you want to publish the message and click on Publish to topic, as shown in the
    following screenshot:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“发布”部分，提供你想发布消息的主题名称（在本例中为`Topic0`），然后点击“Publish to topic”按钮，如下图所示：
- en: '![](img/150d1d2b-2bec-4a4d-8c76-0fe48da70bea.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/150d1d2b-2bec-4a4d-8c76-0fe48da70bea.png)'
- en: 'Check the device Terminal for the corresponding message. You should see the
    following output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 检查设备终端以获取相应的消息。你应该会看到以下输出：
- en: '![](img/d153c3ef-657d-440b-ab92-12637f86dbd4.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d153c3ef-657d-440b-ab92-12637f86dbd4.png)'
- en: With the device now able to subscribe to a topic, you can also get the device
    to publish a message to a topic as well.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 设备现在能够订阅主题，你还可以让设备发布消息到主题。
- en: 'Once again, create a new file and copy-paste the following code snippet below
    the connection parameters:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 再次创建一个新文件，并将以下代码片段粘贴到连接参数下方：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see from the following code, we have simply added a `publish()` method
    that will publish a custom message to a pre-defined topic, in this case, `Topic0`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下代码可以看到，我们只是添加了一个`publish()`方法，它将把自定义消息发布到预定义的主题，在本例中为`Topic0`。
- en: 'Save the code and run the program using the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 保存代码并使用以下命令运行程序：
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should get the following output from the device Terminal:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在设备终端看到以下输出：
- en: '![](img/bc6e92e4-6c9a-443e-9a96-fa94a3cd52b7.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc6e92e4-6c9a-443e-9a96-fa94a3cd52b7.png)'
- en: Simple, isn't it! You can use the same concepts on a real IoT device as well,
    with only a few minor changes here and there. Here is an example code snippet
    that you can use to generate dummy data and publish the data to an MQTT topic.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，对吧！你也可以将相同的概念应用于实际的 IoT 设备，只需做一些小的调整。下面是一个代码片段，你可以用它来生成虚拟数据并将数据发布到 MQTT
    主题。
- en: 'Create a new file and paste the following code snippet below the connection
    parameters, as done throughout this section:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件，并将以下代码片段粘贴到连接参数之后，如本节中所示：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following code snippet leverages the `node-uuid` module to randomly generate
    long strings of UUIDs. With each UUID record generated, a corresponding random
    value of either `0` or `1` is printed which denotes the *state* of the UUID. You
    can control the number of records generated by adjusting the value of the array
    object. By default, the following code will publish 10 records in a proper JSON
    to the MQTT topic, as shown in the following code snippet:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段使用 `node-uuid` 模块随机生成长字符串的 UUID。每生成一个 UUID 记录，就会打印一个随机值，值为 `0` 或 `1`，表示
    UUID 的*状态*。你可以通过调整数组对象的值来控制生成的记录数量。默认情况下，以下代码将以正确的 JSON 格式将 10 条记录发布到 MQTT 主题，如以下代码片段所示：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the code is in place, simply execute it using the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码就位，只需使用以下命令执行它：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/de32a382-a745-4989-83d4-d00d2a5d06e4.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de32a382-a745-4989-83d4-d00d2a5d06e4.png)'
- en: With this, we come to the end of this particular section. In the next section,
    we will be looking at how we can integrate the AWS IoT Core with other AWS Services,
    using simple IoT rules.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们这一节的内容已经结束。在下一节中，我们将讨论如何使用简单的 IoT 规则将 AWS IoT Core 与其他 AWS 服务集成。
- en: Working with IoT rules
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IoT 规则
- en: 'One of the most fascinating features recently provided with the AWS IoT Core
    is IoT rules. With IoT rules, you can basically provide your connected devices
    with the ability to interact with other AWS services. IoT rules provide a predefined
    set of rules that allow you to perform a variety of tasks, such as those listed
    here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最近 AWS IoT Core 提供的最吸引人的功能之一就是 IoT 规则。通过 IoT 规则，你可以为连接的设备提供与其他 AWS 服务交互的能力。IoT
    规则提供了一组预定义的规则，使你能够执行各种任务，下面列举了一些：
- en: Write data received from a device to an Amazon DynamoDB table
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将设备接收到的数据写入 Amazon DynamoDB 表
- en: Send a push notification to all users using Amazon SNS
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向所有用户发送推送通知，使用 Amazon SNS
- en: Publish data to an Amazon SQS queue
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据发布到 Amazon SQS 队列
- en: Invoke a Lambda function to perform some data transformation
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用 Lambda 函数执行数据转换
- en: Process data from devices using Amazon Kinesis, and much more
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Kinesis 处理设备数据，等等
- en: 'An IoT rule also provides you with an added functionality which enables you
    to query and filter device data, as well use simple SQL commands. Based on the
    SQL statement execution, you can then either invoke a success or an error action:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 IoT 规则还为你提供了额外的功能，使你能够查询和过滤设备数据，同时使用简单的 SQL 命令。根据 SQL 语句的执行结果，你可以触发成功或错误的操作：
- en: To get started with IoT rules, select the Act option from the AWS IoT Core console.
    Since this is our first time, click on Create a rule to proceed with the next
    steps.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始使用 IoT 规则，从 AWS IoT Core 控制台中选择 Act 选项。由于这是第一次使用，请点击创建规则，继续下一步。
- en: On the Create a rule page, start off by providing a suitable Name and a Description for
    your rule. In this scenario, we will be creating an IoT rule that will write all
    device data to a DynamoDB table.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建规则页面，首先为规则提供一个合适的名称和描述。在本场景中，我们将创建一个 IoT 规则，将所有设备数据写入 DynamoDB 表。
- en: Next, from the Using SQL version drop-down list, select an appropriate SQL version
    for this rule. By default, the 2016-03-23 will be selected.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从使用 SQL 版本的下拉列表中选择一个适合此规则的 SQL 版本。默认情况下，将选择 2016-03-23 版本。
- en: Next, we form the Rule query statement. This is used to filter out particular
    messages from a large set of device data. In this case, we want all the data from
    our demo device to be written to a DynamoDB table, so in the Attribute field,
    type in an `*` which indicates all fields followed by a valid topic name in the
    Topic filter option. You can also set an optional Condition to match your query.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们形成规则查询语句。此语句用于从大量设备数据中筛选出特定的消息。在这种情况下，我们希望将来自演示设备的所有数据写入 DynamoDB 表，因此在属性字段中输入一个`*`，表示所有字段，接着在主题过滤选项中输入有效的主题名称。你还可以设置一个可选的条件来匹配查询。
- en: 'Here''s what the final query should look like:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终查询应该呈现的样子：
- en: '![](img/63f3f87e-88f1-4ed3-816f-e76cfc550c63.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63f3f87e-88f1-4ed3-816f-e76cfc550c63.png)'
- en: With the query in place, the next step is to associate one or more actions with
    your IoT rule. From the Set one or more actions section, select the Add action option
    to get started.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询设置完成后，下一步是将一个或多个操作与您的物联网规则关联。在“设置一个或多个操作”部分，选择“添加操作”选项以开始操作。
- en: On the Select an action page, you can browse and select one of the predefined
    action templates. In this case, we will be selecting the Insert a message into
    a DynamoDB table action, which allows you to write all, or part of, an MQTT message
    to a DynamoDB table. Once selected, click on the Configure action to proceed.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择操作”页面，您可以浏览并选择一个预定义的操作模板。在这种情况下，我们将选择“将消息插入到 DynamoDB 表”操作，它允许您将整个或部分 MQTT
    消息写入 DynamoDB 表。选择后，点击“配置操作”以继续。
- en: 'This will take you to the Configure action page where you can either select
    an existing DynamoDB table, or alternatively create one as well. For this use
    case, we will be relying on the *UUID and state* code that we last executed on
    our sample device. In order to split and write the message data to their individual
    columns, ensure that the DynamoDB table that you create matches the following
    settings:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带您进入“配置操作”页面，您可以选择一个现有的 DynamoDB 表，或者创建一个新的表。在此用例中，我们将依赖于我们在示例设备上最后执行的 *UUID
    和 state* 代码。为了拆分并将消息数据写入各自的列，请确保您创建的 DynamoDB 表符合以下设置：
- en: 'Partition key: `uuid`'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分区键：`uuid`
- en: 'Sort key: `state`'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序键：`state`
- en: 'Read capacity units: `5`'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读容量单位：`5`
- en: 'Write capacity units: `5`'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入容量单位：`5`
- en: '![](img/df1c12e8-f5ad-410b-91b4-80c00849599f.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df1c12e8-f5ad-410b-91b4-80c00849599f.png)'
- en: 'Once the table is created, select it from the Table name drop-down list. Next,
    fill in the corresponding expressions in the Hash key value and Range key value fields,
    as depicted in the following screenshot. These expressions will write the message
    values into their corresponding DynamoDB table columns:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建表格后，从“表格名称”下拉列表中选择该表格。接下来，填写“哈希键值”和“范围键值”字段中的相应表达式，如下图所示。这些表达式会将消息值写入其对应的
    DynamoDB 表列：
- en: '![](img/3593bb60-4ad4-4e7d-b7b0-bc1ca8994b65.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3593bb60-4ad4-4e7d-b7b0-bc1ca8994b65.png)'
- en: Ensure that you also create and assign an IAM Role that will grant write AWS
    IoT access to the DynamoDB table. With the table and IAM Role assigned, click
    on Add action to complete configuring the action. You can correspondingly use
    the same process to add multiple actions to a single IoT rule. For example, write
    the device messages to a DynamoDB table as well as to an SQS queue, and so on.
    With the rule ready, click on Create rule to complete the process.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您还创建并分配一个 IAM 角色，该角色将授予 DynamoDB 表的写入 AWS IoT 访问权限。表格和 IAM 角色分配完成后，点击“添加操作”以完成操作配置。您可以使用相同的过程向单个
    IoT 规则添加多个操作。例如，将设备消息写入 DynamoDB 表以及 SQS 队列，等等。规则设置好后，点击“创建规则”以完成该过程。
- en: 'Now, to test the rule. Run the `uuid-state` code that we ran in the earlier
    section. Ensure that the topic names in both the code as well as in the IoT rule
    match, otherwise the code will simply not write anything to the DynamoDB table:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，测试规则。运行我们在前面部分中运行的 `uuid-state` 代码。确保代码中的主题名称与 IoT 规则中的主题名称匹配，否则代码将无法将任何内容写入
    DynamoDB 表：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With the code executing, check the DynamoDB table for the data. You should
    see a similar output as shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码执行时，检查 DynamoDB 表中的数据。您应该看到与以下截图类似的输出：
- en: '![](img/62549949-1b1c-4591-96cc-b19768e3c2e7.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62549949-1b1c-4591-96cc-b19768e3c2e7.png)'
- en: With this, we come to the end of AWS IoT Core. Make sure you clean up and delete
    the DynamoDB table once the testing completes, to avoid any unnecessary costs.
    In the next section, we will be exploring yet another powerful AWS IoT service
    called AWS Greengrass.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已完成 AWS IoT Core 的内容。确保在测试完成后清理并删除 DynamoDB 表，以避免不必要的费用。在下一部分，我们将探讨另一个强大的
    AWS IoT 服务——AWS Greengrass。
- en: Introducing AWS Greengrass
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 AWS Greengrass
- en: AWS Greengrass is a form of edge computing service that extends the cloud's
    functionality to your IoT devices by allowing data collection and analysis closer
    to its point of origin. This is accomplished by executing AWS Lambda functions
    locally on the IoT device itself, while still leveraging the cloud for management
    and analytics purposes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Greengrass 是一种边缘计算服务，通过允许数据收集和分析更接近数据源的方式，将云功能扩展到您的物联网设备。这是通过在物联网设备本地执行
    AWS Lambda 函数来实现的，同时仍然利用云端进行管理和分析。
- en: How does this help a business? Well to start with, using AWS Greengrass you
    are now able to respond to locally generated events in near real time! With Greengrass,
    you can program your IoT devices to locally process and filter data and only transmit
    the important chunks back to AWS for analysis. This also has a direct impact on
    the costs as well as the amount of data transmitted back to the cloud.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这对企业有什么帮助呢？首先，通过使用 AWS Greengrass，您现在可以近实时地响应本地生成的事件！借助 Greengrass，您可以编程 IoT
    设备在本地处理和筛选数据，仅将重要的信息传回 AWS 进行分析。这也直接影响到成本和传输回云端的数据量。
- en: 'Here''s a brief look at a few of the necessary components that go into the
    workings of AWS Greengrass:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 下面简要介绍 AWS Greengrass 工作原理中所需的一些组件：
- en: '**Greengrass Core** (**GGC**) **software**: The Greengrass Core software is
    a packaged module that consists of a runtime to allow executions of Lambda functions,
    locally. It also contains an internal message broker and a deployment agent that
    periodically notifies the AWS Greengrass service about the device''s configuration,
    state, available updates, and so on. The software also ensures that the connection
    between the device and the IoT service is secure with the help of keys and certificates.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Greengrass Core（GGC）** **软件（software）：** Greengrass Core 软件是一个打包的模块，包含一个运行时环境，允许在本地执行
    Lambda 函数。它还包含一个内部消息代理和一个部署代理，定期通知 AWS Greengrass 服务有关设备的配置、状态、可用更新等信息。该软件还确保设备与
    IoT 服务之间的连接通过密钥和证书保持安全。'
- en: '**Greengrass groups**: A Greengrass group is a collection of Greengrass Core
    settings and definitions that are used to manage one or more Greengrass-backed
    IoT devices. The groups internally comprise a few other components, namely:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Greengrass 群组（Greengrass groups）：** Greengrass 群组是用于管理一个或多个由 Greengrass 支持的
    IoT 设备的 Greengrass Core 设置和定义的集合。群组内部包括一些其他组件，具体如下：'
- en: '**Greengrass group definition:** A collection of information about your Greengrass
    group'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Greengrass 群组定义（Greengrass group definition）：** 关于 Greengrass 群组的相关信息集合。'
- en: '**Device definition:** A collection of IoT devices that are a part of a Greengrass
    group'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备定义（Device definition）：** 作为 Greengrass 群组一部分的 IoT 设备集合。'
- en: '**Greengrass group settings:** Contains connection as well as configuration
    information along with the necessary IAM Roles required for interacting with other
    AWS services'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Greengrass 群组设置（Greengrass group settings）：** 包含连接及配置相关信息，以及与其他 AWS 服务交互所需的
    IAM 角色。'
- en: '**Greengrass Core:** The IoT device itself'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Greengrass Core：** IoT 设备本身。'
- en: '**Lambda functions:** A list of Lambda functions that can be deployed to the
    Greengrass Core.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lambda 函数（Lambda functions）：** 可以部署到 Greengrass Core 的 Lambda 函数列表。'
- en: '**Subscriptions:** A collection of a message source, a message target and an
    MQTT topic to transmit the messages. The source or targets can be either the IoT
    service, a Lambda function or even the IoT device itself.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅（Subscriptions）：** 一组消息源、消息目标和用于传输消息的 MQTT 主题。消息源或目标可以是 IoT 服务、Lambda 函数，甚至是
    IoT 设备本身。'
- en: '**Greengrass Core SDK:** Greengrass also provides an SDK which you can use
    to write and run Lambda functions on Greengrass Core devices. The SDK currently
    supports Java 8, Python 2.7, and Node.js 6.10.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Greengrass Core SDK：** Greengrass 还提供了一个 SDK，您可以用它在 Greengrass Core 设备上编写和运行
    Lambda 函数。当前 SDK 支持 Java 8、Python 2.7 和 Node.js 6.10。'
- en: With this key information in mind, let's go ahead and deploy our very own Greengrass
    Core on an IoT device.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这些关键信息后，让我们开始在 IoT 设备上部署我们自己的 Greengrass Core。
- en: Connecting a device to Greengrass Core
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将设备连接到 Greengrass Core。
- en: 'The steps required to connect an IoT device with AWS Greengrass are very similar
    to those we performed during the setup of the AWS IoT Core. In this section, we
    are going to extend our dummy IoT device (Ubuntu Server on a virtual machine)
    with Greengrass using the AWS Management Console:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将 IoT 设备连接到 AWS Greengrass 的步骤与我们在设置 AWS IoT Core 时执行的步骤非常相似。在本节中，我们将使用 AWS
    管理控制台为我们的虚拟机上的 Ubuntu Server 添加 Greengrass 以扩展我们的虚拟 IoT 设备：
- en: To get started, from the AWS IoT console, select the Greengrass option from
    the navigation pane.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始使用，请在 AWS IoT 控制台中，选择导航窗格中的 Greengrass 选项。
- en: Setting up Greengrass involves a three-step process starting with creating and
    configuring a **Greengrass group**, followed by adding a **Greengrass Core** to
    the group and finally, by adding the IoT device to the group. To get going, click
    on the Get Started option under the Define a Greengrass Group tile.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 Greengrass 包括三个步骤，首先创建和配置一个 **Greengrass 群组（Greengrass group）**，然后将 **Greengrass
    Core** 添加到群组，最后将 IoT 设备添加到群组。开始之前，请点击“定义 Greengrass 群组”面板下的“开始使用”选项。
- en: On the Set up your Greengrass Group page, select the Use easy creation option.
    This process will automatically provision a Core in the registry, use default
    settings to generate a new group, and provide your core with a new certificate
    and a key pair.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“设置您的 Greengrass 组”页面，选择“使用简单创建”选项。此过程将自动在注册表中预配一个核心，使用默认设置生成一个新组，并为您的核心提供一个新的证书和密钥对。
- en: Type in a suitable group Name for the Greengrass group and click on Next to
    proceed.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个合适的组名，并点击“下一步”继续。
- en: 'You can optionally choose to apply a type to this group by selecting the Thing
    Type from the drop-down box, as shown in the following screenshot. In this case,
    we already have a Thing Type defined from our previous exercises so we are going
    to use this. Click on Next to continue:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择通过从下拉框中选择“Thing 类型”来为此组应用类型，如下图所示。在这种情况下，我们已经在之前的练习中定义了一个 Thing 类型，因此我们将使用这个。点击“下一步”继续：
- en: '![](img/5be984cf-247c-42d3-b4e8-cc49b3baf917.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5be984cf-247c-42d3-b4e8-cc49b3baf917.png)'
- en: 'Since we are using the *easy creation* method, AWS runs a scripted action that
    basically performs the following set of tasks for us:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用的是 *简单创建* 方法，AWS 执行一个脚本操作，基本上为我们完成以下任务：
- en: Create a new Greengrass group in the cloud
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云中创建一个新的 Greengrass 组
- en: Provision a new core in the IoT registry and add to the group
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IoT 注册表中预配一个新的核心并将其添加到组中
- en: Generate a public and private key set for your core
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的核心生成一对公钥和私钥
- en: Generate a new security certificate for the core using the keys
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这些密钥为核心生成新的安全证书
- en: Attach a default security policy to the certificate
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将默认安全策略附加到证书上
- en: Click on Create Group and Core to proceed with the scripted install.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建组和核心”继续执行脚本安装。
- en: Finally, on the Connect your Core device page, download the core-specific certificates
    and config file as a TAR resource by selecting the Download these resources as
    a tar.gz option. You will also need to download an appropriate version of the
    Greengrass Core software to run on your IoT device. Since we are performing all
    of these activities on a Ubuntu-based virtual machine, select the x86_64_Ubuntu option
    from the Greengrass Core software drop-down list and download it. Once done, click
    Finish to exit the setup.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在“连接您的核心设备”页面，选择“将这些资源下载为 tar.gz”选项，将特定于核心的证书和配置文件作为 TAR 资源下载。您还需要下载适合在 IoT
    设备上运行的 Greengrass 核心软件版本。由于我们正在 Ubuntu 基础的虚拟机上执行所有这些操作，请从 Greengrass 核心软件下拉列表中选择
    x86_64_Ubuntu 选项并下载。下载完成后，点击“完成”退出设置。
- en: 'With both the Greengrass Core software and the necessary Greengrass certificates
    downloaded, we now have to transfer them to our IoT device using any SCP tool.
    Once transferred, run the following set of commands to set up and start the Greengrass
    Core:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 下载了 Greengrass 核心软件和必要的 Greengrass 证书后，我们需要使用任何 SCP 工具将它们传输到我们的 IoT 设备上。传输完成后，运行以下命令集以设置并启动
    Greengrass 核心：
- en: First up, untar the Greengrass Core software using the following command.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令解压 Greengrass 核心软件。
- en: '[PRE13]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, run the following command to untar and place the security files and certificates
    in the `greengrass` directory:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令以解压并将安全文件和证书放置在 `greengrass` 目录中：
- en: '[PRE14]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the contents of both the TAR files are extracted, run the following command
    to download the Root CA certificate from Symantec:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦两个 TAR 文件的内容被解压，运行以下命令从 Symantec 下载根 CA 证书：
- en: '[PRE15]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is the final folder structure for your reference:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最终的文件夹结构供您参考：
- en: '![](img/3b51bc73-45d4-46e4-a547-c541857f8957.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b51bc73-45d4-46e4-a547-c541857f8957.png)'
- en: 'Once completed, run the following set of commands to create a dedicated user
    and group for Greengrass Core software:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，运行以下命令集为 Greengrass 核心软件创建一个专用的用户和组：
- en: '[PRE16]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, update the host operating system and install a `sqlite3` package on it
    using the following commands:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令更新主机操作系统并安装 `sqlite3` 软件包：
- en: '[PRE17]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With all the pieces of the puzzle in place, we are now ready to finally start
    the Greengrass Core service on our IoT device. Type in the following command as
    shown:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当所有组件就位后，我们现在准备好在 IoT 设备上启动 Greengrass 核心服务。按如下所示输入以下命令：
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should get the following output on your Terminal, as shown in the following
    screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在终端上看到以下输出，如下所示：
- en: '![](img/d290971e-91cf-459e-a792-ff1cf65e2ae5.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d290971e-91cf-459e-a792-ff1cf65e2ae5.png)'
- en: 'In case of errors in connecting, you can also check the Greengrass runtime
    log file at the following location:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接时出现错误，您还可以查看 Greengrass 运行时日志文件，路径如下：
- en: '`/greengrass/ggc/var/log/system/runtime.log.`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`/greengrass/ggc/var/log/system/runtime.log.`'
- en: 'Simple, isn''t it! With two out of three steps completed, the final step left
    in completing the Greengrass connectivity is adding a device to the Greengrass
    group that we have created:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，对吧！完成了三步中的两步，剩下的最后一步就是将设备添加到我们创建的 Greengrass 组中：
- en: To do so, from the AWS IoT console, select the Groups option provided under
    the Greengrass section from the navigation pane. You should see your newly created
    Greengrass group present here. Select it.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，在 AWS IoT 控制台中，选择导航窗格中 Greengrass 部分下的“组”选项。您应该在这里看到新创建的 Greengrass 组。点击选择它。
- en: Select Devices and click on the Add your first Device option to continue.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“设备”，然后点击“添加您的第一个设备”选项继续。
- en: Here in the Add a Device page, you can opt to either Create a new Device or
    optionally Use an existing IoT Thing as an Device. Since we already have the IoT
    device registered from our earlier IoT setup, select the Select an IoT Thing option
    to proceed.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加设备”页面中，您可以选择创建新设备或选择使用现有的 IoT Thing 作为设备。由于我们已经在之前的 IoT 设置中注册了物联网设备，请选择“选择
    IoT Thing”选项继续。
- en: Select the name of the added IoT device and click on Finish to complete the
    process.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择已添加的 IoT 设备的名称，然后点击“完成”以完成该过程。
- en: There you have it! You have successfully installed and connected your IoT device
    with AWS Greengrass! In the next section, we will test this deployment by running
    a simple Lambda function on it.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！您已成功安装并将物联网设备与 AWS Greengrass 连接！在下一节中，我们将通过运行一个简单的 Lambda 函数来测试此部署。
- en: Running Lambda functions on AWS Greengrass
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS Greengrass 上运行 Lambda 函数
- en: 'With the Greengrass Core software up and running on your IoT device, we can
    now go ahead and run a simple Lambda function on it! For this particular section,
    we will be leveraging an AWS Lambda blueprint that prints a simple Hello World
    message:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的物联网设备上成功运行 Greengrass Core 软件后，我们现在可以继续在其上运行一个简单的 Lambda 函数！在本节中，我们将使用一个
    AWS Lambda 蓝图，该蓝图会打印一个简单的 Hello World 消息：
- en: To get started, first we will need to create our Lambda function. From the AWS
    Management Console, filter out the Lambda service using the Filter option or alternatively,
    select this URL: [https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home).
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建我们的 Lambda 函数。进入 AWS 管理控制台，通过筛选器选项筛选出 Lambda 服务，或者选择此网址：[https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home)。
- en: Ensure that the Lambda function is launched from the same region as that of
    the AWS Greengrass. In this case, we are using the US-East-1 (N. Virginia) region.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 Lambda 函数是在与 AWS Greengrass 相同区域启动的。在这种情况下，我们使用的是 US-East-1（北弗吉尼亚）区域。
- en: On the AWS Lambda console landing page, select the Create function option to
    get started.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS Lambda 控制台首页，选择“创建函数”选项以开始。
- en: Since we are going to be leveraging an existing function blueprint for this
    use case, select the Blueprints option provided on the Create function page.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们将利用现有的函数蓝图来完成此用例，请在“创建函数”页面中选择“蓝图”选项。
- en: Use the filter to find a blueprint with the name `greengrass-hello-world`. There
    are two templates present to date that match this name, one function is based
    on Python while the other is based on Node.js. For this particular section, select
    the `greengrass-hello-world` Python function and click on Configure to proceed.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用筛选器查找名为 `greengrass-hello-world` 的蓝图。目前有两个与此名称匹配的模板，一个基于 Python，另一个基于 Node.js。对于本节内容，请选择基于
    Python 的 `greengrass-hello-world` 函数，并点击“配置”以继续。
- en: Fill out the required details for the new function, such as a Name followed
    by a valid Role. For this section, go ahead and select the Create new role from
    template option. Provide a suitable Role name and finally, from the Policy templates drop-down
    list, select the AWS IoT Button Permissions role.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写新函数的必需详细信息，例如名称，然后选择一个有效的角色。对于本节内容，请选择“从模板创建新角色”选项。提供一个合适的角色名称，最后，从“策略模板”下拉列表中选择
    AWS IoT 按钮权限角色。
- en: Once completed, click on Create function to complete the function's creation
    process. But before you move on to associating this function with your AWS Greengrass,
    you will also need to create a new *version* out of this function. Select the
    Publish new version option from the Actions tab.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，点击“创建函数”以完成函数的创建过程。但在将此函数与 AWS Greengrass 关联之前，您还需要从该函数创建一个新的*版本*。在“操作”标签中选择“发布新版本”选项。
- en: Provide a suitable Version description text and click on Publish once done.
    Your function is now ready for AWS Greengrass.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供合适的版本描述文本，完成后点击 Publish。您的函数现在已准备好用于 AWS Greengrass。
- en: Now, head back to the AWS IoT dashboard and select the newly deployed Greengrass
    group from the Groups option present on the navigation pane.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到 AWS IoT 仪表板，选择导航窗格中的 Groups 选项，然后选择新部署的 Greengrass 群组。
- en: 'From the Greengrass group page, select the Lambdas option from the navigation
    pane followed by the Add Lambda option, as shown in the following screenshot:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Greengrass 群组页面，选择导航窗格中的 Lambdas 选项，然后选择 Add Lambda 选项，如下图所示：
- en: '![](img/05554d66-7f2d-49a3-9b1b-4fa5b0c3bdb7.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05554d66-7f2d-49a3-9b1b-4fa5b0c3bdb7.png)'
- en: On the Add a Lambda to your Greengrass group, you can choose to either Create
    a new Lambda function or Use an existing Lambda function as well. Since we have
    already created our function, select the Use existing function option.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将 Lambda 添加到您的 Greengrass 群组页面上，您可以选择创建一个新的 Lambda 函数或使用现有的 Lambda 函数。由于我们已经创建了函数，请选择
    Use existing function 选项。
- en: In the next page, select your Greengrass Lambda function and click Next to proceed.
    Finally, select the version of the deployed function and click on Finish once
    done.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，选择您的 Greengrass Lambda 函数，然后点击 Next 继续。最后，选择已部署函数的版本，完成后点击 Finish。
- en: 'To finish things, we will need to create a new subscription between the Lambda
    function (source) and the AWS IoT service (destination). Select the Subscriptions option
    from the same Greengrass group page, as shown. Click on Add Subscription to proceed:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要在 Lambda 函数（源）和 AWS IoT 服务（目标）之间创建一个新的订阅。在同一 Greengrass 群组页面中选择 Subscriptions
    选项，如下所示。点击 Add Subscription 以继续：
- en: '![](img/3a52542d-c655-419f-afcc-f22c9ec0c5f1.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a52542d-c655-419f-afcc-f22c9ec0c5f1.png)'
- en: On the Select your source and target page, select the newly deployed Lambda
    function as the source, followed by the IoT cloud as the target. Click on Next once
    done. You can provide an Optional topic filter as well, to filter messages published
    on the messaging queue. In this case, we have provided a simple `hello/world` as
    the filter for this scenario. Click on Finish once done to complete the subscription
    configuration.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择源和目标页面，选择新部署的 Lambda 函数作为源，然后选择 IoT 云作为目标。完成后点击 Next。您还可以提供一个可选的主题过滤器，用于过滤在消息队列中发布的消息。在此示例中，我们提供了简单的
    `hello/world` 作为过滤器。完成后点击 Finish 以完成订阅配置。
- en: 'With all the pieces in place, it''s now time to deploy our Lambda function
    over to the Greengrass Core. To do so, select the Deployments option and from
    the Actions drop-down list, select the Deploy option, as shown in the following
    screenshot:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 所有组件准备就绪，现在是时候将我们的 Lambda 函数部署到 Greengrass Core 上了。为此，选择 Deployments 选项，并从 Actions
    下拉菜单中选择 Deploy 选项，如下图所示：
- en: '![](img/d50c8838-32bd-4bcb-989b-82e0f4683e11.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d50c8838-32bd-4bcb-989b-82e0f4683e11.png)'
- en: The deployment takes a few seconds to complete. Once done, verify the status
    of the deployment by viewing the Status column. The Status should show Successfully
    completed.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 部署需要几秒钟完成。完成后，通过查看 Status 列来验证部署状态。状态应该显示为 Successfully completed。
- en: 'With the function now deployed, test the setup by using the MQTT client provided
    by AWS IoT, as done before. Remember to enter the same `hello/world` topic name
    in the subscription topic field and click on Publish to topic once done. If all
    goes well, you should receive a custom Hello World message from the Greengrass
    Core as depicted in the following screenshot:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 函数部署完成后，使用 AWS IoT 提供的 MQTT 客户端进行测试，如之前所做。记得在订阅主题字段中输入相同的 `hello/world` 主题名称，完成后点击
    Publish to topic。如果一切顺利，您应该会从 Greengrass Core 收到一个自定义的 Hello World 消息，如下图所示：
- en: '![](img/5ab447e0-68da-4702-b57a-8df3b5ead891.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ab447e0-68da-4702-b57a-8df3b5ead891.png)'
- en: This was just a high level view of what you can achieve with Greengrass and
    Lambda. You can leverage Lambda for performing all kinds of preprocessing on data
    on your IoT device itself, thus saving a tremendous amount of time, as well as
    costs.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是 Greengrass 和 Lambda 能实现的高层次概述。您可以利用 Lambda 在 IoT 设备本身上执行各种数据预处理，从而节省大量时间和成本。
- en: With this, we come to the end of this section. In the next section, we will
    be looking at a few simple ways of effectively monitoring your IoT devices.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，本节内容已结束。在下一节中，我们将介绍一些简单有效的监控 IoT 设备的方法。
- en: Monitoring AWS IoT devices and services
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控 AWS IoT 设备和服务
- en: 'AWS offers a variety of methods for monitoring both your IoT devices, as well
    as the IoT service and its calls. To get things started, let''s first look at
    the simple device monitoring functionality provided by the AWS IoT dashboard itself.
    On the AWS IoT console page, select the Monitor option. Here, you can view a variety
    of graphs and data, such as the *number of successful connections* made to the
    AWS IoT service over the past hour, day, or week. You can even check the number
    of *messages* that were transmitted using either the MQTT or the HTTP protocol,
    as shown in the following screenshot:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了多种方法来监控你的IoT设备以及IoT服务及其调用。为了开始，让我们先看看AWS IoT仪表板本身提供的简单设备监控功能。在AWS IoT控制台页面上，选择“监控”选项。在这里，你可以查看各种图表和数据，比如过去一小时、一天或一周内与AWS
    IoT服务建立的*成功连接数*。你甚至可以检查通过MQTT或HTTP协议传输的*消息数*，如下图所示：
- en: '![](img/87c8620b-fc18-467f-9ab3-3e93e44f7d24.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87c8620b-fc18-467f-9ab3-3e93e44f7d24.png)'
- en: You can also use the Monitor page to view the number of *messages published*,
    *rules executed*, and *shadow updates* performed.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用监控页面查看*发布的消息数*、*执行的规则数*和*影像更新数*。
- en: In addition to this, you also have an option to enable logging for your AWS
    IoT service. To do so, select the Settings option from the navigation pane of
    the AWS IoT console. By default, logging of AWS IoT is *disabled*, however you
    can easily switch it on by selecting the Edit option provided under the Logs section.
    As messages from your IoT devices pass through the message broker and the rules
    engine, you can use the AWS IoT logs to process events and in turn, troubleshoot
    issues, both at the device as well as at the service's end.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，你还可以为AWS IoT服务启用日志记录。为此，请从AWS IoT控制台的导航窗格中选择“设置”选项。默认情况下，AWS IoT的日志记录是*禁用*的，但你可以通过选择日志部分下的“编辑”选项轻松启用它。当你的IoT设备的消息通过消息代理和规则引擎时，你可以使用AWS
    IoT日志来处理事件，进而排查设备端以及服务端的问题。
- en: You can choose between Debug (most verbose), Info, Warning, and Errors (least
    verbose) levels of verbosity, depending on your logging requirements.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的日志记录需求，你可以选择调试（最详细）、信息、警告和错误（最简洁）等不同的详细级别。
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Well, like all good journeys, this book too has come to its end! I just wanted
    to take this time to say that it has really been a wonderful journey and experience
    writing this book! Although the book may seem a lot to read and grasp, trust me,
    this is all just a drop in the ocean! AWS continuously strives to evolve its services
    by adding more and more features to it, so much so, that today you have ready-to-use
    services for almost anything, including game development, AI, customer engagement,
    business productivity, just to name a few!
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，就像所有美好的旅程一样，这本书也迎来了它的终结！我只想借此机会说，这真是一次美妙的旅程和体验，写这本书的过程让我非常愉快！尽管这本书看起来有很多内容需要阅读和理解，但相信我，这一切不过是沧海一粟！AWS不断努力通过新增越来越多的功能来发展其服务，以至于如今，你几乎可以找到任何你需要的即用型服务，包括游戏开发、人工智能、客户互动、商业生产力等，仅举几例！
- en: 'To quickly summarize all that we have learned so far: we started our journey
    with some interesting hands-on with the EC2 Systems Manager, shortly followed
    by two of my favorite services, the Elastic Beanstalk and the Elastic File System.
    We also covered a lot on security in the form of AWS WAF, AWS Shield, AWS CloudTrail,
    and AWS Config! Towards the end, we started exploring a few developer-based services
    in the form of AWS CodeDeploy, AWS CodeCommit, and AWS CodePipeline, to name a
    few. Finally, we ended the last few chapters on a high note by looking at the
    IoT and Analytics services in Amazon Redshift, Amazon EMR, AWS Data Pipeline and
    last, but not the least, AWS IoT!'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 简要总结一下我们到目前为止所学的内容：我们从与EC2 Systems Manager的一些有趣实践开始，接着是我最喜欢的两个服务——Elastic Beanstalk和Elastic
    File System。我们还涉及了很多安全内容，包括AWS WAF、AWS Shield、AWS CloudTrail和AWS Config！在接近结尾时，我们开始探索一些以开发者为主的服务，比如AWS
    CodeDeploy、AWS CodeCommit和AWS CodePipeline等。最后，我们以高亢的调子结束了最后几章，重点讲解了Amazon Redshift、Amazon
    EMR、AWS Data Pipeline以及最后但同样重要的AWS IoT中的物联网和分析服务！
- en: Till next time, cheers!
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 直到下次，再见！
