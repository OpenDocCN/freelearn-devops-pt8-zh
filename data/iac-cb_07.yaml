- en: Chapter 7. Testing and Writing Better Infrastructure Code with Chef and Puppet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：使用Chef和Puppet测试和编写更好的基础设施代码
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Linting Chef code with Foodcritic and Puppet code with puppet-lint
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Foodcritic进行Chef代码的Lint检查，使用puppet-lint进行Puppet代码的Lint检查
- en: Unit testing with ChefSpec and rspec-puppet
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ChefSpec和rspec-puppet进行单元测试
- en: Testing infrastructure with Test Kitchen for Chef and Beaker for Puppet
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Test Kitchen对Chef进行基础设施测试，并使用Beaker对Puppet进行基础设施测试
- en: Integration testing with ServerSpec
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ServerSpec进行集成测试
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the development world, good practices of testing software are widespread,
    such as unit and integration tests. Linters are also used daily for most languages
    by software developers. These techniques are fortunately brought to the infrastructure
    world through the tools we use; now as infrastructure is basically code, it can
    be analyzed, tested, and reported! Combined with CI systems, writing infrastructure
    code that is thoroughly tested at different levels helps hugely to achieve a very
    high quality of sustainable code and prevents unexpected regressions that would
    have otherwise broken things later.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发领域，良好的软件测试实践广泛应用，例如单元测试和集成测试。Linters（代码检查工具）也是软件开发人员每天使用的工具，几乎适用于大多数语言。幸运的是，这些技术通过我们使用的工具进入了基础设施领域；现在，基础设施基本上就是代码，它可以被分析、测试和报告！结合持续集成（CI）系统，编写经过充分测试的基础设施代码在不同层级上能够极大地帮助实现高质量的可持续代码，并防止出现本来会在之后破坏事物的意外回归。
- en: In this chapter, you'll discover various techniques to write cleaner code using
    linters and styling tools, so our code follows high standards. You'll learn how
    to unit test infrastructure code such as Chef resources and achieve the highest
    code coverage possible, so we're sure nothing is there by error or is being modified
    unintentionally. Then we'll configure the testing environment Test Kitchen, which
    leverages the use of VMs through Vagrant (or other systems) to apply test suites.
    This will be our base to then write integration tests so we can make sure we achieve
    what we intended to achieve with multiple cookbooks and sources of code, really
    reaching the target and doing the job on a real system.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将发现各种技术，通过使用linter和样式工具编写更简洁的代码，以确保我们的代码遵循高标准。您将学习如何对基础设施代码进行单元测试，比如Chef资源，并实现尽可能高的代码覆盖率，以确保代码中没有错误，也不会被无意修改。然后，我们将配置测试环境Test
    Kitchen，它通过Vagrant（或其他系统）利用虚拟机（VM）来执行测试套件。这将是我们的基础，以便编写集成测试，确保我们通过多个cookbook和代码来源实现预期的目标，并在真实系统上完成任务。
- en: These tools and techniques are absolutely key to write the best infrastructure
    code possible, and they are as fun to use as they are powerful!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具和技术对编写最佳基础设施代码至关重要，它们不仅强大，而且使用起来非常有趣！
- en: All recipes are based on Chef. However, when possible, we'll try to show how
    things work similarly with Puppet, Chef's direct alternative.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配方都基于Chef。然而，在可能的情况下，我们会尽量展示如何在Puppet中类似地工作，它是Chef的直接替代品。
- en: Linting Chef code with Foodcritic and Puppet code with puppet-lint
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Foodcritic进行Chef代码的Lint检查，使用puppet-lint进行Puppet代码的Lint检查
- en: Since we're mainly coding in Ruby, we can use common linters such as Rubocop
    in the Ruby world. However, Rubocop, is targeted at software development by default
    and is not really optimized for Chef cookbooks development. So, Chef adapted their
    own version of Rubocop, named Cookstyle. In the meantime, the Foodcritic tool
    used in conjunction with rules checks our code for a set of commonly accepted
    good practices by the community. We'll walk through those tools to end up with
    a much better and cleaner code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们主要使用Ruby进行编码，我们可以在Ruby领域使用像Rubocop这样的常用linter工具。然而，Rubocop默认是针对软件开发的，并没有特别针对Chef
    cookbook的开发进行优化。因此，Chef开发了自己的Rubocop版本，命名为Cookstyle。同时，Foodcritic工具与规则结合，检查我们的代码是否符合社区公认的良好实践。我们将一起深入了解这些工具，最终让代码变得更加简洁、优雅。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, you will need the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行这个配方，您需要以下工具：
- en: A working Chef DK installation on the workstation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作站上安装Chef DK
- en: A working Chef client configuration on the remote host
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程主机上的Chef客户端配置
- en: The Chef code from [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing
    Servers with Chef and Puppet"), *Fundamentals of Managing Servers with Chef and
    Puppet*, or any custom Chef code.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第6章](ch06.html "第6章：使用Chef和Puppet管理服务器的基础"), *使用Chef和Puppet管理服务器的基础*，或者任何自定义的Chef代码。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We'll study and follow suggestions of the two complimentary tools—Cookstyle
    and Foodcritic. Both give some precious and complementary advice on code quality
    and portability. Let's start with the quickest and easiest—Cookstyle.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究并遵循两个互补工具——Cookstyle 和 Foodcritic 的建议。它们都能提供关于代码质量和可移植性的宝贵且互补的建议。让我们从最快最简单的——Cookstyle
    开始。
- en: Cookstyle
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cookstyle
- en: 'Navigate to a cookbook root directory and type in the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 cookbook 根目录并输入以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will output all the suggestions for a cleaner code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出所有关于清理代码的建议。
- en: 'To get more information about the suggestions, including a URL with more information,
    use the following options:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多关于建议的信息，包括带有更多信息的网址，请使用以下选项：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you''re happy with the propositions and would like to automatically apply
    them all directly in the code, use the following switch:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对建议感到满意，并希望自动将所有建议直接应用到代码中，请使用以下开关：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we apply `cookstyle` to the [Chapter 6](ch06.html "Chapter 6. Fundamentals
    of Managing Servers with Chef and Puppet"), *Fundamentals of Managing Servers
    with Chef and Puppet*, Chef cookbooks we''ve written, we''ll end up with two good
    suggestions:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对 [第六章](ch06.html "第6章。使用 Chef 和 Puppet 管理服务器的基础知识") *使用 Chef 和 Puppet 管理服务器的基础知识*，我们编写的
    Chef cookbook 应用 `cookstyle`，我们将得到两个不错的建议：
- en: Single quotes for strings when interpolation is not needed
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当不需要插值时，使用单引号表示字符串
- en: Newer Ruby 1.9 syntax for hashes
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby 1.9 版本中哈希的语法
- en: As these are valuable and recommended changes, let's bump our cookbook versions
    in all concerned `metadata.rb` files, apply those suggestions, and upload the
    new minor revision to the Chef server.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些都是有价值且推荐的改动，我们将在所有相关的 `metadata.rb` 文件中更新我们的 cookbook 版本，应用这些建议，并将新的小版本上传到
    Chef 服务器。
- en: Foodcritic
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Foodcritic
- en: Foodcritic goes much further than Cookstyle and checks the Chef code for things
    such as incompatible, nonidempotent, repetitive, or deprecated code, and missing
    templates, files, dependencies, or variables. All the rules are described on the
    Foodcritic website at [http://www.foodcritic.io](http://www.foodcritic.io), along
    with examples and explanations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Foodcritic 的检查远远超过 Cookstyle，除了检查 Chef 代码中的不兼容、非幂等、重复或废弃的代码外，还会检查缺失的模板、文件、依赖关系或变量。所有规则都在
    Foodcritic 网站上描述，网址是 [http://www.foodcritic.io](http://www.foodcritic.io)，同时提供示例和解释。
- en: 'Execute `foodcritic` by navigating to the Chef repo and type in the following
    command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `foodcritic`，进入 Chef 仓库并输入以下命令：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For example, for testing our previous `mysite` cookbook (excluding the auto-generated
    `test` directory, as it''s not a cookbook in itself), we type the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于测试我们之前的 `mysite` cookbook（排除自动生成的 `test` 目录，因为它本身不是一个 cookbook），我们输入以下命令：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Interesting! Let's start with FC003 ([http://www.foodcritic.io/#FC003](http://www.foodcritic.io/#FC003)).
    Our code is indeed not usable with other Chef modes such as chef-solo, as we're
    using Chef Search directly in the code and chef-solo can't interact with a Chef
    server. Two options here are that either we don't care about chef-solo portability
    and you exclude that rule from the tests, or we care and modify the code accordingly.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣！让我们从 FC003 开始 ([http://www.foodcritic.io/#FC003](http://www.foodcritic.io/#FC003))。我们的代码确实无法与其他
    Chef 模式（如 chef-solo）一起使用，因为我们在代码中直接使用了 Chef 搜索，而 chef-solo 无法与 Chef 服务器交互。这里有两种选择：要么我们不在乎
    chef-solo 的兼容性并排除此规则，或者我们关心并相应地修改代码。
- en: 'To exclude the `FC003` rule, use the `-t` option:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要排除 `FC003` 规则，请使用 `-t` 选项：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, if we care about chef-solo compatibility, let''s change the
    code as proposed by the FC003 rule. Bump the `mysite` cookbook in the `mysite/metadata.rb`
    file, and edit the `users` search in the `mysite/recipes/htaccess.rb` file to
    include an evaluation of whether we''re running chef-solo or not:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们关心 chef-solo 的兼容性，让我们按照 FC003 规则提出的建议修改代码。更新 `mysite` cookbook 中的 `mysite/metadata.rb`
    文件，并编辑 `mysite/recipes/htaccess.rb` 文件中的 `users` 搜索，加入对是否运行 chef-solo 的判断：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Upload the new version of the cookbook using Berkshelf:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Berkshelf 上传 cookbook 的新版本：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Rerun `foodcritic` and the warning is gone:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行 `foodcritic`，警告信息消失了：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s continue our investigation of the suggestions. `FC033` ([http://www.foodcritic.io/#FC033](http://www.foodcritic.io/#FC033))
    is about missing templates. However, our templates are placed under `mysite/templates`
    by the `chef` workflow command. This is typically why it''s important to understand
    why suggestions are only that—suggestions. The Foodcritic team proposes to enforce
    in FC033 the presence of default templates in the `templates/default` directory.
    It is entirely up to you and your team to decide what to follow: the recommended
    behavior from Chef or from Foodcritic. Let''s decide to follow Chef and ignore
    this warning:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续检查建议。`FC033`（[http://www.foodcritic.io/#FC033](http://www.foodcritic.io/#FC033)）是关于缺少模板的。然而，我们的模板是通过`chef`工作流命令放置在`mysite/templates`目录下的。这就是为什么理解建议仅仅是“建议”如此重要的原因。Foodcritic团队建议在FC033中强制要求在`templates/default`目录中存在默认模板。最终由你和你的团队决定是否遵循Chef或Foodcritic的推荐行为。我们决定遵循Chef并忽略此警告：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous two warnings (`FC064` and `FC065`) are only about cookbooks released
    on the Chef Supermarket, which is not our case. Let''s exclude globally all supermarket-related
    warnings using the `-t ~supermarket` switch:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个警告（`FC064`和`FC065`）仅与Chef超市发布的食谱相关，而这不适用于我们。让我们通过`-t ~supermarket`开关全局排除所有与超市相关的警告：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: No more warnings now; our cookbook is following the best advice on the planet
    from both Chef and the Foodcritic community!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在没有更多的警告了；我们的食谱遵循了Chef和Foodcritic社区的最佳建议！
- en: 'It''s highly recommended that you add those tests to your automated testing
    process. Let''s say we''re using a global `Makefile` to do that. Create it at
    the root of the Chef repository:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议将这些测试添加到自动化测试过程中。假设我们使用一个全局的`Makefile`来完成这一任务。请在Chef仓库的根目录创建它：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, you or some CI system can automatically check the code for quality or regression
    in quality.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你或某个CI系统可以自动检查代码的质量或质量回归。
- en: There's more…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Using Puppet, puppet-lint will help us to clean code. We need to install puppet-lint
    using the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Puppet时，puppet-lint将帮助我们清理代码。我们需要使用以下命令安装puppet-lint：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you are already familiar with Puppet, you probably saw that the code we
    wrote in the previous chapter does not conform to standards. Let''s discover some
    issues with puppet-lint based on the latest recipe for our Apache module:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经熟悉Puppet，你可能会看到我们在上一章中编写的代码不符合标准。让我们基于最新的Apache模块食谱，发现一些puppet-lint检测到的问题：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can see two error categories:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到两类错误：
- en: Puppet coding style warnings/errors
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet编码风格警告/错误
- en: Missing documentation
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺少文档
- en: Let's try to fix them!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试修复它们！
- en: Puppet coding style
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Puppet编码风格
- en: 'For our concerns here, the basic rules are:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们这里关注的问题，基本规则是：
- en: Tabulation needs to be *two-space* characters
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩进需要使用*两个空格*字符。
- en: No trailing whitespaces
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无尾随空格
- en: In string interpolation, variables should be enclosed in braces; for example,
    `"$docroot/.htaccess"` is wrong and must be `"${docroot}/.htaccess"`
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在字符串插值中，变量应被大括号括起来；例如，`"$docroot/.htaccess"`是错误的，必须是`"${docroot}/.htaccess"`
- en: Documentation
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档
- en: Documentation should be done using Markdown. If you've never heard about it,
    Markdown is a language used to format a document in plain text mode, in order
    to export it in HTML. With Markdown, it becomes easy to add headers, links, bullets
    and font effects. A short and interactive tutorial can be found on [http://www.markdowntutorial.com](http://www.markdowntutorial.com).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 文档应使用Markdown进行编写。如果你从未听说过Markdown，它是一种用于格式化纯文本文档的语言，目的是将其导出为HTML。使用Markdown，你可以轻松地添加标题、链接、项目符号和字体效果。可以在[http://www.markdowntutorial.com](http://www.markdowntutorial.com)找到一个简短且互动的教程。
- en: A Markdown editor with a *live preview* mode is available at [https://stackedit.io](https://stackedit.io).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有*实时预览*模式的Markdown编辑器可以在[https://stackedit.io](https://stackedit.io)找到。
- en: 'We need to create a `README.md` file at the top-level directory of the module.
    This file should contain a short description, and some usage examples. For more
    readability, we will focus only on the installation and the definition of a virtual
    host. The complete documentation can be found in the code bundle. Here is an extract
    of `modules/apache/README.md`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在模块的顶层目录创建一个`README.md`文件。该文件应包含简短的描述和一些使用示例。为了提高可读性，我们将重点关注安装和虚拟主机的定义。完整文档可以在代码包中找到。以下是`modules/apache/README.md`的摘录：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: class {
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: class {
- en: '''apache'':;'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '''apache'':;'
- en: '}'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'apache::vhost{''mysite'':'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'apache::vhost{''mysite'':'
- en: website    => 'www.example.com',
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: website    => 'www.example.com',
- en: docroot    => '/var/www/example',
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: docroot    => '/var/www/example',
- en: '}'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We also need to document all statements and their parameters, using the `@param`
    tag inside comments at the top of each manifest. The new code following puppet-lint
    recommendations, is:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要记录所有语句及其参数，在每个清单顶部的注释中使用 `@param` 标签。遵循 puppet-lint 推荐的新代码如下：
- en: 'For `modules/apache/manifests/init.pp`:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `modules/apache/manifests/init.pp`：
- en: '[PRE17]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For `modules/apache/manifests/htpasswd.pp`:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `modules/apache/manifests/htpasswd.pp`：
- en: '[PRE18]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For `modules/apache/manifests/htaccess.pp`:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `modules/apache/manifests/htaccess.pp`：
- en: '[PRE19]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For `modules/apache/manifests/vhost.pp`:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `modules/apache/manifests/vhost.pp`：
- en: '[PRE20]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The documentation can be automatically generated to a set of HTML pages. To
    do so, we need to install the `yard` and `puppet-strings` packages:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 文档可以自动生成一组 HTML 页面。为此，我们需要安装 `yard` 和 `puppet-strings` 包：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, from the top-level directory of our module, the documentation can be generated:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从我们模块的顶级目录，可以生成文档：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The documentation is in the `doc` directory. We can now read it by opening `index.html`
    in any browser.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 文档位于 `doc` 目录下。我们现在可以通过在浏览器中打开 `index.html` 来查看它。
- en: See also
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The Puppet Language Style:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 语言风格：
- en: 'Cookstyle: [https://github.com/chef/cookstyle](https://github.com/chef/cookstyle)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Cookstyle: [https://github.com/chef/cookstyle](https://github.com/chef/cookstyle)'
- en: 'Foodcritic: [http://www.foodcritic.io/](http://www.foodcritic.io/)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Foodcritic: [http://www.foodcritic.io/](http://www.foodcritic.io/)'
- en: Unit testing with ChefSpec and rspec-puppet
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ChefSpec 和 rspec-puppet 进行单元测试
- en: ChefSpec is a Chef cookbook RSpec unit testing framework written by the great
    Seth Vargo (Opscode Chef, Hashicorp). ChefSpec helps to create a fast feedback
    loop, locally simulate Chef runs (solo or server) over the code, and issue a code
    coverage statement for every resource used. It integrates very well with Berkshelf,
    so cookbook dependencies are easily handled during the testing process.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ChefSpec 是由伟大的 Seth Vargo（Opscode Chef，Hashicorp）编写的 Chef 食谱 RSpec 单元测试框架。ChefSpec
    帮助创建快速反馈循环，在本地模拟 Chef 运行（独立或服务器模式），并为每个使用的资源生成代码覆盖率报告。它与 Berkshelf 集成得非常好，因此在测试过程中可以轻松处理食谱依赖项。
- en: We'll create unit tests for the cookbooks created in [Chapter 6](ch06.html "Chapter 6. Fundamentals
    of Managing Servers with Chef and Puppet"), *Fundamentals of Managing Servers
    with Chef and Puppet,* that covers the most common tests, such as convergence
    issues, packages installation, services status check, file and template creation,
    access rights, recipe inclusion, stubbing data bag searches, or even intercepting
    expected errors. These tests are so generic, we'll be able to reuse them in all
    our future recipes and get started on more.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为 [第 6 章](ch06.html "第 6 章：使用 Chef 和 Puppet 管理服务器的基础")中创建的食谱编写单元测试，*使用 Chef
    和 Puppet 管理服务器的基础*，涵盖最常见的测试，例如收敛问题、软件包安装、服务状态检查、文件和模板创建、访问权限、配方包含、模拟数据包搜索，甚至是拦截预期错误。这些测试非常通用，我们将能够在所有未来的配方中重复使用它们，并开始进行更多的测试。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, you will need the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要逐步执行此配方，你将需要以下内容：
- en: A working Chef installation on the workstation
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作站上的有效 Chef 安装
- en: A working Chef client configuration on the remote host
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程主机上的有效 Chef 客户端配置
- en: The Chef code from Chapter 6, *Fundamentals of Managing Servers with Chef and
    Puppet*, or any custom Chef code
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自第 6 章的 Chef 代码，*使用 Chef 和 Puppet 管理服务器的基础*，或任何自定义的 Chef 代码
- en: How to do it…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现……
- en: ChefSpec unit tests are found in the `spec/unit/recipes` folder of every Chef
    cookbook. Depending on how we created our cookbooks, this folder may already exist.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ChefSpec 单元测试位于每个 Chef 食谱的 `spec/unit/recipes` 文件夹中。根据我们创建食谱的方式，这个文件夹可能已经存在。
- en: To illustrate, let's start from the `apache` cookbook from [Chapter 6](ch06.html
    "Chapter 6. Fundamentals of Managing Servers with Chef and Puppet"), *Fundamentals
    of Managing Servers with Chef and Puppet,* but any similar custom cookbook is
    equally good.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，我们从 [第 6 章](ch06.html "第 6 章：使用 Chef 和 Puppet 管理服务器的基础")中的 `apache`
    食谱开始，*使用 Chef 和 Puppet 管理服务器的基础*，但任何类似的自定义食谱同样适用。
- en: 'If the `spec/unit/recipes` directory doesn''t exist, create it by executing
    the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `spec/unit/recipes` 目录不存在，请通过执行以下命令来创建它：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In this `recipes` directory in `spec/unit` are found the ChefSpec unit tests,
    typically:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `spec/unit` 中的 `recipes` 目录下可以找到 ChefSpec 单元测试，通常：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Each recipe gets its matching ChefSpec file. In this case, our simple cookbook
    contains two recipes, so we get two specs.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 每个配方都会有其对应的 ChefSpec 文件。在这种情况下，我们的简单食谱包含两个配方，因此我们会有两个测试规范。
- en: The Spec Helper
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spec 辅助工具
- en: 'It''s helpful to have a common set of requirements for all the concerned cookbook
    tests. The default is to have it named `spec_helper.rb` at the root of the `spec/unit`
    directory. We suggest to include at least three requirements:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有相关的食谱测试，拥有一组通用的要求是很有帮助的。默认情况下，它的文件名为`spec_helper.rb`，位于`spec/unit`目录的根目录下。我们建议至少包括以下三项要求：
- en: ChefSpec itself
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ChefSpec本身
- en: The Berkshelf plugin for dependencies management
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于依赖管理的Berkshelf插件
- en: Immediately start the code coverage
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立即开始代码覆盖率
- en: 'Here''s our sample `spec_helper.rb` file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的示例`spec_helper.rb`文件：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Testing a successful Chef run context
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试成功的Chef运行上下文
- en: 'We''ll now unit test the default apache cookbook recipe. Our first step is
    to require the helper created earlier in the `default_spec.rb` file. It will be
    required in all of our future tests:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将单元测试默认的apache食谱配方。我们的第一步是引入在`default_spec.rb`文件中创建的helper。这将在我们所有的未来测试中被引入：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'All unit tests start with a descriptive block, as given here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 所有单元测试都以描述性块开始，如这里所示：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Inside this block, we want to simulate the Chef run in a simulated CentOS 7.2
    environment, with the default attributes. This is the context, and we expect this
    Chef run to not raise any errors:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，我们想要在模拟的CentOS 7.2环境中模拟Chef运行，使用默认属性。这就是上下文，我们期望这个Chef运行不会引发任何错误：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To find the exact past or future CentOS version we might need, we can go to
    the CentOS mirror site, [http://mirror.centos.org/centos/](http://mirror.centos.org/centos/),
    or read a full list of available simulated platforms at [https://github.com/customink/fauxhai/tree/master/lib/fauxhai/platforms](https://github.com/customink/fauxhai/tree/master/lib/fauxhai/platforms).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到我们可能需要的确切CentOS版本（过去或未来），我们可以访问CentOS镜像站点，[http://mirror.centos.org/centos/](http://mirror.centos.org/centos/)，或者阅读[https://github.com/customink/fauxhai/tree/master/lib/fauxhai/platforms](https://github.com/customink/fauxhai/tree/master/lib/fauxhai/platforms)上的所有模拟平台的完整列表。
- en: 'Execute our first unit test using `chef exec rspec` (it''s using the bundled
    `rspec` from the Chef DK):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`chef exec rspec`执行我们的第一个单元测试（它使用Chef DK中捆绑的`rspec`）：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We see the simulated Chef run execution times, as well as a coverage report
    (0%, as we didn't test anything for now). ChefSpec even shows us what's not unit
    tested yet!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到模拟的Chef运行执行时间，以及覆盖率报告（目前为0%，因为我们还没有测试任何内容）。ChefSpec甚至会告诉我们哪些内容尚未进行单元测试！
- en: 'A nice option is the *documentation* RSpec formatter, so we have descriptions
    of what''s being tested. At the end of this section, we''ll have something like
    this, using this formatter:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不错的选项是*文档* RSpec格式化器，这样我们就能看到正在测试的内容描述。在本节的最后，我们将得到类似这样的输出，使用该格式化器：
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Testing a package installation
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试包安装
- en: 'Our default recipe starts by installing the `httpd` package. Here''s how to
    test it using ChefSpec, inside the context we created earlier:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的默认配方首先安装`httpd`包。以下是在我们之前创建的上下文中，使用ChefSpec测试它的方法：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Execute `rspec` again and see the touch coverage attain 50% as one of the two
    resources from the default recipe is now tested.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 再次执行`rspec`，查看触摸覆盖率达到50%，因为默认配方中的两个资源之一现在已被测试。
- en: Testing services status
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试服务状态
- en: 'The default recipe enables and starts the `httpd` service. Here''s how to test
    if both actions are handled by the code using ChefSpec, inside the context created
    earlier:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配方启用并启动了`httpd`服务。以下是在之前创建的上下文中，使用ChefSpec测试这两个操作是否被代码处理的方式：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Our test coverage is now 100% for the default recipe as we tested both declared
    resources.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们测试了两个声明的资源，现在默认配方的测试覆盖率达到了100%。
- en: Testing another recipe from the same cookbook
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试来自同一食谱的另一个配方
- en: 'As we have two recipes in the apache cookbook, let''s create tests for our
    second recipe—`virtualhost_spec.rb`. Start it exactly like the first one, with
    a description, context, and an initial test for a valid Chef run:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在apache食谱中有两个配方，接下来我们将为第二个配方`virtualhost_spec.rb`创建测试。像第一个测试一样，以描述、上下文和初步的有效Chef运行测试开始：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Execute RSpec and see the coverage fall from 100% to 40%. Three new resources
    are now untested, from the `apache::virtualhost` recipe:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 执行RSpec，查看覆盖率从100%降至40%。现在有三个新的资源未经过测试，来自`apache::virtualhost`配方：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The good news is that ChefSpec still tells us which resources are not tested!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，ChefSpec仍然告诉我们哪些资源尚未经过测试！
- en: Testing directory creation
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试目录创建
- en: 'This particular `apache::virtualhost` recipe starts by creating a directory.
    Here''s how we can test for this directory existence, along with its ownership
    parameters:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的`apache::virtualhost`配方首先创建一个目录。以下是我们如何测试该目录是否存在以及其所有权参数：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Code coverage is now 60%!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率现在是60%！
- en: Testing file creation
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试文件创建
- en: 'The same recipe then creates an index file. This is how we test it''s created
    with the required ownership:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 同一个食谱随后创建了一个索引文件。这是我们如何测试它是否按所需的所有权被创建：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Code coverage is now 80%!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率现在为 80%！
- en: Testing templates creation
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试模板创建
- en: 'The recipe ends with the creation of Apache VirtualHost from a template. This
    is how to test it''s in place with the default attributes:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 该食谱以从模板中创建 Apache VirtualHost 结束。以下是如何测试它是否按默认属性创建：
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: All in all, we've now covered 100% of our resources!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们现在已经覆盖了 100% 的资源！
- en: 'As the output says:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 正如输出所说：
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Stubbing data bags for searches
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为搜索虚拟数据包进行存根
- en: 'The `mysite` cookbook we created earlier contains a search in a data bag to
    later populate a file with content. The thing is, we''re unit testing, and no
    real Chef server is answering requests. So the tests are failing: the simulated
    Chef run doesn''t end well because a search can''t be executed. Fortunately, ChefSpec
    allows us to stub the data bag with real content. So here''s how it looks in `spec/unit/recipes/default_spec.rb`
    from the `mysite` cookbook:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建的 `mysite` cookbook 包含一个搜索虚拟数据包的功能，以便稍后用内容填充文件。问题是，我们正在进行单元测试，没有真实的 Chef
    服务器来响应请求。因此，测试失败了：模拟的 Chef 运行没有成功，因为无法执行搜索。幸运的是，ChefSpec 允许我们使用真实内容存根数据包。下面是在
    `mysite` cookbook 中的 `spec/unit/recipes/default_spec.rb` 文件中是如何操作的：
- en: '[PRE39]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now the simulated Chef run has a `webusers` data bag and some sample data to
    work with!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模拟的 Chef 运行中有一个 `webusers` 数据包，并且可以使用一些示例数据！
- en: Testing recipes inclusion
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试食谱的包含
- en: 'It''s very common to include recipes inside another recipe. Typically, when
    using notifications for restarting a service from a file change, the concerned
    service must be included in the recipe where the file resource is located; otherwise,
    the code most probably works by chance because the required dependent cookbook
    is included elsewhere! Here''s how to test for a cookbook inclusion:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个食谱中包含食谱是非常常见的。通常，当使用通知从文件更改重新启动服务时，相关服务必须包含在文件资源所在的食谱中；否则，代码很可能是偶然工作的，因为所需的依赖
    cookbook 可能在其他地方被包含！这是如何测试 cookbook 包含的方式：
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We now ensure that dependencies are always included.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们确保依赖项始终被包含。
- en: Intercepting errors in tests
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试中拦截错误
- en: 'Sometimes we have to work with third-party cookbooks, that may somehow raise
    errors. It''s the case with the official MySQL cookbook, which depends on the
    SELinux cookbook for the RHEL/CentOS platform. This cookbook, for some reason,
    doesn''t work with ChefSpec, so when converged, it errors out the following string:
    `chefspec not supported!`. ChefSpec stops there, and say the Chef run is in error.
    As we don''t have any power on why is that, here''s a workaround to expect a very
    specific error from a Chef run, and this will be helpful many times later:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要处理第三方 cookbooks，这些 cookbooks 可能会引发错误。这就是官方 MySQL cookbook 的情况，它依赖于 RHEL/CentOS
    平台的 SELinux cookbook。由于某种原因，这个 cookbook 无法与 ChefSpec 一起使用，因此在运行时，它会报错 `chefspec
    not supported!`。ChefSpec 停止在此，并表示 Chef 运行出错。由于我们无法控制这种情况，这里有一个解决方法，用于期望 Chef 运行中的特定错误，之后它将多次派上用场：
- en: '[PRE41]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We've seen a selection of the most common and reusable unit tests for Chef cookbooks!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了 Chef cookbook 中最常见和可重用的单元测试！
- en: There's more…
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'Using Puppet, Puppet Labs is providing a repository containing several useful
    tools we will use in this chapter—the Puppet Labs Spec Helper. Let''s install
    it:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Puppet 时，Puppet Labs 提供了一个包含多个有用工具的仓库，我们将在本章中使用——Puppet Labs Spec Helper。让我们安装它：
- en: '[PRE42]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'For unit testing, rspec-puppet is the counterpart of ChefSpec for Puppet, and
    has been installed as a dependency of `puppetlabs_spec_helper`. We will now add
    a unit test for each manifest in our Apache module. First of all, we need a `Rakefile`
    to create the required targets. Fortunately, the `puppetlabs_spec_helper` gem
    provides such targets. Let''s create a `Rakefile` in the top-level directory of
    our Apache module with the following content:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单元测试，rspec-puppet 是 Puppet 中相当于 ChefSpec 的工具，并已作为 `puppetlabs_spec_helper`
    的依赖安装。现在我们将为 Apache 模块中的每个清单添加单元测试。首先，我们需要一个 `Rakefile` 来创建所需的目标。幸运的是，`puppetlabs_spec_helper`
    gem 提供了这些目标。让我们在 Apache 模块的顶级目录中创建一个 `Rakefile`，内容如下：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'All unit tests should remain in a `spec` directory. Before writing any test,
    we also need a helper script that will be common to all tests. Let''s create it
    in `spec/spec_helper.rb`. This file should contain the following line:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 所有单元测试应保持在 `spec` 目录中。在编写任何测试之前，我们还需要一个适用于所有测试的助手脚本。让我们在 `spec/spec_helper.rb`
    中创建它。该文件应包含以下行：
- en: '[PRE44]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We are now ready to write unit tests. We have four manifests in our module,
    and we are about to create a unit test for each of them. Here are the goals:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好编写单元测试了。我们的模块中有四个清单，我们将为每个清单创建一个单元测试。目标如下：
- en: 'For the `apache/manifests/init.pp` manifest: The unit test needs to validate
    the manifest is compiling, the `apache2` package installation is done, and the
    `apache2` service is running and activated on boot.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`apache/manifests/init.pp`清单：单元测试需要验证清单是否正在编译，`apache2`包是否已安装，`apache2`服务是否正在运行并在启动时激活。
- en: 'For the `apache/manifests/vhost.pp` manifest: The unit test should ensure the
    virtual host is created in `/etc/apache2/sites-available` and activated in `/etc/apache2/sites-enabled`.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`apache/manifests/vhost.pp`清单：单元测试应确保虚拟主机已在`/etc/apache2/sites-available`中创建，并在`/etc/apache2/sites-enabled`中激活。
- en: 'For the `apache/manifests/htpasswd.pp` manifest: The unit test should ensure
    a `htpasswd` file is generated correctly.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`apache/manifests/htpasswd.pp`清单：单元测试应确保`htpasswd`文件正确生成。
- en: 'For the `apache/manifests/htaccess.pp` manifest: The unit test should ensure
    a `.htaccess` file is generated correctly.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`apache/manifests/htaccess.pp`清单：单元测试应确保`.htaccess`文件正确生成。
- en: 'Let''s try the first one! Since the manifest contains a class declaration,
    the unit test should be in `spec/classes`. The class name is `apache`; this will
    be the base name of the file containing the test. Each test file should be suffixed
    by `_spec.rb`, so let''s create `spec/classes/apache_spec.rb` with the following
    content:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试第一个！由于清单包含类声明，单元测试应放在`spec/classes`中。类名为`apache`，这将是包含测试的文件的基本名称。每个测试文件应以`_spec.rb`为后缀，因此让我们创建`spec/classes/apache_spec.rb`并添加以下内容：
- en: '[PRE45]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Unit tests are in descriptive blocks, with a list of assertions. Here, we have
    the three assertions we mentioned earlier when describing the goal of the test.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试位于描述性块中，包含一系列断言。在这里，我们有三个在描述测试目标时提到的断言。
- en: 'Now, let''s run the unit test using the `spec` rake target:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`spec` rake目标运行单元测试：
- en: '[PRE46]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: That's it! Our three assertions have been tested successfully!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们的三个断言已成功测试！
- en: 'The three other tests should be placed under `spec/defines`, this is because
    the corresponding manifests declare a `define` statement. Let''s create:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 另外三个测试应放在`spec/defines`下，因为对应的清单声明了`define`语句。让我们创建：
- en: '`spec/defines/apache_vhost_spec.rb`, with the following content:'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec/defines/apache_vhost_spec.rb`，其内容如下：'
- en: '[PRE47]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`spec/defines/apache_htpasswd_spec.rb`, with the following content:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec/defines/apache_htpasswd_spec.rb`，其内容如下：'
- en: '[PRE48]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '`spec/defines/apache_htaccess_spec.rb,` with the following content:'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec/defines/apache_htaccess_spec.rb`，其内容如下：'
- en: '[PRE49]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now we have all our unit tests, and each one validates the initial target we
    defined earlier. The total number of assertions is `13`, and we can now run the
    complete test suite:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有单元测试，每个测试都验证了我们之前定义的初始目标。总的断言数为`13`，现在我们可以运行完整的测试套件：
- en: '[PRE50]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Rake targets provided also contain a `lint` target that can be used with
    `rake lint`. We can use this target directly instead of puppet-lint manually as
    we did earlier.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的Rake目标还包含一个`lint`目标，可以使用`rake lint`命令。我们可以直接使用这个目标，而不是像之前那样手动使用puppet-lint。
- en: See also
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'ChefSpec: [http://sethvargo.github.io/chefspec](http://sethvargo.github.io/chefspec)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ChefSpec：[http://sethvargo.github.io/chefspec](http://sethvargo.github.io/chefspec)
- en: 'A wide selection of quality examples is given on the ChefSpec GitHub repository:
    [https://github.com/se](https://github.com/se)[thvargo/chefspec/tree/m](http://thvargo/chefspec/tree/m)[aster/examples](http://aster/examples)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ChefSpec GitHub仓库提供了丰富的高质量示例：[https://github.com/se](https://github.com/se)[thvargo/chefspec/tree/m](http://thvargo/chefspec/tree/m)[aster/examples](http://aster/examples)
- en: 'Puppet RSpec: [http://rspec-puppet.com](http://rspec-puppet.com)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet RSpec：[http://rspec-puppet.com](http://rspec-puppet.com)
- en: 'Rspec: [http://rspec.info](http://rspec.info)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rspec：[http://rspec.info](http://rspec.info)
- en: Testing infrastructure with Test Kitchen for Chef and Beaker for Puppet
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Test Kitchen对Chef进行测试基础设施，使用Beaker对Puppet进行测试
- en: Test Kitchen is a central tool in the Chef ecosystem as it enables thorough
    testing of infrastructure code and plays very well with a lot of other tools we
    already use and know. It takes the strong testing culture from the development
    world and applies it to an infrastructure-as-code environment. Test Kitchen helps
    start an isolated system environment, apply Chef cookbooks to it, and then execute
    tests. Supported test frameworks include RSpec, ServerSpec, or Bats (and more),
    with a large choice of supported environments such as AWS, Vagrant, Digital Ocean,
    Docker, and OpenStack. Test Kitchen integrates very well with Berkshelf, so cookbook
    dependencies aren't an issue while testing complex infrastructures. The best part
    is, it's already included in the Chef DK, so we just have to use it.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Test Kitchen是Chef生态系统中的核心工具，它使基础设施代码的彻底测试成为可能，并且与我们已经使用和了解的许多其他工具非常兼容。它将开发世界中的强大测试文化应用于基础设施即代码环境。Test
    Kitchen帮助启动一个隔离的系统环境，应用Chef cookbooks，然后执行测试。支持的测试框架包括RSpec，ServerSpec或Bats（还有更多），支持的环境包括AWS，Vagrant，Digital
    Ocean，Docker和OpenStack。Test Kitchen与Berkshelf集成得非常好，因此在测试复杂基础设施时，cookbook的依赖关系不会成为问题。最棒的是，它已经包含在Chef
    DK中，我们只需使用它。
- en: In this section, we'll structure everything needed to properly test our Chef
    cookbooks code using Vagrant with CentOS 7.2
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将构建所有必要的内容，以便使用Vagrant和CentOS 7.2正确测试我们的Chef cookbooks代码
- en: Note
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Test Kitchen version in use in the Chef DK at the time of writing is 1.13.2.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 本文撰写时Chef DK中使用的Test Kitchen版本是1.13.2。
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To step through this recipe, you will need the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要逐步执行此步骤，您需要以下内容：
- en: A working Chef DK installation on the workstation
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作站上安装了可用的Chef DK
- en: A working Vagrant installation on the workstation
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作站上安装了可用的Vagrant
- en: The Chef code from [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing
    Servers with Chef and Puppet"), *Fundamentals of Managing Servers with Chef and
    Puppet,* or any custom Chef code
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第6章](ch06.html "第6章：使用Chef和Puppet管理服务器的基础知识")的Chef代码，*使用Chef和Puppet管理服务器的基础知识*，或任何自定义Chef代码
- en: How to do it…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Test Kitchen is configured by a single `.kitchen.yml` file at the root of the
    cookbook. It contains a lot of information:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Test Kitchen由位于cookbook根目录的单个`.kitchen.yml`文件进行配置。它包含了大量信息：
- en: How to test the system (Vagrant, by default)
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试系统（默认使用Vagrant）
- en: How to provision the system (chef-solo, chef-zero, or other modes)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置系统（chef-solo，chef-zero或其他模式）
- en: Which platforms to test (Ubuntu 16.04, CentOS 7.2, or other distributions)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试哪些平台（Ubuntu 16.04，CentOS 7.2或其他发行版）
- en: The test suites (what to apply, where to find information, in what context,
    and similar information)
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试套件（应用什么，在哪里找到信息，在哪种上下文中，类似的信息）
- en: Configuring Test Kitchen
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Test Kitchen
- en: 'Irrespective of whether we already have a `.kitchen.yml` file or not, let''s
    open it and fill in the following details:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们是否已经有了`.kitchen.yml`文件，都让我们打开它并填写以下详细信息：
- en: We want to run the tests with **Vagrant** to closely simulate a VM in production
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望使用**Vagrant**运行测试，以便尽可能模拟生产环境中的虚拟机
- en: We want to provision using **Chef Zero** (by simulating a Chef server locally)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望使用**Chef Zero**进行配置（通过在本地模拟Chef服务器）
- en: We want to test only on **CentOS 7.2** (our code isn't currently designed to
    run on something else)
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们只希望在**CentOS 7.2**上进行测试（我们的代码目前不支持在其他平台上运行）
- en: We want a single suite of tests, with a run list of the `mysite::default` recipe,
    and a path to the **Data Bags**
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望只有一个测试套件，包含`mysite::default`配方的运行列表，以及**Data Bags**的路径
- en: 'This is how our `.kitchen.yml` file looks for the `mysite` cookbook:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`.kitchen.yml`文件在`mysite` cookbook中的样子：
- en: '[PRE51]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Testing with Test Kitchen
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Test Kitchen进行测试
- en: 'To simply launch Test Kitchen with the specified configuration, execute the
    following command:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要简单地启动具有指定配置的Test Kitchen，请执行以下命令：
- en: '[PRE52]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'What happened here is the following:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的事情如下：
- en: Test Kitchen read the `.kitchen.yml` file
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Test Kitchen读取了`.kitchen.yml`文件
- en: Test Kitchen created the Vagrant VM with the specified image
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Test Kitchen使用指定的镜像创建了Vagrant虚拟机
- en: Test Kitchen installed Chef, synchronized the cookbooks, solved dependencies
    with Berkshelf, and applied the `run_list` content
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Test Kitchen安装了Chef，同步了cookbook，解决了Berkshelf中的依赖关系，并应用了`run_list`内容
- en: Test Kitchen launched tests (we don't have any for now)
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Test Kitchen启动了测试（目前我们没有测试）
- en: Test Kitchen destroyed the VM as everything went smoothly
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Test Kitchen销毁了虚拟机，因为一切都进展顺利
- en: How it works…
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'When we execute the simple `kitchen test` command, we are in fact running through
    five steps:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行简单的`kitchen test`命令时，实际上是在执行五个步骤：
- en: '`kitchen create`: This creates the virtual testing environment (in our case,
    through Vagrant and an hypervisor), but does not provision it.'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kitchen create`：这将创建虚拟测试环境（在我们的情况下，通过 Vagrant 和一个 hypervisor），但不进行配置。'
- en: '`kitchen converge`: This provisions the instance with the suite information
    from the `.kitchen.yml` we created. As we''re using Test Kitchen with Chef, it
    starts by installing Chef and then resolves cookbook dependencies for us. Then
    it applies `run_list` with the requested Chef mode (chef-zero in our case).'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kitchen converge`：这会使用我们创建的 `.kitchen.yml` 中的套件信息配置实例。因为我们正在使用带有 Chef 的 Test
    Kitchen，它首先安装 Chef，然后为我们解决 cookbook 的依赖关系。然后，它以请求的 Chef 模式（在我们的情况下是 chef-zero）应用
    `run_list`。'
- en: '`kitchen setup`: This installs any additional plugin we might need.'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kitchen setup`：这将安装我们可能需要的任何额外插件。'
- en: '`kitchen verify`: This first installs everything needed to run the tests—in
    our case, this will be ServerSpec.'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kitchen verify`：这首先安装运行测试所需的所有内容 —— 在我们的情况下，这将是 ServerSpec。'
- en: '`kitchen destroy`: If all tests pass, this step destroys the testing environment.'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kitchen destroy`：如果所有测试通过，此步骤将销毁测试环境。'
- en: We highly recommend that you use each command sequentially for debugging purposes.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您按顺序使用每个命令进行调试。
- en: For reference, as this will all be discussed in the next section, all tests
    are located in the `test/integration/<suite_name>/<plugin_name>` folder. In other
    words, the `test/integration/default/serverspec/virtualhost_spec.rb` file will
    match the Chef cookbook recipe named `virtualhost`, executed from the `default`
    Kitchen test suite, and tested with the `serverspec` plugin.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 供参考，因为这将在下一节讨论，所有测试都位于 `test/integration/<suite_name>/<plugin_name>` 文件夹中。换句话说，`test/integration/default/serverspec/virtualhost_spec.rb`
    文件将匹配名为 `virtualhost` 的 Chef cookbook 配方，从 `default` Kitchen 测试套件执行，并使用 `serverspec`
    插件进行测试。
- en: There's more…
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'The counterpart for Puppet is Beaker. The development of Beaker is very active,
    and the current version (6.x) needs at least Ruby 2.2.5\. In order to use the
    Embedded Ruby provided by Puppet Collections, let''s stay on the 5.x branch:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 的对应工具是 Beaker。Beaker 的开发非常活跃，当前版本（6.x）需要至少 Ruby 2.2.5。为了使用 Puppet Collections
    提供的嵌入式 Ruby，让我们保持在 5.x 分支上：
- en: '[PRE53]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Note
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A C/C++ compiler is needed to install Beaker, so install gcc/g++ or clang before
    trying to install `beaker-rspec`. The Zlib library is also needed (binaries and
    headers).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Beaker 需要 C/C++ 编译器，因此在尝试安装 `beaker-rspec` 之前，请安装 gcc/g++ 或 clang。还需要 Zlib
    库（二进制和头文件）。
- en: 'We also need another gem containing helpers: `beaker-puppet_install_helper`.
    This gem is mainly used to install Puppet in boxes during tests:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要另一个包含辅助工具的 gem：`beaker-puppet_install_helper`。这个 gem 主要用于在测试期间在虚拟机中安装 Puppet：
- en: '[PRE54]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We first need to define a list of supported platforms for running test acceptances.
    Each platform must be defined in a YAML file in `spec/acceptance/nodesets`. Since
    our code only works on Ubuntu, let''s define a single platform in `spec/acceptance/nodesets/default.yml`:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要定义一个支持的平台列表，用于运行测试验收。每个平台必须在 `spec/acceptance/nodesets` 中的 YAML 文件中定义。由于我们的代码仅在
    Ubuntu 上工作，请在 `spec/acceptance/nodesets/default.yml` 中定义一个平台：
- en: '[PRE55]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: As you can see, we will use Vagrant as hypervisor, with an Ubuntu Xenial box.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们将使用 Vagrant 作为 hypervisor，并使用 Ubuntu Xenial box。
- en: Note
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`type: foss` means that the open source edition of Puppet will be used.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`type: foss` 表示将使用 Puppet 的开源版本。'
- en: 'Now we can run Beaker:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行 Beaker：
- en: '[PRE56]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: No acceptance test has been defined yet, but we will see how to write one in
    the next pages.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 尚未定义任何验收测试，但我们将在接下来的页面中看到如何编写验收测试。
- en: See also
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Bats testing framework: [https://github.com/sstephenson/bats](https://github.com/sstephenson/bats)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bats 测试框架：[https://github.com/sstephenson/bats](https://github.com/sstephenson/bats)
- en: 'RSpec: [http://rspec.info/](http://rspec.info/)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RSpec：[http://rspec.info/](http://rspec.info/)
- en: 'ServerSpec: [http://serverspec.org/](http://serverspec.org/)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ServerSpec：[http://serverspec.org/](http://serverspec.org/)
- en: 'Test Kitchen drivers: [https://rubygems.org/search?query=kitchen-](https://rubygems.org/search?query=kitchen-)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Test Kitchen 驱动程序：[https://rubygems.org/search?query=kitchen-](https://rubygems.org/search?query=kitchen-)
- en: Integration testing with ServerSpec
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ServerSpec 进行集成测试
- en: 'Integration testing comes after unit testing: we''re now testing the actual
    functionality on a real black box system. We''re probably using many cookbooks
    that are doing a lot of things, each unit tested in an early stage, but how are
    they playing together for real? Everything assembled together, intentions might
    match, but reality can be very different. Overrides might overlap, a forgotten
    recipe can change behavior, a service might not start and then changes will happen,
    regression can be introduced, or newer systems or updates can break; there are
    countless reasons why things can go wrong at a certain point on a real system.
    That''s the reason we need integration testing; testing the outcome of the combination
    of all our cookbooks applied to a real test system, and now.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试在单元测试之后进行：现在我们正在真实的黑盒系统上测试实际功能。我们可能正在使用许多做着大量事情的菜谱，每个单元在早期阶段已经进行了测试，但它们在实际运行中是如何协同工作的呢？所有组件组装在一起，意图可能一致，但现实可能大相径庭。重写可能会重叠，遗漏的食谱可能会改变行为，服务可能无法启动，接着就会发生变化，回归问题可能会引入，或者更新后的系统或更新可能会导致故障；在真实系统中，事物出错的原因有无数种。这就是我们需要集成测试的原因；测试我们所有菜谱组合应用到真实测试系统后的结果，现在开始。
- en: In the case of Chef, we have a great tool to help us for this matter named Test
    Kitchen, which we previously installed and configured to run and execute tests.
    Let's now write these tests!
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chef的情况下，我们有一个很棒的工具，叫做Test Kitchen，帮助我们处理这个问题，我们之前已经安装并配置好了它来运行和执行测试。现在，让我们开始编写这些测试吧！
- en: We'll write integrations tests for the `mysite` cookbook written in [Chapter
    6](ch06.html "Chapter 6. Fundamentals of Managing Servers with Chef and Puppet"),
    *Fundamentals of Managing Servers with Chef and Puppet,* for demonstration purposes,
    but those are completely generic and can be reused anywhere. We'll test for services,
    files, directories, yum repositories, packages, ports, and injected content. This
    way, we'll be certain that the code we're writing actually does what it's expected
    to do in the (simulated) real world!
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写集成测试，针对[第六章](ch06.html "第六章：使用Chef和Puppet管理服务器的基础")中的`mysite`菜谱，*使用Chef和Puppet管理服务器的基础*，用于演示目的，但这些测试完全通用，可以在任何地方重用。我们将测试服务、文件、目录、yum仓库、软件包、端口和注入内容。通过这种方式，我们可以确信我们编写的代码实际上在（模拟的）现实世界中做到了预期的功能！
- en: Note
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We strongly suggest that you add those integrations tests to an automated CI
    system. So that after a change in the code, tests can be automatically launched
    and as time go by, complexity soars with many cases added, so you just don''t
    have to think about it: it''s all going to be tested, and if your change breaks
    something you missed, you''ll know it in seconds. Nobody wants to manually verify
    that nothing breaks on three versions of four operating systems at each change.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您将这些集成测试添加到自动化CI系统中。这样，在代码变更后，测试可以自动启动，随着时间的推移，复杂度会随着更多测试用例的加入而飙升，这样您就不必再考虑它了：所有内容都会被测试，如果您的变更破坏了某些您未注意到的内容，您会在几秒钟内知道。没有人愿意在每次更改时，手动验证在三个版本的四种操作系统上是否没有出错。
- en: Getting ready
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, you will need the following:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这份食谱，您需要以下内容：
- en: A working Chef DK installation on the workstation
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作站上安装好的Chef DK
- en: A working Vagrant installation on the workstation
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作站上安装好的Vagrant
- en: The Chef code from [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing
    Servers with Chef and Puppet"), *Fundamentals of Managing Servers with Chef and
    Puppet,* or any custom Chef code
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第六章](ch06.html "第六章：使用Chef和Puppet管理服务器的基础")的Chef代码，或者任何自定义的Chef代码
- en: How to do it…
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Depending on how the cookbooks we test are created, a `test` folder can be
    created with some sample content under it. We don''t need it, so be sure to get
    rid of everything under the `test` folder to start fresh. We''ll use the `mysite`
    cookbook from [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing Servers
    with Chef and Puppet"), *Fundamentals of Managing Servers with Chef and Puppet,*
    as the base cookbook to build our ServerSpec tests on, but obviously those tests
    can be used anywhere:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们测试的菜谱的创建方式，可以创建一个带有一些示例内容的`test`文件夹。我们不需要它，所以请确保清除`test`文件夹下的所有内容，从头开始。我们将使用[第六章](ch06.html
    "第六章：使用Chef和Puppet管理服务器的基础")中的`mysite`菜谱，作为构建我们的ServerSpec测试的基础菜谱，但显然这些测试可以在任何地方使用：
- en: '[PRE57]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Test Kitchen works with *test suites*, and consequently expects a folder hierarchy
    with the same name as the suite name, in an `integration` folder. The final folder
    hierarchy for a `default` test suite will then be `mysite/test/integration/default/serverspec`.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Test Kitchen与*测试套件*一起工作，因此它期望在`integration`文件夹中有一个与套件名称相同的文件夹层次结构。一个`default`测试套件的最终文件夹层次结构将是`mysite/test/integration/default/serverspec`。
- en: '[PRE58]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Creating a ServerSpec helper script
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建ServerSpec辅助脚本
- en: 'ServerSpec needs a minimum of two lines of configuration that must be repeated
    on each test. Instead of repeating ourselves, let''s create a helper script in
    `test/integration/default/serverspec/spec_helper.rb`:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: ServerSpec至少需要两行配置，每个测试中都必须重复这些配置。为了避免重复，我们可以在`test/integration/default/serverspec/spec_helper.rb`中创建一个辅助脚本：
- en: '[PRE59]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now all our tests will just need to include the following at the top of the
    file:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所有的测试只需在文件顶部包含以下内容：
- en: '[PRE60]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Testing a package installation
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试包的安装
- en: 'Our cookbooks are doing a lot of things, and among the most important things
    is package installation. These things were unit tested previously, but now we''re
    in integration. Are those packages really installed? Let''s find out by writing
    the test for the `httpd` package in `apache_spec.rb`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的食谱做了很多事情，其中最重要的之一就是包的安装。这些内容之前已经进行了单元测试，但现在我们进入了集成阶段。这些包真的安装了吗？让我们通过在`apache_spec.rb`中编写测试来查明`httpd`包是否安装：
- en: '[PRE61]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We can now fire up Test Kitchen and see if this specific package is really installed!
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动Test Kitchen，看看这个特定的包是否真的安装了！
- en: Note
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While writing integration tests, we strongly suggest that you use Test Kitchen
    to create/converge/set up/verify the sequence and not the simple `kitchen test`
    command that does everything at once—the manual way is much faster!
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写集成测试时，我们强烈建议使用Test Kitchen来创建/汇聚/设置/验证过程，而不是使用简单的`kitchen test`命令来一次性完成所有操作——手动方式要快得多！
- en: 'Similarly, testing for the `php` packages in a `php_spec.rb` file will look
    exactly the same:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，测试`php`包在`php_spec.rb`文件中的内容将完全相同：
- en: '[PRE62]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Testing for service status
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试服务状态
- en: 'ServerSpec allows us to test the actual process status. In the recipe to install
    the Apache HTTPD server, we requested it to be enabled and running. Let''s find
    out if it''s really the case by adding the following to the `apache_spec.rb` file:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: ServerSpec允许我们测试实际的进程状态。在安装Apache HTTPD服务器的配方中，我们要求它启用并运行。让我们通过在`apache_spec.rb`文件中添加以下内容来验证它是否真是如此：
- en: '[PRE63]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In the case of our MySQL installation, the documentation from the official
    cookbook indicates the service is by default named `mysql-default` (and not the
    usual `mysqld`). In a `mysql_spec.rb` file, add the following:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的MySQL安装，官方食谱中的文档指出，默认服务名称是`mysql-default`（而不是通常的`mysqld`）。在`mysql_spec.rb`文件中，添加以下内容：
- en: '[PRE64]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Testing for listening ports
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试监听端口
- en: 'ServerSpec is a great tool to test listening ports. In our case, we expect
    Apache to listen on port `80` (HTTP) and we configured MySQL to listen to `3306`.
    Add the following to the `apache_spec.rb` file:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: ServerSpec是一个很棒的工具，可以测试监听端口。在我们的案例中，我们期望Apache监听`80`端口（HTTP），并且我们将MySQL配置为监听`3306`端口。将以下内容添加到`apache_spec.rb`文件中：
- en: '[PRE65]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Similarly, add the following for MySQL in the `mysql_spec.rb` file:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在`mysql_spec.rb`文件中添加以下内容来测试MySQL：
- en: '[PRE66]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Testing for files existence and content
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试文件的存在性和内容
- en: 'We previously unit tested the intention to create all those files in our cookbooks,
    such as a VirtualHost with a custom name, impacting both filename and content
    (that''s what the `mysite` cookbook from [Chapter 6](ch06.html "Chapter 6. Fundamentals
    of Managing Servers with Chef and Puppet"), *Fundamentals of Managing Servers
    with Chef and Puppet,* does, override the defaults from the custom apache cookbook).
    Is it really working? Let''s find out by testing our virtual hosting configuration
    with `vhost_spec.rb`:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经对在我们的食谱中创建这些文件的意图进行了单元测试，例如具有自定义名称的VirtualHost，这会影响文件名和内容（这正是[第6章](ch06.html
    "第6章. 使用Chef和Puppet管理服务器的基础知识")的`mysite`食谱所做的，覆盖了自定义apache食谱的默认值）。它真的有效吗？让我们通过使用`vhost_spec.rb`测试虚拟主机配置来找出答案：
- en: '[PRE67]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: This actually proves the default attribute really got overridden by the `mysite`
    value, and the content of the virtual host configuration file also matches this
    value. The cookbook really works.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上证明了默认属性确实被`mysite`值覆盖，并且虚拟主机配置文件的内容也与该值匹配。这个食谱确实有效。
- en: 'A directory can similarly be tested like this in the same `vhost_spec.rb` file:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 目录可以像这样在相同的`vhost_spec.rb`文件中进行测试：
- en: '[PRE68]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Another interesting test to be done is to check the content of the `htpasswd`
    file; in [Chapter 6](ch06.html "Chapter 6. Fundamentals of Managing Servers with
    Chef and Puppet"), *Fundamentals of Managing Servers with Chef and Puppet,* we
    wrote a recipe making a request to the Chef server for authorized users in a data
    bag. We unit tested the feature by stubbing the data bag, and then using Test
    Kitchen, we configured it to simulate the availability of those data bags. Is
    this Chef Server-specific code really working and adding the `john` user in the
    `htpasswd` file while restricting access to it? Let''s find out by adding the
    following to an `htaccess_spec.rb` file:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的测试是检查`htpasswd`文件的内容；在[第6章](ch06.html "第6章：使用Chef和Puppet管理服务器的基础知识")，*使用Chef和Puppet管理服务器的基础知识*中，我们编写了一个食谱，向Chef服务器请求数据包中的授权用户。我们通过模拟数据包来进行单元测试，然后使用Test
    Kitchen配置它以模拟这些数据包的可用性。这个特定于Chef服务器的代码是否真的有效，并将`john`用户添加到`htpasswd`文件中，同时限制对该文件的访问？让我们通过在`htaccess_spec.rb`文件中添加以下内容来找出答案：
- en: '[PRE69]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Testing for repository existence
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试仓库是否存在
- en: 'Our `mysite` cookbook example from [Chapter 6](ch06.html "Chapter 6. Fundamentals
    of Managing Servers with Chef and Puppet"), *Fundamentals of Managing Servers
    with Chef and Puppet,* is using the official Chef cookbook to deploy MySQL, and
    that includes adding a yum repository. As it''s now an important part of the system,
    we''d better test for its existence and status! To test a yum repository, add
    the following to the `mysql_spec.rb` file:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`mysite`食谱示例来自[第6章](ch06.html "第6章：使用Chef和Puppet管理服务器的基础知识")，*使用Chef和Puppet管理服务器的基础知识*，它使用官方的Chef食谱来部署MySQL，其中包括添加一个yum仓库。由于它现在是系统的重要组成部分，我们最好测试它的存在和状态！要测试yum仓库，可以将以下内容添加到`mysql_spec.rb`文件中：
- en: '[PRE70]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Many other parts of a system can be tested using ServerSpec, notably in networking
    (routing tables, gateways, and interfaces), Unix users and groups, real commands,
    cron jobs, and many more.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的许多其他部分也可以使用ServerSpec进行测试，特别是在网络方面（路由表、网关和接口）、Unix用户和组、实际命令、cron作业等。
- en: There's more…
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: Using Puppet and Beaker, let's try to write acceptance tests for our Apache
    module. Acceptance tests needs to be placed in the `spec/acceptance` directory.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Puppet和Beaker，让我们尝试为我们的Apache模块编写验收测试。验收测试需要放置在`spec/acceptance`目录中。
- en: 'We need to define a helper file that will be shared by all acceptance tests.
    Let''s create a `spec/spec_helper_acceptance.rb` file with the following content:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义一个将由所有验收测试共享的辅助文件。让我们创建一个`spec/spec_helper_acceptance.rb`文件，内容如下：
- en: '[PRE71]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This helper file will be used to install Puppet on the test box, and populate
    the module directory with our `apache` module.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这个辅助文件将用于在测试机器上安装Puppet，并将我们的`apache`模块填充到模块目录中。
- en: 'As a first basic acceptance test for the main `apache` class, let''s create
    `spec/acceptances/classes/apache_spec.rb`, with the following content:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 作为主要`apache`类的第一个基本验收测试，让我们创建`spec/acceptances/classes/apache_spec.rb`，内容如下：
- en: '[PRE72]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The goals of this test are as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 该测试的目标如下：
- en: Installing Apache using our class.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们的类安装Apache
- en: Verifying Puppet applies properly.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证Puppet是否正确应用。
- en: 'Verifying that a second run of Puppet does not change anything: we want to
    prove the code is idempotent.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证第二次运行Puppet时不会改变任何内容：我们想证明代码是幂等的。
- en: Let's try the test!
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行测试吧！
- en: '[PRE73]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: In this example, Beaker created the box, installed Puppet, uploaded our code,
    applied Puppet twice to validate our test, and destroyed the box.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，Beaker创建了机器，安装了Puppet，上传了我们的代码，应用Puppet两次以验证我们的测试，并销毁了机器。
- en: 'To have more logs regarding Puppet agent installation and execution, we can
    add a line `log_level: verbose` in the `nodeset` file:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '若想获得更多关于Puppet代理安装和执行的日志，可以在`nodeset`文件中添加一行`log_level: verbose`：'
- en: '[PRE74]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Now let''s extend our test to use all code contained in the apache module.
    We want to update the manifest at the top of the file in order to do the following:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们扩展我们的测试，使用Apache模块中包含的所有代码。我们需要更新文件顶部的清单，以便执行以下操作：
- en: Install apache
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Apache
- en: Define a virtual host
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个虚拟主机
- en: Create the root directory of the virtual host
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建虚拟主机的根目录
- en: Create a `htpasswd` file with a test user
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含测试用户的`htpasswd`文件
- en: Create a `.htaccess` file in the root directory, using the previous `htpasswd`
    file
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在根目录中创建一个`.htaccess`文件，使用之前的`htpasswd`文件
- en: 'Regarding tests, we want to:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 关于测试，我们希望：
- en: Verify Puppet applies
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证Puppet是否应用
- en: Verify the code is idempotent
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证代码是幂等的
- en: Verify apache is running and activated at boot
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证Apache是否正在运行并在启动时激活
- en: Verify apache is listening
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证Apache是否在监听
- en: Verify the virtual host is deployed and activated with the correct `DocumentRoot`
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证虚拟主机是否已部署并且激活，且 `DocumentRoot` 配置正确
- en: Verify the `htpasswd` file is deployed with a correct content
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证 `htpasswd` 文件是否已部署并且内容正确
- en: Verify the `.htaccess` file is deployed with a correct content
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证 `.htaccess` 文件是否已部署并且内容正确
- en: 'The updated acceptance test code is now as follows:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的验收测试代码如下：
- en: '[PRE75]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now, let''s try to run Beaker again:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次尝试运行 Beaker：
- en: '[PRE76]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: We now have a complete acceptance test suite for our Apache module!
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了一个完整的 Apache 模块验收测试套件！
- en: See also
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'ServerSpec GitHub: [https://github.com/serverspec/](https://github.com/serverspec/)'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ServerSpec GitHub: [https://github.com/serverspec/](https://github.com/serverspec/)'
- en: 'ServerSpec Homepage: [http://serverspec.org/](http://serverspec.org/)'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ServerSpec 主页: [http://serverspec.org/](http://serverspec.org/)'
- en: 'Test Kitchen Homepage: [http://kitchen.ci/](http://kitchen.ci/)'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Test Kitchen 主页: [http://kitchen.ci/](http://kitchen.ci/)'
- en: 'A sample skeleton for Puppet module with Beaker enabled: [https://gitlab.com/joshbeard/puppet-module-test](https://gitlab.com/joshbeard/puppet-module-test)'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一个启用 Beaker 的 Puppet 模块示例骨架: [https://gitlab.com/joshbeard/puppet-module-test](https://gitlab.com/joshbeard/puppet-module-test)'
