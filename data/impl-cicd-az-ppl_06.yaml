- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Integrating Testing, Security Tasks, and Other Tools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试、安全任务和其他工具
- en: Now that we have learned the basics of build and release pipelines, it is time
    to understand how Azure Pipelines can be extended with other tools, to perform
    additional tasks and be able to include additional capabilities beyond those built
    into the tool. By the end of this chapter, you will have the skills to go beyond
    the basics and be able to include tasks to increase the quality of the code produced
    in builds, detect vulnerabilities before deploying, and use source code from another
    repository and inclusive artifacts from other locations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了构建和发布流水线的基础知识，是时候了解如何通过其他工具扩展 Azure Pipelines，以执行更多任务，并能够在内置功能之外增加额外的功能了。本章结束时，你将具备超越基础的技能，能够包括任务来提高构建中产生代码的质量，部署前发现漏洞，并使用来自其他仓库的源代码和来自其他位置的完整工件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Understanding the Azure DevOps extensibility model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Azure DevOps 的可扩展性模型
- en: Including automated tests for your build
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的构建包含自动化测试
- en: Increasing code quality
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高代码质量
- en: Integrating with Jenkins for artifacts and release pipelines
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Jenkins 集成以进行工件和发布流水线管理
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter, you will need certain extensions. Let’s understand
    the **Azure Devops extensibility model** first and how you can access them. You
    will find the code for this chapter in the GitHub repository at [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch06](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch06).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章内容，你需要某些扩展。首先，让我们了解**Azure DevOps 可扩展性模型**以及如何访问这些扩展。你可以在 GitHub 仓库中找到本章的代码，链接为
    [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch06](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch06)。
- en: Understanding the Azure DevOps extensibility model
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Azure DevOps 的可扩展性模型
- en: Azure DevOps and its sub-services provide several features that are included
    by default, but you can customize and extend your experience using extensions
    that can be developed using standard technologies such as HTML, JavaScript, and
    CSS.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 及其子服务提供了多个默认包含的功能，但你可以使用扩展来定制和扩展你的体验，这些扩展可以使用标准技术（如 HTML、JavaScript
    和 CSS）开发。
- en: There is a very flexible model behind all sub-services that you can augment
    using **extensions** published by individuals and well-known third-party organizations
    available in the marketplace. You have the option to create your own and publish
    them as well if you don’t find what you need.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有子服务背后都有一个非常灵活的模型，你可以通过市场上由个人和知名第三方组织发布的**扩展**来增强该模型。如果你没有找到需要的功能，你也可以创建自己的扩展并发布。
- en: 'The purpose of an extension is to make it easier to encapsulate reusable tasks,
    use external tools, and even enhance the look and feel of Azure DevOps. For Azure
    Pipelines, you will find extensions that do the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展的目的是简化可重用任务的封装，使用外部工具，甚至增强 Azure DevOps 的外观和感觉。对于 Azure Pipelines，你会找到以下扩展：
- en: Make complex and repetitive tasks easier
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化复杂和重复的任务
- en: Use common **Infrastructure as Code** (**IaC**) tools easily, such as Terraform
    or Ansible
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松使用常见的**基础设施即代码**（**IaC**）工具，如 Terraform 或 Ansible
- en: Integrate with SaaS products to improve code quality and security
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 SaaS 产品集成以提高代码质量和安全性
- en: Facilitate deployment tasks to cloud providers such as Azure and Amazon Web
    Services
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进部署任务到如 Azure 和亚马逊 Web 服务等云服务提供商
- en: You can access Visual Studio Marketplace for Azure DevOps at [https://marketplace.visualstudio.com/azuredevops](https://marketplace.visualstudio.com/azuredevops).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问 Visual Studio Marketplace for Azure DevOps，网址是 [https://marketplace.visualstudio.com/azuredevops](https://marketplace.visualstudio.com/azuredevops)。
- en: 'The following screenshot shows what this looks like:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了它的样子：
- en: '![Figure 6.1 – Visual Studio Marketplace for Azure DevOps](img/B18875_06_1.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – Azure DevOps 的 Visual Studio 市场](img/B18875_06_1.jpg)'
- en: Figure 6.1 – Visual Studio Marketplace for Azure DevOps
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – Azure DevOps 的 Visual Studio 市场
- en: Each marketplace extension listing indicates the name of the extension, who
    published it, whether the publisher is verified, its rating, number of installations,
    and price. Some are provided for free, while others might require you to pay a
    fee for them. You can find these extensions by name, category, or tag to make
    it easier to find what you are looking for.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 marketplace 扩展列表都会显示扩展的名称、发布者、是否经过认证、评分、安装次数和价格。有些是免费的，而其他一些则可能需要付费。你可以通过名称、类别或标签来查找这些扩展，方便找到你需要的内容。
- en: Installing a code quality assessment tool, SonarQube
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装代码质量评估工具 SonarQube
- en: Search the marketplace for SonarQube and click on the listing to see its details.
    Alternatively, go to [https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 marketplace 中搜索 SonarQube 并点击列表查看其详细信息。或者，你可以访问 [https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube)。
- en: 'You should see something similar to the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似于以下内容：
- en: '![Figure 6.2 – Visual Studio Marketplace listing for the SonarQube extension](img/B18875_06_2.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – Visual Studio Marketplace 上 SonarQube 扩展的列表](img/B18875_06_2.jpg)'
- en: Figure 6.2 – Visual Studio Marketplace listing for the SonarQube extension
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – Visual Studio Marketplace 上 SonarQube 扩展的列表
- en: 'Once you have found the extension you want, simply click on the **Get it free**
    or **Get** button. You will be able to select the Azure DevOps organization to
    install it in, just in case you have more than one, as shown in the following
    figure:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 找到你想要的扩展后，点击 **免费获取** 或 **获取** 按钮。你将能够选择要安装的 Azure DevOps 组织（如果你有多个组织），如下图所示：
- en: '![Figure 6.3 – Installing the SonarQube extension from the marketplace](img/B18875_06_3.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 从 marketplace 安装 SonarQube 扩展](img/B18875_06_3.jpg)'
- en: Figure 6.3 – Installing the SonarQube extension from the marketplace
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 从 marketplace 安装 SonarQube 扩展
- en: 'Once you have reviewed the permissions and terms of service and selected the
    organization to install in, click the **Install** button. It typically takes just
    a few seconds to install the extension, after which you have the option to proceed
    to the Azure DevOps organization or go back to the marketplace to find more extensions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 审核完权限和服务条款后，选择要安装的组织，点击 **安装** 按钮。安装扩展通常只需几秒钟，安装完成后，你可以选择继续前往 Azure DevOps 组织，或者返回
    marketplace 查找更多扩展：
- en: '![ Figure 6.4 – The SonarQube extension has been installed](img/B18875_06_4.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – SonarQube 扩展已安装](img/B18875_06_4.jpg)'
- en: Figure 6.4 – The SonarQube extension has been installed
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – SonarQube 扩展已安装
- en: You will find the code for this chapter at [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch06](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch06).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch06](https://github.com/PacktPublishing/Implementing-CI-CD-Using-Azure-Pipelines/tree/main/ch06)
    找到本章的代码。
- en: Now that we have all the technical requirements in place, let’s see how we can
    add some automated test runs to your build pipeline.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了所有技术要求的设置，接下来让我们看看如何将自动化测试运行添加到你的构建管道中。
- en: Including automated tests for your build
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包括对构建的自动化测试
- en: All modern applications require some sort of validation to ensure they are working
    correctly, regardless of the number of developers working on the code at the same
    time. This is where **automated tests**, which are executed right after the application
    is built, can validate that there is no loss of quality or bugs are introduced
    with the changes made.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代应用程序都需要某种形式的验证，以确保它们正确工作，无论有多少开发人员同时在代码上进行开发。这就是**自动化测试**的作用，它会在应用程序构建完成后立即执行，验证是否在做出更改时没有丧失质量或引入
    bug。
- en: There are many types of tests, such as **unit tests**, **integration tests**,
    and **load tests**, that can be executed against an application. There are also
    many automated testing frameworks available, depending on the programming language
    used to build the application and the preferences of the teams working on it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种类型的测试，例如 **单元测试**、**集成测试** 和 **负载测试**，可以对应用程序执行。根据所使用的编程语言以及开发团队的偏好，还有许多自动化测试框架可供选择。
- en: Why is automated testing important?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么自动化测试很重要？
- en: Automated tests allow you to reduce the chance of releasing bugs in your applications
    by detecting them in the early stages of the development cycle, all while reducing
    the amount of time dedicated by testing teams to perform the verifications and
    avoiding human hours in repetitive tasks that could be used to develop more features
    and capabilities in your applications.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试可以帮助你减少在应用程序发布中出现BUG的机会，通过在开发周期的早期阶段发现它们，同时减少测试团队执行验证的时间，并避免在重复任务上浪费人力，这些时间本可以用来开发应用程序中的更多功能和能力。
- en: In this section, you will learn how to integrate the execution of unit tests
    into your build pipeline using the **NUnit test framework** and a sample C#.NET
    application created in .NET Core 6.0.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何使用**NUnit测试框架**和在.NET Core 6.0中创建的示例C#.NET应用程序集成单元测试的执行到你的构建流水线中。
- en: 'We will assume you’re using a Visual Studio solution where you have a `CalculusService`
    Class Library project. The test projects are included. The following is the example
    code of this class in the Class Library project:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你使用的是一个Visual Studio解决方案，其中包含一个`CalculusService`类库项目，测试项目已包含在内。以下是该类库项目中此类的示例代码：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following corresponding unit test is defined in a separate test project.
    Make sure you have a reference to the `Nunit`, `NUnit3TestAdapter`, and `NUnit.Analyzers`
    NuGet packages:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下对应的单元测试定义在一个单独的测试项目中。确保你引用了`Nunit`、`NUnit3TestAdapter`和`NUnit.Analyzers` NuGet包：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will need to use a YAML pipeline, as shown in the following code snippet,
    to build and execute the automated tests:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要使用YAML流水线，如下所示的代码片段，以构建和执行自动化测试：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The most important section of this pipeline is the last step, which uses the
    `VSTest@2` task. This is a generic and out-of-the-box task available in Azure
    Pipelines for running unit and functional tests that support several test frameworks
    that take advantage of Visual Studio’s Test Explorer. It’s also important to set
    the `codeCoverageEnabled` property to `true` so that you can collect data that
    indicates how much of the code in the application is being tested.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该流水线中最重要的部分是最后一步，它使用了`VSTest@2`任务。这是一个通用的现成任务，Azure Pipelines中可用于运行单元和功能测试，支持多个测试框架，充分利用Visual
    Studio的Test Explorer。设置`codeCoverageEnabled`属性为`true`也很重要，这样你就可以收集数据，指示应用程序中有多少代码被测试。
- en: Pro tip
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 专业提示
- en: When configuring the `VSTest` task and using the `testAssemblyVer2` attribute,
    ensure that you provide a list of patterns to specifically find the test assemblies
    to execute tests in. Otherwise, you will find yourself with cryptic errors.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 配置`VSTest`任务并使用`testAssemblyVer2`属性时，确保提供一组模式列表，以便准确找到要执行测试的测试程序集。否则，你将遇到难以理解的错误。
- en: 'With unit tests executed and code coverage enabled, you will see the results
    in the **Summary** window:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 执行单元测试并启用代码覆盖率后，你将在**概览**窗口中看到结果：
- en: '![Figure 6.5 – Test and coverage results in the Summary window](img/B18875_06_5.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 概览窗口中的测试和覆盖率结果](img/B18875_06_5.jpg)'
- en: Figure 6.5 – Test and coverage results in the Summary window
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 概览窗口中的测试和覆盖率结果
- en: 'The benefit of using this task is that it provides support for automatically
    publishing test results and UI reporting built into Azure Pipelines, as shown
    in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此任务的好处是它提供对自动发布测试结果和内置的UI报告的支持，这些功能已集成在Azure Pipelines中，如下所示的截图所示：
- en: '![Figure 6.6 – The test results included in the Azure Pipelines run](img/B18875_06_6.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – Azure Pipelines运行中包含的测试结果](img/B18875_06_6.jpg)'
- en: Figure 6.6 – The test results included in the Azure Pipelines run
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – Azure Pipelines运行中包含的测试结果
- en: The `VSTest@2` task also supports more advanced scenarios such as executing
    tests in parallel across multiple agents, which is useful when you have many tests
    to run, or executing UI tests, which require additional configuration in the agent
    that will be executing the test.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`VSTest@2`任务还支持更高级的场景，比如在多个代理上并行执行测试，这在你有很多测试需要运行时非常有用，或者执行UI测试时，这需要在执行测试的代理中进行额外配置。'
- en: If your application is built using other programming languages, you must use
    the corresponding test runner and ensure the results are published in any of the
    formats supported by the `PublishTestResults@2` task to be able to import them
    and include them in the UI.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序是使用其他编程语言构建的，你必须使用相应的测试运行器，并确保将结果发布为`PublishTestResults@2`任务支持的任何格式，以便能够导入并包含在UI中。
- en: Now that we’ve learned about running tests in an automated way, let’s learn
    how to increase the quality of your code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何以自动化方式运行测试，让我们学习如何提高代码质量。
- en: Increasing code quality
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高代码质量
- en: Typically, developers are too busy to focus on the quality of their code and
    end up taking advantage of different automated tools to make sure they are producing
    the best and most secure application possible.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，开发人员太忙于关注代码质量，最终会利用各种自动化工具来确保自己编写的是最佳且最安全的应用程序。
- en: 'There are two important areas in this space to understand:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个空间中有两个重要的区域需要了解：
- en: '**Static application security testing**: This allows you to detect vulnerabilities
    in your code'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态应用程序安全测试**：这可以帮助您检测代码中的漏洞'
- en: '**Software composition analysis**: This allows you to detect vulnerabilities
    in references to external packages and libraries used in your code'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件组成分析**：这可以帮助您检测代码中引用的外部包和库中的漏洞'
- en: Why use tools to improve code quality?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要使用工具来提高代码质量？
- en: Developers and testers can only do so much with the time they have available
    to meet timelines and work on application features. Introducing these tools early
    allows them to detect bugs and vulnerabilities that could otherwise be costly
    when the application is released to end users.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员和测试人员只能在有限的时间内尽力满足时间表并处理应用程序功能。提前引入这些工具可以帮助他们发现 bugs 和漏洞，否则这些问题在应用程序发布给最终用户时可能会造成很高的成本。
- en: There are many well-known third-party tools you can use to scan and assess your
    code quality. In this chapter, we will use **SonarQube** as it is one of the most
    popular and easy to use. It allows developers to ensure they are producing clean
    code by identifying bugs and security vulnerabilities, as well as detecting common
    anti-maintainability patterns and duplicate code, among other things.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多知名的第三方工具可以用于扫描和评估代码质量。在本章中，我们将使用**SonarQube**，因为它是最流行且易于使用的工具之一。它允许开发人员确保通过识别
    bugs 和安全漏洞、检测常见的反维护性模式和重复代码等来编写清晰的代码。
- en: It comes in different pricing tiers, starting with the free Community Edition,
    which will be used for the examples in this chapter. If you want to get more programming
    language support in the tool or advanced vulnerability detection, you need one
    of the paid tiers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供不同的定价层级，从免费的 Community Edition 开始，本章中的示例将使用该版本。如果您希望在工具中获得更多的编程语言支持或高级漏洞检测，则需要付费版本。
- en: Checkmarx, Veracode, OWASP, WhiteSource, and HP Fortify are among many others
    available. It is beyond the scope of this book to compare these tools, but you
    can certainly find plenty of comparisons online.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Checkmarx、Veracode、OWASP、WhiteSource 和 HP Fortify 等都是可用的工具。比较这些工具超出了本书的范围，但您可以在网上找到很多比较。
- en: 'Follow these steps to set up SonarQube analysis on your code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置 SonarQube 分析您的代码：
- en: Configure a SonarQube project.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 SonarQube 项目。
- en: Create a service connection to SonarQube in Azure DevOps.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中创建到 SonarQube 的服务连接。
- en: Create an Azure pipeline to analyze your code.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Azure pipeline 来分析您的代码。
- en: We’ll walk through these steps in the following sections.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中逐步介绍这些步骤。
- en: Configuring a SonarQube project
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 SonarQube 项目
- en: 'In your SonarQube instance, proceed to create a project from the wizard by
    selecting the **From Azure DevOps** option, as shown in the following figure:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 SonarQube 实例中，通过选择**来自 Azure DevOps**选项，从向导中创建项目，如下图所示：
- en: '![Figure 6.7 – Creating a project in SonarQube using the From Azure DevOps
    option](img/B18875_06_7.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 使用来自 Azure DevOps 选项在 SonarQube 中创建项目](img/B18875_06_7.jpg)'
- en: Figure 6.7 – Creating a project in SonarQube using the From Azure DevOps option
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 使用来自 Azure DevOps 选项在 SonarQube 中创建项目
- en: 'If this is the first time you are setting up a connection to Azure DevOps,
    SonarQube will prompt you for **Configuration name**, **Azure DevOps URL**, and
    **Personal Access Token** details so that it can configure the project:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次设置与 Azure DevOps 的连接，SonarQube 会提示您提供**配置名称**、**Azure DevOps URL**和**个人访问令牌**的详细信息，以便它可以配置项目：
- en: '![Figure 6.8 – Create a configuration](img/B18875_06_8.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 创建配置](img/B18875_06_8.jpg)'
- en: Figure 6.8 – Create a configuration
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 创建配置
- en: 'Then, select the Azure DevOps project to configure in the SonarQube side by
    selecting it from the available list and clicking on the **Set up selected** **repository**
    button:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过从可用列表中选择 Azure DevOps 项目并点击**设置所选** **代码库**按钮，在 SonarQube 侧选择要配置的 Azure
    DevOps 项目：
- en: '![Figure 6.9 – Selecting an Azure DevOps project in SonarQube](img/B18875_06_9.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 在SonarQube中选择Azure DevOps项目](img/B18875_06_9.jpg)'
- en: Figure 6.9 – Selecting an Azure DevOps project in SonarQube
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 在SonarQube中选择Azure DevOps项目
- en: Once you’ve done this, you are ready to proceed with the configuration in the
    Azure DevOps and pipeline side.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，你就可以继续在Azure DevOps和管道端进行配置了。
- en: Creating a service connection to SonarQube in Azure DevOps
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Azure DevOps中创建到SonarQube的服务连接
- en: The next step is to create a **service connection** to the SonarQube instance.
    This will allow Azure Pipelines to use the SonarQube extension and communicate
    with the SonarQube instance.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个**服务连接**到SonarQube实例。这将允许Azure Pipelines使用SonarQube扩展并与SonarQube实例进行通信。
- en: 'You can create and manage service connections by choosing the `Sonar` should
    list the SonarQube option:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过选择`Sonar`来创建和管理服务连接，应该列出SonarQube选项：
- en: '![Figure 6.10 – The SonarQube service connection option](img/B18875_06_10.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – SonarQube服务连接选项](img/B18875_06_10.jpg)'
- en: Figure 6.10 – The SonarQube service connection option
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – SonarQube服务连接选项
- en: 'The next step is to provide details in the **Server Url**, **Token**, **Service
    connection name**, and **Description (optional)** boxes. Don’t forget to check
    the **Grant access permission to all pipelines** option, unless you want to manage
    access to the service connection separately for each pipeline:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在**Server Url**、**Token**、**Service connection name**和**Description (optional)**框中提供详细信息。除非你想分别为每个管道管理服务连接的访问权限，否则不要忘记勾选**Grant
    access permission to all pipelines**选项：
- en: '![Figure 6.11 – Service connection details for SonarQube](img/B18875_06_11.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – SonarQube的服务连接详情](img/B18875_06_11.jpg)'
- en: Figure 6.11 – Service connection details for SonarQube
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – SonarQube的服务连接详情
- en: Important note
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Service connections are an easy and centralized way to define the credentials
    needed to communicate with a service outside of Azure DevOps, removing the need
    to enter credentials everywhere.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 服务连接是定义与Azure DevOps外部服务通信所需凭证的简单且集中化的方式，避免了在各个地方输入凭证的需求。
- en: Creating an Azure Pipeline to analyze your code
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个Azure Pipeline来分析你的代码
- en: 'The next step is to include two tasks available that are in the SonarQube extension
    in your build pipeline. Let’s look at the following pipeline:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将SonarQube扩展中的两个任务添加到你的构建管道中。让我们看一下以下管道：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `SonarQubePrepare` task is needed to provide the context necessary to perform
    the analysis, for which the service connection, scanner mode, and project key
    in SonarQube must be provided. This task must be placed before any compilation
    tasks are executed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`SonarQubePrepare`任务用于提供执行分析所需的上下文，必须提供SonarQube中的服务连接、扫描器模式和项目密钥。此任务必须在执行任何编译任务之前放置。'
- en: The `SonarQubeAnalyze` task is responsible for performing the security scan
    and must be placed after all tasks that compile code. It will use the information
    collected since the execution of the `SonarQubePrepare` task to perform all necessary
    data collection and analysis for the security scan. This task will fail the pipeline
    if it does not pass the conditions defined in the SonarQube project.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`SonarQubeAnalyze`任务负责执行安全扫描，必须放在所有编译代码的任务之后。它将使用自`SonarQubePrepare`任务执行以来收集的信息来执行所有必要的数据收集和分析，以进行安全扫描。如果未通过SonarQube项目中定义的条件，该任务将导致管道失败。'
- en: Reviewing SonarQube analysis results
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查SonarQube分析结果
- en: 'The results of the security scan will be available in the SonarQube portal.
    Depending on the nature of your project, you will get different quality indicators
    and recommendations to improve your code, as shown in the following figure:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 安全扫描的结果将在SonarQube门户中提供。根据项目的性质，你将获得不同的质量指标和改善代码的建议，如下图所示：
- en: '![Figure 6.12 – SonarQube analysis results](img/B18875_06_12.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12 – SonarQube分析结果](img/B18875_06_12.jpg)'
- en: Figure 6.12 – SonarQube analysis results
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – SonarQube分析结果
- en: Important note
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is possible to use the `SonarQubePublish` task to include a brief summary
    and link to the full report in your Azure Pipeline summary. However, this is only
    available for paid tiers of SonarQube.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`SonarQubePublish`任务在Azure Pipeline摘要中包含简短的摘要和完整报告的链接。然而，这仅适用于SonarQube的付费版本。
- en: SonarQube will provide you with insights regarding bugs, vulnerabilities, security
    hotspots, duplication of code, and many other issues that might be present in
    code, helping the developers solve these by finding them and providing instructions
    on how to best fix them.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQube 将为您提供有关代码中可能存在的错误、漏洞、安全热点、代码重复和其他问题的洞察，帮助开发者通过发现这些问题并提供修复建议来解决它们。
- en: Integrating this type of tool into your pipelines provides a fast feedback loop
    for developers to fix and mitigate risks in the applications early in the development
    process and avoid costly mistakes if those were deployed to a production environment.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 将这种类型的工具集成到您的管道中，能为开发者提供快速反馈回路，帮助他们在开发过程早期修复和缓解应用程序中的风险，避免在将应用部署到生产环境时发生代价高昂的错误。
- en: Azure Pipelines can also be used to orchestrate the deployment of **artifacts**
    created in other systems, such as the popular CI/CD tool **Jenkins**. We’ll look
    at this in detail in the next section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Pipelines 也可以用来协调在其他系统中创建的**工件**的部署，例如流行的 CI/CD 工具**Jenkins**。我们将在下一节详细介绍这一点。
- en: Integrating with Jenkins for artifacts and release pipelines
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Jenkins 集成以进行工件和发布管道
- en: In this section, we will walk through a simple setup demonstrating how to connect
    Azure Pipelines and Jenkins so that you can download an artifact generated in
    Jenkins and deploy it via release pipelines.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示如何设置一个简单的示例，展示如何将 Azure Pipelines 与 Jenkins 连接，从而能够下载在 Jenkins 中生成的工件并通过发布管道进行部署。
- en: A **Jenkins Job** is like an Azure Pipeline, an automated set of steps that
    executes actions and can produce artifacts or perform deployments. Let’s learn
    how to create a simple Jenkins job.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jenkins 任务**类似于 Azure Pipeline，是一组自动化步骤，执行特定的操作并可以生成工件或执行部署。让我们来学习如何创建一个简单的
    Jenkins 任务。'
- en: Creating a Jenkins job that produces an artifact
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个生成工件的 Jenkins 任务
- en: 'This scenario assumes that we have a project called `PacktFamily` in a Jenkins
    server, as shown in the following figure:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个场景假设我们在 Jenkins 服务器中有一个名为`PacktFamily`的项目，如下图所示：
- en: '![Figure 6.13 – A Jenkins instance with a PackFamily project](img/B18875_06_13.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 带有 PackFamily 项目的 Jenkins 实例](img/B18875_06_13.jpg)'
- en: Figure 6.13 – A Jenkins instance with a PackFamily project
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 带有 PackFamily 项目的 Jenkins 实例
- en: 'The configuration for the Jenkins job is very simple in this scenario, solely
    to demonstrate the ability the download an artifact on the Azure Pipelines side.
    The following figure shows the build steps for producing `artifact.txt`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，Jenkins 任务的配置非常简单，主要是为了演示如何在 Azure Pipelines 端下载一个工件。以下图显示了生成`artifact.txt`的构建步骤：
- en: '![Figure 6.14 – The build step in a Jenkins job for creating the artifact](img/B18875_06_14.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – Jenkins 任务中用于创建工件的构建步骤](img/B18875_06_14.jpg)'
- en: Figure 6.14 – The build step in a Jenkins job for creating the artifact
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – Jenkins 任务中用于创建工件的构建步骤
- en: 'The following figure shows the post-build actions for `artifact.txt`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了`artifact.txt`的构建后操作：
- en: '![Figure 6.15 – Post-build action publishing the Jenkins artifact](img/B18875_06_15.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 发布 Jenkins 工件的构建后操作](img/B18875_06_15.jpg)'
- en: Figure 6.15 – Post-build action publishing the Jenkins artifact
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 发布 Jenkins 工件的构建后操作
- en: 'The execution of the Jenkins job will yield a single artifact that can be downloaded
    by Azure Pipelines:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 任务的执行将生成一个可由 Azure Pipelines 下载的单一工件：
- en: '![Figure 6.16 – Jenkins job results and artifacts](img/B18875_06_16.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – Jenkins 任务结果与工件](img/B18875_06_16.jpg)'
- en: Figure 6.16 – Jenkins job results and artifacts
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – Jenkins 任务结果与工件
- en: Now that we have a Jenkins job, let’s learn how to integrate Azure Pipelines
    with it.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个 Jenkins 任务，接下来让我们学习如何将 Azure Pipelines 与它集成。
- en: Creating a service connection to Jenkins in Azure DevOps
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中创建 Jenkins 服务连接
- en: 'This process is similar to what we discussed in the *Creating a service connection
    to SonarQube in Azure DevOps* section. In Azure DevOps’ project settings, click
    on the `Jenkins` and click **Next**:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程类似于我们在*在 Azure DevOps 中创建 SonarQube 服务连接*一节中讨论的内容。在 Azure DevOps 的项目设置中，点击`Jenkins`并点击**下一步**：
- en: '![Figure 6.17 – The New service connection dialogue](img/B18875_06_17.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.17 – 新建服务连接对话框](img/B18875_06_17.jpg)'
- en: Figure 6.17 – The New service connection dialogue
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17 – 新建服务连接对话框
- en: 'Provide the **Server URL**, **Username**, **Password**, and **Service connection
    name** details. Don’t forget to check the **Grant access permission to all pipelines**
    box if needed. Finally, click the **Verify and save** button to proceed:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 提供**服务器 URL**、**用户名**、**密码**和**服务连接名称**的详细信息。如果需要，请不要忘记勾选**授予所有管道访问权限**框。最后，点击**验证并保存**按钮以继续：
- en: '![Figure 6.18 – The New Jenkins service connection dialog](img/B18875_06_18.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.18 – 新建 Jenkins 服务连接对话框](img/B18875_06_18.jpg)'
- en: Figure 6.18 – The New Jenkins service connection dialog
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18 – 新建 Jenkins 服务连接对话框
- en: Now, we can proceed to create a pipeline that will use the artifact.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续创建一个使用工件的管道。
- en: Creating a release pipeline to use Jenkins artifacts
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个用于 Jenkins 工件的发布管道
- en: 'Now, it is time to configure a release pipeline. You can follow these steps:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候配置发布管道了。你可以按照以下步骤进行：
- en: 'Navigate to **Project** | **Pipelines** | **Releases** and click **New release
    pipeline**. You will have the option to select a template, as shown in the following
    screenshot. We will start with an **empty job**:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**项目** | **管道** | **发布**，然后点击**新建发布管道**。你将有机会选择一个模板，如下图所示。我们将从**空作业**开始：
- en: '![Figure 6.19 – Selecting a template for a release pipeline](img/B18875_06_19.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – 选择发布管道模板](img/B18875_06_19.jpg)'
- en: Figure 6.19 – Selecting a template for a release pipeline
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19 – 选择发布管道的模板
- en: 'By clicking on the **Add an artifact** widget and then the **Jenkins** option,
    you will be able to use the previously created service connection to pick the
    project in Jenkins from where you will use artifacts. Just pick the service connection
    that matches the name you created in the previous step and then the corresponding
    **Source (****job)** option:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加工件**小部件，然后选择**Jenkins**选项，你将能够使用之前创建的服务连接，选择在 Jenkins 中的项目，以便使用工件。只需选择与之前步骤中创建的名称匹配的服务连接，然后选择相应的**源（**作业**）**选项：
- en: '![Figure 6.20 – Adding a Jenkins artifact to a release pipeline](img/B18875_06_20.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – 将 Jenkins 工件添加到发布管道](img/B18875_06_20.jpg)'
- en: Figure 6.20 – Adding a Jenkins artifact to a release pipeline
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – 将 Jenkins 工件添加到发布管道
- en: You have the option to change the **Source alias** detail, which will be used
    as the directory where you can download artifacts once the pipeline executes.
    This is important when you have multiple artifacts from potentially different
    sources, to avoid any files from being overwritten when the pipeline executes.
    In this case, the default value will work.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以选择更改**源别名**详细信息，这将作为管道执行后下载工件的目录。当你有多个来自不同来源的工件时，这一点非常重要，可以避免在管道执行时文件被覆盖。在这种情况下，默认值将有效。
- en: 'Once we’ve done this, we can add steps to the **Deploy** stage to verify and
    even print out the content of the artifact. Clicking on the **1 job, 0 task**
    option in the **Deploy** stage will allow us to customize the pipeline. For this
    scenario, we will use a Linux agent. Clicking on the **Agent job** option, as
    shown in the following screenshot, gives us access to the **Agent selection**
    section. Now, we can select **Azure Pipelines** from the **Agent pool** dropdown
    and **ubuntu latest** from the **Agent Specification** dropdown within the **Agent**
    **selection** section:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，我们可以向**部署**阶段添加步骤，验证甚至打印出工件的内容。点击**部署**阶段中的**1 个作业，0 个任务**选项，将允许我们自定义管道。在此场景中，我们将使用
    Linux 代理。点击**代理作业**选项，如下图所示，将使我们进入**代理选择**部分。现在，我们可以从**代理池**下拉菜单中选择**Azure Pipelines**，并从**代理规格**下拉菜单中选择**ubuntu
    latest**：
- en: '![Figure 6.21 – Selecting an agent in the Deploy stage](img/B18875_06_21.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.21 – 在部署阶段选择代理](img/B18875_06_21.jpg)'
- en: Figure 6.21 – Selecting an agent in the Deploy stage
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – 在部署阶段选择代理
- en: 'Once you’ve done this, click on the **+** button on the right-hand side of
    the **Agent Job** section to look up the **Command line** task to add it. This
    task can execute a custom script in the agent and will switch to the appropriate
    underlying process, depending on the operating system:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，点击**Agent Job**部分右侧的**+**按钮，查找并添加**命令行**任务。此任务可以在代理中执行自定义脚本，并会根据操作系统切换到适当的底层进程：
- en: '![Figure 6.22 – The command-line task to list the contents of the artifact](img/B18875_06_22.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.22 – 用于列出工件内容的命令行任务](img/B18875_06_22.jpg)'
- en: Figure 6.22 – The command-line task to list the contents of the artifact
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – 用于列出工件内容的命令行任务
- en: 'Let’s look at the script we used to show the contents:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下我们用来显示内容的脚本：
- en: '[PRE4]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This script will do the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将执行以下操作：
- en: List the contents of the current directory, which should be where the agent
    is running the current pipeline
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出当前目录的内容，这里应该是代理运行当前管道的地方
- en: Move into the directory where the Jenkins artifacts were downloaded
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入 Jenkins 构件下载的目录
- en: List the contents of the current directory, which should be where the Jenkins
    artifacts were downloaded
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出当前目录的内容，这里应该是 Jenkins 构件被下载到的地方
- en: Print a label indicating the contents of the file that will be displayed
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印出一个标签，表示将要显示的文件内容
- en: Print the contents of the `artifact.txt` file
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印 `artifact.txt` 文件的内容
- en: 'Once you’ve saved the pipeline and created a release to execute it, you should
    be able to see that it effectively downloads the artifacts from Jenkins and lists
    the contents of the file, as shown in the following figure:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你保存了管道并创建了一个发布来执行它，你应该能够看到它有效地从 Jenkins 下载了构件并列出了文件的内容，如下图所示：
- en: '![Figure 6.23 – The logs of the pipeline downloading Jenkins artifacts](img/B18875_06_23.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.23 – 管道下载 Jenkins 构件的日志](img/B18875_06_23.jpg)'
- en: Figure 6.23 – The logs of the pipeline downloading Jenkins artifacts
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – 管道下载 Jenkins 构件的日志
- en: Important note
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The **Azure Pipelines** option in the **Agent selection** section provides access
    to Microsoft-hosted agents. These are managed by the Azure DevOps platform without
    you needing to manage the underlying infrastructure. Several operating systems
    are supported and different versions also include different tools already installed
    in them to facilitate building and deploying applications. You also have the option
    to purchase parallel jobs capacity so that you can run multiple jobs at the same
    time. If needed, you can also install any required software in these agents during
    the pipeline’s execution. Just remember that these will increase the execution
    time.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Pipelines** 选项在 **代理选择** 部分提供了访问 Microsoft 托管代理的功能。这些代理由 Azure DevOps
    平台管理，无需你管理底层基础设施。支持多个操作系统，不同版本的代理中也已安装不同的工具，以便于构建和部署应用程序。你还可以选择购买并行作业容量，以便同时运行多个作业。如果需要，你也可以在管道执行过程中安装这些代理所需的任何软件。只要记住，这些将增加执行时间。'
- en: With that, we’ve completed this chapter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经完成了本章内容。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the extensibility model of Azure DevOps and
    how the marketplace of extensions makes it extremely easy to find additional features
    to include in your build and release pipelines with ease. This will speed up your
    ability to create build and release pipelines and integrate them with other tools.
    We also learned how to increase the quality of our applications by integrating
    automated tests and security scans to alert developers in case something breaks
    or introduces a vulnerability, which will reduce the amount of time needed to
    find bugs, fix them, and reduce security risks before you deploy your applications
    to the final production environments. Then, we learned how to integrate Azure
    Pipelines to download artifacts from another CI/CD tool and use it for deployment,
    which can be useful in hybrid setups where not all teams are using the same CI/CD
    tools. Finally, we learned about the flexibility of the Microsoft-hosted agents
    that are available in Azure Pipelines. This allows you to implement your CI/CD
    needs without having to manage the infrastructure.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Azure DevOps 的扩展性模型，以及扩展市场如何使我们轻松找到可以轻松集成到构建和发布管道中的额外功能。这将加速你创建构建和发布管道的能力，并将它们与其他工具集成。我们还学习了如何通过集成自动化测试和安全扫描来提高应用程序的质量，及时提醒开发人员在出现故障或漏洞时，从而减少寻找
    bug、修复它们和减少安全风险所需的时间，在将应用程序部署到最终生产环境之前。然后，我们学习了如何集成 Azure Pipelines，从另一个 CI/CD
    工具下载构件并用于部署，这在不同团队使用不同 CI/CD 工具的混合环境中非常有用。最后，我们了解了 Azure Pipelines 中可用的 Microsoft
    托管代理的灵活性，这使得你能够实现你的 CI/CD 需求，而无需管理底层基础设施。
- en: In the next chapter, we will learn about monitoring Azure DevOps Pipelines,
    an important task that will ensure everything is working correctly and that if
    things go wrong, we get the visibility needed to fix them promptly.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何监控 Azure DevOps Pipelines，这是一个确保一切正常工作的重要任务，如果出现问题，我们能够获得所需的可见性，及时修复问题。
