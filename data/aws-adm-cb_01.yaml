- en: AWS Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 基础知识
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Infrastructure as Code
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: AWS CloudFormation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CloudFormation
- en: The AWS command-line tool
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 命令行工具
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '**Amazon Web Services** (**AWS**) is a public cloud provider. It provides infrastructure
    and platform services at a pay-per-use rate. This means you get on-demand access
    to resources that you used to have to buy outright. You can get access to enterprise-grade
    services while only paying for what you need, usually down to the hour.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）是一个公共云服务提供商。它提供按需付费的基础设施和平台服务。这意味着您可以按需访问曾经需要一次性购买的资源。您可以访问企业级服务，同时只为您所需的部分付费，通常按小时计费。'
- en: AWS prides itself on providing the primitives to developers so that they can
    build and scale the solutions that they require.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 以提供开发者所需的基础组件为荣，使他们能够构建和扩展所需的解决方案。
- en: Creating an account
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建账户
- en: In order to follow along with the recipes, you will need an AWS account. Create
    an account at [https://aws.amazon.com/](https://aws.amazon.com/) by clicking on
    the Sign Up button and entering your details.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟上教程，您需要一个 AWS 账户。请访问[https://aws.amazon.com/](https://aws.amazon.com/)点击注册按钮并输入您的信息，创建账户。
- en: Even though we will be taking advantage of the f*ree tier* wherever possible,
    you will need a valid credit card to complete the signup process. Go to [https://aws.amazon.com/free/](https://aws.amazon.com/free/)
    for more information. Note that the free tier only applies for the first year
    of your account's lifetime.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们会尽可能利用免费套餐，但您仍然需要一张有效的信用卡来完成注册过程。请访问[https://aws.amazon.com/free/](https://aws.amazon.com/free/)了解更多信息。请注意，免费套餐仅适用于账户生命周期的第一年。
- en: Regions and Availability Zones
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域和可用区
- en: A fundamental concept of AWS is that its services and the solutions built on
    top of them are *architected for failure*. This means that a failure of the underlying
    resources is a scenario actively planned for, rather than avoided until it cannot
    be ignored.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 的一个基本概念是，其服务及基于这些服务构建的解决方案是 *为故障而设计的*。这意味着，底层资源的故障是一个积极规划的场景，而不是等到无法忽视时才去避免。
- en: Due to this, all the services and resources available are divided up in to geographically
    diverse **Regions**. Using specific regions means you can provide services to
    your users that are optimized for speed and performance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有可用的服务和资源都被划分到地理上分散的 **区域** 中。使用特定区域意味着您可以为用户提供速度和性能优化的服务。
- en: Within a region, there are always multiple **Availability Zones** (a.k.a. **AZ**).
    Each AZ represents a geographically distinct—but still close—physical data center.
    AZs have their own facilities and power source, so an event that might take a
    single AZ offline is unlikely to affect the other AZs in the region.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个区域内，总是有多个 **可用区**（又称 **AZ**）。每个 AZ 代表一个地理上独立—但仍然接近—的物理数据中心。AZ 拥有自己的设施和电源，因此，可能导致单个
    AZ 离线的事件不太可能影响该区域的其他 AZ。
- en: The smaller regions have at least two AZs, and the largest has five.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 较小的区域至少有两个 AZ，而最大的区域有五个。
- en: 'At the time of writing, the following regions are active:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，以下区域是活跃的：
- en: '| Code | Name | Availability Zones |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | 名称 | 可用区 |'
- en: '| `us-east-1` | N. Virginia | 5 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `us-east-1` | 北弗吉尼亚 | 5 |'
- en: '| `us-east-2` | Ohio | 3 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `us-east-2` | 俄亥俄州 | 3 |'
- en: '| `us-west-1` | N. California | 3 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `us-west-1` | 北加利福尼亚州 | 3 |'
- en: '| `us-west-2` | Oregon | 3 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `us-west-2` | 俄勒冈州 | 3 |'
- en: '| `ca-central-1` | Canada | 2 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `ca-central-1` | 加拿大 | 2 |'
- en: '| `eu-west-1` | Ireland | 3 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `eu-west-1` | 爱尔兰 | 3 |'
- en: '| `eu-west-2` | London | 2 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `eu-west-2` | 伦敦 | 2 |'
- en: '| `eu-central-1` | Frankfurt | 2 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `eu-central-1` | 法兰克福 | 2 |'
- en: '| `ap-northeast-1` | Tokyo | 3 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `ap-northeast-1` | 东京 | 3 |'
- en: '| `ap-northeast-2` | Seoul | 2 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `ap-northeast-2` | 首尔 | 2 |'
- en: '| `ap-southeast-1` | Singapore | 2 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `ap-southeast-1` | 新加坡 | 2 |'
- en: '| `ap-southeast-2` | Sydney | 3 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `ap-southeast-2` | 悉尼 | 3 |'
- en: '| `ap-south-1` | Mumbai | 2 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `ap-south-1` | 孟买 | 2 |'
- en: '| `sa-east-1` | Sao Paulo | 3 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `sa-east-1` | 圣保罗 | 3 |'
- en: The AWS web console
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 网页控制台
- en: The web-based console is the first thing you will see after creating your AWS
    account, and you will often refer to it when viewing and confirming your configuration.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 AWS 账户后，您首先会看到的是基于网页的控制台，并且在查看和确认您的配置时，您将经常使用它。
- en: '![](img/B06326_01_01.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06326_01_01.png)'
- en: The AWS web console
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 网页控制台
- en: The console provides an overview of all the services available as well as associated
    billing and cost information. Each service has its own section, and the information
    displayed depends on the service being viewed. As new features and services are
    released, the console will change and improve. Don't be surprised if you log in
    and things have changed from one day to the next.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台提供了所有可用服务的概览，以及相关的计费和费用信息。每个服务都有自己的部分，显示的信息取决于查看的服务。随着新特性和服务的发布，控制台会不断变化和改进。如果你登录时发现界面有所变化，不必惊讶。
- en: Keep in mind that the console always shows your resources *by region*. If you
    cannot see a resource that you created, make sure you have the right region selected.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，控制台始终按 *区域* 显示你的资源。如果你看不到已创建的资源，请确保已选择正确的区域。
- en: Choose the region closest to your physical location for the fastest response
    times. Note that not all regions have the same services available. The larger,
    older regions generally have the most services available. Some of the newer or
    smaller regions (that might be closest to you) might not have all services enabled
    yet. While services are continually being released to regions, you may have to
    use another region if you simply must use a newer service.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 选择距离你物理位置最近的区域，以获得最快的响应时间。请注意，并非所有区域都有相同的服务可用。较大的老旧区域通常有最多的服务可用。某些较新的或较小的区域（可能离你较近）可能还没有启用所有服务。虽然服务会持续发布到各个区域，但如果你必须使用新服务，可能需要选择其他区域。
- en: The `us-east-1` (a.k.a. North Virginia) region is special given its status as
    the first region. All services are available there, and new services are *always*
    released there.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`us-east-1`（即北弗吉尼亚）区域是特殊的，因为它是第一个区域。所有服务都可以在那里使用，新的服务 *总是* 首先发布在那里。'
- en: As you get more advanced with your use of AWS, you will spend less time in the
    console and more time controlling your services programmatically via the AWS CLI
    tool and CloudFormation, which we will go into in more detail in the next few
    topics.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你对 AWS 使用的熟练度提高，你将在控制台上花费的时间会减少，而更多地通过 AWS CLI 工具和 CloudFormation 以编程方式控制服务，接下来我们将更详细地讨论这些内容。
- en: CloudFormation templates
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudFormation 模板
- en: Where possible, we have based the recipes around a CloudFormation template.
    CloudFormation is the *Infrastructure as Code* service from AWS.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，我们已经将食谱（recipe）基于 CloudFormation 模板。CloudFormation 是 AWS 提供的 *基础设施即代码*
    服务。
- en: Where CloudFormation was not applicable, we have used the AWS CLI to make the
    process repeatable and automatable.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CloudFormation 不适用的情况下，我们使用了 AWS CLI 来使流程具备可重复性和自动化能力。
- en: Since the recipes are based on CloudFormation templates, you can easily combine
    different templates to achieve your desired outcomes. By editing the templates
    or joining them, you can create more useful and customized configurations with
    minimal effort.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于食谱基于 CloudFormation 模板，你可以轻松地将不同的模板结合起来，实现你想要的结果。通过编辑模板或将它们结合在一起，你可以以最小的努力创建更有用和定制化的配置。
- en: Infrastructure as Code
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: '**Infrastructure as Code** (**IaC**) is the practice of managing infrastructure
    though code definitions.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即代码** (**IaC**) 是通过代码定义来管理基础设施的做法。'
- en: 'On an **Infrastructure-as-a-Service** (**IaaS**) platform such as AWS, IaC
    is needed to get the most utility and value. IaC differs primarily from traditional
    *interactive* methods of managing infrastructure because it is machine processable.
    This enables a number of benefits:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **基础设施即服务** (**IaaS**) 平台上，例如 AWS，需要使用 IaC 才能最大化效用和价值。IaC 与传统的 *交互式* 基础设施管理方法的主要区别在于，它是机器可处理的。这带来了诸多好处：
- en: Improved visibility of resources
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的资源可见性
- en: Higher levels of consistency between deployments and environments
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署和环境之间更高的一致性
- en: Easier troubleshooting of issues
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易的故障排除
- en: The ability to scale more with less effort
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够以更少的努力实现更大的扩展性
- en: Better control over costs
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的成本控制
- en: 'On a less tangible level, all of these factors contribute to other improvements
    for your developers: you can now leverage tried-and-tested software development
    practices for your infrastructure and enable DevOps practices in your teams.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在更为抽象的层面，所有这些因素也为你的开发人员带来了其他改进：你现在可以利用经过验证的软件开发实践来管理基础设施，并在团队中实现 DevOps 实践。
- en: Visibility
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可见性
- en: 'As your infrastructure is represented in machine-readable files, you can treat
    it like you do your application code. You can take the best-practice approaches
    to software development and apply them to your infrastructure. This means you
    can store it in version control (for example, Git and SVN) just like you do your
    code, along with the benefits that it brings:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你的基础设施以机器可读的文件形式表示，你可以像对待应用程序代码一样对待它。你可以采用软件开发的最佳实践，并将其应用到你的基础设施中。这意味着你可以像管理代码一样将其存储在版本控制中（例如，Git和SVN），并享受它所带来的好处：
- en: All changes to infrastructure are recorded in commit history
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有对基础设施的更改都会记录在提交历史中
- en: You can review changes before accepting/merging them
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在接受/合并之前审查变更
- en: You can easily compare different configurations
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以轻松比较不同的配置
- en: You can pick and use specific point-in-time configurations
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以选择并使用特定时间点的配置
- en: Consistency
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一致性
- en: Consistent configuration across your environments (for example, dev, test, and
    prod) means that you can more confidently deploy your infrastructure. When you
    know what configuration is in use, you can easily test changes in other environments
    due to a common baseline.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在各个环境（例如开发、测试和生产环境）中保持一致的配置意味着你可以更加自信地部署基础设施。当你知道正在使用的配置时，由于有一个共同的基准，你可以轻松地在其他环境中测试变更。
- en: IaC is not the same as *just writing scripts* for your infrastructure. Most
    tools and services will leverage higher-order languages and DSLs to allow you
    to focus on your higher-level requirements. It enables you to use advanced software
    development techniques, such as static analysis, automated testing, and optimization.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: IaC不同于*仅仅编写基础设施脚本*。大多数工具和服务将利用高级语言和领域特定语言（DSL），使你能够专注于更高层次的需求。它使你能够使用先进的软件开发技术，如静态分析、自动化测试和优化。
- en: Troubleshooting
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'IaC makes replicating and troubleshooting issues easier: since you can duplicate
    your environments, you can accurately reproduce your production environment for
    testing purposes.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: IaC使得复制和故障排除变得更加容易：因为你可以复制你的环境，所以可以准确地重现你的生产环境进行测试。
- en: In the past, test environments rarely had exactly the same infrastructure due
    to the prohibitive cost of hardware. Now that it can be created and destroyed
    on demand, you are able to duplicate your environments only when they are needed.
    You only need to pay for the time that they are running for, usually down to the
    hour. Once you have finished testing, simply turn your environments off and stop
    paying for them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，由于硬件成本过高，测试环境很少有完全相同的基础设施。现在，由于可以按需创建和销毁，你能够仅在需要时复制环境。你只需要为它们运行的时间付费，通常按小时计算。测试完成后，只需关闭环境并停止支付费用。
- en: Even better than troubleshooting is fixing issues before they cause errors.
    As you refine your IaC in multiple environments, you will gain confidence that
    is difficult to obtain without it. By the time you deploy your infrastructure
    in to production, you have done it multiple times already.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 比故障排除更好的是在问题导致错误之前就修复它们。当你在多个环境中完善你的基础设施即代码（IaC）时，你将获得一种没有它很难获得的自信。在将你的基础设施部署到生产环境时，你已经做过多次了。
- en: Scale
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展性
- en: 'Configuring infrastructure by hand can be a tedious and error-prone process.
    By automating it, you remove the potential variability of a manual implementation:
    computers are good at boring, repetitive tasks, so use them for it!'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 手动配置基础设施可能是一个繁琐且容易出错的过程。通过自动化，你消除了手动实现的潜在可变性：计算机擅长无聊的重复任务，所以把这些任务交给它们做吧！
- en: Once automated, the labor cost of provisioning more resources is effectively
    zero—you have already done the work. Whether you need to spin up one server or
    a thousand, it requires no additional work.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦自动化，提供更多资源的劳动成本几乎为零——你已经完成了这项工作。无论你是需要启动一台服务器还是一千台，它都不需要额外的工作。
- en: From a practical perspective, resources in AWS are effectively unconstrained.
    If you are willing to pay for it, AWS will let you use it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从实际角度来看，AWS中的资源几乎没有限制。如果你愿意为此付费，AWS会让你使用它。
- en: Costs
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成本
- en: AWS have a vested (commercial) interest in making it as easy as possible for
    you to provision infrastructure. The benefit to you as the customer is that you
    can create *and destroy* these resources on demand.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: AWS有着强烈的（商业）利益，希望你能够尽可能容易地提供基础设施。作为客户，你的好处是你可以根据需求*创建和销毁*这些资源。
- en: Obviously, destroying infrastructure on-demand in a traditional, physical hardware
    environment is simply not possible. You would be hard-pressed to find a data center
    that will allow you to stop paying for servers and space simply because you are
    not currently using them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，在传统的物理硬件环境中按需销毁基础设施是不可能的。你几乎无法找到一个数据中心，允许你仅仅因为当前没有使用服务器和空间，就停止为它们付费。
- en: Another use case where on-demand infrastructure can make large cost savings
    is your development environment. It only makes sense to have a development environment
    while you have developers to use it. When your developers go home at the end of
    the day, you can switch off your development environments so that you no longer
    pay for them. Before your developers come in in the morning, simply schedule their
    environments to be created.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个按需基础设施能够大幅节省成本的使用场景是你的开发环境。只有在有开发人员使用它时，开发环境才有意义。当开发人员下班回家时，你可以关闭开发环境，这样就不需要为其付费了。在开发人员早上来之前，简单地安排他们的环境进行创建。
- en: DevOps
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps
- en: DevOps and IaC go hand in hand. The practice of storing your infrastructure
    (traditionally the concern of Operations) as code (traditionally the concern of
    Development) encourages a sharing of responsibilities that facilitates collaboration.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps和IaC是密切相关的。将你的基础设施（传统上是运营的关注点）作为代码（传统上是开发的关注点）进行存储的做法，促使了责任的共享，从而促进了协作。
- en: '![](img/B06326_01_02.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06326_01_02.png)'
- en: 'Image courtesy: Wikipedia'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：维基百科
- en: By automating the **PACKAGE**, **RELEASE**, and **CONFIGURE** activities in
    the software development life cycle (as pictured), you increase the speed of your
    releases while also increasing confidence.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自动化软件开发生命周期中的**PACKAGE**、**RELEASE**和**CONFIGURE**活动（如图所示），你可以提高发布速度，同时增加信心。
- en: 'Cloud-based IaC encourages *architecture for failure*: as your resources are
    virtualized, you must plan for the chance of physical (host) hardware failure,
    however unlikely.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 基于云的IaC鼓励*为故障做架构设计*：因为你的资源是虚拟化的，所以必须为物理（主机）硬件故障的可能性做计划，尽管这种情况不太可能发生。
- en: Being able to recreate your entire environment in minutes is the ultimate recovery
    solution.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在几分钟内重建整个环境是终极的恢复解决方案。
- en: Unlike physical hardware, you can easily simulate and test failure in your software
    architecture by deleting key components—they are all virtual anyway!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与物理硬件不同，你可以通过删除关键组件来轻松模拟和测试软件架构中的故障——反正它们都是虚拟的！
- en: Server configuration
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器配置
- en: Server-side examples of IaC are configuration-management tools such as Ansible,
    Chef, and Puppet.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端的IaC示例包括配置管理工具，如Ansible、Chef和Puppet。
- en: While important, these configuration-management tools are not specific to AWS,
    so we will not be covering them in detail here. There are a myriad of books and
    courses devoted to this topic if you need to know more.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然重要，这些配置管理工具并非AWS特有，因此我们在此不会详细介绍。如果你需要了解更多，市面上有无数书籍和课程专门讲解此话题。
- en: IaC on AWS
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS上的IaC
- en: CloudFormation is the IaC service from AWS.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation是AWS的IaC服务。
- en: Templates written in a specific format and language define the AWS resources
    that should be provisioned. CloudFormation is declarative and cannot only provision
    resources, but also update them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特定格式和语言编写的模板定义了应当配置的AWS资源。CloudFormation是声明式的，不仅可以配置资源，还可以更新它们。
- en: We will go into CloudFormation in greater detail in the next topic.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一个主题中详细介绍CloudFormation。
- en: CloudFormation
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudFormation
- en: We'll use CloudFormation extensively throughout this book, so it's important
    that you have an understanding of what it is and how it fits in to the AWS ecosystem.
    There should easily be enough information here to get you started, but where necessary,
    we'll refer you to AWS' own documentation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我们将广泛使用CloudFormation，因此理解它是什么以及它如何融入AWS生态系统非常重要。这里的信息应该足以帮助你入门，但在必要时，我们会参考AWS的官方文档。
- en: What is CloudFormation?
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是CloudFormation？
- en: The **CloudFormation** service allows you to provision and manage a collection
    of AWS resources in an automated and repeatable fashion. In AWS terminology, these
    collections are referred to as **stacks**. Note however that a stack can be as
    large or as small as you like. It might consist of a single S3 bucket, or it might
    contain everything needed to host your three-tier web app.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**CloudFormation** 服务允许你以自动化和可重复的方式配置和管理一组AWS资源。在AWS术语中，这些资源集合被称为**堆栈**。不过请注意，堆栈的大小可以根据需要调整。它可以由一个单一的S3桶组成，也可以包含托管你三层Web应用所需的一切。'
- en: In this chapter, we'll show you how to define the resources to be included in
    your CloudFormation stack. We'll talk a bit more about the composition of these
    stacks and why and when it's preferable to divvy up resources between a number
    of stacks. Finally, we'll share a few of the tips and tricks we've learned over
    years of building countless CloudFormation stacks.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向你展示如何定义要包含在 CloudFormation 堆栈中的资源。我们会进一步讨论这些堆栈的组成，以及何时和为何更倾向于将资源分配到多个堆栈中。最后，我们将分享一些在构建无数
    CloudFormation 堆栈过程中学到的小技巧。
- en: Be warned!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意！  '
- en: Pretty much everyone incurs at least one or two flesh wounds along their journey
    with CloudFormation. It is all very much worth it, though.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '几乎每个人在使用 CloudFormation 的过程中都会遇到至少一两个小问题。不过，这一切都是值得的。  '
- en: Why is CloudFormation important?
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '为什么 CloudFormation 很重要？  '
- en: By now, the benefits of automation should be starting to become apparent to
    you. But don't fall in to the trap of thinking CloudFormation will be useful only
    for large collections of resources. Even performing the simplest task of, say,
    creating an S3 bucket can get very repetitive if you need to do it in every region.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '到现在为止，自动化的好处应该已经开始显现给你看了。但不要陷入误区，认为 CloudFormation 只对大规模资源集合有用。即使是执行最简单的任务，比如创建一个
    S3 桶，如果你需要在每个区域都做一遍，也会变得非常重复。  '
- en: We work with a lot of customers who have very tight controls and governance
    around their infrastructure, and especially in the network layer (think VPCs,
    NACLs, and security groups). Being able to express one's cloud footprint in YAML
    (or JSON), store it in a source code repository, and funnel it through a high-visibility
    pipeline gives these customers confidence that their infrastructure changes are
    peer-reviewed and will work as expected in production. Discipline and commitment
    to IaC SDLC practices are of course a big factor in this, but CloudFormation helps
    bring us out of the era of following 20-page run-sheets for manual changes, navigating
    untracked or unexplained configuration drift, and unexpected downtime caused by
    fat fingers.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '我们与很多客户合作，这些客户在其基础设施方面有非常严格的控制和治理，尤其是在网络层面（例如 VPC、NACL 和安全组）。能够使用 YAML（或 JSON）表达一个人的云足迹，将其存储在源代码仓库中，并通过高可见性的流水线进行处理，能让这些客户确信他们的基础设施更改已经经过同行评审，并且会在生产环境中按预期工作。当然，遵循
    IaC SDLC 实践的纪律性和承诺在其中起着重要作用，但 CloudFormation 帮助我们摆脱了依赖 20 页手动变更清单、应对未追踪或未解释的配置漂移，以及避免因操作失误导致的意外停机的时代。  '
- en: The layer cake
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '层蛋糕  '
- en: Now is a good time to start thinking about your AWS deployments in terms of
    layers. Your layers will sit atop one another, and you will have well-defined
    relationships between them.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '现在是开始从层次的角度思考你的 AWS 部署的好时机。你的各个层次将会相互叠加，你将会在它们之间定义清晰的关系。  '
- en: 'Here''s a bottom-up example of how your layer cake might look:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '这是一个自下而上的示例，展示了你的层蛋糕可能的样子：  '
- en: VPC with CloudTrail
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VPC 与 CloudTrail  '
- en: Subnets, routes, and NACLs
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '子网、路由和 NACL  '
- en: NAT gateways, VPN or bastion hosts, and associated security groups
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NAT 网关、VPN 或堡垒主机及相关安全组  '
- en: 'App stack 1: security groups, S3 buckets'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '应用堆栈 1：安全组，S3 桶  '
- en: 'App stack 1: cross-zone RDS and read replica'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '应用堆栈 1：跨可用区的 RDS 和只读副本  '
- en: 'App stack 1: app and web server auto scaling groups and ELBs'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '应用堆栈 1：应用程序和 Web 服务器自动扩展组以及 ELB  '
- en: 'App stack 1: CloudFront and WAF config'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '应用堆栈 1：CloudFront 和 WAF 配置  '
- en: In this example, you may have many occurrences of the app stack layers inside
    your VPC, assuming you have enough IP addresses in your subnets! This is often
    the case with VPCs living inside development environments. So immediately, you
    have the benefit of multi-tenancy capability with application isolation.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个示例中，你的 VPC 中可能会有许多应用堆栈层，前提是你的子网中有足够的 IP 地址！这通常出现在开发环境中的 VPC。因此，你可以立即享受到多租户能力与应用隔离的好处。  '
- en: One advantage of this approach is that while you are developing your CloudFormation
    template, if you mess up the configuration of your app server, you don't have
    to wind back all the work CFN did on your behalf. You can just turf that particular
    layer (and the layers that depend on it) and restart from there. This is not the
    case if you have everything contained in a single template.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '这种方法的一个优势是，在你开发 CloudFormation 模板时，如果你弄错了应用服务器的配置，你不需要回滚 CFN 为你完成的所有工作。你可以直接删除该特定层（以及依赖它的层），然后从那里重新开始。如果你将所有内容包含在一个单一的模板中，就不可能做到这一点。  '
- en: 'We commonly work with customers for whom ownership and management of each layer
    in the cake reflects the structure of the technology divisions within a company.
    The traditional infrastructure, network, and cyber security folk are often really
    interested in creating a safe place for digital teams to deploy their apps, so
    they like to heavily govern the foundational layers of the cake. **Conway''s Law**,
    coined by Melvin Conway, starts to come in to play here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常与客户合作，其中每一层的所有权和管理反映了公司内技术部门的结构。传统的基础设施、网络和网络安全人员通常对为数字团队创建安全的应用部署环境感兴趣，因此他们喜欢对基础层进行严格的管理。**康威定律**（Conway's
    Law），由梅尔文·康威提出，在这里开始发挥作用：
- en: '"Any organization that designs a system will inevitably produce a design whose
    structure is a copy of the organization''s communication structure."'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: “任何设计系统的组织，最终都会产生一个设计，其结构是该组织沟通结构的复制。”
- en: Finally, even if you are a single-person infrastructure coder working in a small
    team, you will benefit from this approach. For example, you'll find that it dramatically
    reduces your exposure to things such as AWS limits, timeouts, and circular dependencies.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，即使你是一个小团队中的单人基础设施开发人员，你也会从这种方法中受益。例如，你会发现它显著减少了你遇到 AWS 限制、超时和循环依赖的风险。
- en: CloudFormation templates
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudFormation 模板
- en: This is where we start to get our hands dirty. CloudFormation template files
    are the codified representation of your stack, expressed in either YAML or JSON.
    When you wish to create a CloudFormation stack, you push this template file to
    CloudFormation, through its API, web console, command line tools, or some other
    method (such as the SDK).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这时我们开始动手实践。CloudFormation 模板文件是你堆栈的编程表示，通常以 YAML 或 JSON 形式表达。当你希望创建 CloudFormation
    堆栈时，你将这个模板文件通过 API、Web 控制台、命令行工具或其他方法（例如 SDK）推送到 CloudFormation。
- en: Templates can be replayed over and over again by CloudFormation, creating many
    instances of your stack.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 模板可以被 CloudFormation 一次又一次地重放，创建多个堆栈实例。
- en: YAML versus JSON
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YAML 与 JSON
- en: 'Up until recently, JSON was your only option. We''ll actually encourage you
    to adopt YAML, and we''ll be using it for all of the examples shown in this book.
    Some of the reasons are as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，JSON 是唯一的选择。我们实际上鼓励你采用 YAML，并且我们将在本书中使用它作为所有示例。以下是其中一些原因：
- en: It's just nicer to look at. It's less syntax heavy, and should you choose to
    go down the path of generating your CloudFormation templates, pretty much every
    language has a YAML library of some kind.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它看起来更美观。语法更简洁，如果你选择生成 CloudFormation 模板，几乎每种编程语言都有某种形式的 YAML 库。
- en: The size of your templates will be much smaller. This is more practical from
    a developer's point of view, but it also means you're less likely to run into
    the CloudFormation size limit on template files (50 KB).
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的模板大小将会更小。这从开发人员的角度来看更实用，同时也意味着你更不容易遇到 CloudFormation 模板文件大小限制（50 KB）。
- en: The string-substitution features are easier to use and interpret.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串替换功能更易于使用和解释。
- en: Your EC2 `UserData` (the script that runs when your EC2 instance boots) will
    be much easier to implement and maintain.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的 EC2 `UserData`（当 EC2 实例启动时运行的脚本）将更容易实现和维护。
- en: A closer look at CloudFormation templates
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步了解 CloudFormation 模板
- en: 'CloudFormation templates consist of a number of parts, but these are the four
    we''re going to concentrate on:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 模板由多个部分组成，但我们将重点关注以下四个部分：
- en: Parameters
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数
- en: Resources
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源
- en: Outputs
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出
- en: Mappings
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射
- en: 'Here''s a short YAML example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简短的 YAML 示例：
- en: '[PRE0]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数
- en: 'CloudFormation parameters are the input values you define when creating or
    updating your stack, similar to how you provide parameters to any command-line
    tools you might use. They allow you to customize your stack without making changes
    to your template. Common examples of what parameters might be used for are as
    follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 参数是你在创建或更新堆栈时定义的输入值，类似于你向任何命令行工具提供参数的方式。它们允许你在不修改模板的情况下自定义堆栈。参数可能用于的常见示例如下：
- en: '**EC2 AMI ID**: You may wish to redeploy your stack with a new AMI that has
    the latest security patches installed.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EC2 AMI ID**：你可能希望使用安装了最新安全补丁的新 AMI 重新部署堆栈。'
- en: '**Subnet IDs**: You could have a list of subnets that an auto scaling group
    should deploy servers in. These subnet IDs will be different between your dev,
    test, and production environments.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子网ID**：你可能有一个自动伸缩组需要在其中部署服务器的子网列表。这些子网ID在开发、测试和生产环境中会有所不同。'
- en: '**Endpoint targets and credentials**: These include things such as API hostnames,
    usernames, and passwords.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端点目标和凭证**：这些包括API主机名、用户名和密码等内容。'
- en: 'You''ll find that there are a number of parameter types. In brief, they are:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现有很多种参数类型。简而言之，它们包括：
- en: String
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Number
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: List
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表
- en: CommaDelimitedList
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逗号分隔列表
- en: 'In addition to these, AWS provides some AWS-specific parameter types. These
    can be particularly handy when you are executing your template via the CloudFormation
    web console. For example, a parameter type of `AWS::EC2::AvailabilityZone::Name`
    will cause the web console to display a drop-down list of valid Availability Zones
    for this parameter. In the `ap-southeast-2` region, the list would look like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，AWS还提供了一些AWS特定的参数类型。这些在通过CloudFormation网页控制台执行模板时特别有用。例如，`AWS::EC2::AvailabilityZone::Name`类型的参数会让网页控制台显示一个有效可选可用区的下拉列表。在`ap-southeast-2`区域，列表如下所示：
- en: '`ap-southeast-2a`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ap-southeast-2a`'
- en: '`ap-southeast-2b`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ap-southeast-2b`'
- en: '`ap-southeast-2c`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ap-southeast-2c`'
- en: The list of AWS-specific parameter types is steadily growing and is large enough
    that we can't list them here. We'll use many of them throughout this book, however,
    and they can easily be found in the AWS CloudFormation documentation.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: AWS特定的参数类型列表正在不断增长，已经大到无法在此列举。尽管如此，我们会在本书中多次使用它们，并且它们可以很容易地在AWS CloudFormation文档中找到。
- en: When creating or updating a stack, you will need to provide values for all the
    parameters you've defined in your template. Where it makes sense, you can define
    default values for a parameter. For example, you might have a parameter called
    `debug` that tells your application to run in debug mode. You typically don't
    want this mode enabled by default, so you can set the default value for this parameter
    to `false`, `disabled`, or something else your application understands. Of course,
    this value can be overridden when creating or updating your stack.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建或更新堆栈时，你需要为模板中定义的所有参数提供值。在适当的情况下，你可以为参数定义默认值。例如，你可能有一个名为`debug`的参数，用来指示应用程序以调试模式运行。你通常不希望默认启用此模式，因此可以将此参数的默认值设置为`false`、`disabled`或应用程序理解的其他值。当然，在创建或更新堆栈时，可以覆盖此值。
- en: You can and should provide a short, meaningful description for each parameter.
    These are displayed in the web console next to each parameter field. When used
    properly, they provide hints and context to whoever is trying to run your CloudFormation
    template.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以并且应该为每个参数提供一个简短而有意义的描述。这些描述会在网页控制台的每个参数字段旁边显示。当正确使用时，它们为执行你CloudFormation模板的人提供了提示和上下文。
- en: 'At this point, we need to introduce the inbuilt `Ref` function. When you need
    to reference a parameter value, you use this function to do so:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们需要介绍内置的`Ref`函数。当你需要引用一个参数值时，可以使用这个函数：
- en: '[PRE1]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While `Ref` isn't the only inbuilt function you'll need to know, it's almost
    certainly going to be the one you'll use the most. We'll talk more about inbuilt
    functions later in this chapter.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`Ref`并不是你需要了解的唯一内置函数，但它几乎肯定是你将使用最多的一个。我们将在本章后面详细讨论内置函数。
- en: Resources
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: Resources are your actual pieces of AWS infrastructure. These are your EC2 instances,
    S3 buckets, ELBs, and so on. Almost any resource type you can create by pointing
    and clicking in the AWS web console can also be created using CloudFormation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 资源是你实际的AWS基础设施组件。这些包括EC2实例、S3存储桶、ELB等。几乎你可以通过AWS网页控制台点击和选择创建的任何资源类型，都可以通过CloudFormation来创建。
- en: It's not practical to list all the AWS resource types in this chapter, although
    you will get familiar with the most common types as you work your way through
    the recipes in this book. AWS keeps a definitive list of resources types here
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中列出所有AWS资源类型并不实际，尽管在你完成本书的食谱时，你会熟悉最常见的资源类型。AWS在这里保留了一个资源类型的完整列表
- en: '[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html).'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)'
- en: 'There are a few important things to keep in mind about CloudFormation resources:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 CloudFormation 资源，有一些重要的事项需要记住：
- en: New or bleeding-edge AWS resources are often not immediately supported. CloudFormation
    support typically lags a few weeks (sometimes months) behind the release of new
    AWS features. This used to be quite frustrating for anyone to whom infrastructure
    automation is key. Fast-forward to today, and this situation is somewhat mitigated
    by the ability to use custom resources. These are discussed further on in this
    chapter.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的或领先的 AWS 资源通常不会立即得到支持。CloudFormation 支持通常滞后于新 AWS 功能发布几周（有时几个月）。对于基础设施自动化至关重要的人员来说，过去这是非常令人沮丧的。快进到今天，通过使用自定义资源，这种情况在一定程度上得到了缓解。本章后面将进一步讨论这些内容。
- en: 'Resources have a default return value. You can use `Ref` to fetch these return
    values for use elsewhere in your template. For example, the `AWS::EC2::VPC` resource
    type has a default return value that is the ID of the VPC. They look something
    like this: `vpc-11aa111a`.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源有一个默认的返回值。您可以使用 `Ref` 获取这些返回值，以在模板的其他位置使用。例如，`AWS::EC2::VPC` 资源类型有一个默认返回值，即
    VPC 的 ID。它们看起来像这样：`vpc-11aa111a`。
- en: 'Resources often contain additional return values. These additional values are
    fetched using the inbuilt `Fn::GetAtt` function. Continuing from the previous
    example, the `AWS::EC2::VPC` resource type also returns the following:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源通常包含额外的返回值。使用内置的 `Fn::GetAtt` 函数来获取这些额外的值。继续上一个示例，`AWS::EC2::VPC` 资源类型还返回以下内容：
- en: '`CidrBlock`'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CidrBlock`'
- en: '`DefaultNetworkAcl`'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DefaultNetworkAcl`'
- en: '`DefaultSecurityGroup`'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DefaultSecurityGroup`'
- en: '`Ipv6CidrBlocks`'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ipv6CidrBlocks`'
- en: Outputs
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出
- en: Just like AWS resources, CloudFormation stacks can also have return values,
    called **outputs**. These values are entirely user defined. If you don't specify
    any outputs, then nothing is returned when your stack is completed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 AWS 资源一样，CloudFormation 堆栈也可以有返回值，称为 **outputs**。这些值完全由用户定义。如果您没有指定任何输出，则在堆栈完成时不返回任何内容。
- en: Outputs can come in handy when you are using a CI/CD tool to create your CloudFormation
    stacks. For example, you might like to output the public hostname of an ELB so
    your CI/CD tool can turn it into a clickable link within the job output.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 CI/CD 工具创建 CloudFormation 堆栈时，输出可以非常有用。例如，您可能希望输出 ELB 的公共主机名，以便您的 CI/CD
    工具可以在作业输出中将其转换为可点击的链接。
- en: You'll also use them when your are linking together pieces of your layer cake.
    You may want to reference an S3 bucket or security group created in another stack.
    This is much easier to do with the new cross-stack references feature, which we'll
    discuss later in this chapter. You can expect to see the `Ref` and `Fn::GetAtt`
    functions a lot in the output section of any CloudFormation template.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当您连接层次蛋糕的各个部分时，也会使用它们。您可能希望引用另一个堆栈中创建的 S3 存储桶或安全组。这在新的跨堆栈引用功能中更加容易，我们稍后会在本章讨论。您可以预期在任何
    CloudFormation 模板的输出部分经常看到 `Ref` 和 `Fn::GetAtt` 函数。
- en: Mappings
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射
- en: The mappings section is used to define a set of key/value pairs. If you require
    any kind of AWS region portability, perhaps for DR or availability purposes or
    simply to get your application closer to your end user, you'll almost certainly
    need to specify some mappings in your template. This is particularly necessary
    if you are referencing anything in your template that is region specific.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 映射部分用于定义一组键/值对。如果您需要任何类型的 AWS 区域可移植性，例如用于灾难恢复或可用性目的，或仅仅为了使您的应用程序更接近最终用户，那么几乎肯定需要在模板中指定一些映射。如果您在模板中引用了任何区域特定的内容，则特别需要这样做。
- en: The canonical example would be to specify a map of EC2 AMI IDs in your template.
    This is because AMIs are a region-specific resource, so a reference to a valid
    **Amazon Machine Image** (**AMI**) ID in one region will be invalid in another.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的例子是在模板中指定一组 EC2 AMI ID 的映射。这是因为 AMI 是区域特定的资源，因此在一个区域中对有效 **Amazon Machine
    Image** (**AMI**) ID 的引用在另一个区域中是无效的。
- en: 'Mappings look like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 映射看起来像这样：
- en: '[PRE2]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Dependencies and ordering
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖关系和顺序
- en: When executing your template, CloudFormation will automatically work out which
    resources depend on each other and order their creation accordingly. Additionally,
    resource creation is parallelized as much as possible so that your stack execution
    finishes in the timeliest manner possible. Things occasionally become unstuck,
    however.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行模板时，CloudFormation 将自动确定资源之间的依赖关系，并相应地按顺序创建它们。此外，资源的创建尽可能并行化，以使您的堆栈执行尽快完成。然而，有时会出现问题。
- en: Let's take an example where an app server depends on a DB server. In order to
    connect to the database, the app server needs to know its IP address or hostname.
    This situation would actually require you to create the DB server first so that
    you can use `Ref` to fetch its IP and provide it to your app server. CloudFormation
    has no way of knowing about the coupling between these two resources, so it will
    go ahead and create them in any order it pleases (or in parallel if possible).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 假设应用服务器依赖于数据库服务器。在连接数据库之前，应用服务器需要知道数据库的 IP 地址或主机名。实际上，这种情况需要你先创建数据库服务器，然后使用
    `Ref` 获取其 IP 地址，并将其提供给应用服务器。由于 CloudFormation 并不了解这两个资源之间的耦合关系，因此它会按任意顺序（或者如果可能，则并行）创建这些资源。
- en: To fix this situation, we use the `DependsOn` attribute to tell CloudFormation
    that our app server depends on our DB server. In fact, `DependsOn` can actually
    take a list of strings if a resource happens to depend on multiple resources before
    it can be created. So if our app server were to also depend on, say, a Memcached
    server, then we use `DependsOn` to declare both dependencies.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们使用 `DependsOn` 属性告诉 CloudFormation 应用服务器依赖于数据库服务器。事实上，`DependsOn`
    实际上可以接收一个字符串列表，如果某个资源依赖于多个资源才能创建。例如，如果我们的应用服务器还依赖于一个 Memcached 服务器，那么我们可以使用 `DependsOn`
    来声明这两个依赖关系。
- en: If necessary, you can take this further. Let's say that after your DB server
    boots, it will automatically start the database, set up a schema, and import a
    large amount of data. It may be necessary to wait for this process to complete
    before we create an app server that attempts to connect to a DB expecting a complete
    schema and data set. In this scenario, we want a way to signal to CloudFormation
    that the DB server has completed its initialization so it can go ahead and create
    resources that depend on it. This is where `WaitCondition` and `WaitConditionHandle`
    come in.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以进一步扩展这个过程。假设数据库服务器启动后，它将自动启动数据库、设置模式并导入大量数据。我们可能需要等待此过程完成，然后再创建一个应用服务器，该服务器试图连接到一个期望已完成模式和数据集的数据库。在这种情况下，我们希望有一种方法向
    CloudFormation 发出信号，表示数据库服务器已完成初始化，以便它可以继续创建依赖于它的资源。这就是 `WaitCondition` 和 `WaitConditionHandle`
    的作用。
- en: Firstly, you create an `AWS::CloudFormation::WaitConditionHandle` type, which
    you can later reference via `Ref`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你创建一个 `AWS::CloudFormation::WaitConditionHandle` 类型，之后你可以通过 `Ref` 来引用它。
- en: Next, you create an `AWS::CloudFormation::WaitCondition` type. In our case,
    we want the wait period to start as soon as the DB server is created, so we specify
    that this `WaitCondition` resource `DependsOn` our DB server.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你创建一个 `AWS::CloudFormation::WaitCondition` 类型。在我们的例子中，我们希望等待时间从数据库服务器创建开始，因此我们指定该
    `WaitCondition` 资源依赖于我们的数据库服务器（`DependsOn`）。
- en: After the DB server has finished importing data and is ready to accept connections,
    it calls the callback URL provided by the `WaitConditionHandle` resource to signal
    to CloudFormation that it can stop waiting and start executing the rest of the
    CloudFormation stack. The URL is supplied to the DB server via `UserData`, again
    using `Ref`. Typically, `curl`, `wget` or some equivalent is used to call the
    URL.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库服务器完成数据导入并准备接受连接后，它会调用由 `WaitConditionHandle` 资源提供的回调 URL，向 CloudFormation
    发出信号，表示它可以停止等待并开始执行其余的 CloudFormation 堆栈。该 URL 通过 `UserData` 提供给数据库服务器，仍然使用 `Ref`。通常，`curl`、`wget`
    或类似工具用于调用该 URL。
- en: A `WaitCondition` resource can have a `Timeout` period too. This is a value
    specified in seconds. In our example, we might supply a value of `900` because
    we know that it should never take more than 15 minutes to boot our DB and import
    the data.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`WaitCondition` 资源也可以设置 `Timeout` 时间。这是一个以秒为单位的值。在我们的示例中，我们可能会设置为 `900`，因为我们知道启动数据库并导入数据不应该超过
    15 分钟。'
- en: 'Here''s an example of what `DependsOn`, `WaitConditionHandle`, and `WaitCondition`
    look like combined:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个 `DependsOn`、`WaitConditionHandle` 和 `WaitCondition` 组合使用的示例：
- en: '[PRE3]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Functions
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: CloudFormation provides some inbuilt functions to make composing your templates
    a lot easier. We've already looked at `Ref` and `Fn::GetAtt`. Let's look at some
    others you are likely to encounter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 提供了一些内置函数，使得编写模板变得更加简单。我们已经了解了 `Ref` 和 `Fn::GetAtt`。接下来我们看看你可能会遇到的其他一些函数。
- en: Fn::Join
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fn::Join
- en: 'Use `Fn::Join` to concatenate a list of strings using a specified delimiter,
    like this, for example:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Fn::Join` 将一组字符串通过指定的分隔符连接起来，例如：
- en: '[PRE4]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This would yield the following value:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下值：
- en: '[PRE5]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Fn::Sub
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fn::Sub
- en: 'Use `Fn::Sub` to perform string substitution. Consider this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Fn::Sub` 执行字符串替换。请考虑以下情况：
- en: '[PRE6]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This would yield the following value:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下值：
- en: '[PRE7]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you combine these functions with `Ref` and `Fn::GetAtt`, you can start
    doing some really powerful stuff, as we'll be seeing in the recipes throughout
    this book.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将这些函数与 `Ref` 和 `Fn::GetAtt` 结合使用时，你可以开始做一些非常强大的事情，正如我们将在本书的配方中看到的那样。
- en: 'Other available inbuilt functions include:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可用的内置函数包括：
- en: '`Fn::Base64`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::Base64`'
- en: '`Fn::FindInMap`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::FindInMap`'
- en: '`Fn::GetAZs`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::GetAZs`'
- en: '`Fn::ImportValue`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::ImportValue`'
- en: '`Fn::Select`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::Select`'
- en: Documentation on all of these functions is available here [http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些功能的文档可以在这里找到 [http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html)。
- en: Conditionals
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件语句
- en: 'It''s reasonably common to provision a similar but distinct set of resources
    based on which environment your stack is running in. In your development environment,
    for example, you may not wish to create an entire fleet of database servers (HA
    master and read slaves), instead opting for just a single database server. You
    can achieve this by using conditionals:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的堆栈运行的环境，通常会根据需要配置一个相似但不同的资源集。例如，在开发环境中，你可能不希望创建一整套数据库服务器（HA 主服务器和只读副本），而是选择仅创建一个数据库服务器。你可以通过使用条件语句来实现这一点：
- en: '`Fn::And`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::And`'
- en: '`Fn::Equals`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::Equals`'
- en: '`Fn::If`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::If`'
- en: '`Fn::Not`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::Not`'
- en: '`Fn::Or`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn::Or`'
- en: Permissions and service roles
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限和服务角色
- en: One important thing to remember about CloudFormation is that it's more or less
    just making API calls on your behalf. This means that CloudFormation will assume
    the very same permissions or role you use to execute your template. If you don't
    have permission to create a new hosted zone in Route 53, for example, any template
    you try to run that contains a new Route 53-hosted zone will fail.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 CloudFormation，有一点很重要：它基本上只是代表你进行 API 调用。这意味着 CloudFormation 将使用你执行模板时所用的相同权限或角色。例如，如果你没有权限在
    Route 53 中创建新的托管区域，那么你尝试运行的任何包含新 Route 53 托管区域的模板都将失败。
- en: On the flip side, this has created a somewhat tricky situation where anyone
    developing CloudFormation typically has a very elevated level of privileges, and
    these privileges are somewhat unnecessarily granted to CloudFormation each time
    a template is executed.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，这创造了一个相对棘手的情况，任何开发 CloudFormation 的人通常都具有非常高的权限，并且这些权限在每次执行模板时都会被不必要地授予给
    CloudFormation。
- en: If my CloudFormation template contains only one resource, which is a Route 53-hosted
    zone, it doesn't make sense for that template to be executed with full admin privileges
    to my AWS account. It makes much more sense to give CloudFormation a very slim
    set of permissions to execute the template with, thus limiting the blast radius
    if a bad template were to be executed (that is, a bad copy-and-paste operation
    resulting in deleted resources).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我的 CloudFormation 模板仅包含一个资源，即一个 Route 53 托管区域，那么让该模板以完全管理员权限执行就没有意义。给 CloudFormation
    一个非常有限的权限集来执行模板，更有意义，这样如果执行了一个错误的模板（即错误的复制粘贴操作导致资源被删除），爆炸半径也会受到限制。
- en: Thankfully, service roles have recently been introduced, and you can now define
    an IAM role and tell CloudFormation to use this role when your stack is being
    executed, giving you a much safer space to play in.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，最近引入了服务角色，你现在可以定义一个 IAM 角色，并告知 CloudFormation 在执行堆栈时使用该角色，从而为你提供了一个更安全的操作空间。
- en: Custom resources
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义资源
- en: As discussed previously in this chapter, it's common for there to be a lengthy
    wait between the release of a new AWS feature and your ability to use that feature
    in CloudFormation.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章前面所讨论的那样，在发布新的 AWS 功能和你能够在 CloudFormation 中使用该功能之间，通常会有一个较长的等待期。
- en: Before custom resources, this led AWS developers down the path of doing over
    95 percent of their automation in CloudFormation and then running some CLI commands
    to fill in the gaps. It was often difficult to tell exactly which resources belonged
    to which stack, and knowing exactly when your stack had finished execution became
    a guessing game.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在自定义资源出现之前，这将 AWS 开发人员带入了在 CloudFormation 中执行超过 95% 自动化任务的路径，然后再运行一些 CLI 命令来填补空白。通常很难准确地知道哪些资源属于哪个堆栈，并且也很难确定你的堆栈何时完成执行，这成了一个猜谜游戏。
- en: Fast forward to today, and the emerging pattern is to use a custom resource
    to delegate to a AWS **Lambda** function. Lambda can fill in the gaps by making
    API calls on your behalf, and it becomes much easier to track the heritage and
    completion of these resources.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 快进到今天，新的趋势是使用自定义资源委托给AWS **Lambda**函数。Lambda可以通过代表你进行API调用来填补空白，并且更容易追踪这些资源的来源和完成情况。
- en: With any luck, you won't need to use this feature for a while. In the meantime,
    the AWS custom resource documentation is quite comprehensive. If you are trying
    to use CloudFormation to create a resource that you can't find in the AWS docs,
    then it's likely that it's not supported in CloudFormation yet and using custom
    resources is your answer. For more information, refer to [http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运气好的话，你暂时不需要使用这个功能。与此同时，AWS自定义资源的文档非常全面。如果你尝试使用CloudFormation创建一个在AWS文档中找不到的资源，那么很可能它在CloudFormation中还不被支持，这时候使用自定义资源就是解决方案。更多信息请参考[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html)。
- en: Cross-stack references
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨堆栈引用
- en: When using the layered cake approach, it's very common to want to use outputs
    from one stack as inputs in another stack. For example, you may create a VPC in
    one stack and require its VPC ID when creating resources in another.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用分层结构方法时，常常需要将一个堆栈的输出作为另一个堆栈的输入。例如，你可能在一个堆栈中创建了一个VPC，并且在创建另一个堆栈中的资源时需要其VPC
    ID。
- en: For a long time, one needed to provide some glue around stack creation to pass
    output between stacks. AWS recently introduced cross-stack references, which provide
    a more native way of doing this.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 长时间以来，创建堆栈时需要提供一些辅助机制来传递堆栈之间的输出。AWS最近引入了跨堆栈引用，这提供了一种更原生的方式来实现这一目标。
- en: You can now *export* one or more outputs from your stack. This makes those outputs
    available to other stacks. Note that the name of this value needs to be unique,
    so it's probably a good idea to include the CloudFormation stack name in the name
    you're exporting to achieve this.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以*导出*一个或多个堆栈的输出。这使得这些输出可以在其他堆栈中使用。请注意，这些值的名称需要是唯一的，因此最好在导出的名称中包括CloudFormation堆栈名称，以确保唯一性。
- en: Once a value is exported, it becomes available to be imported in another stack
    using the `Fn::ImportValue` function—very handy!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦某个值被导出，它就可以通过`Fn::ImportValue`函数在另一个堆栈中导入，非常方便！
- en: Make sure, however, that during the time an exported value is being referenced,
    you are not able to delete or modify it. Additionally, you won't be able to delete
    the stack containing the exported value. Once something is referencing an exported
    value, it's there to stay until there are no stacks referencing it at all.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请确保在导出的值被引用期间，你无法删除或修改它。此外，你也不能删除包含导出值的堆栈。一旦某个东西引用了一个导出的值，它就会一直存在，直到没有堆栈再引用它为止。
- en: Updating resources
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新资源
- en: One of the principles of IaC is that all changes should be represented as code
    for review and testing. This is especially important where CloudFormation is concerned.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施即代码（IaC）的一个原则是，所有的变更都应该以代码的形式进行表示，以便于审查和测试。这一点在使用CloudFormation时尤为重要。
- en: After creating a stack for you, the CloudFormation service is effectively hands
    off. If you make a change to any of the resources created by CloudFormation (in
    the web console, command line, or by some other method), you're effectively causing
    configuration drift. CloudFormation no longer knows the exact state of the resources
    in your stack.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在为你创建堆栈后，CloudFormation服务实际上是“放手”的。如果你对CloudFormation创建的任何资源进行更改（无论是在Web控制台、命令行，还是通过其他方法），你实际上是在导致配置漂移。CloudFormation此时已经无法准确了解堆栈中资源的状态。
- en: The correct approach is to make these changes in your CloudFormation template
    and perform an update operation on your stack. This ensures that CloudFormation
    always knows the state of your stack and allows you to maintain confidence that
    your infrastructure code is a complete and accurate representation of your running
    environments.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的方法是在CloudFormation模板中进行这些更改，并对堆栈执行更新操作。这确保了CloudFormation始终知道堆栈的状态，并使你能够保持信心，认为你的基础设施代码是正在运行环境的完整且准确的表示。
- en: Change sets
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更集
- en: When performing a stack update, it can be unclear exactly what changes are going
    to be made to your stack. Depending on which resource you are changing, you may
    find that it will need to be deleted and recreated in order to implement your
    change. This, of course, is completely undesired behavior if the resource in question
    contains data you'd like to keep. Keep in mind that RDS databases can be a particular
    pain point.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行堆栈更新时，可能无法清楚地了解将对堆栈进行哪些更改。根据你要更改的资源，你可能会发现它需要被删除并重新创建，以便实现更改。当然，如果相关资源包含你希望保留的数据，这种行为是完全不希望发生的。请记住，RDS
    数据库可能是一个特别的痛点。
- en: To mitigate this situation, CloudFormation allows you to create and review a
    *change set* prior to executing the update. The change set shows you which operations
    CloudFormation intends to perform on your resources. If the change set looks good,
    you can choose to proceed. If you don't like what you see, you can delete the
    change set and choose another course of action—perhaps choosing to create and
    switch to an entirely new stack to avoid a service outage.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解这种情况，CloudFormation 允许你在执行更新之前创建并查看*变更集*。变更集显示了 CloudFormation 打算在你的资源上执行哪些操作。如果变更集看起来没问题，你可以选择继续。如果你不满意看到的内容，可以删除变更集并选择另一个行动方案——也许选择创建并切换到一个全新的堆栈以避免服务中断。
- en: Other things to know
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他需要了解的事项
- en: There are a few other things you should keep in the back of your mind as you
    start to build out your own CloudFormation stacks. Let's take a look.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始构建自己的 CloudFormation 堆栈时，还有一些其他事项需要放在心上。我们来看看。
- en: Name collisions
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 名称冲突
- en: Often, if you omit the name attribute from a resource, CloudFormation will generate
    a name for you. This can result in weird-looking resource names, but it will increase
    the *replayability* of your template. Using `AWS::S3::Bucket` as an example, if
    you specify the `BucketName` parameter but don't ensure its uniqueness, CloudFormation
    will fail to execute your template the second time around because the bucket will
    already exist. Omitting `BucketName` fixes this. Alternatively, you may opt to
    generate your own unique name each time the template is run. There's probably
    no right or wrong approach here, so just do what works for you.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你省略了资源的名称属性，CloudFormation 会为你生成一个名称。这可能导致奇怪的资源名称，但它会增加模板的*可重放性*。以 `AWS::S3::Bucket`
    为例，如果你指定了 `BucketName` 参数但没有确保其唯一性，CloudFormation 在第二次执行模板时会失败，因为该桶已存在。省略 `BucketName`
    可以解决此问题。或者，你可以选择每次运行模板时生成一个独特的名称。这里可能没有对错之分，所以做最适合你的方式就好。
- en: Rollback
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回滚
- en: When creating a CloudFormation stack, you are given the option of disabling
    rollback. Before you go ahead and set this to `true`, keep in mind that this setting
    persists beyond stack creation. We've ended up in precarious situations where
    updating an existing stack has failed (for some reason) but rollback has been
    disabled. This is a fun situation for no one.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 CloudFormation 堆栈时，你可以选择禁用回滚。在你决定将其设置为 `true` 之前，请记住，这个设置会在堆栈创建后持续存在。我们曾经遇到过在更新现有堆栈失败（由于某种原因）但回滚已被禁用的危险情况。这对任何人来说都不是一种愉快的处境。
- en: Limits
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制
- en: 'The limits most likely to concern you are as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 最有可能让你担心的限制如下：
- en: The maximum size allowed for your CloudFormation template is 50 KB. This is
    quite generous, and if you hit this limit, you almost certainly need to think
    about breaking up your template into a series of smaller ones. If you absolutely
    need to exceed the 50 KB limit, then the most common approach is to first upload
    your template to S3 and then provide an S3 URL to CloudFormation to execute.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation 模板的最大大小为 50 KB。这个限制相当宽松，如果你达到了这个限制，那么几乎可以肯定需要考虑将模板拆分成多个较小的模板。如果你确实需要超过
    50 KB 的限制，最常见的方法是先将模板上传到 S3，然后提供 S3 URL 给 CloudFormation 执行。
- en: The maximum number of parameters you can specify is *60*. If you need more than
    this then again, consider whether or not you need to add more layers to your cake.
    Otherwise, lists or mappings might get you out of trouble here.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以指定的最大参数数量为*60*。如果你需要更多，那么再次考虑是否需要为你的“蛋糕”添加更多的层次。否则，使用列表或映射可能会帮你脱困。
- en: Outputs are also limited to *60*. If you've hit this limit, it's probably time
    to resort to a series of smaller templates.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出数量也限制为*60*。如果你达到了这个限制，可能是时候考虑使用多个较小的模板了。
- en: Resources are limited to *200*. The same rules apply here as before.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源数量限制为*200*。这里的规则与之前相同。
- en: By default, you're limited to a total of *200* CloudFormation stacks. You can
    have this limit increased simply by contacting AWS.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，你的 CloudFormation 堆栈数量被限制为*200*个。你只需联系 AWS 即可增加这个限制。
- en: Circular dependencies
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环依赖
- en: Something to keep in the back of your mind is that you may run in to a circular
    dependency scenario, where multiple resources depend on each other for creation.
    A common example is where two security groups reference each other in order to
    allow access between themselves.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 需要牢记的一点是，你可能会遇到循环依赖的情况，即多个资源在创建时相互依赖。一个常见的例子是两个安全组互相引用，以便允许彼此之间的访问。
- en: A workaround for this particular scenario is to use the `AWS::EC2::SecurityGroupEgress`
    and `AWS::EC2::SecurityGroupIngress` types instead of the ingress and egress rule
    types for `AWS::EC2::SecurityGroup`.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 针对这种特定场景的解决方法是使用 `AWS::EC2::SecurityGroupEgress` 和 `AWS::EC2::SecurityGroupIngress`
    类型，而不是 `AWS::EC2::SecurityGroup` 的入口和出口规则类型。
- en: DSLs and generators
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DSL 和生成器
- en: 'DSLs and generators can be a point of hot debate among infrastructure coders.
    Some love them, some hate them. Some of the reasons why people love them include
    the following:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: DSL 和生成器是基础设施编码人员之间热烈辩论的焦点。一些人喜欢它们，另一些人则讨厌它们。人们喜欢它们的原因包括以下几点：
- en: They allow CloudFormation to be written in a language that is more native to
    them or their team.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们允许用更本地化的语言或团队语言编写 CloudFormation。
- en: They allow the use some advanced programming constructs. Iteration is a particularly
    well-cited example.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们允许使用一些高级编程构造。迭代就是一个被广泛引用的例子。
- en: Until YAML was supported by CloudFormation, using a DSL usually resulted in
    code that was easier to read and far less verbose.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CloudFormation 支持 YAML 之前，使用 DSL 通常能使代码更易读，且冗长度大大降低。
- en: 'Some of the reasons people dislike them are:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 人们不喜欢它们的原因包括以下几点：
- en: DSLs have a history of becoming abandonware or significantly lagging behind
    CloudFormation, although there are a couple of well-supported DSLs out there
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DSL 在历史上曾经成为废弃软件，或与 CloudFormation 版本差距较大，尽管现在有一些得到良好支持的 DSL。
- en: Developers are potentially required to learn a new language and navigate another
    new set of documentation, on top of learning CloudFormation and navigating the
    AWS documentation
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员可能需要学习一门新语言，并且还要应对另一个新的文档体系，除了要学习 CloudFormation 和浏览 AWS 文档。
- en: Google and Stack Overflow become a little less useful because one needs to translate
    questions and answers
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 和 Stack Overflow 的作用会略显不足，因为需要翻译问题和答案。
- en: Beyond what is written here, this topic won't come up again in this book. We
    can't give specific advice as to which road you should take because it's almost
    always a highly personal and situational choice. However, a sensible approach,
    especially while coming to grips with AWS and CloudFormation, would be to stick
    with YAML (or JSON) until you get to the point where you think a DSL or generator
    might be useful.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这里写的内容外，本书中不会再涉及这个话题。我们不能给出具体的建议，让你选择哪条路，因为这几乎总是一个高度个人化和情境化的选择。不过，特别是在熟悉 AWS
    和 CloudFormation 的过程中，一个明智的做法是坚持使用 YAML（或 JSON），直到你认为 DSL 或生成器可能有用为止。
- en: Credentials
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 凭证
- en: Under no circumstances do you want to have credentials hardcoded in your templates
    or committed to your source code repository. Doing this doesn't just increase
    the chance your credentials will be stolen, it also reduces the portability of
    your templates. If your credentials are hardcoded and you need to change them,
    that obviously requires you to edit your CloudFormation template.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，你都不希望在模板中硬编码凭证或将其提交到源码仓库中。这样做不仅增加了凭证被盗用的风险，还降低了模板的可移植性。如果凭证被硬编码且需要更改，这显然需要你编辑
    CloudFormation 模板。
- en: Instead, you should add credentials as parameters in your template. Be sure
    to use the `NoEcho` parameter when you do this so that CloudFormation masks the
    value anywhere the parameters are displayed.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你应该将凭证作为参数添加到模板中。确保在这样做时使用 `NoEcho` 参数，以便 CloudFormation 在显示参数时屏蔽其值。
- en: Stack policies
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆栈策略
- en: If there are resources in your stack you'd like to protect from accidental deletion
    or modification, applying a stack policy will help you achieve this. By default,
    all resources are able to be deleted or modified. When you apply a stack policy,
    all resources are protected unless you explicitly allow them to be deleted or
    modified in the policy. Note that stack policies do not apply during stack creation—they
    only take effect when you attempt to update a stack.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的堆栈中有资源希望保护免受意外删除或修改，可以应用堆栈策略来实现这一点。默认情况下，所有资源都可以被删除或修改。当您应用堆栈策略时，所有资源将被保护，除非您在策略中明确允许它们被删除或修改。请注意，堆栈策略在堆栈创建期间不生效——它们仅在您尝试更新堆栈时生效。
- en: The command-line interface tool
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行界面工具
- en: The AWS **command-line interface** (**CLI**) tool is an important piece of the
    AWS administrator's toolkit.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: AWS **命令行界面** (**CLI**) 工具是 AWS 管理员工具包中的一个重要组成部分。
- en: The CLI tool is often one of the quickest and easiest ways to interact with
    the API. As a text-based tool, it scales much easier than using the web console.
    Unlike the console, it can be automated, for example, via scripts. The AWS **application
    programming interface** (**API**) represents all the functionality available to
    you as an AWS administrator. It is also easier to keep a track of through your
    command-line history. Like all good CLI tools, simple individual commands can
    be chained (or *piped*) together to perform complex tasks.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具通常是与 API 交互的最快和最简单的方法之一。作为一种基于文本的工具，它比使用网页控制台更容易扩展。与控制台不同，它可以通过脚本等方式进行自动化。AWS
    **应用程序编程接口** (**API**) 表示作为 AWS 管理员可用的所有功能。它也更容易通过命令行历史记录进行跟踪。像所有优秀的 CLI 工具一样，简单的单个命令可以串联（或*管道*）在一起，执行复杂的任务。
- en: The CLI tool is open source software, maintained on GitHub [https://github.com/aws/aws-cli](https://github.com/aws/aws-cli). For
    more detailed documentation, refer to the AWS CLI homepage [https://aws.amazon.com/cli](https://aws.amazon.com/cli).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具是开源软件，维护在 GitHub 上 [https://github.com/aws/aws-cli](https://github.com/aws/aws-cli)。更多详细文档，请参考
    AWS CLI 主页 [https://aws.amazon.com/cli](https://aws.amazon.com/cli)。
- en: Installation
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: The CLI tool requires Python 2.6.5 or greater.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具需要 Python 2.6.5 或更高版本。
- en: 'The easiest way to install it is to use the Python package manager, `pip`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 安装它的最简单方法是使用 Python 包管理器`pip`：
- en: '[PRE8]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will make the command `aws` available on your system.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使得`aws`命令在您的系统上可用。
- en: Upgrade
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级
- en: AWS frequently releases new services and functionality. In order to use the
    new features, you will need to upgrade the CLI tool.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 经常发布新服务和新功能。为了使用这些新功能，您需要升级 CLI 工具。
- en: 'To upgrade, run the following `pip` command periodically:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要升级，请定期运行以下`pip`命令：
- en: '[PRE9]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuration
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: 'Authentication between the CLI tool and the AWS API is done via two pieces
    of information:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具与 AWS API 之间的认证是通过两项信息完成的：
- en: Access key ID
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问密钥 ID
- en: Secret access key
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 秘密访问密钥
- en: As the name suggests, you should keep your secret access key a secret! Be careful
    where you store or send it.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，您应该保密您的秘密访问密钥！小心存储或发送它的地方。
- en: Once you have created a user, you can configure the tool to use it for authentication
    purposes.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用户后，您可以配置工具以用于认证目的。
- en: While you can configure the CLI tool with access keys directly, this should
    be avoided. Instead, you should use profiles to store your credentials. Using
    profiles gives you a more consistent and manageable centralized location to secure
    your secret keys.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以直接用访问密钥配置 CLI 工具，但不推荐这样做。相反，您应该使用配置文件来存储凭证。使用配置文件可以让您在一个一致的、易于管理的集中位置来保护您的秘密密钥。
- en: Default profile
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认配置文件
- en: Without any additional configuration or options, your CLI tool commands will
    use the default profile.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有任何额外配置或选项的情况下，您的 CLI 工具命令将使用默认配置文件。
- en: 'To set up the default profile, you can use the following command:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置默认配置文件，您可以使用以下命令：
- en: '[PRE10]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will prompt you for an access key ID, secret access key, region, and output
    format.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提示您输入访问密钥 ID、秘密访问密钥、区域和输出格式。
- en: Named profiles
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名配置文件
- en: In addition to the default profile, you can configure other, named profiles.
    This is useful for switching between users with different levels of access (for
    example, read-only and administrator) or even between users in different accounts.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认配置文件外，您还可以配置其他命名的配置文件。这对于在具有不同访问权限级别的用户之间切换（例如，只读用户和管理员）或甚至在不同帐户的用户之间切换非常有用。
- en: '[PRE11]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once you have responded to the prompts, you can reference the named profile
    by passing the `--profile <profile-name>` option with your command.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应提示后，你可以通过在命令中传递 `--profile <profile-name>` 选项来引用命名的配置文件。
- en: Environment variables
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境变量
- en: 'You can also configure the CLI via the use of environment variables:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用环境变量来配置 CLI：
- en: '[PRE12]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'While you should prefer to use profiles over setting your access ID and secret
    keys directly, sometimes you may have to do it. If you *must* set your keys directly,
    do so via environment variables so that you do not need to pass your keys around
    or hardcode them:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你应该优先使用配置文件，而不是直接设置访问 ID 和密钥，但有时你可能不得不这么做。如果你*必须*直接设置密钥，请通过环境变量来设置，这样你就不需要传递密钥或将其硬编码：
- en: '[PRE13]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Instance roles
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例角色
- en: When running the CLI tool on an EC2 instance, you can leverage the instance's
    IAM role to make calls. This means you do not need to configure credentials or
    set environment variables (manually).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在 EC2 实例上运行 CLI 工具时，你可以利用实例的 IAM 角色进行调用。这意味着你不需要手动配置凭证或设置环境变量。
- en: Behind the scenes, the instance will retrieve and set its own AWS environment
    variables that allow API calls. You do need to ensure the instance has appropriate
    permissions.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，实例将检索并设置它自己的 AWS 环境变量，以允许 API 调用。你需要确保该实例具有适当的权限。
- en: The AWS CLI tool comes preinstalled on AWS Linux-based instances.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI 工具在 AWS 基于 Linux 的实例上预装。
- en: Usage
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用法
- en: All CLI tool commands are service based. Using service commands and subcommands,
    you can make calls directly to the AWS API.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 CLI 工具命令都是基于服务的。通过使用服务命令和子命令，你可以直接向 AWS API 发出调用。
- en: Commands
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令
- en: Each command represents an AWS service. While most services have one command
    associated with them, some services have multiple commands (for example, S3 has
    `s3` and `s3api`).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令代表一个 AWS 服务。虽然大多数服务只有一个命令与之关联，但有些服务有多个命令（例如，S3 有 `s3` 和 `s3api`）。
- en: Run `aws help` to see all the commands/services that are available—they will
    probably have changed by the time this book prints!
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `aws help` 查看所有可用的命令/服务—它们可能会在本书打印时有所变化！
- en: Subcommands
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子命令
- en: Each command has a selection of subcommands to perform service-specific actions.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令都有一组子命令，用于执行特定服务的操作。
- en: Run `aws <command> help` to see all subcommands.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `aws <command> help` 查看所有子命令。
- en: Options
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项
- en: Subcommands take options, which start with `--`.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 子命令接受以 `--` 开头的选项。
- en: See all options and their purpose with `aws <command> <subcommand> help`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `aws <command> <subcommand> help` 查看所有选项及其用途。
- en: While most are optional (hence the name), those that are *not* surrounded by
    square brackets (`[]`) are required. You will get an error message (with appropriate
    details) if you do not include them.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数是可选的（因此得名），但那些*没有*被方括号（`[]`）括起来的选项是必需的。如果你没有包含它们，将会收到错误信息（并附有相关细节）。
- en: The built-in documentation is the best place to start looking for answers. There
    are usually examples after all of the options have been described. Otherwise,
    there are plenty of examples available online.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 内置文档是开始寻找答案的最佳地方。通常在所有选项描述之后会有示例。否则，网上有很多可用的示例。
- en: Some options are available to all or most commands, so they are particularly
    useful to know.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 有些选项适用于所有或大多数命令，因此它们特别有用，值得了解。
- en: Output
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出
- en: The CLI tool can be configured to output in JSON, table, or text format. To
    control the output type, use the `--output` option.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具可以配置为以 JSON、表格或文本格式输出。要控制输出类型，请使用 `--output` 选项。
- en: To set a default output type for all your commands, set the `output` parameter
    for your profile.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 要为所有命令设置默认的输出类型，可以为你的配置文件设置 `output` 参数。
- en: JSON
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON
- en: '**JavaScript Object Notation** (**JSON**) ([http://json.org/](http://json.org/)),
    a standard, machine- and human-readable information interchange format. Here''s
    what the AZs in the `us-east-1` (North Virginia) region look like represented
    as JSON:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript 对象表示法** (**JSON**) ([http://json.org/](http://json.org/))，一种标准的、机器和人类可读的信息交换格式。以下是
    `us-east-1`（北弗吉尼亚）区域的可用可用区（AZ）在 JSON 格式中的表示：'
- en: '[PRE14]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Table
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表格
- en: 'The table format displays a text/ASCII table of results. This can be useful
    for generating printable reports:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 表格格式会显示一个文本/ASCII 表格的结果。这对于生成可打印报告非常有用：
- en: '![](img/B06326_01_03.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06326_01_03.png)'
- en: Text
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本
- en: The text output format only displays the resulting key/value response. No additional
    formatting or display characters are added.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 文本输出格式仅显示结果的键/值响应。没有添加任何额外的格式或显示字符。
- en: '![](img/B06326_01_04.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06326_01_04.png)'
- en: Querying
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询
- en: The CLI tool supports transforming the response from the API with the `--query`
    option. This option takes a JMESPath query as a parameter and returns the query
    result.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具支持使用 `--query` 选项转换 API 的响应。此选项将 JMESPath 查询作为参数，并返回查询结果。
- en: JMESPath is a query language for JSON. For more information, visit [http://jmespath.org/](http://jmespath.org/).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: JMESPath 是一种用于查询 JSON 的语言。有关更多信息，请访问 [http://jmespath.org/](http://jmespath.org/)。
- en: As the query is processed as part of the command, it takes place on the server,
    not the client. By offloading work to the server, you can reduce the size of the
    resulting payload and improve response times.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 由于查询作为命令的一部分在服务器上处理，而不是在客户端处理，因此可以通过将工作卸载到服务器，减少生成的有效负载的大小并提高响应时间。
- en: 'JMESPath can be used to transform the response that you receive:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: JMESPath 可用于转换你收到的响应：
- en: '[PRE15]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It can also be used to filter the data that is received:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以用来过滤接收到的数据：
- en: '[PRE16]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Generate CLI skeleton
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成 CLI 骨架
- en: When performing complex tasks with the CLI tool, it may be easier to pass a
    JSON object of options. This kind of interaction may signify that you should use
    one of the AWS **software development kits** (**SDKs**).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 CLI 工具执行复杂任务时，传递一个包含选项的 JSON 对象可能会更简单。这种交互方式可能意味着你应该使用某个 AWS **软件开发工具包**（**SDK**）。
- en: Input
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入
- en: 'To generate a sample JSON object that will be accepted, run the command with
    the `--generate-cli-skeleton` option:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个示例 JSON 对象（它将被接受），可以使用 `--generate-cli-skeleton` 选项运行命令：
- en: '[PRE17]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can then copy, edit, and use this object to define your command options
    without passing lots of individual options. It works best for commands with arrays
    of options or a variable number of options.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以复制、编辑并使用此对象来定义你的命令选项，而无需传递多个单独的选项。这对于包含选项数组或选项数量可变的命令效果最佳。
- en: Output
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出
- en: 'You can also get a preview of the output of a command by calling the command
    with the `--generate-cli-skeleton output` option. This can speed up the process
    of combining CLI commands as you can see a response without actually calling the
    API:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过调用带有 `--generate-cli-skeleton output` 选项的命令，预览命令的输出。这可以加速合并 CLI 命令的过程，因为你可以在不实际调用
    API 的情况下查看响应：
- en: '[PRE18]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Pagination
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分页
- en: Results returned by the CLI tool are limited to 1,000 resources by default.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具返回的结果默认限制为 1,000 个资源。
- en: This is not normally an issue, but at a certain scale, you may run into pagination
    issues. A common example is files in an S3 bucket.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 通常这不是问题，但在某些规模下，你可能会遇到分页问题。一个常见的例子是 S3 桶中的文件。
- en: If you are absolutely sure you should be seeing a particular resource in a response
    but cannot, check your pagination. The resource may be included in the matching
    resources, just not in the part of the response that was returned to you.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完全确定应该在响应中看到某个特定资源但没有看到，请检查你的分页设置。该资源可能已经包含在匹配的资源中，只是没有出现在返回的响应部分。
- en: 'The following options allow you to control the number and starting point of
    the results returned to you from the API:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项允许你控制从 API 返回的结果的数量和起始位置：
- en: '`--page-size`: This limits how many resources *will be displayed to you*, but
    does not actually limit the number returned. The default number of items (that
    is, 1,000) will still be processed and returned to you.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--page-size`：此选项限制显示给你的资源数量，但不会实际限制返回的资源数量。默认的项目数（即 1,000 个）仍将被处理并返回给你。'
- en: '`--max-items`: This sets an upper limit on how many items will actually be
    returned in the response. You may receive fewer items, but you will not receive
    more than this number.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--max-items`：此选项设置响应中实际返回的项目数量的上限。你可能会收到更少的项目，但不会收到超过此数量的项目。'
- en: '`--starting-token`: This changes where the response starts. Use this to display
    subsequent results, beyond the first page.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--starting-token`：此选项更改响应的起始位置。使用此选项可以显示后续的结果，超出第一页的内容。'
- en: '[PRE19]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Autocomplete
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动完成
- en: You can enable tab-completion of commands, subcommands, and options by configuring
    the completer included with the CLI tool.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过配置 CLI 工具中包含的自动完成器来启用命令、子命令和选项的制表符自动完成。
- en: 'On OS X, Linux, and Windows systems with a bash shell, you can load the completer
    with the following command:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X、Linux 和 Windows 系统中使用 bash shell，你可以使用以下命令加载自动完成器：
- en: '[PRE20]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By default, the `aws_completer` program is installed in `/usr/local/bin`. If
    your tool is installed to a non-standard location, you will need to find it and
    change the `which aws_completer` command to the relevant path.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`aws_completer` 程序安装在 `/usr/local/bin`。如果你的工具安装在非标准位置，你需要找到它并将 `which
    aws_completer` 命令更改为相关路径。
- en: Related tools
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关工具
- en: The following program work nicely with the AWS CLI tool, and may come in handy.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序与 AWS CLI 工具配合良好，可能会派上用场。
- en: jq
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jq
- en: jq is a lightweight tool for processing and transforming JSON. It follows the
    *Unix philosophy* of doing one thing and doing it well. It can be found at [https://stedolan.github.io/jq/](https://stedolan.github.io/jq/).
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: jq 是一个轻量级的工具，用于处理和转换 JSON。它遵循 *Unix 哲学*：做一件事，并做到最好。可以在 [https://stedolan.github.io/jq/](https://stedolan.github.io/jq/)
    找到它。
- en: While jq and JMESPath are similar, jq is a lot easier to get started with. It
    also supports transforming JSON into plaintext; JMESPath queries will always return
    more JSON.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 jq 和 JMESPath 很相似，但 jq 更容易上手。它还支持将 JSON 转换为纯文本；而 JMESPath 查询总是返回更多的 JSON
    数据。
- en: 'You can pipe JSON results from the CLI tool to it, and easily transform the
    results for use elsewhere. This example uses jq''s property name selectors to
    convert JSON output to text:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将来自 CLI 工具的 JSON 结果传递给它，并轻松转换结果以供其他地方使用。这个示例使用 jq 的属性名称选择器将 JSON 输出转换为文本：
- en: '[PRE21]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
