- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Building Your First Terraform Project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的第一个 Terraform 项目
- en: If you’re new to Terraform and looking to get started with your first project,
    this chapter is for you. In this chapter, we’ll cover the basics of building your
    first Terraform configuration for AWS. We’ll start by discussing how to install
    Terraform and prepare it for use with AWS. Then, we’ll guide you through the process
    of building your first Terraform configuration and template. We’ll also show you
    how to provision and test your first template so you can see your infrastructure
    come to life. By the end of this chapter, you’ll have the foundational knowledge
    and skills to build your own infrastructure with Terraform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Terraform 新手并希望开始你的第一个项目，那么这一章适合你。在本章中，我们将介绍如何为 AWS 构建你的第一个 Terraform 配置。我们将从讨论如何安装
    Terraform 并准备它与 AWS 一起使用开始。然后，我们将引导你完成构建第一个 Terraform 配置和模板的过程。最后，我们还会展示如何配置和测试你的第一个模板，这样你就可以看到你的基础设施开始生效。通过本章的学习，你将掌握使用
    Terraform 构建基础设施所需的基础知识和技能。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to install Terraform
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装 Terraform
- en: How to install/prepare Terraform for AWS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装/准备 Terraform 以便与 AWS 配合使用
- en: Building your first Terraform configuration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建你的第一个 Terraform 配置
- en: Building your first Terraform template
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建你的第一个 Terraform 模板
- en: Provisioning and testing your template
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和测试你的模板
- en: How to install Terraform
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何安装 Terraform
- en: To get started with Terraform, it’s important to understand how to properly
    install and manage the Terraform installation. Installing Terraform can be challenging,
    but there are many online resources available to guide you through the process,
    including the official Terraform documentation. Terraform is distributed as a
    binary package by HashiCorp, and it can also be installed using popular package
    managers. Installing Terraform is the first step to creating your first project
    on Terraform.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Terraform 之前，了解如何正确安装和管理 Terraform 安装非常重要。安装 Terraform 可能有一定挑战，但有许多在线资源可以帮助你完成安装过程，包括官方的
    Terraform 文档。Terraform 由 HashiCorp 作为二进制包发布，也可以通过流行的包管理器进行安装。安装 Terraform 是开始使用
    Terraform 创建第一个项目的第一步。
- en: Let’s go over different installation methods next.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们来看看不同的安装方法。
- en: Manual installation
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动安装
- en: For manual installation, you have the choice of downloading a pre-compiled binary
    from the Terraform **Downloads** page, or compiling a binary from the source.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于手动安装，你可以选择从 Terraform **下载** 页面下载预编译的二进制文件，或者从源代码编译二进制文件。
- en: Pre-compiled binary
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预编译二进制文件
- en: 'To install Terraform, you need to download the correct package for your operating
    system in the form of a ZIP archive. The appropriate package can be found by selecting
    your operating system on the Terraform website: [https://www.terraform.io/downloads](https://www.terraform.io/downloads).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Terraform，你需要下载适合你操作系统的正确包，这些包以 ZIP 压缩包的形式提供。你可以在 Terraform 网站上选择你的操作系统，找到适合的安装包：[https://www.terraform.io/downloads](https://www.terraform.io/downloads)。
- en: Once you have downloaded the appropriate Terraform package for your system,
    the next step is to unzip the package. Inside the package, you will find a single
    binary named `terraform`, which is the main executable for Terraform. You can
    safely remove any other files in the package, and Terraform will still function
    properly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你下载了适合你系统的 Terraform 包，下一步是解压这个包。在包内，你会找到一个名为 `terraform` 的二进制文件，它是 Terraform
    的主要可执行文件。你可以安全地删除包内的其他文件，Terraform 仍然可以正常工作。
- en: To use Terraform, you also need to ensure that the `terraform` binary is added
    to your system’s `PATH` environment variable so that it can be executed from any
    directory in the terminal. The process for setting this up varies depending on
    your operating system, but instructions can typically be found online or in the
    Terraform documentation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Terraform，你还需要确保将 `terraform` 二进制文件添加到系统的 `PATH` 环境变量中，这样你就可以从终端的任何目录执行它。设置此环境变量的过程因操作系统不同而有所不同，但通常可以在网上或
    Terraform 文档中找到相应的说明。
- en: Mac or Linux PATH configuration
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Mac 或 Linux 的 PATH 配置
- en: 'Print a colon-separated list of locations in your `PATH`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 打印出 `PATH` 中位置的冒号分隔列表：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Move the Terraform binary to one of the listed locations. This command assumes
    that the binary is currently in your downloads folder and that your `PATH` includes
    `/usr/local/bin`, but you can customize it if your locations are different:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Terraform 二进制文件移动到列出的某个位置。这个命令假设二进制文件目前在你的下载文件夹中，并且你的 `PATH` 包含 `/usr/local/bin`，如果位置不同，你可以根据实际情况进行调整：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Windows PATH configuration
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows PATH 配置
- en: 'The `PATH` configuration is stored in the registry, which you can edit through
    the following interface:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`PATH` 配置存储在注册表中，你可以通过以下界面进行编辑：'
- en: Go to **Control Panel** | **System** | **System settings** | **Environment variables**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**控制面板** | **系统** | **系统设置** | **环境变量**。
- en: Scroll down through the system variables until you find `PATH`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动系统变量，直到找到 `PATH`。
- en: Click **edit** and make the change accordingly.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**编辑**并根据需要进行更改。
- en: Be sure to include a semicolon at the end of the previous variable as these
    are used as delimiters.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保在前一个变量的末尾添加分号，因为这些分号用作分隔符。
- en: Launch a new console for the settings to take effect.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个新的控制台以使设置生效。
- en: Compiling from source
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源代码编译
- en: 'If you wish to compile the Terraform binary from source, you can clone the
    HashiCorp Terraform repository:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望从源代码编译 Terraform 二进制文件，你可以克隆 HashiCorp 的 Terraform 仓库：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Navigate to the new directory:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到新的目录：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, compile the binary. This command will compile the binary and store it
    in `$GOPATH/bin/terraform`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，编译二进制文件。此命令将编译二进制文件并将其存储在 `$GOPATH/bin/terraform` 目录下：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After installing Terraform, it is important to ensure that the `terraform` binary
    is added to your system’s `PATH` environment variable so that it can be executed
    from anywhere. This process may vary depending on your operating system, but typically
    involves adding the location of the `terraform` binary to the `PATH` variable
    using a command or by manually editing system files.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Terraform 后，确保将 `terraform` 二进制文件添加到系统的 `PATH` 环境变量中，以便从任何地方执行它。这个过程可能会根据操作系统的不同有所不同，但通常包括使用命令或手动编辑系统文件将
    `terraform` 二进制文件的位置添加到 `PATH` 变量中。
- en: Popular package managers
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流行的包管理器
- en: There are several popular package managers that simplify the process of installing
    Terraform on different operating systems. These package managers allow you to
    manage and update multiple software packages from a single **Command-Line Interface**
    (**CLI**). In this section, we will explore some of the most popular package managers
    for Terraform, including Chocolatey for Windows, Homebrew for macOS, and APT and
    Yum for Linux.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个流行的包管理器可以简化在不同操作系统上安装 Terraform 的过程。这些包管理器允许你通过一个**命令行界面**（**CLI**）管理和更新多个软件包。在本节中，我们将介绍一些最流行的
    Terraform 包管理器，包括 Windows 上的 Chocolatey、macOS 上的 Homebrew，以及 Linux 上的 APT 和 Yum。
- en: Homebrew on macOS
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS 上的 Homebrew
- en: 'To install Terraform on Mac macOS, you can utilize the free and open source
    package management system for Mac macOS known as Homebrew. Before installing Terraform
    itself, you need to install the HashiCorp `tap`, which is a repository that contains
    all the Homebrew packages:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Mac macOS 上安装 Terraform，你可以使用被称为 Homebrew 的免费开源包管理系统。在安装 Terraform 之前，你需要先安装
    HashiCorp `tap`，它是一个包含所有 Homebrew 包的仓库：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, install Terraform with `hashicorp/tap/terraform`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过 `hashicorp/tap/terraform` 安装 Terraform：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This installs a signed binary and is automatically updated with every new official
    release.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装一个签名的二进制文件，并且会随着每次官方新版本发布而自动更新。
- en: 'To update to the latest version of Terraform, first update Homebrew:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新到最新版本的 Terraform，首先更新 Homebrew：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, run the `upgrade` command to download and use the latest Terraform version:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行 `upgrade` 命令以下载并使用最新的 Terraform 版本：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Chocolatey on Windows
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 上的 Chocolatey
- en: 'To install Terraform on Windows using Chocolatey, you can use the CLI. Chocolatey
    is a free and open source package manager for Windows that simplifies the process
    of installing and managing software on your system:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 上使用 Chocolatey 安装 Terraform，你可以使用命令行界面（CLI）。Chocolatey 是一个免费开源的 Windows
    包管理器，它简化了在系统上安装和管理软件的过程：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Chocolatey and the Terraform package are *not* directly maintained by HashiCorp.
    The latest version of Terraform is always available for manual installation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey 和 Terraform 包*不是*由 HashiCorp 直接维护的。Terraform 的最新版本始终可以进行手动安装。
- en: Linux
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux
- en: HashiCorp officially maintains and signs packages for Ubuntu/Debian, CentOS/RHEL,
    Fedora, and Amazon Linux distributions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: HashiCorp 官方维护并签署了适用于 Ubuntu/Debian、CentOS/RHEL、Fedora 和 Amazon Linux 发行版的包。
- en: Ubuntu/Debian
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Ubuntu/Debian
- en: 'Make sure that your system is up to date, and that you have the `gnupg`, `software-properties-common`,
    and `curl` packages installed. These packages are necessary to verify the GPG
    signature of HashiCorp and install its Debian package repository:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的系统是最新的，并且已经安装了 `gnupg`、`software-properties-common` 和 `curl` 包。这些包是验证 HashiCorp
    的 GPG 签名并安装其 Debian 包仓库所必需的：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install the HashiCorp GPG key:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 HashiCorp 的 GPG 密钥：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the official HashiCorp repository to your system by using the appropriate
    command for your system. The command uses `lsb_release -cs` to find the distribution
    release codename for your current system, such as `buster`, `groovy`, or `sid`,
    and adds it to the repository file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用适合你系统的命令将官方HashiCorp仓库添加到系统中。该命令使用`lsb_release -cs`查找当前系统的发行版代号，如`buster`、`groovy`或`sid`，并将其添加到仓库文件中：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Download the package information from HashiCorp:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从HashiCorp下载包信息：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Install Terraform from the new repository:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从新的仓库安装Terraform：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: CentOS/RHEL
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: CentOS/RHEL
- en: 'Install `yum-config-manager` to manage your repositories:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`yum-config-manager`以管理你的仓库：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use `yum-config-manager` to add the official HashiCorp Linux repository:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`yum-config-manager`添加官方HashiCorp Linux仓库：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Install Terraform from the new repository:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从新的仓库安装Terraform：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Fedora
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Fedora
- en: 'Install `dnf config-manager` to manage your repositories:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`dnf config-manager`以管理你的仓库：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use `dnf config-manager` to add the official HashiCorp Linux repository:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`dnf config-manager`添加官方HashiCorp Linux仓库：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Install Terraform from the new repository:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从新的仓库安装Terraform：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Amazon Linux
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Amazon Linux
- en: 'Install `yum-config-manager` to manage your repositories:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`yum-config-manager`以管理你的仓库：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Use `yum-config-manager` to add the official HashiCorp Linux repository:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`yum-config-manager`添加官方HashiCorp Linux仓库：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Install Terraform from the new repository:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从新的仓库安装Terraform：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Verifying the installation
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证安装
- en: 'Once you have completed the installation process, it is essential to verify
    that Terraform is installed correctly. To do this, you can open a new terminal
    session and list Terraform’s available subcommands. This will help you ensure
    that Terraform is functioning correctly and that you can begin to create and manage
    infrastructure using Terraform:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装过程后，验证Terraform是否正确安装是非常重要的。你可以打开一个新的终端会话，列出Terraform的可用子命令。这将帮助你确保Terraform正常工作，并且你可以开始使用Terraform创建和管理基础设施：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you are getting a response similar to the following, that means your installation
    was successful:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到类似以下的响应，说明你的安装成功：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now that we have covered how to install Terraform, let’s move on to preparing
    Terraform for AWS by configuring our AWS account to allow Terraform to interact
    with the AWS services.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经覆盖了如何安装Terraform，接下来让我们通过配置AWS账户，使Terraform能够与AWS服务进行交互，来准备Terraform用于AWS。
- en: How to install/prepare Terraform for AWS
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何为AWS安装/准备Terraform
- en: Once Terraform is installed, you can create your first infrastructure in AWS.
    Terraform generates an execution plan outlining the necessary steps to reach the
    desired infrastructure state and then executes it. As you make changes to the
    configuration, Terraform can determine the differences and create incremental
    execution plans to apply the changes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Terraform，你可以在AWS中创建你的第一个基础设施。Terraform会生成一个执行计划，列出达到目标基础设施状态所需的步骤，并执行它。随着你对配置进行更改，Terraform可以识别差异并生成增量执行计划来应用这些更改。
- en: In the following steps, let’s create an S3 bucket in AWS. First of all, there
    are some prerequisites to provision AWS resources in Terraform.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，让我们在AWS中创建一个S3桶。首先，为了在Terraform中配置AWS资源，有一些前提条件。
- en: Prerequisites
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'After a successful Terraform installation, you need the following ready for
    the next steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装Terraform后，你需要准备以下内容进行下一步操作：
- en: The AWS CLI installed
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI已安装
- en: An AWS account and associated credentials with permissions to create resources
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个AWS账户以及具有创建资源权限的相关凭证
- en: AWS CLI installation
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS CLI安装
- en: The **AWS CLI** is a comprehensive tool that enables you to manage your AWS
    services from a single, unified interface. It simplifies the management of multiple
    AWS services and allows for automation through scripts. By using the AWS CLI,
    you can execute AWS commands directly from the command line, making it easier
    to manage your AWS resources efficiently.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS CLI**是一个全面的工具，使你可以通过单一统一的界面管理AWS服务。它简化了多个AWS服务的管理，并通过脚本实现自动化。使用AWS CLI，你可以直接从命令行执行AWS命令，更高效地管理AWS资源。'
- en: Linux
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux
- en: To install `aws-cli`, your system must have the capability to extract or unzip
    the downloaded package. If your operating system does not have the built-in `unzip`
    command, you can use an equivalent. The AWS CLI requires `glibc`, `groff`, and
    `less`. These components are typically included by default in most major distributions
    of Linux.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `aws-cli`，你的系统必须能够解压或解开下载的包。如果你的操作系统没有内置的 `unzip` 命令，你可以使用等效的工具。AWS CLI
    需要 `glibc`、`groff` 和 `less`。这些组件通常在大多数主流 Linux 发行版中默认包含。
- en: 'Download the installation package as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以如下方式下载安装包：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Extract the installer by unzipping it. If your Linux distribution does not
    have a built-in `unzip` command, you can use an alternative to extract it. The
    following command is an example of unzipping the package and creating a directory
    called `aws` under the current directory:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解压安装程序来提取它。如果你的 Linux 发行版没有内置的 `unzip` 命令，你可以使用其他工具来解压。以下命令是解压包并在当前目录下创建一个名为
    `aws` 的目录的示例：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Execute the installation command using the install file located in the extracted
    AWS directory. The default installation path is `/usr/local/aws-cli` and a symbolic
    link will be created in `/usr/local/bin`. The command may require the use of `sudo`
    to grant write permissions to those directories:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提取后的 AWS 目录中的安装文件执行安装命令。默认安装路径是 `/usr/local/aws-cli`，并且会在 `/usr/local/bin`
    创建一个符号链接。该命令可能需要使用 `sudo` 来授予这些目录的写权限：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Confirm the installation with the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令确认安装：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You should receive a response similar to the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会收到类似于以下的响应：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: macOS
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: If you have `sudo`/admin permissions, you can install the AWS CLI for all users
    on the computer with the following commands.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拥有 `sudo`/管理员权限，可以使用以下命令为计算机上的所有用户安装 AWS CLI。
- en: 'Download the file using the `curl` command. The `-o` option specifies the filename
    that the downloaded package is written to. In this example, the file is written
    to `AWSCLIV2.pkg` in the current folder:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `curl` 命令下载文件。`-o` 选项指定了下载的包文件保存的文件名。在这个示例中，文件被保存为当前文件夹中的 `AWSCLIV2.pkg`：
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This process is different on macOS systems, where you can run the standard
    macOS installer program to install Terraform. You simply need to specify the downloaded
    `.pkg` file as the source using the `-pkg` parameter to specify the package name
    and the `-target /` parameter to specify the installation drive. During the installation
    process, the files are installed to `/usr/local/aws-cli`, and a symlink is automatically
    created in `/usr/local/bin`. However, to grant write permissions to those folders,
    you must include `sudo` in the command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程在 macOS 系统上有所不同，你可以运行标准的 macOS 安装程序来安装 Terraform。你只需使用 `-pkg` 参数指定已下载的 `.pkg`
    文件作为源，并使用 `-target /` 参数指定安装驱动器。在安装过程中，文件将被安装到 `/usr/local/aws-cli`，并且会在 `/usr/local/bin`
    自动创建一个符号链接。但是，要为这些文件夹授予写权限，你必须在命令中加入 `sudo`：
- en: '[PRE32]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To verify that the shell can find and run the `aws` command in your `$PATH`,
    use the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证 shell 是否能够在 `$PATH` 中找到并运行 `aws` 命令，可以使用以下命令：
- en: '[PRE33]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The response should be the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的响应应该是以下内容：
- en: '[PRE34]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Verify the `PATH` configuration and version:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 验证 `PATH` 配置和版本：
- en: '[PRE35]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The response should be like the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的响应应该类似于以下内容：
- en: '[PRE36]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If the `aws` command cannot be found, you might need to restart your terminal
    and re-verify.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到 `aws` 命令，可能需要重新启动终端并重新验证。
- en: Windows
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: You require admin rights to install `aws-cli` on your Windows system.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要管理员权限才能在 Windows 系统上安装 `aws-cli`。
- en: 'Download and run the AWS CLI MSI installer for Windows (64-bit): [https://awscli.amazonaws.com/AWSCLIV2.msi](https://awscli.amazonaws.com/AWSCLIV2.msi)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并运行适用于 Windows（64 位）的 AWS CLI MSI 安装程序：[https://awscli.amazonaws.com/AWSCLIV2.msi](https://awscli.amazonaws.com/AWSCLIV2.msi)
- en: 'Alternatively, you can run the `msiexec` command to run the MSI installer from
    Command Prompt:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以运行 `msiexec` 命令从命令提示符运行 MSI 安装程序：
- en: '[PRE37]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You can verify whether the AWS CLI is installed on your Windows machine by
    opening a Command Prompt window and running the `aws --``version` command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过打开命令提示符窗口并运行 `aws --version` 命令，来验证 AWS CLI 是否已安装在你的 Windows 机器上：
- en: '[PRE38]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This will display the installed version of the AWS CLI, confirming its successful
    installation on your system.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示已安装的 AWS CLI 版本，确认其已成功安装到你的系统上。
- en: 'The response should be something like the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的响应应该类似于以下内容：
- en: '[PRE39]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If Windows is unable to find the program, you might need to close and reopen
    the Command Prompt window to refresh the path and re-verify.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Windows 无法找到该程序，您可能需要关闭并重新打开命令提示符窗口以刷新路径并重新验证。
- en: AWS account
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS 账户
- en: 'If you do not have an AWS account, you can create one with the following steps;
    if you do already have one, please skip the AWS credentials configuration part:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有 AWS 账户，可以按照以下步骤创建一个；如果您已经拥有账户，请跳过 AWS 凭证配置部分：
- en: Open the AWS home page at [https://aws.amazon.com/](https://aws.amazon.com/).
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 AWS 首页 [https://aws.amazon.com/](https://aws.amazon.com/)。
- en: Choose **Create an** **AWS account**.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建一个** **AWS 账户**。
- en: Ensure that you provide accurate account information, including your email address,
    and select **Continue**. Entering an incorrect email address can result in being
    unable to access your AWS account.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保提供准确的账户信息，包括您的电子邮件地址，并选择**继续**。输入错误的电子邮件地址可能会导致无法访问您的 AWS 账户。
- en: Choose **Personal** or **Professional**.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**个人**或**专业**。
- en: Enter your company or personal information.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的公司或个人信息。
- en: Read and accept the AWS Customer Agreement.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读并接受 AWS 客户协议。
- en: Choose **Create Account** and **Continue**.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建账户**并**继续**。
- en: Provide your payment information on the **Payment Information** page and select
    **Verify and Add** to proceed. It’s mandatory to provide a valid payment method
    to complete the sign-up process.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**支付信息**页面提供您的支付信息，并选择**验证并添加**以继续。必须提供有效的支付方式才能完成注册过程。
- en: After completing the payment information, you will be asked to verify your phone
    number. You need to select the country or REGION code from the list and provide
    a phone number that you can access in the next few minutes for verification.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成支付信息后，您需要验证您的电话号码。您需要从列表中选择国家或地区代码，并提供一个您可以在接下来的几分钟内访问的电话号码以供验证。
- en: Enter the code displayed in the CAPTCHA, and then submit.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 CAPTCHA 显示的验证码，然后提交。
- en: After the automated system contacts you, you need to enter the PIN you receive
    and then choose the **Continue** option.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自动系统联系您后，您需要输入收到的 PIN 并选择**继续**选项。
- en: On the **Select a Support Plan** page, choose one of the available AWS Support
    plans.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择支持计划**页面，选择一个可用的 AWS 支持计划。
- en: Finally, wait for your new account to be activated. This usually takes a few
    minutes but can take up to 24 hours.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，等待您的新账户激活。这通常需要几分钟，但最长可能需要 24 小时。
- en: Once your account is fully activated, AWS will send you a confirmation email.
    Be sure to check your email inbox and spam folder for the confirmation message.
    After receiving the email message, you will have full access to all AWS services.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的账户完全激活，AWS 会向您发送确认邮件。请务必检查您的电子邮件收件箱和垃圾邮件文件夹以查收确认信息。收到邮件后，您将可以完全访问所有 AWS
    服务。
- en: AWS credentials
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS 凭证
- en: In order to interact with AWS via programmatic methods, it’s required to supply
    your AWS access keys. These keys authenticate your identity when making programmatic
    requests. Access keys could be either temporary credentials that are valid for
    a short-term period or long-term credentials, such as those linked to an IAM user
    or the AWS account’s root user.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过编程方式与 AWS 进行交互，您需要提供 AWS 访问密钥。这些密钥在进行编程请求时验证您的身份。访问密钥可以是有效期较短的临时凭证，也可以是长期凭证，例如与
    IAM 用户或 AWS 账户根用户关联的凭证。
- en: In order to use Terraform with AWS, it is recommended to create a dedicated
    user with specific permissions and generate access keys for the AWS CLI and Terraform
    CLI to communicate and provision resources.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与 AWS 一起使用 Terraform，建议创建一个具有特定权限的专用用户，并为 AWS CLI 和 Terraform CLI 生成访问密钥，以便它们能够通信并配置资源。
- en: Creating an IAM user and credentials for Terraform
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 IAM 用户和 Terraform 凭证
- en: 'Creating an IAM user is a standard practice in AWS for security and resource
    access management. It is possible to create multiple IAM users and provide them
    with specific permissions to AWS resources. The process of creating an IAM user
    is straightforward, and is typically done when new team members join the company
    or when a new application needs access to AWS resources. For Terraform, you need
    to create an IAM user and assign appropriate permissions to provision resources
    as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 IAM 用户是 AWS 中的标准做法，用于安全性和资源访问管理。可以创建多个 IAM 用户并为他们提供特定的 AWS 资源权限。创建 IAM 用户的过程简单，通常是在新团队成员加入公司时或新的应用程序需要访问
    AWS 资源时进行的。对于 Terraform，您需要创建一个 IAM 用户并分配适当的权限以便进行资源配置，如下所示：
- en: Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到AWS管理控制台，并在[https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/)打开IAM控制台。
- en: In the left navigation pane, choose **Users** and then **Add users**.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航窗格中，选择**用户**，然后选择**添加用户**。
- en: Use `terraform` as the username for the new user. This is the sign-in name for
    AWS.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`terraform`作为新用户的用户名。这是AWS的登录名。
- en: Select the type of access this user will have. You can select programmatic access
    and access to the AWS Management Console; I recommend just selecting programmatic
    access so you do not need to maintain a programmatic user’s password life cycle.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择该用户将拥有的访问类型。您可以选择程序化访问和访问AWS管理控制台；我建议只选择程序化访问，这样您就不需要维护程序化用户的密码生命周期。
- en: 'Choose **Next: Permissions**.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**下一步：权限**。
- en: On the `terraform` user to a group, copy permissions from an existing user,
    or attach policies directly. If you are planning to provision all resources with
    this user, you can attach the **AdministratorAccess** policy to the user, but
    this will provide broad permission to all resources in the account, so make sure
    to keep your credentials secret.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`terraform`用户添加到一个组，复制现有用户的权限，或者直接附加策略。如果计划使用此用户提供所有资源，可以将**AdministratorAccess**策略附加到该用户，但这会对账户中的所有资源提供广泛的权限，因此请确保保持凭证的机密性。
- en: 'Choose **Next: Tags**.'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**下一步：标签**。
- en: (Optional) On the **Tags** page, add metadata to the user by attaching tags
    as key-value pairs.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （可选）在**标签**页面，通过附加键值对标签来为用户添加元数据。
- en: 'Choose **Next: Review**. Verify the user permissions to be added to the new
    user. When you are ready to proceed, choose **Create user**.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**下一步：查看**。验证要添加到新用户的权限。当您准备好继续时，选择**创建用户**。
- en: You can view the access keys for the user by selecting the **Show** option next
    to each password and access key. To save the access keys, select the **Download
    .csv** option and save the file to a secure location.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择每个密码和访问密钥旁边的**显示**选项，您可以查看该用户的访问密钥。要保存访问密钥，请选择**下载 .csv**选项，并将文件保存到安全位置。
- en: Now, you have a user and credentials for the next steps.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，您已经有了用户和凭证，可以继续进行接下来的步骤。
- en: Now that you have installed and prepared Terraform for AWS, it’s time to start
    building your first Terraform configuration. With your AWS access keys and user
    permissions in place, you can now begin to write your Terraform code to provision
    your infrastructure in the cloud.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经安装并准备好Terraform用于AWS，是时候开始构建您的第一个Terraform配置了。凭借您的AWS访问密钥和用户权限，您现在可以开始编写Terraform代码，以在云中提供您的基础设施。
- en: Building your first Terraform configuration
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建您的第一个Terraform配置
- en: After installing Terraform and the AWS CLI, it is time to configure connectivity
    between them to be able to create resources with Terraform.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了Terraform和AWS CLI之后，是时候配置它们之间的连接，以便能够使用Terraform创建资源。
- en: 'To authenticate the Terraform AWS provider with your IAM credentials, you need
    to set the `AWS_ACCESS_KEY_ID` environment variable in your terminal by adding
    your key after the `=` sign:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用IAM凭证对Terraform AWS提供程序进行身份验证，您需要通过在终端中将您的密钥添加到`=`符号后，设置`AWS_ACCESS_KEY_ID`环境变量：
- en: '[PRE40]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then add your secret key as follows, again after the `=` sign:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照以下方式再次添加您的密钥，仍然是在`=`符号后：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You can verify your credentials and connectivity with the following command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令验证您的凭证和连接性：
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And you should receive a similar output to the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会收到类似以下的输出：
- en: '[PRE43]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now that you have successfully built your first Terraform configuration, let’s
    move on to building your first Terraform template.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经成功构建了第一个Terraform配置，让我们继续构建第一个Terraform模板。
- en: Building your first Terraform template
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建您的第一个Terraform模板
- en: We have created our AWS account and an IAM user and set up the necessary credentials
    for Terraform and the AWS CLI to communicate with AWS to provision infrastructure.
    Let’s now start developing our first Terraform template.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了AWS账户和一个IAM用户，并设置了Terraform和AWS CLI之间通信所需的凭证，以便提供基础设施。现在，让我们开始开发第一个Terraform模板。
- en: 'A dedicated working directory is required for each Terraform configuration.
    To begin with, create a new directory for your first Terraform project. Any code
    editor or terminal can be used for this purpose, and we will provide the terminal
    commands for your convenience:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Terraform配置都需要一个专用的工作目录。首先，为您的第一个Terraform项目创建一个新目录。可以使用任何代码编辑器或终端，我们将提供终端命令以供您参考：
- en: '[PRE44]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Change into the directory so that we can start to create files in it:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到该目录，以便我们可以开始在其中创建文件：
- en: '[PRE45]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create an empty file to define your infrastructure:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个空文件来定义你的基础设施：
- en: '[PRE46]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Open the `main.tf` file in your preferred text editor and copy the following
    configuration into the file. Save the file once you have added the configuration:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你喜欢的文本编辑器中的`main.tf`文件，并将以下配置复制到该文件中。添加完配置后，保存该文件：
- en: '[PRE47]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Here we explicitly state that we are using the AWS provider plugin from Terraform
    and demanding a version greater than 4.0\. We do not provide the access key/secret
    from the user in IAM that we created, because they were already imported into
    the terminal, and you should never, ever hardcode your credentials in Terraform
    templates! We also supply the REGION in which we want to make all changes. In
    this example, we are using `us-east-1`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们明确声明我们正在使用Terraform的AWS提供者插件，并要求版本大于4.0。我们没有提供我们在IAM中为用户创建的访问密钥/秘密，因为它们已经导入到终端中，并且你永远不应该在Terraform模板中硬编码凭证！我们还提供了我们希望进行所有更改的区域。在这个示例中，我们使用的是`us-east-1`。
- en: We then use the `aws_vpc` resource identifier to state that we are trying to
    bring up a VPC instance, followed by the `example` name identifier. (This name
    can be anything you like.)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`aws_vpc`资源标识符来声明我们要启动一个VPC实例，并跟随`example`名称标识符。（这个名字可以是你喜欢的任何名字。）
- en: We provide the `cidr_block` information to give the VPC the cidr (IP address
    space) information.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供`cidr_block`信息，以为VPC提供cidr（IP地址空间）信息。
- en: 'Now we will run the `terraform init` command in the directory where we created
    our `main.tf` file to download and initialize the appropriate provider plugins.
    In this case, we are downloading the AWS provider plugin we specified in our `main.tf`
    file:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在创建`main.tf`文件的目录中运行`terraform init`命令，以下载并初始化适当的提供者插件。在此情况下，我们将下载在`main.tf`文件中指定的AWS提供者插件：
- en: '[PRE48]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The output should be as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '[PRE49]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The providers are now installed and we have the project initialized. Let’s
    validate our template with the following command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，提供者已经安装，我们已初始化项目。让我们使用以下命令验证我们的模板：
- en: '[PRE50]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The output must be as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 输出必须如下所示：
- en: '[PRE51]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: After verifying our configuration, we can use `terraform fmt` to format our
    configuration files to use the correct format and style. In Terraform’s newer
    versions, the introduction of new formatting rules in `terraform fmt` aren’t considered
    a breaking change. However, our objective is to keep changes to a minimum for
    configurations that already conform to the style guides provided in the Terraform
    documentation.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 验证我们的配置后，我们可以使用`terraform fmt`来格式化我们的配置文件，以使用正确的格式和风格。在Terraform的较新版本中，`terraform
    fmt`中新引入的格式化规则不被视为破坏性更改。然而，我们的目标是尽量减少对已经符合Terraform文档提供的样式指南的配置文件进行更改。
- en: Provisioning and testing your template
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和测试你的模板
- en: 'After the validation, let’s run the `terraform plan` command. This will let
    us see what Terraform will do before we decide to apply it:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 完成验证后，让我们运行`terraform plan`命令。这将让我们在决定是否应用之前看到Terraform将要执行的操作：
- en: '[PRE52]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The output should be as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '[PRE53]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Terraform provides a dependable and secure way to manage your infrastructure
    life cycle through the use of declarative configuration files. The largest hurdle
    encountered when handling **Infrastructure as Code** (**IaC**) is a phenomenon
    known as drift. Drift refers to the discrepancy between the actual state of your
    infrastructure and the state articulated in your configuration.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform通过使用声明式配置文件提供了一种可靠和安全的方式来管理基础设施生命周期。在处理**基础设施即代码**（**IaC**）时，遇到的最大障碍是所谓的漂移现象。漂移是指基础设施的实际状态与配置中所述状态之间的差异。
- en: '`terraform plan` is a very important command to detect drift in Terraform-managed
    resources – you must be able to understand every output and change in the plan’s
    output, especially the line with the summary. In our example, this is as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform plan`是一个非常重要的命令，用于检测Terraform管理的资源的漂移——你必须能够理解每一个输出以及计划输出中的所有变化，特别是包含摘要的那一行。在我们的示例中，输出如下：'
- en: '[PRE54]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'After investigating the changes and verifying that they are what we planned
    and intended, let’s proceed with `terraform apply`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查了更改并验证它们是我们计划和预期的内容后，让我们继续执行`terraform apply`：
- en: '[PRE55]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'After running `apply`, Terraform will run another plan and ask us to verify
    and approve the predicted changes. The output should be similar to the following:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`apply`后，Terraform将运行另一个计划，并要求我们验证并批准预测的更改。输出应类似于以下内容：
- en: '[PRE56]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You should carefully review the output, and if everything looks good, you can
    approve it by typing `yes`. Other than `yes`, infrastructure provisioning will
    be discarded, and `apply` will not provision anything in your environment.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该仔细检查输出内容，如果一切正常，可以通过输入`yes`来批准。除`yes`外，基础设施的配置将被丢弃，`apply`将不会在你的环境中部署任何内容。
- en: 'After your approval, `terraform-cli` will start to deploy the resources you
    have requested, and the additional output should be similar to the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在你批准后，`terraform-cli`将开始部署你请求的资源，附加输出应类似于以下内容：
- en: '[PRE57]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The last line gives the summary of your `terraform apply` command, allowing
    you to easily see what was deployed, added, changed, or destroyed.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行给出了你的`terraform apply`命令的总结，帮助你轻松查看已部署、添加、修改或销毁的内容。
- en: 'After verifying the resource from the AWS web console, you can destroy the
    example resources created in this exercise by running the `terraform` `destroy`
    command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS管理控制台验证资源后，你可以通过运行`terraform destroy`命令来销毁在本练习中创建的示例资源：
- en: '[PRE58]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: When you use Terraform to manage your infrastructure, the `terraform destroy`
    command can be used to terminate resources created by your Terraform project.
    It is the opposite of the `terraform apply` command because it removes all the
    resources specified in your Terraform state. However, it’s important to note that
    the `terraform destroy` command does not destroy resources that are running elsewhere
    and are not managed by the current Terraform project.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用Terraform来管理基础设施时，`terraform destroy`命令可以用来终止由Terraform项目创建的资源。它是`terraform
    apply`命令的相反操作，因为它删除了Terraform状态中指定的所有资源。然而，值得注意的是，`terraform destroy`命令不会销毁在其他地方运行且未由当前Terraform项目管理的资源。
- en: 'The output should look like this:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于此：
- en: '[PRE59]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `-` prefix in `terraform destroy` indicates that the instance will be destroyed.
    Similar to `apply`, Terraform shows its execution plan and waits for approval
    before making any changes. It’s important to carefully review all changes and
    approve them, as there is no way to recover the resources after approval.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform destroy`中的`-`前缀表示实例将被销毁。与`apply`类似，Terraform显示其执行计划并在做出任何更改之前等待批准。仔细审查所有更改并予以批准非常重要，因为一旦批准，资源将无法恢复。'
- en: 'Answer `yes` to execute this plan and destroy the infrastructure:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`yes`来执行此计划并销毁基础设施：
- en: '[PRE60]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Similar to the `apply` command, Terraform will determine the order in which
    to destroy resources. If there are multiple resources with dependencies, Terraform
    will destroy them in the appropriate order with regard to those dependencies.
    In this case, Terraform identified a single VPC with no dependencies and destroyed
    it.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`apply`命令，Terraform将确定销毁资源的顺序。如果有多个资源存在依赖关系，Terraform将按照这些依赖关系的适当顺序销毁它们。在这种情况下，Terraform识别到一个没有依赖关系的VPC并将其销毁。
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to install Terraform and prepare it for use
    with AWS. We covered various installation methods including downloading the binary,
    using a package manager, and compiling from source. Additionally, we discussed
    how to set up an AWS account and create an IAM user for Terraform. We then walked
    through the process of creating a directory for our first Terraform project, pasting
    in configuration code, and using the `terraform apply` command to provision resources.
    Finally, we learned how to use `terraform destroy` to tear down the resources
    created by our Terraform project. With the skills learned in this chapter, you
    should now be able to create and manage infrastructure on AWS using Terraform.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们学习了如何安装Terraform并准备好与AWS一起使用。我们介绍了包括下载二进制文件、使用包管理器和从源代码编译等多种安装方法。此外，我们还讨论了如何设置AWS账户并为Terraform创建IAM用户。接着，我们介绍了如何创建我们的第一个Terraform项目的目录，粘贴配置代码，并使用`terraform
    apply`命令来部署资源。最后，我们学习了如何使用`terraform destroy`命令来销毁我们Terraform项目创建的资源。通过本章学到的技能，你现在应该能够使用Terraform在AWS上创建和管理基础设施。
- en: In the following chapter, we will explore the utilization of Terraform in **IaC**
    projects.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨Terraform在**IaC**项目中的应用。
