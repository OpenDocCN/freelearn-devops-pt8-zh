- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Planning and Designing Infrastructure Projects in AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS中规划和设计基础设施项目
- en: In the world of cloud computing, planning and designing infrastructure projects
    are crucial steps toward achieving the desired outcome. As the cloud computing
    environment evolves, it becomes increasingly important to have a proper plan and
    design in place for your infrastructure. With the help of Terraform, an infrastructure-as-code
    tool, you can easily plan and design your infrastructure projects in **Amazon
    Web** **Services** (**AWS**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在云计算的世界中，规划和设计基础设施项目是实现预期结果的关键步骤。随着云计算环境的不断发展，为基础设施制定合适的规划和设计变得越来越重要。借助Terraform这一基础设施即代码工具，你可以轻松地在**亚马逊网络服务**（**AWS**）中规划和设计基础设施项目。
- en: This chapter will provide you with the necessary knowledge to get started with
    planning and designing infrastructure projects using Terraform in AWS. We will
    discuss the basics of infrastructure project planning, designing your first Terraform
    template in AWS, understanding AWS Providers and Terraform modules, and implementing
    best practices with Terraform AWS modules. By the end of this chapter, you will
    have a solid foundation for planning and designing your infrastructure projects
    in AWS using Terraform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为你提供使用Terraform在AWS中规划和设计基础设施项目所需的基础知识。我们将讨论基础设施项目规划的基本内容、在AWS中设计你的第一个Terraform模板、理解AWS提供者和Terraform模块，并实施Terraform
    AWS模块的最佳实践。通过本章的学习，你将为使用Terraform在AWS中规划和设计基础设施项目打下坚实的基础。
- en: 'In this chapter, we will cover these topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Terraform infrastructure project planning basics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform基础设施项目规划基础
- en: How to design your first Terraform template in AWS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在AWS中设计你的第一个Terraform模板
- en: Understanding AWS Providers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解AWS提供者
- en: Understanding Terraform modules
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Terraform模块
- en: How to implement best practices with Terraform AWS modules
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Terraform AWS模块实施最佳实践
- en: Terraform infrastructure project planning basics
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform基础设施项目规划基础
- en: As technology advances, more businesses and leaders are beginning to adopt **infrastructure
    as code** (**IaC**) to manage their IT infrastructure. With the increasing need
    for flexibility and security in software development, IaC offers a high-level
    code solution to automate the provisioning of infrastructure resources. However,
    it’s important to understand both the potential benefits and challenges that come
    with implementing IaC. In this chapter, we will explore the basics of planning
    and designing infrastructure projects in AWS using Terraform, covering important
    topics such as AWS Providers, Terraform modules, and best practices.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的发展，越来越多的企业和领导者开始采用**基础设施即代码**（**IaC**）来管理其IT基础设施。随着软件开发中对灵活性和安全性的需求日益增加，IaC提供了一种高水平的代码解决方案，自动化基础设施资源的配置。然而，理解实施IaC所带来的潜在好处和挑战也非常重要。在本章中，我们将探讨使用Terraform在AWS中规划和设计基础设施项目的基础知识，涵盖AWS提供者、Terraform模块和最佳实践等重要主题。
- en: The speed benefits
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速度优势
- en: The adoption of cloud computing has brought about IaC, which provides significant
    speed and agility benefits for deploying, modifying, and removing virtual infrastructure
    services. With IaC, teams can interact with infrastructure in a programmatic way,
    allowing for the automation of lifecycle management. In some cases, automation
    solutions can also manage non-programmatic, command-line-interface-based devices
    using IaC management.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算的采用带来了IaC，它为部署、修改和移除虚拟基础设施服务提供了显著的速度和敏捷性优势。通过IaC，团队可以以编程方式与基础设施交互，从而实现生命周期管理的自动化。在某些情况下，自动化解决方案还可以使用IaC管理非编程的命令行界面设备。
- en: The risk management benefits
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风险管理优势
- en: Implementing IaC in an organization can offer numerous benefits. One of the
    primary advantages is the elimination of human error that often occurs during
    manual infrastructure provisioning and configuration. By using IaC, an organization
    can greatly minimize the risks associated with human error and enhance the security
    of its infrastructure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织中实施IaC可以带来许多好处。一个主要的优势是消除了在手动基础设施配置和提供过程中经常发生的人为错误。通过使用IaC，组织可以大大减少与人为错误相关的风险，并增强其基础设施的安全性。
- en: Security, reusability, and governance
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性、可重用性和治理
- en: Setting up an IaC pipeline is crucial for organizations seeking to realize the
    full potential of this technology. Proper setup of an IaC pipeline requires considering
    factors such as security, reusability, and governance. It’s essential to implement
    a complete continuous integration and continuous deployment pipeline that includes
    IaC, especially for applications that require frequent updates. This approach
    can significantly improve an organization’s speed to market while reducing costs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分发挥IaC技术的潜力，设置IaC管道对于组织来说至关重要。正确设置IaC管道需要考虑安全性、可重用性和治理等因素。必须实施一个完整的持续集成和持续部署管道，特别是对于需要频繁更新的应用程序，这对于IaC来说尤其重要。这种方法可以显著提高组织的市场响应速度，同时降低成本。
- en: Team skill sets
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 团队技能集
- en: When transitioning to an IaC platform, it’s essential to consider the skill
    sets of the existing staff. IaC requires a different set of development skills
    that may not be present in the current team. Neglecting to take this into account
    can result in demotivation and disengagement among the staff, particularly if
    coding isn’t a skill set that they have or are interested in acquiring. Therefore,
    it’s essential to provide training and support to help employees adapt to this
    new way of working.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在过渡到IaC平台时，必须考虑现有员工的技能集。IaC需要一套不同的开发技能，而当前团队可能并不具备这些技能。忽视这一点可能会导致员工的失去动力和参与度，特别是当编码不是他们的技能集或他们不愿意学习时。因此，提供培训和支持，帮助员工适应这种新的工作方式至关重要。
- en: The best candidates for automation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化的最佳候选任务
- en: Determining which infrastructure should be treated as code is a crucial decision.
    It’s not worthwhile to automate infrastructure that will be deployed only once
    in the organization’s lifetime, but it is worth automating infrastructure that
    will be regularly deployed for new applications or services. It’s important not
    to get bogged down in automating everything; instead, make sure your IaC efforts
    provide a return on investment over traditional approaches.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 确定哪些基础设施应视为代码是一个关键决策。对于那些仅在组织生命周期中部署一次的基础设施，不值得自动化，但对于那些需要定期部署的新应用程序或服务的基础设施，自动化则是值得的。重要的是不要陷入自动化每一项任务的困境，而是要确保你的IaC工作能够为传统方法提供更好的投资回报。
- en: The types of applications you’ll be running
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将要运行的应用程序类型
- en: Designing the IaC template for an application is critical for its success. The
    configuration should be modularized and driven by the configuration management
    system, and the design process should take into account the application that will
    run on the infrastructure. For instance, if you are planning to deploy a database,
    the IaC design considerations will differ based on whether the application is
    transactional or for reporting purposes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为应用程序设计IaC模板对其成功至关重要。配置应该模块化，并由配置管理系统驱动，设计过程应考虑到将在基础设施上运行的应用程序。例如，如果计划部署数据库，IaC设计的考虑因素将根据应用程序是事务型的还是用于报告的目的而有所不同。
- en: The cost of automating too many tasks
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化过多任务的成本
- en: In the quest to improve efficiency, the general guideline is to automate any
    recurring tasks and reserve manual management for exceptional cases. This approach
    will help manage the expectations of internal stakeholders and departments effectively.
    However, it’s essential to keep a close eye on the **return on investment** (**ROI**)
    for automation, as automating every infrastructure task can lead to cost overruns.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在追求提高效率的过程中，一般的指导原则是自动化所有重复性的任务，将人工管理保留为特殊情况使用。这种方法有助于有效地管理内部利益相关者和部门的期望。然而，密切关注**投资回报率**（**ROI**）对于自动化至关重要，因为自动化每一项基础设施任务可能会导致成本超支。
- en: The critical nature of the code
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码的关键性
- en: As infrastructure is critical to the success of any business, the code used
    to manage it should be treated with the same level of importance. This includes
    having the right processes and backup procedures in place for when issues arise.
    Virtual networks, data centers, and servers require a disciplined approach to
    change management and testing, just like physical infrastructure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施对任何企业的成功至关重要，因此用于管理基础设施的代码应该受到同等重视。这包括为可能出现的问题设置正确的流程和备份程序。虚拟网络、数据中心和服务器需要像物理基础设施一样，采取有纪律的变更管理和测试方法。
- en: The need for software expertise
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对软件专业知识的需求
- en: Collaboration between software engineers and infrastructure engineers is crucial
    for successful IaC implementation. While infrastructure engineers are experts
    in managing and deploying infrastructure, they may lack knowledge of software
    development best practices. By embedding software engineers with the infrastructure
    team, organizations can bridge this gap and leverage the expertise of both teams
    to optimize results. Adopting an inner source model that encourages sharing and
    collaboration can further support this effort.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师和基础设施工程师之间的协作对于成功实施IaC至关重要。虽然基础设施工程师是管理和部署基础设施的专家，但他们可能缺乏软件开发最佳实践的知识。通过将软件工程师嵌入到基础设施团队中，组织可以弥补这一差距，充分利用两个团队的专业知识以优化结果。采用鼓励共享和协作的内部源模型可以进一步支持这一努力。
- en: The impact on agility
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对敏捷性的影响
- en: Start-ups in the rapid growth stage may not be able to prioritize implementing
    IaC, as it can result in a lack of agility. While IaC brings many benefits to
    larger organizations, smaller companies need to balance implementing the necessary
    IaC and keeping their engineers motivated to think outside the box. As a technology
    company, it is important to maintain innovation and original ideas, which can
    be hindered by overreliance on IaC.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 处于快速增长阶段的初创企业可能无法优先实施IaC，因为这可能导致敏捷性不足。虽然IaC为大企业带来了许多好处，但小公司需要在实施必要的IaC和保持工程师创新思维之间找到平衡。作为一家科技公司，保持创新和原创想法非常重要，而过度依赖IaC可能会阻碍这一点。
- en: Integration with existing infrastructure
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与现有基础设施的集成
- en: Before adopting IaC, businesses must assess the potential risks and benefits.
    Implementing IaC may come with adoption, security, and scalability challenges,
    such as integrating new frameworks with existing infrastructure. It requires a
    considerable amount of planning, time, and collaboration with other teams, including
    those responsible for security and compliance.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用IaC之前，企业必须评估潜在的风险和收益。实施IaC可能带来采纳、安全性和可扩展性方面的挑战，例如将新框架与现有基础设施集成。这需要大量的规划、时间，并与其他团队合作，包括负责安全性和合规性的团队。
- en: Goals and available resources
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标和可用资源
- en: Introducing IaC into an organization requires careful planning and consideration
    of the goals for the transition. While IaC can bring significant benefits, such
    as reduced human error and increased security, there are also potential adoption,
    security, and scalability gaps to consider. It’s essential to have a clear plan
    for integrating new frameworks with existing infrastructure and collaborating
    with other teams, including security and compliance.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将IaC引入组织需要仔细规划，并考虑过渡的目标。虽然IaC可以带来显著的好处，例如减少人为错误和提高安全性，但也有可能出现采纳、安全性和可扩展性方面的缺口。必须有一个清晰的计划，将新框架与现有基础设施集成，并与其他团队（包括安全和合规团队）进行合作。
- en: Moreover, it’s crucial to be mindful of the impact on existing tech and personnel
    resources. Pushing inexperienced engineers in a new direction can create an unstable
    organization. To minimize this risk, IaC should be incorporated as part of modernization
    efforts, with a focus on upskilling engineers to handle advanced projects. By
    doing so, organizations can ensure a smoother and more effective transition to
    IaC while maximizing its potential benefits.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，必须注意对现有技术和人员资源的影响。将经验不足的工程师推向一个新的方向可能会导致组织不稳定。为了最小化这种风险，基础设施即代码（IaC）应作为现代化努力的一部分进行引入，重点是提升工程师的技能，使其能够处理高级项目。通过这样做，组织可以确保更加顺畅和高效地过渡到IaC，同时最大化其潜在的好处。
- en: The long-term plan
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 长期计划
- en: When implementing IaC, it’s important to plan for the long term. This includes
    considering factors such as maintenance, security, and development time. It’s
    also important to have an exit plan in place, which may involve multiple paths
    depending on various scenarios. By having a solid plan in place, you can ensure
    that your investment in IaC will pay off and that you can adapt to any changes
    or challenges that arise.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施IaC时，必须考虑长期计划。这包括考虑诸如维护、安全性和开发时间等因素。还需要有退出计划，这可能涉及根据不同的情况采取多条路径。通过制定一个坚实的计划，你可以确保对IaC的投资获得回报，并能够适应任何可能出现的变化或挑战。
- en: Quality control and security
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 质量控制和安全性
- en: Implementing IaC in the eDiscovery space requires a thoughtful and deliberate
    approach to avoid introducing unintended vulnerabilities. While traditional infrastructure
    deployment plans account for security holes, an IaC approach offers many benefits.
    However, to fully realize these benefits, it is essential to establish a comprehensive
    program that includes quality control and security measures. This will help ensure
    the stability and security of the infrastructure.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在eDiscovery领域实施IaC需要一种深思熟虑且谨慎的方法，以避免引入意外的漏洞。虽然传统的基础设施部署计划会考虑到安全漏洞，但IaC方法提供了许多好处。然而，要充分实现这些好处，必须建立一个全面的程序，其中包括质量控制和安全措施。这将有助于确保基础设施的稳定性和安全性。
- en: How to design your first Terraform template in AWS
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在AWS中设计您的第一个Terraform模板
- en: Designing your first Terraform template in AWS can be an intimidating task if
    you’re new to IaC. However, understanding the fundamentals and best practices
    can make the process much smoother. In this section, we will explore the key components
    of designing a Terraform template, including defining resources, understanding
    AWS Providers, and utilizing Terraform modules. We will also cover tips for implementing
    best practices with Terraform AWS modules, so you can design and deploy reliable
    and scalable infrastructure in AWS with confidence.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是IaC新手，设计您的第一个AWS Terraform模板可能是一个令人生畏的任务。然而，理解基础知识和最佳实践可以让这一过程更加顺利。在本节中，我们将探讨设计Terraform模板的关键组件，包括定义资源、理解AWS提供程序以及利用Terraform模块。我们还将涵盖使用Terraform
    AWS模块实施最佳实践的技巧，以便您能够自信地在AWS中设计和部署可靠且可扩展的基础设施。
- en: Authentication with AWS
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS身份验证
- en: 'To create and manage resources in AWS using Terraform, you first need to establish
    a connection between Terraform and AWS. This connection is authenticated using
    programmatic API keys, which consist of an access key and a secret key. These
    keys are used to access and manage your AWS resources through Terraform. In this
    section, we will explore some sample configurations that illustrate how to use
    API keys to provision your first infrastructure with Terraform in AWS:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Terraform在AWS中创建和管理资源，首先需要在Terraform和AWS之间建立连接。此连接通过编程API密钥进行身份验证，API密钥由访问密钥和秘密密钥组成。这些密钥用于通过Terraform访问和管理AWS资源。在本节中，我们将探讨一些示例配置，说明如何使用API密钥在AWS中通过Terraform提供第一个基础设施：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To start, we should go and create these access and secret keys for Terraform
    from your AWS account.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该从AWS账户中创建这些访问密钥和秘密密钥，用于Terraform。
- en: Setting up programmatic access
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置编程访问
- en: 'Log in to the AWS Management Console, and then in the services, go to IAM,
    and perform the following steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到AWS管理控制台，然后在服务中，进入IAM，执行以下步骤：
- en: 'Add the new user and key in the **User** **name** field:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**用户名**字段中添加新用户和密钥：
- en: '![Figure 5.1 – Adding user](img/B18198_05_01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 添加用户](img/B18198_05_01.jpg)'
- en: Figure 5.1 – Adding user
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 添加用户
- en: 'Select **Attach existing policies directly** and **AdmininistratorAccess**:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**直接附加现有策略**和**AdministratorAccess**：
- en: "![Figure 5.2 – Setting permission\uFEFFs](img/B18198_05_02.jpg)"
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 设置权限](img/B18198_05_02.jpg)'
- en: Figure 5.2 – Setting permissions
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 设置权限
- en: Click **Next** until you see the following screen.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**，直到看到以下屏幕。
- en: '![Figure 5.3 – Success screen](img/B18198_05_03.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 成功屏幕](img/B18198_05_03.png)'
- en: Figure 5.3 – Success screen
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 成功屏幕
- en: Complete the process and get your keys.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此过程并获取您的密钥。
- en: After generating your access key ID and secret access key in the AWS console,
    it is important to securely store these credentials. While Terraform allows for
    the access key and secret key to be hardcoded within the configuration file, this
    approach is not recommended due to security risks. Instead, it is advised to save
    these keys as environment variables or as an AWS config profile.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在AWS控制台生成访问密钥ID和秘密访问密钥后，必须安全地存储这些凭据。虽然Terraform允许在配置文件中硬编码访问密钥和秘密密钥，但由于安全风险，不推荐这种做法。相反，建议将这些密钥保存为环境变量或AWS配置文件。
- en: 'Set as environment variables:'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置为环境变量：
- en: To authenticate with AWS in your terminal or command line, you will need to
    run specific commands with your access and secret key.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在终端或命令行中使用AWS进行身份验证，您需要运行包含您的访问密钥和秘密密钥的特定命令。
- en: '[PRE1]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Set up as an AWS config profile:'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置为AWS配置文件：
- en: '[PRE2]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After this, you will be asked to fill in the following information that you
    have downloaded from the AWS console:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成后，系统会提示您填写从AWS控制台下载的以下信息：
- en: '[PRE3]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Download and install Terraform CLI
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装 Terraform CLI
- en: To get started with Terraform, you can download the single-file binary and run
    it without any additional installation. The installation process is straightforward
    and can be completed by following the instructions provided on the official Terraform
    website.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要开始使用 Terraform，你可以下载单文件二进制文件并直接运行，无需额外的安装。安装过程非常简单，可以按照官方 Terraform 网站提供的说明完成。
- en: 'Once Terraform is installed, you can start creating your IaC using the Terraform
    CLI:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦 Terraform 安装完成，你可以开始使用 Terraform CLI 创建你的基础设施即代码（IaC）：
- en: '[https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli](https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli](https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli)'
- en: 'Terraform configuration:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Terraform 配置：
- en: 'Terraform requires a specific file known as the Terraform configuration file
    as input. This file is written in `*.tf` extension. This example assumes that
    the AWS config profile is being used and references the default profile for authentication:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Terraform 需要一个特定的文件，称为 Terraform 配置文件作为输入。该文件的扩展名为 `*.tf`。这个示例假设使用 AWS 配置文件并引用默认配置文件进行身份验证：
- en: '[PRE4]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you are using the environment variables method for authentication, you can
    remove the profile line from the Provider block in your Terraform configuration
    file.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用环境变量方法进行身份验证，可以从 Terraform 配置文件中的提供者块中删除配置文件行。
- en: A Terraform configuration file consists of several elements, known as blocks,
    including Providers, resources, and more.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个 Terraform 配置文件由多个元素组成，这些元素被称为块，包括提供者、资源等。
- en: 'Here is an example of how the syntax for a Terraform configuration file block
    is formatted:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是 Terraform 配置文件块语法格式的示例：
- en: '[PRE5]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Terraform offers a wide range of `BLOCK_TYPE` options, with the primary one
    being the resource. The other blocks support building the specified resource.
    These blocks include providers, which represent providers such as AWS, Google,
    and Azure:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 提供了多种 `BLOCK_TYPE` 选项，主要的选项是资源。其他块支持构建指定的资源。这些块包括提供者，代表如 AWS、Google
    和 Azure 等提供者：
- en: '`providers`: Specifies the name of the Provider, such as AWS, Google, and Azure'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`providers`：指定提供者的名称，例如 AWS、Google 和 Azure'
- en: '`resources`: Specifies a specific resource within the Provider, such as `aws_instance`
    for AWS'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`：指定提供者中的特定资源，例如 AWS 中的 `aws_instance`'
- en: '`variable`: Declares input variables for the Terraform configuration'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variable`：声明 Terraform 配置的输入变量'
- en: '`output`: Declares output variables that will be stored in the Terraform state
    file'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output`：声明将在 Terraform 状态文件中存储的输出变量'
- en: '`local`: Assigns a value to an expression, which can be used as a temporary
    variable within a module'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local`：为表达式分配一个值，这个值可以作为模块中的临时变量使用'
- en: '`module`: A container for multiple resources that are used together'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module`：用于一起使用的多个资源的容器'
- en: '`data`: Collects data from the remote Provider and saves it as a data source'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：从远程提供者收集数据并将其保存为数据源'
- en: Create your first AWS infrastructure with Terraform
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Terraform 创建你的第一个 AWS 基础设施
- en: 'Here are the steps to practically apply Terraform and create an EC2 instance:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实际应用 Terraform 并创建 EC2 实例的步骤：
- en: Create a directory for your Terraform project and save the following code as
    a file named `main.tf`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的 Terraform 项目创建一个目录，并将以下代码保存为名为 `main.tf` 的文件。
- en: Initialize the directory using the `terraform` `init` command.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `terraform` `init` 命令初始化目录。
- en: Verify the proposed changes by running the `terraform` `plan` command.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `terraform` `plan` 命令来验证提议的更改。
- en: If you are satisfied with the changes that Terraform plans to make, execute
    `terraform apply` to commit and provision the AWS infrastructure.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你对 Terraform 所计划进行的更改感到满意，执行 `terraform apply` 来提交并配置 AWS 基础设施。
- en: Step 1 – creating a template file for Terraform AWS infrastructure
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1 – 创建 Terraform AWS 基础设施的模板文件
- en: To create an EC2 instance in AWS using Terraform, we first need to create a
    directory and generate a Terraform configuration file named `main.tf`. It’s important
    to ensure that no other `*.tf` files are present in the directory, as Terraform
    considers all files ending with the `.tf` extension as part of the provisioning
    process.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 AWS 上使用 Terraform 创建 EC2 实例，首先需要创建一个目录并生成一个名为 `main.tf` 的 Terraform 配置文件。确保目录中没有其他
    `*.tf` 文件，因为 Terraform 会将所有以 `.tf` 扩展名结尾的文件视为配置过程的一部分。
- en: 'We can copy the following content and save it as `main.tf`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以复制以下内容并将其保存为 `main.tf` 文件：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To provision an AWS EC2 instance using Terraform, you need to set the required
    arguments for the `aws_instance` resource. While there are many different arguments
    available, for this example, we will only set the two required arguments:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Terraform 配置 AWS EC2 实例，你需要为 `aws_instance` 资源设置必需的参数。虽然有很多不同的参数可供选择，但在这个例子中，我们只设置两个必需的参数：
- en: '`ami`: To launch an EC2 instance with Terraform, you need to specify the `ami`
    parameter is set to the ID of an Ubuntu 20.04 AMI in the `us-east-2` region, which
    is free to use. It’s important to note that AMI IDs are different in every AWS
    region, so if you change the region parameter to something other than `us-east-2`,
    you’ll need to manually look up the corresponding Ubuntu AMI ID for that region
    and copy it into the `ami` parameter.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ami`：要使用 Terraform 启动 EC2 实例，必须指定 `ami` 参数，该参数设置为 `us-east-2` 区域中一个免费的 Ubuntu
    20.04 AMI 的 ID。需要注意的是，AMI ID 在每个 AWS 区域中都是不同的，因此，如果你将区域参数更改为 `us-east-2` 以外的其他区域，你需要手动查找该区域对应的
    Ubuntu AMI ID，并将其复制到 `ami` 参数中。'
- en: '`instance_type`: The EC2 instance type determines the amount of CPU, memory,
    disk space, and networking capacity available. Each type offers different specifications,
    and the example provided uses `t2.micro`, which offers one virtual CPU and 1 GB
    of memory, and is included in the AWS Free Tier.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance_type`：EC2 实例类型决定了可用的 CPU、内存、磁盘空间和网络容量。每种类型提供不同的规格，示例中使用的是 `t2.micro`，它提供一个虚拟
    CPU 和 1 GB 的内存，并且包含在 AWS 免费套餐中。'
- en: Step 2 – initialize Terraform
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步 – 初始化 Terraform
- en: 'After saving the `main.tf` file in the newly created directory, the next step
    is to initialize Terraform. This process is similar to initializing a local repository
    using `git` `init`. The purpose of this step is to set up the Terraform environment
    and download any necessary plugins or modules. To initialize Terraform, open your
    terminal, navigate to the directory where the `main.tf` file is saved, and run
    the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 `main.tf` 文件保存在新创建的目录中后，下一步是初始化 Terraform。这个过程类似于使用 `git` `init` 初始化本地仓库。此步骤的目的是设置
    Terraform 环境并下载所需的插件或模块。要初始化 Terraform，请打开终端，导航到保存 `main.tf` 文件的目录，然后运行以下命令：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The response should be similar to the following output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 响应应该类似于以下输出：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When working with Terraform, the code for providers such as AWS, Azure, and
    GCP are not included in the Terraform binary. Therefore, when starting with new
    Terraform code, it’s essential to run the command `terraform init` to scan the
    code, identify which providers are being used, and download the corresponding
    code for them. By default, this code is downloaded into a `.terraform` folder,
    which serves as Terraform’s scratch directory. Additionally, Terraform records
    information about the downloaded Provider code into a `.terraform.lock.hcl` file.
    It’s important to note that the `init` command can be safely executed multiple
    times and is idempotent. In later chapters, we will explore further uses for the
    `init` command and `.``terraform` folder.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Terraform 时，像 AWS、Azure 和 GCP 等提供商的代码并不包含在 Terraform 二进制文件中。因此，在开始编写新的 Terraform
    代码时，必须运行 `terraform init` 命令来扫描代码、识别正在使用的提供商，并下载相应的代码。默认情况下，这些代码会下载到 `.terraform`
    文件夹中，作为 Terraform 的临时目录。此外，Terraform 会将有关已下载提供商代码的信息记录到 `.terraform.lock.hcl`
    文件中。需要注意的是，`init` 命令可以安全地多次执行，并且是幂等的。在后续章节中，我们将进一步探讨 `init` 命令和 `.terraform` 文件夹的其他用途。
- en: Step 3 – pre-validate/predict the change—a pilot run
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步 – 预验证/预测更改——试运行
- en: 'Running the `terraform plan -out tfplan` command will provide detailed information
    about the changes that will be made to your AWS infrastructure. The `-out` `tfplan`
    flag will save the `plan` output to a file named `tfplan`. This ensures that the
    planned changes will be applied without any modification, and what is seen during
    the planning phase will be committed. It is now time to apply the plan by running
    the `terraform apply` `tfplan` command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `terraform plan -out tfplan` 命令将提供有关将对你的 AWS 基础设施进行哪些更改的详细信息。`-out` `tfplan`
    标志会将 `plan` 输出保存到名为 `tfplan` 的文件中。这确保计划中的更改将不作修改地应用，并且在计划阶段看到的内容将被提交。现在是时候通过运行
    `terraform apply` `tfplan` 命令来应用该计划了：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the previous command should display the changes that Terraform
    plans to make to your AWS infrastructure. It should look similar to the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出应该显示 Terraform 计划对你的 AWS 基础设施进行的更改。输出应该类似于以下内容：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When you execute the `terraform plan` command, Terraform will provide a detailed
    output of what changes it plans to make to your AWS infrastructure. It’s a great
    way to verify the resources that will be created or destroyed and to see whether
    anything unexpected will happen.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行 `terraform plan` 命令时，Terraform 会提供一份详细的输出，展示它计划对 AWS 基础设施做出的变更。这是验证将要创建或删除的资源、并检查是否有任何意外情况发生的好方法。
- en: Keep in mind that when making modifications to existing resources, Terraform
    may need to destroy and recreate them. In such cases, the output will mention
    that the resource is going to be destroyed. Make sure to review the output carefully
    to avoid unintended results.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当对现有资源进行修改时，Terraform 可能需要销毁并重新创建它们。在这种情况下，输出会提到该资源将被销毁。确保仔细查看输出，以避免出现意外结果。
- en: The `plan` command is an essential tool for verifying your Terraform code before
    applying it to your infrastructure. The output of the command is similar to the
    output of the `diff` command in Unix, Linux, and Git. The output displays a plus
    sign (`+`) for resources that will be created, a minus sign (`-`) for resources
    that will be deleted, and a tilde sign (`~`) for resources that will be modified
    in place.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`plan` 命令是一个重要的工具，用于在将 Terraform 代码应用于基础设施之前进行验证。该命令的输出类似于 Unix、Linux 和 Git
    中的 `diff` 命令输出。输出中，创建的资源会显示加号（`+`），删除的资源会显示减号（`-`），就地修改的资源会显示波浪号（`~`）。'
- en: 'In the case of the preceding output, Terraform is planning on creating a single
    EC2 instance and nothing else, which is exactly what you want. Be sure to monitor
    the last line of the output every time you run the `plan` command to ensure that
    there are no unintended results:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述输出中，Terraform 计划创建一个单独的 EC2 实例，没有其他变更，这正是你想要的。每次运行 `plan` 命令时，一定要监控最后一行输出，确保没有意外结果：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Step 4 – apply the plan with terraform apply
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4 – 使用 terraform apply 应用计划
- en: Now that we have confirmed our changes with the `terraform plan` command, we
    can move forward and execute the changes using the `terraform apply` command.
    Unlike `terraform plan`, which is a dry run, `terraform apply` makes real changes
    to our AWS infrastructure based on the configuration file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用 `terraform plan` 命令确认了我们的变更，可以继续执行变更，使用 `terraform apply` 命令。与 `terraform
    plan`（干运行）不同，`terraform apply` 会根据配置文件对我们的 AWS 基础设施进行实际变更。
- en: 'Be sure to double-check the output before entering `yes` to apply the changes.
    Once you have confirmed the changes, Terraform will begin creating the infrastructure
    resources:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入 `yes` 执行变更前，务必再次检查输出。一旦确认变更，Terraform 就会开始创建基础设施资源：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output should be as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You’ll observe that the `apply` command displays the same plan output and seeks
    your confirmation on whether you wish to proceed with said plan. Although the
    `plan` command is available separately, it’s primarily useful for quick assessments
    and during code reviews. Most often, you’ll directly execute the `apply` command
    and review the plan output it presents.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现 `apply` 命令会显示相同的计划输出，并请求你确认是否继续执行该计划。尽管 `plan` 命令可以单独使用，但它主要用于快速评估和代码审查过程中。通常情况下，你会直接执行
    `apply` 命令，并查看它所展示的计划输出。
- en: 'Type `yes` and hit *Enter* to deploy the EC2 instance:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 `yes` 并按 *Enter* 键以部署 EC2 实例：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Congratulations! You have successfully deployed an EC2 instance in your AWS
    account using Terraform. To confirm this, go to the EC2 console and check that
    your instance has been provisioned.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功使用 Terraform 在 AWS 账户中部署了 EC2 实例。为了确认这一点，进入 EC2 控制台，检查你的实例是否已被创建。
- en: Understanding AWS Providers
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 AWS 提供者
- en: When working with Terraform to provision infrastructure in AWS, it’s crucial
    to understand the concept of AWS Providers. In Terraform, a Provider is responsible
    for understanding the API interactions with a particular service and exposing
    the available resources and data sources. AWS is one of the most widely used cloud
    providers, and Terraform provides a rich set of AWS Provider resources to manage
    AWS infrastructure. In this section, we’ll explore what AWS Providers are, how
    to configure and authenticate them, and best practices for working with AWS Providers
    in Terraform.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Terraform 来配置 AWS 中的基础设施时，理解 AWS 提供商的概念至关重要。在 Terraform 中，提供商负责理解与特定服务的
    API 交互，并暴露可用的资源和数据源。AWS 是最广泛使用的云提供商之一，Terraform 提供了一套丰富的 AWS 提供商资源来管理 AWS 基础设施。在本节中，我们将探讨
    AWS 提供商是什么，如何配置和认证它们，以及在 Terraform 中使用 AWS 提供商的最佳实践。
- en: What are AWS Providers and why are they important in Terraform?
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 AWS 提供商，为什么它们在 Terraform 中如此重要？
- en: AWS Providers are plugins that allow Terraform to interact with the AWS API
    to manage infrastructure resources in AWS. They enable Terraform to provision,
    modify, and delete AWS resources such as EC2 instances, S3 buckets, and VPCs.
    Providers are critical components of Terraform, allowing it to automate the provisioning
    of infrastructure across multiple cloud platforms and on-premises data centers.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供商是允许 Terraform 与 AWS API 交互以管理 AWS 基础设施资源的插件。它们使 Terraform 能够在 AWS 中创建、修改和删除资源，例如
    EC2 实例、S3 存储桶和 VPC。提供商是 Terraform 的关键组件，使其能够在多个云平台和本地数据中心之间自动化基础设施的配置。
- en: How to configure an AWS Provider in your Terraform code
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 Terraform 代码中配置 AWS 提供商
- en: Configuring an AWS Provider in Terraform is simple and straightforward. You
    just need to specify the AWS Provider and the region you want to work within your
    Terraform code. You can also optionally set your AWS access and secret keys as
    environment variables or use an AWS credentials file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Terraform 中配置 AWS 提供商是简单直接的。您只需要在 Terraform 代码中指定 AWS 提供商以及您希望使用的区域。您还可以选择将
    AWS 的访问密钥和秘密密钥设置为环境变量，或使用 AWS 凭证文件。
- en: 'Here’s an example of how to configure the AWS Provider in your Terraform code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在您的 Terraform 代码中配置 AWS 提供商的示例：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, we’re using the `aws` Provider and setting the region to `us-west-2`.
    This means that any AWS resources we create with Terraform will be created in
    the US west (Oregon) region.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用 `aws` 提供商并将区域设置为 `us-west-2`。这意味着我们使用 Terraform 创建的任何 AWS 资源将位于美国西部（俄勒冈）地区。
- en: Once you have configured the AWS Provider in your Terraform code, you can start
    creating AWS resources using Terraform.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在 Terraform 代码中配置了 AWS 提供商，您就可以开始使用 Terraform 创建 AWS 资源。
- en: Understanding the different versions of the AWS Provider and their compatibility
    with Terraform
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解不同版本的 AWS 提供商及其与 Terraform 的兼容性
- en: The AWS Provider for Terraform is versioned separately from Terraform itself.
    Each release of the AWS Provider includes new features, bug fixes, and compatibility
    updates for new AWS services and features. It’s important to check the compatibility
    of the AWS Provider with your version of Terraform before upgrading.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供商的版本是与 Terraform 本身分开版本控制的。每个 AWS 提供商的发布都包括新功能、错误修复以及新 AWS 服务和功能的兼容性更新。在升级之前，检查
    AWS 提供商与您所使用的 Terraform 版本的兼容性非常重要。
- en: When using a version of Terraform that is not compatible with the AWS Provider,
    you may experience issues such as errors when running Terraform commands or unexpected
    behavior when deploying resources.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用与 AWS 提供商不兼容的 Terraform 版本时，您可能会遇到运行 Terraform 命令时的错误或在部署资源时出现意外行为。
- en: To check the compatibility of the AWS Provider with your version of Terraform,
    you can refer to the AWS Provider release notes or the Terraform documentation.
    In general, it’s recommended to always use the latest version of the AWS Provider
    that is compatible with your version of Terraform to take advantage of the latest
    features and bug fixes.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 AWS 提供商与您的 Terraform 版本的兼容性，您可以参考 AWS 提供商的发布说明或 Terraform 文档。通常建议始终使用与您的
    Terraform 版本兼容的最新版本的 AWS 提供商，以利用最新的功能和错误修复。
- en: Best practices for working with AWS Providers in Terraform
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Terraform 中使用 AWS 提供商的最佳实践
- en: 'Here are some best practices for working with AWS Providers in Terraform:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Terraform 中使用 AWS 提供商的一些最佳实践：
- en: Keep your AWS Provider version up to date to ensure compatibility with the latest
    features and bug fixes.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持 AWS 提供商版本的最新，以确保与最新功能和错误修复的兼容性。
- en: Use separate profiles for each Terraform workspace in order to have different
    AWS credentials for different environments.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个 Terraform 工作空间使用单独的配置文件，以便为不同的环境使用不同的 AWS 凭证。
- en: Use AWS IAM roles and policies to restrict access to your resources and use
    the least-privilege principle.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 AWS IAM 角色和策略来限制对资源的访问，并使用最小权限原则。
- en: Use Terraform’s `plan` and `apply` commands to test changes before deploying
    them to production.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Terraform 的 `plan` 和 `apply` 命令在将更改部署到生产环境之前进行测试。
- en: Use modules to encapsulate and reuse Terraform code, including AWS Provider
    configurations.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用模块来封装和重用 Terraform 代码，包括 AWS 提供程序配置。
- en: Follow the principle of least configuration, and avoid configuring unnecessary
    settings in your AWS Provider block.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遵循最小配置原则，避免在 AWS 提供程序块中配置不必要的设置。
- en: Use Terraform Cloud or Terraform Enterprise to securely store and manage your
    AWS credentials, as well as to collaborate with your team on infrastructure changes.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Terraform Cloud 或 Terraform Enterprise 来安全地存储和管理 AWS 凭证，并与团队合作进行基础设施更改。
- en: Understanding Terraform modules
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Terraform 模块
- en: Terraform modules are reusable, encapsulated packages of Terraform code that
    allow you to efficiently manage and organize your infrastructure. They help you
    to abstract common infrastructure patterns, reduce code duplication, and make
    it easier to maintain, update, and share your infrastructure code. In this section,
    we’ll dive into the details of Terraform modules and learn how to use them effectively
    to manage your infrastructure.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 模块是可重用的、封装的 Terraform 代码包，允许你高效地管理和组织基础设施。它们帮助你抽象常见的基础设施模式，减少代码重复，并使基础设施代码的维护、更新和共享变得更加容易。在本节中，我们将深入探讨
    Terraform 模块的细节，并学习如何有效地使用它们来管理你的基础设施。
- en: What is a Terraform module?
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Terraform 模块？
- en: 'Terraform modules are powerful features that allow you to encapsulate a group
    of resources dedicated to one task into a collection of standard configuration
    files within a dedicated directory. This reduces the amount of code needed for
    similar infrastructure components and makes it easier to manage and reuse configuration
    code. When you run Terraform commands from a module directory, it is considered
    the root module. In fact, every Terraform configuration is part of a module. The
    following is an example of a simple set of Terraform configuration files:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 模块是强大的功能，允许你将专门用于某一任务的资源组封装到一个标准配置文件集合中，并将其放在专用目录内。这减少了为类似基础设施组件编写的代码量，并使管理和重用配置代码变得更加容易。当你从一个模块目录运行
    Terraform 命令时，它被视为根模块。实际上，每个 Terraform 配置都是模块的一部分。以下是一个简单的 Terraform 配置文件集合的示例：
- en: '![Figure 5.4 – Terraform configuration files](img/B18198_05_04.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – Terraform 配置文件](img/B18198_05_04.jpg)'
- en: Figure 5.4 – Terraform configuration files
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – Terraform 配置文件
- en: If you are running Terraform commands from within the `minimal-module` directory,
    the contents of that directory are considered the root module. This means that
    the files in this directory define a single module, which could contain one or
    more resources.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从 `minimal-module` 目录中运行 Terraform 命令，该目录的内容将被视为根模块。这意味着该目录中的文件定义了一个单独的模块，可能包含一个或多个资源。
- en: Using modules
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模块
- en: When working with Terraform, it’s important to understand how to organize your
    code to manage complexity and reuse code across different projects. One way to
    achieve this is by using Terraform modules. A module is essentially a collection
    of configuration files in a dedicated directory that encapsulates groups of resources
    dedicated to one task, reducing the amount of code you must develop for similar
    infrastructure components. These modules can be called from other directories
    through module blocks, allowing you to reuse code across different projects. In
    this context, a module that is called by another configuration is referred to
    as a child module.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Terraform 时，了解如何组织代码以管理复杂性并在不同项目之间重用代码是非常重要的。实现这一目标的一种方式是使用 Terraform 模块。模块本质上是一个包含配置文件的专用目录，封装了一组专门用于某一任务的资源，减少了为类似基础设施组件开发的代码量。这些模块可以通过模块块从其他目录调用，从而使代码在不同项目之间得以重用。在这个背景下，由另一个配置调用的模块被称为子模块。
- en: '![Figure 5.5 –  Child module](img/B18198_05_05.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – 子模块](img/B18198_05_05.jpg)'
- en: Figure 5.5 – Child module
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 子模块
- en: Local and remote modules
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地模块和远程模块
- en: Terraform modules can be loaded from either a local file system or a remote
    source. Remote sources supported by Terraform include the Terraform Registry,
    several version control systems, HTTP URLs, and private module registries in Terraform
    Cloud or Terraform Enterprise.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 模块可以从本地文件系统或远程源加载。Terraform 支持的远程源包括 Terraform Registry、几种版本控制系统、HTTP
    URL，以及 Terraform Cloud 或 Terraform Enterprise 中的私有模块注册表。
- en: Module best practices
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块最佳实践
- en: 'Using Terraform modules is essential for creating reusable and maintainable
    infrastructure code. They provide a way to encapsulate related resources into
    a single component and can be used to share common patterns and best practices
    across teams and projects. To get the most out of modules, it is recommended to
    follow these best practices:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Terraform 模块对于创建可重用和可维护的基础设施代码至关重要。它们提供了一种将相关资源封装到单个组件中的方式，并可用于在团队和项目之间共享常见模式和最佳实践。为了充分利用模块，建议遵循以下最佳实践：
- en: It is important to follow a naming convention while naming your Terraform Provider
    `terraform-<PROVIDER>-<NAME>`. This convention must be followed if you plan to
    publish your Provider to the Terraform Cloud or Terraform Enterprise module registries.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在为 Terraform Provider 命名时，遵循命名约定 `terraform-<PROVIDER>-<NAME>` 是很重要的。如果您计划将您的
    Provider 发布到 Terraform Cloud 或 Terraform Enterprise 模块注册表中，必须遵循此约定。
- en: Consider using modules when designing and writing your Terraform configuration,
    even for smaller projects. Even if you are the only person working on the configuration,
    the benefits of using modules can save time and effort in the long run.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计和编写 Terraform 配置时，考虑使用模块，即使是对于较小的项目也是如此。即使您是唯一在配置上工作的人，使用模块的好处可以在长期内节省时间和精力。
- en: To organize your code and reduce the burden of maintaining and updating your
    configuration as your infrastructure grows in complexity, it is recommended to
    use local modules. This is beneficial even if you are not using or publishing
    remote modules. Therefore, it is best to organize your configuration with modules
    from the beginning.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了组织您的代码并减轻随着基础设施复杂性增长而维护和更新配置的负担，建议使用本地模块。即使您不使用或发布远程模块，这也是有益的。因此，最好从一开始就使用模块组织您的配置。
- en: Leverage the public Terraform Registry to discover useful modules. This will
    help you implement your configuration more efficiently and confidently, as you
    can rely on the pre-built modules to implement common infrastructure scenarios
    instead of building everything from scratch.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用公共 Terraform Registry 发现有用的模块。这将帮助您更高效和自信地实施您的配置，因为您可以依赖预构建的模块来实现常见的基础设施场景，而不是从头开始构建一切。
- en: Collaboration is a key aspect of infrastructure management, and modules enable
    teams to work together effectively to create and maintain infrastructure. To enhance
    collaboration, you can publish and share modules with your team. You can publish
    modules publicly on the Terraform Registry or privately through Terraform Cloud
    or Terraform Enterprise. Module users can then reference the published child modules
    in their root module or deploy no-code ready modules through the Terraform Cloud
    UI.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 协作是基础设施管理的关键方面，而模块使团队能够有效地共同创建和维护基础设施。为了增强协作，您可以向团队发布和共享模块。您可以在 Terraform Registry
    上公开发布模块，也可以通过 Terraform Cloud 或 Terraform Enterprise 私下发布。模块用户可以在其根模块中引用已发布的子模块，或通过
    Terraform Cloud UI 部署无代码准备的模块。
- en: What problems do Terraform modules solve?
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Terraform 模块解决了哪些问题？
- en: 'When working with Terraform, managing large and complex infrastructure can
    be a daunting task. Terraform modules provide a solution to this problem by encapsulating
    groups of resources and configurations into reusable and shareable components.
    In this section, we’ll explore the various problems that Terraform modules solve
    and how they can benefit your infrastructure management workflow:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Terraform 时，管理庞大和复杂的基础设施可能是一项艰巨的任务。Terraform 模块通过将资源组和配置封装成可重用和可共享的组件，为这个问题提供了解决方案。在本节中，我们将探讨
    Terraform 模块解决的各种问题以及它们如何有助于您的基础设施管理工作流程：
- en: '**Code repetition**: As your Terraform infrastructure grows larger, copying
    and pasting code becomes inefficient and time-consuming. When you need to create
    multiple instances of the same resource, repeating the code is not scalable. It
    leads to code repetition, which is not only time-consuming but also increases
    the chances of human error. Terraform modules solve this problem by encapsulating
    groups of resources dedicated to one task and reducing the amount of repetitive
    code you need to write.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码重复**：随着Terraform基础设施的扩大，复制粘贴代码变得低效且耗时。当需要创建多个相同资源的实例时，重复代码不是一个可扩展的解决方案。它会导致代码重复，这不仅浪费时间，还增加了人为错误的可能性。Terraform模块通过封装专门用于一个任务的资源组来解决这个问题，从而减少了需要编写的重复代码量。'
- en: '**Lack of code clarity**: Copying and pasting code is not only inefficient;
    it also makes the code base difficult to maintain and understand. When working
    with large-scale infrastructure in Terraform, a modular approach can help address
    this issue. Using modules dedicated to specific tasks allows for a more organized
    and readable code base that is easier to maintain and understand.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码不清晰**：复制粘贴代码不仅低效，还会使代码库难以维护和理解。在使用Terraform进行大规模基础设施管理时，采用模块化方法有助于解决这个问题。使用专门用于特定任务的模块可以实现更有组织和易读的代码库，从而更容易维护和理解。'
- en: '**Lack of compliance**: Creating a Terraform module in accordance with best
    practices ensures that the same pattern is followed whenever it is reused. Whether
    it’s for encryption, redundancy, or lifecycle policies, practices configured inside
    the module will be enforced, eliminating the need to repeat the process manually.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性缺失**：根据最佳实践创建Terraform模块，确保每次重复使用时都遵循相同的模式。无论是加密、冗余还是生命周期策略，模块内配置的实践将得到强制执行，消除手动重复该过程的需要。'
- en: '**Human error**: Creating a group of resources from scratch or copy-pasting
    them can lead to errors such as renaming or overwriting something. Terraform modules
    provide a solution to this problem by allowing you to create a single module,
    test it, and reuse it in multiple places. This approach ensures that all elements
    are correct and consistent throughout your infrastructure. By using a single block,
    it becomes easier to check and test your code. Terraform modules also provide
    other benefits, but it’s important not to overuse them. It’s essential to find
    the right balance and maintain it.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人为错误**：从头开始创建资源组或复制粘贴它们可能导致错误，如重命名或覆盖某些内容。Terraform模块通过允许你创建单个模块、测试它并在多个地方重用它来解决这个问题。这种方法确保了所有元素在基础设施中的正确性和一致性。通过使用单一模块，检查和测试代码变得更加容易。Terraform模块还提供了其他好处，但重要的是不要过度使用它们。找到合适的平衡并维持它至关重要。'
- en: How to implement best practices with Terraform AWS modules
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何通过Terraform AWS模块实施最佳实践
- en: When working with AWS infrastructure, it’s important to follow best practices
    to ensure a reliable, scalable, and secure environment. Terraform AWS modules
    provide a way to implement these best practices efficiently and consistently across
    different environments. In this section, we will explore some of the best practices
    for using Terraform AWS modules and how to implement them in your infrastructure.
    We’ll cover topics such as module organization, naming conventions, versioning,
    and more.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理AWS基础设施时，遵循最佳实践对于确保环境的可靠性、可扩展性和安全性至关重要。Terraform AWS模块提供了一种高效、一致地在不同环境中实施这些最佳实践的方法。在本节中，我们将探讨一些使用Terraform
    AWS模块的最佳实践，以及如何在你的基础设施中实施它们。我们将涵盖模块组织、命名约定、版本管理等主题。
- en: Terraform configurations file separation
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Terraform配置文件分离
- en: 'Storing all Terraform code in a single file such as `main.tf` can make it challenging
    to read and maintain the code. A better approach is to split the code across multiple
    files, each dedicated to a specific purpose or resource. This not only makes the
    code more organized but also easier to troubleshoot and update in the future:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有Terraform代码存储在单一文件（如`main.tf`）中会使得代码难以阅读和维护。更好的方法是将代码拆分到多个文件中，每个文件专注于特定的用途或资源。这不仅让代码更加有序，还使得日后更容易进行故障排除和更新：
- en: '`main.tf`: This file calls modules, locals, and data sources to create all
    the necessary resources'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.tf`：此文件调用模块、局部变量和数据源来创建所有必要的资源'
- en: '`variables.tf`: Declarations of variables used in `main.tf` are included in
    this file'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variables.tf`：此文件包含在`main.tf`中使用的变量声明'
- en: '`outputs.tf`: This file contains outputs from the resources created in `main.tf`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs.tf`：此文件包含从`main.tf`中创建的资源输出'
- en: '`versions.tf`: This file specifies version requirements for Terraform and providers'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`versions.tf`：此文件指定了 Terraform 和提供程序的版本要求。'
- en: '`terraform.tfvars`: This file contains variable values and should not be used
    anywhere else'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform.tfvars`：此文件包含变量值，且不应在其他地方使用。'
- en: Follow a standard module structure
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遵循标准的模块结构。
- en: 'The standard module structure must be followed for Terraform modules:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 必须遵循标准模块结构来创建 Terraform 模块：
- en: It is recommended to group resources based on their shared purpose in separate
    files such as `vpc.tf`, `instances.tf`, or `s3.tf` rather than creating individual
    files for each resource
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议根据资源的共享目的，将资源按文件划分，例如 `vpc.tf`、`instances.tf` 或 `s3.tf`，而不是为每个资源创建单独的文件。
- en: Ensure that every module includes a Markdown-formatted `README.md` file containing
    essential documentation about the module
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保每个模块都包含一个以 Markdown 格式编写的 `README.md` 文件，其中包含该模块的必要文档。
- en: Use opinionated modules to do exactly what you need
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用有偏好的模块，做到只做你需要的事。
- en: When creating Terraform modules, it’s recommended to make them opinionated for
    your specific use case, unless you intend to publish them as open source or for
    general-purpose use. You can make use of existing resources, open source modules,
    or even create your own. However, be cautious about creating too many module dependencies,
    as it can become difficult to maintain and update your code.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Terraform 模块时，建议根据你的具体用例将其设定为有明确偏好的模块，除非你打算将其作为开源软件或通用模块发布。你可以利用现有的资源、开源模块，甚至可以创建自己的模块。然而，要小心不要创建过多的模块依赖，因为这可能会使得代码的维护和更新变得困难。
- en: Leverage official open source modules
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用官方开源模块。
- en: Consider using open source modules provided freely by HashiCorp and the platform you
    are using. These modules can be used as primitives by modules you create, or they
    can be used in your deployments as they come if they achieve everything you need.
    You just need to ensure you call specific versions of them so your deployments
    are consistent.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用由 HashiCorp 和你所使用的平台免费提供的开源模块。这些模块可以作为你创建的模块的原始构件，或者如果它们能满足你的所有需求，也可以直接在部署中使用。你只需要确保调用它们的特定版本，以确保部署的一致性。
- en: 'I’ve seen many people who advocate forking open source modules and tweaking
    them. I’d be cautious when following that approach for three reasons:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我见过很多人主张分叉开源模块并进行调整。我会对采用这种方法持谨慎态度，原因有三：
- en: Forking an open source repository and changing it means you are now the maintainer
    of that module, giving yourself and other members of your team a higher workload
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分叉开源仓库并进行修改意味着你现在是该模块的维护者，这会给你和你的团队成员带来更高的工作量。
- en: Engineers are likely to be familiar with an open source module, but not your
    bespoke version of it, hence new staff enrolment would be quicker if you are using
    standard modules
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工程师可能熟悉开源模块，但不太熟悉你自定义的版本，因此，如果使用标准模块，新员工的加入速度会更快。
- en: Open source modules are generally too broad; your in-house modules should be
    opinionated for your use case to make them simpler to use and maintain
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源模块通常太宽泛；你的内部模块应根据你的用例有明确偏好，这样它们会更易于使用和维护。
- en: Forking is sometimes mandatory; some companies such as banks require you to
    fork modules and keep them in-house, but if you do that, you should consider not
    changing them at all and just tracking the official version and updating where
    possible.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 分叉有时是强制性的；一些公司，如银行，要求你分叉模块并将其保留在内部。但如果这样做，你应该考虑不对其进行任何更改，而是仅跟踪官方版本，并尽可能进行更新。
- en: That all being said, there may be situations when importing an official module
    and changing it may suit your needs. In that case, I recommend you strip it bare
    of all the features you don’t need and simplify it as much as possible.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，在某些情况下，导入官方模块并进行修改可能更符合你的需求。在这种情况下，我建议你剥离掉所有不需要的功能，并尽可能简化它。
- en: Also, in that case, consider using open source modules that are designed to
    be forked if you can find them. For example, Google Cloud has the cloud foundation
    fabric modules that are designed just for this purpose.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，在这种情况下，如果能找到专为分叉设计的开源模块，考虑使用它们。例如，谷歌云有专门为此目的设计的云基础设施模块。
- en: Make extensive use of convention over configuration
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广泛使用“约定优于配置”原则。
- en: Your modules will be opinionated to do what you need to do; hence you should
    default as many variables as possible and only require the bare minimum for setup.
    This will help keep your deployment code clean and easy to understand and change.
    Ideally, you should only need five or six variables at most. Default everything
    else if you can.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你的模块会根据你的需求进行设计，因此你应该尽可能默认设置许多变量，仅要求设置最基本的内容。这将有助于保持你的部署代码简洁，易于理解和修改。理想情况下，你最多只需要五六个变量。如果可以，其他都设置为默认值。
- en: Make modules flexible with multiple optional inputs
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过多个可选输入使模块更加灵活
- en: You should be able to use your modules with minimal inputs, but that doesn’t
    mean that they shouldn’t be flexible for changes. This minimizes the need to have
    to change code, and it gives you options based on different situations. That being
    said, don’t get too bogged down trying to predict every scenario under the sun;
    start by making things as simple as possible based on your use case.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够使用最少的输入来运行你的模块，但这并不意味着它们不应该对变化保持灵活。这可以最大限度地减少修改代码的需求，并根据不同的情况提供选择。话虽如此，不要过于纠结于预测所有可能的情况；首先根据你的使用案例尽可能简化事情。
- en: Refer to modules by version
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按版本引用模块
- en: Don’t avoid specifying the version of your modules, as that could break your
    deployments whenever you make changes to them. Consider using semantic versioning to
    update your modules.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 不要避免指定模块的版本，因为每次对模块进行更改时，它可能会破坏你的部署。考虑使用**语义版本控制**来更新你的模块。
- en: Consider bundling modules together if they serve a common purpose
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果模块服务于共同目的，考虑将它们捆绑在一起
- en: At the start of a project, you may consider keeping your modules and deployments
    in the same repository and refer to them by path. As your product matures, you
    may want to move these modules to a separate repository to be able to refer to
    them by version and maintain them separately.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目开始时，你可能会考虑将模块和部署保存在同一个仓库中，并通过路径引用它们。随着产品的成熟，你可能希望将这些模块迁移到独立的仓库中，以便按版本引用并单独维护它们。
- en: Having one repository per module is useful if your modules need to be maintained
    by different teams or if they are common modules used by multiple projects. However,
    if you have a set of closely related modules, consider keeping them all in one
    repository and using them as submodules.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块一个仓库在某些情况下非常有用，特别是当你的模块需要由不同团队维护，或者它们是多个项目共享的公共模块时。然而，如果你有一组紧密相关的模块，考虑将它们都保存在一个仓库中，并将其作为子模块使用。
- en: You can still version them in this way and it is much easier to manage them.
    Remember that you can always separate the modules later in their own repositories,
    but always start with the simplest setup possible.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然可以以这种方式进行版本控制，这样管理起来会更加轻松。记住，你总是可以稍后将模块分开放在各自的仓库中，但总是从最简单的设置开始。
- en: Consider using variable and naming validation
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑使用变量和命名验证
- en: Terraform has a relatively new feature where you can validate names with **Regular
    Expressions** (**regex**). This is very useful to avoid naming errors with your
    platform before you hit **Apply**. You could also enforce the way your resources
    are named by concatenating inputs such as labels and prefixes while validating
    each of them, keeping your platform naming consistent.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 有一个相对较新的功能，你可以使用**正则表达式**（**regex**）验证名称。这对于在点击**应用**之前避免平台的命名错误非常有用。你还可以通过连接输入项（如标签和前缀）并验证每个输入，强制资源的命名方式，从而保持平台命名的一致性。
- en: '![Figure 5.6 –  Naming validation](img/B18198_05_06.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 命名验证](img/B18198_05_06.jpg)'
- en: Figure 5.6 – Naming validation
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 命名验证
- en: Use locals correctly
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正确使用 locals
- en: 'I’ve seen locals in situations where variables would be better suited. I find
    locals to be very useful, especially in the following situations:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我见过一些地方使用了 locals，而变量可能会更合适。我发现 locals 在以下情况下非常有用：
- en: Using functions on your outputs and/or inputs
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在输出和/或输入中使用函数
- en: Concatenating variables to form names of resources
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过连接变量来形成资源的名称
- en: Using conditional expressions
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用条件表达式
- en: You can keep locals in their own file, but I generally recommend keeping them
    in the same file, close to the code they are used for.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 locals 保存在独立的文件中，但我一般建议将它们保留在同一个文件中，靠近它们所使用的代码部分。
- en: Keep the code in your module logically separated
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持模块中代码的逻辑分离
- en: I generally advocate keeping the structure of the files standard to avoid confusion. However,
    if your module requires over 200 lines of code, not including variables, you should
    consider splitting the `main.tf` into multiple files according to what they do
    and keep all related resources and locals within that file. This makes it easier
    to modify and read than having to search through a long `main.tf` file—even if
    that file is separated with comment lines.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常提倡保持文件结构的标准化，以避免混乱。然而，如果你的模块代码超过 200 行（不包括变量），你应该考虑根据文件功能将 `main.tf` 拆分为多个文件，并将所有相关的资源和本地变量保留在该文件中。这样比起在长长的
    `main.tf` 文件中进行搜索（即使该文件用注释行进行了分隔），更容易进行修改和阅读。
- en: Separate required and optional variables
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分开必需的和可选的变量
- en: To improve the readability of your code, keep required variables at the top
    and optional variables at the bottom. Separate them with a comment line in your
    `variables.tf` file.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高代码的可读性，将必需的变量放在顶部，可选变量放在底部，并在你的 `variables.tf` 文件中用注释行将它们分开。
- en: Always have an example folder within your module folder
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在你的模块文件夹中始终包含一个示例文件夹
- en: 'An example folder has two advantages:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 示例文件夹有两个优点：
- en: It gives users an idea of how to use your module in a deployment
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它能让用户了解如何在部署中使用你的模块
- en: You can use it to test your module code before creating a new version for it
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在为其创建新版本之前使用它来测试你的模块代码
- en: Summary
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You have successfully learned about Terraform modules and AWS Providers. These
    are essential tools that will help you manage and deploy your infrastructure in
    AWS using Terraform. Now that you understand how to use modules and providers,
    the next step is to make decisions for your projects in AWS Terraform.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功学习了 Terraform 模块和 AWS 提供程序。这些是帮助你使用 Terraform 在 AWS 中管理和部署基础设施的基本工具。现在你已经了解了如何使用模块和提供程序，下一步是为你的
    AWS Terraform 项目做出决策。
- en: In the next chapter, you will learn how to make decisions about the architecture,
    security, and scalability of your projects. You’ll also explore how to use best
    practices for cost optimization and how to manage your infrastructure as code.
    With these skills, you’ll be able to design and implement robust, efficient, and
    cost-effective infrastructure for your projects in AWS using Terraform. So, get
    ready to take your Terraform skills to the next level and create the best infrastructure
    for your projects in AWS.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何做出关于项目架构、安全性和可扩展性的决策。你还将探索如何使用最佳实践进行成本优化，并学习如何将基础设施管理为代码。掌握这些技能后，你将能够使用
    Terraform 设计和实施强大、高效且具有成本效益的 AWS 项目基础设施。所以，准备好将你的 Terraform 技能提升到新高度，为你的 AWS 项目创建最佳基础设施吧。
