- en: Enterprise Integration - Azure Service Bus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业级集成 - Azure Service Bus
- en: Sometimes, to integrate our applications using messaging solutions, we need
    something more than a simple pipeline, which offers limited capabilities when
    it comes to distributing data and filtering it. Topics, filters, and many more
    features are available in Azure Service Bus, an enterprise-level solution designed
    for providing a reliable, scalable, and efficient way for sending messages to
    multiple receivers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，为了使用消息传递解决方案集成我们的应用程序，我们需要的不仅仅是一个简单的管道，因为管道在分发数据和过滤数据时功能有限。Azure Service
    Bus 提供了主题、过滤器等更多功能，是一个为提供可靠、可扩展和高效的消息发送方式而设计的企业级解决方案，可以向多个接收者发送消息。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Working with Azure Service Bus
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure Service Bus 进行工作
- en: The fundamentals—queues, topics, and relays
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础知识——队列、主题和中继
- en: Securing Azure Service Bus
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护 Azure Service Bus 安全
- en: The advanced features like geo-replication, sessions, or dead lettering
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级功能，如地理复制、会话或死信队列
- en: Handling outages and disasters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理停机和灾难
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To perform the exercises in this chapter, you will need:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，你将需要：
- en: Access to a Microsoft Azure subscription
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Microsoft Azure 订阅
- en: A Visual Studio 2017 instance
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Visual Studio 2017 实例
- en: Visual Studio Code (if you don't have a Visual Studio 2017 instance)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code（如果你没有 Visual Studio 2017 实例）
- en: Azure Service Bus fundamentals
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Service Bus 基础
- en: You have already learned about other messaging solutions, which allow you to
    ease communication between your services, and all are characterized by different
    features. In Azure Event Hub,you were able to process thousands of messages per
    second, while with Azure Storage Queuesyou were given a reliable and durable solution,
    which you could use to work asynchronously on ingested data. In this chapter,
    we will discuss Azure Service Bus, a multitenant cloud messaging service that
    introduces advanced concepts like first-in,first-out(FIFO) messaging, dead lettering,
    or transactions. It is an enterprise-class cloud component able to integrate many
    different services and applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学习了其他消息传递解决方案，这些方案帮助你简化了服务之间的通信，它们都有不同的特性。在 Azure Event Hub 中，你能够每秒处理数千条消息，而在
    Azure 存储队列中，你得到了一个可靠且持久的解决方案，可以用于异步处理接收到的数据。在本章中，我们将讨论 Azure Service Bus，这是一种多租户云消息传递服务，引入了先进的概念，如先进先出（FIFO）消息传递、死信队列或事务。它是一个企业级的云组件，能够集成许多不同的服务和应用程序。
- en: Azure Service Bus versus other messaging services
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Service Bus 与其他消息传递服务的对比
- en: 'In the previous chapters, we discussed the following services, which allowed
    us to process messages:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了以下服务，它们允许我们处理消息：
- en: Azure Event Hub
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Event Hub
- en: Azure Storage Queue
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 存储队列
- en: Azure Event Grid
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Event Grid
- en: 'They all have similarities, yet they are designed to serve different features
    and offer different capabilities. We often use the concepts of eventsand messagesalternately.
    In fact, there is a slight difference between them and understanding this is crucial
    to be able to use different messaging services successfully:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都有相似之处，但设计上服务于不同的功能并提供不同的能力。我们经常交替使用事件和消息这两个概念。实际上，它们之间有细微的区别，理解这一点对于成功使用不同的消息传递服务至关重要：
- en: '**Event**: It carries the information that something happened—the fact that
    someone or something produced an event does not imply any expectations regarding
    how an event should be handled. Events, in general, are lightweight information
    carriers and do not bring the full data to the receiver.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：它携带某些事情发生的信息——某人或某物产生了一个事件，并不意味着对事件的处理有任何预期。一般来说，事件是轻量级的信息载体，不会将完整的数据传递给接收者。'
- en: '**Message**: As opposed to an event, when a producer sends a message, it has
    some expectation about how it will be handled (so there is some kind of a contract
    between a producer and a consumer). What is more, a message carries the raw data
    while an event implies that something happened; a message indicates that a component
    has initialized a communication, which should be handled in the usual way.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息**：与事件不同，当生产者发送消息时，它对消息的处理有一定的预期（因此生产者和消费者之间存在某种契约）。而且，消息携带的是原始数据，而事件表示某事发生了；消息表明组件已初始化通信，应该以常规方式处理。'
- en: 'Now you can recall what you have learned about, for example, Azure Event Gridor Azure
    Event Hub—they both have an eventin the name, but work in quite different ways:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以回想一下您所学的内容，例如，Azure Event Grid 或 Azure Event Hub——它们的名称中都有“事件”二字，但工作方式却大不相同：
- en: '**Azure Event Grid**: It is designed to distribute events and react to changes.
    It delivers only the metadata, and the actual message has to be fetched individually;
    thus, it can be said, that it distributes events.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Event Grid**：它旨在分发事件并响应变化。它仅传递元数据，实际的消息必须单独获取；因此，可以说它分发的是事件。'
- en: '**Azure Event Hub**: It works as a big data pipeline and streams events to
    other services. Depending on your implementation, it can stream both eventsand messages.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Event Hub**：它作为大数据管道工作，将事件流式传输到其他服务。根据您的实现方式，它可以同时流式传输事件和消息。'
- en: 'Now, let''s compare Service Bus:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来对比一下 Service Bus：
- en: '**Azure Service Bus**: It was created to support critical processes, which
    have high requirements regarding the order of processing and reliability of the
    messaging service. You can use it when a messagecannot be lost or duplicated.
    It does not work with the concept of events—instead, it allows you to push the
    whole data, which can be read by a consumer.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Service Bus**：它是为支持关键业务流程而创建的，这些流程对处理顺序和消息服务的可靠性有很高要求。您可以在消息不能丢失或重复的情况下使用它。它不涉及“事件”的概念——相反，它允许您推送整个数据，供消费者读取。'
- en: Azure Service Bus and Azure Storage Queues
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Service Bus 和 Azure Storage Queues
- en: 'You may wonder what the difference between Azure Service Busand Azure Storage
    Queues is. In fact, they are both messaging solutions, which are reliable, durable,
    and can handle multiple messages at once. However, looking more closely, you can
    see they are quite different services, built using different concepts and for
    a different purpose:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想，Azure Service Bus 和 Azure Storage Queues 有什么区别。事实上，它们都是消息传递解决方案，可靠、持久并且能够同时处理多条消息。然而，仔细观察，您会发现它们是完全不同的服务，采用不同的概念并且有不同的目的：
- en: Azure Storage Queuesolutions are forced to poll the queue to receive a message—with Azure
    Service Busyou can establish a long-polling receive operation via TCP.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Storage Queues 强制轮询队列以接收消息，而通过 Azure Service Bus，您可以通过 TCP 建立长轮询接收操作。
- en: In Azure Storage Queue,you can store messages of up to 64 KB—Azure Service Bus
    changes that limit to 256 KB.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure Storage Queue 中，您可以存储最多 64 KB 的消息——而 Azure Service Bus 将该限制提升至 256 KB。
- en: Azure Service Busqueues can store less data than Azure Storage Queues—up to
    80 GB.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Service Bus 队列的存储数据量小于 Azure Storage Queues——最大支持 80 GB。
- en: Azure Service Bus supports consuming batches of messages.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Service Bus 支持批量消息消费。
- en: In Azure Storage Queues,the security model is quite basic—Azure Service Bussupports
    an RBAC model when it comes to securing queues.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure Storage Queues 中，安全模型相对简单——Azure Service Bus 在保障队列安全时支持 RBAC 模型。
- en: Azure Storage Queuesdo not support transactional behaviour.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Storage Queues 不支持事务行为。
- en: 'As you can see, in Azure Service Busthere are many advanced features available,
    which can be very helpful in applications integrating different systems and applications,
    and also in third-party ones. Of course, those additional features cost extra
    as they require a more expensive tier. In Azure Service Bus,you have three tiers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Azure Service Bus 提供了许多高级功能，这些功能对于集成不同系统和应用程序的应用非常有帮助，也适用于第三方应用。当然，这些附加功能需要额外费用，因为它们要求使用更贵的服务层级。在
    Azure Service Bus 中，您有三种服务层级可供选择：
- en: '**Basic**: Supports queues and scheduled messages only.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础版**：仅支持队列和定时消息。'
- en: '**Standard**: All features are available.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准版**：所有功能均可用。'
- en: '**Premium**: The maximum message size is extended to 1 MB, and brokered connections
    are included in the price. This tier also guarantees higher throughput and better
    performance.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级版**：最大消息大小扩展至 1 MB，并且包含代理连接。此级别还保证更高的吞吐量和更好的性能。'
- en: If you require only the basic functionality (without topics, transactions, or
    sessions), an Azure Service Businstance can be even cheaper than using Azure Storage
    Queues. It all depends on your requirements regarding your system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只需要基本功能（不需要主题、事务或会话），那么 Azure Service Bus 实例可能比使用 Azure Storage Queues 更便宜。具体取决于您的系统需求。
- en: Azure Service Bus in Azure portal
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 门户中的 Azure Service Bus
- en: 'To create an instance of the Azure Service Bus, you have to search for the `Service
    Bus`service in the marketplace. You will see a short form where you fill in the
    most crucial information, like the name of the service, the pricing tier, and
    its location:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个Azure服务总线实例，你需要在市场中搜索`Service Bus`服务。你将看到一个简短的表单，在其中填写最关键的信息，如服务名称、定价层级和位置：
- en: '![](img/7cb2862e-d956-4578-a0e5-51bdc1db1d45.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cb2862e-d956-4578-a0e5-51bdc1db1d45.png)'
- en: 'For now, it is all you have to enter—just click on the Createbutton and wait
    a second until a service is created. The Overviewblade shows a bit more information,
    but as you can see, it is very similar to the one you saw when working with Azure
    Event Hub:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你只需填写这些内容——点击创建按钮，稍等片刻，服务就会创建完成。概述面板显示了更多信息，但如你所见，它与在使用Azure事件中心时看到的非常相似：
- en: '![](img/2f32e2b9-9097-4286-aa08-9a7abd4cecef.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f32e2b9-9097-4286-aa08-9a7abd4cecef.png)'
- en: 'In the preceding screenshot, you see that the+ Topicbutton is grayed out—this
    is because I selected the basictier for this exercise. By clicking on the + Queuebutton,
    you will be able to create a new queue:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你会看到+ 主题按钮被灰色禁用——这是因为我为本次练习选择了基本层。点击+ 队列按钮，你将能够创建一个新的队列：
- en: '![](img/fb8d483d-8ca9-4ccb-833c-995abb0f4e89.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb8d483d-8ca9-4ccb-833c-995abb0f4e89.png)'
- en: 'Here things are getting a little bit more complicated:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的事情变得有些复杂：
- en: 'Name: This is the unique name of a queue.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：这是队列的唯一名称。
- en: 'Max queue size: You can decide the maximum size of a queue (as opposed to a
    fixed size of 80 GB in Azure Storage Queue).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大队列大小：你可以决定队列的最大大小（与Azure存储队列中的固定80 GB大小不同）。
- en: 'Message time to live: In Azure Storage Queues,the maximum lifetime of a message
    was 7 days. Here you can specify the custom lifetime of a message before it is
    deleted (or moved to a dead letter queue).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息存活时间：在Azure存储队列中，消息的最大存活时间为7天。在这里，你可以指定消息在被删除（或移动到死信队列）之前的自定义存活时间。
- en: 'Lock duration: When a message is picked up by a consumer, it is locked for
    a fixed time period to avoid duplicated reads. Here you can customize it (up to
    a maximum of 5 minutes).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定持续时间：当消费者提取消息时，消息会在固定时间段内被锁定，以避免重复读取。在这里，你可以自定义锁定时间（最多为5分钟）。
- en: 'Enable duplicate detection: If you want to ensure the "exactly once" delivery
    model during a fixed time period, you can enable this option. It enables you to
    configure a duplicate detection window in which a history of processed messages
    will be kept.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用重复检测：如果你想确保在固定时间段内实现“恰好一次”的投递模式，可以启用此选项。它允许你配置一个重复检测窗口，在该窗口内会保留已处理消息的历史记录。
- en: 'Enable dead lettering on message expiration: If a message expires, it is automatically
    deleted. To push it to a dead letter queue instead, enable this option.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用消息过期时的死信处理：如果消息过期，它会被自动删除。若要将其推送到死信队列，而不是删除，请启用此选项。
- en: 'Enable sessions: Sessions in Azure Service Busensure FIFO message processing.
    To make sure that the first message pushed to a service is the one to be processed,
    turn this feature on.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用会话：Azure服务总线中的会话确保FIFO（先进先出）消息处理。为了确保最早推送到服务的消息是最先处理的消息，请启用此功能。
- en: 'Enable partitioning: This option detaches a queue from a single messaging store,
    so in fact you are ending with multiple queues. This option ensures that even
    if a store has an outage, the whole queue or a topic will not go down. There are
    some limitations, however, regarding this feature—one is that with partitioning
    you cannot send messages belonging to different sessions in a single transaction.
    What is more, there is a limit of 100 partitioned queues or topics per namespace.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用分区：此选项将队列从单一的消息存储中分离出来，实际上你将得到多个队列。此选项确保即使存储出现故障，整个队列或主题也不会出现停机。然而，关于此功能有一些限制——其中之一是启用分区后，你不能在单个事务中发送属于不同会话的消息。更重要的是，每个命名空间最多只能拥有100个分区队列或主题。
- en: Partitioned queues and topics are not supported in the premiumtier of Azure
    Service Bus.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure服务总线的高级层中，不支持分区队列和主题。
- en: 'This is how a queue looks when partitioning is enabled:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 启用分区时，队列的样子如下：
- en: '![](img/80879d97-97b3-494a-83ba-a16583f375fe.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80879d97-97b3-494a-83ba-a16583f375fe.png)'
- en: As you can see, the maximum size of a queue is displayed as 16 GB—this is because
    with partitioning enabled, we are ending with  16 partitions—each hosting a queue
    of the maximum size of 1 GB.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，队列的最大大小显示为16 GB——这是因为启用分区后，我们将得到16个分区，每个分区托管一个最大为1 GB的队列。
- en: Because the maximum size of a single queue is set as 5 GB, you can achieve the
    maximum size of 80 GB by using partitioning. With that feature enabled, the maximum
    size will be 5 GB * 16 partitions = 80 GB.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于单个队列的最大大小被设置为 5 GB，你可以通过使用分区来实现最大大小 80 GB。启用此功能后，最大大小将为 5 GB * 16 个分区 = 80
    GB。
- en: Queues, topics, and relays
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列、主题和中继
- en: 'Azure Service Bussupports three different kinds of entities:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Bus支持三种不同类型的实体：
- en: Queues
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 队列
- en: Topics
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主题
- en: Relays
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中继
- en: All three give you different options when handling communication.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种方式为你提供了不同的通信处理选项。
- en: Queues
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列
- en: 'A queue is the simplest entity available in the service. You can define it
    as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 队列是服务中最简单的实体。你可以如下定义它：
- en: '![](img/087852d2-cf23-4439-b557-4a794cfeb67c.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/087852d2-cf23-4439-b557-4a794cfeb67c.png)'
- en: 'In the preceding sample, you can see that we have the following concepts:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，你可以看到我们有以下概念：
- en: '**Producer**: An application or a service, which pushes a message to a queue'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产者**：一个应用程序或服务，将消息推送到队列'
- en: '**Queue**: A container for messages'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**队列**：消息容器'
- en: '**Consumer**: An application or a service, which reads messages from a queue
    using a pullmodel'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者**：一个应用程序或服务，通过拉取模型从队列读取消息'
- en: A pullmodel means that a producerhas actually to ask a queue to receive messages.
    Of course, there can be multiple producers and multiple consumers—this is where
    the lock durationfeature is especially helpful as it ensures that only a single
    consumer reads a message at any one time.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取模型意味着生产者实际上需要向队列请求接收消息。当然，可以有多个生产者和多个消费者——此时锁定持续时间功能特别有用，因为它确保在任何时刻只有一个消费者读取消息。
- en: Topics
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题
- en: 'Topics are a slightly different model than queues as they allow you to implement
    a pub/sub communication model. When a queue is a point-to-point communication,
    topics give you an option to distribute different messages to a different queue:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 主题与队列略有不同，因为它们允许你实现发布/订阅通信模型。当队列是点对点通信时，主题让你有机会将不同的消息分发到不同的队列：
- en: '![](img/21559fcf-4dfc-4e8d-866d-39a4b4bfba69.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21559fcf-4dfc-4e8d-866d-39a4b4bfba69.png)'
- en: This model makes it possible to filter messages and isolate them, so a consumer
    reads only those, which they are interested in.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模型使得可能对消息进行过滤并将其隔离，以便消费者只读取他们感兴趣的消息。
- en: Remember, topics are not available in the basictier—you have to use at least
    the standard tier.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，主题在基础层不可用——你必须至少使用标准层。
- en: Relays
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中继
- en: 'Both queues and topics are models, which are designed to deliver one-way communication
    only—a producer sends a message and a receiver reads it. If you want to implement
    bidirectional communication, you have to use a relay:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 队列和主题都是模型，旨在仅提供单向通信——生产者发送消息，接收者读取消息。如果你想实现双向通信，你需要使用中继：
- en: '![](img/640acb15-50ca-4b4d-a9bf-56137eb57804.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/640acb15-50ca-4b4d-a9bf-56137eb57804.png)'
- en: 'Azure Relayis, in fact, a separate service, and we will not cover it in this
    chapter. There are, however, many great features, which you may find helpful in
    your applications:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Relay 实际上是一个独立的服务，我们不会在本章中讨论它。然而，仍然有许多很棒的功能，你可能会在应用程序中找到它们的帮助：
- en: It is designed to expose services securely, which are hosted within a corporate
    network.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它旨在安全地暴露托管在公司网络内的服务。
- en: It allows different communication models like one-directional, pub/sub, andtwo-way
    communication.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许不同的通信模型，如单向、发布/订阅和双向通信。
- en: It does not alter the network as a VPN does, making it more stable and scoped
    to a single application endpoint.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不像 VPN 那样改变网络，因此更加稳定，并且限制于单个应用程序端点。
- en: Azure Service Bus design patterns
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Service Bus 设计模式
- en: Azure Service Bus is often a central point of integration for many different
    cloud services—it can be used in a variety of scenarios, including data integration,
    broadcasting information, or even bidirectional communication. As the service
    is rich in different features, you can use it to implement various responsibilities.
    You can find many examples of design patterns for Azure Service Bus in the *Further
    reading* section in this chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Bus 通常是许多不同云服务的集成中心——它可以用于多种场景，包括数据集成、信息广播，甚至双向通信。由于该服务具有丰富的功能，你可以使用它实现各种责任。在本章的*进一步阅读*部分，你可以找到许多
    Azure Service Bus 设计模式的示例。
- en: Developing solutions with Azure Service Bus SDK
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure Service Bus SDK 开发解决方案
- en: 'There is a rich database of many different examples for working with Azure
    Service Bus*, *available on GitHub (you can find a link in the *Further reading*section),
    so we will cover only the basic ones in this chapter. Here you can find the most
    simple way to send a message to a queue:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 上有一个丰富的数据库，包含许多不同的示例，用于与 Azure 服务总线合作（你可以在*进一步阅读*部分找到链接），所以我们将在本章中只介绍基本的示例。这里是将消息发送到队列的最简单方法：
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, all it requires (at least to get the basic functionality) is
    to use a `QueueClient`instance. If you want to work with a topic, you could use `TopicClient`instead:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，所需的只是使用一个`QueueClient`实例（至少要实现基本功能）。如果你想使用主题，则可以使用`TopicClient`：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In fact, all you need is to install the `Microsoft.Azure.ServiceBus`NuGet package.
    After I ran the preceding code three times and checked my queue, this is what
    I saw in the portal:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，你需要做的就是安装`Microsoft.Azure.ServiceBus`NuGet 包。在我运行上述代码三次并检查我的队列后，我在门户中看到的内容如下：
- en: '![](img/5ff73501-5437-45ea-b680-d232a6a75cc6.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ff73501-5437-45ea-b680-d232a6a75cc6.png)'
- en: 'As you can see, there are three active messages. That means that I have successfully
    published them and they are ready to be pulled. There are many different options
    for pulling a message—here you can find an example using `PeekAsync`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有三条活跃消息。这意味着我已经成功发布了它们，并且它们准备好被拉取。有多种不同的拉取消息方式——这里有一个使用`PeekAsync`的示例：
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, if you only peek messages, you will not create a message store. To
    actually do that, you have to use `ReceiveAsync`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你只是查看消息，而不是接收消息，你将不会创建消息存储。要做到这一点，你必须使用`ReceiveAsync`：
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The difference will be visible when you read messages using both methods. `PeekAsync`will
    not change the state of messages (so they will be still visible as active, even
    if you set the `ReceiveMode`option to `ReceiveAndDelete`). `ReceiveAsync`will
    use the value of a `ReceiveMode`option and possibly act as an atomic `CompleteAsync`operation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用两种方法读取消息时，差异会变得明显。`PeekAsync`不会改变消息的状态（即使你将`ReceiveMode`选项设置为`ReceiveAndDelete`，它们仍然会显示为活跃）。`ReceiveAsync`将使用`ReceiveMode`选项的值，并可能充当原子操作`CompleteAsync`。
- en: To mark messages as read after using `PeekAsync`** , **you can use `CompleteAsync`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`PeekAsync`后，要将消息标记为已读，**你可以使用`CompleteAsync`**。
- en: We will cover more advanced scenarios later in this chapter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本章稍后我们将讨论更高级的场景。
- en: Azure Service Bus security
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 服务总线安全性
- en: As Azure Service Busis described as an enterprise-level cloud service designed
    for integrating different services, there are serious expectations regarding the
    security features it offers. Besides shared access tokens, there are new features
    in the preview, which allow much more flexible access management.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Azure 服务总线被描述为一个企业级的云服务，旨在集成不同的服务，因此对其提供的安全功能有很高的期望。除了共享访问令牌外，预览版中还有一些新功能，使访问管理更加灵活。
- en: Managed Service Identity
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管服务身份
- en: '**Managed Service Identity** (**MSI**) is a feature in Azure Cloud, which eases
    authentication between services, without storing credentials in your code. The
    whole description can be found in the link in the *Further reading*section. When
    it comes to using it with Azure Service Bus, there is no additional blade available—what
    you need is just to find an identity in the access control (IAM) blade:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**托管服务身份**（**MSI**）是 Azure 云中的一个功能，它简化了服务之间的身份验证，而无需在代码中存储凭证。完整描述可以在*进一步阅读*部分的链接中找到。当涉及到与
    Azure 服务总线一起使用时，不需要额外的面板——你需要做的只是找到访问控制（IAM）面板中的身份：'
- en: '![](img/13c1bfba-f1f7-491e-bbfc-507df8058109.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13c1bfba-f1f7-491e-bbfc-507df8058109.png)'
- en: 'Now, instead of using an SAS token or access policy, you can use the following
    code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用以下代码，而不是使用 SAS 令牌或访问策略：
- en: '[PRE4]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, the flow becomes much simpler as you do not have to store credentials
    or keys, and instead let the provider handle the authentication.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，流程变得更简单了，因为你不需要存储凭证或密钥，而是让提供商来处理身份验证。
- en: RBAC
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RBAC
- en: 'In Azure Service Bus,there is also a possibility to leverage roles defined
    in Azure AD to grant access to a service. The whole feature relies on the assumption
    that a user will be able to take responsibility for granting access to a Service
    Bus instance. The first step is exactly the same as with MSI authentication: you
    have to add a user to a service, so it gains access and can start pushing and
    receiving messages. The full instructions can be found in the *Further reading*section.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Service Bus 中，您还可以利用在 Azure AD 中定义的角色授予服务访问权限。整个功能依赖于一个假设，即用户能够负责授予访问
    Service Bus 实例的权限。第一步与 MSI 认证完全相同：您需要将用户添加到服务中，以便它可以获得访问权限并开始推送和接收消息。完整的说明可以在
    *进一步阅读* 部分找到。
- en: Note that with the ability to tell explicitly how a user or an application can
    access Azure Service Bus, you are given much better control over how messages
    are published and received. This a great improvement over Azure Storage Queues*, *where
    such features are not available.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过明确告诉用户或应用程序如何访问 Azure Service Bus，您可以更好地控制消息的发布和接收。这是相较于 Azure Storage
    Queues 的一个重要改进，因为在 Azure Storage Queues 中没有此类功能。
- en: There is also a possibility to use RBAC authentication to grant access to a
    service to another service (if MSI is not available). In that scenario, there
    will be no interactive login required as it is all handled by Azure AD.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用 RBAC 认证来授予一个服务访问另一个服务的权限（如果 MSI 不可用）。在这种情况下，将不需要交互式登录，因为所有操作都由 Azure AD
    处理。
- en: Even if interactive login is required, it is not handled by an application so
    you can be sure that it will not handle any credentials directly.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 即使需要交互式登录，它也不会由应用程序处理，因此您可以确保它不会直接处理任何凭据。
- en: Advanced features of Azure Service Bus
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Service Bus 的高级功能
- en: We have already covered some of the basics of the Azure Service Bus,like SDK,
    the most crucial concepts, and security considerations. Now we will focus a little
    bit on more advanced use cases, like dead lettering, performance, sessions, and
    transactions. All those topics are crucial when developing a reliable and important
    service integrating many different applications and systems. Also remember to
    take a look at the Azure Service Busexamples in the *Further reading*section,
    as it points to a GitHub repository where you can find many different use cases
    and concepts when using this service.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了 Azure Service Bus 的一些基础知识，如 SDK、最重要的概念和安全性考虑事项。现在我们将更多地关注一些更高级的用例，如死信、性能、会话和事务。所有这些话题对于开发一个可靠且重要的服务（集成多个不同的应用程序和系统）至关重要。同时，别忘了查看
    *进一步阅读* 部分中的 Azure Service Bus 示例，它指向一个 GitHub 仓库，您可以在其中找到许多使用此服务时的不同用例和概念。
- en: Dead lettering
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 死信
- en: 'In general, dead letteringmeans that there are messages in a queue considered
    as dead (because there was no receiver interested in pulling them) and you have
    two options to proceed:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，死信指的是队列中被认为是“死”的消息（因为没有接收者愿意拉取它们），而且您有两种选择来处理这些消息：
- en: Either delete them permanently
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者将它们永久删除
- en: Push them to an additional queue, named a dead letter queue
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将它们推送到一个额外的队列，名为死信队列
- en: 'In Azure Service Bus,you have two options to push a message to a dead letter
    queue:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Service Bus 中，您有两种选择将消息推送到死信队列：
- en: Set the maximum lifetime of a message—once it expires, it is automatically moved
    to a dead letter queue
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置消息的最大生命周期—一旦过期，它将自动移到死信队列
- en: 'Use the `DeadLetterAsync`method on `MessageReceiver`as follows:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `DeadLetterAsync` 方法在 `MessageReceiver` 上，如下所示：
- en: '[PRE5]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here you can find the complete example, and you can find a lock token:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里您可以找到完整的示例，并可以找到锁定令牌：
- en: '[PRE6]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once you push messages to a dead letter queue, their status will be visible
    in the portal:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将消息推送到死信队列，其状态将在门户中显示：
- en: '![](img/fa7cb48a-a2d6-44c8-9464-886de3c75dc6.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa7cb48a-a2d6-44c8-9464-886de3c75dc6.png)'
- en: 'Of course, it is possible to fetch messages from a dead letter queue. To get
    the name, you can use the following method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以从死信队列中提取消息。要获取队列名称，您可以使用以下方法：
- en: '[PRE7]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Disaster recovery
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灾难恢复
- en: When a disaster happens, you may lose a part or all of your data. In general,
    a disaster is defined as a temporal or permanent loss of the whole service with
    no guarantees that it will become available again. Such disasters are floods,
    earthquakes, or fires, just to name a few. Disasters tend to occur in a single
    region (the probability of disasters occurring in separate regions simultaneously
    is very small), so in general you need two different data centers to implement disaster
    recovery (DR).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生灾难时，您可能会丢失部分或全部数据。一般来说，灾难是指整个服务的暂时性或永久性丧失，且无法保证它会再次可用。此类灾难包括洪水、地震或火灾，仅举几例。灾难通常发生在单一区域（不同区域同时发生灾难的概率非常小），因此，通常您需要两个不同的数据中心来实现灾难恢复（DR）。
- en: Remember, using two different data centers may not be enough if they are close
    to each other—you have to select two that can satisfy your requirements, but at
    the same time are as far from each other as possible.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果两个数据中心彼此距离较近，单靠这两个数据中心可能不足够——您必须选择能够满足您需求的两个数据中心，但同时它们之间的距离应尽可能远。
- en: 'When it comes to implementing DR in Azure Service Bus, the flow is the same
    as in Azure Event Hub:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现Azure Service Bus中的灾难恢复时，流程与Azure Event Hub中的流程相同：
- en: Create the primary region
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建主区域
- en: Create the secondary region
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建辅助区域
- en: Create the pairing
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建配对
- en: Define a trigger for failover
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义故障转移触发器
- en: 'In general, to create the pairing, you need the following code snippet:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，要创建配对，您需要以下代码片段：
- en: '[PRE8]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding sample uses the `Microsoft.Azure.Management.ServiceBus`NuGet package
    for operating on a namespace.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例使用了`Microsoft.Azure.Management.ServiceBus` NuGet包来操作命名空间。
- en: 'Once a pairing is configured and created, it is up to you to trigger and initiate
    a failover. To do so, the following line is all you need:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配对配置并创建完毕，您需要触发并启动故障转移。为此，您只需要以下代码：
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that a failover is initiated against the secondary region—this is crucial
    as the primary region may not be available at the time of initiating an operation.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，故障转移是在辅助区域启动的——这一点至关重要，因为在执行操作时，主区域可能不可用。
- en: 'Once a failover is finished, you can start handling messages using your secondary
    region. There is, however, one important thing to remember: in case another outage
    happens, you want to be able to fail over again. Because of that, it is also very
    important to set up another secondary namespace (and make the current one your
    primary) and pair them to be secure again.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦故障转移完成，您可以开始使用辅助区域处理消息。然而，有一件重要的事情需要记住：如果再次发生故障，您希望能够再次进行故障转移。因此，设置另一个辅助命名空间（并将当前命名空间设为主命名空间）并重新配对以确保安全也非常重要。
- en: Sessions
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话
- en: 'In Azure Service Bus,sessions are used to achieve a FIFO guarantee. In general, the
    service does not control the relationship between messages, so even if in most
    cases the order is preserved, it is not guaranteed. To put a message to a session,
    you have to leverage a `SessionId`property:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure Service Bus中，会话用于实现FIFO保证。一般而言，服务不控制消息之间的关系，因此即使在大多数情况下顺序得以保持，但并不保证。要将消息放入会话中，您必须利用`SessionId`属性：
- en: '[PRE10]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To handle a session on the receiver side, you have to use the `RegisterSessionHandler`method
    on a `QueueClient`instance:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要在接收方处理会话，必须在`QueueClient`实例上使用`RegisterSessionHandler`方法：
- en: '[PRE11]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Additionally, you will have to implement `IMessageSession`**.**
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还必须实现`IMessageSession`**。
- en: Transactions
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务
- en: 'Transactions in Azure Service Busare a wide topic referring to many different
    entities, which you can work with in this service:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Bus中的事务是一个广泛的话题，涉及许多不同的实体，您可以在此服务中与之进行交互：
- en: Clients (`QueueClient`, `TopicClient`)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端（`QueueClient`、`TopicClient`）
- en: Messages (by using operations like `Complete`, `Defer`, `Abandon` , and many
    more)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息（通过使用诸如`Complete`、`Defer`、`Abandon`等操作）
- en: Sessions (`GetState`/`SetState`)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话（`GetState`/`SetState`）
- en: As you can see, there are no receive operations listed; this is because there
    is an assumption that they are atomic by design.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里没有列出接收操作；这是因为假设它们在设计时是原子的。
- en: In general, there is a requirement for using the `ReceiveMode.PeekLock`mode
    when pulling messages and opening a transaction scope inside a loop or an `OnMessage`callback.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在拉取消息并在循环或`OnMessage`回调中打开事务范围时，要求使用`ReceiveMode.PeekLock`模式。
- en: 'You can refer to the following code snippet to get a better picture of what
    we are talking about in this section:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下代码片段，以便更好地理解我们在本节中讨论的内容：
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the above example, a processor (which at the same moment is responsible
    for producing a message) marks a message as complete, while transferring a new
    message to another queue. The whole model leverages the autoforwarding feature
    of Azure Service Bus. The following is an example of a topic:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，处理器（同时负责生成消息）将消息标记为完成，同时将新消息传输到另一个队列。整个模型利用了Azure Service Bus的自动转发功能。以下是主题的一个示例：
- en: '[PRE13]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When a transaction is implemented, you can be sure that committing to a queue
    log will only happen if the whole transaction succeeds; otherwise, there will
    be simply no trace of the messages that were handled inside it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行事务时，只有当整个事务成功时才会提交到队列日志中；否则，处理过的消息将不会留下任何痕迹。
- en: Handling outages and disasters
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理停机和灾难
- en: 'If you make Azure Service Busthe center of your architecture—a service that
    is responsible for integrating dozens of services and handling the communication—you
    have to make sure that it is replicated and invulnerable to disasters. There are
    two topics to consider here: disaster recovery and handling outages. As those
    terms are completely different concepts, you have both to understand them and
    be able to implement a solution in case unexpected issues and accidents occur.
    In the last section of this chapter, you will learn how Azure Service Buscan be
    made into a durable cloud component, on which you and your applications can rely.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将Azure Service Bus作为架构的中心 —— 一个负责集成数十个服务和处理通信的服务，你必须确保其进行了复制并且不易受到灾难影响。这里有两个主题需要考虑：灾难恢复和处理停机。由于这些术语是完全不同的概念，你必须理解它们并能够在意外问题和事故发生时实施解决方案。在本章的最后一节，你将学习如何将Azure
    Service Bus打造成一个可靠的云组件，你和你的应用都可以依赖它。
- en: Handling outages
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理停机
- en: 'While a disaster often means that some part of your data is lost, an outage
    may be described as a service being temporarily unavailable. This is why once
    it is resolved, you may want to synchronize both Service Bus namespaces. While
    this process is automatic, it may take a while. It is stated in the documentation
    that only 50-100 entities will be transferred per minute. For this reason, you
    may consider the concept of active/passive replication:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管灾难通常意味着部分数据丢失，停机可能被描述为服务暂时不可用。这就是为什么一旦解决了这个问题，你可能希望同步两个服务总线命名空间。尽管这个过程是自动的，但可能需要一些时间。文档中指出，每分钟只能传输50-100个实体。因此，你可能需要考虑主动/被动复制的概念：
- en: '**Active**: In such an approach, you have two active namespaces, which actively
    receive messages. Then a receiver always receives both of them—you have to tag
    them properly with the same unique identifier used to detect duplicates (you can
    use either the `MessageId`or `Label`property for that).'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动模式**：在这种方法中，你拥有两个活动的命名空间，可以主动接收消息。然后接收者始终接收两者中的消息 —— 你必须使用相同的唯一标识符正确标记它们，以便检测重复（你可以使用`MessageId`或`Label`属性中的任何一个）。'
- en: '**Passive**: Instead of actively using both queues (or topics), you can use
    the second one only if a message cannot be delivered to the primary namespace.
    This approach has its caveats, however: it may cause a message delivery delay
    (or even loss) or duplicates.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被动模式**：与同时使用两个队列（或主题）相比，只有在无法将消息传递到主要命名空间时，才会使用第二个。然而，这种方法也有其注意事项：可能会导致消息传递延迟（甚至丢失）或重复。'
- en: 'Here, you can find an example of passive replication:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以找到被动复制的一个例子：
- en: '[PRE14]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see, it clearly shows how a duplicate of a message is passed to
    a backup queue. An example of active replication is slightly different:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这清楚地展示了消息副本如何传递到备份队列。主动复制的一个例子略有不同：
- en: '[PRE15]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here we are sending the same message to both namespaces, even if one of them
    fails. One more thing that should be considered to handle outages is using partitioned
    senders (though unavailable in the premiumtier). When using them, you are safe
    in case of an outage of a single messaging store, and you can still use other
    partitions to send and receive data. The following example enables partitioning
    on a topic:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将同一消息发送到两个命名空间，即使其中一个失败。处理停机的另一个需要考虑的事情是使用分区发送者（尽管高级版中不可用）。使用它们时，一旦单个消息存储停机，你仍然可以使用其他分区发送和接收数据。以下示例展示了在主题上启用分区：
- en: '[PRE16]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this short chapter, you learned the basic concepts of Azure Service Busincluding
    queues, topics, SDK, and more advanced features like dead lettering, sessions,
    and transactions. There are still many things to learn: asynchronous messaging,
    **Advanced Message Queuing Protocol** (**AMQP**), and advanced transaction scenarios.
    In general, it is a great service for both simple and critical scenarios as it
    gives you enough flexibility to adjust it to most applications, and at the same
    time it is quite easy to learn how to get started. Remember, you can use the basictier
    for the simplest use cases, which gives you a cheap and reliable solution, a much
    richer option than Azure Storage Queue. In the next chapter, we will focus on
    monitoring services with Azure Application Insights*.*'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一简短的章节中，你学习了 Azure Service Bus 的基本概念，包括队列、主题、SDK 以及更高级的功能，如死信、会话和事务。还有许多内容需要学习：异步消息传递、**高级消息队列协议**（**AMQP**）以及高级事务场景。总体来说，这是一个非常适合简单和关键场景的优秀服务，因为它为大多数应用提供了足够的灵活性，同时也很容易学习如何入门。记住，你可以使用基础层来处理最简单的用例，它为你提供了一个便宜且可靠的解决方案，比
    Azure 存储队列提供了更加丰富的选项。在下一章中，我们将重点介绍使用 Azure Application Insights 进行监控服务*。
- en: Questions
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between a queue and a topic?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 队列和主题有什么区别？
- en: Can you use topics in the basictier?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在基础层中使用主题吗？
- en: What is the reason for using a dead letter queue?
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用死信队列的原因是什么？
- en: What are sessions for in Azure Service Bus?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Service Bus 中的会话是什么？
- en: What is the maximum size of a queue with partitioning enabled, when a single
    queue has the maximum size of 1 GB?
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用分区的队列的最大大小是多少，当单个队列的最大大小为 1 GB 时？
- en: What is the difference between active and passive replication?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 活跃复制和被动复制有什么区别？
- en: How is disaster recovery achieved in Azure Service Bus?
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 Azure Service Bus 中实现灾难恢复？
- en: Further reading
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: MSI overview: [https://docs.microsoft.com/pl-pl/azure/active-directory/managed-identities-azure-resources/overview](https://docs.microsoft.com/pl-pl/azure/active-directory/managed-identities-azure-resources/overview)
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSI 概述：[https://docs.microsoft.com/pl-pl/azure/active-directory/managed-identities-azure-resources/overview](https://docs.microsoft.com/pl-pl/azure/active-directory/managed-identities-azure-resources/overview)
- en: RBAC authentication: [https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-role-based-access-control](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-role-based-access-control)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RBAC 认证：[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-role-based-access-control](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-role-based-access-control)
- en: Service Bus samples: [https://github.com/Azure/azure-service-bus/tree/master/samples/DotNet](https://github.com/Azure/azure-service-bus/tree/master/samples/DotNet)
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Service Bus 示例：[https://github.com/Azure/azure-service-bus/tree/master/samples/DotNet](https://github.com/Azure/azure-service-bus/tree/master/samples/DotNet)
- en: 'Azure Service Bus design patterns: [https://msdn.microsoft.com/en-us/magazine/mt845652.aspx](https://msdn.microsoft.com/en-us/magazine/mt845652.aspx)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Service Bus 设计模式：[https://msdn.microsoft.com/en-us/magazine/mt845652.aspx](https://msdn.microsoft.com/en-us/magazine/mt845652.aspx)
